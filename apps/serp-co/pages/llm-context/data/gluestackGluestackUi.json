[
  {
    "owner": "gluestack",
    "repo": "gluestack-ui",
    "content": "TITLE: Menu Component Basic Structure - React/JSX\nDESCRIPTION: Example showing the basic anatomy of a Menu component with MenuItem, MenuItemLabel, and MenuSeparator elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Menu/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Menu>\n    <MenuItem>\n      <MenuItemLabel />\n    </MenuItem>\n    <MenuSeparator />\n  </Menu>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui dependencies\nDESCRIPTION: Install the required dependencies for gluestack-ui using yarn or npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-style/react react-native-web react-native-svg@13.4.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-style/react react-native-web react-native-svg@13.4.0\n```\n\n----------------------------------------\n\nTITLE: Basic Menu with Placement Options - React Native\nDESCRIPTION: Implementation of a Menu component with customizable placement and icon-labeled menu items. Demonstrates usage of Button trigger and MenuItem components with icons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Menu/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu\n  {...props}\n    trigger={({ ...triggerProps }) => {\n      return (\n        <Button {...triggerProps}>\n          <ButtonText>Menu</ButtonText>\n        </Button>\n      );\n    }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n        <Icon as={GlobeIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Community\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n        <Icon as={PuzzleIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Plugins\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n        <Icon as={PaintBucket} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Theme\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n        <Icon as={SettingsIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Settings\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Add account\" textValue=\"Add account\">\n        <Icon as={AddIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Add account\n        </MenuItemLabel>\n    </MenuItem>\n  </Menu>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript paths for components\nDESCRIPTION: Add a path configuration in tsconfig.json to include the components folder.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n  // ... (other configs)\n  compilerOptions: {\n    // ...\n    \"paths\": {\n      // ...\n      \"@/*\": [\"./src/*\"] // Add relative path\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Testing useEvent Hook's Event Handling Capabilities in React Native Web\nDESCRIPTION: This comprehensive test suite validates the useEvent hook functionality, testing event dispatching on various target types (elements, document, window), event bubbling and capturing phases, and listener management (replacing and removing listeners).\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n */\n\nimport * as React from 'react';\nimport { act, render } from '@testing-library/react';\nimport { createEventTarget } from 'dom-event-testing-library';\nimport useEvent from '..';\ndescribe('use-event', () => {\n  describe('setListener()', () => {\n    test('event dispatched on target', () => {\n      const listener = jest.fn();\n      const targetRef = React.createRef();\n      declare function Component(): any;\n      render(<Component />);\n      const target = createEventTarget(targetRef.current);\n      act(() => {\n        target.click();\n      });\n      expect(listener).toBeCalledTimes(1);\n    });\n    test('event dispatched on parent', () => {\n      const listener = jest.fn();\n      const listenerCapture = jest.fn();\n      const targetRef = React.createRef();\n      const parentRef = React.createRef();\n      declare function Component(): any;\n      render(<Component />);\n      const parent = createEventTarget(parentRef.current);\n      act(() => {\n        parent.click();\n      });\n      expect(listener).toBeCalledTimes(0);\n      expect(listenerCapture).toBeCalledTimes(0);\n    });\n    test('event dispatched on child', () => {\n      const log = [];\n      const listener = jest.fn(() => {\n        log.push('bubble');\n      });\n      const listenerCapture = jest.fn(() => {\n        log.push('capture');\n      });\n      const targetRef = React.createRef();\n      const childRef = React.createRef();\n      declare function Component(): any;\n      render(<Component />);\n      const child = createEventTarget(childRef.current);\n      act(() => {\n        child.click();\n      });\n      expect(listenerCapture).toBeCalledTimes(1);\n      expect(listener).toBeCalledTimes(1);\n      expect(log).toEqual(['capture', 'bubble']);\n    });\n    test('event dispatched on text node', () => {\n      const listener = jest.fn();\n      const targetRef = React.createRef();\n      const childRef = React.createRef();\n      declare function Component(): any;\n      render(<Component />);\n      const text = createEventTarget(childRef.current.firstChild);\n      act(() => {\n        text.click();\n      });\n      expect(listener).toBeCalledTimes(1);\n    });\n    test('listener can be attached to document ', () => {\n      const listener = jest.fn();\n      const targetRef = React.createRef();\n      declare function Component(arg0: any): any;\n      render(<Component target={document} />);\n      const target = createEventTarget(targetRef.current);\n      act(() => {\n        target.click();\n      });\n      expect(listener).toBeCalledTimes(1);\n    });\n    test('listener can be attached to window ', () => {\n      const listener = jest.fn();\n      const targetRef = React.createRef();\n      declare function Component(arg0: any): any;\n      render(<Component target={window} />);\n      const target = createEventTarget(targetRef.current);\n      act(() => {\n        target.click();\n      });\n      expect(listener).toBeCalledTimes(1);\n    });\n    test('listener is replaceable', () => {\n      const listener = jest.fn();\n      const listenerAlt = jest.fn();\n      const targetRef = React.createRef();\n      declare function Component(arg0: any): any;\n      const {\n        rerender\n      } = render(<Component onClick={listener} />);\n      const target = createEventTarget(targetRef.current);\n      act(() => {\n        target.click();\n      });\n      expect(listener).toBeCalledTimes(1);\n      rerender(<Component onClick={listenerAlt} />);\n      act(() => {\n        target.click();\n      });\n      expect(listener).toBeCalledTimes(1);\n      expect(listenerAlt).toBeCalledTimes(1);\n    });\n    test('listener is removed when value is null', () => {\n      const listener = jest.fn();\n      const targetRef = React.createRef();\n      declare function Component(arg0: any): any;\n      const {\n        unmount\n      } = render(<Component off={false} />);\n      const target = createEventTarget(targetRef.current);\n      act(() => {\n        target.click();\n      });\n      expect(listener).toBeCalledTimes(1);\n\n      // this should unset the listener\n      unmount();\n      listener.mockClear();\n      act(() => {\n        target.click();\n      });\n      expect(listener).toBeCalledTimes(0);\n    });\n    test('custom event dispatched on target', () => {\n      const listener = jest.fn();\n      const targetRef = React.createRef();\n      declare function Component(): any;\n      render(<Component />);\n      act(() => {\n        const event = new CustomEvent('magic-event', {\n          bubbles: true\n        });\n        targetRef.current.dispatchEvent(event);\n      });\n      expect(listener).toBeCalledTimes(1);\n    });\n    test('listeners can be set on multiple targets simultaneously', () => {\n      const log = [];\n      const targetRef = React.createRef();\n      const parentRef = React.createRef();\n      const childRef = React.createRef();\n      const listener = jest.fn(e => {\n        log.push(['bubble', e.currentTarget.id]);\n      });\n      const listenerCapture = jest.fn(e => {\n        log.push(['capture', e.currentTarget.id]);\n      });\n      declare function Component(): any;\n      render(<Component />);\n      const child = createEventTarget(childRef.current);\n      act(() => {\n        child.click();\n      });\n      expect(listenerCapture).toBeCalledTimes(2);\n      expect(listener).toBeCalledTimes(2);\n      expect(log).toEqual([['capture', 'parent'], ['capture', 'target'], ['bubble', 'target'], ['bubble', 'parent']]);\n    });\n    test('listeners are specific to each event handle', () => {\n      const log = [];\n      const targetRef = React.createRef();\n      const childRef = React.createRef();\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component with Custom Styling\nDESCRIPTION: Example implementation of an Accordion component with custom styling, icons, and multiple expandable sections. Includes support for expanded state management and custom icons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion, AccordionItem, AccordionHeader, AccordionTrigger, AccordionTitleText, AccordionContentText, AccordionIcon, AccordionContent } from \"@/components/ui/accordion\";\nimport { Divider } from \"@/components/ui/divider\";\nimport { ChevronUpIcon, ChevronDownIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Accordion {...props} className=\"m-5 w-[90%] border border-outline-200\">\n        <AccordionItem value=\"a\">\n          <AccordionHeader>\n            <AccordionTrigger>\n              {({ isExpanded }) => {\n                return (\n                  <>\n                    <AccordionTitleText>\n                      How do I place an order?\n                    </AccordionTitleText>\n                    {isExpanded ? (\n                      <AccordionIcon as={ChevronUpIcon} className=\"ml-3\"/>\n                    ) : (\n                      <AccordionIcon as={ChevronDownIcon} className=\"ml-3\"/>\n                    )}\n                  </>\n                );\n              }}\n            </AccordionTrigger>\n          </AccordionHeader>\n          <AccordionContent>\n            <AccordionContentText>\n              To place an order, simply select the products you want, proceed to\n              checkout, provide shipping and payment information, and finalize\n              your purchase.\n            </AccordionContentText>\n          </AccordionContent>\n        </AccordionItem>\n        <Divider />\n         <AccordionItem value=\"b\">\n          <AccordionHeader>\n            <AccordionTrigger>\n              {({ isExpanded }) => {\n                return (\n                  <>\n                    <AccordionTitleText>\n                      What payment methods do you accept?\n                    </AccordionTitleText>\n                    {isExpanded ? (\n                      <AccordionIcon as={ChevronUpIcon} className=\"ml-3\"/>\n                    ) : (\n                      <AccordionIcon as={ChevronDownIcon} className=\"ml-3\"/>\n                    )}\n                  </>\n                );\n              }}\n            </AccordionTrigger>\n          </AccordionHeader>\n          <AccordionContent>\n            <AccordionContentText>\n              We accept all major credit cards, including Visa, Mastercard, and\n              American Express. We also support payments through PayPal.\n            </AccordionContentText>\n          </AccordionContent>\n        </AccordionItem>\n        </Accordion>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal Component in React\nDESCRIPTION: This code snippet demonstrates how to use the Modal component along with its subcomponents to create a modal dialog in a React application. It includes state management for showing/hiding the modal and handling user interactions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Center } from \"@/components/ui/center\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Modal, ModalBackdrop, ModalContent, ModalCloseButton, ModalHeader, ModalBody, ModalFooter } from \"@/components/ui/modal\";\nimport { Text } from \"@/components/ui/text\";\nimport { Icon, CloseIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App(){\n  const [showModal, setShowModal] = React.useState(false);\n  return (\n    <Center className='h-[300px]'>\n      <Button onPress={() => setShowModal(true)}>\n        <ButtonText>Show Modal</ButtonText>\n      </Button>\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false);\n        }}\n        {...props}\n      >\n        <ModalBackdrop />\n        <ModalContent>\n          <ModalHeader>\n            <Heading size=\"md\" className=\"text-typography-950\">\n              Invite your team\n            </Heading>\n            <ModalCloseButton >\n              <Icon as={CloseIcon} size=\"md\"\n        className=\"stroke-background-400 group-[:hover]/modal-close-button:stroke-background-700 group-[:active]/modal-close-button:stroke-background-900 group-[:focus-visible]/modal-close-button:stroke-background-900\"/>\n            </ModalCloseButton>\n          </ModalHeader>\n          <ModalBody>\n            <Text size=\"sm\" className=\"text-typography-500\">\n              Elevate user interactions with our versatile modals. Seamlessly\n              integrate notifications, forms, and media displays. Make an impact\n              effortlessly.\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              variant=\"outline\"\n              action=\"secondary\"\n              onPress={() => {\n                setShowModal(false);\n              }}\n            >\n              <ButtonText>Cancel</ButtonText>\n            </Button>\n            <Button\n              onPress={() => {\n                setShowModal(false);\n              }}\n            >\n              <ButtonText>Explore</ButtonText>\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Styling with gluestack-ui Components\nDESCRIPTION: This example demonstrates how to apply platform-specific styles to a Button component using the $web, $ios, and $android prefixes. Each platform will render the button with a different background color.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/core-concepts/Universal/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText} from '@/components/Button';\n\nfunction App {\n  return (\n    <Button\n    $web-backgroundColor=\"red\"\n    $ios-backgroundColor=\"blue\"\n    $android-backgroundColor=\"green\"\n        >\n     <ButtonText>Hello World</ButtonText>\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Components with AppProvider in JSX\nDESCRIPTION: This code snippet demonstrates how to wrap multiple components (Card2, App, Talk, and Socail) with the AppProvider component from gluestack design system, establishing the context needed for these UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/getting-started/Installation/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider>\n  <Card2 />\n  <App />\n  <Talk />\n  <Socail />\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Unstyled Button Components with createButton\nDESCRIPTION: This code demonstrates creating a custom unstyled Button component using the createButton function from @gluestack-ui/button. It shows how to define styled components using @gluestack-style/react and pass them to createButton to create a fully customizable Button component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/core-concepts/UnstyledLibrary/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import {styled} from '@gluestack-style/react';\n// import {View, Pressable, Text as RNText, ActivityIndicator} from 'react-native';\nfunction App() {\n  const Root = styled(Pressable, {});\n  const Text = styled(RNText, {});\n  const Group = styled(View, {});\n  const Spinner = styled(ActivityIndicator, {});\n  const Icon = styled(View, {});\n  // Understanding the API\n  const Button = createButton({\n    Root,\n    Text,\n    Group,\n    Spinner,\n    Icon\n  });\n  return (\n    <Button.Group>\n      <Button>\n        <Button.Text $dark-color=\"white\">Hello world</Button.Text>\n      </Button>\n    </Button.Group>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up GluestackUIProvider with Configuration\nDESCRIPTION: Shows how to import the config from @gluestack-ui/config and use it with GluestackUIProvider to apply theming to all child components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/overview/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { config } from '@gluestack-ui/config';\nimport { GluestackUIProvider } from '@gluestack-ui/themed';\n\nfunction App({ children }) {\n  return <GluestackUIProvider config={config}>{children}</GluestackUIProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Width Button in React Form\nDESCRIPTION: This snippet showcases a full-width button within a form layout. It includes input fields, headings, and a link-style button, demonstrating a complete form structure.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText, ButtonIcon } from \"@/components/ui/button\";\nimport { Center } from \"@/components/ui/center\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Input, InputField } from \"@/components/ui/input\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { ArrowLeftIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Center>\n          <Box className='p-5 max-w-96 border border-background-300 rounded-lg'>\n            <VStack className='pb-4' space='xs'>\n              <Heading className='leading-[30px]'>\n                Set new password\n              </Heading>\n              <Text className='text-sm'>\n                Almost done. Enter your new password and you are all set.\n              </Text>\n            </VStack>\n            <VStack space='xl' className='py-2'>\n              <Input>\n                <InputField\n                  className='py-2'\n                  placeholder='New password'\n                />\n              </Input>\n              <Input>\n                <InputField\n                  className='py-2'\n                  placeholder='Confirm new password'\n                />\n              </Input>\n            </VStack>\n            <VStack space='lg' className='pt-4'>\n              <Button\n                size='sm'\n              >\n                <ButtonText>\n                  Submit\n                </ButtonText>\n              </Button>\n              <Box className='flex flex-row'>\n                <Button variant='link' size='sm' className='p-0'>\n                  <ButtonIcon\n                    className='mr-1'\n                    size='md'\n                    as={ArrowLeftIcon}\n                  />\n                  <ButtonText\n                  >\n                    Back to login\n                  </ButtonText>\n                </Button>\n              </Box>\n            </VStack>\n          </Box>\n        </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet with VirtualizedList\nDESCRIPTION: This code demonstrates how to use ActionsheetVirtualizedList for more efficient rendering of large lists. It creates a custom Item component and uses data virtualization techniques with getItem and getItemCount functions to optimize performance.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(!showActionsheet);\n    const data = React.useMemo(() => Array(5).fill(0).map((_, index) => 'Item' + index),[]);\n    const getItem = (_data, index) => ({\n      id: Math.random().toString(12).substring(0),\n      title: _data[index],\n    });\n    const getItemCount = (_data) => _data.length;\n    const Item = React.useCallback(\n      ({ title }) => (\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>{title}</ActionsheetItemText>\n        </ActionsheetItem>\n      ),\n      [handleClose]\n    );\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent>\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n          <ActionsheetVirtualizedList\n            data={data}\n            renderItem={({ item }) => <Item title={item.title} />}\n            keyExtractor={(item) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Input with Password Toggle in React Native\nDESCRIPTION: This example demonstrates how to create a login form with an email input and a password input that includes a toggle to show/hide the password. It uses the Input, InputField, InputIcon, and other components from gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Input/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleState = () => {\n    setShowPassword((showState) => {\n      return !showState;\n    });\n  };\n  return (\n    <FormControl\n      p='$4'\n      borderWidth='$1'\n      borderRadius='$lg'\n      borderColor='$borderLight300'\n      $dark-borderWidth='$1' $dark-borderRadius='$lg' $dark-borderColor='$borderDark800'\n    >\n      <VStack space='xl'>\n        <Heading color='$text900' lineHeight='$md'>\n          Login\n        </Heading>\n        <VStack space='xs'>\n          <Text color='$text500' lineHeight='$xs'>\n            Email\n          </Text>\n          <Input>\n            <InputField\n              type=\"text\"\n            />\n          </Input>\n        </VStack>\n        <VStack space='xs'>\n          <Text color='$text500' lineHeight='$xs'>\n            Password\n          </Text>\n          <Input textAlign='center'>\n            <InputField\n              type={showPassword ? 'text' : 'password'}\n            />\n            <InputSlot pr='$3' onPress={handleState}>\n              <InputIcon as={showPassword ? EyeIcon : EyeOffIcon}  color='$darkBlue500'/>\n            </InputSlot>\n          </Input>\n        </VStack>\n        <Button\n          ml='auto'\n          onPress={()=>{\n            setShowModal(false);\n          }}\n        >\n          <ButtonText color='$white'>\n            Save\n          </ButtonText>\n        </Button>\n      </VStack>\n    </FormControl>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Button Group in gluestack-ui\nDESCRIPTION: This snippet demonstrates how to create a custom button group with an attached layout using gluestack-ui components. It includes an 'Export' button and a button with an icon.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup isAttached>\n  <Button variant=\"outline\" size='xs' borderColor='$backgroundLight300' borderRightWidth='$0' $dark-borderColor=\"$backgroundDark700\">\n    <ButtonText color='$textLight900' $dark-color=\"$textDark300\">\n      Export\n    </ButtonText>\n  </Button>\n  <Button variant=\"outline\" size='xs' borderColor='$backgroundLight300' $dark-borderColor=\"$backgroundDark70\">\n    <ButtonIcon as={ThreeDotsIcon} color=\"$textLight900\" $dark-color=\"$textDark300\"/>\n  </Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing FormControl with Textarea in React\nDESCRIPTION: This code snippet demonstrates how to use FormControl with a Textarea component. It creates a form control for entering comments, including a label and helper text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n<FormControl>\n  <FormControlLabel>\n    <FormControlLabelText>\n      Comment\n    </FormControlLabelText>\n  </FormControlLabel>\n  <Textarea>\n    <TextareaInput />\n  </Textarea>\n  <FormControlHelper >\n    <FormControlHelperText>\n      Type your comment above\n    </FormControlHelperText>\n  </FormControlHelper>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: AlertDialog with Image Implementation in React\nDESCRIPTION: Implements an AlertDialog component with an image, promotional text, and an upgrade button. Shows a discount offer with a promo code in a styled dialog box with responsive layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AlertDialog, AlertDialogContent, AlertDialogBody, AlertDialogBackdrop } from \"@/components/ui/alert-dialog\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Image } from \"@/components/ui/image\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport React from \"react\";\n\nfunction Example(){\n          const [showAlertDialog, setShowAlertDialog] = React.useState(false);\n          const handleClose = () => setShowAlertDialog(false);\n          return (\n            <>\n              <Button onPress={() => setShowAlertDialog(true)}>\n                <ButtonText>Pay</ButtonText>\n              </Button>\n              <AlertDialog isOpen={showAlertDialog} onClose={handleClose}>\n                <AlertDialogBackdrop />\n                <AlertDialogContent className=\"p-0 max-w-[590px] sm:flex-row border-primary-800 rounded-xl\">\n                  <Box className=\"bg-primary-600 min-w-[123px] items-center justify-center native:max-h-[95px]\">\n                    <Image\n                      source={{\n                        uri: \"https://gluestack.github.io/public-blog-video-assets/Image%20Container.png\",\n                      }}\n                      alt=\"image\"\n                      className=\"min-h-[95px] min-w-[95px] h-full w-full\"\n                      size=\"none\"\n                    />\n                  </Box>\n                  <AlertDialogBody\n                    className=\"\"\n                    contentContainerClassName=\"p-6 flex-row justify-between gap-6 md:gap-9 items-center\"\n                  >\n                    <VStack>\n                      <Heading size=\"md\" className=\"text-typography-950 font-semibold leading-6\">\n                        Get Additional Discount\n                      </Heading>\n                      <Text className=\"pt-2 text-typography-950\" size=\"sm\">\n                        Upgrade your plan before your trial ends yo get 5% discount. Use\n                        code{' '}\n                        <Text className=\"font-bold\" size=\"sm\">\n                          #PRO005\n                        </Text>\n                      </Text>\n                    </VStack>\n                    <Button size=\"sm\" className=\"hidden sm:flex\" onPress={handleClose}>\n                      <ButtonText>Upgrade</ButtonText>\n                    </Button>\n                  </AlertDialogBody>\n                </AlertDialogContent>\n              </AlertDialog>\n            </>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Accordion Component\nDESCRIPTION: Shows how to implement an accordion with a default opened item using the defaultValue prop. The example includes multiple accordion items with different content and a single-item expansion behavior.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    return (\n          <Accordion m=\"$5\" variant=\"unfilled\" type=\"single\" defaultValue=\"item-3\" width=\"90%\">\n      <AccordionItem value=\"item-1\" borderRadius=\"$lg\">\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                  What is the defaultValue prop of the Accordion component?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon}  />\n                  ) : (\n                    <AccordionIcon as={PlusIcon}  />\n                  )}\n                \n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            The defaultValue prop of the Accordion component is used to define\n            the open item by default. It is used when the Accordion component is\n            uncontrolled.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <Divider />\n      <AccordionItem value=\"item-2\" borderRadius=\"$lg\">\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   How many size variants does the Accordion component have?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            The Accordion component has three size variants - sm, md and lg.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <Divider />\n           <AccordionItem value=\"item-3\" borderRadius=\"$lg\">\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                  Can I nest my accordions?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            Yes, you can nest your accordions. Refer to the nested accordion example in the docs.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FormControl with Modal in React\nDESCRIPTION: Example of using FormControl within a Modal component to create a settings form with input fields, slider, and switch controls. Demonstrates state management using useState hook.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n        const [showModal, setShowModal] = useState(false);\n        return(\n          <Center h={500}>\n            <Button\n              py='$2.5'\n              px='$3'\n              bg='$darkBlue600'\n              onPress={()=>{\n                setShowModal(true);\n              }}\n            >\n              <ButtonText>\n                Change Settings\n              </ButtonText>\n            </Button>\n            <Modal\n              isOpen={showModal}\n              onClose={() => {\n                setShowModal(false)\n              }}\n            >\n              <ModalBackdrop/>\n              <ModalContent maxWidth='$96'>\n                <ModalBody p='$5'>\n                  <VStack space='xs' mb='$4'>\n                    <Heading>\n                      Change Settings\n                    </Heading>\n                    <Text size='sm'>\n                      Make modifications to the settings with ease.\n                    </Text>\n                  </VStack>\n                  <VStack py='$2' space='xl'>\n                    <FormControl>\n                      <FormControlLabel>\n                        <FormControlLabelText>\n                          Name\n                        </FormControlLabelText>\n                      </FormControlLabel>\n                      <Input>\n                        <InputField\n                          value='Wade Warren'\n                        />\n                      </Input>\n                    </FormControl>\n                    <FormControl>\n                      <FormControlLabel>\n                        <FormControlLabelText>\n                          Email\n                        </FormControlLabelText>\n                      </FormControlLabel>\n                      <Input>\n                        <InputField\n                          value='wadewarren@sample.com'\n                        />\n                      </Input>\n                    </FormControl>\n                    <FormControl>\n                      <FormControlLabel>\n                        <FormControlLabelText>\n                          Volume\n                        </FormControlLabelText>\n                      </FormControlLabel>\n                      <Slider defaultValue={60} sliderTrackHeight={4}>\n                        <SliderTrack>\n                          <SliderFilledTrack/>\n                        </SliderTrack>\n                        <SliderThumb\n                        />\n                    </Slider>\n                    </FormControl>\n                    <FormControl>\n                      <HStack space='sm'>\n                        <Switch size='sm'/>\n                        <FormControlLabelText>\n                          Dark Mode\n                        </FormControlLabelText>\n                      </HStack>\n                    </FormControl>\n                  </VStack>\n                  <Button\n                    mt='$4'\n                    onPress={()=>{\n                      setShowModal(false);\n                    }}\n                  >\n                    <ButtonText>\n                      Save Changes\n                    </ButtonText>\n                  </Button>\n                </ModalBody>\n              </ModalContent>\n            </Modal>\n          </Center>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Button Group with Attached Buttons in JSX\nDESCRIPTION: This code snippet demonstrates the creation of a custom button group with attached buttons. It showcases the use of variant styling, size customization, and icon integration. The buttons are styled differently for light and dark themes, and include text and icon elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_16\n\nLANGUAGE: JSX\nCODE:\n```\n<ButtonGroup isAttached>\n  <Button variant=\"outline\" size='xs' borderColor='$backgroundLight300' borderRightWidth='$0' $dark-borderColor=\"$backgroundDark700\">\n    <ButtonText color='$textLight900' $dark-color=\"$textDark300\">\n      Export\n    </ButtonText>\n  </Button>\n  <Button variant=\"outline\" size='xs' borderColor='$backgroundLight300' $dark-borderColor=\"$backgroundDark70\">\n    <ButtonIcon as={ThreeDotsIcon} color=\"$textLight900\" $dark-color=\"$textDark300\"/>\n  </Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Avatar Component Implementation Example\nDESCRIPTION: A complete example showing how to import styled components, create the Avatar component, and implement it with nested subcomponents in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/avatar/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Badge,\n  Group,\n  Image,\n  FallbackText,\n} from '../components/core/avatar/styled-components';\n\n// import the createAvatar function\nimport { createAvatar } from '@gluestack-ui/avatar';\n\n// Understanding the API\nconst Avatar = createAvatar({\n  Root,\n  Badge,\n  Group,\n  Image,\n  FallbackText,\n});\n\n// Using the avatar component\nexport default () => (\n  <AvatarGroup>\n    <Avatar>\n      <AvatarFallbackText />\n      <AvatarBadge />\n    </Avatar>\n  </AvatarGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Component in JavaScript\nDESCRIPTION: This code snippet shows how to import the Radio component from the @gluestack-ui/themed package in a JavaScript file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Radio } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for gluestack-ui\nDESCRIPTION: A complete Tailwind CSS configuration file that extends the default theme with custom colors, font sizes, breakpoints, and typography settings. It includes various color palettes for primary, secondary, tertiary, and utility colors with CSS variable integration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: 'class',\n  content: [\n    './src/**/**/*.{html,js,jsx,ts,tsx}',\n    './app/**/**/*.{html,js,jsx,ts,tsx}',\n    './layouts/*.{html,js,jsx,ts,tsx}',\n    './screens/**/**/*.{html,js,jsx,ts,tsx}',\n    './components/**/**/*.{html,js,jsx,ts,tsx}',\n  ],\n  presets: [require('nativewind/preset')],\n  theme: {\n    extend: {\n      fontSize: {\n        '2xs': '10px',\n        '3xs': '8px',\n      },\n      screens: {\n        'base': '0px',\n      },\n      colors: {\n        rose: {\n          0: 'var(--color-rose-0)',\n          /* ... remaining color definitions ... */\n        },\n        /* ... other color palettes ... */\n      },\n      fontFamily: {\n        heading: undefined,\n        body: undefined,\n        mono: undefined,\n      },\n      fontWeight: {\n        hairline: '100',\n        extraBlack: '950',\n      },\n      fontSize: {\n        '2xs': '10px',\n      },\n    },\n    plugins: [],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Checkbox Selection in React with gluestack-ui\nDESCRIPTION: This example demonstrates how to create a vertical stack of checkboxes using CheckboxGroup to manage multiple selection. It shows state management with React useState and displays three options with one initially selected.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon, CheckboxGroup } from \"@/components/ui/checkbox\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { CheckIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\tfunction App(){\n            const [values, setValues] = React.useState([\"Eng\"]);\n            return (\n              <CheckboxGroup value={values}  onChange={(keys) => {\n                setValues(keys)\n              }}>\n                <VStack space=\"xl\">\n                  <Checkbox value=\"Eng\">\n                        <CheckboxIndicator>\n                          <CheckboxIcon as={CheckIcon}/>\n                        </CheckboxIndicator>\n                        <CheckboxLabel>Framer</CheckboxLabel>\n                  </Checkbox>\n                  <Checkbox value=\"invison\">\n                      <CheckboxIndicator>\n                        <CheckboxIcon as={CheckIcon}/>\n                      </CheckboxIndicator>\n                      <CheckboxLabel>Invision Studio</CheckboxLabel>\n                  </Checkbox>\n                  <Checkbox value=\"adobe\">\n                    <CheckboxIndicator>\n                      <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                    <CheckboxLabel>Adobe XD</CheckboxLabel>\n                  </Checkbox>\n              </VStack>\n              </CheckboxGroup>\n           )\n        }\n```\n\n----------------------------------------\n\nTITLE: GluestackUI Provider Integration in App Router Layout\nDESCRIPTION: Final layout configuration with Provider and Registry integration for App Router\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport './globals.css';\nimport { Inter } from 'next/font/google';\nimport { Providers } from './providers';\nimport StyledJsxRegistry from './registry';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode,\n}) {\n  return (\n    <html lang=\"en\" className=\"gs gs-light\">\n      <body className={inter.className}>\n        <Providers>\n          <StyledJsxRegistry>{children}</StyledJsxRegistry>\n        </Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Checkbox Group in React\nDESCRIPTION: Creates a horizontal layout of checkboxes using HStack component with multiple selectable options. Uses useState hook to manage checkbox values and includes checkbox indicators with icons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [values, setValues] = useState([\"Illustration\"]);\n  return (\n    <CheckboxGroup value={values} onChange={(keys) => {\n      setValues(keys)\n    }}>\n      <HStack space=\"2xl\">\n        <Checkbox value=\"Illustration\">\n          <CheckboxIndicator mr=\"$2\">\n            <CheckboxIcon as={CheckIcon}/>\n          </CheckboxIndicator>\n          <CheckboxLabel>Illustration</CheckboxLabel>\n        </Checkbox>\n        <Checkbox value=\"Animation\">\n          <CheckboxIndicator mr=\"$2\">\n            <CheckboxIcon as={CheckIcon}/>\n          </CheckboxIndicator>\n          <CheckboxLabel>Animation</CheckboxLabel>\n        </Checkbox>\n        <Checkbox value=\"Typography\">\n          <CheckboxIndicator mr=\"$2\">\n            <CheckboxIcon as={CheckIcon}/>\n          </CheckboxIndicator>\n          <CheckboxLabel>Typography</CheckboxLabel>\n        </Checkbox>\n      </HStack>\n    </CheckboxGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal Component in React\nDESCRIPTION: This code snippet demonstrates how to render a Modal component with various sub-components like ModalBackdrop, ModalContent, ModalHeader, ModalBody, and ModalFooter. It includes state management for showing/hiding the modal and handling user interactions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [showModal, setShowModal] = useState(false);\n  console.log(showModal);\n  const ref = React.useRef(null);\n  return (\n    <Center h={300}>\n      <Button onPress={() => setShowModal(true)} ref={ref}>\n        <ButtonText>Show Modal</ButtonText>\n      </Button>\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false);\n        }}\n        finalFocusRef={ref}\n      >\n        <ModalBackdrop />\n        <ModalContent>\n          <ModalHeader>\n            <Heading size='lg'>Engage with Modals</Heading>\n            <ModalCloseButton>\n              <Icon as={CloseIcon} />\n            </ModalCloseButton>\n          </ModalHeader>\n          <ModalBody>\n            <Text >\n          Elevate user interactions with our versatile modals. Seamlessly integrate notifications, forms, and media displays. Make an impact effortlessly.\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              action=\"secondary\"\n              mr=\"$3\"\n              onPress={() => {\n                setShowModal(false);\n              }}\n            >\n              <ButtonText>Cancel</ButtonText>\n            </Button>\n            <Button\n              size=\"sm\"\n              action=\"positive\"\n              borderWidth='$0'\n              onPress={() => {\n                setShowModal(false);\n              }}\n            >\n              <ButtonText>Explore</ButtonText>\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating styled components with gluestack-style\nDESCRIPTION: Complete example demonstrating how to create styled components using the styled function, apply styles to Pressable and Text components, and use them within a StyledProvider.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/react/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { styled } from '@gluestack-style/react';\n\nconst StyledButton = styled(\n  Pressable,\n  {\n    bg: '$red500',\n    p: '$3',\n  },\n  {}\n);\n\nconst StyledButtonText = styled(Text, {}, {});\n\nexport const App = () => {\n  return (\n    <StyledProvider>\n      <StyledButton>\n        <StyledButtonText>Button</StyledButtonText>\n      </StyledButton>\n    </StyledProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Method Selection Modal in React\nDESCRIPTION: This component creates a modal for selecting payment methods. It uses radio buttons to display different payment options with card details and expiry dates. The modal includes a header, body with payment options, and footer with action buttons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Image } from \"@/components/ui/image\";\nimport { Modal, ModalBackdrop, ModalContent, ModalHeader, ModalBody, ModalFooter } from \"@/components/ui/modal\";\nimport { Radio, RadioGroup, RadioIndicator, RadioIcon } from \"@/components/ui/radio\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { Icon, CircleIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\nimport { CreditCard } from \"lucide-react-native\";\n\nfunction App() {\n        const paymentOptions = [\n          {\n            value: 'visa',\n            cardText: 'Visa ending with 1234',\n            expiryText: 'Expiry 06/2028',\n            imagePath: require('../../../public/images/visa.svg'),\n          },\n          {\n            value: 'mastercard',\n            cardText: 'MasterCard ending with 1234',\n            expiryText: 'Expiry 08/2028',\n            imagePath: require('../../../public/images/master_card.svg'),\n          },\n          {\n            value: 'amex',\n            cardText: 'Amex ending with 5678',\n            expiryText: 'Expiry 05/2032',\n            imagePath: require('../../../public/images/gpay.svg'),\n          },\n        ];\n        const [showModal, setShowModal] = React.useState(false);\n        const [values, setValues] = React.useState(paymentOptions[0].value);\n        return (\n          <>\n            <Button onPress={() => setShowModal(true)}>\n            <ButtonText>Payment method</ButtonText>\n          </Button>\n          <Modal\n            isOpen={showModal}\n            onClose={() => {\n              setShowModal(false);\n            }}\n          >\n            <ModalBackdrop />\n            <ModalContent className=\"max-w-[356px]\">\n              <ModalHeader className=\"flex-col items-start\">\n                <Box className=\"w-[56px] h-[56px] rounded-full bg-background-50 items-center justify-center mb-3\">\n                  <Icon\n                    as={CreditCard}\n                    className=\"stroke-background-900\"\n                    size=\"xl\"\n                  />\n                </Box>\n                <Heading size=\"md\" className=\"text-typography-950\">\n                  Choose your payment method\n                </Heading>\n                <Text size=\"sm\" className=\"text-typography-500\">\n                  Update your plan payment details.\n                </Text>\n              </ModalHeader>\n              <ModalBody className=\"grow-0\">\n                <RadioGroup className=\"gap-3\" value={values} onChange={setValues}>\n                  {paymentOptions.map((option) => (\n                    <Radio\n                      key={option.value}\n                      value={option.value}\n                      aria-label={option.value}\n                      size=\"sm\"\n                      className=\"rounded border border-outline-100 justify-between p-4 gap-5 data-[checked=true]:border-outline-500\"\n                    >\n                      <HStack className=\"gap-3 items-center\">\n                        <Image\n                          source={option.imagePath}\n                          alt=\"image\"\n                          className=\"h-5 w-8\"\n                        />\n                        <VStack>\n                          <Text size=\"xs\">{option.cardText}</Text>\n                          <Text size=\"xs\" className=\"text-typography-500\">\n                            {option.expiryText}\n                          </Text>\n                        </VStack>\n                      </HStack>\n                      <RadioIndicator>\n                        <RadioIcon as={CircleIcon} />\n                      </RadioIndicator>\n                    </Radio>\n                  ))}\n                </RadioGroup>\n              </ModalBody>\n              <ModalFooter className=\"w-full flex-1\">\n                <Button\n                  variant=\"outline\"\n                  action=\"secondary\"\n                  size=\"sm\"\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                  className=\"flex-grow\"\n                >\n                  <ButtonText>Cancel</ButtonText>\n                </Button>\n                <Button\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                  size=\"sm\"\n                  className=\"flex-grow\"\n                >\n                  <ButtonText>Confirm</ButtonText>\n                </Button>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n          </>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Radio Buttons with useRef in React\nDESCRIPTION: This example demonstrates how to create uncontrolled radio buttons using the useRef hook. It directly accesses DOM properties of the radio inputs to retrieve their checked status.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const radioRef = useRef(null);\n  const handleRadioChange = (e) => {\n    e.preventDefault();\n    const checkboxValue = radioRef.current.checked;\n  };\n  return (\n    <RadioGroup>\n      <VStack space='md'>\n        <Radio value=\"Hotels\" ref={radioRef} onChange={handleRadioChange} >\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Hotels</RadioLabel>\n        </Radio>\n        <Radio value=\"Living quarters\" ref={radioRef} onChange={handleRadioChange} >\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Living quarters</RadioLabel>\n        </Radio>\n      </VStack>\n    </RadioGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering AlertDialog Component in React\nDESCRIPTION: This code snippet demonstrates how to use the AlertDialog component in a React application. It shows a button that triggers the AlertDialog, which includes a header, body, and footer with action buttons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example(){\n  const [showAlertDialog, setShowAlertDialog] = React.useState(false);\n  return (\n    <Center h={300}>\n      <Button onPress={() => setShowAlertDialog(true)}>\n        <ButtonText>Click me</ButtonText>\n      </Button>\n      <AlertDialog\n        isOpen={showAlertDialog}\n        onClose={() => {\n        setShowAlertDialog(false);\n        }}\n      >\n        <AlertDialogBackdrop />\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <Heading size='lg'>Deactivate account</Heading>\n            <AlertDialogCloseButton>\n              <Icon as={CloseIcon} />\n            </AlertDialogCloseButton>\n          </AlertDialogHeader>\n          <AlertDialogBody>\n            <Text size='sm'>\n              Are you sure you want to deactivate your account? Your data will be permanently removed and cannot be undone.\n            </Text>\n          </AlertDialogBody>\n          <AlertDialogFooter>\n           <ButtonGroup space=\"lg\">\n            <Button\n              variant=\"outline\"\n              action=\"secondary\"\n              onPress={() => {\n                setShowAlertDialog(false);\n              }}\n            >\n              <ButtonText>Cancel</ButtonText>\n            </Button>\n            <Button\n              bg='$error600'\n              action=\"negative\"\n              onPress={() => {\n                setShowAlertDialog(false);\n              }}\n            >\n              <ButtonText>Deactivate</ButtonText>\n            </Button>\n             </ButtonGroup>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Group Component with State Management\nDESCRIPTION: Implementation of a checkbox group component with controlled state management using React useState hook. Includes disabled state example and vertical stacking layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CheckboxExample(){\n  const [values, setValues] = React.useState([]);\n  return (\n      <Center>\n        <CheckboxGroup\n          value={values}\n          onChange={setValues}\n        >\n          <VStack space=\"sm\">\n            <Checkbox\n            isDisabled={true}\n              value=\"Label 1\"\n            >\n              <CheckboxIndicator mr=\"$2\">\n                <CheckboxIcon as={CheckIcon}/>\n              </CheckboxIndicator>\n              <CheckboxLabel>Label 1</CheckboxLabel>\n            </Checkbox>\n            <Checkbox\n              value=\"Label 2\"\n            >\n              <CheckboxIndicator mr=\"$2\">\n                <CheckboxIcon as={CheckIcon}/>\n              </CheckboxIndicator>\n              <CheckboxLabel>Label 2</CheckboxLabel>\n            </Checkbox>\n          </VStack>\n        </CheckboxGroup>\n      </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet Component in React\nDESCRIPTION: Example demonstrating how to import, configure, and use the Actionsheet component in a React application. Shows the component setup with styled components and basic usage pattern.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/actionsheet/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Content,\n  Item,\n  ItemText,\n  DragIndicator,\n  IndicatorWrapper,\n  Backdrop,\n} from '../components/core/actionsheet/styled-components';\n\n// import the createActionsheet function\nimport { createActionsheet } from '@gluestack-ui/actionsheet';\n\n// Understanding the API\nconst Actionsheet = createActionsheet({\n  Root,\n  Content,\n  Item,\n  ItemText,\n  DragIndicator,\n  IndicatorWrapper,\n  Backdrop,\n});\n\n// Using the actionsheet component\nexport default () => (\n  <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n    <ActionsheetBackdrop />\n    <ActionsheetContent>\n      <ActionsheetDragIndicatorWrapper>\n        <ActionsheetDragIndicator />\n      </ActionsheetDragIndicatorWrapper>\n      <ActionsheetItem onPress={handleClose}>\n        <ActionsheetItemText>Community</ActionsheetItemText>\n      </ActionsheetItem>\n    </ActionsheetContent>\n  </Actionsheet>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Spinner Component\nDESCRIPTION: Example showing how to import and create a basic Spinner component using the createSpinner function and styled components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/spinner/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSpinner } from '@gluestack-ui/spinner';\nimport { Root } from './styled-components';\n\nexport const Spinner = createSpinner({ Root });\n```\n\n----------------------------------------\n\nTITLE: Rendering a Menu Component in React Native\nDESCRIPTION: This snippet demonstrates how to create a basic Menu component with menu items and icons in React Native using gluestack-ui components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Menu, MenuItem, MenuItemLabel } from \"@/components/ui/menu\";\nimport { Icon, AddIcon, GlobeIcon, PlayIcon, SettingsIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Menu\n        {...props}\n        offset={5}\n        disabledKeys={['Settings']}\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          );\n        }}\n      >\n        <MenuItem key=\"Add account\" textValue=\"Add account\">\n          <Icon as={AddIcon} size=\"sm\" className=\"mr-2\" />\n          <MenuItemLabel size=\"sm\">Add account</MenuItemLabel>\n        </MenuItem>\n        <MenuItem key=\"Community\" textValue=\"Community\">\n          <Icon as={GlobeIcon} size=\"sm\" className=\"mr-2\" />\n          <MenuItemLabel size=\"sm\">Community</MenuItemLabel>\n        </MenuItem>\n        <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n          <Icon as={PlayIcon} size=\"sm\" className=\"mr-2\" />\n          <MenuItemLabel size=\"sm\">Plugins</MenuItemLabel>\n        </MenuItem>\n        <MenuItem key=\"Settings\" textValue=\"Settings\">\n          <Icon as={SettingsIcon} size=\"sm\" className=\"mr-2\" />\n          <MenuItemLabel size=\"sm\">Settings</MenuItemLabel>\n        </MenuItem>\n      </Menu>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Select Component with Actionsheet in React\nDESCRIPTION: Complete example of importing, configuring, and using the Select component in a React application. Shows how to create a Select with Actionsheet integration, including styling and component composition.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/select/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import animation configured styled function\nimport { styled } from '../styled';\n\n// import the styles\nimport {\n  Root as StyledSelectRoot,\n  Trigger as StyledSelectTrigger,\n  Input as StyledSelectInput,\n  Icon as StyledSelectIcon,\n} from '../components/core/select/styled-components';\n\nimport {\n  Root,\n  Content,\n  Item,\n  ItemText,\n  DragIndicator,\n  IndicatorWrapper,\n  Backdrop,\n  Icon,\n  FlatList,\n  ScrollView,\n  SectionHeaderText,\n  SectionList,\n  VirtualizedList,\n} from '../components/core/actionsheet/styled-components';\n\n// import the createSelect and createActionsheet function\nimport { createSelect } from '@gluestack-ui/select';\nimport { createActionsheet } from '@gluestack-ui/actionsheet';\n\n// Understanding the API\nconst Actionsheet = createActionsheet({\n  Root,\n  Backdrop,\n  Content,\n  DragIndicator,\n  IndicatorWrapper,\n  Item,\n  ItemText,\n  Icon,\n  ScrollView,\n  VirtualizedList,\n  FlatList,\n  SectionList,\n  SectionHeaderText,\n  AnimatePresence: styled.Component,\n});\n\nconst Select = createSelect(\n  {\n    Root: StyledSelectRoot,\n    Trigger: StyledSelectTrigger,\n    Input: StyledSelectInput,\n    Icon: StyledSelectIcon,\n  },\n  {\n    Portal: Actionsheet,\n    Backdrop: Actionsheet.Backdrop,\n    Content: Actionsheet.Content,\n    DragIndicator: Actionsheet.DragIndicator,\n    DragIndicatorWrapper: Actionsheet.DragIndicatorWrapper,\n    Item: Actionsheet.Item,\n    ItemText: Actionsheet.ItemText,\n    ScrollView: Actionsheet.ScrollView,\n    VirtualizedList: Actionsheet.VirtualizedList,\n    FlatList: Actionsheet.FlatList,\n    SectionList: Actionsheet.SectionList,\n    SectionHeaderText: Actionsheet.SectionHeaderText,\n  }\n);\n\n// Using the select component\nexport default () => (\n  <Select isDisabled={isDisabled} isInvalid={isInvalid}>\n    <SelectTrigger>\n      <SelectInput placeholder=\"Select option\" />\n      <SelectIcon mr=\"$3\">\n        <Icon as={ChevronDownIcon} />\n      </SelectIcon>\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectBackdrop />\n      <SelectContent>\n        <SelectDragIndicatorWrapper>\n          <SelectDragIndicator />\n        </SelectDragIndicatorWrapper>\n        <SelectItem label=\"UX Research\" value=\"UX Research\" />\n        <SelectItem label=\"Web Development\" value=\"Web Development\" />\n      </SelectContent>\n    </SelectPortal>\n  </Select>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Toast with Actions in React Native\nDESCRIPTION: This example demonstrates how to create a Toast component with various action types (info, success, warning, error, attention) using the useToast hook and Button components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Toast/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  const toast = useToast();\n  const toastActions = [\n    {\n      actionType: 'info',\n      title: 'Info',\n      description: 'Your order has been received and is being processed. You will receive a confirmation email shortly.',\n    },\n    {\n      actionType: 'success',\n      title: 'Success!',\n      description: 'Your changes have been saved successfully.',\n    },\n    {\n      actionType: 'warning',\n      title: 'Warning!',\n      description: 'Your account subscription will expire in 5 days. Please renew your subscription to avoid interruption of service.',\n    },\n    {\n      actionType: 'error',\n      title: 'Error!',\n      description: 'There was an error processing your request. Please try again later.',\n    },\n    {\n      actionType: 'attention',\n      title: 'Attention!',\n      description: 'Please review and accept our updated terms and conditions before continuing to use the application.',\n    },\n  ];\n  return (\n    <Center h='$80'>\n      <VStack space='md'>\n        {\n          toastActions.map((action, index)=>{\n            return (\n              <Button\n                key={index}\n                onPress={() => {\n                  toast.show({\n                    placement:\"top\",\n                    render: ({ id }) => {\n                      const toastId = \"toast-\" + id;\n                      return (\n                        <Toast nativeID={toastId} action={action.actionType}>\n                          <VStack space=\"xs\" flex={1}>\n                            <ToastTitle>{action.title}</ToastTitle>\n                            <ToastDescription >\n                            {action.description}\n                            </ToastDescription>\n                          </VStack>\n                        </Toast>\n                      );\n                    },\n                  });\n                }}\n              >\n                <ButtonText>{action.actionType}</ButtonText>\n              </Button>\n            )\n          })\n        }\n      </VStack>\n    </Center>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Theme-Specific Styling Implementation\nDESCRIPTION: Demonstrates how to implement theme-specific styling using the dot prefix notation in both styled components and sx prop.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/Themes/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled, StyledProvider, Theme } from '@gluestack-style/react';\nimport { Pressable } from 'react-native';\nimport { config } from './config';\n\nconst Button = styled(Pressable, {\n  backgroundColor: '$primary',\n  padding: '$3',\n  '.classic': {\n    backgroundColor: '$secondary'\n  }\n});\n\nconst ButtonText = styled(Pressable, {\n  color: '$secondary',\n  '.classic': {\n    color: '$primary'\n  }\n});\n\nexport const App = () => {\n  return (\n    <StyledProvider config={config}>\n      <Theme name=\"classic\">\n        <Button>\n          <ButtonText>Classic Button</ButtonText>\n        </Button>\n      </Theme>\n    </StyledProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Next.js App Router Registry Configuration\nDESCRIPTION: Registry setup for Next.js App Router to handle server-side rendering correctly\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nimport React, { useRef, useState } from 'react';\nimport { useServerInsertedHTML } from 'next/navigation';\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx';\nimport { Html, Head, Main, NextScript } from 'next/document';\n// @ts-ignore\nimport { AppRegistry } from 'react-native-web';\nimport { flush } from '@gluestack-ui/themed';\n\nexport default function StyledJsxRegistry({\n  children,\n}: {\n  children: React.ReactNode,\n}) {\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry());\n  const isServerInserted = useRef(false);\n\n  useServerInsertedHTML(() => {\n    AppRegistry.registerComponent('Main', () => Main);\n    const { getStyleElement } = AppRegistry.getApplication('Main');\n    if (!isServerInserted.current) {\n      isServerInserted.current = true;\n      const styles = [getStyleElement(), jsxStyleRegistry.styles(), ...flush()];\n      jsxStyleRegistry.flush();\n      return <>{styles}</>;\n    }\n  });\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>;\n}\n```\n\n----------------------------------------\n\nTITLE: Form Control with Checkbox Group\nDESCRIPTION: Creates a form control component with multiple checkboxes for newsletter signup. Includes a heading, multiple checkbox options, and a descriptive text using VStack for vertical layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<FormControl>\n  <VStack space=\"sm\">\n    <Heading size=\"sm\">Sign up for newsletters</Heading>\n    <Checkbox>\n      <CheckboxIndicator mr=\"$2\">\n        <CheckboxIcon as={CheckIcon}/>\n      </CheckboxIndicator>\n      <CheckboxLabel>Daily Bits</CheckboxLabel>\n    </Checkbox>\n    <Checkbox>\n      <CheckboxIndicator mr=\"$2\">\n        <CheckboxIcon as={CheckIcon}/>\n      </CheckboxIndicator>\n      <CheckboxLabel>Event Updates</CheckboxLabel>\n    </Checkbox>\n    <Checkbox>\n      <CheckboxIndicator mr=\"$2\">\n        <CheckboxIcon as={CheckIcon}/>\n      </CheckboxIndicator>\n      <CheckboxLabel>Sponsorship</CheckboxLabel>\n    </Checkbox>\n    <Text size=\"sm\">Subscribe to newsletters for updates</Text>\n  </VStack>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Using Radio Buttons with FormControl in React\nDESCRIPTION: This example shows how to integrate radio buttons within a FormControl component for better state management and accessibility features. It creates a time slot selection form with multiple radio options.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<FormControl>\n  <VStack space=\"md\">\n    <Heading size=\"sm\">\n      Which time slot works best for you?\n    </Heading>\n    <RadioGroup>\n      <VStack space=\"sm\">\n        <Radio value=\"Monday\" size=\"md\" >\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Monday</RadioLabel>\n        </Radio>\n        <Radio value=\"Tuesday\" size=\"md\">\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Tuesday</RadioLabel>\n        </Radio>\n        <Radio value=\"Wednesday\" size=\"md\">\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Wednesday</RadioLabel>\n        </Radio>\n      </VStack>\n    </RadioGroup>\n    <Text fontSize=\"$sm\" color=\"$textLight500\">\n      Choose a time slot for the meeting\n    </Text>\n  </VStack>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Implementing Software Update Toast with Action Buttons in React Native using Gluestack UI\nDESCRIPTION: This code demonstrates a software update toast notification with two action buttons ('Not now' and 'Update'). It includes functionality to prevent duplicate toasts from appearing simultaneously and uses icons, flexible layout, and styling through classNames.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText, ButtonGroup } from \"@/components/ui/button\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Pressable } from \"@/components/ui/pressable\";\nimport { useToast, Toast, ToastTitle, ToastDescription } from \"@/components/ui/toast\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { Icon, CloseIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\nimport { RefreshCw } from \"lucide-react-native\";\n\t\nfunction Example() {\n        const toast = useToast();\n        const [toastId, setToastId] = React.useState(0);\n        const handleToast = () => {\n          if (!toast.isActive(toastId)) {\n            showNewToast();\n          }\n        };\n        const showNewToast = () => {\n          const newId = Math.random();\n          setToastId(newId);\n          toast.show({\n            id: newId,\n            placement: 'top',\n            duration: 3000,\n            render: ({ id }) => {\n              const uniqueToastId = \"toast-\" + id;\n              return (\n                <Toast\n                  nativeID={uniqueToastId}\n                  className=\"p-4 gap-4 w-full max-w-[386px] bg-background-0 shadow-hard-2 flex-row\"\n                >\n                  <Box className=\"h-11 w-11 items-center justify-center hidden min-[400px]:flex bg-background-50\">\n                    <Icon\n                      as={RefreshCw}\n                      size=\"xl\"\n                      className=\"stroke-background-800\"\n                    />\n                  </Box>\n                  <VStack space=\"xl\">\n                    <VStack space=\"xs\">\n                      <HStack className=\"justify-between\">\n                        <ToastTitle className=\"text-typography-900 font-semibold\">\n                          Update available\n                        </ToastTitle>\n                        <Pressable onPress={() => toast.close(id)}>\n                          <Icon as={CloseIcon} className=\"stroke-background-500\" />\n                        </Pressable>\n                      </HStack>\n                      <ToastDescription className=\"text-typography-700\">\n                        A new software version is available for download.\n                      </ToastDescription>\n                    </VStack>\n                    <ButtonGroup className=\"gap-3 flex-row\">\n                      <Button\n                        action=\"secondary\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-grow\"\n                      >\n                        <ButtonText>Not now</ButtonText>\n                      </Button>\n                      <Button size=\"sm\" className=\"flex-grow\">\n                        <ButtonText>Update</ButtonText>\n                      </Button>\n                    </ButtonGroup>\n                  </VStack>\n                </Toast>\n              );\n            },\n          });\n        };\n        return (\n          <Button onPress={handleToast}>\n            <ButtonText>Press Me</ButtonText>\n          </Button>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using the Button Component\nDESCRIPTION: Comprehensive example demonstrating how to import styles, create a customized Button component, and use it with subcomponents in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/button/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n} from '../components/core/button/styled-components';\n\n// import the createButton function\nimport { createButton } from '@gluestack-ui/button';\n\n// Understanding the API\nconst Button = createButton({\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n});\n\n// Using the button component\nexport default () => (\n  <ButtonGroup>\n    <Button>\n      <ButtonText />\n      <ButtonSpinner />\n      <ButtonIcon />\n    </Button>\n  </ButtonGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring GluestackUIProvider in React Native\nDESCRIPTION: Example of setting up the GluestackUIProvider at the root of a React Native application, including optional theme configuration\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-rn/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GluestackUIProvider, Text } from '@gluestack-ui/themed';\nimport { config } from '@gluestack-ui/config'; // Optional if you want to use default theme\n\nexport default function App() {\n  return (\n    <GluestackUIProvider config={config}>\n      <Text>Hello World!</Text>\n    </GluestackUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui v2 with NPX\nDESCRIPTION: Command to initialize gluestack-ui v2 in an existing Next.js or Expo project. This command runs the gluestack-ui setup process that helps incorporate the UI components into your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui init\n```\n\n----------------------------------------\n\nTITLE: Implementing GluestackUIProvider with Themed Components\nDESCRIPTION: A code example showing how to implement the GluestackUIProvider with a themed Button component. It demonstrates wrapping the application with the provider and passing the configuration to unlock styled components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/core-concepts/ThemedLibrary/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <GluestackUIProvider config={config}>\n        <Button>\n          <ButtonText>Hello world</ButtonText>\n        </Button>\n    </GluestackUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Groups in React with gluestack-ui\nDESCRIPTION: This example shows how to group multiple radio buttons using the RadioGroup component. It manages the selected value through React state and arranges the options vertically using VStack.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction RadioGroupExample() {\n  const [values, setValues] = useState(\"1st\");\n  return (\n    <RadioGroup value={values} onChange={setValues}>\n      <VStack space=\"sm\">\n        <Radio value=\"1st\">\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Label 1</RadioLabel>\n        </Radio>\n        <Radio value=\"2nd\">\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Label 2</RadioLabel>\n        </Radio>\n        <Radio value=\"3rd\">\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Label 3</RadioLabel>\n        </Radio>\n      </VStack>\n    </RadioGroup>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Select with FormControl in GlueStack UI\nDESCRIPTION: This code snippet demonstrates how to integrate a Select component with FormControl for form validation. It creates a dropdown menu with different color options, displays helper text, and shows validation error messages when requirements aren't met.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<FormControl isRequired isInvalid>\n  <FormControlLabel>\n    <FormControlLabelText>\n      Choose your favorite color\n    </FormControlLabelText>\n  </FormControlLabel>\n  <Select>\n    <SelectTrigger>\n      <SelectInput placeholder=\"Select option\"/>\n      <SelectIcon mr=\"$3\">\n        <Icon as={ChevronDownIcon} />\n      </SelectIcon>\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectBackdrop />\n      <SelectContent>\n        <SelectDragIndicatorWrapper>\n          <SelectDragIndicator />\n        </SelectDragIndicatorWrapper>\n        <SelectItem label=\"Red\" value=\"red\" />\n        <SelectItem label=\"Blue\" value=\"blue\" />\n        <SelectItem label=\"Black\" value=\"black\" />\n        <SelectItem label=\"Pink\" value=\"pink\" isDisabled={true} />\n        <SelectItem label=\"Green\" value=\"green\" />\n      </SelectContent>\n    </SelectPortal>\n  </Select>\n  <FormControlHelper>\n    <FormControlHelperText>\n      You can only select one option\n    </FormControlHelperText>\n  </FormControlHelper>\n  <FormControlError>\n    <FormControlErrorIcon as={AlertCircleIcon} />\n    <FormControlErrorText>Mandatory field</FormControlErrorText>\n  </FormControlError>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Customizing Actionsheet with SectionList in React\nDESCRIPTION: This snippet demonstrates how to customize the Actionsheet component with a SectionList. It shows how to apply custom styling, such as changing the background color and text color.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(!showActionsheet);\n    const DATA = [\n      {\n        title: 'Main dishes',\n        data: ['Pizza', 'Burger', 'Risotto'],\n      },\n      {\n        title: 'Sides',\n        data: ['French Fries', 'Onion Rings', 'Fried Shrimps'],\n      },\n    ];\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent bg=\"black\">\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n           <ActionsheetSectionList\n            sections={DATA}\n            keyExtractor={(item, index) => item + index}\n            renderItem={({ item }) => (\n              <ActionsheetItem onPress={handleClose}>\n                <ActionsheetItemText color=\"white\">{item}</ActionsheetItemText>\n              </ActionsheetItem>\n            )}\n            renderSectionHeader={({ section: { title, data } }) => (\n              <ActionsheetSectionHeaderText  bg=\"black\" >\n                {title}  ({data.length})\n              </ActionsheetSectionHeaderText>\n            )}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu with Selection in React\nDESCRIPTION: Interactive menu component with single selection mode and route handling. Features icons, menu items with labels, and custom trigger button.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Menu, MenuItem, MenuItemLabel, MenuSeparator } from \"@/components/ui/menu\";\nimport { Icon, HelpCircleIcon, MessageCircleIcon, SettingsIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction Example() {\n        const [selected, setSelected] = React.useState(new Set([]));\n        return (\n          <Menu\n            placement=\"bottom left\"\n            selectionMode=\"single\"\n            selectedKeys={selected}\n            offset={5}\n            className=\"p-1.5\"\n            onSelectionChange={(keys) => {\n              setSelected(keys);\n              if (keys.currentKey === 'Account Setting') {\n                console.log('Push to', keys.currentKey, 'route');\n              } else if (keys.currentKey === 'Help Centre') {\n                console.log('Push to', keys.currentKey, 'route');\n              } else if (keys.currentKey === 'Contact Support') {\n                console.log('Push to', keys.currentKey, 'route');\n              } else if (keys.currentKey === 'Download Mobile App') {\n                console.log('Push to', keys.currentKey, 'route');\n              } else if (keys.currentKey === 'Install Chrome Extension') {\n                console.log('Push to', keys.currentKey, 'route');\n              }\n            }}\n            closeOnSelect={true}\n            trigger={({ ...triggerProps }) => {\n              return (\n                <Button {...triggerProps}>\n                  <ButtonText>Menu</ButtonText>\n                </Button>\n              );\n            }}\n          >\n            <MenuItem\n              key=\"Account Settings\"\n              textValue=\"Account Settings\"\n              className=\"p-2 web:min-w-[294px] min-w-[225px]\"\n            >\n              <Icon as={SettingsIcon} size=\"sm\" className=\"mr-2\" />\n              <MenuItemLabel size=\"sm\">Account Settings</MenuItemLabel>\n            </MenuItem>\n            <MenuItem key=\"Help Centre\" textValue=\"Help Centre\" className=\"p-2\">\n              <Icon as={HelpCircleIcon} size=\"sm\" className=\"mr-2\" />\n              <MenuItemLabel size=\"sm\">Help Centre</MenuItemLabel>\n            </MenuItem>\n            <MenuItem\n              key=\"Contact Support\"\n              textValue=\"Contact Support\"\n              className=\"p-2\"\n            >\n              <Icon as={MessageCircleIcon} size=\"sm\" className=\"mr-2\" />\n              <MenuItemLabel size=\"sm\">Contact Support</MenuItemLabel>\n            </MenuItem>\n            <MenuSeparator />\n            <MenuItem\n              key=\"Download Mobile App\"\n              textValue=\"Download Mobile App\"\n              className=\"p-2\"\n            >\n              <MenuItemLabel size=\"sm\">Download Mobile App</MenuItemLabel>\n            </MenuItem>\n            <MenuItem\n              key=\"Install Chrome Extension\"\n              textValue=\"Install Chrome Extension\"\n              className=\"p-2\"\n            >\n              <MenuItemLabel size=\"sm\">Install Chrome Extension</MenuItemLabel>\n            </MenuItem>\n          </Menu>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component in React\nDESCRIPTION: Comprehensive example showing how to import, configure, and use the Accordion component. The example demonstrates creating an expandable accordion with custom icons and content, including the implementation of conditional rendering based on expansion state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/accordion/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n  Icon,\n  TitleText,\n  ContentText,\n} from '../components/core/accordion/styled-components';\n\n// import the createAccordion function\nimport { createAccordion } from '@gluestack-ui/accordion';\n\n// Understanding the API\nconst Accordion = createAccordion({\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n  Icon,\n  TitleText,\n  ContentText,\n});\n\n// Using the Accordion component\nexport default () => (\n  <Accordion>\n    <AccordionItem value=\"a\">\n      <AccordionHeader>\n        <AccordionTrigger>\n          {({ isExpanded }: { isExpanded: boolean }) => {\n            return (\n              <>\n                <AccordionTitleText>\n                  How do I place an order?\n                </AccordionTitleText>\n                {isExpanded ? (\n                  // ChevronUpIcon is imported from 'lucide-react-native'\n                  <AccordionIcon as={ChevronUpIcon} />\n                ) : (\n                  // ChevronDownIcon is imported from 'lucide-react-native'\n                  <AccordionIcon as={ChevronDownIcon} />\n                )}\n              </>\n            );\n          }}\n        </AccordionTrigger>\n      </AccordionHeader>\n      <AccordionContent>\n        <AccordionContentText>\n          Lorem ipsum dolor sit amet consectetur, adipisicing elit.\n        </AccordionContentText>\n      </AccordionContent>\n    </AccordionItem>\n  </Accordion>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Popover with Image in React\nDESCRIPTION: This snippet showcases a Popover component with an image and a newsletter signup form. It uses a button to trigger the popover and includes an image alongside a form for email subscription. The component utilizes various UI elements from a custom library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Image } from \"@/components/ui/image\";\nimport { Input, InputField } from \"@/components/ui/input\";\nimport { Popover, PopoverBackdrop, PopoverBody, PopoverContent } from \"@/components/ui/popover\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport React from \"react\";\n\nfunction App() {\n        const [isOpen, setIsOpen] = React.useState(false);\n        const handleOpen = () => {\n          setIsOpen(true);\n        };\n        const handleClose = () => {\n          setIsOpen(false);\n        };\n        return (\n          <Popover\n            isOpen={isOpen}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            offset={8}\n            trigger={(triggerProps) => {\n              return (\n                <Button\n                  {...triggerProps}\n                  size=\"sm\"\n                >\n                  <ButtonText>\n                    Claim Offer\n                  </ButtonText>\n                </Button>\n              );\n            }}\n          >\n            <PopoverBackdrop/>\n            <PopoverContent className=\"shadow-soft-1 h-full max-w-full p-0\">\n              <PopoverBody\n                className=\"\"\n                contentContainerClassName=\"flex flex-col sm:flex-row w-full h-full\"\n              >\n                <Image\n                  source={{\n                    uri: 'https://i.ibb.co/TqD9vBY/popover-image-1-11zon.jpg',\n                  }}\n                  alt=\"image\"\n                  className=\"sm:h-[270px] sm:w-[211px] h-[150px] w-full\"\n                />\n                <VStack className=\"items-center justify-center w-full max-w-[344px] sm:mx-8 p-4 sm:p-0\">\n                  <Text size=\"sm\" className=\"text-typography-950\">\n                    Sign up to the newsletter and get\n                  </Text>\n                  <Heading size=\"3xl\" className=\"text-typography-950 my-1\">\n                    25% Off\n                  </Heading>\n                  <Input variant=\"outline\" size=\"sm\" className=\"my-4 w-full\">\n                    <InputField placeholder=\"youremail@address.com\" />\n                  </Input>\n                  <Button size=\"xs\" isDisabled className=\"w-full\">\n                    <ButtonText>Subscribe</ButtonText>\n                  </Button>\n                </VStack>\n              </PopoverBody>\n            </PopoverContent>\n          </Popover>\n        )\n      }\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using a Textarea Component in GlueStack UI\nDESCRIPTION: Shows a complete example of importing, creating, and using a customized textarea component with placeholder text. This demonstrates the full implementation pattern.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/textarea/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root, Input } from '../components/core/text-area/styled-components';\n\n// import the createTextarea function\nimport { createTextarea } from '@gluestack-ui/textarea';\n\n// Understanding the API\nconst Textarea = createTextarea({\n  Root,\n  Input,\n});\n\n// Using the textarea component\nexport default () => (\n  <Textarea>\n    <TextareaInput placeholder=\"your text goes here...\" />\n  </Textarea>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Tokens in gluestack-ui Configuration (JSX)\nDESCRIPTION: This code snippet demonstrates how to customize tokens in the gluestack-ui configuration file. It shows how to replace the primary color tokens and includes type declarations for custom configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/customizing-theme/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const config = createConfig({\n  // ... config\n  tokens: {\n    colors: {\n      // replacing primary color\n      primary0: '#ffffff',\n      primary50: '#a3fff4',\n      primary100: '#82fff0',\n      primary200: '#61ffed',\n      primary300: '#45fae5',\n      primary400: '#24f9e1',\n      primary500: '#17f3d9',\n      primary600: '#12e4cb',\n      primary700: '#17ccb7',\n      primary800: '#1ab5a3',\n      primary900: '#1c9f90',\n      primary950: '#000000',\n      ... // Other tokens\n    },\n  },\n});\n\ntype Config = typeof config;\n\ndeclare module '@gluestack-style/react' {\n  interface ICustomConfig extends Config {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActionsheetContent Component\nDESCRIPTION: This snippet shows how ActionsheetContent inherits properties from @legendapp/motion's Motion.View component, allowing for flexible animation capabilities.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Motion } from '@legendapp/motion';\n\nconst ActionsheetContent = Motion.View;\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Usage in React\nDESCRIPTION: Demonstrates how to implement a basic Select component with options for UX Research, Web Development, and other fields. Includes styling props like variants and sizes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Select>\n  <SelectTrigger  {...props}>\n    <SelectInput placeholder=\"Select option\" />\n    <SelectIcon mr=\"$3\">\n      <Icon as={ChevronDownIcon} />\n    </SelectIcon>\n  </SelectTrigger>\n  <SelectPortal>\n    <SelectBackdrop/>\n    <SelectContent>\n      <SelectDragIndicatorWrapper>\n        <SelectDragIndicator />\n      </SelectDragIndicatorWrapper>\n      <SelectItem label=\"UX Research\" value=\"ux\" />\n      <SelectItem label=\"Web Development\" value=\"web\" />\n      <SelectItem\n        label=\"Cross Platform Development Process\"\n        value=\"Cross Platform Development Process\"\n      />\n      <SelectItem\n        label=\"UI Designing\"\n        value=\"ui\"\n        isDisabled={true}\n      />\n      <SelectItem\n        label=\"Backend Development\"\n        value=\"backend\"\n      />\n    </SelectContent>\n  </SelectPortal>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using the Popover Component\nDESCRIPTION: Complete example demonstrating how to import styled components, create a customized Popover, and use it in a React component with proper structure including backdrop, content, header, body, and footer.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/popover/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\n\nimport {\n  Root,\n  Arrow,\n  Content,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n  CloseButton,\n} from '../components/core/popover/styled-components';\n\n// import the createPopover function\nimport { createPopover } from '@gluestack-ui/popover';\n\n// Understanding the API\nexport const Popover = createPopover({\n  Root,\n  Arrow,\n  Content,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n  CloseButton,\n});\n\n// Using the popover component\nexport default () => (\n  <Popover>\n    <PopoverBackdrop />\n    <PopoverContent>\n      <PopoverHeader>\n        <PopoverCloseButton />\n      </PopoverHeader>\n      <PopoverBody />\n      <PopoverFooter />\n    </PopoverContent>\n  </Popover>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SVG Icons in gluestack-ui\nDESCRIPTION: This code demonstrates how to create a custom SVG icon using the createIcon function from gluestack-ui. It creates a GluestackIcon and renders it using the Icon component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Icon/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n        const GluestackIcon = createIcon({\n          // createIcon function is imported from '@gluestack-ui/themed'\n          viewBox: '0 0 32 32',\n          path: (\n            <>\n              {/* Rect, Path is imported from 'react-native-svg' */}\n              <Rect width=\"32\" height=\"32\" rx=\"2\" fill=\"currentColor\"/>\n              <Path d=\"M9.5 14.6642L15.9999 9.87633V12.1358L9.5 16.9236V14.6642Z\" fill=\"white\"/>\n              <Path d=\"M22.5 14.6642L16.0001 9.87639V12.1359L22.5 16.9237V14.6642Z\" fill=\"white\"/>\n              <Path d=\"M9.5 19.8641L15.9999 15.0763V17.3358L9.5 22.1236V19.8641Z\" fill=\"white\"/>\n              <Path d=\"M22.5 19.8642L16.0001 15.0764V17.3358L22.5 22.1237V19.8642Z\" fill=\"white\"/>\n            </>\n          ),\n        });\n      function App () {\n        return <Icon as={GluestackIcon} color='black' size='xl'/>;\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript-enabled Configuration for gluestack-style\nDESCRIPTION: This code demonstrates how to create a TypeScript-compatible configuration object for gluestack-style, defining aliases, tokens, and global styles with proper type assertions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/TypeScript/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n//gluestack style config\nimport { createConfig } from '@gluestack-style/react';\n\nexport const config = createConfig({\n  aliases: {\n    bg: 'backgroundColor',\n    p: 'padding',\n    m: 'margin',\n    /* ... */\n  },\n  tokens: {\n    colors: {\n      rose50: '#fff1f2',\n      rose100: '#ffe4e6',\n      /* ... */\n    },\n    fonts: {\n      /* ... */\n    },\n    space: {\n    '0': 0,\n    '0.5': 2,\n    /* ... */\n    },\n    fontSizes: {\n      /* ... */\n    },\n  },\n  globalStyle: {\n    /* ... */\n  },\n} as const);\n\n// Get the type of Config\ntype ConfigType = typeof config;\n\n// Extend the internal styled config\ndeclare module '@gluestack-style/react' {\n  interface ICustomConfig extends ConfigType {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tooltip Component\nDESCRIPTION: Detailed example showing how to create and use a custom tooltip component with styled components and proper implementation structure.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/tooltip/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\n\nimport { Root, Content } from '../components/core/tooltip/styled-components';\n\n// import the createTooltip function\nimport { createTooltip } from '@gluestack-ui/tooltip';\n\n// Understanding the API\nexport const Tooltip = createTooltip({\n  Root,\n  Content,\n});\n\n// Using the tooltip component\nexport default () => (\n  <Tooltip>\n    <TooltipContent />\n  </Tooltip>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring GluestackUIProvider in App.tsx\nDESCRIPTION: Example of how to set up the GluestackUIProvider at the root of an Expo app with the default theme configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-expo/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GluestackUIProvider, Text, Box } from '@gluestack-ui/themed';\nimport { config } from '@gluestack-ui/config'; // Optional if you want to use default theme\n\nexport default function App() {\n  return (\n    <GluestackUIProvider config={config}>\n      <Box width=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n        <Text>Open up App.js to start working on your app!</Text>\n      </Box>\n    </GluestackUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Card Implementation\nDESCRIPTION: A blog post card component featuring date, title, content preview, and author information. Utilizes gluestack-ui components for layout and styling, including Avatar for author display.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Card/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarFallbackText, AvatarImage } from \"@/components/ui/avatar\";\nimport { Box } from \"@/components/ui/box\";\nimport { Card } from \"@/components/ui/card\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction App(){\n    return (\n    <Card className=\"p-5 rounded-lg max-w-[360px] m-3\"\n    >\n      <Text className=\"text-sm font-normal mb-2 text-typography-700\"\n      >\n        May 15, 2023\n      </Text>\n      <VStack className=\"mb-6\">\n        <Heading size=\"md\" className=\"mb-4\">\n          The Power of Positive Thinking\n        </Heading>\n        <Text size=\"sm\">\n          Discover how the power of positive thinking can transform your life,\n          boost your confidence, and help you overcome challenges. Explore\n          practical tips and techniques to cultivate a positive mindset for\n          greater happiness and success.\n        </Text>\n      </VStack>\n      <Box className=\"flex-row\">\n        <Avatar className=\"mr-3\">\n          <AvatarFallbackText>RR</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://gluestack.github.io/public-blog-video-assets/john.png',\n            }}\n            alt=\"image\"\n          />\n        </Avatar>\n        <VStack>\n          <Heading size=\"sm\" className=\"mb-1\">\n            John Smith\n          </Heading>\n          <Text size=\"sm\">\n            Motivational Speaker\n          </Text>\n        </VStack>\n      </Box>\n    </Card>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Social Media Notification Toast in React\nDESCRIPTION: This code snippet shows how to create a social media-style notification toast using the Toast component. It features an avatar, username, timestamp, and notification message, displayed when a button is clicked. The toast appears at the top of the screen with custom styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarFallbackText, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\nimport { useToast, Toast } from \"@/components/ui/toast\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n          const toast = useToast();\n          return (\n            <Button\n              onPress={() => {\n                toast.show({\n                  placement:\"top\",\n                  render: ({ id }) => {\n                    const toastId = \"toast-\" + id;\n                    return (\n                      <Toast\n                        nativeID={toastId}\n                        className=\"p-4 gap-3 w-full sm:min-w-[386px] max-w-[386px] bg-background-0 shadow-hard-2 flex-row\"\n                      >\n                        <Avatar>\n                          <AvatarFallbackText>JS</AvatarFallbackText>\n                          <AvatarImage\n                            source={{\n                              uri: \"https://gluestack.github.io/public-blog-video-assets/Avatar.png\",\n                            }}\n                          />\n                        </Avatar>\n                        <VStack className=\"web:flex-1\">\n                          <HStack className=\"justify-between\">\n                            <Heading\n                              size=\"sm\"\n                              className=\"text-typography-950 font-semibold\"\n                            >\n                              Jacob Steve\n                            </Heading>\n                            <Text size=\"sm\" className=\"text-typography-500\">\n                              2m ago\n                            </Text>\n                          </HStack>\n                          <Text size=\"sm\" className=\"text-typography-500\">\n                            commented on your photo\n                          </Text>\n                        </VStack>\n                      </Toast>\n                    );\n                  },\n                });\n              }}\n            >\n              <ButtonText>Show Toast</ButtonText>\n            </Button>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing AlertDialog Component - React/JSX\nDESCRIPTION: Complete example showing how to import, configure, and use the AlertDialog component with styled components. Demonstrates the component structure with header, body, footer, and close button implementation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/alert-dialog/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Content,\n  CloseButton,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n} from '../components/core/alert-dialog/styled-components';\n\n// import the createAlertDialog function\nimport { createAlertDialog } from '@gluestack-ui/alert-dialog';\n\n// Understanding the API\nconst AlertDialog = createAlertDialog({\n  Root,\n  Content,\n  CloseButton,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n});\n\n// Using the alert-dialog component\nexport default () => (\n  <AlertDialog>\n    <AlertDialogBackdrop />\n    <AlertDialogContent>\n      <AlertDialogHeader>\n        <Heading>Confirm your request</Heading>\n        <AlertDialogCloseButton>\n          <CloseIcon />\n        </AlertDialogCloseButton>\n      </AlertDialogHeader>\n      <AlertDialogBody>\n        <Text>AlertDialog Body</Text>\n      </AlertDialogBody>\n      <AlertDialogFooter>\n        <Button>\n          <ButtonText></ButtonText>\n        </Button>\n        <Button>\n          <ButtonText></ButtonText>\n        </Button>\n      </AlertDialogFooter>\n    </AlertDialogContent>\n  </AlertDialog>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet with VirtualizedList in React\nDESCRIPTION: This snippet demonstrates how to create an Actionsheet with a VirtualizedList for efficient rendering of large datasets. It includes state management for opening/closing the Actionsheet, data generation, and custom item rendering.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Actionsheet, ActionsheetContent, ActionsheetItem, ActionsheetItemText, ActionsheetDragIndicator, ActionsheetDragIndicatorWrapper, ActionsheetBackdrop, ActionsheetVirtualizedList } from \"@/components/ui/actionsheet\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport React from \"react\";\n\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(false);\n    const data = React.useMemo(() => Array(50).fill(0).map((_, index) => 'Item' + index),[]);\n    const getItem = (_data, index) => ({\n      id: index,\n      title: _data[index],\n    });\n    const getItemCount = (_data) => _data.length;\n    const Item = React.useCallback(\n      ({ title }) => (\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>{title}</ActionsheetItemText>\n        </ActionsheetItem>\n      ),\n      [handleClose]\n    );\n    return (\n    <>\n        <Button onPress={() => setShowActionsheet(true)}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}  snapPoints={[50]}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent>\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n          <ActionsheetVirtualizedList\n            h=\"$56\"\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }) => <Item title={item.title} />}\n            keyExtractor={(item) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form-Controlled Slider in React\nDESCRIPTION: This code snippet demonstrates a form-controlled Slider component integrated with React state. It allows users to select a quantity using the slider, with the value being controlled by the parent component's state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(50);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n    <VStack space=\"lg\">\n    <Heading size=\"sm\">Select the quantity</Heading>\n    <Center w=\"$72\">\n        <Slider\n          sliderTrackHeight={5}\n          size='md'\n          value={sliderValue}\n          onChange={(value) => {\n          handleChange(value);\n          }}>\n          <SliderTrack>\n            <SliderFilledTrack/>\n          </SliderTrack>\n           <SliderThumb/>\n        </Slider>\n    </Center>\n    <Text size=\"sm\">Slide the knob to select the number of products</Text>\n    </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Modal Component in React\nDESCRIPTION: This code snippet defines a React component that renders buttons for different modal sizes and a modal with customizable content. It uses state to manage the modal's visibility and size, and demonstrates the use of various gluestack-ui components for creating a responsive and interactive UI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App(){\n  const [showModal, setShowModal] = React.useState(false);\n  const [size, setSize] = React.useState(undefined);\n  const sizes = ['xs', 'sm', 'md', 'lg', 'full']\n  const ref = React.useRef(null);\n  const handleClick = (currentSize) => {\n    setShowModal(true)\n    setSize(currentSize)\n  }\n  return (\n      <Center h={400}>\n      <VStack space='md'>\n      {sizes.map((currentSize) =>  (<Button key={currentSize} onPress={() => handleClick(currentSize)} >\n            <ButtonText textAlign='center'>{currentSize}</ButtonText>\n          </Button>)\n      )}\n          </VStack>\n          <Modal\n            isOpen={showModal}\n            onClose={() => {\n              setShowModal(false);\n            }}\n          size={size}\n            finalFocusRef={ref}\n          >\n            <ModalBackdrop />\n            <ModalContent>\n              <ModalHeader>\n                <Heading size='lg'>Delete Folder</Heading>\n                <ModalCloseButton>\n                  <Icon as={CloseIcon} />\n                </ModalCloseButton>\n              </ModalHeader>\n              <ModalBody>\n                <Text size=\"sm\">\n                Whoa, slow down there! This modal is like a red light at an intersection, reminding you to stop and think before you proceed. Is deleting this folder the right choice?\n                </Text>\n              </ModalBody>\n              <ModalFooter>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  action=\"secondary\"\n                  mr=\"$3\"\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                >\n                  <ButtonText>Cancel</ButtonText>\n                </Button>\n                <Button\n                  size=\"sm\"\n                  action=\"primary\"\n                  borderWidth='$0'\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                  bg=\"$error700\"\n                  $hover-bg=\"$error800\"\n                  $active-bg=\"$error900\"\n                >\n                  <ButtonText>Explore</ButtonText>\n                </Button>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n        </Center>\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Button Component in JSX\nDESCRIPTION: This snippet demonstrates how to render a basic Button component with text content. It includes props for customization such as size, variant, and action.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button {...props}>\n  <ButtonText>Hello World!</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Sent Toast Notification with Gluestack UI in React Native\nDESCRIPTION: This code creates a simple toast notification confirming successful message delivery. It features an inline icon, a vertical divider, and compact styling. The toast appears when a button is pressed and is positioned at the top of the screen.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Divider } from \"@/components/ui/divider\";\nimport { useToast, Toast, ToastTitle } from \"@/components/ui/toast\";\nimport { Icon } from \"@/components/ui/icon\";\nimport { Send } from \"lucide-react-native\";\n\t\nfunction Example() {\n          const toast = useToast();\n          return (\n            <Button\n              onPress={() => {\n                toast.show({\n                  placement:\"top\",\n                  render: ({ id }) => {\n                    const toastId = \"toast-\" + id;\n                    return (\n                      <Toast\n                        nativeID={toastId}\n                        className=\"px-5 py-3 gap-4 shadow-soft-1 items-center flex-row\"\n                      >\n                        <Icon\n                          as={Send}\n                          size=\"xl\"\n                          className=\"fill-typography-100 stroke-none\"\n                        />\n                        <Divider\n                          orientation=\"vertical\"\n                          className=\"h-[30px] bg-outline-200\"\n                        />\n                        <ToastTitle size=\"sm\">Message sent successfully</ToastTitle>\n                      </Toast>\n                    );\n                  },\n                });\n              }}\n            >\n              <ButtonText>Show Toast</ButtonText>\n            </Button>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB with Icon in React Native Chat Interface\nDESCRIPTION: Example showing a FAB with edit icon implementation in a chat interface context. The component includes a scrollable list of chat messages with user avatars and a floating action button positioned at the bottom.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const data = [\n    {\n      uri: 'https://images.unsplash.com/photo-1599566150163-29194dcaad36?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80',\n      name: 'Kevin James',\n      msg: 'Hi Rachel, What\\'s up',\n    },\n    {\n      uri: 'https://images.unsplash.com/photo-1527980965255-d3b416303d12?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80',\n      name: 'Jacob Jones',\n      msg: 'Good Morning!',\n    },\n    {\n      uri: 'https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80',\n      name: 'Albert Flores',\n      msg: 'Coffee?',\n    },\n  ];\n  return (\n    <Box\n      borderColor='$borderLight200'\n      borderRadius='$lg'\n      borderWidth='$1'\n      p='$6'\n      $dark-bg='$backgroundDark900'\n      $dark-borderColor='$borderDark800'\n      $base-minWidth={240}\n      $sm-minWidth={360}\n      $md-minWidth={476}\n    >\n      <VStack space='md'>\n        {data.map((chatData)=>{\n          return (\n            <HStack space='sm' alignItems='center'>\n              <Avatar size='sm'>\n                <AvatarImage\n                  source={{\n                  uri: chatData.uri,\n                  }}\n                />\n              </Avatar>\n              <VStack>\n                <Heading size='xs'>\n                  {chatData.name}\n                </Heading>\n                <Text size='xs'>\n                  {chatData.msg}\n                </Text>\n              </VStack>\n            </HStack>\n          );\n        })}\n      </VStack>\n      <Fab bg=\"$emerald600\" size='lg'>\n        <FabIcon as={EditIcon}/>\n      </Fab>\n    </Box>\n  );\n```\n\n----------------------------------------\n\nTITLE: Warning Alert Implementation with Icon in GlueStack UI\nDESCRIPTION: Demonstrates a warning alert component with a bomb icon and custom text styling. The alert is configured with an error action and includes formatted text with a heading.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert, AlertText, AlertIcon } from \"@/components/ui/alert\";\nimport { Text } from \"@/components/ui/text\";\nimport { Bomb } from \"lucide-react-native\";\n\nfunction Example() {\n  return (\n    <Alert action=\"error\" className=\"gap-3\">\n          <AlertIcon as={Bomb} size=\"lg\" />\n          <AlertText className=\"text-typography-900\" size=\"sm\">\n            <Text className=\"mr-2 font-semibold text-typography-900\">\n              Heads up:\n            </Text>\n            Once done, this action cannot be undone\n          </AlertText>\n        </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sports Statistics Table with Top and Side Headers in Gluestack UI\nDESCRIPTION: This example shows a basketball player statistics table with both top and side headers. The table has a customized border styling and features player names as side headers in a highlighted column, with performance statistics (points, rebounds, assists, steals, blocks) displayed in the main body cells.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Table/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Table, TableHeader, TableBody, TableHead, TableRow, TableData } from \"@/components/ui/table\";\n\tfunction App(){\n    return (\n<Box className=\"border border-solid border-outline-200 rounded-lg overflow-hidden w-full\">\n      <Table className=\"w-full\">\n        <TableHeader>\n          <TableRow className=\"bg-background-50\">\n            <TableHead className=\"border-0 border-r border-solid border-outline-200\">Player</TableHead>\n            <TableHead>Pts</TableHead>\n            <TableHead>Reb</TableHead>\n            <TableHead>Ast</TableHead>\n            <TableHead>Stl</TableHead>\n            <TableHead>Blk</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            <TableHead className=\"bg-background-50 border-0 border-solid border-r border-outline-200 font-medium\">LeBron James</TableHead>\n            <TableData>30</TableData>\n            <TableData>10</TableData>\n            <TableData>5</TableData>\n            <TableData>5</TableData>\n            <TableData>2</TableData>\n          </TableRow>\n          <TableRow>\n            <TableHead className=\"bg-background-50 border-0 border-solid border-r border-outline-200 font-medium\">Anthony Davis</TableHead>\n            <TableData>21</TableData>\n            <TableData>15</TableData>\n            <TableData>10</TableData>\n            <TableData>3</TableData>\n            <TableData>6</TableData>\n          </TableRow>\n          <TableRow>\n            <TableHead className=\"bg-background-50 border-0 border-solid border-r border-outline-200 font-medium\">Austin Reaves</TableHead>\n            <TableData>18</TableData>\n            <TableData>8</TableData>\n            <TableData>15</TableData>\n            <TableData>3</TableData>\n            <TableData>3</TableData>\n          </TableRow>\n          <TableRow className=\"border-b-0\">\n            <TableHead className=\"bg-background-50 border-0 border-solid border-r border-outline-200 font-medium\">Kobe Bryant</TableHead>\n            <TableData>32</TableData>\n            <TableData>12</TableData>\n            <TableData>13</TableData>\n            <TableData>4</TableData>\n            <TableData>5</TableData>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Box>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Checkbox Implementation\nDESCRIPTION: Shows implementation of an uncontrolled checkbox group using React useRef hook. Handles checkbox changes through a reference to the DOM element rather than state management.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon, CheckboxGroup } from \"@/components/ui/checkbox\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { CheckIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App() {\n       const radioRef = React.useRef(null);\n        const handleCheckboxChange = (e) => {\n            const checkboxValue = radioRef.current.checked;\n          };\n        return (\n          <CheckboxGroup  ref={radioRef} >\n          <VStack space=\"md\">\n                  <Checkbox  onChange={handleCheckboxChange}  value=\"Apartments\">\n                    <CheckboxIndicator>\n                        <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                     <CheckboxLabel>Apartments</CheckboxLabel>\n                  </Checkbox>\n                   <Checkbox   onChange={handleCheckboxChange}  value=\"Residents\">\n                    <CheckboxIndicator>\n                        <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                     <CheckboxLabel>Residents</CheckboxLabel>\n                  </Checkbox>\n            </VStack>\n          </CheckboxGroup>\n               )\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating Full Width Button with Form in gluestack-ui\nDESCRIPTION: This code creates a form-like structure with a heading, description, input fields, and a full-width submit button using gluestack-ui components. It also includes a back to login link button.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Center>\n  <Box p='$5' maxWidth='$96' borderWidth='$1' borderColor='$backgroundLight300' borderRadius='$lg' $dark-borderColor=\"$backgroundDark700\">\n    <VStack space='xs' pb='$4'>\n      <Heading lineHeight={30}>\n        Set new password\n      </Heading>\n      <Text fontSize='$sm'>\n        Almost done. Enter your new password and you are all set.\n      </Text>\n    </VStack>\n    <VStack space='xl' py='$2'>\n      <Input>\n        <InputField\n          py='$2'\n          placeholder=\"New password\"\n        />\n      </Input>\n      <Input>\n        <InputField\n          py='$2'\n          placeholder=\"Confirm new password\"\n        />\n      </Input>\n    </VStack>\n    <VStack space='lg' pt='$4'>\n      <Button\n        size='sm'\n      >\n        <ButtonText>\n          Submit\n        </ButtonText>\n      </Button>\n      <Box flexDirection='row'>\n        <Button variant='link' p='$0' size='sm'>\n          <Icon\n            size='md'\n            mr='$1'\n            as={ArrowLeftIcon}\n          />\n          <ButtonText\n          >\n            Back to login\n          </ButtonText>\n        </Button>\n      </Box>\n    </VStack>\n  </Box>\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover with CTA in React\nDESCRIPTION: This snippet demonstrates a Popover component with a Call-to-Action. It includes a checkbox group for selecting usage preferences and a button to trigger the popover. The component uses various UI elements from a custom library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText, ButtonIcon } from \"@/components/ui/button\";\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon, CheckboxGroup } from \"@/components/ui/checkbox\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Popover, PopoverBackdrop, PopoverFooter, PopoverBody, PopoverContent } from \"@/components/ui/popover\";\nimport { Pressable } from \"@/components/ui/pressable\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { ArrowRightIcon, CheckIcon, ChevronRightIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App() {\n        const [isOpen, setIsOpen] = React.useState(false);\n        const [values, setValues] = React.useState(['work']);\n        const handleOpen = () => {\n          setIsOpen(true);\n        };\n        const handleClose = () => {\n          setIsOpen(false);\n        };\n        return (\n          <Popover\n            isOpen={isOpen}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            offset={8}\n            trigger={(triggerProps) => {\n              return (\n                <Button {...triggerProps} className=\"gap-2\">\n                  <ButtonText>Purchase Plan</ButtonText>\n                  <ButtonIcon as={ChevronRightIcon} />\n                </Button>\n              );\n            }}\n          >\n            <PopoverBackdrop/>\n            <PopoverContent className=\"w-full max-w-[420px] p-5 gap-6 pl-4 shadow-hard-5\">\n              <PopoverBody>\n                <Heading className=\"pl-1\">\n                  Are you interested in using Pro for work or personal use?\n                </Heading>\n                <Text className=\"pt-2 pb-6 pl-1\" size=\"sm\">\n                  We can recommend plans that are right for you. With our personalized\n                  approach, you can trust that the plans we recommend will align\n                  perfectly with your goals.\n                </Text>\n                <CheckboxGroup\n                  value={values}\n                  onChange={(keys) => {\n                    setValues(keys);\n                  }}\n                  className=\"pl-1\"\n                >\n                  <VStack space=\"sm\">\n                    <Checkbox value=\"projects\">\n                      <CheckboxIndicator>\n                        <CheckboxIcon as={CheckIcon} />\n                      </CheckboxIndicator>\n                      <CheckboxLabel>For personal projects</CheckboxLabel>\n                    </Checkbox>\n                    <Checkbox value=\"work\">\n                      <CheckboxIndicator>\n                        <CheckboxIcon as={CheckIcon} />\n                      </CheckboxIndicator>\n                      <CheckboxLabel>For work</CheckboxLabel>\n                    </Checkbox>\n                  </VStack>\n                </CheckboxGroup>\n              </PopoverBody>\n              <PopoverFooter>\n                <Pressable\n                  className=\"px-4 bg-primary-500 rounded w-full\"\n                  onPress={handleClose}\n                >\n                  <Button onPress={handleClose} size=\"sm\" className=\"gap-2\">\n                    <ButtonText>Next</ButtonText>\n                    <ButtonIcon as={ArrowRightIcon} />\n                  </Button>\n                </Pressable>\n              </PopoverFooter>\n            </PopoverContent>\n          </Popover>\n        )\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing FormControl with Error Messages in GlueStack UI React\nDESCRIPTION: This example demonstrates how to display validation error messages using FormControl with Radio buttons. It shows proper component hierarchy with FormControlLabel, RadioGroup, and FormControlError to provide user feedback for an invalid form state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormControl, FormControlError, FormControlErrorText, FormControlErrorIcon, FormControlLabel, FormControlLabelText } from \"@/components/ui/form-control\";\nimport { Radio, RadioGroup, RadioIndicator, RadioLabel, RadioIcon } from \"@/components/ui/radio\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { AlertCircleIcon, CircleIcon } from \"@/components/ui/icon\";\n\t\nfunction Example() {\n  return (\n    <FormControl isInvalid>\n          <FormControlLabel>\n            <FormControlLabelText>\n              Which time slot works best for you?\n            </FormControlLabelText>\n          </FormControlLabel>\n          <RadioGroup className='my-2'>\n            <VStack space=\"sm\">\n              <Radio size=\"sm\" value=\"Mango\">\n                <RadioIndicator>\n                  <RadioIcon as={CircleIcon} />\n                </RadioIndicator>\n                <RadioLabel>\n                  Monday\n                </RadioLabel>\n              </Radio>\n              <Radio size=\"sm\" value=\"Apple\">\n                <RadioIndicator>\n                  <RadioIcon as={CircleIcon} />\n                </RadioIndicator>\n                <RadioLabel>\n                  Tuesday\n                </RadioLabel>\n              </Radio>\n              <Radio size=\"sm\" value=\"Orange\">\n                <RadioIndicator>\n                  <RadioIcon as={CircleIcon} />\n                </RadioIndicator>\n                <RadioLabel>\n                  Wednesday\n                </RadioLabel>\n              </Radio>\n            </VStack>\n          </RadioGroup>\n          <FormControlError>\n            <FormControlErrorIcon as={AlertCircleIcon}/>\n            <FormControlErrorText>\n              Choose one time slot for the meeting\n            </FormControlErrorText>\n          </FormControlError>\n        </FormControl>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Default Link Component Example\nDESCRIPTION: Shows a basic example of using the Link component with LinkText to create a hyperlink.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Link/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"https://gluestack.io/\">\n  <LinkText>gluestack</LinkText>\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Gluestack UI Basic Card Styling\nDESCRIPTION: Implementation of the same card component using gluestack-ui's utility props and styled components approach.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  return (\n    <Box\n      bg=\"#0891b2\"\n      py=\"$4\"\n      px=\"$3\"\n      rounded=\"$md\"\n      height=\"132px\"\n      width={375}\n      maxWidth=\"100%\">\n      <HStack justifyContent=\"space-between\" height=\"100%\">\n        <Box justifyContent=\"space-between\">\n          <VStack space=\"xs\">\n            <Text fontSize=\"$sm\" color=\"$white\">\n              Today @ 9PM\n            </Text>\n            <Text color=\"$white\" fontSize=\"$xl\">\n              Let's talk about avatar!\n            </Text>\n          </VStack>\n          <Pressable\n            rounded=\"$xs\"\n            bg=\"#22d3ee\"\n            alignSelf=\"flex-start\"\n            py=\"$1\"\n            px=\"$3\">\n            <ButtonText\n              textTransform=\"uppercase\"\n              fontSize=\"$sm\"\n              fontWeight=\"$bold\"\n              color=\"$white\">\n              Remind me\n            </ButtonText>\n          </Pressable>\n        </Box>\n        <Image\n          source={{\n            uri: 'https://media.vanityfair.com/photos/5ba12e6d42b9d16f4545aa19/3:2/w_1998,h_1332,c_limit/t-Avatar-The-Last-Airbender-Live-Action.jpg',\n          }}\n          alt=\"Aang flying and surrounded by clouds\"\n          height=\"100px\"\n          rounded=\"$full\"\n          width=\"100px\"\n        />\n      </HStack>\n    </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Toast Implementation with Custom Styling and Usage\nDESCRIPTION: A comprehensive example demonstrating how to implement, customize, and use a toast component. This includes importing styled components, creating a toast instance, and implementing a button that triggers the toast notification.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/toast/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Title,\n  Description,\n} from '../components/core/toast/styled-components';\n\n// import the createtoast and createToastHook function\nimport { createToast, createToastHook } from '@gluestack-ui/toast';\n\n// Understanding the API\nexport const toast = createtoast({\n  Root,\n  Title,\n  Description,\n});\n\nconst useToast = createToastHook(Toast);\n\n// Using the toast component\nexport default () => {\n  const toast = useToast();\n  return (\n    <Button\n      {...props}\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id}>\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            );\n          },\n        });\n      }}\n    >\n      <ButtonText>Press Me</ButtonText>\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui Dependencies\nDESCRIPTION: Command to install the required dependencies for gluestack-ui using yarn or npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-ui/nativewind-utils @gluestack-ui/overlay @gluestack-ui/toast react-native-svg\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/nativewind-utils @gluestack-ui/overlay @gluestack-ui/toast react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Rendering Menu with Placement Options in React Native\nDESCRIPTION: This snippet demonstrates how to create a Menu component with various placement options. It includes icons and labels for each menu item, showcasing the flexibility of the Menu component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu\n  {...props}\n    trigger={({ ...triggerProps }) => {\n      return (\n        <Button {...triggerProps}>\n          <ButtonText>Menu</ButtonText>\n        </Button>\n      );\n    }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n        <Icon as={GlobeIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Community\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n        {/* PuzzleIcon is imported from 'lucide-react-native' */}\n        <Icon as={PuzzleIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Plugins\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n        {/* PaintBucket is imported from 'lucide-react-native' */}\n        <Icon as={PaintBucket} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Theme\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n        <Icon as={SettingsIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Settings\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Add account\" textValue=\"Add account\">\n        <Icon as={AddIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Add account\n        </MenuItemLabel>\n    </MenuItem>\n  </Menu>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Modal Component in React with GlueStack UI\nDESCRIPTION: This example demonstrates how to import, configure, and use the Modal component from GlueStack UI. It shows the complete structure with imports, component creation using createModal, and implementation with nested components like ModalHeader, ModalBody, and ModalFooter.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/modal/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Content,\n  CloseButton,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n} from '../components/core/modal/styled-components';\nimport { styled } from '../components/styled';\n\n// import the createModal function\nimport { createModal } from '@gluestack-ui/modal';\n\n// Understanding the API\nconst Modal = createModal({\n  Root,\n  Content,\n  CloseButton,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n  AnimatePresence: styled.Component, // Can be AnimatePresence from the library you are using\n});\n\n// Using the modal component\nexport default () => (\n  <Modal>\n    <ModalBackdrop />\n    <ModalContent>\n      <ModalHeader>\n        <Heading>Confirm your request</Heading>\n        <ModalCloseButton>\n          <CloseIcon />\n        </ModalCloseButton>\n      </ModalHeader>\n      <ModalBody>\n        <Text>Modal Body</Text>\n      </ModalBody>\n      <ModalFooter>\n        <Button>\n          <ButtonText></ButtonText>\n        </Button>\n        <Button>\n          <ButtonText></ButtonText>\n        </Button>\n      </ModalFooter>\n    </ModalContent>\n  </Modal>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Actionsheet Component in React\nDESCRIPTION: This code demonstrates a basic implementation of the Actionsheet component with several action items. It includes a button to toggle the actionsheet's visibility and handles closing the actionsheet when an item is selected.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [showActionsheet, setShowActionsheet] = React.useState(false);\n  const handleClose = () => setShowActionsheet(!showActionsheet);\n    return (\n      <Box>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose} zIndex={999}>\n          <ActionsheetBackdrop />\n          <ActionsheetContent h='$72' zIndex={999}>\n            <ActionsheetDragIndicatorWrapper>\n              <ActionsheetDragIndicator />\n            </ActionsheetDragIndicatorWrapper>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetItemText>Delete</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetItemText>Share</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetItemText>Play</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetItemText>Favourite</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetItemText>Cancel</ActionsheetItemText>\n            </ActionsheetItem>\n          </ActionsheetContent>\n        </Actionsheet>\n      </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering FormControl Component in React\nDESCRIPTION: This snippet demonstrates how to use the FormControl component with its subcomponents to create a password input field with labels, helper text, and error messages.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box h=\"$32\" w=\"$72\">\n  <FormControl {...props}>\n    <FormControlLabel mb='$1'>\n      <FormControlLabelText>Password</FormControlLabelText>\n    </FormControlLabel>\n    <Input>\n      <InputField\n        type=\"password\"\n        defaultValue=\"12345\"\n        placeholder=\"password\"\n      />\n    </Input>\n    <FormControlHelper>\n      <FormControlHelperText>\n        Must be at least 6 characters.\n      </FormControlHelperText>\n    </FormControlHelper>\n    <FormControlError>\n      <FormControlErrorIcon\n        as={AlertCircleIcon}\n      />\n      <FormControlErrorText>\n        At least 6 characters are required.\n      </FormControlErrorText>\n    </FormControlError>\n  </FormControl>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using the Slider Component\nDESCRIPTION: Comprehensive example showing how to import styled components, create a customized Slider component, and implement it in a React component. Includes component structure with track and thumb elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/slider/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Thumb,\n  Track,\n  FilledTrack,\n  ThumbInteraction,\n} from '../components/core/slider/styled-components';\n\n// import the createSlider function\nimport { createSlider } from '@gluestack-ui/slider';\n\n// Understanding the API\nconst Slider = createSlider({\n  Root,\n  Thumb,\n  Track,\n  FilledTrack,\n  ThumbInteraction,\n});\n\n// Using the Slider component\nexport default () => (\n  <Slider>\n    <SliderTrack>\n      <SliderFilledTrack />\n    </SliderTrack>\n    <SliderThumb />\n  </Slider>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Table with Header, Body and Footer in React Native\nDESCRIPTION: This example demonstrates a basic implementation of a Table component displaying customer data with name, units, and costs columns. It includes a header section, data rows in the body, and a footer summarizing the totals.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Table/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableData } from \"@/components/ui/table\";\n\nfunction Example() {\n  return (\n    <Table className=\"w-full\">\n      <TableHeader>\n        <TableRow>\n          <TableHead>Customer Name</TableHead>\n          <TableHead>Units</TableHead>\n          <TableHead>Costs</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <TableRow>\n          <TableData>Rajesh Kumar</TableData>\n          <TableData>10</TableData>\n          <TableData>$130</TableData>\n        </TableRow>\n        <TableRow>\n          <TableData>Priya Sharma</TableData>\n          <TableData>12</TableData>\n          <TableData>$210</TableData>\n        </TableRow>\n        <TableRow>\n          <TableData>Ravi Patel</TableData>\n          <TableData>6</TableData>\n          <TableData>$55</TableData>\n        </TableRow>\n        <TableRow>\n          <TableData>Ananya Gupta</TableData>\n          <TableData>18</TableData>\n          <TableData>$340</TableData>\n        </TableRow>\n        <TableRow>\n          <TableData>Arjun Singh</TableData>\n          <TableData>2</TableData>\n          <TableData>$35</TableData>\n        </TableRow>\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TableHead>Total</TableHead>\n          <TableHead>48</TableHead>\n          <TableHead>$770</TableHead>\n        </TableRow>\n      </TableFooter>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Handling Without SnapPoints in React Native ActionSheet\nDESCRIPTION: Implements a keyboard-aware action sheet with payment form functionality. Uses KeyboardAvoidingView with platform-specific behavior to handle keyboard appearance. Includes form controls for credit card security code input.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [showActionsheet, setShowActionsheet] = React.useState(false);\n  const handleClose = () => setShowActionsheet(!showActionsheet);\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n  <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : undefined}>\n <Actionsheet\n  isOpen={showActionsheet}\n  onClose={handleClose}\n>\n  <ActionsheetBackdrop />\n  <ActionsheetContent maxHeight=\"75%\">\n    <ActionsheetDragIndicatorWrapper>\n      <ActionsheetDragIndicator />\n    </ActionsheetDragIndicatorWrapper>\n    <VStack w=\"$full\" p={20}>\n      <HStack justifyContent=\"center\" alignItems=\"center\" space=\"md\">\n        <Box\n          w={50}\n          h=\"$full\"\n          px=\"$2\"\n          borderWidth={1}\n          borderStyle=\"solid\"\n          borderColor=\"$borderLight300\"\n          rounded=\"$sm\"\n        >\n          <Image\n            source={{ uri: 'https://i.imgur.com/UwTLr26.png' }}\n            flex={1}\n            resizeMode=\"contain\"\n          />\n        </Box>\n        <VStack flex={1}>\n          <Text fontWeight=\"$bold\">Mastercard</Text>\n          <Text>Card ending in 2345</Text>\n        </VStack>\n      </HStack>\n      <FormControl mt={36}>\n        <FormControlLabel>\n          <FormControlLabelText>\n            Confirm security code\n          </FormControlLabelText>\n        </FormControlLabel>\n        <Input w=\"$full\">\n          <InputSlot>\n           <InputIcon as={LeadingIcon} ml=\"$2\" />\n          </InputSlot>\n          <InputField placeholder=\"CVC/CVV\" />\n        </Input>\n        <Button onPress={handleClose} mt={20}>\n          <ButtonText>Pay $1000</ButtonText>\n        </Button>\n      </FormControl>\n    </VStack>\n  </ActionsheetContent>\n</Actionsheet>\n</KeyboardAvoidingView>\n</>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet with Custom Content in React Native\nDESCRIPTION: This snippet demonstrates how to create an Actionsheet with custom content, including a form and image. It uses various components like Button, VStack, HStack, and FormControl to structure the content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App(){\n  const [showActionsheet, setShowActionsheet] = React.useState(false);\n  const handleClose = () => setShowActionsheet(!showActionsheet);\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n <Actionsheet\n  isOpen={showActionsheet}\n  onClose={handleClose}>\n  <ActionsheetBackdrop />\n  <ActionsheetContent maxHeight=\"75%\">\n    <ActionsheetDragIndicatorWrapper>\n      <ActionsheetDragIndicator />\n    </ActionsheetDragIndicatorWrapper>\n    <VStack w=\"$full\" p={20}>\n      <HStack justifyContent=\"center\" alignItems=\"center\" space=\"md\">\n        <Box\n          w={50}\n          h=\"$full\"\n          px=\"$2\"\n          borderWidth={1}\n          borderStyle=\"solid\"\n          borderColor=\"$borderLight300\"\n          rounded=\"$sm\"\n        >\n          <Image\n            source={{ uri: 'https://i.imgur.com/UwTLr26.png' }}\n            flex={1}\n            resizeMode=\"contain\"\n          />\n        </Box>\n        <VStack flex={1}>\n          <Text fontWeight=\"$bold\">Mastercard</Text>\n          <Text>Card ending in 2345</Text>\n        </VStack>\n      </HStack>\n      <FormControl mt={36}>\n        <FormControlLabel>\n          <FormControlLabelText>\n            Confirm security code\n          </FormControlLabelText>\n        </FormControlLabel>\n        <Input mt={5}>\n          <InputField placeholder=\"CVC/CVV\"/>\n        </Input>\n        <Button onPress={handleClose} mt={20}>\n          <ButtonText>Pay $1000</ButtonText>\n        </Button>\n      </FormControl>\n    </VStack>\n  </ActionsheetContent>\n</Actionsheet>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AlertDialog Component in React\nDESCRIPTION: This code snippet demonstrates the basic structure and usage of the AlertDialog component and its subcomponents in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <AlertDialog>\n    <AlertDialogBackdrop />\n    <AlertDialogContent>\n      <AlertDialogHeader>\n        <AlertDialogCloseButton />\n      </AlertDialogHeader>\n      <AlertDialogBody />\n      <AlertDialogFooter />\n    </AlertDialogContent>\n  </AlertDialog>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Color Mode Dependent Styled Component in JSX\nDESCRIPTION: Demonstrates how to create a styled button component with different styles for light and dark color modes using @gluestack-style/react.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/ColorModeBasedStyles/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledButton = styled(Pressable, {\n  bg: '$primary600',\n  px: '$6',\n  py: '$4',\n  _dark: {\n    bg: '$info600',\n  },\n  _light: {\n    bg: '$info800',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Accordion Components in React\nDESCRIPTION: Demonstrates a controlled accordion implementation using React state management. Features multiple expandable sections, custom styling, and state-driven content visibility.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    const [selectedValues, setSelectedValues] = React.useState(['item-1', 'item-2']);\n    return (\n    <Accordion m=\"$5\" variant=\"unfilled\" width=\"95%\" type=\"multiple\" value={selectedValues} onValueChange={(item) => setSelectedValues(item)}>\n      <AccordionItem value=\"item-1\" borderTopWidth={1} borderBottomWidth={1} \n      sx={{\n            borderColor: '$borderLight300',\n          _dark: {\n            borderColor: '$borderDark700',\n          },\n      }}>\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   Exploring Nature's Wonders\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon}  />\n                  ) : (\n                    <AccordionIcon as={PlusIcon}  />\n                  )}\n                \n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n          Embark on a journey through the breathtaking landscapes and diverse ecosystems of our planet. From majestic mountains to serene oceans, discover the beauty that nature has to offer.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n   \n      <AccordionItem value=\"item-2\"\n      >\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   The Art of Culinary Delights\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n           Indulge your senses in a culinary adventure. Uncover the secrets behind delectable dishes, learn about unique flavor profiles, and ignite your passion for cooking.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-3\"  borderTopWidth={1}  borderBottomWidth={1}\n          sx={{\n            borderColor: '$borderLight300',\n          _dark: {\n            borderColor: '$borderDark700',\n          },\n      }}>\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   Mastering the Creative Process\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n           Immerse yourself in the world of creativity. Unleash your artistic potential, whether it's through writing, painting, or any other form of expression.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Menu with Selection Mode - React Native\nDESCRIPTION: Implementation of a Menu component with single selection mode and route handling based on selection. Includes state management for selected items.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Menu/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example () {\n  const [selected, setSelected] = React.useState(new Set([]));\nreturn (\n  <Menu\n  placement=\"bottom left\"\n  selectionMode=\"single\"\n  selectedKeys={selected}\n  onSelectionChange={(keys) => {\n    console.log('onSelectionChange', keys);\n    setSelected(keys);\n    if (keys.currentKey === 'Community') {\n      console.log('Push to', keys.currentKey, 'route');\n    }\n    else if (keys.currentKey === 'Plugins') {\n      console.log('Push to', keys.currentKey, 'route');\n    }\n    else if (keys.currentKey === 'Theme') {\n      console.log('Push to', keys.currentKey, 'route');\n    }\n    else if (keys.currentKey === 'Settings') {\n      console.log('Push to', keys.currentKey, 'route');\n    }\n  }}\n  closeOnSelect={true}\n  trigger={({ ...triggerProps }) => {\n    return (\n      <Button {...triggerProps}>\n        <ButtonText>Menu</ButtonText>\n      </Button>\n    );\n  }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n      <Icon as={GlobeIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Community\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n      <Icon as={PuzzleIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Plugins\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n      <Icon as={PaintBucket} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>Theme</MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n      <Icon as={SettingsIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Settings\n      </MenuItemLabel>\n    </MenuItem>\n  </Menu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PinInput Component Implementation in React\nDESCRIPTION: A basic implementation of the PinInput component with four fields. This example demonstrates how to create a simple PIN input interface for authentication purposes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PinInput, PinInputField } from \"@/components/ui/pin-input\";\n\nfunction Example() {\n  return (\n    <PinInput noOfFields={4}>\n          {Array.from({ length: 4 }).map((_, index) => (\n            <PinInputField key={index} index={index} />\n          ))}\n        </PinInput>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB with Basic Placement in a Task List Interface\nDESCRIPTION: This example demonstrates a Floating Action Button (FAB) with bottom center placement within a task list. The component includes a checkbox list with an add button positioned at the bottom center, allowing users to add new tasks to the list.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  borderColor=\"$borderLight300\"\n  rounded=\"$lg\"\n  borderWidth=\"$1\"\n  py=\"$4\"\n  bg=\"$white\"\n  $base-mx=\"$5\"\n  $dark-bg=\"$backgroundDark900\"\n  $dark-borderColor=\"$borderDark800\"\n>\n  <VStack mb='$2' px='$6' py ='$2' space='lg'>\n    <Checkbox size=\"sm\" >\n      <CheckboxIndicator mr=\"$2\" >\n        <CheckboxIcon as={CheckIcon} />\n      </CheckboxIndicator>\n      <CheckboxLabel>\n        <Text fontSize='$sm'  >\n          Prepare any feedback or updates.\n        </Text>\n      </CheckboxLabel>\n    </Checkbox>\n    <Checkbox size=\"sm\">\n      <CheckboxIndicator mr=\"$2\" >\n        <CheckboxIcon as={CheckIcon} />\n      </CheckboxIndicator>\n      <CheckboxLabel>\n        <Text fontSize='$sm' >\n          Review progress on goals and projects.\n        </Text>\n      </CheckboxLabel>\n    </Checkbox>\n    <Checkbox size=\"sm\">\n      <CheckboxIndicator mr=\"$2\" >\n        <CheckboxIcon as={CheckIcon} />\n      </CheckboxIndicator>\n      <CheckboxLabel>\n        <Text fontSize='$sm' >\n          Ask challenges and discuss.\n        </Text>\n      </CheckboxLabel>\n    </Checkbox>\n  </VStack>\n  <Fab size='sm' placement='bottom center' top=\"0\" position='relative'>\n    <FabIcon as={AddIcon} size='sm'/>\n  </Fab>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Modal Dialogs with gluestack-ui in React\nDESCRIPTION: This code demonstrates the implementation of multiple layered modals for a password reset flow. The example shows three connected modals: a forgot password form, a verification code entry, and a new password setup screen. Each modal includes appropriate navigation buttons and form inputs.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Modal/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n  const [showModal2, setShowModal2] = useState(false);\n  const [showModal3, setShowModal3] = useState(false);\n  return (\n    <Center>\n      <Center h={400}>\n        <Button onPress={() => setShowModal(true)}>\n          <ButtonText>Forgot password?</ButtonText>\n        </Button>\n      </Center>\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false);\n        }}\n      >\n        <ModalBackdrop />\n        <ModalContent>\n          <ModalHeader borderBottomWidth='$0'>\n          <VStack space='sm'>\n            <Heading size='lg'>Forgot password?</Heading>\n            <Text size='sm'>No worries, we'll send you reset instructions</Text>\n            </VStack>\n          </ModalHeader>\n          <ModalBody>\n            <Input>\n              <InputField placeholder=\"Enter your email\" />\n            </Input>\n          </ModalBody>\n          <ModalFooter borderTopWidth='$0'>\n            <VStack space='lg' w='$full'>\n              <Button\n                onPress={() => {\n                  setShowModal2(true);\n                }}\n              >\n                <ButtonText>Submit</ButtonText>\n              </Button>\n              <HStack>\n                <Button\n                  variant='link'\n                  size='sm'\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                >\n                  <ButtonIcon as={ArrowLeftIcon}/>\n                  <ButtonText >Back to login</ButtonText>\n                </Button>\n              </HStack>\n            </VStack>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        isOpen={showModal2}\n        onClose={() => {\n          setShowModal2(false);\n        }}\n      >\n        <ModalBackdrop />\n        <ModalContent>\n          <ModalHeader borderBottomWidth='$0'>\n          <VStack space='sm'>\n            <Heading size='lg'>Reset password</Heading>\n            <Text size='sm'>A verification code has been sent to you. Enter code below.</Text>\n            </VStack>\n          </ModalHeader>\n          <ModalBody>\n            <Input>\n              <InputField placeholder=\"Enter verification code\" />\n            </Input>\n          </ModalBody>\n          <ModalFooter borderTopWidth='$0'>\n          <VStack space='lg' w='$full'>\n            <Button\n              onPress={() => {\n                setShowModal3(true);\n              }}\n            >\n              <ButtonText>Continue</ButtonText>\n            </Button>\n            <Text size='sm'>Didn't receive the email?\n              <Link ml='$1'><Link.Text size='sm' \n              $dark-color='$textDark200'\n              color='$textLight700'\n              fontWeight='$semibold'>Click to resend</Link.Text></Link>\n            </Text>\n            <HStack space='xs' alignItems='center'>\n              <Button\n                variant='link'\n                size='sm'\n                onPress={() => {\n                  setShowModal2(false);\n                }}\n              >\n                <ButtonIcon as={ArrowLeftIcon}/>\n                <ButtonText >Back to login</ButtonText>\n              </Button>\n            </HStack>\n            </VStack>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        isOpen={showModal3}\n        onClose={() => {\n          setShowModal3(false);\n        }}\n      >\n        <ModalBackdrop />\n        <ModalContent>\n          <ModalHeader borderBottomWidth='$0'>\n          <VStack space='sm'>\n            <Heading size='lg'>Set new password</Heading>\n            <Text size='sm'>Almost done. Enter your new password and you are all set.</Text>\n            </VStack>\n          </ModalHeader>\n          <ModalBody>\n          <VStack space='xl'>\n            <Input>\n              <InputField placeholder=\"New password\" />\n            </Input>\n            <Input>\n              <InputField placeholder=\"Confirm new password\" />\n            </Input>\n            </VStack>\n          </ModalBody>\n          <ModalFooter borderTopWidth='$0'>\n          <VStack space='lg' w='$full'>\n            <Button\n              onPress={() => {\n                setShowModal(false);\n                setShowModal2(false);\n                setShowModal3(false);\n              }}\n            >\n              <ButtonText>Submit</ButtonText>\n            </Button>\n            <HStack space='xs' alignItems='center'>\n              <Button\n                variant='link'\n                size='sm'\n                onPress={() => {\n                  setShowModal3(false);\n                }}\n              >\n                <ButtonIcon as={ArrowLeftIcon}/>\n                <ButtonText >Back to login</ButtonText>\n              </Button>\n            </HStack>\n            </VStack>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet with Icons Menu\nDESCRIPTION: A React Native implementation of an Actionsheet component featuring icon-based menu items. Includes various action options with corresponding icons and supports disabled states for menu items.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Actionsheet, ActionsheetContent, ActionsheetItem, ActionsheetItemText, ActionsheetDragIndicator, ActionsheetDragIndicatorWrapper, ActionsheetBackdrop, ActionsheetIcon } from \"@/components/ui/actionsheet\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { ClockIcon, DownloadIcon, EditIcon, EyeOffIcon, TrashIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App(){\n  const [showActionsheet, setShowActionsheet] = React.useState(false);\n  const handleClose = () => setShowActionsheet(false);\n    return (\n      <>\n        <Button onPress={() => setShowActionsheet(true)}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n          <ActionsheetBackdrop />\n          <ActionsheetContent>\n            <ActionsheetDragIndicatorWrapper>\n              <ActionsheetDragIndicator />\n            </ActionsheetDragIndicatorWrapper>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetIcon className=\"stroke-background-700\" as={EditIcon} />\n              <ActionsheetItemText>Edit Message</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetIcon className=\"stroke-background-700\" as={EyeOffIcon} />\n              <ActionsheetItemText>Mark Unread</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetIcon className=\"stroke-background-700\" as={ClockIcon} />\n              <ActionsheetItemText>Remind Me</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetIcon className=\"stroke-background-700\" as={DownloadIcon} />\n              <ActionsheetItemText>Add to Saved Items</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem isDisabled onPress={handleClose}>\n              <ActionsheetIcon className=\"stroke-background-700\" as={TrashIcon} />\n              <ActionsheetItemText>Delete</ActionsheetItemText>\n            </ActionsheetItem>\n          </ActionsheetContent>\n        </Actionsheet>\n      </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: FormControl Component Anatomy in React\nDESCRIPTION: This snippet illustrates the structure of the FormControl component and its subcomponents, providing a template for component usage.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <FormControl>\n    <FormControlLabel>\n      <FormControlLabelText />\n    </FormControlLabel>\n    <FormControlHelper>\n      <FormControlHelperText />\n    </FormControlHelper>\n    <FormControlError>\n      <FormControlErrorIcon />\n      <FormControlErrorText />\n    </FormControlError>\n  </FormControl>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Color Scheme Spinners in React Native\nDESCRIPTION: This example shows how to create multiple Spinner components with different color schemes using VStack for vertical layout and Tailwind CSS colors.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from \"@/components/ui/spinner\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport colors from \"tailwindcss/colors\";\n\nfunction Example() {\n  return (\n    <VStack space=\"md\" >\n        <Spinner color={colors.indigo[600]} />\n        <Spinner color={colors.emerald[600]} />\n        <Spinner color={colors.amber[600]} />\n        <Spinner color={colors.fuchsia[600]} />\n      </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Accordion Components in React\nDESCRIPTION: Creates a nested accordion structure to organize hierarchical content, specifically demonstrating US states grouping. Features customizable styling, expandable sections, and icon transitions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    return (\n           <Accordion\n           variant=\"unfilled\"\n           size=\"sm\"\n      m=\"$5\"\n      borderWidth={1}\n      borderColor=\"$borderLight300\"\n      $dark-borderColor=\"$borderDark700\"\n      width=\"80%\"\n      maxWidth={640}\n    >\n      <AccordionItem value=\"a\">\n        <AccordionHeader     \n         sx={{\n            backgroundColor: \"$backgroundLight0\",\n          _dark: {\n            backgroundColor: \"$backgroundDark950\",\n          }\n        }}>\n          <AccordionTrigger>\n            {({isExpanded}) => (\n              <>\n                {isExpanded ? (\n                  <AccordionIcon as={MinusIcon} />\n                ) : (\n                  <AccordionIcon as={PlusIcon} />\n                )}\n                <AccordionTitleText ml=\"$3\">USA</AccordionTitleText>\n              </>\n            )}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent pb=\"$0\">\n          <Accordion\n            width=\"100%\"\n            shadowColor=\"transparent\"\n            borderWidth={1}\n            sx={{\n                borderColor: '$borderLight300',\n                backgroundColor: \"$backgroundLight0\",\n              _dark: {\n                borderColor: '$borderDark700',\n                backgroundColor: \"$backgroundDark950\"\n              },\n            }}\n          >\n            <AccordionItem value=\"b\">\n              <AccordionHeader>\n                <AccordionTrigger>\n                  {({isExpanded}) => (\n                    <>\n                      {isExpanded ? (\n                        <AccordionIcon as={MinusIcon} />\n                      ) : (\n                        <AccordionIcon as={PlusIcon} />\n                      )}\n                      <AccordionTitleText ml=\"$3\">\n                        California\n                      </AccordionTitleText>\n                    </>\n                  )}\n                </AccordionTrigger>\n              </AccordionHeader>\n              <AccordionContent>\n                <AccordionContentText>\n                  Capital city of California is Sacramento. California has a GDP\n                  of 2.89 trillion dollars and follows Pacific Standard Time\n                  zone.\n                </AccordionContentText>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n          <Accordion width=\"100%\" shadowColor=\"transparent\" \n          mt=\"$5\"   \n           sx={{\n            backgroundColor: \"$backgroundLight0\",\n          _dark: {\n            backgroundColor: \"$backgroundDark950\"\n          }\n        }}>\n            <AccordionItem value=\"c\">\n              <AccordionHeader>\n                <AccordionTrigger>\n                  {({isExpanded}) => (\n                    <>\n                      {isExpanded ? (\n                        <AccordionIcon as={MinusIcon} />\n                      ) : (\n                        <AccordionIcon as={PlusIcon} />\n                      )}\n                      <AccordionTitleText ml=\"$3\">Nevada</AccordionTitleText>\n                    </>\n                  )}\n                </AccordionTrigger>\n              </AccordionHeader>\n              <AccordionContent>\n                <AccordionContentText>\n                  Nevada is located in a mountainous region that includes vast\n                  semiarid grasslands and sandy alkali deserts. It is the most\n                  arid state of the country.\n                </AccordionContentText>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Adjustable-Size AlertDialog in React\nDESCRIPTION: This example showcases an AlertDialog component with adjustable sizes. It includes a button to trigger the dialog, and the dialog content with a header, body, and footer. The size of the AlertDialog can be controlled through props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [showAlertDialog, setShowAlertDialog] = React.useState(false);\n  return (\n    <>\n <Center h={300} >\n          <Button onPress={() => setShowAlertDialog(true)}>\n              <ButtonText>Click me</ButtonText>\n          </Button>\n      </Center>\n      <AlertDialog\n        isOpen={showAlertDialog}\n        onClose={() => {\n            setShowAlertDialog(false);\n        }}\n        {...props}\n      >\n            <AlertDialogBackdrop/>\n        <AlertDialogContent>\n        <AlertDialogHeader borderBottomWidth='$0'>\n           <HStack space='sm' alignItems='center'>\n            <Icon as={AlertTriangleIcon} color='$error700'  />\n              <Heading size='lg'>Order placed</Heading>\n            </HStack>\n          </AlertDialogHeader>\n          <AlertDialogBody>\n              <Text>\n               You have exceeded your monthly upload limit. Please upgrade to a premium account to continue uploading.\n            </Text>\n          </AlertDialogBody>\n           <AlertDialogFooter  borderTopWidth='$0'>\n             <ButtonGroup space=\"lg\">\n        <Button\n          variant=\"outline\"\n          action=\"secondary\"\n          onPress={() => {\n            setShowAlertDialog(false)\n          }}\n        >\n          <ButtonText fontSizes=\"$md\">Close</ButtonText>\n        </Button>\n          <Button\n          action=\"primary\"\n          onPress={() => {\n            setShowAlertDialog(false)\n          }}\n          bgColor=\"$darkBlue700\"\n        >\n          <ButtonText>View plans</ButtonText>\n        </Button>\n              </ButtonGroup >\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Checkbox Implementation\nDESCRIPTION: Demonstrates a controlled checkbox group implementation where the state is managed through React useState hook. Includes multiple checkboxes with predefined values and state management.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon, CheckboxGroup } from \"@/components/ui/checkbox\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { CheckIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App() {\n         const [values, setValues] = React.useState(['UX Research']);\n        return (\n          <CheckboxGroup value={values}  onChange={(keys)=>{\n            setValues(keys);\n          }}>\n           <VStack space=\"md\">\n                  <Checkbox value=\"UX Research\">\n                    <CheckboxIndicator>\n                      <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                  <CheckboxLabel>UX Research</CheckboxLabel>\n                </Checkbox>\n                 <Checkbox  value=\"Software\">\n                    <CheckboxIndicator>\n                      <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                  <CheckboxLabel>Software Development</CheckboxLabel>\n                </Checkbox>\n            </VStack>\n          </CheckboxGroup>\n        )\n      }\n```\n\n----------------------------------------\n\nTITLE: Using Lucide Icons in gluestack-ui\nDESCRIPTION: This snippet shows how to use Lucide icons in gluestack-ui. It demonstrates rendering Camera, Chrome, Instagram, and Facebook icons using the Icon component with the 'as' prop.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Icon/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n      <VStack space=\"md\" alignItems='center'>\n        <Icon as={Camera} />\n        <Icon as={ChromeIcon}  />\n        <Icon as={InstagramIcon} />\n        <Icon as={FacebookIcon} />\n      </VStack>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components for Quick Start Demo in React/JSX\nDESCRIPTION: Imports demo components specific to the quick start guide, including App, Socail, and Card1 components from a nativewind directory.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/overview/QuickStart/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  App,\n  Socail,\n  Card1,\n} from '../../../extra-components/nativewind/quick-start-components/App';\n```\n\n----------------------------------------\n\nTITLE: Customizing the ImageViewer Component\nDESCRIPTION: Comprehensive example demonstrating how to import, customize, and use the ImageViewer component with various sub-components. Shows the complete workflow from importing styled components to rendering images with custom handlers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image-viewer/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Backdrop,\n  Content,\n  CloseButton,\n} from '../components/core/image-viewer/styled-components';\n\n// import the createImageViewer function\nimport { createImageViewer } from '@gluestack-ui/image-viewer';\n\n// Understanding the API\nconst ImageViewer = createImageViewer({\n  Root,\n  Backdrop,\n  Content,\n  CloseButton,\n});\n\n// Using the ImageViewer component\nexport default () => (\n  <ImageViewer isOpen={isOpen} onClose={onClose}>\n    <ImageViewerBackdrop>\n      <ImageViewerContent\n        images={images}\n        renderImages={({ item, index }) => {\n          return (\n            <ImageViewerImage\n              source={{ uri: item.url }}\n            />\n          );\n        }}\n        keyExtractor={(item, index) => `${item.id}-${index}`}\n      />\n    </ImageViewerBackdrop>\n  </ImageViewer>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Existing Project\nDESCRIPTION: Commands to install required gluestack-ui dependencies using yarn or npm\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-ui/themed @gluestack-style/react @gluestack/ui-next-adapter react-native-web react-native-svg@13.4.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/themed @gluestack-style/react @gluestack/ui-next-adapter react-native-web react-native-svg@13.4.0\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB with Icon and Text in React using gluestack-ui\nDESCRIPTION: Creates a FAB button with a search icon and text positioned over an article listing interface. The example demonstrates how to combine FabIcon and FabLabel components within a Fab container along with a formatted content layout using Box, VStack, HStack, and other UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Divider } from \"@/components/ui/divider\";\nimport { Fab, FabLabel, FabIcon } from \"@/components/ui/fab\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { SearchIcon } from \"@/components/ui/icon\";\n\t\nfunction Example() {\n  return (\n    <Box\n          className='max-w-96 border rounded-lg border-outline-200 py-[56px] px-6 mx-5 bg-background-100'\n        >\n          <Fab className=\"top-4 h-10 bg-primary-600 hover:bg-primary-700 active:bg-primary-900 py-2\">\n            <FabIcon as={SearchIcon} />\n            <FabLabel>Search</FabLabel>\n          </Fab>\n          <VStack space='lg'>\n            <Box>\n              <Text className='text-xs text-primary-600 font-bold'>\n                HEALTH\n              </Text>\n              <Heading size='sm'>\n                Benefits of Oranges\n              </Heading>\n              <Text size='xs' className='mt-1.5'>\n                Oranges are a great source of vitamin C, which is essential for a healthy immune system.\n              </Text>\n              <HStack space='sm' className='mt-3 h-5'>\n                <Text size='xs'>\n                  Wade Warrem\n                </Text>\n                <Divider\n                  orientation='vertical' className='bg-background-300'\n                />\n                <Text size='xs'>\n                  6th Oct, 2019\n                </Text>\n                <Divider\n                  orientation='vertical' className='bg-background-300'\n                />\n                <Text size='xs'>\n                  5 mins read\n                </Text>\n              </HStack>\n            </Box>\n            <Divider />\n            <Box>\n              <Text className='text-xs text-primary-600 font-bold'>\n                TECHNOLOGY\n              </Text>\n              <Heading size='sm' >\n                How AI can benefit your business\n              </Heading>\n              <Text size='xs' className='mt-1.5'>\n                AI can automate tasks and processes, allowing for increasing efficiency and productivity.\n              </Text>\n              <HStack space='sm' className='mt-3 h-5'>\n                <Text size='xs'>\n                  Wade Warrem\n                </Text>\n                <Divider\n                  orientation='vertical'\n                  className='bg-background-300'\n                />\n                <Text size='xs'>\n                  6th Oct, 2019\n                </Text>\n                <Divider\n                  orientation='vertical'\n                  className='bg-background-300'\n                />\n                <Text size='xs'>\n                  5 mins read\n                </Text>\n              </HStack>\n            </Box>\n          </VStack>\n        </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Loading Button in React Native\nDESCRIPTION: This code snippet demonstrates how to create a button with a loading state using the Button, ButtonSpinner, and ButtonText components. It displays a spinner and 'Please wait...' text, and is disabled while loading.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button isDisabled={true} bg='$darkBlue600' p='$3'>\n  <ButtonSpinner mr='$1'/>\n  <ButtonText fontWeight='$medium' fontSize='$sm'>Please wait...</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Checkbox Selection with CheckboxGroup in React Native\nDESCRIPTION: This example demonstrates how to create a group of checkboxes using the CheckboxGroup component. It allows users to select multiple options from a set of choices, with the selected values managed by React state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    const [values, setValues] = useState([\"Eng\"]);\n   return (\n    <CheckboxGroup value={values}  onChange={(keys) => {\nsetValues(keys)\n}}>\n        <VStack space=\"3xl\">\n          <Checkbox   value=\"Eng\">\n                <CheckboxIndicator mr=\"$2\">\n                  <CheckboxIcon as={CheckIcon}/>\n                </CheckboxIndicator>\n                <CheckboxLabel>Framer</CheckboxLabel>\n          </Checkbox>\n          <Checkbox value=\"invison\">\n              <CheckboxIndicator mr=\"$2\">\n                <CheckboxIcon as={CheckIcon}/>\n              </CheckboxIndicator>\n              <CheckboxLabel>Invision Studio</CheckboxLabel>\n          </Checkbox>\n          <Checkbox  value=\"adobe\">\n            <CheckboxIndicator mr=\"$2\">\n              <CheckboxIcon as={CheckIcon}/>\n            </CheckboxIndicator>\n            <CheckboxLabel>Adobe XD</CheckboxLabel>\n          </Checkbox>\n      </VStack>\n      </CheckboxGroup>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Volume Control Slider with OnChangeEnd Event\nDESCRIPTION: This code demonstrates using the Slider component as a volume control with both onChange and onChangeEnd events. It tracks both the current slider value and the final value when sliding ends, providing visual feedback with volume icons on both sides of the slider.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Slider/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(40);\n  const [onChangeEndValue, setOnChangeEndValue] = React.useState(40);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n    <VStack space=\"2xl\">\n    <Box>\n    <Text textAlign=\"center\">current sliderValue - {sliderValue}</Text>\n    <Text textAlign=\"center\">onChangeEndValue - {onChangeEndValue}</Text>\n    </Box>\n    <HStack space=\"lg\">\n    <Volume/>\n    <Center w=\"$80\">\n        <Slider\n          sliderTrackHeight={4}\n          value={sliderValue}\n          onChange={v => {\n         handleChange(Math.floor(v));\n         }} onChangeEnd={v => {\n        v && setOnChangeEndValue(Math.floor(v));\n         }}>\n          <SliderTrack>\n            <SliderFilledTrack />\n          </SliderTrack>\n          <SliderThumb />\n        </Slider>\n    </Center>\n    <Volume2Icon/>\n    </HStack>\n     </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Expo Snack for Todo-List Demo\nDESCRIPTION: This code adds a script tag to embed the Expo Snack environment and an iframe that displays a working example of the Todo-List application. The embedded Snack allows users to see and interact with the todo list implementation in a web preview.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/todo-list/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<script async src=\"https://snack.expo.dev/embed.js\"></script>\n\n<Meta title=\"ui/Guides/Resources/Todo-List\" />\n\n# Todo-List\n\nA simple To Do App made using `@gluestack-ui/themed`.\n\n<iframe\n  src=\"https://snack.expo.dev/embedded/@gluestack/gluestack-ui-todos-example?iframeId=mv6tjd6wte&preview=true&platform=web&theme=dark\"\n  style={{ width: '70vw', height: '60vh', border: '0px' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing FormControl with Radio Buttons in React\nDESCRIPTION: This code snippet shows how to use FormControl with Radio buttons. It creates a radio group for selecting a favorite fruit, including options for Mango, Apple, and Orange. The component also includes a label and helper text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<FormControl>\n  <FormControlLabel>\n    <FormControlLabelText>\n      Favourite fruit\n    </FormControlLabelText>\n  </FormControlLabel>\n  <RadioGroup my='$2'>\n    <VStack space=\"sm\">\n      <Radio size=\"sm\" value=\"Mango\">\n        <RadioIndicator mr=\"$2\">\n          <RadioIcon>\n            <CircleIcon/>\n          </RadioIcon>\n        </RadioIndicator>\n        <RadioLabel>\n          Mango\n        </RadioLabel>\n      </Radio>\n      <Radio size=\"sm\" value=\"Apple\">\n        <RadioIndicator mr=\"$2\">\n          <RadioIcon>\n            <CircleIcon/>\n          </RadioIcon>\n        </RadioIndicator>\n        <RadioLabel>\n          Apple\n        </RadioLabel>\n      </Radio>\n      <Radio size=\"sm\" value=\"Orange\">\n        <RadioIndicator mr=\"$2\">\n          <RadioIcon>\n            <CircleIcon/>\n          </RadioIcon>\n        </RadioIndicator>\n        <RadioLabel>\n          Orange\n        </RadioLabel>\n      </Radio>\n    </VStack>\n  </RadioGroup>\n  <FormControlHelper>\n    <FormControlHelperText>\n      Choose the fruit you like the most\n    </FormControlHelperText>\n  </FormControlHelper>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Creating an Inline Form with FormControl in React\nDESCRIPTION: This snippet shows how to create an inline form using FormControl. It includes an input field for username, a select dropdown for country, and a submit button. The components are arranged horizontally using HStack.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n<HStack space='md'>\n  <FormControl>\n    <Input>\n      <InputField\n        placeholder=\"Username\"\n      />\n    </Input>\n  </FormControl>\n  <FormControl>\n    <Select>\n      <SelectTrigger>\n        <SelectInput placeholder=\"Country\"/>\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectItem label=\"India\" value=\"India\" />\n          <SelectItem label=\"Sri Lanka\" value=\"Sri Lanka\" />\n          <SelectItem label=\"Uganda\" value=\"Uganda\" />\n          <SelectItem label=\"Japan\" value=\"Japan\" />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  </FormControl>\n  <FormControl>\n    <Button bg='$darkBlue600'>\n      <ButtonText fontSize='$sm' fontWeight='$medium'>\n        Next\n      </ButtonText>\n    </Button>\n  </FormControl>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB component in React with gluestack-ui\nDESCRIPTION: Example of how to import, configure, and use the Floating Action Button component from gluestack-ui in a React application. This snippet shows importing styled components, creating a custom FAB component, and implementing it in a component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/fab/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root, Label } from '../components/core/fab/styled-components';\n// import the createFab function\nimport { createFab } from '@gluestack-ui/fab';\n// Understanding the API\nconst Fab = createFab({\n  Root,\n  Label,\n});\n// Using the fab component\nexport default () => (\n  <Fab>\n    <FabLabel />\n  </Fab>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Radio Buttons with RadioGroup in React Native\nDESCRIPTION: This example shows how to implement horizontally aligned radio buttons using the RadioGroup component. It demonstrates the use of HStack for horizontal layout and includes two radio options.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [values, setValues] = React.useState(\"Cash On Delivery\")\n  return (\n    <RadioGroup value={values} onChange={setValues} >\n      <HStack space=\"2xl\">\n        <Radio value=\"Credit Card\">\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Credit Card</RadioLabel>\n        </Radio>\n        <Radio value=\"Cash On Delivery\">\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Cash On Delivery</RadioLabel>\n        </Radio>\n      </HStack>\n    </RadioGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Checkbox Group Implementation\nDESCRIPTION: Demonstrates a controlled checkbox group implementation using React useState hook. Features vertical layout with multiple options and explicit state management.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [values, setValues] = React.useState(['UX Research']);\n  return (\n    <CheckboxGroup value={values} onChange={(keys)=>{\n      setValues(keys);\n    }}>\n      <VStack space=\"md\">\n        <Checkbox value=\"UX Research\">\n          <CheckboxIndicator mr=\"$2\">\n            <CheckboxIcon as={CheckIcon}/>\n          </CheckboxIndicator>\n          <CheckboxLabel>UX Research</CheckboxLabel>\n        </Checkbox>\n        <Checkbox value=\"Software\">\n          <CheckboxIndicator mr=\"$2\">\n            <CheckboxIcon as={CheckIcon}/>\n          </CheckboxIndicator>\n          <CheckboxLabel>Software Development</CheckboxLabel>\n        </Checkbox>\n      </VStack>\n    </CheckboxGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Card Component in React with gluestack-ui\nDESCRIPTION: This snippet shows how to create a product card using the Card component from gluestack-ui. It includes an image, product details, and action buttons for adding to cart and wishlist.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Card/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    return (\n    <Card p=\"$5\" borderRadius=\"$lg\" maxWidth={360} m=\"$3\">\n      <Image\n        mb=\"$6\"\n        h={240}\n        width=\"$full\"\n        borderRadius=\"$md\"\n        source={{\n          uri: 'https://images.unsplash.com/photo-1595231712325-9fedecef7575?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1yZWxhdGVkfDJ8fHxlbnwwfHx8fHw%3D',\n        }}\n      />\n      <Text\n        fontSize=\"$sm\"\n        fontStyle=\"normal\"\n        fontFamily=\"$heading\"\n        fontWeight=\"$normal\"\n        lineHeight=\"$sm\"\n        mb=\"$2\"\n        sx={{\n          color: '$textLight700',\n          _dark: {\n            color: '$textDark200',\n          },\n        }}\n      >\n        Fashion Clothing\n      </Text>\n      <VStack mb=\"$6\">\n        <Heading size=\"md\" fontFamily=\"$heading\" mb=\"$4\">\n          Cotton Kurta\n        </Heading>\n        <Text size=\"sm\" fontFamily=\"$heading\">\n          Floral embroidered notch neck thread work cotton kurta in white and\n          black.\n        </Text>\n      </VStack>\n      <Box\n        flexDirection=\"column\"\n        sx={{\n          '@sm': {\n            flexDirection: 'row',\n          },\n        }}\n      >\n        <Button\n          px=\"$4\"\n          py=\"$2\"\n          fontFamily=\"$heading\"\n          mr=\"$0\"\n          mb=\"$3\"\n          sx={{\n            '@sm': {\n              mr: '$3',\n              mb: '$0',\n              flex: 1,\n            },\n          }}\n        >\n          <ButtonText size=\"sm\">Add to cart</ButtonText>\n        </Button>\n        <Button\n          px=\"$4\"\n          py=\"$2\"\n          variant=\"outline\"\n          fontFamily=\"$heading\"\n          borderColor=\"$borderLight300\"\n          $dark-borderColor=\"$backgroundDark600\"\n          sx={{\n            '@sm': {\n              flex: 1,\n            },\n          }}\n        >\n          <ButtonText\n            size=\"sm\"\n            color=\"$textLight600\"\n            $dark-color=\"$textDark400\"\n          >\n            Wishlist\n          </ButtonText>\n        </Button>\n      </Box>\n    </Card>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Toast with Variants in React Native\nDESCRIPTION: This example shows how to create a Toast component with different variants (accent, solid, outline) using the useToast hook and Button component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Toast/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n    const toast = useToast();\n    return (\n      <Button\n        onPress={() => {\n          toast.show({\n            placement:\"top\",\n            render: ({ id }) => {\n                 const toastId = \"toast-\" + id;\n                  return (\n                  <Toast nativeID={toastId} {...props} action='success'>\n                 <VStack space=\"xs\" flex={1}>\n                  <ToastTitle>Attention!</ToastTitle>\n                  <ToastDescription >\n                  Please review and accept our updated terms and conditions before continuing to use the application.\n                  </ToastDescription>\n                   </VStack>\n                </Toast>\n              );\n            },\n          });\n        }}\n      >\n        <ButtonText>Press Me</ButtonText>\n      </Button>\n    );\n  };\n```\n\n----------------------------------------\n\nTITLE: Badge with Avatar Example in React Native\nDESCRIPTION: This complex example demonstrates how to use the Badge component alongside an Avatar component. It includes styling and layout using HStack and VStack, showcasing a more advanced usage of the Badge component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarFallbackText, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge, BadgeIcon, BadgeText } from \"@/components/ui/badge\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { BadgeCheckIcon } from \"lucide-react-native\";\n\nfunction Example() {\n  return (\n    <VStack space=\"2xl\">\n          <HStack space=\"md\">\n            <Avatar>\n              <AvatarFallbackText>SS</AvatarFallbackText>\n              <AvatarImage\n                source={{\n                  uri: 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60',\n                }}\n              />\n            </Avatar>\n            <VStack>\n            <HStack>\n              <Heading size=\"sm\" >Ronald Richards</Heading>\n              <Badge  size=\"sm\" variant=\"solid\"  action=\"success\" className='ml-1'>\n                  <BadgeText>Verified</BadgeText>\n                  <BadgeIcon as={BadgeCheckIcon} className='ml-1'/>\n              </Badge>\n            </HStack>\n            <Text size='sm' >Nursing Assistant</Text>\n            </VStack>\n          </HStack>\n        </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient in a Subscription Form UI\nDESCRIPTION: A comprehensive example showing LinearGradient implementation within a subscription form UI. The component creates a gradient button with purple to blue transition, and is used alongside other components like Input, Heading, and Text within a GluestackUIProvider.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/recipes/linear-gradient/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"./global.css\";\nimport React, { useState } from \"react\";\nimport { Input, InputField, InputIcon, InputSlot } from \"@/components/ui/input\";\nimport { SafeAreaView } from \"@/components/ui/safe-area-view\";\nimport { GluestackUIProvider } from \"@/components/ui/gluestack-ui-provider\";\nimport { LinearGradient } from \"@/components/ui/linear-gradient\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Text } from \"@/components/ui/text\";\nimport { Center } from \"@/components/ui/center\";\nimport { Mail } from \"lucide-react-native\";\n\nexport default function App() {\n  const [colorMode, setColorMode] = useState<\"dark\" | \"light\">(\"light\");\n  return (\n    <SafeAreaView className=\"flex-1 justify-center items-center\">\n      <GluestackUIProvider mode={colorMode}>\n        <Center className=\"rounded-xl bg-background-0 p-8 m-6 web:max-w-[400px]\">\n          <Heading size=\"xl\">Stay up to date</Heading>\n          <Text className=\"text-center leading-[22px] my-2\">\n            Subscribe to our newsletter for the latest news and product updates.\n          </Text>\n\n          <Input\n            variant=\"outline\"\n            size=\"md\"\n            isDisabled={false}\n            isInvalid={false}\n            isReadOnly={false}\n            className=\"w-full rounded-full my-3\"\n          >\n            <InputField placeholder=\"abc@example.com\" />\n            <InputSlot className=\"pr-3\">\n              <InputIcon\n                as={Mail}\n                color={colorMode === \"light\" ? \"#525252\" : \"#DBDBDC\"}\n              />\n            </InputSlot>\n          </Input>\n\n          <LinearGradient\n            className=\"w-full rounded-full items-center py-2\"\n            colors={[\"#8637CF\", \"#0F55A1\"]}\n            start={[0, 1]}\n            end={[1, 0]}\n          >\n            <Text className=\"text-white font-semibold\">Subscribe</Text>\n          </LinearGradient>\n        </Center>\n      </GluestackUIProvider>\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Group with Counter in GlueStack UI\nDESCRIPTION: Shows how to implement a group of avatars with a counter for additional members. Includes custom styling and dynamic rendering of avatars with a count indicator.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App(){\n  const avatars = [\n      { src: 'https://example.com.jpg', alt: 'Sandeep Srivastva' , color:'$emerald600' },\n      { src: 'https://example.com.jpg', alt: 'Arjun Kapoor', color:'$cyan600' },\n      { src: 'https://example.com.jpg', alt: 'Ritik Sharma ', color:'$indigo600' },\n      { src: 'https://example.com.jpg', alt: 'Akhil Sharma', color:'$gray600' },\n      { src: 'https://example.com.jpg', alt: 'Rahul Sharma ', color:'$red400' },\n  ];\n  const extraAvatars = avatars.slice(3);\n  const remainingCount = extraAvatars.length;\n  return (\n    <AvatarGroup>\n      {avatars.slice(0, 3).map((avatar, index) => {\n        return (\n          <Avatar key={index} size=\"lg\" borderColor=\"$white\" borderWidth=\"$2\" bg={avatar.color} $dark-borderColor=\"$black\">\n            <AvatarFallbackText>{avatar.alt}</AvatarFallbackText>\n          </Avatar>\n        );\n      })}\n      <Avatar size=\"lg\" borderColor=\"$white\" borderWidth=\"$2\" bg=\"$gray600\" \n      $dark-borderColor=\"$black\">\n          <AvatarFallbackText >{\"+ \" + remainingCount + \"\"}</AvatarFallbackText>\n      </Avatar>\n    </AvatarGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Divider Implementation with Multiple Orientations\nDESCRIPTION: Demonstrates usage of Divider component with both horizontal and vertical orientations, including custom styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Divider } from \"@/components/ui/divider\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <VStack>\n      <Heading>gluestack-ui</Heading>\n      <Text>Universal component library</Text>\n      <Divider className=\"my-2  bg-indigo-500\" />\n      <HStack className=\"\">\n        <Text>Installation</Text>\n        <Divider\n          orientation=\"vertical\"\n          className=\"mx-2 h-[20px]  bg-emerald-500\"\n        />\n        <Text>API Reference</Text>\n        <Divider\n          orientation=\"vertical\"\n          className=\"mx-2 h-[20px]  bg-emerald-500\"\n        />\n        <Text>Examples</Text>\n      </HStack>\n    </VStack>\n  );\n```\n\n----------------------------------------\n\nTITLE: Testing stopPropagation and stopImmediatePropagation Methods in React Events\nDESCRIPTION: This suite tests the functionality of stopPropagation and stopImmediatePropagation methods in synthetic React events. It verifies that stopPropagation prevents events from bubbling up to parent elements, and stopImmediatePropagation prevents additional listeners on the same element from executing.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('stopPropagation and stopImmediatePropagation', () => {\n  test('stopPropagation works as expected', () => {\n    const childListener = jest.fn(e => {\n      e.stopPropagation();\n    });\n    const targetListener = jest.fn();\n    const targetRef = React.createRef();\n    const childRef = React.createRef();\n    declare function Component(): any;\n    render(<Component />);\n    const child = createEventTarget(childRef.current);\n    act(() => {\n      child.click();\n    });\n    expect(childListener).toBeCalledTimes(1);\n    expect(targetListener).toBeCalledTimes(0);\n  });\n  test('stopImmediatePropagation works as expected', () => {\n    const firstListener = jest.fn(e => {\n      e.stopImmediatePropagation();\n    });\n    const secondListener = jest.fn();\n    const targetRef = React.createRef();\n    declare function Component(): any;\n    render(<Component />);\n    const target = createEventTarget(targetRef.current);\n    act(() => {\n      target.click();\n    });\n    expect(firstListener).toBeCalledTimes(1);\n    expect(secondListener).toBeCalledTimes(0);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Component with Trigger in React\nDESCRIPTION: Example of implementing a Popover component with a trigger button and content in a React application using gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Popover, PopoverBackdrop, PopoverArrow, PopoverBody, PopoverContent } from \"@/components/ui/popover\";\nimport { Text } from \"@/components/ui/text\";\nimport React from \"react\";\n\nfunction App() {\n        const [isOpen, setIsOpen] = React.useState(false);\n        const handleOpen = () => {\n          setIsOpen(true);\n        };\n        const handleClose = () => {\n          setIsOpen(false);\n        };\n        return (\n          <Popover\n            isOpen={isOpen}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            {...props}\n            trigger={(triggerProps) => {\n              return (\n                <Button\n                  {...triggerProps}\n                >\n                  <ButtonText>\n                    Open Popover\n                  </ButtonText>\n                </Button>\n              );\n            }}\n          >\n            <PopoverBackdrop/>\n            <PopoverContent>\n              <PopoverArrow />\n              <PopoverBody>\n                <Text size={props.size} className=\"text-typography-900\">\n                  Alex, Annie and many others are already enjoying the Pro features,\n                  don't miss out on the fun!\n                </Text>\n              </PopoverBody>\n            </PopoverContent>\n          </Popover>\n        )\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing Onboarding Message Modal in React\nDESCRIPTION: This snippet demonstrates how to create an onboarding message modal using React components. It includes a button to trigger the modal, and the modal content consists of an image, heading, text, and action buttons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Image } from \"@/components/ui/image\";\nimport { Modal, ModalBackdrop, ModalContent, ModalBody, ModalFooter } from \"@/components/ui/modal\";\nimport { Text } from \"@/components/ui/text\";\nimport React from \"react\";\n\nfunction App() {\n        const [showModal, setShowModal] = React.useState(false);\n        return (\n          <>\n            <Button onPress={() => setShowModal(true)}>\n              <ButtonText>Dashboard</ButtonText>\n            </Button>\n            <Modal\n              isOpen={showModal}\n              onClose={() => {\n                setShowModal(false);\n              }}\n            >\n              <ModalBackdrop />\n              <ModalContent className=\"max-w-[375px]\">\n                <Image\n                  source={{\n                    uri: 'https://gluestack.github.io/public-blog-video-assets/Image%20Element.png',\n                  }}\n                  alt=\"image\"\n                  className=\"h-[185px] w-full rounded\"\n                />\n                <ModalBody className=\"mb-5\" contentContainerClassName=\"\">\n                  <Heading size=\"md\" className=\"text-typography-950 text-center\">\n                    Welcome to the dashboard\n                  </Heading>\n                  <Text size=\"sm\" className=\"text-typography-500 text-center\">\n                    We are glad to have you on board, Here are some quick tips to let\n                    you up and running.\n                  </Text>\n                </ModalBody>\n                <ModalFooter className=\"w-full\">\n                  <Button\n                    variant=\"outline\"\n                    action=\"secondary\"\n                    size=\"sm\"\n                    onPress={() => {\n                      setShowModal(false);\n                    }}\n                    className=\"flex-grow\"\n                  >\n                    <ButtonText>Skip</ButtonText>\n                  </Button>\n                  <Button\n                    onPress={() => {\n                      setShowModal(false);\n                    }}\n                    size=\"sm\"\n                    className=\"flex-grow\"\n                  >\n                    <ButtonText>Next</ButtonText>\n                  </Button>\n                </ModalFooter>\n              </ModalContent>\n            </Modal>\n          </>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Password Confirmation Modal with Alert in GlueStack UI\nDESCRIPTION: Implements a password confirmation modal with an input field, toggle password visibility, and an information alert for password requirements. Includes styled components and state management for password visibility.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert, AlertText, AlertIcon } from \"@/components/ui/alert\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Input, InputField, InputIcon, InputSlot } from \"@/components/ui/input\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { EyeIcon, EyeOffIcon, InfoIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction Example() {\n          const [showPassword, setShowPassword] = React.useState(false);\n          const handleState = () => {\n            setShowPassword((showState) => {\n              return !showState;\n            });\n          };\n          return (\n            <VStack className=\"gap-5 sm:gap-8 p-6 sm:p-9 border border-outline-200 bg-background-0 rounded-xl shadow-hard-5 w-full max-w-[423px]\">\n              <VStack className=\"items-center gap-1\">\n                <Heading size=\"xl\">Confirm our password?</Heading>\n                <Text>johnsmith@gmail.com</Text>\n              </VStack>\n              <VStack className=\"gap-3 sm:gap-5\">\n                <Input className=\"rounded-md\" size=\"sm\">\n                  <InputField\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Enter password\"\n                  />\n                  <InputSlot className=\"mr-3\" onPress={handleState}>\n                    <InputIcon\n                      size=\"xs\"\n                      as={showPassword ? EyeIcon : EyeOffIcon}\n                      className=\"stroke-background-600\"\n                    />\n                  </InputSlot>\n                </Input>\n                <Button className=\"w-full rounded-md\" size=\"sm\">\n                  <ButtonText>Confirm</ButtonText>\n                </Button>\n              </VStack>\n              <Alert className=\"items-start\" action=\"muted\">\n                <AlertIcon as={InfoIcon} size=\"xs\" className=\"stroke-background-500\" />\n                <AlertText className=\"text-typography-600\" size=\"xs\">\n                  Minimum 8 characters, with at least 1 uppercase, 1 lowercase, and 1\n                  number required.\n                </AlertText>\n              </Alert>\n            </VStack>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Slider in React Native\nDESCRIPTION: This example demonstrates how to create a vertical slider using the Slider component from gluestack-ui. It includes state management for the slider value and a change handler function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Slider/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(45);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n    <Center w=\"$80\">\n      <Slider\n        sliderTrackHeight={4}\n        value={sliderValue}\n        orientation=\"vertical\"\n        h={120}\n        onChange={(value) => {\n        handleChange(value);\n        }}>\n        <SliderTrack>\n          <SliderFilledTrack />\n        </SliderTrack>\n        <SliderThumb />\n      </Slider>\n    </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package Scripts for Dark Mode (JSON)\nDESCRIPTION: Modifies the package.json scripts to set the DARK_MODE environment variable for different platforms.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"android\": \"DARK_MODE=media expo start --android\",\n    \"ios\": \"DARK_MODE=media expo start --ios\",\n    \"web\": \"DARK_MODE=class expo start --web\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AlertDialog with Icon and CTA Implementation in React\nDESCRIPTION: Creates an AlertDialog with a cloud storage icon, warning message, and action buttons. Displays a storage full notification with cancel and upgrade options in a responsive layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AlertDialog, AlertDialogContent, AlertDialogFooter, AlertDialogBody, AlertDialogBackdrop } from \"@/components/ui/alert-dialog\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { Icon } from \"@/components/ui/icon\";\nimport React from \"react\";\nimport { UploadCloud } from \"lucide-react-native\";\n\nfunction Example(){\n          const [showAlertDialog, setShowAlertDialog] = React.useState(false);\n          const handleClose = () => setShowAlertDialog(false);\n          return (\n            <>\n              <Button onPress={() => setShowAlertDialog(true)}>\n                <ButtonText>Upload</ButtonText>\n              </Button>\n              <AlertDialog\n                isOpen={showAlertDialog}\n                onClose={handleClose}\n              >\n                <AlertDialogBackdrop />\n                <AlertDialogContent className=\"p-4 gap-4 max-w-[649px] w-full md:flex-row mx-2\">\n                  <AlertDialogBody\n                    className=\"\"\n                    contentContainerClassName=\"flex-row gap-4\"\n                  >\n                    <Box className=\"h-10 min-[350px]:h-14 w-12 min-[350px]:w-14 rounded-full bg-background-50 items-center justify-center\">\n                      <Icon\n                        as={UploadCloud}\n                        className=\"stroke-background-900\"\n                        size=\"xl\"\n                      />\n                    </Box>\n                    <VStack className=\"gap-1\">\n                      <Heading size=\"md\" className=\"text-typography-950 font-semibold\">\n                        Cloud storage full!\n                      </Heading>\n                      <Text size=\"sm\">You have used up all the storage you have.</Text>\n                    </VStack>\n                  </AlertDialogBody>\n                  <AlertDialogFooter>\n                    <Button\n                      variant=\"outline\"\n                      action=\"secondary\"\n                      onPress={handleClose}\n                      size=\"sm\"\n                    >\n                      <ButtonText>Cancel</ButtonText>\n                    </Button>\n                    <Button size=\"sm\" onPress={handleClose}>\n                      <ButtonText>Upgrade Storage</ButtonText>\n                    </Button>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Mode Toggle with GluestackUIProvider (React Native/Web)\nDESCRIPTION: Demonstrates how to use the GluestackUIProvider to toggle between light and dark modes in a React Native or Web application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GluestackUIProvider } from \"@/components/ui/gluestack-ui-provider\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/Button\";\nimport { useState } from 'react';\n\nexport default function App() {\n  const [colorMode, setColorMode] = useState<\"light\" | \"dark\">(\"light\");\n\n  return (\n    <GluestackUIProvider mode={colorMode}>\n      <Box className=\"bg-primary flex-1\">\n        <Button\n          onPress={() => {\n            setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n          }}\n        >\n          <ButtonText>Toggle color mode</ButtonText>\n        </Button>\n      </Box>\n    </GluestackUIProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FormControl with Radio Component in React Native\nDESCRIPTION: Example of integrating FormControl with RadioGroup and Radio components. This snippet demonstrates how to create a form with radio button options for selecting a favorite fruit, including a label and helper text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormControl, FormControlLabel, FormControlLabelText, FormControlHelper, FormControlHelperText } from \"@/components/ui/form-control\";\nimport { Radio, RadioGroup, RadioIndicator, RadioLabel, RadioIcon } from \"@/components/ui/radio\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { CircleIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App () {\n        const [values, setValues] = React.useState(\"Mango\");\n        return (\n        <FormControl>\n          <FormControlLabel>\n            <FormControlLabelText>\n              Favourite fruit\n            </FormControlLabelText>\n          </FormControlLabel>\n          <RadioGroup className='my-2' value={values} onChange={setValues}>\n            <VStack space=\"sm\">\n              <Radio size=\"sm\" value=\"Mango\">\n                <RadioIndicator>\n                  <RadioIcon as={CircleIcon} />\n                </RadioIndicator>\n                <RadioLabel>\n                  Mango\n                </RadioLabel>\n              </Radio>\n              <Radio size=\"sm\" value=\"Apple\">\n                <RadioIndicator>\n                  <RadioIcon as={CircleIcon} />\n                </RadioIndicator>\n                <RadioLabel>\n                  Apple\n                </RadioLabel>\n              </Radio>\n              <Radio size=\"sm\" value=\"Orange\">\n                <RadioIndicator>\n                  <RadioIcon as={CircleIcon} />\n                </RadioIndicator>\n                <RadioLabel>\n                  Orange\n                </RadioLabel>\n              </Radio>\n            </VStack>\n          </RadioGroup>\n          <FormControlHelper>\n            <FormControlHelperText>\n              Choose the fruit you like the most\n            </FormControlHelperText>\n          </FormControlHelper>\n        </FormControl>\n        )\n       }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Styled Avatars with User Icons in gluestack-ui\nDESCRIPTION: Implements custom styled avatars with user icons and text details. This example uses colored borders, background colors, and icons to create visually distinct avatar representations for different users.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"2xl\">\n  <HStack space=\"md\">\n    <Avatar size=\"md\" bgColor=\"$indigo300\" borderColor=\"$indigo600\" borderWidth={2}>\n      {/* User is imported from 'lucide-react-native' */}\n      <Icon as={User} color=\"$indigo600\" size=\"xl\"/>\n    </Avatar>\n    <VStack  >\n      <Heading size=\"sm\" >Ronald Richards</Heading>\n      <Text size=\"sm\" >Nursing Assistant</Text>\n    </VStack>\n  </HStack>\n  <HStack space=\"md\">\n    <Avatar size=\"md\"  bgColor=\"$pink300\" borderColor=\"$pink600\" borderWidth={2}>\n    {/* User is imported from 'lucide-react-native' */}\n      <Icon as={User} color=\"$pink600\" size=\"xl\"/>\n    </Avatar>\n    <VStack >\n      <Heading size=\"sm\" >Kevin James</Heading>\n      <Text size=\"sm\" >Web Designer</Text>\n    </VStack>\n  </HStack>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Importing Google Fonts in Expo\nDESCRIPTION: Import statement for various weights of the Inter font from the @expo-google-fonts/inter package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Fonts/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nimport {\n  Inter_400Regular,\n  Inter_500Medium,\n  Inter_600SemiBold,\n  Inter_700Bold,\n  Inter_900Black, } from \"@expo-google-fonts/inter\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover on Avatar in React Native\nDESCRIPTION: This code snippet demonstrates how to create a Popover component triggered by an Avatar, displaying additional user information and actions. It uses various sub-components like PopoverContent, PopoverHeader, and PopoverBody to structure the popover's content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box h='$80'>\n  <Popover\n    trigger={(triggerProps) => {\n      return (\n        <HStack alignItems='center'>\n          <Pressable\n            borderRadius='$full'\n            {...triggerProps}\n          >\n            <Avatar bg='$indigo600'>\n              <AvatarFallbackText >\n                Kevin James\n              </AvatarFallbackText>\n            </Avatar>\n          </Pressable>\n          <VStack ml='$2.5' space='xs'>\n            <Heading fontSize='$md'>\n              Kevin James\n            </Heading>\n            <Text size='sm'>\n              Hi Rachel, What's up?\n            </Text>\n          </VStack>\n        </HStack>\n      );\n    }}\n  >\n    <PopoverBackdrop/>\n    <PopoverContent w='$80'>\n      <PopoverHeader  px='$5' pt='$5'>\n        <HStack>\n          <Avatar bg='$indigo600' >\n            <AvatarFallbackText>\n              Kevin James\n            </AvatarFallbackText>\n          </Avatar>\n          <VStack ml='$2.5'>\n            <Heading fontSize='$md'>\n              Kevin James\n            </Heading>\n            <HStack alignItems='center'>\n              <CircleIcon color='$green700' h='$2' w='$2'/>\n              <Text size='sm'  pl='$1.5'>\n                Active\n              </Text>\n            </HStack>\n          </VStack>\n        </HStack>\n      </PopoverHeader>\n      <PopoverBody  px='$5' pb='$5'>\n        <VStack space='lg'>\n          <VStack space='sm'>\n            <HStack alignItems='center'>\n              <Icon as={PhoneIcon} size='sm' />\n              <Text size='sm'  ml='$1.5'>\n                (603) 555-0123\n              </Text>\n            </HStack>\n            <HStack alignItems='center'>\n              <Icon as={Clock3Icon} size='sm'/>\n              <Text size='sm'  ml='$1.5'>\n                5:21 PM local time\n              </Text>\n            </HStack>\n            <HStack alignItems='center'>\n              <Icon as={MailIcon} size='sm'/>\n              <Text size='sm'  ml='$1.5'>\n                kevinjames@sample.com\n              </Text>\n            </HStack>\n          </VStack>\n          <Button bg='$primary700'>\n            <ButtonText>View Profile</ButtonText>\n          </Button>\n        </VStack>\n      </PopoverBody>\n    </PopoverContent>\n  </Popover>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Rendering Input with Search Icon in React Native\nDESCRIPTION: This example shows how to create an Input component with a search icon. It uses the Input, InputField, InputIcon, and InputSlot components from gluestack-ui to create a search input field with an icon.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Input/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Input>\n  <InputSlot pl='$3'>\n    <InputIcon as={SearchIcon}/>\n  </InputSlot>\n  <InputField\n    placeholder=\"Search...\"\n  />\n</Input>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Duration Toast in React with gluestack-ui\nDESCRIPTION: Creates a toast notification with customizable duration. The toast includes a message icon, title, description, and close button, allowing users to specify how long the toast should remain visible.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Toast/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  const toast = useToast();\n  const {...props}\n  return (\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: 'top',\n          duration: duration,\n          render: ({ id }) => {\n            const toastId = \"toast-\" + id;\n            return (\n              <Toast bg='$secondary700' nativeID={toastId} p='$3'>\n                <Icon as={MessageCircle}  color='$white' mt='$1' mr='$3' />\n                <VStack space='xs' flex={1}>\n                <ToastTitle color='$textLight50'>New Message</ToastTitle>\n                <ToastDescription color='$textLight50'>Hey, just wanted to touch base and see how you're doing. Let's catch up soon!</ToastDescription>\n                </VStack>\n                 <Pressable mt='$1' onPress={() => toast.close(id)}>\n                <Icon as={CloseIcon} color='$coolGray50' />\n               </Pressable>\n              </Toast>\n            );\n          },\n        });\n      }}\n    >\n      <ButtonText>Press Me</ButtonText>\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Input Component with gluestack-ui\nDESCRIPTION: Example showing how to create a basic input field component by importing necessary styled components and using the createInput function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/input/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, Input } from '../components/core/input/styled-components';\nimport { createInput } from '@gluestack-ui/input';\nconst InputField = createInput({\n  Root,\n  Input,\n});\n```\n\n----------------------------------------\n\nTITLE: Button Component Anatomy in JSX\nDESCRIPTION: This code demonstrates the structure of a Button component, including ButtonText, ButtonSpinner, and ButtonIcon, wrapped in a ButtonGroup.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <ButtonGroup>\n    <Button>\n      <ButtonText />\n      <ButtonSpinner />\n      <ButtonIcon />\n    </Button>\n  </ButtonGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Badge Status Indicators in Gluestack UI\nDESCRIPTION: This code demonstrates a responsive order table with status badges. The table includes columns for order ID, items, customer name, city, price, and status. The status column displays a color-coded Badge component that indicates different order states like completed, processing, and shipped.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Table/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge, BadgeText } from \"@/components/ui/badge\";\nimport { Box } from \"@/components/ui/box\";\nimport { Table, TableHeader, TableBody, TableHead, TableRow, TableData } from \"@/components/ui/table\";\n\tfunction App(){\n    return (\n <Box className=\"rounded-lg overflow-hidden\">\n      <Table className=\"w-full\">\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"font-bold\">Order id</TableHead>\n            <TableHead>Items</TableHead>\n            <TableHead>Name</TableHead>\n            <TableHead>City</TableHead>\n            <TableHead>Order price</TableHead>\n            <TableHead>Status</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            <TableData>571</TableData>\n            <TableData>3</TableData>\n            <TableData>Rajesh Kumar</TableData>\n            <TableData>New Jersey</TableData>\n            <TableData>$ 200</TableData>\n            <TableData>\n              <Badge\n                size=\"sm\"\n                action=\"success\"\n                className=\"w-fit justify-center\"\n              >\n                <BadgeText>Completed</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>5231</TableData>\n            <TableData>2</TableData>\n            <TableData>Priya Sharma</TableData>\n            <TableData>Austin</TableData>\n            <TableData>$ 150</TableData>\n            <TableData>\n              <Badge size=\"sm\" action=\"info\" className=\"w-fit justify-center\">\n                <BadgeText>Processing</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>5771</TableData>\n            <TableData>3</TableData>\n            <TableData>Ravi Patel</TableData>\n            <TableData>Seattle</TableData>\n            <TableData>$ 215</TableData>\n            <TableData>\n              <Badge\n                size=\"sm\"\n                action=\"warning\"\n                className=\"w-fit justify-center\"\n              >\n                <BadgeText>Shipped</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>5231</TableData>\n            <TableData>4</TableData>\n            <TableData>Ananya Gupta</TableData>\n            <TableData>California</TableData>\n            <TableData>$ 88</TableData>\n            <TableData>\n              <Badge size=\"sm\" action=\"info\" className=\"w-fit justify-center\">\n                <BadgeText>Processing</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>5771</TableData>\n            <TableData>3</TableData>\n            <TableData>Arjun Singh</TableData>\n            <TableData>Seattle</TableData>\n            <TableData>$ 115</TableData>\n            <TableData>\n              <Badge size=\"sm\" action=\"info\" className=\"w-fit justify-center\">\n                <BadgeText>Processing</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>5771</TableData>\n            <TableData>3</TableData>\n            <TableData>Nisha Verma</TableData>\n            <TableData>Austin</TableData>\n            <TableData>$ 115</TableData>\n            <TableData>\n              <Badge\n                size=\"sm\"\n                action=\"success\"\n                className=\"w-fit justify-center\"\n              >\n                <BadgeText>Completed</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Box>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input with Search Icon\nDESCRIPTION: Example demonstrating Input component with a search icon integration. Shows how to add icons to the input field using InputSlot and InputIcon components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Input>\n  <InputSlot pl='$3'>\n    <InputIcon as={SearchIcon}/>\n  </InputSlot>\n  <InputField\n    placeholder=\"Search...\"\n  />\n</Input>\n```\n\n----------------------------------------\n\nTITLE: Implementing FormControl with Textarea Component in React Native\nDESCRIPTION: Example of integrating FormControl with Textarea component. This snippet demonstrates how to create a comment form with a textarea input field and supporting helper text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormControl, FormControlLabel, FormControlLabelText, FormControlHelper, FormControlHelperText } from \"@/components/ui/form-control\";\nimport { Textarea, TextareaInput } from \"@/components/ui/textarea\";\n\nfunction Example() {\n  return (\n    <FormControl>\n          <FormControlLabel>\n            <FormControlLabelText>\n              Comment\n            </FormControlLabelText>\n          </FormControlLabel>\n          <Textarea className=\"min-w-[200px]\">\n            <TextareaInput />\n          </Textarea>\n          <FormControlHelper >\n            <FormControlHelperText>\n              Type your comment above\n            </FormControlHelperText>\n          </FormControlHelper>\n        </FormControl>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Checkbox Component in React\nDESCRIPTION: Example of an uncontrolled checkbox implementation using a checkbox group with multiple options. Uses useRef for handling checkbox state and includes change event handling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n       const radioRef = useRef(null);\n        const handleCheckboxChange = (e) => {\n            e.preventDefault();\n            const checkboxValue = radioRef.current.checked;\n          };\n        return (\n          <CheckboxGroup  ref={radioRef} >\n          <VStack space=\"md\">\n                  <Checkbox   onChange={handleCheckboxChange}  value=\"Apartments\">\n                    <CheckboxIndicator   mr=\"$2\">\n                        <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                     <CheckboxLabel>Apartments</CheckboxLabel>\n                  </Checkbox>\n                   <Checkbox   onChange={handleCheckboxChange}  value=\"Residents\">\n                    <CheckboxIndicator  mr=\"$2\">\n                        <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                     <CheckboxLabel>Residents</CheckboxLabel>\n                  </Checkbox>\n            </VStack>\n          </CheckboxGroup>\n               )\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR with gluestack-style in Next.js _document file\nDESCRIPTION: This code snippet demonstrates how to use the flush function from gluestack-style in a Next.js _document file. It includes attaching necessary classes for styling and color mode, and properly integrating the flushed styles into the HTML document.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/SSR/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { flush } from '@gluestack-style/react';\n\nclass MyDocument extends Document {\n  render() {\n    return (\n      <Html className=\"gs gs-dark\">\n        <Head></Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport async function getInitialProps({ renderPage }: any) {\n  AppRegistry.registerComponent('Main', () => Main);\n  const { getStyleElement } = AppRegistry.getApplication('Main');\n  const page = await renderPage();\n  const styles = [\n    <style dangerouslySetInnerHTML={{ __html: style }} />,\n    getStyleElement(),\n    ...flush(),\n  ];\n  return { ...page, styles: React.Children.toArray(styles) };\n}\n\nDocument.getInitialProps = getInitialProps;\n\nexport default MyDocument;\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient in React Native Project\nDESCRIPTION: This example shows a complete implementation of the LinearGradient component in a React Native project. It includes provider setup, importing the native implementation, and configuring gradient colors, direction, and styling properties.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/recipes/linearGradient/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { SafeAreaView } from \"react-native\";\nimport {\n  GluestackUIProvider,\n  LinearGradient,\n} from \"@gluestack-ui/themed\";\nimport { config } from \"@gluestack-ui/config\";\nimport { LinearGradient as RNLinearGradient } from \"react-native-linear-gradient\";\n\nexport default function App() {\n  return (\n    <GluestackUIProvider config={config}>\n      <Example />\n    </GluestackUIProvider>\n  );\n}\n\nconst Example = () => {\n  return (\n    <SafeAreaView>\n      <LinearGradient\n        p=\"$16\"\n        colors={['$purple400', '$blue400', '$pink300']}\n        borderRadius=\"$md\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 1, y: 1 }}\n        as={RNLinearGradient}\n      >\n      </LinearGradient>\n    </SafeAreaView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Form-Controlled Select Component in React with gluestack-ui\nDESCRIPTION: This code demonstrates how to implement a Select component with form validation using FormControl. The example includes a dropdown with color options, helper text, and error handling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Select/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<FormControl isRequired isInvalid>\n  <FormControlLabel>\n    <FormControlLabelText>\n      Choose your favorite color\n    </FormControlLabelText>\n  </FormControlLabel>\n  <Select>\n    <SelectTrigger>\n      <SelectInput placeholder=\"Select option\"/>\n      <SelectIcon mr=\"$3\">\n        <Icon as={ChevronDownIcon} />\n      </SelectIcon>\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectBackdrop />\n      <SelectContent>\n        <SelectDragIndicatorWrapper>\n          <SelectDragIndicator />\n        </SelectDragIndicatorWrapper>\n        <SelectItem label=\"Red\" value=\"red\" />\n        <SelectItem label=\"Blue\" value=\"blue\" />\n        <SelectItem label=\"Black\" value=\"black\" />\n        <SelectItem label=\"Pink\" value=\"pink\" isDisabled={true} />\n        <SelectItem label=\"Green\" value=\"green\" />\n      </SelectContent>\n    </SelectPortal>\n  </Select>\n  <FormControlHelper>\n    <FormControlHelperText>\n      You can only select one option\n    </FormControlHelperText>\n  </FormControlHelper>\n  <FormControlError>\n    <FormControlErrorIcon as={AlertCircleIcon} />\n    <FormControlErrorText>Mandatory field</FormControlErrorText>\n  </FormControlError>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB with Icon and Text in Article Layout\nDESCRIPTION: Example demonstrating a FAB with both icon and text in an article layout context. The component includes a search button with text and multiple article cards with metadata.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  maxWidth='$96'\n  borderColor='$borderLight200'\n  rounded='$lg'\n  borderWidth='$1'\n  py={56}\n  px='$6'\n  $base-mx='$5'\n  $dark-bg='$backgroundDark900'\n  $dark-borderColor='$borderDark800'\n>\n  <Fab bg=\"$primary600\" height=\"$9\" top='$4'>\n    <FabIcon as={SearchIcon}  mr=\"$1.5\"/>\n    <FabLabel >Search</FabLabel>\n  </Fab>\n  <VStack space='lg'>\n    <Box>\n      <Text fontSize='$xs' color='$darkBlue600' fontWeight='$bold'  \n      $dark-color='$darkBlue400'>\n        HEALTH\n      </Text>\n      <Heading size='sm'>\n        Benefits of Oranges\n      </Heading>\n      <Text size='xs' mt='$1.5'>\n        Oranges are a great source of vitamin C, which is essential for a healthy immune system.\n      </Text>\n      <HStack space='sm' mt='$3' h='$5'>\n        <Text size='xs'>\n          Wade Warrem\n        </Text>\n        <Divider\n          orientation='vertical'\n          bg=\"$backgroundLight300\"\n          $dark-bg=\"$backgroundLight700\"\n        />\n        <Text size='xs'>\n          6th Oct, 2019\n        </Text>\n        <Divider\n          orientation='vertical'\n          bg=\"$backgroundLight300\"\n          $dark-bg=\"$backgroundLight700\"\n        />\n        <Text size='xs'>\n          5 mins read\n        </Text>\n      </HStack>\n    </Box>\n    <Divider />\n    <Box>\n      <Text fontSize='$xs' color='$darkBlue600' fontWeight='$bold' $dark-color='$darkBlue400'>\n        TECHNOLOGY\n      </Text>\n      <Heading size='sm' >\n        How AI can benefit your business\n      </Heading>\n      <Text size='xs'  mt='$1.5'>\n        AI can automate tasks and processes, allowing for increasing efficiency and productivity.\n      </Text>\n      <HStack space='sm' mt='$3' h='$5'>\n        <Text size='xs' >\n          Wade Warrem\n        </Text>\n        <Divider\n          orientation='vertical'\n          bg=\"$backgroundLight300\"\n          $dark-bg=\"$backgroundLight700\"\n        />\n        <Text size='xs'>\n          6th Oct, 2019\n        </Text>\n        <Divider\n          orientation='vertical'\n          bg=\"$backgroundLight300\"\n          $dark-bg=\"$backgroundLight700\"\n        />\n        <Text size='xs'>\n          5 mins read\n        </Text>\n      </HStack>\n    </Box>\n  </VStack>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Complete Input Component Example\nDESCRIPTION: Example showing Input component usage with InputField, InputSlot, and InputIcon\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Input>\n    <InputField />\n    <InputSlot>\n      <InputIcon>{/* Some Icon Component */}</InputIcon>\n    </InputSlot>\n  </Input>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Textarea Component within FormControl in JSX\nDESCRIPTION: This snippet demonstrates how to use the Textarea component within a FormControl. It includes a label, placeholder text, and helper text. The Textarea is wrapped in a FormControl for better form management and accessibility.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Textarea/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<FormControl>\n  <FormControlLabel>\n    <FormControlLabelText>\n      Write with me\n    </FormControlLabelText>\n  </FormControlLabel>\n  <Textarea>\n    <TextareaInput placeholder='Once upon a time...'/>\n  </Textarea>\n  <FormControlHelper>\n    <FormControlHelperText>\n      Start your story\n    </FormControlHelperText>\n  </FormControlHelper>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Component Implementation in React\nDESCRIPTION: Demonstrates the basic implementation of a Menu component with multiple menu items including icons and labels.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu\n  placement=\"top\"\n    trigger={({ ...triggerProps }) => {\n      return (\n        <Button {...triggerProps}>\n          <ButtonText>Menu</ButtonText>\n        </Button>\n      );\n    }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n      <Icon as={GlobeIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Community\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n        <Icon as={PuzzleIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Plugins\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n        <Icon as={PaintBucket} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Theme\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n        <Icon as={SettingsIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Settings\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Add account\" textValue=\"Add account\">\n        <Icon as={AddIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Add account\n        </MenuItemLabel>\n    </MenuItem>\n  </Menu>\n```\n\n----------------------------------------\n\nTITLE: Creating Controlled Radio Buttons in React\nDESCRIPTION: This example shows how to implement controlled radio buttons where the selected state is managed externally through React state. It uses the useState hook to track and update the selected option.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const [values, setValues] = useState('Apartments');\n  return (\n    <RadioGroup value={values} onChange={setValues}>\n      <VStack space='md'>\n        <Radio value=\"Apartments\">\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Apartments</RadioLabel>\n        </Radio>\n        <Radio value=\"Houses\">\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>Houses</RadioLabel>\n        </Radio>\n      </VStack>\n    </RadioGroup>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering Toast with Different Placements in React Native\nDESCRIPTION: This example demonstrates how to create a Toast component with various placement options (bottom, top, top right, top left, bottom left, bottom right) using the useToast hook and Button component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Toast/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  const toast = useToast();\n  const placements = {\n    'bottom': 'Looks like you found the hiding spot at the bottom of the page!',\n    'top': 'The top spot is your favorite hiding spot! Keep hunting for success.',\n    'top right': \"You're hiding in plain sight at the top right corner! You are good at this game.\",\n    'top left': \"You're a master of disguise hiding in the top left corner! Keep up the sneakiness.\",\n    'bottom left': \"You're not the best at hiding, but we found you in the bottom left corner.\",\n    'bottom right': \"Found you! Don't worry, we wont tell anyone.\",\n  }\n  const {...props}\n  return (\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n              const toastId = \"toast-\" + id;\n              return (\n                <Toast nativeID={toastId}>\n                <ToastDescription>{placements[placement]}</ToastDescription>\n              </Toast>\n            );\n          },\n        });\n      }}\n    >\n      <ButtonText>Press Me</ButtonText>\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Input with FormControl\nDESCRIPTION: Example showing Input component implementation with password visibility toggle and FormControl integration. Includes email and password fields with icon control for password visibility.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [showPassword, setShowPassword] = React.useState(false);\n  const handleState = () => {\n    setShowPassword((showState) => {\n      return !showState;\n    });\n  };\n  return (\n    <FormControl\n      p='$4'\n      borderWidth='$1'\n      borderRadius='$lg'\n      borderColor='$borderLight300'\n      $dark-borderWidth='$1' $dark-borderRadius='$lg' $dark-borderColor='$borderDark800'\n    >\n      <VStack space='xl'>\n        <Heading color='$text900' lineHeight='$md'>\n          Login\n        </Heading>\n        <VStack space='xs'>\n          <Text color='$text500' lineHeight='$xs'>\n            Email\n          </Text>\n          <Input>\n            <InputField\n              type=\"text\"\n            />\n          </Input>\n        </VStack>\n        <VStack space='xs'>\n          <Text color='$text500' lineHeight='$xs'>\n            Password\n          </Text>\n          <Input textAlign='center'>\n            <InputField\n              type={showPassword ? 'text' : 'password'}\n            />\n            <InputSlot pr='$3' onPress={handleState}>\n              <InputIcon as={showPassword ? EyeIcon : EyeOffIcon}  color='$darkBlue500'/>\n            </InputSlot>\n          </Input>\n        </VStack>\n        <Button\n          ml='auto'\n          onPress={()=>{\n            setShowModal(false);\n          }}\n        >\n          <ButtonText>\n            Save\n          </ButtonText>\n        </Button>\n      </VStack>\n    </FormControl>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet with Icons in React\nDESCRIPTION: Creates an Actionsheet component with icon-based action items. Includes buttons for delete, share, play, favorite and cancel actions, each with their corresponding icons. Uses state management to control the visibility of the actionsheet.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [showActionsheet, setShowActionsheet] = React.useState(false);\n  const handleClose = () => setShowActionsheet(!showActionsheet);\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n          <ActionsheetContent>\n            <ActionsheetDragIndicatorWrapper>\n              <ActionsheetDragIndicator />\n            </ActionsheetDragIndicatorWrapper>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetIcon>\n                <Icon as={TrashIcon} />\n              </ActionsheetIcon>\n              <ActionsheetItemText>Delete</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetIcon>\n                <Icon as={ShareIcon} />\n              </ActionsheetIcon>\n              <ActionsheetItemText>Share</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetIcon>\n                <Icon as={PlayIcon} />\n              </ActionsheetIcon>\n              <ActionsheetItemText>Play</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetIcon>\n                <Icon as={FavouriteIcon} />\n              </ActionsheetIcon>\n              <ActionsheetItemText>Favourite</ActionsheetItemText>\n            </ActionsheetItem>\n            <ActionsheetItem onPress={handleClose}>\n              <ActionsheetIcon>\n                <Icon as={CloseIcon} />\n              </ActionsheetIcon>\n              <ActionsheetItemText>Cancel</ActionsheetItemText>\n            </ActionsheetItem>\n          </ActionsheetContent>\n      </Actionsheet>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Components with Different Sizes in React\nDESCRIPTION: This code demonstrates how to use the Text component from gluestack-ui with different size variations, ranging from 'xs' to '6xl'. It maps through an array of sizes and renders each size with its name as content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Typography/Text/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const sizes = [\n    'xs',\n    'sm',\n    'md',\n    'lg',\n    'xl',\n    '2xl',\n    '3xl',\n    '4xl',\n    '5xl',\n    '6xl',\n  ];\n  return (\n    <Center>\n      {sizes.map((size) => (\n        <Text size={size}>{size}</Text>\n      ))}\n    </Center>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Config Package - Yarn\nDESCRIPTION: Command to install the latest version of @gluestack-ui/config package using yarn\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/theme-configuration/customizing-theme/EjectLibrary/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-ui/config@latest\n```\n\n----------------------------------------\n\nTITLE: Creating FormControl with Checkbox Group in React\nDESCRIPTION: This snippet illustrates the use of FormControl with a Checkbox group. It creates a form for newsletter subscriptions with options for Daily Bits, Event Updates, and Sponsorship. The component includes a label and helper text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<FormControl>\n  <FormControlLabel>\n    <FormControlLabelText>\n      Sign up for newsletters\n    </FormControlLabelText>\n  </FormControlLabel>\n  <CheckboxGroup my='$2'>\n    <VStack space=\"sm\">\n      <Checkbox size=\"sm\" value=\"Mango\">\n        <CheckboxIndicator mr=\"$2\">\n          <CheckboxIcon>\n            <CheckIcon />\n          </CheckboxIcon>\n        </CheckboxIndicator>\n        <CheckboxLabel>\n          Daily Bits\n        </CheckboxLabel>\n      </Checkbox>\n      <Checkbox size=\"sm\" value=\"Apple\">\n        <CheckboxIndicator mr=\"$2\">\n          <CheckboxIcon>\n            <CheckIcon />\n          </CheckboxIcon>\n        </CheckboxIndicator>\n        <CheckboxLabel>\n          Event Updates\n        </CheckboxLabel>\n      </Checkbox>\n      <Checkbox size=\"sm\" value=\"Orange\">\n        <CheckboxIndicator mr=\"$2\">\n          <CheckboxIcon>\n            <CheckIcon />\n          </CheckboxIcon>\n        </CheckboxIndicator>\n        <CheckboxLabel>\n          Sponsorship\n        </CheckboxLabel>\n      </Checkbox>\n    </VStack>\n  </CheckboxGroup>\n  <FormControlHelper>\n    <FormControlHelperText>\n      Subscribe to newsletters for updates\n    </FormControlHelperText>\n  </FormControlHelper>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Using useMediaQuery with Specific Dimensions\nDESCRIPTION: This example demonstrates how to use the useMediaQuery hook with specific minimum and maximum width values to determine a layout property like flexDirection.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/hooks/useMediaQuery/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst flexDir = useMediaQuery({\n                minWidth: 480,\n                maxWidth: 1280,\n              });\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Implementation\nDESCRIPTION: Implements a checkbox group with disabled state functionality and vertical stack layout. Uses state management to track selected values and demonstrates proper component composition.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from \"@/components/ui/center\";\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon, CheckboxGroup } from \"@/components/ui/checkbox\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { CheckIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction CheckboxExample(){\n  const [values, setValues] = React.useState([]);\n  return (\n      <Center>\n        <CheckboxGroup\n          value={values}\n          onChange={setValues}\n        >\n          <VStack space=\"sm\">\n            <Checkbox\n            isDisabled={true}\n              value=\"Label 1\"\n            >\n              <CheckboxIndicator>\n                <CheckboxIcon as={CheckIcon}/>\n              </CheckboxIndicator>\n              <CheckboxLabel>Label 1</CheckboxLabel>\n            </Checkbox>\n            <Checkbox\n              value=\"Label 2\"\n            >\n              <CheckboxIndicator>\n                <CheckboxIcon as={CheckIcon}/>\n              </CheckboxIndicator>\n              <CheckboxLabel>Label 2</CheckboxLabel>\n            </Checkbox>\n          </VStack>\n        </CheckboxGroup>\n      </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using the Icon Component\nDESCRIPTION: Comprehensive example showing how to import styles, use the createIcon function, and implement the Icon component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/icon/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from '../components/core/icon/styled-components';\n\n// import the createIcon function\nimport { createIcon } from '@gluestack-ui/icon';\n\n// Understanding the API\nconst Icon = createIcon({\n  Root,\n});\n\n// Using the icon component\nexport default () => <Icon />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Handling in Actionsheet with React Native\nDESCRIPTION: This example demonstrates how to implement a keyboard-aware Actionsheet in React Native. It showcases a payment form with credit card details that properly handles keyboard appearance, ensuring the input field remains visible when the keyboard appears. The component uses KeyboardAvoidingView for platform-specific behavior.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Actionsheet, ActionsheetContent, ActionsheetDragIndicator, ActionsheetDragIndicatorWrapper, ActionsheetBackdrop } from \"@/components/ui/actionsheet\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { FormControl, FormControlLabel, FormControlLabelText } from \"@/components/ui/form-control\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Image } from \"@/components/ui/image\";\nimport { Input, InputField, InputIcon, InputSlot } from \"@/components/ui/input\";\nimport { KeyboardAvoidingView } from \"@/components/ui/keyboard-avoiding-view\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { Platform } from \"react-native\";\nimport React from \"react\";\nimport { CreditCardIcon } from \"lucide-react-native\";\n\t\nfunction App(){\n          const [showActionsheet, setShowActionsheet] = React.useState(false);\n          const handleClose = () => setShowActionsheet(false);\n            return (\n              <>\n                <Button onPress={() => setShowActionsheet(true)}>\n                  <ButtonText>Open</ButtonText>\n                </Button>\n                <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : undefined}>\n                  <Actionsheet\n                    isOpen={showActionsheet}\n                    onClose={handleClose}\n                  >\n                    <ActionsheetBackdrop />\n                    <ActionsheetContent className=\"\">\n                      <ActionsheetDragIndicatorWrapper>\n                        <ActionsheetDragIndicator />\n                      </ActionsheetDragIndicatorWrapper>\n                      <VStack className=\"w-full pt-5\">\n                        <HStack space=\"md\" className=\"justify-center items-center\">\n                          <Box\n                            className=\"w-[50px] h-full px-2 border border-solid border-outline-300 rounded-sm\"\n                          >\n                            <Image\n                              source={{ uri: 'https://i.imgur.com/UwTLr26.png' }}\n                              resizeMode=\"contain\"\n                              className=\"flex-1\"\n                            />\n                          </Box>\n                          <VStack className=\"flex-1\">\n                            <Text className=\"font-bold\">Mastercard</Text>\n                            <Text>Card ending in 2345</Text>\n                          </VStack>\n                        </HStack>\n                        <FormControl className=\"mt-[36px]\">\n                          <FormControlLabel>\n                            <FormControlLabelText>\n                              Confirm security code\n                            </FormControlLabelText>\n                          </FormControlLabel>\n                          <Input className=\"w-full\">\n                            <InputSlot>\n                            <InputIcon as={CreditCardIcon} className=\"ml-2\"/>\n                            </InputSlot>\n                            <InputField placeholder=\"CVC/CVV\" />\n                          </Input>\n                          <Button onPress={handleClose} className=\"mt-3\">\n                            <ButtonText className=\"flex-1\">Pay $1000</ButtonText>\n                          </Button>\n                        </FormControl>\n                      </VStack>\n                    </ActionsheetContent>\n                  </Actionsheet>\n              </KeyboardAvoidingView>\n            </>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: FormControl Basic Usage Example\nDESCRIPTION: Basic implementation example showing FormControl component structure\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <FormControl>\n    <FormControlLabel>\n      <FormControlLabelText />\n    </FormControlLabel>\n    <FormControlHelper>\n      <FormControlHelperText />\n    </FormControlHelper>\n    <FormControlError>\n      <FormControlErrorIcon />\n      <FormControlErrorText />\n    </FormControlError>\n  </FormControl>\n);\n```\n\n----------------------------------------\n\nTITLE: Badge with Avatar Example in React\nDESCRIPTION: This example shows how to use the Badge component with an Avatar component for enhanced visual representation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Badge/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"2xl\">\n  <HStack space=\"md\">\n    <Avatar>\n      <AvatarFallbackText>SS</AvatarFallbackText>\n      <AvatarImage\n        source={{\n          uri: 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60',\n        }}\n      />\n    </Avatar>\n    <VStack>\n    <HStack>\n      <Heading size=\"sm\" >Ronald Richards</Heading>\n      <Badge  size=\"sm\" variant=\"solid\"  action=\"success\" ml=\"$1\">\n          <BadgeText>Verified</BadgeText>\n          <BadgeIcon as={BadgeCheckIcon} ml=\"$1\"/>\n      </Badge>\n    </HStack>\n    <Text size=\"sm\" >Nursing Assistant</Text>\n    </VStack>\n  </HStack>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dismissable Toast in React with gluestack-ui\nDESCRIPTION: Creates a dismissable toast notification with success styling and a close button. The toast includes an icon, title, description, and a close button that allows users to manually dismiss the notification.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Toast/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  const toast = useToast();\n  return (\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: 'top',\n          render: ({ id }) => {\n            const toastId = \"toast-\" + id;\n            return (\n              <Toast bg='$success700' nativeID={toastId}>\n                <Icon as={CheckIcon} color='$white' mt='$1' mr='$3' />\n                <VStack space='xs' flex={1}>\n                <ToastTitle color='$textLight50' >Download Complete</ToastTitle>\n                <ToastDescription color='$textLight50'>Your file 'wadewarren.docx' has been downloaded successfully. You can find it in your Downloads folder.</ToastDescription>\n                </VStack>\n               <Pressable mt='$1' onPress={() => toast.close(id)}>\n                <Icon as={CloseIcon} color='$coolGray50' />\n               </Pressable>\n              </Toast>\n            );\n          },\n        });\n      }}\n    >\n      <ButtonText>Press Me</ButtonText>\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Button with Icon in gluestack-ui\nDESCRIPTION: This snippet shows how to create buttons with icons using gluestack-ui components. It demonstrates two variations: a button with a left icon and a button with a right icon.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>\n  <Button>\n  <ButtonIcon as={InfoIcon} mr=\"$2\"/>\n    <ButtonText>Left Icon</ButtonText>\n  </Button>\n  <Button variant=\"solid\" mt=\"$2\">\n  <ButtonText>Right Icon</ButtonText>\n      <ButtonIcon as={AddIcon} ml=\"$2\"/>\n  </Button>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Toast Component in React\nDESCRIPTION: This snippet demonstrates how to create a custom Toast component using the createToast function and use it with a button press. It includes importing styled components, creating the Toast component, and using it within a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Title,\n  Description,\n} from 'components/core/toast/styled-components';\n\n// import the createToast function\nimport { createToast, createToastHook } from '@gluestack-ui/toast';\n\n// Understanding the API\nconst Toast = createToast({\n  Root,\n  Title,\n  Description,\n});\n\nconst useToast = createToastHook(Toast);\n\n// Using the toast component\nexport default () => {\n  const toast = useToast();\n  return (\n    <Button\n      {...props}\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n              const toastId = \"toast-\" + id;\n              return (\n                <Toast nativeID={toastId}>\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            );\n          },\n        });\n      }}\n    >\n      <ButtonText>Press Me</ButtonText>\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Toast in a Note-Taking Platform with React\nDESCRIPTION: This example demonstrates how to implement an error toast notification in a note-taking application. It uses the Toast component with error styling and includes retry functionality and a close button. The toast is triggered by a button press and automatically dismisses after 3 seconds.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Pressable } from \"@/components/ui/pressable\";\nimport { useToast, Toast, ToastTitle, ToastDescription } from \"@/components/ui/toast\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { Icon, CloseIcon, HelpCircleIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction Example() {\n          const toast = useToast();\n          const [toastId, setToastId] = React.useState(0);\n          const handleToast = () => {\n            if (!toast.isActive(toastId)) {\n              showNewToast();\n            }\n          };\n          const showNewToast = () => {\n            const newId = Math.random();\n            setToastId(newId);\n            toast.show({\n              id: newId,\n              placement: 'top',\n              duration: 3000,\n              render: ({ id }) => {\n                const uniqueToastId = \"toast-\" + id;\n                return (\n                  <Toast\n                    action=\"error\"\n                    variant=\"outline\"\n                    nativeID={uniqueToastId}\n                    className=\"p-4 gap-6 border-error-500 w-full shadow-hard-5 max-w-[443px] flex-row justify-between\"\n                  >\n                    <HStack space=\"md\">\n                      <Icon\n                        as={HelpCircleIcon}\n                        className=\"stroke-error-500 mt-0.5\"\n                      />\n                      <VStack space=\"xs\">\n                        <ToastTitle className=\"font-semibold text-error-500\">Error!</ToastTitle>\n                        <ToastDescription size=\"sm\">\n                          Something went wrong.\n                        </ToastDescription>\n                      </VStack>\n                    </HStack>\n                    <HStack className=\"min-[450px]:gap-3 gap-1\">\n                      <Button variant=\"link\" size=\"sm\" className=\"px-3.5 self-center\">\n                        <ButtonText>Retry</ButtonText>\n                      </Button>\n                      <Pressable onPress={() => toast.close(id)}>\n                        <Icon as={CloseIcon} />\n                      </Pressable>\n                    </HStack>\n                  </Toast>\n                );\n              },\n            });\n          };\n          return (\n            <Button onPress={handleToast}>\n              <ButtonText>Press Me</ButtonText>\n            </Button>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating StyledJsxRegistry Component for Next.js 15 Compatibility\nDESCRIPTION: A StyledJsxRegistry component that handles server-inserted HTML and properly registers styles from react-native-web and styled-jsx. This resolves compatibility issues between Next.js 15's React 19 and react-native-web.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\nimport React, { useRef, useState } from \"react\";\nimport { useServerInsertedHTML } from \"next/navigation\";\nimport { StyleRegistry, createStyleRegistry } from \"styled-jsx\";\n// @ts-expect-error : AppRegistry is defined in react-native-web but its type is not defined\nimport { AppRegistry } from \"react-native-web\";\nimport { flush } from \"@gluestack-ui/nativewind-utils/flush\";\n\nexport default function StyledJsxRegistry({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry());\n  const isServerInserted = useRef(false);\n\n  useServerInsertedHTML(() => {\n    AppRegistry.registerComponent(\"Main\", () => \"main\");\n    const { getStyleElement } = AppRegistry.getApplication(\"Main\");\n    if (!isServerInserted.current) {\n      isServerInserted.current = true;\n      const styles = [getStyleElement(), jsxStyleRegistry.styles(), flush()];\n      jsxStyleRegistry.flush();\n      return <>{styles}</>;\n    }\n  });\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Button Group in a Card using gluestack-ui\nDESCRIPTION: This code creates a card-like structure with a heading, description, and two buttons (Yes and No) using gluestack-ui components. It demonstrates how to group buttons and style them within a container.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack  p='$12'  alignItems='center'  borderColor='$backgroundLight300'\n  borderWidth={1} borderRadius=\"$lg\" $dark-borderColor=\"$backgroundDark700\">\n  <Box maxWidth='$64' mr='$9'>\n    <Heading mb='$1.5' >\n      Was this page helpful?\n    </Heading>\n    <Text fontSize='$sm' >\n      We use this feedback to improve the quality of our documentation.\n    </Text>\n  </Box>\n  <ButtonGroup space='md'>\n    <Button variant='outline' py='$2.5' action=\"secondary\">\n      <ButtonText  fontSize='$sm' fontWeight='$medium'\n      >\n        No\n      </ButtonText>\n    </Button>\n    <Button\n      variant='solid'\n      bg='$success700'\n      borderColor='$success700'\n      $hover-bg='$success800'\n      $active-bg='$success700'\n    >\n      <ButtonText  fontSize='$sm' fontWeight='$medium'>\n        Yes\n      </ButtonText>\n    </Button>\n  </ButtonGroup>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Checkbox Layout with gluestack-ui\nDESCRIPTION: This snippet shows how to implement a horizontal layout of checkboxes using HStack and CheckboxGroup. It manages multiple checkbox selection state with React useState and arranges three options in a row.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon, CheckboxGroup } from \"@/components/ui/checkbox\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { CheckIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\tfunction App(){\n             const [values, setValues] = React.useState([\"Illustration\"]);\n           return (\n             <CheckboxGroup value={values}  onChange={(keys) => {\n        setValues(keys)\n      }}>\n                <HStack space=\"2xl\">\n                  <Checkbox value=\"Illustration\">\n                    <CheckboxIndicator>\n                      <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                    <CheckboxLabel>Illustration</CheckboxLabel>\n                  </Checkbox>\n                  <Checkbox value=\"Animation\">\n                    <CheckboxIndicator>\n                      <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                    <CheckboxLabel>Animation</CheckboxLabel>\n                  </Checkbox>\n                  <Checkbox value=\"Typography\">\n                    <CheckboxIndicator>\n                      <CheckboxIcon as={CheckIcon}/>\n                    </CheckboxIndicator>\n                    <CheckboxLabel>Typography</CheckboxLabel>\n                  </Checkbox>\n               </HStack>\n                 </CheckboxGroup>\n           )\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing FormControl with Checkbox Component in React Native\nDESCRIPTION: Example of integrating FormControl with CheckboxGroup and Checkbox components. This snippet shows how to create a newsletter subscription form with multiple checkbox options and explanatory helper text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon, CheckboxGroup } from \"@/components/ui/checkbox\";\nimport { FormControl, FormControlLabel, FormControlLabelText, FormControlHelper, FormControlHelperText } from \"@/components/ui/form-control\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { CheckIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App() {\n      const [values, setValues] = React.useState(['bits']);\n        return (\n          <FormControl>\n            <FormControlLabel>\n              <FormControlLabelText>Sign up for newsletters</FormControlLabelText>\n            </FormControlLabel>\n            <CheckboxGroup\n              className=\"my-2\"\n              value={values}\n              onChange={(keys) => {\n                setValues(keys);\n              }}\n            >\n              <VStack space=\"sm\">\n                <Checkbox size=\"sm\" value=\"bits\">\n                  <CheckboxIndicator className=\"mr-2\">\n                    <CheckboxIcon as={CheckIcon} />\n                  </CheckboxIndicator>\n                  <CheckboxLabel>Daily Bits</CheckboxLabel>\n                </Checkbox>\n                <Checkbox size=\"sm\" value=\"event\">\n                  <CheckboxIndicator className=\"mr-2\">\n                    <CheckboxIcon as={CheckIcon} />\n                  </CheckboxIndicator>\n                  <CheckboxLabel>Event Updates</CheckboxLabel>\n                </Checkbox>\n                <Checkbox size=\"sm\" value=\"sponsorship\">\n                  <CheckboxIndicator className=\"mr-2\">\n                    <CheckboxIcon as={CheckIcon} />\n                  </CheckboxIndicator>\n                  <CheckboxLabel>Sponsorship</CheckboxLabel>\n                </Checkbox>\n              </VStack>\n            </CheckboxGroup>\n            <FormControlHelper>\n              <FormControlHelperText>\n                Subscribe to newsletters for updates\n              </FormControlHelperText>\n            </FormControlHelper>\n          </FormControl>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Badge Composition with React and gluestack-ui\nDESCRIPTION: This code snippet illustrates how to create a Badge composition using gluestack-ui components. It shows a badge positioned on top of a button, demonstrating the use of stacking and positioning in UI design.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Badge/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box alignItems=\"center\">\n<VStack>\n  <Badge  h={22} w={22} bg=\"$red600\" borderRadius=\"$full\"  mb={-14} mr={-14} zIndex={1} variant=\"solid\" alignSelf=\"flex-end\"  >\n   <BadgeText color=\"$white\">2</BadgeText>\n  </Badge>\n  <Button>\n   <ButtonText>\n    Notifications\n  </ButtonText>\n  </Button>\n</VStack>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting up StyledProvider with custom configuration in React\nDESCRIPTION: StyledProvider is used to configure components globally, defining aliases, tokens, and styles. It accepts config, colorMode, and globalStyleInjector parameters.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyledProvider, createConfig } from '@gluestack-style/react';\n\nconst config = createConfig({\n  aliases: {\n    bg: 'backgroundColor',\n    bgColor: 'backgroundColor',\n    rounded: 'borderRadius',\n    h: 'height',\n    w: 'width',\n  },\n  tokens: {\n    colors: {\n      primary0: '#ffffff',\n      primary400: '#c084fc',\n      primary500: '#a855f7',\n      primary600: '#9333ea',\n    },\n    space: {\n      4: 16,\n      5: 20,\n      6: 24,\n    },\n    radii: {\n      sm: 4,\n      md: 6,\n    },\n    letterSpacings: {\n      md: 0,\n    },\n    lineHeights: {\n      sm: 20,\n      md: 22,\n    },\n    fontWeights: {\n      normal: '400',\n      medium: '500',\n    },\n    fontSizes: {\n      sm: 14,\n      md: 16,\n    },\n    mediaQueries: {\n      sm: '@media (min-width: 480px)',\n      md: '@media (min-width: 768px)',\n    },\n  },\n  globalStyle: {\n    variants: {\n      shadow: {\n        softShadow: {\n          shadowOffset: {\n            width: 0,\n            height: 0,\n          },\n          shadowRadius: 10,\n          shadowOpacity: 0.1,\n          _android: {\n            shadowColor: '$primary500',\n            elevation: 5,\n            shadowOpacity: 0.05,\n          },\n        },\n      },\n    },\n  },\n} as const);\n\n\n<StyledProvider config={config} >\n  <App />\n</StyledProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet with FlatList in React Native\nDESCRIPTION: This snippet demonstrates how to use Actionsheet with a FlatList to display a scrollable list of items. It includes a custom Item component and uses ActionsheetFlatList for efficient rendering of list items.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(!showActionsheet);\n    const DATA = [\n      {\n        id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\n        title: 'Pizza'\n      },\n      {\n        id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',\n        title: 'Burger'\n      },\n      {\n        id: '58694a0f-3da1-471f-bd96-145571e29d73',\n        title: 'Risotto'\n      },\n       {\n        id: '58694a0f-3da1-471f-bd96-145571e29d74',\n        title: 'French Fries'\n      },\n       {\n        id: '58694a0f-3da1-471f-bd96-145571e29d75',\n        title: 'Onion Rings'\n      },\n       {\n        id: '58694a0f-3da1-471f-bd96-145571e29d76',\n        title: 'Fried Shrimps'\n      },\n    ];\n    const Item = React.useCallback(\n      ({ title }) => (\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>{title}</ActionsheetItemText>\n        </ActionsheetItem>\n      ),\n      [handleClose]\n    );\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent>\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n          <ActionsheetFlatList\n            data={DATA}\n            renderItem={({ item }) => <Item title={item.title} />}\n            keyExtractor={(item) => item.id}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Component for Cloud Sync in React Native\nDESCRIPTION: This example demonstrates an Alert component used for cloud sync notification with custom styling and icons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert, AlertText, AlertIcon } from \"@/components/ui/alert\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { RepeatIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Alert\n          action=\"warning\"\n          className=\"gap-4 max-w-[516px] w-full flex-row flex py-4 items-start self-center\"\n        >\n          <AlertIcon as={RepeatIcon} className=\"mt-1\" />\n          <HStack className=\"justify-between flex-1 items-center gap-1 sm:gap-8\">\n            <VStack className=\"flex-1\">\n              <Text className=\"font-semibold text-typography-900\">\n                Sync is disabled\n              </Text>\n              <AlertText className=\"text-typography-900\" size=\"sm\">\n                Enable cloud sync to help safeguard your data\n              </AlertText>\n            </VStack>\n            <Button size=\"xs\">\n              <ButtonText>Turn on</ButtonText>\n            </Button>\n          </HStack>\n        </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Component with Styled Components\nDESCRIPTION: Example showing how to customize and use the Alert component by importing styled components and implementing them in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/alert/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root, Text, Icon } from '../components/core/alert/styled-components';\n\n// Understanding the API\nconst Alert: any = Root;\nAlertIcon = Icon;\nAlertText = Text;\n\n// Using the alert component\nexport default () => (\n  <Alert>\n    <AlertIcon />\n    <AlertText />\n  </Alert>\n);\n```\n\n----------------------------------------\n\nTITLE: Form Control Checkbox Implementation\nDESCRIPTION: Implements a form control with multiple checkboxes organized in a vertical stack for newsletter preferences. Includes a heading and descriptive text with proper styling and icon integration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon } from \"@/components/ui/checkbox\";\nimport { FormControl } from \"@/components/ui/form-control\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { CheckIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <FormControl>\n           <VStack space=\"sm\">\n              <Heading size=\"sm\" >Sign up for newsletters</Heading>\n              <Checkbox >\n                  <CheckboxIndicator>\n                     <CheckboxIcon as={CheckIcon}/>\n                  </CheckboxIndicator>\n                <CheckboxLabel>Daily Bits</CheckboxLabel>\n              </Checkbox>\n              <Checkbox >\n                <CheckboxIndicator>\n                  <CheckboxIcon as={CheckIcon}/>\n               </CheckboxIndicator>\n                 <CheckboxLabel>Event Updates</CheckboxLabel>\n              </Checkbox>\n              <Checkbox >\n                <CheckboxIndicator>\n                  <CheckboxIcon as={CheckIcon}/>\n                </CheckboxIndicator>\n                 <CheckboxLabel>Sponsorship</CheckboxLabel>\n              </Checkbox>\n              <Text size=\"sm\">Subscribe to newsletters for updates</Text>\n           </VStack>\n            </FormControl>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Slider in React Native\nDESCRIPTION: This example demonstrates how to create a vertical slider using the Slider component. It includes state management for the slider value and a change handler function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(45);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n    <Center w=\"$80\">\n      <Slider\n        sliderTrackHeight={4}\n        value={sliderValue}\n        orientation=\"vertical\"\n        h={120}\n        onChange={(value) => {\n        handleChange(value);\n        }}>\n        <SliderTrack>\n          <SliderFilledTrack />\n        </SliderTrack>\n        <SliderThumb />\n      </Slider>\n    </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons with Icons in React Native\nDESCRIPTION: This snippet shows how to create buttons with icons positioned on the left and right sides. It uses the Button, ButtonIcon, and ButtonText components along with icon components from an external library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>\n  <Button>\n  <ButtonIcon as={InfoIcon} mr=\"$2\"/>\n    <ButtonText>Left Icon</ButtonText>\n  </Button>\n  <Button variant=\"solid\" mt=\"$2\">\n  <ButtonText>Right Icon</ButtonText>\n      <ButtonIcon as={AddIcon} ml=\"$2\"/>\n  </Button>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using the HStack Component\nDESCRIPTION: Comprehensive example showing how to import styled components, create a customized HStack, and use it in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/hstack/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root, Spacer } from '../components/core/hstack/styled-components';\n\n// import the createHStack function\nimport { createHStack } from '@gluestack-ui/hstack';\n\n// Understanding the API\nconst HStack = createHStack({\n  Root,\n  Spacer,\n});\n\n// Using the HStack component\nexport default () => <HStack />;\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group with Help Text Implementation\nDESCRIPTION: Implements a vertical checkbox group with additional help text below each option. Uses VStack for vertical layout and includes descriptive text components for each checkbox option.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [values, setValues] = useState([\"Design\"]);\n  return (\n    <CheckboxGroup value={values} onChange={(keys) => {\n      setValues(keys)\n    }}>\n      <VStack space=\"2xl\">\n        <Box>\n          <Checkbox value=\"Design\">\n            <CheckboxIndicator mr=\"$2\">\n              <CheckboxIcon as={CheckIcon}/>\n            </CheckboxIndicator>\n            <CheckboxLabel>Design</CheckboxLabel>\n          </Checkbox>\n          <Text size=\"sm\" ml=\"$7\">Subscribe to updates from the Design Feed</Text>\n        </Box>\n        <Box>\n          <Checkbox value=\"Marketing\">\n            <CheckboxIndicator mr=\"$2\">\n              <CheckboxIcon as={CheckIcon}/>\n            </CheckboxIndicator>\n            <CheckboxLabel>Marketing</CheckboxLabel>\n          </Checkbox>\n          <Text size=\"sm\" ml=\"$7\">Subscribe to updates from the Marketing Feed</Text>\n        </Box>\n      </VStack>\n    </CheckboxGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Badge Composition Example in React Native\nDESCRIPTION: This example shows how to compose a Badge component with other UI elements like Button. It demonstrates positioning the Badge as a notification indicator on top of a button, using z-index and negative margins for layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge, BadgeText } from \"@/components/ui/badge\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <Box className='items-center'>\n        <VStack>\n          <Badge  \n            className='z-10 self-end h-[22px] w-[22px] bg-red-600 rounded-full -mb-3.5 -mr-3.5'\n            variant=\"solid\"\n          >\n            <BadgeText className='text-white'>2</BadgeText>\n          </Badge>\n          <Button>\n            <ButtonText>\n              Notifications\n            </ButtonText>\n          </Button>\n        </VStack>\n    </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pin Input Component Implementation\nDESCRIPTION: Basic example of creating a Pin Input component using React Native's View and TextInput components with the createPinInput function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/pin-input/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, TextInput } from 'react-native';\nimport { createPinInput } from '@gluestack-ui/pin-input';\nconst PinInputRoot = createPinInput({\n  Root: View,\n  Input: TextInput,\n});\n```\n\n----------------------------------------\n\nTITLE: Responsive Todo App Component Implementation\nDESCRIPTION: Implementation of the responsive Todo app component using the Responsiveness wrapper and todoapp configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/todo-app/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Responsiveness {...todoapp} showMenuItems={false} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with gluestack-style resolver plugin\nDESCRIPTION: Example configuration for babel.config.js that includes the gluestack-style resolver plugin. The configuration imports the plugin and adds it to the plugins array in the Babel configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/babel-plugin-styled-resolver/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [gluestackStyleResolver],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Grids for Complex Layouts\nDESCRIPTION: This example demonstrates how to create complex layouts by nesting Grid components within GridItems. The outer grid has 8 columns while inner grids have their own column configurations, creating a multi-level layout structure.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Grid/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Grid, GridItem } from \"@/components/ui/grid\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Grid className=\"gap-3\" _extra={{\n  className: 'grid-cols-8',\n}}>\n      <GridItem\n        className=\"bg-background-50 p-3 rounded-md text-center\"\n        _extra={{\n          className: 'col-span-4',\n        }}\n      >\n        <Text className=\"text-sm\">01</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-3 rounded-md text-center\"\n         _extra={{\n          className: 'col-span-4',\n        }}\n      >\n        <Text className=\"text-sm\">02</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-3 rounded-md text-center\"\n           _extra={{\n          className: 'col-span-4',\n        }}\n      >\n      <Grid className=\"gap-5\" _extra={{\n        className: 'grid-cols-2',\n      }}>\n        <GridItem className=\"bg-background-200 p-2 rounded-md\" _extra={{\n          className: 'col-span-1',\n        }}><Text className=\"text-sm\">1</Text></GridItem>\n        <GridItem className=\"bg-background-200 p-2 rounded-md\" _extra={{\n          className: 'col-span-1',\n        }}><Text className=\"text-sm\" >2</Text></GridItem>\n        <GridItem className=\"bg-background-200 p-2 rounded-md\"  _extra={{\n          className: 'col-span-1',\n        }}><Text className=\"text-sm\">3</Text></GridItem>\n             <GridItem className=\"bg-background-200 p-2 rounded-md\" _extra={{\n          className: 'col-span-1',\n        }}><Text className=\"text-sm\" >4</Text></GridItem>\n        </Grid>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-3 rounded-md text-center\"\n        _extra={{\n          className: 'col-span-4',\n        }}\n      >\n        <Grid className=\"gap-5\" _extra={{\n          className: 'grid-cols-4',\n        }}>\n        <GridItem className=\"bg-background-200 p-2 rounded-md\" _extra={{\n          className: 'col-span-4',\n        }}><Text className=\"text-sm\" >1</Text></GridItem>\n        <GridItem className=\"bg-background-200 p-2 rounded-md\" _extra={{\n          className: 'col-span-4',\n        }}><Text className=\"text-sm\">2</Text></GridItem>\n        </Grid>\n      </GridItem>\n    </Grid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Actionsheet Implementation in React Native\nDESCRIPTION: Example showing how to create a basic Actionsheet with items and drag indicator. Demonstrates opening/closing functionality and handling disabled state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Actionsheet, ActionsheetContent, ActionsheetItem, ActionsheetItemText, ActionsheetDragIndicator, ActionsheetDragIndicatorWrapper, ActionsheetBackdrop } from \"@/components/ui/actionsheet\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport React from \"react\";\n\nfunction App(){\n        const [showActionsheet, setShowActionsheet] = React.useState(false);\n        const handleClose = () => setShowActionsheet(false);\n          return (\n            <>\n              <Button onPress={() => setShowActionsheet(true)}>\n                <ButtonText>Open Actionsheet</ButtonText>\n              </Button>\n              <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n                <ActionsheetBackdrop />\n                <ActionsheetContent>\n                  <ActionsheetDragIndicatorWrapper>\n                    <ActionsheetDragIndicator />\n                  </ActionsheetDragIndicatorWrapper>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>Edit Message</ActionsheetItemText>\n                  </ActionsheetItem>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>Mark Unread</ActionsheetItemText>\n                  </ActionsheetItem>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>Remind Me</ActionsheetItemText>\n                  </ActionsheetItem>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>Add to Saved Items</ActionsheetItemText>\n                  </ActionsheetItem>\n                  <ActionsheetItem isDisabled onPress={handleClose}>\n                    <ActionsheetItemText>Delete</ActionsheetItemText>\n                  </ActionsheetItem>\n                </ActionsheetContent>\n              </Actionsheet>\n            </>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating Delete Post Confirmation Modal in React\nDESCRIPTION: This snippet shows how to implement a delete post confirmation modal using React components. It includes a button to open the modal, and the modal content features an icon, heading, text, and action buttons for confirming or canceling the deletion.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Modal, ModalBackdrop, ModalContent, ModalHeader, ModalBody, ModalFooter } from \"@/components/ui/modal\";\nimport { Text } from \"@/components/ui/text\";\nimport { Icon, TrashIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App() {\n        const [showModal, setShowModal] = React.useState(false);\n        return (\n          <>\n            <Button onPress={() => setShowModal(true)}>\n              <ButtonText>Delete Post</ButtonText>\n            </Button>\n            <Modal\n              isOpen={showModal}\n              onClose={() => {\n                setShowModal(false);\n              }}\n            >\n              <ModalBackdrop />\n              <ModalContent className=\"max-w-[305px] items-center\">\n                <ModalHeader>\n                  <Box className=\"w-[56px] h-[56px] rounded-full bg-background-error items-center justify-center\">\n                    <Icon as={TrashIcon} className=\"stroke-error-600\" size=\"xl\" />\n                  </Box>\n                </ModalHeader>\n                <ModalBody className=\"mt-0 mb-4\">\n                  <Heading size=\"md\" className=\"text-typography-950 mb-2 text-center\">\n                    Delete blog post\n                  </Heading>\n                  <Text size=\"sm\" className=\"text-typography-500 text-center\">\n                    Are you sure you want to delete this post? This action cannot be\n                    undone.\n                  </Text>\n                </ModalBody>\n                <ModalFooter className=\"w-full\">\n                  <Button\n                    variant=\"outline\"\n                    action=\"secondary\"\n                    size=\"sm\"\n                    onPress={() => {\n                      setShowModal(false);\n                    }}\n                    className=\"flex-grow\"\n                  >\n                    <ButtonText>Cancel</ButtonText>\n                  </Button>\n                  <Button\n                    onPress={() => {\n                      setShowModal(false);\n                    }}\n                    size=\"sm\"\n                    className=\"flex-grow\"\n                  >\n                    <ButtonText>Delete</ButtonText>\n                  </Button>\n                </ModalFooter>\n              </ModalContent>\n            </Modal>\n          </>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Textarea Component\nDESCRIPTION: Example demonstrating how to create a custom Textarea component using the createTextarea function with styled components. Shows basic implementation with placeholder text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Textarea/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root, Input } from '../components/core/text-area/styled-components';\n\n// import the createTextarea function\nimport { createTextarea } from '@gluestack-ui/textarea';\n\n// Understanding the API\nconst Textarea = createTextarea({\n  Root,\n  Input,\n});\n\n// Using the textarea component\nexport default () => (\n  <Textarea>\n    <TextareaInput placeholder=\"your text goes here...\" />\n  </Textarea>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Blog Card Component in React using gluestack-ui\nDESCRIPTION: This code creates a blog post card using the Card component from gluestack-ui. It includes the post date, title, excerpt, and author information with an avatar.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Card/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    return (\n    <Card p=\"$5\" borderRadius=\"$lg\" maxWidth={360} m=\"$3\">\n      <Text\n        fontSize=\"$sm\"\n        fontStyle=\"normal\"\n        fontFamily=\"$heading\"\n        fontWeight=\"$normal\"\n        lineHeight=\"$sm\"\n        mb=\"$2\"\n        sx={{\n          color: '$textLight700',\n          _dark: {\n            color: '$textDark200',\n          },\n        }}\n      >\n        May 15, 2023\n      </Text>\n      <VStack mb=\"$6\">\n        <Heading size=\"md\" fontFamily=\"$heading\" mb=\"$4\">\n          The Power of Positive Thinking\n        </Heading>\n        <Text size=\"sm\" fontFamily=\"$heading\">\n          Discover how the power of positive thinking can transform your life,\n          boost your confidence, and help you overcome challenges. Explore\n          practical tips and techniques to cultivate a positive mindset for\n          greater happiness and success.\n        </Text>\n      </VStack>\n      <Box flexDirection=\"row\">\n        <Avatar mr=\"$3\">\n          <AvatarFallbackText fontFamily=\"$heading\">RR</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60',\n            }}\n          />\n        </Avatar>\n        <VStack>\n          <Heading size=\"sm\" fontFamily=\"$heading\" mb=\"$1\">\n            John Smith\n          </Heading>\n          <Text size=\"sm\" fontFamily=\"$heading\">\n            Motivational Speaker\n          </Text>\n        </VStack>\n      </Box>\n    </Card>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Popover Component with Arrow in React\nDESCRIPTION: This code snippet shows how to add an arrow to the Popover component using the PopoverArrow component. It includes the same structure as the basic popover with the addition of the arrow.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  return (\n    <Popover\n      isOpen={isOpen}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      {...props}\n      trigger={(triggerProps) => {\n        return (\n          <Button\n            {...triggerProps}\n          >\n            <ButtonText>\n              Popover\n            </ButtonText>\n          </Button>\n        );\n      }}\n    >\n      <PopoverBackdrop/>\n      <PopoverContent>\n      <PopoverArrow />\n        <PopoverHeader>\n          <Heading size='lg'>Welcome!</Heading>\n          <PopoverCloseButton>\n            <Icon as={CloseIcon}/>\n          </PopoverCloseButton>\n        </PopoverHeader>\n        <PopoverBody>\n          <Text size='sm'>\n            Join the product tour and start creating your own checklist. Are you ready to jump in?\n          </Text>\n        </PopoverBody>\n        <PopoverFooter>\n          <Text size='xs' flex={1}>\n            Step 2 of 3\n          </Text>\n          <ButtonGroup space='md'>\n            <Button variant=\"outline\" action='secondary' onPress={handleClose}>\n              <ButtonText>Back</ButtonText>\n            </Button>\n            <Button onPress={handleClose}>\n              <ButtonText>Next</ButtonText>\n            </Button>\n          </ButtonGroup>\n        </PopoverFooter>\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Product Card Implementation\nDESCRIPTION: A product card component showcasing a clothing item with image, category, title, description, and action buttons. Features responsive layout and styling using gluestack-ui components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Card/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Image } from \"@/components/ui/image\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction App(){\n    return (\n    <Card className=\"p-5 rounded-lg max-w-[360px] m-3\">\n      <Image\n        source={{\n          uri: 'https://gluestack.github.io/public-blog-video-assets/saree.png',\n        }}\n        className=\"mb-6 h-[240px] w-full rounded-md aspect-[4/3]\"\n        alt=\"image\"\n      />\n      <Text\n        className=\"text-sm font-normal mb-2 text-typography-700\"\n      >\n        Fashion Clothing\n      </Text>\n      <VStack className=\"mb-6\">\n        <Heading size=\"md\" className=\"mb-4\">\n          Cotton Kurta\n        </Heading>\n        <Text size=\"sm\">\n          Floral embroidered notch neck thread work cotton kurta in white and\n          black.\n        </Text>\n      </VStack>\n      <Box\n        className=\"flex-col sm:flex-row\"\n      >\n        <Button\n          className=\"px-4 py-2 mr-0 mb-3 sm:mr-3 sm:mb-0 sm:flex-1\"\n        >\n          <ButtonText size=\"sm\">Add to cart</ButtonText>\n        </Button>\n        <Button\n          variant=\"outline\"\n          className=\"px-4 py-2 border-outline-300 sm:flex-1\"\n        >\n          <ButtonText\n            size=\"sm\"\n            className=\"text-typography-600\"\n          >\n            Wishlist\n          </ButtonText>\n        </Button>\n      </Box>\n    </Card>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using Checkbox Components\nDESCRIPTION: Comprehensive example showing how to import styles, create a customized Checkbox component, and implement it with all its subcomponents in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/checkbox/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Indicator,\n  Icon,\n  Label,\n  Group,\n} from '../components/core/checkbox/styled-components';\n\n// import the createCheckbox function\nimport { createCheckbox } from '@gluestack-ui/checkbox';\n\n// Understanding the API\nconst Checkbox = createCheckbox({\n  Root,\n  Indicator,\n  Icon,\n  Label,\n  Group,\n});\n\n// Using the checkbox component\nexport default () => (\n  <CheckboxGroup>\n    <Checkbox>\n      <CheckboxIndicator>\n        <CheckboxIcon />\n      </CheckboxIndicator>\n      <CheckboxLabel />\n    </Checkbox>\n  </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar with Image in GlueStack UI\nDESCRIPTION: Demonstrates how to create avatars using images with fallback text. Shows implementation of profile pictures with user information in a structured layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"2xl\">\n  <HStack space=\"md\">\n    <Avatar >\n      <AvatarFallbackText>SS</AvatarFallbackText>\n      <AvatarImage\n        source={{\n          uri: 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60',\n        }}\n      />\n    </Avatar>\n    <VStack>\n        <Heading size=\"sm\" >Ronald Richards</Heading>\n        <Text size=\"sm\" >Nursing Assistant</Text>\n    </VStack>\n  </HStack>\n  <HStack space=\"md\">\n    <Avatar >\n       <AvatarFallbackText>SS</AvatarFallbackText>\n       <AvatarImage\n          source={{\n            uri: 'https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dXNlcnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60',\n          }}\n      />\n    </Avatar>\n    <VStack>\n      <Heading size=\"sm\" >Arlene McCoy</Heading>\n      <Text size=\"sm\" >Marketing Coordinator</Text>\n    </VStack>\n  </HStack>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection in Menu Component with React Native\nDESCRIPTION: This code snippet illustrates how to implement a selection feature in the Menu component. It uses state to manage selected items and demonstrates how to handle selection changes, including logging selected items and simulating route pushes based on selections.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example () {\n  const [selected, setSelected] = React.useState(new Set([]));\nreturn (\n  <Menu\n  placement=\"bottom left\"\n  selectionMode=\"single\"\n  selectedKeys={selected}\n  onSelectionChange={(keys) => {\n    console.log('onSelectionChange', keys);\n    setSelected(keys);\n    if (keys.currentKey === 'Community') {\n      console.log('Push to', keys.currentKey, 'route');\n    }\n    else if (keys.currentKey === 'Plugins') {\n      console.log('Push to', keys.currentKey, 'route');\n    }\n    else if (keys.currentKey === 'Theme') {\n      console.log('Push to', keys.currentKey, 'route');\n    }\n    else if (keys.currentKey === 'Settings') {\n      console.log('Push to', keys.currentKey, 'route');\n    }\n  }}\n  closeOnSelect={true}\n  trigger={({ ...triggerProps }) => {\n    return (\n      <Button {...triggerProps}>\n        <ButtonText>Menu</ButtonText>\n      </Button>\n    );\n  }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n      <Icon as={GlobeIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Community\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n      {/* PuzzleIcon is imported from 'lucide-react-native' */}\n      <Icon as={PuzzleIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Plugins\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n      {/* PaintBucket is imported from 'lucide-react-native' */}\n      <Icon as={PaintBucket} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>Theme</MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n      <Icon as={SettingsIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Settings\n      </MenuItemLabel>\n    </MenuItem>\n  </Menu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: PinInput with FormControl and State Management\nDESCRIPTION: A comprehensive example of PinInput with FormControl, including state management for capturing and logging the input value. This demonstrates a complete OTP input implementation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormControl, FormControlLabel, FormControlLabelText } from \"@/components/ui/form-control\";\nimport { PinInput, PinInputField } from \"@/components/ui/pin-input\";\n\nfunction App(){\n          const [value, setValue] = useState('');\n          useEffect(() => {\n            console.log(value);\n          }, [value]);\n          return (\n            <FormControl className=\"gap-4\">\n              <FormControlLabel>\n                <FormControlLabelText>\n                  Enter OTP\n                </FormControlLabelText>\n              </FormControlLabel>\n              <PinInput value={value} onChange={setValue} numberOfFields={4}>\n                {Array.from({ length: 4 }).map((_, index) => (\n                  <PinInputField key={index} index={index} />\n                ))}\n              </PinInput>\n            </FormControl>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Mode with StyledProvider\nDESCRIPTION: Example demonstrating how to implement color mode switching functionality using StyledProvider's colorMode prop with a toggle button component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/StyledProvider/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Pressable, Text } from 'react-native';\nimport { styled, StyledProvider } from '@gluestack-style/react';\nimport { config } from './gluestack-style.config';\nconst StyledComponent = styled(\n  View,\n  {\n    p: '$4',\n    _dark: {\n      bg: '$info600',\n    },\n    _light: {\n      bg: '$info800',\n    },\n  },\n  {}\n);\n\nexport function ColorMode({ ...args }) {\n  const [currentColorMode, setCurrentColorMode] = React.useState('light');\n\n  return (\n    <StyledProvider config={config} colorMode={currentColorMode}>\n      <Pressable\n        style={{\n          backgroundColor: 'gray',\n          padding: 12,\n          marginBottom: 12,\n        }}\n        onPress={() => {\n          setCurrentColorMode(currentColorMode === 'dark' ? 'light' : 'dark');\n        }}\n      >\n        <Text style={{ color: 'white' }}>\n          Toggle {currentColorMode === 'dark' ? 'light' : 'dark'}\n        </Text>\n      </Pressable>\n      <StyledComponent />\n    </StyledProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Width Button in React Native Form\nDESCRIPTION: This complex example demonstrates a full-width button within a form layout. It includes input fields, headings, and a back button, showcasing various gluestack-ui components in a cohesive design.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Center>\n  <Box p='$5' maxWidth='$96' borderWidth='$1' borderColor='$backgroundLight300' borderRadius='$lg' $dark-borderColor=\"$backgroundDark700\">\n    <VStack space='xs' pb='$4'>\n      <Heading lineHeight={30}>\n        Set new password\n      </Heading>\n      <Text fontSize='$sm'>\n        Almost done. Enter your new password and you are all set.\n      </Text>\n    </VStack>\n    <VStack space='xl' py='$2'>\n      <Input>\n        <InputField\n          py='$2'\n          placeholder=\"New password\"\n        />\n      </Input>\n      <Input>\n        <InputField\n          py='$2'\n          placeholder=\"Confirm new password\"\n        />\n      </Input>\n    </VStack>\n    <VStack space='lg' pt='$4'>\n      <Button\n        size='sm'\n      >\n        <ButtonText>\n          Submit\n        </ButtonText>\n      </Button>\n      <Box flexDirection='row'>\n        <Button variant='link' p='$0' size='sm'>\n          {/* ArrowLeftIcon is imported from 'lucide-react-native' */}\n          <Icon\n            size='md'\n            mr='$1'\n            as={ArrowLeftIcon}\n          />\n          <ButtonText\n          >\n            Back to login\n          </ButtonText>\n        </Button>\n      </Box>\n    </VStack>\n  </Box>\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Spinner with Label in React\nDESCRIPTION: Shows how to create a Spinner component with an accompanying label using HStack and Text components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Spinner/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack space=\"sm\" >\n  <Spinner/>\n  <Text size=\"md\">Please Wait</Text>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Basic BottomSheet Implementation\nDESCRIPTION: Example showing basic implementation of the BottomSheet component with various subcomponents\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/BottomSheet/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n   <BottomSheet>\n      <BottomSheetTrigger>\n        <Text>Open BottomSheet</Text>\n      </BottomSheetTrigger>\n      <BottomSheetPortal\n        snapPoints={['25%', '50%']}\n        backdropComponent={BottomSheetBackdrop}\n        handleComponent={BottomSheetDragIndicator}\n      >\n        <BottomSheetContent>\n          <BottomSheetItem>\n            <BottomSheetItemText>Item 1</BottomSheetItemText>\n          </BottomSheetItem>\n          <BottomSheetItem>\n            <BottomSheetItemText>Item 2</BottomSheetItemText>\n          </BottomSheetItem>\n          <BottomSheetItem>\n            <BottomSheetItemText>Item 3</BottomSheetItemText>\n          </BottomSheetItem>\n        </BottomSheetContent>\n      </BottomSheetPortal>\n    </BottomSheet>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useColorMode to Set Background Color in React Native\nDESCRIPTION: This example demonstrates how to use the useColorMode hook to dynamically set the background color of a View component based on the current color mode.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-color-mode/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { useColorMode } from '@gluestack-ui/themed';\n\nfunction Example() {\n  const colorMode = useColorMode();\n  return (\n    <View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: colorMode === 'light' ? 'white' : 'black',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Preserve Toast in React with gluestack-ui\nDESCRIPTION: Creates a persistent toast notification that remains visible until explicitly dismissed. This implementation is useful for important alerts that should not auto-dismiss, featuring an error styling with alert icon and detailed message.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Toast/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  const toast = useToast();\n  return (\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: 'top',\n          duration: null,\n          render: ({ id }) => {\n            const toastId = \"toast-\" + id;\n            return (\n              <Toast bg='$error700' nativeID={toastId} p='$3'>\n                <Icon as={AlertTriangleIcon} color='$white' mt='$1' mr='$3' />\n                <VStack space='xs' flex={1}>\n                <ToastTitle color='$textLight50' >Account Security Alert</ToastTitle>\n                <ToastDescription color='$textLight50'>Your account password was recently changed.\n                If you did not authorize this change, please contact our support team immediately.\n                </ToastDescription>\n                </VStack>\n                   <Pressable mt='$1' onPress={() => toast.close(id)}>\n                <Icon as={CloseIcon} color='$coolGray50' />\n               </Pressable>\n              </Toast>\n            );\n          },\n        });\n      }}\n    >\n      <ButtonText>Press Me</ButtonText>\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customized Pin Input Component Implementation\nDESCRIPTION: Detailed example showing how to create and use a customized Pin Input component with proper component structure and implementation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/pin-input/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, TextInput } from 'react-native';\n\n// import the createPinInput function\nimport { createPinInput } from '@gluestack-ui/pin-input';\n\n// Understanding the API\nconst PinInputField = createPinInput({\n  Root: View,\n  Input: TextInput,\n});\n\n// Using the pin-input component\nexport default () => (\n  <PinInputField>\n    <PinInputFieldInput />\n  </PinInputField>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Striped Table with Status Badges in React\nDESCRIPTION: This example shows how to implement a striped table with alternating background colors and status badges. It uses custom Table components along with Badge components to display order information and status.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Table/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge, BadgeText } from \"@/components/ui/badge\";\nimport { Box } from \"@/components/ui/box\";\nimport { Table, TableHeader, TableBody, TableHead, TableRow, TableData } from \"@/components/ui/table\";\n\nfunction App(){\n    return (\n         <Box className=\"p-3 bg-background-0 rounded-lg overflow-hidden\">\n      <Table className=\"w-full\">\n        <TableHeader>\n          <TableRow className=\"border-b-0 bg-background-0 hover:bg-background-0\">\n            <TableHead className=\"font-bold\">Order id</TableHead>\n            <TableHead>Items</TableHead>\n            <TableHead>Name</TableHead>\n            <TableHead>City</TableHead>\n            <TableHead>Order price</TableHead>\n            <TableHead>Status</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow className=\"border-b-0 bg-background-50\">\n            <TableData>5771</TableData>\n            <TableData>3</TableData>\n            <TableData>Rajesh Kumar</TableData>\n            <TableData>New Jersey</TableData>\n            <TableData>$ 200</TableData>\n            <TableData>\n              <Badge\n                size=\"sm\"\n                action=\"success\"\n                className=\"w-fit justify-center\"\n              >\n                <BadgeText>Completed</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow className=\"border-b-0 hover:bg-background-0\">\n            <TableData>5231</TableData>\n            <TableData>2</TableData>\n            <TableData>Priya Sharma</TableData>\n            <TableData>Austin</TableData>\n            <TableData>$ 150</TableData>\n            <TableData>\n              <Badge size=\"sm\" action=\"info\" className=\"w-fit justify-center\">\n                <BadgeText>Processing</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow className=\"border-b-0 bg-background-50\">\n            <TableData>5771</TableData>\n            <TableData>3</TableData>\n            <TableData>Ravi Patel</TableData>\n            <TableData>Seattle</TableData>\n            <TableData>$ 215</TableData>\n            <TableData>\n              <Badge\n                size=\"sm\"\n                action=\"warning\"\n                className=\"w-fit justify-center\"\n              >\n                <BadgeText>Shipped</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow className=\"border-b-0 hover:bg-background-0\">\n            <TableData>5231</TableData>\n            <TableData>4</TableData>\n            <TableData>Ananya Gupta</TableData>\n            <TableData>California</TableData>\n            <TableData>$ 88</TableData>\n            <TableData>\n              <Badge size=\"sm\" action=\"info\" className=\"w-fit justify-center\">\n                <BadgeText>Processing</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow className=\"border-b-0 bg-background-50\">\n            <TableData>5771</TableData>\n            <TableData>3</TableData>\n            <TableData>Arjun Singh</TableData>\n            <TableData>Seattle</TableData>\n            <TableData>$ 115</TableData>\n            <TableData>\n              <Badge\n                size=\"sm\"\n                action=\"success\"\n                className=\"w-fit justify-center\"\n              >\n                <BadgeText>Completed</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n          <TableRow className=\"border-b-0 bg-background-0 hover:bg-background-0\">\n            <TableData>5771</TableData>\n            <TableData>3</TableData>\n            <TableData>Nisha Verma</TableData>\n            <TableData>Seattle</TableData>\n            <TableData>$ 115</TableData>\n            <TableData>\n              <Badge size=\"sm\" action=\"info\" className=\"w-fit justify-center\">\n                <BadgeText>Processing</BadgeText>\n              </Badge>\n            </TableData>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Box>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Component in React\nDESCRIPTION: Example showing how to import, configure and use the Menu component. It demonstrates importing styled components, creating a menu instance using createMenu function, and implementing the basic menu structure.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/menu/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Item,\n  Label,\n  Backdrop,\n} from '../components/core/menu/styled-components';\n\n// import the createMenu function\nimport { createMenu } from '@gluestack-ui/menu';\n\n// Understanding the API\nconst Menu = createMenu({\n  Root,\n  Item,\n  Label,\n  Backdrop,\n});\n\n// Using the menu component\nexport default () => (\n  <Menu>\n    <MenuItem>\n      <MenuItemLabel />\n    </MenuItem>\n  </Menu>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Radio Buttons with RadioGroup in React Native\nDESCRIPTION: This example demonstrates how to create a group of mutually exclusive radio buttons using the RadioGroup component. It shows the usage of RadioGroup, Radio, RadioIndicator, RadioIcon, and RadioLabel components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const [values, setValues] = React.useState(\"Eng\");\n  return (\n    <RadioGroup value={values} onChange={setValues}>\n      <VStack space=\"sm\">\n        <Radio value=\"Eng\" >\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>English</RadioLabel>\n        </Radio>\n        <Radio value=\"Fre\" >\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>French</RadioLabel>\n        </Radio>\n        <Radio value=\"Ger\" >\n          <RadioIndicator mr='$2'>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n          <RadioLabel>German</RadioLabel>\n        </Radio>\n      </VStack>\n    </RadioGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using the Pressable Component\nDESCRIPTION: Example of importing styled components, mapping them to the Pressable component, and using the component in a React component. This demonstrates how to incorporate text within a pressable element.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/pressable/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from '../components/core/pressable/styled-components';\n\n// mapping the Pressable to root component\nconst Pressable = Root;\n\n// using the Pressable component\nexport default () => (\n  <Pressable>\n    <Text />\n  </Pressable>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Modal Component in React\nDESCRIPTION: This code snippet demonstrates how to create a modal component with various size options. It uses React hooks for state management and renders buttons to trigger modals of different sizes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Modal/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [showModal, setShowModal] = React.useState(false);\n  const [size, setSize] = React.useState(undefined);\n  const sizes = ['xs', 'sm', 'md', 'lg', 'full']\n  const ref = React.useRef(null);\n  const handleClick = (currentSize) => {\n    setShowModal(true)\n    setSize(currentSize)\n  }\n  return (\n      <Center h={400}>\n      <VStack space='md'>\n      {sizes.map((currentSize) => {\n          return <Button key={currentSize} onPress={() => handleClick(currentSize)}>\n            <ButtonText>{currentSize}</ButtonText>\n          </Button>\n      })}\n          </VStack>\n          <Modal\n            isOpen={showModal}\n            onClose={() => {\n              setShowModal(false);\n            }}\n          size={size}\n            finalFocusRef={ref}\n          >\n            <ModalBackdrop />\n            <ModalContent>\n              <ModalHeader>\n                <Heading size='lg'>Delete Folder</Heading>\n                <ModalCloseButton>\n                  <Icon as={CloseIcon} />\n                </ModalCloseButton>\n              </ModalHeader>\n              <ModalBody>\n                <Text size=\"sm\">\n                Whoa, slow down there! This modal is like a red light at an intersection, reminding you to stop and think before you proceed. Is deleting this folder the right choice?\n                </Text>\n              </ModalBody>\n              <ModalFooter>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  action=\"secondary\"\n                  mr=\"$3\"\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                >\n                  <ButtonText>Cancel</ButtonText>\n                </Button>\n                <Button\n                  size=\"sm\"\n                  action=\"primary\"\n                  borderWidth='$0'\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                  bg=\"$error700\"\n                  $hover-bg=\"$error800\"\n                  $active-bg=\"$error900\"\n                >\n                  <ButtonText>Explore</ButtonText>\n                </Button>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n        </Center>\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating an Icon Component with @gluestack-ui/icon\nDESCRIPTION: Basic example of importing the Root component from styled-components and using the createIcon function to create an Icon component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/icon/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root } from '../components/core/icon/styled-components';\nimport { createIcon } from '@gluestack-ui/icon';\nconst Icon = createIcon({\n  Root,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Heading in React Native\nDESCRIPTION: This example demonstrates how to create a tooltip with a heading that appears when a user interacts with an avatar in an AvatarGroup. The tooltip provides additional information about members of a channel.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n        const avatars = [\n          { src: 'https://example.com.jpg', alt: 'Sandeep Srivastva' , color:'$emerald600' },\n          { src: 'https://example.com.jpg', alt: 'Arjun Kapoor', color:'$cyan600' },\n          { src: 'https://example.com.jpg', alt: 'Ritik Sharma ', color:'$indigo600' },\n        ];\n          return (\n            <Box h=\"$96\" justifyContent=\"center\">\n              <AvatarGroup flexDirection='row'>\n                <Tooltip\n                  placement=\"top\"\n                  trigger={(triggerProps) => {\n                    return (\n                      <Avatar\n                        size=\"lg\"\n                        color=\"$white\"\n                        borderColor=\"$white\"\n                        borderWidth=\"$2\"\n                        $dark-borderColor=\"$black\"\n                        {...triggerProps}\n                      >\n                        <AvatarFallbackText>+ 3</AvatarFallbackText>\n                      </Avatar>\n                    )\n                  }}\n                >\n                  <TooltipContent\n                    p=\"$5\"\n                    maxWidth='$72'\n                    bg=\"white\"\n                    $dark-bg=\"$backgroundDark900\"\n                  >\n                    <VStack boderRadius=\"$2\" space='md'>\n                      <Heading size=\"sm\" lineHeight='$md'>View all members of this channel</Heading>\n                      <Center>\n                        <Text fontSize=\"$sm\" lineHeight='$md'>Includes John, Sarah, Mike, Emily</Text>\n                        <Text fontSize=\"$sm\" lineHeight='$md'>and David</Text>\n                      </Center>\n                    </VStack>\n                  </TooltipContent>\n                </Tooltip>\n                {avatars.map((avatar, index) => {\n                  return (\n                    <Avatar key={index} size=\"lg\" borderColor=\"$white\" borderWidth=\"$2\" bgColor={avatar.color} $dark-bordeColor=\"$black\">\n                      <AvatarFallbackText>{avatar.alt}</AvatarFallbackText>\n                    </Avatar>\n                  );\n                })}\n              </AvatarGroup>\n            </Box>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Component with TailwindCSS in React Native\nDESCRIPTION: Example implementation of a Switch component using TailwindCSS for styling with customizable track and thumb colors.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from \"@/components/ui/switch\";\nimport colors from \"tailwindcss/colors\";\n\nfunction Example() {\n  return (\n    <Switch {...props} trackColor={{ false: colors.neutral[300], true: colors.neutral[600] }}\n          thumbColor={colors.neutral[50]}\n          activeThumbColor={colors.neutral[50]}\n          ios_backgroundColor={colors.neutral[300]} \n        />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Team Invitation Modal in React\nDESCRIPTION: This component implements a modal for inviting team members to a project. It includes a header with project information, a body with an input field for the invitation link, and a copy button. The modal is triggered by an 'Invite' button.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Input, InputField } from \"@/components/ui/input\";\nimport { Modal, ModalBackdrop, ModalContent, ModalCloseButton, ModalHeader, ModalBody } from \"@/components/ui/modal\";\nimport { Pressable } from \"@/components/ui/pressable\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { Icon, CloseIcon, CopyIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App() {\n          const [showModal, setShowModal] = React.useState(false);\n          return (\n            <>\n              <Button onPress={() => setShowModal(true)}>\n                <ButtonText>Invite</ButtonText>\n              </Button>\n              <Modal\n                isOpen={showModal}\n                onClose={() => {\n                  setShowModal(false);\n                }}\n              >\n                <ModalBackdrop />\n                <ModalContent className=\"max-w-[395px]\">\n                  <ModalHeader className=\"gap-2 items-start\">\n                    <VStack className=\"gap-1\">\n                      <Heading size=\"md\" className=\"text-typography-950\">\n                        Invite your team\n                      </Heading>\n                      <Text size=\"sm\" className=\"text-typography-500\">\n                        You have created a new project! Invite colleagues to collaborate\n                        on this project.\n                      </Text>\n                    </VStack>\n                    <ModalCloseButton>\n                      <Icon as={CloseIcon} className=\"stroke-background-500\" />\n                    </ModalCloseButton>\n                  </ModalHeader>\n                  <ModalBody\n                    className=\"mb-0\"\n                    contentContainerClassName=\"gap-4 space-between flex-row items-center\"\n                  >\n                    <Input variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                      <InputField placeholder=\"join.untitledui.com/personalproject\" />\n                    </Input>\n                    <Pressable className=\"h-9 w-9 justify-center items-center border border-outline-300 rounded\">\n                      <Icon as={CopyIcon} className=\"stroke-background-800\" />\n                    </Pressable>\n                  </ModalBody>\n                </ModalContent>\n              </Modal>\n            </>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Accordion Items in React Native\nDESCRIPTION: Shows how to create an accordion with a disabled item using GlueStack UI components. The implementation includes an accordion with two items, where the first item is disabled using the isDisabled prop.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion, AccordionItem, AccordionHeader, AccordionTrigger, AccordionTitleText, AccordionContentText, AccordionIcon, AccordionContent } from \"@/components/ui/accordion\";\nimport { MinusIcon, PlusIcon } from \"lucide-react-native\";\n\nfunction App(){\n    return (\n          <Accordion variant=\"unfilled\" className=\"m-5 w-[90%]\">\n      <AccordionItem value=\"item-1\" isDisabled={true}\n      className= \"border-b border-outline-300\"\n      >\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   Disabled Item\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon}  />\n                  ) : (\n                    <AccordionIcon as={PlusIcon}  />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            This is a Disabled Item.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-2\" >\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   Is this accordion accessible?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            Yes, the accordion is accessible. It adheres to the WAI-ARIA design\n            pattern. You can read more about it in the accessibility section of\n            the docs.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Component in React Native\nDESCRIPTION: This code snippet shows how to import the Toast component and its associated hook in a React Native file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useToast, Toast } from '@/components/ui/toast';\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Input Component with Icon\nDESCRIPTION: Comprehensive example showing how to create a customized input field with an icon, including imports, component creation, and implementation with input slots.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/input/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root, Input } from '../components/core/input/styled-components';\n\n// import the createInput function\nimport { createInput } from '@gluestack-ui/input';\n\n//import any icon\nimport { searchIcon } from '@gluestack/icons';\n\n// Understanding the API\nconst InputField = createInput({\n  Root,\n  Input,\n});\n\n// Using the input component\nexport default () => (\n  <Input>\n    <InputSlot pl=\"$3\">\n      <InputIcon as={SearchIcon} />\n    </InputSlot>\n    <InputInput placeholder=\"your text goes here...\" />\n  </Input>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Modal Password Reset Flow in React\nDESCRIPTION: A React component that implements a password reset flow using three sequential modals. Uses GlueStack UI components for the interface, managing modal states with React useState hooks. Includes form inputs, buttons, and navigation between different steps of the password reset process.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText, ButtonIcon } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Input, InputField } from \"@/components/ui/input\";\nimport { Link, LinkText } from \"@/components/ui/link\";\nimport { Modal, ModalBackdrop, ModalContent, ModalHeader, ModalBody, ModalFooter } from \"@/components/ui/modal\";\nimport { Text } from \"@/components/ui/text\";\nimport { ArrowLeftIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App() {\n          const [showModal, setShowModal] = React.useState(false);\n          const [showModal2, setShowModal2] = React.useState(false);\n          const [showModal3, setShowModal3] = React.useState(false);\n          return (\n            <>\n              <Button onPress={() => setShowModal(true)}>\n                <ButtonText>Forgot password?</ButtonText>\n              </Button>\n              <Modal\n                isOpen={showModal}\n                onClose={() => {\n                  setShowModal(false);\n                }}\n              >\n                <ModalBackdrop />\n                <ModalContent>\n                  <ModalHeader className=\"flex-col items-start gap-0.5\">\n                    <Heading>Forgot password?</Heading>\n                    <Text size=\"sm\">No worries, we'll send you reset instructions</Text>\n                  </ModalHeader>\n                  <ModalBody className=\"mb-4\">\n                    <Input>\n                      <InputField placeholder=\"Enter your email\" />\n                    </Input>\n                  </ModalBody>\n                  <ModalFooter className=\"flex-col items-start\">\n                    <Button\n                      onPress={() => {\n                        setShowModal2(true);\n                      }}\n                      className=\"w-full\"\n                    >\n                      <ButtonText>Submit</ButtonText>\n                    </Button>\n                    <Button\n                      variant=\"link\"\n                      size=\"sm\"\n                      onPress={() => {\n                        setShowModal(false);\n                      }}\n                      className=\"gap-1\"\n                    >\n                      <ButtonIcon as={ArrowLeftIcon} />\n                      <ButtonText>Back to login</ButtonText>\n                    </Button>\n                  </ModalFooter>\n                </ModalContent>\n              </Modal>\n              <Modal\n                isOpen={showModal2}\n                onClose={() => {\n                  setShowModal2(false);\n                }}\n              >\n                <ModalBackdrop />\n                <ModalContent>\n                  <ModalHeader className=\"flex-col items-start gap-0.5\">\n                    <Heading>Reset password</Heading>\n                    <Text size=\"sm\">\n                      A verification code has been sent to you. Enter code below.\n                    </Text>\n                  </ModalHeader>\n                  <ModalBody className=\"mb-4\">\n                    <Input>\n                      <InputField placeholder=\"Enter verification code\" />\n                    </Input>\n                  </ModalBody>\n                  <ModalFooter className=\"flex-col items-start\">\n                    <Button\n                      onPress={() => {\n                        setShowModal3(true);\n                      }}\n                      className=\"w-full\"\n                    >\n                      <ButtonText>Continue</ButtonText>\n                    </Button>\n                    <Text size=\"sm\" className=\"\">\n                      Didn't receive the email?\n                      <Link className=\"\">\n                        <LinkText\n                          size=\"xs\"\n                          className=\"text-typography-700 font-semibold\"\n                        >\n                          Click to resend\n                        </LinkText>\n                      </Link>\n                    </Text>\n                    <HStack space=\"xs\" className=\"items-center\">\n                      <Button\n                        variant=\"link\"\n                        size=\"sm\"\n                        onPress={() => {\n                          setShowModal2(false);\n                        }}\n                        className=\"gap-1\"\n                      >\n                        <ButtonIcon as={ArrowLeftIcon} />\n                        <ButtonText>Back to login</ButtonText>\n                      </Button>\n                    </HStack>\n                  </ModalFooter>\n                </ModalContent>\n              </Modal>\n              <Modal\n                isOpen={showModal3}\n                onClose={() => {\n                  setShowModal3(false);\n                }}\n              >\n                <ModalBackdrop />\n                <ModalContent>\n                  <ModalHeader className=\"flex-col items-start gap-0.5\">\n                    <Heading>Set new password</Heading>\n                    <Text size=\"sm\">\n                      Almost done. Enter your new password and you are all set.\n                    </Text>\n                  </ModalHeader>\n                  <ModalBody className=\"\" contentContainerClassName=\"gap-3\">\n                    <Input>\n                      <InputField placeholder=\"New password\" />\n                    </Input>\n                    <Input>\n                      <InputField placeholder=\"Confirm new password\" />\n                    </Input>\n                  </ModalBody>\n                  <ModalFooter className=\"flex-col items-start\">\n                    <Button\n                      onPress={() => {\n                        setShowModal(false);\n                        setShowModal2(false);\n                        setShowModal3(false);\n                      }}\n                      className=\"w-full\"\n                    >\n                      <ButtonText>Submit</ButtonText>\n                    </Button>\n                    <Button\n                      variant=\"link\"\n                      size=\"sm\"\n                      onPress={() => {\n                        setShowModal3(false);\n                      }}\n                      className=\"gap-1\"\n                    >\n                      <ButtonIcon as={ArrowLeftIcon} />\n                      <ButtonText>Back to login</ButtonText>\n                    </Button>\n                  </ModalFooter>\n                </ModalContent>\n              </Modal>\n            </>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating a Popover with Input Field and User Access Controls in React\nDESCRIPTION: A React component that implements a share functionality using Popover from gluestack-ui. The popover contains an email input field for invitations and displays a list of users with access permissions that can be modified. The component manages open/close state through React hooks.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarFallbackText, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button, ButtonText, ButtonIcon } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Input, InputField } from \"@/components/ui/input\";\nimport { Popover, PopoverBackdrop, PopoverHeader, PopoverBody, PopoverContent } from \"@/components/ui/popover\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { ChevronDownIcon, ShareIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\t\nfunction App() {\n        const [isOpen, setIsOpen] = React.useState(false);\n        const handleOpen = () => {\n          setIsOpen(true);\n        };\n        const handleClose = () => {\n          setIsOpen(false);\n        };\n        return (\n          <Popover\n            isOpen={isOpen}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            offset={8}\n            trigger={(triggerProps) => {\n              return (\n                <Button {...triggerProps} className=\"gap-2\">\n                  <ButtonText>Share</ButtonText>\n                  <ButtonIcon as={ShareIcon} />\n                </Button>\n              );\n            }}\n          >\n            <PopoverBackdrop/>\n            <PopoverContent className=\"p-5 gap-8 shadow-hard-5 max-w-[473px] w-full native:max-w-[300px]\">\n              <PopoverHeader className=\"w-full gap-3\">\n                <Input size=\"sm\" className=\"flex-1\">\n                  <InputField placeholder=\"Email separated by commas\" />\n                </Input>\n                <Button size=\"sm\" className=\"text-blue-600\">\n                  <ButtonText className=\"text-blue-50\">Invite</ButtonText>\n                </Button>\n              </PopoverHeader>\n              <PopoverBody className=\"\" contentContainerClassName=\"gap-6\">\n                <Heading size=\"sm\">People with access</Heading>\n                <VStack space=\"lg\">\n                  <VStack space=\"lg\">\n                    <HStack space=\"4xl\" className=\"items-center\">\n                      <HStack space=\"md\" className=\"w-full items-center\">\n                        <Avatar>\n                          <AvatarFallbackText>JC</AvatarFallbackText>\n                          <AvatarImage\n                            source={{\n                              uri: 'https://i.ibb.co/7R4DyhQ/Avatar-1.jpg',\n                            }}\n                            alt=\"imageAltText\"\n                          />\n                        </Avatar>\n                        <VStack>\n                          <Text\n                            size=\"sm\"\n                            className=\"font-semibold text-typography-900\"\n                          >\n                            Jane Cooper\n                          </Text>\n                          <Text size=\"xs\">janecooper09@gmail.com</Text>\n                        </VStack>\n                      </HStack>\n                      <Button variant=\"link\" size=\"xs\" className=\"gap-1 sm:px-3.5\">\n                        <ButtonText>Can edit</ButtonText>\n                        <ButtonIcon as={ChevronDownIcon} />\n                      </Button>\n                    </HStack>\n                    <HStack space=\"4xl\" className=\"items-center\">\n                      <HStack space=\"md\" className=\"w-full items-center\">\n                        <Avatar>\n                          <AvatarFallbackText>JC</AvatarFallbackText>\n                          <AvatarImage\n                            source={{\n                              uri: 'https://i.ibb.co/sQwcjSZ/Avatar-2.png',\n                            }}\n                            alt=\"imageAltText\"\n                          />\n                        </Avatar>\n                        <VStack>\n                          <Text\n                            size=\"sm\"\n                            className=\"font-semibold text-typography-900\"\n                          >\n                            Catherine Miller\n                          </Text>\n                          <Text size=\"xs\">ctherienemiller88@gmail.com</Text>\n                        </VStack>\n                      </HStack>\n                      <Button variant=\"link\" size=\"xs\" className=\"gap-1 sm:px-3.5\">\n                        <ButtonText>Admin</ButtonText>\n                        <ButtonIcon as={ChevronDownIcon} />\n                      </Button>\n                    </HStack>\n                    <HStack space=\"4xl\" className=\"items-center\">\n                      <HStack space=\"md\" className=\"w-full items-center\">\n                        <Avatar>\n                          <AvatarFallbackText>JC</AvatarFallbackText>\n                          <AvatarImage\n                            source={{\n                              uri: 'https://i.ibb.co/XXkHzcZ/Avatar-3.png',\n                            }}\n                          />\n                        </Avatar>\n                        <VStack>\n                          <Text\n                            size=\"sm\"\n                            className=\"font-semibold text-typography-900\"\n                          >\n                            John Brown\n                          </Text>\n                          <Text size=\"xs\">johnb345@gmail.com</Text>\n                        </VStack>\n                      </HStack>\n                      <Button variant=\"link\" size=\"xs\" className=\"gap-1 sm:px-3.5\">\n                        <ButtonText>Can edit</ButtonText>\n                        <ButtonIcon as={ChevronDownIcon} />\n                      </Button>\n                    </HStack>\n                  </VStack>\n                </VStack>\n              </PopoverBody>\n            </PopoverContent>\n          </Popover>\n        )\n      }\n```\n\n----------------------------------------\n\nTITLE: Navigation Links with Inset Dividers\nDESCRIPTION: Demonstrates using Divider component to separate navigation links with both full-height and half-height (inset) vertical dividers. Includes responsive button styling and border handling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space='2xl'>\n  <HStack px='$3' h='$8' rounded='$sm' borderWidth='$1' borderColor='$backgroundLight300' $dark-borderColor=\"$backgroundDark700\"\n  >\n    <Button variant='link' size='xs'>\n      <ButtonText >\n        Github\n      </ButtonText>\n    </Button>\n    <Divider orientation='vertical' mx='$2.5' />\n    <Button variant='link' size='xs'>\n      <ButtonText >\n        Twitter\n      </ButtonText>\n    </Button>\n    <Divider orientation='vertical' mx='$2.5'/>\n    <Button variant='link' size='xs'>\n      <ButtonText >\n        Discord\n      </ButtonText>\n    </Button>\n  </HStack>\n  <HStack px='$3' h='$8' rounded='$sm' borderWidth='$1' borderColor='$backgroundLight300' alignItems='center' $dark-borderColor=\"$backgroundDark700\"\n  >\n    <Button variant='link' size='xs'>\n      <ButtonText >\n        Github\n      </ButtonText>\n    </Button>\n    <Divider orientation='vertical' h='50%' mx='$2.5'/>\n    <Button variant='link' size='xs'>\n      <ButtonText >\n        Twitter\n      </ButtonText>\n    </Button>\n    <Divider orientation='vertical' h='50%' mx='$2.5'/>\n    <Button variant='link' size='xs'>\n      <ButtonText >\n        Discord\n      </ButtonText>\n    </Button>\n  </HStack>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Accordion Component in React\nDESCRIPTION: Example implementation of an Accordion component with two expandable sections for FAQ-style content. Includes chevron icons that change based on expansion state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion m=\"$5\" width=\"90%\" {...props}>\n        <AccordionItem value=\"a\">\n          <AccordionHeader>\n            <AccordionTrigger>\n              {({ isExpanded }) => {\n                return (\n                  <>\n                    <AccordionTitleText>\n                      How do I place an order?\n                    </AccordionTitleText>\n                    {isExpanded ? (\n                      <AccordionIcon as={ChevronUpIcon} ml=\"$3\"/>\n                    ) : (\n                      <AccordionIcon as={ChevronDownIcon} ml=\"$3\"/>\n                    )}\n                  </>\n                );\n              }}\n            </AccordionTrigger>\n          </AccordionHeader>\n          <AccordionContent>\n            <AccordionContentText>\n              To place an order, simply select the products you want, proceed to\n              checkout, provide shipping and payment information, and finalize\n              your purchase.\n            </AccordionContentText>\n          </AccordionContent>\n        </AccordionItem>\n         <AccordionItem value=\"b\">\n          <AccordionHeader>\n            <AccordionTrigger>\n              {({ isExpanded }) => {\n                return (\n                  <>\n                    <AccordionTitleText>\n                      What payment methods do you accept?\n                    </AccordionTitleText>\n                    {isExpanded ? (\n                      <AccordionIcon as={ChevronUpIcon} ml=\"$3\"/>\n                    ) : (\n                      <AccordionIcon as={ChevronDownIcon} ml=\"$3\"/>\n                    )}\n                  </>\n                );\n              }}\n            </AccordionTrigger>\n          </AccordionHeader>\n          <AccordionContent>\n            <AccordionContentText>\n              We accept all major credit cards, including Visa, Mastercard, and\n              American Express. We also support payments through PayPal.\n            </AccordionContentText>\n          </AccordionContent>\n        </AccordionItem>\n        </Accordion>\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Color Scheme in Gluestack UI\nDESCRIPTION: This example shows how to customize the color scheme of Switch components. It uses the sx prop to define different styles for light and dark modes, and for checked and unchecked states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"md\">\n  <Switch sx={{\n    _light: {\n      props: {\n        trackColor: {\n          false: '$backgroundLight300',\n          true: '$indigo600'\n        },\n      },\n    },\n    _dark: {\n      props: {\n        trackColor: {\n          false: '$backgroundDark700',\n          true: '$indigo600'\n        },\n      },\n    },\n  }}/>\n  <Switch\n  sx={{\n    _light: {\n      props: {\n        trackColor: {\n          false: '$backgroundLight300',\n          true: '$emerald600'\n        },\n      },\n    },\n    _dark: {\n      props: {\n        trackColor: {\n          false: '$backgroundDark700',\n          true: '$emerald600'\n        },\n      },\n    },\n  }}/>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Styling FormControl Descendants in React Native\nDESCRIPTION: This snippet shows the styling props for FormControl's child components, including _labelText, _helperText, _errorText, and _labelAstrick. These props allow customization of specific child components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.TBody>\n  <Table.TR>\n    <Table.TD>\n      <Table.TText>\n        <InlineCode>_labelText</InlineCode>\n      </Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>{`Prop to style FormControlLabelText Component`}</Table.TText>\n    </Table.TD>\n  </Table.TR>\n  <!-- Additional styling prop rows -->\n</Table.TBody>\n```\n\n----------------------------------------\n\nTITLE: Left-Aligned Label Checkbox Implementation\nDESCRIPTION: Implements checkboxes with labels aligned to the left and indicators to the right. Uses space-between justification for layout and includes state management for checkbox values.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [values, setValues] = useState([\"Jane\"]);\n  return (\n    <CheckboxGroup value={values} onChange={(keys) => {\n      setValues(keys)\n    }}>\n      <VStack space=\"lg\" w='$40'>\n        <Checkbox justifyContent=\"space-between\" value=\"Jane\">\n          <CheckboxLabel>Jane Cooper</CheckboxLabel>\n          <CheckboxIndicator>\n            <CheckboxIcon as={CheckIcon}/>\n          </CheckboxIndicator>\n        </Checkbox>\n        <Checkbox value=\"Wade\" justifyContent=\"space-between\">\n          <CheckboxLabel>Wade Warren</CheckboxLabel>\n          <CheckboxIndicator>\n            <CheckboxIcon as={CheckIcon}/>\n          </CheckboxIndicator>\n        </Checkbox>\n        <Checkbox justifyContent=\"space-between\" value=\"Robert\">\n          <CheckboxLabel>Robert Fox</CheckboxLabel>\n          <CheckboxIndicator>\n            <CheckboxIcon as={CheckIcon}/>\n          </CheckboxIndicator>\n        </Checkbox>\n      </VStack>\n    </CheckboxGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Linear Gradient Implementation\nDESCRIPTION: Extended example showing how to import, create, and use a customized linear gradient component with various sub-components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/linear-gradient/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n} from '../components/core/linear-gradient/styled-components';\n\n// import the createLinearGradient function\nimport { createLinearGradient } from '@gluestack-ui/linear-gradient';\n\n// Understanding the API\nconst LinearGradient = createLinearGradient({\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n});\n\n// Using the linear-gradient component\nexport default () => (\n  <LinearGradientGroup>\n    <LinearGradient>\n      <LinearGradientText />\n      <LinearGradientSpinner />\n      <LinearGradientIcon />\n    </LinearGradient>\n  </LinearGradientGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing the Image component with styled-components\nDESCRIPTION: Example showing how to import styles, create a customized Image component using createImage function, and use it in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from '../components/core/image/styled-components';\n\n// import the createImage function\nimport { createImage } from '@gluestack-ui/image';\n\n// Understanding the API\nconst Image = createImage({\n  Root,\n});\n\n// Using the image component\nexport default () => <Image />;\n```\n\n----------------------------------------\n\nTITLE: Alert Component with Call-to-Action in React Native\nDESCRIPTION: This example shows how to create an Alert component with a call-to-action button and custom styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert, AlertText } from \"@/components/ui/alert\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { Icon, CloseIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Alert\n          action=\"success\"\n          className=\"gap-4 max-w-[585px] w-full self-center items-start min-[400px]:items-center\"\n        >\n          <VStack className=\"gap-4 min-[400px]:flex-row justify-between flex-1 min-[400px]:items-center\">\n            <AlertText className=\"font-semibold text-typography-900\" size=\"sm\">\n              Verify your phone number to create an API key\n            </AlertText>\n            <Button size=\"sm\" className=\"hidden sm:flex\">\n              <ButtonText>Start verification</ButtonText>\n            </Button>\n          </VStack>\n          <Icon as={CloseIcon} />\n        </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icon Component with createIcon in React/React Native\nDESCRIPTION: Demonstrates how to create a custom icon component using the createIcon function from GlueStack UI. The example shows implementation of a custom Gluestack icon with multiple SVG paths and proper handling of viewBox and fill properties for cross-platform compatibility.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon, createIcon } from \"@/components/ui/icon\";\nimport { Path } from \"react-native-svg\";\n\nfunction App () {\n        const GluestackIcon = createIcon({\n          viewBox: '0 0 32 32',\n          path: (\n            <>\n              <Path d=\"M9.5 14.6642L15.9999 9.87633V12.1358L9.5 16.9236V14.6642Z\" fill=\"white\"/>\n              <Path d=\"M22.5 14.6642L16.0001 9.87639V12.1359L22.5 16.9237V14.6642Z\" fill=\"white\"/>\n              <Path d=\"M9.5 19.8641L15.9999 15.0763V17.3358L9.5 22.1236V19.8641Z\" fill=\"white\"/>\n              <Path d=\"M22.5 19.8642L16.0001 15.0764V17.3358L22.5 22.1237V19.8642Z\" fill=\"white\"/>\n            </>\n          ),\n        });\n        return <Icon as={GluestackIcon} size='xl' className=\"text-typography-black\"/>;\n      }\n```\n\n----------------------------------------\n\nTITLE: Loading Button Implementation\nDESCRIPTION: Displays a disabled button with a loading spinner and custom text. Uses custom background color and padding.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Button isDisabled={true} bg='$darkBlue600' p='$3'>\n  <ButtonSpinner mr='$1'/>\n  <ButtonText fontWeight='$medium' fontSize='$sm'>Please wait...</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating Input with Search Icon - React/JSX\nDESCRIPTION: Shows how to create an input field with a search icon using GlueStack UI components. The example demonstrates the composition of Input components with proper icon placement using InputSlot and InputIcon components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Input, InputField, InputIcon, InputSlot } from \"@/components/ui/input\";\nimport { SearchIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Input>\n          <InputSlot className='pl-3'>\n            <InputIcon as={SearchIcon}/>\n          </InputSlot>\n          <InputField\n            placeholder=\"Search...\"\n          />\n        </Input>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Implementation\nDESCRIPTION: Example of a default Select component implementation with all required subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Select>\n    <SelectTrigger>\n      <SelectInput />\n      <SelectIcon>\n        <Icon />\n      </SelectIcon>\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectBackdrop />\n      <SelectContent>\n        <SelectDragIndicatorWrapper>\n          <SelectDragIndicator />\n        </SelectDragIndicatorWrapper>\n        <SelectItem />\n      </SelectContent>\n    </SelectPortal>\n  </Select>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Checked Switch with Label in Gluestack UI\nDESCRIPTION: This example demonstrates a Switch component in a checked state with a label. It uses the defaultValue prop to set the initial state of the switch.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack space=\"md\">\n  <Switch  defaultValue={true}/>\n  <Text size=\"sm\" >Public profile</Text>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Using Platform-Specific Styling in gluestack-ui Components with JSX\nDESCRIPTION: This example demonstrates how to apply platform-specific styling to gluestack-ui components using web:, ios:, and android: modifiers in the className prop. Each platform will receive its own background color while sharing the same component structure.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/core-concepts/Universal/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText} from '@/components/Button';\n\nfunction App {\n  return (\n    <Button\n      className=\"web:bg-red-500 ios:bg-blue-500 android:bg-green-500\">\n     <ButtonText>Hello World</ButtonText>\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Grid Layouts with Breakpoints\nDESCRIPTION: This example shows how to implement responsive grid layouts using breakpoint-specific column spans. Grid items adjust their width based on screen size with col-span-6 on mobile, col-span-3 on medium screens, and col-span-2 on large screens.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Grid/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Grid, GridItem } from \"@/components/ui/grid\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Grid className=\"gap-y-2 gap-x-4\" _extra={{\n  className: 'grid-cols-6',\n}}>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n        _extra={{\n          className: 'col-span-6 md:col-span-3 lg:col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">01</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n  className: 'col-span-6 md:col-span-3 lg:col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">02</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n    className: 'col-span-6 md:col-span-3 lg:col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">03</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n        className: 'col-span-6 md:col-span-3 lg:col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">04</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n      className: 'col-span-6 md:col-span-3 lg:col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">05</Text>\n      </GridItem>\n            <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n        className: 'col-span-6 md:col-span-3 lg:col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">06</Text>\n      </GridItem>\n    </Grid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Switch Component with Styled Components\nDESCRIPTION: Example demonstrating how to customize a Switch component by importing styled components and using the createSwitch function with an example of implementation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/switch/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from '../components/core/switch/styled-components';\n\n// import the createSwitch function\nimport { createSwitch } from '@gluestack-ui/switch';\n\n// Understanding the API\nconst Switch = createSwitch({\n  Root,\n});\n\n// Using the switch component\nexport default () => <Switch />;\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Button in React Native\nDESCRIPTION: This snippet shows how to create a circular icon button using the Button and ButtonIcon components. It uses the EditIcon from 'lucide-react-native' as the icon and applies custom styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Button borderRadius='$full' size='lg' p='$3.5' bg='$indigo600' borderColor='$indigo600' >\n  {/* EditIcon is imported from 'lucide-react-native' */}\n  <ButtonIcon as={EditIcon}/>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Custom Checkbox Component Creation Example\nDESCRIPTION: Example showing how to create a custom checkbox component using the createCheckbox function with styled components configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Indicator,\n  Icon,\n  Label,\n  Group,\n} from '../components/core/checkbox/styled-components';\n\n// import the createCheckbox function\nimport { createCheckbox } from '@gluestack-ui/checkbox';\n\n// Understanding the API\nconst Checkbox = createCheckbox({\n  Root,\n  Indicator,\n  Icon,\n  Label,\n  Group,\n});\n\n// Using the checkbox component\nexport default () => (\n  <CheckboxGroup>\n    <Checkbox>\n      <CheckboxIndicator>\n        <CheckboxIcon />\n      </CheckboxIndicator>\n      <CheckboxLabel />\n    </Checkbox>\n  </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Accordion Component in React\nDESCRIPTION: This example demonstrates a customized Accordion component with multiple expandable items, custom styling, and icons. It uses various sub-components like AccordionItem, AccordionHeader, AccordionTrigger, and AccordionContent to create a fully functional accordion.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    return (\n      <Accordion\n      width=\"90%\"\n      type=\"multiple\"\n      m=\"$5\"\n      borderWidth={1}\n      shadowColor=\"transparent\"\n      borderColor=\"$borderLight300\"\n      $dark-borderColor=\"$borderDark700\"\n    >\n      <AccordionItem value=\"a\"\n         borderBottomWidth={1}\n         sx={{\n            borderBottomColor: '$borderLight300',\n          _dark: {\n            borderBottomColor: '$borderDark700',\n          },\n        }}>\n        <AccordionHeader \n        sx={{\n            backgroundColor: \"$backgroundLight0\",\n          _dark: {\n            backgroundColor: \"$backgroundDark950\"\n          }\n        }}\n        >\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n           What does the \"type\" prop of the Accordion component do?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={ChevronUpIcon} />\n                  ) : (\n                    <AccordionIcon as={ChevronDownIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent mt=\"$0\" pt=\"$2\" sx={{\n          backgroundColor: \"$backgroundLight50\",\n          _dark: {\n            backgroundColor: \"$backgroundDark900\"\n          },\n        }}>\n          <AccordionContentText>\n            The type prop determines whether one or multiple items can be\n            opened at the same time. The default value is \"single\" which means\n            only one item can be opened at a time. \n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem\n        value=\"b\"\n        borderBottomWidth={1}\n        borderBottomColor=\"$borderLight300\"\n        $dark-borderBottomColor=\"$borderDark700\"\n      >\n        <AccordionHeader     \n        sx={{\n            backgroundColor: \"$backgroundLight0\",\n          _dark: {\n            backgroundColor: \"$backgroundDark950\"\n          }\n        }}>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                 Can I disable the whole accordion?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={ChevronUpIcon} />\n                  ) : (\n                    <AccordionIcon as={ChevronDownIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent mt=\"$0\" pt=\"$2\" sx={{\n          backgroundColor: \"$backgroundLight50\",\n          _dark: {\n          backgroundColor: \"$backgroundDark900\"\n          },\n        }}>\n          <AccordionContentText>\n            Yes, you can disable the whole accordion by setting the isDisabled\n            prop to true on the Accordion component.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem\n        value=\"c\"\n      >\n        <AccordionHeader\n        sx={{\n            backgroundColor: \"$backgroundLight0\",\n          _dark: {\n            backgroundColor: \"$backgroundDark950\"\n          }\n        }}\n        >\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                 What is a controlled accordion? How can I make it controlled?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={ChevronUpIcon} />\n                  ) : (\n                    <AccordionIcon as={ChevronDownIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent mt=\"$0\" pt=\"$2\" sx={{\n          backgroundColor: \"$backgroundLight50\",\n          _dark: {\n          backgroundColor: \"$backgroundDark900\"\n          },\n        }}>\n          <AccordionContentText>\n      Controlled components refer to the components where the state and behaviors are controlled by the Parent component. You can make the accordion a controlled component by passing the value prop to the Accordion component and setting the onValueChange prop to update the value prop. Refer to the controlled accordion example in the docs.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Using tva from nativewind-utils to Create Component Styles with Variants\nDESCRIPTION: Example showing how to use the tva utility to create styles with variants and parent variants. This demonstrates creating button and text styles with size variants, then applying them to components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/nativewind/utils/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the tva\nimport { tva } from '@gluestack-ui/nativewind-utils/tva';\n\n// Understanding the API\nconst buttonStyle = tva({\n  base: 'bg-primary-500',\n  variants: {\n    size: {\n      lg: 'w-6 h-6',\n      md: 'w-5 h-5',\n      sm: 'w-4 h-4',\n    },\n  },\n});\n\nconst buttonText = tva({\n  base: 'text-white',\n  parentVariants: {\n    size: {\n      lg: 'text-lg',\n      md: 'text-base',\n      sm: 'text-sm',\n    },\n  },\n});\n\n// Using the in component\nexport default ({ size, ...props }) => (\n  <Pressable className={buttonStyle({ size })} {...props}>\n    <Text className={buttonText({ parentVariants: { size } })}>\n      Hello World!\n    </Text>\n  </Pressable>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AlertDialog in React Native\nDESCRIPTION: This snippet demonstrates how to implement an AlertDialog component with various sub-components like AlertDialogContent, AlertDialogHeader, AlertDialogFooter, and AlertDialogBody. It includes state management for opening and closing the dialog.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogFooter, AlertDialogBody, AlertDialogBackdrop } from \"@/components/ui/alert-dialog\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Text } from \"@/components/ui/text\";\nimport React from \"react\";\n\nfunction Example(){\n          const [showAlertDialog, setShowAlertDialog] = React.useState(false);\n          const handleClose = () => setShowAlertDialog(false);\n          return (\n            <>\n              <Button onPress={() => setShowAlertDialog(true)}>\n                <ButtonText>Open Dialog</ButtonText>\n              </Button>\n              <AlertDialog\n                isOpen={showAlertDialog}\n                onClose={handleClose}\n                {...props}\n              >\n                <AlertDialogBackdrop />\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <Heading className=\"text-typography-950 font-semibold\" size=\"md\">\n                      Are you sure you want to delete this post?\n                    </Heading>\n                  </AlertDialogHeader>\n                  <AlertDialogBody className=\"mt-3 mb-4\">\n                    <Text size=\"sm\">\n                      Deleting the post will remove it permanently and cannot be undone. Please confirm if you want to proceed.\n                    </Text>\n                  </AlertDialogBody>\n                  <AlertDialogFooter className=\"\">\n                    <Button\n                      variant=\"outline\"\n                      action=\"secondary\"\n                      onPress={handleClose}\n                      size=\"sm\"\n                    >\n                      <ButtonText>Cancel</ButtonText>\n                    </Button>\n                    <Button size=\"sm\" onPress={handleClose}>\n                      <ButtonText>Delete</ButtonText>\n                    </Button>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Slider with Icon in React\nDESCRIPTION: This snippet shows how to create a custom Slider component with an icon. It uses a brightness control as an example, featuring a custom design with an amber-colored track and a lightbulb icon in the slider thumb.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(55);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n    <VStack space=\"lg\">\n    <Text size=\"lg\">Brightness</Text>\n    <Center w=\"$72\">\n        <Slider\n          sliderTrackHeight={6}\n          size='lg'\n          value={sliderValue}\n          onChange={(value) => {\n          handleChange(value);\n          }}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$amber600\"/>\n          </SliderTrack>\n           <SliderThumb bg=\"$amber600\" p='$1' $active-outlineColor=\"$amber500\">\n            <Icon as={LightbulbIcon} color=\"white\" size=\"sm\"/>\n          </SliderThumb>\n        </Slider>\n    </Center>\n    </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Themed Select Component in JSX\nDESCRIPTION: This code snippet demonstrates how to render a themed Select component with various options and configurations.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Select/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Select>\n  <SelectTrigger {...props}>\n    <SelectInput placeholder=\"Select option\" />\n    <SelectIcon mr=\"$3\">\n      <Icon as={ChevronDownIcon} />\n    </SelectIcon>\n  </SelectTrigger>\n  <SelectPortal>\n    <SelectBackdrop/>\n    <SelectContent>\n      <SelectDragIndicatorWrapper>\n        <SelectDragIndicator />\n      </SelectDragIndicatorWrapper>\n      <SelectItem label=\"UX Research\" value=\"ux\" />\n      <SelectItem label=\"Web Development\" value=\"web\" />\n      <SelectItem\n        label=\"Cross Platform Development Process\"\n        value=\"cross-platform\"\n      />\n      <SelectItem\n        label=\"UI Designing\"\n        value=\"ui\"\n        isDisabled={true}\n      />\n      <SelectItem\n        label=\"Backend Development\"\n        value=\"backend\"\n      />\n    </SelectContent>\n  </SelectPortal>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Using Unstyled Components with Inline Styling\nDESCRIPTION: This example shows how to use the Button component from @gluestack-ui/button without any pre-defined configuration, applying inline styles directly to components without tokenization for custom styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/core-concepts/UnstyledLibrary/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import {GluestackUIProvider, ButtonGroup, Button, ButtonText } from '@gluestack-style/react';\n// import {View, Pressable, Text as RNText, ActivityIndicator} from 'react-native';\nfunction App() {\n  return (\n    <GluestackUIProvider>\n      <ButtonGroup>\n        <Button backgroundColor=\"blue\">\n          <ButtonText color=\"white\">Hello world</ButtonText>\n        </Button>\n      </ButtonGroup>\n    </GluestackUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FormControl Error State Implementation\nDESCRIPTION: Demonstrates error state handling in FormControl with RadioGroup component and validation messaging. Shows how to display error icons and messages.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n        <FormControl isInvalid>\n          <FormControlLabel>\n            <FormControlLabelText>\n              Which time slot works best for you?\n            </FormControlLabelText>\n          </FormControlLabel>\n          <RadioGroup my='$2'>\n            <VStack space=\"sm\">\n              <Radio size=\"sm\" value=\"Mango\">\n                <RadioIndicator mr=\"$2\">\n                  <RadioIcon>\n                    <CircleIcon/>\n                  </RadioIcon>\n                </RadioIndicator>\n                <RadioLabel>\n                  Monday\n                </RadioLabel>\n              </Radio>\n              <Radio size=\"sm\" value=\"Apple\">\n                <RadioIndicator mr=\"$2\">\n                  <RadioIcon>\n                    <CircleIcon/>\n                  </RadioIcon>\n                </RadioIndicator>\n                <RadioLabel>\n                  Tuesday\n                </RadioLabel>\n              </Radio>\n              <Radio size=\"sm\" value=\"Orange\">\n                <RadioIndicator mr=\"$2\">\n                  <RadioIcon>\n                    <CircleIcon/>\n                  </RadioIcon>\n                </RadioIndicator>\n                <RadioLabel>\n                  Wednesday\n                </RadioLabel>\n              </Radio>\n            </VStack>\n          </RadioGroup>\n          <FormControlError>\n            <FormControlErrorIcon as={AlertCircleIcon}/>\n            <FormControlErrorText>\n              Choose one time slot for the meeting\n            </FormControlErrorText>\n          </FormControlError>\n        </FormControl>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Progress Bar Component with gluestack-ui in React\nDESCRIPTION: This code snippet demonstrates how to create a custom progress bar component using gluestack-ui components. It includes a heading, a progress bar with custom styling, and a text label showing the progress value. The progress bar is styled with custom background colors for the track and filled portion.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Heading } from \"@/components/ui/heading\";\nimport { Progress, ProgressFilledTrack } from \"@/components/ui/progress\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <VStack space=\"lg\" className=\"max-w-[410px] w-full\">\n        <Heading>Internal Storage</Heading>\n        <Progress value={46} className='w-full h-2 bg-lime-100'>\n          <ProgressFilledTrack className='h-2 bg-lime-500' />\n        </Progress>\n        <Text size=\"md\">14GB</Text>\n        </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Component Example Implementation\nDESCRIPTION: Provides a full example of how to use the Modal component, including state management and rendering of subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Modal/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [showModal, setShowModal] = useState(false);\n  console.log(showModal);\n  const ref = React.useRef(null);\n  return (\n    <Center h={300}>\n      <Button onPress={() => setShowModal(true)} ref={ref}>\n        <ButtonText>Show Modal</ButtonText>\n      </Button>\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false);\n        }}\n        finalFocusRef={ref}\n      >\n        <ModalBackdrop />\n        <ModalContent>\n          <ModalHeader>\n            <Heading size='lg'>Engage with Modals</Heading>\n            <ModalCloseButton>\n              <Icon as={CloseIcon} />\n            </ModalCloseButton>\n          </ModalHeader>\n          <ModalBody>\n            <Text >\n          Elevate user interactions with our versatile modals. Seamlessly integrate notifications, forms, and media displays. Make an impact effortlessly.\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              action=\"secondary\"\n              mr=\"$3\"\n              onPress={() => {\n                setShowModal(false);\n              }}\n            >\n              <ButtonText>Cancel</ButtonText>\n            </Button>\n            <Button\n              size=\"sm\"\n              action=\"positive\"\n              borderWidth='$0'\n              onPress={() => {\n                setShowModal(false);\n              }}\n            >\n              <ButtonText>Explore</ButtonText>\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Button Group in Card Layout\nDESCRIPTION: Creates a feedback card with heading, description, and two buttons (Yes/No) in a horizontal layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack p='$12' alignItems='center' borderColor='$backgroundLight300' borderWidth={1} borderRadius=\"$lg\" $dark-borderColor=\"$backgroundDark700\">\n  <Box maxWidth='$64' mr='$9'>\n    <Heading mb='$1.5'>Was this page helpful?</Heading>\n    <Text fontSize='$sm'>We use this feedback to improve the quality of our documentation.</Text>\n  </Box>\n  <ButtonGroup space='md'>\n    <Button variant='outline' py='$2.5' action=\"secondary\">\n      <ButtonText fontSize='$sm' fontWeight='$medium'>No</ButtonText>\n    </Button>\n    <Button variant='solid' bg='$success700' borderColor='$success700' $hover-bg='$success800' $active-bg='$success700'>\n      <ButtonText fontSize='$sm' fontWeight='$medium'>Yes</ButtonText>\n    </Button>\n  </ButtonGroup>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Implementing SkeletonText Loading Component with Image - React/Native\nDESCRIPTION: Example implementation of a skeleton loading component with image placeholder, text content, and avatar. Uses isLoaded prop to control content visibility and includes styling for both web and native platforms.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Skeleton/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarFallbackText } from \"@/components/ui/avatar\";\nimport { Box } from \"@/components/ui/box\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Image } from \"@/components/ui/image\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <Box className=\"w-[290px] h-[400px] p-4 rounded-sm bg-background-100 gap-3\">\n        <Skeleton variant=\"rounded\" className=\"h-44 w-64 rounded-sm\" {...props}>\n          <Image\n          className=\"h-44 w-64 rounded-sm\"\n          source={{\n            uri: 'https://images.unsplash.com/photo-1715006020121-dd50879f9821?q=80&w=2787&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n          }}\n           />\n        </Skeleton>\n        <VStack className=\"gap-2\">\n          <Text className=\"text-primary-700 text-sm\">May 15, 2023</Text>\n          <Text className=\"text-primary-900 font-bold\">\n          The Power of Positive Thinking\n          </Text>\n          <Text className=\"text-primary-700 text-sm\">\n          Discover how the power of positive thinking can transform your life,\n          boost your confidence, and help you overcome challenges.\n          </Text>\n        </VStack>\n        <HStack className=\"gap-2\">\n        <Avatar size=\"xs\">\n          <AvatarFallbackText>John Smith</AvatarFallbackText>\n        </Avatar>\n        <Text className=\"text-sm font-bold\">John Smith</Text>\n      </HStack>\n      </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Input Component Usage in React\nDESCRIPTION: Example showing basic usage of the Input component with InputField for text entry\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Input {...props}>\n  <InputField\n      placeholder='Enter Text here'\n  />\n</Input>\n```\n\n----------------------------------------\n\nTITLE: Independent Row and Column Gaps in Grid Layout\nDESCRIPTION: This code shows how to set different spacing for rows and columns using gap-y-2 and gap-x-4 utilities. The grid is configured with 6 columns and multiple GridItems each spanning 2 columns with numbered content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Grid/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Grid, GridItem } from \"@/components/ui/grid\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Grid className=\"gap-y-2 gap-x-4\" _extra={{\n  className: 'grid-cols-6',\n}}>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n        _extra={{\n          className: 'col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">01</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n          className: 'col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">02</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n          className: 'col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">03</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n          className: 'col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">04</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n          className: 'col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">05</Text>\n      </GridItem>\n            <GridItem\n        className=\"bg-background-50 p-4 rounded-md text-center\"\n         _extra={{\n          className: 'col-span-2',\n        }}\n      >\n        <Text className=\"text-sm\">06</Text>\n      </GridItem>\n    </Grid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB with Standard Placement in React using gluestack-ui\nDESCRIPTION: Creates a small FAB with an add icon positioned at the bottom center of a to-do list interface. This example demonstrates standard placement options for FABs along with a checklist UI pattern using Checkbox components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon } from \"@/components/ui/checkbox\";\nimport { Fab, FabIcon } from \"@/components/ui/fab\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { AddIcon, CheckIcon } from \"@/components/ui/icon\";\n\t\nfunction Example() {\n  return (\n    <Box\n          className='border rounded-lg border-outline-300 py-4 bg-background-0 mx-5'\n        >\n          <VStack space='lg' className='mb-2 px-6 py-2'>\n            <Checkbox size=\"sm\" >\n              <CheckboxIndicator>\n                <CheckboxIcon as={CheckIcon} />\n              </CheckboxIndicator>\n              <CheckboxLabel>\n                <Text fontSize='$sm'>\n                  Prepare any feedback or updates.\n                </Text>\n              </CheckboxLabel>\n            </Checkbox>\n            <Checkbox size=\"sm\">\n              <CheckboxIndicator>\n                <CheckboxIcon as={CheckIcon} />\n              </CheckboxIndicator>\n              <CheckboxLabel>\n                <Text fontSize='$sm'>\n                  Review progress on goals and projects.\n                </Text>\n              </CheckboxLabel>\n            </Checkbox>\n            <Checkbox size=\"sm\">\n              <CheckboxIndicator>\n                <CheckboxIcon as={CheckIcon} />\n              </CheckboxIndicator>\n              <CheckboxLabel>\n                <Text fontSize='$sm' >\n                  Ask challenges and discuss.\n                </Text>\n              </CheckboxLabel>\n            </Checkbox>\n          </VStack>\n          <Fab size='sm' placement='bottom center' className='top-0 relative'>\n            <FabIcon as={AddIcon} size='sm'/>\n          </Fab>\n        </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Switch Component with @gluestack-ui/switch\nDESCRIPTION: Basic implementation showing how to create a Switch component using the createSwitch function from the @gluestack-ui/switch package and import styled components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/switch/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSwitch } from '@gluestack-ui/switch';\nimport { Root } from './styled-components';\n\nexport const Switch = createSwitch({\n  Root,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar with Icon in GlueStack UI\nDESCRIPTION: Shows how to create avatars with icons using the Avatar component. Demonstrates combining icons with text in a horizontal stack layout, including user information display.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"2xl\">\n    <HStack space=\"md\">\n      <Avatar  bgColor=\"$indigo600\" >\n        <Icon as={User} color=\"white\" size=\"lg\"/>\n      </Avatar>\n      <VStack >\n        <Heading size=\"sm\" >Ronald Richards</Heading>\n        <Text size=\"sm\" >Nursing Assistant</Text>\n      </VStack>\n    </HStack>\n    <HStack space=\"md\">\n        <Avatar  bgColor=\"$pink600\" >\n        <Icon as={User} color=\"white\" size=\"lg\"/>\n        </Avatar>\n        <VStack >\n          <Heading size=\"sm\" >Kevin James</Heading>\n          <Text size=\"sm\" >Web Designer</Text>\n        </VStack>\n  </HStack>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Creating a Popover Component with Styled Components\nDESCRIPTION: Example showing how to import and create a Popover component using styled components and the createPopover function from @gluestack-ui/popover.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/popover/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createPopover } from '@gluestack-ui/popover';\nimport { styled } from '../styled';\nimport {\n  Root,\n  Arrow,\n  Content,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n  CloseButton,\n} from './styled-components';\n\nexport const Popover = createPopover({\n  Root,\n  Arrow,\n  Content,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n  CloseButton,\n  //@ts-ignore\n  AnimatePresence: styled.Component,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Volume Control Slider in React\nDESCRIPTION: This code example demonstrates a Slider component used as a volume control. It includes volume icons and displays both the current slider value and the value when the slider change ends. The slider updates in real-time and rounds the values to integers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(40);\n  const [onChangeEndValue, setOnChangeEndValue] = React.useState(40);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n    <VStack space=\"2xl\">\n      <Box>\n        <Text textAlign=\"center\">current sliderValue - {sliderValue}</Text>\n        <Text textAlign=\"center\">onChangeEndValue - {onChangeEndValue}</Text>\n      </Box>\n      <HStack space=\"lg\">\n        <Volume />\n        <Center w=\"$80\">\n          <Slider\n            sliderTrackHeight={4}\n            value={sliderValue}\n            onChange={v => {\n              handleChange(Math.floor(v));\n            }} \n            onChangeEnd={v => {\n              v && setOnChangeEndValue(Math.floor(v));\n            }}\n            >\n            <SliderTrack>\n              <SliderFilledTrack />\n            </SliderTrack>\n            <SliderThumb />\n          </Slider>\n        </Center>\n        <Volume2Icon/>\n      </HStack>\n    </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Fab Component in React Native\nDESCRIPTION: This code snippet demonstrates how to render a Fab component with an icon and label using gluestack-ui in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Fab, FabLabel, FabIcon } from \"@/components/ui/fab\";\nimport { AddIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Box\n          className='h-[360px] w-80 bg-background-50 rounded-md'\n        >\n          <Fab {...props}>\n            <FabIcon as={AddIcon} />\n            <FabLabel>Quick start</FabLabel>\n          </Fab>\n        </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider for Native (React Native)\nDESCRIPTION: Creates a ThemeProvider component for managing and persisting theme preferences on native platforms using AsyncStorage.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(\n  undefined\n);\n\nexport const ThemeProvider = ({ children }: { children: React.ReactNode }) => {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    (async () => {\n      const savedTheme = (await AsyncStorage.getItem(\"theme\")) as\n        | Theme\n        | \"light\";\n      if (savedTheme) {\n        setTheme(savedTheme);\n        AsyncStorage.setItem(\"theme\", savedTheme);\n      }\n    })();\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    AsyncStorage.setItem(\"theme\", newTheme);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Actionsheet in React Native\nDESCRIPTION: This code snippet creates a file upload interface using an Actionsheet component. It includes a button to open the Actionsheet, which displays options for uploading a resume file, including a drag indicator, close button, file type information, and buttons for browsing files and uploading.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Actionsheet, ActionsheetContent, ActionsheetDragIndicator, ActionsheetDragIndicatorWrapper, ActionsheetBackdrop } from \"@/components/ui/actionsheet\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText, ButtonGroup } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Pressable } from \"@/components/ui/pressable\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { Icon, CloseIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\nimport { UploadCloud } from \"lucide-react-native\";\n\nfunction App(){\n  const [showActionsheet, setShowActionsheet] = React.useState(false);\n  const handleClose = () => setShowActionsheet(false);\n  return (\n    <>\n      <Button onPress={() => setShowActionsheet(true)}>\n        <ButtonText>Open</ButtonText>\n      </Button>\n      <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent className=\"px-5\">\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n          <HStack className=\"justify-between w-full mt-3\">\n            <VStack>\n              <Heading size=\"md\" className=\"font-semibold\">\n                Upload your latest resume\n              </Heading>\n              <Text size=\"sm\">JPG, PDF, PNG supported</Text>\n            </VStack>\n            <Pressable onPress={handleClose}>\n              <Icon as={CloseIcon} size=\"lg\" className=\"stroke-background-500\" />\n            </Pressable>\n          </HStack>\n          <Box className=\"my-[18px] items-center justify-center rounded-xl bg-background-50 border border-dashed border-outline-300 h-[130px] w-full\">\n            <Icon\n              as={UploadCloud}\n              className=\"h-[62px] w-[62px] stroke-background-200\"\n            />\n            <Text size=\"sm\">No files uploaded yet</Text>\n          </Box>\n          <ButtonGroup className=\"w-full\">\n            <Button className=\"w-full\" onPress={handleClose}>\n              <ButtonText>Browse files</ButtonText>\n            </Button>\n            <Button\n              className=\"w-full\"\n              variant=\"outline\"\n              isDisabled\n              action=\"secondary\"\n            >\n              <ButtonText>Upload</ButtonText>\n            </Button>\n          </ButtonGroup>\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: AlertDialog with Delete Confirmation in React\nDESCRIPTION: Implements a delete confirmation AlertDialog with warning icon and action buttons. Features a centered layout with descriptive text explaining the deletion consequences and confirmation options.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogFooter, AlertDialogBody, AlertDialogBackdrop } from \"@/components/ui/alert-dialog\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Text } from \"@/components/ui/text\";\nimport { Icon, TrashIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction Example(){\n          const [showAlertDialog, setShowAlertDialog] = React.useState(false);\n          const handleClose = () => setShowAlertDialog(false);\n          return (\n            <>\n              <Button onPress={() => setShowAlertDialog(true)}>\n                <ButtonText>Delete Invoice</ButtonText>\n              </Button>\n              <AlertDialog isOpen={showAlertDialog} onClose={handleClose}>\n                <AlertDialogBackdrop />\n                <AlertDialogContent className=\"w-full max-w-[415px] gap-4 items-center\">\n                  <Box className=\"rounded-full h-[52px] w-[52px] bg-background-error items-center justify-center\">\n                    <Icon as={TrashIcon} size=\"lg\" className=\"stroke-error-500\" />\n                  </Box>\n                    <AlertDialogHeader className=\"mb-2\">\n                      <Heading size=\"md\">Delete account?</Heading>\n                    </AlertDialogHeader>\n                    <AlertDialogBody>\n                      <Text size=\"sm\" className=\"text-center\">\n                        The invoice will be deleted from the invoices section and in\n                        the documents folder. This cannot be undone.\n                      </Text>\n                    </AlertDialogBody>\n                    <AlertDialogFooter className=\"mt-5\">\n                      <Button\n                        size=\"sm\"\n                        action=\"negative\"\n                        onPress={handleClose}\n                        className=\"px-[30px]\"\n                      >\n                        <ButtonText>Delete</ButtonText>\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        action=\"secondary\"\n                        onPress={handleClose}\n                        size=\"sm\"\n                        className=\"px-[30px]\"\n                      >\n                        <ButtonText>Cancel</ButtonText>\n                      </Button>\n                    </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: ImageViewer Implementation Example\nDESCRIPTION: Complete example demonstrating how to implement an ImageViewer with all its subcomponents including backdrop, content, close button, and image handling. Shows state management for visibility and image array handling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/ImageViewer/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n        const [visible, setVisible] = React.useState(false);\n        const Images = [{ id: 1, url: 'https://img.freepik.com/free-photo/young-boy-learning-how-ride-horse_23-2150460636.jpg' }];\n        return (\n          <Center>\n          <StatusBar hidden={visible}/>\n            <Pressable onPress={() => setVisible(true)}>\n              <Image\n                source={{ uri: Images[0].url }}\n                className=\"w-[200px] h-[200px]\"\n                resizeMode=\"cover\"\n              />\n            </Pressable>\n            <ImageViewer isOpen={visible} onClose={() => setVisible(false)}>\n              <ImageViewerBackdrop>\n                <ImageViewerContent\n                  images={Images}\n                  renderImages={({item, index}) => (\n                    <ImageViewerImage source={{ uri: item.url }} />\n                  )}\n                  keyExtractor={(item, index) => item.id + '-' + index}\n                >\n                <ImageViewerCloseButton>\n                  <Icon as={CloseIcon} className='text-secondary-500'/>\n                </ImageViewerCloseButton>\n              </ImageViewerContent>\n            </ImageViewerBackdrop>\n          </ImageViewer>\n        </Center>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Component Anatomy in React\nDESCRIPTION: This snippet illustrates the structure of a Checkbox component, including CheckboxGroup, Checkbox, CheckboxIndicator, CheckboxIcon, and CheckboxLabel sub-components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <CheckboxGroup>\n    <Checkbox>\n      <CheckboxIndicator>\n        <CheckboxIcon />\n      </CheckboxIndicator>\n      <CheckboxLabel />\n    </Checkbox>\n  </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Loading Button in React Native\nDESCRIPTION: This snippet demonstrates how to create a loading button with a spinner and custom text. It uses the Button, ButtonSpinner, and ButtonText components from gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Button isDisabled={true} bg='$darkBlue600' p='$3'>\n  <ButtonSpinner mr='$1'/>\n  <ButtonText fontWeight='$medium' fontSize='$sm'>Please wait...</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Content Integration with Decorative Dividers\nDESCRIPTION: Shows how to integrate Divider components with content sections, including decorative short dividers and full-width separators. Features custom styling and spacing for search results layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box py='$9' px='$20' m='$5' rounded='$lg' borderColor='$backgroundLight300' borderWidth='$1' $dark-borderColor=\"$backgroundDark700\">\n  <Heading size='3xl' >\n    Search Results\n  </Heading>\n  <Divider mt='$4' mb='$6'/>\n  <Box>\n    <Text size='xs' color='$amber700' fontWeight='$bold'>\n      TECHNOLOGY\n    </Text>\n    <Heading>\n      How AI can benefit your business\n    </Heading>\n    <Text size='sm' mt='$1.5' >\n      AI can automate tasks and processes, allowing for increasing efficiency and productivity.\n    </Text>\n    <HStack space='sm' mt='$3' alignItems='center'>\n      <Divider bg='$amber700' w={18}/>\n      <Text size='xs'  color='$amber700'>\n        5 mins read\n      </Text>\n    </HStack>\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Applying Platform-Specific Styles to Button Component in GlueStack UI\nDESCRIPTION: This snippet shows how to apply different styles to a Button component based on the platform (web, iOS, or Android). It uses the '_web', '_ios', and '_android' platform props to set different background colors for each platform.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n <Button\n     sx={{\n       _web: {\n         bg: '$primary300',\n       },\n       _ios: { bg: \"$red500\" },\n       _android: { bg: \"$yellow500\" },\n     }}\n   >\n   <ButtonText>\n       Sample Text</ButtonText>\n </Button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Variants for a Button Component in React Native\nDESCRIPTION: This snippet demonstrates how to create a basic variant for a button component using gluestack-style. It defines 'solid' and 'subtle' variants for a Pressable component styled as a button.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/Variants/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const StyledButtonVariant = styled(Pressable, {\n  px: '$3.5',\n  py: '$2.5',\n  rounded: '$md',\n    variants: {\n      variant: {\n        solid: {\n          bg: '$primary600',\n        },\n        subtle: {\n          bg: '$primary300'\n        }\n      },\n    },\n  });\n  const StyledButtonText = styled(\n  Text,\n  {\n    color: '$textDark50',\n    fontWeight: '400',\n  },\n  { ancestorStyle: ['_text'] }\n);\nreturn (\n  <Provider config={config}>\n    <StyledButtonVariant {...props}>\n      <StyledButtonText>Button</StyledButtonText>\n    </StyledButtonVariant>\n  </Provider>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Markdown Component with Link Handling in React Native\nDESCRIPTION: This snippet shows how to implement a Markdown component with link handling using a custom resolver for the 'a' tag. It demonstrates how to intercept link interactions and add custom behavior when links are clicked.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Skeleton/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Markdown } from \"@gluestack-ui/markdown\";\n\n<Markdown\n  resolvers={{\n    a: (props) => {\n      return (\n        <Pressable>\n          <Link {...props}>\n            <Text {...props} color=\"$blue600\">\n              {props.children}\n            </Text>\n          </Link>\n        </Pressable>\n      );\n    },\n  }}\n>\n  [Visit Us](https://gluestack.io/)\n</Markdown>;\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Image component using @gluestack-ui/image\nDESCRIPTION: Example of importing and creating a basic Image component using the createImage function and Root styled component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createImage } from '@gluestack-ui/image';\nimport { Root } from './styled-components';\n\nexport const Image = createImage({\n  Root,\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Child Components with Descendants in React Native\nDESCRIPTION: This example demonstrates how to apply styles to child components (ButtonText) from the parent Button component using the $_text-color property. The pattern allows for context-based styling of descendants in gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/descendants/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box justifyContent=\"center\" alignItems=\"center\" h=\"100%\">\n  <Box alignItems=\"center\">\n    <Button $_text-color=\"red\">\n      <ButtonText>Button</ButtonText>\n    </Button>\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Button Component with Styled System in React\nDESCRIPTION: This snippet defines a custom Button component using Styled System for styling. It includes various styling props and variants, allowing for flexible customization of the button's appearance.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Grid/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport styled from 'styled-components';\nimport { space, layout, color, typography, border, shadow, variant } from 'styled-system';\n\nconst StyledButton = styled('button')(\n  {\n    appearance: 'none',\n    border: 'none',\n    cursor: 'pointer',\n  },\n  space,\n  layout,\n  color,\n  typography,\n  border,\n  shadow,\n  variant({\n    variants: {\n      primary: {\n        color: 'white',\n        bg: 'primary',\n      },\n      secondary: {\n        color: 'text',\n        bg: 'secondary',\n      },\n    },\n  })\n);\n\nconst Button = ({ children, ...props }) => {\n  return <StyledButton {...props}>{children}</StyledButton>;\n};\n\nexport default Button;\n```\n\n----------------------------------------\n\nTITLE: Advanced Card Composition with Avatar and Stats\nDESCRIPTION: Implementation of a user profile card featuring an avatar, user details, statistics display, images, and a follow button. Uses multiple gluestack-ui components including Avatar, Box, Button, and Image components with responsive styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Card/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarFallbackText, AvatarImage } from \"@/components/ui/avatar\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Divider } from \"@/components/ui/divider\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Image } from \"@/components/ui/image\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction App(){\n    return (\n    <Card className=\"p-6 rounded-lg max-w-[360px] m-3\">\n      <Box className=\"flex-row\">\n        <Avatar className=\"mr-4\">\n          <AvatarFallbackText>JD</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://gluestack.github.io/public-blog-video-assets/camera.png',\n            }}\n          />\n        </Avatar>\n        <VStack>\n          <Heading size=\"md\" className=\"mb-1\">\n            Jane Doe\n          </Heading>\n          <Text size=\"sm\">\n            janedoe@sample.com\n          </Text>\n        </VStack>\n      </Box>\n      <Box\n        className=\"my-5 flex-col sm:flex-row\"\n      >\n        <VStack\n          className=\"items-center pb-2 sm:flex-1 sm:pb-0 sm:border-r sm:border-outline-300\"\n        >\n          <Heading size=\"xs\">\n            81\n          </Heading>\n          <Text size=\"xs\">posts</Text>\n        </VStack>\n        <Divider\n          orientation=\"horizontal\"\n          className=\"w-[40%] self-center bg-background-300 flex sm:hidden\"\n        />\n        <VStack\n          className=\"items-center py-2 sm:flex-1 sm:py-0 sm:border-r sm:border-outline-300\"\n        >\n          <Heading size=\"xs\">\n            5,281\n          </Heading>\n          <Text size=\"xs\">followers</Text>\n        </VStack>\n        <Divider\n          orientation=\"horizontal\"\n          className=\"w-[40%] self-center bg-background-300 flex sm:hidden\"\n        />\n        <VStack\n          className=\"items-center pt-2 sm:flex-1 sm:pt-0\"\n        >\n          <Heading size=\"xs\">\n            281\n          </Heading>\n          <Text size=\"xs\">following</Text>\n        </VStack>\n      </Box>\n      <Box\n        className=\"mb-5 flex-col sm:mb-6 sm:flex-row\"\n      >\n        <Image\n          source={{\n            uri: 'https://gluestack.github.io/public-blog-video-assets/parrot.png',\n          }}\n          className=\"mb-3 rounded-md w-full h-[140px] sm:mb-0 sm:mr-3 sm:w-[150px] sm:h-[154px]\"\n          alt=\"image\"\n        />\n        <Image\n          source={{\n            uri: 'https://gluestack.github.io/public-blog-video-assets/dear.png',\n          }}\n          className=\"rounded-md w-full h-[140px] sm:w-[150px] sm:h-[154px]\"\n          alt=\"image\"\n        />\n      </Box>\n      <Button className=\"py-2 px-4\">\n        <ButtonText size=\"sm\">Follow</ButtonText>\n      </Button>\n    </Card>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast with useToast Hook in JSX\nDESCRIPTION: Shows how to use the useToast hook to display a toast message with custom content and styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Toast/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  const toast = useToast();\n  return (\n    <Button\n      onPress={() => {\n        toast.show({\n          placement:\"top\",\n          render: ({ id }) => {\n            const toastId = \"toast-\" + id;\n            return (\n               <Toast nativeID={toastId} {...props}>\n               <VStack space=\"xs\" flex={1}>\n                <ToastTitle>New Message</ToastTitle>\n                <ToastDescription >\n                  Hey, just wanted to touch base and see how you're doing. Let's catch up soon!\n                </ToastDescription>\n                 </VStack>\n              </Toast>\n            );\n          },\n        });\n      }}\n    >\n      <ButtonText>Press Me</ButtonText>\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark-themed Actionsheet with Custom Content in React Native\nDESCRIPTION: This example shows how to implement an Actionsheet with a dark theme. It uses similar components as the previous example but applies a black background and white text for contrast.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App(){\n  const [showActionsheet, setShowActionsheet] = React.useState(false);\n  const handleClose = () => setShowActionsheet(!showActionsheet);\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n <Actionsheet\n  isOpen={showActionsheet}\n  onClose={handleClose}\n>\n  <ActionsheetBackdrop />\n  <ActionsheetContent maxHeight=\"75%\" bg=\"black\">\n    <ActionsheetDragIndicatorWrapper>\n      <ActionsheetDragIndicator />\n    </ActionsheetDragIndicatorWrapper>\n    <VStack w=\"$full\" p={20} >\n      <HStack justifyContent=\"center\" alignItems=\"center\" space=\"md\">\n        <Box\n          w={50}\n          h=\"$full\"\n          px=\"$2\"\n          borderWidth={1}\n          borderStyle=\"solid\"\n          borderColor=\"$borderLight300\"\n          rounded=\"$sm\"\n        >\n          <Image\n            source={{ uri: 'https://i.imgur.com/UwTLr26.png' }}\n            flex={1}\n            resizeMode=\"contain\"\n          />\n        </Box>\n        <VStack flex={1} >\n          <Text fontWeight=\"$bold\" color=\"white\">Mastercard</Text>\n          <Text color=\"white\">Card ending in 2345</Text>\n        </VStack>\n      </HStack>\n      <FormControl mt={36}>\n        <FormControlLabel>\n          <FormControlLabelText>\n            Confirm security code\n          </FormControlLabelText>\n        </FormControlLabel>\n        <Input mt={5}>\n          <InputField placeholder=\"CVC/CVV\"/>\n        </Input>\n        <Button onPress={handleClose} mt={20}>\n          <ButtonText>Pay $1000</ButtonText>\n        </Button>\n      </FormControl>\n    </VStack>\n  </ActionsheetContent>\n</Actionsheet>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Component in React Native\nDESCRIPTION: This code snippet demonstrates how to use the Tooltip component from gluestack-ui in a React Native application. It shows the basic structure and props of the Tooltip component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Tooltip, TooltipContent, TooltipText } from \"@/components/ui/tooltip\";\n\nfunction Example() {\n  return (\n    <Tooltip\n          {...props}\n          trigger={(triggerProps) => {\n            return (\n              <Button {...triggerProps}>\n                <ButtonText>Hover on me!</ButtonText>\n              </Button>\n            );\n          }}\n        >\n          <TooltipContent>\n           <TooltipText>Tooltip</TooltipText>\n          </TooltipContent>\n        </Tooltip>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FlatList with Custom Styling - JSX\nDESCRIPTION: Example showing a FlatList implementation for an inbox interface with custom styling, avatars, and text formatting. Demonstrates responsive styling and dark mode support.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/FlatList/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box py=\"$10\">\n    <Heading size=\"xl\" p=\"$4\" pb=\"$3\">Inbox</Heading>\n  <FlatList\n        data={data}\n         renderItem={({ item }) => (\n          <Box\n            borderBottomWidth=\"$1\"\n            borderColor=\"$trueGray800\"\n            $dark-borderColor=\"$trueGray100\"\n            $base-pl={0}\n            $base-pr={0}\n            $sm-pl=\"$4\"\n            $sm-pr=\"$5\"\n            py=\"$2\"\n          >\n            <HStack space=\"md\" justifyContent=\"space-between\">\n              <Avatar size=\"md\">\n                <AvatarImage source={{ uri: item.avatarUrl }} />\n              </Avatar>\n              <VStack>\n                <Text\n                  color=\"$coolGray800\"\n                  fontWeight=\"$bold\"\n                  $dark-color=\"$warmGray100\"\n                >\n                  {item.fullName}\n                </Text>\n                <Text\n                  color=\"$coolGray600\"\n                  $dark-color=\"$warmGray200\"\n                >\n                  {item.recentText}\n                </Text>\n              </VStack>\n              <Text\n                fontSize=\"$xs\"\n                color=\"$coolGray800\"\n                alignSelf=\"flex-start\"\n                $dark-color=\"$warmGray100\"\n              >\n                {item.timeStamp}\n              </Text>\n            </HStack>\n          </Box>\n        )}\n        keyExtractor={(item) => item.id}\n      />\n    </Box>\n```\n\n----------------------------------------\n\nTITLE: Responsive Layout Component with Style Props\nDESCRIPTION: Shows the implementation of a responsive horizontal stack layout using gluestack-style's HStack component with conditional styling for different screen sizes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/Installation/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack\n    space=\"md\"\n    flex={1}\n    mb=\"$4\"\n    sx={{\n      '@lg': {\n        flexDirection: 'row',\n      },\n      'flexDirection': 'column',\n    }}\n  >\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Color Schemes in React Native\nDESCRIPTION: This example shows how to create multiple sliders with different color schemes using the Slider component. It demonstrates customization of track and thumb colors for visual differentiation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Slider/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  return (\n    <VStack space=\"4xl\">\n    <Center w=\"$80\">\n        <Slider   defaultValue={45} sliderTrackHeight={4}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$emerald600\"/>\n          </SliderTrack >\n          <SliderThumb bg=\"$emerald600\" $active-outlineColor=\"$emerald500\" />\n        </Slider>\n    </Center>\n     <Center w=\"$80\">\n        <Slider   defaultValue={45} sliderTrackHeight={4}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$amber600\"/>\n          </SliderTrack >\n          <SliderThumb bg=\"$amber600\" $active-outlineColor=\"$amber500\" />\n        </Slider>\n    </Center>\n     <Center w=\"$80\">\n        <Slider  defaultValue={45} sliderTrackHeight={4}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$fuchsia600\"/>\n          </SliderTrack >\n          <SliderThumb bg=\"$fuchsia600\" $active-outlineColor=\"$fuchsia500\"/>\n        </Slider>\n    </Center>\n     <Center w=\"$80\">\n        <Slider   defaultValue={45} sliderTrackHeight={4}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$cyan600\"/>\n          </SliderTrack >\n          <SliderThumb bg=\"$cyan600\" $active-outlineColor=\"$cyan500\" />\n        </Slider>\n    </Center>\n    </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch with Label in GlueStack UI\nDESCRIPTION: Creates a horizontally stacked switch component with a label for notifications. The switch includes customized track and thumb colors with iOS-specific background styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Text } from \"@/components/ui/text\";\nimport colors from \"tailwindcss/colors\";\n\nfunction Example() {\n  return (\n    <HStack space=\"md\">\n          <Switch\n            trackColor={{ false: colors.gray[300], true: colors.gray[500] }}\n            thumbColor={colors.gray[50]}\n            activeThumbColor={colors.gray[50]}\n            ios_backgroundColor={colors.gray[300]}\n          />\n          <Text size=\"sm\" >Allow notifications</Text>\n        </HStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Popover with User Details\nDESCRIPTION: Creates a Popover component triggered by an Avatar that displays detailed user information including contact details and status. The component uses various gluestack-ui elements like Box, HStack, VStack, and includes icons for contact information.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Popover/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box h='$80'>\n  <Popover\n    trigger={(triggerProps) => {\n      return (\n        <HStack>\n          <Pressable\n            borderRadius='$full'\n            {...triggerProps}\n          >\n            <Avatar bg='$indigo600'>\n              <AvatarFallbackText >\n                Kevin James\n              </AvatarFallbackText>\n            </Avatar>\n          </Pressable>\n          <VStack ml='$2.5'>\n            <Heading fontSize='$md'>\n              Kevin James\n            </Heading>\n            <Text size='sm'>\n              Hi Rachel, What's up?\n            </Text>\n          </VStack>\n        </HStack>\n      );\n    }}\n  >\n    <PopoverBackdrop/>\n    <PopoverContent w='$80'>\n      <PopoverHeader  px='$5' pt='$5'>\n        <HStack>\n          <Avatar bg='$indigo600' >\n            <AvatarFallbackText>\n              Kevin James\n            </AvatarFallbackText>\n          </Avatar>\n          <VStack ml='$2.5'>\n            <Heading fontSize='$md'>\n              Kevin James\n            </Heading>\n            <HStack alignItems='center'>\n              <CircleIcon color='$green700' h='$2' w='$2'/>\n              <Text size='sm'  pl='$1.5'>\n                Active\n              </Text>\n            </HStack>\n          </VStack>\n        </HStack>\n      </PopoverHeader>\n      <PopoverBody  px='$5' pb='$5'>\n        <VStack space='lg'>\n          <VStack space='sm'>\n            <HStack alignItems='center'>\n              <Icon as={PhoneIcon} size='sm' />\n              <Text size='sm'  ml='$1.5'>\n                (603) 555-0123\n              </Text>\n            </HStack>\n            <HStack alignItems='center'>\n              <Icon as={Clock3Icon} size='sm'/>\n              <Text size='sm'  ml='$1.5'>\n                5:21 PM local time\n              </Text>\n            </HStack>\n            <HStack alignItems='center'>\n              <Icon as={MailIcon} size='sm'/>\n              <Text size='sm'  ml='$1.5'>\n                kevinjames@sample.com\n              </Text>\n            </HStack>\n          </VStack>\n          <Button bg='$darkBlue700' \n          $dark-bg='$darkBlue500'>\n            <ButtonText>View Profile</ButtonText>\n          </Button>\n        </VStack>\n      </PopoverBody>\n    </PopoverContent>\n  </Popover>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Circular Icon Button\nDESCRIPTION: Creates a circular button with an edit icon. Features custom styling including border radius and background color.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Button borderRadius='$full' size='lg' p='$3.5' bg='$indigo600' borderColor='$indigo600' >\n  <ButtonIcon as={EditIcon}/>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB with Custom Placement in React using gluestack-ui\nDESCRIPTION: Creates a large FAB with a shopping cart icon positioned at a custom location (right-bottom) on a product card interface. The example demonstrates custom FAB positioning techniques alongside a product details layout featuring an image, description, and link.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Fab, FabIcon } from \"@/components/ui/fab\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Image } from \"@/components/ui/image\";\nimport { Link } from \"@/components/ui/link\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { ShoppingCartIcon } from \"lucide-react-native\";\n\t\nfunction Example() {\n  return (\n    <Box\n          className='max-w-96 border rounded-lg border-outline-200 overflow-hidden mx-5  bg-background-100'\n        >\n          <Box>\n            <Image\n              className='h-[185px] w-[416px]'\n              source={{\n                uri: 'https://images.unsplash.com/photo-1591206369811-4eeb2f03bc95?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NDJ8fG9yYW5nZXxlbnwwfHwwfHx8MA%3D%3D',\n              }}\n              fallbackSource={{\n                uri: 'https://drive.google.com/uc?export=view&id=1h1e89BtQCp6JdGiKo92dlf5bjHC8hLjt',\n              }}\n              alt=\"image\"\n            />\n          </Box>\n          <VStack className='px-6 pt-4 pb-6'>\n            <Heading size='sm'>\n              Fresh Orange - Imported (Loose)\n            </Heading>\n            <Text className='my-1.5 text-sm'>\n              Rs 146(Rs.24.33/pc)\n            </Text>\n            <Text className='text-xs'>\n              DETAILS\n            </Text>\n            <Text className='my-1.5 text-xs'>\n              Oranges are a great source of vitamin C, which is essential for a healthy immune system. Oranges are a great source of vitamin C, which is important for maintaining a healthy immune system. Vitamin C also helps with the absorption of iron and the production of collagen, which supports healthy skin, teeth, and bones.\n            </Text>\n            <Link href=\"https://gluestack.io/\" isExternal>\n              <Text className='text-xs text-primary-600'>\n                READ MORE\n              </Text>\n            </Link>\n          </VStack>\n          <Fab size='lg' className='bg-primary-600 right-4 bottom-16 hover:bg-primary-700 active:bg-primary-800'>\n            <FabIcon as={ShoppingCartIcon} className='h-4 w-4'/>\n          </Fab>\n        </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Button Components in a JSX Component\nDESCRIPTION: This example demonstrates how to use various Button subcomponents within a ButtonGroup in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <ButtonGroup>\n    <Button>\n      <ButtonText />\n      <ButtonSpinner />\n      <ButtonIcon />\n    </Button>\n  </ButtonGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation in React Native\nDESCRIPTION: Basic example showing how to implement a checkbox with label and indicator icon using gluestack-ui components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon } from \"@/components/ui/checkbox\";\nimport { CheckIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Checkbox   {...props}  >\n            <CheckboxIndicator>\n              <CheckboxIcon as={CheckIcon}/>\n            </CheckboxIndicator>\n            <CheckboxLabel>Label</CheckboxLabel>\n          </Checkbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Component with Imported Styled Components\nDESCRIPTION: Example of importing styled components and using the createAvatar function to build a customized Avatar component with its subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/avatar/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Root,\n  Badge,\n  Group,\n  Image,\n  FallbackText,\n} from '../components/core/avatar/styled-components';\nimport { createAvatar } from '@gluestack-ui/avatar';\nconst Avatar = createAvatar({\n  Root,\n  Badge,\n  Group,\n  Image,\n  FallbackText,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component with State-Based Styling in React Native\nDESCRIPTION: This snippet demonstrates how to create a Button component using gluestack-style with state-based styling. It uses the 'styled' function to create styled components and React hooks to manage hover and active states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/StateBasesStyles/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Button() {\n  const StyledButton = styled(Pressable, {\n    'p': '$2',\n    'borderRadius': '$md',\n    'bg': '$blue500',\n    ':hover': {\n      bg: '$blue600',\n    },\n    ':active': {\n      bg: '$blue700',\n    },\n  });\n  const StyledButtonText = styled(\n    Text,\n    {\n      color: '$textDark50',\n    },\n  );\n  const [isHovered, setIsHovered] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n  return (\n    <Provider config={config}>\n      <StyledButton\n        states={{ hover: isHovered, active: isActive }}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        onMouseDown={() => setIsActive(true)}\n        onMouseUp={() => setIsActive(false)}\n      >\n        <StyledButtonText>Click Me</StyledButtonText>\n      </StyledButton>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Menu with Disabled Items - React Native\nDESCRIPTION: Example showing how to implement a Menu with disabled menu items using the disabledKeys prop. Theme option is disabled in this example.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Menu/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu\n  placement={\"top\"}\n  disabledKeys={['Theme']}\n    trigger={({ ...triggerProps }) => {\n      return (\n        <Button {...triggerProps}>\n          <ButtonText>Menu</ButtonText>\n        </Button>\n      );\n    }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n      <Icon as={GlobeIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Community\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n      <Icon as={PuzzleIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Plugins\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n      <Icon as={PaintBucket} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>Theme</MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n      <Icon as={SettingsIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Settings\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Add account\" textValue=\"Add account\">\n      <Icon as={AddIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Add account\n      </MenuItemLabel>\n    </MenuItem>\n  </Menu>\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet with SectionList in React\nDESCRIPTION: This snippet shows how to create an Actionsheet component with a SectionList. It demonstrates opening and closing the Actionsheet, rendering sectioned data, and handling item selection.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(!showActionsheet);\n    const DATA = [\n      {\n        title: 'Main dishes',\n        data: ['Pizza', 'Burger', 'Risotto'],\n      },\n      {\n        title: 'Sides',\n        data: ['French Fries', 'Onion Rings', 'Fried Shrimps'],\n      },\n    ];\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent>\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n           <ActionsheetSectionList\n            sections={DATA}\n            keyExtractor={(item, index) => item + index}\n            renderItem={({ item }) => (\n              <ActionsheetItem onPress={handleClose}>\n                <ActionsheetItemText>{item}</ActionsheetItemText>\n              </ActionsheetItem>\n            )}\n            renderSectionHeader={({ section: { title, data } }) => (\n              <ActionsheetSectionHeaderText>\n                {title}  ({data.length})\n              </ActionsheetSectionHeaderText>\n            )}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StyledJsxRegistry for Next.js App Router\nDESCRIPTION: Creates a registry component that handles style injection for SSR in Next.js App Router. Uses styled-jsx and react-native-web's AppRegistry to manage styles, along with GlueStack UI's nativewind utils for style flushing.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport React, { useRef, useState } from \"react\";\nimport { useServerInsertedHTML } from \"next/navigation\";\nimport { StyleRegistry, createStyleRegistry } from \"styled-jsx\";\nimport { Html, Head, Main, NextScript } from \"next/document\";\n// @ts-ignore\nimport { AppRegistry } from \"react-native-web\";\nimport { flush } from \"@gluestack-ui/nativewind-utils/flush\";\n\nexport default function StyledJsxRegistry({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry());\n  const isServerInserted = useRef(false);\n\n  useServerInsertedHTML(() => {\n    AppRegistry.registerComponent(\"Main\", () => Main);\n    const { getStyleElement } = AppRegistry.getApplication(\"Main\");\n    console.log(getStyleElement());\n    if (!isServerInserted.current) {\n      isServerInserted.current = true;\n      const styles = [\n        getStyleElement(),\n        jsxStyleRegistry.styles(),\n        flush(),\n      ];\n      jsxStyleRegistry.flush();\n      return <>{styles}</>;\n    }\n  });\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Component in React\nDESCRIPTION: This snippet demonstrates how to use the Radio component with its subcomponents in a React application. It shows the basic structure and props for creating a radio button.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RadioGroup>\n  <Radio value=\"change\" {...props}>\n    <RadioIndicator mr='$2'>\n      <RadioIcon as={CircleIcon} strokeWidth={1}/>\n    </RadioIndicator>\n    <RadioLabel >Label</RadioLabel>\n  </Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Link with Icon Example in GlueStack UI\nDESCRIPTION: This example demonstrates how to create a link with an accompanying icon. It uses the HStack component to align the LinkText and Icon components side by side, and applies appropriate styling to both.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack>\n      <Text\n       size=\"lg\">Go to </Text>\n      <Link href=\"https://gluestack.io/\" isExternal>\n        <HStack alignItems=\"center\">\n        <LinkText size=\"lg\">Pinterest</LinkText>\n        <Icon as={ArrowUpRightIcon} size=\"lg\" color=\"$info600\" mt=\"$0.5\" $dark-color=\"$info300\"/>\n        </HStack>\n      </Link>\n </HStack>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Handling With SnapPoints in React Native ActionSheet\nDESCRIPTION: Implements a keyboard-aware action sheet with snap points functionality. Uses KeyboardAvoidingView with 'position' behavior and custom styling. Includes the same payment form interface with improved keyboard handling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [showActionsheet, setShowActionsheet] = React.useState(false);\n  const handleClose = () => setShowActionsheet(!showActionsheet);\n    return (\n  <>\n    <Button onPress={handleClose}>\n        <ButtonText>Open</ButtonText>\n    </Button>\n     <Actionsheet\n      isOpen={showActionsheet}\n      onClose={handleClose}\n      snapPoints={[50]}\n    >\n    <KeyboardAvoidingView\n    behavior=\"position\"\n    style={{\n      position: 'relative',\n      flex: 1,\n      justifyContent: 'flex-end',\n    }}\n  >\n      <ActionsheetBackdrop />\n      <ActionsheetContent maxHeight=\"75%\">\n        <ActionsheetDragIndicatorWrapper>\n          <ActionsheetDragIndicator />\n        </ActionsheetDragIndicatorWrapper>\n        <VStack w=\"$full\" p={20}>\n          <HStack justifyContent=\"center\" alignItems=\"center\" space=\"md\">\n            <Box\n              w={50}\n              h=\"$full\"\n              px=\"$2\"\n              borderWidth={1}\n              borderStyle=\"solid\"\n              borderColor=\"$borderLight300\"\n              rounded=\"$sm\"\n            >\n              <Image\n                source={{ uri: 'https://i.imgur.com/UwTLr26.png' }}\n                flex={1}\n                resizeMode=\"contain\"\n              />\n            </Box>\n            <VStack flex={1}>\n              <Text fontWeight=\"$bold\">Mastercard</Text>\n              <Text>Card ending in 2345</Text>\n            </VStack>\n          </HStack>\n          <FormControl mt={36}>\n            <FormControlLabel>\n              <FormControlLabelText>\n                Confirm security code\n              </FormControlLabelText>\n            </FormControlLabel>\n            <Input w=\"$full\">\n              <InputSlot>\n               <InputIcon as={LeadingIcon} ml=\"$2\" />\n              </InputSlot>\n              <InputField placeholder=\"CVC/CVV\" />\n            </Input>\n            <Button onPress={handleClose} mt={20}>\n              <ButtonText>Pay $1000</ButtonText>\n            </Button>\n          </FormControl>\n        </VStack>\n      </ActionsheetContent>\n</KeyboardAvoidingView>\n</Actionsheet>\n</>\n);}\n```\n\n----------------------------------------\n\nTITLE: Rendering Switch with Label in Gluestack UI\nDESCRIPTION: This example shows how to render a Switch component with a label. It uses HStack for horizontal layout and includes a Text component for the label.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack space=\"md\">\n  <Switch/>\n  <Text size=\"sm\" >Allow notifications</Text>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Configurable Slider Component Example in React\nDESCRIPTION: Illustrates a more complex example of the Slider component with configurable props and nested within other components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Slider/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Center w={300} h={100}>\n    <Slider  defaultValue={30} {...props}  >\n      <SliderTrack>\n        <SliderFilledTrack />\n      </SliderTrack>\n      <SliderThumb />\n    </Slider>\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider for Web (React)\nDESCRIPTION: Creates a ThemeProvider component for managing and persisting theme preferences on web platforms using js-cookie.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport Cookies from \"js-cookie\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(\n  undefined\n);\n\nexport const ThemeProvider = ({ children }: { children: React.ReactNode }) => {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const savedTheme = Cookies.get(\"theme\") as Theme | undefined;\n    if (savedTheme) {\n      setTheme(savedTheme);\n      document.documentElement.classList.add(savedTheme);\n      document.documentElement.style.colorScheme = savedTheme;\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    Cookies.set(\"theme\", newTheme, { expires: 365 });\n    document.documentElement.classList.remove(theme);\n    document.documentElement.classList.add(newTheme);\n    document.documentElement.style.colorScheme = newTheme;\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n```\n\n----------------------------------------\n\nTITLE: Customized Markdown Component with Styling in React Native\nDESCRIPTION: This snippet shows how to use the Markdown component with custom styling, including specific configuration for headings and paragraphs. It demonstrates applying different styles to various markdown elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Skeleton/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Markdown } from \"@gluestack-ui/markdown\";\n\n<Markdown\n  resolvers={{\n    h1: props => {\n      return <Heading {...props} size=\"xl\" color=\"$amber600\" />;\n    },\n    h2: props => {\n      return <Heading {...props} size=\"lg\" color=\"$amber600\" />;\n    },\n    h3: props => {\n      return <Heading {...props} size=\"md\" color=\"$amber600\" />;\n    },\n    h4: props => {\n      return <Heading {...props} size=\"sm\" color=\"$amber600\" />;\n    },\n    h5: props => {\n      return <Heading {...props} size=\"xs\" color=\"$amber600\" />;\n    },\n    h6: props => {\n      return <Heading {...props} size=\"xs\" color=\"$amber600\" />;\n    },\n    p: props => {\n      return <Text {...props} size=\"md\" color=\"$cool\" />;\n    },\n  }}\n>\n  # This is a heading\n  This is a paragraph\n  This is another paragraph\n</Markdown>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Buttons with Help Text in React\nDESCRIPTION: This example demonstrates how to create radio buttons with additional help text. It uses a controlled state approach where the selected value is managed through React state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n    const [values, setValues] = React.useState(\"Read-only\");\n    return (\n      <RadioGroup value={values} onChange={setValues}>\n        <VStack space=\"2xl\">\n          <Box>\n            <Radio value=\"Read-only\" size=\"md\" >\n              <RadioIndicator mr='$2'>\n                <RadioIcon as={CircleIcon}/>\n              </RadioIndicator>\n              <RadioLabel>Extended coverage</RadioLabel>\n            </Radio>\n            <Text size=\"$sm\" ml=\"$7\" color=\"$textLight500\">Extra services included</Text>\n          </Box>\n          <Box>\n            <Radio value=\"Write\" size=\"md\">\n              <RadioIndicator mr='$2'>\n                <RadioIcon as={CircleIcon} />\n              </RadioIndicator>\n              <RadioLabel>Basic coverage</RadioLabel>\n            </Radio>\n            <Text size=\"$sm\" ml=\"$7\" color=\"$textLight500\">Nothing extra included</Text>\n          </Box>\n        </VStack>\n      </RadioGroup>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Buttons with Left-Aligned Labels in React\nDESCRIPTION: This example demonstrates how to create radio buttons with labels positioned on the left and indicators on the right. It uses justifyContent=\"space-between\" to create horizontal separation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [values, setValues] = useState(\"Monday\");\n  return (\n    <RadioGroup value={values} onChange={setValues} >\n      <VStack space=\"lg\" w='$40'>\n        <Radio value=\"Monday\" justifyContent=\"space-between\">\n          <RadioLabel>Jane Cooper</RadioLabel>\n          <RadioIndicator>\n            <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n        </Radio>\n        <Radio value=\"Tuesday\" justifyContent=\"space-between\">\n          <RadioLabel>Wade Warren</RadioLabel>\n          <RadioIndicator>\n              <RadioIcon as={CircleIcon} />\n          </RadioIndicator>\n        </Radio>\n      </VStack>\n    </RadioGroup >\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Styling with gluestack-ui Button\nDESCRIPTION: Example showing how to apply different background colors to a Button component based on platform ($web, $ios, $android). The component uses platform-specific props to achieve distinct styling across different devices.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/core-concepts/Universal/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText} from '@gluestack-ui/themed';\n\nfunction App {\n  return (\n    <Button\n    $web-backgroundColor=\"red\"\n    $ios-backgroundColor=\"blue\"\n    $android-backgroundColor=\"green\">\n     <ButtonText>Hello World</ButtonText>\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Advanced Card Composition with Avatar and Image in React\nDESCRIPTION: This code snippet demonstrates an advanced Card component composition including Avatar, Image, and Button components. It creates a user profile card with statistics and image gallery.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Card/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    return (\n    <Card p=\"$6\" borderRadius=\"$lg\" maxWidth={360} m=\"$3\">\n      <Box flexDirection=\"row\">\n        <Avatar mr=\"$4\">\n          <AvatarFallbackText fontFamily=\"$heading\">JD</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1620403724159-40363e84a155?q=80&w=2646&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n            }}\n          />\n        </Avatar>\n        <VStack>\n          <Heading size=\"md\" fontFamily=\"$heading\" mb=\"$1\">\n            Jane Doe\n          </Heading>\n          <Text size=\"sm\" fontFamily=\"$heading\">\n            janedoe@sample.com\n          </Text>\n        </VStack>\n      </Box>\n      <Box\n        my=\"$5\"\n        sx={{\n          'flexDirection': 'column',\n          '@sm': {\n            my: '$6',\n            flexDirection: 'row',\n          },\n        }}\n      >\n        <VStack\n          alignItems=\"center\"\n          sx={{\n            'pb': '$2',\n            '@sm': {\n              flex: 1,\n              pb: '$0',\n              borderRightWidth: 1,\n              borderColor: '$backgroundLight300',\n              _dark: {\n                borderRightColor: '$backgroundDark800',\n              },\n            },\n          }}\n        >\n          <Heading size=\"xs\" fontFamily=\"$heading\">\n            81\n          </Heading>\n          <Text size=\"xs\">posts</Text>\n        </VStack>\n        <Divider\n          orientation=\"horizontal\"\n          width=\"40%\"\n          alignSelf=\"center\"\n          sx={{\n            'bg': '$backgroundLight300',\n            'display': 'flex',\n            '_dark': {\n              bg: '$backgroundDark800',\n            },\n            '@sm': {\n              display: 'none',\n            },\n          }}\n        />\n        <VStack\n          alignItems=\"center\"\n          sx={{\n            'py': '$2',\n            '@sm': {\n              flex: 1,\n              py: '$0',\n              borderRightWidth: 1,\n              borderColor: '$backgroundLight300',\n              _dark: {\n                borderRightColor: '$backgroundDark800',\n              },\n            },\n          }}\n        >\n          <Heading size=\"xs\" fontFamily=\"$heading\">\n            5,281\n          </Heading>\n          <Text size=\"xs\">followers</Text>\n        </VStack>\n        <Divider\n          orientation=\"horizontal\"\n          width=\"40%\"\n          alignSelf=\"center\"\n          sx={{\n            'bg': '$backgroundLight300',\n            'display': 'flex',\n            '_dark': {\n              bg: '$backgroundDark800',\n            },\n            '@sm': {\n              display: 'none',\n            },\n          }}\n        />\n        <VStack\n          alignItems=\"center\"\n          sx={{\n            'pt': '$2',\n            '@sm': {\n              flex: 1,\n              pt: '$0',\n            },\n          }}\n        >\n          <Heading size=\"xs\" fontFamily=\"$heading\">\n            281\n          </Heading>\n          <Text size=\"xs\">following</Text>\n        </VStack>\n      </Box>\n      <Box\n        mb=\"$5\"\n        sx={{\n          'flexDirection': 'column',\n          '@sm': {\n            mb: '$6',\n            flexDirection: 'row',\n          },\n        }}\n      >\n        <Image\n          mb=\"$3\"\n          borderRadius=\"$md\"\n          sx={{\n            'width': '$full',\n            'height': 140,\n            '@sm': {\n              mb: '$0',\n              mr: '$3',\n              width: 150,\n              height: 154,\n            },\n          }}\n          source={{\n            uri: 'https://images.unsplash.com/photo-1592089416462-2b0cb7da8379?q=80&w=2865&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n          }}\n        />\n        <Image\n          borderRadius=\"$md\"\n          sx={{\n            'width': '$full',\n            'height': 140,\n            '@sm': {\n              width: 150,\n              height: 154,\n            },\n          }}\n          source={{\n            uri: 'https://images.unsplash.com/photo-1484406566174-9da000fda645?q=80&w=2425&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n          }}\n        />\n      </Box>\n      <Button py=\"$2\" px=\"$4\">\n        <ButtonText size=\"sm\">Follow</ButtonText>\n      </Button>\n    </Card>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring mediaQueries for responsive design in gluestack-style\nDESCRIPTION: The mediaQueries object defines custom media queries (breakpoints) for responsive styling. These are configured in the gluestack-style.config.js file and applied in component styles.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  mediaQueries: {\n    base: '@media screen and (min-width: 0)',\n    sm: '@media screen and (min-width: 480px)',\n    md: '@media screen and (min-width: 768px)',\n    lg: '@media screen and (min-width: 992px)',\n    xl: '@media screen and (min-width: 1280px)',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Accordion Components in React\nDESCRIPTION: This snippet demonstrates how to create a nested accordion structure using gluestack-ui components. It showcases a hierarchical organization of USA states grouped by region, with expandable sections for each state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion, AccordionItem, AccordionHeader, AccordionTrigger, AccordionTitleText, AccordionContentText, AccordionIcon, AccordionContent } from \"@/components/ui/accordion\";\nimport { MinusIcon, PlusIcon } from \"lucide-react-native\";\n\nfunction App(){\n    return (\n           <Accordion\n           variant=\"unfilled\"\n           size=\"sm\"\n           className=\"m-5 border border-outline-300 w-[80%] max-w-[640px]\"\n    >\n      <AccordionItem value=\"a\">\n        <AccordionHeader     \n        className=\"bg-background-0\"\n        >\n          <AccordionTrigger>\n            {({isExpanded}) => (\n              <>\n                {isExpanded ? (\n                  <AccordionIcon as={MinusIcon} size=\"sm\" />\n                ) : (\n                  <AccordionIcon as={PlusIcon} size=\"sm\" />\n                )}\n                <AccordionTitleText className=\"ml-3 text-sm\">USA</AccordionTitleText>\n              </>\n            )}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent className=\"pb-0\">\n          <Accordion\n            className=\"w-full border border-outline-300\"\n          >\n            <AccordionItem value=\"b\">\n              <AccordionHeader>\n                <AccordionTrigger>\n                  {({isExpanded}) => (\n                    <>\n                      {isExpanded ? (\n                        <AccordionIcon as={MinusIcon} />\n                      ) : (\n                        <AccordionIcon as={PlusIcon} />\n                      )}\n                      <AccordionTitleText className=\"ml-3\">\n                        California\n                      </AccordionTitleText>\n                    </>\n                  )}\n                </AccordionTrigger>\n              </AccordionHeader>\n              <AccordionContent>\n                <AccordionContentText>\n                  Capital city of California is Sacramento. California has a GDP\n                  of 2.89 trillion dollars and follows Pacific Standard Time\n                  zone.\n                </AccordionContentText>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n          <Accordion className=\"w-full mt-5 bg-background-0\"\n        >\n            <AccordionItem value=\"c\">\n              <AccordionHeader>\n                <AccordionTrigger>\n                  {({isExpanded}) => (\n                    <>\n                      {isExpanded ? (\n                        <AccordionIcon as={MinusIcon} />\n                      ) : (\n                        <AccordionIcon as={PlusIcon} />\n                      )}\n                      <AccordionTitleText className=\"ml-3\">Nevada</AccordionTitleText>\n                    </>\n                  )}\n                </AccordionTrigger>\n              </AccordionHeader>\n              <AccordionContent>\n                <AccordionContentText>\n                  Nevada is located in a mountainous region that includes vast\n                  semiarid grasslands and sandy alkali deserts. It is the most\n                  arid state of the country.\n                </AccordionContentText>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet with SectionList in React\nDESCRIPTION: This code demonstrates how to create an Actionsheet with a SectionList component that organizes options into sections. The example shows a food menu with categories for main dishes, sides, drinks, and desserts. It also handles opening and closing the Actionsheet.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(!showActionsheet);\n    const DATA = [\n      {\n        title: 'Main dishes',\n        data: ['Pizza', 'Burger', 'Risotto'],\n      },\n      {\n        title: 'Sides',\n        data: ['French Fries', 'Onion Rings', 'Fried Shrimps'],\n      },\n      {\n        title: 'Drinks',\n        data: ['Water', 'Coke', 'Beer'],\n      },\n      {\n        title: 'Desserts',\n        data: ['Cheese Cake', 'Ice Cream'],\n      },\n    ];\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent>\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n           <ActionsheetSectionList\n            h=\"$56\"\n            sections={DATA}\n            keyExtractor={(item, index) => item + index}\n            renderItem={({ item }) => (\n              <ActionsheetItem onPress={handleClose}>\n                <ActionsheetItemText>{item}</ActionsheetItemText>\n              </ActionsheetItem>\n            )}\n            renderSectionHeader={({ section: { title, data } }) => (\n              <ActionsheetSectionHeaderText>\n                {title}  ({data.length})\n              </ActionsheetSectionHeaderText>\n            )}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Input with FormControl in React Native using gluestack-ui\nDESCRIPTION: This example shows how to create a login form with a password input that can toggle visibility using InputSlot and InputIcon components within a FormControl. It includes email and password fields with proper state management for showing/hiding the password.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [showPassword, setShowPassword] = React.useState(false);\n  const handleState = () => {\n    setShowPassword((showState) => {\n      return !showState;\n    });\n  };\n  return (\n    <FormControl\n      p='$4'\n      borderWidth='$1'\n      borderRadius='$lg'\n      borderColor='$borderLight300'\n      $dark-borderWidth='$1' $dark-borderRadius='$lg' $dark-borderColor='$borderDark800'\n    >\n      <VStack space='xl'>\n        <Heading color='$text900' lineHeight='$md'>\n          Login\n        </Heading>\n        <VStack space='xs'>\n          <Text color='$text500' lineHeight='$xs'>\n            Email\n          </Text>\n          <Input>\n            <InputField\n              type=\"text\"\n            />\n          </Input>\n        </VStack>\n        <VStack space='xs'>\n          <Text color='$text500' lineHeight='$xs'>\n            Password\n          </Text>\n          <Input textAlign='center'>\n            <InputField\n              type={showPassword ? 'text' : 'password'}\n            />\n            <InputSlot pr='$3' onPress={handleState}>\n              {/* EyeIcon, EyeOffIcon are both imported from 'lucide-react-native' */}\n              <InputIcon as={showPassword ? EyeIcon : EyeOffIcon}  color='$darkBlue500'/>\n            </InputSlot>\n          </Input>\n        </VStack>\n        <Button\n          ml='auto'\n          onPress={()=>{\n            setShowModal(false);\n          }}\n        >\n          <ButtonText>\n            Save\n          </ButtonText>\n        </Button>\n      </VStack>\n    </FormControl>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Component Structure in React\nDESCRIPTION: Demonstrates the basic structure and usage of the Slider component with its child components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Slider/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Slider>\n    <SliderTrack>\n      <SliderFilledTrack />\n    </SliderTrack>\n    <SliderThumb />\n  </Slider>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Slider with Tooltip in React Native\nDESCRIPTION: This example demonstrates how to implement a slider with a tooltip that displays the current value. It includes state management, a change handler, and integration with a Tooltip component for real-time feedback.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Slider/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(40);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n     <HStack space=\"lg\">\n     <Text size=\"md\">$0</Text>\n        <Tooltip\n              placement={\"top\"}\n              trigger={(triggerProps) => {\n                return (\n                      <Center w=\"$80\">\n                          <Slider\n                           step={5}\n                            sliderTrackHeight={4}\n                            value={sliderValue}\n                            maxValue={60}\n                            minValue={0}\n                            onChange={v => {\n                              handleChange(Math.floor(v));\n                            }}>\n                            <SliderTrack>\n                              <SliderFilledTrack />\n                            </SliderTrack>\n                            <SliderThumb {...triggerProps}/>\n                          </Slider>\n                      </Center>\n                )\n              }}\n            >\n            <TooltipContent>\n              <Text color=\"white\">{\"$\" + sliderValue}</Text>\n            </TooltipContent>\n          </Tooltip>\n    <Text size=\"md\">$60</Text>\n    </HStack>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Button in React with gluestack-ui\nDESCRIPTION: This snippet demonstrates how to create a button with a link-like appearance using gluestack-ui components. It includes a text and an icon, styled to look like a link.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Button variant='link'>\n  <ButtonText fontWeight='$medium' fontSize='$sm' color='$textLight900' $dark-color=\"$textDark300\">\n    Back to top\n  </ButtonText>\n  <ButtonIcon as={ArrowUpIcon} h='$3' w='$3' color='$backgroundLight900' ml='$1' $dark-color=\"$backgroundDark300\"/>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Variants for a Button Component in React Native\nDESCRIPTION: This code snippet shows how to create multiple variants for a button component, including both 'variant' and 'size' options. It also demonstrates how to style descendant components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/Variants/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const StyledButtonVariant = styled(Pressable, {\n    p: '$3',\n  rounded: '$md',\n    variants: {\n      variant: {\n        solid: {\n          bg: '$primary600',\n        },\n        subtle: {\n          bg: '$primary200',\n          _text: {\n          color: '$textDark600'\n          }\n        },\n      },\n      size: {\n        xs: {\n          px: '$3',\n          py: '$2',\n        },\n        sm: {\n          px: '$3.5',\n          py: '$2.5',\n        },\n      },\n    },\n  }, {\n  descendantStyle: ['_text']\n});\n  const StyledButtonText = styled(\n  Text,\n  {\n    color: '$textDark50',\n    fontWeight: '400',\n  },\n  { ancestorStyle: ['_text'] }\n);\nreturn (\n  <Provider config={config}>\n    <StyledButtonVariant {...props}>\n      <StyledButtonText>Button</StyledButtonText>\n    </StyledButtonVariant>\n  </Provider>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component in React Native\nDESCRIPTION: This code snippet shows how to import the Link component from gluestack-ui in a React Native project. It's typically placed at the top of a file where the Link component will be used.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@/components/ui/link';\n```\n\n----------------------------------------\n\nTITLE: Using Lucide Icons with Gluestack UI in React\nDESCRIPTION: This snippet shows how to integrate Lucide icons with Gluestack UI's Icon component. It demonstrates rendering various Lucide icons in a vertical stack layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VStack } from \"@/components/ui/vstack\";\nimport { Icon } from \"@/components/ui/icon\";\nimport { Camera, ChromeIcon, InstagramIcon, FacebookIcon } from \"lucide-react-native\";\n\nfunction Example() {\n  return (\n    <VStack space=\"md\" className=\"items-center\">\n        <Icon className=\"text-typography-500\" as={Camera} />\n        <Icon className=\"text-typography-500\" as={ChromeIcon}  />\n        <Icon className=\"text-typography-500\" as={InstagramIcon} />\n        <Icon className=\"text-typography-500\" as={FacebookIcon} />\n      </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Radio Component Structure in JSX\nDESCRIPTION: This code outlines the basic structure of a Radio component, showing how to nest RadioIndicator, RadioIcon, and RadioLabel within a RadioGroup.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <RadioGroup>\n    <Radio>\n      <RadioIndicator>\n        <RadioIcon />\n      </RadioIndicator>\n      <RadioLabel />\n    </Radio>\n  </RadioGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HStack Component in React\nDESCRIPTION: Example showing how to import and create a HStack component that arranges child elements horizontally in a row layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/hstack/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, Spacer } from '../components/core/hstack/styled-components';\nimport { createHStack } from '@gluestack-ui/hstack';\nconst HStack = createHStack({\n  Root,\n  Spacer,\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js Config with gluestack-ui Adapter\nDESCRIPTION: Configuration setup for Next.js to properly transpile gluestack-ui components\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst { withGluestackUI } = require('@gluestack/ui-next-adapter');\n\nconst nextConfig = {\n  reactStrictMode: true,\n  transpilePackages: ['@gluestack-ui/themed'],\n};\n\nmodule.exports = withGluestackUI(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Icon in React Native\nDESCRIPTION: Example demonstrating a tooltip that appears when hovering over an icon avatar. The tooltip displays a \"New message\" text with command icons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Tooltip/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n          return (\n            <Box h=\"$96\" justifyContent=\"center\">\n              <Tooltip\n                  placement={\"top\"}\n                  trigger={(triggerProps) => {\n                    return (\n                    <Avatar size=\"md\" {...triggerProps} bg=\"$indigo600\">\n                      <Icon as={Edit} color=\"$white\" size=\"sm\" />\n                    </Avatar>\n                    )\n                  }}\n              >\n                <TooltipContent\n                bg=\"$white\"\n                $dark-bg=\"$backgroundDark900\"\n                >\n                  <Box  p=\"$2.5\" boderRadius=\"$2\">\n                    <Text size=\"sm\">New message</Text>\n                    <HStack space=\"xs\"  p=\"$1\" ml=\"$3\">\n                          <Avatar size=\"xs\"  bg=\"$trueGray500\" rounded=\"$sm\">\n                              <Icon as={Command} color=\"$white\"/>\n                          </Avatar>\n                          <Avatar size=\"xs\"  bg=\"$trueGray500\" rounded=\"$sm\">\n                            <AvatarFallbackText>N</AvatarFallbackText>\n                          </Avatar>\n                    </HStack>\n                  </Box>\n                </TooltipContent>\n              </Tooltip>\n            </Box>\n        );\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Button in React\nDESCRIPTION: This example shows how to implement a button with only an icon. It uses a custom EditIcon component and applies specific styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonIcon } from \"@/components/ui/button\";\nimport { EditIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Button\n      size='lg'\n      className='rounded-full p-3.5'\n    >\n      <ButtonIcon as={EditIcon} />\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar with Fallback Text in gluestack-ui\nDESCRIPTION: Demonstrates the fallback text functionality of the Avatar component. When the image fails to load due to an incorrect URL, the component displays the fallback text (initials) instead.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Avatar size=\"md\">\n        <AvatarFallbackText>John Doe</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: 'https://wrong-url',\n          }}\n        />\n      </Avatar>\n  </HStack>\n```\n\n----------------------------------------\n\nTITLE: Configuring StyledProvider with Basic Setup\nDESCRIPTION: Example showing how to set up StyledProvider with configuration options including aliases, tokens, and global styles. The config includes color tokens, spacing, typography, and media queries.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/StyledProvider/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyledProvider, createConfig } from '@gluestack-style/react';\n\nconst config = createConfig({\n  aliases: {\n    bg: 'backgroundColor',\n    bgColor: 'backgroundColor',\n    rounded: 'borderRadius',\n    h: 'height',\n    w: 'width',\n  },\n  tokens: {\n    colors: {\n      primary0: '#ffffff',\n      primary400: '#c084fc',\n      primary500: '#a855f7',\n      primary600: '#9333ea',\n    },\n    space: {\n      4: 16,\n      5: 20,\n      6: 24,\n    },\n    radii: {\n      sm: 4,\n      md: 6,\n    },\n    letterSpacings: {\n      md: 0,\n    },\n    lineHeights: {\n      sm: 20,\n      md: 22,\n    },\n    fontWeights: {\n      normal: '400',\n      medium: '500',\n    },\n    fontSizes: {\n      sm: 14,\n      md: 16,\n    },\n    mediaQueries: {\n      sm: '@media (min-width: 480px)',\n      md: '@media (min-width: 768px)',\n    },\n  },\n  globalStyle: {\n    variants: {\n      shadow: {\n        softShadow: {\n          shadowOffset: {\n            width: 0,\n            height: 0,\n          },\n          shadowRadius: 10,\n          shadowOpacity: 0.1,\n          _android: {\n            shadowColor: '$primary500',\n            elevation: 5,\n            shadowOpacity: 0.05,\n          },\n        },\n      },\n    },\n  },\n} as const);\n\nconst App = () => (\n  <StyledProvider config={config}>\n    <YourApp />\n  </StyledProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography Styling in Gluestack UI\nDESCRIPTION: Shows various typography styling options including font size, text decoration, font weight, and text alignment using the Text component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n      <Text m=\"$2\" fontSize=\"md\">\n        Sample Text\n      </Text>\n      <Text m=\"$2\" fontSize={32} textDecoration=\"underline\">\n        Sample Text\n      </Text>\n      <Text m=\"$2\" fontSize=\"2em\" fontWeight=\"bold\">\n        Sample Text\n      </Text>\n      <Text m=\"$2\" textAlign='center'>\n        Sample Text\n      </Text>\n     </>\n```\n\n----------------------------------------\n\nTITLE: Progress Component with Value Example\nDESCRIPTION: Example of a Progress component showing a download percentage with configured value.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress, ProgressFilledTrack } from \"@/components/ui/progress\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <VStack space=\"lg\" className=\"max-w-80 w-full\">\n        <Text size=\"lg\">Downloading 55%</Text>\n        <Progress value={55} className='w-full h-1'>\n          <ProgressFilledTrack className='h-1' />\n        </Progress>\n      </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Form Actions with FormControl in GlueStack UI React\nDESCRIPTION: This example shows how to use FormControl to create a horizontal button layout for form actions. It demonstrates incorporating a secondary cancel button and a negative delete button with proper styling and layout using HStack.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { FormControl } from \"@/components/ui/form-control\";\nimport { HStack } from \"@/components/ui/hstack\";\n\t\nfunction Example() {\n  return (\n    <HStack>\n          <FormControl>\n            <Button variant='outline' action='secondary'>\n              <ButtonText>\n                Cancel\n              </ButtonText>\n            </Button>\n          </FormControl>\n               <FormControl>\n            <Button action='negative' className='ml-4'>\n              <ButtonText className=\"text-white group-hover/button:text-white group-active/button:text-white\">\n                Delete\n              </ButtonText>\n            </Button>\n          </FormControl>\n        </HStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Slider Component in React Native\nDESCRIPTION: This code snippet demonstrates how to render a basic Slider component with customizable props in a React Native application using gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Center w={300} h={100}>\n  <Slider  defaultValue={30} {...props}  >\n    <SliderTrack>\n      <SliderFilledTrack />\n    </SliderTrack>\n    <SliderThumb />\n  </Slider>\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical and Horizontal Dividers in Article Layout\nDESCRIPTION: Shows how to use Divider component to separate article content and metadata with both vertical and horizontal orientations. Includes responsive styling and dark mode support.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack\n  space='lg'\n  p='$12'\n  borderColor='$backgroundLight300'\n  borderWidth='$1'\n  rounded='$lg'\n  mx='$5'\n  $dark-borderColor=\"$backgroundDark700\"\n  >\n  <Box>\n    <Text size='xs' color='$darkBlue600' fontWeight='$bold'>\n      HEALTH\n    </Text>\n    <Heading>\n      Benefits of Oranges\n    </Heading>\n    <Text size='sm' mt='$1.5'>\n      Oranges are a great source of vitamin C, which is essential for a healthy immune system.\n    </Text>\n    <HStack space='sm' mt='$3' h='$5'>\n      <Text size='xs'>\n        Wade Warrem\n      </Text>\n      <Divider orientation='vertical' bg='$trueGray300' />\n      <Text size='xs'>\n        6th Oct, 2019\n      </Text>\n      <Divider orientation='vertical' bg='$trueGray300'/>\n      <Text size='xs'>\n        5 mins read\n      </Text>\n    </HStack>\n  </Box>\n  <Divider\n    bg=\"$trueGray300\"\n    $dark-bg=\"$backgroundDark700\"\n    />\n  <Box>\n    <Text size='xs' color='$darkBlue600' fontWeight='$bold'>\n      TECHNOLOGY\n    </Text>\n    <Heading>\n      How AI can benefit your business\n    </Heading>\n    <Text size='sm' mt='$1.5'>\n      AI can automate tasks and processes, allowing for increasing efficiency and productivity.\n    </Text>\n    <HStack space='sm' mt='$3' h='$5'>\n      <Text size='xs'>\n        Wade Warrem\n      </Text>\n      <Divider orientation='vertical' bg='$trueGray300'/>\n      <Text size='xs'>\n        6th Oct, 2019\n      </Text>\n      <Divider orientation='vertical' bg='$trueGray300'/>\n      <Text size='xs'>\n        5 mins read\n      </Text>\n    </HStack>\n  </Box>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Using Portal Component in React with Button Toggle\nDESCRIPTION: Example of implementing a Portal component that displays content outside the DOM hierarchy with a toggle button to control visibility.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Portal/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText, ButtonIcon } from \"@/components/ui/button\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\nimport { CloseIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\nimport { Portal } from \"@/components/ui/portal\";\n\nfunction App(){\n          const [visible, setVisible] = React.useState(false);\n          const handleClose = () => setVisible(false);\n          return (\n            <>\n              <Portal\n                isOpen={visible}\n                className=\"justify-center items-center\"\n              >\n                <HStack className=\"border-2 w-1/3 py-10 gap-4 rounded-lg flex-row justify-center items-center bg-background-0\">\n                  <Text className=\"text-typography-950\">Portal Content</Text>\n                  <Button\n                    size=\"xs\"\n                    className=\"h-6 px-1 absolute top-2 right-2\"\n                    variant=\"outline\"\n                    onPress={handleClose}\n                  >\n                    <ButtonIcon as={CloseIcon} />\n                  </Button>\n                </HStack>\n              </Portal>\n              <Button onPress={() => setVisible(!visible)}>\n                <ButtonText>Toggle Portal</ButtonText>\n              </Button>\n            </>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Customizing Typography Tokens in gluestack-ui\nDESCRIPTION: Example showing how to customize typography-related tokens like fontSizes using createConfig. Demonstrates extending the default configuration with new token values while preserving existing ones.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/theme-configuration/theme/default-tokens/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createConfig } from '@gluestack-ui/themed';\nimport {config as defaultConfig } from '@gluestack-ui/config';\n\nconst config = createConfig({\n  ...defaultConfig,\n  tokens: {\n    ...defaultConfig.tokens,\n    fontSizes: {\n      ...defaultConfig.tokens.fontSizes,\n      newFontSize: 90,\n    },\n    ...// other tokens\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Group in Card for React Native\nDESCRIPTION: This example shows a complex layout with a button group inside a card-like container. It uses various components like HStack, Box, Heading, Text, and ButtonGroup to create a feedback interface.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack  p='$12'  alignItems='center'  borderColor='$backgroundLight300'\n  borderWidth={1} borderRadius=\"$lg\" $dark-borderColor=\"$backgroundDark700\">\n  <Box maxWidth='$64' mr='$9'>\n    <Heading mb='$1.5' >\n      Was this page helpful?\n    </Heading>\n    <Text fontSize='$sm' >\n      We use this feedback to improve the quality of our documentation.\n    </Text>\n  </Box>\n  <ButtonGroup space='md'>\n    <Button variant='outline' py='$2.5' action=\"secondary\">\n      <ButtonText  fontSize='$sm' fontWeight='$medium'\n      >\n        No\n      </ButtonText>\n    </Button>\n    <Button\n      variant='solid'\n      bg='$success700'\n      borderColor='$success700'\n      $hover-bg='$success800'\n      $active-bg='$success700'\n    >\n      <ButtonText  fontSize='$sm' fontWeight='$medium'>\n        Yes\n      </ButtonText>\n    </Button>\n  </ButtonGroup>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Using useBreakpointValue Hook for Responsive Layout\nDESCRIPTION: This example demonstrates how to use the useBreakpointValue hook to create a responsive layout that changes from column to row direction when the screen size reaches the 'sm' breakpoint.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/hooks/useBreakPointValue/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n   const flexDir = useBreakpointValue({\n          default: \"column\",\n          sm: \"row\",\n        });\n    return (\n      <VStack\n        style={{\n          flexDirection: flexDir,\n          gap: 10,\n        }}\n      > \n        <Box className={\"justify-center items-center p-4 rounded bg-primary-500\"}>\n          <Text className=\"font-bold text-typography-0\">Box 1</Text>\n        </Box>\n        <Box className={\"justify-center items-center p-4 rounded bg-primary-600\"}>\n          <Text className=\"font-bold text-typography-0\">Box 2</Text>\n        </Box>\n        <Box className={\"justify-center items-center p-4 rounded bg-primary-700\"}>\n          <Text className=\"font-bold text-typography-0\">Box 3</Text>\n        </Box>\n      </VStack>\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Link Component in GlueStack UI\nDESCRIPTION: This code demonstrates how to import the styled components, create a Link component using the createLink function, and implement it in a React component. It shows the basic pattern for setting up and using the Link component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from 'components/core/link/styled-components';\n\n// import the createLink function\nimport { createLink } from '@gluestack-ui/link';\n\n// Understanding the API\nconst Link = createLink({\n  Root,\n});\n\n// Using the link component\nexport default () => (\n  <Link href=\"\">\n    <LinkText />\n  </Link>\n);\n```\n\n----------------------------------------\n\nTITLE: Progress Component with Value Display\nDESCRIPTION: Example showing a Progress component with text indicating download progress.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"lg\">\n  <Text size=\"lg\">Downloading 55%</Text>\n  <Progress value={55} w='$80' h='$1'>\n    <ProgressFilledTrack h='$1' />\n  </Progress>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Provider Creation and Usage Example\nDESCRIPTION: Example showing how to create and use a custom Provider component with configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Provider/GluestackUIProvider/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// import the createProvider function\nimport { createProvider } from '@gluestack-ui/provider';\nimport { config } from '@gluestack-ui/config';\nimport { StyledProvider } from '@gluestack-style/react';\n\nexport const Provider = createProvider({\n  StyledProvider,\n});\n\n// Using the Provider component\nexport default () => (\n  <Provider config={config}>\n    <Text />\n  </Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Unitools Image Example\nDESCRIPTION: Example of using the Unitools Image component in both Expo and Next.js projects.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Image/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from '@unitools/image';\n\nfunction Example() {\n  return (\n    <Image\n          source={{\n            uri: \"https://gluestack.github.io/public-blog-video-assets/mountains.png\",\n          }}\n          alt=\"Logo\"\n          size='none'\n          className=\"aspect-[320/208] w-full max-w-[320px]\"\n        />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Theme with GluestackUIProvider in React\nDESCRIPTION: This snippet demonstrates how to import and use the default theme configuration from @gluestack-ui/config package with the GluestackUIProvider component. The config is passed as a prop to the provider that wraps your application code.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/theme-configuration/theme/default-components/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { config } from '@gluestack-ui/config';\n\nfunction App() {\n  return (\n    <GluestackUIProvider config={config}>\n      {/* Your app code */}\n    </GluestackUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component in React Native\nDESCRIPTION: Basic import statement for using the Switch component in your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from '@/components/ui/switch';\n```\n\n----------------------------------------\n\nTITLE: Complete Form Control Implementation and Usage\nDESCRIPTION: Comprehensive example demonstrating the full lifecycle of creating and using a FormControl component, including importing styles, creating the component, and implementing it with nested subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/form-control/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Error,\n  ErrorText,\n  ErrorIcon,\n  Label,\n  LabelText,\n  LabelAstrick,\n  Helper,\n  HelperText,\n} from '../components/core/form-control/styled-components';\n\n// import the createFormControl function\nimport { createFormControl } from '@gluestack-ui/form-control';\n\n// Understanding the API\nconst FormControl = createFormControl({\n  Root,\n  Error,\n  ErrorText,\n  ErrorIcon,\n  Label,\n  LabelText,\n  LabelAstrick,\n  Helper,\n  HelperText,\n});\n\n// Using the FormControl component\nexport default () => (\n  <FormControl>\n    <FormControlLabel>\n      <FormControlLabelText></FormControlLabelText>\n    </FormControlLabel>\n    <Input />\n    <FormControlHelper>\n      <FormControlHelperText></FormControlHelperText>\n    </FormControlHelper>\n    <FormControlError>\n      <FormControlErrorIcon>\n        <AlerCircleIcon />\n      </FormControlErrorIcon>\n      <FormControlErrorText></FormControlErrorText>\n    </FormControlError>\n  </FormControl>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing FormControl with Textarea in React\nDESCRIPTION: Example showing how to integrate a Textarea component within a FormControl wrapper, including labels and helper text. The component provides a styled text input area with associated form elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Textarea/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FormControl>\n  <FormControlLabel>\n    <FormControlLabelText>\n      Write with me\n    </FormControlLabelText>\n  </FormControlLabel>\n  <Textarea>\n    <TextareaInput placeholder='Once upon a time...'/>\n  </Textarea>\n  <FormControlHelper>\n    <FormControlHelperText>\n      Start your story\n    </FormControlHelperText>\n  </FormControlHelper>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Defining Accordion Props in React Native/TypeScript\nDESCRIPTION: This snippet defines the props for the Accordion component, including type, isCollapsible, defaultValue, value, onValueChange, and isDisabled.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype: \"single\" | \"multiple\"\nisCollapsible: boolean\ndefaultValue: string[]\nvalue: string[]\nonValueChange: function\nisDisabled: boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider with Tooltip in React Native\nDESCRIPTION: This example demonstrates a slider with a tooltip that displays the current value. It includes state management for the slider value and uses the Tooltip component for real-time feedback.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(40);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n     <HStack space=\"lg\">\n     <Text size=\"md\">$0</Text>\n        <Tooltip\n              placement=\"top\"\n              trigger={(triggerProps) => {\n                return (\n                      <Center w=\"$80\">\n                          <Slider\n                           step={5}\n                            sliderTrackHeight={4}\n                            value={sliderValue}\n                            maxValue={60}\n                            minValue={0}\n                            onChange={v => {\n                              handleChange(Math.floor(v));\n                            }}>\n                            <SliderTrack>\n                              <SliderFilledTrack />\n                            </SliderTrack>\n                            <SliderThumb {...triggerProps}/>\n                          </Slider>\n                      </Center>\n                )\n              }}\n            >\n            <TooltipContent>\n              <Text color=\"white\">{\"$\" + sliderValue}</Text>\n            </TooltipContent>\n          </Tooltip>\n    <Text size=\"md\">$60</Text>\n    </HStack>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering View Component with Text in React\nDESCRIPTION: This snippet demonstrates how to use the View component along with Heading and Text components to create a simple UI structure. It shows the basic usage and styling capabilities of the View component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/View/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View p=\"$4\">\n      <Heading>\n        A component library for the{\" \"}\n        <Heading color=\"$emerald400\">React Ecosystem</Heading>\n      </Heading>\n      <Text pt=\"$3\">\n        gluestack-ui is a simple, modular and accessible component library that\n        gives you building blocks to build you React applications.\n      </Text>\n    </View>\n```\n\n----------------------------------------\n\nTITLE: Implementing GluestackUIProvider with config in React\nDESCRIPTION: Example of how to import and use the createButton function, GluestackUIProvider component, and config from @gluestack-ui packages in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/config/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createButton, GluestackUIProvider } from '@gluestack-ui/themed';\nimport { config } from '@gluestack-ui/config';\n\nexport default fucntion App () {\n\n  return (\n    <GluestackUIProvider config={config}>\n    {/* your code goes here */}\n    </GluestackUIProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Card with Image Implementation\nDESCRIPTION: Advanced example of a Card component featuring an image, date, heading, and a link with an icon.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Card/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from \"@/components/ui/card\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Image } from \"@/components/ui/image\";\nimport { Link, LinkText } from \"@/components/ui/link\";\nimport { Text } from \"@/components/ui/text\";\nimport { Icon, ArrowRightIcon } from \"@/components/ui/icon\";\n\nfunction App(){\n    return (\n      <Card className=\"p-5 rounded-lg max-w-[360px] m-3\">\n        <Image\n        source={{\n          uri: 'https://gluestack.github.io/public-blog-video-assets/yoga.png',\n        }}\n        className=\"mb-6 h-[240px] w-full rounded-md aspect-[263/240]\"\n        alt=\"image\"\n      />\n      <Text\n        className=\"text-sm font-normal mb-2 text-typography-700\"\n      >\n        May 15, 2023\n      </Text>\n      <Heading size=\"md\" className=\"mb-4\">\n        The Power of Positive Thinking\n      </Heading>\n      <Link href=\"https://gluestack.io/\" isExternal>\n        <HStack className=\"items-center\">\n          <LinkText\n            size=\"sm\"\n            className=\"font-semibold text-info-600 no-underline\"\n          >\n            Read Blog\n          </LinkText>\n          <Icon\n            as={ArrowRightIcon}\n            size=\"sm\"\n            className=\"text-info-600 mt-0.5 ml-0.5\"\n          />\n        </HStack>\n      </Link>\n    </Card>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example Implementation\nDESCRIPTION: A full example showing how to use gluestack-style with a styled component in an Expo app.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/install-expo/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { styled, StyledProvider } from '@gluestack-style/react';\nimport { config } from './gluestack-style.config';\nimport { View } from 'react-native';\n\nconst Box = styled(View, {\n  bg: '$primary500',\n  h: '$6',\n  w: '$6',\n});\n\nconst App = () => {\n  return (\n    <StyledProvider config={config}>\n      <Box />\n    </StyledProvider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering SectionList Component in React Native\nDESCRIPTION: This code snippet demonstrates the basic implementation of the SectionList component without any additional customization. It renders a sectioned list with colored items and section headers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/SectionList/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Center h=\"$80\" w=\"100%\">\n      <SectionList\n        minWidth={300}\n        mb=\"$4\"\n        sections={data}\n        keyExtractor={(item, index) => item + index}\n        renderItem={({ item }) => (\n          <Center py=\"$4\" bg={item}>\n            <Text color=\"$black\">\n              {typeof item === 'string' ? item.slice(-3) : ''}\n            </Text>\n          </Center>\n        )}\n        renderSectionHeader={({ section: { title } }) => (\n          <Center>\n            <Heading fontSize=\"$xl\" mt=\"$8\" pb=\"$4\">\n              {title}\n            </Heading>\n          </Center>\n        )}\n      />\n    </Center>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Alert Component in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the Alert component with its subcomponents AlertIcon and AlertText.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert, AlertText, AlertIcon } from \"@/components/ui/alert\";\nimport { InfoIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Alert {...props}>\n          <AlertIcon as={InfoIcon} />\n          <AlertText>\n            Description of alert!\n          </AlertText>\n        </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reversed HStack Implementation\nDESCRIPTION: Example of HStack with reversed prop that reverses the order of horizontally stacked elements\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/HStack/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack space=\"md\" reversed>\n  <Box w='$20' h='$20' bg='$blue300' />\n  <Box w='$20' h='$20' bg='$blue400' />\n  <Box w='$20' h='$20' bg='$blue500' />\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Badge with Avatar Example\nDESCRIPTION: Complex example showing Badge component integration with Avatar, including user information and verification status.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"2xl\">\n  <HStack space=\"md\">\n    <Avatar>\n      <AvatarFallbackText>SS</AvatarFallbackText>\n      <AvatarImage\n        source={{\n          uri: 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60',\n        }}\n      />\n    </Avatar>\n    <VStack>\n    <HStack>\n      <Heading size=\"sm\" >Ronald Richards</Heading>\n      <Badge  size=\"sm\" variant=\"solid\"  action=\"success\" ml=\"$1\">\n          <BadgeText>Verified</BadgeText>\n          <BadgeIcon as={BadgeCheckIcon} ml=\"$1\"/>\n      </Badge>\n    </HStack>\n    <Text size=\"sm\" >Nursing Assistant</Text>\n    </VStack>\n  </HStack>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: FormControl Component Implementation Example\nDESCRIPTION: Example showing FormControl component with password validation functionality. Demonstrates error handling, helper text, and form submission.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n        const [isInvalid, setIsInvalid] = React.useState(false);\n        const [inputValue, setInputValue] = React.useState('12345');\n        const handleSubmit = () => {\n          if (inputValue.length < 6) {\n            setIsInvalid(true);\n          } else {\n            setIsInvalid(false);\n          }\n        };\n        return (\n          <VStack className=\"w-full max-w-[300px] rounded-md border border-background-200 p-4\">\n            <FormControl isInvalid={isInvalid} {...props}>\n              <FormControlLabel>\n                <FormControlLabelText>Password</FormControlLabelText>\n              </FormControlLabel>\n              <Input className=\"my-1\" size={props.size}>\n                <InputField\n                  type=\"password\"\n                  placeholder=\"password\"\n                  value={inputValue}\n                  onChangeText={(text) => setInputValue(text)}\n                />\n              </Input>\n              <FormControlHelper>\n                <FormControlHelperText>\n                  Must be atleast 6 characters.\n                </FormControlHelperText>\n              </FormControlHelper>\n              <FormControlError>\n                <FormControlErrorIcon as={AlertCircleIcon} />\n                <FormControlErrorText>\n                  Atleast 6 characters are required.\n                </FormControlErrorText>\n              </FormControlError>\n            </FormControl>\n            <Button className=\"w-fit self-end mt-4\" size=\"sm\" onPress={handleSubmit}>\n              <ButtonText>Submit</ButtonText>\n            </Button>\n          </VStack>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Component with Props in React\nDESCRIPTION: Illustrates how to use the Tooltip component with various props, including a trigger button and placement options.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Tooltip/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip\n  {...props}\n  trigger={(triggerProps) => {\n    return (\n      <Button h='$24' {...triggerProps}>\n        <ButtonText>Hover on me!</ButtonText>\n      </Button>\n    );\n  }}\n>\n  <TooltipContent>\n   <TooltipText>Tooltip</TooltipText>\n  </TooltipContent>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Alert with Heading Example in React Native\nDESCRIPTION: This example demonstrates an Alert component with a heading, custom icon, and additional text content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Alert/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert action='success'>\n  <AlertIcon as={CheckCircleIcon} size=\"xl\"  mr=\"$3\" />\n  <VStack space='xs'>\n    <AlertText fontWeight ='$bold'>\n      Congratulations!\n    </AlertText >\n    <AlertText >\n      Thank you for your submission. You will receive a confirmation email shortly.\n    </AlertText>\n  </VStack>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Basic HStack Component Usage in React Native\nDESCRIPTION: Example showing basic usage of HStack component with three colored boxes\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/HStack/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { HStack } from \"@/components/ui/hstack\";\n\nfunction Example() {\n  return (\n    <HStack {...props}>\n          <Box  className=\"h-20 w-20 bg-primary-300\" />\n          <Box  className=\"h-20 w-20 bg-primary-400\" />\n          <Box  className=\"h-20 w-20 bg-primary-500\" />\n        </HStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Implementation in React\nDESCRIPTION: Example of implementing a basic themed Popover component with header, body, footer and close button functionality. Includes state management for open/close behavior.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Popover/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  return (\n    <Popover\n      isOpen={isOpen}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      {...props}\n      trigger={(triggerProps) => {\n        return (\n          <Button\n            {...triggerProps}\n          >\n            <ButtonText>\n              Popover\n            </ButtonText>\n          </Button>\n        );\n      }}\n    >\n      <PopoverBackdrop/>\n      <PopoverContent>\n        <PopoverHeader>\n          <Heading size='lg'>Welcome!</Heading>\n          <PopoverCloseButton>\n            <Icon as={CloseIcon}/>\n          </PopoverCloseButton>\n        </PopoverHeader>\n        <PopoverBody>\n          <Text size='sm'>\n            Join the product tour and start creating your own checklist. Are you ready to jump in?\n          </Text>\n        </PopoverBody>\n        <PopoverFooter>\n          <Text size='xs' flex={1}>\n            Step 2 of 3\n          </Text>\n          <ButtonGroup space='md'>\n            <Button variant=\"outline\" action='secondary' onPress={handleClose}>\n              <ButtonText>Back</ButtonText>\n            </Button>\n            <Button onPress={handleClose}>\n              <ButtonText>Next</ButtonText>\n            </Button>\n          </ButtonGroup>\n        </PopoverFooter>\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Table Component Structure in React Native\nDESCRIPTION: Example showing the structure and hierarchy of Table components, demonstrating how to properly nest Table elements like header, body, rows, and data cells.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Table/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Table>\n    <TableHeader>\n      <TableRow>\n        <TableHead />\n      </TableRow>\n    </TableHeader>\n    <TableBody>\n      <TableRow>\n        <TableData />\n      </TableRow>\n    </TableBody>\n    <TableFooter>\n      <TableRow>\n        <TableData />\n      </TableRow>\n    </TableFooter>\n    <TableCaption />\n  </Table>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Button in React Native\nDESCRIPTION: This example shows how to create a circular icon button using the Button and ButtonIcon components. It uses an EditIcon from the lucide-react-native library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Button borderRadius='$full' size='lg' p='$3.5' bg='$indigo600' borderColor='$indigo600' >\n  {/* EditIcon is imported from 'lucide-react-native' */}\n  <ButtonIcon as={EditIcon}/>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardAvoidingView with Actionsheet in React Native\nDESCRIPTION: This code snippet demonstrates how to use the KeyboardAvoidingView component with an Actionsheet in a React Native application. It adjusts the view based on the keyboard and includes a form within the Actionsheet.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/KeyboardAvoidingView/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(!showActionsheet);\n    return (\n    <KeyboardAvoidingView\n    behavior={Platform.OS === 'ios' ? 'height' : 'height'}\n    style={{ flex: 1,zIndex:999 }}>\n    <Center h=\"100%\" zIndex={999}>\n    <Button onPress={handleClose}>\n    <Button.Text>Open</Button.Text>\n    </Button>\n    <Actionsheet\n          isOpen={showActionsheet}\n          onClose={handleClose} zIndex={999}\n        >\n          <ActionsheetBackdrop />\n          <ActionsheetContent maxHeight=\"75%\" zIndex={999}>\n            <ActionsheetDragIndicatorWrapper>\n              <ActionsheetDragIndicator />\n            </ActionsheetDragIndicatorWrapper>\n            <VStack w=\"$full\" p={20}>\n              <HStack justifyContent=\"center\" alignItems=\"center\" space=\"md\">\n                <Box\n                  w={50}\n                  h=\"$full\"\n                  px=\"$2\"\n                  borderWidth={1}\n                  borderStyle=\"solid\"\n                  borderColor=\"$borderLight300\"\n                  rounded=\"$sm\"\n                >\n                  <Image\n                    source={{ uri: 'https://i.imgur.com/UwTLr26.png' }}\n                    flex={1}\n                    resizeMode=\"contain\"\n                  />\n                </Box>\n                <VStack flex={1}>\n                  <Text fontWeight=\"$bold\">Mastercard</Text>\n                  <Text>Card ending in 2345</Text>\n                </VStack>\n              </HStack>\n              <FormControl mt={36}>\n                <FormControlLabel>\n                  <FormControlLabelText>\n                    Confirm security code\n                  </FormControlLabelText>\n                </FormControlLabel>\n                <Input w=\"$full\">\n                  <InputSlot>\n                   <InputIcon as={InputIcon} ml=\"$2\" />\n                  </InputSlot>\n                  <InputField placeholder=\"CVC/CVV\" />\n                </Input>\n                <Button onPress={handleClose} mt={20}>\n                  <ButtonText>Pay $1000</ButtonText>\n                </Button>\n              </FormControl>\n            </VStack>\n          </ActionsheetContent>\n        </Actionsheet>\n    </Center>\n    </KeyboardAvoidingView>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Progress Bar\nDESCRIPTION: Example of a customized Progress component showing storage usage with custom styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"lg\">\n  <Heading>Internal Storage</Heading>\n  <Progress value={46} w={410} h={8} bg=\"$lime100\">\n    <ProgressFilledTrack h={8} bg=\"$lime500\" />\n  </Progress>\n  <Text size=\"md\">14GB</Text>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons with Icons in React\nDESCRIPTION: This example shows how to create buttons with icons on either the left or right side. It demonstrates different button variants and icon placements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText, ButtonIcon } from \"@/components/ui/button\";\nimport { AddIcon, InfoIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Box>\n          <Button>\n          <ButtonIcon as={InfoIcon} className='mr-2'/>\n            <ButtonText>Left Icon</ButtonText>\n          </Button>\n          <Button variant='solid' className='mt-2'>\n          <ButtonText>Right Icon</ButtonText>\n            <ButtonIcon as={AddIcon} className='ml-2'/>\n          </Button>\n        </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Color Mode and Media Query Styling\nDESCRIPTION: Shows implementation of dark/light mode styling and responsive design using media queries.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/Styled/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledButton = styled(Pressable, {\n  'bg': '$primary600',\n  'px': '$6',\n  'py': '$4',\n  '@lg': {\n    _dark: {\n      bg: '$red500',\n    },\n    _light: {\n      bg: '$blue500',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Switch Component in Gluestack UI\nDESCRIPTION: This snippet demonstrates how to import the necessary components and create a Switch component using the createSwitch function. It also shows basic usage of the Switch component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from 'components/core/switch/styled-components';\n\n// import the createSwitch function\nimport { createSwitch } from '@gluestack-ui/switch';\n\n// Understanding the API\nconst Switch = createSwitch({\n  Root,\n});\n\n// Using the switch component\nexport default () => <Switch />;\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Component Structure in React Native\nDESCRIPTION: This snippet demonstrates the basic structure of a Menu component with MenuItem, MenuItemLabel, and MenuSeparator in React Native.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Menu>\n    <MenuItem>\n      <MenuItemLabel />\n    </MenuItem>\n    <MenuSeparator />\n  </Menu>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Built-in gluestack Icons in JSX\nDESCRIPTION: This code snippet demonstrates how to render all the built-in icons provided by gluestack-ui. It uses the Icon component with the 'as' prop to specify different icon types.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Icon/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n  <HStack w=\"70%\" flexWrap= 'wrap'>\n        <Icon as={AddIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ArrowLeftIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ArrowRightIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ArrowUpIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ArrowDownIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ChevronsLeftIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ChevronsRightIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ChevronsUpDownIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={AtSignIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={PaperclipIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={BellIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={CalendarDaysIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={MessageCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={CheckIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ChevronDownIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ChevronUpIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ChevronLeftIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ChevronRightIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={CloseIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={CopyIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={TrashIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={DownloadIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={GripVerticalIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={EditIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={MailIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ExternalLinkIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={MenuIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={InfoIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={LinkIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={LockIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={RemoveIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={MoonIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={SlashIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={CheckCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={PhoneIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={HelpCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={RepeatIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={Repeat1Icon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={SearchIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={SettingsIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={LoaderIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={StarIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={SunIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ClockIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={UnlockIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={EyeIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={EyeOffIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={AlertCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={CloseCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ShareIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={CircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={FavouriteIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={GlobeIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={ThreeDotsIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n        <Icon as={PlayIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n  </HStack>\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Component Implementation\nDESCRIPTION: Basic implementation of the Progress component showing a 40% complete progress bar with configurable size.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Progress value={40} w={300} {...props} >\n  <ProgressFilledTrack />\n</Progress>\n```\n\n----------------------------------------\n\nTITLE: Implementing RGBA Support with Property Resolver\nDESCRIPTION: Example showing how to implement RGBA color support by adding a property resolver for backgroundColor that handles alpha values. Includes a hexToRgba conversion utility function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/PropertyResolver/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction hexToRgba(hex, alpha) {\n  let r, g, b;\n  if (hex.length === 4) {\n    r = '0x' + hex[1] + hex[1];\n    g = '0x' + hex[2] + hex[2];\n    b = '0x' + hex[3] + hex[3];\n  } else if (hex.length === 7) {\n    r = '0x' + hex[1] + hex[2];\n    g = '0x' + hex[3] + hex[4];\n    b = '0x' + hex[5] + hex[6];\n  }\n  return 'rgba(' + +r + ',' + +g + ',' + +b + ',' + alpha.toString() + ')';\n}\n\nconst MyButton = styled(\n  Pressable,\n  {\n    bg: '$red500:alpha-50',\n  },\n  {\n    descendantStyle: ['_text'],\n  },\n  {\n    propertyResolver: {\n      backgroundColor: (rawValue, resolver) => {\n        if (rawValue.includes(':alpha-')) {\n          let opacity = resolver(rawValue.split(':alpha-')[1], 'opacity');\n          let value = rawValue.split(':alpha-')[0];\n          return hexToRgba(resolver(value), opacity);\n        } else {\n          return resolver(rawValue);\n        }\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Component in React Native Project\nDESCRIPTION: This code snippet shows how to import the Alert component and its subcomponents in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert, AlertIcon, AlertText } from '@/components/ui/alert';\n```\n\n----------------------------------------\n\nTITLE: Creating Rounded Corner Accordion in React\nDESCRIPTION: This example shows how to create an Accordion component with rounded corners using the borderRadius prop. It also demonstrates the use of custom icons for the accordion trigger and different styling for expanded and collapsed states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    return (\n          <Accordion m=\"$5\" width=\"80%\" maxWidth={640} shadowColor=\"transparent\">\n      <AccordionItem value=\"item-1\" borderRadius=\"$lg\">\n        <AccordionHeader>\n          <AccordionTrigger sx={{\n              ':focusVisible': {\n                borderRadius: '$lg',\n              },\n            }}>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} mr=\"$3\" />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} mr=\"$3\" />\n                  )}\n                  <AccordionTitleText>\n                    How do I place an order?\n                  </AccordionTitleText>\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent ml=\"$9\">\n          <AccordionContentText>\n            To place an order, simply select the products you want, proceed to\n            checkout, provide shipping and payment information, and finalize\n            your purchase.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-2\" mt=\"$5\" borderRadius=\"$lg\">\n        <AccordionHeader>\n          <AccordionTrigger sx={{\n              ':focusVisible': {\n                borderRadius: '$lg',\n              },\n            }}>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} mr=\"$3\" />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} mr=\"$3\" />\n                  )}\n                  <AccordionTitleText>\n                   What payment methods do you accept?\n                  </AccordionTitleText>\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent ml=\"$9\">\n          <AccordionContentText>\n            We accept all major credit cards, including Visa, Mastercard, and\n            American Express. We also support payments through PayPal.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Icon in React Native\nDESCRIPTION: This example shows how to create a tooltip that appears when a user interacts with an icon inside an avatar. The tooltip displays a \"New message\" notification with command icons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n          return (\n            <Box h=\"$96\" justifyContent=\"center\">\n              <Tooltip\n                  placement=\"top\"\n                  trigger={(triggerProps) => {\n                    return (\n                    <Avatar size=\"md\" {...triggerProps} bg=\"$indigo600\">\n                      <Icon as={Edit} color=\"$white\" size=\"sm\" />\n                    </Avatar>\n                    )\n                  }}\n              >\n                <TooltipContent\n                bg=\"$white\"\n                $dark-bg=\"$backgroundDark900\"\n                >\n                  <Box  p=\"$2.5\" boderRadius=\"$2\">\n                    <Text size=\"sm\">New message</Text>\n                    <HStack space=\"xs\"  p=\"$1\" ml=\"$3\">\n                          <Avatar size=\"xs\" bg=\"$trueGray500\" rounded=\"$sm\">\n                              <Icon as={Command} color=\"$white\"/>\n                          </Avatar>\n                          <Avatar size=\"xs\"  bg=\"$trueGray500\" rounded=\"$sm\">\n                            <AvatarFallbackText>N</AvatarFallbackText>\n                          </Avatar>\n                    </HStack>\n                  </Box>\n                </TooltipContent>\n              </Tooltip>\n            </Box>\n        );\n        }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Text Component in gluestack-ui\nDESCRIPTION: This example demonstrates the basic structure and usage of the Text component in a React component. It shows the simplest way to implement the Text component in your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Typography/Text/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Text />;\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Color Scheme in GlueStack UI - JSX\nDESCRIPTION: Implementation of Switch components with custom color schemes for both light and dark modes. Uses VStack for vertical layout and includes styling for different states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Switch/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"md\">\n    <Switch sx={{\n  _light: {\n    props: {\n      trackColor: {\n        false: '$backgroundLight300',\n        true: '$indigo600'\n      },\n    },\n  },\n  _dark: {\n    props: {\n      trackColor: {\n        false: '$backgroundDark700',\n        true: '$indigo600'\n      },\n    },\n  },\n}}/>\n    <Switch\n    sx={{\n  _light: {\n    props: {\n      trackColor: {\n        false: '$backgroundLight300',\n        true: '$emerald600'\n      },\n    },\n  },\n  _dark: {\n    props: {\n      trackColor: {\n        false: '$backgroundDark700',\n        true: '$emerald600'\n      },\n    },\n  },\n}}/>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Menu Component in React (JSX)\nDESCRIPTION: This snippet demonstrates how to import the necessary components, create a Menu using the createMenu function, and use the Menu component in a React application. It includes importing styled components, creating the Menu, and an example of using the component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Menu/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Item,\n  Label,\n  Backdrop,\n} from '../components/core/menu/styled-components';\n\n// import the createMenu function\nimport { createMenu } from '@gluestack-ui/menu';\n\n// Understanding the API\nconst Menu = createMenu({\n  Root,\n  Item,\n  Label,\n  Backdrop,\n});\n\n// Using the menu component\nexport default () => (\n  <Menu>\n    <MenuItem>\n      <MenuItemLabel />\n    </MenuItem>\n  </Menu>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Group with Badges in gluestack-ui\nDESCRIPTION: Creates a group of avatars with status badges. Each avatar displays a user image with a badge indicator. This implementation uses AvatarFallbackText as a fallback for when images fail to load.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<AvatarGroup>\n  <Avatar size=\"md\">\n    <AvatarFallbackText>John Doe</AvatarFallbackText>\n    <AvatarImage\n      source={{\n        uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n      }}\n    />\n    <AvatarBadge \n    $dark-borderColor=\"$black\"/>\n  </Avatar>\n  <Avatar size=\"md\">\n    <AvatarFallbackText>John Doe</AvatarFallbackText>\n    <AvatarImage\n      source={{\n        uri: 'https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n      }}\n    />\n    <AvatarBadge $dark-borderColor=\"$black\"/>\n  </Avatar>\n  <Avatar size=\"md\">\n    <AvatarFallbackText>John Doe</AvatarFallbackText>\n    <AvatarImage\n      source={{\n        uri: 'https://images.unsplash.com/photo-1614289371518-722f2615943d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n      }}\n    />\n    <AvatarBadge $dark-borderColor=\"$black\"/>\n  </Avatar>\n  <Avatar size=\"md\">\n    <AvatarFallbackText>John Doe</AvatarFallbackText>\n    <AvatarImage\n      source={{\n        uri: 'https://images.unsplash.com/photo-1607746882042-944635dfe10e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n      }}\n    />\n    <AvatarBadge \n    $dark-borderColor=\"$black\"/>\n  </Avatar>\n</AvatarGroup>\n```\n\n----------------------------------------\n\nTITLE: Integrating Badge with Menu Items in gluestack-ui\nDESCRIPTION: This example shows how to add a Badge component to a Menu item, specifically highlighting the 'Theme' menu option with a 'New' badge. The menu includes several items, each with an icon and text, and demonstrates proper Badge placement within the Menu UI hierarchy.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu\n  placement=\"top\"\n    trigger={({ ...triggerProps }) => {\n      return (\n        <Button {...triggerProps}>\n          <ButtonText>Menu</ButtonText>\n        </Button>\n      );\n    }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={GlobeIcon} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Community\n        </Text>\n      </HStack>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={PuzzleIcon} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Plugins\n        </Text>\n      </HStack>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={PaintBucket} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Theme\n        </Text>\n         <Badge bg=\"$backgroundLight600\">\n           <BadgeText color=\"$textLight50\">New</BadgeText>\n                         </Badge>\n      </HStack>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={SettingsIcon} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Settings\n        </Text>\n      </HStack>\n    </MenuItem>\n    <MenuItem key=\"Add account\" textValue=\"Add account\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={AddIcon} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Add account\n        </Text>\n      </HStack>\n    </MenuItem>\n  </Menu>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Table with Caption in React\nDESCRIPTION: This snippet demonstrates how to create a Table component with a caption in React. It uses custom Table components to structure the data and includes a TableCaption for additional context.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Table/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Table, TableHeader, TableBody, TableHead, TableRow, TableData, TableCaption } from \"@/components/ui/table\";\n\nfunction App(){\n    return (\n        <Box className=\"rounded-lg overflow-hidden w-full\">\n      <Table className=\"w-full\">\n        <TableHeader>\n          <TableRow>\n            <TableHead>Name</TableHead>\n            <TableHead>Email Address</TableHead>\n            <TableHead>Phone Number</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            <TableData>Rajesh Kumar</TableData>\n            <TableData fontWeight=\"$normal\">rajesh@example.com</TableData>\n            <TableData fontWeight=\"$normal\">1234567890</TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>Priya Sharma</TableData>\n            <TableData fontWeight=\"$normal\">priya@example.com</TableData>\n            <TableData fontWeight=\"$normal\">1234567890</TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>Ravi Patel</TableData>\n            <TableData fontWeight=\"$normal\">ravi@example.com</TableData>\n            <TableData fontWeight=\"$normal\">1234567890</TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>Ananya Gupta</TableData>\n            <TableData fontWeight=\"$normal\">ananya@example.com</TableData>\n            <TableData fontWeight=\"$normal\">1234567890</TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>Arjun Singh</TableData>\n            <TableData fontWeight=\"$normal\">arjun@example.com</TableData>\n            <TableData fontWeight=\"$normal\">1234567890</TableData>\n          </TableRow>\n          <TableRow>\n            <TableData>Nisha Verma</TableData>\n            <TableData fontWeight=\"$normal\">nisha@example.com</TableData>\n            <TableData fontWeight=\"$normal\">1234567890</TableData>\n          </TableRow>\n        </TableBody>\n        <TableCaption fontWeight=\"$normal\">\n          Showing recent membership details\n        </TableCaption>\n      </Table>\n    </Box>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Reversed VStack in React Native\nDESCRIPTION: This example demonstrates how to use the VStack component with different spacing and background colors for its child Box components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/VStack/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"md\">\n  <Box w='$20' h='$20' bg='$primary200' />\n  <Box w='$20' h='$20' bg='$primary400' />\n  <Box w='$20' h='$20' bg='$primary600' />\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Input Component in React\nDESCRIPTION: This snippet shows how to import and use the Input component in a React project, including the InputField and InputSlot subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Input } from '@/components/ui/input';\n\nexport default () => (\n  <Input>\n    <InputField />\n    <InputSlot>\n      <InputIcon>{/* Some Icon Component */}</InputIcon>\n    </InputSlot>\n  </Input>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the Image component within a CodePreview block, including props and source configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Image/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n{...props}\n  source={{\n    uri: 'https://images.unsplash.com/photo-1472214103451-9374bd1c798e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Heading in React Native\nDESCRIPTION: Code example showing how to create a tooltip with heading and text inside an AvatarGroup. The tooltip appears when hovering over an avatar marked with '+3'.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Tooltip/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n        const avatars = [\n          { src: 'https://example.com.jpg', alt: 'Sandeep Srivastva' , color:'$emerald600' },\n          { src: 'https://example.com.jpg', alt: 'Arjun Kapoor', color:'$cyan600' },\n          { src: 'https://example.com.jpg', alt: 'Ritik Sharma ', color:'$indigo600' },\n        ];\n          return (\n            <Box h=\"$96\" justifyContent=\"center\">\n              <AvatarGroup flexDirection='row'>\n                <Tooltip\n                  placement={\"top\"}\n                  trigger={(triggerProps) => {\n                    return (\n                      <Avatar\n                        size=\"lg\"\n                        color=\"$white\"\n                        borderColor=\"$white\"\n                        borderWidth=\"$2\"\n                        $dark-borderColor=\"$black\"\n                        {...triggerProps}\n                      >\n                        <AvatarFallbackText>+ 3</AvatarFallbackText>\n                      </Avatar>\n                    )\n                  }}\n                >\n                  <TooltipContent\n                    p=\"$5\"\n                    maxWidth='$72'\n                    bg=\"white\"\n                    $dark-bg=\"$backgroundDark900\"\n                  >\n                    <VStack boderRadius=\"$2\" space='md'>\n                      <Heading size=\"sm\" lineHeight='$md'>View all members of this channel</Heading>\n                      <Center>\n                        <Text fontSize=\"$sm\" lineHeight='$md'>Includes John, Sarah, Mike, Emily</Text>\n                        <Text fontSize=\"$sm\" lineHeight='$md'>and David</Text>\n                      </Center>\n                    </VStack>\n                  </TooltipContent>\n                </Tooltip>\n                {avatars.map((avatar, index) => {\n                  return (\n                    <Avatar key={index} size=\"lg\" borderColor=\"$white\" borderWidth=\"$2\" bgColor={avatar.color} $dark-bordeColor=\"$black\">\n                      <AvatarFallbackText>{avatar.alt}</AvatarFallbackText>\n                    </Avatar>\n                  );\n                })}\n              </AvatarGroup>\n            </Box>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Gluestack UI Complex Button Styling\nDESCRIPTION: Example of complex styling in gluestack-ui using state-based props for hover and active states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  size=\"lg\"\n  mb='$4'\n  bg='$green500'\n  $hover-bg='$green600'\n  $active-bg='$green700'\n  $_text-hover-color='$white'\n>\n  <ButtonText>Button</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of gluestack-ui Grid Component\nDESCRIPTION: This snippet shows the basic usage of the Grid and GridItem components from gluestack-ui, demonstrating how to import and implement them in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Grid/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Grid, GridItem } from '@/components/ui/grid';\n\nexport default () => (\n<Grid >\n<GridItem />\n</Grid>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Spinner with Label in React using gluestack-ui\nDESCRIPTION: Example showing how to add a label alongside the Spinner component using HStack for horizontal layout and Text component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack space=\"sm\" >\n  <Spinner/>\n  <Text size=\"md\">Please Wait</Text>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Applying Platform-Specific Styling with gluestack-ui\nDESCRIPTION: This code demonstrates how to apply platform-specific styles to a Button component using the $ios, $android, and $web prefixes. The button will appear with different background colors depending on the platform: red on iOS, yellow on Android, and green on web.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/platform-specific/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box justifyContent=\"center\" alignItems=\"center\" h=\"100%\">\n  <Box alignItems=\"center\">\n    <Button\n      $ios-bg=\"$red500\"\n      $web-bg=\"$green500\"\n      $android-bg=\"$yellow500\"\n      >\n      <ButtonText>Button</ButtonText>\n    </Button>\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Popover Component in React\nDESCRIPTION: This code snippet demonstrates how to create a basic Popover component with header, body, and footer sections. It includes state management for opening and closing the popover.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  return (\n    <Popover\n      isOpen={isOpen}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      {...props}\n      trigger={(triggerProps) => {\n        return (\n          <Button\n            {...triggerProps}\n          >\n            <ButtonText>\n              Popover\n            </ButtonText>\n          </Button>\n        );\n      }}\n    >\n      <PopoverBackdrop/>\n      <PopoverContent>\n        <PopoverHeader>\n          <Heading size='lg'>Welcome!</Heading>\n          <PopoverCloseButton>\n            <Icon as={CloseIcon}/>\n          </PopoverCloseButton>\n        </PopoverHeader>\n        <PopoverBody>\n          <Text size='sm'>\n            Join the product tour and start creating your own checklist. Are you ready to jump in?\n          </Text>\n        </PopoverBody>\n        <PopoverFooter>\n          <Text size='xs' flex={1}>\n            Step 2 of 3\n          </Text>\n          <ButtonGroup space='md'>\n            <Button variant=\"outline\" action='secondary' onPress={handleClose}>\n              <ButtonText>Back</ButtonText>\n            </Button>\n            <Button onPress={handleClose}>\n              <ButtonText>Next</ButtonText>\n            </Button>\n          </ButtonGroup>\n        </PopoverFooter>\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider with Orientation in React\nDESCRIPTION: This snippet demonstrates the use of Divider components with both horizontal and vertical orientations. It creates a structured layout for article previews, using Dividers to separate content elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Divider } from \"@/components/ui/divider\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <VStack\n          space='lg'\n          className=\"p-12 border border-outline-300 rounded-lg mx-5\"\n          >\n          <Box>\n            <Text size='xs'\n            className=\"font-bold text-blue-600\">\n              HEALTH\n            </Text>\n            <Heading>\n              Benefits of Oranges\n            </Heading>\n            <Text size='sm' className=\"mt-1.5\">\n              Oranges are a great source of vitamin C, which is essential for a healthy immune system.\n            </Text>\n            <HStack space='sm'\n            className=\"mt-3 h-5\"\n            >\n              <Text size='xs'>\n                Wade Warrem\n              </Text>\n              <Divider orientation='vertical' className=\"bg-gray-300\"/>\n              <Text size='xs'>\n                6th Oct, 2019\n              </Text>\n              <Divider orientation='vertical' className=\"bg-gray-300\"/>\n              <Text size='xs'>\n                5 mins read\n              </Text>\n            </HStack>\n          </Box>\n          <Divider\n            className=\"bg-gray-300\"\n            />\n          <Box>\n            <Text size='xs' className=\"font-bold text-blue-600\">\n              TECHNOLOGY\n            </Text>\n            <Heading>\n              How AI can benefit your business\n            </Heading>\n            <Text size='sm' className=\"mt-1.5\">\n              AI can automate tasks and processes, allowing for increasing efficiency and productivity.\n            </Text>\n            <HStack space='sm'\n            className=\"mt-3 h-5\"\n            >\n              <Text size='xs'>\n                Wade Warrem\n              </Text>\n              <Divider orientation='vertical' className=\"bg-gray-300\"/>\n              <Text size='xs'>\n                6th Oct, 2019\n              </Text>\n              <Divider orientation='vertical' className=\"bg-gray-300\"/>\n              <Text size='xs'>\n                5 mins read\n              </Text>\n            </HStack>\n          </Box>\n        </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Actionsheet with FlatList\nDESCRIPTION: Creates an Actionsheet component with a simple FlatList implementation. Demonstrates handling of static data with basic list rendering and includes item callbacks for interaction handling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(!showActionsheet);\n    const DATA = [\n      {\n        id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\n        title: 'First Item'\n      },\n      {\n        id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',\n        title: 'Second Item'\n      },\n      {\n        id: '58694a0f-3da1-471f-bd96-145571e29d72',\n        title: 'Third Item'\n      },\n    ];\n    const Item = React.useCallback(\n      ({ title }) => (\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>{title}</ActionsheetItemText>\n        </ActionsheetItem>\n      ),\n      [handleClose]\n    );\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent>\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n          <ActionsheetFlatList\n            data={DATA}\n            renderItem={({ item }) => <Item title={item.title} />}\n            keyExtractor={(item) => item.id}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of RefreshControl Component in JSX\nDESCRIPTION: This code snippet demonstrates the basic structure and usage of the RefreshControl component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/RefreshControl/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <RefreshControl />;\n```\n\n----------------------------------------\n\nTITLE: Creating Dividers With and Without Inset in React\nDESCRIPTION: This example shows how to use Divider components with and without inset. It creates two horizontal stacks of buttons separated by vertical dividers, demonstrating different visual hierarchies.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Divider } from \"@/components/ui/divider\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <VStack space=\"2xl\">\n      <HStack className=\"px-3 h-8 rounded border border-solid border-outline-300\">\n        <Button variant=\"link\" size=\"xs\">\n          <ButtonText>Github</ButtonText>\n        </Button>\n        <Divider orientation=\"vertical\" className=\"mx-2.5\" />\n        <Button variant=\"link\" size=\"xs\">\n          <ButtonText>Twitter</ButtonText>\n        </Button>\n        <Divider orientation=\"vertical\" className=\"mx-2.5\" />\n        <Button variant=\"link\" size=\"xs\">\n          <ButtonText>Discord</ButtonText>\n        </Button>\n      </HStack>\n      <HStack className=\"px-3 h-8 rounded border border-solid border-outline-300 items-center\">\n        <Button variant=\"link\" size=\"xs\">\n          <ButtonText>Github</ButtonText>\n        </Button>\n        <Divider orientation=\"vertical\" className=\"h-[50%] mx-2.5\" />\n        <Button variant=\"link\" size=\"xs\">\n          <ButtonText>Twitter</ButtonText>\n        </Button>\n        <Divider\n          orientation=\"vertical\"\n          className=\"h-[50%]\n      mx-2.5\"\n        />\n        <Button variant=\"link\" size=\"xs\">\n          <ButtonText>Discord</ButtonText>\n        </Button>\n      </HStack>\n    </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pressable Component Structure in JSX\nDESCRIPTION: Demonstrates the basic structure of using the Pressable component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Pressable/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Pressable />;\n```\n\n----------------------------------------\n\nTITLE: Pressable State-Based Styling\nDESCRIPTION: Example demonstrating how to change child elements based on Pressable component's pressed state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Pressable p=\"$16\" bg=\"$primary500\"  $hover-bg=\"$primary400\">\n   {({ pressed }) => (\n        <Text color={pressed ? '$primary200' : '$primary0'}>PRESSABLE</Text>\n      )}\n</Pressable>\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Badge with Button in gluestack-ui\nDESCRIPTION: This code demonstrates how to create a notification-style Badge component that appears overlaid on a Button. The Badge displays a count of '2' and is positioned to appear in the top-right corner of the Button, commonly used for notification indicators.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box alignItems=\"center\">\n<VStack>\n  <Badge  h={22} w={22} bg=\"$red600\" borderRadius=\"$full\"  mb={-14} mr={-14} zIndex={1} variant=\"solid\" alignSelf=\"flex-end\"  >\n   <BadgeText color=\"$white\">2</BadgeText>\n  </Badge>\n  <Button>\n   <ButtonText>\n    Notifications\n  </ButtonText>\n  </Button>\n</VStack>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: State-Based Styling Implementation\nDESCRIPTION: Example of implementing state-based styling with hover and active states using React hooks.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/Styled/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledButton = styled(Button, {\n  'bg': '$primary600',\n  'px': '$6',\n  'py': '$4',\n  ':hover': {\n    bg: '$blue300',\n  },\n});\n\nfunction MyComponent() {\n  const [isHovered, setIsHovered] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n  return (\n    <StyledButton\n      states={{ hover: isHovered, active: isActive }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onMouseDown={() => setIsActive(true)}\n      onMouseUp={() => setIsActive(false)}\n    >\n      Click Me\n    </StyledButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Component Implementation\nDESCRIPTION: Detailed example of customizing and implementing a Link component, including importing styled components and using the createLink API.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/link/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from '../components/core/link/styled-components';\n\n// import the createLink function\nimport { createLink } from '@gluestack-ui/link';\n\n// Understanding the API\nconst Link = createLink({\n  Root,\n});\n\n// Using the link component\nexport default () => (\n  <Link href=\"\">\n    <LinkText />\n  </Link>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Divider Variants in React Native\nDESCRIPTION: This example demonstrates different variants of the Divider component, including vertical and horizontal orientations with custom styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack\n  space=\"md\"\n  justifyContent='center'\n  alignItems='center'\n>\n  <HStack\n    h='$10'\n    justifyContent='center'\n    alignItems='center'\n  >\n    <Text>Simple</Text>\n    <Divider\n      orientation=\"vertical\"\n      mx='$2.5'\n      bg='$emerald500'\n      h={15}\n      $dark-bg=\"$emerald400\"\n    />\n    <Text>Easy</Text>\n    <Divider\n      orientation=\"vertical\"\n      mx='$2.5'\n      bg='$indigo500'\n      h={15}\n      $dark-bg=\"$indigo400\"\n    />\n    <Text>Beautiful</Text>\n  </HStack>\n  <VStack\n    w={100}\n    justifyContent='center'\n    alignItems='center'\n  >\n    <Text>Firefox</Text>\n    <Divider\n      w={55}\n      variant=\"horizontal\"\n      bg=\"$red500\"\n      $dark-bg=\"$red400\"\n    />\n    <Text>Chrome</Text>\n  </VStack>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Icon Component\nDESCRIPTION: Steps for manually installing the Icon component, including npm installation and code setup.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/icon\n```\n\n----------------------------------------\n\nTITLE: Rendering Center Component with Text in React Native\nDESCRIPTION: This snippet demonstrates how to use the Center component to center-align text content within a colored container in React Native.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Center/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from \"@/components/ui/center\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Center className=\"bg-primary-500 h-[200px] w-[300px]\">\n  <Text className=\"text-typography-0 font-bold\">\n    This is the center.\n  </Text>\n</Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rounded Corner Accordion with Plus/Minus Icons\nDESCRIPTION: Implementation of an accordion with rounded corners using borderRadius prop. Uses Plus/Minus icons for expand/collapse indicators and demonstrates custom spacing and styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion, AccordionItem, AccordionHeader, AccordionTrigger, AccordionTitleText, AccordionContentText, AccordionIcon, AccordionContent } from \"@/components/ui/accordion\";\nimport { MinusIcon, PlusIcon } from \"lucide-react-native\";\n\nfunction App(){\n    return (\n          <Accordion className=\"m-5 w-[80%] max-w-[640px] bg-transparent\">\n      <AccordionItem value=\"item-1\" className=\"rounded-lg\">\n        <AccordionHeader>\n          <AccordionTrigger\n            className=\"focus:web:rounded-lg\"\n            >\n            {({ isExpanded }) => {\n              return (\n                <>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} className=\"mr-3\"/>\n                  ) : (\n                    <AccordionIcon as={PlusIcon} className=\"mr-3\"/>\n                  )}\n                  <AccordionTitleText>\n                    How do I place an order?\n                  </AccordionTitleText>\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent className=\"ml-9\">\n          <AccordionContentText>\n            To place an order, simply select the products you want, proceed to\n            checkout, provide shipping and payment information, and finalize\n            your purchase.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-2\" className=\"mt-5 rounded-lg\">\n        <AccordionHeader>\n          <AccordionTrigger className=\"focus:web:rounded-lg\">\n            {({ isExpanded }) => {\n              return (\n                <>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} className=\"mr-3\"/>\n                  ) : (\n                    <AccordionIcon as={PlusIcon} className=\"mr-3\"/>\n                  )}\n                  <AccordionTitleText>\n                   What payment methods do you accept?\n                  </AccordionTitleText>\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent className=\"ml-9\">\n          <AccordionContentText>\n            We accept all major credit cards, including Visa, Mastercard, and\n            American Express. We also support payments through PayPal.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Actionsheet Usage Example\nDESCRIPTION: Basic example showing the structure of an Actionsheet component with its subcomponents\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Actionsheet>\n    <ActionsheetBackdrop />\n    <ActionsheetContent>\n      <ActionsheetDragIndicatorWrapper>\n        <ActionsheetDragIndicator />\n      </ActionsheetDragIndicatorWrapper>\n      <ActionsheetItem>\n        <ActionsheetItemText />\n      </ActionsheetItem>\n    </ActionsheetContent>\n  </Actionsheet>\n);\n```\n\n----------------------------------------\n\nTITLE: Progress Component Import and Basic Usage\nDESCRIPTION: Example showing how to import and implement a basic Progress component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress, ProgressFilledTrack } from '@/components/ui/progress';\n\nexport default () => (\n  <Progress>\n    <ProgressFilledTrack />\n  </Progress>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Custom Styled Alias\nDESCRIPTION: Advanced babel configuration that specifies a custom name for the styled function using the styledAlias option, allowing the plugin to recognize styled function calls with a different name.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/production-optimizations/babel-plugin/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\n\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        gluestackStyleResolver,\n        {\n          styledAlias: 'myStyled', // Specify your styled aliases function name if different\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboard App Example Components in React\nDESCRIPTION: This snippet imports necessary components from Storybook and custom components for demonstrating a responsive dashboard app built with gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/dashboard-app/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\nimport Responsiveness from '../../extra-components/nativewind/Responsive';\nimport { dashboard } from '../../extra-components/nativewind/appConfig';\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Switch Component\nDESCRIPTION: Simple implementation of the Switch component as a default export.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Switch />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox Component\nDESCRIPTION: Basic example showing how to create a Checkbox component by importing styled components and using the createCheckbox function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/checkbox/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, Indicator, Icon, Label, Group } from './styled-components';\nimport { createCheckbox } from '@gluestack-ui/checkbox';\n\nexport const Checkbox = createCheckbox({\n  Root,\n  Indicator,\n  Icon,\n  Label,\n  Group,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Attached Button Group with Icons\nDESCRIPTION: Creates a button group with two attached buttons - an export button and a menu button with three dots icon. The buttons are styled with outline variant and custom colors.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup isAttached>\n  <Button variant=\"outline\" size='xs' borderColor='$backgroundLight300' borderRightWidth='$0' $dark-borderColor=\"$backgroundDark700\">\n    <ButtonText color='$textLight900' $dark-color=\"$textDark300\">\n      Export\n    </ButtonText>\n  </Button>\n  <Button variant=\"outline\" size='xs' borderColor='$backgroundLight300' $dark-borderColor=\"$backgroundDark70\">\n    <ButtonIcon as={ThreeDotsIcon} color=\"$textLight900\" $dark-color=\"$textDark300\"/>\n  </Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing FAB with Custom Placement in a Product Card\nDESCRIPTION: This example shows a Floating Action Button (FAB) with custom placement in a product card interface. The shopping cart button is positioned at the bottom right of the product card with specific coordinates, allowing users to quickly add the product to their cart.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  maxWidth='$96'\n  borderColor='$borderLight200'\n  borderRadius='$lg'\n  borderWidth='$1'\n  overflow='hidden'\n  $base-mx='$5'\n  $dark-bg='$backgroundDark900'\n  $dark-borderColor='$borderDark800'\n>\n  <Box>\n    <Image\n      h={185}\n      w={416}\n      source={{\n        uri: 'https://images.pexels.com/photos/1937743/pexels-photo-1937743.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',\n      }}\n      fallbackSource={{\n        uri: 'https://images.pexels.com/photos/1937743/pexels-photo-1937743.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',\n      }}\n    />\n  </Box>\n  <VStack px='$6' pt='$4' pb='$6'>\n    <Heading size='sm' >\n      Fresh Orange - Imported (Loose)\n    </Heading>\n    <Text fontSize='$sm'  my='$1.5'>\n      Rs 146(Rs.24.33/pc)\n    </Text>\n    <Text fontSize='$xs'>\n      DETAILS\n    </Text>\n    <Text fontSize='$xs'  my='$1.5'>\n      Oranges are a great source of vitamin C, which is essential for a healthy immune system. Oranges are a great source of vitamin C, which is important for maintaining a healthy immune system. Vitamin C also helps with the absorption of iron and the production of collagen, which supports healthy skin, teeth, and bones.\n    </Text>\n    <Link href=\"https://gluestack.io/\" isExternal>\n      <Text fontSize='$xs' color='$pink600'>\n        READ MORE\n      </Text>\n    </Link>\n  </VStack>\n  <Fab bg='$primary600' size='lg' right='$4' bottom='$20'>\n    {/* ShoppingCartIcon is imported from 'lucide-react-native' */}\n    <FabIcon as={ShoppingCartIcon} h='$4' w='$4'/>\n  </Fab>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Component with Next.js in TypeScript\nDESCRIPTION: This snippet shows how to create a custom Link component using Next.js Link and styled-components in TypeScript. It demonstrates how to style the component and pass props for styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Link/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link';\n\n// Using the Next Link component\nconst StyledLink = styled(Link, styling, componentConfig, extendedBaseConfig);\n\n// if some styling are direct props, you can pass them as props in the styling\nprops: {\n  w: 100,\n  h: 100,\n  borderRadius: '$full',\n};\n\n// you can also /style/docs/getting-started/styled to style the component\n\nexport default () => <StyledLink />;\n```\n\n----------------------------------------\n\nTITLE: Rendering FAB with Icon in React Component\nDESCRIPTION: This code snippet demonstrates how to use the FAB component with an icon in a React component. It creates a chat-like interface with user avatars and messages, and adds a FAB with an edit icon in the bottom-right corner.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarImage } from \"@/components/ui/avatar\";\nimport { Box } from \"@/components/ui/box\";\nimport { Fab, FabIcon } from \"@/components/ui/fab\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { EditIcon } from \"@/components/ui/icon\";\n\nfunction App() {\n  const data = [\n    {\n      uri: 'https://images.unsplash.com/photo-1599566150163-29194dcaad36?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80',\n      name: 'Kevin James',\n      msg: \"Hi Rachel, What's up\",\n    },\n    {\n      uri: 'https://images.unsplash.com/photo-1527980965255-d3b416303d12?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80',\n      name: 'Jacob Jones',\n      msg: 'Good Morning!',\n    },\n    {\n      uri: 'https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80',\n      name: 'Albert Flores',\n      msg: 'Coffee?',\n    },\n  ];\n  return (\n    <Box\n    className='border rounded-lg border-outline-200 p-6 bg-background-100 min-w-[240px] sm:min-w-[360px] md:min-w-[476px]'\n    >\n      <VStack space='md'>\n        {data.map((chatData, index)=>{\n          return (\n            <HStack space='sm' className='items-center' key={index}>\n              <Avatar size='sm'>\n                <AvatarImage\n                  source={{\n                  uri: chatData.uri,\n                  }}\n                  alt=\"image\"\n                />\n              </Avatar>\n              <VStack>\n                <Heading size='xs'>\n                  {chatData.name}\n                </Heading>\n                <Text size='xs'>\n                  {chatData.msg}\n                </Text>\n              </VStack>\n            </HStack>\n          );\n        })}\n      </VStack>\n      <Fab size='lg' className='bg-primary-600 hover:bg-primary-700 active:bg-primary-800' >\n        <FabIcon as={EditIcon} color=\"white\"/>\n      </Fab>\n    </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic View Component Usage in React\nDESCRIPTION: This snippet illustrates the basic anatomy of using the View component in a React application. It shows the minimal structure required to implement a View component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/View/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <View></View>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Checked State Switch in GlueStack UI - JSX\nDESCRIPTION: Example showing how to create a Switch component with a default checked state alongside descriptive text. Uses HStack for horizontal layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Switch/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack space=\"md\">\n    <Switch  defaultValue={true}/>\n    <Text size=\"sm\" >Public profile</Text>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Basic SectionList Component Structure in JSX\nDESCRIPTION: This code snippet illustrates the basic structure of using the SectionList component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/SectionList/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <SectionList />;\n```\n\n----------------------------------------\n\nTITLE: LinearGradient Component Anatomy\nDESCRIPTION: This snippet demonstrates the basic structure of a LinearGradient component, showing how to use the 'as' prop to determine the underlying implementation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/recipes/linearGradient/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <LinearGradient as={} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Styles with Breakpoints in a React Component\nDESCRIPTION: Example showing how to apply responsive styles to a button component using gluestack-style's breakpoint system. The button changes color scheme from red to blue at the medium (md) breakpoint, with different states for hover and active conditions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/ResponsiveStyles/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const StyledButton = styled(Pressable, {\n    'bg': '$red500',\n    'p': '$3',\n    'shadow': '$4',\n    ':hover': {\n        'bg': '$red600',\n      },\n    ':active': {\n        'bg': '$red700',\n      },\n    '@md': {\n      'bg': '$blue500',\n      ':hover': {\n        'bg': '$blue600',\n      },\n      ':active': {\n        'bg': '$blue700',\n      },\n    },\n  });\n  const StyledButtonText = styled(\n    Text,\n    {\n      color: '$textDark50',\n    },\n  );\n  const [isHovered, setIsHovered] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n  return (\n    <Provider config={config}>\n      <StyledButton\n        states={{ hover: isHovered, active: isActive }}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        onMouseDown={() => setIsActive(true)}\n        onMouseUp={() => setIsActive(false)}\n      >\n        <StyledButtonText>Click Me</StyledButtonText>\n      </StyledButton>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tooltip with Icon in React\nDESCRIPTION: This snippet shows how to implement a tooltip component with an icon. It uses custom Avatar and Icon components to create a clickable icon that triggers the tooltip. The tooltip content includes text and additional icons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar, AvatarFallbackText } from \"@/components/ui/avatar\";\nimport { Box } from \"@/components/ui/box\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\nimport { Tooltip, TooltipContent } from \"@/components/ui/tooltip\";\nimport { Icon, EditIcon } from \"@/components/ui/icon\";\nimport { Command } from \"lucide-react-native\";\n\nfunction App(){\n          return (\n            <Box className=\"h-96 justify-center\">\n              <Tooltip\n                  placement=\"top\"\n                  trigger={(triggerProps) => {\n                    return (\n                    <Avatar size=\"md\" {...triggerProps} className=\"bg-primary-600\">\n                      <Icon as={EditIcon} size=\"sm\" className=\"text-white\"/>\n                    </Avatar>\n                    )\n                  }}\n              >\n                <TooltipContent\n                className=\"bg-background-50 rounded-md\"\n                >\n                  <Box className=\"p-2.5\">\n                    <Text size=\"sm\">New message</Text>\n                    <HStack space=\"xs\" className=\"p-1 ml-3\">\n                          <Avatar size=\"xs\" className=\"bg-gray-500 rounded\">\n                              <Icon as={Command} className=\"text-typography-0\"/>\n                          </Avatar>\n                          <Avatar size=\"xs\" className=\"bg-gray-500 rounded\">\n                            <AvatarFallbackText>N</AvatarFallbackText>\n                          </Avatar>\n                    </HStack>\n                  </Box>\n                </TooltipContent>\n              </Tooltip>\n            </Box>\n        );\n        }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Slider Component\nDESCRIPTION: This example demonstrates the basic usage of the Slider component with its child components in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Slider>\n    <SliderTrack>\n      <SliderFilledTrack />\n    </SliderTrack>\n    <SliderThumb />\n  </Slider>\n);\n```\n\n----------------------------------------\n\nTITLE: Button Styling with SX Prop\nDESCRIPTION: Example of using sx prop to customize a Button component with hover and active states, including background color and text color modifications.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  size=\"lg\"\n  sx={{\n      \"marginBottom\": '$4',\n      \"bg\": '$green500',\n      \":hover\": {\n          \"bg\": '$green600',\n          _text:{\n            color:\"$white\"\n          }\n      },\n      \":active\": {\n        bg: '$green700'\n      }\n  }}\n>\n  <ButtonText>Button</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using Progress Component in React\nDESCRIPTION: This code snippet demonstrates how to import the necessary components, create a custom Progress component using createProgress function, and use it in a React component. It includes importing styled components, creating the Progress component, and implementing it.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Progress/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  FilledTrack,\n} from '../components/core/progress/styled-components';\n\n// import the createProgress function\nimport { createProgress } from '@gluestack-ui/progress';\n\n// Understanding the API\nconst Progress = createProgress({\n  Root,\n  FilledTrack,\n});\n\n// Using the Progress component\nexport default () => (\n  <Progress>\n    <ProgressFilledTrack />\n  </Progress>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying a Custom Toast Message in React Native\nDESCRIPTION: This snippet demonstrates how to create and display a custom toast message using the gluestack-ui Toast component. It includes a button that triggers the toast and handles duplicate toast prevention.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { useToast, Toast, ToastTitle, ToastDescription } from \"@/components/ui/toast\";\nimport React from \"react\";\n\nfunction Example() {\n  const toast = useToast();\n  const [toastId, setToastId] = React.useState(0);\n  const handleToast = () => {\n    if (!toast.isActive(toastId)) {\n      showNewToast();\n    }\n  };\n  const showNewToast = () => {\n    const newId = Math.random();\n    setToastId(newId);\n    toast.show({\n      id: newId,\n      placement: 'top',\n      duration: 3000,\n      render: ({ id }) => {\n        const uniqueToastId = \"toast-\" + id;\n        return (\n          <Toast nativeID={uniqueToastId} {...props}>\n            <ToastTitle>Hello!</ToastTitle>\n            <ToastDescription>\n              This is a customized toast message.\n            </ToastDescription>\n          </Toast>\n        );\n      },\n    });\n  };\n  return (\n    <Button onPress={handleToast}>\n      <ButtonText>Press Me</ButtonText>\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Actionsheet Component Anatomy in JSX\nDESCRIPTION: This code shows the basic structure and hierarchy of the Actionsheet component and its child components, including backdrop, content, drag indicator, and action items.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Actionsheet>\n    <ActionsheetBackdrop />\n    <ActionsheetContent>\n      <ActionsheetDragIndicatorWrapper>\n        <ActionsheetDragIndicator />\n      </ActionsheetDragIndicatorWrapper>\n      <ActionsheetItem>\n        <ActionsheetItemText />\n      </ActionsheetItem>\n    </ActionsheetContent>\n  </Actionsheet>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook in a React Component\nDESCRIPTION: This example demonstrates how to use the useTheme hook within a React component. It imports necessary dependencies, calls the useTheme hook, and returns a View component where the theme can be utilized.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-theme/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { useTheme } from '@gluestack-ui/themed';\n\nconst Example = () => {\n  const theme = useTheme()\n  return (\n    <View>{/* Do something with the theme */}</View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge in Menu with React and gluestack-ui\nDESCRIPTION: This snippet shows how to incorporate a Badge component within a Menu structure. It demonstrates the use of various gluestack-ui components to create a menu with icons, text, and a badge highlight.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Badge/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu\n  placement={\"top\"}\n    trigger={({ ...triggerProps }) => {\n      return (\n        <Button {...triggerProps}>\n          <ButtonText>Menu</ButtonText>\n        </Button>\n      );\n    }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={GlobeIcon} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Community\n        </Text>\n      </HStack>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={PuzzleIcon} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Plugins\n        </Text>\n      </HStack>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={PaintBucket} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Theme\n        </Text>\n         <Badge bg=\"$backgroundLight600\">\n           <BadgeText color=\"$textLight50\">New</BadgeText>\n                         </Badge>\n      </HStack>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={SettingsIcon} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Settings\n        </Text>\n      </HStack>\n    </MenuItem>\n    <MenuItem key=\"Add account\" textValue=\"Add account\">\n      <HStack space=\"sm\" alignItems=\"center\">\n        <Icon as={AddIcon} size=\"sm\" />\n        <Text fontSize=\"$sm\" lineHeight=\"$md\">\n          Add account\n        </Text>\n      </HStack>\n    </MenuItem>\n  </Menu>\n```\n\n----------------------------------------\n\nTITLE: Importing Components from gluestack-ui for Todo-List App\nDESCRIPTION: This code imports various UI components from @gluestack-ui/themed and other related packages needed to build a Todo-List application. It includes basic components like HStack, Text, Button, and icons that would be used in the todo list interface.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/todo-list/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  GluestackUIProvider,\n  HStack,\n  Text,\n  Pressable,\n  Icon,\n  AddIcon,\n  Button,\n  Box,\n} from '@gluestack-ui/themed';\nimport { config } from '@gluestack-ui/config';\nimport { transformedCode } from '../../../utils';\nimport Wrapper from '../../../components/Wrapper';\nimport {\n  AppProvider,\n  CodePreview,\n  Table,\n  TableContainer,\n  InlineCode,\n} from '@gluestack/design-system';\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Complex Styling with State and Media Query Modifiers\nDESCRIPTION: Demonstrates how to handle more complex styling scenarios including states, media queries, and descendants using the $ prefix notation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/UtilityProps/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<StyledButton\n  flexDirection=\"column\"\n  $md-flexDirection=\"row\"\n  $hover-bg=\"$primary600\"\n  $_text-hover-color=\"$text800\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Default Unstyled Components from @gluestack-ui/themed\nDESCRIPTION: This example demonstrates how to use the default unstyled components from @gluestack-ui/themed with inline styling. The GluestackUIProvider doesn't provide any pre-defined styles, allowing for custom styling of the Button component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/core-concepts/UnstyledLibrary/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GluestackUIProvider, Button, ButtonText } from '@gluestack-ui/themed';\nfunction App() {\n  return (\n    <GluestackUIProvider>\n      <Button backgroundColor=\"purple\" padding={12}>\n        <ButtonText color=\"white\">Hello world</ButtonText>\n      </Button>\n    </GluestackUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Hooks from @react-native-aria/checkbox\nDESCRIPTION: Example showing how to import the useCheckbox, useCheckboxGroup, and useCheckboxGroupItem hooks from the @react-native-aria/checkbox package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/checkbox/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  useCheckbox,\n  useCheckboxGroup,\n  useCheckboxGroupItem,\n} from '@react-native-aria/checkbox';\n```\n\n----------------------------------------\n\nTITLE: Testing Event Propagation Control in React\nDESCRIPTION: Tests stopPropagation and stopImmediatePropagation methods for controlling event propagation. Verifies that event propagation can be stopped at different phases using these methods.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst childListener = jest.fn(e => {\n  e.stopPropagation();\n});\nconst targetListener = jest.fn();\nconst firstListener = jest.fn(e => {\n  e.stopImmediatePropagation();\n});\nconst secondListener = jest.fn();\nact(() => {\n  target.click();\n});\nexpect(firstListener).toBeCalledTimes(1);\nexpect(secondListener).toBeCalledTimes(0);\n```\n\n----------------------------------------\n\nTITLE: Running gluestack-ui v2 codemod for migration\nDESCRIPTION: Command to run the gluestack-ui v2 codemod for automated migration of v1 code to v2.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @gluestack-ui/v2-codemod@latest <project_dir>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Alert Component in React Native\nDESCRIPTION: This example demonstrates the basic structure of using the Alert component with its subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Alert>\n    <AlertIcon />\n    <AlertText />\n  </Alert>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Link with Icon - React/JSX\nDESCRIPTION: Example demonstrating Link component implementation with an icon using GlueStack UI components. Includes HStack for layout, Link for navigation, and Icon component with arrow styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Link, LinkText } from \"@/components/ui/link\";\nimport { Text } from \"@/components/ui/text\";\nimport { Icon } from \"@/components/ui/icon\";\nimport { ArrowUpRight } from \"lucide-react-native\";\n\nfunction Example() {\n  return (\n    <HStack>\n              <Text\n               size=\"lg\">Go to&nbsp;</Text>\n              <Link href=\"https://gluestack.io/\" isExternal>\n                <HStack>\n                <LinkText size=\"lg\">Pinterest</LinkText>\n                <Icon as={ArrowUpRight} size=\"lg\" className='mt-0.5 text-info-600'/>\n                </HStack>\n              </Link>\n         </HStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar with Letters Example in React\nDESCRIPTION: This example shows how to create an Avatar component with text and a badge, along with additional information displayed in a vertical stack.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"2xl\">\n    <HStack space=\"md\">\n        <Avatar  bgColor=\"$indigo600\"  >\n          <AvatarFallbackText>Ronald Richards</AvatarFallbackText>\n          <AvatarBadge $dark-borderColor=\"$black\"/>\n        </Avatar>\n      <VStack>\n         <Heading size=\"sm\" >Ronald Richards</Heading>\n         <Text size=\"sm\" >Nursing Assistant</Text>\n      </VStack>\n  </HStack>\n  <HStack space=\"md\">\n    <Avatar  bgColor=\"$orange600\" >\n        <AvatarFallbackText>Arlene McCoy</AvatarFallbackText>\n    </Avatar>\n    <VStack>\n        <Heading size=\"sm\" >Arlene McCoy</Heading>\n        <Text size=\"sm\" >Marketing Coordinator</Text>\n    </VStack>\n </HStack>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Component with Expo\nDESCRIPTION: This snippet shows how to customize the Image component to use Expo Image component, addressing the dataSet prop issue in Expo.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Image/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'expo-image';\n\n// Using the Expo Image component\nconst StyledImage = styled(Image, styling, componentConfig, extenedBaseConfig);\n\n// import the createImage function\nimport { createImage } from '@gluestack-ui/image';\n\n// Understanding the API\nconst Image = createImage({\n  Root: StyledImage,\n});\n\nexport default () => <Image />;\n```\n\n----------------------------------------\n\nTITLE: Textarea Component with Props in React\nDESCRIPTION: Illustrates a Textarea component with various props including size, placeholder, and width.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Textarea/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Textarea {...props} w='$64'>\n  <TextareaInput\n    placeholder=\"Your text goes here...\"\n  />\n</Textarea>\n```\n\n----------------------------------------\n\nTITLE: Rendering ImageBackground with Nested Text in React Native\nDESCRIPTION: This snippet demonstrates how to use the ImageBackground component with a nested Text component. It sets a background image and applies styling to both the ImageBackground and Text components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/ImageBackground/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View h=\"$96\" w=\"$96\">\n      <ImageBackground\n        source={{ uri: 'https://legacy.reactjs.org/logo-og.png' }}\n        style={{ flex: 1, justifyContent: 'center' }}\n      >\n        <Text\n          color=\"$white\"\n          fontSize={42}\n          lineHeight={84}\n          fontWeight=\"$bold\"\n          textAlign=\"center\"\n          backgroundColor=\"#000000c0\"\n        >\n          Inside\n        </Text>\n      </ImageBackground>\n    </View>\n```\n\n----------------------------------------\n\nTITLE: Using the useTheme Hook in a React Component\nDESCRIPTION: Demonstrates how to implement the useTheme hook within a React component to access the theme object, which can then be used for styling or conditional rendering.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useTheme/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { useTheme } from '@gluestack-style/react';\n\nconst Example = () => {\n  const theme = useTheme()\n  return (\n    <View>{/* Do something with the theme */}</View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Hover State Styling to Button Component\nDESCRIPTION: This example demonstrates how to use the sx prop to apply state-based styling to a Button component. The code shows how to change the background color of a button to red when it's in a hover state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/state/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button sx = {{ \":hover\": {\n  backgroundColor:\"$red500\"\n  }\n}}>\n  <ButtonText>Hello world</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Implementation\nDESCRIPTION: Shows basic implementation of themes using the Theme component with styled components and StyledProvider.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/Themes/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled, StyledProvider, Theme } from '@gluestack-style/react';\nimport { Pressable } from 'react-native';\nimport { config } from './config';\n\nconst Button = styled(Pressable, {\n  backgroundColor: '$primary',\n  padding: '$3',\n});\n\nconst ButtonText = styled(Pressable, {\n  color: '$secondary',\n});\n\nexport const App = () => {\n  return (\n    <StyledProvider config={config}>\n      <Theme name=\"classic\">\n        <Button>\n          <ButtonText>Classic Button</ButtonText>\n        </Button>\n      </Theme>\n    </StyledProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Heading Component\nDESCRIPTION: Demonstrates the basic structure and usage of the Heading component in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Typography/Heading/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Heading />;\n```\n\n----------------------------------------\n\nTITLE: Importing Button Components in React\nDESCRIPTION: This snippet shows how to import the Button and related components from the gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText, ButtonIcon, ButtonSpinner, ButtonGroup } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Button in React\nDESCRIPTION: This snippet demonstrates a button that functions as a link. It includes text and an icon, styled to look like a link.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText, ButtonIcon } from \"@/components/ui/button\";\nimport { ArrowUpIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Button variant='link'>\n          <ButtonText className='font-medium text-sm text-typography-900' >\n            Back to top\n          </ButtonText>\n          <ButtonIcon as={ArrowUpIcon}\n           className='h-3 w-3 text-background-900 ml-1' />\n        </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Unitools Link - React/JSX\nDESCRIPTION: Basic implementation example of Unitools Link component that works with both Expo and Next.js projects. Shows simple usage with text content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from \"@unitools/link\";\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from \"@/components/ui/link\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Link href=\"https://gluestack.io/\">\n          <Text>gluestack</Text>\n        </Link>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Link Style Button with Icon\nDESCRIPTION: Implements a link-styled button with text and an arrow icon. Includes dark mode color support.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Button variant='link'>\n  <ButtonText fontWeight='$medium' fontSize='$sm' color='$textLight900' $dark-color=\"$textDark300\">\n    Back to top\n  </ButtonText>\n  <ButtonIcon as={ArrowUpIcon} h='$3' w='$3' color='$backgroundLight900' ml='$1' $dark-color=\"$backgroundDark300\"/>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Progress Component with Value\nDESCRIPTION: This snippet shows how to create a Progress component with a specific value and styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Progress/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"lg\">\n  <Text size=\"lg\">Downloading 55%</Text>\n  <Progress value={55} w='$80' h='$1'>\n    <ProgressFilledTrack h='$1' />\n  </Progress>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Basic Styled Component Creation\nDESCRIPTION: Demonstrates basic usage of styled() function to create a customized button component with basic styling and dark mode support.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/Styled/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledButton = styled(\n  Pressable,\n  {\n    bg: '$primary600',\n    px: '$6',\n    py: '$4',\n    _dark: {\n      bg: '$gray800',\n    },\n  },\n  componentConfig,\n  extendedBaseConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering HStack Component in React Native\nDESCRIPTION: This snippet demonstrates how to use the HStack component to arrange child elements horizontally. It includes options for spacing and reversed layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/HStack/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack {...props}>\n  <Box w='$20' h='$20' bg='$primary300' />\n  <Box w='$20' h='$20' bg='$primary400' />\n  <Box w='$20' h='$20' bg='$primary500' />\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Component Structure in JSX\nDESCRIPTION: Demonstrates the basic structure of a Toast component with title and description.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Toast/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Toast>\n    <ToastTitle />\n    <ToastDescription />\n  </Toast>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Component with gluestack-style\nDESCRIPTION: Shows how to create an animated component using AnimatedView from animation-resolver with initial, animate and exit states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Animations/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AnimatedView } from '@gluestack-style/animation-resolver';\nimport { styled } from '@gluestack-style/react';\n\nconst AnimatedBox = styled(AnimatedView, {\n  ':initial': {\n    opacity: 0,\n  },\n  ':animate': {\n    opacity: 1,\n  },\n  ':exit': {\n    opacity: 0,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Component in React Native\nDESCRIPTION: This snippet demonstrates how to use the Link component from gluestack-ui in a React Native application. It shows a basic example of creating a clickable link to the gluestack website.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, LinkText } from \"@/components/ui/link\";\n\nfunction Example() {\n  return (\n    <Link href=\"https://gluestack.io/\">\n        <LinkText>gluestack</LinkText>\n      </Link>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Themed Alert in React Native\nDESCRIPTION: This code snippet shows how to render a themed Alert component with custom content and an InfoIcon.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Alert/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert mx='$2.5'  {...props}>\n  <AlertIcon as={InfoIcon} mr=\"$3\"  />\n  <AlertText>\n    We have updated our terms of service. Please review and accept to continue using our service.\n  </AlertText>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Colored Progress Bars Example\nDESCRIPTION: Example showing how to customize Progress component with different track colors.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress, ProgressFilledTrack } from \"@/components/ui/progress\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <VStack space=\"3xl\" className=\"max-w-96 w-full\">\n          <Progress value={46} className='w-full h-2' size=\"sm\">\n            <ProgressFilledTrack className='bg-emerald-600'/>\n          </Progress>\n          <Progress value={46} className='w-full h-2' size=\"sm\">\n            <ProgressFilledTrack className='bg-amber-600'/>\n          </Progress>\n          <Progress value={46} className='w-full h-2' size=\"sm\">\n            <ProgressFilledTrack className='bg-fuchsia-600'/>\n          </Progress>\n          <Progress value={46} className='w-full h-2' size=\"sm\">\n            <ProgressFilledTrack className='bg-cyan-600'/>\n          </Progress>\n        </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Spinner Component Usage in React\nDESCRIPTION: Demonstrates the basic usage of the Spinner component in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Spinner/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Spinner />;\n```\n\n----------------------------------------\n\nTITLE: Card Component with Image in gluestack-ui\nDESCRIPTION: Showcases a more complex Card component example with an image, date, heading, and a link.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Card/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    return (\n      <Card p=\"$5\" borderRadius=\"$lg\" maxWidth={360} m=\"$3\">\n          <Image\n        mb=\"$6\"\n        h={240}\n        width=\"$full\"\n        borderRadius=\"$md\"\n        source={{\n          uri: 'https://images.unsplash.com/photo-1529693662653-9d480530a697?q=80&w=2831&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n        }}\n      />\n      <Text\n        fontSize=\"$sm\"\n        fontStyle=\"normal\"\n        fontFamily=\"$heading\"\n        fontWeight=\"$normal\"\n        lineHeight=\"$sm\"\n        mb=\"$2\"\n        sx={{\n          color: '$textLight700',\n          _dark: {\n            color: '$textDark200',\n          },\n        }}\n      >\n        May 15, 2023\n      </Text>\n      <Heading size=\"md\" fontFamily=\"$heading\" mb=\"$4\">\n        The Power of Positive Thinking\n      </Heading>\n      <Link href=\"https://gluestack.io/\" isExternal>\n        <HStack alignItems=\"center\">\n          <LinkText\n            size=\"sm\"\n            fontFamily=\"$heading\"\n            fontWeight=\"$semibold\"\n            color=\"$primary600\"\n            $dark-color=\"$primary300\"\n            textDecorationLine=\"none\"\n          >\n            Read Blog\n          </LinkText>\n          <Icon\n            as={ArrowRightIcon}\n            size=\"sm\"\n            color=\"$primary600\"\n            mt=\"$0.5\"\n            ml=\"$0.5\"\n            $dark-color=\"$primary300\"\n          />\n        </HStack>\n      </Link>\n    </Card>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying All Built-in gluestack Icons in JSX\nDESCRIPTION: This code snippet demonstrates how to render all available built-in icons from the gluestack UI library in a horizontal stack layout with consistent sizing and spacing.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack w=\"70%\" flexWrap= 'wrap' mx='auto'>\n      <Icon as={AddIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ArrowLeftIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ArrowRightIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ArrowUpIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ArrowDownIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronsLeftIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronsRightIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronsUpDownIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={AtSignIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={PaperclipIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={BellIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CalendarDaysIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={MessageCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CheckIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronDownIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronUpIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronLeftIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronRightIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CloseIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CopyIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={TrashIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={DownloadIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={GripVerticalIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={EditIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={MailIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ExternalLinkIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={MenuIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={InfoIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={LinkIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={LockIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={RemoveIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={MoonIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={SlashIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CheckCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={PhoneIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={HelpCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={RepeatIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={Repeat1Icon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={SearchIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={SettingsIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={LoaderIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={StarIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={SunIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ClockIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={UnlockIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={EyeIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={EyeOffIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={AlertCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CloseCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ShareIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={FavouriteIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={GlobeIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ThreeDotsIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={PlayIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Gluestack UI Object-based Styling\nDESCRIPTION: Advanced styling example using object-based approach for better code maintainability with state and component styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  size=\"lg\"\n  mb='$4'\n  bg='$green500'\n  $hover={{\n    \"bg\": '$green600',\n    _text:{\n      color:\"$white\"\n    }\n  }}\n  $active={{\n    bg: '$green700'\n  }}\n>\n  <ButtonText>Button</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Props Passing in Styled Components with gluestack-style\nDESCRIPTION: This example demonstrates how to use props passing in a styled component. It shows how to set default props and conditional props based on component state, such as focus.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/PropsPassing/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledComponent = styled(\n  TextInput,\n  {\n    p:\"$3\",\n    bg: \"$coolGray50\",\n    props:{\n      placeholderTextColor:\"$coolGray500\"\n    }\n    \":focus\": {\n      bg: \"$coolGray100\",\n      props:{\n        placeholderTextColor:\"$coolGray700\"\n      }\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Importing PinInput Component in React\nDESCRIPTION: Import statement for the PinInput component to use in your React project files.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {   \n  PinInput,\n  PinInputField,\n } from '@/components/ui/pin-input';\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Pressable Component\nDESCRIPTION: A simple example showing the default usage of the Pressable component without any props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Pressable />;\n```\n\n----------------------------------------\n\nTITLE: Adding Content within a Divider in React\nDESCRIPTION: This snippet illustrates how to incorporate additional content alongside a Divider component. It creates a search results layout with a divider containing text, enhancing the visual and informational aspects of the interface.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Divider } from \"@/components/ui/divider\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Box\n        className=\"py-9 px-20 m-5 rounded-lg\n        border border-outline-300\n        \"\n        >\n          <Heading size='3xl' >\n            Search Results\n          </Heading>\n          <Divider className=\"mt-4 mb-6\"/>\n          <Box>\n            <Text size='xs' className='font-bold text-amber-700'>\n              TECHNOLOGY\n            </Text>\n            <Heading>\n              How AI can benefit your business\n            </Heading>\n            <Text size='sm' className=\"mt-1.5\">\n              AI can automate tasks and processes, allowing for increasing efficiency and productivity.\n            </Text>\n            <HStack space='sm'\n            className=\"mt-3 items-center\"\n            >\n              <Divider \n              className=\"w-[18px] bg-amber-700\"\n              />\n              <Text size='xs' className=\"text-amber-700\">\n                5 mins read\n              </Text>\n            </HStack>\n          </Box>\n        </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Alert with Heading Example\nDESCRIPTION: Implementation of an Alert component with a heading and success icon\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert action='success'>\n  <AlertIcon as={CheckCircleIcon} size=\"xl\"  mr=\"$3\" />\n  <VStack space='xs'>\n    <AlertText fontWeight ='$bold'>\n      Congratulations!\n    </AlertText >\n    <AlertText >\n      Thank you for your submission. You will receive a confirmation email shortly.\n    </AlertText>\n  </VStack>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Implementing AlertDialog with Semantic Icon in React\nDESCRIPTION: This example demonstrates an AlertDialog component with a semantic icon, representing a successful order placement. It includes a button to trigger the dialog, and the dialog content with a header, body, and footer.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [showAlertDialog, setShowAlertDialog] = React.useState(false);\n  return (\n    <>\n      <Center h={300} >\n          <Button onPress={() => setShowAlertDialog(true)}>\n              <ButtonText>Click me</ButtonText>\n          </Button>\n      </Center>\n      <AlertDialog\n        isOpen={showAlertDialog}\n        onClose={() => {\n            setShowAlertDialog(false);\n        }}\n      >\n            <AlertDialogBackdrop/>\n        <AlertDialogContent>\n        <AlertDialogHeader borderBottomWidth='$0'>\n           <HStack space='sm' alignItems='center'>\n            <Icon as={CheckCircleIcon} color='$success700' \n            $dark-color='$success300' />\n              <Heading size='lg'>Order placed</Heading>\n            </HStack>\n          </AlertDialogHeader>\n          <AlertDialogBody>\n              <Text size=\"sm\">\n              Congratulations, your order has been placed! You will receive a confirmation email shortly. Thank you for shopping with us.\n              </Text>\n          </AlertDialogBody>\n           <AlertDialogFooter  borderBottomWidth='$0'>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              action=\"secondary\"\n              mr=\"$3\"\n              onPress={() => {\n                setShowAlertDialog(false);\n              }}\n            >\n              <ButtonText>Okay</ButtonText>\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Gap Between Grid Items in gluestack-ui\nDESCRIPTION: This example demonstrates how to use the gap-4 utility to set uniform spacing between grid items. The grid is configured with 9 columns, and each GridItem spans 3 columns with background styling and centered text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Grid/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Grid, GridItem } from \"@/components/ui/grid\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Grid className=\"gap-4\" _extra={{\n      className: 'grid-cols-9',\n    }}>\n      <GridItem\n        className=\"bg-background-50 p-3 rounded-md text-center\"\n        _extra={{\n      className: 'col-span-3',\n    }}\n      >\n        <Text>A</Text>\n      </GridItem>\n       <GridItem\n        className=\"bg-background-50 p-3 rounded-md text-center\"\n        _extra={{\n      className: 'col-span-3',\n    }}\n      >\n        <Text>B</Text>\n      </GridItem>\n      <GridItem\n        className=\"bg-background-50 p-3 rounded-md text-center\"\n        _extra={{\n      className: 'col-span-3',\n    }}\n      >\n        <Text>C</Text>\n      </GridItem>\n    </Grid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Accordion Component in React\nDESCRIPTION: This snippet illustrates how to implement a controlled Accordion component using gluestack-ui. It demonstrates managing the accordion's state through React hooks and props, allowing for external control of the expanded sections.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion, AccordionItem, AccordionHeader, AccordionTrigger, AccordionTitleText, AccordionContentText, AccordionIcon, AccordionContent } from \"@/components/ui/accordion\";\nimport React from \"react\";\nimport { MinusIcon, PlusIcon } from \"lucide-react-native\";\n\nfunction App(){\n    const [selectedValues, setSelectedValues] = React.useState(['item-1', 'item-2']);\n    return (\n    <Accordion variant=\"unfilled\" type=\"multiple\" value={selectedValues} onValueChange={(item) => setSelectedValues(item)} className=\"m-5 w-[95%]\">\n      <AccordionItem value=\"item-1\" className=\"border-t border-b border-outline-300\"\n      >\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   Exploring Nature's Wonders\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon}  />\n                  ) : (\n                    <AccordionIcon as={PlusIcon}  />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n          Embark on a journey through the breathtaking landscapes and diverse ecosystems of our planet. From majestic mountains to serene oceans, discover the beauty that nature has to offer.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-2\"\n      >\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   The Art of Culinary Delights\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n           Indulge your senses in a culinary adventure. Uncover the secrets behind delectable dishes, learn about unique flavor profiles, and ignite your passion for cooking.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-3\"\n      className=\"border-t border-b border-outline-300\"\n      >\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   Mastering the Creative Process\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n           Immerse yourself in the world of creativity. Unleash your artistic potential, whether it's through writing, painting, or any other form of expression.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Accordion Items in React\nDESCRIPTION: Demonstrates how to create an accordion with disabled items using the isDisabled prop. The example shows a disabled accordion item alongside a regular item, with custom icons for expanded/collapsed states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    return (\n          <Accordion m=\"$5\" variant=\"unfilled\" width=\"90%\">\n      <AccordionItem value=\"item-1\" isDisabled={true} borderBottomWidth={1} \n      borderColor=\"$borderLight300\"\n      $dark-borderColor=\"$borderDark700\">\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   Disabled Item\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon}  />\n                  ) : (\n                    <AccordionIcon as={PlusIcon}  />\n                  )}\n                \n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            This is a Disabled Item.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n   \n      <AccordionItem value=\"item-2\" >\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   Is this accordion accessible?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            Yes, the accordion is accessible. It adheres to the WAI-ARIA design\n            pattern. You can read more about it in the accessibility section of\n            the docs.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Props in React Native\nDESCRIPTION: This code snippet defines the props for the Checkbox component, including their types, default values, and descriptions. It covers properties like value, onChange, isChecked, isDisabled, and more.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.TBody>\n  <Table.TR>\n    <Table.TD>\n      <Table.TText>\n        <InlineCode>value</InlineCode>\n      </Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>string</Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>-</Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>{`The value to be used in the checkbox input. This is the value that will be returned on form submission.`}</Table.TText>\n    </Table.TD>\n  </Table.TR>\n  <!-- More table rows for other props -->\n</Table.TBody>\n```\n\n----------------------------------------\n\nTITLE: Rendering FormControl with Input in React\nDESCRIPTION: This snippet demonstrates how to use FormControl with an Input component. It includes a label, input field, and helper text. The FormControl is set with a minimum width of '$80'.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<FormControl minWidth='$80'>\n  <FormControlLabel>\n    <FormControlLabelText>\n      Name\n    </FormControlLabelText>\n  </FormControlLabel>\n  <Input>\n    <InputField />\n  </Input>\n  <FormControlHelper>\n    <FormControlHelperText>\n      What would you like people to call you?\n    </FormControlHelperText>\n  </FormControlHelper>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Basic Box Component Example\nDESCRIPTION: Demonstrates basic usage of the Box component with background color and padding styling, containing text content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Box/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  bg=\"$primary500\"\n  p=\"$5\"\n>\n  <Text color='$text0' >\n    This is the Box\n  </Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Creating SelectItem Component in React Native\nDESCRIPTION: SelectItem uses ActionsheetItem and Actionsheet.ItemText internally, inheriting properties from React Native's Pressable component. It includes props for disabled state, label, and value.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectItem isDisabled={false} label=\"Option 1\" value=\"option1\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Component Structure in React\nDESCRIPTION: This code demonstrates the basic structure of a Badge component, including BadgeText and BadgeIcon subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Badge/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Badge>\n    <BadgeText />\n    <BadgeIcon />\n  </Badge>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component in gluestack-ui\nDESCRIPTION: This code snippet shows how to import the Text component from the gluestack-ui themed library. It's a prerequisite for using the component in your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Typography/Text/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Radio Component in React\nDESCRIPTION: Basic example of importing styled components and creating a Radio component using the createRadio function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/radio/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, Group, Icon, Indicator, Label } from './styled-components';\nimport { createRadio } from '@gluestack-ui/radio';\n\nexport const Radio = createRadio({\n  Root,\n  Group,\n  Icon,\n  Indicator,\n  Label,\n});\n```\n\n----------------------------------------\n\nTITLE: gluestack-ui Configuration Structure\nDESCRIPTION: Illustrates the structure of the configuration object that contains aliases, tokens, global styles, component styles, themes, and plugins for the styling system.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/overview/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    # Adding bg as alias of background Color\n    \"bg\": \"backgroundColor\"\n  },\n  \"tokens\": {\n    # All the tokens are defined here like colors, borderWidths, radii, breakpoints, mediaQueries ....\n  },\n  \"globalStyle\": {\n    # All the global style is defined here\n  },\n  \"components\": {\n    # All the components style is defined here\n  },\n  \"themes\": {\n    # All the themes are defined here\n  },\n  \"plugins\":{\n    # All the plugins are defined here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using the VStack Component\nDESCRIPTION: Example showing how to import, customize, and use the VStack component with detailed comments explaining each step of the process.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/vstack/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root, Spacer } from '../components/vstack/styled-components';\n\n// import the createVStack function\nimport { createVStack } from '@gluestack-ui/vstack';\n\n// Understanding the API\nconst VStack = createVStack({\n  Root,\n  Spacer,\n});\n\n// Using the vstack component\nexport default () => <VStack />;\n```\n\n----------------------------------------\n\nTITLE: Themed Box Component with Text in JSX\nDESCRIPTION: Illustrates a themed Box component with custom background color, padding, and containing text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/Box/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  bg=\"$primary500\"\n  p=\"$5\"\n>\n  <Text color=\"white\">\n    This is the Box\n  </Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Component Implementation\nDESCRIPTION: Example showing basic implementation of Alert component with icon and text\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Alert>\n    <AlertIcon />\n    <AlertText />\n  </Alert>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useColorMode to conditionally style a component\nDESCRIPTION: This example shows how to utilize the useColorMode hook to apply conditional styling to a React Native View component based on whether the current color mode is light or dark.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useColorMode/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { useColorMode } from '@gluestack-style/react';\n\nfunction Example() {\n  const colorMode = useColorMode();\n  return (\n    <View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: colorMode === 'light' ? 'white' : 'black',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Button in React\nDESCRIPTION: This snippet demonstrates how to create a button with a loading state. It includes a spinner and text indicating the loading status.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText, ButtonSpinner } from \"@/components/ui/button\";\nimport colors from \"tailwindcss/colors\";\n\nfunction Example() {\n  return (\n    <Button className='p-3'>\n          <ButtonSpinner color={colors.gray[400]} />\n          <ButtonText className='font-medium text-sm ml-2'>Please wait...</ButtonText>\n        </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Component Usage in React Native\nDESCRIPTION: Example of using the Badge component with text and icon. Supports customization through size, variant, and action props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge {...props}>\n  <BadgeText>New feature</BadgeText>\n  <BadgeIcon as={GlobeIcon} ml='$2' />\n</Badge>\n```\n\n----------------------------------------\n\nTITLE: Rendering Center Component with Text in React Native\nDESCRIPTION: This snippet demonstrates how to use the Center component to center-align text content within a colored background.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Center/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Center bg=\"$primary500\" h={200} w={300}>\n  <Text color=\"$text0\" fontWeight=\"$bold\">\n    This is the center.\n  </Text>\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Component Structure\nDESCRIPTION: Example showing the complete structure of a Checkbox component with CheckboxGroup, indicator, and label.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <CheckboxGroup>\n    <Checkbox>\n      <CheckboxIndicator>\n        <CheckboxIcon />\n      </CheckboxIndicator>\n      <CheckboxLabel />\n    </Checkbox>\n  </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Divider Component\nDESCRIPTION: Example showing how to create a basic Divider component by importing the necessary components and using the createDivider function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/divider/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Root from './styled-components/Root';\nimport { createDivider } from '@gluestack-ui/divider';\nexport const Divider = createDivider({ Root });\n```\n\n----------------------------------------\n\nTITLE: Implementing Descendant Styling in React Native Components\nDESCRIPTION: Example showing how to create styled components with descendant styling using gluestack-style. The code demonstrates creating a StyledButton with text styling that gets passed down to StyledButtonText component through context.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/DescendantsStyles/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const StyledButton = styled(\n    Pressable,\n    {\n      bg: '$primary600',\n      px: '$6',\n      py: '$4',\n      _text: {\n        color: '$white',\n      },\n    },\n    {\n      descendantStyle: ['_text'],\n    }\n  );\n  const StyledButtonText = styled(\n  Text,\n  {\n    color: '$grey800',\n    fontWeight: '700',\n  },\n  { ancestorStyle: ['_text'] }\n);\nreturn (\n  <Provider config={config}>\n    <StyledButton {...props}>\n      <StyledButtonText>Hello world</StyledButtonText>\n    </StyledButton>\n  </Provider>\n)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Layout with useMedia Hook in React\nDESCRIPTION: Shows a practical example of using the useMedia hook to create a responsive layout. The component adjusts its layout based on the 'lg' breakpoint.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-media/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MediaExample = () => {\n  const media = useMedia();\n\n  return (\n    <View\n      style={{\n        flexDirection: media.lg ? 'row' : 'column',\n        gap: 10,\n      }}\n    >\n      <StyledBox>\n        <StyledText>Universal</StyledText>\n      </StyledBox>\n      <StyledBox>\n        <StyledText>Performant</StyledText>\n      </StyledBox>\n      <StyledBox>\n        <StyledText>Accessible</StyledText>\n      </StyledBox>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Actionsheet Component from gluestack-ui\nDESCRIPTION: This code shows how to import the Actionsheet component from the gluestack-ui themed package for use in your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Actionsheet } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Customizing Tokens in gluestack-ui v2 Config File\nDESCRIPTION: This snippet demonstrates how to customize tokens in the gluestack-ui-provider/config.ts file. It shows updating existing tokens, adding new color tokens, and creating custom font size tokens for both light and dark modes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/customizing-theme/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const config = {\n  light: vars({\n\n    ... // other tokens\n    //updated '--color-primary-0' value\n    '--color-primary-0': '#C0C0C0',\n\n    /* Added a new background color for light mode */\n    '--color-background-new': '#BAE7FC',\n\n   /* Add a new token with custom font-size */\n   '--custom-font-size': '80'\n\n  }),\n  dark: vars({\n     ... // other tokens\n      /* Added a new background color for dark mode */\n    '--color-background-new': '#89D6FA',\n\n   /* Add a new token with custom font-size */\n   '--custom-font-size': '80'\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up GluestackUIProvider at Application Root\nDESCRIPTION: Example showing how to wrap your application with the GluestackUIProvider component, which is required for using gluestack-ui components. This provider needs to be placed at the root of your application and configured with the gluestack config.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/themed/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GluestackUIProvider } from '@gluestack-ui/themed';\nimport { config } from '@gluestack-ui/config';\n\n// Write this code snippet at the root of your application\nfunction App({ children }) {\n  return <GluestackUIProvider config={config}>{children}</GluestackUIProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion Component Usage\nDESCRIPTION: Basic implementation example showing the component structure and imports required for using the Accordion component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionTitleText,\n  AccordionContent,\n  AccordionContentText,\n  AccordionIcon,\n} from '@/components/ui/accordion';\n```\n\n----------------------------------------\n\nTITLE: Card Component with Content in gluestack-ui\nDESCRIPTION: Illustrates a Card component with a heading and text content, demonstrating size and variant props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Card/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Card {...props} m=\"$3\">\n  <Heading mb=\"$1\" size=\"md\">\n    Quick Start\n  </Heading>\n  <Text size=\"sm\">Start building your next project in minutes</Text>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button Component with gluestack-ui\nDESCRIPTION: Example of creating a custom Button component using the createButton function from @gluestack-ui/themed, importing necessary subcomponents like Root, Text, Group, and others.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/config-v2/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createButton } from '@gluestack-ui/themed';\nimport {\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n  Icon,\n} from '@gluestack-ui/themed';\n\nexport const Button = createButton({\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n  Icon,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Provider Implementation\nDESCRIPTION: Example of creating a custom provider combining StyledProvider, OverlayProvider, and ToastProvider.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Provider/GluestackUIProvider/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { createProvider } from '@gluestack-ui/provider';\nimport { StyledProvider } from '@gluestack-style/react';\nimport { OverlayProvider } from '@gluestack-ui/overlay';\nimport { ToastProvider } from '@gluestack-ui/toast';\n\nconst GluestackUIStyledProvider = createProvider({ StyledProvider });\n\nconst GluestackUIProvider = ({ children, ...props }: any) => {\n  return (\n    <GluestackUIStyledProvider {...props}>\n      <OverlayProvider>\n        <ToastProvider>{children}</ToastProvider>\n      </OverlayProvider>\n    </GluestackUIStyledProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Modals in React Native\nDESCRIPTION: This code demonstrates how to create and manage multiple modal components in a React Native application using gluestack-ui. It showcases a series of modals for a password reset flow, including forgot password, verification code, and new password setup.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n  const [showModal2, setShowModal2] = useState(false);\n  const [showModal3, setShowModal3] = useState(false);\n  return (\n    <Center>\n      <Center h={400}>\n        <Button onPress={() => setShowModal(true)}>\n          <ButtonText>Forgot password?</ButtonText>\n        </Button>\n      </Center>\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false);\n        }}\n      >\n        <ModalBackdrop />\n        <ModalContent>\n          <ModalHeader borderBottomWidth='$0'>\n          <VStack space='sm'>\n            <Heading size='lg'>Forgot password?</Heading>\n            <Text size='sm'>No worries, we'll send you reset instructions</Text>\n            </VStack>\n          </ModalHeader>\n          <ModalBody>\n            <Input>\n              <InputField placeholder=\"Enter your email\" />\n            </Input>\n          </ModalBody>\n          <ModalFooter borderTopWidth='$0'>\n            <VStack space='lg' w='$full'>\n              <Button\n                onPress={() => {\n                  setShowModal2(true);\n                }}\n              >\n                <ButtonText>Submit</ButtonText>\n              </Button>\n              <HStack>\n                <Button\n                  variant='link'\n                  size='sm'\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                >\n                  <ButtonIcon as={ArrowLeftIcon}/>\n                  <ButtonText >Back to login</ButtonText>\n                </Button>\n              </HStack>\n            </VStack>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        isOpen={showModal2}\n        onClose={() => {\n          setShowModal2(false);\n        }}\n      >\n        <ModalBackdrop />\n        <ModalContent>\n          <ModalHeader borderBottomWidth='$0'>\n          <VStack space='sm'>\n            <Heading size='lg'>Reset password</Heading>\n            <Text size='sm'>A verification code has been sent to you. Enter code below.</Text>\n            </VStack>\n          </ModalHeader>\n          <ModalBody>\n            <Input>\n              <InputField placeholder=\"Enter verification code\" />\n            </Input>\n          </ModalBody>\n          <ModalFooter borderTopWidth='$0'>\n          <VStack space='lg' w='$full'>\n            <Button\n              onPress={() => {\n                setShowModal3(true);\n              }}\n            >\n              <ButtonText>Continue</ButtonText>\n            </Button>\n            <Text size='sm'>Didn't receive the email?\n              <Link ml='$1'><Link.Text size='sm' \n              $dark-color='$textDark200'\n              color='$textLight700'\n              fontWeight='$semibold'>Click to resend</Link.Text></Link>\n            </Text>\n            <HStack space='xs' alignItems='center'>\n              <Button\n                variant='link'\n                size='sm'\n                onPress={() => {\n                  setShowModal2(false);\n                }}\n              >\n                <ButtonIcon as={ArrowLeftIcon}/>\n                <ButtonText >Back to login</ButtonText>\n              </Button>\n            </HStack>\n            </VStack>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        isOpen={showModal3}\n        onClose={() => {\n          setShowModal3(false);\n        }}\n      >\n        <ModalBackdrop />\n        <ModalContent>\n          <ModalHeader borderBottomWidth='$0'>\n          <VStack space='sm'>\n            <Heading size='lg'>Set new password</Heading>\n            <Text size='sm'>Almost done. Enter your new password and you are all set.</Text>\n            </VStack>\n          </ModalHeader>\n          <ModalBody>\n          <VStack space='xl'>\n            <Input>\n              <InputField placeholder=\"New password\" />\n            </Input>\n            <Input>\n              <InputField placeholder=\"Confirm new password\" />\n            </Input>\n            </VStack>\n          </ModalBody>\n          <ModalFooter borderTopWidth='$0'>\n          <VStack space='lg' w='$full'>\n            <Button\n              onPress={() => {\n                setShowModal(false);\n                setShowModal2(false);\n                setShowModal3(false);\n              }}\n            >\n              <ButtonText>Submit</ButtonText>\n            </Button>\n            <HStack space='xs' alignItems='center'>\n              <Button\n                variant='link'\n                size='sm'\n                onPress={() => {\n                  setShowModal3(false);\n                }}\n              >\n                <ButtonIcon as={ArrowLeftIcon}/>\n                <ButtonText >Back to login</ButtonText>\n              </Button>\n            </HStack>\n            </VStack>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using CSS Variables Plugin in React Component\nDESCRIPTION: This snippet demonstrates how to initialize the AddCssTokenVariables plugin and use it to create styled components. It shows how to apply CSS variables derived from theme tokens in the styles of a View and Text component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/CSSVariables/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nInitialize the plugin with: const styledCssTokensVariables = createStyled([new AddCssTokenVariables({})])\n\nconst StyledView = styledCssTokensVariables(\n  View,\n  {\n    w: 200,\n    h: 200,\n    bg: '$blue500',\n  },\n  {\n    descendantStyle: ['_text'],\n  }\n);\n\nconst StyledText = styledCssTokensVariables(\n  Text,\n  {},\n  {\n    ancestorStyle: ['_text'],\n  }\n);\n\nexport function CSSVariables() {\n  return (\n    <Wrapper>\n      <StyledView>\n        <StyledText\n          style={{\n            color: 'var(--gluestack-style-colors-orange300)',\n            margin: 'var(--gluestack-style-space-4)',\n          }}\n        >\n          Hello, World!\n        </StyledText>\n      </StyledView>\n    </Wrapper>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Menu with Icons - React/JSX\nDESCRIPTION: Example of a themed Menu component with icon-based menu items, including community, plugins, theme, settings and account options. The menu is triggered by a button and uses custom placement.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Menu/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu\n  placement=\"top\"\n    trigger={({ ...triggerProps }) => {\n      return (\n        <Button {...triggerProps}>\n          <ButtonText>Menu</ButtonText>\n        </Button>\n      );\n    }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n      <Icon as={GlobeIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Community\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n        <Icon as={PuzzleIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Plugins\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n        <Icon as={PaintBucket} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Theme\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n        <Icon as={SettingsIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Settings\n        </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Add account\" textValue=\"Add account\">\n        <Icon as={AddIcon} size=\"sm\" mr='$2'/>\n        <MenuItemLabel size='sm'>\n          Add account\n        </MenuItemLabel>\n    </MenuItem>\n  </Menu>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Props in React Native\nDESCRIPTION: This snippet outlines the props for the Button component, which extends React Native's Pressable component. It includes properties for action type, variant, and size.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  action: 'primary' | 'secondary' | 'positive' | 'negative' | 'default',\n  variant: 'link' | 'outline' | 'solid',\n  size: 'xs' | 'sm' | 'md' | 'lg' | 'xl'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Component Usage\nDESCRIPTION: Example showing the basic structure of implementing a Toast component with title and description\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Toast>\n    <ToastTitle />\n    <ToastDescription />\n  </Toast>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic AlertDialog Component Structure\nDESCRIPTION: This code snippet demonstrates the basic structure of an AlertDialog component with its sub-components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <AlertDialog>\n    <AlertDialogBackdrop />\n    <AlertDialogContent>\n      <AlertDialogHeader>\n        <AlertDialogCloseButton />\n      </AlertDialogHeader>\n      <AlertDialogBody />\n      <AlertDialogFooter />\n    </AlertDialogContent>\n  </AlertDialog>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Actionsheet Styling Props Table in JSX\nDESCRIPTION: This code snippet demonstrates how to create a table displaying the styling props for Actionsheet descendants using JSX components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider>\n  <TableContainer>\n    <Table>\n      <Table.THead>\n        <Table.TR>\n          <Table.TH>\n            <Table.TText>Sx Prop</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Description</Table.TText>\n          </Table.TH>\n        </Table.TR>\n      </Table.THead>\n      <Table.TBody>\n        <Table.TR>\n          <Table.TD>\n            <Table.TText>\n              <InlineCode>_text</InlineCode>\n            </Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>{`Prop to style ActionsheetItemText Component`}</Table.TText>\n          </Table.TD>\n        </Table.TR>\n        <Table.TR>\n          <Table.TD>\n            <Table.TText>\n              <InlineCode>_icon</InlineCode>\n            </Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>{`Prop to style ActionsheetIcon Component`}</Table.TText>\n          </Table.TD>\n        </Table.TR>\n      </Table.TBody>\n    </Table>\n  </TableContainer>\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: Rendering Skeleton Components in React\nDESCRIPTION: This code snippet demonstrates how to use the Skeleton and SkeletonText components from gluestack-ui to create a loading placeholder for content. It includes a box with a skeleton image, text, and avatar.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Skeleton/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Skeleton, SkeletonText } from \"@/components/ui/skeleton\";\n\nfunction Example() {\n  return (\n    <Box className=\"w-[325px] gap-4 p-3 rounded-md bg-background-100\">\n      <Skeleton variant=\"sharp\" className=\"h-[150px]\" />\n      <SkeletonText _lines={3} className=\"h-3\" />\n      <HStack className=\"gap-2 align-middle\">\n        <Skeleton variant=\"circular\" className=\"h-[24px] w-[24px] mr-2\" />\n        <SkeletonText _lines={2} gap={1} className=\"h-2 w-2/5\" />\n      </HStack>\n      </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Box Component Margin and Padding Examples\nDESCRIPTION: Demonstrates various ways to apply margin and padding to Box components, including responsive styles using media queries.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <Box borderRadius=\"$md\" bg=\"$primary200\" m=\"$2\" p=\"$5\" />\n  <Box borderRadius=\"$md\" bg=\"$primary200\" mx=\"auto\" px=\"$20\" py=\"$5\"  />\n  <Box  borderRadius=\"$md\"\n    bg=\"$primary200\"\n    sx={{\n      '@sm': { m: '$2' },\n      '@lg': {\n        m: '$3',\n      },\n    }}\n    mt=\"$2\"\n    pt=\"$10\"\n    pr=\"$10\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Scheme Sliders in React Native\nDESCRIPTION: This example showcases multiple sliders with different color schemes. Each slider is customized with a unique background color for the track and thumb.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  return (\n    <VStack space=\"4xl\">\n    <Center w=\"$80\">\n        <Slider   defaultValue={45} sliderTrackHeight={4}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$emerald600\"/>\n          </SliderTrack >\n          <SliderThumb bg=\"$emerald600\" $active-outlineColor=\"$emerald500\" />\n        </Slider>\n    </Center>\n     <Center w=\"$80\">\n        <Slider   defaultValue={45} sliderTrackHeight={4}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$amber600\"/>\n          </SliderTrack >\n          <SliderThumb bg=\"$amber600\" $active-outlineColor=\"$amber500\" />\n        </Slider>\n    </Center>\n     <Center w=\"$80\">\n        <Slider  defaultValue={45} sliderTrackHeight={4}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$fuchsia600\"/>\n          </SliderTrack >\n          <SliderThumb bg=\"$fuchsia600\" $active-outlineColor=\"$fuchsia500\"/>\n        </Slider>\n    </Center>\n     <Center w=\"$80\">\n        <Slider   defaultValue={45} sliderTrackHeight={4}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$cyan600\"/>\n          </SliderTrack >\n          <SliderThumb bg=\"$cyan600\" $active-outlineColor=\"$cyan500\" />\n        </Slider>\n    </Center>\n    </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Button Styles with sx Prop in React TSX\nDESCRIPTION: This snippet demonstrates how to use the sx prop to override styles for a Button component. It changes the background color, adds margin, and sets hover styles. The sx prop accepts the same style object as the base style, allowing for flexible style customization.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/OverridingStyles/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  size=\"lg\"\n  sx={{\n      \"marginBottom\": '$4',\n      \"bg\": 'pink',\n      \":hover\": {\n          \"bg\": 'orange',\n      },\n  }}\n>\n  <Button.Text>Button</Button.Text>\n<Button>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Popover Component in React\nDESCRIPTION: This code snippet demonstrates the basic structure and usage of the Popover component and its sub-components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Popover>\n    <PopoverBackdrop />\n    <PopoverContent>\n      <PopoverArrow />\n      <PopoverHeader>\n        <PopoverCloseButton />\n      </PopoverHeader>\n      <PopoverBody />\n      <PopoverFooter />\n    </PopoverContent>\n  </Popover>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Styling Props in React Native\nDESCRIPTION: This code snippet outlines the styling props for child components of the Checkbox, including _text for CheckboxLabel, _icon for CheckboxIcon, and _indicator for CheckboxIndicator.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.TBody>\n  <Table.TR>\n    <Table.TD>\n      <Table.TText>\n        <InlineCode>_text</InlineCode>\n      </Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>{`Prop to style CheckboxLabel Component`}</Table.TText>\n    </Table.TD>\n  </Table.TR>\n  <!-- More table rows for other styling props -->\n</Table.TBody>\n```\n\n----------------------------------------\n\nTITLE: Using useStyled Hook with React Native View\nDESCRIPTION: This example demonstrates how to use the useStyled hook to apply a background color to a React Native View component. It accesses the primary500 color from the styled configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-styled/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { useStyled } from '@gluestack-ui/themed';\n\nconst Example = () => {\n  const styled = useStyled();\n  return (\n    <View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: styled.config.tokens.colors.primary500,\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Component with Next.js\nDESCRIPTION: This code snippet illustrates how to customize the Image component to use Next.js Image component instead of the default Native Image component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Image/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image';\n\n// Using the Next Image component\nconst StyledImage = styled(Image, styling, componentConfig, extenedBaseConfig);\n\n// if some styling are direct props, you can pass them as props in the styling\nprops: {\n  w: 100,\n  h: 100,\n  borderRadius: '$full',\n}\n\n// import the createImage function\nimport { createImage } from '@gluestack-ui/image';\n\n// Understanding the API\nconst Image = createImage({\n  Root: StyledImage\n});\n\n// you can also /style/docs/getting-started/styled to style the component\n\nexport default () => <Image />;\n```\n\n----------------------------------------\n\nTITLE: Animated Image Component with Exit Animation\nDESCRIPTION: Example of creating a styled animated image component with exit animation properties\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/AnimationPlugin/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledMotionImage = styled(AnimatedImage, {\n  ':animate': {\n    zIndex: 1,\n    x: 0,\n    opacity: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: VStack Component with Reversed Order\nDESCRIPTION: Example of using the VStack component with reversed order of elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/VStack/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <VStack space='md'>\n          <Box className='w-20 h-20 bg-primary-300' />\n          <Box className='w-20 h-20 bg-primary-400' />\n          <Box className='w-20 h-20 bg-primary-500' />\n        </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Heading Component Usage\nDESCRIPTION: A simple example of using the Heading component in a React function component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Heading } from \"@/components/ui/heading\";\n\nfunction Example() {\n  return (\n    <Heading>I am a Heading</Heading>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Spinner with Label in React Native\nDESCRIPTION: This example demonstrates how to create a Spinner component with an accompanying label using HStack for layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Spinner } from \"@/components/ui/spinner\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <HStack space=\"sm\" >\n          <Spinner/>\n          <Text size=\"md\">Please Wait</Text>\n        </HStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Component with Theme Extension (JSX)\nDESCRIPTION: This code snippet shows how to create a styled component using the styled function from gluestack-style. It demonstrates how to properly name the component to match the configuration and apply variants.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/CustomizingComponents/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyButton = styled(Pressable, {\n  bg: '$red500',\n  p: '$3',\n},\n{\n  componentName:\"Button\" // pass same component name which is passed in config\n});\n\nconst export Button = () => <MyButton  variant=\"secondary\"/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing ImageViewer Component in React Native\nDESCRIPTION: Demonstrates the complete implementation of an ImageViewer component with image display, modal control, and close button functionality. Uses StatusBar and custom styling for presentation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/ImageViewer/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n        const [visible, setVisible] = React.useState(false);\n        const Images = [{ id: 1, url: 'https://img.freepik.com/free-photo/young-boy-learning-how-ride-horse_23-2150460636.jpg' }];\n        return (\n          <Center>\n          <StatusBar hidden={visible}/>\n            <Pressable onPress={() => setVisible(true)}>\n              <Image\n                source={{ uri: Images[0].url }}\n                className=\"w-[200px] h-[200px]\"\n                resizeMode=\"cover\"\n              />\n            </Pressable>\n            <ImageViewer isOpen={visible} onClose={() => setVisible(false)}>\n              <ImageViewerBackdrop>\n                <ImageViewerContent\n                  images={Images}\n                  renderImages={({item, index}) => (\n                    <ImageViewerImage source={{ uri: item.url }} />\n                  )}\n                  keyExtractor={(item, index) => item.id + '-' + index}\n                >\n                <ImageViewerCloseButton>\n                  <Icon as={CloseIcon} className='text-secondary-500'/>\n                </ImageViewerCloseButton>\n              </ImageViewerContent>\n            </ImageViewerBackdrop>\n          </ImageViewer>\n        </Center>\n        );\n      }\n```\n\n----------------------------------------\n\nTITLE: Using FontResolver Plugin for Advanced Font Handling\nDESCRIPTION: Advanced example showing how to use the FontResolver plugin from @gluestack-style/react to handle fonts in a more flexible way, including creating a styled text component with specific font properties.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Fonts/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { FontResolver } from '@gluestack-style/react';\n\n// const fontMapper = (style: any) => {\n// };\n\nexport const config = {\n  aliases: {},\n  tokens: {},\n  plugins: [\n    new FontResolver({\n      // mapFonts: fontMapper,\n    }),\n  ],\n};\n\nconst StyledText = styled(Text, {\n  fontFamily: 'Inter',\n  fontWeight: 400,\n  fontStyle: 'regular',\n  fontSize: '$xl',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Responsive Component with Props\nDESCRIPTION: Renders the Responsiveness component with starter kit configuration props to demonstrate responsive design capabilities.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/starter-kit/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Responsiveness {...starterKit} />\n```\n\n----------------------------------------\n\nTITLE: Applying Color Mode Styling in gluestack-ui Buttons\nDESCRIPTION: This code demonstrates how to apply different background colors to a Button component based on the color mode. It uses $dark-bg and $light-bg properties to set different background colors for dark and light modes respectively.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/color-mode/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n <Button\n $dark-bg=\"$blue600\"\n  $light-bg=\"$red600\"\n        >\n          <ButtonText>Hello world</ButtonText>\n        </Button>\n     </>\n```\n\n----------------------------------------\n\nTITLE: Configuring GluestackUIProvider for Web\nDESCRIPTION: Create and configure the GluestackUIProvider component for web platforms.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n%%-- File: core-components/nativewind/gluestack-ui-provider/index.web.tsx --%%\n```\n\n----------------------------------------\n\nTITLE: Rendering Themed Icon with Props in React\nDESCRIPTION: Shows how to render a themed Icon component with customizable props in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Icon/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon as={CalendarDaysIcon}  {...props}/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Heading Sizes in React\nDESCRIPTION: Demonstrates how to render headings of different sizes using the Heading component. Maps through an array of size options to display various heading sizes from xs to 5xl.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Typography/Heading/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const sizes = [\n    'xs',\n    'sm',\n    'md',\n    'lg',\n    'xl',\n    '2xl',\n    '3xl',\n    '4xl',\n    '5xl',\n  ];\n  return (\n      <Center>\n        {sizes.map((size) => (\n          <Heading size={size}>{size}</Heading>\n        ))}\n      </Center>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Dashboard App Example in Storybook\nDESCRIPTION: This code renders a responsive dashboard app component with specified configuration and menu items displayed. It sets the Storybook Meta title and includes a description with links to the live example.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/dashboard-app/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"with-nativewind/Apps/Dashboard App\" />\n\n# Dashboard App\n\nThis [Dashboard App](https://ui-example-nativewind.vercel.app/) is built using `gluestack-ui v2`.\n\n<Responsiveness {...dashboard} showMenuItems={true} />\n\nGitHub link for this [Dashboard App](https://github.com/gluestack/ui-example-nativewind).\n```\n\n----------------------------------------\n\nTITLE: Using useBreakpointValue for Responsive Layout in React\nDESCRIPTION: This example demonstrates how to use the useBreakpointValue hook to create a responsive layout. It changes the flex direction based on the current breakpoint, switching from column to row on small screens and above.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-breakpoint-value/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst BreakPointValue = () => {\n  const flexDir = useBreakpointValue({\n    base: 'column',\n    sm: 'row',\n  });\n\n  return (\n    <View\n      style={{\n        flexDirection: flexDir,\n        gap: 10,\n      }}\n    >\n      <StyledBox>\n        <StyledText>Universal</StyledText>\n      </StyledBox>\n      <StyledBox>\n        <StyledText>Performant</StyledText>\n      </StyledBox>\n      <StyledBox>\n        <StyledText>Accessible</StyledText>\n      </StyledBox>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Basic ImageViewer Component\nDESCRIPTION: Example showing how to implement a basic ImageViewer with close button functionality and image preview. The component supports image viewing with backdrop, content management, and close button functionality. It uses React Native's core components and includes status bar handling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/ImageViewer/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageViewer, ImageViewerBackdrop, ImageViewerContent, ImageViewerCloseButton, ImageViewerImage } from '@/components/ui/image-viewer';\nimport { CloseIcon, Icon } from '@/components/ui/icon';\nimport React, { useState } from 'react';\nimport { Pressable, Image } from 'react-native';\nimport { Center } from '@/components/ui/center';\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Box Component with Ref Example\nDESCRIPTION: Advanced example showing how to use the Box component with refs to manipulate styling programmatically.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Box/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const myRef = useRef({});\n  useEffect(() => {\n    const styleObj = {\n      borderWidth: 2,\n      borderRadius: 4,\n      borderColor: '#1A91FF',\n    };\n  if(myRef.current && myRef.current.setNativeProps){\n     myRef.current.setNativeProps({\n      style: styleObj,\n     });\n    }\n  }, [myRef]);\nreturn (\n  <Box \n  h={100}\n  w={100}\n  bg=\"$primary100\"\n  ref={myRef} />\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Component Structure and Props\nDESCRIPTION: Defines the main Modal component that inherits from React Native's View component. Details various props for controlling modal behavior including open state, focus management, keyboard handling, and overlay interactions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Modal/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ModalProps extends ViewProps {\n  isOpen?: boolean;\n  onClose?: () => any;\n  useRNModal?: boolean;\n  defaultIsOpen?: boolean;\n  initialFocusRef?: React.RefObject<any>;\n  finalFocusRef?: React.RefObject<any>;\n  avoidKeyboard?: boolean;\n  closeOnOverlayClick?: boolean;\n  isKeyboardDismissable?: boolean;\n  children?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Textarea Component in GlueStack UI\nDESCRIPTION: Demonstrates how to import and create a basic textarea component using the createTextarea function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/textarea/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, Input } from '../components/core/text-area/styled-components';\nimport { createTextarea } from '@gluestack-ui/textarea';\nconst Textarea = createTextarea({\n  Root,\n  Input,\n});\n```\n\n----------------------------------------\n\nTITLE: Accordion Component Structure Example\nDESCRIPTION: Example showing the basic structure and nesting of Accordion component elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Accordion>\n    <AccordionItem>\n      <AccordionHeader>\n        <AccordionTrigger>\n          <AccordionTitleText />\n          <AccordionIcon />\n        </AccordionTrigger>\n      </AccordionHeader>\n      <AccordionContent>\n        <AccordionContentText />\n      </AccordionContent>\n    </AccordionItem>\n  </Accordion>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component in React\nDESCRIPTION: Shows how to import the Input component from the gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Input/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { Input } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Image Component\nDESCRIPTION: Example of how to import and use the Image component in a React or React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Image/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from '@/components/ui/image';\n\nexport default () => <Image source={source} />;\n```\n\n----------------------------------------\n\nTITLE: Basic Styling with Utility Props in gluestack-style\nDESCRIPTION: Demonstrates how to apply styling properties and aliases directly to a component using utility props, which are internally converted to sx props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/UtilityProps/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StyledButton borderColor=\"$grey600\" bg=\"$grey700\" borderRadius=\"$md\" />\n```\n\n----------------------------------------\n\nTITLE: Pressable with State-Based Child Elements\nDESCRIPTION: Example demonstrating how to change child elements based on the pressed state of the Pressable component using a render prop pattern.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pressable } from \"@/components/ui/pressable\";\nimport { Text } from \"@/components/ui/text\";\n\tfunction Example() {\n  return (\n    <Pressable className=\"p-16 bg-primary-500\">\n      {({ pressed }) => (\n        <Text className={pressed ? 'text-pink-400' : 'text-amber-400'}>\n          PRESSABLE\n        </Text>\n      )}\n    </Pressable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Border Styles with gluestack-ui Box Component\nDESCRIPTION: This snippet demonstrates how to apply various border properties such as borderWidth, borderColor, and directional border properties to Box components in gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n      <Box p=\"$5\" m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" borderWidth=\"$1\" />\n      <Box\n        p=\"$5\"\n        m=\"$2\"\n        borderRadius=\"$md\"\n        bg=\"$primary200\"\n        borderWidth=\"$2\"\n        borderColor=\"$red400\"\n      />\n      <Box\n        p=\"$5\"\n        m=\"$2\"\n        borderRadius=\"$md\"\n        bg=\"$primary200\"\n        borderWidth=\"$2\"\n        borderBottomColor=\"$red500\"\n        borderTopWidth=\"$4\"\n      />\n     </>\n```\n\n----------------------------------------\n\nTITLE: Using Global Style Injector with StyledProvider\nDESCRIPTION: Example showing how to use the globalStyleInjector prop to inject global styles into the application using createGlobalStylesWeb.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/StyledProvider/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pressable, Text } from 'react-native';\nimport {\n  styled,\n  StyledProvider,\n  createGlobalStylesWeb,\n} from '@gluestack-style/react';\nimport { config } from './gluestack-style.config';\n\nconst globalStyles = createGlobalStylesWeb({\n  'body': {\n    bg: '$red500',\n  },\n  '.className': {\n    body: {\n      bg: '$info600',\n    },\n  },\n});\n\nconst StyledButton = styled(Pressable, {\n  bg: '$primary600',\n  px: '$6',\n  py: '$4',\n  _dark: {\n    bg: '$info600',\n  },\n  _light: {\n    bg: '$info800',\n  },\n});\n\nconst App = () => {\n  return (\n    <StyledProvider config={config} globalStyleInjector={globalStyles}>\n      <StyledButton />\n    </StyledProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Themes in gluestack-style (JSX)\nDESCRIPTION: This snippet demonstrates how to create a configuration object using createConfig from @gluestack-style/react. It shows how to define custom themes and variants for components like Button.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/CustomizingComponents/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createConfig } from \"@gluestack-style/react\"\nexport const config = createConfig({\n  aliases: {},\n  tokens: {},\n   components: {\n    Button: {  // write same component name which is passed in styled\n      theme: {\n        'bg': '$primary500',\n        variants:{\n          variant:{\n            secondary:{\n              bg:'$secondary500',\n            }\n          }\n        }\n      },\n      componentConfig: {\n        descendantStyle: ['_text'],\n      },\n    },\n  },\n} as const);\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion with Default Value in React Native\nDESCRIPTION: Demonstrates how to create an accordion with a default opened item using the defaultValue prop. The implementation includes three accordion items with dividers and the third item set as default open.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion, AccordionItem, AccordionHeader, AccordionTrigger, AccordionTitleText, AccordionContentText, AccordionIcon, AccordionContent } from \"@/components/ui/accordion\";\nimport { Divider } from \"@/components/ui/divider\";\nimport { MinusIcon, PlusIcon } from \"lucide-react-native\";\n\nfunction App(){\n    return (\n          <Accordion variant=\"unfilled\" type=\"single\" defaultValue=\"item-3\" className=\"w-[90%] m-5\">\n      <AccordionItem value=\"item-1\" className=\"rounded-lg\">\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                  What is the defaultValue prop of the Accordion component?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon}  />\n                  ) : (\n                    <AccordionIcon as={PlusIcon}  />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            The defaultValue prop of the Accordion component is used to define\n            the open item by default. It is used when the Accordion component is\n            uncontrolled.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <Divider />\n      <AccordionItem value=\"item-2\" className=\"rounded-lg\">\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                   How many size variants does the Accordion component have?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            The Accordion component has three size variants - sm, md and lg.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <Divider />\n           <AccordionItem value=\"item-3\" className=\"rounded-lg\">\n        <AccordionHeader>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                  Can I nest my accordions?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={MinusIcon} />\n                  ) : (\n                    <AccordionIcon as={PlusIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent>\n          <AccordionContentText>\n            Yes, you can nest your accordions. Refer to the nested accordion example in the docs.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Component Structure\nDESCRIPTION: Example demonstrating the basic structure of a Slider component with track and thumb elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Slider>\n    <SliderTrack>\n      <SliderFilledTrack />\n    </SliderTrack>\n    <SliderThumb />\n  </Slider>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Usage in React Native\nDESCRIPTION: This code snippet demonstrates the basic structure of using a ScrollView component in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/ScrollView/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <ScrollView></ScrollView>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component with Variants in gluestack-ui\nDESCRIPTION: A basic button component example with multiple property configurations. This snippet demonstrates how to create a button with primary action, solid variant, large size, and disabled state. The Button wraps ButtonText to create a complete, styled button component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/getting-started/vscode-extensions/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button action='primary' variant='solid' size='lg' isDisabled>\n  <ButtonText>Button</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Basic Box Component Usage Example\nDESCRIPTION: Example showing how to use the Box component with styling and nested Text component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Box/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Box\n  className=\"bg-primary-500 p-5\"\n>\n  <Text className='text-typography-0'>\n    This is the Box\n  </Text>\n</Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Styling\nDESCRIPTION: Demonstrates how to apply different styles based on platform (web, iOS, Android).\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/Styled/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledButton = styled(\n  Pressable,\n  {\n    bg: '$primary600',\n    px: '$6',\n    py: '$4',\n    _web: {\n      bg: '$amber500',\n    },\n    _ios: {\n      bg: '$blue500',\n    },\n    _android: {\n      bg: '$red500',\n    },\n  },\n  {}\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Typography Tokens with createConfig in gluestack-ui\nDESCRIPTION: This code snippet demonstrates how to customize typography tokens in gluestack-ui by using the createConfig function. It shows how to import the default configuration and override specific token values, such as adding a new font size while preserving other default tokens.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/default-tokens/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createConfig } from '../../core-components/themed/gluestack-ui-provider/config';\nimport {config as defaultConfig } from '../../core-components/themed/gluestack-ui-provider/config';\n\nconst config = createConfig({\n  ...defaultConfig,\n  tokens: {\n    ...defaultConfig.tokens,\n    fontSizes: {\n      ...defaultConfig.tokens.fontSizes,\n      newFontSize: 90,\n    },\n    ...// other tokens\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: HStack with Multiple Box Elements\nDESCRIPTION: Example showing HStack component arranging multiple Box elements horizontally with different background colors\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/HStack/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack {...props}>\n  <Box w='$20' h='$20' bg='$blue300' />\n  <Box w='$20' h='$20' bg='$blue400' />\n  <Box w='$20' h='$20' bg='$blue500' />\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Implementing useMedia Hook in a React Component\nDESCRIPTION: This example demonstrates how to use the useMedia hook in a React component to create responsive layouts based on screen size breakpoints.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useMedia/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MediaExample = () => {\n  const media = useMedia();\n\n  return (\n    <View\n      style={{\n        flexDirection: media.lg ? 'row' : 'column',\n        gap: 10,\n      }}\n    >\n      <StyledBox>\n        <StyledText>Universal</StyledText>\n      </StyledBox>\n      <StyledBox>\n        <StyledText>Performant</StyledText>\n      </StyledBox>\n      <StyledBox>\n        <StyledText>Accessible</StyledText>\n      </StyledBox>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Input Component Structure in JSX\nDESCRIPTION: Demonstrates the basic structure of an Input component with InputField and InputSlot.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Input/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Input>\n    <InputField />\n    <InputSlot>\n      <InputIcon>{/* Some Icon Component */}</InputIcon>\n    </InputSlot>\n  </Input>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/select Package with NPM\nDESCRIPTION: Command to install the Select component package using NPX, which adds the component to your project's dependencies.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/select/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx install @gluestack-ui/select\n```\n\n----------------------------------------\n\nTITLE: Using useToken Hook with React Native View\nDESCRIPTION: This example demonstrates how to use the useToken hook to resolve a color token and apply it as a background color to a React Native View component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-token/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { useToken } from '@gluestack-ui/themed';\n\nfunction Example() {\n  const resolvedGreen = useToken('colors', 'green500');\n  return (\n    <View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: resolvedGreen,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Multiple Accordion with Chevron Icons\nDESCRIPTION: Example of a customized accordion component that supports multiple open items simultaneously. Features custom styling, chevron icons for expand/collapse indicators, and demonstrates handling expanded states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion, AccordionItem, AccordionHeader, AccordionTrigger, AccordionTitleText, AccordionContentText, AccordionIcon, AccordionContent } from \"@/components/ui/accordion\";\nimport { ChevronUpIcon, ChevronDownIcon } from \"@/components/ui/icon\";\n\nfunction App(){\n    return (\n      <Accordion\n      className=\"w-[90%] m-5 border border-outline-300\"\n      type=\"multiple\"\n    >\n      <AccordionItem value=\"a\"\n         className=\"border-b border-outline-300\"\n        >\n        <AccordionHeader \n        className=\"bg-background-0\"\n        >\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n           What does the \"type\" prop of the Accordion component do?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={ChevronUpIcon} />\n                  ) : (\n                    <AccordionIcon as={ChevronDownIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent className=\"mt-0 pt-2 bg-background-50\"\n        >\n          <AccordionContentText>\n            The type prop determines whether one or multiple items can be\n            opened at the same time. The default value is \"single\" which means\n            only one item can be opened at a time. \n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem\n        value=\"b\"\n        className=\"border-b border-outline-300\"\n      >\n        <AccordionHeader     \n        sx={{\n            backgroundColor: \"$backgroundLight0\",\n          _dark: {\n            backgroundColor: \"$backgroundDark950\"\n          }\n        }}>\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                 Can I disable the whole accordion?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={ChevronUpIcon} />\n                  ) : (\n                    <AccordionIcon as={ChevronDownIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent className=\"mt-0 pt-2 bg-background-50\"\n        >\n          <AccordionContentText>\n            Yes, you can disable the whole accordion by setting the isDisabled\n            prop to true on the Accordion component.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem\n        value=\"c\"\n      >\n        <AccordionHeader\n        className=\"bg-background-0\"\n        >\n          <AccordionTrigger>\n            {({ isExpanded }) => {\n              return (\n                <>\n                  <AccordionTitleText>\n                 What is a controlled accordion? How can I make it controlled?\n                  </AccordionTitleText>\n                  {isExpanded ? (\n                    <AccordionIcon as={ChevronUpIcon} />\n                  ) : (\n                    <AccordionIcon as={ChevronDownIcon} />\n                  )}\n                </>\n              );\n            }}\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent className=\"mt-0 pt-2 bg-background-50\"\n        >\n          <AccordionContentText>\n      Controlled components refer to the components where the state and behaviors are controlled by the Parent component. You can make the accordion a controlled component by passing the value prop to the Accordion component and setting the onValueChange prop to update the value prop. Refer to the controlled accordion example in the docs.\n          </AccordionContentText>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Component Usage in React\nDESCRIPTION: Demonstrates the basic structure of using an Icon component in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Icon/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Icon as={} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Different Heading Sizes with the Heading Component in React\nDESCRIPTION: This snippet demonstrates how to render different sizes of the Heading component. It maps through an array of size options ('xs' through '5xl') and renders each with its size value as text content, all centered in the layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const sizes = [\n    'xs',\n    'sm',\n    'md',\n    'lg',\n    'xl',\n    '2xl',\n    '3xl',\n    '4xl',\n    '5xl',\n  ];\n  return (\n      <Center>\n        {sizes.map((size) => (\n          <Heading size={size} textAlign='center'>{size}</Heading>\n        ))}\n      </Center>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Border Radius in gluestack-ui Box Components\nDESCRIPTION: This example shows different ways to apply border radius to Box components, including uniform radius, full (circular) radius, and directional border radius on specific corners.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n      <Box p=\"$5\" m=\"$2\" bg=\"$primary200\"  borderRadius=\"$md\" />\n      <Box p=\"$5\" m=\"$2\" bg=\"$primary200\"  borderRadius=\"$full\" />\n      <Box p=\"$5\" m=\"$2\" bg=\"$primary200\" borderTopLeftRadius=\"$lg\" borderBottomRightRadius=\"$md\" />\n     </>\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Component Usage with Info Icon\nDESCRIPTION: Example showing how to implement a basic Alert component with an info icon and text message\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert mx='$2.5'  {...props}>\n  <AlertIcon as={InfoIcon} mr=\"$3\"  />\n  <AlertText>\n    We have updated our terms of service. Please review and accept to continue using our service.\n  </AlertText>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Component Structure in React\nDESCRIPTION: Example of a basic Popover component structure using gluestack-ui subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Popover>\n    <PopoverBackdrop />\n    <PopoverContent>\n      <PopoverArrow />\n      <PopoverHeader>\n        <PopoverCloseButton />\n      </PopoverHeader>\n      <PopoverBody />\n      <PopoverFooter />\n    </PopoverContent>\n  </Popover>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration Object with Type Assertion\nDESCRIPTION: This snippet shows how to create a configuration object using createConfig function with proper type assertion to enable TypeScript support for aliases and tokens.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/TypeScript/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createConfig } from '@gluestack-style/react';\n\nexport const config = createConfig({\n  aliases: {\n    bg: 'backgroundColor',\n    p: 'padding',\n    m: 'margin',\n    /* ... */\n  },\n  tokens: {\n    colors: {\n      rose50: '#fff1f2',\n      rose100: '#ffe4e6',\n      /* ... */\n    },\n    fonts: {\n      /* ... */\n    },\n    space: {\n    '0': 0,\n    '0.5': 2,\n    /* ... */\n    },\n    fontSizes: {\n      /* ... */\n    },\n  },\n  globalStyle: {\n    /* ... */\n  },\n} as const);\n```\n\n----------------------------------------\n\nTITLE: Rendering Menu with Disabled Items in React Native\nDESCRIPTION: This example shows how to create a Menu component with a disabled menu item. It uses the 'disabledKeys' prop to specify which items should be disabled, demonstrating the component's ability to handle conditional item states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu\n  placement=\"top\"\n  disabledKeys={['Theme']}\n    trigger={({ ...triggerProps }) => {\n      return (\n        <Button {...triggerProps}>\n          <ButtonText>Menu</ButtonText>\n        </Button>\n      );\n    }}\n  >\n    <MenuItem key=\"Community\" textValue=\"Community\">\n      <Icon as={GlobeIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Community\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Plugins\" textValue=\"Plugins\">\n      {/* PuzzleIcon is imported from 'lucide-react-native' */}\n      <Icon as={PuzzleIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Plugins\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Theme\" textValue=\"Theme\">\n      {/* PaintBucket is imported from 'lucide-react-native' */}\n      <Icon as={PaintBucket} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>Theme</MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Settings\" textValue=\"Settings\">\n      <Icon as={SettingsIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Settings\n      </MenuItemLabel>\n    </MenuItem>\n    <MenuItem key=\"Add account\" textValue=\"Add account\">\n      <Icon as={AddIcon} size=\"sm\" mr='$2'/>\n      <MenuItemLabel size='sm'>\n        Add account\n      </MenuItemLabel>\n    </MenuItem>\n  </Menu>\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Tooltip with AnimatePresence\nDESCRIPTION: Example of creating a tooltip component with animation support using AnimatePresence for exit animations.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Animations/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AnimatePresence } from '@gluestack-style/animation-resolver';\n\nexport const Tooltip = createTooltip({\n  Root,\n  Content,\n  AnimatePresence, // Can be AnimatePresence from the library you are using\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Pressable Component in React\nDESCRIPTION: Shows how to import the Pressable component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Pressable/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { Pressable } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing HStack Component in React Native\nDESCRIPTION: This code snippet shows how to import and use the HStack component in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/HStack/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HStack } from '@/components/ui/hstack';\n\nexport default () => <HStack />;\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Link Component\nDESCRIPTION: Steps for manually installing and setting up the Link component in a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/link\n```\n\n----------------------------------------\n\nTITLE: Basic Center Component Usage in JSX\nDESCRIPTION: This example illustrates the basic structure of using the Center component in a React component. It demonstrates the minimal code required to implement the Center component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/Center/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Center />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Reversed HStack in React Native\nDESCRIPTION: This example demonstrates how to use the HStack component with the reversed prop to reverse the order of horizontally stacked elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/HStack/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack space=\"md\" reversed>\n  <Box w='$20' h='$20' bg='$primary200' />\n  <Box w='$20' h='$20' bg='$primary400' />\n  <Box w='$20' h='$20' bg='$primary600' />\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Popover Basic Structure\nDESCRIPTION: Basic anatomy of a Popover component showing the proper nesting of subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Popover/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Popover>\n    <PopoverBackdrop />\n    <PopoverContent>\n      <PopoverArrow />\n      <PopoverHeader>\n        <PopoverCloseButton />\n      </PopoverHeader>\n      <PopoverBody />\n      <PopoverFooter />\n    </PopoverContent>\n  </Popover>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoints in Styled Components\nDESCRIPTION: Example of using the defined breakpoints in a styled component. This demonstrates how to apply responsive styles, hover states, focus states, and dark/light mode variations at specific breakpoints.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/Breakpoints/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyButton = styled(Pressable, {\n  'bg': '$red500',\n  'p': '$3',\n  'shadow': '$4',\n  '@md': {\n    'bg': '$blue500',\n    ':hover': {\n      'bg': '$green500',\n      ':focus': {\n        bg: 'purple',\n      },\n    },\n    '_dark': {\n      bg: '$red500',\n    },\n    '_light': {\n      bg: '$blue500',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Slider with Icon in React\nDESCRIPTION: This code shows how to create a customized Slider with an icon for brightness control. It incorporates a lightbulb icon within the slider thumb and uses custom styling with amber colors to enhance the visual representation of brightness control.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Slider/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(55);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n    <VStack space=\"lg\">\n    <Text size=\"lg\">Brightness</Text>\n    <Center w=\"$72\">\n        <Slider\n          sliderTrackHeight={6}\n          size='lg'\n          value={sliderValue}\n          onChange={(value) => {\n          handleChange(value);\n          }}>\n          <SliderTrack>\n            <SliderFilledTrack bg=\"$amber600\"/>\n          </SliderTrack>\n           <SliderThumb bg=\"$amber600\" p='$1' $active-outlineColor=\"$amber500\">\n            <Icon as={LightbulbIcon} color=\"white\" size=\"sm\"/>\n          </SliderThumb>\n        </Slider>\n    </Center>\n    </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Fab Component\nDESCRIPTION: This example demonstrates the basic structure of using the Fab component with its subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Fab>\n    <FabLabel />\n    <FabIcon />\n  </Fab>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Tailwind CSS IntelliSense Extension for gluestack-UI\nDESCRIPTION: This configuration adds support for Tailwind CSS IntelliSense in VSCode when using the tva function in gluestack-UI. It allows the editor to recognize Tailwind classes within the tva function calls and provide autocompletion and validation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/tooling-setup/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"tailwindCSS.experimental.classRegex\": [\n      [\"tva\\\\((([^()]*|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"]\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Using PresenceTransition Component in React\nDESCRIPTION: Basic example of importing and implementing the PresenceTransition component from the @gluestack-ui/transitions package in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/transitions/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PresenceTransition } from '@gluestack-ui/transitions';\n\nfunction Transitions() {\n  return (\n    <PresenceTransition>{/* Your Component goes here! */}</PresenceTransition>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Center Component with Text in JSX\nDESCRIPTION: This snippet demonstrates how to use the Center component to center-align text content. It creates a blue background container with centered white bold text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/Center/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Center bg=\"$primary500\" h={200} w={300}>\n  <Text color=\"white\" fontWeight=\"$bold\">\n    This is the center.\n  </Text>\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Dark Mode Syntax (React Native/Web)\nDESCRIPTION: Shows how to use Tailwind's dark mode syntax with gluestack-ui components for color scheme switching.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GluestackUIProvider } from \"@/components/ui/gluestack-ui-provider\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/Button\";\nimport { useState } from 'react';\n\nexport default function App() {\n  const [colorMode, setColorMode] = useState<\"light\" | \"dark\">(\"light\");\n\n  return (\n    <GluestackUIProvider mode={colorMode}>\n      <Box className=\"bg-white dark:bg-black flex-1\">\n        <Button\n          onPress={() => {\n            setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n          }}\n        >\n          <ButtonText>Toggle color mode</ButtonText>\n        </Button>\n      </Box>\n    </GluestackUIProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Button Component Structure\nDESCRIPTION: Illustrates the structure of the Button component with its subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <ButtonGroup>\n    <Button>\n      <ButtonText />\n      <ButtonSpinner />\n      <ButtonIcon />\n    </Button>\n  </ButtonGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component in React\nDESCRIPTION: This snippet shows how to import and use the Divider component in a React project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Divider } from '@/components/ui/divider';\n\nexport default () => <Divider />;\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Component Structure in React Native\nDESCRIPTION: This snippet illustrates the basic structure of a Toast component with title and description in React Native.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Toast>\n    <ToastTitle />\n    <ToastDescription />\n  </Toast>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useBreakpointValue Hook\nDESCRIPTION: Simple example showing how to define responsive values with the useBreakpointValue hook.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/hooks/useBreakPointValue/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst flexDir = useBreakpointValue({\n                default: \"column\",\n                sm: \"row\",\n              });\n```\n\n----------------------------------------\n\nTITLE: Implementing custom propertyResolver in gluestack-style\nDESCRIPTION: The propertyResolver allows defining custom resolvers for specific properties, like transforming background colors to include opacity. It receives rawValue and resolver function parameters.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  propertyResolver: {\n    backgroundColor: (rawValue,resolver)=>{\n      return hexToRGBA(resolver(rawValue),0.5)\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Component Anatomy in JSX\nDESCRIPTION: Demonstrates the structure and hierarchy of the Modal component and its subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Modal/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Modal>\n    <ModalBackdrop />\n    <ModalContent>\n      <ModalHeader>\n        <ModalCloseButton></ModalCloseButton>\n      </ModalHeader>\n      <ModalBody />\n      <ModalFooter />\n    </ModalContent>\n  </Modal>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Link Package\nDESCRIPTION: Commands for installing the @gluestack-ui/link package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/link/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/link\n\n# or\n\n$ npm i @gluestack-ui/link\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Styling with Breakpoint Prefixes in JSX\nDESCRIPTION: Example demonstrating how to apply different background colors to a Box component based on screen size using breakpoint prefixes ($base, $md, $lg) in style props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/responsive/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box justifyContent=\"center\" alignItems=\"center\" h=\"100%\">\n  <Box\n  $base-bg=\"$red500\"\n  $md-bg=\"$green500\"\n  $lg-bg=\"$blue500\"\n  alignItems=\"center\"\n  >\n    <Text>This is a box</Text>\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using the Spinner Component\nDESCRIPTION: Comprehensive example showing how to import styles, create a customized Spinner component, and use it in a React component. Includes comments explaining each step of the process.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/spinner/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from '../components/core/spinner/styled-components';\n\n// import the createSpinner function\nimport { createSpinner } from '@gluestack-ui/spinner';\n\n// Understanding the API\nconst Spinner = createSpinner({\n  Root,\n});\n\n// Using the spinner component\nexport default () => <Spinner />;\n```\n\n----------------------------------------\n\nTITLE: Positioning Elements with GlueStack UI Box Component\nDESCRIPTION: Demonstrates positioning of Box components using absolute and relative positioning with z-index and directional properties.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n      <Box    p=\"$5\"\n      m=\"$2\"\n      borderRadius=\"$md\"\n      bg=\"$primary200\" position=\"absolute\" left=\"$64\" p=\"$7\" />\n      <Box    p=\"$5\"\n      m=\"$2\"\n      borderRadius=\"$md\"\n       bgColor=\"$orange300\" zIndex={2} position=\"relative\" />\n      <Box\n         p=\"$5\"\n      m=\"$2\"\n      borderRadius=\"$md\"\n        backgroundColor=\"$indigo300\"\n        position=\"absolute\"\n        right=\"$32\"\n        p=\"$7\"\n      />\n     </>\n```\n\n----------------------------------------\n\nTITLE: Using the tva Utility with Gluestack UI\nDESCRIPTION: Complete example showing how to use the tva utility from @gluestack-ui/nativewind-utils. It demonstrates defining base styles, variants, parent variants, and implementing them in a React component with Pressable and Text elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages-react-19/@gluestack-ui/nativewind-utils/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the tva\nimport { tva } from '@gluestack-ui/nativewind-utils/tva';\n\n// Understanding the API\nconst buttonStyle = tva({\n  base: 'bg-primary-500',\n  variants: {\n    size: {\n      lg: 'w-6 h-6',\n      md: 'w-5 h-5',\n      sm: 'w-4 h-4',\n    },\n  },\n});\n\nconst buttonText = tva({\n  base: 'text-white',\n  parentVariants: {\n    size: {\n      lg: 'text-lg',\n      md: 'text-base',\n      sm: 'text-sm',\n    },\n  },\n});\n\n// Using the in component\nexport default ({ size, ...props }) => (\n  <Pressable className={buttonStyle({ size })} {...props}>\n    <Text className={buttonText({ parentVariants: { size } })}>\n      Hello World!\n    </Text>\n  </Pressable>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Link Component\nDESCRIPTION: This example demonstrates the basic structure of using the Link component. It shows how to nest the LinkText component within the Link component to create a clickable text link.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Link>\n    <LinkText />\n  </Link>\n);\n```\n\n----------------------------------------\n\nTITLE: Updated Next.js Document Configuration for gluestack-ui\nDESCRIPTION: Modified Next.js _document.js configuration with gluestack-ui specific changes including style flushing and HTML class addition.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/migration/native-base-to-gluestack-ui/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport fontsCSS from \"@native-base/icons/FontsCSS\";\nimport { AppRegistry } from \"react-native-web\"\nimport { flush } from \"@gluestack-style/react\"\nimport { Main } from \"next/document\";\nimport * as React from \"react\";\nimport NextDocument, { Html, Head, NextScript } from \"next/document\";\n\nfunction Document(){\n  return (\n    <Html className=\"gs\" lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n\nasync function getInitialProps({ renderPage }) {\n  AppRegistry.registerComponent(\"Main\", () => Main);\n  const { getStyleElement } = AppRegistry.getApplication(\"Main\");\n  const page = await renderPage();\n  const styles = [\n    <style dangerouslySetInnerHTML={{ __html: fontsCSS }} />,\n    getStyleElement(),\n    ...flush()\n  ];\n  return { ...page, styles: React.Children.toArray(styles) };\n}\n\nDocument.getInitialProps = getInitialProps;\n\nexport default Document;\n```\n\n----------------------------------------\n\nTITLE: Creating Search Input with Icon in gluestack-ui\nDESCRIPTION: This example demonstrates how to implement a search input field with a search icon using InputSlot and InputIcon components. The search icon is positioned on the left side of the input field.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Input>\n  <InputSlot pl='$3'>\n    <InputIcon as={SearchIcon}/>\n  </InputSlot>\n  <InputField\n    placeholder=\"Search...\"\n  />\n</Input>\n```\n\n----------------------------------------\n\nTITLE: Using AsForwarder with React Native and gluestack-style\nDESCRIPTION: This example demonstrates how to use the 'as' prop in gluestack-style to render a StyledHeading as an H2 component and a StyledIcon as a Camera icon from lucide-react-native. It showcases the flexibility of component rendering while maintaining consistent styles.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/AsForwarder/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { Wrapper } from '../../components/Wrapper';\nimport { Camera } from 'lucide-react-native';\nimport { StyledHeading, StyledIcon } from '../../ui-components/AsForwarder';\n\nexport function AsForwarderExample() {\n  const [state, setState] = React.useState(false);\n  return (\n    <Wrapper>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <StyledHeading as={H2} color=\"red\" size=\"xs\">\n          I am a heading\n        </StyledHeading>\n        <StyledIcon as={Camera} size=\"xs\">\n          I am a heading\n        </StyledIcon>\n      </View>\n    </Wrapper>\n  );\n}\n\nexport default AsForwarderExample;\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Usage\nDESCRIPTION: Example showing basic usage of the Textarea component with TextareaInput\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Textarea/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Textarea>\n    <TextareaInput />\n  </Textarea>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing VirtualizedList with User Data - React Native\nDESCRIPTION: Example showing how to implement a VirtualizedList component to display user information with avatars, names, and messages. Includes styling and dark mode support.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/VirtualizedList/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  function getItemCount(_data) {return 5} \n  function getItem(_data, index){\n    return data[index];\n  }\n  const data = [\n    {\n      id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\n      fullName: 'Aafreen Khan',\n      timeStamp: '12:47 PM',\n      recentText: 'Good Day!',\n      avatarUrl: 'https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500',\n    },\n    /* ... additional data items ... */\n  ];\n\n  return <>\n    <Box>\n      <Heading size=\"xl\" p=\"$4\" pb=\"$3\">Inbox</Heading>\n      <VirtualizedList\n        getItemCount={getItemCount}\n        getItem={getItem}\n        renderItem={({ item }) => (\n          <Box borderBottomWidth=\"$1\" borderColor=\"$trueGray800\" py=\"$2\">\n            <HStack space=\"md\" justifyContent=\"space-between\">\n              <Avatar size=\"md\">\n                <AvatarImage source={{ uri: item.avatarUrl }} />\n              </Avatar>\n              <VStack>\n                <Text color=\"$coolGray800\" fontWeight=\"$bold\">{item.fullName}</Text>\n                <Text color=\"$coolGray600\">{item.recentText}</Text>\n              </VStack>\n              <Text fontSize=\"$xs\" color=\"$coolGray800\">{item.timeStamp}</Text>\n            </HStack>\n          </Box>\n        )}\n      />\n    </Box>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Modal Component\nDESCRIPTION: This example demonstrates the basic structure and usage of the Modal component and its sub-components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Modal>\n    <ModalBackdrop />\n    <ModalContent>\n      <ModalHeader>\n        <ModalCloseButton></ModalCloseButton>\n      </ModalHeader>\n      <ModalBody />\n      <ModalFooter />\n    </ModalContent>\n  </Modal>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Skeleton Components\nDESCRIPTION: This code snippet shows how to import and use the Skeleton and SkeletonText components in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Skeleton/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Skeleton, SkeletonText } from '@/components/ui/skeleton';\n\nexport default () => (\n  <Box className=\"gap-2\">\n    <Skeleton variant=\"rounded\" className=\"h-32 w-64\" />\n    <SkeletonText className=\"h-4 w-64 \" />\n  </Box>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic KeyboardAvoidingView Usage in JSX\nDESCRIPTION: This code snippet demonstrates the basic usage of the KeyboardAvoidingView component in JSX.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/KeyboardAvoidingView/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <KeyboardAvoidingView></KeyboardAvoidingView>;\n```\n\n----------------------------------------\n\nTITLE: Installing Spinner Component Dependencies Manually in React Native\nDESCRIPTION: This command installs the necessary dependency for the Spinner component if you choose to add it manually.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/spinner\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ImageBackground Component in React Native\nDESCRIPTION: This example demonstrates the basic structure of using the ImageBackground component in a React Native application. It shows the component's anatomy without any content or props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/ImageBackground/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <ImageBackground></ImageBackground>;\n```\n\n----------------------------------------\n\nTITLE: Applying Styling to React Native View Component using useStyled\nDESCRIPTION: This example shows how to use the useStyled hook to apply styling to a React Native View component, specifically setting a background color from the tokens configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useStyled/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { useStyled } from '@gluestack-style/react';\n\nconst Example = () => {\n  const styled = useStyled();\n  return (\n    <View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: styled.config.tokens.colors.primary500,\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Component Structure in React\nDESCRIPTION: This code demonstrates the basic structure of an Avatar component, including its subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <AvatarGroup>\n    <Avatar>\n      <AvatarFallbackText />\n      <AvatarImage />\n      <AvatarBadge />\n    </Avatar>\n  </AvatarGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Component Structure\nDESCRIPTION: This code snippet demonstrates the basic structure of the Modal component with its subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Modal>\n    <ModalBackdrop />\n    <ModalContent>\n      <ModalHeader>\n        <ModalCloseButton></ModalCloseButton>\n      </ModalHeader>\n      <ModalBody />\n      <ModalFooter />\n    </ModalContent>\n  </Modal>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Child Component with Ancestor Styles\nDESCRIPTION: Example of configuring a text component to receive styles from its ancestor component through the ancestorStyle configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/DescendantsStyles/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledButtonText = styled(\n  Text,\n  {\n    color: '$grey800',\n    fontWeight: '700',\n  },\n  { ancestorStyle: ['_text'] }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Form-Controlled Slider in React\nDESCRIPTION: This code demonstrates a form-controlled Slider component with state management. It allows users to select a quantity with the slider value being controlled by the parent component's state, providing a synchronized experience for manipulating numeric data.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Slider/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  const [sliderValue, setSliderValue] = React.useState(50);\n  const handleChange = (value) => {\n    setSliderValue(value);\n  };\n  return (\n    <VStack space=\"lg\">\n    <Heading size=\"sm\">Select the quantity</Heading>\n    <Center w=\"$72\">\n        <Slider\n          sliderTrackHeight={5}\n          size='md'\n          value={sliderValue}\n          onChange={(value) => {\n          handleChange(value);\n          }}>\n          <SliderTrack>\n            <SliderFilledTrack/>\n          </SliderTrack>\n           <SliderThumb/>\n        </Slider>\n    </Center>\n    <Text size=\"sm\">Slide the knob to select the number of products</Text>\n    </VStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Object-based Utility Props for Better Maintainability\nDESCRIPTION: Shows an alternative approach using object-based utility props for improved code organization when dealing with multiple styling conditions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/UtilityProps/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<StyledButton\n  flexDirection=\"column\"\n  $md={{ flexDirection: 'row' }}\n  $hover={{\n    bg: '$primary600',\n    _text: {\n      color: '$text800',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Box Component Import and Basic Usage\nDESCRIPTION: Shows how to import and implement a basic Box component in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Box/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@/components/ui/box';\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Box />;\n```\n\n----------------------------------------\n\nTITLE: Defining Media Queries and Breakpoints in gluestack-ui Config\nDESCRIPTION: The default breakpoints configuration in gluestack-ui defines various screen sizes (base, sm, md, lg, xl) with their corresponding min-width values for responsive styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/responsive/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nmediaQueries: {\n  base: '@media screen and (min-width: 0)',\n  sm: '@media screen and (min-width: 480px)',\n  md: '@media screen and (min-width: 768px)',\n  lg: '@media screen and (min-width: 992px)',\n  xl: '@media screen and (min-width: 1280px)',\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Component with Different Sizes in React\nDESCRIPTION: A React component that demonstrates the different available text sizes in GlueStack UI. The component maps through an array of size options (xs to 6xl) and renders each size variant using the Text component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Text/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const sizes = [\n    'xs',\n    'sm',\n    'md',\n    'lg',\n    'xl',\n    '2xl',\n    '3xl',\n    '4xl',\n    '5xl',\n    '6xl',\n  ];\n  return (\n    <Center>\n      {sizes.map((size) => (\n        <Text size={size} textAlign='center'>{size}</Text>\n      ))}\n    </Center>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tooltip Component\nDESCRIPTION: Basic implementation of creating a tooltip component by importing necessary styled components and using the createTooltip function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/tooltip/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, Content } from '../components/core/tooltip/styled-components';\nimport { createTooltip } from '@gluestack-ui/tooltip';\nexport const Tooltip = createTooltip({\n  Root,\n  Content,\n});\n```\n\n----------------------------------------\n\nTITLE: Progress Component with Props\nDESCRIPTION: Example showing the Progress component with configurable size and orientation props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from \"@/components/ui/center\";\nimport { Progress, ProgressFilledTrack } from \"@/components/ui/progress\";\n\nfunction Example() {\n  return (\n    <Center className='w-[300px] h-[150px]'>\n          <Progress value={40} {...props} >\n            <ProgressFilledTrack />\n          </Progress>\n        </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Accordion Component Props in TypeScript/JSX\nDESCRIPTION: This snippet defines the props for the main Accordion component, including type, isCollapsible, defaultValue, value, onValueChange, and isDisabled.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype AccordionProps = {\n  type?: \"single\" | \"multiple\";\n  isCollapsible?: boolean;\n  defaultValue?: string[];\n  value?: string[];\n  onValueChange?: function;\n  isDisabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using utility props for direct styling in gluestack-style\nDESCRIPTION: Utility props provide a shorthand for styling components directly through props. They are converted to sx props internally and override all other styling except the style prop.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledInput = styled(\n  TextInput,\n  {\n    py: '$2',\n    bg: '$gray50',\n    borderRadius: '$2',\n  },\n  componentConfig,\n  extendedBaseConfig\n);\n\n<StyledInput py=\"$4\" bg=\"$gray800\" />;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Link Component in React\nDESCRIPTION: This snippet demonstrates how to render a simple Link component with text content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"https://gluestack.io/\">\n  <LinkText>gluestack</LinkText>\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Installing ImageViewer via CLI\nDESCRIPTION: Command to install the ImageViewer component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/ImageViewer/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add image-viewer\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Spinner Component in React Native\nDESCRIPTION: This snippet shows how to import the Spinner component and use it in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from '@/components/ui/spinner';\n\nexport default () => <Spinner />;\n```\n\n----------------------------------------\n\nTITLE: Using Global Style in a React Component\nDESCRIPTION: This snippet demonstrates how to use the global style defined in the configuration. It creates a styled Pressable component and applies the 'softShadow' variant from the global style.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/GlobalStyle/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyButton = styled(Pressable, {\n  bg: '$red500',\n  p: '$3',\n});\n\nconst export Button = () => <MyButton shadow=\"softShadow\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Color and Background Styling in Gluestack UI\nDESCRIPTION: Demonstrates the usage of color and background styling properties in Box and Text components. Shows different ways to apply background colors and text colors using various prop formats.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n        <Box p=\"$5\" m=\"$2\" borderRadius=\"$md\" bg=\"$orange200\" />\n      <Box p=\"$5\" m=\"$2\" borderRadius=\"$md\" bgColor=\"$lightBlue200\" py=\"$3\">\n        <Text color=\"$red400\" fontWeight=\"bold\">\n          I ❤️ Gluestack\n        </Text>\n      </Box>\n      <Box p=\"$5\" m=\"$2\" borderRadius=\"$md\" backgroundColor=\"$indigo300\" />\n     </>\n```\n\n----------------------------------------\n\nTITLE: Creating Actionsheet with VirtualizedList\nDESCRIPTION: Implements an Actionsheet with a virtualized list for efficient rendering of large datasets. Uses React's useMemo and useCallback hooks for optimization, and includes virtual list configuration for handling 50 items with lazy loading.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(!showActionsheet);\n    const data = React.useMemo(() => Array(50).fill(0).map((_, index) => 'Item' + index),[]);\n    const getItem = (_data, index) => ({\n      id: Math.random().toString(12).substring(0),\n      title: _data[index],\n    });\n    const getItemCount = (_data) => _data.length;\n    const Item = React.useCallback(\n      ({ title }) => (\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>{title}</ActionsheetItemText>\n        </ActionsheetItem>\n      ),\n      [handleClose]\n    );\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent>\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n          <ActionsheetVirtualizedList\n            h=\"$56\"\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }) => <Item title={item.title} />}\n            keyExtractor={(item) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for gluestack-style\nDESCRIPTION: Basic configuration for babel.config.js to enable the @gluestack-style/babel-plugin-styled-resolver plugin in your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/production-optimizations/babel-plugin/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: ['@gluestack-style/babel-plugin-styled-resolver'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Component with Props\nDESCRIPTION: Example of configuring an Input component with various props like variant, size, and placeholder.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Input/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Input {...props}>\n  <InputField\n      placeholder='Enter Text here'\n  />\n</Input>\n```\n\n----------------------------------------\n\nTITLE: Box Component with Ref in React\nDESCRIPTION: Shows how to use a Box component with a ref for direct DOM manipulation, including changing styles dynamically.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/Box/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App () {\n  const myRef = useRef({});\n  useEffect(() => {\n    const styleObj = {\n      borderWidth: 2,\n      borderRadius: 4,\n      borderColor: '#1A91FF',\n    };\n  if(myRef.current && myRef.current.setNativeProps){\n     myRef.current.setNativeProps({\n      style: styleObj,\n     });\n    }\n  }, [myRef]);\nreturn (\n  <Box \n  h={100}\n  w={100}\n  bg=\"$primary100\"\n  ref={myRef} />\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Image Component in JSX\nDESCRIPTION: This example demonstrates the basic usage of the Image component, showing its structure and how to provide a source for the image.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Image/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Image source={source} />;\n```\n\n----------------------------------------\n\nTITLE: Basic FlatList Usage - JSX\nDESCRIPTION: Basic implementation example showing the minimal structure of a FlatList component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/FlatList/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <FlatList />;\n```\n\n----------------------------------------\n\nTITLE: Rendering All Gluestack Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render all available Gluestack icons in a React component. It uses the Icon component to display various icons in a grid layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from \"@/components/ui/center\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Icon, AddIcon, AlertCircleIcon, ArrowUpIcon, ArrowDownIcon, ArrowRightIcon, ArrowLeftIcon, AtSignIcon, BellIcon, CalendarDaysIcon, CheckIcon, CheckCircleIcon, ChevronUpIcon, ChevronDownIcon, ChevronLeftIcon, ChevronRightIcon, ChevronsLeftIcon, ChevronsRightIcon, ChevronsUpDownIcon, CircleIcon, ClockIcon, CloseIcon, CloseCircleIcon, CopyIcon, DownloadIcon, EditIcon, EyeIcon, EyeOffIcon, FavouriteIcon, GlobeIcon, GripVerticalIcon, HelpCircleIcon, InfoIcon, LinkIcon, ExternalLinkIcon, LoaderIcon, LockIcon, MailIcon, MenuIcon, MessageCircleIcon, MoonIcon, PaperclipIcon, PhoneIcon, PlayIcon, RemoveIcon, RepeatIcon, Repeat1Icon, SearchIcon, SettingsIcon, ShareIcon, SlashIcon, StarIcon, SunIcon, ThreeDotsIcon, TrashIcon, UnlockIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Center>\n  <HStack className=\"w-[70%] flex flex-wrap\">\n        <Icon as={AddIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ArrowLeftIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ArrowRightIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ArrowUpIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ArrowDownIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ChevronsLeftIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ChevronsRightIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ChevronsUpDownIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={AtSignIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={PaperclipIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={BellIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={CalendarDaysIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={MessageCircleIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={CheckIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ChevronDownIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ChevronUpIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ChevronLeftIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ChevronRightIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={CloseIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={CopyIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={TrashIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={DownloadIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={GripVerticalIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={EditIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={MailIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ExternalLinkIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={MenuIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={InfoIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={LinkIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={LockIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={RemoveIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={MoonIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={SlashIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={CheckCircleIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={PhoneIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={HelpCircleIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={RepeatIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={Repeat1Icon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={SearchIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={SettingsIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={LoaderIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={StarIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={SunIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ClockIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={UnlockIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={EyeIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={EyeOffIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={AlertCircleIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={CloseCircleIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ShareIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={CircleIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={FavouriteIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={GlobeIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={ThreeDotsIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n        <Icon as={PlayIcon} className=\"text-typography-500 m-2 w-4 h-4\" />\n  </HStack>\n  </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component in React\nDESCRIPTION: This snippet shows how to import the Progress and ProgressFilledTrack components from the gluestack-ui library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Progress/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress, ProgressFilledTrack } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Styling with gluestack-style\nDESCRIPTION: This code demonstrates how to create a styled component with platform-specific styles using the _web, _ios, and _android selectors. The component will have different background colors depending on whether it's running on web, iOS, or Android platforms.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/PlatformBasedStyles/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledButton = styled(Pressable, {\n  bg: '$primary600',\n  px: '$6',\n  py: '$4',\n  _web: {\n    bg: '$amber500',\n  },\n  _ios: {\n    bg: '$blue500',\n  },\n  _android: {\n    bg: '$red500',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Input Component via CLI\nDESCRIPTION: This command uses the gluestack-ui CLI to add the Input component to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add input\n```\n\n----------------------------------------\n\nTITLE: VStack Component with Customized Spacing\nDESCRIPTION: Example of using the VStack component with custom spacing and colored boxes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/VStack/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction Example() {\n  return (\n    <Box className='justify-center h-80'>\n          <VStack {...props}>\n            <Box  className=\"h-20 w-20 bg-primary-300\" />\n            <Box  className=\"h-20 w-20 bg-primary-400\" />\n            <Box  className=\"h-20 w-20 bg-primary-500\" />\n          </VStack>\n        </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Component Usage\nDESCRIPTION: This example demonstrates the basic structure of using the Progress component with a ProgressFilledTrack.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Progress/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Progress>\n    <ProgressFilledTrack />\n  </Progress>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Component Structure in React\nDESCRIPTION: Demonstrates the basic structure and anatomy of a Tooltip component, including TooltipContent and TooltipText.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Tooltip/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Tooltip>\n    <TooltipContent>\n      <TooltipText />\n    </TooltipContent>\n  </Tooltip>\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Shadow Effects in GlueStack UI\nDESCRIPTION: Shows different shadow variations using softShadow and hardShadow properties with varying intensities on Box components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n      <Box p=\"$5\" m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" softShadow=\"1\" />\n      <Box p=\"$5\" m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" softShadow=\"3\" />\n      <Box p=\"$5\" m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" hardShadow=\"5\" />\n      <Box p=\"$5\" m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" hardShadow=\"7\" />\n      <Box p=\"$5\" m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" hardShadow=\"9\" />\n     </>\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover with Avatar Group Example - React Native\nDESCRIPTION: Example showing how to implement a Popover component with multiple Avatars using GlueStack UI components. The Popover is triggered by a button and displays a group of avatars with text content. Includes state management for open/close functionality.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarFallbackText, AvatarImage, AvatarGroup } from \"@/components/ui/avatar\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { Popover, PopoverBackdrop, PopoverArrow, PopoverBody, PopoverContent } from \"@/components/ui/popover\";\nimport { Text } from \"@/components/ui/text\";\nimport React from \"react\";\n\nfunction App() {\n        const [isOpen, setIsOpen] = React.useState(false);\n        const handleOpen = () => {\n          setIsOpen(true);\n        };\n        const handleClose = () => {\n          setIsOpen(false);\n        };\n        return (\n          <Popover\n            isOpen={isOpen}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            trigger={(triggerProps) => {\n              return (\n                <Button\n                  {...triggerProps}\n                  size=\"sm\"\n                >\n                  <ButtonText>\n                    Open Popover\n                  </ButtonText>\n                </Button>\n              );\n            }}\n          >\n            <PopoverBackdrop/>\n            <PopoverContent className=\"w-full max-w-[420px] p-4\">\n              <PopoverArrow />\n              <PopoverBody\n                className=\"\"\n                contentContainerClassName=\"flex flex-row gap-4\"\n              >\n              <AvatarGroup className=\"flex-row items-center\">\n                  <Avatar className=\"w-9 h-9 border-[1.5px] border-outline-0\">\n                    <AvatarFallbackText>John Doe</AvatarFallbackText>\n                    <AvatarImage\n                      source={{\n                        uri: 'https://i.ibb.co/PF4vFQk/a130347c432c7b83615044cec215d824.jpg',\n                      }}\n                      alt=\"imageAltText\"\n                    />\n                  </Avatar>\n                  <Avatar className=\"w-9 h-9 border-[1.5px] border-outline-0\">\n                    <AvatarFallbackText>John Doe</AvatarFallbackText>\n                    <AvatarImage\n                      source={{\n                        uri: 'https://i.ibb.co/MgrMrRc/Avatar-2.png',\n                      }}\n                      alt=\"imageAltText\"\n                    />\n                  </Avatar>\n                  <Avatar className=\"w-9 h-9 border-[1.5px] border-outline-0\">\n                    <AvatarFallbackText>John Doe</AvatarFallbackText>\n                    <AvatarImage\n                      source={{\n                        uri: 'https://i.ibb.co/BLRZt0p/Avatar-6.jpg',\n                      }}\n                      alt=\"imageAltText\"\n                    />\n                  </Avatar>\n                  <Avatar className=\"w-9 h-9 border-[1.5px] border-outline-0 group-[.avatar-group]/avatar-group:ml-0\">\n                    <AvatarFallbackText>John Doe</AvatarFallbackText>\n                    <AvatarImage\n                      source={{\n                        uri: 'https://i.ibb.co/4VVsQ0K/Avatar-7.png',\n                      }}\n                      alt=\"imageAltText\"\n                    />\n                  </Avatar>\n                </AvatarGroup>\n                <Text className=\"text-typography-900\" size=\"sm\">\n                  Alex, Annie and many others are already enjoying the Pro features,\n                  don't miss out on the fun!\n                </Text>\n              </PopoverBody>\n            </PopoverContent>\n          </Popover>\n        )\n      }\n```\n\n----------------------------------------\n\nTITLE: Using styled() function to create a customizable component in React\nDESCRIPTION: The styled() function allows you to extend existing components with customizable and themeable styles. It accepts a component, style object, componentConfig, and extendedBaseConfig.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledButton = styled(\n  Pressable,\n  {\n    bg: '$primary600',\n    px: '$6',\n    py: '$4',\n    _dark: {\n      bg: '$gray800',\n    },\n  },\n  {}, // componentConfig,\n  {} // extendedBaseConfig,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a VStack Component\nDESCRIPTION: Basic example of importing and creating a VStack component using the createVStack function and styled components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/vstack/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, Spacer } from '../components/vstack/styled-components';\nimport { createVStack } from '@gluestack-ui/vstack';\nconst VStack = createVStack({\n  Root,\n  Spacer,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Component Implementation in JSX\nDESCRIPTION: A simple example showing how to create a toast component by importing styled components and using the createToast function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/toast/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, Title, Description } from './styled-components';\nimport { createToast, createToastHook } from '@gluestack-ui/toast';\n\nexport const toast = createtoast({\n  Root,\n  Title,\n  Description,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Components with Different Sizes in React\nDESCRIPTION: This code snippet demonstrates how to create a React component that renders Text components of various sizes using gluestack-ui. It maps through an array of size options and creates a Text component for each size.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Text/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from \"@/components/ui/center\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction App() {\n          const sizes = [\n            'xs',\n            'sm',\n            'md',\n            'lg',\n            'xl',\n            '2xl',\n            '3xl',\n            '4xl',\n            '5xl',\n            '6xl',\n          ];\n          return (\n            <Center>\n              {sizes.map((size, index) => (\n                <Text size={size} key={index} className=\"text-center\">{size}</Text>\n              ))}\n            </Center>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Popover Component\nDESCRIPTION: Shows how to create a custom Popover component using the createPopover function from gluestack-ui. The example demonstrates importing styled components and implementing a basic Popover structure.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Popover/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\n\nimport {\n  Root,\n  Arrow,\n  Content,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n  CloseButton,\n} from '../components/core/popover/styled-components';\n\n// import the createPopover function\nimport { createPopover } from '@gluestack-ui/popover';\n\n// Understanding the API\nexport const Popover = createPopover({\n  Root,\n  Arrow,\n  Content,\n  Header,\n  Footer,\n  Body,\n  Backdrop,\n  CloseButton,\n});\n\n// Using the popover component\nexport default () => (\n  <Popover>\n    <PopoverBackdrop />\n    <PopoverContent>\n      <PopoverHeader>\n        <PopoverCloseButton />\n      </PopoverHeader>\n      <PopoverBody />\n      <PopoverFooter />\n    </PopoverContent>\n  </Popover>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Popover Component Properties in JSX\nDESCRIPTION: This code snippet defines the properties of the Popover component using a table structure. It includes details such as prop names, types, default values, and descriptions for each property.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Table>\n  <Table.THead>\n    <Table.TR>\n      <Table.TH>\n        <Table.TText>Prop</Table.TText>\n      </Table.TH>\n      <Table.TH>\n        <Table.TText>Type</Table.TText>\n      </Table.TH>\n      <Table.TH>\n        <Table.TText>Default</Table.TText>\n      </Table.TH>\n      <Table.TH>\n        <Table.TText>Description</Table.TText>\n      </Table.TH>\n    </Table.TR>\n  </Table.THead>\n  <Table.TBody>\n    <Table.TR>\n      <Table.TD>\n        <Table.TText>\n          <InlineCode>defaultIsOpen</InlineCode>\n        </Table.TText>\n      </Table.TD>\n      <Table.TD>\n        <Table.TText>boolean</Table.TText>\n      </Table.TD>\n      <Table.TD>\n        <Table.TText>-</Table.TText>\n      </Table.TD>\n      <Table.TD>\n        <Table.TText>\n          Specifies the default open state of the popover.\n        </Table.TText>\n      </Table.TD>\n    </Table.TR>\n    <!-- Additional rows for other properties -->\n  </Table.TBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Component Props in TypeScript\nDESCRIPTION: This snippet defines the props for the Tooltip component, including boolean flags, callback functions, and placement options.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TooltipProps {\n  isOpen?: boolean;\n  isDisabled?: boolean;\n  defaultIsOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n  openDelay?: number;\n  closeDelay?: number;\n  placement?: \"bottom\" | \"top\" | \"right\" | \"left\" | \"top left\" | \"top right\" | \"bottom left\" | \"bottom right\" | \"right top\" | \"right bottom\" | \"left top\" | \"left bottom\";\n  children?: any;\n  closeOnClick?: boolean;\n  trigger?: () => any;\n  offset?: number;\n  crossOffset?: number;\n  shouldOverlapWithTrigger?: boolean;\n  shouldFlip?: boolean;\n  closeOnOverlayClick?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up StyledProvider\nDESCRIPTION: Implementation of StyledProvider at the root level of the application to provide styling context.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/install-expo/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { StyledProvider } from '@gluestack-style/react';\nimport { config } from './gluestack-style.config';\n\nconst App = () => {\n  return (\n    <StyledProvider config={config}>\n      {/* Other components here */}\n    </StyledProvider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Styled Component\nDESCRIPTION: Example of creating a styled component with animation properties using the AnimatedView component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/AnimationPlugin/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AnimatedView } from '@gluestack-style/animation-resolver';\n\nconst Box = styled(AnimatedView, {\n  ':initial': { opacity: 0 },\n  ':animate': { opacity: 1 },\n  ':exit': { opacity: 0 },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component via CLI\nDESCRIPTION: This command installs the Tooltip component from gluestack-ui using the CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add tooltip\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for gluestack-ui\nDESCRIPTION: Update the Next.js configuration file to support gluestack-ui and NativeWind.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withGluestackUI } from \"@gluestack/ui-next-adapter\";\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: [\"nativewind\", \"react-native-css-interop\"]\n};\n\nexport default withGluestackUI(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Customizing the Divider Component\nDESCRIPTION: Example demonstrating how to customize the Divider component by importing styled components and using the createDivider function with additional configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/divider/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from '../components/core/divider/styled-components';\n\n// import the createDivider function\nimport { createDivider } from '@gluestack-ui/divider';\n\n// Understanding the API\nconst Divider = createDivider({\n  Root,\n});\n\n// Using the Divider component\nexport default () => <Divider />;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Box Component Layout in gluestack-ui (JSX)\nDESCRIPTION: This code snippet showcases various ways to set width and height on Box components using gluestack-ui. It demonstrates different units and styles for sizing, including percentages, pixel values, and theme-based values.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n <Box\n        m=\"$2\"\n        borderRadius=\"$md\"\n        bg=\"$primary200\"\n        width=\"100%\"\n        height=\"$8\"\n      />\n      <Box m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" w=\"75%\" h=\"32px\" />\n      <Box m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" w=\"50%\" h=\"$8\" />\n      <Box m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" w={256} />\n      <Box m=\"$2\" borderRadius=\"$md\" bg=\"$primary200\" w=\"40px\" h=\"$8\" />\n     </>\n```\n\n----------------------------------------\n\nTITLE: Colored Progress Bars\nDESCRIPTION: This example demonstrates how to add different track colors to progress bars.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Progress/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"3xl\">\n  <Progress value={46} w='$96' h='$2' size=\"sm\">\n    <ProgressFilledTrack bg=\"$emerald600\"/>\n  </Progress>\n  <Progress value={46} w='$96' h='$2' size=\"sm\">\n    <ProgressFilledTrack bg=\"$amber600\"/>\n  </Progress>\n  <Progress value={46} w='$96' h='$2' size=\"sm\">\n    <ProgressFilledTrack bg=\"$fuchsia600\"/>\n  </Progress>\n  <Progress value={46} w='$96' h='$2' size=\"sm\">\n    <ProgressFilledTrack bg=\"$cyan600\"/>\n  </Progress>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: VStack Basic Structure\nDESCRIPTION: Demonstrates the basic anatomy of the VStack component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/VStack/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <VStack />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Mode Toggle Component in React\nDESCRIPTION: Complete example showing how to implement a color mode toggle system using StyledProvider and state management, including a toggle button and styled component that responds to color mode changes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/ColorModeBasedStyles/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, Pressable, Text } from 'react-native';\nimport { styled, StyledProvider } from '@gluestack-style/react';\nimport { config } from './gluestack-style.config';\nconst StyledButton = styled(Pressable, {\n  bg: '$primary600',\n  px: '$6',\n  py: '$4',\n  _dark: {\n    bg: '$info600',\n  },\n  _light: {\n    bg: '$info800',\n  },\n});\n\nexport function ColorMode({ ...args }) {\n  const [currentColorMode, setCurrentColorMode] = React.useState('light');\n\n  return (\n    <StyledProvider config={config} colorMode={currentColorMode}>\n      <Pressable\n        style={{\n          backgroundColor: 'gray',\n          padding: 12,\n          marginBottom: 12,\n        }}\n        onPress={() => {\n          setCurrentColorMode(currentColorMode === 'dark' ? 'light' : 'dark');\n        }}\n      >\n        <Text style={{ color: 'white' }}>\n          Toggle {currentColorMode === 'dark' ? 'light' : 'dark'}\n        </Text>\n      </Pressable>\n      <StyledButton />\n    </StyledProvider>\n  );\n```\n\n----------------------------------------\n\nTITLE: Pressable Component with Styling and Text in JSX\nDESCRIPTION: Example of a Pressable component with styling, onPress event, and child Text component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Pressable/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Pressable\n  onPress={() => console.log('Hello')} p=\"$5\" bg=\"$primary500\" $hover-bg=\"$primary400\">\n  <Text color=\"white\">Press me</Text>\n</Pressable>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Layout with useBreakpointValue\nDESCRIPTION: Demonstrates how to use useBreakpointValue to create a responsive layout that changes flex direction based on screen size. The component switches between column layout on mobile and row layout on small screens and above.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useBreakPointValue/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst BreakPointValue = () => {\n  const flexDir = useBreakpointValue({\n    base: 'column',\n    sm: 'row',\n  });\n\n  return (\n    <View\n      style={{\n        flexDirection: flexDir,\n        gap: 10,\n      }}\n    >\n      <StyledBox>\n        <StyledText>Universal</StyledText>\n      </StyledBox>\n      <StyledBox>\n        <StyledText>Performant</StyledText>\n      </StyledBox>\n      <StyledBox>\n        <StyledText>Accessible</StyledText>\n      </StyledBox>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component with @gluestack-ui/button\nDESCRIPTION: Basic example showing how to create a Button component using the createButton function from @gluestack-ui/button with various subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/button/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createButton } from '@gluestack-ui/button';\nimport {\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n  Icon,\n} from './styled-components';\n\nexport const Button = createButton({\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n  Icon,\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Component Theme with Animations\nDESCRIPTION: Demonstrates how to extend and customize component themes with animation properties using createComponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Animations/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst componentTheme = createComponents({\n  ...defaultConfig.components,\n  ModalContent: {\n    theme: {\n      ':initial': {\n        bg: 'white',\n      },\n    },\n  },\n});\n\n// Pass this componentTheme in the provider.\n```\n\n----------------------------------------\n\nTITLE: Creating Native Wrapper Component\nDESCRIPTION: Implementation of a wrapper component for react-native-color-picker on native platforms.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/third-party-library-integrations/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker as ColorPickerComponent } from 'react-native-color-picker';\n\nexport default ColorPicker = (props) => {\n  return <ColorPickerComponent {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Accordion Component Basic Structure\nDESCRIPTION: Basic anatomy of the Accordion component showing the proper nesting of subcomponents\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Accordion>\n    <AccordionItem>\n      <AccordionHeader>\n        <AccordionTrigger>\n          <AccordionTitleText />\n          <AccordionIcon />\n        </AccordionTrigger>\n      </AccordionHeader>\n      <AccordionContent>\n        <AccordionContentText />\n      </AccordionContent>\n    </AccordionItem>\n  </Accordion>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectDragIndicatorWrapper in React Native\nDESCRIPTION: SelectDragIndicatorWrapper is mapped to ActionsheetDragIndicatorWrapper and inherits properties from React Native's View component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectDragIndicatorWrapper>\n  {/* Drag indicator content */}\n</SelectDragIndicatorWrapper>\n```\n\n----------------------------------------\n\nTITLE: Testing Event Bubbling and Capturing in React\nDESCRIPTION: Tests event bubbling and capturing behavior in React components using jest mock functions and act from React Testing Library. Verifies correct order of event propagation through capture and bubble phases.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst listenerCapture = jest.fn(e => {\n  log.push(['capture', 'target']);\n});\nconst listenerCaptureAlt = jest.fn(e => {\n  log.push(['capture', 'target-alt']);\n});\ndeclare function Component(): any;\nrender(<Component />);\nconst child = createEventTarget(childRef.current);\nact(() => {\n  child.click();\n});\nexpect(listenerCapture).toBeCalledTimes(1);\nexpect(listenerCaptureAlt).toBeCalledTimes(1);\nexpect(log).toEqual([['capture', 'target'], ['capture', 'target-alt'], ['bubble', 'target'], ['bubble', 'target-alt']]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Component in React\nDESCRIPTION: Example showing how to import, create, and use the Progress component with its styled components. Demonstrates the basic implementation with Root and FilledTrack subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/progress/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  FilledTrack,\n} from '../components/core/progress/styled-components';\n\n// import the createProgress function\nimport { createProgress } from '@gluestack-ui/progress';\n\n// Understanding the API\nconst Progress = createProgress({\n  Root,\n  FilledTrack,\n});\n\n// Using the Progress component\nexport default () => (\n  <Progress>\n    <ProgressFilledTrack />\n  </Progress>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon Component in React Native\nDESCRIPTION: This snippet demonstrates how to render an Icon component using the CalendarDaysIcon from gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon as={CalendarDaysIcon}  {...props}/>\n```\n\n----------------------------------------\n\nTITLE: Rendering VStack Component in React Native\nDESCRIPTION: This snippet demonstrates how to use the VStack component to vertically stack Box components with different background colors.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/VStack/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box h='$80' justifyContent='center'>\n  <VStack {...props}>\n    <Box w='$20' h='$20' bg='$primary300' />\n    <Box w='$20' h='$20' bg='$primary400' />\n    <Box w='$20' h='$20' bg='$primary500' />\n  </VStack>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Converting GlueStack UI Configuration from v1 to v2 using CSS Variables\nDESCRIPTION: This snippet demonstrates how to update GlueStack UI configuration from v1 to v2. It shows migration from direct token definitions to CSS variables approach, including how to configure different color modes and extend Tailwind CSS configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// gluestack-ui v1\n\n// Without CSS Variables\n{\n  tokens: {\n    ...defaultConfig.tokens,\n    colors: {\n      ...defaultConfig.tokens.colors,\n      primary0: \"#F5F3FF\",\n      primary50: \"#999999\",\n    },\n  },\n};\n\n// gluestack-ui v2\n\n// With CSS variables\n{\n  light: vars({\n    \"--color-primary-0\": \"#F5F3FF\",\n    \"--color-primary-50\": \"#999999\",\n  }),\n};\n\n// Updating the config(nativewind) file\n{\n  extends: {\n    colors: {\n      primary: var(--colors-primary),\n    },\n  },\n};\n\n// Different color modes\n{\n  light: vars({\n    \"--color-background-0\": \"#B3B3B3\",\n    \"--color-background-50\": \"#999999\",\n  }),\n  dark: vars({\n    \"--color-background-0\": \"#111827\",\n    \"--color-background-50\": \"#171717\",\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Heading and Avatar Group in React\nDESCRIPTION: This snippet demonstrates how to create a tooltip component with a heading and an avatar group. It uses custom components like Avatar, Tooltip, and various layout components to create a complex UI element.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar, AvatarFallbackText, AvatarGroup } from \"@/components/ui/avatar\";\nimport { Box } from \"@/components/ui/box\";\nimport { Center } from \"@/components/ui/center\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Text } from \"@/components/ui/text\";\nimport { Tooltip, TooltipContent } from \"@/components/ui/tooltip\";\nimport { VStack } from \"@/components/ui/vstack\";\n\nfunction App(){\n          return (\n            <Box className=\"justify-center h-96\">\n              <AvatarGroup className=\"flex-row\">\n                <Tooltip\n                  placement=\"top\"\n                  trigger={(triggerProps) => {\n                    return (\n                      <Avatar\n                        size=\"lg\"\n                        {...triggerProps}\n                        className=\"border-outline-0 border-2 bg-primary-600\"\n                      >\n                        <AvatarFallbackText>+ 3</AvatarFallbackText>\n                      </Avatar>\n                    )\n                  }}\n                >\n                  <TooltipContent\n                    className=\"p-4 rounded-md max-w-72 bg-background-50\"\n                  >\n                    <VStack space='md' className=\"rounded-lg\">\n                      <Heading size=\"sm\">View all members of this channel</Heading>\n                      <Center>\n                        <Text className=\"font-sm\">Includes John, Sarah, Mike, Emily</Text>\n                        <Text className=\"font-sm\">and David</Text>\n                      </Center>\n                    </VStack>\n                  </TooltipContent>\n                </Tooltip>\n               <Avatar size=\"lg\"\n                    className=\"border-outline-0 border-2 bg-emerald-600\" >\n                      <AvatarFallbackText className=\"text-white\">Sandeep Srivastva</AvatarFallbackText>\n                </Avatar>\n                   <Avatar size=\"lg\"\n                    className=\"border-outline-0 border-2 bg-cyan-600\" >\n                      <AvatarFallbackText className=\"text-white\">Arjun Kapoor</AvatarFallbackText>\n                </Avatar>\n                      <Avatar size=\"lg\"\n                    className=\"border-outline-0 border-2 bg-indigo-600\" >\n                      <AvatarFallbackText className=\"text-white\">Ritik Sharma </AvatarFallbackText>\n                </Avatar>\n              </AvatarGroup>\n            </Box>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring descendantStyle in componentConfig for gluestack-style\nDESCRIPTION: The descendantStyle property is an array of strings that denotes the descendants of a component that should respond to the parent's state, enabling complex dependent styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  descendantStyle: ['_text', '_spinner'];\n  // ancestorStyle: ['_text'];\n  // resolveProps: ['placeholderTextColor'];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering ScrollView with Color Samples in React Native\nDESCRIPTION: This code snippet demonstrates how to use the ScrollView component to display color samples from a configuration object. It includes sections for primary, yellow, and violet colors.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/ScrollView/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <ScrollView h=\"$80\" w=\"$80\">\n    <Center mt=\"$3\" mb=\"$4\">\n      <Heading fontSize=\"xl\">Primary</Heading>\n    </Center>\n    <VStack flex={1}>\n      {Object.keys(config.tokens.colors).map((key, index) => {\n        if (\n          key.includes('primary') &&\n          !(\n            key.includes('600') ||\n            key.includes('700') ||\n            key.includes('800') ||\n            key.includes('900') ||\n            key.includes('950')\n          )\n        )\n          return (\n            <Center py=\"$4\" bg={config.tokens.colors[key]}>\n              <Text>{key}</Text>\n            </Center>\n          );\n      })}\n    </VStack>\n    <Center mt=\"$10\" mb=\"$4\">\n      <Heading fontSize=\"$xl\">Yellow</Heading>\n    </Center>\n    <VStack flex=\"1\">\n      {Object.keys(config.tokens.colors).map((key, index) => {\n        if (\n          key.includes('yellow') &&\n          !(\n            key.includes('600') ||\n            key.includes('700') ||\n            key.includes('800') ||\n            key.includes('900') ||\n            key.includes('950')\n          )\n        )\n          return (\n            <Center py=\"$4\" bg={config.tokens.colors[key]}>\n              <Text>{key}</Text>\n            </Center>\n          );\n      })}\n    </VStack>\n    <Center mt=\"$10\" mb=\"$4\">\n      <Heading fontSize=\"$xl\">Violet</Heading>\n    </Center>\n    <VStack flex=\"1\">\n      {Object.keys(config.tokens.colors).map((key, index) => {\n        if (\n          key.includes('violet') &&\n          !(\n            key.includes('600') ||\n            key.includes('700') ||\n            key.includes('800') ||\n            key.includes('900') ||\n            key.includes('950')\n          )\n        )\n          return (\n            <Center py=\"$4\" bg={config.tokens.colors[key]}>\n             <Text>{key}</Text>\n            </Center>\n          );\n      })}\n    </VStack>\n  </ScrollView>\n</>\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider Component with gluestack-ui\nDESCRIPTION: Basic example of importing styled components and creating a Slider component using the createSlider function from @gluestack-ui/slider.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/slider/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Root,\n  Thumb,\n  Track,\n  FilledTrack,\n  ThumbInteraction,\n} from '../components/core/slider/styled-components';\nimport { createSlider } from '@gluestack-ui/slider';\nconst Slider = createSlider({\n  Root,\n  Thumb,\n  Track,\n  FilledTrack,\n  ThumbInteraction,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component using CLI\nDESCRIPTION: Command to install the Progress component using the gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add progress\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Component Structure\nDESCRIPTION: This code snippet demonstrates the basic structure of the Tooltip component in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Tooltip>\n    <TooltipContent>\n      <TooltipText />\n    </TooltipContent>\n  </Tooltip>\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Button Component with gluestack-ui Snippet in JSX\nDESCRIPTION: This snippet demonstrates how to use the gluestack-ui VS Code extension to insert a Button component with various props. It shows the result of using the 'gs-ButtonBasic' snippet.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/vscode-extensions/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button action='primary' variant='solid' size='lg' isDisabled>\n  <ButtonText>Button</ButtonText>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Basic GluestackUIProvider Implementation\nDESCRIPTION: Basic implementation example of GluestackUIProvider component with a simple button.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Provider/GluestackUIProvider/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n  return (\n        <GluestackUIProvider config={config}>\n          <Button>\n            <ButtonText>Hello World</ButtonText>\n          </Button>\n      </GluestackUIProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Component Structure in React Native\nDESCRIPTION: This example demonstrates the basic structure of an Alert component, including the AlertIcon and AlertText sub-components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Alert/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Alert>\n    <AlertIcon />\n    <AlertText />\n  </Alert>\n);\n```\n\n----------------------------------------\n\nTITLE: Updating GluestackUIProvider for Next.js 15 Compatibility\nDESCRIPTION: Modified GluestackUIProvider component that handles theme modes and CSS variables injection. Includes compatibility fixes for React 19 in Next.js 15 with proper client-side behavior.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\nimport React, { useEffect, useLayoutEffect } from \"react\";\nimport { config } from \"./config\";\nimport { OverlayProvider } from \"@gluestack-ui/overlay\";\nimport { ToastProvider } from \"@gluestack-ui/toast\";\nimport { setFlushStyles } from \"@gluestack-ui/nativewind-utils/flush\";\nimport { script } from \"./script\";\n\nconst variableStyleTagId = \"nativewind-style\";\nconst createStyle = (styleTagId: string) => {\n  const style = document.createElement(\"style\");\n  style.id = styleTagId;\n  style.appendChild(document.createTextNode(\"\"));\n  return style;\n};\n\nexport const useSafeLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n\nexport function GluestackUIProvider({\n  mode = \"light\",\n  ...props\n}: {\n  mode?: \"light\" | \"dark\" | \"system\";\n  children?: React.ReactNode;\n}) {\n  let cssVariablesWithMode = ``;\n  Object.keys(config).forEach((configKey) => {\n    cssVariablesWithMode +=\n      configKey === \"dark\" ? `\\n .dark {\\n ` : `\\n:root {\\n`;\n    const cssVariables = Object.keys(\n      config[configKey as keyof typeof config]\n    ).reduce((acc: string, curr: string) => {\n      acc += `${curr}:${config[configKey as keyof typeof config][curr]}; `;\n      return acc;\n    }, \"\");\n    cssVariablesWithMode += `${cssVariables} \\n}`;\n  });\n\n  setFlushStyles(cssVariablesWithMode);\n\n  const handleMediaQuery = React.useCallback((e: MediaQueryListEvent) => {\n    script(e.matches ? \"dark\" : \"light\");\n  }, []);\n\n  useSafeLayoutEffect(() => {\n    if (mode !== \"system\") {\n      const documentElement = document.documentElement;\n      if (documentElement) {\n        documentElement.classList.add(mode);\n        documentElement.classList.remove(mode === \"light\" ? \"dark\" : \"light\");\n        documentElement.style.colorScheme = mode;\n      }\n    }\n  }, [mode]);\n\n  useSafeLayoutEffect(() => {\n    if (mode !== \"system\") return;\n    const media = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    media.addListener(handleMediaQuery);\n\n    return () => media.removeListener(handleMediaQuery);\n  }, [handleMediaQuery]);\n\n  useSafeLayoutEffect(() => {\n    if (typeof window !== \"undefined\") {\n      const documentElement = document.documentElement;\n      if (documentElement) {\n        const head = documentElement.querySelector(\"head\");\n        let style = head?.querySelector(`[id='${variableStyleTagId}']`);\n        if (!style) {\n          style = createStyle(variableStyleTagId);\n          style.innerHTML = cssVariablesWithMode;\n          if (head) head.appendChild(style);\n        }\n      }\n    }\n  }, []);\n\n  return (\n    <OverlayProvider>\n      <ToastProvider>{props.children}</ToastProvider>\n    </OverlayProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier Plugin for Tailwind CSS with gluestack-UI\nDESCRIPTION: This setup configures the prettier-plugin-tailwindcss to recognize and sort Tailwind classes within the tva function used by gluestack-UI. The configuration should be added to the .prettierrc file to ensure consistent class ordering.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/tooling-setup/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  plugins: ['prettier-plugin-tailwindcss'],\n  tailwindFunctions: ['tva'],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Link with Icon in JSX\nDESCRIPTION: This snippet demonstrates how to create a Link component with an icon using gluestack-ui components. It includes a text label, a link with external URL, and an icon.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Link/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack>\n  <Text size=\"lg\">Go to </Text>\n  <Link href=\"https://gluestack.io/\" isExternal>\n    <HStack alignItems=\"center\">\n    <LinkText size=\"lg\">Pinterest</LinkText>\n    <Icon as={ArrowUpRightIcon} size=\"lg\" color=\"$info600\" mt=\"$0.5\" $dark-color=\"$info300\"/>\n    </HStack>\n  </Link>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of PinInput Component\nDESCRIPTION: Command to manually install the PinInput component package as a dependency in your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/pin-input\n```\n\n----------------------------------------\n\nTITLE: Implementing Compound Variants for a Button Component in React Native\nDESCRIPTION: This snippet demonstrates the use of compound variants in gluestack-style. It defines styles that are applied when specific combinations of variants are used, such as a 'solid' variant with 'sm' size.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/Variants/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\nconst StyledButtonVariant = styled(Pressable, {\n  p: '$3',\n  rounded: '$md',\n  variants: {\n    variant: {\n      solid: {\n        bg: '$primary600',\n      },\n      subtle: {\n        bg: '$primary200',\n        _text: {\n          color: '$textDark600'\n        }\n      },\n    },\n    size: {\n      xs: {\n        px: '$3',\n        py: '$2',\n      },\n      sm: {\n        px: '$3.5',\n        py: '$2.5',\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      variant: 'solid',\n      size: 'sm',\n      value: {\n        'borderWidth': '$2',\n        ':hover': {\n          bg: '$primary700',\n        },\n      },\n    },\n  ],\n}, {\n  descendantStyle: ['_text']\n});\nconst StyledButtonText = styled(\n  Text,\n  {\n    color: '$textDark50',\n    fontWeight: '400',\n  },\n  { ancestorStyle: ['_text'] }\n);\nreturn (\n  <Provider config={config}>\n    <StyledButtonVariant {...props} states={{hover: true}}>\n      <StyledButtonText>Button</StyledButtonText>\n    </StyledButtonVariant>\n  </Provider>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useToken to set background color in React Native\nDESCRIPTION: This example demonstrates how to use the useToken hook to resolve a color token and apply it as a background color to a React Native View component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useToken/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { useToken } from '@gluestack-style/react';\n\nfunction Example() {\n  const resolvedGreen = useToken('colors', 'green500');\n  return (\n    <View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: resolvedGreen,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Hover Styles to Button Component in GlueStack UI\nDESCRIPTION: This snippet demonstrates how to apply custom styles to a Button component when it's hovered. It uses the ':hover' interaction prop to change the background color to red300 on hover.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <Button\n sx={{\n   ':hover': {\n     // below props will only be applied on button is hovered\n     bg: '$red300',\n   },\n }}\n>\n  <ButtonText>\n       Sample Text</ButtonText>\n</Button>\n</>\n```\n\n----------------------------------------\n\nTITLE: Basic Pressable Component Implementation\nDESCRIPTION: Basic implementation of the Pressable component with a Text child. This example demonstrates how to set up a pressable button with text and a press handler.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pressable } from \"@/components/ui/pressable\";\nimport { Text } from \"@/components/ui/text\";\n\tfunction Example() {\n  return (\n    <Pressable\n  onPress={() => console.log('Hello')} className=\"p-5 bg-primary-500\">\n  <Text className=\"text-typography-0\">Press me</Text>\n</Pressable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Animation Plugin Configuration\nDESCRIPTION: Example of initializing the AnimationResolver plugin in the configuration object with default @legendapp/motion properties\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/AnimationPlugin/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AnimationResolver } from '@gluestack-style/animation-resolver';\n\nexport const config = {\n  aliases: {},\n  tokens: {},\n  plugins: [new AnimationResolver()],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Link Component\nDESCRIPTION: Example showing how to create a basic Link component using the createLink function with Root and Text styled components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/link/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, Text } from './styled-components';\nimport { createLink } from '@gluestack-ui/link';\n\nexport const Link = createLink({\n  Root,\n  Text,\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js App Router Layout Configuration\nDESCRIPTION: Layout configuration for Next.js App Router with StyledJsxRegistry integration\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport './globals.css';\nimport { Inter } from 'next/font/google';\nimport StyledJsxRegistry from './registry';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode,\n}) {\n  return (\n    <html lang=\"en\" className=\"gs\">\n      <body className={inter.className}>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating platform-specific styles with _platform selectors\nDESCRIPTION: Platform-specific styles can be defined using platform selectors like _web, _ios, etc., allowing components to adapt their appearance based on the platform they run on.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst StyledInput = styled(\n  TextInput,\n  {\n    py: '$2',\n    bg: '$gray50',\n    borderRadius: '$2',\n    _dark: {\n      bg: '$gray800',\n    },\n    _web: {\n      px: '$3',\n    },\n    _ios: {\n      px: '$4',\n    },\n  },\n  componentConfig,\n  extendedBaseConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AlertDialog Props in TypeScript\nDESCRIPTION: This snippet defines the props for the AlertDialog component, including isOpen, onClose, useRNModal, defaultIsOpen, initialFocusRef, finalFocusRef, avoidKeyboard, closeOnOverlayClick, and isKeyboardDismissable.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AlertDialogProps {\n  isOpen?: boolean;\n  onClose?: () => any;\n  useRNModal?: boolean;\n  defaultIsOpen?: boolean;\n  initialFocusRef?: React.RefObject<any>;\n  finalFocusRef?: React.RefObject<any>;\n  avoidKeyboard?: boolean;\n  closeOnOverlayClick?: boolean;\n  isKeyboardDismissable?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GlueStack UI Provider\nDESCRIPTION: Basic setup of GluestackUIProvider component wrapper\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/theme-configuration/customizing-theme/EjectLibrary/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<GluestackUIProvider>{children}</GluestackUIProvider>\n```\n\n----------------------------------------\n\nTITLE: Cloning gluestack-ui Repository for Style Changes\nDESCRIPTION: Command to clone your fork of the gluestack-ui repository to make changes to component styles. This is the first step in setting up your development environment for styling contributions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone git@github.com:${YOUR_USERNAME}/gluestack/gluestack-ui.git\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Link Component\nDESCRIPTION: Example of how to import and use the Link component in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@/components/ui/link';\n\nexport default () => (\n  <Link>\n    <LinkText />\n  </Link>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Components in React\nDESCRIPTION: This code snippet shows how to import the Modal component and its subcomponents in a React file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal, ModalBackdrop, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter } from '@/components/ui/modal';\n```\n\n----------------------------------------\n\nTITLE: Box Component Import and Basic Usage\nDESCRIPTION: Shows how to import and implement the Box component in a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Box/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@/components/ui/box';\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Box />;\n```\n\n----------------------------------------\n\nTITLE: Importing SectionList Component in gluestack-ui\nDESCRIPTION: This code snippet shows how to import the SectionList component from the @gluestack-ui/themed package for use in a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/SectionList/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { SectionList } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Integrating Lucide Icons with gluestack UI\nDESCRIPTION: This example shows how to integrate Lucide icons (recommended approach) with gluestack UI. The code renders various Lucide icons in a vertical stack layout with proper spacing.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"md\" alignItems='center'>\n  <Icon as={Camera} />\n  <Icon as={ChromeIcon}  />\n  <Icon as={InstagramIcon} />\n  <Icon as={FacebookIcon} />\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Defining Actionsheet Props in TypeScript\nDESCRIPTION: This snippet defines the props for the Actionsheet component, including isOpen, onClose, onOpen, useRNModal, defaultIsOpen, initialFocusRef, finalFocusRef, closeOnOverlayClick, isKeyboardDismissable, trapFocus, children, and snapPoints.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionsheetProps {\n  isOpen?: boolean;\n  onClose?: () => any;\n  onOpen?: () => any;\n  useRNModal?: boolean;\n  defaultIsOpen?: boolean;\n  initialFocusRef?: React.RefObject<any>;\n  finalFocusRef?: React.RefObject<any>;\n  closeOnOverlayClick?: boolean;\n  isKeyboardDismissable?: boolean;\n  trapFocus?: boolean;\n  children?: any;\n  snapPoints?: Array<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Component Implementation - Variant Components Benchmark\nDESCRIPTION: Graph component usage displaying performance metrics for components with different variations across libraries.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/performance/benchmarks/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Graph\n  data={{\n    'gluestack-ui': 170,\n    'React Native': 78,\n    'Tamagui': 196,\n    'Styled Components': 106,\n    'NativeBase': 619,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Third-Party Component\nDESCRIPTION: Example of styling the ColorPicker component using gluestack-style.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/third-party-library-integrations/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker } from '../components';\nimport { styled } from '@gluestack-ui/themed';\n\nconst StyledColorPicker = styled(ColorPicker, {\n  bg: '$yellow100',\n  height: '$64',\n  width: '$48',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing state-based styling with :state selectors\nDESCRIPTION: State-specific styles can be defined using state selectors like :hover, :disabled, etc. These are applied when the corresponding state is true in the states prop.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst StyledInput = styled(\n  TextInput,\n  {\n    'py': '$2',\n    'bg': '$gray50',\n    'borderRadius': '$2',\n    ':hover': {\n      bg: '$gray100',\n    },\n    ':disabled': {\n      bg: '$gray200',\n    },\n  },\n  componentConfig,\n  extendedBaseConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Components\nDESCRIPTION: How to import the Progress and ProgressFilledTrack components in your React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress, ProgressFilledTrack } from '@/components/ui/progress';\n```\n\n----------------------------------------\n\nTITLE: Installing VStack Component via CLI\nDESCRIPTION: This command uses the gluestack-ui CLI to add the VStack component to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/VStack/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add vstack\n```\n\n----------------------------------------\n\nTITLE: Conversion of Object-based Utility Props to sx Props\nDESCRIPTION: Shows how object-based utility props are internally converted to the sx prop format with the same nested structure as the single-property approach.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/UtilityProps/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<StyledButton\n  sx={{\n    'flexDirection': 'column',\n    ':hover': {\n      bg: '$primary600',\n    },\n    '_text': {\n      ':hover': {\n        color: '$text800',\n      },\n    },\n    '@md': {\n      flexDirection: 'row',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: GluestackUIStyledProvider Implementation\nDESCRIPTION: Example of using GluestackUIStyledProvider for styling functionality only.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Provider/GluestackUIProvider/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GluestackUIStyledProvider, Button, ButtonText } from '@gluestack-ui/themed';\nimport { config } from '@gluestack-ui/config';\n\nexport default function App() {\n  return (\n    <GluestackUIStyledProvider config={config}>\n      <Button>\n        <ButtonText>Hello World</ButtonText>\n      </Button>\n    </GluestackUIStyledProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AlertDialog Components\nDESCRIPTION: This snippet shows how to import the various sub-components of AlertDialog for use in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  AlertDialog,\n  AlertDialogBackdrop,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogCloseButton,\n  AlertDialogFooter,\n  AlertDialogBody,\n} from '@/components/ui/alert-dialog';\n```\n\n----------------------------------------\n\nTITLE: Initializing gluestack-ui using CLI\nDESCRIPTION: Use the 'init' command to add GluestackUIProvider and configuration file to the project. It prompts the user to select a component style.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui init\n```\n\n----------------------------------------\n\nTITLE: Loading Google Fonts in Expo\nDESCRIPTION: Example of using the useFonts hook to load multiple weights of the Inter font in an Expo application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Fonts/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst [fontsLoaded] = useFonts({\n  Inter_400Regular,\n  Inter_500Medium,\n  Inter_600SemiBold,\n  Inter_700Bold,\n  Inter_900Black,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for Changelog Page\nDESCRIPTION: Imports necessary components from Storybook addon-docs for creating documentation page layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/Changelog/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Configuration with Custom Theme Path\nDESCRIPTION: Babel configuration with custom theme path and styled alias options\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/advanced/BabelPlugins/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\n\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        gluestackStyleResolver,\n        {\n          configThemePath: ['config', 'theme'],\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox with Help Text in gluestack-ui\nDESCRIPTION: This example demonstrates how to add descriptive help text below checkboxes using the Text component. It creates a vertical arrangement with explanatory text for each option, enhancing user understanding of selection choices.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon, CheckboxGroup } from \"@/components/ui/checkbox\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { CheckIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\tfunction App(){\n             const [values, setValues] = React.useState([\"Design\"]);\n           return (\n             <CheckboxGroup value={values}  onChange={(keys) => {\n        setValues(keys)\n      }}>\n               <VStack space=\"2xl\">\n            <Box>\n              <Checkbox value=\"Design\">\n                <CheckboxIndicator>\n                   <CheckboxIcon as={CheckIcon}/>\n                </CheckboxIndicator>\n                <CheckboxLabel >Design</CheckboxLabel>\n              </Checkbox>\n              <Text size=\"sm\" className='ml-7'>Subscribe to updates from the Design Feed</Text>\n            </Box>\n            <Box>\n              <Checkbox value=\"Marketing\">\n                <CheckboxIndicator>\n                  <CheckboxIcon as={CheckIcon}/>\n                </CheckboxIndicator>\n                <CheckboxLabel>Marketing</CheckboxLabel>\n              </Checkbox>\n              <Text size=\"sm\" className='ml-7'>Subscribe to updates from the Marketing Feed</Text>\n             </Box>\n        </VStack>\n                 </CheckboxGroup>\n           )\n        }\n```\n\n----------------------------------------\n\nTITLE: Importing Pressable Component\nDESCRIPTION: Code snippet showing how to import the Pressable component in your React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pressable } from '@/components/ui/pressable';\n```\n\n----------------------------------------\n\nTITLE: Customized Progress Bar\nDESCRIPTION: This snippet shows a customized progress bar with a heading and text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Progress/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"lg\">\n<Heading>Internal Storage</Heading>\n<Progress value={46} w={410} h={8} bg=\"$lime100\">\n  <ProgressFilledTrack h={8} bg=\"$lime500\" />\n</Progress>\n<Text size=\"md\">14GB</Text>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Hooks from @react-native-aria/radio\nDESCRIPTION: Example showing how to import the useRadioGroup and useRadio hooks from the @react-native-aria/radio package to implement radio button functionality.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/radio/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRadioGroup, useRadio } from '@react-native-aria/radio';\n```\n\n----------------------------------------\n\nTITLE: Using Internal SX Props for Child Component Styling\nDESCRIPTION: Demonstrates using the sx prop to style both the parent Button component and its child ButtonText component through _text property.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n       <Button\n    sx={{bg:\"$primary400\",_text:{\n       color: '$secondary900',\n        fontSize: '$xs',\n        fontWeight: '$bold',\n    }}}\n    >\n       <ButtonText>\n            Sample Text</ButtonText>\n    </Button>\n     </>\n```\n\n----------------------------------------\n\nTITLE: Basic VStack Component Usage\nDESCRIPTION: Example showing basic implementation of VStack with colored boxes\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/VStack/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box h='$80' justifyContent='center'>\n  <VStack {...props}>\n    <Box w='$20' h='$20' bg='$blue300' />\n    <Box w='$20' h='$20' bg='$blue400' />\n    <Box w='$20' h='$20' bg='$blue500' />\n  </VStack>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic View Component Structure in React\nDESCRIPTION: This snippet illustrates the basic structure of using the View component in a React functional component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/View/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <View></View>;\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Component\nDESCRIPTION: Basic implementation showing how to create a linear gradient component by importing and configuring the necessary styled components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/linear-gradient/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createLinearGradient } from '@gluestack-ui/linear-gradient';\nimport {\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n  Icon,\n} from './styled-components';\n\nexport const LinearGradient = createLinearGradient({\n  Root,\n  Text,\n  Group,\n  GroupHSpacer,\n  GroupVSpacer,\n  Spinner,\n  Icon,\n});\n```\n\n----------------------------------------\n\nTITLE: Menu Component Import and Basic Usage\nDESCRIPTION: Example showing how to import and implement a basic Menu component structure.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Menu,\n  MenuItem,\n  MenuItemLabel,\n} from '@/components/ui/menu';\n\nexport default () => (\n  <Menu>\n    <MenuItem>\n      <MenuItemLabel />\n    </MenuItem>\n  </Menu>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Pressable Component Usage\nDESCRIPTION: Example showing basic usage of Pressable component with hover state styling and press event handling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Pressable onPress={() => console.log('Hello')} p=\"$5\" bg=\"$primary500\" $hover-bg=\"$primary400\">\n  <Text color=\"$text0\">Press me</Text>\n</Pressable>\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Hooks with Package Managers\nDESCRIPTION: Commands to install @gluestack-ui/hooks package using either Yarn or NPM package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/hooks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/hooks\n\n# or\n\n$ npm i @gluestack-ui/hooks\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Button in React Native\nDESCRIPTION: This snippet demonstrates a link-style button with text and an icon. It uses the Button, ButtonText, and ButtonIcon components with custom styling for light and dark modes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Button variant='link'>\n  <ButtonText fontWeight='$medium' fontSize='$sm' color='$textLight900' $dark-color=\"$textDark300\">\n    Back to top\n  </ButtonText>\n  <ButtonIcon as={ArrowUpIcon} h='$3' w='$3' color='$backgroundLight900' ml='$1' $dark-color=\"$backgroundDark300\"/>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining MenuItem Component Props in JSX\nDESCRIPTION: This code snippet defines the props for the MenuItem component, which inherits from React Native's Pressable component and includes the closeOnSelect prop.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.TBody>\n  <Table.TR>\n    <Table.TD>\n      <Table.TText>\n        <InlineCode>closeOnSelect</InlineCode>\n      </Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>boolean</Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>true</Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>{`This prop determine whether menu is closed after option is selected.`}</Table.TText>\n    </Table.TD>\n  </Table.TR>\n</Table.TBody>\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in React\nDESCRIPTION: Example of how to use the Button component with ButtonText in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\n\nfunction Example() {\n  return (\n    <Button {...props}>\n          <ButtonText>Hello World!</ButtonText>\n        </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Left-Aligned Label Checkbox Implementation\nDESCRIPTION: Creates a checkbox group with left-aligned labels and right-aligned checkboxes. Uses state management to track selected values and implements custom styling for layout control.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxIndicator, CheckboxLabel, CheckboxIcon, CheckboxGroup } from \"@/components/ui/checkbox\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { CheckIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App(){\n             const [values, setValues] = React.useState([\"Jane\"]);\n           return (\n             <CheckboxGroup value={values}  onChange={(keys) => {\n        setValues(keys)\n      }}>\n     <VStack space=\"lg\" className='w-40'>\n            <Checkbox className='justify-between' value=\"Jane\">\n              <CheckboxLabel >Jane Cooper</CheckboxLabel>\n                <CheckboxIndicator>\n                   <CheckboxIcon as={CheckIcon}/>\n                </CheckboxIndicator>\n            </Checkbox>\n            <Checkbox value=\"Wade\" className='justify-between'>\n                <CheckboxLabel >Wade Warren</CheckboxLabel>\n                  <CheckboxIndicator>\n                      <CheckboxIcon as={CheckIcon} />\n                  </CheckboxIndicator>\n            </Checkbox>\n            <Checkbox className='justify-between' value=\"Robert\">\n              <CheckboxLabel >Robert Fox</CheckboxLabel>\n                <CheckboxIndicator>\n                  <CheckboxIcon as={CheckIcon}/>\n                </CheckboxIndicator>\n            </Checkbox>\n          </VStack>\n                 </CheckboxGroup>\n           )\n        }\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon Component in React Native\nDESCRIPTION: Example of rendering an Icon component using the EditIcon in a React Native application. The component accepts props for customization.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon, EditIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Icon as={EditIcon} {...props} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Colored Progress Bars Implementation\nDESCRIPTION: Example showing Progress components with different color tracks.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"3xl\">\n  <Progress value={46} w='$96' h='$2' size=\"sm\">\n    <ProgressFilledTrack bg=\"$emerald600\"/>\n  </Progress>\n  <Progress value={46} w='$96' h='$2' size=\"sm\">\n    <ProgressFilledTrack bg=\"$amber600\"/>\n  </Progress>\n  <Progress value={46} w='$96' h='$2' size=\"sm\">\n    <ProgressFilledTrack bg=\"$fuchsia600\"/>\n  </Progress>\n  <Progress value={46} w='$96' h='$2' size=\"sm\">\n    <ProgressFilledTrack bg=\"$cyan600\"/>\n  </Progress>\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Switch Component\nDESCRIPTION: Example showing how to import the Switch component from your components directory and use it in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from '@/components/ui/switch';\n\nexport default () => <Switch />;\n```\n\n----------------------------------------\n\nTITLE: Using responsive styling with mediaQueries in component styles\nDESCRIPTION: Component styles can reference defined mediaQueries using the @ symbol, allowing for responsive designs that adapt to different screen sizes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  \"@md\": {\n    p: '$3',\n  },\n  \"@lg\": {\n    p: '$4',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Divider Component Installation Command\nDESCRIPTION: CLI command for installing the Divider component using gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add divider\n```\n\n----------------------------------------\n\nTITLE: Link Component with External URL and Custom Text\nDESCRIPTION: Demonstrates using the Link component with an external URL, custom text, and additional text elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Link/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack>\n  <Text size=\"lg\">Design inspiration from </Text>\n  <Link href=\"https://gluestack.io/\" isExternal>\n    <LinkText size=\"lg\">pinterest.com</LinkText>\n  </Link>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Rendering Input Component in React Native\nDESCRIPTION: This snippet demonstrates how to render a basic Input component with a placeholder text. It includes props for customization such as variant, size, and disabled state.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Input {...props}>\n  <InputField\n      placeholder='Enter Text here'\n  />\n</Input>\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Component Structure in React Native\nDESCRIPTION: This example illustrates the basic structure of the Badge component, including BadgeText and BadgeIcon. It shows how these subcomponents are nested within the main Badge component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Badge>\n    <BadgeText />\n    <BadgeIcon />\n  </Badge>\n);\n```\n\n----------------------------------------\n\nTITLE: React Native Traditional Card Styling\nDESCRIPTION: Example of styling a card component using traditional React Native StyleSheet API with explicit style definitions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/styling/utility-and-sx-props/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.topContainer}>\n        <View style={styles.metaContainer}>\n          <View>\n            <Text style={styles.timings}>Today @ 9PM</Text>\n            <Text style={styles.description}>Let's talk about avatar!</Text>\n          </View>\n          <Pressable style={styles.button}>\n            <Text style={styles.buttonText}>Remind me</Text>\n          </Pressable>\n        </View>\n        <Image\n          source={{\n            uri: 'https://media.vanityfair.com/photos/5ba12e6d42b9d16f4545aa19/3:2/w_1998,h_1332,c_limit/t-Avatar-The-Last-Airbender-Live-Action.jpg',\n          }}\n          style={styles.avatar}\n        />\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conversion of Basic Utility Props to sx Props\nDESCRIPTION: Shows how basic utility props are internally converted to the sx prop format in gluestack-style.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/UtilityProps/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<StyledButton\n  sx={{ borderColor: '$grey600', bg: '$grey700', borderRadius: '$md' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Component Implementation in React Native\nDESCRIPTION: Example showing how to implement a basic slider component with customizable properties including size, orientation, and disabled states.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from \"@/components/ui/center\";\nimport { Slider, SliderThumb, SliderTrack, SliderFilledTrack } from \"@/components/ui/slider\";\n\nfunction Example() {\n  return (\n    <Center className=\"w-[300px] h-[150px]\">\n          <Slider  defaultValue={30} {...props}  >\n            <SliderTrack>\n              <SliderFilledTrack />\n            </SliderTrack>\n            <SliderThumb />\n          </Slider>\n      </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pressable Component Manually\nDESCRIPTION: Command to install the Pressable component dependency manually using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/pressable\n```\n\n----------------------------------------\n\nTITLE: Color Scheme Variations for Spinner in React\nDESCRIPTION: Demonstrates how to create multiple Spinner components with different color schemes using VStack for vertical alignment.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Spinner/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"md\" >\n  <Spinner color=\"$indigo600\" />\n  <Spinner color=\"$emerald600\" />\n  <Spinner color=\"$amber600\" />\n  <Spinner color=\"$fuchsia600\" />\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Configuring GluestackUIProvider for Native\nDESCRIPTION: Create and configure the GluestackUIProvider component for native platforms.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n%%-- File: core-components/nativewind/gluestack-ui-provider/index.tsx --%%\n```\n\n----------------------------------------\n\nTITLE: Conversion of Complex Utility Props to sx Props\nDESCRIPTION: Shows how complex utility props with state and media query modifiers are internally converted to nested sx prop objects.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/UtilityProps/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<StyledButton\n  sx={{\n    'flexDirection': 'column',\n    ':hover': {\n      bg: '$primary600',\n    },\n    '_text': {\n      ':hover': {\n        color: '$text800',\n      },\n    },\n    '@md': {\n      flexDirection: 'row',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Icon Component in React\nDESCRIPTION: Basic usage example of the Icon component in a React functional component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Icon as={} />;\n```\n\n----------------------------------------\n\nTITLE: Basic Card Component Implementation\nDESCRIPTION: Simple example of implementing a Card component with a heading and text content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Card/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from \"@/components/ui/card\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Card {...props} className=\"m-3\">\n      <Heading size=\"md\" className=\"mb-1\">\n        Quick Start\n      </Heading>\n      <Text size=\"sm\">Start building your next project in minutes</Text>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Select Component Structure in JSX\nDESCRIPTION: This code snippet illustrates the basic structure and anatomy of the Select component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Select/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Select>\n    <SelectTrigger>\n      <SelectInput />\n      <SelectIcon>\n        <Icon />\n      </SelectIcon>\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectBackdrop />\n      <SelectContent>\n        <SelectDragIndicatorWrapper>\n          <SelectDragIndicator />\n        </SelectDragIndicatorWrapper>\n        <SelectItem />\n      </SelectContent>\n    </SelectPortal>\n  </Select>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of StatusBar Component in React Native\nDESCRIPTION: This snippet demonstrates the basic structure and usage of the StatusBar component in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/StatusBar/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <StatusBar />;\n```\n\n----------------------------------------\n\nTITLE: Alert Component Import Statement\nDESCRIPTION: Example showing how to import Alert components in a project\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert, AlertIcon, AlertText } from '@/components/ui/alert';\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Strategy in Tailwind (JavaScript)\nDESCRIPTION: Sets up the dark mode strategy in tailwind.config.js based on the DARK_MODE environment variable.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  darkMode: process.env.DARK_MODE ? process.env.DARK_MODE : 'media',\n  // rest of the config\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Server-Side Rendering with addEventListener in React Native Web\nDESCRIPTION: This test validates that components using addEventListener can be correctly rendered on the server using ReactDOMServer. It verifies that server-side rendering produces the expected HTML output without errors.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n */\n\nimport * as React from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\nimport { addEventListener } from '..';\ndescribe('addEventListener', () => {\n  test('can render correctly using ReactDOMServer', () => {\n    const listener = jest.fn();\n    const targetRef = React.createRef();\n    declare function Component(): any;\n    const output = ReactDOMServer.renderToString(<Component />);\n    expect(output).toBe('<div></div>');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Component Configuration with Variants\nDESCRIPTION: Shows how to create component variants with different styles and sizes, including default props configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/Styled/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledButton = styled(\n  Pressable,\n  {\n    variants:{\n      variant:{\n        solid:{\n          bg: '$primary600',\n          borderRadius: '$full',\n          _text: {\n            color: '$white',\n          },\n        },\n        subtle:{\n          bg: '$primary100',\n          borderWidth:\"$1\",\n          borderRadius: '$full',\n          _text: {\n            color: '$primary400',\n          },\n        },\n        ...\n      },\n      size:{\n        \"sm\":{\n          px: '$3',\n          py: '$2',\n        },\n        \"md\":{\n          px: '$4',\n          py: '$3',\n        },\n        ...\n      }\n    },\n    defaultProps:{\n      variant:\"solid\",\n      size:\"md\",\n    }\n  },\n  {\n    descendantStyle: ['_text'],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Divider Implementation in React Native\nDESCRIPTION: Demonstrates basic usage of the Divider component with text elements in a centered layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from \"@/components/ui/center\";\nimport { Divider } from \"@/components/ui/divider\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Center>\n          <Text className=\"font-semibold\">\n            Easy\n          </Text>\n          <Divider className=\"my-0.5\"/>\n          <Text className=\"font-semibold\">\n            Difficult\n          </Text>\n        </Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Plugins\nDESCRIPTION: Example of configuring animation plugins using Moti or Legend Motion drivers in gluestack-ui.config.ts\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/theme-configuration/customizing-theme/EjectLibrary/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n//gluestack-ui.config.ts\n\nimport { config as defaultConfig } from '@gluestack-ui/config';\nimport { createConfig } from '@gluestack-ui/themed';\nimport { AnimationResolver } from '@gluestack-style/animation-resolver';\nimport { MotionDriver } from '@gluestack-style/legend-motion-animation-driver';\nimport { MotiDriver } from '@gluestack-style/moti-animation-driver';\n\nexport const config = createConfig({\n  ...defaultConfig\n  plugins: [\n    ...defaultConfig.plugins,\n    // using legend-motion\n    new AnimationResolver(MotionDriver,{\n      // You can override animated aliases here if you want by default driver have support for all the animated components aliases required.\n    }),\n    // using moti\n    // new AnimationResolver(MotiDriver),\n  ],\n});\n\ntype Config = typeof config;\ntype Components = typeof components;\n\ndeclare module '@gluestack-style/react' {\n  interface ICustomConfig extends Config {}\n  interface ICustomComponents extends Components {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Themed Actionsheet with Items\nDESCRIPTION: This example shows a basic themed Actionsheet with a list of options like Edit Profile, View Followers, etc. It demonstrates the standard implementation of an Actionsheet with individual items that close the sheet when pressed.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n        const [showActionsheet, setShowActionsheet] = React.useState(false);\n        const handleClose = () => setShowActionsheet(!showActionsheet);\n          return (\n            <Box>\n              <Button onPress={handleClose}>\n                <ButtonText>Open</ButtonText>\n              </Button>\n              <Actionsheet isOpen={showActionsheet} onClose={handleClose} zIndex={999}>\n                <ActionsheetBackdrop />\n                <ActionsheetContent zIndex={999}>\n                  <ActionsheetDragIndicatorWrapper>\n                    <ActionsheetDragIndicator />\n                  </ActionsheetDragIndicatorWrapper>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>Edit Profile</ActionsheetItemText>\n                  </ActionsheetItem>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>View Followers</ActionsheetItemText>\n                  </ActionsheetItem>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>Add a Post</ActionsheetItemText>\n                  </ActionsheetItem>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>Delete Account </ActionsheetItemText>\n                  </ActionsheetItem>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>Settings</ActionsheetItemText>\n                  </ActionsheetItem>\n                  <ActionsheetItem onPress={handleClose}>\n                    <ActionsheetItemText>Sign Out</ActionsheetItemText>\n                  </ActionsheetItem>\n                </ActionsheetContent>\n              </Actionsheet>\n            </Box>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Custom Components Path\nDESCRIPTION: Advanced babel configuration that specifies the library name and file path of components created using @gluestack-style/react through the components option, enabling build-time resolution of inline styles for custom components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/production-optimizations/babel-plugin/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\n\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        gluestackStyleResolver,\n        {\n          components: [\n            '@gluestack-ui/themed', // import path of the components folder or library name\n            path.resolve(__dirname, './gluestack-ui-components/core/component'), // file path of the components folder\n          ],\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component in JSX\nDESCRIPTION: Example of how to import the Image component in a React component file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Image/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from '@/components/ui/image';\n```\n\n----------------------------------------\n\nTITLE: Rendering Card1 Component with AppProvider in JSX\nDESCRIPTION: This snippet shows how to use the AppProvider component from gluestack design system to wrap the Card1 component, providing the necessary context for gluestack-ui components to function properly.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/getting-started/Installation/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider>\n  <Card1 />\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: Complete Input Component Structure\nDESCRIPTION: Example showing the full structure of Input component with InputField, InputSlot, and InputIcon\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Input>\n    <InputField />\n    <InputSlot>\n      <InputIcon>{/* Some Icon Component */}</InputIcon>\n    </InputSlot>\n  </Input>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Icon Component\nDESCRIPTION: Example of importing and using the Icon component in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon } from '@/components/ui/icon';\n\nexport default () => <Icon as={} />;\n```\n\n----------------------------------------\n\nTITLE: Installing AlertDialog Component via CLI\nDESCRIPTION: This command installs the AlertDialog component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Installing Menu Component via CLI\nDESCRIPTION: Command to install the Menu component using gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add menu\n```\n\n----------------------------------------\n\nTITLE: Basic LinearGradient Usage\nDESCRIPTION: A minimal example showing how to use the LinearGradient component in a React component. This demonstrates the simplest implementation pattern.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/recipes/linear-gradient/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <LinearGradient />;\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Components in React\nDESCRIPTION: This code snippet shows how to import various Popover-related components from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Popover,\n  PopoverBackdrop,\n  PopoverContent,\n  PopoverArrow,\n  PopoverHeader,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverFooter,\n} from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Component Implementation\nDESCRIPTION: A simple example showing how to use the Progress component with ProgressFilledTrack.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Progress>\n    <ProgressFilledTrack />\n  </Progress>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using VStack Component\nDESCRIPTION: Example of how to import and use the VStack component in a React project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/VStack/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VStack } from '@/components/ui/vstack';\n\nexport default () => <VStack />;\n```\n\n----------------------------------------\n\nTITLE: Configuring ancestorStyle in componentConfig for gluestack-style\nDESCRIPTION: The ancestorStyle property is an array of strings that denotes the ancestors of a component, allowing styles to be applied based on ancestor components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  // descendantStyle: ['_text', '_spinner'];\n  ancestorStyle: ['_text'];\n  // resolveProps: ['placeholderTextColor'];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SVG Icons with createIcon Function\nDESCRIPTION: This snippet demonstrates how to create a custom icon using the createIcon function from gluestack UI. It creates a GluestackIcon component by defining SVG paths and then uses it in the Icon component with styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst GluestackIcon = createIcon({\n  // createIcon function is imported from '@gluestack-ui/themed'\n  viewBox: '0 0 32 32',\n  path: (\n    <>\n      {/* Rect, Path is imported from 'react-native-svg' */}\n      <Rect width=\"32\" height=\"32\" rx=\"2\" fill=\"currentColor\"/>\n      <Path d=\"M9.5 14.6642L15.9999 9.87633V12.1358L9.5 16.9236V14.6642Z\" fill=\"white\"/>\n      <Path d=\"M22.5 14.6642L16.0001 9.87639V12.1359L22.5 16.9237V14.6642Z\" fill=\"white\"/>\n      <Path d=\"M9.5 19.8641L15.9999 15.0763V17.3358L9.5 22.1236V19.8641Z\" fill=\"white\"/>\n      <Path d=\"M22.5 19.8642L16.0001 15.0764V17.3358L22.5 22.1237V19.8642Z\" fill=\"white\"/>\n    </>\n  ),\n});\nfunction App () {\n  return <Icon as={GluestackIcon} color='black' size='xl'/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a custom GluestackUIProvider with multiple providers\nDESCRIPTION: Example demonstrating how to create a comprehensive GluestackUIProvider that combines StyledProvider, OverlayProvider, and ToastProvider to wrap an entire application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/provider/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the createProvider function\nimport { StyledProvider } from '@gluestack-style/react';\nimport { OverlayProvider } from '@gluestack-ui/overlay';\nimport { ToastProvider } from '@gluestack-ui/toast';\n\nconst GluestackUIStyledProvider = createProvider({ StyledProvider });\n\nconst GluestackUIProvider = ({ children, ...props }: any) => {\n  return (\n    <GluestackUIStyledProvider {...props}>\n      <OverlayProvider>\n        <ToastProvider>{children}</ToastProvider>\n      </OverlayProvider>\n    </GluestackUIStyledProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: GluestackUIProvider Basic Anatomy\nDESCRIPTION: Basic structure of GluestackUIProvider component showing its fundamental implementation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Provider/GluestackUIProvider/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <GluestackUIProvider config={config}>{children}</GluestackUIProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Starter Kit Documentation\nDESCRIPTION: Imports necessary components from Storybook addon-docs and custom components for displaying responsive design examples and app configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/starter-kit/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\nimport Responsiveness from '../../extra-components/nativewind/Responsive';\nimport { starterKit } from '../../extra-components/nativewind/appConfig';\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Tokens\nDESCRIPTION: Example of customizing theme tokens like colors in the gluestack-ui.config.ts file\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/theme-configuration/customizing-theme/EjectLibrary/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// gluestack-ui.config.ts\n\nexport const config = createConfig({\n  // ...Theme config\n  tokens: {\n    colors: {\n      ...Theme config.tokens.colors,\n      // replacing primary color\n      primary0: '#ffffff',\n      primary50: '#a3fff4',\n      primary100: '#82fff0',\n      primary200: '#61ffed',\n      primary300: '#45fae5',\n      primary400: '#24f9e1',\n      primary500: '#17f3d9',\n      primary600: '#12e4cb',\n      primary700: '#17ccb7',\n      primary800: '#1ab5a3',\n      primary900: '#1c9f90',\n      primary950: '#000000',\n    },\n  },\n});\n\ntype Config = typeof config;\ntype Components = typeof components;\n\ndeclare module '@gluestack-style/react' {\n  interface ICustomConfig extends Config {}\n  interface ICustomComponents extends Components {}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SafeAreaView Implementation\nDESCRIPTION: Demonstrates the basic anatomy and usage of the SafeAreaView component in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/SafeAreaView/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <SafeAreaView />;\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Component Import and Usage in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the basic Markdown component in a React Native application. It shows a minimal implementation with default styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Skeleton/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Markdown } from \"@gluestack-ui/markdown\";\n\n<Markdown>\n  # This is a heading\n  This is a paragraph\n  This is another paragraph\n</Markdown>;\n```\n\n----------------------------------------\n\nTITLE: Adding Boolean Variants to a Button Component in React Native\nDESCRIPTION: This example illustrates how to add a boolean variant to a button component. It includes an 'outlined' variant that can be toggled on or off, affecting the button's appearance.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/Variants/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\nconst StyledButtonVariant = styled(Pressable, {\n  px: '$3.5',\n  py: '$2.5',\n  rounded: '$md',\n  variants: {\n    variant: {\n      solid: {\n        bg: '$primary600',\n      },\n      subtle: {\n        bg: '$primary400',\n      },\n    },\n    outlined: {\n      true: {\n        borderColor: '$primary800',\n        borderWidth: '$1',\n        bg: 'transparent'\n      },\n    },\n  },\n});\nconst StyledButtonText = styled(\n  Text,\n  {\n    color: '$textDark50',\n    fontWeight: '400',\n  },\n  { ancestorStyle: ['_text'] }\n);\nreturn (\n  <Provider config={config}>\n    <StyledButtonVariant {...props}>\n      <StyledButtonText>Button</StyledButtonText>\n    </StyledButtonVariant>\n  </Provider>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Center Component in React Native\nDESCRIPTION: This example demonstrates the basic usage of the Center component in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Center/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Center />;\n```\n\n----------------------------------------\n\nTITLE: Installing Actionsheet Component via CLI\nDESCRIPTION: Command to install Actionsheet component using gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add actionsheet\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui Dependencies with Yarn\nDESCRIPTION: Command to install required dependencies for gluestack-ui using Yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-expo/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-ui/themed @gluestack-style/react react-native-svg@13.4.0\n```\n\n----------------------------------------\n\nTITLE: Importing the Checkbox Component in JavaScript\nDESCRIPTION: This code snippet shows how to import the Checkbox component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Checkbox } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Heading Component in React\nDESCRIPTION: Shows how to import the Heading component from the gluestack-ui themed library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Typography/Heading/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Heading } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Initializing Spinner Component in React Native\nDESCRIPTION: This snippet demonstrates how to initialize and use the Spinner component from gluestack-ui. It includes props for customization and uses Tailwind CSS colors.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from \"@/components/ui/spinner\";\nimport colors from \"tailwindcss/colors\";\n\nfunction Example() {\n  return (\n    <Spinner {...props} color={colors.gray[500]} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useStyled Hook from gluestack-ui\nDESCRIPTION: This snippet shows how to import the useStyled hook from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-styled/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useStyled } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using Radio Component in React with gluestack-ui\nDESCRIPTION: This code snippet demonstrates how to create a custom Radio component using the createRadio function from gluestack-ui. It shows the import of styled components, creation of the Radio component, and an example of its usage.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Radio/index.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Indicator,\n  Icon,\n  Label,\n  Group,\n} from '../components/core/radio/styled-components';\n\n// import the createRadio function\nimport { createRadio } from '@gluestack-ui/radio';\n\n// Understanding the API\nconst Radio = createRadio({\n  Root,\n  Indicator,\n  Icon,\n  Label,\n  Group,\n});\n\n// Using the radio component\nexport default () => (\n  <RadioGroup>\n    <Radio>\n      <RadioIndicator>\n        <RadioIcon />\n      </RadioIndicator>\n      <RadioLabel />\n    </Radio>\n  </RadioGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin\nDESCRIPTION: Configuration settings for the babel plugin in babel.config.js or .babelrc files.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/install-expo/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  plugins: ['@gluestack-style/babel-plugin-styled-resolver'],\n};\n```\n\nLANGUAGE: json\nCODE:\n```\n// .babelrc\n{\n  \"plugins\": [\"@gluestack-style/babel-plugin-styled-resolver\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Button Components in JSX\nDESCRIPTION: This snippet shows how to import various Button-related components from the gluestack-ui library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Button,\n  ButtonText,\n  ButtonSpinner,\n  ButtonIcon,\n  ButtonGroup,\n} from '@/components/ui/button';\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Component in JSX\nDESCRIPTION: Shows how to import the Toast component and related hooks from the gluestack-ui library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Toast/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useToast, Toast } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Props in React Native\nDESCRIPTION: This snippet defines the props for the ButtonGroup component, which inherits from React Native's View component. It includes properties for flex direction, disabling buttons, attaching buttons, reversing order, and setting space between buttons.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  flexDirection: 'row' | 'column' | 'row-reverse' | 'column-reverse',\n  isDisabled: boolean,\n  isAttached: boolean,\n  reversed: boolean,\n  space: string\n}\n```\n\n----------------------------------------\n\nTITLE: Card Component Import and Usage\nDESCRIPTION: Basic import statement and usage example for the Card component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Card/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from '@/components/ui/card';\n\nexport default () => <Card />;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Data Attributes in JSX\nDESCRIPTION: This snippet shows the data attributes used for styling the Button component based on its state. These attributes are applied as boolean values and used to create state-based styling via classNames.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  data-hover={isHovered}\n  data-active={isActive}\n  data-disabled={isDisabled}\n  data-focus-visible={isFocusVisible}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Config Package - NPM\nDESCRIPTION: Command to install the latest version of @gluestack-ui/config package using npm\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/theme-configuration/customizing-theme/EjectLibrary/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/config@latest\n```\n\n----------------------------------------\n\nTITLE: Basic HStack Component Structure\nDESCRIPTION: Basic anatomy of the HStack component showing its minimal implementation\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/HStack/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <HStack />;\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectScrollView in React Native\nDESCRIPTION: SelectScrollView is mapped to Actionsheet.ScrollView and inherits all properties of React Native's ScrollView component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectScrollView>\n  {/* Scrollable content */}\n</SelectScrollView>\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-aria/utils Package with Yarn\nDESCRIPTION: Command to install the @react-native-aria/utils package using yarn package manager. This package is a dependency for the gluestack-ui project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/combobox/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/utils\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-checked Switch with Label in GlueStack UI\nDESCRIPTION: Demonstrates a switch component initialized in checked state with a label. Features custom track and thumb colors, and includes a default value prop set to true.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Text } from \"@/components/ui/text\";\nimport colors from \"tailwindcss/colors\";\n\nfunction Example() {\n  return (\n    <HStack space=\"md\">\n          <Switch\n            defaultValue={true}\n            trackColor={{ false: colors.gray[300], true: colors.gray[500] }}\n            thumbColor={colors.gray[50]}\n            activeThumbColor={colors.gray[50]}\n            ios_backgroundColor={colors.gray[300]}\n          />\n          <Text size=\"sm\" >Public profile</Text>\n        </HStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Text Component Usage Example\nDESCRIPTION: Basic example showing how to use the Text component to display 'Hello World!'\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Text/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <Text>\n          Hello World!\n        </Text>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Actionsheet Component in React\nDESCRIPTION: This snippet shows how to create a custom Actionsheet component using the createActionsheet function. It demonstrates importing styled components and using them to create a customized Actionsheet.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Content,\n  Item,\n  ItemText,\n  DragIndicator,\n  IndicatorWrapper,\n  Backdrop,\n} from '../components/core/actionsheet/styled-components';\n\n// import the createActionsheet function\nimport { createActionsheet } from '@gluestack-ui/actionsheet';\n\n// Understanding the API\nconst Actionsheet = createActionsheet({\n  Root,\n  Content,\n  Item,\n  ItemText,\n  DragIndicator,\n  IndicatorWrapper,\n  Backdrop,\n});\n\n// Using the actionsheet component\nexport default () => (\n  <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n    <ActionsheetBackdrop />\n    <ActionsheetContent>\n      <ActionsheetDragIndicatorWrapper>\n        <ActionsheetDragIndicator />\n      </ActionsheetDragIndicatorWrapper>\n      <ActionsheetItem onPress={handleClose}>\n        <ActionsheetItemText>Community</ActionsheetItemText>\n      </ActionsheetItem>\n    </ActionsheetContent>\n  </Actionsheet>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Card Component Usage in JSX\nDESCRIPTION: Demonstrates the basic structure of using the Card component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Card/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Card />;\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Configuration with createConfig\nDESCRIPTION: Demonstrates how to create a theme configuration using createConfig function with aliases, tokens, and multiple theme definitions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/Themes/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createConfig } from '@gluestack-style/react';\n\nexport const config = createConfig({\n  aliases: {\n    // aliases\n  },\n  tokens: {\n    colors: {\n      primary: '#000',\n      secondary: '#fff',\n      // ...\n      red300: '#000',\n      red400: '#000',\n      red500: '#000',\n      // ...\n      brown300: '#000',\n      brown400: '#000',\n      brown500: '#000',\n      // ...\n    },\n    // ...\n  },\n  themes: {\n    classic: {\n      colors: {\n        primary: '$colors$brown400',\n        secondary: '$colors$brown100',\n      },\n    },\n    modern: {\n      colors: {\n        primary: '$colors$red400',\n        secondary: '$colors$red100',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components from gluestack-ui\nDESCRIPTION: This code imports various UI components from the @gluestack-ui/themed package, along with configuration and utility functions from related packages. These imports are used to create and demonstrate UI recipes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/more-recipes/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  GluestackUIProvider,\n  HStack,\n  Text,\n  Pressable,\n  Icon,\n  AddIcon,\n  Button,\n  Box,\n} from '@gluestack-ui/themed';\nimport { config } from '@gluestack-ui/config';\nimport { transformedCode } from '../../../utils';\nimport Wrapper from '../../../components/Wrapper';\nimport {\n  AppProvider,\n  CodePreview,\n  Table,\n  TableContainer,\n  InlineCode,\n} from '@gluestack/design-system';\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Configuring Fonts in gluestack.config.js\nDESCRIPTION: Configuration code for setting up font families in the gluestack.config.js file, which defines default fonts for heading, body, and monospace text.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Fonts/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfonts: {\n  heading: \"inter\", // Heading component uses this by default\n  body: \"inter\", // Text component uses this by default\n  mono: \"monospace\",\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scheme Variables in Config (JavaScript)\nDESCRIPTION: Sets up CSS variable values for light and dark color schemes in the config.ts file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  light: vars({\n    '--color-primary': '51 51 51',\n  }),\n  dark: vars({\n    '--color-primary': '240 240 240',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Local Fonts in Expo\nDESCRIPTION: Example of using the useFonts hook to load a local font file from the assets directory in an Expo application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Fonts/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n const [fontsLoaded] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component Manually in gluestack-ui\nDESCRIPTION: This command installs the Popover component package manually using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/popover\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Slider Dependencies\nDESCRIPTION: Command to manually install the required slider component dependencies using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/slider\n```\n\n----------------------------------------\n\nTITLE: Importing Center Component in React Native\nDESCRIPTION: This snippet shows how to import the Center component in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Center/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from '@/components/ui/center';\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui Dependencies with npm\nDESCRIPTION: Command to install the @gluestack-ui/themed package and its required dependencies (including @gluestack-style/react and react-native-svg) using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/themed/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/themed @gluestack-style/react react-native-svg@13.4.0\n```\n\n----------------------------------------\n\nTITLE: HStack Reversed Example\nDESCRIPTION: Example demonstrating HStack component with reversed ordering of elements\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/HStack/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@/components/ui/box\";\nimport { HStack } from \"@/components/ui/hstack\";\n\nfunction Example() {\n  return (\n    <HStack space=\"md\" reversed>\n          <Box className=\"w-20 h-20 bg-primary-300\"/>\n          <Box className=\"w-20 h-20 bg-primary-400\"/>\n          <Box className=\"w-20 h-20 bg-primary-500\"/>\n        </HStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useStyled from @gluestack-style/react\nDESCRIPTION: This snippet demonstrates how to import the useStyled hook from the @gluestack-style/react package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useStyled/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useStyled } from '@gluestack-style/react';\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Avatar Group in GlueStack UI\nDESCRIPTION: Demonstrates implementation of a simple avatar group without badges. Shows how to arrange multiple avatars with images in a horizontal layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<AvatarGroup>\n  <Avatar size=\"md\">\n    <AvatarFallbackText>John Doe</AvatarFallbackText>\n    <AvatarImage\n      source={{\n        uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n      }}\n    />\n  </Avatar>\n  <Avatar size=\"md\">\n    <AvatarFallbackText>John Doe</AvatarFallbackText>\n    <AvatarImage\n      source={{\n        uri: 'https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n      }}\n    />\n  </Avatar>\n  <Avatar size=\"md\">\n    <AvatarFallbackText>John Doe</AvatarFallbackText>\n    <AvatarImage\n      source={{\n        uri: 'https://images.unsplash.com/photo-1614289371518-722f2615943d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n      }}\n    />\n  </Avatar>\n  <Avatar size=\"md\">\n    <AvatarFallbackText>John Doe</AvatarFallbackText>\n    <AvatarImage\n      source={{\n        uri: 'https://images.unsplash.com/photo-1607746882042-944635dfe10e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n      }}\n    />\n  </Avatar>\n</AvatarGroup>\n```\n\n----------------------------------------\n\nTITLE: Example of Styled Object Before Font Resolution\nDESCRIPTION: Shows an example of a styled object with font properties before being processed by the FontResolver plugin.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/FontsPlugin/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  fontFamily: 'Nunito Sans',\n  fontWeight: 800,\n  fontStyle: 'italic',\n}\n```\n\n----------------------------------------\n\nTITLE: Importing View Component in React\nDESCRIPTION: This code snippet shows how to import the View component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/View/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { View } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React Native\nDESCRIPTION: This code snippet shows how to import the Badge component in a React Native file. It's the basic import statement needed to use the Badge component in your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from '@/components/ui/badge';\n```\n\n----------------------------------------\n\nTITLE: Creating a Pressable Component with Factory Pattern\nDESCRIPTION: Example of creating a Pressable component using the createPressable factory function from the package. This pattern allows for component composition with a Root component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/pressable/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Root from './Root';\nimport { createPressable } from '@gluestack-ui/pressable';\nexport const Pressable = createPressable({ Root });\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Component Dependencies\nDESCRIPTION: NPM command to install the required Toast component package\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/toast\n```\n\n----------------------------------------\n\nTITLE: Installing Default Theme with NPM\nDESCRIPTION: Command to install the optional default theme configuration package using NPM\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-rn/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/config@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Image Component via CLI\nDESCRIPTION: Command to add the Image component to a gluestack-ui project using the CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Image/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add image\n```\n\n----------------------------------------\n\nTITLE: Using Image Component in JSX\nDESCRIPTION: Basic usage example of the Image component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Image/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Image source={source} />;\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui Migration Package\nDESCRIPTION: Commands to install the gluestack-ui themed native-base package and its dependencies using yarn or npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/migration/native-base-to-gluestack-ui/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/themed-native-base react-native-svg@13.4.0\n\n# or\n\n$ npm i @gluestack-ui/themed-native-base react-native-svg@13.4.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Hello World with Text Component in gluestack-ui\nDESCRIPTION: This code snippet shows how to use the Text component to render a simple 'Hello World!' message. It demonstrates the basic usage of the component with content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Typography/Text/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n  Hello World!\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Creating Web Wrapper Component\nDESCRIPTION: Implementation of a web-specific wrapper component using HTML color input.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/third-party-library-integrations/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default ColorPicker = (props) => {\n  return <input type=\"color\" {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-aria/overlays package with yarn\nDESCRIPTION: Command to install the @react-native-aria/overlays package using yarn package manager. This package is a dependency for gluestack-ui projects.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/overlays/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/overlays\n```\n\n----------------------------------------\n\nTITLE: Starting the Storybook Development Environment\nDESCRIPTION: Command to start the storybook development server with local aliasing of packages. This provides an interactive UI to view and test components as you modify them.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: Using Wrapper Component\nDESCRIPTION: Example of using the wrapped ColorPicker component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/third-party-library-integrations/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker } from '../components';\nimport { Center } from '@gluestack-ui/themed';\nexport const HomeScreen = () => {\n  return (\n    <Center>\n      <ColorPicker style={{ height: 80, width: 80 }} />\n    </Center>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping the app with GluestackUIProvider\nDESCRIPTION: Example of how to use the GluestackUIProvider to wrap the main app component in App.tsx.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// App.tsx\nexport default function App() {\n  return (\n    <GluestackUIProvider>{/* Add your app code here */}</GluestackUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating GluestackUIProvider in App\nDESCRIPTION: Wrap the main App component with GluestackUIProvider.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// App.tsx\nexport default function App() {\n  return (\n    <GluestackUIProvider>{/* Add your app code here */}</GluestackUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Component\nDESCRIPTION: Renders the Responsiveness component with kitchensink configuration props to display responsive UI examples.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/kitchensink-app/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Responsiveness {...kitchensink} />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Default Token Documentation in JSX\nDESCRIPTION: This code snippet imports necessary components from Storybook and custom components for documenting default tokens in gluestack-ui v2.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/default-tokens/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\nimport {ColorPaletteComponent, ShadowComponent, FontSizeComponent, FontWeightComponent} from '../../../components/docs-components/DefaultComponent.tsx';\n```\n\n----------------------------------------\n\nTITLE: Select Item Props Table\nDESCRIPTION: Table structure showing the available props for SelectItem component including isDisabled, label, value, and textStyle\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Select/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider>\n  <TableContainer>\n    <Table>\n      <Table.THead>\n        <Table.TR>\n          <Table.TH>\n            <Table.TText>Prop</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Type</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Default</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Description</Table.TText>\n          </Table.TH>\n        </Table.TR>\n      </Table.THead>\n      <Table.TBody>\n        <Table.TR>\n          <Table.TD>\n            <Table.TText>\n              <InlineCode>isDisabled</InlineCode>\n            </Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>bool</Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>false</Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>{`When true, its disabled state activates.`}</Table.TText>\n          </Table.TD>\n        </Table.TR>\n        <!-- Additional rows omitted for brevity -->\n      </Table.TBody>\n    </Table>\n  </TableContainer>\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component from gluestack-ui\nDESCRIPTION: Example of importing a Button component from the gluestack-ui themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-expo/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Button } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for @react-native-aria/listbox v0.2.7\nDESCRIPTION: Version 0.2.7 patch update that includes a dependency update for @react-native-aria/interactions package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/listbox/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.7\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.14\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Input Component\nDESCRIPTION: This command installs the necessary dependency for the Input component using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/input\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Storybook in JSX\nDESCRIPTION: This code snippet demonstrates how to import components and utilities from Storybook and the gluestack design system. It imports Canvas, Meta, and Story from Storybook addon-docs as well as various custom components and the AppProvider from the gluestack design system.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/getting-started/Installation/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n\n<Meta title=\"ui/Home/Getting Started/Installation\" />\n\nimport { App, Talk, Socail, Card1, Card2 } from './App';\n\nimport { AppProvider } from '@gluestack/design-system';\n```\n\n----------------------------------------\n\nTITLE: Alert Component Installation via CLI\nDESCRIPTION: Command to install the Alert component using gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add alert\n```\n\n----------------------------------------\n\nTITLE: Basic Text Component Usage - JSX\nDESCRIPTION: Simple example showing basic usage of the Text component to display \"Hello World!\"\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Text/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n  Hello World!\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Input Component\nDESCRIPTION: NPM command for manually installing the Input component package\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/input\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Heading Component\nDESCRIPTION: Example of how to import and use the Heading component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Heading } from '@/components/ui/heading';\n\nexport default () => <Heading />;\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Components in React\nDESCRIPTION: This snippet shows how to import the Avatar and related components from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Avatar/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Avatar,\n  AvatarBadge,\n  AvatarFallbackText,\n  AvatarImage,\n} from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for gluestack-ui\nDESCRIPTION: Update the tailwind.config.js file with the necessary configuration for gluestack-ui components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n%%-- File: tailwind.config.js --%% \n```\n\n----------------------------------------\n\nTITLE: Rendering All Components Grid with AppProvider in gluestack-ui (JSX)\nDESCRIPTION: Sets up a Storybook documentation page that displays a grid of all available components in gluestack-ui. The code wraps the Grid component with an AppProvider that uses the gluestack-ui configuration to ensure proper styling and theming.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/overview/AllComponents/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider config={config}>\n  <Grid />\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: Installing Fab Component via CLI\nDESCRIPTION: This command uses the gluestack-ui CLI to add the Fab component to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add fab\n```\n\n----------------------------------------\n\nTITLE: Basic Spinner Component Implementation in React with gluestack-ui\nDESCRIPTION: Example showing how to import and use the Spinner component in a React application with gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from '@/components/ui/spinner';\n\nexport default () => <Spinner />;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Paths\nDESCRIPTION: Update tsconfig.json to include the path for the components folder.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  // ... (other configs)\n  compilerOptions: {\n    // ...\n    \"paths\": {\n      // ...\n      \"@/*\": [\"./\"] // Add relative path\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: HStack Import Example\nDESCRIPTION: Example showing how to import and use the HStack component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/HStack/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HStack } from '@/components/ui/hstack';\n\nexport default () => <HStack />;\n```\n\n----------------------------------------\n\nTITLE: GluestackUI Provider Setup for Page Router\nDESCRIPTION: Provider configuration for Next.js Page Router in _app.tsx\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@/styles/globals.css';\nimport type { AppProps } from 'next/app';\nimport { GluestackUIProvider } from '@gluestack-ui/themed';\nimport { config } from '@gluestack-ui/config';\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <GluestackUIProvider config={config}>\n      <Component {...pageProps} />\n    </GluestackUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Utils with Yarn\nDESCRIPTION: Command to install @react-native-aria/utils package as a project dependency using yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/separator/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/utils\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component in React\nDESCRIPTION: Shows how to import the Textarea component from the gluestack-ui themed library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Textarea/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { Textarea } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing SafeAreaView Component\nDESCRIPTION: Import statement for including the SafeAreaView component from @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/SafeAreaView/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { SafeAreaView } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Config with Custom Tokens\nDESCRIPTION: This code snippet shows how to update the tailwind.config.js file to include new custom tokens. It demonstrates adding a new background color and a custom font size to the Tailwind configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/customizing-theme/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n theme: {\n    extend: {\n      colors: {\n        background: {\n          ... // other color values,\n          /* Added a new background color */\n          new: 'var(--color-background-new)',\n        },\n      },\n        fontSize: {\n          ... // other font size values,\n          /* Added a new font size token */\n         'custom-heading-xl':'var(--custom-font-size)'\n      },\n    },\n    plugins: [],\n  },\n```\n\n----------------------------------------\n\nTITLE: Basic Input Component Usage\nDESCRIPTION: Example showing basic implementation of the Input component with InputField\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Input, InputField } from \"@/components/ui/input\";\n\nfunction Example() {\n  return (\n    <Input {...props}>\n          <InputField\n            placeholder='Enter Text here...'\n          />\n        </Input>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Breakpoints in gluestack-style Configuration\nDESCRIPTION: Configuration for defining responsive breakpoints in the gluestack-style.config.js file using the mediaQueries scale. This defines breakpoints for different screen sizes from base to extra-large.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/Breakpoints/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nmediaQueries: {\n  base: '@media screen and (min-width: 0)',\n  sm: '@media screen and (min-width: 480px)',\n  md: '@media screen and (min-width: 768px)',\n  lg: '@media screen and (min-width: 992px)',\n  xl: '@media screen and (min-width: 1280px)',\n},\n```\n\n----------------------------------------\n\nTITLE: Importing useToken from @gluestack-style/react\nDESCRIPTION: This snippet shows how to import the useToken hook from the @gluestack-style/react package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useToken/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useToken } from '@gluestack-style/react';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for gluestack-ui Documentation in JSX\nDESCRIPTION: This snippet imports necessary components from Storybook's addon-docs for creating interactive documentation pages. It sets up a Meta component to define the page title in the Storybook navigation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/tooling-setup/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n\n<Meta title=\"with-gluestack-style/home/Getting Started/Tooling Setup\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Portal Component Usage\nDESCRIPTION: Simple example of using the Portal component in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Portal/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Portal />;\n```\n\n----------------------------------------\n\nTITLE: Creating react-native-web Patch for Next.js 15 Compatibility\nDESCRIPTION: A patch file for react-native-web@0.19.13 that fixes compatibility issues with React 19 in Next.js 15. This modifies renderApplication.js, render/index.js, and unmountComponentAtNode to work with the new React rendering architecture.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\ndiff --git a/node_modules/react-native-web/dist/cjs/exports/AppRegistry/renderApplication.js b/node_modules/react-native-web/dist/cjs/exports/AppRegistry/renderApplication.js\nindex 0c0cb2f..83fd94b 100644\n--- a/node_modules/react-native-web/dist/cjs/exports/AppRegistry/renderApplication.js\n+++ b/node_modules/react-native-web/dist/cjs/exports/AppRegistry/renderApplication.js\n@@ -1,6 +1,5 @@\n \"use strict\";\n \n-var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n exports.__esModule = true;\n exports.default = renderApplication;\n@@ -8,7 +7,7 @@ exports.getApplication = getApplication;\n var _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n var _AppContainer = _interopRequireDefault(require(\"./AppContainer\"));\n var _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n-var _render = _interopRequireWildcard(require(\"../render\"));\n+var _render = require(\"../render\");\n var _StyleSheet = _interopRequireDefault(require(\"../StyleSheet\"));\n var _react = _interopRequireDefault(require(\"react\"));\n /**\n@@ -24,9 +23,8 @@ var _react = _interopRequireDefault(require(\"react\"));\n function renderApplication(RootComponent, WrapperComponent, callback, options) {\n   var shouldHydrate = options.hydrate,\n     initialProps = options.initialProps,\n-    mode = options.mode,\n     rootTag = options.rootTag;\n-  var renderFn = shouldHydrate ? mode === 'concurrent' ? _render.hydrate : _render.hydrateLegacy : mode === 'concurrent' ? _render.render : _render.default;\n+  var renderFn = shouldHydrate ? _render.hydrate : _render.render;\n   (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);\n   return renderFn(/*#__PURE__*/_react.default.createElement(_AppContainer.default, {\n     WrapperComponent: WrapperComponent,\ndiff --git a/node_modules/react-native-web/dist/cjs/exports/render/index.js b/node_modules/react-native-web/dist/cjs/exports/render/index.js\nindex b41ee11..18d9b2f 100644\n--- a/node_modules/react-native-web/dist/cjs/exports/render/index.js\n+++ b/node_modules/react-native-web/dist/cjs/exports/render/index.js\n@@ -10,15 +10,10 @@\n \n 'use client';\n \n-var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n exports.__esModule = true;\n-exports.default = renderLegacy;\n+exports.default = render;\n exports.hydrate = hydrate;\n-exports.hydrateLegacy = hydrateLegacy;\n-exports.render = render;\n-var _reactDom = require(\"react-dom\");\n var _client = require(\"react-dom/client\");\n-var _unmountComponentAtNode = _interopRequireDefault(require(\"../unmountComponentAtNode\"));\n var _dom = require(\"../StyleSheet/dom\");\n function hydrate(element, root) {\n   (0, _dom.createSheet)(root);\n@@ -30,21 +25,3 @@ function render(element, root) {\n   reactRoot.render(element);\n   return reactRoot;\n }\\ No newline at end of file\n-function hydrateLegacy(element, root, callback) {\n-  (0, _dom.createSheet)(root);\n-  (0, _reactDom.hydrate)(element, root, callback);\n-  return {\n-    unmount: function unmount() {\n-      return (0, _unmountComponentAtNode.default)(root);\n-    }\n-  };\n-}\n-function renderLegacy(element, root, callback) {\n-  (0, _dom.createSheet)(root);\n-  (0, _reactDom.render)(element, root, callback);\n-  return {\n-    unmount: function unmount() {\n-      return (0, _unmountComponentAtNode.default)(root);\n-    }\n-  };\n-}\\ No newline at end of file\ndiff --git a/node_modules/react-native-web/dist/cjs/exports/unmountComponentAtNode/index.js b/node_modules/react-native-web/dist/cjs/exports/unmountComponentAtNode/index.js\nindex 3ea3964..e740204 100644\n--- a/node_modules/react-native-web/dist/cjs/exports/unmountComponentAtNode/index.js\n+++ b/node_modules/react-native-web/dist/cjs/exports/unmountComponentAtNode/index.js\n@@ -1,8 +1,7 @@\n \"use strict\";\n \n exports.__esModule = true;\n-exports.default = void 0;\n-var _reactDom = require(\"react-dom\");\n+exports.default = unmountComponentAtNode;\n /**\n  * Copyright (c) Nicolas Gallagher.\n  *\n@@ -11,5 +10,9 @@ var _reactDom = require(\"react-dom\");\n  *\n  * \n  */\n-var _default = exports.default = _reactDom.unmountComponentAtNode;\n+\n+function unmountComponentAtNode(rootTag) {\n+  rootTag.unmount();\n+  return true;\n+}\n module.exports = exports.default;\\ No newline at end of file\ndiff --git a/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js b/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js\nindex b53dff6..c56c1dc 100644\n--- a/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js\n+++ b/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js\n@@ -11,15 +11,14 @@ import _extends from \"@babel/runtime/helpers/extends\";\n \n import AppContainer from './AppContainer';\n import invariant from 'fbjs/lib/invariant';\n-import renderLegacy, { hydrateLegacy, render, hydrate } from '../render';\n+import { render, hydrate } from '../render';\n import StyleSheet from '../StyleSheet';\n import React from 'react';\n export default function renderApplication(RootComponent, WrapperComponent, callback, options) {\n   var shouldHydrate = options.hydrate,\n     initialProps = options.initialProps,\n-    mode = options.mode,\n     rootTag = options.rootTag;\n-  var renderFn = shouldHydrate ? mode === 'concurrent' ? hydrate : hydrateLegacy : mode === 'concurrent' ? render : renderLegacy;\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Dialog Package with Yarn\nDESCRIPTION: Command to install the @react-native-aria/dialog package using yarn package manager\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/dialog/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/dialog\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui Grid Component via CLI\nDESCRIPTION: This command installs the Grid component from gluestack-ui using the project's CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Grid/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add grid\n```\n\n----------------------------------------\n\nTITLE: Implementing color mode-based styling with _colorMode selectors\nDESCRIPTION: Color mode-specific styles can be defined using _light, _dark, etc. selectors, allowing components to adapt their appearance based on the active color mode.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst StyledInput = styled(\n  TextInput,\n  {\n    py: '$2',\n    bg: '$gray50',\n    borderRadius: '$2',\n    _dark: {\n      bg: '$gray800',\n    },\n    _light: {\n      bg: '$gray50',\n    },\n  },\n  componentConfig,\n  extendedBaseConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Input Component Installation via CLI\nDESCRIPTION: Command to install the Input component using gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add input\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Queries in gluestack-style\nDESCRIPTION: Configuration example for breakpoints in gluestack-style. This snippet defines media queries for different screen sizes that can be used throughout the application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/ResponsiveStyles/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nmediaQueries: {\n  base: '@media screen and (min-width: 0)',\n  sm: '@media screen and (min-width: 480px)',\n  md: '@media screen and (min-width: 768px)',\n  lg: '@media screen and (min-width: 992px)',\n  xl: '@media screen and (min-width: 1280px)',\n},\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Component Dependencies Manually in React Native\nDESCRIPTION: This command installs the necessary dependencies for the Toast component when adding it manually to a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/toast\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ImageViewer Component\nDESCRIPTION: Example showing how to import and create an ImageViewer component with styled components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image-viewer/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createImageViewer } from '@gluestack-ui/image-viewer';\nimport { Root, Backdrop, Content, CloseButton } from './styled-components';\n\nexport const ImageViewer = createImageViewer({\n  Root,\n  Backdrop,\n  Content,\n  CloseButton,\n});\n```\n\n----------------------------------------\n\nTITLE: Text Component Import Example\nDESCRIPTION: Shows how to import and use the Text component in a React component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Text/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from '@/components/ui/text';\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Text />;\n```\n\n----------------------------------------\n\nTITLE: Popover with Arrow Implementation\nDESCRIPTION: Implementation of a Popover component that includes an arrow indicator, demonstrating the usage of PopoverArrow component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Popover/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  return (\n    <Popover\n      isOpen={isOpen}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      {...props}\n      trigger={(triggerProps) => {\n        return (\n          <Button\n            {...triggerProps}\n          >\n            <ButtonText>\n              Popover\n            </ButtonText>\n          </Button>\n        );\n      }}\n    >\n      <PopoverBackdrop/>\n      <PopoverContent>\n      <PopoverArrow />\n        <PopoverHeader>\n          <Heading size='lg'>Welcome!</Heading>\n          <PopoverCloseButton>\n            <Icon as={CloseIcon}/>\n          </PopoverCloseButton>\n        </PopoverHeader>\n        <PopoverBody>\n          <Text size='sm'>\n            Join the product tour and start creating your own checklist. Are you ready to jump in?\n          </Text>\n        </PopoverBody>\n        <PopoverFooter>\n          <Text size='xs' flex={1}>\n            Step 2 of 3\n          </Text>\n          <ButtonGroup space='md'>\n            <Button variant=\"outline\" action='secondary' onPress={handleClose}>\n              <ButtonText>Back</ButtonText>\n            </Button>\n            <Button onPress={handleClose}>\n              <ButtonText>Next</ButtonText>\n            </Button>\n          </ButtonGroup>\n        </PopoverFooter>\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectFlatList in React Native\nDESCRIPTION: SelectFlatList is mapped to Actionsheet.FlatList and inherits all properties of React Native's FlatList component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectFlatList\n  data={data}\n  renderItem={renderItem}\n  keyExtractor={keyExtractor}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Control Component\nDESCRIPTION: Basic example showing how to import styled components and create a FormControl component using the createFormControl function.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/form-control/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Root,\n  Error,\n  ErrorText,\n  ErrorIcon,\n  Label,\n  LabelText,\n  LabelAstrick,\n  Helper,\n  HelperText,\n} from '../components/core/form-control/styled-components';\nimport { createFormControl } from '@gluestack-ui/form-control';\nconst FormControl = createFormControl({\n  Root,\n  Error,\n  ErrorText,\n  ErrorIcon,\n  Label,\n  LabelText,\n  LabelAstrick,\n  Helper,\n  HelperText,\n});\n```\n\n----------------------------------------\n\nTITLE: Pressable Component Import\nDESCRIPTION: Example showing how to import and use the Pressable component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pressable } from '@/components/ui/pressable';\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Pressable />;\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.2.11\nDESCRIPTION: Documents patch changes and dependency updates for version 0.2.11 of @react-native-aria/toggle package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/toggle/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.11\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.12\n  - @react-native-aria/interactions@0.2.16\n```\n\n----------------------------------------\n\nTITLE: Installing Modal Component via CLI\nDESCRIPTION: This command uses the gluestack-ui CLI to add the Modal component to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add modal\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Image Component\nDESCRIPTION: Steps for manually installing the Image component, including npm installation and code integration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Image/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/image\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/icon Package\nDESCRIPTION: Commands to install the @gluestack-ui/icon package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/icon/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/icon\n\n# or\n\n$ npm i @gluestack-ui/icon\n```\n\n----------------------------------------\n\nTITLE: Using gluestack-ui components in RSC without dot notation\nDESCRIPTION: Example showing the recommended API format for using gluestack-ui components in React Server Components, replacing Button.Text syntax with ButtonText to accommodate RSC limitations.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/RSC/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonText>\n```\n\n----------------------------------------\n\nTITLE: Importing HStack Component\nDESCRIPTION: Import statement for using the HStack component in a project\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/HStack/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { HStack } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/checkbox Package\nDESCRIPTION: Commands to install the @gluestack-ui/checkbox package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/checkbox/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/checkbox\n\n# or\n\n$ npm i @gluestack-ui/checkbox\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component in gluestack-ui\nDESCRIPTION: Shows how to import the Link component from the gluestack-ui themed library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Link/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { Link } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient from gluestack-ui\nDESCRIPTION: This snippet shows how to import the LinearGradient component from the gluestack-ui themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/recipes/linearGradient/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LinearGradient } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Center Component in React Native\nDESCRIPTION: This snippet shows how to import and use the Center component in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Center/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from '@/components/ui/center';\n\nexport default () => <Center />;\n```\n\n----------------------------------------\n\nTITLE: Adding gluestack-ui components using CLI\nDESCRIPTION: Use the 'add' command to include specific components or all components from gluestack-ui in the project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add button\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add --all\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta Information\nDESCRIPTION: This code sets the metadata for the Storybook documentation page, defining the title and location in the navigation hierarchy.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/more-recipes/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"ui/Guides/Recipes/More Recipes\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Component Props in TypeScript\nDESCRIPTION: Lists the props available for the Menu component, including trigger, placement, defaultIsOpen, and various callbacks. The component inherits from React Native's View component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntrigger: (_props: any, state: { open: boolean; }) => Element\nplacement: \"bottom\" | \"top\" | \"right\" | \"left\" | \"top left\" | \"top right\" | \"bottom left\" | \"bottom right\" | \"right top\" | \"right bottom\" | \"left top\" | \"left bottom\"\ndefaultIsOpen: boolean\nonOpen: () => void\nonClose: () => void\nisOpen: boolean\noffset: number\ncrossOffset: number\ndisabledKeys: string []\ncloseOnSelect: boolean\nselectedKeys: 'all' | Iterable<Key>\nselectionMode: 'none'| 'single' | 'multiple'\nonSelectionChange: (keys: 'all' | Iterable<Key>) => void\n```\n\n----------------------------------------\n\nTITLE: Importing Components from gluestack Design System in JSX\nDESCRIPTION: This code imports several components (Table, TableContainer, InlineCode) from the gluestack design system package. These components are likely used for formatting and styling the documentation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tabs/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table, TableContainer, InlineCode } from '@gluestack/design-system';\n```\n\n----------------------------------------\n\nTITLE: Importing useColorMode from gluestack-ui in JSX\nDESCRIPTION: This snippet shows how to import the useColorMode hook from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-color-mode/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useColorMode } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Menu Components in React Native\nDESCRIPTION: This snippet shows how to import the Menu, MenuItem, MenuItemLabel, and MenuSeparator components from gluestack-ui in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Menu,\n  MenuItem,\n  MenuItemLabel,\n  MenuSeparator\n} from '@/components/ui/menu';\n```\n\n----------------------------------------\n\nTITLE: Menu Package Version History - Markdown\nDESCRIPTION: Detailed changelog entries for the @gluestack-ui/menu package showing version updates, dependency changes, and feature additions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/menu/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/menu\n\n## 0.2.43\n\n### Patch Changes\n\n- Updated dependencies\n  - @gluestack-ui/overlay@0.1.22\n  - @react-native-aria/interactions@0.2.16\n  - @react-native-aria/menu@0.2.15\n  - @react-native-aria/overlays@0.3.15\n\n## 0.2.42\n\n### Patch Changes\n\n- Feat : React-19 support\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n  - @gluestack-ui/utils@0.1.15\n  - @react-native-aria/menu@0.2.14\n  - @gluestack-ui/overlay@0.1.21\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui Table Component via CLI\nDESCRIPTION: Command to install the Table component using the gluestack-ui CLI, which simplifies the process of adding components to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Table/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add table\n```\n\n----------------------------------------\n\nTITLE: Rendering Divider Component in React Native\nDESCRIPTION: This snippet demonstrates how to use the Divider component to separate text elements in a centered layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Center>\n  <Text color=\"$text950\">\n    Easy\n  </Text>\n  <Divider  my=\"$0.5\" color=\"$text950\"/>\n  <Text color=\"$text950\">\n    Difficult\n  </Text>\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Installing the Modal Component via NPX in GlueStack UI\nDESCRIPTION: This command installs the Modal component to your project's dependencies using the npx gluestack-ui add command.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/modal/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx gluestack-ui@latest add modal\n```\n\n----------------------------------------\n\nTITLE: Configuring gluestack-style\nDESCRIPTION: Setup configuration file defining theme tokens, aliases, and global styles for gluestack-style.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/install-expo/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createConfig } from '@gluestack-style/react';\n\nexport const config = createConfig({\n  aliases: {\n    bg: 'backgroundColor',\n    bgColor: 'backgroundColor',\n    rounded: 'borderRadius',\n    h: 'height',\n    w: 'width',\n  },\n  tokens: {\n    colors: {\n      primary0: '#ffffff',\n      primary400: '#c084fc',\n      primary500: '#a855f7',\n      primary600: '#9333ea',\n    },\n    space: {\n      4: 16,\n      5: 20,\n      6: 24,\n    },\n    radii: {\n      sm: 4,\n      md: 6,\n    },\n    letterSpacings: {\n      md: 0,\n    },\n    lineHeights: {\n      sm: 20,\n      md: 22,\n    },\n    fontWeights: {\n      normal: '400',\n      medium: '500',\n    },\n    fontSizes: {\n      sm: 14,\n      md: 16,\n    },\n    mediaQueries: {\n      sm: '@media (min-width: 480px)',\n      md: '@media (min-width: 768px)',\n    },\n  },\n  globalStyle: {\n    variants: {\n      shadow: {\n        softShadow: {\n          shadowOffset: {\n            width: 0,\n            height: 0,\n          },\n          shadowRadius: 10,\n          shadowOpacity: 0.1,\n          _android: {\n            shadowColor: '$primary500',\n            elevation: 5,\n            shadowOpacity: 0.05,\n          },\n        },\n      },\n    },\n  },\n} as const);\n\ntype ConfigType = typeof config;\n\ndeclare module '@gluestack-style/react' {\n  interface ICustomConfig extends ConfigType {}\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of AlertDialog Dependencies\nDESCRIPTION: This command manually installs the required dependencies for the AlertDialog component, including the motion library for animations.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/alert-dialog @legendapp/motion\n```\n\n----------------------------------------\n\nTITLE: Creating Alert Component with @gluestack-ui/alert\nDESCRIPTION: Example of creating an Alert component by importing createAlert function and configuring it with Root, Text, and Icon styled components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/alert/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createAlert } from '@gluestack-ui/alert';\nimport { Root, Text, Icon } from './styled-components';\nexport const Alert = createAlert({\n  Root,\n  Text,\n  Icon,\n});\n```\n\n----------------------------------------\n\nTITLE: Component Import Statement\nDESCRIPTION: Example showing how to import the Heading component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Heading } from '@/components/ui/heading';\n```\n\n----------------------------------------\n\nTITLE: Popover Component Import Statement\nDESCRIPTION: Import statement for including Popover and related components in a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Popover/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { \n  Popover,\n  PopoverBackdrop,\n  PopoverContent,\n  PopoverArrow,\n  PopoverHeader,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverFooter,\n} from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing AlertDialog Component Dependencies Manually\nDESCRIPTION: This command installs the necessary npm package for the AlertDialog component when adding it manually to a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/alert-dialog\n```\n\n----------------------------------------\n\nTITLE: GluestackUI Provider Setup for App Router\nDESCRIPTION: Provider configuration for Next.js App Router to enable theme and context\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n'use client';\n\nimport { GluestackUIProvider } from '@gluestack-ui/themed';\nimport { config } from '@gluestack-ui/config';\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n  return <GluestackUIProvider config={config}>{children}</GluestackUIProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AlertDialog Component - Shell\nDESCRIPTION: Command to install the AlertDialog component using npx to add it to a GlueStack UI project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/alert-dialog/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx gluestack-ui@latest add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Installing Select Component Manually\nDESCRIPTION: Steps to manually install the Select component by installing its npm package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/select\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/spinner Package\nDESCRIPTION: Commands to install the @gluestack-ui/spinner package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/spinner/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/spinner\n\n# or\n\n$ npm i @gluestack-ui/spinner\n```\n\n----------------------------------------\n\nTITLE: Configuring GestureHandlerRootView\nDESCRIPTION: Setup code for wrapping the app with GestureHandlerRootView for gesture handling\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/BottomSheet/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport default function App() {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      {/* content */}\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Center Component in JavaScript\nDESCRIPTION: This code snippet shows how to import the Center component from the @gluestack-ui/themed package for use in a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/Center/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Center } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Menu Package\nDESCRIPTION: Command to install the @gluestack-ui/menu package using NPX package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/menu/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx install @gluestack-ui/menu\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Component in JSX\nDESCRIPTION: This snippet demonstrates how to render a basic Tooltip component with a button trigger and tooltip content.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip\n  {...props}\n  trigger={(triggerProps) => {\n    return (\n      <Button className='h-24' {...triggerProps}>\n        <ButtonText>Hover on me!</ButtonText>\n      </Button>\n    );\n  }}\n>\n  <TooltipContent>\n   <TooltipText>Tooltip</TooltipText>\n  </TooltipContent>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Importing useBreakpointValue from gluestack-style\nDESCRIPTION: Shows how to import the useBreakpointValue hook from the @gluestack-style/react package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useBreakPointValue/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBreakpointValue } from '@gluestack-style/react';\n```\n\n----------------------------------------\n\nTITLE: Testing Event Listener in React Native Web\nDESCRIPTION: This snippet shows a test case for the `addEventListener` function in React Native Web, demonstrating how event listeners are attached and triggered on different DOM elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('event dispatched on target', () => {\n  const listener = jest.fn();\n  const targetRef = React.createRef();\n  declare function Component(): any;\n  render(<Component />);\n  const target = createEventTarget(targetRef.current);\n  act(() => {\n    target.click();\n  });\n  expect(listener).toBeCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Heading Components with Size Variants in React\nDESCRIPTION: Example demonstrating how to use the Heading component with different size variants ranging from 'xs' to '5xl'. The code maps through all available size options and renders a Heading component for each size.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from \"@/components/ui/center\";\nimport { Heading } from \"@/components/ui/heading\";\n\nfunction App() {\n          const sizes = [\n            'xs',\n            'sm',\n            'md',\n            'lg',\n            'xl',\n            '2xl',\n            '3xl',\n            '4xl',\n            '5xl',\n          ];\n          return (\n              <Center>\n                {sizes.map((size, index) => (\n                  <Heading size={size} key={index}>{size}</Heading>\n                ))}\n              </Center>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Installing Accordion Component via CLI\nDESCRIPTION: Command line instruction for installing the Accordion component using gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add accordion\n```\n\n----------------------------------------\n\nTITLE: Defining Descendants Styling Props in JSX\nDESCRIPTION: This code snippet defines the styling props for child components of the MenuItem, specifically the _text prop for styling the MenuItemLabel component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.TBody>\n  <Table.TR>\n    <Table.TD>\n      <Table.TText>\n        <InlineCode>_text</InlineCode>\n      </Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>{`Prop to style MenuItemLabel Component`}</Table.TText>\n    </Table.TD>\n  </Table.TR>\n</Table.TBody>\n```\n\n----------------------------------------\n\nTITLE: Importing useMedia Hook from gluestack-ui\nDESCRIPTION: Demonstrates how to import the useMedia hook from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-media/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMedia } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing useToken Hook from gluestack-ui\nDESCRIPTION: This snippet shows how to import the useToken hook from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-token/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useToken } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Graph Component Implementation - Layout Components Benchmark\nDESCRIPTION: Graph component usage displaying performance metrics for complex layouts using HStack, VStack, Image, and Text components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/performance/benchmarks/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Graph\n  data={{\n    'gluestack-ui': 120,\n    'React Native': 69,\n    'Tamagui': 90,\n    'NativeBase': 491,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: GlueStack UI Link Package Identifier\nDESCRIPTION: Header identifying the GlueStack UI Link package\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/link/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/link\n```\n\n----------------------------------------\n\nTITLE: Initializing gluestack-ui v2 with CLI\nDESCRIPTION: Command to initialize gluestack-ui v2 in a project using the CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui@latest init\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Component Structure\nDESCRIPTION: Default export showing the basic structure of a Badge component with text and icon.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Badge>\n    <BadgeText />\n    <BadgeIcon />\n  </Badge>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing FAB component in gluestack-ui\nDESCRIPTION: Command to install the Floating Action Button (FAB) component from gluestack-ui package using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/fab/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @gluestack-ui/fab\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Property Resolution Example\nDESCRIPTION: Implementation of a property resolver for LinearGradient component to handle color prop resolution. This experimental feature demonstrates how to resolve props using propertyTokenMap and propertyResolver.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/PropertyResolver/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { styled } from '@gluestack-style/react';\nimport { AppProvider } from './Provider';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nconst StyledLinearGradient = styled(\n  LinearGradient,\n  {\n    bg: '$primary500',\n    h: '$40',\n    w: '$40',\n  },\n  { resolveProps: ['colors'] },\n  {\n    propertyTokenMap: {\n      colors: 'colors',\n    },\n    propertyResolver: {\n      props: {\n        colors: (value: any, resolver: any) => {\n          return value.map((color: any) => resolver(color));\n        },\n      },\n    },\n  }\n);\n\nexport function PropertyResolver({ ...args }: any) {\n  return (\n    <AppProvider>\n      <StyledLinearGradient\n        colors={['$red400', '$blue300']}\n        {...args}\n      ></StyledLinearGradient>\n    </AppProvider>\n  );\n}\nexport default PropertyResolver;\n```\n\n----------------------------------------\n\nTITLE: Installing HStack Component via CLI\nDESCRIPTION: This command installs the HStack component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/HStack/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add hstack\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React\nDESCRIPTION: This code snippet shows how to import the Slider component in a React file for use in your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from '@/components/ui/slider';\n```\n\n----------------------------------------\n\nTITLE: Importing AlertDialog Components in React\nDESCRIPTION: This code snippet shows how to import the various AlertDialog subcomponents for use in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  AlertDialog,\n  AlertDialogBackdrop,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogCloseButton,\n  AlertDialogFooter,\n  AlertDialogBody,\n} from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Props in TypeScript\nDESCRIPTION: This snippet defines the type for the onChange prop of the Slider component. It specifies that onChange is a function that takes a number value and returns void.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n(value: number) => void\n```\n\n----------------------------------------\n\nTITLE: Importing Select Components\nDESCRIPTION: Shows how to import the Select component and its sub-components for use in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select, SelectTrigger, SelectInput, SelectIcon, SelectPortal, SelectBackdrop, SelectContent, SelectDragIndicatorWrapper, SelectDragIndicator, SelectItem } from '@/components/ui/select';\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in React\nDESCRIPTION: Shows how to import the Icon component from the gluestack-ui themed library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Icon/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing the legend-motion-animation-driver package using npm or yarn\nDESCRIPTION: Commands to install the @gluestack-style/legend-motion-animation-driver package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/animation-legend-motion-driver/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-style/legend-motion-animation-driver\n\n# or\n\n$ npm i @gluestack-style/legend-motion-animation-driver\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Portal Component Dependencies\nDESCRIPTION: Command to manually install the required dependency for the Portal component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Portal/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/overlay\n```\n\n----------------------------------------\n\nTITLE: Importing Button Components in React\nDESCRIPTION: Import statement for using the Button and related components in your React project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Button,\n  ButtonText,\n  ButtonSpinner,\n  ButtonIcon,\n  ButtonGroup,\n} from '@/components/ui/button';\n```\n\n----------------------------------------\n\nTITLE: Importing useMediaQuery in React\nDESCRIPTION: This code snippet shows how to import the useMediaQuery hook in a React component file. It assumes the hook is located in a specific path within the project structure.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/hooks/useMediaQuery/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMediaQuery } from '@/components/ui/utils/use-media-query';\n```\n\n----------------------------------------\n\nTITLE: HTML-like Table Structure in JSX\nDESCRIPTION: JSX code showing table structure for props documentation using Table components from gluestack-ui\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Popover/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider>\n  <TableContainer>\n    <Table>\n      <Table.THead>\n        <Table.TR>\n          <Table.TH>\n            <Table.TText>Sx Prop</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Description</Table.TText>\n          </Table.TH>\n        </Table.TR>\n      </Table.THead>\n      <Table.TBody>\n        <Table.TR>\n          <Table.TD>\n            <Table.TText>\n              <InlineCode>_content</InlineCode>\n            </Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>{`Prop to style PopoverContent Component`}</Table.TText>\n          </Table.TD>\n        </Table.TR>\n      </Table.TBody>\n    </Table>\n  </TableContainer>\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: ModalContent Component Props\nDESCRIPTION: Specifies the props for the ModalContent component which is built using @legendapp/motion's Motion.View component for animations.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Modal/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ModalContentProps {\n  focusable?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component Dependencies Manually\nDESCRIPTION: This command installs the necessary npm package for the Button component when adding it manually to a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/button\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Link Component\nDESCRIPTION: This command installs the Link component package manually using npm. It's an alternative to the CLI method for projects that require more control over the installation process.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/link\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Component\nDESCRIPTION: Import statement for including the Accordion component in a project\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Accordion } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Updating unmountComponentAtNode Function in React Native Web\nDESCRIPTION: This snippet modifies the `unmountComponentAtNode` function to use the new unmount method provided by React DOM client API instead of the legacy unmounting method.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function unmountComponentAtNode(rootTag) {\n  rootTag.unmount();\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/button Package Using Yarn or NPM\nDESCRIPTION: Command line instructions for installing the @gluestack-ui/button package using either Yarn or NPM package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/button/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/button\n\n# or\n\n$ npm i @gluestack-ui/button\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Custom Theme Path\nDESCRIPTION: Advanced babel configuration that specifies the path to the theme object within the configuration file using the configThemePath option.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/production-optimizations/babel-plugin/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\n\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        gluestackStyleResolver,\n        {\n          configThemePath: ['config', 'theme'], // Specify the path of the theme object in your config file\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JSX for Figma UI Kit Documentation\nDESCRIPTION: This code snippet imports various UI components from the gluestack-ui library, likely for use in demonstrating or documenting the Figma UI Kit. It includes imports for Box, HStack, Text, Button, and ButtonText components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/figma-ui-kit/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"../../../core-components/nativewind/box\"\nimport { HStack } from \"../../../core-components/nativewind/hstack\"\nimport { Text } from \"../../../core-components/nativewind/text\"\nimport { Button, ButtonText } from \"../../../core-components/nativewind/button\"\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-aria/menu with Yarn\nDESCRIPTION: Commands to install the @react-native-aria/menu package using Yarn package manager, which is a dependency required for menu components in GlueStack UI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/menu/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/menu\n```\n\n----------------------------------------\n\nTITLE: Rendering Heading Component with Content\nDESCRIPTION: Illustrates how to use the Heading component with text content in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Typography/Heading/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading>I am a Heading</Heading>\n```\n\n----------------------------------------\n\nTITLE: Legacy dot notation usage for gluestack-ui components\nDESCRIPTION: Example showing the older format for using gluestack-ui components with dot notation, which is still supported but not recommended for RSC.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/RSC/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button.Text>\n```\n\n----------------------------------------\n\nTITLE: Adding Expo Snack Embed Script\nDESCRIPTION: This code adds a script tag to embed Expo Snack functionality, allowing for interactive code examples to be displayed within the documentation page.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/more-recipes/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<script async src=\"https://snack.expo.dev/embed.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component Manually\nDESCRIPTION: This command installs the necessary npm package for the Tooltip component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/tooltip\n```\n\n----------------------------------------\n\nTITLE: Basic ImageViewer Component Usage\nDESCRIPTION: Shows the import statement and basic implementation structure for the ImageViewer component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/ImageViewer/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageViewer, ImageViewerBackdrop, ImageViewerContent, ImageViewerCloseButton, ImageViewerImage } from '@/components/ui/image-viewer';\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <ImageViewer>\n    <ImageViewerBackdrop>\n      <ImageViewerContent>\n        <ImageViewerCloseButton>\n        </ImageViewerCloseButton>\n      </ImageViewerContent>\n    </ImageViewerBackdrop>\n  </ImageViewer>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component via CLI in gluestack-ui\nDESCRIPTION: This command installs the Popover component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add popover\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR in Next.js Page Router\nDESCRIPTION: Configures the custom Document component for Next.js Page Router to handle SSR styling with react-native-web and GlueStack UI's style flushing.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Html, Head, Main, NextScript } from 'next/document';\nimport { AppRegistry } from 'react-native-web';\nimport { flush } from '@gluestack-ui/nativewind-utils/flush';\n\nfunction Document() {\n  return (\n    <Html className=\"gs\" lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n\nDocument.getInitialProps = async ({ renderPage }: any) => {\n  AppRegistry.registerComponent('Main', () => Main);\n  const { getStyleElement } = AppRegistry.getApplication('Main');\n  const page = await renderPage();\n  const styles = [getStyleElement(), flush()];\n  return { ...page, styles: React.Children.toArray(styles) };\n};\n\nexport default Document;\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Custom Styled Function Path\nDESCRIPTION: Advanced babel configuration that specifies the library name and file path of the styled function using the styled option, useful when the styled function is exported from a different library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/production-optimizations/babel-plugin/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\n\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        gluestackStyleResolver,\n        {\n          styled: [\n            '@gluestack-style/react', // import path of the styled function\n            path.resolve(__dirname, './gluestack-ui-components/core/styled'), // file path of the styled function\n          ],\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Global CSS Styles with createGlobalStylesWeb in React\nDESCRIPTION: This snippet demonstrates how to use the createGlobalStylesWeb function to create global CSS styles and apply them using the StyledProvider component. It sets margin and padding to 0 for all elements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/UtilityFunctions/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst addGlobalCss = createGlobalStylesWeb({\n  '*': { margin: 0, padding: 0 },\n});\n\n<StyledProvider globalStyleInjector={addGlobalCss}>\n  <App />\n</StyledProvider>;\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Component in React\nDESCRIPTION: This code snippet shows how to import the Modal component in your React project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal } from '@/components/ui/modal';\n```\n\n----------------------------------------\n\nTITLE: Importing gluestack-ui Component Documentation Setup\nDESCRIPTION: Sets up the documentation page structure using Storybook and gluestack-ui components, including necessary imports and layout configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AllComponents/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n\n<Meta title=\"with-gluestack-style/Components/All Components\" />\n\nimport { AppProvider } from '@gluestack/design-system';\nimport { config } from '@gluestack-ui/config';\nimport { Grid } from '../../extra-components/themed/Grid';\nimport Wrapper from '../../core-components/themed/Wrapper';\n\n<Wrapper>\n  <Grid />\n</Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Importing InputAccessoryView Component in React Native\nDESCRIPTION: Shows how to import the InputAccessoryView component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/InputAcessoryView/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { InputAccessoryView } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Component\nDESCRIPTION: Basic import statement for using the Toast component in a project\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useToast, Toast } from '@/components/ui/toast';\n```\n\n----------------------------------------\n\nTITLE: Select Component Properties Table Structure\nDESCRIPTION: JSX structure defining a table that documents the Select component's properties including isDisabled, isInvalid, isRequired, and other key props with their types and descriptions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<TableContainer>\n  <Table>\n    <Table.THead>\n      <Table.TR>\n        <Table.TH>\n          <Table.TText>Prop</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Type</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Default</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Description</Table.TText>\n        </Table.TH>\n      </Table.TR>\n    </Table.THead>\n    <Table.TBody>...</Table.TBody>\n  </Table>\n</TableContainer>\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui Dependencies with Yarn\nDESCRIPTION: Command to install gluestack-ui core packages and peer dependencies using Yarn\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-rn/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-ui/themed @gluestack-style/react react-native-svg@13.4.0\n```\n\n----------------------------------------\n\nTITLE: Basic Box Component Usage in JSX\nDESCRIPTION: Demonstrates the basic structure of using the Box component in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/Box/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Box />;\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Components in React Native\nDESCRIPTION: This code snippet shows how to import the Alert, AlertIcon, and AlertText components from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Alert/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert, AlertIcon, AlertText } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing useBreakpointValue Hook\nDESCRIPTION: How to import the useBreakpointValue hook into your project file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/hooks/useBreakPointValue/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBreakPointValue } from '@/components/ui/utils/use-break-point-value';\n```\n\n----------------------------------------\n\nTITLE: Installing Center Component via CLI in gluestack-ui\nDESCRIPTION: This command installs the Center component using the gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Center/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add center\n```\n\n----------------------------------------\n\nTITLE: Installing Modal Component via CLI\nDESCRIPTION: This command installs the Modal component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add modal\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Tokens in Tailwind Config (JavaScript)\nDESCRIPTION: Defines color tokens in the tailwind.config.js file using CSS variables for dynamic color switching.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        primary: 'rgb(var(--color-primary)/<alpha-value>)'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gluestack UI Accordion Package\nDESCRIPTION: Command to install the @gluestack-ui/accordion package using npx.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/accordion/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx install @gluestack-ui/accordion\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component Dependencies Manually in gluestack-ui\nDESCRIPTION: Command to manually install the required dependencies for the Popover component in a gluestack-ui project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/popover @legendapp/motion\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in gluestack-style\nDESCRIPTION: This code example demonstrates how to use plugins in the gluestack-style configuration. It shows the structure of the config object, including aliases, tokens, and the plugins array.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/Introduction/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  aliases: {},\n  tokens: {},\n  plugins: [new MyPlugin()]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolved Animation Style Object\nDESCRIPTION: Example of the final internal styled object structure after resolution of animation properties\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/AnimationPlugin/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nstyledObject = {\n  'props': {\n    initial: {\n      opacity: 0,\n    },\n    animate: {\n      opacity: 1,\n    },\n    exit: {\n      opacity: 0,\n    },\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Utils with Yarn\nDESCRIPTION: Command to install the @react-native-aria/utils package using the Yarn package manager as a project dependency.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/slider/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/utils\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Structure in JSX\nDESCRIPTION: Demonstrates the basic structure of a Link component with LinkText as a child element.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Link/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Link>\n    <LinkText />\n  </Link>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Default Theme Configuration\nDESCRIPTION: Optional commands to install default theme configuration package\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-ui/config@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/config@latest\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo App\nDESCRIPTION: This command starts the Expo app.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-v7/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Accordion Dependencies\nDESCRIPTION: Command for manually installing required dependencies for the Accordion component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/accordion @expo/html-elements\n```\n\n----------------------------------------\n\nTITLE: Importing VStack Component in React\nDESCRIPTION: This snippet shows how to import the VStack component and use it in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/VStack/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VStack } from '@/components/ui/vstack';\n\nexport default () => <VStack />;\n```\n\n----------------------------------------\n\nTITLE: Installing Slider Component Manually\nDESCRIPTION: This command installs the necessary dependencies for the Slider component when adding it manually to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/slider\n```\n\n----------------------------------------\n\nTITLE: GluestackUIProvider Import Statement\nDESCRIPTION: Import statement for GluestackUIProvider component to be used at root level.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Provider/GluestackUIProvider/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GluestackUIProvider } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Configuration with Components Option\nDESCRIPTION: Advanced babel configuration with components option for resolving inline styles\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/advanced/BabelPlugins/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\n\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        gluestackStyleResolver,\n        {\n          components: [\n            '@gluestack-ui/themed',\n            path.resolve(__dirname, './gluestack-ui-components/core/component'),\n          ],\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Default Link Example in GlueStack UI\nDESCRIPTION: This example shows the default implementation of a Link component, displaying text with a hyperlink to an external site. It demonstrates how to combine Text and Link components in a horizontal stack.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack>\n  <Text\n    size=\"lg\"\n  >Design inspiration from </Text>\n    <Link href=\"https://gluestack.io/\" isExternal>\n      <LinkText size=\"lg\">pinterest.com</LinkText>\n    </Link>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Link with Text - React/JSX\nDESCRIPTION: Example showing basic implementation of Link component with text using GlueStack UI components like HStack, Link, LinkText and Text. The link points to an external URL with size styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Link, LinkText } from \"@/components/ui/link\";\nimport { Text } from \"@/components/ui/text\";\n\nfunction Example() {\n  return (\n    <HStack>\n            <Text\n              size=\"lg\"\n            >Design inspiration from&nbsp;</Text>\n              <Link href=\"https://gluestack.io/\" isExternal>\n                <LinkText size=\"lg\">pinterest.com</LinkText>\n              </Link>\n          </HStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Portal Component in React\nDESCRIPTION: Example of importing the Portal component in a React file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Portal/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Portal } from '@/components/ui/portal';\n```\n\n----------------------------------------\n\nTITLE: Rendering Badge Component with Icon in React Native\nDESCRIPTION: This snippet demonstrates how to use the Badge component with BadgeText and BadgeIcon in a React Native application. It shows the basic structure and props for the Badge component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge, BadgeIcon, BadgeText } from \"@/components/ui/badge\";\nimport { GlobeIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Badge {...props}>\n          <BadgeText>Verified</BadgeText>\n          <BadgeIcon as={GlobeIcon} className=\"ml-2\" />\n        </Badge>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AsyncStorage for Native Theme Persistence (Bash)\nDESCRIPTION: Installs the @react-native-async-storage/async-storage package for storing theme preferences on native platforms.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Creating and using a Provider component with createProvider\nDESCRIPTION: Example showing how to create a Provider component using the createProvider function and StyledProvider, then using it to wrap application components with configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/provider/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import the createProvider function\nimport { createProvider } from '@gluestack-ui/provider';\nimport { config } from '../gluestack.config';\nimport { StyledProvider } from '@gluestack-style/react';\n\nexport const Provider = createProvider({\n  StyledProvider,\n});\n\n// Using the Provider component\nexport default () => (\n  <Provider config={config.theme}>\n    <Text />\n  </Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Component Props in JSX\nDESCRIPTION: This code snippet defines the props for the Menu component, including trigger, placement, defaultIsOpen, onOpen, onClose, isOpen, offset, crossOffset, disabledKeys, closeOnSelect, selectedKeys, selectionMode, and onSelectionChange.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.TBody>\n  <Table.TR>\n    <Table.TD>\n      <Table.TText>\n        <InlineCode>trigger</InlineCode>\n      </Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>\n        {'(_props: any, state: { open: boolean; }) => Element'}\n      </Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>-</Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>{`Function that returns a React Element. This element will be used as a Trigger for the Menu`}</Table.TText>\n    </Table.TD>\n  </Table.TR>\n  <!-- ... other props ... -->\n</Table.TBody>\n```\n\n----------------------------------------\n\nTITLE: FormControl Installation via CLI\nDESCRIPTION: Command to install FormControl component using gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add form-control\n```\n\n----------------------------------------\n\nTITLE: Creating New React Native Project with gluestack-ui\nDESCRIPTION: Command to create a new project with gluestack-ui using npx\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-rn/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create gluestack\n```\n\n----------------------------------------\n\nTITLE: Checkbox Import Statement\nDESCRIPTION: Example of importing the Checkbox component in a project file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox } from '@/components/ui/checkbox';\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component in JSX\nDESCRIPTION: This snippet shows how to import the Tooltip component in a JSX file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from '@/components/ui/tooltip';\n```\n\n----------------------------------------\n\nTITLE: Importing ScrollView Component in React Native\nDESCRIPTION: This code snippet shows how to import the ScrollView component from the @gluestack-ui/themed package for use in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/ScrollView/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { ScrollView } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing BottomSheet Component via CLI\nDESCRIPTION: Command to install the BottomSheet component using gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/BottomSheet/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add bottomsheet\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Actionsheet Package\nDESCRIPTION: Command to install the Actionsheet component package using npm/npx.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/actionsheet/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx install @gluestack-ui/actionsheet\n```\n\n----------------------------------------\n\nTITLE: Popover Component Props Table Structure\nDESCRIPTION: React JSX table structure documenting the Popover component's props, including their types, default values, and descriptions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<TableContainer>\n  <Table>\n    <Table.THead>\n      <Table.TR>\n        <Table.TH>\n          <Table.TText>Prop</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Type</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Default</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Description</Table.TText>\n        </Table.TH>\n      </Table.TR>\n    </Table.THead>\n    <Table.TBody>...</Table.TBody>\n  </Table>\n</TableContainer>\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/transitions Package\nDESCRIPTION: Commands to install the @gluestack-ui/transitions package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/transitions/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @gluestack-ui/transitions\n\n# or\n\n$ npm i @gluestack-ui/transitions\n```\n\n----------------------------------------\n\nTITLE: HStack Installation via CLI\nDESCRIPTION: Command to install HStack component using gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/HStack/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add hstack\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta Component\nDESCRIPTION: Sets up the Storybook Meta component to define the documentation page title within the NativeWind apps section.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/kitchensink-app/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"with-nativewind/Apps/Kitchensink App\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/slider with Package Managers\nDESCRIPTION: Commands to install the @gluestack-ui/slider package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/slider/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/slider\n\n# or\n\n$ npm i @gluestack-ui/slider\n```\n\n----------------------------------------\n\nTITLE: Installing Image Component Dependencies Manually\nDESCRIPTION: Command to install the required dependency for the Image component manually.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Image/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/image\n```\n\n----------------------------------------\n\nTITLE: Importing Box Component in JSX\nDESCRIPTION: Shows how to import the Box component from the gluestack-ui themed library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/Box/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for GlueStack UI NativeWind Utils\nDESCRIPTION: Markdown changelog entry documenting the addition of useBreakPointValue hook in version 1.0.20\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages-react-19/@gluestack-ui/nativewind-utils/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/nativewind-utils\n\n## 1.0.20\n\n### Patch Changes\n\n- - useBreakPointValue hook\n```\n\n----------------------------------------\n\nTITLE: Mapping React Component Props to CSS Classes in Gluestack UI\nDESCRIPTION: This snippet shows how various styling props used in Gluestack UI components map to corresponding CSS class names. It demonstrates the translation pattern from React component props to Tailwind-like utility classes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Margin right property\n{`mr=\"value\"`} → className=\"mr-value\"\n\n// Flex property\n{`flex={value}`} → className=\"flex-value\"\n\n// Flex direction property\n{`flexDirection=\"value\"`} → className=\"flex-value\"\n\n// Line height property\n{`lineHeight=\"value\"`} → className=\"leading-value\"\n\n// Height property\n{`h=\"value\"`} → className=\"h-[value]\"\n\n// Align self property\n{`alignSelf=\"value\"`} → className=\"self-value\"\n\n// Position property\n{`position=\"value\"`} → className=\"position-value\"\n\n// Max width property\n{`maxWidth=\"value\"`} → className=\"max-w-value\"\n\n// Max height property\n{`maxHeight=\"value\"`} → className=\"max-h-value\"\n\n// Min width property\n{`minWidth=\"value\"`} → className=\"min-w-value\"\n\n// Min height property\n{`minHeight=\"value\"`} → className=\"min-h-value\"\n\n// Font family property\n{`fontFamily=\"value\"`} → className=\"font-value\"\n\n// Font style property\n{`fontStyle=\"value\"`} → className=\"value\"\n\n// Font size property\n{`fontSize=\"value\"`} → className=\"text-value\"\n\n// Top position property\n{`top={value}`} → className=\"top-value\"\n\n// Bottom position property\n{`bottom={value}`} → className=\"bottom-value\"\n\n// Left position property\n{`left={value}`} → className=\"left-value\"\n\n// Right position property\n{`right={value}`} → className=\"right-value\"\n\n// Z-index property\n{`zIndex={value}`} → className=\"z-value\"\n\n// Shadow color property\n{`shadowColor=\"value\"`} → className=\"shadow-value\"\n\n// Overflow property\n{`overflow=\"value\"`} → className=\"overflow-value\"\n\n// Text align property\n{`textAlign=\"value\"`} → className=\"text-value\"\n\n// Display property\n{`display=\"value\"`} → className=\"hidden / flex / block / inline\"\n\n// Responsive design - small breakpoint\n{`$sm={value}`} → className=\"sm:value\"\n\n// Responsive design - medium breakpoint\n{`$md={value}`} → className=\"md:value\"\n\n// Responsive design - large breakpoint\n{`$lg={value}`} → className=\"lg:value\"\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/themed Dependencies\nDESCRIPTION: Commands to install the required packages for using gluestack-ui components, including the core themed package, styling library, and SVG support.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/config-v2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/themed @gluestack-style/react react-native-svg@13.4.0\n\n# or\n\n$ npm i @gluestack-ui/themed @gluestack-style/react react-native-svg@13.4.0\n```\n\n----------------------------------------\n\nTITLE: Modal Descendants Styling Props\nDESCRIPTION: Defines the styling props available for child components within the Modal component structure.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Modal/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ModalStyleProps {\n  _content?: StyleProps;\n  _text?: StyleProps;\n  _icon?: StyleProps;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-style/input Package\nDESCRIPTION: Command line instructions for installing the @gluestack-style/input package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/input/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/input\n\n# or\n\n$ npm i @gluestack-ui/input\n```\n\n----------------------------------------\n\nTITLE: Example Config Structure for configThemePath Option\nDESCRIPTION: Example structure of a gluestack-ui configuration file that contains theme properties that can be referenced using configThemePath.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/production-optimizations/babel-plugin/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  componentPath: '/core/components',\n  theme: {\n    aliases: {},\n    tokens: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Table Component\nDESCRIPTION: Command to install the necessary dependency (@expo/html-elements) for the Table component when performing a manual installation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Table/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @expo/html-elements\n```\n\n----------------------------------------\n\nTITLE: Button Component Usage with Props\nDESCRIPTION: This example shows how to use the Button component with ButtonText and ButtonIcon, including dynamic props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Button/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button {...props}>\n  <ButtonText>Add </ButtonText>\n  <ButtonIcon as={AddIcon} />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing useTheme Hook from gluestack-ui\nDESCRIPTION: This snippet shows how to import the useTheme hook from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-theme/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Badge Component Installation via CLI\nDESCRIPTION: Command to install the Badge component using gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add badge\n```\n\n----------------------------------------\n\nTITLE: Installing BottomSheet Dependencies Manually\nDESCRIPTION: Commands to install required dependencies for the BottomSheet component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/BottomSheet/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gorhom/bottom-sheet@alpha react-native-reanimated@~3.6.2 react-native-gesture-handler@~2.14.0\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet Components\nDESCRIPTION: Example of importing the BottomSheet component and its subcomponents\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/BottomSheet/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  BottomSheet,\n  BottomSheetBackdrop,\n  BottomSheetContent,\n  BottomSheetDragIndicator,\n  BottomSheetItem,\n  BottomSheetItemText,\n  BottomSheetPortal,\n  BottomSheetTrigger,\n} from '@/components/ui/bottomsheet';\n```\n\n----------------------------------------\n\nTITLE: Defining SelectContent Component in React Native\nDESCRIPTION: SelectContent is internally mapped to ActionsheetContent and inherits properties from Motion.View. It allows for flexible declarative animations.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectContent>\n  {/* Child components */}\n</SelectContent>\n```\n\n----------------------------------------\n\nTITLE: Importing useFonts from expo-font\nDESCRIPTION: Import statement for the useFonts function from the expo-font package, which is used to load fonts in Expo applications.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Fonts/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { useFonts } from 'expo-font';\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Component Dependencies Manually\nDESCRIPTION: Command to install the necessary dependency for the Icon component manually.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/icon\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component\nDESCRIPTION: Example showing how to import the Slider component in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from '@/components/ui/slider';\n```\n\n----------------------------------------\n\nTITLE: Importing KeyboardAvoidingView in gluestack-ui\nDESCRIPTION: This code snippet shows how to import the KeyboardAvoidingView component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/KeyboardAvoidingView/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { KeyboardAvoidingView } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Menu Component via CLI\nDESCRIPTION: This command installs the Menu component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add menu\n```\n\n----------------------------------------\n\nTITLE: Textarea with Placeholder\nDESCRIPTION: Example showing Textarea component with placeholder text and width prop\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Textarea/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Textarea {...props} w='$64'>\n  <TextareaInput\n    placeholder=\"Your text goes here...\"\n  />\n</Textarea>\n```\n\n----------------------------------------\n\nTITLE: SelectTrigger Styling Properties Table\nDESCRIPTION: JSX structure showing the styling properties table for SelectTrigger component's descendants, including _icon and _input props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<TableContainer>\n  <Table>\n    <Table.THead>\n      <Table.TR>\n        <Table.TH>\n          <Table.TText>Sx Prop</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Description</Table.TText>\n        </Table.TH>\n      </Table.TR>\n    </Table.THead>\n    <Table.TBody>\n      <Table.TR>\n        <Table.TD>\n          <Table.TText>\n            <InlineCode>_icon</InlineCode>\n          </Table.TText>\n        </Table.TD>\n        <Table.TD>\n          <Table.TText>Prop to style SelectIcon Component</Table.TText>\n        </Table.TD>\n      </Table.TR>\n      <Table.TR>\n        <Table.TD>\n          <Table.TText>\n            <InlineCode>_input</InlineCode>\n          </Table.TText>\n        </Table.TD>\n        <Table.TD>\n          <Table.TText>Prop to style SelectInput Component</Table.TText>\n        </Table.TD>\n      </Table.TR>\n    </Table.TBody>\n  </Table>\n</TableContainer>\n```\n\n----------------------------------------\n\nTITLE: Installing Gluestack NativeWind Utils\nDESCRIPTION: Command to install the @gluestack-ui/nativewind-utils package using npx. This adds the utility package to your project dependencies.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages-react-19/@gluestack-ui/nativewind-utils/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx install @gluestack-ui/nativewind-utils\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App with Storybook Template using yarn\nDESCRIPTION: This command creates a new Expo app named 'AwesomeStorybook' using the Storybook template via yarn.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-v7/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn create expo-app --template expo-template-storybook AwesomeStorybook\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Configuration\nDESCRIPTION: Basic setup of babel.config.js to include the gluestack-style resolver plugin\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/advanced/BabelPlugins/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      gluestackStyleResolver,\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing the Pressable Component Package\nDESCRIPTION: Commands to install the @gluestack-ui/pressable package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/pressable/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/pressable\n\n# or\n\n$ npm i @gluestack-ui/pressable\n```\n\n----------------------------------------\n\nTITLE: Running Android App for Testing\nDESCRIPTION: Command to start the app directly on Android emulator for testing components in a native environment. This allows you to verify your changes work properly on Android devices.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Component from gluestack-ui\nDESCRIPTION: Shows how to import the Modal component from the gluestack-ui library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Modal/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo Project\nDESCRIPTION: Commands to install Expo CLI globally, initialize a new Expo project, and navigate to the project directory.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-expo/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global expo-cli\nexpo init my-project\ncd my-project/\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Linear Gradient\nDESCRIPTION: Command to install the react-native-linear-gradient package in a React Native project, which is required to implement LinearGradient components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/recipes/linear-gradient/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i react-native-linear-gradient\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Information for Changelog Page\nDESCRIPTION: Configures the Storybook Meta component to define the title of the documentation page, which places it in the styled/More/Changelog section of the navigation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/more/Changelog/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"styled/More/Changelog\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Rendering Functions in React Native Web\nDESCRIPTION: This snippet updates the rendering functions in React Native Web, removing legacy rendering methods and updating the `render` and `hydrate` functions to use the new React DOM client API.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRoot as domCreateRoot, hydrateRoot as domHydrateRoot } from 'react-dom/client';\nimport { createSheet } from '../StyleSheet/dom';\nexport function hydrate(element, root) {\n  createSheet(root);\n  return domHydrateRoot(root, element);\n}\nexport default function render(element, root) {\n  createSheet(root);\n  var reactRoot = domCreateRoot(root);\n  reactRoot.render(element);\n  return reactRoot;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing HStack Package with npm/yarn\nDESCRIPTION: Instructions for installing the @gluestack-ui/hstack package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/hstack/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/hstack\n\n# or\n\n$ npm i @gluestack-ui/hstack\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui Dependencies with NPM\nDESCRIPTION: Command to install gluestack-ui core packages and peer dependencies using NPM\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-rn/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/themed @gluestack-style/react react-native-svg@13.4.0\n```\n\n----------------------------------------\n\nTITLE: Installing Fab Component via CLI\nDESCRIPTION: Command to add the Fab component to a gluestack-ui project using the CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add fab\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Component in JSX\nDESCRIPTION: This example demonstrates the basic structure of using the Tooltip component with its subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Tooltip>\n    <TooltipContent>\n      <TooltipText />\n    </TooltipContent>\n  </Tooltip>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin\nDESCRIPTION: Commands to install the optional babel plugin for build-time style calculations.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/install-expo/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\n\nnpm i --save-dev @gluestack-style/babel-plugin-styled-resolver\n\n# using yarn\n\nyarn add --dev @gluestack-style/babel-plugin-styled-resolver\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component via CLI\nDESCRIPTION: This command installs the Button component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add button\n```\n\n----------------------------------------\n\nTITLE: Installing Slider Component via CLI\nDESCRIPTION: This command uses the gluestack-ui CLI to add the Slider component to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add slider\n```\n\n----------------------------------------\n\nTITLE: Importing Fab Component\nDESCRIPTION: Example of importing the Fab component into a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Fab } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Style in gluestack-style.config.js\nDESCRIPTION: This snippet shows how to create a configuration file for gluestack-style, defining global styles with variants. It uses the createConfig function to set up aliases, tokens, and global style variants.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/configuration/GlobalStyle/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createConfig } from \"@gluestack-style/react\"\nexport const config = createConfig({\n  aliases: {},\n  tokens: {},\n  globalStyle: {\n    variants: {\n      shadow: {\n        softShadow: {\n          shadowOffset: {\n            width: 0,\n            height: 0,\n          },\n          shadowRadius: 10,\n          shadowOpacity: 0.1,\n          _android: {\n            shadowColor: '$primary500',\n            elevation: 5,\n            shadowOpacity: 0.05,\n          },\n        },\n      },\n    },\n  },\n} as const);\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.2.11\nDESCRIPTION: Documents changes in version 0.2.11, noting updates to the interactions dependency package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/menu/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.11\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.12\n```\n\n----------------------------------------\n\nTITLE: Adding all gluestack-ui v2 components with CLI\nDESCRIPTION: Command to add all gluestack-ui v2 components to a project using the CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui@latest add --all\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App with Storybook Template using npx\nDESCRIPTION: This command creates a new Expo app named 'AwesomeStorybook' using the Storybook template via npx.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-v7/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-expo-app --template expo-template-storybook AwesomeStorybook\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React\nDESCRIPTION: Shows how to import the Slider component from the gluestack-ui library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Slider/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { Slider } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Input Component Import Statement\nDESCRIPTION: Import statement for using the Input component in a project\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Input } from '@/components/ui/input';\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Menu Component\nDESCRIPTION: Command to manually install the Menu component package using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/menu\n```\n\n----------------------------------------\n\nTITLE: Creating Color Scheme Variations for Spinner in React with gluestack-ui\nDESCRIPTION: Example demonstrating how to create Spinner components with different color schemes using the color property and VStack for vertical layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"md\" >\n  <Spinner color=\"$indigo600\" />\n  <Spinner color=\"$emerald600\" />\n  <Spinner color=\"$amber600\" />\n  <Spinner color=\"$fuchsia600\" />\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom VadimStream Component in JSX\nDESCRIPTION: This code renders a custom React component called VadimStream, which is likely a video player or stream embed for the tutorial content from the YouTube channel notJust.dev.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/tutorials/building-ecommerce-app/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<VadimStream />\n```\n\n----------------------------------------\n\nTITLE: Installing Slider Component via CLI\nDESCRIPTION: Command to install the slider component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Slider/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add slider\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component\nDESCRIPTION: Example showing how to import the Textarea component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Textarea/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Textarea } from '@/components/ui/textarea';\n```\n\n----------------------------------------\n\nTITLE: Importing useBreakpointValue from gluestack-ui\nDESCRIPTION: This snippet shows how to import the useBreakpointValue hook from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/use-breakpoint-value/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBreakpointValue } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/avatar Package\nDESCRIPTION: Command line instructions for installing the @gluestack-ui/avatar package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/avatar/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/avatar\n\n# or\n\n$ npm i @gluestack-ui/avatar\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Modal Component Dependencies\nDESCRIPTION: This command manually installs the required dependencies for the Modal component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/modal @legendapp/motion\n```\n\n----------------------------------------\n\nTITLE: Defining AlertDialog Size Props in TypeScript\nDESCRIPTION: This snippet defines the size prop for the AlertDialog component, which can be 'xs', 'sm', 'md', 'lg', or 'full', with a default value of 'md'.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AlertDialogSizeProps {\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'full';\n}\n```\n\n----------------------------------------\n\nTITLE: Importing View Component in gluestack-ui\nDESCRIPTION: This code snippet shows how to import the View component from the @gluestack-ui/themed package. This import statement is necessary to use the View component in your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/View/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { View } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Defining FormControl Themed Props in React Native\nDESCRIPTION: This snippet defines the themed props for the FormControl component, specifically the 'size' prop. It's part of the pre-styled version of the component for quick integration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.TBody>\n  <Table.TR>\n    <Table.TD>\n      <Table.TText>\n        <InlineCode>size</InlineCode>\n      </Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>sm | md | lg</Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>md</Table.TText>\n    </Table.TD>\n  </Table.TR>\n</Table.TBody>\n```\n\n----------------------------------------\n\nTITLE: Badge Component Import Statement\nDESCRIPTION: Import statement for using the Badge component in a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from '@/components/ui/badge';\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Watcher\nDESCRIPTION: Command to continuously watch for changes in story files and automatically update them in the ondevice (native) version of Storybook.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn storybook-watcher\n```\n\n----------------------------------------\n\nTITLE: Testing Event Listener Cleanup in React\nDESCRIPTION: Verifies proper cleanup of event listeners when components are unmounted. Uses jest mock functions to ensure event listeners are removed and no longer triggered after unmounting.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst clickListener = jest.fn();\ndeclare function Component(): any;\nconst { unmount } = render(<Component />);\nunmount();\nconst target = createEventTarget(document);\nact(() => {\n  target.click();\n});\nexpect(clickListener).toBeCalledTimes(0);\n```\n\n----------------------------------------\n\nTITLE: Basic Divider Export Example\nDESCRIPTION: Simple example showing default export of Divider component usage.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Divider />;\n```\n\n----------------------------------------\n\nTITLE: Basic VirtualizedList Usage - React Native\nDESCRIPTION: Simple example showing the basic structure of implementing a VirtualizedList component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/VirtualizedList/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <VirtualizedList />;\n```\n\n----------------------------------------\n\nTITLE: Installing PinInput Component via CLI\nDESCRIPTION: Command to install the PinInput component using the gluestack-ui CLI. This is the recommended installation method.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add pin-input\n```\n\n----------------------------------------\n\nTITLE: Installing Divider Component Manually\nDESCRIPTION: This command installs the Divider component package manually using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/divider\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook\nDESCRIPTION: Import statement for Storybook documentation components including Canvas, Meta, and Story.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/performance/overview/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Importing Menu Component - React/JSX\nDESCRIPTION: Basic import statement for using the Menu component from gluestack-ui themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Menu/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Menu } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing useSwitch Hook\nDESCRIPTION: Import statement to access the useSwitch hook from the React Native Aria Switch package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/switch/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSwitch } from '@react-native-aria/switch';\n```\n\n----------------------------------------\n\nTITLE: Installing useMediaQuery via CLI\nDESCRIPTION: This command installs the useMediaQuery hook using the gluestack-ui CLI tool. It adds the necessary files and configurations to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/hooks/useMediaQuery/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add useMediaQuery\n```\n\n----------------------------------------\n\nTITLE: Running Ondevice Storybook\nDESCRIPTION: These commands start the ondevice Storybook for different platforms. The first command is generic, while the others are platform-specific.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-v7/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# either\nyarn storybook\n\n# ios\nyarn storybook:ios\n\n# android\nyarn storybook:android\n```\n\n----------------------------------------\n\nTITLE: Importing RefreshControl Component in gluestack-ui\nDESCRIPTION: This code snippet shows how to import the RefreshControl component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/RefreshControl/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { RefreshControl } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component in React Native\nDESCRIPTION: Shows how to import the Switch component from the gluestack-ui themed library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Switch/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { Switch } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component Dependencies Manually\nDESCRIPTION: Command to manually install the required npm package for the Switch component when not using the CLI method.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/switch\n```\n\n----------------------------------------\n\nTITLE: Updating Storybook Stories\nDESCRIPTION: Command to run the stories loader once to update the stories in the ondevice (native) version after adding new story files.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn update-stories\n```\n\n----------------------------------------\n\nTITLE: Mapping gluestack-ui v1 Properties to v2 className Syntax\nDESCRIPTION: This code snippet demonstrates how various properties from gluestack-ui v1 are transformed into className-based syntax in v2. It covers a wide range of styling properties including typography, layout, spacing, colors, and more.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<TableContainer>\n  <Table>\n    <Table.THead>\n      <Table.TR>\n        <Table.TH>\n          <Table.TText> gluestack-ui v1</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText> gluestack-ui v2</Table.TText>\n        </Table.TH>\n      </Table.TR>\n    </Table.THead>\n    <Table.TBody>\n      <Table.TR>\n        <Table.TD>\n          <Table.TText>\n            <InlineCode>{`underline={true}`}</InlineCode>\n          </Table.TText>\n        </Table.TD>\n        <Table.TD>\n           <Table.TText>{`className=\"underline\"`}</Table.TText>\n        </Table.TD>\n      </Table.TR>\n      <Table.TR>\n        <Table.TD>\n          <Table.TText>\n            <InlineCode>{`bold={true}`}</InlineCode>\n          </Table.TText>\n        </Table.TD>\n        <Table.TD>\n          <Table.TText>{`className=\"font-<value>\"`}</Table.TText>\n        </Table.TD>\n      </Table.TR>\n      <!-- Additional rows omitted for brevity -->\n    </Table.TBody>\n  </Table>\n</TableContainer>\n```\n\n----------------------------------------\n\nTITLE: Text Component Installation via CLI\nDESCRIPTION: Command to install the Text component using the gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Text/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add text\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Interactions Package\nDESCRIPTION: Command to install the @react-native-aria/interactions package using Yarn. This package is a dependency for GlueStack UI components and provides accessibility-focused interaction primitives.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/interactions/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/interactions\n```\n\n----------------------------------------\n\nTITLE: Creating Actionsheet with FlatList in React\nDESCRIPTION: This example shows how to implement an Actionsheet with a FlatList for simple display of options. It includes a basic dataset, state management for the Actionsheet, and custom item rendering.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Actionsheet, ActionsheetContent, ActionsheetItem, ActionsheetItemText, ActionsheetDragIndicator, ActionsheetDragIndicatorWrapper, ActionsheetBackdrop, ActionsheetFlatList } from \"@/components/ui/actionsheet\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport React from \"react\";\n\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(false);\n    const DATA = [\n      {\n        id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\n        title: 'First Item'\n      },\n      {\n        id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',\n        title: 'Second Item'\n      },\n      {\n        id: '58694a0f-3da1-471f-bd96-145571e29d72',\n        title: 'Third Item'\n      },\n    ];\n    const Item = React.useCallback(\n      ({ title }) => (\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>{title}</ActionsheetItemText>\n        </ActionsheetItem>\n      ),\n      [handleClose]\n    );\n    return (\n    <>\n        <Button onPress={() => setShowActionsheet(true)}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent>\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n          <ActionsheetFlatList\n            data={DATA}\n            renderItem={({ item }) => <Item title={item.title} />}\n            keyExtractor={(item) => item.id}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/switch Package with Package Managers\nDESCRIPTION: Commands to install the @gluestack-ui/switch package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/switch/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/switch\n\n# or\n\n$ npm i @gluestack-ui/switch\n```\n\n----------------------------------------\n\nTITLE: Checkbox Installation via CLI\nDESCRIPTION: Command to install the checkbox component using gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add checkbox\n```\n\n----------------------------------------\n\nTITLE: Configuring resolveProps in componentConfig for gluestack-style\nDESCRIPTION: The resolveProps property is an array of strings that denotes props that should be resolved, useful for props not passed as style properties but as direct component props.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  // descendantStyle: ['_text', '_spinner'];\n  // ancestorStyle: ['_text'];\n  resolveProps: ['placeholderTextColor'];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar Component in React Native\nDESCRIPTION: This snippet shows how to import the StatusBar component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/StatusBar/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { StatusBar } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Implementing Actionsheet with SnapPoints and Payment Form\nDESCRIPTION: A React Native implementation of an Actionsheet component featuring snap points and a payment form. Includes credit card information display, security code input, and payment button integration. Uses KeyboardAvoidingView for better form interaction.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Actionsheet, ActionsheetContent, ActionsheetDragIndicator, ActionsheetDragIndicatorWrapper, ActionsheetBackdrop } from \"@/components/ui/actionsheet\";\nimport { Box } from \"@/components/ui/box\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { FormControl, FormControlLabel, FormControlLabelText } from \"@/components/ui/form-control\";\nimport { HStack } from \"@/components/ui/hstack\";\nimport { Image } from \"@/components/ui/image\";\nimport { Input, InputField, InputIcon, InputSlot } from \"@/components/ui/input\";\nimport { KeyboardAvoidingView } from \"@/components/ui/keyboard-avoiding-view\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport React from \"react\";\nimport { CreditCardIcon } from \"lucide-react-native\";\n\nfunction App(){\n  const [showActionsheet, setShowActionsheet] = React.useState(false);\n  const handleClose = () => setShowActionsheet(false);\n    return (\n      <>\n        <Button onPress={() => setShowActionsheet(true)}>\n            <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet\n          isOpen={showActionsheet}\n          onClose={handleClose}\n          snapPoints={[36]}\n        >\n          <KeyboardAvoidingView\n            behavior=\"position\"\n            style={{\n              position: 'relative',\n              flex: 1,\n              justifyContent: 'flex-end',\n            }}\n          >\n          <ActionsheetBackdrop />\n          <ActionsheetContent className=\"\">\n            <ActionsheetDragIndicatorWrapper>\n              <ActionsheetDragIndicator />\n            </ActionsheetDragIndicatorWrapper>\n            <VStack className=\"w-full pt-5\">\n              <HStack space=\"md\" className=\"justify-center items-center\">\n                <Box\n                  className=\"w-[50px] h-full px-2 border border-solid border-outline-300 rounded-sm\"\n                >\n                  <Image\n                    source={{ uri: 'https://i.imgur.com/UwTLr26.png' }}\n                    resizeMode=\"contain\"\n                    className=\"flex-1\"\n                  />\n                </Box>\n                <VStack className=\"flex-1\">\n                  <Text className=\"font-bold\">Mastercard</Text>\n                  <Text>Card ending in 2345</Text>\n                </VStack>\n              </HStack>\n              <FormControl className=\"mt-9\">\n                <FormControlLabel>\n                  <FormControlLabelText>\n                    Confirm security code\n                  </FormControlLabelText>\n                </FormControlLabel>\n                <Input className=\"w-full\">\n                  <InputSlot>\n                  <InputIcon as={CreditCardIcon} className=\"ml-2\"/>\n                  </InputSlot>\n                  <InputField placeholder=\"CVC/CVV\" />\n                </Input>\n                <Button onPress={handleClose} className=\"mt-3\">\n                  <ButtonText className=\"flex-1\">Pay $1000</ButtonText>\n                </Button>\n              </FormControl>\n            </VStack>\n          </ActionsheetContent>\n        </KeyboardAvoidingView>\n      </Actionsheet>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component via CLI\nDESCRIPTION: Command to add the button component to your project using the gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add button\n```\n\n----------------------------------------\n\nTITLE: Starting Ondevice Storybook\nDESCRIPTION: Command to start the Expo application with Storybook in ondevice (native) mode for iOS and Android testing.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack Linear Gradient Package\nDESCRIPTION: Commands to install the @gluestack-ui/linear-gradient package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/linear-gradient/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/linear-gradient\n\n# or\n\n$ npm i @gluestack-ui/linear-gradient\n```\n\n----------------------------------------\n\nTITLE: Embedding Expo Snack for UI Recipes Preview\nDESCRIPTION: This code embeds an Expo Snack instance that demonstrates gluestack-ui recipes. The iframe is configured to display on web platform with specific styling and theme settings.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/more-recipes/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://snack.expo.dev/embedded/@gluestack/gluestack-ui-recipes?iframeId=ys7oq0vj3l&preview=true&platform=web&theme=dark\"\n  style={{ width: '70vw', height: '60vh', border: '0px' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: VStack Reversed Example\nDESCRIPTION: Example showing VStack with reversed ordering and spacing between elements\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/VStack/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack space=\"md\">\n  <Box w='$20' h='$20' bg='$blue300' />\n  <Box w='$20' h='$20' bg='$blue400' />\n  <Box w='$20' h='$20' bg='$blue500' />\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Actionsheet Component\nDESCRIPTION: Command to manually install Actionsheet component dependencies\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/actionsheet\n```\n\n----------------------------------------\n\nTITLE: Manual Installation Dependencies\nDESCRIPTION: Command to install required dependencies for manual installation\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @expo/html-elements\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component Dependencies\nDESCRIPTION: Command to install the required dependencies for the button component manually.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Button/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/button\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Information\nDESCRIPTION: This snippet sets the Storybook metadata for the React Native ARIA documentation page.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/react-native-aria/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Meta title=\"ui/Components/Hooks/React Native ARIA\" />\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient Component\nDESCRIPTION: Shows how to import the LinearGradient component into your React Native file. This is required before using the component in your UI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/recipes/linear-gradient/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LinearGradient } from '@/components/ui/linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Starting Web Storybook\nDESCRIPTION: Command to start the Storybook environment for web development. This runs Storybook in a web browser for easier testing and development.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Custom Components for gluestack-ui Documentation\nDESCRIPTION: This code snippet imports necessary components from Storybook, gluestack-ui configuration, and custom components for documenting all available components in gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AllComponents/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n\n<Meta title=\"with-nativewind/Components/All Components\" />\n\nimport { AppProvider } from '@gluestack/design-system';\nimport { config } from '@gluestack-ui/config';\nimport { Grid } from '../../extra-components/nativewind/Grid';\nimport Wrapper from '../../core-components/nativewind/Wrapper';\n```\n\n----------------------------------------\n\nTITLE: Box Component Installation via CLI\nDESCRIPTION: Command to install the Box component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Box/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add box\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Component via CLI in React Native\nDESCRIPTION: This command installs the Toast component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add toast\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Todo App Documentation\nDESCRIPTION: Import statements for Storybook documentation components and custom components needed for the Todo app demonstration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/todo-app/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\nimport Responsiveness from '../../extra-components/nativewind/Responsive';\nimport { todoapp } from '../../extra-components/nativewind/appConfig';\n```\n\n----------------------------------------\n\nTITLE: Using the sx prop for inline styling in gluestack-style\nDESCRIPTION: The sx prop allows writing inline styles for components, overriding styles defined in the component config. It's recommended to use sparingly, primarily for layout styles.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst StyledInput = styled(\n  TextInput,\n  {\n    py: '$2',\n    bg: '$gray50',\n    borderRadius: '$2',\n  },\n  componentConfig,\n  extendedBaseConfig\n);\n\n<StyledInput sx={{ py: '$4' }} />;\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Component via CLI\nDESCRIPTION: Command to install the Toast component using the gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Toast/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add toast\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Styling Migration\nDESCRIPTION: Converting basic layout styles from styled props to utility classes in GlueStack UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@gluestack-ui/themed';\n\nexport default function App() {\n  return (\n    <Box mt=\"$4\" pb=\"$2\">\n      Simple Box\n    </Box>\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@/components/ui/box';\n\nexport default function App() {\n  return <Box className=\"mt-4 pb-2\">Simple Box</Box>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Actionsheet Props in TypeScript/JSX\nDESCRIPTION: This code snippet describes the props for the Actionsheet component, including their types, defaults, and descriptions. It uses a table structure to present the information.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Table>\n  <Table.THead>\n    <Table.TR>\n      <Table.TH>\n        <Table.TText>Prop</Table.TText>\n      </Table.TH>\n      <Table.TH>\n        <Table.TText>Type</Table.TText>\n      </Table.TH>\n      <Table.TH>\n        <Table.TText>Default</Table.TText>\n      </Table.TH>\n      <Table.TH>\n        <Table.TText>Description</Table.TText>\n      </Table.TH>\n    </Table.TR>\n  </Table.THead>\n  <Table.TBody>\n    <Table.TR>\n      <Table.TD>\n        <Table.TText>\n          <InlineCode>isOpen</InlineCode>\n        </Table.TText>\n      </Table.TD>\n      <Table.TD>\n        <Table.TText>boolean</Table.TText>\n      </Table.TD>\n      <Table.TD>\n        <Table.TText>-</Table.TText>\n      </Table.TD>\n      <Table.TD>\n        <Table.TText>{`If true, the Actionsheet will open. Useful for controllable state behavior.`}</Table.TText>\n      </Table.TD>\n    </Table.TR>\n    <!-- More table rows for other props -->\n  </Table.TBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Component via CLI in gluestack-ui\nDESCRIPTION: This command installs the Alert component using the gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add alert\n```\n\n----------------------------------------\n\nTITLE: Installing Link Component via CLI\nDESCRIPTION: This command uses the gluestack-ui CLI to add the Link component to your project. It simplifies the installation process by automating the necessary setup.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add link\n```\n\n----------------------------------------\n\nTITLE: Complex Media Query and Color Mode Styling Migration\nDESCRIPTION: Converting complex combinations of media queries and color modes from styled props to utility classes in GlueStack UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from '@gluestack-ui/themed';\n\nexport default function App() {\n  return (\n    <Center\n      px=\"$4\"\n      mb={-0.5}\n      sx={{\n        '@base': {\n          _light: { bg: '$backgroundLight0' },\n          _dark: { bg: '$backgroundDark800' },\n        },\n        '@md': {\n          py: '$48',\n          px: '$12',\n          _light: { bg: '$primary500' },\n          _dark: { bg: '$primary700' },\n        },\n      }}\n    ></Center>\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Center } from '@/components/center';\n\nexport default function App() {\n  return (\n    <Center className=\"px-4 mb-0.5 bg-background-0 dark:bg-background800 md:py-48 md:px-12 md:bg-primary-500 md:dark:bg-primary-700\"></Center>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering View Component with Text in React\nDESCRIPTION: This snippet demonstrates how to use the View component to structure content including Heading and Text components. It showcases padding and color styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/View/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View p=\"$4\">\n      <Heading>\n        A component library for the \n        <Heading color=\"$emerald400\">React Ecosystem</Heading>\n      </Heading>\n      <Text pt=\"$3\">\n        gluestack-ui is a simple, modular and accessible component library that\n        gives you building blocks to build you React applications.\n      </Text>\n    </View>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark-themed Actionsheet with FlatList in React Native\nDESCRIPTION: This example shows how to implement an Actionsheet with a dark theme and a FlatList. It applies a black background to the Actionsheet content and uses white text for the list items.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(!showActionsheet);\n    const DATA = [\n      {\n        id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\n        title: 'Pizza'\n      },\n      {\n        id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',\n        title: 'Burger'\n      },\n      {\n        id: '58694a0f-3da1-471f-bd96-145571e29d73',\n        title: 'Risotto'\n      },\n       {\n        id: '58694a0f-3da1-471f-bd96-145571e29d74',\n        title: 'French Fries'\n      },\n       {\n        id: '58694a0f-3da1-471f-bd96-145571e29d75',\n        title: 'Onion Rings'\n      },\n       {\n        id: '58694a0f-3da1-471f-bd96-145571e29d76',\n        title: 'Fried Shrimps'\n      },\n    ];\n    const Item = React.useCallback(\n      ({ title }) => (\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText color=\"white\">{title}</ActionsheetItemText>\n        </ActionsheetItem>\n      ),\n      [handleClose]\n    );\n    return (\n    <>\n        <Button onPress={handleClose}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent bg=\"black\">\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n          <ActionsheetFlatList\n            data={DATA}\n            renderItem={({ item }) => <Item title={item.title}  />}\n            keyExtractor={(item) => item.id}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Design with useMediaQuery in React\nDESCRIPTION: This snippet demonstrates how to use the useMediaQuery hook to create a responsive layout that changes based on different screen sizes. It uses the hook to detect screen dimensions and render different icons and styles accordingly.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/hooks/useMediaQuery/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(){\n      const [isMobile, isTablet, isSmallScreen, isLargeScreen] = useMediaQuery([\n    {\n      maxWidth: 480,\n    },\n    {\n      minWidth: 481,\n      maxWidth: 768,\n    },\n    {\n      minWidth: 769,\n      maxWidth: 1440,\n    },\n    {\n      minWidth: 1441,\n    },\n  ]);\n        return (\n    <Box className=\"justify-center items-center gap-4\">\n      <Heading>useMediaQuery</Heading>\n      <Text>Resize your browser windows to see changes.</Text>\n      <Box className=\"flex-row flex-wrap gap-8 justify-center\">\n        <Box\n          className={\n            'border justify-center items-center w-[120px] h-[80px] rounded gap-2 ' +\n            (isMobile ? 'border-primary-500 bg-background-50' : '')\n          }\n        >\n          <Icon as={Smartphone} size={'xs'} />\n          <Text size=\"sm\">Small</Text>\n        </Box>\n        <Box\n          className={\n            'border justify-center items-center w-[120px] h-[80px] rounded gap-2 ' +\n            (isTablet ? 'border-primary-500 bg-background-50' : '')\n          }\n        >\n          <Icon as={Tablet} size=\"sm\" />\n          <Text size=\"sm\">medium</Text>\n        </Box>\n        <Box\n          className={\n            'border justify-center items-center w-[120px] h-[80px] rounded gap-2 ' +\n            (isSmallScreen ? 'border-primary-500 bg-background-50' : '')\n          }\n        >\n          <Icon as={Laptop} size=\"sm\" />\n          <Text size=\"sm\">Large</Text>\n        </Box>\n        <Box\n          className={\n            'border justify-center items-center w-[120px] h-[80px] rounded gap-2 ' +\n            (isLargeScreen ? 'border-primary-500 bg-background-50' : '')\n          }\n        >\n          <Icon as={Tv} size=\"sm\" />\n          <Text size=\"sm\">Extra Large</Text>\n        </Box>\n      </Box>\n    </Box>\n  );\n      }\n```\n\n----------------------------------------\n\nTITLE: Installing Link Component via CLI\nDESCRIPTION: Command to add the Link component to a project using the gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Link/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add link\n```\n\n----------------------------------------\n\nTITLE: Defining IStyledPlugin Interface for gluestack-style Plugins\nDESCRIPTION: This code snippet defines the IStyledPlugin interface used in gluestack-style. It specifies methods for registering plugins, processing styled objects, and handling React components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/Introduction/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface IStyledPlugin {\n  styledUtils?: IStyled;\n  register(styledUtils: IStyled): void;\n  inputMiddleWare(styledObj: any): void;\n  componentMiddleWare?(props: any): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Progress Component Installation\nDESCRIPTION: Command to manually install the Progress component package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/progress\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Tooltip with Yarn\nDESCRIPTION: Command to install the @react-native-aria/tooltip package using the Yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/tooltip/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/tooltip\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Component Usage in React Native\nDESCRIPTION: Demonstrates the basic usage of the Switch component in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Switch/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Switch />;\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in gluestack-ui\nDESCRIPTION: Shows how to import the Card component from the gluestack-ui themed library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Card/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { Card } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Manual Input Component Installation\nDESCRIPTION: Command to manually install the Input component dependencies\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/input\n```\n\n----------------------------------------\n\nTITLE: Installing Spinner Component Dependencies Manually in gluestack-ui\nDESCRIPTION: Command to install the required Spinner component dependencies when adding it manually to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/spinner\n```\n\n----------------------------------------\n\nTITLE: Color Mode Styling Migration in React Components\nDESCRIPTION: Example of converting dark/light mode styles from styled props to utility classes using GlueStack UI Box component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@gluestack-ui/themed';\n\nexport default function App() {\n  return (\n    <Box sx={{ _dark: { bg: '$primary100' } }} bg=\"$primary300\">\n      Simple Text\n    </Box>\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@/components/ui/box';\n\nexport default function App() {\n  return <Box className=\"dark:bg-primary-100 bg-primary-300\">Simple Text</Box>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component in JSX\nDESCRIPTION: This snippet shows how to import the Image component from the gluestack-ui themed library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Image/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Adding Main Repository Remote\nDESCRIPTION: Command to add the main gluestack-ui repository as a remote named 'origin'. This allows you to fetch updates from the official repository while working on your fork.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ngit remote add origin git@github.com:gluestack/gluestack-ui.git\n```\n\n----------------------------------------\n\nTITLE: React Component Import Example in TypeScript/JSX\nDESCRIPTION: Demonstrates importing necessary components from the gluestack design system library for creating the installation guide interface.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/Installation/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Hoverable,\n  Button,\n  AppProvider,\n  HStack,\n} from '@gluestack/design-system';\n```\n\n----------------------------------------\n\nTITLE: Installing Badge Component via CLI in gluestack-ui\nDESCRIPTION: This command installs the Badge component in a gluestack-ui project using the CLI. It's a quick way to add the Badge component to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Badge/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add badge\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-ui Dependencies with npm\nDESCRIPTION: Command to install required dependencies for gluestack-ui using npm package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-expo/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/themed @gluestack-style/react react-native-svg@13.4.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Update for @gluestack/ui in Markdown\nDESCRIPTION: This snippet documents a patch update to version 0.1.0 of the @gluestack/ui package. It notes the addition of accessible styled awesome UI components as the primary change in this version.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @gluestack/ui\n\n## 0.1.0\n\n### Patch Changes\n\n- Added accessible styled awesome ui components\n```\n\n----------------------------------------\n\nTITLE: Graph Component Implementation - Simple Component Benchmark\nDESCRIPTION: Graph component usage showing performance comparison of simple themed components across different libraries.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/performance/benchmarks/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Graph\n  data={{\n    'gluestack-ui': 156,\n    'React Native': 78,\n    'Tamagui': 170,\n    'Styled Components': 94,\n    'NativeBase': 529,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Card Component Installation Command\nDESCRIPTION: CLI command to install the Card component using gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Card/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add card\n```\n\n----------------------------------------\n\nTITLE: Input Component Import Statement\nDESCRIPTION: Example showing how to import the Input component in a project file\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Input } from '@/components/ui/input';\n```\n\n----------------------------------------\n\nTITLE: Importing FlatList Component - Bash\nDESCRIPTION: Import statement for using the FlatList component from gluestack-ui themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/FlatList/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { FlatList } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Image Component via CLI\nDESCRIPTION: Command to add the Image component to your project using the gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Image/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add image\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component Dependencies Manually\nDESCRIPTION: Command to install the required npm package for the Switch component manually.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/switch\n```\n\n----------------------------------------\n\nTITLE: Action State Styling Migration\nDESCRIPTION: Converting interactive state styles (hover/active) from styled props to utility classes in GlueStack UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@gluestack-ui/themed';\n\nexport default function App() {\n  return (\n    <Box $md-hover={{ bg: '$background500' }} $md={{ bg: '$background700' }}>\n      Simple\n    </Box>\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@/components/ui/box';\n\n//If not mentioned any mode explicitly then it's gonna take light mode only.\nexport default function App() {\n  return (\n    <Box className=\"md:hover:bg-background-500 md:bg-background-700\">\n      Simple\n    </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with Yarn\nDESCRIPTION: Command to install all required dependencies for the design system project using Yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/building-design-systems/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Input with FormControl in React\nDESCRIPTION: Example code demonstrating how to create a login form with email and password fields, where the password input includes a toggle button to show/hide the password. The example uses FormControl, Input, Button, and Icon components from gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport { FormControl } from \"@/components/ui/form-control\";\nimport { Heading } from \"@/components/ui/heading\";\nimport { Input, InputField, InputIcon, InputSlot } from \"@/components/ui/input\";\nimport { Text } from \"@/components/ui/text\";\nimport { VStack } from \"@/components/ui/vstack\";\nimport { EyeIcon, EyeOffIcon } from \"@/components/ui/icon\";\nimport React from \"react\";\n\nfunction App() {\n          const [showPassword, setShowPassword] = React.useState(false);\n          const handleState = () => {\n            setShowPassword((showState) => {\n              return !showState;\n            });\n          };\n          return (\n            <FormControl className=\"p-4 border rounded-lg border-outline-300\">\n              <VStack space=\"xl\">\n                <Heading className=\"text-typography-900\">Login</Heading>\n                <VStack space=\"xs\">\n                  <Text className=\"text-typography-500\">Email</Text>\n                  <Input className=\"min-w-[250px]\">\n                    <InputField type=\"text\" />\n                  </Input>\n                </VStack>\n                <VStack space=\"xs\">\n                  <Text className=\"text-typography-500\">Password</Text>\n                  <Input className=\"text-center\">\n                    <InputField type={showPassword ? \"text\" : \"password\"} />\n                    <InputSlot className=\"pr-3\" onPress={handleState}>\n                      <InputIcon\n                        as={showPassword ? EyeIcon : EyeOffIcon}\n                      />\n                    </InputSlot>\n                  </Input>\n                </VStack>\n                <Button\n                  className=\"ml-auto\"\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                >\n                  <ButtonText className=\"text-typography-0\">Save</ButtonText>\n                </Button>\n              </VStack>\n            </FormControl>\n          );\n        }\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-aria/button Package with Yarn\nDESCRIPTION: Command to install the @react-native-aria/button package using yarn package manager. This package is likely used to provide accessible button functionality in React Native applications.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/button/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/button\n```\n\n----------------------------------------\n\nTITLE: Updated Next.js Configuration for gluestack-ui\nDESCRIPTION: Modified Next.js configuration file with gluestack-ui dependencies and settings.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/migration/native-base-to-gluestack-ui/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\n\nconst { withExpo } = require(\"@expo/next-adapter\");\nconst withPlugins = require(\"next-compose-plugins\");\n\nconst withTM = require(\"next-transpile-modules\")([\"react-native-web\", \"react-native\", \"@expo/vector-icons\", \"@gluestack-style/react\", \"@gluestack-style/legend-motion-animation-driver\", \"@gluestack-style/animation-plugin\", \"@gluestack-style/animation-resolver\", \"@gluestack-style/legend-motion-animation-driver\", \"@legendapp/motion\", \"@expo/html-elements\", \"react-native-svg\", \"@react-native-aria/interactions\", \"@react-native-aria/checkbox\", \"@react-native-aria/focus\", \"@react-native-aria/overlays\", \"@react-native-aria/radio\", \"@react-native-aria/slider\", \"@react-stately/slider\", \"@react-native-aria/toggle\", \"@react-native-aria/utils\", \"@react-native-aria/menu\", \"@gluestack-ui/actionsheet\", \"@gluestack-ui/form-control\", \"@gluestack-ui/avatar\", \"@gluestack-ui/modal\", \"@gluestack-ui/button\", \"@gluestack-ui/checkbox\", \"@gluestack-ui/divider\", \"@gluestack-ui/fab\", \"@gluestack-ui/hooks\", \"@gluestack-ui/hstack\", \"@gluestack-ui/icon\", \"@gluestack-ui/input\", \"@gluestack-ui/link\", \"@gluestack-ui/menu\", \"@gluestack-ui/modal\", \"@gluestack-ui/overlay\", \"@gluestack-ui/popover\", \"@gluestack-ui/progress\", \"@gluestack-ui/provider\", \"@gluestack-ui/radio\", \"@gluestack-ui/select\", \"@gluestack-ui/slider\", \"@gluestack-ui/spinner\", \"@gluestack-ui/switch\", \"@gluestack-ui/textarea\", \"@gluestack-ui/toast\", \"@gluestack-ui/tooltip\", \"@gluestack-ui/vstack\", \"@gluestack-ui/transitions\", \"@gluestack-ui/utils\", \"@gluestack-ui/tabs\", \"@gluestack-ui/react-native-aria\", \"@gluestack-ui/alert-dialog\", \"@gluestack-ui/pressable\", \"@gluestack-ui/themed-native-base\", \"@native-base/icons\", \"react-native-vector-icons\", \"@native-base/next-adapter\", \"react-native-web-linear-gradient\"]);\n\nconst nextConfig = {\n  webpack: (config, options) => {\n    config.module.rules.push({\n      test: /\\.ttf$/,\n      loader: \"url-loader\",\n      include: path.resolve(__dirname, \"node_modules/@native-base/icons\"),\n    });\n    config.resolve.alias = {\n      ...(config.resolve.alias || {}),\n      \"react-native$\": \"react-native-web\",\n      \"react-native-linear-gradient\": \"react-native-web-linear-gradient\",\n    };\n    config.resolve.extensions = [\n      \".web.js\",\n      \".web.ts\",\n      \".web.tsx\",\n      ...config.resolve.extensions,\n    ];\n    return config;\n  },\n  images: {\n    domains: [\"https://b.zmtcdn.com/web_assets\", \"upload.wikimedia.org/\"],\n  },\n};\n\nmodule.exports = withPlugins(\n  [[withTM], [withExpo, { projectRoot: __dirname }]],\n  {\n    ...nextConfig,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Fab Component\nDESCRIPTION: This command installs the necessary dependency for the Fab component using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/fab\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Switch Package\nDESCRIPTION: Commands to install the React Native Aria Switch package using yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/switch/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/switch\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Switch Component in React Native\nDESCRIPTION: Demonstrates how to render a basic Switch component with optional props for size and disabled state using the gluestack-ui library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Switch {...props} />\n```\n\n----------------------------------------\n\nTITLE: Installing Third-Party Package with Yarn\nDESCRIPTION: Command to install the react-native-color-picker package using yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/third-party-library-integrations/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-color-picker\n```\n\n----------------------------------------\n\nTITLE: Manual Installation Command\nDESCRIPTION: NPM command to install Pressable component dependencies manually.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/pressable\n```\n\n----------------------------------------\n\nTITLE: Installing Spinner Component using CLI in gluestack-ui\nDESCRIPTION: Command to add the Spinner component to your gluestack-ui project using the CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add spinner\n```\n\n----------------------------------------\n\nTITLE: Rendering Select Component Props Table in JSX\nDESCRIPTION: This code snippet demonstrates how to render a table of props for the Select component using JSX and custom Table components. It includes props such as isDisabled, isInvalid, isRequired, and others, along with their types, default values, and descriptions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Select/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider>\n  <TableContainer>\n    <Table>\n      <Table.THead>\n        <Table.TR>\n          <Table.TH>\n            <Table.TText>Prop</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Type</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Default</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Description</Table.TText>\n          </Table.TH>\n        </Table.TR>\n      </Table.THead>\n      <Table.TBody>\n        <Table.TR>\n          <Table.TD>\n            <Table.TText>\n              <InlineCode>isDisabled</InlineCode>\n            </Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>boolean</Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>false</Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>{`When true, the select is disabled and cannot be edited.`}</Table.TText>\n          </Table.TD>\n        </Table.TR>\n        {/* ... more table rows ... */}\n      </Table.TBody>\n    </Table>\n  </TableContainer>\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component in React\nDESCRIPTION: Shows how to import the Tooltip component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Tooltip/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing ImageViewer Dependencies Manually\nDESCRIPTION: Manual installation command for the ImageViewer component package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/ImageViewer/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/image-viewer\n```\n\n----------------------------------------\n\nTITLE: Adding GluestackUIProvider Script\nDESCRIPTION: Create a script file for GluestackUIProvider configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n%%-- File: core-components/nativewind/gluestack-ui-provider/script.ts --%%\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Component via CLI\nDESCRIPTION: This command installs the Skeleton component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Skeleton/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add skeleton\n```\n\n----------------------------------------\n\nTITLE: Adding individual gluestack-ui v2 component with CLI\nDESCRIPTION: Example command to add a specific gluestack-ui v2 component (Heading) to a project using the CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nnpx gluestack-ui@latest add heading\n```\n\n----------------------------------------\n\nTITLE: Navigating to UI-Unstyled Directory\nDESCRIPTION: Command to navigate to the gluestack-ui-unstyled directory after cloning the repository. This prepares your environment for making changes to the unstyled component package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd gluestack-ui-unstyled\n```\n\n----------------------------------------\n\nTITLE: Original Next.js Document Configuration\nDESCRIPTION: Initial Next.js _document.js configuration with NativeBase document setup.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/migration/native-base-to-gluestack-ui/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { default as NativebaseDocument } from \"@native-base/next-adapter/document\";\nimport fontsCSS from \"@native-base/icons/FontsCSS\";\nimport { AppRegistry } from \"react-native\";\nimport { Main } from \"next/document\";\nimport * as React from \"react\";\nimport NextDocument, { Html, Head, NextScript } from \"next/document\";\n\nclass Document extends NativebaseDocument {\n}\n\nasync function getInitialProps({ renderPage }) {\n  AppRegistry.registerComponent(\"Main\", () => Main);\n  const { getStyleElement } = AppRegistry.getApplication(\"Main\");\n  const page = await renderPage();\n  const styles = [\n    <style dangerouslySetInnerHTML={{ __html: fontsCSS }} />,\n    getStyleElement(),\n  ];\n  return { ...page, styles: React.Children.toArray(styles) };\n}\n\nDocument.getInitialProps = getInitialProps;\n\nexport default Document;\n```\n\n----------------------------------------\n\nTITLE: Installing useBreakpointValue Hook with CLI\nDESCRIPTION: Command to install the useBreakpointValue hook using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/hooks/useBreakPointValue/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add useBreakPointValue\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in React\nDESCRIPTION: Example of how to import the Icon component in a React project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon } from '@/components/ui/icon';\n```\n\n----------------------------------------\n\nTITLE: Building Actionsheet with SectionList in React\nDESCRIPTION: This code snippet illustrates the implementation of an Actionsheet with a SectionList for displaying categorized options. It includes a sectioned dataset, state management, and custom rendering for both items and section headers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Actionsheet, ActionsheetContent, ActionsheetItem, ActionsheetItemText, ActionsheetDragIndicator, ActionsheetDragIndicatorWrapper, ActionsheetBackdrop, ActionsheetSectionList, ActionsheetSectionHeaderText } from \"@/components/ui/actionsheet\";\nimport { Button, ButtonText } from \"@/components/ui/button\";\nimport React from \"react\";\n\nfunction App(){\n    const [showActionsheet, setShowActionsheet] = React.useState(false);\n    const handleClose = () => setShowActionsheet(false);\n    const DATA = [\n      {\n        title: 'Gender',\n        data: ['Men', 'Women', 'Boy', 'Girl'],\n      },\n    ];\n    return (\n    <>\n        <Button onPress={() => setShowActionsheet(true)}>\n          <ButtonText>Open</ButtonText>\n        </Button>\n        <Actionsheet isOpen={showActionsheet} onClose={handleClose} snapPoints={[35]}>\n        <ActionsheetBackdrop />\n        <ActionsheetContent>\n          <ActionsheetDragIndicatorWrapper>\n            <ActionsheetDragIndicator />\n          </ActionsheetDragIndicatorWrapper>\n           <ActionsheetSectionList\n            h=\"$56\"\n            sections={DATA}\n            keyExtractor={(item, index) => item + index}\n            renderItem={({ item }) => (\n              <ActionsheetItem onPress={handleClose}>\n                <ActionsheetItemText>{item}</ActionsheetItemText>\n              </ActionsheetItem>\n            )}\n            renderSectionHeader={({ section: { title, data } }) => (\n              <ActionsheetSectionHeaderText>\n                {title}  ({data.length})\n              </ActionsheetSectionHeaderText>\n            )}\n          />\n        </ActionsheetContent>\n      </Actionsheet>\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Text Component Installation - CLI\nDESCRIPTION: Command to install the Text component using gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Text/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add text\n```\n\n----------------------------------------\n\nTITLE: Manual Divider Installation Command\nDESCRIPTION: NPM command for manually installing the Divider component package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/divider\n```\n\n----------------------------------------\n\nTITLE: Customizing Heading Component Example\nDESCRIPTION: Shows how to customize the Heading component using styled components in gluestack-ui by mapping styled view to Heading component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Typography/Heading/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport { Root } from '../components/core/heading/styled-components';\n\n// mapping the Heading to root component\nconst Heading = Root;\n\n// Using the heading component\nexport default () => <Heading />;\n```\n\n----------------------------------------\n\nTITLE: Installing Default Theme with Yarn\nDESCRIPTION: Optional command to install the default theme configuration for gluestack-ui using Yarn.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-expo/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-ui/config@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Component via CLI\nDESCRIPTION: Command to install the Icon component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add icon\n```\n\n----------------------------------------\n\nTITLE: Installing Input Component via CLI\nDESCRIPTION: Command to install the Input component using gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Input/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add input\n```\n\n----------------------------------------\n\nTITLE: Original Next.js Configuration with NativeBase\nDESCRIPTION: Initial Next.js configuration file using NativeBase adapter and webpack settings.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/migration/native-base-to-gluestack-ui/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withNativebase } = require(\"@native-base/next-adapter\");\nconst path = require(\"path\");\n\nmodule.exports = withNativebase({\n  dependencies: [\"@native-base/icons\", \"react-native-web-linear-gradient\"],\n  nextConfig: {\n    webpack: (config, options) => {\n      config.module.rules.push({\n        test: /\\.ttf$/,\n        loader: \"url-loader\",\n        include: path.resolve(__dirname, \"node_modules/@native-base/icons\"),\n      });\n      config.resolve.alias = {\n        ...(config.resolve.alias || {}),\n        \"react-native$\": \"react-native-web\",\n        \"react-native-linear-gradient\": \"react-native-web-linear-gradient\",\n      };\n      config.resolve.extensions = [\n        \".web.js\",\n        \".web.ts\",\n        \".web.tsx\",\n        ...config.resolve.extensions,\n      ];\n      return config;\n    },\n    images: {\n      domains: [\"https://b.zmtcdn.com/web_assets\", \"upload.wikimedia.org/\"],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for gluestack-ui\nDESCRIPTION: Command to install all required dependencies for the gluestack-ui project using Yarn. This sets up the necessary packages before you can run the storybook or make changes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Disclosure Package with Yarn\nDESCRIPTION: Command to install the @react-native-aria/disclosure package using Yarn package manager. This package likely provides accessibility hooks and utilities for implementing disclosure patterns (like accordions or expandable sections) in React Native applications.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/disclosure/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/disclosure\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Component Structure in React\nDESCRIPTION: Demonstrates the basic structure of the Textarea component with a TextareaInput child.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Textarea/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Textarea>\n    <TextareaInput />\n  </Textarea>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Modal Component Dependencies Manually\nDESCRIPTION: This command installs the necessary dependency for the Modal component if you're adding it manually to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Modal/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/modal\n```\n\n----------------------------------------\n\nTITLE: Progress Component Installation via CLI\nDESCRIPTION: Command to install the Progress component using gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add progress\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component via CLI\nDESCRIPTION: Command to add the Switch component to your gluestack-ui project using the CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add switch\n```\n\n----------------------------------------\n\nTITLE: Importing useColorMode from gluestack-style\nDESCRIPTION: This snippet demonstrates how to import the useColorMode hook from the @gluestack-style/react package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useColorMode/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useColorMode } from '@gluestack-style/react';\n```\n\n----------------------------------------\n\nTITLE: Importing VStack Component\nDESCRIPTION: Shows how to import the VStack component from the gluestack-ui themed package\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Layout/VStack/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VStack } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing ImageBackground Component in React Native\nDESCRIPTION: This code snippet shows how to import the ImageBackground component from the @gluestack-ui/themed package for use in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/ImageBackground/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport {ImageBackground } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component via CLI\nDESCRIPTION: This command uses the gluestack-ui CLI to add the Tooltip component to a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add tooltip\n```\n\n----------------------------------------\n\nTITLE: Exporting Component\nDESCRIPTION: Export statement for the ColorPicker component in the index file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/third-party-library-integrations/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport ColorPicker from './ColorPicker';\n```\n\n----------------------------------------\n\nTITLE: Using SelectDragIndicator Component in React Native\nDESCRIPTION: SelectDragIndicator is mapped to ActionsheetDragIndicator and inherits properties from React Native's View component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectDragIndicator />\n```\n\n----------------------------------------\n\nTITLE: Select Component Table Structure\nDESCRIPTION: Table structure showing the styling props and their descriptions for Select component descendants\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Select/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider>\n  <TableContainer>\n    <Table>\n      <Table.THead>\n        <Table.TR>\n          <Table.TH>\n            <Table.TText>Sx Prop</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Description</Table.TText>\n          </Table.TH>\n        </Table.TR>\n      </Table.THead>\n      <Table.TBody>\n        <Table.TR>\n          <Table.TD>\n            <Table.TText>\n              <InlineCode>_sectionHeaderBackground</InlineCode>\n            </Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>{`Prop to style SelectActionsheetSectionHeaderText Component`}</Table.TText>\n          </Table.TD>\n        </Table.TR>\n      </Table.TBody>\n    </Table>\n  </TableContainer>\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/image package using npm or yarn\nDESCRIPTION: Command line instructions for installing the @gluestack-ui/image package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/image\n\n# or\n\n$ npm i @gluestack-ui/image\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-aria/tabs with Yarn\nDESCRIPTION: Command to install the @react-native-aria/tabs package using Yarn package manager. This package provides accessible tab components for React Native applications.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/tabs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/tabs\n```\n\n----------------------------------------\n\nTITLE: Installing Google Fonts in Expo\nDESCRIPTION: Command to install a specific Google Font package (Inter in this example) for Expo projects.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Fonts/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @expo-google-fonts/inter\n```\n\n----------------------------------------\n\nTITLE: FormControl with Action Buttons\nDESCRIPTION: Shows implementation of form action buttons within FormControl component. Includes examples of negative and secondary action buttons with different styling variants.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n        <HStack>\n          <FormControl>\n            <Button action='negative' mr='$4'>\n              <ButtonText>\n                Delete\n              </ButtonText>\n            </Button>\n          </FormControl>\n          <FormControl>\n            <Button variant='outline' action='secondary'>\n              <ButtonText>\n                Cancel\n              </ButtonText>\n            </Button>\n          </FormControl>\n        </HStack>\n```\n\n----------------------------------------\n\nTITLE: Installing Pressable Component via CLI\nDESCRIPTION: Command to install the Pressable component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add pressable\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/divider Package\nDESCRIPTION: Commands to install the @gluestack-ui/divider package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/divider/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/divider\n\n# or\n\n$ npm i @gluestack-ui/divider\n```\n\n----------------------------------------\n\nTITLE: Importing Table Components in React Native\nDESCRIPTION: Import statement showing how to import all Table related components for use in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Table/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {   \n  Table,\n  TableHeader,\n  TableFooter,\n  TableBody,\n  TableHead,\n  TableData,\n  TableRow,\n  TableCaption,\n } from '@/components/ui/table';\n```\n\n----------------------------------------\n\nTITLE: Installing Default Theme with npm\nDESCRIPTION: Optional command to install the default theme configuration for gluestack-ui using npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-expo/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/config@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component Dependencies Manually\nDESCRIPTION: Command to install the required dependency for using the Progress component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Progress/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/progress\n```\n\n----------------------------------------\n\nTITLE: State Specificity Map in gluestack-style\nDESCRIPTION: This snippet shows the state specificity map used in gluestack-style. It defines the priority order for different states when multiple states are applied to a component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/StateBasesStyles/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nindeterminate: 1,\nchecked: 1,\nreadOnly: 1,\n\nrequired: 2,\ninvalid: 2,\n\nfocus: 3,\nfocusVisible: 4,\nhover: 5,\npressed: 6,\nactive: 6,\nloading: 7,\n\ndisabled: 10,\n```\n\n----------------------------------------\n\nTITLE: Using SelectSectionList in React Native\nDESCRIPTION: SelectSectionList is mapped to Actionsheet.SectionList and inherits all properties of React Native's SectionList component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectSectionList\n  sections={sections}\n  renderItem={renderItem}\n  renderSectionHeader={renderSectionHeader}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running iOS App for Testing\nDESCRIPTION: Command to start the app directly on iOS simulator for testing components in a native environment. This allows you to test mobile-specific behaviors and styling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Basic Fab Component Usage\nDESCRIPTION: Basic implementation example showing the structure of a Fab component with its child components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.themed.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Fab>\n    <FabLabel />\n    <FabIcon />\n  </Fab>\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Storybook Stories\nDESCRIPTION: Command to update Storybook stories one time. This is useful when new story files are added or removed in the native (ondevice) version.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn update-stories\n```\n\n----------------------------------------\n\nTITLE: Importing VirtualizedList Component - React Native\nDESCRIPTION: Code snippet showing how to import the VirtualizedList component from gluestack-ui themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/VirtualizedList/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { VirtualizedList } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing Heading Component via CLI\nDESCRIPTION: Command to add the Heading component to your project using the gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add heading\n```\n\n----------------------------------------\n\nTITLE: Configuration with Custom Path\nDESCRIPTION: Babel configuration with custom config path option for the resolver plugin\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/advanced/BabelPlugins/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\n\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        gluestackStyleResolver,\n        {\n          configPath: path.resolve(__dirname, './gluestack-style.config.js'),\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering SelectTrigger Styling Props Table in JSX\nDESCRIPTION: This code snippet shows how to render a table of styling props for the SelectTrigger component using JSX and custom Table components. It includes props for styling child components like _icon and _input.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Select/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider>\n  <TableContainer>\n    <Table>\n      <Table.THead>\n        <Table.TR>\n          <Table.TH>\n            <Table.TText>Sx Prop</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Description</Table.TText>\n          </Table.TH>\n        </Table.TR>\n      </Table.THead>\n      <Table.TBody>\n        <Table.TR>\n          <Table.TD>\n            <Table.TText>\n              <InlineCode>_icon</InlineCode>\n            </Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>{`Prop to style SelectIcon Component`}</Table.TText>\n          </Table.TD>\n        </Table.TR>\n        <Table.TR>\n          <Table.TD>\n            <Table.TText>\n              <InlineCode>_input</InlineCode>\n            </Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>{`Prop to style SelectInput Component`}</Table.TText>\n          </Table.TD>\n        </Table.TR>\n      </Table.TBody>\n    </Table>\n  </TableContainer>\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: Extending base configuration with extendedBaseConfig in gluestack-style\nDESCRIPTION: The extendedBaseConfig object lets you extend the base configuration by defining aliases, tokens, propertyTokenMap, and propertyResolver specific to a component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  aliases: {\n    pTC: 'placeholderTextColor',\n  },\n  tokens: {\n    placeholderTextColor: 'placeholderTextColor',\n  },\n  propertyTokenMap: {\n    placeholderTextColor: 'colors',\n  },\n  propertyResolver: {\n    placeholderTextColor: (rawValue,resolver)=>{\n      return resolver(rawValue)\n    },\n  },\n\n  <StyledTextInput placeholder=\"Enter text\" pTC=\"$primary600\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component via CLI\nDESCRIPTION: Command to install the Switch component using the gluestack-ui CLI tool, which automatically adds the component to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Switch/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add switch\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Components\nDESCRIPTION: React/JSX imports for Storybook documentation components and custom Responsiveness component used to showcase the dashboard app.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/dashboard-app/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\nimport Responsiveness from './Responsive';\n\n<Meta title=\"ui/Guides/Resources/Dashboard App\" />\n```\n\n----------------------------------------\n\nTITLE: Using SelectVirtualizedList in React Native\nDESCRIPTION: SelectVirtualizedList is mapped to Actionsheet.VirtualizedList and inherits all properties of React Native's VirtualizedList component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectVirtualizedList\n  data={data}\n  renderItem={renderItem}\n  keyExtractor={keyExtractor}\n/>\n```\n\n----------------------------------------\n\nTITLE: Pressable Component with Dynamic Child Elements in JSX\nDESCRIPTION: Demonstrates how to change child elements based on the Pressable component's state (pressed).\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Pressable/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Pressable p=\"$16\" bg=\"$primary500\"  $hover-bg=\"$primary400\">\n   {({ pressed }) => (\n        <Text color={pressed ? 'pink' : 'yellow'}>PRESSABLE</Text>\n      )}\n</Pressable>\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Progress Component\nDESCRIPTION: Command to install the Progress component using npx package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/progress/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx gluestack-ui@latest add progress\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Accordion Package with Yarn\nDESCRIPTION: Command to install the @react-native-aria/accordion package using the Yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/accordion/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/accordion\n```\n\n----------------------------------------\n\nTITLE: Importing Select Component in JavaScript\nDESCRIPTION: This code snippet shows how to import the Select component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Select/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Select } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Setting active color mode with StyledProvider\nDESCRIPTION: The colorMode prop of StyledProvider sets the active color mode, which determines which color mode-specific styles are applied to components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<StyledProvider colorMode=\"dark\">\n  <App />\n</StyledProvider>\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Component via CLI\nDESCRIPTION: Command to add the Icon component to a gluestack-ui project using the CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Icon/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add icon\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Resolver\nDESCRIPTION: Command to install the @gluestack-style/babel-plugin-styled-resolver package using yarn\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/advanced/BabelPlugins/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-style/babel-plugin-styled-resolver\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component in React\nDESCRIPTION: This code snippet shows how to import the Tooltip component in a React application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from '@/components/ui/tooltip';\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Tooltip Package\nDESCRIPTION: Commands for installing the @gluestack-ui/tooltip package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/tooltip/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/tooltip\n\n# or\n\n$ npm i @gluestack-ui/tooltip\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/nativewind-utils Package\nDESCRIPTION: Command to install the @gluestack-ui/nativewind-utils package to your project dependencies using npx.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/nativewind/utils/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx install @gluestack-ui/nativewind-utils\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Custom Config Path\nDESCRIPTION: Advanced babel configuration that specifies a custom path to the gluestack-ui configuration file using the configPath option.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/production-optimizations/babel-plugin/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst gluestackStyleResolver = require('@gluestack-style/babel-plugin-styled-resolver');\n\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        gluestackStyleResolver,\n        {\n          configPath: path.resolve(\n            __dirname,\n            './config/gluestack-ui.config.js' // Specify the path of the config file\n          ),\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectSectionHeaderText in React Native\nDESCRIPTION: SelectSectionHeaderText is mapped to Actionsheet.SectionHeaderText and inherits all properties of React Native's Text component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectSectionHeaderText>\n  Section Header\n</SelectSectionHeaderText>\n```\n\n----------------------------------------\n\nTITLE: Navigating to the project directory in Bash\nDESCRIPTION: Command to navigate to the gluestack-ui-design-system directory after cloning the repository.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/building-design-systems/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd gluestack-ui-design-system\n```\n\n----------------------------------------\n\nTITLE: Basic Default Export with PinInput\nDESCRIPTION: A simple default export example showing the basic structure of using the PinInput component with PinInputField.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/PinInput/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <PinInput>\n    <PinInputField />\n  </PinInput>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating New gluestack Project with npm\nDESCRIPTION: Command to create a new project with gluestack-ui pre-configured using npm create.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-expo/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create gluestack\n```\n\n----------------------------------------\n\nTITLE: Installing Textarea Component with CLI\nDESCRIPTION: Command to install the Textarea component using the gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Textarea/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add textarea\n```\n\n----------------------------------------\n\nTITLE: Using Theme Component with StyledProvider in React\nDESCRIPTION: Example showing how to use Theme component with StyledProvider for multiple theme support in gluestack-style. The code demonstrates nested theme application and token injection as CSS variables.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/react/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled, StyledProvider } from '@gluestack-style/react';\n\nconst config = {\n  aliases: {},\n  tokens: {\n    colors: {\n      primary: 'green',\n    },\n  },\n  themes: {\n    dark: {\n      colors: {\n        primary: 'black',\n      },\n    },\n    modern: {\n      colors: {\n        primary: 'red',\n      },\n    },\n  },\n};\n\nconst App = () => {\n  const Box = styled(View, {\n    bg: '$primary',\n    p: '$10',\n  });\n\n  return (\n    <StyledProvider config={config}>\n      <Theme name=\"dark\">\n        <Theme name=\"modern\">\n          <Box />\n        </Theme>\n      </Theme>\n    </StyledProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Graph Component Implementation - Themed Components Benchmark\nDESCRIPTION: Graph component usage showing performance comparison of components with default themes and inline styles.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/performance/benchmarks/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Graph\n  data={{\n    'gluestack-ui': 358,\n    'Tamagui': 510,\n    'NativeBase': 1078,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Textarea Component Dependencies\nDESCRIPTION: Command to manually install the required npm package for the Textarea component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Textarea/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/textarea\n```\n\n----------------------------------------\n\nTITLE: Cloning gluestack-ui-unstyled Repository for Component Changes\nDESCRIPTION: Command to clone your fork of the gluestack-ui-unstyled repository for making changes to component functionality, APIs, or accessibility features rather than styles.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: git\nCODE:\n```\ngit clone git@github.com:${YOUR_USERNAME}/gluestack/gluestack-ui-unstyled.git\n```\n\n----------------------------------------\n\nTITLE: Creating gluestack-ui Configuration File\nDESCRIPTION: Example filename for the gluestack-ui configuration file that needs to be created at the project root.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/getting-started/incremental-adoption/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngluestack-ui.config.ts\n```\n\n----------------------------------------\n\nTITLE: Descendant Styling Migration\nDESCRIPTION: Example of converting descendant styling to direct child styling in GlueStack UI components, showing a pattern not supported by NativeWind.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CheckboxLabel, Text } from '@gluestack-ui/themed';\n\nexport default function App() {\n  return (\n    <CheckboxLabel\n      sx={{\n        bg: '$blue500',\n        _text: {\n          fontSize: '$sm',\n          color: '$primary500',\n        },\n      }}\n    >\n      <Text>gluestack-ui</Text>\n    </CheckboxLabel>\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CheckboxLabel } from '@/components/checkbox';\nimport { Text } from '@/components/text';\n\n// we need to remove the descendant styling from parent element and add that\n// styling to all the child elements\nexport default function App() {\n  return (\n    <CheckboxLabel className=\"bg-blue-500\">\n      <Text className=\"text-sm text-primary-500\">gluestack-ui</Text>\n    </CheckboxLabel>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-aria/focus package with yarn\nDESCRIPTION: Command to install the @react-native-aria/focus package using yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/focus/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/focus\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title in React/JSX\nDESCRIPTION: Sets the Storybook documentation meta title for the current page, defining its location within the Storybook navigation hierarchy.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/overview/QuickStart/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"with-nativewind/Home/Overview/Quick Start\" />\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack Pin Input Package\nDESCRIPTION: Commands for installing the @gluestack-ui/pin-input package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/pin-input/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/pin-input\n\n# or\n\n$ npm i @gluestack-ui/pin-input\n```\n\n----------------------------------------\n\nTITLE: Example Theme Configuration\nDESCRIPTION: Sample configuration file structure showing theme setup\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/advanced/BabelPlugins/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  componentPath: '/core/components',\n  theme: {\n    aliases: {},\n    tokens: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Component with CLI\nDESCRIPTION: Command to install the Portal component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Portal/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add portal\n```\n\n----------------------------------------\n\nTITLE: CLI Installation Command\nDESCRIPTION: Command to install Pressable component using gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Pressable/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add pressable\n```\n\n----------------------------------------\n\nTITLE: Installing Spinner Component via CLI in React Native\nDESCRIPTION: This command uses the gluestack-ui CLI to add the Spinner component to your project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Spinner/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add spinner\n```\n\n----------------------------------------\n\nTITLE: Installing Center Component via CLI in gluestack-ui\nDESCRIPTION: This command installs the Center component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Center/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add center\n```\n\n----------------------------------------\n\nTITLE: Applying Theme-Specific Utility Props in gluestack-style\nDESCRIPTION: A code snippet demonstrating how to use theme-specific utility props with the $t_ prefix to apply styles based on theme names.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/react/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box $t_dark-bg=\"$primary\" />\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Meta component configuration for Storybook documentation specifying the UI section for performance benchmarks.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/performance/benchmarks/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"ui/Home/Performance/Benchmarks\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Select Component via CLI\nDESCRIPTION: Shows how to install the Select component using the gluestack-ui CLI command.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Select/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add select\n```\n\n----------------------------------------\n\nTITLE: Starting React Native Web Storybook\nDESCRIPTION: This command starts the React Native Web Storybook.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-v7/README.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn storybook:web\n```\n\n----------------------------------------\n\nTITLE: Importing Actionsheet Components\nDESCRIPTION: Import statements showing all the available Actionsheet-related components and supporting UI elements from gluestack-ui themed components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Actionsheet,\n  ActionsheetBackdrop,\n  ActionsheetContent,\n  ActionsheetDragIndicator,\n  ActionsheetDragIndicatorWrapper,\n  ActionsheetItem,\n  ActionsheetItemText,\n  ActionsheetIcon,\n  ActionsheetScrollView,\n  ActionsheetVirtualizedList,\n  ActionsheetFlatList,\n  ActionsheetSectionList,\n  ActionsheetSectionHeaderText,\n  Button,\n  ButtonText,\n  Box,\n  VStack,\n  Input,\n  InputIcon,\n  InputSlot,\n  InputField,\n  FormControl,\n  FormControlLabel,\n  FormControlLabelText,\n  FormControlHelper,\n  FormControlHelperText,\n  HStack,\n  Image,\n  Text,\n  PlayIcon,\n  FavouriteIcon,\n  CloseIcon,\n  Icon,\n  TrashIcon,\n  ShareIcon\n} from '../../core-components/themed';\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook Documentation\nDESCRIPTION: Import statements for Storybook documentation components and custom Graph component for displaying benchmark results.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/performance/benchmarks/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\nimport { Graph } from './Progress';\n```\n\n----------------------------------------\n\nTITLE: Importing Spinner Component in React\nDESCRIPTION: This snippet shows how to import the Spinner component from the gluestack-ui themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Feedback/Spinner/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/vstack Package\nDESCRIPTION: Commands to install the @gluestack-ui/vstack package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/vstack/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @gluestack-ui/vstack\n\n# or\n\n$ npm i @gluestack-ui/vstack\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Import and Configuration\nDESCRIPTION: Import statements for Storybook documentation components and meta configuration for the performance documentation page.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/Performance/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n\n<Meta title=\"styled/Overview/Performance\" />\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Tabs Package\nDESCRIPTION: Command to install the @gluestack-ui/tabs package using yarn package manager. This adds the tabs component module to your project dependencies.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/tabs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @gluestack-ui/tabs\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/image-viewer with Package Managers\nDESCRIPTION: Command line instructions for installing the @gluestack-ui/image-viewer package using either Yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image-viewer/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/image-viewer\n\n# or\n\n$ npm i @gluestack-ui/image-viewer\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React\nDESCRIPTION: This snippet shows how to import the Badge component from the gluestack-ui themed library.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/DataDisplay/Badge/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Installing VStack Component via CLI\nDESCRIPTION: Command to add the VStack component to a gluestack-ui project using the CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/VStack/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add vstack\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Platform-Specific Optimizations\nDESCRIPTION: Example of package.json scripts configuration for setting the GLUESTACK_STYLE_TARGET environment variable based on the platform to optimize component rendering.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/production-optimizations/babel-plugin/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"GLUESTACK_STYLE_TARGET=native expo start -c\",\n    \"web\": \"GLUESTACK_STYLE_TARGET=web expo start --web -c\",\n    \"android\": \"GLUESTACK_STYLE_TARGET=native expo start --android -c\",\n    \"ios\": \"GLUESTACK_STYLE_TARGET=native expo start --ios -c\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Running Storybook for web development\nDESCRIPTION: Command to launch Storybook in web mode for interactive component development and testing in a browser environment.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/building-design-systems/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/radio Package\nDESCRIPTION: Commands to install the @gluestack-ui/radio package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/radio/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/radio\n\n# or\n\n$ npm i @gluestack-ui/radio\n```\n\n----------------------------------------\n\nTITLE: Box Component Installation via CLI\nDESCRIPTION: Command to install the Box component using gluestack-ui CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Box/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add box\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Linear Gradient\nDESCRIPTION: Command to install the expo-linear-gradient package in an Expo project, which is required to implement LinearGradient components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/recipes/linear-gradient/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-linear-gradient\n```\n\n----------------------------------------\n\nTITLE: FormControl Manual Installation\nDESCRIPTION: NPM command to install FormControl dependencies manually\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/form-control\n```\n\n----------------------------------------\n\nTITLE: Example of Resolved Fonts Object\nDESCRIPTION: Shows how the FontResolver transforms the font properties into a unified format based on the resolution strategy.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/FontsPlugin/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  fontFamily: 'NunitoSans_800ExtraBold_Italic',\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Menu Component Dependencies Manually\nDESCRIPTION: This command installs the necessary dependencies for the Menu component when adding it manually to a project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/menu @legendapp/motion\n```\n\n----------------------------------------\n\nTITLE: Referencing Related Components and Utilities\nDESCRIPTION: This line appears to reference related component and utility paths, possibly for importing or documentation purposes. It's a partial path reference that may be used elsewhere in the build process.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/more-recipes/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n../../components1/Wrapper../../../utils../../../components/Wrapper\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma Prototype Frame in JSX\nDESCRIPTION: React/JSX code for embedding a Figma design prototype iframe with specific styling for border, border-radius and aspect ratio constraints.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  style={{\n    borderRadius: '8px',\n    border: ' 1px solid rgba(0, 0, 0, 0.1)',\n    aspectRatio: 736 / 585,\n  }}\n  src=\"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Fproto%2FNcXOxqKbdnGsLQNex3H76u%2F%25C2%25A0%25F0%259F%2593%259Agluestack-UI-handbook%3Ftype%3Ddesign%26node-id%3D5030-22048%26t%3DIS25mxEIlIP9OacJ-1%26scaling%3Dscale-down%26page-id%3D5030%253A19919%26starting-point-node-id%3D5030%253A22048%26mode%3Ddesign\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/alert Package\nDESCRIPTION: Commands to install the @gluestack-ui/alert package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/alert/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/alert\n\n# or\n\n$ npm i @gluestack-ui/alert\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Information\nDESCRIPTION: This code sets the meta information for the Storybook page, specifying the title of the documentation page within the Storybook hierarchy.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Releases/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Meta title=\"with-nativewind/Guides/More/Releases\" />\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.11\nDESCRIPTION: Details improvements to Popover including arrow support, animation enhancements, and mobile positioning updates\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/overlays/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.11\n\n### Patch Changes\n\n- - Popover arrow support [PR](https://github.com/gluestack/gluestack-ui/pull/1677)\n  - Popover animation improvements\n\n  - Popover top placement position for mobile\n```\n\n----------------------------------------\n\nTITLE: Importing useMedia Hook from gluestack-style in React\nDESCRIPTION: This snippet shows how to import the useMedia hook from the @gluestack-style/react package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useMedia/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMedia } from '@gluestack-style/react';\n```\n\n----------------------------------------\n\nTITLE: Embedding Discord FAQ iframe in Storybook documentation (JSX)\nDESCRIPTION: This code snippet embeds an iframe containing the Discord FAQ content for gluestack-ui. The iframe is styled with custom CSS properties to enhance its appearance and responsiveness.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/discord-faqs/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  style={{\n    borderRadius: '8px',\n    border: ' 1px solid rgba(0, 0, 0, 0.1)',\n    aspectRatio: 736 / 585,\n  }}\n  src=\"https://gluestack.forumify.io/\"\n  allowFullScreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Animated ActionsheetBackdrop Component\nDESCRIPTION: This snippet demonstrates how to create an animated ActionsheetBackdrop component using @legendapp/motion's createMotionAnimatedComponent function with React Native's Pressable component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Actionsheet/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pressable } from 'react-native';\nimport { createMotionAnimatedComponent } from '@legendapp/motion';\n\nconst ActionsheetBackdrop = createMotionAnimatedComponent(Pressable);\n```\n\n----------------------------------------\n\nTITLE: Color Mode Layout Styling Migration\nDESCRIPTION: Converting color mode-specific layout styles from styled props to utility classes in GlueStack UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@gluestack-ui/themed';\n\nexport default function App() {\n  return (\n    <Box $md-dark={{ mt: '$4' }} $md-light={{ mt: '$2' }} pb=\"$2\">\n      Simple Box\n    </Box>\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@/components/ui/box';\n\n//By default if you don't mention any mode it's take light mode.\nexport default function App() {\n  return <Box className=\"md:dark:mt-4 md:mt-2 pb-2\">Simple Box</Box>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Animation Resolver Package\nDESCRIPTION: Commands to install the @gluestack-style/animation-resovler package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/animation-resolver/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @gluestack-style/animation-resovler\n\n# or\n\n$ npm i @gluestack-style/animation-resovler\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-style/babel-plugin-styled-resolver package with package managers\nDESCRIPTION: Commands for installing the @gluestack-style/babel-plugin-styled-resolver package using either Yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/babel-plugin-styled-resolver/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-style/babel-plugin-styled-resolver\n\n# or\n\n$ npm i @gluestack-style/babel-plugin-styled-resolver\n```\n\n----------------------------------------\n\nTITLE: Importing useTheme Hook from gluestack-style/react\nDESCRIPTION: Shows how to import the useTheme hook from the @gluestack-style/react package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/hooks/useTheme/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from '@gluestack-style/react';\n```\n\n----------------------------------------\n\nTITLE: Basic Heading Component Usage in React\nDESCRIPTION: Simple example showing basic usage of the Heading component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.themed.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading>I am a Heading</Heading>\n```\n\n----------------------------------------\n\nTITLE: Global Property Resolver Configuration\nDESCRIPTION: Example of setting up a global property resolver in the gluestack-style configuration file to apply property resolution across all components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/api/PropertyResolver/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createConfig } from '@gluestack-style/react';\n\nexport const config = createConfig({\n  aliases: {\n    bg: 'backgroundColor',\n    backgroundColor: 'backgroundColor',\n    // ...\n  },\n  tokens: {\n    // ...\n  },\n  globalStyle: {\n    // ...\n  },\n  propertyResolver: {\n    backgroundColor: (rawValue, resolver) => {\n      if (rawValue.includes(':alpha-')) {\n        let opacity = resolver(rawValue.split(':alpha-')[1], 'opacity');\n        let value = rawValue.split(':alpha-')[0];\n        return hexToRgba(resolver(value), opacity);\n      } else {\n        return resolver(rawValue);\n      }\n    },\n  },\n} as const);\n```\n\n----------------------------------------\n\nTITLE: Installing Animation Resolver Package\nDESCRIPTION: Commands for installing the animation resolver package using npm or yarn package managers\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/AnimationPlugin/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\n\nnpm install @gluestack-style/animation-resolver\n\n# using yarn\n\nyarn add @gluestack-style/animation-resolver\n```\n\n----------------------------------------\n\nTITLE: Adding Local Font Files in Next.js with CSS\nDESCRIPTION: CSS code to define custom font families using local font files in a Next.js application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Fonts/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'inter';\n  src: url('/assets/inter/Inter-Regular.ttf');\n  font-weight: normal;\n  font-style: normal;\n}\n@font-face {\n  font-family: 'inter';\n  src: url('/asset/inter/Inter-Bold.ttf');\n  font-weight: bold;\n  font-style: normal;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Changes in Markdown\nDESCRIPTION: Markdown changelog entry detailing the patch changes for version 0.1.0 of @gluestack/ui, noting the addition of accessible styled UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack/ui\n\n## 0.1.0\n\n### Patch Changes\n\n- Added accessible styled awesome ui components\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Configuration\nDESCRIPTION: Configures the Storybook documentation page meta information for the Starter Kit section.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/starter-kit/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"with-nativewind/Apps/Starter Kit\" />\n```\n\n----------------------------------------\n\nTITLE: Building React Native Web Storybook\nDESCRIPTION: This command builds the React Native Web Storybook.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-v7/README.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn build-storybook\n```\n\n----------------------------------------\n\nTITLE: Importing global CSS for Tailwind in React\nDESCRIPTION: Example of importing the global CSS file containing Tailwind directives in a React component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GluestackUIProvider } from '@/components/ui/gluestack-ui-provider';\nimport '@/global.css';\n\nexport default function App() {\n  return <GluestackUIProvider>{/* Your code */}</GluestackUIProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic InputAccessoryView Implementation\nDESCRIPTION: Example showing the basic implementation of the InputAccessoryView component with default export.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/InputAcessoryView/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <InputAccessoryView />;\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for @react-native-aria/listbox v0.2.9\nDESCRIPTION: Version 0.2.9 patch update that includes dependency updates for @react-native-aria/utils and @react-native-aria/interactions packages.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/listbox/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.9\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.12\n  - @react-native-aria/interactions@0.2.16\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Changelog entries documenting version updates from 0.1.1 to 0.1.19, including build system changes, typing improvements, and new features.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/form-control/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/form-control\n\n## 0.1.19\n\n### Patch Changes\n\n- Feat: Change in build moving from bob build to tsc build\n- Updated dependencies\n  - @gluestack-ui/utils@0.1.14\n\n## 0.1.18\n\n### Patch Changes\n\n- fix: ref typing for all the components\n\n## 0.1.17\n\n### Patch Changes\n\n- fix: ref typing issue\n\n## 0.1.16\n\n### Patch Changes\n\n- Feature\n  Added Support of data-state-* props\n\n## 0.1.10\n\n### Patch Changes\n\n- Changed component APIs from dot notation to normal\n\n## 0.1.9\n\n### Patch Changes\n\n- typescript fixes\n\n## 0.1.8\n\n### Patch Changes\n\n- included path links in compilerOptions in tsconfig file\n- Updated dependencies\n  - @gluestack-ui/utils@0.1.5\n\n## 0.1.7\n\n### Patch Changes\n\n- feat: migration of hook to react native aria\n\n## 0.1.6\n\n### Patch Changes\n\n- added readme, keyword, warning fixes\n\n## 0.1.5\n\n### Patch Changes\n\n- added readme, keyword, warning fixes\n\n## 0.1.4\n\n### Patch Changes\n\n- readme added\n\n## 0.1.3\n\n### Patch Changes\n\n- fix forwardref warning issues\n\n## 0.1.2\n\n### Patch Changes\n\n- Added typings\n\n## 0.1.1\n\n### Patch Changes\n\n- Exported useFormControlContext hook\n```\n\n----------------------------------------\n\nTITLE: Installing Default Theme with Yarn\nDESCRIPTION: Command to install the optional default theme configuration package using Yarn\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-rn/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-ui/config@latest\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for select component\nDESCRIPTION: Markdown formatted changelog detailing version history from 0.1.1 to 0.1.31, including dependency updates, bug fixes, and feature additions for the select component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/select/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/select\n\n## 0.1.31\n\n### Patch Changes\n\n- Updated dependencies\n  - @gluestack-ui/hooks@0.1.13\n\n## 0.1.30\n\n### Patch Changes\n\n- Feat: Change in build moving from bob build to tsc build\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.19\n  - @gluestack-ui/hooks@0.1.12\n  - @gluestack-ui/utils@0.1.14\n\n## 0.1.29\n\n### Patch Changes\n\n- fix: default Value in Select\n- 6f212ce: fix: default value in Select\n\n## 0.1.28\n\n### Patch Changes\n\n- feat: added textStyle for native\n\n## 0.1.27\n\n### Patch Changes\n\n- fix: ref typing for all the components\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.18\n```\n\n----------------------------------------\n\nTITLE: Importing FormControl Component in React\nDESCRIPTION: This code snippet shows how to import the FormControl component from the @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { FormControl } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Changelog for @react-native-aria/tooltip version 0.2.8\nDESCRIPTION: Documents version 0.2.8 patch changes, which only includes an update to the @react-native-aria/interactions dependency.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/tooltip/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.8\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/form-control Package\nDESCRIPTION: Commands for installing the @gluestack-ui/form-control package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/form-control/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/form-control\n\n# or\n\n$ npm i @gluestack-ui/form-control\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Grid for gluestack-ui Documentation\nDESCRIPTION: This JSX code renders a Wrapper component containing a Grid component, which likely displays all available components in gluestack-ui in a grid layout.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AllComponents/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Wrapper>\n  <Grid />\n</Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Starting Ondevice Storybook\nDESCRIPTION: Command to start the Storybook environment on a device. This runs the Expo project with Storybook for mobile development.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Media Query Styling Migration using @ Syntax\nDESCRIPTION: Converting media query styles using @ syntax from styled props to utility classes in GlueStack UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@gluestack-ui/themed';\n\nexport default function App() {\n  return (\n    <Box sx={{ '@sm': { bg: '$background100' } }} bg=\"$background500\">\n      Simple Box\n    </Box>\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@/components/ui/box';\n\nexport default function App() {\n  return (\n    <Box className=\"sm:bg-background-100 bg-background-500\">Simple Box</Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gluestack-style and dependencies\nDESCRIPTION: Command to install the @gluestack-style/react package and its required peer dependencies using either yarn or npm.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/react/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-style/react react-native-web react-native-svg\n\n# or\n\n$ npm i @gluestack-style/react react-native-web react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta for Default Tokens Documentation\nDESCRIPTION: This code sets the Storybook metadata for the Default Tokens documentation page in gluestack-ui v2.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/default-tokens/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"with-nativewind/Home/Theme Configuration/Default Tokens\" />\n```\n\n----------------------------------------\n\nTITLE: Actionsheet Component Import Example\nDESCRIPTION: Example showing how to import Actionsheet component and its subcomponents\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Actionsheet/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Actionsheet,\n  ActionsheetBackdrop,\n  ActionsheetContent,\n  ActionsheetDragIndicator,\n  ActionsheetDragIndicatorWrapper,\n  ActionsheetItem,\n  ActionsheetItemText,\n  ActionsheetIcon,\n} from '@/components/ui/actionsheet';\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-aria/radio Package with Yarn\nDESCRIPTION: Command to install the @react-native-aria/radio package using Yarn package manager as a project dependency.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/radio/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/radio\n```\n\n----------------------------------------\n\nTITLE: Version 0.2.11 Changelog in Markdown\nDESCRIPTION: Documents patch changes for version 0.2.11, noting updates to the @react-native-aria/utils dependency.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/slider/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.11\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.11\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Utils with Yarn\nDESCRIPTION: Command to install the @react-native-aria/utils package using the Yarn package manager. This package provides utility functions for React Native Aria implementations.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/utils/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/utils\n```\n\n----------------------------------------\n\nTITLE: Styled Popover Props Table\nDESCRIPTION: JSX table structure displaying themed Popover component props with size options\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Overlay/Popover/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<AppProvider>\n  <TableContainer>\n    <Table>\n      <Table.THead>\n        <Table.TR>\n          <Table.TH>\n            <Table.TText>Name</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Value</Table.TText>\n          </Table.TH>\n          <Table.TH>\n            <Table.TText>Default</Table.TText>\n          </Table.TH>\n        </Table.TR>\n      </Table.THead>\n      <Table.TBody>\n        <Table.TR>\n          <Table.TD>\n            <Table.TText>\n              <InlineCode>size</InlineCode>\n            </Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>xs | sm | md | lg | full</Table.TText>\n          </Table.TD>\n          <Table.TD>\n            <Table.TText>md</Table.TText>\n          </Table.TD>\n        </Table.TR>\n      </Table.TBody>\n    </Table>\n  </TableContainer>\n</AppProvider>\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title\nDESCRIPTION: Meta component configuration for Storybook documentation setting the page title path.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/performance/overview/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"ui/Home/Performance/Overview\" />\n```\n\n----------------------------------------\n\nTITLE: Navigating to the UI Directory\nDESCRIPTION: Command to navigate to the gluestack-ui directory after cloning the repository. This is a necessary step before adding remotes and installing dependencies.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd gluestack-ui\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Stories\nDESCRIPTION: This command updates the Storybook stories once.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-v7/README.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn storybook-generate\n```\n\n----------------------------------------\n\nTITLE: Manual Checkbox Installation\nDESCRIPTION: Command to manually install the checkbox component and its dependencies.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Checkbox/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/checkbox lucide-react-native\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for @react-native-aria/listbox v0.2.8\nDESCRIPTION: Version 0.2.8 patch update that includes a dependency update for @react-native-aria/interactions package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/listbox/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.8\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n```\n\n----------------------------------------\n\nTITLE: Version 0.1.29 Changelog Entry\nDESCRIPTION: Documents dependency updates for version 0.1.29\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/link/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.29\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.16\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component Dependencies Manually\nDESCRIPTION: This command installs the necessary dependencies for the Tooltip component when performing a manual installation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/tooltip @legendapp/motion\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.2.13\nDESCRIPTION: Documents changes in version 0.2.13, noting updates to the interactions dependency package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/menu/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.13\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.14\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Labels\nDESCRIPTION: Example of adding accessibility labels to the ColorPicker component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/resources/third-party-library-integrations/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker as ColorPickerComponent } from 'react-native-color-picker';\n\nexport default ColorPicker = (props) => {\n  return <ColorPickerComponent {...props} accessibilityLabel={'your-label'} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack Style Moti Animation Driver via Package Manager\nDESCRIPTION: Commands to install the @gluestack-style/moti-animation-driver package using either Yarn or NPM package managers. This package is required to implement Moti animations in GlueStack UI applications.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/animation-moti-driver/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-style/moti-animation-driver\n\n# or\n\n$ npm i @gluestack-style/moti-animation-driver\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-style/toast Package via npm or yarn\nDESCRIPTION: Commands to install the @gluestack-style/toast package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/toast/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @gluestack-ui/toast\n\n# or\n\n$ npm i @gluestack-ui/toast\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with StyledJsxRegistry\nDESCRIPTION: Sets up the root layout component that wraps the application with StyledJsxRegistry and GluestackUIProvider for proper SSR style handling.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport { GluestackUIProvider } from \"@/components/ui/gluestack-ui-provider\";\nconst inter = Inter({ subsets: [\"latin\"] });\nimport StyledJsxRegistry from \"./registry\";\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className} style={{ display: \"flex\" }}>\n        <StyledJsxRegistry>\n          <GluestackUIProvider mode=\"light\">{children}</GluestackUIProvider>\n        </StyledJsxRegistry>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Textarea Component Version History Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history of the textarea component, including changes related to build process, typing improvements, API updates, and bug fixes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/textarea/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/textarea\n\n## 0.1.25\n\n### Patch Changes\n\n- fix: updated dependencies to include @react-native-aria/interactions\n\n## 0.1.24\n\n### Patch Changes\n\n- Feat: Change in build moving from bob build to tsc build\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.19\n  - @gluestack-ui/utils@0.1.14\n\n## 0.1.23\n\n### Patch Changes\n\n- fix: ref typing for all the components\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.18\n\n## 0.1.22\n\n### Patch Changes\n\n- - `Input` removed `aria-selected` on web. [PR](https://github.com/gluestack/gluestack-ui/pull/2089) by [Mookiies](https://github.com/Mookiies).\n  - `InputSlot` added `focusOnPress` prop for more control. [Commit](https://github.com/gluestack/gluestack-ui/commit/6cb3f1cc3e6e26b417f58f53cd8ef6f393f96138).\n  - `Utils` improved `composeEventHandlers` function. [PR](https://github.com/gluestack/gluestack-ui/pull/2216) by [Mookiies](https://github.com/Mookiies).\n- Updated dependencies\n  - @gluestack-ui/utils@0.1.13\n\n## 0.1.21\n\n### Patch Changes\n\n- fix: ref typing issue\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.17\n\n## 0.1.20\n\n### Patch Changes\n\n- Feature\n  Added Support of data-state-* props\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.16\n\n## 0.1.13\n\n### Patch Changes\n\n- fix: removing unwanted react native svg deps\n- Updated dependencies\n  - @gluestack-ui/utils@0.1.9\n\n## 0.1.12\n\n### Patch Changes\n\n- Changed component APIs from dot notation to normal\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.10\n\n## 0.1.11\n\n### Patch Changes\n\n- component typings updated\n\n## 0.1.10\n\n### Patch Changes\n\n- included path links in compilerOptions in tsconfig file\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.8\n  - @gluestack-ui/utils@0.1.5\n\n## 0.1.9\n\n### Patch Changes\n\n- feat: migration of hook to react native aria\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.7\n\n## 0.1.8\n\n### Patch Changes\n\n- changed textarea naming and select placeholder fixes\n\n## 0.1.7\n\n### Patch Changes\n\n- added readme, keyword, warning fixes\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.6\n\n## 0.1.6\n\n### Patch Changes\n\n- added readme, keyword, warning fixes\n- Updated dependencies\n  - @gluestack-ui/form-control@0.1.5\n\n## 0.1.5\n\n### Patch Changes\n\n- removed variant typing\n\n## 0.1.4\n\n### Patch Changes\n\n- fix forwardref warning issues\n\n## 0.1.3\n\n### Patch Changes\n\n- added typings\n\n## 0.1.2\n\n### Patch Changes\n\n- Styling fixes\n- Form control support\n- Docs content update\n\n## 0.1.1\n\n### Patch Changes\n\n- Fixed styles for dark and light mode and scroll issues on native\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.2.14\nDESCRIPTION: Documents changes in version 0.2.14, noting updates to the interactions dependency package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/menu/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.14\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n```\n\n----------------------------------------\n\nTITLE: Importing React Storybook Components and Custom Components\nDESCRIPTION: Demonstrates the import statements for Storybook addon components and custom-built responsive components for the Kitchensink app documentation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/kitchensink-app/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\nimport Responsiveness from '../../extra-components/nativewind/Responsive';\nimport { kitchensink } from '../../extra-components/nativewind/appConfig';\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/config package using yarn or npm\nDESCRIPTION: Command-line instructions for installing the @gluestack-ui/config package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/config/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/config\n\n# or\n\n$ npm i @gluestack-ui/config\n```\n\n----------------------------------------\n\nTITLE: Markdown Header with Meta Information\nDESCRIPTION: Frontmatter configuration for the documentation page defining title and description for gluestack-style performance documentation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/Performance/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Performance | gluestack-style\ndescription: Know about how performant is gluestack-style. It uses a babel plugin for pre-computing styles during the build process, and runtime performance optimizations.\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.2.15\nDESCRIPTION: Documents changes in version 0.2.15, including dependency updates for @react-native-aria utilities, interactions and overlays packages.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/menu/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.15\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.12\n  - @react-native-aria/interactions@0.2.16\n  - @react-native-aria/overlays@0.3.15\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/provider using package managers\nDESCRIPTION: Instructions for installing the @gluestack-ui/provider package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/provider/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/provider\n\n# or\n\n$ npm i @gluestack-ui/provider\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo Project with Storybook Template\nDESCRIPTION: Command to create a new Expo project using the Storybook template, which sets up the foundation for a Gluestack-UI project with Storybook integration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexpo init --template expo-template-storybook AwesomeStorybook\n```\n\n----------------------------------------\n\nTITLE: Defining AccordionItem Props in React Native/TypeScript\nDESCRIPTION: This snippet defines the props for the AccordionItem component, including value and isDisabled.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Disclosure/Accordion/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvalue: string\nisDisabled: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining AccordionItem Component Props in TypeScript/JSX\nDESCRIPTION: This snippet defines the props for the AccordionItem component, including value and isDisabled.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Accordion/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype AccordionItemProps = {\n  value: string;\n  isDisabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog for @react-native-aria/tooltip version 0.2.6\nDESCRIPTION: Shows version 0.2.6 changes which includes a fix for warnings related to deprecated props and updates to both @react-native-aria/utils and @react-native-aria/interactions dependencies.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/tooltip/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.6\n\n### Patch Changes\n\n- fix: warnings of deprecated props\n- Updated dependencies\n  - @react-native-aria/utils@0.2.11\n  - @react-native-aria/interactions@0.2.13\n```\n\n----------------------------------------\n\nTITLE: Adding Main Repository Remote for Unstyled Components\nDESCRIPTION: Command to add the main gluestack-ui-unstyled repository as a remote named 'origin'. This allows you to fetch updates from the official repository while working on your fork.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_10\n\nLANGUAGE: git\nCODE:\n```\ngit remote add origin git@github.com:gluestack/gluestack-ui-unstyled.git\n```\n\n----------------------------------------\n\nTITLE: Ejecting GlueStack UI Components\nDESCRIPTION: Command to eject theme components into project directory for customization\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/theme-configuration/customizing-theme/EjectLibrary/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui-scripts eject\n```\n\n----------------------------------------\n\nTITLE: Running Storybook for iOS development\nDESCRIPTION: Command to launch Storybook on iOS simulator for mobile component testing and development.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/building-design-systems/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook in JSX\nDESCRIPTION: This code snippet imports the Meta component from Storybook's addon-docs package. It's used to set metadata for the Storybook documentation page.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tabs/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.2.10\nDESCRIPTION: Documents patch changes and dependency updates for version 0.2.10 of @react-native-aria/toggle package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/toggle/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.10\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for the Changelog Page\nDESCRIPTION: Imports necessary components from Storybook's addon-docs to create documentation. The Canvas, Meta, and Story components are imported for building the documentation interface.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/more/Changelog/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.2.7\nDESCRIPTION: Documents version 0.2.7 patch changes including fixes for deprecated prop warnings and dependency updates\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/disclosure/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.7\n\n### Patch Changes\n\n- fix: warnings of deprecated props\n- Updated dependencies\n  - @react-native-aria/utils@0.2.11\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Version 0.0.16\nDESCRIPTION: Changelog entry documenting dependency updates for multiple packages including react-native-aria/interactions and gluestack-ui/utils.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image-viewer/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.16\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n  - @gluestack-ui/utils@0.1.15\n```\n\n----------------------------------------\n\nTITLE: Package Version History\nDESCRIPTION: Markdown formatted changelog entries tracking version updates and dependency changes across multiple releases of @gluestack-ui/themed and its component dependencies.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/themed/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/themed\n\n## 1.1.73\n\n### Patch Changes\n\n- Updated dependencies\n- Updated dependencies\n  - @gluestack-ui/actionsheet@0.2.53\n  - @gluestack-ui/textarea@0.1.25\n```\n\n----------------------------------------\n\nTITLE: FormControl Import Statement\nDESCRIPTION: Import statement for using FormControl component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/FormControl/index.nw.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormControl } from '@/components/ui/form-control';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Configuration\nDESCRIPTION: Demonstrates the imports required for setting up Storybook documentation with gluestack-ui, including Canvas, Meta, and Story components along with custom configuration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/storybook-app/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\nimport Responsiveness from '../../extra-components/nativewind/Responsive';\nimport { appStoryConfig } from '../../extra-components/nativewind/appConfig';\n\n<Meta title=\"with-nativewind/Apps/Storybook App\" />\n\n<Responsiveness {...appStoryConfig} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo Project with Storybook Template\nDESCRIPTION: Command to create a new Expo project using the Storybook template. This sets up the initial project structure with Storybook integration.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexpo init --template expo-template-storybook AwesomeStorybook\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.2.10\nDESCRIPTION: Documents changes in version 0.2.10, including fixes for closeOnSelect functionality issues.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/menu/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.10\n\n### Patch Changes\n\n- fix: `closeOnSelect` issues\n```\n\n----------------------------------------\n\nTITLE: Importing Wrapper Component in JSX\nDESCRIPTION: This code imports a Wrapper component from a local themed components directory. The Wrapper component is likely used to provide consistent styling or layout for the documentation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tabs/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Wrapper from '../../core-components/themed/Wrapper';\n```\n\n----------------------------------------\n\nTITLE: Pin Input Package Changelog Entries\nDESCRIPTION: Markdown changelog entries documenting version updates, dependency changes, and patch releases for the @gluestack-ui/pin-input package\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/pin-input/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/pin-input\n\n## 0.0.14\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.16\n\n## 0.0.13\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n  - @gluestack-ui/utils@0.1.15\n\n## 0.0.12\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.14\n\n## 0.0.11\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.13\n\n## 0.0.10\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.13\n\n## 0.0.9\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.3.0\n\n## 0.0.8\n\n### Patch Changes\n\n- chore: removed extra dependency for clipboard\n\n## 0.0.7\n\n### Patch Changes\n\n- updated readme\n\n## 0.0.6\n\n### Patch Changes\n\n- updated readme\n\n## 0.0.5\n\n### Patch Changes\n\n- fixed the prop typings\n\n## 0.0.4\n\n### Patch Changes\n\n- fixed the prop typings\n\n## 0.0.3\n\n### Patch Changes\n\n- fixed the prop typings\n\n## 0.0.2\n\n### Patch Changes\n\n- V 0.0.2\n\n## 0.0.1\n\n### Patch Changes\n\n- initial release\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Addons in Markdown\nDESCRIPTION: This code snippet imports necessary components from the Storybook addon-docs package for use in the documentation.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/hooks/react-native-aria/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Importing InputAccessoryView Component\nDESCRIPTION: Code snippet showing how to import the InputAccessoryView component from @gluestack-ui/themed package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/InputAcessoryView/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { InputAccessoryView } from '@gluestack-ui/themed';\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for @react-native-aria/listbox v0.2.6\nDESCRIPTION: Version 0.2.6 patch update that fixes warnings of deprecated props and updates dependencies for @react-native-aria/utils and @react-native-aria/interactions packages.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/listbox/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.6\n\n### Patch Changes\n\n- fix: warnings of deprecated props\n- Updated dependencies\n  - @react-native-aria/utils@0.2.11\n  - @react-native-aria/interactions@0.2.13\n```\n\n----------------------------------------\n\nTITLE: Creating New gluestack Project with npx\nDESCRIPTION: Command to create a new Next.js project with gluestack-ui pre-configured\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create gluestack\n```\n\n----------------------------------------\n\nTITLE: Installing expo-font package in Expo\nDESCRIPTION: Command to install the expo-font package which is required for loading fonts in Expo applications.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/advanced/Fonts/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-font\n```\n\n----------------------------------------\n\nTITLE: Media Query Styling Migration using $ Syntax\nDESCRIPTION: Converting media query styles using $ syntax from styled props to utility classes in GlueStack UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@gluestack-ui/themed';\n\nexport default function App() {\n  return (\n    <Box $sm={{ bg: '$background100' }} bg=\"$background500\">\n      Simple Box\n    </Box>\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from '@/components/ui/box';\n\nexport default function App() {\n  return (\n    <Box className=\"sm:bg-background-100 bg-background-500\">Simple Box</Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog for @react-native-aria/tooltip version 0.2.7\nDESCRIPTION: Records version 0.2.7 patch changes, which only includes an update to the @react-native-aria/interactions dependency.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/tooltip/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.7\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.14\n```\n\n----------------------------------------\n\nTITLE: Installing Fab Component Dependencies\nDESCRIPTION: Manual installation of the required npm package for the Fab component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/fab\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Properties Table in JSX\nDESCRIPTION: This code snippet renders a table displaying the properties, types, default values, and descriptions for the Tooltip component. It uses custom Table components to structure the information.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tooltip/index.themed.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<TableContainer>\n  <Table>\n    <Table.THead>\n      <Table.TR>\n        <Table.TH>\n          <Table.TText>Prop</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Type</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Default</Table.TText>\n        </Table.TH>\n        <Table.TH>\n          <Table.TText>Description</Table.TText>\n        </Table.TH>\n      </Table.TR>\n    </Table.THead>\n    <Table.TBody>\n      {/* Table rows with prop details */}\n    </Table.TBody>\n  </Table>\n</TableContainer>\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/textarea Package\nDESCRIPTION: Shows how to install the @gluestack-ui/textarea package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/textarea/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/textarea\n\n# or\n\n$ npm i @gluestack-ui/textarea\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.2.8\nDESCRIPTION: Documents version 0.2.8 patch changes including dependency updates to @react-native-aria/utils\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/disclosure/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.8\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.12\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of InputAccessoryView Component in React Native\nDESCRIPTION: Demonstrates the basic structure and usage of the InputAccessoryView component in a React Native application.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/react-native-components/InputAcessoryView/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <InputAccessoryView />;\n```\n\n----------------------------------------\n\nTITLE: Meta Configuration for Storybook Documentation\nDESCRIPTION: Storybook Meta component configuration defining the documentation page title.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/apps/todo-app/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"with-nativewind/Apps/Todo App\" />\n```\n\n----------------------------------------\n\nTITLE: Changelog for @react-native-aria/tooltip version 0.2.9\nDESCRIPTION: Lists the changes in version 0.2.9, which includes updates to the @react-native-aria/utils and @react-native-aria/interactions dependencies.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/tooltip/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.9\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.12\n  - @react-native-aria/interactions@0.2.16\n```\n\n----------------------------------------\n\nTITLE: Changelog for @react-native-aria/tooltip version 0.2.5\nDESCRIPTION: Documents version 0.2.5 patch changes, which only includes an update to the @react-native-aria/interactions dependency.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/tooltip/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.5\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.12\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.2.8\nDESCRIPTION: Documents patch changes and dependency updates for version 0.2.8 of @react-native-aria/toggle package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/toggle/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.8\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.11\n  - @react-native-aria/interactions@0.2.13\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Radio Component\nDESCRIPTION: Markdown formatted changelog entries detailing version updates and changes for the @gluestack-ui/radio package, including dependency updates, bug fixes, and feature additions.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/radio/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/radio\n\n## 0.1.40\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.16\n  - @react-native-aria/radio@0.2.13\n\n## 0.1.39\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n  - @gluestack-ui/utils@0.1.15\n  - @react-native-aria/radio@0.2.12\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title in JSX\nDESCRIPTION: This code uses the Meta component to set the title for the Storybook documentation page. The title is set to 'common/components/Tabs', indicating this documentation is for the Tabs component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Tabs/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"common/components/Tabs\" />\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.15\nDESCRIPTION: Documents dependency update to @react-native-aria/utils package version 0.2.12\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/overlays/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.15\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.12\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.14\nDESCRIPTION: Notes the release of overlay feature functionality\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/overlays/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.14\n\n### Patch Changes\n\n- feat: overlay release\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook in JSX\nDESCRIPTION: This snippet imports the Meta component from Storybook's addon-docs and sets the title for the Storybook page. It's used for documentation purposes in a React environment.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/tutorials/building-ecommerce-app/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport VadimStream from '../../../extra-components/nativewind/VadimStream';\n\n<Meta title=\"with-nativewind/Guides/Tutorials/Building Ecommerce App\" />\n```\n\n----------------------------------------\n\nTITLE: Installing the Babel Plugin for gluestack-style\nDESCRIPTION: Command to install the @gluestack-style/babel-plugin-styled-resolver package which transpiles themed component styles at build time.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/production-optimizations/babel-plugin/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gluestack-style/babel-plugin-styled-resolver\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Toggle Package with Yarn\nDESCRIPTION: Command to install the @react-native-aria/toggle package using yarn package manager. This package provides toggle functionality for React Native applications within the gluestack-ui ecosystem.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/toggle/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/toggle\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.12\nDESCRIPTION: Records update to @react-native-aria/utils dependency version 0.2.11\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/overlays/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.12\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.11\n```\n\n----------------------------------------\n\nTITLE: Modal Component Changelog\nDESCRIPTION: Changelog entries documenting version changes, dependency updates, and feature additions for the Modal component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/modal/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/modal\n\n## 0.1.41\n\n### Patch Changes\n\n- Updated dependencies\n  - @gluestack-ui/overlay@0.1.22\n  - @react-native-aria/dialog@0.0.5\n  - @react-native-aria/interactions@0.2.16\n  - @react-native-aria/overlays@0.3.15\n\n## 0.1.40\n\n### Patch Changes\n\n- Feat : React-19 support\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n  - @gluestack-ui/utils@0.1.15\n  - @gluestack-ui/overlay@0.1.21\n\n## 0.1.39\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.14\n  - @gluestack-ui/hooks@0.1.13\n  - @gluestack-ui/overlay@0.1.20\n\n## 0.1.38\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.13\n  - @gluestack-ui/overlay@0.1.19\n\n## 0.1.37\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.13\n  - @gluestack-ui/overlay@0.1.18\n\n## 0.1.36\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.3.0\n  - @gluestack-ui/overlay@0.1.17\n\n## 0.1.35\n\n### Patch Changes\n\n- Feat: Change in build moving from bob build to tsc build\n- Updated dependencies\n  - @gluestack-ui/overlay@0.1.16\n  - @gluestack-ui/hooks@0.1.12\n  - @gluestack-ui/utils@0.1.14\n\n## 0.1.34\n\n### Patch Changes\n\n- fix: ref typing for all the components\n\n## 0.1.33\n\n### Patch Changes\n\n- fix: added focusScope prop\n\n## 0.1.32\n\n### Patch Changes\n\n- fix: final focusref\n\n## 0.1.31\n\n### Patch Changes\n\n- @react-native-aria/dialog@0.0.4\n- @react-native-aria/interactions@0.2.13\n- @react-native-aria/overlays@0.3.12\n- @gluestack-ui/overlay@0.1.14\n\n## 0.1.30\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.12\n  - @gluestack-ui/overlay@0.1.13\n\n## 0.1.29\n\n### Patch Changes\n\n- Feature\n  Added Support of data-state-* props\n\n## 0.1.28\n\n### Patch Changes\n\n- Updated dependencies\n  - @gluestack-ui/hooks@0.1.11\n\n## 0.1.20\n\n### Patch Changes\n\n- Fixed overlay components to take overlay\n\n## 0.1.19\n\n### Patch Changes\n\n- fix: default value of _experimentalOverlay to false\n\n## 0.1.18\n\n### Patch Changes\n\n- Changed component APIs from dot notation to normal\n\n## 0.1.17\n\n### Patch Changes\n\n- 997b0d64: Added experimentalOverlay flag for internal usecase\n- experimental props for internal usecase\n\n## 0.1.16\n\n### Patch Changes\n\n- component typings updated\n\n## 0.1.15\n\n### Patch Changes\n\n- included path links in compilerOptions in tsconfig file\n- Updated dependencies\n  - @gluestack-ui/overlay@0.1.7\n  - @gluestack-ui/hooks@0.1.2\n  - @gluestack-ui/utils@0.1.5\n\n## 0.1.14\n\n### Patch Changes\n\n- upgraded react-native-aria/overlays version\n- Updated dependencies\n  - @gluestack-ui/overlay@0.1.6\n\n## 0.1.13\n\n### Patch Changes\n\n- feat: migration of hook to react native aria\n- Updated dependencies\n  - @gluestack-ui/overlay@0.1.5\n\n## 0.1.12\n\n### Patch Changes\n\n- update readme,description and keywords\n\n## 0.1.11\n\n### Patch Changes\n\n- design and native fixes\n\n## 0.1.10\n\n### Patch Changes\n\n- fix forwardref warning issues\n\n## 0.1.9\n\n### Patch Changes\n\n- Removed prop typing\n\n## 0.1.8\n\n### Patch Changes\n\n- Fixed styling and prop fixes\n\n## 0.1.7\n\n### Patch Changes\n\n- fix ref warning for modal\n\n## 0.1.6\n\n### Patch Changes\n\n- added animation for modal and backdrop\n```\n\n----------------------------------------\n\nTITLE: Installing @react-native-aria/checkbox Package\nDESCRIPTION: Command to install the @react-native-aria/checkbox package using yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/checkbox/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/checkbox\n```\n\n----------------------------------------\n\nTITLE: Customizing and Using the Radio Component\nDESCRIPTION: Comprehensive example showing how to import styled components, create a customized Radio component, and use it in a React application with all its subcomponents.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/radio/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import the styles\nimport {\n  Root,\n  Indicator,\n  Icon,\n  Label,\n  Group,\n} from '../components/core/radio/styled-components';\n\n// import the createRadio function\nimport { createRadio } from '@gluestack-ui/radio';\n\n// Understanding the API\nconst Radio = createRadio({\n  Root,\n  Indicator,\n  Icon,\n  Label,\n  Group,\n});\n\n// Using the radio component\nexport default () => (\n  <RadioGroup>\n    <Radio>\n      <RadioIndicator>\n        <RadioIcon as={CircleIcon} />\n      </RadioIndicator>\n      <RadioLabel />\n    </Radio>\n  </RadioGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining MenuItem Component Props in TypeScript\nDESCRIPTION: Defines the props available for the MenuItem component, which inherits from React Native's Pressable component. Currently only shows the closeOnSelect property.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.nw.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncloseOnSelect: boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring tva Function for Custom Font Size\nDESCRIPTION: This snippet demonstrates how to configure the tva (tailwind variant authority) function to work with a custom font size. It shows the configuration for the Text component, including the addition of a custom class group for font size.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/customizing-theme/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Text style props are from here https://gluestack.io/ui/docs/components/text (step 3, the one from styles.tsx)\nconst textStyleProps = {}\n\n//ref @see https://www.tailwind-variants.org/docs/api-reference#config-optional\nconst config = {\n  twMerge: true,\n  twMergeConfig: {\n    classGroups: {\n      'font-size': [\n        {\n          text: ['custom-heading-xl'],\n        },\n      ],\n    },\n  },\n};\n\nexport const textStyle = tva(...textStyleProps, config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for gluestack-ui Components Overview (JSX)\nDESCRIPTION: Sets up the Storybook metadata for the All Components overview page, defining its location in the documentation hierarchy under ui/Home/Overview/All Components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/overview/AllComponents/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"ui/Home/Overview/All Components\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.2.7\nDESCRIPTION: Documents patch changes and dependency updates for version 0.2.7 of @react-native-aria/toggle package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/toggle/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.7\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.12\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Aria Utils with Yarn\nDESCRIPTION: Command to install @react-native-aria/utils package using the Yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/listbox/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @react-native-aria/utils\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu with Tag in React\nDESCRIPTION: Example of a menu component with badge tags and separators. Uses custom button trigger and includes menu items with various labels and a success badge.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Menu/index.nw.stories.mdx#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge, BadgeText } from \"@/components/ui/badge\";\nimport { Button, ButtonIcon } from \"@/components/ui/button\";\nimport { Menu, MenuItem, MenuItemLabel, MenuSeparator } from \"@/components/ui/menu\";\nimport { MenuIcon } from \"@/components/ui/icon\";\n\nfunction Example() {\n  return (\n    <Menu\n        offset={5}\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps} size=\"sm\">\n              <ButtonIcon as={MenuIcon} />\n            </Button>\n          );\n        }}\n      >\n        <MenuItem\n          key=\"Membership\"\n          textValue=\"Membership\"\n          className=\"p-2 justify-between\"\n        >\n          <MenuItemLabel size=\"sm\">Membership</MenuItemLabel>\n          <Badge action=\"success\" className=\"rounded-full\">\n            <BadgeText className=\"text-2xs capitalize\">Pro</BadgeText>\n          </Badge>\n        </MenuItem>\n        <MenuItem key=\"Orders\" textValue=\"Orders\" className=\"p-2\">\n          <MenuItemLabel size=\"sm\">Orders</MenuItemLabel>\n        </MenuItem>\n        <MenuItem\n          key=\"Address Book\"\n          textValue=\"Address Book\"\n          className=\"p-2\"\n        >\n          <MenuItemLabel size=\"sm\">Address Book</MenuItemLabel>\n        </MenuItem>\n        <MenuSeparator />\n        <MenuItem key=\"Earn & Redeem\" textValue=\"Earn & Redeem\" className=\"p-2\">\n          <MenuItemLabel size=\"sm\">Earn & Redeem</MenuItemLabel>\n        </MenuItem>\n        <MenuItem key=\"Coupons\" textValue=\"Coupons\" className=\"p-2\">\n          <MenuItemLabel size=\"sm\">Coupons</MenuItemLabel>\n        </MenuItem>\n        <MenuItem\n          key=\"Help Center\"\n          textValue=\"Help Center\"\n          className=\"p-2\"\n        >\n          <MenuItemLabel size=\"sm\">Help Center</MenuItemLabel>\n        </MenuItem>\n         <MenuSeparator />\n        <MenuItem key=\"Logout\" textValue=\"Logout\" className=\"p-2\">\n          <MenuItemLabel size=\"sm\">Logout</MenuItemLabel>\n        </MenuItem>\n      </Menu>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.7\nDESCRIPTION: Documents patch version 0.2.7 with dependency update to @react-native-aria/utils@0.2.12\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/combobox/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.7\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.12\n```\n\n----------------------------------------\n\nTITLE: Testing Event Propagation and Bubbling in React Native Web\nDESCRIPTION: This snippet tests various aspects of event propagation between parent and child components, verifying that capture and bubble phases work as expected. It uses Jest mocks to track event sequences and verify proper call order.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/Installation/index.nw.stories.mdx#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('listeners are specific to each event handle', () => {\n  const log = [];\n  const targetRef = React.createRef();\n  const childRef = React.createRef();\n  const listener = jest.fn(e => {\n    log.push(['bubble', 'target']);\n  });\n  const listenerAlt = jest.fn(e => {\n    log.push(['bubble', 'target-alt']);\n  });\n  const listenerCapture = jest.fn(e => {\n    log.push(['capture', 'target']);\n  });\n  const listenerCaptureAlt = jest.fn(e => {\n    log.push(['capture', 'target-alt']);\n  });\n  declare function Component(): any;\n  render(<Component />);\n  const child = createEventTarget(childRef.current);\n  act(() => {\n    child.click();\n  });\n  expect(listenerCapture).toBeCalledTimes(1);\n  expect(listenerCaptureAlt).toBeCalledTimes(1);\n  expect(listener).toBeCalledTimes(1);\n  expect(listenerAlt).toBeCalledTimes(1);\n  expect(log).toEqual([['capture', 'target'], ['capture', 'target-alt'], ['bubble', 'target'], ['bubble', 'target-alt']]);\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Storybook directory\nDESCRIPTION: Command to navigate to the Storybook example directory for interactive component development and testing.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/building-design-systems/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd example/storybook\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/popover Package\nDESCRIPTION: Commands to install the @gluestack-ui/popover package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/popover/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/popover\n\n# or\n\n$ npm i @gluestack-ui/popover\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma Design Frame\nDESCRIPTION: HTML iframe element for embedding a Figma design prototype showing the Icon component specifications. The iframe includes custom styling for border radius and aspect ratio.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/MediaAndIcons/Icon/index.stories.mdx#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  style={{\n    borderRadius: '8px',\n    border: ' 1px solid rgba(0, 0, 0, 0.1)',\n    aspectRatio: 736 / 585,\n  }}\n  src=\"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Fproto%2FNcXOxqKbdnGsLQNex3H76u%2F%25C2%25A0%25F0%259F%2593%259Agluestack-UI-handbook%3Fpage-id%3D6412%253A31332%26type%3Ddesign%26node-id%3D6412-33234%26viewport%3D723%252C127%252C0.03%26t%3DxNCgdoHjEw3Tlb72-1%26scaling%3Dscale-down%26starting-point-node-id%3D6412%253A33234%26mode%3Ddesign\"\n  allowFullScreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Component\nDESCRIPTION: Configures the Storybook documentation page metadata and navigation path.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/Changelog/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"ui/Guides/More/Changelog\" />\n```\n\n----------------------------------------\n\nTITLE: Divider Component Import Statement\nDESCRIPTION: Shows how to import the Divider component in a React Native project.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Divider } from '@/components/ui/divider';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Call-to-Action Box in JSX for Figma UI Kit\nDESCRIPTION: This JSX code renders a call-to-action box promoting the Figma UI Kit. It uses the imported components to create a structured layout with text content and a button linking to the Figma community file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/getting-started/figma-ui-kit/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box className=\"mt-6 m-3 p-4 flex rounded-md border border-[#E6E6E6] dark:border-[#414141] mb-6\">\n  <HStack className=\"sm:items-center sm:justify-between flex-col sm:flex-row\">\n      <Box\n        maxWidth=\"fit-content\"\n        maxHeight=\"fit-content\"\n        className=\"max-w-fit max-h-fit flex-1 text-sm gap-[6px]\"\n      >\n        <Text className=\"text-lg font-semibold dark:text-[#FAFAFA] text-[#171717]\">Try it out now!</Text>\n        <Text className=\"text-sm leading-[22px] max-w-[95%]\">Streamline your design process with our versatile Figma kit. Get access to a rich collection of components, patterns, and assets to create stunning designs effortlessly.</Text>\n      </Box>\n      <a className=\"contents\" href=\"https://www.figma.com/community/file/1358053104938234615\" target=\"__blank\">\n    <Button className=\"gap-2 sm:mt-0 mt-6\">\n      <ButtonText>Figma Kit</ButtonText>\n    </Button>\n    </a>\n  </HStack>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Toast Component Version History Markdown\nDESCRIPTION: Markdown documentation of version changes, bug fixes, and features added to the Toast component, including dependency updates and API changes.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/toast/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/toast\n\n## 1.0.9\n\n### Patch Changes\n\n- Updated dependencies\n  - @gluestack-ui/hooks@0.1.13\n  - @gluestack-ui/overlay@0.1.20\n\n## 1.0.8\n\n### Patch Changes\n\n- Feat: Change in build moving from bob build to tsc build\n- Updated dependencies\n  - @gluestack-ui/transitions@0.1.11\n  - @gluestack-ui/overlay@0.1.16\n  - @gluestack-ui/hooks@0.1.12\n  - @gluestack-ui/utils@0.1.14\n\n## 1.0.7\n\n### Patch Changes\n\n- - Fixed toast animation\n\n## 1.0.6\n\n### Patch Changes\n\n- ### Fixes\n\n  - Fixed `isActive` always returning false by [Andrew M](https://github.com/evelant).\n  - Removed almost all instances of `any`, replaced with actual types by [Andrew M](https://github.com/evelant).\n  - Fixed duplicate toasts when calling `show` with an existing id by [Andrew M](https://github.com/evelant).\n  - Removed unnecessary `@ts-ignore` usages by [Andrew M](https://github.com/evelant).\n\n## 1.0.5\n\n### Patch Changes\n\n- fix: ref typing for all the components\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Version 0.0.11\nDESCRIPTION: Changelog entry documenting fix for image swipe lag in ImageViewer component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image-viewer/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.11\n\n### Patch Changes\n\n- fix: fixed lagging while swipping down image to close ImageViewer\n```\n\n----------------------------------------\n\nTITLE: Handling Descendant Styling Migration in gluestack-ui\nDESCRIPTION: Examples showing how to handle descendant styling when migrating from the styled approach to Tailwind classes. Demonstrates the limitation with descendant styling and provides manual migration steps.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n//Before:\n\nimport { Box, Text } from '@gluestack-ui/themed';\nexport default function App() {\n  return (\n    <Box bg=\"$red500\" sx={{ _text: { color: 'white' } }}>\n      <Text>Simple Text</Text>\n    </Box>\n  );\n}\n\n//After:\n\nimport { Box } from '@/components/ui/box';\nimport { Text } from '@/components/ui/text';\n\n//descendant style will remain as it is.\nexport default function App() {\n  return (\n    <Box className=\"bg-red-500\"\n    //Todo: Change this manually\n    sx={{ _text: { color: 'white' } }}\n    >\n      <Text>Simple Text</Text>\n    </Box>\n  )\n}\n//Manual Changes:\n//Update the descendant styling:\nimport { Box } from '@/components/ui/box';\nimport { Text } from '@/components/ui/text';\n\n//descendant style will remain as it is.\n//color:'white' --> text-white\nexport default function App() {\n  return (\n    <Box className=\"bg-red-500\">\n      <Text className=\"text-white\">Simple Text</Text>\n    </Box>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IStyled Class for gluestack-style Plugin Utils\nDESCRIPTION: This snippet defines the IStyled class used in gluestack-style plugins. It contains properties for aliases, tokens, and references that can be utilized by plugins.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/Introduction/index.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass IStyled {\n  aliases?: any;\n  tokens?: any;\n  ref?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Font Resolution Strategy\nDESCRIPTION: Demonstrates how to create a custom font resolution strategy by providing a mapFonts function to the FontResolver constructor.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/FontsPlugin/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst CustomFontResolver = new FontResolver({\n    mapFonts: (style) => {\n      if (Platform.OS !== 'web') {\n        style.fontFamily =\n          style.fontFamily + '-' + style.fontWeight + '-' + style.fontStyle;\n        style.fontWeight = undefined;\n        style.fontStyle = undefined;\n      }\n    },\n}),\n\nexport const config = {\n  aliases: {},\n  tokens: {},\n  plugins: [CustomFontResolver],\n};\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version changes and updates for the react-native-aria package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/react-native-aria/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/react-native-aria\n\n## 0.1.7\n\n### Patch Changes\n\n- Fix: removed old backhandler api\n\n## 0.1.6\n\n### Patch Changes\n\n- Feat: Change in build moving from bob build to tsc build\n\n## 0.1.5\n\n### Patch Changes\n\n- fix: removing unwanted react native svg deps\n\n## 0.1.4\n\n### Patch Changes\n\n- component typings updated\n\n## 0.1.3\n\n### Patch Changes\n\n- included path links in compilerOptions in tsconfig file\n\n## 0.1.2\n\n### Patch Changes\n\n- new hook usepressed\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Layout with gluestack-ui in React Native\nDESCRIPTION: This example demonstrates how to create a responsive grid layout using the Grid and GridItem components from gluestack-ui. It showcases different column spans and gap settings.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Grid/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Grid, GridItem } from \"@/components/ui/grid\";\n\nfunction Example() {\n  return (\n    <Grid className=\"gap-5\" _extra={{\n  className: 'grid-cols-8'\n}} >\n      <GridItem\n        className=\"bg-background-50 p-6 rounded-md\"\n        _extra={{\n  className: 'col-span-3'\n}}\n      />\n      <GridItem\n        className=\"bg-background-50 p-6 rounded-md\"\n        _extra={{\n  className: 'col-span-5'\n}}\n      />\n      <GridItem\n        className=\"bg-background-50 p-6 rounded-md\"\n        _extra={{\n   className: 'col-span-6'\n}}\n      />\n      <GridItem\n        className=\"bg-background-50 p-6 rounded-md\"\n        _extra={{\n     className: 'col-span-4'\n}}\n      />\n      <GridItem\n        className=\"bg-background-50 p-6 rounded-md\"\n        _extra={{\n   className: 'col-span-4'\n}}\n      />\n    </Grid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring FontResolver Plugin\nDESCRIPTION: Shows how to import the FontResolver plugin from gluestack-style and add it to the configuration object.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/plugins/FontsPlugin/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { FontResolver } from '@gluestack-style/react';\n\nexport const config = {\n  aliases: {},\n  tokens: {},\n  plugins: [new FontResolver()],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FormControl Props in React Native\nDESCRIPTION: This snippet defines the props for the FormControl component, including size, isInvalid, isRequired, isDisabled, and isReadOnly. It inherits properties from React Native's View component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/FormControl/index.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.TBody>\n  <Table.TR>\n    <Table.TD>\n      <Table.TText>\n        <InlineCode>size</InlineCode>\n      </Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>'sm' | 'md' | 'lg'</Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>'sm'</Table.TText>\n    </Table.TD>\n    <Table.TD>\n      <Table.TText>{`Sets the size of the FormControl children.`}</Table.TText>\n    </Table.TD>\n  </Table.TR>\n  <!-- Additional prop rows -->\n</Table.TBody>\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component via CLI in gluestack-ui\nDESCRIPTION: Command to add the Popover component to a gluestack-ui project using the CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add popover\n```\n\n----------------------------------------\n\nTITLE: Installing js-cookie for Web Theme Persistence (Bash)\nDESCRIPTION: Installs the js-cookie package and its type definitions for managing theme preferences on web platforms.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/theme-configuration/dark-mode/index.nw.stories.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm i js-cookie @types/js-cookie\n```\n\n----------------------------------------\n\nTITLE: CLI Installation Command\nDESCRIPTION: Command to install the Heading component using gluestack-ui CLI\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add heading\n```\n\n----------------------------------------\n\nTITLE: Using Styled gluestack-ui Components\nDESCRIPTION: Example demonstrating how to use pre-built components from gluestack-ui and how to create custom styled components using the styled function. The example shows a Button component with custom styling applied.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/themed/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonText } from '@gluestack-ui/themed';\n\nconst StyledButton = styled(\n  Pressable,\n  {\n    bg: '$red500',\n    p: '$3',\n  },\n  {}\n);\n\nconst StyledButtonText = styled(Text, {}, {});\n\nexport const App = () => {\n  return (\n    <Button>\n      <ButtonText>Awesome Button!</ButtonText>\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Divider Component via CLI\nDESCRIPTION: This command adds the Divider component to a gluestack-ui project using the CLI.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Divider/index.themed.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add divider\n```\n\n----------------------------------------\n\nTITLE: Installing AlertDialog Component via CLI\nDESCRIPTION: This command installs the AlertDialog component using the gluestack-ui CLI tool.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/AlertDialog/index.nw.stories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gluestack-ui add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Router Document Configuration\nDESCRIPTION: Document configuration for Next.js Page Router with SSR setup\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/guides/install-nextjs/index.stories.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Html, Head, Main, NextScript } from 'next/document';\nimport { AppRegistry } from 'react-native-web';\nimport { flush } from '@gluestack-style/react';\n\nfunction Document() {\n  return (\n    <Html className=\"gs\" lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n\nDocument.getInitialProps = async ({ renderPage }: any) => {\n  AppRegistry.registerComponent('Main', () => Main);\n  const { getStyleElement } = AppRegistry.getApplication('Main');\n  const page = await renderPage();\n  const styles = [getStyleElement(), ...flush()];\n  return { ...page, styles: React.Children.toArray(styles) };\n};\n\nexport default Document;\n```\n\n----------------------------------------\n\nTITLE: Setting up StyledProvider at application root\nDESCRIPTION: Basic setup showing how to wrap your application with the StyledProvider component at the root level to enable styling functionality throughout the app.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/styled/react/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyledProvider } from '@gluestack-style/react';\n\n// Do this at the root of your application\nfunction App({ children }) {\n  return <StyledProvider>{children}</StyledProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Component Manual Installation\nDESCRIPTION: Command to manually install the Alert component package\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/alert\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version Updates for @gluestack-ui/button\nDESCRIPTION: Markdown formatted changelog documenting version updates, dependency changes, and bug fixes for the button component package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/button\n\n## 0.1.17\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.16\n\n## 0.1.16\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n  - @gluestack-ui/utils@0.1.15\n```\n\n----------------------------------------\n\nTITLE: Rendering a Themed Checkbox Component in React\nDESCRIPTION: This snippet demonstrates how to render a themed Checkbox component with default configuration. It includes the Checkbox, CheckboxIndicator, CheckboxIcon, and CheckboxLabel sub-components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Checkbox/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox   {...props}  >\n  <CheckboxIndicator mr=\"$2\">\n    <CheckboxIcon as={CheckIcon}/>\n  </CheckboxIndicator>\n  <CheckboxLabel>Label</CheckboxLabel>\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Alert Component Dependencies\nDESCRIPTION: This command manually installs the required dependency for the Alert component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Alert/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @gluestack-ui/alert\n```\n\n----------------------------------------\n\nTITLE: Installing Web Dependencies for gluestack-ui\nDESCRIPTION: Commands for installing required dependencies when building a web-only application with gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/home/getting-started/incremental-adoption/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-dom react-native-web\\nnpm install --save-dev babel-plugin-react-native-web\\nnpm i @types/react-native\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/utils Package with Package Managers\nDESCRIPTION: Commands to install the @gluestack-ui/utils package using either yarn or npm package managers. This package provides utility functions required for the gluestack-ui framework.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/utils/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/utils\n\n# or\n\n$ npm i @gluestack-ui/utils\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Styling Migration\nDESCRIPTION: Converting platform-specific styles from styled props to utility classes in GlueStack UI components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Upgrade to v2/index.nw.stories.mdx#2025-04-16_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from '@gluestack-ui/themed';\n\nexport default function App() {\n  return (\n    <Text\n      sx={{\n        _ios: {\n          marginTop: '$1',\n        },\n        _android: {\n          marginTop: '$2',\n        },\n      }}\n    >\n      gluestack-ui\n    </Text>\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from '@/components/text';\n\nexport default function App() {\n  return <Text className=\"ios:mt-1 android:mt-2\">gluestack-ui</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Addon Components in Markdown\nDESCRIPTION: This code snippet imports necessary components from the Storybook addon docs package. These components are used for creating interactive documentation in Storybook.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/guides/more/Releases/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Components in React\nDESCRIPTION: Import statement for using the Popover and its subcomponents in a React project with gluestack-ui.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Popover/index.nw.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Popover,\n  PopoverBackdrop,\n  PopoverContent,\n  PopoverArrow,\n  PopoverHeader,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverFooter,\n} from '@/components/ui/popover';\n```\n\n----------------------------------------\n\nTITLE: Applying state styles with the states prop\nDESCRIPTION: The states prop allows you to specify which states should be active for a component, applying the corresponding state-specific styles defined in the component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/overview/API/index.stories.mdx#2025-04-16_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<StyledInput states={{ hover: true, disabled: true }} />\n```\n\n----------------------------------------\n\nTITLE: Version 0.2.12 Changelog in Markdown\nDESCRIPTION: Documents patch changes for version 0.2.12, noting updates to the @react-native-aria/utils dependency.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/slider/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.12\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.12\n```\n\n----------------------------------------\n\nTITLE: Importing Fab Component in React Native\nDESCRIPTION: This code snippet shows how to import the Fab component and its subcomponents in a React Native file.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Fab/index.nw.stories.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Fab, FabLabel, FabIcon } from '@/components/ui/fab';\n```\n\n----------------------------------------\n\nTITLE: Starting Web Storybook\nDESCRIPTION: Command to launch the Storybook interface in web mode for browser-based development and testing.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM and Yarn\nDESCRIPTION: Commands to install gluestack-style and its peer dependencies using npm or yarn package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/styled/getting-started/install-expo/index.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\n\nnpm i @gluestack-style/react react-native-svg\n\n# using yarn\n\nyarn add @gluestack-style/react react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Switch Component with Label in React Native\nDESCRIPTION: Shows how to create a Switch component with an associated label using HStack and Text components.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/components/Forms/Switch/index.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<HStack space=\"md\">\n  <Switch/>\n  <Text size=\"sm\" >Allow notifications</Text>\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Version 0.0.17\nDESCRIPTION: Changelog entry documenting dependency updates for react-native-aria/interactions package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/image-viewer/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.17\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.16\n```\n\n----------------------------------------\n\nTITLE: Watching Storybook Stories\nDESCRIPTION: Command to start a watcher for Storybook stories. This automatically updates the stories when files are added or removed in the native version.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn storybook-watcher\n```\n\n----------------------------------------\n\nTITLE: Text Component Import - JSX\nDESCRIPTION: Example showing how to import and use the Text component in a project\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Text/index.themed.stories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from '@/components/ui/text';\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Text />;\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components in React/JSX\nDESCRIPTION: Imports Storybook addon-docs components for documentation purposes, including Canvas, Meta, and Story components that are commonly used in Storybook documentation pages.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/home/overview/QuickStart/index.nw.stories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Default Component Export\nDESCRIPTION: Example showing basic component export usage\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook-nativewind/src/components/Heading/index.themed.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Heading />;\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.2.12\nDESCRIPTION: Documents changes in version 0.2.12, including fixes for deprecated prop warnings and dependency updates.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/menu/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.12\n\n### Patch Changes\n\n- fix: warnings of deprecated props\n- Updated dependencies\n  - @react-native-aria/utils@0.2.11\n  - @react-native-aria/interactions@0.2.13\n  - @react-native-aria/overlays@0.3.12\n```\n\n----------------------------------------\n\nTITLE: Installing @gluestack-ui/overlay with package managers\nDESCRIPTION: Shows how to install the @gluestack-ui/overlay package using either yarn or npm package managers.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/overlay/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @gluestack-ui/overlay\n\n# or\n\n$ npm i @gluestack-ui/overlay\n```\n\n----------------------------------------\n\nTITLE: ActionSheet Changelog Entry\nDESCRIPTION: Markdown formatted changelog entries documenting version changes and patches for the ActionSheet component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/actionsheet/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/actionsheet\n\n## 0.2.53\n\n### Patch Changes\n\n- fix: fixed window height calculation\n\n## 0.2.52\n\n### Patch Changes\n\n- Updated dependencies\n  - @gluestack-ui/overlay@0.1.22\n  - @react-native-aria/dialog@0.0.5\n  - @react-native-aria/interactions@0.2.16\n\n## 0.2.51\n\n### Patch Changes\n\n- Feat : React-19 support\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n  - @gluestack-ui/utils@0.1.15\n  - @gluestack-ui/overlay@0.1.21\n```\n\n----------------------------------------\n\nTITLE: Installing GlueStack UI Stack Component with Yarn\nDESCRIPTION: Command to install the @gluestack-ui/stack package using yarn package manager.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/stack/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add @gluestack-ui/stack\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.2.9\nDESCRIPTION: Documents patch changes and dependency updates for version 0.2.9 of @react-native-aria/toggle package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/toggle/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.9\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.14\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for @react-native-aria/listbox v0.2.5\nDESCRIPTION: Version 0.2.5 patch update that includes a dependency update for @react-native-aria/interactions package.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/listbox/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.5\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.12\n```\n\n----------------------------------------\n\nTITLE: Navigating to Storybook Directory\nDESCRIPTION: Command to navigate to the storybook example directory. The storybook provides an interactive environment to test and view component changes in real-time.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/example/storybook/src/ui/guides/more/contribution-guidelines/index.stories.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd example/storybook\n```\n\n----------------------------------------\n\nTITLE: Alert Component Changelog in Markdown\nDESCRIPTION: Detailed changelog entries for the Alert component package, documenting changes from version 0.1.2 to 0.1.16 including build system migration, typing improvements, and API refinements.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/alert/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/alert\n\n## 0.1.16\n\n### Patch Changes\n\n- Feat: Change in build moving from bob build to tsc build\n\n## 0.1.15\n\n### Patch Changes\n\n- fix: ref typing for all the components\n\n## 0.1.14\n\n### Patch Changes\n\n- fix alerttext component typing\n\n## 0.1.13\n\n### Patch Changes\n\n- fix: ref typing issue\n\n## 0.1.8\n\n### Patch Changes\n\n- Changed component APIs from dot notation to normal\n\n## 0.1.7\n\n### Patch Changes\n\n- component typings updated\n\n## 0.1.6\n\n### Patch Changes\n\n- included path links in compilerOptions in tsconfig file\n\n## 0.1.5\n\n### Patch Changes\n\n- feat: migration of hook to react native aria\n\n## 0.1.4\n\n### Patch Changes\n\n- added readme, keyword, warning fixes\n- Updated dependencies\n  - @gluestack-ui/icon@0.1.3\n\n## 0.1.3\n\n### Patch Changes\n\n- added readme, keyword, warning fixes\n- Updated dependencies\n  - @gluestack-ui/icon@0.1.2\n\n## 0.1.2\n\n### Patch Changes\n\n- released alert with fixed style of icon\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Changelog entries documenting version updates, dependency changes, and bug fixes for the @gluestack-ui/overlay component.\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/unstyled/overlay/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @gluestack-ui/overlay\n\n## 0.1.22\n\n### Patch Changes\n\n- fix: react-19 typing support\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.16\n  - @react-native-aria/overlays@0.3.15\n\n## 0.1.21\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.15\n\n## 0.1.20\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.14\n\n## 0.1.19\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.13\n\n## 0.1.18\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.13\n\n## 0.1.17\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.3.0\n\n## 0.1.16\n\n### Patch Changes\n\n- Feat: Change in build moving from bob build to tsc build\n\n## 0.1.15\n\n### Patch Changes\n\n- fix: style in array\n\n## 0.1.14\n\n### Patch Changes\n\n- @react-native-aria/interactions@0.2.13\n- @react-native-aria/overlays@0.3.12\n\n## 0.1.13\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/interactions@0.2.12\n\n## 0.1.8\n\n### Patch Changes\n\n- fixed typings\n\n## 0.1.7\n\n### Patch Changes\n\n- included path links in compilerOptions in tsconfig file\n\n## 0.1.6\n\n### Patch Changes\n\n- upgraded react-native-aria/overlays version\n\n## 0.1.5\n\n### Patch Changes\n\n- feat: migration of hook to react native aria\n\n## 0.1.4\n\n### Patch Changes\n\n- package json and readme fixes\n\n## 0.1.3\n\n### Patch Changes\n\n- style changews\n\n## 0.1.2\n\n### Patch Changes\n\n- Updated dependencies\n  - @gluestack-ui/react-native-aria@0.1.2\n\n## 0.1.1\n\n### Patch Changes\n\n- fix forward ref warning in overlay\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.13\nDESCRIPTION: Documents addition of flip state functionality to popover component\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/overlays/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.13\n\n### Patch Changes\n\n- feat: added flip state to popover\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.6\nDESCRIPTION: Documents patch version 0.2.6 with dependency update to @react-native-aria/utils@0.2.11\nSOURCE: https://github.com/gluestack/gluestack-ui/blob/main/packages/react-native-aria/combobox/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.6\n\n### Patch Changes\n\n- Updated dependencies\n  - @react-native-aria/utils@0.2.11\n```"
  }
]