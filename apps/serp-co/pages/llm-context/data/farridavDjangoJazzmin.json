[
  {
    "owner": "farridav",
    "repo": "django-jazzmin",
    "content": "TITLE: Configuring Django-Jazzmin Settings - Main Configuration\nDESCRIPTION: Complete configuration example for Django-Jazzmin showing all available settings including site branding, menu customization, UI tweaks, and behavior controls. Settings are defined in the JAZZMIN_SETTINGS dictionary within Django settings.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nJAZZMIN_SETTINGS = {\n    \"site_title\": \"Library Admin\",\n    \"site_header\": \"Library\",\n    \"site_brand\": \"Library\",\n    \"site_logo\": \"books/img/logo.png\",\n    \"login_logo\": None,\n    \"login_logo_dark\": None,\n    \"site_logo_classes\": \"img-circle\",\n    \"site_icon\": None,\n    \"welcome_sign\": \"Welcome to the library\",\n    \"copyright\": \"Acme Library Ltd\",\n    \"search_model\": [\"auth.User\", \"auth.Group\"],\n    \"user_avatar\": None,\n    \"topmenu_links\": [\n        {\"name\": \"Home\",  \"url\": \"admin:index\", \"permissions\": [\"auth.view_user\"]},\n        {\"name\": \"Support\", \"url\": \"https://github.com/farridav/django-jazzmin/issues\", \"new_window\": True},\n        {\"model\": \"auth.User\"},\n        {\"app\": \"books\"},\n    ],\n    \"usermenu_links\": [\n        {\"name\": \"Support\", \"url\": \"https://github.com/farridav/django-jazzmin/issues\", \"new_window\": True},\n        {\"model\": \"auth.user\"}\n    ],\n    \"show_sidebar\": True,\n    \"navigation_expanded\": True,\n    \"hide_apps\": [],\n    \"hide_models\": [],\n    \"order_with_respect_to\": [\"auth\", \"books\", \"books.author\", \"books.book\"],\n    \"custom_links\": {\n        \"books\": [{\n            \"name\": \"Make Messages\",\n            \"url\": \"make_messages\",\n            \"icon\": \"fas fa-comments\",\n            \"permissions\": [\"books.view_book\"]\n        }]\n    },\n    \"icons\": {\n        \"auth\": \"fas fa-users-cog\",\n        \"auth.user\": \"fas fa-user\",\n        \"auth.Group\": \"fas fa-users\",\n    },\n    \"default_icon_parents\": \"fas fa-chevron-circle-right\",\n    \"default_icon_children\": \"fas fa-circle\",\n    \"related_modal_active\": False,\n    \"custom_css\": None,\n    \"custom_js\": None,\n    \"use_google_fonts_cdn\": True,\n    \"show_ui_builder\": False,\n    \"changeform_format\": \"horizontal_tabs\",\n    \"changeform_format_overrides\": {\"auth.user\": \"collapsible\", \"auth.group\": \"vertical_tabs\"},\n    \"language_chooser\": True,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django INSTALLED_APPS for Jazzmin\nDESCRIPTION: Shows how to add jazzmin to Django's INSTALLED_APPS setting. The jazzmin app must be placed before django.contrib.admin to properly override the admin templates.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    'jazzmin',\n\n    'django.contrib.admin',\n    [...]\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Django Jazzmin via pip\nDESCRIPTION: Command to install the Django Jazzmin package using pip. This is the first step to add the AdminLTE-based theme to your Django admin interface.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-jazzmin\n```\n\n----------------------------------------\n\nTITLE: Configuring Django-Jazzmin Custom Links\nDESCRIPTION: Example of how to add custom links to the side menu, including custom groups and app-specific links with icons and permissions.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"custom_links\": {\n    \"books\": [{\n        # Any Name you like\n        \"name\": \"Make Messages\",\n\n        # url name e.g `admin:index`, relative urls e.g `/admin/index` or absolute urls e.g `https://domain.com/admin/index`\n        \"url\": \"make_messages\",\n\n        # any font-awesome icon, see list here https://fontawesome.com/icons?d=gallery&m=free&v=5.0.0,5.0.1,5.0.10,5.0.11,5.0.12,5.0.13,5.0.2,5.0.3,5.0.4,5.0.5,5.0.6,5.0.7,5.0.8,5.0.9,5.1.0,5.1.1,5.2.0,5.3.0,5.3.1,5.4.0,5.4.1,5.4.2,5.13.0,5.12.0,5.11.2,5.11.1,5.10.0,5.9.0,5.8.2,5.8.1,5.7.2,5.7.1,5.7.0,5.6.3,5.5.0,5.4.2 (optional)\n        \"icon\": \"fas fa-comments\",\n\n        # a list of permissions the user must have to see this link (optional)\n        \"permissions\": [\"books.view_book\"]\n    }],\n    # Add/Or a new group (name must not conflict with an installed app)\n    \"custom_group\": [{\n        \"name\": \"Custom Link\",\n        \"url\": \"custom_link\",\n        \"icon\": \"fas fa-comments\",\n        \"permissions\": [\"books.view_book\"]\n    }]\n},\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Form Actions in Django-Jazzmin ModelAdmin\nDESCRIPTION: This code shows how to implement the response_change method in a ModelAdmin to handle custom form actions. It captures when a specific action button is clicked by checking for its name in the POST data.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef response_change(self, request, obj):\n    ret = super().response_change(request, obj)\n    if '_your_action' in request.POST:\n        # Do something\n        pass\n    return ret\n```\n\n----------------------------------------\n\nTITLE: Ordering Page Sections in Django-Jazzmin ModelAdmin\nDESCRIPTION: This example shows how to order sections within change forms by defining a 'jazzmin_section_order' attribute in a ModelAdmin class. The Book model admin is configured with fieldsets and inlines, with a specific ordering for display.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@admin.register(Book)\nclass BookAdmin(admin.ModelAdmin):\n    resource_class = BookResource\n    fieldsets = (\n        (\"general\", {\"fields\": (\"title\", \"author\", \"library\")}),\n        (\"other\", {\"fields\": (\"genre\", \"summary\", \"isbn\", \"published_on\")}),\n    )\n    inlines = (BookLoanInline,)\n\n    # Order the sections within the change form\n    jazzmin_section_order = (\"book loans\", \"general\", \"other\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Changeform Formats in Django-Jazzmin Settings\nDESCRIPTION: This snippet demonstrates how to set the global changeform format and override it for specific models. The example sets 'horizontal_tabs' as the default format while using 'collapsible' for the user model and 'vertical_tabs' for the group model.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    \"changeform_format\": \"horizontal_tabs\",\n    # override change forms on a per modeladmin basis\n    \"changeform_format_overrides\": {\"auth.user\": \"collapsible\", \"auth.group\": \"vertical_tabs\"},\n```\n\n----------------------------------------\n\nTITLE: Configuring Django-Jazzmin Menu Ordering\nDESCRIPTION: Examples of how to configure the ordering of apps and models in the side menu using the order_with_respect_to setting.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Order the auth app before the books app, other apps will be alphabetically placed after these\n\"order_with_respect_to\": [\"auth\", \"books\"],\n\n# Keep the same app ordering as above, but also order choice and book model links within the books app\n\"order_with_respect_to\": [\"auth\", \"books\", \"books.author\", \"books.book\"],\n\n# Just make sure auth is first\n\"order_with_respect_to\": [\"auth\"],\n\n# Order apps automatically, but make sure choice and book admin links are first within the books app\n\"order_with_respect_to\": [\"books.author\", \"books.book\"],\n\n# Place our choice model admin link and our custom link first within the books app (Note: custom link name used for order key)\n\"order_with_respect_to\": [\"books.author\", \"Make Messages\"],\n\n# do nothing\n\"order_with_respect_to\": [],\n\n# Still do nothing\n\"order_with_respect_to\": [\"doesnt_exist\"],\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS and JS Files in Django Jazzmin\nDESCRIPTION: This snippet shows how to include custom CSS and JS files in Django Jazzmin settings. The files should be accessible by the static file finder.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/ui_customisation.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"custom_css\": \"common/css/main.css\",\n\"custom_js\": \"common/js/main.js\"\n```\n\n----------------------------------------\n\nTITLE: Optimizing Filter Performance in Django-Jazzmin\nDESCRIPTION: This snippet demonstrates how to optimize filter performance for models with many options by using the 'filter_input_length' attribute. The example sets a threshold of 5 characters before rendering filtered options for the 'title' field.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@admin.register(Book)\nclass BookAdmin(admin.ModelAdmin):\n    resource_class = BookResource\n    fieldsets = (\n        (\"general\", {\"fields\": (\"title\", \"author\", \"library\")}),\n        (\"other\", {\"fields\": (\"genre\", \"summary\", \"isbn\", \"published_on\")}),\n    )\n    list_filter = (\"title\",)\n\n    # Render filtered options only after 5 characters were entered\n    filter_input_length = {\n        \"title\": 5,\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Actions to Form Submit Line in Django-Jazzmin\nDESCRIPTION: This template example shows how to add extra action buttons to a model's form view by extending the submit_line.html template. It includes examples for both a simple link and a form submission action button.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: djangotemplate\nCODE:\n```\n{# extends \"admin/submit_line.html\" #}\n\n{# block extra-actions #}\n\n{# For a simple link #}\n<div class=\"form-group\">\n    <a href=\"/some/url\" class=\"btn btn-outline-info form-control\">Some Action</a>\n</div>\n\n{# Or, to process this with form submission #}\n<div class=\"form-group\">\n    <input type=\"submit\" class=\"btn btn-outline-info form-control\" value=\"SomeAction\" name=\"_your_action\">\n</div>\n{# endblock #}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Theme in Django Jazzmin\nDESCRIPTION: This snippet demonstrates how to set up a light theme (flatly) for default users and a dark theme (darkly) for users with dark mode enabled on their devices.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/ui_customisation.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nJAZZMIN_UI_TWEAKS = {\n    ...\n    \"theme\": \"flatly\",\n    \"dark_mode_theme\": \"darkly\",\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Django Jazzmin Demo App\nDESCRIPTION: Commands for setting up the Django Jazzmin demo application locally. This includes installing dependencies with Poetry, running migrations, resetting the application data, and starting the development server with runserver_plus.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    poetry install\n ./tests/test_app/manage.py migrate\n ./tests/test_app/manage.py reset\n ./tests/test_app/manage.py runserver_plus\n```\n\n----------------------------------------\n\nTITLE: Applying Theme-Specific CSS Styles in Django Jazzmin\nDESCRIPTION: This CSS snippet demonstrates how to apply custom styles to a specific theme (darkly) in Django Jazzmin.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/ui_customisation.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nbody.theme-darkly p {\n    color: pink;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Mode Theme-Specific CSS Styles in Django Jazzmin\nDESCRIPTION: This CSS snippet shows how to apply custom styles to a specific dark mode theme (darkly) in Django Jazzmin, using media queries.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/ui_customisation.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@media (prefers-color-scheme: dark) {\n    body.theme-darkly p {\n        color: pink;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Django Jazzmin Dependencies with Poetry\nDESCRIPTION: Commands to clone the repository and install project dependencies using Poetry, a Python dependency management tool.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/development.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:farridav/django-jazzmin.git\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Django Jazzmin Test Database\nDESCRIPTION: Commands to set up the database tables for the test project using Django's manage.py utility.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/development.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython tests/test_app/manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data for Django Jazzmin\nDESCRIPTION: Command to generate test data for the Django Jazzmin test application.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/development.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython tests/test_app/manage.py reset\n```\n\n----------------------------------------\n\nTITLE: Running Django Jazzmin Development Server\nDESCRIPTION: Command to run the development server with Werkzeug debugger for the Django Jazzmin test application.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/development.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython tests/test_app/manage.py runserver_plus\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: A requirements.txt style list of Python packages needed to run a Django application with Jazzmin admin theme. Includes core Django, database connector (psycopg2), web server (gunicorn), static file handling (whitenoise), and development tools.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/tests/test_app/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDjango\nwhitenoise\ngunicorn\npsycopg2-binary\ndj-database-url\nfactory-boy\ndocutils\nimportlib-metadata==4.13.0\ndjango-debug-toolbar\ndjango_extensions\ndjango-jazzmin\n```\n\n----------------------------------------\n\nTITLE: Setting Darkly Theme in Django Jazzmin\nDESCRIPTION: This code snippet shows how to set the 'darkly' theme as the default theme in Django Jazzmin UI tweaks.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/ui_customisation.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nJAZZMIN_UI_TWEAKS = {\n    ...\n    \"theme\": \"darkly\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Simplex Theme in Django Jazzmin\nDESCRIPTION: This code snippet demonstrates how to set the 'simplex' theme as the default theme in Django Jazzmin UI tweaks.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/ui_customisation.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nJAZZMIN_UI_TWEAKS = {\n    ...\n    \"theme\": \"simplex\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sketchy Theme in Django Jazzmin\nDESCRIPTION: This code snippet shows how to set the 'sketchy' theme as the default theme in Django Jazzmin UI tweaks.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/ui_customisation.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nJAZZMIN_UI_TWEAKS = {\n    ...\n    \"theme\": \"sketchy\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Slate Theme in Django Jazzmin\nDESCRIPTION: This code snippet demonstrates how to set the 'slate' theme as the default theme in Django Jazzmin UI tweaks.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/ui_customisation.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nJAZZMIN_UI_TWEAKS = {\n    ...\n    \"theme\": \"slate\",\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Django Jazzmin Documentation Locally\nDESCRIPTION: Command to serve the project documentation locally using MkDocs, accessible at http://localhost:8001.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/development.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve -a localhost:8001\n```\n\n----------------------------------------\n\nTITLE: Adding New Language for Django Jazzmin Translations\nDESCRIPTION: Bash commands to add a new language directory and generate translation files for Django Jazzmin.\nSOURCE: https://github.com/farridav/django-jazzmin/blob/main/docs/development.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd jazzmin\nmkdir -p locale/de/LC_MESSAGES\ndjango-admin makemessages\ncd ../\n./cli.py locales --prune de\n```"
  }
]