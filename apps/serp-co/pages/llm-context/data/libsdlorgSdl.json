[
  {
    "owner": "libsdl-org",
    "repo": "sdl",
    "content": "TITLE: Compiling SDL3 Application with Emscripten\nDESCRIPTION: This snippet demonstrates how to compile a simple C program using `emcc` to generate an HTML page that loads and runs the application.  It outputs several files, including support Javascript and WebAssembly (.wasm) files. The `-o index.html` flag produces a simple HTML page that loads and runs your app.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-emscripten.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nemcc -o index.html mygame.c\n```\n\n----------------------------------------\n\nTITLE: Emscripten CMake Build Configuration\nDESCRIPTION: These commands configure and build an SDL project for Emscripten using CMake. The first set builds without thread support. The second includes `-DSDL_THREADS=ON` to enable thread support. It also demonstrates how to build the tests and examples.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-emscripten.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir build\ncd build\nemcmake cmake ..\n# you can also do `emcmake cmake -G Ninja ..` and then use `ninja` instead of this command.\nemmake make -j4\n```\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir build\ncd build\nemcmake cmake -DSDL_THREADS=ON ..\n# you can also do `emcmake cmake -G Ninja ..` and then use `ninja` instead of this command.\nemmake make -j4\n```\n\nLANGUAGE: Bash\nCODE:\n```\nTo build the tests, add `-DSDL_TESTS=ON` to the `emcmake cmake` command line.\nTo build the examples, add `-DSDL_EXAMPLES=ON` to the `emcmake cmake` command line.\n```\n\n----------------------------------------\n\nTITLE: Surface Creation (SDL2 vs SDL3)\nDESCRIPTION: This example shows how to create an indexed surface and palette in SDL2 and how it has changed in SDL3. In SDL3, the palette creation is now a separate step.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface *surface = SDL_CreateRGBSurfaceWithFormat(0, 32, 32, 8, SDL_PIXELFORMAT_INDEX8);\nSDL_Palette *palette = surface->format->palette;\n...\n```\n\n----------------------------------------\n\nTITLE: Key Event Structure Access - After\nDESCRIPTION: This code snippet demonstrates the updated way to access key event data in newer versions of SDL, directly accessing the `key` and `mod` members of the `event.key` structure. `keysym` member is removed.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nSDL_Event event;\nSDL_Keycode key = event.key.key;\nSDL_Keymod mod = event.key.mod;\n```\n\n----------------------------------------\n\nTITLE: Enumerating Audio Playback Devices in SDL3\nDESCRIPTION: This code snippet shows how to enumerate audio playback devices in SDL3 using `SDL_GetAudioPlaybackDevices`. It initializes the audio subsystem, retrieves a list of device IDs, and logs the name of each device.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n{\n    if (SDL_InitSubSystem(SDL_INIT_AUDIO)) {\n        int i, num_devices;\n        SDL_AudioDeviceID *devices = SDL_GetAudioPlaybackDevices(&num_devices);\n        if (devices) {\n            for (i = 0; i < num_devices; ++i) {\n                SDL_AudioDeviceID instance_id = devices[i];\n                SDL_Log(\"AudioDevice %\" SDL_PRIu32 \": %s\", instance_id, SDL_GetAudioDeviceName(instance_id));\n            }\n            SDL_free(devices);\n        }\n        SDL_QuitSubSystem(SDL_INIT_AUDIO);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SDL function return value check in C\nDESCRIPTION: This code snippet shows how to update the return value check for SDL functions from SDL 2.0 to SDL 3.0, where functions now return a boolean value instead of a negative error code. It replaces the old error-checking patterns with a boolean check for success or failure.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nif (SDL_Function() < 0 || SDL_Function() == -1) {\n    /* Failure... */\n}\n```\n\nLANGUAGE: C\nCODE:\n```\nif (SDL_Function() == 0) {\n    /* Success... */\n}\n```\n\nLANGUAGE: C\nCODE:\n```\nif (!SDL_Function()) {\n    /* Success... */\n}\n```\n\nLANGUAGE: C\nCODE:\n```\nif (SDL_Function()) {\n    /* Success... */\n} else {\n    /* Failure... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Removed Functions: SDL_CreateRGBSurfaceWithFormat\nDESCRIPTION: This code demonstrates how to implement the removed `SDL_CreateRGBSurfaceWithFormat` function using the new `SDL_CreateSurface` function. This helps with migrating code from SDL2 to SDL3 by providing a drop-in replacement.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface *SDL_CreateRGBSurfaceWithFormat(Uint32 flags, int width, int height, int depth, Uint32 format)\n{\n    return SDL_CreateSurface(width, height, format);\n}\n```\n\n----------------------------------------\n\nTITLE: Running rename_headers.py to update SDL headers\nDESCRIPTION: This shell command uses the `rename_headers.py` script to automatically update SDL2 header includes to their SDL3 equivalents in the source code. This ensures the correct SDL3 headers are used throughout the project.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nrename_headers.py source_code_path\n```\n\n----------------------------------------\n\nTITLE: Installing SDL Build Dependencies on Ubuntu 18.04\nDESCRIPTION: This command installs the necessary build dependencies for SDL on Ubuntu 18.04 to enable all available features. It uses apt-get to install packages like build-essential, git, make, cmake, and various development libraries for audio, graphics, input, and other functionalities.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential git make \\\npkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \\\nlibaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \\\nlibxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev \\\nlibxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \\\nlibegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Removed Functions: SDL_CreateRGBSurfaceFrom\nDESCRIPTION: This code shows how to implement `SDL_CreateRGBSurfaceFrom` using `SDL_CreateSurfaceFrom` and `SDL_GetPixelFormatForMasks`. It emulates the functionality of the removed SDL2 function in SDL3, assisting in code migration.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface *SDL_CreateRGBSurfaceFrom(void *pixels, int width, int height, int depth, int pitch, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)\n{\n    return SDL_CreateSurfaceFrom(width, height,\n                                 SDL_GetPixelFormatForMasks(depth, Rmask, Gmask, Bmask, Amask),\n                                 pixels, pitch);\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRGBA Example Update (C)\nDESCRIPTION: This code shows how to update your SDL2 code using `SDL_GetRGBA` to use the new `SDL_GetPixelFormatDetails` and `SDL_GetSurfacePalette` functions in SDL3. It shows how to get the r, g, b, and a values of a pixel.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nSDL_GetRGBA(pixel, SDL_GetPixelFormatDetails(surface->format), SDL_GetSurfacePalette(surface), &r, &g, &b, &a);\n```\n\n----------------------------------------\n\nTITLE: Building SDL on UNIX with CMake\nDESCRIPTION: This snippet demonstrates how to build and install SDL on UNIX-like systems using CMake. It configures the build, builds the project, and installs it to the /usr/local directory, requiring sudo for installation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build\ncmake --build build\nsudo cmake --install build --prefix /usr/local\n```\n\n----------------------------------------\n\nTITLE: SDL_QuitRequested Macro Replacement (C)\nDESCRIPTION: This code defines a macro `SDL_QuitRequested` as a replacement for the removed SDL2 macro. It invokes `SDL_PumpEvents` and `SDL_PeepEvents` to check if a quit event is pending. This replacement is provided because SDL_quit.h has been removed entirely.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_QuitRequested() (SDL_PumpEvents(), (SDL_PeepEvents(NULL,0,SDL_PEEKEVENT,SDL_EVENT_QUIT,SDL_EVENT_QUIT) > 0))\n```\n\n----------------------------------------\n\nTITLE: Building SDL with MinGW-w64 and CMake (Shell)\nDESCRIPTION: This set of commands builds and installs SDL using CMake and the Ninja build system with the MinGW-w64 toolchain. It configures the build, compiles SDL in parallel, and installs it to a specified directory, ensuring that the `CMAKE_PREFIX_PATH` is correctly set for subsequent builds.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-windows.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build\ncmake -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=build-scripts/cmake-toolchain-mingw64-x86_64.cmake\ncmake --build build --parallel\ncmake --install build --prefix C:/Libraries\n```\n\n----------------------------------------\n\nTITLE: SDL3 Audio Queueing Migration\nDESCRIPTION: This code demonstrates how to migrate from SDL2's `SDL_QueueAudio` to SDL3 using `SDL_AudioStream` for queueing audio data. It opens an audio device stream and then uses `SDL_PutAudioStreamData` to add audio data to the stream in the main loop.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n    /* ...somewhere near startup... */\n    const SDL_AudioSpec spec = { SDL_AUDIO_S16, 2, 44100 };\n    SDL_AudioStream *stream = SDL_OpenAudioDeviceStream(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &spec, NULL, NULL);\n    SDL_ResumeAudioDevice(SDL_GetAudioStreamDevice(stream));\n\n    /* ...in your main loop... */\n    /* calculate a little more audio into `buf`, add it to `stream` */\n    SDL_PutAudioStreamData(stream, buf, buflen);\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack CMake\nDESCRIPTION: This snippet configures CPack, the CMake packaging tool, to create distribution packages for SDL3. It sets the generator based on the platform and defines the project configuration file and package name. If SDL is installed as a framework, the generator is set to DragNDrop; otherwise, it is set to ZIP for MSVC and TGZ for other platforms.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_257\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_INSTALL_CPACK)\n    if(SDL_FRAMEWORK)\n      set(CPACK_GENERATOR \"DragNDrop\")\n    elseif(MSVC)\n      set(CPACK_GENERATOR \"ZIP\")\n    else()\n      set(CPACK_GENERATOR \"TGZ\")\n    endif()\n    configure_file(cmake/CPackProjectConfig.cmake.in CPackProjectConfig.cmake @ONLY)\n    set(CPACK_PROJECT_CONFIG_FILE \"${SDL3_BINARY_DIR}/CPackProjectConfig.cmake\")\n    # CPACK_SOURCE_PACKAGE_FILE_NAME must end with \"-src\" (so we can block creating a source archive)\n    set(CPACK_SOURCE_PACKAGE_FILE_NAME \"SDL${PROJECT_VERSION_MAJOR}-${PROJECT_VERSION}-src\")\n    set(CPACK_PACKAGE_DIRECTORY \"${CMAKE_BINARY_DIR}/dist\")\n    include(CPack)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Finger Coordinates from Event (C)\nDESCRIPTION: This code snippet demonstrates how to access the x and y coordinates of a finger from an SDL touch event. It assumes that you have already received an SDL event of type SDL_EVENT_FINGER_DOWN, SDL_EVENT_FINGER_MOTION, or SDL_EVENT_FINGER_UP and are accessing its tfinger member. x and y coordinates are normalized to the range 0..1.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-touch.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nfloat x = event.tfinger.x;\nfloat y = event.tfinger.y;\n```\n\n----------------------------------------\n\nTITLE: Enumerating Haptic Devices in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to enumerate haptic devices using SDL3.  It initializes the haptic subsystem, retrieves a list of available haptic devices using SDL_GetHaptics(), and prints their instance IDs and names. Requires SDL3 and the SDL_INIT_HAPTIC subsystem to be initialized. The example utilizes SDL_Log for printing information.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n{\n    if (SDL_InitSubSystem(SDL_INIT_HAPTIC)) {\n        int i, num_haptics;\n        SDL_HapticID *haptics = SDL_GetHaptics(&num_haptics);\n        if (haptics) {\n            for (i = 0; i < num_haptics; ++i) {\n                SDL_HapticID instance_id = haptics[i];\n                SDL_Log(\"Haptic %\" SDL_PRIu32 \": %s\", instance_id, SDL_GetHapticNameForID(instance_id));\n            }\n            SDL_free(haptics);\n        }\n        SDL_QuitSubSystem(SDL_INIT_HAPTIC);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Gamepad Button Mapping Swaps in SDL\nDESCRIPTION: This code snippet demonstrates how to handle gamepad button mapping swaps, specifically for South/East (accept/cancel) buttons, which can vary based on region and user preference. It includes functions for initializing mapped buttons, getting the mapped button, and handling gamepad events.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n#define CONFIRM_BUTTON SDL_GAMEPAD_BUTTON_SOUTH\n#define CANCEL_BUTTON SDL_GAMEPAD_BUTTON_EAST\n\nbool flipped_buttons;\n\nvoid InitMappedButtons(SDL_Gamepad *gamepad)\n{\n    if (!GetFlippedButtonSetting(&flipped_buttons)) {\n        if (SDL_GetGamepadButtonLabel(gamepad, SDL_GAMEPAD_BUTTON_SOUTH) == SDL_GAMEPAD_BUTTON_LABEL_B) {\n            flipped_buttons = true;\n        } else {\n            flipped_buttons = false;\n        }\n    }\n}\n\nSDL_GamepadButton GetMappedButton(SDL_GamepadButton button)\n{\n    if (flipped_buttons) {\n        switch (button) {\n        case SDL_GAMEPAD_BUTTON_SOUTH:\n            return SDL_GAMEPAD_BUTTON_EAST;\n        case SDL_GAMEPAD_BUTTON_EAST:\n            return SDL_GAMEPAD_BUTTON_SOUTH;\n        case SDL_GAMEPAD_BUTTON_WEST:\n            return SDL_GAMEPAD_BUTTON_NORTH;\n        case SDL_GAMEPAD_BUTTON_NORTH:\n            return SDL_GAMEPAD_BUTTON_WEST;\n        default:\n            break;\n        }\n    }\n    return button;\n}\n\nSDL_GamepadButtonLabel GetConfirmActionLabel(SDL_Gamepad *gamepad)\n{\n    return SDL_GetGamepadButtonLabel(gamepad, GetMappedButton(CONFIRM_BUTTON));\n}\n\nSDL_GamepadButtonLabel GetCancelActionLabel(SDL_Gamepad *gamepad)\n{\n    return SDL_GetGamepadButtonLabel(gamepad, GetMappedButton(CANCEL_BUTTON));\n}\n\nvoid HandleGamepadEvent(SDL_Event *event)\n{\n    if (event->type == SDL_EVENT_GAMEPAD_BUTTON_DOWN) {\n        switch (GetMappedButton(event->gbutton.button)) {\n        case CONFIRM_BUTTON:\n            /* Handle confirm action */\n            break;\n        case CANCEL_BUTTON:\n            /* Handle cancel action */\n            break;\n        default:\n            /* ... */\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL with Release Build Type\nDESCRIPTION: This snippet shows how to configure SDL with the Release build type using CMake, which optimizes the library for performance. It includes the configuration and build commands.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncmake ~/SDL -DCMAKE_BUILD_TYPE=Release\n```\n\nLANGUAGE: sh\nCODE:\n```\ncmake --build . --config Release\n```\n\n----------------------------------------\n\nTITLE: Including SDL in a project with CMake\nDESCRIPTION: This CMake script demonstrates how to include SDL in a project, supporting both system-installed and vendored SDL libraries. It uses the `find_package` command to locate the system SDL and `add_subdirectory` for vendored SDL.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(mygame)\n\n# Create an option to switch between a system sdl library and a vendored SDL library\noption(MYGAME_VENDORED \"Use vendored libraries\" OFF)\n\nif(MYGAME_VENDORED)\n    # This assumes you have added SDL as a submodule in vendored/SDL\n    add_subdirectory(vendored/SDL EXCLUDE_FROM_ALL)\nelse()\n    # 1. Look for a SDL3 package,\n    # 2. look for the SDL3-shared component, and\n    # 3. fail if the shared component cannot be found.\n    find_package(SDL3 REQUIRED CONFIG REQUIRED COMPONENTS SDL3-shared)\nendif()\n\n# Create your game executable target as usual\nadd_executable(mygame WIN32 mygame.c)\n\n# Link to the actual SDL3 library.\ntarget_link_libraries(mygame PRIVATE SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: Creating an SDL Window with Properties\nDESCRIPTION: This code snippet shows how to create an SDL window using `SDL_CreateWindowWithProperties`. It creates a property set using `SDL_CreateProperties`, sets window title, position (x, y), width, height, and flags as properties. It then creates the window and destroys the properties once the window is created.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_41\n\nLANGUAGE: C\nCODE:\n```\n    SDL_PropertiesID props = SDL_CreateProperties();\n    SDL_SetStringProperty(props, SDL_PROP_WINDOW_CREATE_TITLE_STRING, title);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_X_NUMBER, x);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_Y_NUMBER, y);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER, width);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER, height);\n    // For window flags you should use separate window creation properties,\n    // but for easier migration from SDL2 you can use the following:\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER, flags);\n    pWindow = SDL_CreateWindowWithProperties(props);\n    SDL_DestroyProperties(props);\n    if (window) {\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating CMakeLists.txt for SDL3 Project\nDESCRIPTION: This CMakeLists.txt file configures a simple SDL3 project. It specifies the minimum CMake version, project name, finds the SDL3 package, defines an executable target, specifies the source files, and links the executable with the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-mingw.md#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.26)\nproject(hello C CXX)\n\nfind_package(SDL3 REQUIRED)\n\nadd_executable(hello)\n\ntarget_sources(hello\nPRIVATE\n    hello.c\n)\n\ntarget_link_libraries(hello SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: Accessing Window Information (SDL_syswm.h) - New Method (C)\nDESCRIPTION: This snippet demonstrates the new approach for accessing window information using SDL properties. It retrieves the native window handle (HWND, NSWindow, Display/Window, wl_display/wl_surface, UIWindow) using SDL_GetPointerProperty and SDL_GetNumberProperty, based on the current platform. It relies on properties like SDL_PROP_WINDOW_WIN32_HWND_POINTER, SDL_PROP_WINDOW_COCOA_WINDOW_POINTER, etc. which are defined by SDL.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_35\n\nLANGUAGE: c\nCODE:\n```\n#if defined(SDL_PLATFORM_WIN32)\n    HWND hwnd = (HWND)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_WIN32_HWND_POINTER, NULL);\n    if (hwnd) {\n        ...\n    }\n#elif defined(SDL_PLATFORM_MACOS)\n    NSWindow *nswindow = (__bridge NSWindow *)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_COCOA_WINDOW_POINTER, NULL);\n    if (nswindow) {\n        ...\n    }\n#elif defined(SDL_PLATFORM_LINUX)\n    if (SDL_strcmp(SDL_GetCurrentVideoDriver(), \"x11\") == 0) {\n        Display *xdisplay = (Display *)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_X11_DISPLAY_POINTER, NULL);\n        Window xwindow = (Window)SDL_GetNumberProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_X11_WINDOW_NUMBER, 0);\n        if (xdisplay && xwindow) {\n            ...\n        }\n    } else if (SDL_strcmp(SDL_GetCurrentVideoDriver(), \"wayland\") == 0) {\n        struct wl_display *display = (struct wl_display *)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER, NULL);\n        struct wl_surface *surface = (struct wl_surface *)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER, NULL);\n        if (display && surface) {\n            ...\n        }\n    }\n#elif defined(SDL_PLATFORM_IOS)\n    SDL_PropertiesID props = SDL_GetWindowProperties(window);\n    UIWindow *uiwindow = (__bridge UIWindow *)SDL_GetPointerProperty(props, SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER, NULL);\n    if (uiwindow) {\n        GLuint framebuffer = (GLuint)SDL_GetNumberProperty(props, SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER, 0);\n        GLuint colorbuffer = (GLuint)SDL_GetNumberProperty(props, SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER, 0);\n        GLuint resolveFramebuffer = (GLuint)SDL_GetNumberProperty(props, SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER, 0);\n        ...\n    }\n#endif\n```\n\n----------------------------------------\n\nTITLE: Implementing Removed Functions: SDL_CreateRGBSurface\nDESCRIPTION: This code demonstrates how to implement the removed `SDL_CreateRGBSurface` function using the new `SDL_CreateSurface` and `SDL_GetPixelFormatForMasks` functions. This is a compatibility shim for migrating SDL2 code to SDL3.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface *SDL_CreateRGBSurface(Uint32 flags, int width, int height, int depth, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)\n{\n    return SDL_CreateSurface(width, height,\n            SDL_GetPixelFormatForMasks(depth, Rmask, Gmask, Bmask, Amask));\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SDL3 Callback Entry Points\nDESCRIPTION: This code enables the SDL3 callback entry points.  By defining SDL_MAIN_USE_CALLBACKS before including SDL3/SDL_main.h, the application indicates that it will provide the SDL_AppInit, SDL_AppIterate, SDL_AppEvent and SDL_AppQuit functions.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-main-functions.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MAIN_USE_CALLBACKS\n#include <SDL3/SDL_main.h>\n```\n\n----------------------------------------\n\nTITLE: Handling iOS App Events with SDL\nDESCRIPTION: This code snippet demonstrates how to handle iOS application lifecycle events using SDL_EventFilter. It shows how to respond to events such as application termination, low memory, backgrounding, and foregrounding. The `HandleAppEvents` function processes these events and returns a boolean indicating whether the event should be added to the event queue. The `SDL_SetEventFilter` function registers the custom event filter.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-ios.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool HandleAppEvents(void *userdata, SDL_Event *event)\n{\n    switch (event->type)\n    {\n    case SDL_EVENT_TERMINATING:\n        /* Terminate the app.\n           Shut everything down before returning from this function.\n        */\n        return false;\n    case SDL_EVENT_LOW_MEMORY:\n        /* You will get this when your app is paused and iOS wants more memory.\n           Release as much memory as possible.\n        */\n        return false;\n    case SDL_EVENT_WILL_ENTER_BACKGROUND:\n        /* Prepare your app to go into the background.  Stop loops, etc.\n           This gets called when the user hits the home button, or gets a call.\n        */\n        return false;\n    case SDL_EVENT_DID_ENTER_BACKGROUND:\n        /* This will get called if the user accepted whatever sent your app to the background.\n           If the user got a phone call and canceled it, you'll instead get an SDL_EVENT_DID_ENTER_FOREGROUND event and restart your loops.\n           When you get this, you have 5 seconds to save all your state or the app will be terminated.\n           Your app is NOT active at this point.\n        */\n        return false;\n    case SDL_EVENT_WILL_ENTER_FOREGROUND:\n        /* This call happens when your app is coming back to the foreground.\n           Restore all your state here.\n        */\n        return false;\n    case SDL_EVENT_DID_ENTER_FOREGROUND:\n        /* Restart your loops here.\n           Your app is interactive and getting CPU again.\n        */\n        return false;\n    default:\n        /* No special processing, add it to the event queue */\n        return true;\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    SDL_SetEventFilter(HandleAppEvents, NULL);\n\n    ... run your main loop\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Timer Callback Signature (SDL_timer.h) - Updated (C)\nDESCRIPTION: This code snippet demonstrates the updated signature for timer callbacks used with SDL_AddTimer().  The callback function now receives a timerID parameter.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_39\n\nLANGUAGE: c\nCODE:\n```\nUint32 SDLCALL TimerCallback(void *userdata, SDL_TimerID timerID, Uint32 interval);\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL Assertions (CMake)\nDESCRIPTION: This snippet configures the SDL_ASSERTIONS option, allowing selection of different levels of internal sanity checks. The option accepts string values like \"auto\", \"disabled\", \"release\", \"enabled\", or \"paranoid\".\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\noption_string(SDL_ASSERTIONS \"Enable internal sanity checks (auto/disabled/release/enabled/paranoid)\" \"auto\")\n```\n\n----------------------------------------\n\nTITLE: udev rule example for Saitek Pro Flight Rudder Pedals\nDESCRIPTION: This snippet demonstrates udev rules for Saitek Pro Flight Rudder Pedals.  It sets the device mode to 0666 (read/write for all users) and sets the ID_INPUT_JOYSTICK environment variable to \"1\", fixing common joystick detection problems in SDL. It uses SUBSYSTEM, ATTRS (idProduct, idVendor), MODE, and ENV keys.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nSUBSYSTEM==\"input\", ATTRS{idProduct}==\"0763\", ATTRS{idVendor}==\"06a3\", MODE=\"0666\", ENV{ID_INPUT_JOYSTICK}=\"1\"\nSUBSYSTEM==\"input\", ATTRS{idProduct}==\"0764\", ATTRS{idVendor}==\"06a3\", MODE=\"0666\", ENV{ID_INPUT_JOYSTICK}=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Files to Android Device with ADB\nDESCRIPTION: This command leverages ADB to transfer a local file from the development machine to a specified location on the Android device. It's essential for deploying assets and configuration files to the device.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nadb push local_file remote_path_and_file\n```\n\n----------------------------------------\n\nTITLE: Finding and linking SDL3 in CMakeLists.txt (CMake)\nDESCRIPTION: This CMake snippet finds the SDL3 package using `find_package` and links it to the target `yourgame` using `target_link_libraries`. This allows you to use SDL3 functions in your C++ code.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SDL3 REQUIRED CONFIG)\ntarget_link_libraries(yourgame PRIVATE SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: Configure Clang-Tidy Integration\nDESCRIPTION: This snippet searches for the clang-tidy executable and, if found, sets up the clang-tidy command with ignored files, warnings-as-errors option (if SDL_WERROR is enabled), and compiler flags. It also sets the CMAKE_*_CLANG_TIDY variables and disables precompiled headers for shared sources. Finally, it disables analyze macros for stdlib sources.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_233\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_CLANG_TIDY)\n  find_program(CLANG_TIDY_BINARY clang-tidy)\n\n  if(CLANG_TIDY_BINARY)\n    set(HAVE_CLANG_TIDY ON)\n    get_clang_tidy_ignored_files(CLANG_TIDY_IGNORED_FILES)\n    set(CLANG_TIDY_COMMAND \"${CLANG_TIDY_BINARY}\" \"-extra-arg=-Wno-unknown-warning-option\" \"--line-filter=[${CLANG_TIDY_IGNORED_FILES}]\")\n    if(SDL_WERROR)\n      list(APPEND CLANG_TIDY_COMMAND \"--warnings-as-errors=*\")\n    endif()\n    set(CMAKE_C_CLANG_TIDY ${CLANG_TIDY_COMMAND})\n    set(CMAKE_CXX_CLANG_TIDY ${CLANG_TIDY_COMMAND})\n    set(CMAKE_OBJC_CLANG_TIDY ${CLANG_TIDY_COMMAND})\n    get_property(shared_sources TARGET SDL3-collector PROPERTY INTERFACE_SOURCES)\n    set_source_files_properties(${shared_sources} PROPERTIES SKIP_PRECOMPILE_HEADERS TRUE)\n    file(GLOB STDLIB_SOURCES \"${SDL3_SOURCE_DIR}/src/stdlib/*.c\")\n    set_property(SOURCE ${STDLIB_SOURCES} APPEND PROPERTY COMPILE_DEFINITIONS \"SDL_DISABLE_ANALYZE_MACROS\")\n  else()\n    set(HAVE_CLANG_TIDY OFF)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic Game Loop Structure in C\nDESCRIPTION: This code shows a typical game loop structure. It includes initialization, a main loop for handling events and updating the game state, and deinitialization at the end. This structure is common in game development.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-main-functions.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nint main(int argc, char **argv)\n{\n    initialize();\n    while (keep_running()) {\n        handle_new_events();\n        do_one_frame_of_stuff();\n    }\n    deinitialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for SDL3\nDESCRIPTION: This CMake snippet demonstrates how to include SDL3 support in a CMake project. It uses `find_package` to locate the SDL3 library and `target_link_libraries` to link the library to the target.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SDL3 REQUIRED CONFIG REQUIRED COMPONENTS SDL3)\ntarget_link_libraries(mygame PRIVATE SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: Configure SDL3 Shared Library CMake\nDESCRIPTION: This section configures properties for the shared SDL3 library (SDL3-shared), like the output name, position independent code, and link dependencies. Platform-specific configurations are applied for Windows, macOS, and Unix systems. This includes setting visibility options, linker flags, and handling framework-specific properties for macOS. Compatible Interface Properties are also set to enforce shared/static library usage and block linking to different major versions.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_244\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_SHARED)\n  set_target_properties(SDL3-shared PROPERTIES\n    OUTPUT_NAME \"SDL3\"\n    POSITION_INDEPENDENT_CODE TRUE\n    LINK_DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/src/dynapi/SDL_dynapi.sym\"\n    INTERFACE_LINK_DEPENDS \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/dynapi/SDL_dynapi.sym>\"\n    WINDOWS_EXPORT_ALL_SYMBOLS FALSE\n    DEFINE_SYMBOL \"DLL_EXPORT\"\n  )\n  if(HAVE_GCC_FVISIBILITY)\n    set_target_properties(SDL3-shared PROPERTIES\n      C_VISIBILITY_PRESET \"hidden\"\n      CXX_VISIBILITY_PRESET \"hidden\"\n      OBJC_VISIBILITY_PRESET \"hidden\"\n    )\n  endif()\n  if(NOT SDL_LIBC)\n    if(MSVC AND NOT MSVC_CLANG)\n      # Don't try to link with the default set of libraries.\n      # Note: The clang toolset for Visual Studio does not support /NODEFAULTLIB.\n      target_link_options(SDL3-shared PRIVATE \"/NODEFAULTLIB\")\n      if(SDL_CPU_ARM32)\n        # linking to msvcrt.lib avoid unresolved external symbols\n        # (__rt_sdiv, __rt_udiv, __rt_sdiv64, _rt_udiv64, __dtou64, __u64tod, __i64tos)\n        target_link_libraries(SDL3-shared PRIVATE msvcrt.lib)\n      endif()\n      find_library(HAVE_ONECORE_LIB NAMES \"onecore.lib\")\n      if(HAVE_ONECORE_LIB)\n        # SDL_malloc.c: __imp_MapViewOfFileNuma2 referenced in function MapViewOfFile2\n        target_link_libraries(SDL3-shared PRIVATE onecore.lib)\n      endif()\n      find_library(HAVE_VOLATILEACCESSU_LIB NAMES \"volatileaccessu.lib\")\n      if(HAVE_VOLATILEACCESSU_LIB)\n        # SDL_malloc.c : RtlSetVolatileMemory referenced in function RtlFillVolatileMemory\n        # SDL_malloc.c : RtlFillDeviceMemory referenced in function RtlZeroDeviceMemory\n        target_link_libraries(SDL3-shared PRIVATE volatileaccessu.lib)\n      endif()\n    endif()\n    if(HAS_Q_NO_USE_LIBIRC)\n      target_compile_options(SDL3-shared PRIVATE /Q_no-use-libirc)\n    endif()\n  endif()\n  if(APPLE)\n    cmake_minimum_required(VERSION 3.17)\n    set_target_properties(SDL3-shared PROPERTIES\n      MACOSX_RPATH TRUE\n      FRAMEWORK \"${SDL_FRAMEWORK}\"\n      SOVERSION \"${SDL_SO_VERSION_MAJOR}\"\n      MACHO_COMPATIBILITY_VERSION \"${SDL_DYLIB_COMPAT_VERSION}\"\n      MACHO_CURRENT_VERSION \"${SDL_DYLIB_CURRENT_VERSION}\"\n    )\n    if(SDL_FRAMEWORK)\n      set_target_properties(SDL3-shared PROPERTIES\n        PUBLIC_HEADER \"${SDL3_INCLUDE_FILES}\"\n        FRAMEWORK_VERSION \"${SDL_FRAMEWORK_VERSION}\"\n        MACOSX_FRAMEWORK_IDENTIFIER \"org.libsdl.SDL3\"\n        RESOURCE \"${SDL_FRAMEWORK_RESOURCES}\"\n      )\n    endif()\n  elseif(UNIX AND NOT ANDROID)\n    set_target_properties(SDL3-shared PROPERTIES\n      VERSION \"${SDL_SO_VERSION}\"\n      SOVERSION \"${SDL_SO_VERSION_MAJOR}\"\n    )\n  else()\n    if(WINDOWS OR CYGWIN)\n      set_target_properties(SDL3-shared PROPERTIES\n        PREFIX \"\"\n      )\n    endif()\n  endif()\n  target_link_libraries(SDL3-shared PRIVATE ${SDL_CMAKE_DEPENDS})\n  target_include_directories(SDL3-shared\n    PRIVATE\n      \"$<BUILD_INTERFACE:${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>>/build_config\"\n      \"$<BUILD_INTERFACE:${SDL3_SOURCE_DIR}/src>\"\n  )\n  target_link_libraries(SDL3-shared PUBLIC $<TARGET_NAME:SDL3::Headers>)\n  if(MINGW OR CYGWIN)\n    target_link_options(SDL3-shared PRIVATE -static-libgcc)\n  endif()\n  # Use `Compatible Interface Properties` to:\n  # - allow consumers to enforce a shared/static library\n  # - block linking to SDL libraries of different major version\n  set_property(TARGET SDL3-shared APPEND PROPERTY COMPATIBLE_INTERFACE_BOOL SDL3_SHARED)\n  set_property(TARGET SDL3-shared PROPERTY INTERFACE_SDL3_SHARED TRUE)\n  set_property(TARGET SDL3-shared APPEND PROPERTY COMPATIBLE_INTERFACE_STRING \"SDL_VERSION\")\n  set_property(TARGET SDL3-shared PROPERTY INTERFACE_SDL_VERSION \"SDL${SDL3_VERSION_MAJOR}\")\n  if(NOT CMAKE_VERSION VERSION_LESS \"3.16\")\n    target_precompile_headers(SDL3-shared PRIVATE \"<$<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:${PROJECT_SOURCE_DIR}/src/SDL_internal.h>\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking SDL3 in Android.mk (Makefile)\nDESCRIPTION: This snippet shows how to link the SDL3 shared libraries and include headers using ndk-build.  It also adds prefab modules to the import path.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_6\n\nLANGUAGE: makefile\nCODE:\n```\nLOCAL_SHARED_LIBRARIES := SDL3 SDL3-Headers\n```\n\nLANGUAGE: makefile\nCODE:\n```\n# https://google.github.io/prefab/build-systems.html\n# Add the prefab modules to the import path.\n$(call import-add-path,/out)\n```\n\n----------------------------------------\n\nTITLE: Adding UTF-8 Compile Options for MSVC\nDESCRIPTION: Adds compiler options to enforce UTF-8 encoding for source files when using the MSVC compiler. This ensures proper handling of non-ASCII characters within the source code.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_compile_options(\"$<$<C_COMPILER_ID:MSVC>:/utf-8>\")\nadd_compile_options(\"$<$<CXX_COMPILER_ID:MSVC>:/utf-8>\")\n```\n\n----------------------------------------\n\nTITLE: Enable AddressSanitizer\nDESCRIPTION: If SDL_ASAN is enabled, this snippet calls the asan_check_add_debug_flag and asan_check_add_debug_flag2 macros to enable various AddressSanitizer features, adding the appropriate compiler flags.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_231\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_ASAN)\n  asan_check_add_debug_flag2(\"address\")\n  asan_check_add_debug_flag(\"bool\")\n  asan_check_add_debug_flag(\"bounds\")\n  asan_check_add_debug_flag(\"enum\")\n  asan_check_add_debug_flag(\"float-cast-overflow\")\n  asan_check_add_debug_flag(\"float-divide-by-zero\")\n  asan_check_add_debug_flag(\"nonnull-attribute\")\n  asan_check_add_debug_flag(\"returns-nonnull-attribute\")\n  asan_check_add_debug_flag(\"signed-integer-overflow\")\n  asan_check_add_debug_flag(\"undefined\")\n  asan_check_add_debug_flag(\"vla-bound\")\n  asan_check_add_debug_flag(\"leak\")\n  # The object size sanitizer has no effect on unoptimized builds on Clang,\n  # but causes warnings.\n  if(NOT USE_CLANG OR CMAKE_BUILD_TYPE STREQUAL \"\")\n    asan_check_add_debug_flag(\"object-size\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Gradle dependencies for SDL3 AAR (Gradle)\nDESCRIPTION: This snippet adds the SDL3 Android Archive (.aar) file as a dependency in the app's build.gradle file, enabling the use of SDL3 in the project. It also enables prefab support.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n    /* ... */\n    buildFeatures {\n        prefab true\n    }\n}\ndependencies {\n    implementation files('libs/SDL3-X.Y.Z.aar') /* Replace with the filename of the actual SDL3-x.y.z.aar file you downloaded */\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries (CMake)\nDESCRIPTION: Links necessary libraries for Win32 native and MinGW builds. The linked libraries include kernel32, user32, gdi32, winmm, imm32, ole32, oleaut32, version, uuid, advapi32, setupapi, shell32.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_161\n\nLANGUAGE: CMake\nCODE:\n```\nsdl_link_dependency(base LIBS kernel32 user32 gdi32 winmm imm32 ole32 oleaut32 version uuid advapi32 setupapi shell32)\n```\n\n----------------------------------------\n\nTITLE: Unix Platform Configuration\nDESCRIPTION: This snippet configures SDL3 for Unix-like platforms, excluding Apple, RISCOS, and HAIKU. It primarily focuses on audio driver selection, utilizing specific drivers for NetBSD and QNX, and includes checks for OSS, ALSA, JACK, Pipewire, PulseAudio, and SNDIO. It also handles video configuration by checking for Raspberry Pi and Rockchip platforms and then checking for X11.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_134\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(UNIX AND NOT APPLE AND NOT RISCOS AND NOT HAIKU)\n  if(SDL_AUDIO)\n    if(NETBSD)\n        set(SDL_AUDIO_DRIVER_NETBSD 1)\n        sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/netbsd/*.c\")\n        set(HAVE_SDL_AUDIO TRUE)\n    elseif(QNX)\n        set(SDL_AUDIO_DRIVER_QNX 1)\n        sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/qnx/*.c\")\n        sdl_link_dependency(asound LIBS asound)\n        set(HAVE_SDL_AUDIO TRUE)\n    endif()\n    CheckOSS()\n    CheckALSA()\n    CheckJACK()\n    CheckPipewire()\n    CheckPulseAudio()\n    CheckSNDIO()\n  endif()\n\n  if(SDL_VIDEO)\n    # Need to check for Raspberry PI first and add platform specific compiler flags, otherwise the test for GLES fails!\n    CheckRPI()\n    # Need to check for ROCKCHIP platform and get rid of \"Can't window GBM/EGL surfaces on window creation.\"\n    CheckROCKCHIP()\n    CheckX11()\n```\n\n----------------------------------------\n\nTITLE: Emscripten Platform Configuration\nDESCRIPTION: This snippet configures SDL3 for the Emscripten platform. It includes setting compile options, globbing source files, and handling audio, filesystem, camera, joystick, power, locale, time, timer, and video configurations.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_133\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(EMSCRIPTEN)\n  # Hide noisy warnings that intend to aid mostly during initial stages of porting a new\n  # project. Uncomment at will for verbose cross-compiling -I/../ path info.\n  sdl_compile_options(PRIVATE \"-Wno-warn-absolute-paths\")\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/emscripten/*.c\")\n  set(HAVE_SDL_MAIN_CALLBACKS TRUE)\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/emscripten/*.c\")\n  set(HAVE_SDL_MISC TRUE)\n\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_EMSCRIPTEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/emscripten/*.c\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n\n  set(SDL_FILESYSTEM_EMSCRIPTEN 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/emscripten/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  if(SDL_CAMERA)\n    set(SDL_CAMERA_DRIVER_EMSCRIPTEN 1)\n    set(HAVE_CAMERA TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/emscripten/*.c\")\n  endif()\n\n  if(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_EMSCRIPTEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/emscripten/*.c\")\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  if(SDL_POWER)\n    set(SDL_POWER_EMSCRIPTEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/emscripten/*.c\")\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/emscripten/*.c\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  set(SDL_TIME_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/unix/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/unix/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  if(SDL_CLOCK_GETTIME)\n    set(HAVE_CLOCK_GETTIME 1)\n  endif()\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_EMSCRIPTEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/emscripten/*.c\")\n    set(HAVE_SDL_VIDEO TRUE)\n\n    #enable gles\n    if(SDL_OPENGLES)\n      set(HAVE_OPENGLES TRUE)\n      set(SDL_VIDEO_OPENGL_ES2 1)\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\n    endif()\n  endif()\n\n  CheckPTHREAD()\n  CheckLibUnwind()\n```\n\n----------------------------------------\n\nTITLE: C Main Loop Adaptation for Emscripten\nDESCRIPTION: This code snippet illustrates how to adapt a standard C main loop for use with Emscripten by utilizing `emscripten_set_main_loop`. It includes conditional compilation directives to handle both Emscripten and native builds. The code also demonstrates how to cancel the main loop when the game is no longer running.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-emscripten.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstatic void mainloop(void)   /* this will run often, possibly at the monitor's refresh rate */\n{\n    if (!game_is_still_running) {\n        deinitialize_the_game();\n        #ifdef __EMSCRIPTEN__\n        emscripten_cancel_main_loop();  /* this should \"kill\" the app. */\n        #else\n        exit(0);\n        #endif\n    }\n\n    check_for_new_input();\n    think_about_stuff();\n    draw_the_next_frame();\n}\n\nvoid main(void)\n{\n    initialize_the_game();\n    #ifdef __EMSCRIPTEN__\n    emscripten_set_main_loop(mainloop, 0, 1);\n    #else\n    while (1) { mainloop(); }\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Config File CMake\nDESCRIPTION: This snippet configures the `SDL3Config.cmake` file using `configure_package_config_file`, which substitutes variables in the input file (`cmake/SDL3Config.cmake.in`) to create the output file. It also creates a basic package version file for compatibility checks.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_251\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(cmake/SDL3Config.cmake.in SDL3Config.cmake\n  NO_SET_AND_CHECK_MACRO\n  PATH_VARS CMAKE_INSTALL_PREFIX\n  INSTALL_DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n)\nwrite_basic_package_version_file(\"${CMAKE_CURRENT_BINARY_DIR}/SDL3ConfigVersion.cmake\"\n  COMPATIBILITY AnyNewerVersion\n)\n```\n\n----------------------------------------\n\nTITLE: Using HIDAPI in a CMake Project\nDESCRIPTION: This snippet shows how to integrate HIDAPI into a CMake project using `find_package`. It finds the HIDAPI package and links it to the target executable.  It requires that HIDAPI is installed in a location where CMake can find it or that `hidapi_ROOT` is set.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nproject(my_application)\n\nadd_executable(my_application main.c)\n\nfind_package(hidapi REQUIRED)\ntarget_link_libraries(my_application PRIVATE hidapi::hidapi)\n```\n\n----------------------------------------\n\nTITLE: Minimal SDL Activity Class (Java)\nDESCRIPTION: This Java code provides a minimal example of extending SDLActivity for creating a custom activity in an SDL-based Android application. It's placed within the application's package directory under the src directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage com.gamemaker.game;\n\nimport org.libsdl.app.SDLActivity;\n\n/**\n * A sample wrapper class that just calls SDLActivity\n */\n\npublic class MyGame extends SDLActivity { }\n```\n\n----------------------------------------\n\nTITLE: Defining an add_sdl_test Function in CMake\nDESCRIPTION: This CMake function, `add_sdl_test`, defines how to add SDL tests.  It parses arguments, determines the command to run based on the target platform and properties (like `SDL_NONINTERACTIVE`), adds the test using `add_test`, and sets properties for timeout, environment, and dependencies. Additionally, it supports installing the test with a configuration file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_sdl_test TEST TARGET)\n    cmake_parse_arguments(ast \"INSTALL\" \"\" \"\" ${ARGN})\n    get_property(noninteractive TARGET ${TARGET} PROPERTY SDL_NONINTERACTIVE)\n    if(noninteractive)\n        if(EMSCRIPTEN)\n            set(command \"${PYTHON3_EXECUTABLE};${CMAKE_CURRENT_SOURCE_DIR}/emscripten/driver.py;--server;http://localhost:${SDLTEST_PORT};--browser;${SDLTEST_BROWSER}\")\n            if(SDLTEST_CHROME_BINARY)\n                list(APPEND command \"--chrome-binary;${SDLTEST_CHROME_BINARY}\")\n            endif()\n            list(APPEND command \"--;${TARGET}\")\n        else()\n            set(command ${TARGET})\n        endif()\n        get_property(noninteractive_arguments TARGET ${TARGET} PROPERTY SDL_NONINTERACTIVE_ARGUMENTS)\n        get_property(installed_arguments TARGET ${TARGET} PROPERTY SDL_INSTALLED_ARGUMENTS)\n        get_property(disable_threads_args TARGET ${TARGET} PROPERTY SDL_DISABLE_THREADS_ARGS)\n        get_property(uses_threads TARGET ${TARGET} PROPERTY SDL_THREADS)\n        if(noninteractive_arguments)\n            list(APPEND command ${noninteractive_arguments})\n        endif()\n        if(SDLTEST_TRACKMEM)\n            get_property(notrackmem TARGET ${TARGET} PROPERTY SDL_NOTRACKMEM)\n            if(NOT notrackmem)\n                list(APPEND command --trackmem)\n            endif()\n        endif()\n        if(EMSCRIPTEN)\n            list(APPEND command ${disable_threads_args})\n        endif()\n        add_test(\n            NAME ${TEST}\n            COMMAND ${command}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        )\n        if(WIN32 AND CMAKE_VERSION VERSION_GREATER_EQUAL \"3.27\")\n            set_property(TEST ${TEST} APPEND PROPERTY ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_RUNTIME_DLL_DIRS:${TARGET}>\")\n        endif()\n        if(NOT notrackmem)\n            set_property(TEST ${TEST} PROPERTY FAIL_REGULAR_EXPRESSION \"Total: [0-9]+\\.[0-9]+ Kb in [1-9][0-9]* allocations\")\n        endif()\n        set_tests_properties(${TEST} PROPERTIES ENVIRONMENT \"${TESTS_ENVIRONMENT}\")\n        if(EMSCRIPTEN AND uses_threads)\n            set_tests_properties(${TEST} PROPERTIES DISABLED 1)\n        endif()\n        get_property(noninteractive_timeout TARGET ${TARGET} PROPERTY SDL_NONINTERACTIVE_TIMEOUT)\n        if(NOT noninteractive_timeout)\n            set(noninteractive_timeout 10)\n        endif()\n        math(EXPR noninteractive_timeout \"${noninteractive_timeout}*${SDLTEST_TIMEOUT_MULTIPLIER}\")\n        set_tests_properties(${TEST} PROPERTIES TIMEOUT \"${noninteractive_timeout}\")\n        if(ast_INSTALL AND SDL_INSTALL_TESTS)\n            set(exe ${TARGET})\n            set(installedtestsdir \"${CMAKE_INSTALL_FULL_LIBEXECDIR}/installed-tests/SDL3\")\n            configure_file(template.test.in \"${exe}.test\" @ONLY)\n            install(\n                    FILES \"${CMAKE_CURRENT_BINARY_DIR}/${exe}.test\"\n                    DESTINATION ${CMAKE_INSTALL_DATADIR}/installed-tests/SDL3\n            )\n        endif()\n        if(TARGET pretest AND NOT \"${TARGET}\" MATCHES \"pretest\")\n            set_property(TEST ${TEST} APPEND PROPERTY DEPENDS pretest)\n        endif()\n    endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining add_sdl_example_executable Macro\nDESCRIPTION: This macro simplifies the process of adding SDL example executables. It parses arguments for source files and data files, creates the executable (or shared library on Android), sets compiler flags, links against SDL3, and handles platform-specific resource copying and linking options.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(add_sdl_example_executable TARGET)\n    cmake_parse_arguments(AST \"BUILD_DEPENDENT\" \"\" \"SOURCES;DATAFILES\" ${ARGN})\n    if(AST_UNPARSED_ARGUMENTS)\n        message(FATAL_ERROR \"Unknown argument(s): ${AST_UNPARSED_ARGUMENTS}\")\n    endif()\n    if(NOT AST_SOURCES)\n        message(FATAL_ERROR \"add_sdl_example_executable needs at least one source\")\n    endif()\n    set(EXTRA_SOURCES \"\")\n    if(AST_DATAFILES)\n        list(APPEND EXTRA_SOURCES ${DATAFILES})\n    endif()\n    if(ANDROID)\n        add_library(${TARGET} SHARED ${AST_SOURCES} ${EXTRA_SOURCES})\n    else()\n        add_executable(${TARGET} ${AST_SOURCES} ${EXTRA_SOURCES})\n    endif()\n    SDL_AddCommonCompilerFlags(${TARGET})\n    target_include_directories(${TARGET} PRIVATE \"${SDL3_SOURCE_DIR}/src/video/khronos\")\n    target_link_libraries(${TARGET} PRIVATE SDL3::${sdl_name_component})\n\n    list(APPEND SDL_EXAMPLE_EXECUTABLES ${TARGET})\n    if(AST_DATAFILES)\n        if(PSP OR PS2)\n            add_custom_command(TARGET ${TARGET} POST_BUILD\n                COMMAND ${CMAKE_COMMAND} ARGS -E make_directory $<TARGET_FILE_DIR:${TARGET}>/sdl-${TARGET}\n                COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different ${AST_DATAFILES} $<TARGET_FILE_DIR:${TARGET}>/sdl-${TARGET}\n                WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n            )\n        else()\n            add_dependencies(${TARGET} copy-sdl-example-resources)\n        endif()\n        if(APPLE)\n            # Make sure resource files get installed into macOS/iOS .app bundles.\n            set_target_properties(${TARGET} PROPERTIES RESOURCE \"${AST_DATAFILES}\")\n        endif()\n        if(EMSCRIPTEN)\n            foreach(res IN LISTS AST_DATAFILES)\n                get_filename_component(res_name \"${res}\" NAME)\n                target_link_options(${TARGET} PRIVATE \"SHELL:--embed-file ${res}@${res_name}\")\n            endforeach()\n        endif()\n        set_property(TARGET ${TARGET} APPEND PROPERTY ADDITIONAL_CLEAN_FILES \"$<TARGET_FILE_DIR:${TARGET}>/$<JOIN:${AST_DATAFILES},$<SEMICOLON>$<TARGET_FILE_DIR:${TARGET}>/>\")\n    endif()\n\n    if(WINDOWS)\n        # CET support was added in VS 16.7\n        if(MSVC_VERSION GREATER 1926 AND CMAKE_GENERATOR_PLATFORM MATCHES \"Win32|x64\")\n            set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" -CETCOMPAT\")\n        endif()\n    elseif(PSP)\n        target_link_libraries(${TARGET} PRIVATE GL)\n    elseif(EMSCRIPTEN)\n        set_property(TARGET ${TARGET} PROPERTY SUFFIX \".html\")\n        target_link_options(${TARGET} PRIVATE -sALLOW_MEMORY_GROWTH=1)\n    endif()\n\n    if(OPENGL_FOUND)\n        target_compile_definitions(${TARGET} PRIVATE HAVE_OPENGL)\n    endif()\n\n    # FIXME: only add \"${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>\" + include paths of external dependencies\n    target_include_directories(${TARGET} PRIVATE \"$<TARGET_PROPERTY:SDL3::${sdl_name_component},INCLUDE_DIRECTORIES>\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Setting Render Driver Options (CMake)\nDESCRIPTION: This snippet configures options for enabling various render drivers (Direct3D 9/11/12, Metal, SDL_GPU, Vulkan). These options depend on SDL_RENDER being enabled and the corresponding graphics API being available.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_56\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_RENDER_D3D          \"Enable the Direct3D 9 render driver\" ON \"SDL_RENDER;SDL_DIRECTX\" OFF)\ndep_option(SDL_RENDER_D3D11        \"Enable the Direct3D 11 render driver\" ON \"SDL_RENDER;SDL_DIRECTX\" OFF)\ndep_option(SDL_RENDER_D3D12        \"Enable the Direct3D 12 render driver\" ON \"SDL_RENDER;SDL_DIRECTX\" OFF)\ndep_option(SDL_RENDER_METAL        \"Enable the Metal render driver\" ON \"SDL_RENDER;${APPLE}\" OFF)\ndep_option(SDL_RENDER_GPU          \"Enable the SDL_GPU render driver\" ON \"SDL_RENDER;SDL_GPU\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration CMake\nDESCRIPTION: This section configures the HIDAPI library based on the operating system. It handles Windows, macOS, and Linux/NetBSD differently. For Windows and macOS, it adds a subdirectory with platform-specific code and sets an export alias. For Linux and NetBSD, it allows configuring with libusb and/or hidraw/netbsd.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    target_include_directories(hidapi_include INTERFACE\n        \"$<BUILD_INTERFACE:${PROJECT_ROOT}/windows>\"\n    )\n    add_subdirectory(\"${PROJECT_ROOT}/windows\" windows)\n    set(EXPORT_ALIAS winapi)\n    list(APPEND EXPORT_COMPONENTS winapi)\nelif(APPLE)\n    target_include_directories(hidapi_include INTERFACE\n        \"$<BUILD_INTERFACE:${PROJECT_ROOT}/mac>\"\n    )\n    add_subdirectory(\"${PROJECT_ROOT}/mac\" mac)\n    set(EXPORT_ALIAS darwin)\n    list(APPEND EXPORT_COMPONENTS darwin)\n    if(NOT BUILD_SHARED_LIBS)\n        set(HIDAPI_NEED_EXPORT_THREADS TRUE)\n    endif()\nelse()\n    if(NOT DEFINED HIDAPI_WITH_LIBUSB)\n        set(HIDAPI_WITH_LIBUSB ON)\n    endif()\n    if(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n        if(NOT DEFINED HIDAPI_WITH_HIDRAW)\n            set(HIDAPI_WITH_HIDRAW ON)\n        endif()\n        if(HIDAPI_WITH_HIDRAW)\n            add_subdirectory(\"${PROJECT_ROOT}/linux\" linux)\n            list(APPEND EXPORT_COMPONENTS hidraw)\n            set(EXPORT_ALIAS hidraw)\n            if(NOT BUILD_SHARED_LIBS)\n                set(HIDAPI_NEED_EXPORT_THREADS TRUE)\n                set(HIDAPI_NEED_EXPORT_LIBUDEV TRUE)\n            endif()\n        endif()\n    elseif(CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n        if(NOT DEFINED HIDAPI_WITH_NETBSD)\n            set(HIDAPI_WITH_NETBSD ON)\n        endif()\n        if(HIDAPI_WITH_NETBSD)\n            add_subdirectory(\"${PROJECT_ROOT}/netbsd\" netbsd)\n            list(APPEND EXPORT_COMPONENTS netbsd)\n            set(EXPORT_ALIAS netbsd)\n            if(NOT BUILD_SHARED_LIBS)\n                set(HIDAPI_NEED_EXPORT_THREADS TRUE)\n            endif()\n        endif()\n    else()\n        set(HIDAPI_WITH_LIBUSB ON)\n    endif()\n    if(HIDAPI_WITH_LIBUSB)\n        target_include_directories(hidapi_include INTERFACE\n            \"$<BUILD_INTERFACE:${PROJECT_ROOT}/libusb>\"\n        )\n        if(NOT DEFINED HIDAPI_NO_ICONV)\n            set(HIDAPI_NO_ICONV OFF)\n        endif()\n        add_subdirectory(\"${PROJECT_ROOT}/libusb\" libusb)\n        list(APPEND EXPORT_COMPONENTS libusb)\n        if(NOT EXPORT_ALIAS)\n            set(EXPORT_ALIAS libusb)\n        endif()\n        if(NOT BUILD_SHARED_LIBS)\n            set(HIDAPI_NEED_EXPORT_THREADS TRUE)\n            if(NOT TARGET usb-1.0)\n                set(HIDAPI_NEED_EXPORT_LIBUSB TRUE)\n            endif()\n        endif()\n    elseif(NOT TARGET hidapi_hidraw)\n        message(FATAL_ERROR \"Select at least one option to build: HIDAPI_WITH_LIBUSB or HIDAPI_WITH_HIDRAW\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining SDL3 Project\nDESCRIPTION: Defines the SDL3 project, specifying the languages used (C), the version number (3.3.0), and handles the case where the current source directory matches the project source directory.  This ensures the main project flag is correctly set.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(SDL3 LANGUAGES C VERSION \"3.3.0\")\n\nif(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)\n  set(SDL3_MAINPROJECT ON)\nelse()\n  set(SDL3_MAINPROJECT OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Info.plist Bluetooth Usage Description (iOS)\nDESCRIPTION: This snippet shows how to add a description for Bluetooth usage to the Info.plist file. This is necessary to request permission from the user to access Bluetooth hardware for game controllers when using SDL_JOYSTICK_HIDAPI. The description explains why the app needs Bluetooth access.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-ios.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSBluetoothPeripheralUsageDescription</key>\n<string>MyApp would like to remain connected to nearby bluetooth Game Controllers and Game Pads even when you're not using the app.</string>\n```\n\n----------------------------------------\n\nTITLE: Setting Vulkan Support Options (CMake)\nDESCRIPTION: This snippet configures options to enable Vulkan support and the Vulkan render driver. These options depend on SDL_VIDEO and SDL_RENDER being enabled, and the target platform being Android, Apple, Linux, FreeBSD, or Windows.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_58\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_VULKAN              \"Enable Vulkan support\" ON \"SDL_VIDEO;ANDROID OR APPLE OR LINUX OR FREEBSD OR WINDOWS\" OFF)\ndep_option(SDL_RENDER_VULKAN       \"Enable the Vulkan render driver\" ON \"SDL_RENDER;SDL_VULKAN\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL_build_config.h\nDESCRIPTION: This CMake snippet configures the `SDL_build_config.h` file in a two-step process.\n1. It replaces `#cmakedefine` and `@abc@` placeholders using `configure_file`.\n2. It generates the final `SDL_build_config.h` in a build-type-dependent folder using `file(GENERATE)`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_222\n\nLANGUAGE: CMake\nCODE:\n```\n# config variables may contain generator expression, so we need to generate SDL_build_config.h in 2 steps:\n# 1. replace all `#cmakedefine`'s and `@abc@`\nconfigure_file(\"${SDL3_SOURCE_DIR}/include/build_config/SDL_build_config.h.cmake\"\n  \"${SDL3_BINARY_DIR}/CMakeFiles/SDL_build_config.h.intermediate\")\n# 2. generate SDL_build_config.h in an build_type-dependent folder (which should be first in the include search path)\nfile(GENERATE\n  OUTPUT \"${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>/build_config/SDL_build_config.h\"\n  INPUT \"${SDL3_BINARY_DIR}/CMakeFiles/SDL_build_config.h.intermediate\"\n)\n```\n\n----------------------------------------\n\nTITLE: Minimal CMake Toolchain File for MinGW-w64\nDESCRIPTION: This CMake toolchain file configures CMake to use the MinGW-w64 toolchain for building Windows applications. It specifies the system name, processor, and the locations of the C, C++, and resource compilers, enabling cross-compilation for Windows targets.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-windows.md#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_SYSTEM_NAME Windows)\nset(CMAKE_SYSTEM_PROCESSOR x86_64)\n\nfind_program(CMAKE_C_COMPILER NAMES x86_64-w64-mingw32-gcc REQUIRED)\nfind_program(CMAKE_CXX_COMPILER NAMES x86_64-w64-mingw32-g++ REQUIRED)\nfind_program(CMAKE_RC_COMPILER NAMES x86_64-w64-mingw32-windres windres REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Installing evtest utility for Joystick Debugging\nDESCRIPTION: This command installs the `evtest` utility on Ubuntu/Debian systems. `evtest` is used to list and test input devices, including joysticks, which is helpful in diagnosing joystick detection problems with SDL.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install evtest\n```\n\n----------------------------------------\n\nTITLE: macOS/iOS/tvOS Framework Configuration (CMake)\nDESCRIPTION: This snippet configures SDL frameworks for macOS, iOS, and tvOS targets, setting up dependencies like Cocoa, Carbon, Foundation, and CoreVideo. It conditionally includes iOS-specific source files for main callbacks.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_172\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(APPLE)\n  # TODO: rework this all for proper macOS, iOS and Darwin support\n\n  # !!! FIXME: all the `if(IOS OR TVOS OR VISIONOS)` checks should get merged into one variable, so we're ready for the next platform (or just WatchOS).\n\n  # We always need these libs on macOS at the moment.\n  # !!! FIXME: we need Carbon for some very old API calls in\n  # !!! FIXME:  src/video/cocoa/SDL_cocoakeyboard.c, but we should figure out\n  # !!! FIXME:  how to dump those.\n  if(MACOS)\n    set(SDL_FRAMEWORK_COCOA 1)\n    set(SDL_FRAMEWORK_CARBON 1)\n    set(SDL_FRAMEWORK_UTTYPES 1)\n  endif()\n  set(SDL_FRAMEWORK_FOUNDATION 1)\n  set(SDL_FRAMEWORK_COREVIDEO 1)\n\n  # iOS can use a CADisplayLink for main callbacks. macOS just uses the generic one atm.\n  if(IOS OR TVOS OR VISIONOS OR WATCHOS)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/ios/*.m\")\n    set(HAVE_SDL_MAIN_CALLBACKS TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running rename_macros.py to update SDL macros\nDESCRIPTION: This shell command uses the `rename_macros.py` script to replace renamed or removed SDL3 macros.  It also adds fixme comments to further improve the code.  This helps to ensure compatibility with SDL3 and flags areas for manual review.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nrename_macros.py source_code_path\n```\n\n----------------------------------------\n\nTITLE: Setting HIDAPI Subsystem Options (CMake)\nDESCRIPTION: This snippet configures options to enable the HIDAPI subsystem, including support for libusb and joystick drivers. These options depend on the availability of HIDAPI and libusb.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_65\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_HIDAPI              \"Enable the HIDAPI subsystem\" ON \"NOT VISIONOS\" OFF)\ndep_option(SDL_HIDAPI_LIBUSB       \"Use libusb for low level joystick drivers\" ON SDL_HIDAPI_LIBUSB_AVAILABLE OFF)\ndep_option(SDL_HIDAPI_LIBUSB_SHARED \"Dynamically load libusb support\" ON \"SDL_HIDAPI_LIBUSB;SDL_DEPS_SHARED\" OFF)\ndep_option(SDL_HIDAPI_JOYSTICK     \"Use HIDAPI for low level joystick drivers\" ON SDL_HIDAPI OFF)\ndep_option(SDL_VIRTUAL_JOYSTICK    \"Enable the virtual-joystick driver\" ON SDL_HIDAPI OFF)\n```\n\n----------------------------------------\n\nTITLE: Implementing Removed Functions: SDL_CreateRGBSurfaceWithFormatFrom\nDESCRIPTION: This code shows how to implement `SDL_CreateRGBSurfaceWithFormatFrom` using `SDL_CreateSurfaceFrom`. It allows to migrate from SDL2 to SDL3 and still use same function as before.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface *SDL_CreateRGBSurfaceWithFormatFrom(void *pixels, int width, int height, int depth, int pitch, Uint32 format)\n{\n    return SDL_CreateSurfaceFrom(width, height, format, pixels, pitch);\n}\n```\n\n----------------------------------------\n\nTITLE: Add SDL3 Static Library CMake\nDESCRIPTION: This code block handles the creation of the SDL3 static library.  It mirrors the shared library block, but creates a static library instead. It first adds the library using `add_library` with the STATIC keyword. Then, it creates an alias for the library.  Common compiler flags are added using `SDL_AddCommonCompilerFlags`. Finally, it sets the C standard to c_std_99 if supported, otherwise it issues a warning.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_77\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_STATIC)\n  add_library(SDL3-static STATIC)\n  add_library(SDL3::SDL3-static ALIAS SDL3-static)\n  SDL_AddCommonCompilerFlags(SDL3-static)\n  if (\"c_std_99\" IN_LIST CMAKE_C_COMPILE_FEATURES)\n    target_compile_features(SDL3-static PRIVATE c_std_99)\n  else()\n    message(WARNING \"target_compile_features does not know c_std_99 for C compiler\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Macro for SDL Subsystem\nDESCRIPTION: Defines a macro `define_sdl_subsystem` to easily create options for enabling or disabling SDL subsystems. This macro parses arguments and defines options for each subsystem, including dependencies.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(define_sdl_subsystem _name)\n  cmake_parse_arguments(\"_ds\" \"\" \"\" \"DEPS\" ${ARGN})\n  string(TOUPPER ${_name} _uname)\n  if(NOT DEFINED SDL_${_uname}_DEFAULT)\n    set(SDL_${_uname}_DEFAULT ON)\n  endif()\n  if(_ds_DEPS)\n    cmake_dependent_option(SDL_${_uname} \"Enable the ${_name} subsystem\" \"${SDL_${_uname}_DEFAULT}\" \"${_ds_DEPS}\" OFF)\n  else()\n    option(SDL_${_uname} \"Enable the ${_name} subsystem\" \"${SDL_${_uname}_DEFAULT}\")\n  endif()\n  list(APPEND SDL_SUBSYSTEMS \"${_name}\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for SDL and Emscripten\nDESCRIPTION: This CMakeLists.txt configures a project to use SDL with Emscripten. It sets the output directories, includes the SDL source code, adds Emscripten-specific settings, creates the executable, and links to the SDL3 library. The `EMSCRIPTEN` check ensures that an HTML webpage is generated when building for web targets.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-emscripten.md#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(hello)\n\n# set the output directory for built objects.\n# This makes sure that the dynamic library goes into the build directory automatically.\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/$<CONFIGURATION>\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/$<CONFIGURATION>\")\n\n# This assumes the SDL source is available in vendored/SDL\nadd_subdirectory(vendored/SDL EXCLUDE_FROM_ALL)\n\n# on Web targets, we need CMake to generate a HTML webpage. \nif(EMSCRIPTEN)\n  set(CMAKE_EXECUTABLE_SUFFIX \".html\" CACHE INTERNAL \"\")\nendif()\n\n# Create your game executable target as usual\nadd_executable(hello WIN32 hello.c)\n\n# Link to the actual SDL3 library.\ntarget_link_libraries(hello PRIVATE SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring FFmpeg for SDL3 Test\nDESCRIPTION: This snippet uses CMake's `find_package` to locate the FFmpeg library with specified components (AVCODEC, AVFORMAT, AVUTIL, SWSCALE). If found, it checks for specific AVFrame and AVVulkanFramesContext members using check_struct_has_member. It configures the testffmpeg executable with FFmpeg libraries, include directories, and platform-specific linking options.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(FFmpeg_FIND_COMPONENTS AVCODEC AVFORMAT AVUTIL SWSCALE)\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/../cmake/FindFFmpeg.cmake\")\nif(FFmpeg_FOUND)\n    cmake_push_check_state()\n    list(APPEND CMAKE_REQUIRED_INCLUDES \"${FFmpeg_AVUTIL_INCLUDE_DIRS}\")\n    list(APPEND CMAKE_REQUIRED_INCLUDES \"${SDL3_SOURCE_DIR}/src/video/khronos\")\n    check_struct_has_member(\"AVFrame\" \"ch_layout\" \"libavutil/frame.h\" LIBAVUTIL_AVFRAME_HAS_CH_LAYOUT)\n    check_struct_has_member(\"AVVulkanFramesContext\" \"format\" \"libavutil/hwcontext_vulkan.h\" LIBAVUTIL_AVFULKANFRAMESCONTEXT_HAS_FORMAT)\n    cmake_pop_check_state()\nendif()\nif(FFmpeg_FOUND AND LIBAVUTIL_AVFRAME_HAS_CH_LAYOUT)\n    add_sdl_test_executable(testffmpeg NO_C90 SOURCES testffmpeg.c testffmpeg_vulkan.c ${icon_bmp_header} DEPENDS generate-icon_bmp_header)\n    if(LIBAVUTIL_AVFULKANFRAMESCONTEXT_HAS_FORMAT)\n      target_compile_definitions(testffmpeg PRIVATE FFMPEG_VULKAN_SUPPORT)\n    endif()\n    if(APPLE)\n        target_link_options(testffmpeg PRIVATE \"-Wl,-framework,CoreVideo\")\n    endif()\n    if(TARGET OpenGL::EGL)\n        message(DEBUG \"Enabling EGL support in testffmpeg\")\n        target_link_libraries(testffmpeg PRIVATE OpenGL::EGL)\n        target_compile_definitions(testffmpeg PRIVATE HAVE_EGL)\n    endif()\n    target_include_directories(testffmpeg SYSTEM BEFORE PRIVATE ${SDL3_SOURCE_DIR}/src/video/khronos)\n    target_link_libraries(testffmpeg PRIVATE ${FFMPEG_LIBRARIES})\nelse()\n    message(STATUS \"Can't find ffmpeg 5.1.3 or newer, skipping testffmpeg\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Android Devices with ADB\nDESCRIPTION: This command uses the Android Debug Bridge (ADB) to list all connected Android devices. It's useful for verifying that the development environment can recognize the device.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nadb devices\n```\n\n----------------------------------------\n\nTITLE: Building Android APKs for SDL Examples (CMake)\nDESCRIPTION: This CMake snippet builds Android APKs for SDL examples.  It compiles resources, links them, compiles Java code, converts Java bytecode to Dalvik bytecode (DEX), adds native libraries, aligns and signs the APKs using SDL-specific CMake functions. It also creates custom targets for installing and running the APKs using ADB.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID AND TARGET SDL3::Jar)\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/../cmake/android\")\n    find_package(SdlAndroid MODULE)\n    if(SdlAndroid_FOUND)\n        set(apks \"\")\n        set(packages \"\")\n\n        include(SdlAndroidFunctions)\n        sdl_create_android_debug_keystore(SDL_example-debug-keystore)\n        sdl_android_compile_resources(SDL_example-resources RESFOLDER ${CMAKE_CURRENT_SOURCE_DIR}/../test/android/res)\n        add_custom_target(sdl-example-apks)\n        foreach(EXAMPLE ${SDL_EXAMPLE_EXECUTABLES})\n            set(ANDROID_MANIFEST_APP_NAME \"${EXAMPLE}\")\n            set(ANDROID_MANIFEST_LABEL \"${EXAMPLE}\")\n            set(ANDROID_MANIFEST_LIB_NAME \"$<TARGET_FILE_BASE_NAME:${EXAMPLE}>\")\n            set(ANDROID_MANIFEST_PACKAGE \"org.libsdl.sdl.example.${EXAMPLE}\")\n            set(generated_manifest_path \"${CMAKE_CURRENT_BINARY_DIR}/android/${EXAMPLE}-src/AndroidManifest.xml\")\n            string(REPLACE \".\" \"/\" JAVA_PACKAGE_DIR \"${ANDROID_MANIFEST_PACKAGE}\")\n            set(GENERATED_SRC_FOLDER \"${CMAKE_CURRENT_BINARY_DIR}/android/${EXAMPLE}-src\")\n            set(GENERATED_RES_FOLDER \"${GENERATED_SRC_FOLDER}/res\")\n            set(JAVA_PACKAGE_DIR \"${GENERATED_SRC_FOLDER}/${JAVA_PACKAGE_DIR}\")\n            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../test/android/cmake/SDLEntryTestActivity.java.cmake \"${JAVA_PACKAGE_DIR}/SDLEntryTestActivity.java\" @ONLY)\n            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../test/android/cmake/SDLTestActivity.java.cmake \"${JAVA_PACKAGE_DIR}/SDLTestActivity.java\" @ONLY)\n            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../test/android/cmake/res/values/strings.xml.cmake android/res/values/strings-${EXAMPLE}.xml @ONLY)\n            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../test/android/cmake/res/xml/shortcuts.xml.cmake \"${GENERATED_RES_FOLDER}/xml/shortcuts.xml\" @ONLY)\n            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../test/android/cmake/AndroidManifest.xml.cmake \"${generated_manifest_path}\" @ONLY)\n            file(GENERATE\n                OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/android/${EXAMPLE}-$<CONFIG>/res/values/strings.xml\"\n                INPUT \"${CMAKE_CURRENT_BINARY_DIR}/android/res/values/strings-${EXAMPLE}.xml\"\n            )\n\n            sdl_android_compile_resources(${EXAMPLE}-resources\n                RESOURCES\n                    \"${CMAKE_CURRENT_BINARY_DIR}/android/${EXAMPLE}-$<CONFIG>/res/values/strings.xml\"\n                    \"${GENERATED_RES_FOLDER}/xml/shortcuts.xml\"\n            )\n\n            sdl_android_link_resources(${EXAMPLE}-apk-linked\n                MANIFEST \"${generated_manifest_path}\"\n                PACKAGE ${ANDROID_MANIFEST_PACKAGE}\n                RES_TARGETS SDL_example-resources ${EXAMPLE}-resources\n                TARGET_SDK_VERSION 31\n            )\n\n            set(CMAKE_JAVA_COMPILE_FLAGS \"-encoding;utf-8\")\n            set(classes_path \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${EXAMPLE}-java.dir/classes\")\n            # Some CMake versions have a slow `cmake -E make_directory` implementation\n            if(NOT IS_DIRECTORY \"${classes_path}\")\n                execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory \"${classes_path}\")\n            endif()\n            set(OUT_JAR \"${CMAKE_CURRENT_BINARY_DIR}/${EXAMPLE}.jar\")\n            add_custom_command(\n                OUTPUT \"${OUT_JAR}\"\n                COMMAND ${CMAKE_COMMAND} -E rm -rf \"${classes_path}\"\n                COMMAND ${CMAKE_COMMAND} -E make_directory \"${classes_path}\"\n                COMMAND ${Java_JAVAC_EXECUTABLE}\n                    -source 1.8 -target 1.8\n                    -bootclasspath \"$<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>\"\n                    \"${JAVA_PACKAGE_DIR}/SDLEntryTestActivity.java\"\n                    \"${JAVA_PACKAGE_DIR}/SDLTestActivity.java\"\n                    $<TARGET_PROPERTY:${EXAMPLE}-apk-linked,JAVA_R>\n                    -cp \"$<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>:${SDL_ANDROID_PLATFORM_ANDROID_JAR}\"\n                    -d \"${classes_path}\"\n                COMMAND ${Java_JAR_EXECUTABLE} cf \"${OUT_JAR}\" -C \"${classes_path}\" .\n                DEPENDS $<TARGET_PROPERTY:${EXAMPLE}-apk-linked,OUTPUTS> \"$<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>\" \"${JAVA_PACKAGE_DIR}/SDLTestActivity.java\" \"${JAVA_PACKAGE_DIR}/SDLEntryTestActivity.java\"\n            )\n            add_custom_target(${EXAMPLE}-jar DEPENDS \"${OUT_JAR}\")\n            set_property(TARGET ${EXAMPLE}-jar PROPERTY OUTPUT \"${OUT_JAR}\")\n\n            set(dexworkdir \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${EXAMPLE}-dex.dir\")\n            # Some CMake versions have a slow `cmake -E make_directory` implementation\n            if(NOT IS_DIRECTORY \"${dexworkdir}\")\n                execute_process(COMMAND \"${CMAKE_COMMAND}\" -E make_directory \"${dexworkdir}\")\n            endif()\n            set(classes_dex_base_name \"classes.dex\")\n            set(classes_dex \"${dexworkdir}/${classes_dex_base_name}\")\n            add_custom_command(\n                OUTPUT \"${classes_dex}\"\n                COMMAND SdlAndroid::d8\n                    $<TARGET_PROPERTY:${EXAMPLE}-jar,OUTPUT>\n                    $<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>\n                    --lib \"${SDL_ANDROID_PLATFORM_ANDROID_JAR}\"\n                    --output \"${dexworkdir}\"\n                DEPENDS $<TARGET_PROPERTY:${EXAMPLE}-jar,OUTPUT> $<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>\n            )\n            add_custom_target(${EXAMPLE}-dex DEPENDS \"${classes_dex}\")\n            set_property(TARGET ${EXAMPLE}-dex PROPERTY OUTPUT \"${classes_dex}\")\n            set_property(TARGET ${EXAMPLE}-dex PROPERTY OUTPUT_BASE_NAME \"${classes_dex_base_name}\")\n\n            sdl_add_to_apk_unaligned(${EXAMPLE}-unaligned-apk\n                APK_IN ${EXAMPLE}-apk-linked\n                OUTDIR \"${CMAKE_CURRENT_BINARY_DIR}/intermediates\"\n                ASSETS ${RESOURCE_FILES}\n                NATIVE_LIBS SDL3::SDL3-shared ${EXAMPLE}\n                DEX ${EXAMPLE}-dex\n            )\n\n            sdl_apk_align(${EXAMPLE}-aligned-apk ${EXAMPLE}-unaligned-apk\n                OUTDIR \"${CMAKE_CURRENT_BINARY_DIR}/intermediates\"\n            )\n            sdl_apk_sign(${EXAMPLE}-apk ${EXAMPLE}-aligned-apk\n                KEYSTORE SDL_example-debug-keystore\n            )\n            add_dependencies(sdl-example-apks ${EXAMPLE}-apk)\n\n            if(TARGET SdlAndroid::adb)\n                add_custom_target(install-${EXAMPLE}\n                    COMMAND \"${CMAKE_COMMAND}\" -DACTION=install \"-DAPKS=$<TARGET_PROPERTY:${EXAMPLE}-apk,OUTPUT>\" -P \"${SDL3_SOURCE_DIR}/cmake/android/SdlAndroidScript.cmake\"\n                    DEPENDS \"${EXAMPLE}-apk\"\n                )\n                add_custom_target(start-${EXAMPLE}\n                    COMMAND \"${ADB_BIN}\" shell am start-activity -S \"${ANDROID_MANIFEST_PACKAGE}/.SDLTestActivity\"\n                )\n                add_custom_target(build-install-start-${EXAMPLE}\n                    COMMAND \"${CMAKE_COMMAND}\" -DACTION=build-install-run \"-DEXECUTABLES=${EXAMPLE}\" \"-DBUILD_FOLDER=${CMAKE_BINARY_DIR}\" -P \"${SDL3_SOURCE_DIR}/cmake/android/SdlAndroidScript.cmake\"\n                )\n            endif()\n\n            list(APPEND packages \"${ANDROID_MANIFEST_PACKAGE}\")\n            list(APPEND install_targets install-${EXAMPLE})\n        endforeach()\n\n        if(TARGET SdlAndroid::adb)\n            add_custom_target(install-sdl-example-apks\n                DEPENDS ${install_targets}\n                VERBATIM\n            )\n            add_custom_target(uninstall-sdl-example-apks\n                COMMAND \"${CMAKE_COMMAND}\" \"-DADB=$<TARGET_FILE:SdlAndroid::adb>\" -DACTION=uninstall \"-DPACKAGES=${packages}\" -P \"${SDL3_SOURCE_DIR}/cmake/android/SdlAndroidScript.cmake\"\n                VERBATIM\n            )\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking AVX2 Support in C\nDESCRIPTION: This snippet checks for AVX2 support using the `<immintrin.h>` header and AVX2 intrinsics (`_mm256_loadu_si256`, `_mm256_add_epi32`, `_mm256_storeu_si256`). It uses an `ints_add` function for integer addition using AVX2 instructions.  The `HAVE_AVX2` variable indicates the presence of AVX2 support.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_100\n\nLANGUAGE: C\nCODE:\n```\n#include <immintrin.h>\n      void ints_add(int *dest, int *a, int *b, unsigned size) {\n        for (; size >= 8; size -= 8, dest += 8, a += 8, b += 8) {\n          _mm256_storeu_si256((__m256i*)dest, _mm256_add_epi32(_mm256_loadu_si256((__m256i*)a), _mm256_loadu_si256((__m256i*)b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        ints_add((int*)0, (int*)0, (int*)0, 0);\n        return 0;\n      }\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Driver Options (CMake)\nDESCRIPTION: This snippet configures options to enable various audio drivers (disk writer, dummy, OSS, ALSA, JACK, Pipewire, PulseAudio, sndio). These options depend on whether SDL_AUDIO is enabled and the target operating system.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_DISKAUDIO           \"Support the disk writer audio driver\" ON \"SDL_AUDIO\" OFF)\ndep_option(SDL_DUMMYAUDIO          \"Support the dummy audio driver\" ON \"SDL_AUDIO\" OFF)\ndep_option(SDL_DUMMYVIDEO          \"Use dummy video driver\" ON \"SDL_VIDEO\" OFF)\ndep_option(SDL_IBUS                \"Enable IBus support\" ON \"${UNIX_SYS}\" OFF)\ndep_option(SDL_OPENGL              \"Include OpenGL support\" ON \"SDL_VIDEO;NOT IOS;NOT VISIONOS;NOT TVOS;NOT WATCHOS\" OFF)\ndep_option(SDL_OPENGLES            \"Include OpenGL ES support\" ON \"SDL_VIDEO;NOT VISIONOS;NOT TVOS;NOT WATCHOS\" OFF)\nset_option(SDL_PTHREADS            \"Use POSIX threads for multi-threading\" ${SDL_PTHREADS_DEFAULT})\ndep_option(SDL_PTHREADS_SEM        \"Use pthread semaphores\" ON \"SDL_PTHREADS\" OFF)\ndep_option(SDL_OSS                 \"Support the OSS audio API\" ${SDL_OSS_DEFAULT} \"UNIX_SYS OR RISCOS;SDL_AUDIO\" OFF)\ndep_option(SDL_ALSA                \"Support the ALSA audio API\" ${UNIX_SYS} \"SDL_AUDIO\" OFF)\ndep_option(SDL_ALSA_SHARED         \"Dynamically load ALSA audio support\" ON \"SDL_ALSA;SDL_DEPS_SHARED\" OFF)\ndep_option(SDL_JACK                \"Support the JACK audio API\" ${UNIX_SYS} \"SDL_AUDIO\" OFF)\ndep_option(SDL_JACK_SHARED         \"Dynamically load JACK audio support\" ON \"SDL_JACK;SDL_DEPS_SHARED\" OFF)\nset_option(SDL_PIPEWIRE            \"Use Pipewire audio\" ${UNIX_SYS})\ndep_option(SDL_PIPEWIRE_SHARED     \"Dynamically load Pipewire support\" ON \"SDL_PIPEWIRE;SDL_DEPS_SHARED\" OFF)\ndep_option(SDL_PULSEAUDIO          \"Use PulseAudio\" ${UNIX_SYS} \"SDL_AUDIO\" OFF)\ndep_option(SDL_PULSEAUDIO_SHARED   \"Dynamically load PulseAudio support\" ON \"SDL_PULSEAUDIO;SDL_DEPS_SHARED\" OFF)\ndep_option(SDL_SNDIO               \"Support the sndio audio API\" ${UNIX_SYS} \"SDL_AUDIO\" OFF)\ndep_option(SDL_SNDIO_SHARED        \"Dynamically load the sndio audio API\" ON \"SDL_SNDIO;SDL_DEPS_SHARED\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting DirectX Options (CMake)\nDESCRIPTION: This snippet configures options to enable DirectX for Windows audio/video. It depends on SDL_AUDIO or SDL_VIDEO being enabled and the platform being WINDOWS.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_DIRECTX             \"Use DirectX for Windows audio/video\" ON \"SDL_AUDIO OR SDL_VIDEO;WINDOWS\" OFF)\ndep_option(SDL_XINPUT              \"Use Xinput for Windows\" ON \"WINDOWS\" OFF)\ndep_option(SDL_WASAPI              \"Use the Windows WASAPI audio driver\" ON \"WINDOWS;SDL_AUDIO\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Run Executable (Standard)\nDESCRIPTION: Navigates to the 'build' directory and runs the compiled executable named 'hello'.  Assumes a standard build configuration where the executable is placed directly in the `build` directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-cmake.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd build\n./hello\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Install Options (CMake)\nDESCRIPTION: This snippet configures installation-related options for SDL3, including enabling installation, creating a binary archive using CPack, and installing documentation. It uses `set_option` and `cmake_dependent_option` to manage the options and their dependencies.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_INSTALL             \"Enable installation of SDL3\" ${SDL3_MAINPROJECT})\ncmake_dependent_option(SDL_INSTALL_CPACK \"Create binary SDL3 archive using CPack\" ${SDL3_MAINPROJECT} \"SDL_INSTALL\" ON)\ncmake_dependent_option(SDL_INSTALL_DOCS \"Install docs for SDL3\" OFF \"SDL_INSTALL;NOT SDL_FRAMEWORK\" ON)\nset_option(SDL_UNINSTALL           \"Enable uninstallation of SDL3\" ${SDL3_MAINPROJECT})\ncmake_dependent_option(SDL_PRESEED \"Preseed CMake cache to speed up configuration\" ON \"${SDL_PRESEED_AVAILABLE}\" OFF)\ncmake_dependent_option(SDL_RELOCATABLE \"Create relocatable SDL package\" ${SDL_RELOCATABLE_DEFAULT} \"SDL_INSTALL\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Add SDL3 Shared Library CMake\nDESCRIPTION: This code block handles the creation of the SDL3 shared library. It first adds the library using `add_library` with the SHARED keyword.  Then, it creates an alias for the library.  Common compiler flags are added using `SDL_AddCommonCompilerFlags`. Finally, it sets the C standard to c_std_99 if supported, otherwise it issues a warning.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_76\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_SHARED)\n  add_library(SDL3-shared SHARED)\n  add_library(SDL3::SDL3-shared ALIAS SDL3-shared)\n  SDL_AddCommonCompilerFlags(SDL3-shared)\n  if (\"c_std_99\" IN_LIST CMAKE_C_COMPILE_FEATURES)\n    target_compile_features(SDL3-shared PRIVATE c_std_99)\n  else()\n    message(WARNING \"target_compile_features does not know c_std_99 for C compiler\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Embedding Data Files with Emscripten\nDESCRIPTION: This snippet shows how to embed data files directly into the application using the `--embed-file` flag. This makes the file available at a specified path during runtime and is suitable for small files. This approach makes the embedded data available before the main() function runs, within MEMFS.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-emscripten.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nemcc -o index.html loopwave.c --embed-file ../test/sample.wav@/sounds/sample.wav\n```\n\n----------------------------------------\n\nTITLE: Running rename_symbols.py to update SDL symbols\nDESCRIPTION: This shell command uses the `rename_symbols.py` script to automatically rename SDL2 functions to their SDL3 counterparts in the source code. It simplifies the migration process by automating the renaming of symbols across the project.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nrename_symbols.py --all-symbols source_code_path\n```\n\n----------------------------------------\n\nTITLE: macOS CMake Configuration (Universal Framework)\nDESCRIPTION: Configures CMake to build a universal framework for macOS, supporting both x86_64 and arm64 architectures, with a deployment target of macOS 10.11. The SDL_FRAMEWORK option enables framework building.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DSDL_FRAMEWORK=ON -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=\"x86_64;arm64\" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11\n```\n\n----------------------------------------\n\nTITLE: Checking GCC Visibility Support in C\nDESCRIPTION: This snippet verifies if the compiler supports GCC visibility attributes (`__attribute__((visibility(...)))`). It defines functions with default and hidden visibility and checks for compilation errors. CMAKE_REQUIRED_FLAGS is set to ensure the compiler uses -fvisibility=hidden and -Werror.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_92\n\nLANGUAGE: C\nCODE:\n```\n\n      #if !defined(__GNUC__) || __GNUC__ < 4\n      #error SDL only uses visibility attributes in GCC 4 or newer\n      #endif\n      __attribute__((visibility(\"default\"))) int foo(void);\n      __attribute__((visibility(\"hidden\")))  int bar(void);\n      int foo(void) { return 0; }\n      int bar(void) { return 1; }\n      int main(void) { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Android Platform Configuration\nDESCRIPTION: This snippet configures SDL3 for the Android platform. It includes setting CMake module paths, globbing source files, setting properties, and handling audio, filesystem, haptic, joystick, loadso, power, locale, time, timer, sensor, camera, and video configurations.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_132\n\nLANGUAGE: cmake\nCODE:\n```\nif(ANDROID)\n  list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake/android\")\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/core/android/*.c\")\n  sdl_sources(\"${CMAKE_ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\")\n  set_property(SOURCE \"${CMAKE_ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -Wno-declaration-after-statement\")\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/android/*.c\")\n  set(HAVE_SDL_MISC TRUE)\n\n  # SDL_spinlock.c Needs to be compiled in ARM mode.\n  # There seems to be no better way currently to set the ARM mode.\n  # see: https://issuetracker.google.com/issues/62264618\n  # Another option would be to set ARM mode to all compiled files\n  cmake_push_check_state()\n  string(APPEND CMAKE_REQUIRED_FLAGS \" -Werror=unused-command-line-argument\")\n  check_c_compiler_flag(-marm HAVE_ARM_MODE)\n  cmake_pop_check_state()\n  if(HAVE_ARM_MODE)\n    set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/atomic/SDL_spinlock.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -marm\")\n    set_source_files_properties(src/atomic/SDL_spinlock.c PROPERTIES SKIP_PRECOMPILE_HEADERS 1)\n  endif()\n\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_OPENSLES 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/openslES/*.c\")\n\n    sdl_link_dependency(opensles LIBS ${ANDROID_DL_LIBRARY} OpenSLES)\n\n    set(SDL_AUDIO_DRIVER_AAUDIO 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/aaudio/*.c\")\n\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n\n  set(SDL_FILESYSTEM_ANDROID 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/android/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_POSIX 1)  # !!! FIXME: this might need something else for .apk data?\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  if(SDL_HAPTIC)\n    set(SDL_HAPTIC_ANDROID 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/android/*.c\")\n    set(HAVE_SDL_HAPTIC TRUE)\n  endif()\n\n  if(SDL_HIDAPI)\n    CheckHIDAPI()\n  endif()\n\n  if(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_ANDROID 1)\n    sdl_glob_sources(\n      \"${SDL3_SOURCE_DIR}/src/joystick/android/*.c\"\n    )\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  set(SDL_LOADSO_DLOPEN 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/loadso/dlopen/*.c\")\n  set(HAVE_SDL_LOADSO TRUE)\n\n  if(SDL_POWER)\n    set(SDL_POWER_ANDROID 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/android/*.c\")\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/android/*.c\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  set(SDL_TIME_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/unix/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/unix/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  if(SDL_SENSOR)\n    set(SDL_SENSOR_ANDROID 1)\n    set(HAVE_SDL_SENSORS TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/android/*.c\")\n  endif()\n\n  if(SDL_CAMERA)\n    set(SDL_CAMERA_DRIVER_ANDROID 1)\n    set(HAVE_CAMERA TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/android/*.c\")\n  endif()\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_ANDROID 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/android/*.c\")\n    set(HAVE_SDL_VIDEO TRUE)\n\n    # Core stuff\n    # find_library(ANDROID_DL_LIBRARY dl)\n    # FIXME failing dlopen https://github.com/android-ndk/ndk/issues/929\n    sdl_link_dependency(android_video LIBS dl log android)\n    sdl_compile_definitions(PRIVATE \"GL_GLEXT_PROTOTYPES\")\n\n    #enable gles\n    if(SDL_OPENGLES)\n      set(SDL_VIDEO_OPENGL_EGL 1)\n      set(HAVE_OPENGLES TRUE)\n      set(SDL_VIDEO_OPENGL_ES 1)\n      set(SDL_VIDEO_OPENGL_ES2 1)\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\n\n      sdl_link_dependency(opengles LIBS GLESv1_CM GLESv2)\n    endif()\n\n    if(SDL_VULKAN)\n      check_c_source_compiles(\"\n      #if defined(__ARM_ARCH) && __ARM_ARCH < 7\n      #error Vulkan doesn't work on this configuration\n      #endif\n      int main(int argc, char **argv) { return 0; }\n      \" VULKAN_PASSED_ANDROID_CHECKS)\n      if(VULKAN_PASSED_ANDROID_CHECKS)\n        set(SDL_VIDEO_VULKAN 1)\n        set(HAVE_VULKAN TRUE)\n        if(SDL_RENDER_VULKAN)\n          set(SDL_VIDEO_RENDER_VULKAN 1)\n          set(HAVE_RENDER_VULKAN TRUE)\n        endif()\n      endif()\n    endif()\n  endif()\n\n  CheckPTHREAD()\n  if(SDL_CLOCK_GETTIME)\n    set(HAVE_CLOCK_GETTIME 1)\n  endif()\n\n  if(SDL_ANDROID_JAR)\n    find_package(Java)\n    find_package(SdlAndroidPlatform MODULE)\n\n    if(Java_FOUND AND SdlAndroidPlatform_FOUND AND NOT CMAKE_VERSION VERSION_LESS \"3.19\")\n      include(UseJava)\n      set(path_android_jar \"${SDL_ANDROID_PLATFORM_ROOT}/android.jar\")\n      set(android_java_sources_root \"${SDL3_SOURCE_DIR}/android-project/app/src/main/java\")\n      file(GLOB SDL_JAVA_SOURCES \"${android_java_sources_root}/org/libsdl/app/*.java\")\n      set(CMAKE_JAVA_COMPILE_FLAGS \"-encoding;utf-8\")\n      add_jar(SDL3-jar\n        SOURCES ${SDL_JAVA_SOURCES}\n        INCLUDE_JARS \"${path_android_jar}\"\n        OUTPUT_NAME \"SDL3\"\n        VERSION \"${SDL3_VERSION}\"\n      )\n      set_property(TARGET SDL3-jar PROPERTY OUTPUT \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}.jar\")\n      add_library(SDL3__Jar INTERFACE)\n      add_library(SDL3::Jar ALIAS SDL3__Jar)\n      get_property(sdl3_jar_location TARGET SDL3-jar PROPERTY JAR_FILE)\n      set_property(TARGET SDL3__Jar PROPERTY JAR_FILE \"${sdl3_jar_location}\")\n      set(javasourcesjar \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}-sources.jar\")\n      string(REGEX REPLACE \"${android_java_sources_root}/\" \"\" sdl_relative_java_sources \"${SDL_JAVA_SOURCES}\")\n      add_custom_command(\n        OUTPUT \"${javasourcesjar}\"\n        COMMAND ${Java_JAR_EXECUTABLE} cf \"${javasourcesjar}\" ${sdl_relative_java_sources}\n        WORKING_DIRECTORY \"${android_java_sources_root}\"\n        DEPENDS ${SDL_JAVA_SOURCES}\n      )\n      add_custom_target(SDL3-javasources ALL DEPENDS \"${javasourcesjar}\")\n      if(SDL_INSTALL_DOCS)\n        set(javadocdir \"${SDL3_BINARY_DIR}/docs/javadoc\")\n        set(javadocjar \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}-javadoc.jar\")\n        set(javadoc_index_html \"${javadocdir}/index.html\")\n        add_custom_command(\n          OUTPUT \"${javadoc_index_html}\"\n          COMMAND ${CMAKE_COMMAND} -E rm -rf \"${javadocdir}\" \"${javadocjar}\"\n          COMMAND ${Java_JAVADOC_EXECUTABLE} -encoding utf8 -d \"${javadocdir}\"\n            -classpath \"${path_android_jar}\"\n            -author -use -version ${SDL_JAVA_SOURCES}\n          DEPENDS ${SDL_JAVA_SOURCES} \"${path_android_jar}\"\n        )\n        add_custom_command(\n          OUTPUT \"${javadocjar}\"\n          COMMAND ${Java_JAR_EXECUTABLE} -c -f \"${javadocjar}\"\n            -C \"${javadocdir}\" *\n          WORKING_DIRECTORY \"${javadocdir}\"\n          DEPENDS ${javadoc_index_html}\n        )\n        add_custom_target(SDL3-javadoc ALL DEPENDS \"${javadoc_index_html}\" \"${javadocjar}\")\n        set_property(TARGET SDL3-javadoc PROPERTY OUTPUT_DIR \"${javadocdir}\")\n      endif()\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: General Includes CMake\nDESCRIPTION: This block sets up the general include directories and compiler definitions for the SDL build. It defines the `USING_GENERATED_CONFIG_H` compiler definition and adds include directories for generated configuration headers, revision information, and the SDL source include directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_84\n\nLANGUAGE: cmake\nCODE:\n```\n# General includes\nsdl_compile_definitions(PRIVATE \"USING_GENERATED_CONFIG_H\")\nsdl_include_directories(\n  PRIVATE\n    \"${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>/build_config\"\n    \"${SDL3_BINARY_DIR}/include-revision\"\n    \"${SDL3_SOURCE_DIR}/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing SDL3 PC File CMake\nDESCRIPTION: This snippet configures and installs the `sdl3.pc` file, which is used by pkg-config to find SDL3. The installation destination depends on whether SDL is built as a framework.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_253\n\nLANGUAGE: CMake\nCODE:\n```\n##### sdl3.pc #####\n  configure_sdl3_pc()\n  if(NOT SDL_FRAMEWORK)\n    install(FILES ${SDL3_BINARY_DIR}/sdl3.pc DESTINATION \"${SDL_PKGCONFIG_INSTALLDIR}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: SDL Video Subsystem Configuration CMake\nDESCRIPTION: This snippet configures the SDL video subsystem, checking for the `SDL_DUMMYVIDEO` option. If enabled, it sets the corresponding video driver flags, globs the source files, and defines `HAVE_SDL_VIDEO`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_131\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_VIDEO)\n  if(SDL_DUMMYVIDEO)\n    set(SDL_VIDEO_DRIVER_DUMMY 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/dummy/*.c\")\n    set(HAVE_DUMMYVIDEO TRUE)\n    set(HAVE_SDL_VIDEO TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDL Test Executable Macro CMake\nDESCRIPTION: This macro, `add_sdl_test_executable`, simplifies the creation of SDL test executables.  It parses arguments, adds necessary dependencies, sets compiler flags, links libraries, and handles resource copying for various platforms. It defines properties for non-interactive tests, arguments, and timeouts.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_sdl_test_executable TARGET)\n    cmake_parse_arguments(AST \"BUILD_DEPENDENT;NONINTERACTIVE;NEEDS_RESOURCES;TESTUTILS;THREADS;NO_C90;MAIN_CALLBACKS;NOTRACKMEM\" \"\" \"DEPENDS;DISABLE_THREADS_ARGS;NONINTERACTIVE_TIMEOUT;NONINTERACTIVE_ARGS;INSTALLED_ARGS;SOURCES\" ${ARGN})\n    if(AST_UNPARSED_ARGUMENTS)\n        message(FATAL_ERROR \"Unknown argument(s): ${AST_UNPARSED_ARGUMENTS}\")\n    endif()\n    if(NOT AST_SOURCES)\n        message(FATAL_ERROR \"add_sdl_test_executable needs at least one source\")\n    endif()\n    if(AST_TESTUTILS)\n        list(APPEND AST_SOURCES $<TARGET_OBJECTS:sdltests_utils>)\n    endif()\n    set(EXTRA_SOURCES \"\")\n    if(AST_NEEDS_RESOURCES)\n        list(APPEND EXTRA_SOURCES ${RESOURCE_FILES})\n    endif()\n    if(ANDROID)\n        add_library(${TARGET} SHARED ${AST_SOURCES} ${EXTRA_SOURCES})\n    else()\n        add_executable(${TARGET} ${AST_SOURCES} ${EXTRA_SOURCES})\n    endif()\n    target_compile_definitions(${TARGET} PRIVATE HAVE_BUILD_CONFIG)\n    SDL_AddCommonCompilerFlags(${TARGET})\n    target_include_directories(${TARGET} PRIVATE \"${SDL3_SOURCE_DIR}/src/video/khronos\")\n    target_link_libraries(${TARGET} PRIVATE SDL3::SDL3_test SDL3::${sdl_name_component})\n    if(NOT AST_NO_C90 AND NOT SDL_CMAKE_PLATFORM MATCHES \"^(n3ds|ps2|psp)$\")\n        set_property(TARGET ${TARGET} PROPERTY C_STANDARD 90)\n        set_property(TARGET ${TARGET} PROPERTY C_EXTENSIONS FALSE)\n    endif()\n    if(AST_DEPENDS)\n        add_dependencies(${TARGET} ${AST_DEPENDS})\n    endif()\n\n    list(APPEND SDL_TEST_EXECUTABLES ${TARGET})\n    set_property(TARGET ${TARGET} PROPERTY SDL_NOTRACKMEM ${AST_NOTRACKMEM})\n    if(AST_NONINTERACTIVE)\n        set_property(TARGET ${TARGET} PROPERTY SDL_NONINTERACTIVE 1)\n    endif()\n    set_property(TARGET ${TARGET} PROPERTY SDL_DISABLE_THREADS_ARGS \"${AST_DISABLE_THREADS_ARGS}\")\n    set_property(TARGET ${TARGET} PROPERTY SDL_THREADS \"${AST_THREADS}\")\n    if(AST_NONINTERACTIVE_ARGS)\n        set_property(TARGET ${TARGET} PROPERTY SDL_NONINTERACTIVE_ARGUMENTS \"${AST_NONINTERACTIVE_ARGS}\")\n    endif()\n    if(AST_INSTALLED_ARGS)\n        set_property(TARGET ${TARGET} PROPERTY SDL_INSTALLED_ARGUMENTS \"${AST_INSTALLED_ARGS}\")\n    elseif(AST_NONINTERACTIVE_ARGS)\n        set_property(TARGET ${TARGET} PROPERTY SDL_INSTALLED_ARGUMENTS \"${AST_NONINTERACTIVE_ARGS}\")\n    endif()\n    if(AST_NONINTERACTIVE_TIMEOUT)\n        set_property(TARGET ${TARGET} PROPERTY SDL_NONINTERACTIVE_TIMEOUT \"${AST_NONINTERACTIVE_TIMEOUT}\")\n    endif()\n    if(AST_NEEDS_RESOURCES)\n        if(PSP OR PS2 OR N3DS)\n            add_custom_command(TARGET ${TARGET} POST_BUILD\n                COMMAND ${CMAKE_COMMAND} ARGS -E make_directory $<TARGET_FILE_DIR:${TARGET}>/sdl-${TARGET}\n                COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different ${RESOURCE_FILES} $<TARGET_FILE_DIR:${TARGET}>/sdl-${TARGET})\n        else()\n            add_dependencies(${TARGET} copy-sdl-test-resources)\n        endif()\n        if(APPLE)\n            # Make sure resource files get installed into macOS/iOS .app bundles.\n            set_target_properties(${TARGET} PROPERTIES RESOURCE \"${RESOURCE_FILES}\")\n        endif()\n        if(EMSCRIPTEN)\n            foreach(res IN LISTS RESOURCE_FILES)\n                get_filename_component(res_name \"${res}\" NAME)\n                target_link_options(${TARGET} PRIVATE \"SHELL:--embed-file ${res}@${res_name}\")\n                set_property(TARGET ${TARGET} APPEND PROPERTY LINK_DEPENDS \"${res}\")\n            endforeach()\n        endif()\n        set_property(TARGET ${TARGET} APPEND PROPERTY ADDITIONAL_CLEAN_FILES \"$<TARGET_FILE_DIR:${TARGET}>/$<JOIN:${RESOURCE_FILE_NAMES},$<SEMICOLON>$<TARGET_FILE_DIR:${TARGET}>/>\")\n    endif()\n    if(AST_BUILD_DEPENDENT)\n        target_include_directories(${TARGET} BEFORE PRIVATE $<TARGET_PROPERTY:SDL3::${sdl_name_component},INCLUDE_DIRECTORIES>)\n        target_include_directories(${TARGET} BEFORE PRIVATE ${SDL3_SOURCE_DIR}/src)\n        if(CMAKE_VERSION VERSION_GREATER_EQUAL \"3.20\")\n            target_include_directories(${TARGET} AFTER PRIVATE \"${SDL3_SOURCE_DIR}/include/build_config\")\n        endif()\n    endif()\n\n    if(WINDOWS)\n        # CET support was added in VS 16.7\n        if(MSVC_VERSION GREATER 1926 AND CMAKE_GENERATOR_PLATFORM MATCHES \"Win32|x64\")\n            set_property(TARGET ${TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" -CETCOMPAT\")\n        endif()\n    elseif(PSP)\n        target_link_libraries(${TARGET} PRIVATE GL)\n    elseif(EMSCRIPTEN)\n        set_property(TARGET ${TARGET} PROPERTY SUFFIX \".html\")\n        target_link_options(${TARGET} PRIVATE \"SHELL:--pre-js ${CMAKE_CURRENT_SOURCE_DIR}/emscripten/pre.js\")\n        target_link_options(${TARGET} PRIVATE \"-sEXIT_RUNTIME=1\")\n        set_property(TARGET ${TARGET} APPEND PROPERTY LINK_DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/emscripten/pre.js\")\n    endif()\n\n    if(OPENGL_FOUND)\n        target_compile_definitions(${TARGET} PRIVATE HAVE_OPENGL)\n    endif()\n\n    # FIXME: only add \"${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>\" + include paths of external dependencies\n    target_include_directories(${TARGET} PRIVATE \"$<TARGET_PROPERTY:SDL3::${sdl_name_component},INCLUDE_DIRECTORIES>\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Checking Device Permissions\nDESCRIPTION: This command attempts to read data from the joystick's event file (e.g., /dev/input/event/XX). If a permission error occurs, it indicates that a udev rule needs to be configured to allow access to the device.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncat /dev/input/event/XX\n```\n\n----------------------------------------\n\nTITLE: Adding Resource File for Shared Libraries\nDESCRIPTION: This conditional statement checks if `BUILD_SHARED_LIBS` is enabled. If it is, it appends `hidapi.rc` to the `SOURCES` list, indicating that a resource file should be included when building the shared library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n    list(APPEND SOURCES hidapi.rc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Find Threads Package\nDESCRIPTION: Finds the Threads package, which is required for multithreading support. REQUIRED specifies that the configuration should stop if the package is not found.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Macro: ASAN Check and Add Debug Flag (with Libraries)\nDESCRIPTION: This macro checks for AddressSanitizer support and appends appropriate flags to debug build configurations. It modifies CMAKE_REQUIRED_LIBRARIES during the check and restores them afterward, and sets the HAVE_ASAN variable if any ASAN flags are supported.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_230\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(asan_check_add_debug_flag2 ASAN_FLAG)\n  # for some sanitize flags we have to manipulate the CMAKE_REQUIRED_LIBRARIES:\n  # http://cmake.3232098.n2.nabble.com/CHECK-CXX-COMPILER-FLAG-doesn-t-give-correct-result-for-fsanitize-address-tp7600216p7600217.html\n\n  set(FLAG \"-fsanitize=${ASAN_FLAG}\")\n\n  cmake_push_check_state()\n  list(APPEND CMAKE_REQUIRED_LIBRARIES ${FLAG} asan)\n\n  check_c_compiler_flag (${FLAG} HAS_C_FLAG_${ASAN_FLAG})\n  if (HAS_C_FLAG_${ASAN_FLAG})\n    string(APPEND CMAKE_C_FLAGS_DEBUG \" ${FLAG}\")\n  endif()\n\n  if(CMAKE_CXX_COMPILER)\n    check_cxx_compiler_flag (${FLAG} HAS_CXX_FLAG_${ASAN_FLAG})\n    if (HAS_CXX_${ASAN_FLAG})\n      string(APPEND CMAKE_CXX_FLAGS_DEBUG \" ${FLAG}\")\n    endif()\n  endif()\n\n  cmake_pop_check_state()\n  if(HAS_C_${ASAN_FLAG} OR HAS_CXX_${ASAN_FLAG})\n    set(HAVE_ASAN ON)\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Installing SDL Build Dependencies on Fedora 35\nDESCRIPTION: This command installs SDL's build dependencies on Fedora 35, enabling full feature support. It employs yum to install packages such as gcc, git-core, make, cmake, and development libraries related to audio, graphics, input, and various system components.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install gcc git-core make cmake \\\nalsa-lib-devel pulseaudio-libs-devel nas-devel pipewire-devel \\\nlibX11-devel libXext-devel libXrandr-devel libXcursor-devel libXfixes-devel \\\nlibXi-devel libXScrnSaver-devel dbus-devel ibus-devel \\\nsystemd-devel mesa-libGL-devel libxkbcommon-devel mesa-libGLES-devel \\\nmesa-libEGL-devel vulkan-devel wayland-devel wayland-protocols-devel \\\nlibdrm-devel mesa-libgbm-devel libusb-devel libdecor-devel \\\npipewire-jack-audio-connection-kit-devel\n```\n\n----------------------------------------\n\nTITLE: Building SDL using CMake on macOS\nDESCRIPTION: This snippet shows how to build SDL using CMake from the command line on macOS. It creates a build directory, configures the build using CMake with a specified deployment target, builds the project, and installs it to the system.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-macos.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake .. -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13\ncmake --build .\nsudo cmake --install .\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Subsystems\nDESCRIPTION: Defines the available SDL subsystems using the `define_sdl_subsystem` macro. Each subsystem has its own enable/disable option, and some depend on other subsystems.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\ndefine_sdl_subsystem(Audio)\ndefine_sdl_subsystem(Video)\ndefine_sdl_subsystem(GPU DEPS SDL_VIDEO)\ndefine_sdl_subsystem(Render DEPS SDL_VIDEO)\ndefine_sdl_subsystem(Camera DEPS SDL_VIDEO)\ndefine_sdl_subsystem(Joystick)\ndefine_sdl_subsystem(Haptic)\ndefine_sdl_subsystem(Hidapi)\ndefine_sdl_subsystem(Power)\ndefine_sdl_subsystem(Sensor)\ndefine_sdl_subsystem(Dialog)\n```\n\n----------------------------------------\n\nTITLE: Installing CMake Targets CMake\nDESCRIPTION: This snippet installs various CMake targets for SDL3, specifying destinations for headers, libraries, and resources. It uses conditional installation based on `SDL_SHARED`, `SDL_STATIC`, and `SDL_TEST_LIBRARY` to install the appropriate targets. It handles both shared and static libraries, as well as framework installations.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_254\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS SDL3_Headers EXPORT SDL3headersTargets)\n\n  if(SDL_SHARED)\n    install(TARGETS SDL3-shared EXPORT SDL3sharedTargets\n      PUBLIC_HEADER DESTINATION \"${SDL_INSTALL_HEADERSDIR}\"\n      ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n      FRAMEWORK DESTINATION \".\"\n      RESOURCE DESTINATION \"${SDL_SDL_INSTALL_RESOURCEDIR}\"\n    )\n    if(MSVC)\n      SDL_install_pdb(SDL3-shared \"${CMAKE_INSTALL_BINDIR}\")\n    endif()\n  endif()\n\n  if(SDL_STATIC)\n    install(TARGETS SDL3-static EXPORT SDL3staticTargets\n      ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      FRAMEWORK DESTINATION \".\"\n      RESOURCE DESTINATION \"${SDL_SDLstatic_INSTALL_RESOURCEDIR}\"\n    )\n    if(MSVC)\n      SDL_install_pdb(SDL3-static \"${CMAKE_INSTALL_LIBDIR}\")\n    endif()\n  endif()\n\n  if(SDL_TEST_LIBRARY)\n    install(TARGETS SDL3_test EXPORT SDL3testTargets\n      ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      FRAMEWORK DESTINATION \".\"\n      RESOURCE DESTINATION \"${SDL_SDLtest_INSTALL_RESOURCEDIR}\"\n    )\n    if(MSVC)\n      SDL_install_pdb(SDL3_test \"${CMAKE_INSTALL_LIBDIR}\")\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Liburing Support Option (CMake)\nDESCRIPTION: This snippet configures an option to enable liburing support, which is a library for asynchronous I/O.  It is dependent on the UNIX_SYS variable, which indicates if the system is a Unix-like operating system. If it is, liburing support defaults to ON; otherwise, it's OFF.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_LIBURING            \"Enable liburing support\" ON \"${UNIX_SYS}\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Overriding Statically Linked SDL (Bash)\nDESCRIPTION: This bash command demonstrates how to override a statically linked SDL library with a newer version using the SDL3_DYNAMIC_API environment variable. This variable specifies the path to the desired SDL library, allowing the game to use it instead of the statically linked one.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-dynapi.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SDL3_DYNAMIC_API=/my/actual/libSDL3.so.0\n./MyGameThatIsStaticallyLinkedToSDL\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL Project with CMake\nDESCRIPTION: This CMakeLists.txt file configures the build process for an SDL-based game project. It specifies the minimum CMake version required, defines the project name as 'GAME', adds SDL as a subdirectory, and adds the game's source code directory ('src').\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/android-project/app/jni/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\n\nproject(GAME)\n\n# SDL sources are in a subfolder named \"SDL\"\nadd_subdirectory(SDL)\n\n# Compilation of companion libraries\n#add_subdirectory(SDL_image)\n#add_subdirectory(SDL_mixer)\n#add_subdirectory(SDL_ttf)\n\n# Your game and its CMakeLists.txt are in a subfolder named \"src\"\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Find and Link SDL3 Library with CMake\nDESCRIPTION: This snippet configures a CMake project to find and link the SDL3 library. It first attempts to use the SDL3 config package and falls back to manually finding the library and include directories if the config package is not available. If SDL3 cannot be found, it raises a fatal error.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/android-project/app/jni/src/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\n\nproject(my_app)\n\nif(NOT TARGET SDL3::SDL3)\n    find_package(SDL3 CONFIG)\nendif()\n\nif(NOT TARGET SDL3::SDL3)\n    find_library(SDL3_LIBRARY NAMES \"SDL3\")\n    find_path(SDL3_INCLUDE_DIR NAMES \"SDL3/SDL.h\")\n    add_library(SDL3::SDL3 UNKNOWN IMPORTED)\n    set_property(TARGET SDL3::SDL3 PROPERTY IMPORTED_LOCATION \"${SDL3_LIBRARY}\")\n    set_property(TARGET SDL3::SDL3 PROPERTY INTERFACE_INCLUDE_DIRECTORIES \"${SDL3_INCLUDE_DIR}\")\nendif()\n\nif(NOT TARGET SDL3::SDL3)\n    message(FATAL_ERROR \"Cannot find SDL3.\\n\\nPossible ways to fix this:\\n- Use a SDL3 Android aar archive, and configure gradle to use it: prefab is required.\\n- Add add_subdirectory(path/to/SDL) to your CMake script, and make sure a vendored SDL is present there.\\n\")\nendif()\n\nadd_library(main SHARED\n    YourSourceHere.c\n)\ntarget_link_libraries(main PRIVATE SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: Checking for Linux Video Device v2 Header\nDESCRIPTION: This snippet checks for the presence of the `linux/videodev2.h` header file. The check is essential for enabling camera support via Video4Linux2 (V4L2).  The `HAVE_LINUX_VIDEODEV2_H` variable will be set if compilation succeeds.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_137\n\nLANGUAGE: C\nCODE:\n```\n#include <linux/videodev2.h>\nint main(int argc, char** argv) { return 0; }\n```\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"\n          #include <linux/videodev2.h>\n          int main(int argc, char** argv) { return 0; }\" HAVE_LINUX_VIDEODEV2_H)\n```\n\n----------------------------------------\n\nTITLE: Installing Exported CMake Targets CMake\nDESCRIPTION: This snippet installs the exported CMake target files, specifying namespaces and destinations. It handles conditional installation based on `SDL_SHARED`, `SDL_STATIC`, and `SDL_TEST_LIBRARY` to install the appropriate target files. These files are used by other CMake projects to find and use SDL3.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_255\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(EXPORT SDL3headersTargets\n    FILE \"SDL3headersTargets.cmake\"\n    NAMESPACE SDL3::\n    DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n  )\n\n  if(SDL_SHARED)\n    install(EXPORT SDL3sharedTargets\n      FILE \"SDL3sharedTargets.cmake\"\n      NAMESPACE SDL3::\n      DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n    )\n  endif()\n\n  if(SDL_STATIC)\n    install(EXPORT SDL3staticTargets\n      FILE \"${SDL_SDLstatic_INSTALL_CMAKEFILENAME}\"\n      NAMESPACE SDL3::\n      DESTINATION \"${SDL_SDLstatic_INSTALL_CMAKEDIR}\"\n    )\n  endif()\n\n  if(SDL_TEST_LIBRARY)\n    install(EXPORT SDL3testTargets\n      FILE \"${SDL_SDLtest_INSTALL_CMAKEFILENAME}\"\n      NAMESPACE SDL3::\n      DESTINATION \"${SDL_SDLtest_INSTALL_CMAKEDIR}\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: SDL_AppInit Callback Function in C\nDESCRIPTION: This is the signature for the SDL_AppInit callback function. It is called once at the beginning of the application. It accepts command line arguments and can initialize application state. It returns a SDL_AppResult to indicate success, failure or continuation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-main-functions.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nSDL_AppResult SDL_AppInit(void **appstate, int argc, char **argv);\n```\n\n----------------------------------------\n\nTITLE: Setting Sanitizer and Analysis Options (CMake)\nDESCRIPTION: This snippet configures options to use AddressSanitizer for memory error detection and Ccache/Clang-tidy for speeding up builds and running static analysis.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_67\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_ASAN                \"Use AddressSanitizer to detect memory errors\" OFF)\nset_option(SDL_CCACHE              \"Use Ccache to speed up build\" OFF)\nset_option(SDL_CLANG_TIDY          \"Run clang-tidy static analysis\" OFF)\nset_option(SDL_GPU_DXVK            \"Build SDL_GPU with DXVK support\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Linking HIDAPI Target in CMake\nDESCRIPTION: This CMake command links the HIDAPI library to a target application named 'my_application'. It uses the alias 'hidapi::hidapi' provided by HIDAPI's CMake configuration. This line is meant to be used inside the CMakeLists.txt file for the host project.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(my_application PRIVATE hidapi::hidapi)\n```\n\n----------------------------------------\n\nTITLE: Setting Shared/Static Library Build Options (CMake)\nDESCRIPTION: This snippet configures options to build a shared or static version of the SDL library. These options depend on SDL_SHARED_AVAILABLE and SDL_STATIC_AVAILABLE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_69\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_dependent_option(SDL_SHARED \"Build a shared version of the library\" ${SDL_SHARED_DEFAULT} ${SDL_SHARED_AVAILABLE} OFF)\ncmake_dependent_option(SDL_STATIC \"Build a static version of the library\" ${SDL_STATIC_DEFAULT} ${SDL_STATIC_AVAILABLE} OFF)\noption(SDL_TEST_LIBRARY   \"Build the SDL3_test library\" ON)\n```\n\n----------------------------------------\n\nTITLE: Build All Test APKs (CMake)\nDESCRIPTION: This CMake command builds the APKs for all tests defined in the CMake project. It's a convenient way to build all test applications at once after configuring the project for Android.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target sdl-test-apks\n```\n\n----------------------------------------\n\nTITLE: Generating SMDH and 3DSX files for N3DS using CMake\nDESCRIPTION: This snippet generates SMDH and 3DSX files for each SDL example executable when building for the N3DS platform. It creates a directory for ROMFS files, copies resource files to that directory, and then iterates through the `SDL_EXAMPLE_EXECUTABLES` list, generating an SMDH file and a 3DSX file for each executable. It uses `ctr_generate_smdh` and `ctr_create_3dsx` which are custom CMake functions.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(N3DS)\n    set(ROMFS_DIR \"${CMAKE_CURRENT_BINARY_DIR}/romfs\")\n    file(MAKE_DIRECTORY \"${ROMFS_DIR}\")\n    file(COPY ${RESOURCE_FILES} DESTINATION \"${ROMFS_DIR}\")\n\n    foreach(APP ${SDL_EXAMPLE_EXECUTABLES})\n        get_target_property(TARGET_BINARY_DIR ${APP} BINARY_DIR)\n        set(SMDH_FILE \"${TARGET_BINARY_DIR}/${APP}.smdh\")\n        ctr_generate_smdh(\"${SMDH_FILE}\"\n            NAME \"SDL-${APP}\"\n            DESCRIPTION \"SDL3 Test suite\"\n            AUTHOR \"SDL3 Contributors\"\n            ICON \"${CMAKE_CURRENT_SOURCE_DIR}/../test/n3ds/logo48x48.png\"\n        )\n        ctr_create_3dsx(\n            ${APP}\n            ROMFS \"${ROMFS_DIR}\"\n            SMDH \"${SMDH_FILE}\"\n        )\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake path in build.gradle (Gradle)\nDESCRIPTION: This code snippet demonstrates how to configure the 'build.gradle' file to specify the path to the top-level CMakeLists.txt file for building native components with CMake.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\npath '../../CMakeLists.txt'\n```\n\n----------------------------------------\n\nTITLE: Configuring the .pc file\nDESCRIPTION: This snippet configures the hidapi-libusb.pc.in file, which is used for pkg-config.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/libusb/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nhidapi_configure_pc(\"${PROJECT_ROOT}/pc/hidapi-libusb.pc.in\")\n```\n\n----------------------------------------\n\nTITLE: Setting Libudev Support Option (CMake)\nDESCRIPTION: This snippet configures an option to enable libudev support, which is used for device detection on Linux systems. This is set to ON by default.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_66\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_LIBUDEV             \"Enable libudev support\" ON)\n```\n\n----------------------------------------\n\nTITLE: Converting Audio Samples in SDL3\nDESCRIPTION: This code snippet shows how to convert audio samples in SDL3 using SDL_ConvertAudioSamples, replacing the deprecated SDL_AudioCVT interface. It converts audio data from one format to another.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n    Uint8 *dst_data = NULL;\n    int dst_len = 0;\n    const SDL_AudioSpec src_spec = { src_format, src_channels, src_rate };\n    const SDL_AudioSpec dst_spec = { dst_format, dst_channels, dst_rate };\n    if (!SDL_ConvertAudioSamples(&src_spec, src_data, src_len, &dst_spec, &dst_data, &dst_len)) {\n        /* error */\n    }\n    do_something(dst_data, dst_len);\n    SDL_free(dst_data);\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Name Component in CMake\nDESCRIPTION: This snippet sets the `sdl_name_component` variable based on whether SDL examples should be linked as shared or static libraries. This variable is later used to link against the appropriate SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_EXAMPLES_LINK_SHARED)\n    set(sdl_name_component SDL3-shared)\nelse()\n    set(sdl_name_component SDL3-static)\nendif()\nset(HAVE_EXAMPLES_LINK_SHARED \"${SDL_EXAMPLES_LINK_SHARED}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: HIDAPI Package Detection\nDESCRIPTION: Finds the hidapi package, requiring version 0.12 or higher.  If the project is built standalone, it attempts to find the hidapi package.  If part of a larger hidapi build, it skips this step.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/hidtest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n    # hidtest is build as a standalone project\n\n    if(POLICY CMP0074)\n        # allow using hidapi_ROOT if CMake supports it\n        cmake_policy(SET CMP0074 NEW)\n    endif()\n\n    find_package(hidapi 0.12 REQUIRED)\n    message(STATUS \"Using HIDAPI: ${hidapi_VERSION}\")\nelse()\n    # hidtest is built as part of the main HIDAPI build\n    message(STATUS \"Building hidtest\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for clock_gettime in librt\nDESCRIPTION: This CMake snippet checks if the `clock_gettime` function exists in the `librt` (realtime) library. This function is often found in `librt` on systems that provide POSIX realtime extensions. The `check_library_exists` command attempts to link against `librt` and searches for the `clock_gettime` symbol. If found, `FOUND_CLOCK_GETTIME_LIBRT` is set, and the rt library is added as a dependency to link.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_144\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_library_exists(rt clock_gettime \"\" FOUND_CLOCK_GETTIME_LIBRT)\n```\n\n----------------------------------------\n\nTITLE: Define SDL Examples Build Options CMake\nDESCRIPTION: These lines define CMake options related to building the SDL examples. `set_option` creates the SDL_EXAMPLES option to enable or disable building the examples directory.  `dep_option` is used to create SDL_EXAMPLES_LINK_SHARED, which determines if examples are linked to the shared SDL library. The default value depends on whether SDL is being built as a shared or static library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_72\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_EXAMPLES           \"Build the examples directory\")\ndep_option(SDL_EXAMPLES_LINK_SHARED \"link examples to shared SDL library\" \"${SDL_SHARED}\" \"SDL_SHARED;SDL_STATIC\" \"${SDL_SHARED}\")\n```\n\n----------------------------------------\n\nTITLE: Setting D-Bus Support Option (CMake)\nDESCRIPTION: This snippet configures an option to enable D-Bus support. It is dependent on the UNIX_SYS variable, which indicates if the system is a Unix-like operating system. If it is, D-Bus support defaults to ON; otherwise, it's OFF.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_DBUS                \"Enable D-Bus support\" ON \"${UNIX_SYS}\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting GPU Sources\nDESCRIPTION: This CMake snippet conditionally sets the GPU-related source files based on the enabled rendering backends (D3D11, D3D12, Vulkan). It uses `sdl_glob_sources` to include all C files in the corresponding directories and sets the appropriate variables. It also handles the general GPU rendering flag.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_204\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_GPU)\n  if(HAVE_D3D11_H)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/gpu/d3d11/*.c\")\n    set(SDL_GPU_D3D11 1)\n    set(HAVE_SDL_GPU TRUE)\n  endif()\n  if(SDL_RENDER_D3D12)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/gpu/d3d12/*.c\")\n    set(SDL_GPU_D3D12 1)\n    set(HAVE_SDL_GPU TRUE)\n  endif()\n  if(SDL_VIDEO_VULKAN)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/gpu/vulkan/*.c\")\n    set(SDL_GPU_VULKAN 1)\n    set(HAVE_SDL_GPU TRUE)\n  endif()\n  if(SDL_RENDER_GPU)\n    set(SDL_VIDEO_RENDER_GPU 1)\n    set(HAVE_RENDER_GPU TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Config Files CMake\nDESCRIPTION: This snippet installs the generated configuration files (`SDL3Config.cmake`, `SDL3ConfigVersion.cmake`) and required CMake modules to the appropriate destination. It also installs header files if SDL is not a framework. Additionally installs the license.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_256\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n      ${CMAKE_CURRENT_BINARY_DIR}/SDL3Config.cmake\n      ${CMAKE_CURRENT_BINARY_DIR}/SDL3ConfigVersion.cmake\n      ${sdl_cmake_modules}\n    DESTINATION \"${SDL_SDL_INSTALL_REAL_CMAKEDIR}\"\n  )\n\n  if(NOT SDL_FRAMEWORK)\n    install(FILES ${SDL3_INCLUDE_FILES}\n      DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/SDL3\"\n    )\n    if(SDL_TEST_LIBRARY)\n      install(FILES ${SDL3_TEST_INCLUDE_FILES}\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/SDL3\"\n      )\n    endif()\n\n    install(FILES \"LICENSE.txt\" DESTINATION \"${SDL_INSTALL_LICENSEDIR}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Window Information (SDL_syswm.h) - Old Method (C)\nDESCRIPTION: This snippet shows how to access window information using the deprecated SDL_GetWindowWMInfo function. The code checks the operating system and retrieves the native window handle (HWND for Windows, NSWindow for macOS, Display/Window for X11, wl_display/wl_surface for Wayland, UIWindow for iOS).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_34\n\nLANGUAGE: c\nCODE:\n```\n    SDL_SysWMinfo info;\n    SDL_VERSION(&info.version);\n\n#if defined(__WIN32__)\n    HWND hwnd = NULL;\n    if (SDL_GetWindowWMInfo(window, &info) && info.subsystem == SDL_SYSWM_WINDOWS) {\n        hwnd = info.info.win.window;\n    }\n    if (hwnd) {\n        ...\n    }\n#elif defined(__MACOSX__)\n    NSWindow *nswindow = NULL;\n    if (SDL_GetWindowWMInfo(window, &info) && info.subsystem == SDL_SYSWM_COCOA) {\n        nswindow = (__bridge NSWindow *)info.info.cocoa.window;\n    }\n    if (nswindow) {\n        ...\n    }\n#elif defined(__LINUX__)\n    if (SDL_GetWindowWMInfo(window, &info)) {\n        if (info.subsystem == SDL_SYSWM_X11) {\n            Display *xdisplay = info.info.x11.display;\n            Window xwindow = info.info.x11.window;\n            if (xdisplay && xwindow) {\n                ...\n            }\n        } else if (info.subsystem == SDL_SYSWM_WAYLAND) {\n            struct wl_display *display = info.info.wl.display;\n            struct wl_surface *surface = info.info.wl.surface;\n            if (display && surface) {\n                ...\n            }\n        }\n    }\n#elif defined(__IPHONEOS__)\n    UIWindow *uiwindow = NULL;\n    if (SDL_GetWindowWMInfo(window, &info) && info.subsystem == SDL_SYSWM_UIKIT) {\n        uiwindow = (__bridge UIWindow *)info.info.uikit.window;\n    }\n    if (uiwindow) {\n        GLuint framebuffer = info.info.uikit.framebuffer;\n        GLuint colorbuffer = info.info.uikit.colorbuffer;\n        GLuint resolveFramebuffer = info.info.uikit.resolveFramebuffer;\n        ...\n    }\n#endif\n```\n\n----------------------------------------\n\nTITLE: Creating the hidapi_winapi Library\nDESCRIPTION: This command creates the `hidapi_winapi` library. It uses the previously defined `HIDAPI_PUBLIC_HEADERS` and `SOURCES` lists to specify the files that will be included in the library. The target is then linked to `hidapi_include`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(hidapi_winapi\n    ${HIDAPI_PUBLIC_HEADERS}\n    ${SOURCES}\n)\ntarget_link_libraries(hidapi_winapi\n    PUBLIC hidapi_include\n)\n```\n\n----------------------------------------\n\nTITLE: Install Target and Version Printing Options\nDESCRIPTION: Sets variables to enable install targets (`HIDAPI_INSTALL_TARGETS`) and printing the version information (`HIDAPI_PRINT_VERSION`).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(HIDAPI_INSTALL_TARGETS ON)\nset(HIDAPI_PRINT_VERSION ON)\n```\n\n----------------------------------------\n\nTITLE: Adding SDL Example Executables\nDESCRIPTION: This section uses the `add_sdl_example_executable` macro to add several SDL example executables, specifying their source files and any required data files. The examples cover rendering, audio, input, camera, pen, asyncio, and demo functionalities.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sdl_example_executable(renderer-clear SOURCES renderer/01-clear/clear.c)\nadd_sdl_example_executable(renderer-primitives SOURCES renderer/02-primitives/primitives.c)\nadd_sdl_example_executable(renderer-lines SOURCES renderer/03-lines/lines.c)\nadd_sdl_example_executable(renderer-points SOURCES renderer/04-points/points.c)\nadd_sdl_example_executable(renderer-rectangles SOURCES renderer/05-rectangles/rectangles.c)\nadd_sdl_example_executable(renderer-textures SOURCES renderer/06-textures/textures.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp)\nadd_sdl_example_executable(renderer-streaming-textures SOURCES renderer/07-streaming-textures/streaming-textures.c)\nadd_sdl_example_executable(renderer-rotating-textures SOURCES renderer/08-rotating-textures/rotating-textures.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp)\nadd_sdl_example_executable(renderer-scaling-textures SOURCES renderer/09-scaling-textures/scaling-textures.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp)\nadd_sdl_example_executable(renderer-geometry SOURCES renderer/10-geometry/geometry.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp)\nadd_sdl_example_executable(renderer-color-mods SOURCES renderer/11-color-mods/color-mods.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp)\nadd_sdl_example_executable(renderer-viewport SOURCES renderer/14-viewport/viewport.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp)\nadd_sdl_example_executable(renderer-cliprect SOURCES renderer/15-cliprect/cliprect.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp)\nadd_sdl_example_executable(renderer-read-pixels SOURCES renderer/17-read-pixels/read-pixels.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp)\nadd_sdl_example_executable(renderer-debug-text SOURCES renderer/18-debug-text/debug-text.c)\nadd_sdl_example_executable(renderer-affine-textures SOURCES renderer/19-affine-textures/affine-textures.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp)\nadd_sdl_example_executable(audio-simple-playback SOURCES audio/01-simple-playback/simple-playback.c)\nadd_sdl_example_executable(audio-simple-playback-callback SOURCES audio/02-simple-playback-callback/simple-playback-callback.c)\nadd_sdl_example_executable(audio-load-wav SOURCES audio/03-load-wav/load-wav.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.wav)\nadd_sdl_example_executable(audio-multiple-streams SOURCES audio/04-multiple-streams/multiple-streams.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.wav ${CMAKE_CURRENT_SOURCE_DIR}/../test/sword.wav)\nadd_sdl_example_executable(audio-planar-data SOURCES audio/05-planar-data/planar-data.c)\nadd_sdl_example_executable(input-joystick-polling SOURCES input/01-joystick-polling/joystick-polling.c)\nadd_sdl_example_executable(input-joystick-events SOURCES input/02-joystick-events/joystick-events.c)\nadd_sdl_example_executable(camera-read-and-draw SOURCES camera/01-read-and-draw/read-and-draw.c)\nadd_sdl_example_executable(pen-drawing-lines SOURCES pen/01-drawing-lines/drawing-lines.c)\nadd_sdl_example_executable(asyncio-load-bitmaps SOURCES asyncio/01-load-bitmaps/load-bitmaps.c DATAFILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/sample.bmp ${CMAKE_CURRENT_SOURCE_DIR}/../test/gamepad_front.bmp ${CMAKE_CURRENT_SOURCE_DIR}/../test/speaker.bmp ${CMAKE_CURRENT_SOURCE_DIR}/../test/icon2x.bmp)\nadd_sdl_example_executable(demo-snake SOURCES demo/01-snake/snake.c)\nadd_sdl_example_executable(demo-woodeneye-008 SOURCES demo/02-woodeneye-008/woodeneye-008.c)\nadd_sdl_example_executable(demo-infinite-monkeys SOURCES demo/03-infinite-monkeys/infinite-monkeys.c)\nadd_sdl_example_executable(demo-bytepusher SOURCES demo/04-bytepusher/bytepusher.c)\n```\n\n----------------------------------------\n\nTITLE: Handling Application Events (C)\nDESCRIPTION: This C code demonstrates how to handle SDL application events, such as termination, low memory, and background/foreground transitions. It uses a switch statement to process different event types and returns a boolean value to indicate whether the event should be added to the event queue.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nbool HandleAppEvents(void *userdata, SDL_Event *event)\n{\n    switch (event->type)\n    {\n    case SDL_EVENT_TERMINATING:\n        /* Terminate the app.\n           Shut everything down before returning from this function.\n        */\n        return false;\n    case SDL_EVENT_LOW_MEMORY:\n        /* You will get this when your app is paused and iOS wants more memory.\n           Release as much memory as possible.\n        */\n        return false;\n    case SDL_EVENT_WILL_ENTER_BACKGROUND:\n        /* Prepare your app to go into the background.  Stop loops, etc.\n           This gets called when the user hits the home button, or gets a call.\n\n           You should not make any OpenGL graphics calls or use the rendering API,\n           in addition, you should set the render target to NULL, if you're using\n           it, e.g. call SDL_SetRenderTarget(renderer, NULL).\n        */\n        return false;\n    case SDL_EVENT_DID_ENTER_BACKGROUND:\n        /* Your app is NOT active at this point. */\n        return false;\n    case SDL_EVENT_WILL_ENTER_FOREGROUND:\n        /* This call happens when your app is coming back to the foreground.\n           Restore all your state here.\n        */\n        return false;\n    case SDL_EVENT_DID_ENTER_FOREGROUND:\n        /* Restart your loops here.\n           Your app is interactive and getting CPU again.\n\n           You have access to the OpenGL context or rendering API at this point.\n           However, there's a chance (on older hardware, or on systems under heavy load),\n           where the graphics context can not be restored. You should listen for the\n           event SDL_EVENT_RENDER_DEVICE_RESET and recreate your OpenGL context and\n           restore your textures when you get it, or quit the app.\n        */\n        return false;\n    default:\n        /* No special processing, add it to the event queue */\n        return true;\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    SDL_SetEventFilter(HandleAppEvents, NULL);\n\n    ... run your main loop\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ninja Generator with CMake\nDESCRIPTION: This snippet demonstrates how to use the Ninja build system generator with CMake.  Ninja is often faster than Make or MSBuild. It configures the build using `cmake -GNinja <HIDAPI source dir>`, and then builds and installs the library using ninja commands directly.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd <build dir>\n# configure the build\ncmake -GNinja <HIDAPI source dir>\n# we know, that CMake has generated build files for Ninja,\n# so we can use `ninja` directly, instead of `cmake --build .`\nninja\n# install library\nninja install\n```\n\n----------------------------------------\n\nTITLE: Checking SSE Support in C\nDESCRIPTION: This snippet checks for SSE support using SSE intrinsics (`<xmmintrin.h>`, `_mm_loadu_ps`, `_mm_add_ps`, `_mm_storeu_ps`).  It defines a function `floats_add` to perform vector addition. The check result is stored in `HAVE_SSE`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_94\n\nLANGUAGE: C\nCODE:\n```\n#include <xmmintrin.h>\n      void floats_add(float *dest, float *a, float *b, unsigned size) {\n        for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n          _mm_storeu_ps(dest, _mm_add_ps(_mm_loadu_ps(a), _mm_loadu_ps (b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        floats_add((float*)0, (float*)0, (float*)0, 0);\n        return 0;\n      }\n```\n\n----------------------------------------\n\nTITLE: Thread Support Configuration (CMake)\nDESCRIPTION: This snippet sets the flags to use generic condition variables and read-write locks with a suffix, configures the Windows thread implementation, and includes the necessary source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_154\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_THREAD_GENERIC_COND_SUFFIX 1)\nset(SDL_THREAD_GENERIC_RWLOCK_SUFFIX 1)\nset(SDL_THREAD_WINDOWS 1)\nsdl_sources(\n  \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_syscond.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_sysrwlock.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_syscond_cv.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_sysmutex.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_sysrwlock_srw.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_syssem.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_systhread.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_systls.c\"\n)\n\nset(HAVE_SDL_THREADS TRUE)\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running SDL3 Program with GCC\nDESCRIPTION: This command compiles, links, and runs an SDL3 program using GCC. It specifies the include and library directories, links against the SDL3 library, sets the subsystem to Windows, copies the SDL3 DLL, and executes the compiled program. Replace `<version>` with the SDL3 version and `<arch>` with the detected architecture.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-mingw.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngcc hello.c -o hello.exe -I SDL3-<version>/<arch>/include -L SDL3-<version>/<arch>/lib -lSDL3 -mwindows \ncp SDL3-<version>/<arch>/bin/SDL3.dll SDL3.dll\n./hello.exe\n```\n\n----------------------------------------\n\nTITLE: Converting U16 Audio to S16 in SDL3 (C)\nDESCRIPTION: This function converts an unsigned 16-bit audio buffer (Uint16) to a signed 16-bit audio buffer (Sint16) in-place. It iterates through each sample, XORing it with 0x8000 to effectively change the unsigned value to a signed one. The function takes the buffer and number of samples as input and returns a pointer to the converted buffer.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n    /* this converts the buffer in-place. The buffer size does not change. */\n    Sint16 *audio_ui16_to_si16(Uint16 *buffer, const size_t num_samples)\n    {\n        size_t i;\n        const Uint16 *src = buffer;\n        Sint16 *dst = (Sint16 *) buffer;\n\n        for (i = 0; i < num_samples; i++) {\n            dst[i] = (Sint16) (src[i] ^ 0x8000);\n        }\n\n        return dst;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Checking for clock_gettime in libc\nDESCRIPTION: This CMake snippet checks if the `clock_gettime` function exists within the standard C library (libc). The `check_library_exists` command attempts to link against libc and searches for the `clock_gettime` symbol. If found, `FOUND_CLOCK_GETTIME_LIBC` will be set.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_143\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_library_exists(c clock_gettime \"\" FOUND_CLOCK_GETTIME_LIBC)\n```\n\n----------------------------------------\n\nTITLE: Installing SDL Build Dependencies on openSUSE Tumbleweed\nDESCRIPTION: This command installs the necessary build dependencies for SDL on openSUSE Tumbleweed. It uses zypper to install packages, including development libraries for unwinding, USB, Mesa OpenGL, xkbcommon, DRM, GBM, PipeWire, PulseAudio, sndio, and Mesa EGL.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper in libunwind-devel libusb-1_0-devel Mesa-libGL-devel libxkbcommon-devel libdrm-devel \\\nlibgbm-devel pipewire-devel libpulse-devel sndio-devel Mesa-libEGL-devel\n```\n\n----------------------------------------\n\nTITLE: Define SDL Installation Options CMake\nDESCRIPTION: These lines define CMake options related to installing test cases and linking tests to the shared SDL library. It uses `dep_option` to create CMake options with default values and dependencies. SDL_INSTALL_TESTS controls whether test cases are installed and SDL_TESTS_LINK_SHARED determines if tests are linked to a shared SDL library.  The timeout multiplier is also configured to account for slow machines.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_71\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_INSTALL_TESTS   \"Install test-cases\" OFF \"SDL_INSTALL;NOT SDL_FRAMEWORK\" OFF)\ndep_option(SDL_TESTS_LINK_SHARED \"link tests to shared SDL library\" \"${SDL_SHARED}\" \"SDL_SHARED;SDL_STATIC\" \"${SDL_SHARED}\")\nset(SDL_TESTS_TIMEOUT_MULTIPLIER \"1\" CACHE STRING \"Timeout multiplier to account for really slow machines\")\n```\n\n----------------------------------------\n\nTITLE: Checking for ID_INPUT_JOYSTICK udev variable\nDESCRIPTION: This command queries udev to retrieve information about the specified input device event. It checks if the ID_INPUT_JOYSTICK variable is set.  If it is not, a udev rule needs to be created to set this variable to '1'.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo udevadm info --query=all --name=input/eventXX\n```\n\n----------------------------------------\n\nTITLE: Passing custom compile options to compiler\nDESCRIPTION: This snippet illustrates how to pass custom compile options to the compiler when building SDL with CMake. This example is for GCC/Clang using -march=x86-64-v3.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncmake ~/sdl -DCMAKE_C_FLAGS=\"-march=x86-64-v3\" -DCMAKE_CXX_FLAGS=\"-march=x86-64-v3\"\n```\n\n----------------------------------------\n\nTITLE: SDL Relative Mode Setup in C\nDESCRIPTION: This code initializes SDL, creates a window, enables relative mouse mode for the window, and then enters a loop to poll for events until the user quits.  It utilizes SDL_Init, SDL_CreateWindow, SDL_SetWindowRelativeMouseMode, SDL_PollEvent and SDL_DestroyWindow functions. It demonstrates basic setup of SDL and usage of relative mouse mode.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/relative_mode.markdown#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint main(int argc, char *argv[])\n{\n    SDL_Window *win;\n\n    SDL_Init(SDL_INIT_VIDEO);\n\n    win = SDL_CreateWindow(\"Test\", 800, 600, 0);\n    SDL_SetWindowRelativeMouseMode(win, true);\n\n    while (1)\n    {\n        if (PollEvents())\n            break;\n    }\n\n    SDL_DestroyWindow(win);\n\n    SDL_Quit();\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking SSE3 Support in C\nDESCRIPTION: This snippet checks for SSE3 support by attempting to compile code using SSE3 intrinsics (`<pmmintrin.h>`, `_mm_lddqu_si128`, `_mm_add_epi32`, `_mm_storeu_si128`). The function `ints_add` performs integer addition using SSE3. The result is stored in `HAVE_SSE3`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_96\n\nLANGUAGE: C\nCODE:\n```\n#include <pmmintrin.h>\n      void ints_add(int *dest, int *a, int *b, unsigned size) {\n        for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n          _mm_storeu_si128((__m128i*)dest, _mm_add_epi32(_mm_lddqu_si128((__m128i*)a), _mm_lddqu_si128((__m128i*)b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        ints_add((int*)0, (int*)0, (int*)0, 0);\n        return 0;\n      }\n```\n\n----------------------------------------\n\nTITLE: Resource Copying CMake\nDESCRIPTION: This snippet copies resource files to the test binary directory. It creates a custom command to copy each resource file and a custom target to depend on all copy commands.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(RESOURCE_FILE_NAMES)\nset(RESOURCE_FILES_BINDIR)\nforeach(resource_file IN LISTS RESOURCE_FILES)\n    get_filename_component(res_file_name ${resource_file} NAME)\n    list(APPEND RESOURCE_FILE_NAMES \"${res_file_name}\")\n    set(resource_file_bindir \"${test_bin_dir}/${res_file_name}\")\n    add_custom_command(OUTPUT \"${resource_file_bindir}\"\n        COMMAND \"${CMAKE_COMMAND}\" -E copy \"${resource_file}\" \"${resource_file_bindir}\"\n        DEPENDS \"${resource_file}\"\n    )\n    list(APPEND RESOURCE_FILES_BINDIR \"${resource_file_bindir}\")\nendforeach()\nadd_custom_target(copy-sdl-test-resources\n    DEPENDS \"${RESOURCE_FILES_BINDIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Virtual Joystick Configuration CMake\nDESCRIPTION: This snippet configures the virtual joystick feature. If `SDL_JOYSTICK` and `SDL_VIRTUAL_JOYSTICK` are enabled, it sets flags, defines `HAVE_VIRTUAL_JOYSTICK`, and globs source files for the virtual joystick implementation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_130\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_JOYSTICK)\n  if(SDL_VIRTUAL_JOYSTICK)\n    set(HAVE_VIRTUAL_JOYSTICK TRUE)\n    set(SDL_JOYSTICK_VIRTUAL 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/virtual/*.c\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking AVX Support in C\nDESCRIPTION: This snippet checks for AVX support using the `<immintrin.h>` header and AVX intrinsics (`_mm256_loadu_ps`, `_mm256_add_ps`, `_mm256_storeu_ps`). It uses a dummy function `floats_add` to test AVX vector addition.  The detected support is stored in `HAVE_AVX`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_99\n\nLANGUAGE: C\nCODE:\n```\n#include <immintrin.h>\n      void floats_add(float *dest, float *a, float *b, unsigned size) {\n        for (; size >= 8; size -= 8, dest += 8, a += 8, b += 8) {\n          _mm256_storeu_ps(dest, _mm256_add_ps(_mm256_loadu_ps(a), _mm256_loadu_ps(b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        floats_add((float*)0, (float*)0, (float*)0, 0);\n        return 0;\n      }\n```\n\n----------------------------------------\n\nTITLE: Building HIDAPI with CMake (Standalone)\nDESCRIPTION: This snippet demonstrates the basic steps to build HIDAPI as a standalone package using CMake. It involves creating a build directory, configuring the build using cmake, building the project, and installing the library. The default installation path is /usr/local/.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# precondition: create a <build dir> somewhere on the filesystem (preferably outside of the HIDAPI source)\n# this is the place where all intermediate/build files are going to be located\ncd <build dir>\n# configure the build\ncmake <HIDAPI source dir>\n# build it!\ncmake --build .\n# install library; by default installs into /usr/local/\ncmake --build . --target install\n# NOTE: you need to run install command as root, to be able to install into /usr/local/\n```\n\n----------------------------------------\n\nTITLE: SDL Initialization with Dynamic API (C)\nDESCRIPTION: This code snippet shows the SDL_Init function, which now utilizes a jump table to call the actual initialization function. The jump_table.SDL_Init is a function pointer that points to the real SDL_Init implementation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-dynapi.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_Init(SDL_InitFlags flags)\n{\n    return jump_table.SDL_Init(flags);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Library Compatibility and Current Versions\nDESCRIPTION: Calculates and sets the compatibility and current version numbers for the dynamic library based on the project version. The calculation logic differs based on whether the minor version is even or odd.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(PROJECT_VERSION_MINOR MATCHES \"[02468]$\")\n  math(EXPR SDL_DYLIB_COMPAT_VERSION_MAJOR \"100 * ${PROJECT_VERSION_MINOR} + 1\")\n  set(SDL_DYLIB_COMPAT_VERSION_MINOR \"0\")\n  math(EXPR SDL_DYLIB_CURRENT_VERSION_MAJOR \"${SDL_DYLIB_COMPAT_VERSION_MAJOR}\")\n  set(SDL_DYLIB_CURRENT_VERSION_MINOR \"${PROJECT_VERSION_PATCH}\")\nelse()\n  math(EXPR SDL_DYLIB_COMPAT_VERSION_MAJOR \"100 * ${PROJECT_VERSION_MINOR} + ${PROJECT_VERSION_PATCH} + 1\")\n  set(SDL_DYLIB_COMPAT_VERSION_MINOR \"0\")\n  math(EXPR SDL_DYLIB_CURRENT_VERSION_MAJOR \"${SDL_DYLIB_COMPAT_VERSION_MAJOR}\")\n  set(SDL_DYLIB_CURRENT_VERSION_MINOR \"0\")\nendif()\nset(SDL_DYLIB_CURRENT_VERSION_PATCH \"0\")\nset(SDL_DYLIB_COMPAT_VERSION_PATCH \"0\")\n\nset(SDL_DYLIB_CURRENT_VERSION \"${SDL_DYLIB_CURRENT_VERSION_MAJOR}.${SDL_DYLIB_CURRENT_VERSION_MINOR}.${SDL_DYLIB_CURRENT_VERSION_PATCH}\")\nset(SDL_DYLIB_COMPAT_VERSION \"${SDL_DYLIB_COMPAT_VERSION_MAJOR}.${SDL_DYLIB_COMPAT_VERSION_MINOR}.${SDL_DYLIB_COMPAT_VERSION_PATCH}\")\n```\n\n----------------------------------------\n\nTITLE: CoreMedia Camera Driver Configuration (CMake/Objective-C)\nDESCRIPTION: Configures the CoreMedia camera driver for macOS and iOS. It adds the necessary source files and sets SDL_FRAMEWORK_AVFOUNDATION.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_173\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_CAMERA)\n    if(MACOS OR IOS)\n      set(SDL_CAMERA_DRIVER_COREMEDIA 1)\n      set(HAVE_CAMERA TRUE)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/coremedia/*.m\")\n      set(SDL_FRAMEWORK_AVFOUNDATION 1)\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Sensor Support Configuration (CMake)\nDESCRIPTION: This snippet configures Windows sensor support based on the availability of the `sensorsapi.h` header. It sets flags and adds source files if available.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_155\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_SENSOR AND HAVE_SENSORSAPI_H)\n  set(SDL_SENSOR_WINDOWS 1)\n  set(HAVE_SDL_SENSORS TRUE)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/windows/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows Video Driver Configuration (CMake)\nDESCRIPTION: This configures the Windows video driver and includes the necessary source files. It checks for DirectX 9/11 headers to enable the corresponding renderers.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_153\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_VIDEO)\n  set(SDL_VIDEO_DRIVER_WINDOWS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/windows/*.c\")\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/windows/*.cpp\")\n\n  CheckOpenVR()\n\n  if(SDL_RENDER_D3D AND HAVE_D3D9_H)\n    set(SDL_VIDEO_RENDER_D3D 1)\n    set(HAVE_RENDER_D3D TRUE)\n  endif()\n  if(SDL_RENDER_D3D11 AND HAVE_D3D11_H)\n    set(SDL_VIDEO_RENDER_D3D11 1)\n    set(HAVE_RENDER_D3D11 TRUE)\n  endif()\n  if(SDL_RENDER_D3D12)\n    set(SDL_VIDEO_RENDER_D3D12 1)\n    set(HAVE_RENDER_D3D12 TRUE)\n  endif()\n  set(HAVE_SDL_VIDEO TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDL iOS Animation Callback\nDESCRIPTION: This snippet demonstrates how to use `SDL_SetiOSAnimationCallback` to integrate with Game Center on iOS. Instead of a traditional endless main loop, the game logic is executed within a callback function. This allows the Cocoa event loop to run, ensuring proper Game Center functionality.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-ios.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nextern \"C\"\n{\n    void ShowFrame(void*)\n    {\n        ... do event handling, frame logic and rendering ...\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    ... initialize game ...\n\n#ifdef SDL_PLATFORM_IOS\n    // Initialize the Game Center for scoring and matchmaking\n    InitGameCenter();\n\n    // Set up the game to run in the window animation callback on iOS\n    // so that Game Center and so forth works correctly.\n    SDL_SetiOSAnimationCallback(window, 1, ShowFrame, NULL);\n#else\n    while ( running ) {\n        ShowFrame(0);\n        DelayFrame();\n    }\n#endif\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure SDL3 Static Library CMake\nDESCRIPTION: This section configures the static SDL3 library (SDL3-static).  It sets the output name and defines a compile definition (SDL_STATIC_LIB). It then sets the link libraries, include directories, and precompile headers. Similar to the shared library, it uses compatible interface properties for enforcing library types and version compatibility.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_245\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_STATIC)\n  set_target_properties(SDL3-static PROPERTIES\n    OUTPUT_NAME \"${sdl_static_libname}\"\n  )\n  target_compile_definitions(SDL3-static PRIVATE SDL_STATIC_LIB)\n  target_link_libraries(SDL3-static PRIVATE ${SDL_CMAKE_DEPENDS})\n  target_include_directories(SDL3-static\n    PRIVATE\n      \"$<BUILD_INTERFACE:${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>>/build_config\"\n      \"$<BUILD_INTERFACE:${SDL3_SOURCE_DIR}/src>\"\n  )\n  target_link_libraries(SDL3-static PUBLIC $<TARGET_NAME:SDL3::Headers>)\n  # Use `Compatible Interface Properties` to:\n  # - allow consumers to enforce a shared/static library\n  # - block linking to SDL libraries of different major version\n  set_property(TARGET SDL3-static APPEND PROPERTY COMPATIBLE_INTERFACE_BOOL SDL3_SHARED)\n  set_property(TARGET SDL3-static PROPERTY INTERFACE_SDL3_SHARED FALSE)\n  set_property(TARGET SDL3-static APPEND PROPERTY COMPATIBLE_INTERFACE_STRING \"SDL_VERSION\")\n  set_property(TARGET SDL3-static PROPERTY INTERFACE_SDL_VERSION \"SDL${SDL3_VERSION_MAJOR}\")\n  if(NOT CMAKE_VERSION VERSION_LESS \"3.16\")\n    target_precompile_headers(SDL3-static PRIVATE \"<$<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:${PROJECT_SOURCE_DIR}/src/SDL_internal.h>\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Process Sources\nDESCRIPTION: This CMake snippet sets the dummy process source files if `HAVE_SDL_PROCESS` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_217\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_PROCESS)\n  set(SDL_PROCESS_DUMMY 1)\n  sdl_glob_sources(${SDL3_SOURCE_DIR}/src/process/dummy/*.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including source files in Android.mk (Makefile)\nDESCRIPTION: This snippet shows how to add source files to the 'Android.mk' file for building native code. The 'LOCAL_SRC_FILES' variable is used to list the source files, separated by spaces.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nLOCAL_SRC_FILES := \n```\n\n----------------------------------------\n\nTITLE: Globbing SDL Source Files CMake\nDESCRIPTION: This snippet uses the `sdl_glob_sources` function to include all C source files from various subdirectories within the SDL3 source directory. It iterates through directories like `src/atomic`, `src/audio`, `src/camera`, etc., to add them to the build.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_123\n\nLANGUAGE: CMake\nCODE:\n```\nsdl_glob_sources(\n  \"${SDL3_SOURCE_DIR}/src/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/atomic/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/audio/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/camera/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/core/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/cpuinfo/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/dynapi/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/events/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/io/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/io/generic/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/filesystem/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/gpu/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/joystick/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/haptic/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/hidapi/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/locale/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/main/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/misc/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/power/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/render/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/render/*/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/sensor/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/stdlib/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/storage/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/time/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/timer/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/video/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/video/yuv2rgb/*.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Application Bundle with Makefile\nDESCRIPTION: This Makefile snippet demonstrates how to create a macOS application bundle. It creates the necessary directory structure (Contents/MacOS, Contents/Resources), adds a PkgInfo file, and copies the executable into the bundle.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-macos.md#_snippet_4\n\nLANGUAGE: make\nCODE:\n```\nbundle_contents = APP_NAME.app/Contents\nAPP_NAME_bundle: EXE_NAME\n\tmkdir -p $(bundle_contents)/MacOS\n\tmkdir -p $(bundle_contents)/Resources\n\techo \"APPL????\" > $(bundle_contents)/PkgInfo\n\t$(INSTALL_PROGRAM) $< $(bundle_contents)/MacOS/\n```\n\n----------------------------------------\n\nTITLE: Time Support Configuration (CMake)\nDESCRIPTION: Configures time support for SDL on Windows, sets the relevant flag, and includes source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_162\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_TIME_WINDOWS 1)\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/windows/*.c\")\nset(HAVE_SDL_TIME TRUE)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Shared and Static Library Options\nDESCRIPTION: Sets the default options for building shared and static libraries to ON.  Also sets the available options to ON.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_SHARED_DEFAULT ON)\nset(SDL_STATIC_DEFAULT ON)\n\nset(SDL_SHARED_AVAILABLE ON)\nset(SDL_STATIC_AVAILABLE ON)\n```\n\n----------------------------------------\n\nTITLE: Setting Wayland Video Driver Options (CMake)\nDESCRIPTION: This snippet configures options for enabling the Wayland video driver and related features (libdecor for client-side decorations). These options depend on whether SDL_VIDEO is enabled and the target operating system is UNIX_SYS.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_WAYLAND             \"Use Wayland video driver\" ${UNIX_SYS} \"SDL_VIDEO\" OFF)\ndep_option(SDL_WAYLAND_SHARED      \"Dynamically load Wayland support\" ON \"SDL_WAYLAND;SDL_DEPS_SHARED\" OFF)\ndep_option(SDL_WAYLAND_LIBDECOR    \"Use client-side window decorations on Wayland\" ON \"SDL_WAYLAND\" OFF)\ndep_option(SDL_WAYLAND_LIBDECOR_SHARED     \"Dynamically load libdecor support\" ON \"SDL_WAYLAND_LIBDECOR;SDL_WAYLAND_SHARED;SDL_DEPS_SHARED\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Configure SDL3 Tests CMake\nDESCRIPTION: This section configures the build for SDL3 tests. It locates test source files, links them to the SDL3_test target, and sets platform-specific properties, particularly for macOS. It also links the tests to necessary libraries and sets an interface property to ensure SDL version compatibility.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_247\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_TEST_LIBRARY)\n  file(GLOB TEST_SOURCES \"${SDL3_SOURCE_DIR}/src/test/*.c\")\n  target_sources(SDL3_test PRIVATE ${TEST_SOURCES})\n  if(APPLE)\n    set_target_properties(SDL3_test PROPERTIES\n      FRAMEWORK \"${SDL_FRAMEWORK}\"\n    )\n    if(SDL_FRAMEWORK)\n      set_target_properties(SDL3_test PROPERTIES\n        FRAMEWORK_VERSION \"${SDL_FRAMEWORK_VERSION}\"\n        MACOSX_FRAMEWORK_IDENTIFIER \"org.libsdl.SDL3_test\"\n        RESOURCE \"${SDL_FRAMEWORK_RESOURCES}\"\n      )\n    endif()\n  endif()\n  target_link_libraries(SDL3_test PUBLIC $<TARGET_NAME:SDL3::Headers>)\n  # FIXME: get rid of EXTRA_TEST_LIBS variable\n  target_link_libraries(SDL3_test PRIVATE ${EXTRA_TEST_LIBS})\n  set_property(TARGET SDL3_test APPEND PROPERTY COMPATIBLE_INTERFACE_STRING \"SDL_VERSION\")\n  set_property(TARGET SDL3_test PROPERTY INTERFACE_SDL_VERSION \"SDL${SDL3_VERSION_MAJOR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Joystick Sources for N3DS platform\nDESCRIPTION: This CMake snippet conditionally sets the joystick-related source files for the Nintendo 3DS platform if `SDL_JOYSTICK` is enabled. It uses `sdl_glob_sources` to include all C files in the specified directory and sets the `HAVE_SDL_JOYSTICK` variable to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_190\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_JOYSTICK)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/n3ds/*.c\")\n  set(HAVE_SDL_JOYSTICK TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Option for Building as Apple Framework\nDESCRIPTION: Creates an option to build SDL libraries as an Apple Framework. If `SDL_FRAMEWORK` is enabled, static libraries are disabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_dependent_option(SDL_FRAMEWORK \"Build SDL libraries as Apple Framework\" OFF \"APPLE\" OFF)\nif(SDL_FRAMEWORK)\n  set(SDL_STATIC_AVAILABLE FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting KMSDRM Video Driver Options (CMake)\nDESCRIPTION: This snippet configures options to enable the KMS DRM video driver and dynamic loading of KMS DRM support. These options depend on SDL_VIDEO being enabled and the target operating system being UNIX_SYS.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_61\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_KMSDRM              \"Use KMS DRM video driver\" ${UNIX_SYS} \"SDL_VIDEO\" OFF)\ndep_option(SDL_KMSDRM_SHARED       \"Dynamically load KMS DRM support\" ON \"SDL_KMSDRM;SDL_DEPS_SHARED\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Standard main function in C\nDESCRIPTION: This is a basic example of a standard C main function. It prints \"Hello world!\" to the console and returns 0, indicating successful execution. It is a common starting point for C programs.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-main-functions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint main(int argc, char **argv)\n{\n    printf(\"Hello world!\\n\");\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Add hidapi_hidraw Library\nDESCRIPTION: Adds a library named hidapi_hidraw to the project. It includes the specified public headers and the hid.c source file. It then links the library against the hidapi_include target.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(hidapi_hidraw\n    ${HIDAPI_PUBLIC_HEADERS}\n    hid.c\n)\ntarget_link_libraries(hidapi_hidraw PUBLIC hidapi_include)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for hidapi_winapi\nDESCRIPTION: This command defines a list of source files (`SOURCES`) that will be used to build the `hidapi_winapi` library.  It includes C source files and header files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES\n    hid.c\n    hidapi_cfgmgr32.h\n    hidapi_descriptor_reconstruct.c\n    hidapi_descriptor_reconstruct.h\n    hidapi_hidclass.h\n    hidapi_hidpi.h\n    hidapi_hidsdi.h\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for POSIX Spawn support\nDESCRIPTION: This CMake snippet checks if the system supports `posix_spawn` functions. It attempts to compile a C source code snippet that uses these functions. If compilation succeeds, it sets `HAVE_POSIX_SPAWN` to TRUE and then includes POSIX-specific process source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_202\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n  check_c_source_compiles(\"\n#include <spawn.h>\n#include <unistd.h>\n\nint main(void)\n{\n    int pipes[2];\n    int pid;\n\n    const char * args[] = {\n      \\\"/bin/false\\\",\n      NULL\n    };\n\n    const char * env[] = { NULL };\n\n    pipe(pipes);\n\n    posix_spawnattr_t attr;\n    posix_spawn_file_actions_t fa;\n\n    posix_spawnattr_init(&attr);\n    posix_spawn_file_actions_init(&fa);\n\n    posix_spawn_file_actions_addclose(&fa, pipes[0]);\n    posix_spawn_file_actions_adddup2(&fa, pipes[1], STDOUT_FILENO);\n\n    posix_spawn(&pid, args[0], &fa, &attr, (char * const *) args, (char * const *) env);\n    posix_spawnp(&pid, args[0], &fa, &attr, (char * const *) args, (char * const *) env);\n\n    posix_spawn_file_actions_destroy(&fa);\n    posix_spawnattr_destroy(&attr);\n\n    return 0;\n}\n\" HAVE_POSIX_SPAWN)\n  if(HAVE_POSIX_SPAWN)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/process/posix/*.c\")\n    set(SDL_PROCESS_POSIX 1)\n    set(HAVE_SDL_PROCESS TRUE)\n  endif()\nendif()\n```\n\nLANGUAGE: C\nCODE:\n```\n#include <spawn.h>\n#include <unistd.h>\n\nint main(void)\n{\n    int pipes[2];\n    int pid;\n\n    const char * args[] = {\n      \"/bin/false\",\n      NULL\n    };\n\n    const char * env[] = { NULL };\n\n    pipe(pipes);\n\n    posix_spawnattr_t attr;\n    posix_spawn_file_actions_t fa;\n\n    posix_spawnattr_init(&attr);\n    posix_spawn_file_actions_init(&fa);\n\n    posix_spawn_file_actions_addclose(&fa, pipes[0]);\n    posix_spawn_file_actions_adddup2(&fa, pipes[1], STDOUT_FILENO);\n\n    posix_spawn(&pid, args[0], &fa, &attr, (char * const *) args, (char * const *) env);\n    posix_spawnp(&pid, args[0], &fa, &attr, (char * const *) args, (char * const *) env);\n\n    posix_spawn_file_actions_destroy(&fa);\n    posix_spawnattr_destroy(&attr);\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions for Static Library\nDESCRIPTION: This conditional statement checks if `BUILD_SHARED_LIBS` is not enabled (i.e., a static library is being built). It defines a compile definition `HID_API_NO_EXPORT_DEFINE` to prevent functions from being marked as `__declspec(dllexport)` for the static library build. This prevents potential issues when linking.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT BUILD_SHARED_LIBS)\n    target_compile_definitions(hidapi_winapi\n        # prevent marking functions as __declspec(dllexport) for static library build\n        # #480: this should be refactored for v1.0\n        PUBLIC HID_API_NO_EXPORT_DEFINE\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: OpenGL Video Configuration (CMake)\nDESCRIPTION: This code snippet configures OpenGL support in SDL for Windows. It sets various flags for OpenGL, WGL, and enables the OpenGL renderer.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_165\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_VIDEO)\n    if(SDL_OPENGL)\n      set(SDL_VIDEO_OPENGL 1)\n      set(SDL_VIDEO_OPENGL_WGL 1)\n      set(SDL_VIDEO_RENDER_OGL 1)\n      set(HAVE_OPENGL TRUE)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Clock Gettime Option (CMake)\nDESCRIPTION: This snippet sets an option to use clock_gettime() instead of gettimeofday() for timing purposes. clock_gettime() is generally preferred on systems where it's available.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_CLOCK_GETTIME       \"Use clock_gettime() instead of gettimeofday()\" ${SDL_CLOCK_GETTIME_DEFAULT})\n```\n\n----------------------------------------\n\nTITLE: Setting Shared or Static Library Default Based on BUILD_SHARED_LIBS\nDESCRIPTION: Sets either the shared or static library default based on the value of BUILD_SHARED_LIBS if it is defined. If BUILD_SHARED_LIBS is not defined, defaults to building only the shared library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_SHARED_DEFAULT AND SDL_STATIC_DEFAULT AND SDL_SHARED_AVAILABLE)\n  if(DEFINED BUILD_SHARED_LIBS)\n    # When defined, use BUILD_SHARED_LIBS as default\n    if(BUILD_SHARED_LIBS)\n      set(SDL_STATIC_DEFAULT OFF)\n    else()\n      set(SDL_SHARED_DEFAULT OFF)\n    endif()\n  else()\n    # Default to just building the shared library\n    set(SDL_STATIC_DEFAULT OFF)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Resource File Globbing CMake\nDESCRIPTION: This snippet uses file(GLOB) to find all resource files with specific extensions and stores them in the RESOURCE_FILES variable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB RESOURCE_FILES *.bmp *.wav *.csv *.hex moose.dat utf8.txt)\n```\n\n----------------------------------------\n\nTITLE: Setting Generic Main Callback Sources\nDESCRIPTION: This CMake snippet sets the generic main callback source files if `HAVE_SDL_MAIN_CALLBACKS` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_221\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_MAIN_CALLBACKS)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/generic/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including SDL_main.h for WinMain Implementation C++\nDESCRIPTION: Recommends including SDL_main.h for automatic WinMain implementation, which handles GDK setup.  If not possible, SDL_RunApp can be called manually from the custom entry point. SDL_MAIN_HANDLED must be defined before including SDL_main.h if SDL_RunApp is used.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-gdk.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <SDL3/SDL_main.h>\n\n// Or:\n#define SDL_MAIN_HANDLED\n#include <SDL3/SDL_main.h>\n\nint main(int argc, char* argv[]) {\n  return SDL_RunApp(SDL_main, NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ALIAS targets\nDESCRIPTION: This snippet creates alias targets for hidapi_libusb to provide compatibility with find_package() and raw library linking.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/libusb/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# compatibility with find_package()\nadd_library(hidapi::libusb ALIAS hidapi_libusb)\n# compatibility with raw library link\nadd_library(hidapi-libusb ALIAS hidapi_libusb)\n```\n\n----------------------------------------\n\nTITLE: Adding SDL Test Executables\nDESCRIPTION: This snippet adds multiple SDL test executables using the `add_sdl_test_executable` macro, specifying the source files for each test. Each invocation creates a new executable target to be built as part of the SDL test suite.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sdl_test_executable(testdialog SOURCES testdialog.c)\nadd_sdl_test_executable(testtime SOURCES testtime.c)\nadd_sdl_test_executable(testmanymouse SOURCES testmanymouse.c)\nadd_sdl_test_executable(testmodal SOURCES testmodal.c)\nadd_sdl_test_executable(testtray SOURCES testtray.c)\n```\n\n----------------------------------------\n\nTITLE: Enabling ARM NEON support in SDL\nDESCRIPTION: This CMake snippet checks for ARM NEON support and sets the `HAVE_ARMNEON` variable to `TRUE` if supported.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_103\n\nLANGUAGE: cmake\nCODE:\n```\nif(HAVE_ARMNEON TRUE)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories CMake\nDESCRIPTION: This snippet configures the installation directories for SDL3 based on the target platform and build configuration. It sets paths for CMake files, headers, licenses, and other resources, adjusting for Windows, FreeBSD, and SDL frameworks.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_248\n\nLANGUAGE: CMake\nCODE:\n```\nif(WINDOWS AND NOT MINGW)\n  set(SDL_INSTALL_CMAKEDIR_ROOT_DEFAULT \"cmake\")\nelse()\n  set(SDL_INSTALL_CMAKEDIR_ROOT_DEFAULT \"${CMAKE_INSTALL_LIBDIR}/cmake/SDL3\")\nendif()\nset(SDL_INSTALL_CMAKEDIR_ROOT \"${SDL_INSTALL_CMAKEDIR_ROOT_DEFAULT}\" CACHE STRING \"Root folder where to install SDL3Config.cmake related files (SDL3 subfolder for MSVC projects)\")\n\nif(FREEBSD)\n  # FreeBSD uses ${PREFIX}/libdata/pkgconfig\n  set(SDL_PKGCONFIG_INSTALLDIR \"libdata/pkgconfig\")\nelse()\n  set(SDL_PKGCONFIG_INSTALLDIR \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nendif()\n\nif(WINDOWS AND NOT MINGW)\n  set(SDL_INSTALL_CMAKEDIR \"${SDL_INSTALL_CMAKEDIR_ROOT}\")\n  set(SDL_INSTALL_LICENSEDIR \"licenses/SDL3\")\n  set(SDL_INSTALL_HEADERSDIR \"${CMAKE_INSTALL_INCLUDEDIR}/SDL3\")\nelif(SDL_FRAMEWORK)\n  set(SDL_INSTALL_CMAKEDIR \"SDL3.framework/Versions/${SDL_FRAMEWORK_VERSION}/Resources/CMake\")\n  set(SDL_INSTALL_LICENSEDIR \"Resources\")\n  set(SDL_INSTALL_HEADERSDIR \"Headers\")\nelse()\n  set(SDL_INSTALL_CMAKEDIR \"${SDL_INSTALL_CMAKEDIR_ROOT}\")\n  set(SDL_INSTALL_LICENSEDIR \"${CMAKE_INSTALL_DATAROOTDIR}/licenses/${PROJECT_NAME}\")\n  set(SDL_INSTALL_HEADERSDIR \"${CMAKE_INSTALL_INCLUDEDIR}/SDL3\")\nendif()\n\nif(SDL_FRAMEWORK)\n  set(SDL_SDL_INSTALL_RESOURCEDIR \"SDL3.framework/Resources\")\n  set(SDL_SDL_INSTALL_CMAKEDIR \"${SDL_SDL_INSTALL_RESOURCEDIR}/CMake\")\n  set(SDL_SDL_INSTALL_REAL_RESOURCEDIR \"SDL3.framework/Versions/${SDL_FRAMEWORK_VERSION}/Resources\")\n  set(SDL_SDL_INSTALL_REAL_CMAKEDIR \"${SDL_SDL_INSTALL_REAL_RESOURCEDIR}/CMake\")\n\n  set(SDL_SDLtest_INSTALL_RESOURCEDIR \"SDL3_test.framework/Resources\")\n  set(SDL_SDLtest_INSTALL_CMAKEDIR \"${SDL_SDLtest_INSTALL_RESOURCEDIR}/CMake\")\n  set(SDL_SDLtest_INSTALL_CMAKEFILENAME \"SDL3_testConfig.cmake\")\nelse()\n  set(SDL_SDL_INSTALL_RESOURCEDIR \".\")\n  set(SDL_SDL_INSTALL_CMAKEDIR ${SDL_INSTALL_CMAKEDIR})\n  set(SDL_SDL_INSTALL_REAL_CMAKEDIR ${SDL_INSTALL_CMAKEDIR})\n\n  # Install SDL3*Targets.cmake files in lib/cmake/SDL3\n  set(SDL_SDLstatic_INSTALL_RESOURCEDIR \".\")\n  set(SDL_SDLstatic_INSTALL_CMAKEDIR \"${SDL_SDL_INSTALL_CMAKEDIR}\")\n  set(SDL_SDLstatic_INSTALL_CMAKEFILENAME \"SDL3staticTargets.cmake\")\n\n  set(SDL_SDLtest_INSTALL_RESOURCEDIR \".\")\n  set(SDL_SDLtest_INSTALL_CMAKEDIR \"${SDL_SDL_INSTALL_CMAKEDIR}\")\n  set(SDL_SDLtest_INSTALL_CMAKEFILENAME \"SDL3testTargets.cmake\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: OpenGLES Video Configuration (CMake)\nDESCRIPTION: This code configures OpenGLES support within SDL, including EGL support and OpenGL ES2 rendering if enabled. Relevant flags are set to enable these features.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_166\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_OPENGLES)\n      set(SDL_VIDEO_OPENGL_EGL 1)\n      set(SDL_VIDEO_OPENGL_ES2 1)\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\n      set(HAVE_OPENGLES TRUE)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Library Component for Tests\nDESCRIPTION: This snippet determines whether the tests should link against the shared or static SDL3 library. Based on the `SDL_TESTS_LINK_SHARED` variable, it sets the `sdl_name_component` variable to either \"SDL3-shared\" or \"SDL3-static\". It also sets `HAVE_TESTS_LINK_SHARED` in the parent scope for use in other CMake scripts.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_TESTS_LINK_SHARED)\n    set(sdl_name_component SDL3-shared)\nelse()\n    set(sdl_name_component SDL3-static)\nendif()\nset(HAVE_TESTS_LINK_SHARED \"${SDL_TESTS_LINK_SHARED}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Dependency Option for Shared Libraries\nDESCRIPTION: Creates a dependency option to determine whether to load dependencies dynamically if building shared libraries, and if shared libraries are available.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_DEPS_SHARED \"Load dependencies dynamically\" ON SDL_SHARED_AVAILABLE OFF)\n```\n\n----------------------------------------\n\nTITLE: Configure .pc File CMake Function\nDESCRIPTION: This function, `hidapi_configure_pc`, configures and installs a `.pc` file for pkg-config. It takes the input `.pc.in` file as an argument, sets variables like `prefix`, `libdir`, and `includedir`, configures the file using `configure_file`, and installs it to the appropriate directory if `HIDAPI_INSTALL_TARGETS` is enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(hidapi_configure_pc PC_IN_FILE)\n    file(MAKE_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/pc\")\n\n    set(VERSION \"${VERSION}${VERSION_SUFFIX}\")\n    set(prefix \"${CMAKE_INSTALL_PREFIX}\")\n    set(exec_prefix \"\\${prefix}\")\n    if(IS_ABSOLUTE \"${CMAKE_INSTALL_LIBDIR}\")\n        set(libdir \"${CMAKE_INSTALL_LIBDIR}\")\n    else()\n        set(libdir \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\n    endif()\n    if(IS_ABSOLUTE \"${CMAKE_INSTALL_INCLUDEDIR}\")\n        set(includedir \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    else()\n        set(includedir \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\")\n    endif()\n\n    get_filename_component(PC_IN_FILENAME \"${PC_IN_FILE}\" NAME_WE)\n    set(PC_FILE \"${CMAKE_CURRENT_BINARY_DIR}/pc/${PC_IN_FILENAME}.pc\")\n    configure_file(\"${PC_IN_FILE}\" \"${PC_FILE}\" @ONLY)\n    if(HIDAPI_INSTALL_TARGETS)\n        install(FILES \"${PC_FILE}\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig/\")\n    endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Read Version from File CMake\nDESCRIPTION: This snippet reads the version string from a file named 'VERSION' located in the project root. It then uses a regular expression to extract the version number and any suffix.  If parsing fails, a fatal error is raised.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Read version from file\nfile(READ \"${PROJECT_ROOT}/VERSION\" RAW_VERSION_STR)\nstring(REGEX MATCH \"^([0-9]+\\.[0-9]+\\.[0-9]+)(.*)\" VERSION_STR \"${RAW_VERSION_STR}\")\n\nif(NOT VERSION_STR)\n    message(FATAL_ERROR \"Broken VERSION file, couldn't parse '${PROJECT_ROOT}/VERSION' with content: '${RAW_VERSION_STR}'\")\nendif()\n\nset(VERSION \"${CMAKE_MATCH_1}\")\nstring(STRIP \"${CMAKE_MATCH_2}\" VERSION_SUFFIX)\n# compatibility with find_package() vs add_subdirectory\nset(hidapi_VERSION \"${VERSION}\" PARENT_SCOPE)\n#\n```\n\n----------------------------------------\n\nTITLE: Install Interface Library CMake\nDESCRIPTION: This snippet installs the `hidapi_include` interface library using the `install(TARGETS)` command. It exports the library for use by other CMake projects and defines a file name for the exported library's CMake file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(HIDAPI_INSTALL_TARGETS)\n    install(TARGETS hidapi_include EXPORT hidapi)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Test Case Iteration and Validation\nDESCRIPTION: Iterates through each defined test case, validates the existence of the required `.pp_data` and `_expected.rpt_desc` files, and creates a test using `add_test` that executes the `hid_report_reconstructor_test` executable with the validated data files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/test/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(TEST_CASE ${HID_DESCRIPTOR_RECONSTRUCT_TEST_CASES})\n     set(TEST_PP_DATA \"${CMAKE_CURRENT_LIST_DIR}/data/${TEST_CASE}.pp_data\")\n     if(NOT EXISTS \"${TEST_PP_DATA}\")\n          message(FATAL_ERROR \"Missing '${TEST_PP_DATA}' file for '${TEST_CASE}' test case\")\n     endif()\n     set(TEST_EXPECTED_DESCRIPTOR \"${CMAKE_CURRENT_LIST_DIR}/data/${TEST_CASE}_expected.rpt_desc\")\n     if(NOT EXISTS \"${TEST_EXPECTED_DESCRIPTOR}\")\n          message(FATAL_ERROR \"Missing '${TEST_EXPECTED_DESCRIPTOR}' file for '${TEST_CASE}' test case\")\n     endif()\n\n     add_test(NAME \"WinHidReportReconstructTest_${TEST_CASE}\"\n          COMMAND hid_report_reconstructor_test \"${TEST_PP_DATA}\" \"${TEST_EXPECTED_DESCRIPTOR}\"\n          WORKING_DIRECTORY \"$<TARGET_FILE_DIR:hidapi_winapi>\"\n     )\n     if(HIDAPI_ENABLE_ASAN)\n          if(MSVC)\n               if(NOT CMAKE_VERSION VERSION_LESS CMAKE_VERSION_SUPPORTS_ENVIRONMENT_MODIFICATION)\n                    get_filename_component(MSVC_BUILD_TOOLS_DIR \"${CMAKE_LINKER}\" DIRECTORY)\n                    set_property(TEST \"WinHidReportReconstructTest_${TEST_CASE}\" PROPERTY ENVIRONMENT_MODIFICATION \"PATH=path_list_append:${MSVC_BUILD_TOOLS_DIR}\")\n               endif()\n          endif()\n          set_property(TEST \"WinHidReportReconstructTest_${TEST_CASE}\" PROPERTY ENVIRONMENT \"ASAN_SAVE_DUMPS=AsanDump_${TEST_CASE}.dmp\")\n     endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Qt 6 and SDL3 Interoperation Example\nDESCRIPTION: This C++ example demonstrates how to interoperate between Qt 6 and SDL3 to display content on a Wayland surface owned by Qt. It involves initializing Qt, obtaining the `wl_display` and `wl_surface` from Qt, setting the SDL properties to use Qt's `wl_display`, creating an SDL window from Qt's `wl_surface`, and rendering using SDL.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-wayland.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <QApplication>\n#include <QWindow>\n#include <qpa/qplatformnativeinterface.h>\n\n#include <SDL3/SDL.h>\n\nint main(int argc, char *argv[])\n{\n    int ret = -1;\n    int done = 0;\n    SDL_PropertiesID props;\n    SDL_Event e;\n    SDL_Window *sdlWindow = NULL;\n    SDL_Renderer *sdlRenderer = NULL;\n    struct wl_display *display = NULL;\n    struct wl_surface *surface = NULL;\n\n    /* Initialize Qt */\n    QApplication qtApp(argc, argv);\n    QWindow qtWindow;\n\n    /* The windowing system must be Wayland. */\n    if (QApplication::platformName() != \"wayland\") {\n        goto exit;\n    }\n\n    {\n        /* Get the wl_display object from Qt */\n        QNativeInterface::QWaylandApplication *qtWlApp = qtApp.nativeInterface<QNativeInterface::QWaylandApplication>();\n        display = qtWlApp->display();\n\n        if (!display) {\n            goto exit;\n        }\n    }\n\n    /* Set SDL to use the existing wl_display object from Qt and initialize. */\n    SDL_SetPointerProperty(SDL_GetGlobalProperties(), SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER, display);\n    SDL_Init(SDL_INIT_VIDEO | SDL_INIT_EVENTS);\n\n    /* Create a basic, frameless QWindow */\n    qtWindow.setFlags(Qt::FramelessWindowHint);\n    qtWindow.setGeometry(0, 0, 640, 480);\n    qtWindow.show();\n\n    {\n        /* Get the native wl_surface backing resource for the window */\n        QPlatformNativeInterface *qtNative = qtApp.platformNativeInterface();\n        surface = (struct wl_surface *)qtNative->nativeResourceForWindow(\"surface\", &qtWindow);\n\n        if (!surface) {\n            goto exit;\n        }\n    }\n\n    /* Create a window that wraps the wl_surface from the QWindow.\n     * Qt objects should not be flagged as DPI-aware or protocol violations will result.\n     */\n    props = SDL_CreateProperties();\n    SDL_SetPointerProperty(props, SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER, surface);\n    SDL_SetBooleanProperty(props, SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN, true);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER, 640);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER, 480);\n    sdlWindow = SDL_CreateWindowWithProperties(props);\n    SDL_DestroyProperties(props);\n    if (!sdlWindow) {\n        goto exit;\n    }\n\n    /* Create a renderer */\n    sdlRenderer = SDL_CreateRenderer(sdlWindow, NULL);\n    if (!sdlRenderer) {\n        goto exit;\n    }\n\n    /* Draw a blue screen for the window until ESC is pressed or the window is no longer visible. */\n    while (!done) {\n        while (SDL_PollEvent(&e)) {\n            if (e.type == SDL_EVENT_KEY_DOWN && e.key.key == SDLK_ESCAPE) {\n                done = 1;\n            }\n        }\n\n        qtApp.processEvents();\n\n        /* Update the backbuffer size if the window scale changed. */\n        qreal scale = qtWindow.devicePixelRatio();\n        SDL_SetWindowSize(sdlWindow, SDL_lround(640. * scale), SDL_lround(480. * scale));\n\n        if (qtWindow.isVisible()) {\n            SDL_SetRenderDrawColor(sdlRenderer, 0, 0, 255, SDL_ALPHA_OPAQUE);\n            SDL_RenderClear(sdlRenderer);\n            SDL_RenderPresent(sdlRenderer);\n        } else {\n            done = 1;\n        }\n    }\n\n    ret = 0;\n\nexit:\n    /* Cleanup */\n    if (sdlRenderer) {\n        SDL_DestroyRenderer(sdlRenderer);\n    }\n    if (sdlWindow) {\n        SDL_DestroyWindow(sdlWindow);\n    }\n\n    SDL_Quit();\n    return ret;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Linking GameController Framework (CMake)\nDESCRIPTION: This snippet finds and links the GameController framework, adding it as a linker dependency. It checks for the framework's availability before linking.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_185\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library(GAMECONTROLLER GameController)\n    if(GAMECONTROLLER)\n      sdl_link_dependency(game_controller LIBS \"$<LINK_LIBRARY:FRAMEWORK,GameController>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,GameController\")\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Timer Support Configuration (CMake)\nDESCRIPTION: This snippet enables timer support for SDL on Windows by setting the `SDL_TIMER_WINDOWS` flag, including necessary source files, and setting `HAVE_SDL_TIMERS` to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_163\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_TIMER_WINDOWS 1)\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/windows/*.c\")\nset(HAVE_SDL_TIMERS TRUE)\n```\n\n----------------------------------------\n\nTITLE: Configure Ccache Integration\nDESCRIPTION: This snippet searches for the ccache executable and, if found, sets the CMAKE_C_COMPILER_LAUNCHER, CMAKE_CXX_COMPILER_LAUNCHER, and CMAKE_OBJC_COMPILER_LAUNCHER variables to use ccache. It also sets the HAVE_CCACHE variable accordingly.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_232\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_CCACHE)\n  find_program(CCACHE_BINARY ccache)\n  if(CCACHE_BINARY)\n    set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_BINARY})\n    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_BINARY})\n    set(CMAKE_OBJC_COMPILER_LAUNCHER ${CCACHE_BINARY})\n    set(HAVE_CCACHE ON)\n  else()\n    set(HAVE_CCACHE OFF)\n  endif()\nelse()\n  set(HAVE_CCACHE OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Haptic Sources\nDESCRIPTION: This CMake snippet sets the dummy haptic driver source files if `HAVE_SDL_HAPTIC` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_208\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_HAPTIC)\n  set(SDL_HAPTIC_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring HIDAPI Subdirectory Build Options\nDESCRIPTION: This snippet configures HIDAPI build options when included as a subdirectory. It sets HIDAPI to not use libusb on Linux and builds it as a static library on all platforms. These options must be set before including the HIDAPI subdirectory in the CMakeLists.txt.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(HIDAPI_WITH_LIBUSB FALSE) # surely will be used only on Linux\nset(BUILD_SHARED_LIBS FALSE) # HIDAPI as static library on all platforms\nadd_subdirectory(hidapi)\n```\n\n----------------------------------------\n\nTITLE: Link libraries to hidapi_darwin target\nDESCRIPTION: This command links the necessary libraries to the `hidapi_darwin` target. It links `hidapi_include` as a public dependency, `Threads::Threads` and the IOKit and CoreFoundation frameworks as private dependencies.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(hidapi_darwin\n    PUBLIC hidapi_include\n    PRIVATE Threads::Threads\n    PRIVATE \"-framework IOKit\" \"-framework CoreFoundation\"\n)\n```\n\n----------------------------------------\n\nTITLE: Install All Test APKs (CMake)\nDESCRIPTION: This CMake command installs all SDL test APKs on the connected Android device using adb.  It assumes the CMake project has been configured for Android and all the test APKs built.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target install-sdl-test-apks\n```\n\n----------------------------------------\n\nTITLE: Installing Android Specific Files CMake\nDESCRIPTION: This snippet installs Android-specific files, including the JAR file and ProGuard rules, if the target platform is Android. It also configures and installs a CMake file for Android targets.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_258\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID)\n    if(TARGET SDL3-jar)\n      set(SDL_INSTALL_JAVADIR \"${CMAKE_INSTALL_DATAROOTDIR}/java\" CACHE PATH \"Path where to install java clases + java sources\")\n      set(PROGUARD_RULES_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/android-project/app/proguard-rules.pro\")\n      # install_jar or $<TARGET_PROPERTY:SDL3-jar,INSTALL_FILES> does not work on Windows: a SDL3.jar symlink is not generated\n      install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/SDL3-${SDL3_VERSION}.jar\"\n        DESTINATION \"${SDL_INSTALL_JAVADIR}/SDL3\")\n      install(FILES \"${PROGUARD_RULES_PATH}\" RENAME \"proguard.txt\"\n        DESTINATION \"${SDL_INSTALL_JAVADIR}/SDL3\")\n      configure_package_config_file(cmake/SDL3jarTargets.cmake.in SDL3jarTargets.cmake\n        INSTALL_DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n        PATH_VARS SDL_INSTALL_JAVADIR\n        NO_CHECK_REQUIRED_COMPONENTS_MACRO\n        INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\"\n      )\n      install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/SDL3jarTargets.cmake\"\n        DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n      )\n    endif()\n    if(TARGET SDL3-javasources)\n      install(FILES \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}-sources.jar\"\n        DESTINATION \"${SDL_INSTALL_JAVADIR}/SDL3\")\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Backgrounding/Foregrounding Signal Options (CMake)\nDESCRIPTION: This snippet configures options to set the signal number to use for magic backgrounding/foregrounding signals. The signal number can also be set to 'OFF'.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_64\n\nLANGUAGE: cmake\nCODE:\n```\noption_string(SDL_BACKGROUNDING_SIGNAL \"number to use for magic backgrounding signal or 'OFF'\" OFF)\noption_string(SDL_FOREGROUNDING_SIGNAL \"number to use for magic foregrounding signal or 'OFF'\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Define SDL3 Alias CMake\nDESCRIPTION: This block ensures the `SDL3::SDL3` alias always exists, pointing to either the shared or static library depending on which is built. This provides a consistent way to link against SDL3 regardless of the build type.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_79\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET SDL3::SDL3-shared)\n  add_library(SDL3::SDL3 ALIAS SDL3-shared)\nelse()\n  add_library(SDL3::SDL3 ALIAS SDL3-static)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Process Sources for Windows Platform\nDESCRIPTION: This CMake snippet sets the process-related source files for the Windows platform. It uses `sdl_glob_sources` to include all C files in the specified directory, sets `SDL_PROCESS_WINDOWS` to 1, and sets `HAVE_SDL_PROCESS` to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_201\n\nLANGUAGE: CMake\nCODE:\n```\nsdl_sources(\"${SDL3_SOURCE_DIR}/src/process/SDL_process.c\")\nif(WINDOWS)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/process/windows/*.c\")\n  set(SDL_PROCESS_WINDOWS 1)\n  set(HAVE_SDL_PROCESS TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding OpenGL Package\nDESCRIPTION: Finds the OpenGL package using CMake's `find_package` command and sets the preferred OpenGL preference to GLVND if not already defined.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED OpenGL_GL_PREFERENCE)\n  set(OpenGL_GL_PREFERENCE GLVND)\nendif()\n\nfind_package(PkgConfig)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Test Configuration for testnative\nDESCRIPTION: This snippet conditionally configures the `testnative` executable based on the operating system (macOS, Windows, or X11/Wayland).  It adds different source files and links against platform-specific libraries such as CoreVideo (macOS), or X11 and Wayland libraries when available. For Wayland, it also defines a generated source file and adds compile options to suppress documentation warnings.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(MACOS)\n    add_sdl_test_executable(testnative BUILD_DEPENDENT NEEDS_RESOURCES TESTUTILS\n        SOURCES\n            testnative.c\n            testnativecocoa.m\n            testnativex11.c\n    )\nelif(WINDOWS)\n    add_sdl_test_executable(testnative BUILD_DEPENDENT NEEDS_RESOURCES TESTUTILS SOURCES testnative.c testnativew32.c)\nelif(HAVE_X11 OR HAVE_WAYLAND)\n    add_sdl_test_executable(testnative BUILD_DEPENDENT NO_C90 NEEDS_RESOURCES TESTUTILS SOURCES testnative.c)\n    if(HAVE_X11)\n        target_sources(testnative PRIVATE testnativex11.c)\n        target_link_libraries(testnative PRIVATE X11)\n    endif()\n    if(HAVE_WAYLAND)\n        set_property(SOURCE ${SDL3_BINARY_DIR}/wayland-generated-protocols/xdg-shell-protocol.c PROPERTY GENERATED 1)\n        target_sources(testnative PRIVATE testnativewayland.c ${SDL3_BINARY_DIR}/wayland-generated-protocols/xdg-shell-protocol.c)\n\n        # Needed to silence the documentation warning in the generated header file\n        target_compile_options(testnative PRIVATE -Wno-documentation-unknown-command)\n        target_link_libraries(testnative PRIVATE wayland-client)\n    endif ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing Shared SDL3 Library\nDESCRIPTION: Tests linking with the shared SDL3 library by creating an executable (`gui-shared`) and linking it against `SDL3::SDL3-shared`. A post-build command copies the shared library to the executable's directory on Windows.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/cmake/test/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SHARED)\n    find_package(SDL3 REQUIRED CONFIG COMPONENTS SDL3-shared)\n    add_executable(gui-shared WIN32 main_gui.c)\n    target_link_libraries(gui-shared PRIVATE SDL3::SDL3-shared)\n    if(WIN32)\n        add_custom_command(TARGET gui-shared POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy_if_different \"$<TARGET_FILE:SDL3::SDL3-shared>\" \"$<TARGET_FILE_DIR:gui-shared>\"\n        )\n    endif()\n\n    add_library(sharedlib-shared SHARED main_lib.c)\n    target_link_libraries(sharedlib-shared PRIVATE SDL3::SDL3-shared)\n    generate_export_header(sharedlib-shared EXPORT_MACRO_NAME MYLIBRARY_EXPORT)\n    target_compile_definitions(sharedlib-shared PRIVATE \"EXPORT_HEADER=\\\"${CMAKE_CURRENT_BINARY_DIR}/sharedlib-shared_export.h\\\"\")\n    set_target_properties(sharedlib-shared PROPERTIES C_VISIBILITY_PRESET \"hidden\")\n\n    add_executable(cli-shared main_cli.c)\n    target_link_libraries(cli-shared PRIVATE SDL3::SDL3-shared)\n    if(WIN32)\n        add_custom_command(TARGET cli-shared POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy_if_different \"$<TARGET_FILE:SDL3::SDL3-shared>\" \"$<TARGET_FILE_DIR:cli-shared>\"\n        )\n    endif()\n\n    if(TEST_TEST)\n        add_executable(sdltest-shared sdltest.c)\n        target_link_libraries(sdltest-shared PRIVATE SDL3::SDL3_test SDL3::SDL3-shared)\n    endif()\n\n    if(CMAKE_Swift_COMPILER)\n        add_executable(swift-shared main.swift)\n        target_include_directories(swift-shared PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/swift\")\n        target_link_libraries(swift-shared PRIVATE SDL3::SDL3-shared)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Check GLIBC for Large File Support CMake\nDESCRIPTION: This block checks if the system is using glibc and if the architecture is 32-bit. If both conditions are true, it defines compiler flags to enable large file support (`_FILE_OFFSET_BITS=64`) and 64-bit time_t (`_TIME_BITS=64`) to handle large inode numbers and prevent the Year 2038 problem.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_81\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_symbol_exists(\"__GLIBC__\" \"stdlib.h\" LIBC_IS_GLIBC)\nif (LIBC_IS_GLIBC AND CMAKE_SIZEOF_VOID_P EQUAL 4)\n  # Enable large file support on 32-bit glibc, so that we can access files with large inode numbers\n  sdl_compile_definitions(PRIVATE \"_FILE_OFFSET_BITS=64\")\n  # Enable 64-bit time_t on 32-bit glibc, so that time stamps remain correct beyond January 2038\n  sdl_compile_definitions(PRIVATE \"_TIME_BITS=64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Storage Support Configuration (CMake)\nDESCRIPTION: Configures the storage system for SDL, including generic and Steam storage. It includes source files for both storage types.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_160\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_STORAGE_GENERIC 1)\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/generic/*.c\")\nset(SDL_STORAGE_STEAM 1)\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/steam/*.c\")\nset(HAVE_SDL_STORAGE 1)\n```\n\n----------------------------------------\n\nTITLE: Define Backgrounding and Foregrounding Signals CMake\nDESCRIPTION: These conditional blocks define compiler definitions for backgrounding and foregrounding signals if they are not set to \"OFF\". It uses `sdl_compile_definitions` to add `SDL_BACKGROUNDING_SIGNAL` and `SDL_FOREGROUNDING_SIGNAL` definitions with the specified signal values.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_89\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SDL_BACKGROUNDING_SIGNAL STREQUAL \"OFF\")\n  sdl_compile_definitions(PRIVATE \"SDL_BACKGROUNDING_SIGNAL=${SDL_BACKGROUNDING_SIGNAL}\")\nendif()\n\nif(NOT SDL_FOREGROUNDING_SIGNAL STREQUAL \"OFF\")\n  sdl_compile_definitions(PRIVATE \"SDL_FOREGROUNDING_SIGNAL=${SDL_FOREGROUNDING_SIGNAL}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for standard headers (no LIBC)\nDESCRIPTION: This CMake snippet checks for a minimal set of standard headers (`stdarg.h`, `stddef.h`, `stdint.h`) when `SDL_LIBC` is not enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_121\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n  set(headers\n    stdarg.h\n    stddef.h\n    stdint.h\n  )\n  foreach(_HEADER ${headers})\n    string(TOUPPER \"${_HEADER}\" HEADER_IDENTIFIER)\n    string(REGEX REPLACE \"[./]\" \"_\" HEADER_IDENTIFIER \"${HEADER_IDENTIFIER}\")\n    set(LIBC_HAS_VAR \"LIBC_HAS_${HEADER_IDENTIFIER}\")\n    check_include_file(\"${_HEADER}\" \"${LIBC_HAS_VAR}\")\n    set(HAVE_${HEADER_IDENTIFIER} ${${LIBC_HAS_VAR}})\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Set SDL3 Link Options CMake\nDESCRIPTION: This line uses the `sdl_pc_link_options` macro to set the link options for SDL3's pkg-config file. It ensures that `-lSDL3` is added to the linker flags when a project uses pkg-config to link against SDL3.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_80\n\nLANGUAGE: cmake\nCODE:\n```\nsdl_pc_link_options(\"-lSDL3\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Makefile for SDL3\nDESCRIPTION: This Makefile snippet demonstrates how to include SDL3 support in a Makefile project. It uses `pkg-config` to retrieve the necessary CFLAGS and LDFLAGS for SDL3.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_6\n\nLANGUAGE: Makefile\nCODE:\n```\nCFLAGS += $(shell pkg-config sdl3 --cflags)\nLDFLAGS += $(shell pkg-config sdl3 --libs)\n```\n\n----------------------------------------\n\nTITLE: Building SDL for PSP with CMake\nDESCRIPTION: This code snippet shows how to build the SDL library for the Sony PSP using CMake. It configures the build directory, sets the build type to Release, specifies the PSP toolchain file, builds the project, and installs it.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-psp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PSPDEV/psp/share/pspdev.cmake\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: Signing APK with CMake\nDESCRIPTION: This snippet signs an aligned APK using the `sdl_apk_sign` custom command. It takes the aligned APK `${TEST}-aligned-apk` and a keystore `SDL_test-debug-keystore` to sign the APK. The signed APK is then ready for distribution.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\nsdl_apk_sign(${TEST}-apk ${TEST}-aligned-apk\n    KEYSTORE SDL_test-debug-keystore\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Copy SDL3 DLL Example (Windows)\nDESCRIPTION: This CMake snippet demonstrates how to copy the SDL3.dll to the directory where the mygame.exe is built using a custom command and generator expressions in a Windows environment.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    add_custom_command(\n        TARGET mygame POST_BUILD\n        COMMAND \"${CMAKE_COMMAND}\" -E copy $<TARGET_FILE:SDL3::SDL3-shared> $<TARGET_FILE_DIR:mygame>\n        VERBATIM\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Create SDL3 Headers Library CMake\nDESCRIPTION: This snippet creates an interface library named SDL3_Headers and an alias SDL3::Headers.  It then sets the export name property and defines the include directories for both build and install interfaces.  The include directories point to both the source and binary directories, as well as installation directories, based on whether `SDL_FRAMEWORK` is enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_243\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(SDL3_Headers INTERFACE)\nadd_library(SDL3::Headers ALIAS SDL3_Headers)\nset_property(TARGET SDL3_Headers PROPERTY EXPORT_NAME \"Headers\")\ntarget_include_directories(SDL3_Headers\n  INTERFACE\n    \"$<BUILD_INTERFACE:${SDL3_BINARY_DIR}/include-revision>\"\n    \"$<BUILD_INTERFACE:${SDL3_SOURCE_DIR}/include>\"\n)\nif(SDL_FRAMEWORK)\n  target_include_directories(SDL3_Headers\n    INTERFACE\n      \"$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/SDL3.framework/Headers>\"\n  )\n  # Add `-F <parent folder of SDL3.framework>` to make sure `#include \"SDL3/...\"` works.\n  target_compile_options(SDL3_Headers\n    INTERFACE\n      \"$<INSTALL_INTERFACE:SHELL:-F $<INSTALL_PREFIX>>\"\n  )\nelse()\n  target_include_directories(SDL3_Headers\n    INTERFACE\n      \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Application Termination in macOS with SDL and NSApplicationDelegate\nDESCRIPTION: This Objective-C snippet provides a workaround for handling application termination when using SDL with a custom NSApplicationDelegate in macOS. It intercepts the applicationShouldTerminate: message and pushes a SDL_EVENT_QUIT event to ensure SDL_Quit is called.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-macos.md#_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSApplicationTerminateReply)applicationShouldTerminate:(NSApplication *)sender\n{\n    if (SDL_GetEventState(SDL_EVENT_QUIT) == SDL_ENABLE) {\n        SDL_Event event;\n        SDL_zero(event);\n        event.type = SDL_EVENT_QUIT;\n        SDL_PushEvent(&event);\n    }\n\n    return NSTerminateCancel;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SDL3 using Pacman in MSYS2\nDESCRIPTION: This command installs the necessary packages for SDL3 development using the Pacman package manager in MSYS2. It installs the GCC compiler, Ninja build system, CMake build system, and the SDL3 library itself.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-mingw.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npacman -S mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-ninja mingw-w64-ucrt-x86_64-cmake mingw-w64-ucrt-x86_64-sdl3\n```\n\n----------------------------------------\n\nTITLE: Checking for LASX support with GCC/Clang\nDESCRIPTION: This CMake snippet checks if the compiler (GCC or Clang) supports Loongson Advanced SIMD Extension (LASX) instructions. It attempts to compile a simple C program that checks for the `__loongarch_asx` macro, and also checks for the existence of the `lasxintrin.h` header file. If both checks are successful, it sets the `HAVE_LASX` variable to `TRUE`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_108\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_LASX)\n      cmake_push_check_state()\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -mlasx\")\n      check_c_source_compiles(\"\n          #ifndef __loongarch_asx\n          #error Assembler CPP flag not enabled\n          #endif\n          int main(int argc, char **argv) { return 0; }\" COMPILER_SUPPORTS_LASX)\n      check_include_file(\"lasxintrin.h\" HAVE_LASXINTRIN_H)\n      cmake_pop_check_state()\n      if(COMPILER_SUPPORTS_LASX AND HAVE_LASXINTRIN_H)\n        set(HAVE_LASX TRUE)\n      endif()\n    endif()\n```\n\n----------------------------------------\n\nTITLE: SDL2 Audio Callback Implementation\nDESCRIPTION: This code demonstrates a basic SDL2 audio callback implementation. It includes the audio callback function `MyAudioCallback` and the initialization of `SDL_AudioSpec` for opening an audio device using `SDL_OpenAudioDevice`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n    void SDLCALL MyAudioCallback(void *userdata, Uint8 * stream, int len)\n    {\n        /* Calculate a little more audio here, maybe using `userdata`, write it to `stream` */\n    }\n\n    /* ...somewhere near startup... */\n    SDL_AudioSpec my_desired_audio_format;\n    SDL_zero(my_desired_audio_format);\n    my_desired_audio_format.format = AUDIO_S16;\n    my_desired_audio_format.channels = 2;\n    my_desired_audio_format.freq = 44100;\n    my_desired_audio_format.samples = 1024;\n    my_desired_audio_format.callback = MyAudioCallback;\n    my_desired_audio_format.userdata = &my_audio_callback_user_data;\n    SDL_AudioDeviceID my_audio_device = SDL_OpenAudioDevice(NULL, 0, &my_desired_audio_format, NULL, 0);\n    SDL_PauseAudioDevice(my_audio_device, 0);\n```\n\n----------------------------------------\n\nTITLE: Packaging SDL Project on Windows using makepkg\nDESCRIPTION: This command packages the SDL project using the provided PackageLayout.xml file. It specifies the layout file, includes the local time zone information, uses the current directory as the source, disables game OS components, includes platform configuration, and sets the package directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-gdk.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmakepkg pack /f PackageLayout.xml /lt /d . /nogameos /pc /pd Package\n```\n\n----------------------------------------\n\nTITLE: Khronos Include Directories CMake\nDESCRIPTION: This block adds the Khronos (OpenGL/GLES) header directory to the include paths. It uses `-idirafter` for GCC and Intel compilers, and adds a system include directory for other compilers (specifically MSVC using Clang). This ensures that Khronos headers are found during compilation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_85\n\nLANGUAGE: cmake\nCODE:\n```\n# Note: The clang toolset for Visual Studio does not support the '-idirafter' option.\nif(USE_GCC OR USE_INTELCC OR (USE_CLANG AND NOT MSVC_CLANG))\n  sdl_compile_options(NO_EXPORT PRIVATE \"$<BUILD_INTERFACE:-idirafter${SDL3_SOURCE_DIR}/src/video/khronos>\")\nelse()\n  sdl_include_directories(NO_EXPORT SYSTEM PRIVATE \"$<BUILD_INTERFACE:${SDL3_SOURCE_DIR}/src/video/khronos>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy FSOps Sources\nDESCRIPTION: This CMake snippet sets the dummy filesystem operations (FSOps) source files if `HAVE_SDL_FSOPS` is not defined. It uses `sdl_sources` to include a specific C file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_213\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_FSOPS)\n  set(SDL_FSOPS_DUMMY 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/dummy/SDL_sysfsops.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking GCC Atomics Support in C\nDESCRIPTION: This snippet checks if the compiler supports GCC atomics using the `__sync_lock_test_and_set`, `__sync_fetch_and_add`, and `__sync_bool_compare_and_swap` intrinsics. The result is stored in the `HAVE_GCC_ATOMICS` variable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_90\n\nLANGUAGE: C\nCODE:\n```\nint main(int argc, char **argv) {\n        int a;\n        void *x, *y, *z;\n        __sync_lock_test_and_set(&a, 4);\n        __sync_lock_test_and_set(&x, y);\n        __sync_fetch_and_add(&a, 1);\n        __sync_bool_compare_and_swap(&a, 5, 10);\n        __sync_bool_compare_and_swap(&x, y, z);\n        return 0; }\n```\n\n----------------------------------------\n\nTITLE: Building SDL on macOS with CMake\nDESCRIPTION: This snippet demonstrates how to build and install SDL on macOS using CMake. It configures the build with framework support and architecture settings, builds the project, and installs it to the ~/SDL directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build -DSDL_FRAMEWORK=ON -DCMAKE_OSX_ARCHITECTURES=\"arm64;x86_64\"\ncmake --build build\ncmake --install build --prefix ~/SDL\n```\n\n----------------------------------------\n\nTITLE: Creating Android project with create-android-project.py (Python)\nDESCRIPTION: This script automates the creation of a basic Android project for SDL applications. It takes the application package name and a list of source files as input, generating a project structure suitable for building an Android APK.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n./create-android-project.py com.yourcompany.yourapp < sources.list\n```\n\nLANGUAGE: python\nCODE:\n```\n./create-android-project.py com.yourcompany.yourapp source1.c source2.c ...sourceN.c\n```\n\nLANGUAGE: python\nCODE:\n```\n./create-android-project.py org.libsdl.testgles ../test/testgles.c\n```\n\n----------------------------------------\n\nTITLE: Media Foundation Camera Driver Configuration (CMake)\nDESCRIPTION: Configures camera support for SDL on Windows using Media Foundation, setting flags and including the necessary source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_170\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_CAMERA)\n    if(HAVE_MFAPI_H)\n      set(HAVE_CAMERA TRUE)\n      set(SDL_CAMERA_DRIVER_MEDIAFOUNDATION 1)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/mediafoundation/*.c\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Subsystem and Enumerating Displays in SDL\nDESCRIPTION: This code snippet demonstrates how to initialize the video subsystem using `SDL_InitSubSystem` with `SDL_INIT_VIDEO`. It then retrieves the available displays using `SDL_GetDisplays` and logs information about each display, including its ID and name. Finally, it quits the video subsystem using `SDL_QuitSubSystem`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_40\n\nLANGUAGE: C\nCODE:\n```\n{\n    if (SDL_InitSubSystem(SDL_INIT_VIDEO)) {\n        int i, num_displays = 0;\n        SDL_DisplayID *displays = SDL_GetDisplays(&num_displays);\n        if (displays) {\n            for (i = 0; i < num_displays; ++i) {\n                SDL_DisplayID instance_id = displays[i];\n                const char *name = SDL_GetDisplayName(instance_id);\n\n                SDL_Log(\"Display %\" SDL_PRIu32 \": %s\", instance_id, name ? name : \"Unknown\");\n            }\n            SDL_free(displays);\n        }\n        SDL_QuitSubSystem(SDL_INIT_VIDEO);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing and Logging Available Sensors in C\nDESCRIPTION: This code snippet initializes the sensor subsystem, retrieves a list of available sensors, iterates through them, and logs their ID, name, type, and platform-specific type. It demonstrates the usage of SDL_GetSensors(), SDL_GetSensorNameForID(), SDL_GetSensorTypeForID(), and SDL_GetSensorNonPortableTypeForID() after initializing the sensor subsystem and before uninitializing it.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_26\n\nLANGUAGE: c\nCODE:\n```\n{\n    if (SDL_InitSubSystem(SDL_INIT_SENSOR)) {\n        int i, num_sensors;\n        SDL_SensorID *sensors = SDL_GetSensors(&num_sensors);\n        if (sensors) {\n            for (i = 0; i < num_sensors; ++i) {\n                SDL_Log(\"Sensor %\" SDL_PRIu32 \": %s, type %d, platform type %d\",\n                        sensors[i],\n                        SDL_GetSensorNameForID(sensors[i]),\n                        SDL_GetSensorTypeForID(sensors[i]),\n                        SDL_GetSensorNonPortableTypeForID(sensors[i]));\n            }\n            SDL_free(sensors);\n        }\n        SDL_QuitSubSystem(SDL_INIT_SENSOR);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CMake Build and Configure\nDESCRIPTION: Configures and builds the CMake project. The `cmake -S . -B build` command configures the project, specifying the source directory as the current directory and the build directory as 'build'. The `cmake --build build` command then builds the project in the specified build directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-cmake.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncmake -S . -B build\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example\nDESCRIPTION: This example demonstrates the proper format for commit messages, including a short description on the first line (50 characters or less) and an optional longer description with lines limited to 72 characters.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-contributing.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFix crash in SDL_FooBar.\n\nThis addresses the issue #123456 by making sure Foo was successful\nbefore calling Bar.\n```\n\n----------------------------------------\n\nTITLE: Detecting Google Stadia Controller in SDL\nDESCRIPTION: This code provides a function to detect if a connected joystick is a Google Stadia controller based on its vendor and product IDs. It serves as a replacement for the removed SDL_CONTROLLER_TYPE_GOOGLE_STADIA.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_IsJoystickGoogleStadiaController(Uint16 vendor_id, Uint16 product_id)\n{\n    return (vendor_id == 0x18d1 && product_id == 0x9400);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Time Sources for N3DS platform\nDESCRIPTION: This CMake snippet sets the time-related source files for the Nintendo 3DS platform. It uses `sdl_glob_sources` to include all C files in the specified directory and sets the `HAVE_SDL_TIME` variable to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_193\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_TIME_N3DS 1)\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/n3ds/*.c\")\nset(HAVE_SDL_TIME TRUE)\n```\n\n----------------------------------------\n\nTITLE: Setting assets directory in build.gradle (Gradle)\nDESCRIPTION: This snippet demonstrates how to configure the 'build.gradle' file to include asset directories for an Android application. It uses the 'assets.srcDirs' property within the 'sourceSets.main' block to specify the directories containing assets.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nassets.srcDirs = ['../../assets', '../../shaders']\n```\n\n----------------------------------------\n\nTITLE: Enable Objective-C ARC on Apple Platforms\nDESCRIPTION: If building for Apple, this checks if the compiler supports -fobjc-arc and enables it. It also sets compile options for Objective-C ARC.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_237\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  cmake_push_check_state(RESET)\n  check_c_compiler_flag(-fobjc-arc COMPILER_SUPPORTS_FOBJC_ARC)\n  cmake_pop_check_state()\n  if(NOT COMPILER_SUPPORTS_FOBJC_ARC)\n    message(FATAL_ERROR \"Compiler does not support -fobjc-arc: this is required on Apple platforms\")\n  endif()\n  sdl_compile_options(PRIVATE \"-fobjc-arc\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: CoreAudio Driver Configuration (CMake/Objective-C)\nDESCRIPTION: Configures CoreAudio for audio support on macOS and iOS. It includes necessary source files and sets the required frameworks (CoreAudio, AudioToolbox, AVFoundation).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_174\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_COREAUDIO 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/coreaudio/*.m\")\n    set(HAVE_SDL_AUDIO TRUE)\n    set(SDL_FRAMEWORK_COREAUDIO 1)\n    set(SDL_FRAMEWORK_AUDIOTOOLBOX 1)\n    set(SDL_FRAMEWORK_AVFOUNDATION 1)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting Compiler Flags\nDESCRIPTION: This series of snippets checks for compiler flag support (e.g., `-Wformat-overflow`, `-Wformat`, `-Wformat-extra-args`) and defines corresponding preprocessor definitions for the `testautomation` target if the flags are supported.  This is done by using `check_c_compiler_flag` and then setting `target_compile_definitions` based on the results.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_c_compiler_flag(-Wformat-overflow HAVE_WFORMAT_OVERFLOW)\nif(HAVE_WFORMAT_OVERFLOW)\n    target_compile_definitions(testautomation PRIVATE HAVE_WFORMAT_OVERFLOW)\nendif()\n\ncheck_c_compiler_flag(-Wformat HAVE_WFORMAT)\nif(HAVE_WFORMAT)\n    target_compile_definitions(testautomation PRIVATE HAVE_WFORMAT)\nendif()\n\ncmake_push_check_state()\nif(HAVE_WFORMAT)\n    # Some compilers ignore -Wformat-extra-args without -Wformat\n    string(APPEND CMAKE_REQUIRED_FLAGS \" -Wformat\")\nendif()\ncheck_c_compiler_flag(-Wformat-extra-args HAVE_WFORMAT_EXTRA_ARGS)\ncmake_pop_check_state()\nif(HAVE_WFORMAT_EXTRA_ARGS)\n    target_compile_definitions(testautomation PRIVATE HAVE_WFORMAT_EXTRA_ARGS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Address Sanitizer Option\nDESCRIPTION: Adds the `HIDAPI_ENABLE_ASAN` option to build HIDAPI with address sanitizer instrumentation for debugging. It then sets the appropriate compiler and linker flags based on whether ASAN is enabled and if the compiler is MSVC.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\noption(HIDAPI_ENABLE_ASAN \"Build HIDAPI with ASAN address sanitizer instrumentation\" OFF)\n\nif(HIDAPI_ENABLE_ASAN)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address\")\n    if(MSVC)\n        # the default is to have \"/INCREMENTAL\" which causes a warning when \"-fsanitize=address\" is present\n        set(CMAKE_EXE_LINKER_FLAGS_DEBUG \"${CMAKE_EXE_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO\")\n        set(CMAKE_SHARED_LINKER_FLAGS_DEBUG \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO\")\n        set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /INCREMENTAL:NO\")\n        set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} /INCREMENTAL:NO\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling HIDAPI Target Installation\nDESCRIPTION: This CMake snippet enables the installation of HIDAPI targets and optionally changes the default installation library directory. Setting `HIDAPI_INSTALL_TARGETS` to ON will trigger the installation, and `CMAKE_INSTALL_LIBDIR` customizes the location where libraries are installed. These configurations must be set before adding the HIDAPI subdirectory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# enable the installation if you need it\nset(HIDAPI_INSTALL_TARGETS ON)\n# (optionally) change default installation locations if it makes sense for your target platform, etc.\nset(CMAKE_INSTALL_LIBDIR \"lib64\")\nadd_subdirectory(hidapi)\n```\n\n----------------------------------------\n\nTITLE: Handling File Opening in macOS with SDL and NSApplicationDelegate\nDESCRIPTION: This Objective-C snippet provides a workaround for handling file opening events when using SDL with a custom NSApplicationDelegate in macOS. It intercepts the application:openFile: message and pushes a SDL_EVENT_DROP_FILE event with the filename to SDL.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-macos.md#_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n- (BOOL)application:(NSApplication *)theApplication openFile:(NSString *)filename\n{\n    if (SDL_GetEventState(SDL_EVENT_DROP_FILE) == SDL_ENABLE) {\n        SDL_Event event;\n        SDL_zero(event);\n        event.type = SDL_EVENT_DROP_FILE;\n        event.drop.file = SDL_strdup([filename UTF8String]);\n        return SDL_PushEvent(&event);\n    }\n\n    return NO;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Compile Definitions to HIDAPI Target\nDESCRIPTION: This CMake snippet conditionally applies a compile definition to the 'hidapi_libusb' target. It adds the 'NO_ICONV' definition when the target exists. This enables a custom compilation setting for the libusb backend if the target is available.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(hidapi)\nif(TARGET hidapi_libusb)\n  # see libusb/hid.c for usage of `NO_ICONV`\n  target_compile_definitions(hidapi_libusb PRIVATE NO_ICONV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: DirectSound Audio Driver Configuration (CMake)\nDESCRIPTION: This snippet configures the DirectSound audio driver for SDL. It checks if `HAVE_DSOUND_H` is set, and if so, sets `SDL_AUDIO_DRIVER_DSOUND` and includes the necessary source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_151\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_AUDIO)\n  if(HAVE_DSOUND_H)\n    set(SDL_AUDIO_DRIVER_DSOUND 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/directsound/*.c\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Header Check: libudev.h CMake\nDESCRIPTION: This snippet checks for the existence of the libudev.h header file and defines HAVE_LIBUDEV_H if found.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_include_file(libudev.h HAVE_LIBUDEV_H)\nif(HAVE_LIBUDEV_H)\n    add_definitions(-DHAVE_LIBUDEV_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDL3 Audio Callback Migration\nDESCRIPTION: This code shows how to migrate an SDL2 audio callback to SDL3 using `SDL_AudioStream`. It defines a new callback function `MyNewAudioCallback` that wraps the original SDL2 callback and uses `SDL_PutAudioStreamData` to pass the generated audio data to the stream.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n    void SDLCALL MyNewAudioCallback(void *userdata, SDL_AudioStream *stream, int additional_amount, int total_amount)\n    {\n        /* Calculate a little more audio here, maybe using `userdata`, write it to `stream`\n         *\n         * If you want to use the original callback, you could do something like this:\n         */\n        if (additional_amount > 0) {\n            Uint8 *data = SDL_stack_alloc(Uint8, additional_amount);\n            if (data) {\n                MyAudioCallback(userdata, data, additional_amount);\n                SDL_PutAudioStreamData(stream, data, additional_amount);\n                SDL_stack_free(data);\n            }\n        }\n    }\n\n    /* ...somewhere near startup... */\n    const SDL_AudioSpec spec = { SDL_AUDIO_S16, 2, 44100 };\n    SDL_AudioStream *stream = SDL_OpenAudioDeviceStream(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &spec, MyNewAudioCallback, &my_audio_callback_user_data);\n    SDL_ResumeAudioDevice(SDL_GetAudioStreamDevice(stream));\n```\n\n----------------------------------------\n\nTITLE: Setting Emscripten-Specific Defaults\nDESCRIPTION: Sets Emscripten-specific default options, disabling assembly support and shared library builds since they aren't available.  Also disables CPU inspection.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(EMSCRIPTEN)\n  # Set up default values for the currently supported set of subsystems:\n  # Emscripten/Javascript does not have assembly support, a dynamic library\n  # loading architecture, or low-level CPU inspection.\n  set(SDL_ASSEMBLY_DEFAULT OFF)\n  set(SDL_SHARED_AVAILABLE OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Fullscreen Display Modes in SDL\nDESCRIPTION: This code retrieves the primary display using `SDL_GetPrimaryDisplay` and then retrieves the available fullscreen display modes using `SDL_GetFullscreenDisplayModes`. It iterates through the modes, logging the display ID, mode index, width, height, pixel density, and refresh rate for each mode. Finally, it frees the allocated memory using `SDL_free`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_42\n\nLANGUAGE: C\nCODE:\n```\n{\n    SDL_DisplayID display = SDL_GetPrimaryDisplay();\n    int num_modes = 0;\n    SDL_DisplayMode **modes = SDL_GetFullscreenDisplayModes(display, &num_modes);\n    if (modes) {\n        for (i = 0; i < num_modes; ++i) {\n            SDL_DisplayMode *mode = modes[i];\n            SDL_Log(\"Display %\" SDL_PRIu32 \" mode %d: %dx%d@%gx %gHz\",\n                    display, i, mode->w, mode->h, mode->pixel_density, mode->refresh_rate);\n        }\n        SDL_free(modes);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MSVC /Zl Option\nDESCRIPTION: If not using SDL_LIBC and using MSVC, this checks if the compiler supports the /Zl flag and, if so, enables it for compilation of C and C++ code and for the SDL3_test target. /Zl omits the default C runtime library name from the .obj file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_239\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SDL_LIBC)\n  if(MSVC)\n    set(saved_CMAKE_TRY_COMPILE_TARGET_TYPE \"${CMAKE_TRY_COMPILE_TARGET_TYPE}\")\n    cmake_push_check_state(RESET)\n    set(CMAKE_TRY_COMPILE_TARGET_TYPE \"STATIC_LIBRARY\")\n    check_c_compiler_flag(\"/Zl\" COMPILER_SUPPORTS_Zl)\n    cmake_pop_check_state()\n    set(CMAKE_TRY_COMPILE_TARGET_TYPE \"${saved_CMAKE_TRY_COMPILE_TARGET_TYPE}\")\n    if(COMPILER_SUPPORTS_Zl)\n      # /Zl omits the default C runtime library name from the .obj file.\n      sdl_compile_options(PRIVATE \"$<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:/Zl>\")\n      if(TARGET SDL3_test)\n        target_compile_options(SDL3_test PRIVATE \"/Zl\")\n      endif()\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling SDL Android JAR Creation (CMake)\nDESCRIPTION: This snippet enables the creation of an SDL3.jar file specifically for Android builds. It depends on the ANDROID platform being detected and the SDL3_MAINPROJECT variable being set.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_dependent_option(SDL_ANDROID_JAR  \"Enable creation of SDL3.jar\" ${SDL3_MAINPROJECT} \"ANDROID\" ON)\n```\n\n----------------------------------------\n\nTITLE: pp_data_dump Application Option\nDESCRIPTION: Adds the `HIDAPI_BUILD_PP_DATA_DUMP` option for building a Windows console application called `pp_data_dump.exe`. It defaults to ON only for debug builds.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    option(HIDAPI_BUILD_PP_DATA_DUMP \"Build small Windows console application pp_data_dump.exe\" ${IS_DEBUG_BUILD})\nendif()\n```\n\n----------------------------------------\n\nTITLE: DirectX Check and Configuration (CMake)\nDESCRIPTION: This snippet checks for DirectX headers and configures include directories and libraries if found. It also handles setting up the environment for using the DirectX SDK.  The snippet checks environment variables and sets flags based on the target platform (MinGW or MSVC).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_146\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_DIRECTX)\n  cmake_push_check_state()\n  if(DEFINED MSVC_VERSION AND NOT ${MSVC_VERSION} LESS 1700)\n    set(USE_WINSDK_DIRECTX TRUE)\n  endif()\n  if(NOT MINGW AND NOT USE_WINSDK_DIRECTX)\n    if(\"$ENV{DXSDK_DIR}\" STREQUAL \"\")\n      message(FATAL_ERROR \"DIRECTX requires the \\$DXSDK_DIR environment variable to be set\")\n    endif()\n    string(APPEND CMAKE_REQUIRED_FLAGS \" /I\\\"$ENV{DXSDK_DIR}\\Include\\\"\")\n  endif()\n\n  check_include_file(d3d9.h HAVE_D3D9_H)\n  check_include_file(d3d11_1.h HAVE_D3D11_H)\n  check_include_file(ddraw.h HAVE_DDRAW_H)\n  check_include_file(dsound.h HAVE_DSOUND_H)\n  check_include_file(dinput.h HAVE_DINPUT_H)\n  if(SDL_CPU_ARM32)  # !!! FIXME: this should probably check if we're !(x86 or x86-64) instead of arm.\n    set(HAVE_DINPUT_H 0)\n  endif()\n  check_include_file(dxgi.h HAVE_DXGI_H)\n  cmake_pop_check_state()\n  if(HAVE_D3D9_H OR HAVE_D3D11_H OR HAVE_DDRAW_H OR HAVE_DSOUND_H OR HAVE_DINPUT_H)\n    set(HAVE_DIRECTX TRUE)\n    if(NOT MINGW AND NOT USE_WINSDK_DIRECTX)\n      if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set(PROCESSOR_ARCH \"x64\")\n      else()\n        set(PROCESSOR_ARCH \"x86\")\n      endif()\n      sdl_link_directories(\"$<BUILD_INTERFACE:\\$ENV{DXSDK_DIR}\\lib\\${PROCESSOR_ARCH}>\")\n      sdl_include_directories(PRIVATE SYSTEM \"$<BUILD_INTERFACE:$ENV{DXSDK_DIR}\\Include>\")\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RISC OS Executables\nDESCRIPTION: This snippet configures the SDL test executables for RISC OS. It sets the `-static` linker flag, creates custom commands to convert ELF files to AIF files, and creates a custom target to depend on the AIF file conversion.  `elf2aif` is assumed to be a RISC OS utility for ELF to AIF conversion.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nif(RISCOS)\n    set(SDL_TEST_EXECUTABLES_AIF)\n    foreach(APP ${SDL_TEST_EXECUTABLES})\n        set_property(TARGET ${APP} APPEND_STRING PROPERTY LINK_FLAGS \" -static\")\n        add_custom_command(\n            OUTPUT ${APP},ff8\n            COMMAND elf2aif ${APP} ${APP},ff8\n            DEPENDS ${APP}\n        )\n        add_custom_target(${APP}-aif ALL DEPENDS ${APP},ff8)\n        list(APPEND SDL_TEST_EXECUTABLES_AIF ${CMAKE_CURRENT_BINARY_DIR}/${APP},ff8)\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Create Compatibility Aliases\nDESCRIPTION: Creates aliases for the hidapi_hidraw library to improve compatibility with different find_package() calls and raw library linking.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# compatibility with find_package()\nadd_library(hidapi::hidraw ALIAS hidapi_hidraw)\n# compatibility with raw library link\nadd_library(hidapi-hidraw ALIAS hidapi_hidraw)\n```\n\n----------------------------------------\n\nTITLE: Installing hidapi_winapi Target\nDESCRIPTION: This conditional statement checks if `HIDAPI_INSTALL_TARGETS` is defined. If it is, it installs the `hidapi_winapi` target, specifying the destination directories for runtime binaries, libraries, archives, and public headers. It also exports the target as `hidapi` for use by other CMake projects.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(HIDAPI_INSTALL_TARGETS)\n    install(TARGETS hidapi_winapi EXPORT hidapi\n        RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n        LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        PUBLIC_HEADER DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/hidapi\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding HIDAPI as a subdirectory\nDESCRIPTION: This snippet demonstrates how to include HIDAPI as a subdirectory within a larger CMake project. The `add_subdirectory` command integrates HIDAPI's build system into the main project's build process.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# root CMakeLists.txt\ncmake_minimum_required(VERSION 3.4.3...3.25 FATAL_ERROR)\n\nadd_subdirectory(hidapi)\nadd_subdirectory(my_application)\n\n# my_application/CMakeLists.txt\nproject(my_application)\n\nadd_executable(my_application main.c)\n```\n\n----------------------------------------\n\nTITLE: Detecting CMake Platform\nDESCRIPTION: Calls a custom CMake function to detect the platform on which the project is being built.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nSDL_DetectCMakePlatform()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Assembly Option\nDESCRIPTION: Sets the default assembly option based on the compiler being used.  If Clang, GCC, IntelCC, or MSVC (version > 1400) is used, it's ON; otherwise, it's OFF.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_ASSEMBLY_DEFAULT OFF)\nif(USE_CLANG OR USE_GCC OR USE_INTELCC OR MSVC_VERSION GREATER 1400)\n  set(SDL_ASSEMBLY_DEFAULT ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Video Sources for N3DS platform\nDESCRIPTION: This CMake snippet conditionally sets the video-related source files for the Nintendo 3DS platform if `SDL_VIDEO` is enabled. It uses `sdl_glob_sources` to include all C files in the specified directory and sets the `HAVE_SDL_VIDEO` variable to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_197\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_VIDEO)\n  set(SDL_VIDEO_DRIVER_N3DS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/n3ds/*.c\")\n  set(HAVE_SDL_VIDEO TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: C source for math function check (float with suffix)\nDESCRIPTION: This C source code is used by CMake's `check_c_source_compiles` to verify the availability of the suffixed version of a math function (e.g., isinff, isnanf) for `float` arguments.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_117\n\nLANGUAGE: c\nCODE:\n```\n#include <math.h>\nint main() {\n  float f = 3.14159f;\n  return ${math_fn}f(f);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Test Executables and Resources in CMake\nDESCRIPTION: This CMake code installs the SDL test executables and associated resource files.  It handles different installation procedures for RISC OS (copying AIF files) and other platforms (installing targets). It also calls `SDL_install_pdb` for MSVC builds and handles the installation of resource files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_INSTALL_TESTS)\n    if(RISCOS)\n        install(\n            FILES ${SDL_TEST_EXECUTABLES_AIF}\n            DESTINATION ${CMAKE_INSTALL_LIBEXECDIR}/installed-tests/SDL3\n        )\n    else()\n        install(\n            TARGETS ${SDL_TEST_EXECUTABLES}\n            DESTINATION ${CMAKE_INSTALL_LIBEXECDIR}/installed-tests/SDL3\n        )\n    endif()\n    if(MSVC)\n        foreach(test IN LISTS SDL_TEST_EXECUTABLES)\n            SDL_install_pdb(${test} \"${CMAKE_INSTALL_LIBEXECDIR}/installed-tests/SDL3\")\n        endforeach()\n    endif()\n    install(\n        FILES ${RESOURCE_FILES}\n        DESTINATION ${CMAKE_INSTALL_LIBEXECDIR}/installed-tests/SDL3\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Shared and Static Libraries with CMake\nDESCRIPTION: This shell script demonstrates how to build both shared and static versions of the HIDAPI library using CMake. It configures and builds each variant separately, then installs them both to the same installation prefix, ensuring that both library types are available. The shared library is installed last to ensure the CMake targets refer to the shared library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# First - configure/build\n\n# Static libraries\ncmake -S <HIDAPI source dir> -B \"<build dir>/static\" -DCMAKE_INSTALL_PREFIX=<your installation prefix> -DBUILD_SHARED_LIBS=FALSE\ncmake --build \"<build dir>/static\"\n# Shared libraries\ncmake -S <HIDAPI source dir> -B \"<build dir>/shared\" -DCMAKE_INSTALL_PREFIX=<your installation prefix> -DBUILD_SHARED_LIBS=TRUE\ncmake --build \"<build dir>/shared\"\n\n# (Optionally) change the installation destination.\n# NOTE1: this is supported by CMake only on UNIX platforms\n#  See https://cmake.org/cmake/help/latest/envvar/DESTDIR.html\n# NOTE2: this is not the same as `CMAKE_INSTALL_PREFIX` set above\n# NOTE3: this is only required if you have a staging dir other than the final runtime dir,\n#  e.g. during cross-compilation\nexport DESTDIR=\"$STAGING_DIR\"\n\n#\n# Install the libraries\n# NOTE: order of installation matters - install Shared variant *the last*\n\n# Static libraries\ncmake --install \"<build dir>/static\"\n# Shared libraries\ncmake --install \"<build dir>/shared\"\n\n```\n\n----------------------------------------\n\nTITLE: Building SDL Project with Emscripten\nDESCRIPTION: These commands build the SDL project using Emscripten. `emcmake cmake -S . -B build` configures the build using Emscripten's toolchain, creating a build directory. `cd build` changes the current directory to the build directory, and `emmake make` compiles the project using Emscripten's make tool.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-emscripten.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nemcmake cmake -S . -B build\ncd build\nemmake make\n```\n\n----------------------------------------\n\nTITLE: Vulkan Video Configuration (CMake)\nDESCRIPTION: Configures Vulkan support in SDL, setting necessary flags if Vulkan is enabled and the Vulkan renderer should be used.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_167\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_VULKAN)\n      set(SDL_VIDEO_VULKAN 1)\n      set(HAVE_VULKAN TRUE)\n      if(SDL_RENDER_VULKAN)\n        set(SDL_VIDEO_RENDER_VULKAN 1)\n        set(HAVE_RENDER_VULKAN TRUE)\n      endif()\n    endif()\n```\n\n----------------------------------------\n\nTITLE: SDL_AppEvent Callback Function in C\nDESCRIPTION: This is the signature for the SDL_AppEvent callback function. It is called whenever an SDL event arrives. It receives the application state and the event itself. It returns a SDL_AppResult to indicate success, failure or continuation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-main-functions.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nSDL_AppResult SDL_AppEvent(void *appstate, SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: Setting Sensor Sources for N3DS platform\nDESCRIPTION: This CMake snippet conditionally sets the sensor-related source files for the Nintendo 3DS platform if `SDL_SENSOR` is enabled. It uses `sdl_glob_sources` to include all C files in the specified directory and sets the `HAVE_SDL_SENSORS` variable to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_196\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_SENSOR)\n  set(SDL_SENSOR_N3DS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/n3ds/*.c\")\n  set(HAVE_SDL_SENSORS TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: Configures a CMake project named 'hello' that utilizes SDL. It sets output directories for runtime and library files and includes SDL as a subproject from the 'vendored/SDL' directory. It also defines the 'hello' executable and links it to the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-cmake.md#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(hello)\n\n# set the output directory for built objects.\n# This makes sure that the dynamic library goes into the build directory automatically.\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/$<CONFIGURATION>\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/$<CONFIGURATION>\")\n\n# This assumes the SDL source is available in vendored/SDL\nadd_subdirectory(vendored/SDL EXCLUDE_FROM_ALL)\n\n# Create your game executable target as usual\nadd_executable(hello WIN32 hello.c)\n\n# Link to the actual SDL3 library.\ntarget_link_libraries(hello PRIVATE SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: Installing SDL Project Package on Windows using wdapp\nDESCRIPTION: This command installs the created SDL project package (msixvc file) on the Windows system using the wdapp install command. It facilitates the deployment of the packaged application for testing and distribution.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-gdk.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nwdapp install PACKAGENAME.msixvc\n```\n\n----------------------------------------\n\nTITLE: Macro: ASAN Check and Add Debug Flag\nDESCRIPTION: This macro checks for AddressSanitizer support and appends appropriate flags to debug build configurations. It also sets the HAVE_ASAN variable if any ASAN flags are supported.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_229\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(asan_check_add_debug_flag ASAN_FLAG)\n  check_add_debug_flag(\"-fsanitize=${ASAN_FLAG}\" \"${ASAN_FLAG}\")\n  if(HAS_C_${ASAN_FLAG} OR HAS_CXX_${ASAN_FLAG})\n    set(HAVE_ASAN ON)\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Define Project CMake\nDESCRIPTION: This snippet defines the project 'hidapi' using the `project` command, specifying the version and programming language (C). This is a standard CMake command to declare the project's name, version, and supported languages.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nproject(hidapi VERSION \"${VERSION}\" LANGUAGES C)\n```\n\n----------------------------------------\n\nTITLE: C source for Altivec check\nDESCRIPTION: This C source code is used by CMake's `check_c_source_compiles` function to verify Altivec support. It includes the `altivec.h` header and defines a simple function using Altivec intrinsics.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_105\n\nLANGUAGE: c\nCODE:\n```\n#include <altivec.h>\nvector unsigned int vzero() {\n    return vec_splat_u32(0);\n}\nint main(int argc, char **argv) { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Create Interface Library CMake\nDESCRIPTION: This snippet creates an interface library named `hidapi_include`. Interface libraries are used to group include directories and other interface properties. It sets the include directories for both build and install interfaces, taking into account potential framework usage on Apple platforms. It also creates an alias `hidapi::include` for the interface library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(hidapi_include INTERFACE)\ntarget_include_directories(hidapi_include INTERFACE\n    \"$<BUILD_INTERFACE:${PROJECT_ROOT}/hidapi>\"\n)\nif(APPLE AND CMAKE_FRAMEWORK)\n    # FIXME: https://github.com/libusb/hidapi/issues/492: it is untrivial to set the include path for Framework correctly\nelse()\n    target_include_directories(hidapi_include INTERFACE\n        \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/hidapi>\"\n    )\nendif()\nset_target_properties(hidapi_include PROPERTIES EXPORT_NAME \"include\")\nset(HIDAPI_PUBLIC_HEADERS \"${PROJECT_ROOT}/hidapi/hidapi.h\")\n\nadd_library(hidapi::include ALIAS hidapi_include)\n```\n\n----------------------------------------\n\nTITLE: Checking if Windows Compiler is Available\nDESCRIPTION: This snippet checks if a Windows compiler is available by attempting to compile a simple C source file that includes the `windows.h` header.  The macro `HAVE_WIN32_CC` is set if the compilation is successful.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_145\n\nLANGUAGE: C\nCODE:\n```\n#include <windows.h>\nint main(int argc, char **argv) { return 0; }\n```\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"\n    #include <windows.h>\n    int main(int argc, char **argv) { return 0; }\" HAVE_WIN32_CC)\n```\n\n----------------------------------------\n\nTITLE: Documenting a Symbol with Doxygen-style Comments in C\nDESCRIPTION: This code snippet demonstrates how to document a function using Doxygen-style comments.  The comment block starts with `/**` and includes parameter descriptions using `\\param`, return value description using `\\returns`, and other information such as thread safety and availability since a specific SDL version.  The comments are intended to be parsed by `wikiheaders.pl` to generate wiki pages and other documentation formats. The comment block must start in the first column.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-documentation-rules.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/**\n * This is a function that does something.\n *\n * It can be used for frozzling bobbles. Be aware that the Frozulator module\n * _must_ be initialized before calling this.\n *\n * \\param frozzlevel The amount of frozzling to perform.\n * \\param color What color bobble to frozzle. 0 is red, 1 is green.\n * \\returns the number of bobbles that were actually frozzled, -1 on error.\n *\n * \\threadsafety Do not call this from two threads at once, or the bobbles\n *               won't all frozzle correctly!\n *\n * \\since This function is available since SDL 7.3.1.\n *\n * \\sa SDL_DoSomethingElse\n */\nextern SDL_DECLSPEC int SDLCALL SDL_DoSomething(int frozzlevel, int color);\n```\n\n----------------------------------------\n\nTITLE: Minimal CMakeLists.txt for SDL3 Project\nDESCRIPTION: This `CMakeLists.txt` file provides a basic configuration for building a game with SDL3, linking against a system-installed SDL that was built with MinGW-w64. It includes finding the SDL3 package, adding an executable, linking against SDL3, and copying the SDL3 DLL to the build directory on Windows systems.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-windows.md#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(mygame)\n\nfind_package(SDL3 REQUIRED CONFIG COMPONENTS SDL3-shared)\n\nadd_executable(mygame WIN32 mygame.c)\ntarget_link_libraries(mygame PRIVATE SDL3::SDL3)\n\n# On Windows, copy SDL3.dll to the build directory\nif(WIN32)\n    add_custom_command(\n        TARGET mygame POST_BUILD\n        COMMAND \"${CMAKE_COMMAND}\" -E copy $<TARGET_FILE:SDL3::SDL3-shared> $<TARGET_FILE_DIR:mygame>\n        VERBATIM\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copying Resources in CMake\nDESCRIPTION: This snippet copies resource files (BMP, WAV, HEX) from the source directory to the binary directory. It uses `add_custom_command` to define the copy operation and `add_custom_target` to ensure the resources are copied before the examples are built.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB RESOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/*.bmp ${CMAKE_CURRENT_SOURCE_DIR}/../test/*.wav ${CMAKE_CURRENT_SOURCE_DIR}/../test/*.hex)\n\nset(RESOURCE_FILE_NAMES)\nset(RESOURCE_FILES_BINDIR)\nforeach(resource_file IN LISTS RESOURCE_FILES)\n    get_filename_component(res_file_name ${resource_file} NAME)\n    list(APPEND RESOURCE_FILE_NAMES \"${res_file_name}\")\n    set(resource_file_bindir \"${example_bin_dir}/${res_file_name}\")\n    add_custom_command(OUTPUT \"${resource_file_bindir}\"\n        COMMAND \"${CMAKE_COMMAND}\" -E copy \"${resource_file}\" \"${resource_file_bindir}\"\n        DEPENDS \"${resource_file}\"\n    )\n    list(APPEND RESOURCE_FILES_BINDIR \"${resource_file_bindir}\")\nendforeach()\nadd_custom_target(copy-sdl-example-resources\n    DEPENDS \"${RESOURCE_FILES_BINDIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Finding idProduct Value\nDESCRIPTION: This command uses udevadm to query device information and then grep to filter the output and find the idProduct value for the input device, used to create the udev rule.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo udevadm info -a --name=input/eventXX | grep idProduct\n```\n\n----------------------------------------\n\nTITLE: SDL_TICKS_PASSED Macro Usage (SDL_timer.h) - Old Method (C)\nDESCRIPTION: This code snippet demonstrates the usage of the SDL_TICKS_PASSED macro to compare tick values in older SDL versions. It calculates a deadline and checks if the current ticks have passed the deadline using the macro. The SDL_TICKS_PASSED macro is no longer recommended.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_36\n\nLANGUAGE: c\nCODE:\n```\nUint32 deadline = SDL_GetTicks() + 1000;\n...\nif (SDL_TICKS_PASSED(SDL_GetTicks(), deadline)) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SDL3 Shared Object Version\nDESCRIPTION: Sets the shared object version variables for SDL3. These variables define the major, minor, and patch version numbers for the shared library, which is crucial for compatibility and versioning.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Increment this if there is an incompatible change - but if that happens,\n# we should rename the library from SDL3 to SDL4, at which point this would\n# reset to 0 anyway.\nset(SDL_SO_VERSION_MAJOR \"0\")\nset(SDL_SO_VERSION_MINOR \"${PROJECT_VERSION_MINOR}\")\nset(SDL_SO_VERSION_PATCH \"${PROJECT_VERSION_PATCH}\")\nset(SDL_SO_VERSION \"${SDL_SO_VERSION_MAJOR}.${SDL_SO_VERSION_MINOR}.${SDL_SO_VERSION_PATCH}\")\n```\n\n----------------------------------------\n\nTITLE: Checking ARM NEON Support in C\nDESCRIPTION: This snippet checks for ARM NEON support using `<arm_neon.h>` and NEON intrinsics (`vld1q_f32`, `vaddq_f32`, `vst1q_f32`). It defines a function `floats_add` to perform vector addition using NEON instructions. The presence of NEON is determined by setting `COMPILER_SUPPORTS_ARMNEON`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_102\n\nLANGUAGE: C\nCODE:\n```\n#include <arm_neon.h>\n        void floats_add(float *dest, float *a, float *b, unsigned size) {\n          for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n            vst1q_f32(dest, vaddq_f32(vld1q_f32(a), vld1q_f32(b)));\n          }\n        }\n        int main(int argc, char *argv[]) {\n          floats_add((float*)0, (float*)0, (float*)0, 0);\n          return 0;\n         }\n```\n\n----------------------------------------\n\nTITLE: RGB24 to YUV420 Conversion\nDESCRIPTION: This command line invocation runs the test program to convert a PPM (RGB24) file to YUV420. It specifies the input PPM file and the output filename template.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/video/yuv2rgb/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n./test_yuv_rgb yuv2rgb image.ppm image\n```\n\n----------------------------------------\n\nTITLE: Setting Apple Platform Compiler Options\nDESCRIPTION: This snippet checks for support of the `-Wno-error=deprecated-declarations` compiler flag on Apple platforms and adds it as a compile option for `testnativecocoa.m` and the `testgles` target if supported. This is used to suppress errors related to deprecated declarations.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n    cmake_push_check_state()\n    check_c_compiler_flag(-Wno-error=deprecated-declarations HAVE_WNO_ERROR_DEPRECATED_DECLARATIONS)\n    cmake_pop_check_state()\n    if(HAVE_WNO_ERROR_DEPRECATED_DECLARATIONS)\n        set_property(SOURCE \"testnativecocoa.m\" APPEND PROPERTY COMPILE_OPTIONS \"-Wno-error=deprecated-declarations\")\n        set_property(TARGET testgles APPEND PROPERTY COMPILE_OPTIONS \"-Wno-error=deprecated-declarations\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting X11 Video Driver Options (CMake)\nDESCRIPTION: This snippet configures options for enabling the X11 video driver and related features (Xcursor, Xdbe, XInput, Xfixes, Xrandr, Xscrnsaver, XShape, Xsync, XTest). These options depend on whether SDL_VIDEO is enabled and the target operating system is UNIX_SYS.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_X11                 \"Use X11 video driver\" ${UNIX_SYS} \"SDL_VIDEO\" OFF)\ndep_option(SDL_X11_SHARED          \"Dynamically load X11 support\" ON \"SDL_X11;SDL_DEPS_SHARED\" OFF)\ndep_option(SDL_X11_XCURSOR         \"Enable Xcursor support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XDBE            \"Enable Xdbe support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XINPUT          \"Enable XInput support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XFIXES          \"Enable Xfixes support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XRANDR          \"Enable Xrandr support\" \"${SDL_X11_XRANDR_DEFAULT}\" SDL_X11 OFF)\ndep_option(SDL_X11_XSCRNSAVER      \"Enable Xscrnsaver support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XSHAPE          \"Enable XShape support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XSYNC           \"Enable Xsync support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XTEST           \"Enable XTest support\" ON SDL_X11 OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting up Haptic Driver for Darwin Platforms (CMake)\nDESCRIPTION: This snippet configures the haptic driver based on the target platform. On iOS, TVOS, visionOS and watchOS, the dummy haptic driver is used.  Otherwise, the IOKit haptic driver is enabled and relevant source files are included.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_180\n\nLANGUAGE: cmake\nCODE:\n```\nif (IOS OR TVOS OR VISIONOS OR WATCHOS)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/dummy/*.c\")\n      set(SDL_HAPTIC_DUMMY 1)\n    else()\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/darwin/*.c\")\n      set(SDL_HAPTIC_IOKIT 1)\n      set(SDL_FRAMEWORK_IOKIT 1)\n      set(SDL_FRAMEWORK_FF 1)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: C Naive Main Loop Structure\nDESCRIPTION: This code represents a simple main loop structure commonly found in C games. It serves as a starting point before adapting it for Emscripten. This structure is incompatible with Emscripten's main thread requirements.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-emscripten.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid main(void)\n{\n    initialize_the_game();\n    while (game_is_still_running) {\n        check_for_new_input();\n        think_about_stuff();\n        draw_the_next_frame();\n    }\n    deinitialize_the_game();\n}\n```\n\n----------------------------------------\n\nTITLE: Pixel Format Masks and Corresponding SDL3 Format\nDESCRIPTION: This code provides a mapping between various color masks (R, G, B, A) and their corresponding `SDL_PIXELFORMAT_*` values in SDL3.  This is useful when migrating code that relies on explicit color masks.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\n// Various mask (R, G, B, A) and their corresponding format:\n0xFF000000 0x00FF0000 0x0000FF00 0x000000FF => SDL_PIXELFORMAT_RGBA8888\n0x00FF0000 0x0000FF00 0x000000FF 0xFF000000 => SDL_PIXELFORMAT_ARGB8888\n0x0000FF00 0x00FF0000 0xFF000000 0x000000FF => SDL_PIXELFORMAT_BGRA8888\n0x000000FF 0x0000FF00 0x00FF0000 0xFF000000 => SDL_PIXELFORMAT_ABGR8888\n0x0000F800 0x000007E0 0x0000001F 0x00000000 => SDL_PIXELFORMAT_RGB565\n```\n\n----------------------------------------\n\nTITLE: Text without a blank line before an unordered list in Markdown\nDESCRIPTION: Example of markdown unordered list without a blank line, which `wikiheaders.pl` will incorrectly wrap.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-documentation-rules.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\nHere is some text without a blank line\nbefore an unordered list!\n- item a\n- item b\n- item c\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Mouse Events\nDESCRIPTION: This snippet disables mouse events for touch events. It's recommended because the Vita has two touchscreens. This prevents duplicate or unexpected mouse behavior.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-vita.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetHint(SDL_HINT_TOUCH_MOUSE_EVENTS, \"0\");\n```\n\n----------------------------------------\n\nTITLE: SDL_TICKS_PASSED Macro Usage (SDL_timer.h) - New Method (C)\nDESCRIPTION: This code snippet demonstrates how to compare tick values directly in newer SDL versions, replacing the SDL_TICKS_PASSED macro. It calculates a deadline using SDL_GetTicks() and checks if the current ticks are greater than or equal to the deadline. The return value of `SDL_GetTicks` is now a 64 bit value.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_37\n\nLANGUAGE: c\nCODE:\n```\nUint64 deadline = SDL_GetTicks() + 1000\n...\nif (SDL_GetTicks() >= deadline) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Sources for N3DS and Generic\nDESCRIPTION: This CMake snippet sets the thread-related source files for both the Nintendo 3DS platform and generic implementations. It uses `sdl_glob_sources` to include all C files in the specified directory for N3DS and `sdl_sources` for the generic files.  It also sets the `HAVE_SDL_THREADS` variable to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_192\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_THREAD_N3DS 1)\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/thread/n3ds/*.c\")\nsdl_sources(\n  \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_syscond.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_systls.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_sysrwlock.c\"\n)\nset(HAVE_SDL_THREADS TRUE)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH Option (CMake)\nDESCRIPTION: This snippet configures an option to use an rpath when linking SDL. RPATH is a mechanism to embed library search paths into the executable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_RPATH               \"Use an rpath when linking SDL\" ${SDL_RPATH_DEFAULT})\n```\n\n----------------------------------------\n\nTITLE: Creating PBP files for PSP using CMake\nDESCRIPTION: This snippet uses CMake to create PBP (PSP executable) files for each SDL example executable when building for the PSP platform. It iterates through the `SDL_EXAMPLE_EXECUTABLES` list and calls the `create_pbp_file` function with the target application, title, icon paths, and output directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(PSP)\n    # Build EBOOT files if building for PSP\n    foreach(APP ${SDL_EXAMPLE_EXECUTABLES})\n        create_pbp_file(\n            TARGET          ${APP}\n            TITLE           SDL-${APP}\n            ICON_PATH       NULL\n            BACKGROUND_PATH NULL\n            PREVIEW_PATH    NULL\n            OUTPUT_DIR      $<TARGET_FILE_DIR:${APP}>/sdl-${APP}\n        )\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and linking the hidapi_libusb library\nDESCRIPTION: This snippet defines the hidapi_libusb library, specifies its source files and links it against the hidapi_include target.  It sets up the initial library target and defines the source files to be compiled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/libusb/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(hidapi_libusb\n    ${HIDAPI_PUBLIC_HEADERS}\n    hid.c\n)\ntarget_link_libraries(hidapi_libusb PUBLIC hidapi_include)\n```\n\n----------------------------------------\n\nTITLE: Mapping Deseret Capital Letters\nDESCRIPTION: This snippet maps Deseret capital letters to their respective Unicode representations. The Deseret alphabet was developed for the English language.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/build-scripts/casefolding.txt#_snippet_5\n\nLANGUAGE: Other\nCODE:\n```\n10400; C; 10428; # DESERET CAPITAL LETTER LONG I\n10401; C; 10429; # DESERET CAPITAL LETTER LONG E\n10402; C; 1042A; # DESERET CAPITAL LETTER LONG A\n10403; C; 1042B; # DESERET CAPITAL LETTER LONG AH\n10404; C; 1042C; # DESERET CAPITAL LETTER LONG O\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Installing Multiple APKs\nDESCRIPTION: This snippet creates a custom target `install-sdl-test-apks` for installing multiple APKs defined in the `install_targets` list.  It depends on all targets listed in the `install_targets` variable, ensuring that all individual installation targets are completed before this aggregate target is executed. The `VERBATIM` argument ensures that CMake passes the command as is, without any escaping or interpretation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(install-sdl-test-apks\n    DEPENDS ${install_targets}\n    VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: DLOPEN Configuration CMake\nDESCRIPTION: This snippet checks for DLOPEN support on UNIX and Apple platforms. If found, it sets `SDL_LOADSO_DLOPEN`, globs the corresponding source files, and defines `HAVE_SDL_LOADSO`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_128\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX OR APPLE)\n  # Relevant for Unix/Darwin only\n  set(DYNAPI_NEEDS_DLOPEN 1)\n  CheckDLOPEN()\n  if(HAVE_DLOPEN)\n    set(SDL_LOADSO_DLOPEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/loadso/dlopen/*.c\")\n    set(HAVE_SDL_LOADSO TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting ROCKCHIP Hardware Acceleration Option (CMake)\nDESCRIPTION: This snippet configures an option to enable ROCKCHIP Hardware Acceleration video driver. It depends on SDL_VIDEO being enabled, the system being UNIX_SYS, and the CPU architecture being ARM32 or ARM64.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_ROCKCHIP            \"Use ROCKCHIP Hardware Acceleration video driver\" ON \"SDL_VIDEO;UNIX_SYS;SDL_CPU_ARM32 OR SDL_CPU_ARM64\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Creating AIF files for RISC OS using CMake\nDESCRIPTION: This snippet creates AIF (Acorn Image File) files for each SDL example executable when building for RISC OS. It iterates through the `SDL_EXAMPLE_EXECUTABLES` list, sets the `LINK_FLAGS` property to include `-static`, adds a custom command to convert the ELF file to an AIF file using `elf2aif`, and adds a custom target that depends on the AIF file. It also appends the generated AIF files to the `SDL_EXAMPLE_EXECUTABLES_AIF` list.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(RISCOS)\n    set(SDL_EXAMPLE_EXECUTABLES_AIF)\n    foreach(APP ${SDL_EXAMPLE_EXECUTABLES})\n        set_property(TARGET ${APP} APPEND_STRING PROPERTY LINK_FLAGS \" -static\")\n        add_custom_command(\n            OUTPUT ${APP},ff8\n            COMMAND elf2aif ${APP} ${APP},ff8\n            DEPENDS ${APP}\n        )\n        add_custom_target(${APP}-aif ALL DEPENDS ${APP},ff8)\n        list(APPEND SDL_EXAMPLE_EXECUTABLES_AIF ${CMAKE_CURRENT_BINARY_DIR}/${APP},ff8)\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: windows.gaming.input.h Compilation Check (CMake)\nDESCRIPTION: This CMake code checks if the `windows.gaming.input.h` header can be successfully compiled. It includes a basic program using the header's functionality. `COBJMACROS` is defined to use COM object macros.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_148\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"\n    #define COBJMACROS\n    #include <windows.gaming.input.h>\n    static __x_ABI_CWindows_CGaming_CInput_CIGamepadStatics2 *s2;\n    int main(int argc, char **argv) { return 0; }\" HAVE_WINDOWS_GAMING_INPUT_H\n  )\n```\n\n----------------------------------------\n\nTITLE: Find libudev Package\nDESCRIPTION: Finds the libudev package using pkg-config.  The IMPORTED_TARGET option creates a target named PkgConfig::libudev that can be linked against.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(FindPkgConfig)\npkg_check_modules(libudev REQUIRED IMPORTED_TARGET libudev)\n```\n\n----------------------------------------\n\nTITLE: Exporting CMake Targets\nDESCRIPTION: This snippet exports various CMake targets for SDL3, including headers, shared libraries, static libraries, and the test library. It defines namespaces and file names for the exported target files, enabling other projects to easily use SDL3.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_249\n\nLANGUAGE: CMake\nCODE:\n```\nexport(TARGETS SDL3_Headers NAMESPACE \"SDL3::\" FILE \"SDL3headersTargets.cmake\")\n\nif(SDL_SHARED)\n  export(TARGETS SDL3-shared NAMESPACE \"SDL3::\" FILE \"SDL3sharedTargets.cmake\")\nendif()\n\nif(SDL_STATIC)\n  export(TARGETS SDL3-static NAMESPACE \"SDL3::\" FILE \"SDL3staticTargets.cmake\")\nendif()\n\nif(SDL_TEST_LIBRARY)\n  export(TARGETS SDL3_test NAMESPACE \"SDL3::\" FILE \"SDL3testTargets.cmake\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Macro: Check and Add Debug Flag\nDESCRIPTION: This macro checks if the C or C++ compiler supports a given flag. If the flag is supported, it appends the flag to the CMAKE_C_FLAGS_DEBUG or CMAKE_CXX_FLAGS_DEBUG variables, respectively.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_228\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(check_add_debug_flag FLAG SUFFIX)\n  check_c_compiler_flag(${FLAG} HAS_C_FLAG_${SUFFIX})\n  if(HAS_C_FLAG_${SUFFIX})\n    string(APPEND CMAKE_C_FLAGS_DEBUG \" ${FLAG}\")\n  endif()\n\n  if(CMAKE_CXX_COMPILER)\n    check_cxx_compiler_flag(${FLAG} HAS_CXX_${SUFFIX})\n    if(HAS_CXX_${SUFFIX})\n      string(APPEND CMAKE_CXX_FLAGS_DEBUG \" ${FLAG}\")\n    endif()\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Mapping Armenian Ligatures\nDESCRIPTION: This snippet defines Armenian ligatures which combines certain Armenian character pairs into single glyphs to enhance visual appearance and tradition.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/build-scripts/casefolding.txt#_snippet_3\n\nLANGUAGE: Other\nCODE:\n```\nFB13; F; 0574 0576; # ARMENIAN SMALL LIGATURE MEN NOW\nFB14; F; 0574 0565; # ARMENIAN SMALL LIGATURE MEN ECH\nFB15; F; 0574 056B; # ARMENIAN SMALL LIGATURE MEN INI\nFB16; F; 057E 0576; # ARMENIAN SMALL LIGATURE VEW NOW\nFB17; F; 0574 056D; # ARMENIAN SMALL LIGATURE MEN XEH\n```\n\n----------------------------------------\n\nTITLE: Enabling Vulkan and Metal Renderers (CMake)\nDESCRIPTION: This snippet conditionally enables the Vulkan and Metal renderers if the Metal framework is available. It sets CMake variables to enable the necessary features and includes relevant source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_183\n\nLANGUAGE: cmake\nCODE:\n```\nif(HAVE_FRAMEWORK_METAL)\n        set(SDL_FRAMEWORK_METAL 1)\n        set(SDL_FRAMEWORK_QUARTZCORE 1)\n        if(SDL_VULKAN)\n          set(SDL_VIDEO_VULKAN 1)\n          set(HAVE_VULKAN TRUE)\n          if(SDL_RENDER_VULKAN)\n            set(SDL_VIDEO_RENDER_VULKAN 1)\n            set(HAVE_RENDER_VULKAN TRUE)\n          endif()\n        endif()\n        if(SDL_METAL)\n          set(SDL_VIDEO_METAL 1)\n          set(HAVE_METAL TRUE)\n        endif()\n        if(SDL_RENDER_METAL)\n          sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/render/metal/*.m\")\n          set(SDL_VIDEO_RENDER_METAL 1)\n          set(HAVE_RENDER_METAL TRUE)\n        endif()\n        if (SDL_GPU)\n          set(SDL_GPU_METAL 1)\n          sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/gpu/metal/*.m\")\n        endif()\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Creating PSP PBP Files\nDESCRIPTION: This snippet iterates through all SDL test executables and creates PSP PBP files (PlayStation Portable packages) for each. It sets the title, icon path, background path, preview path, and output directory for the PBP file.  The `create_pbp_file` function is assumed to be defined elsewhere.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nif(PSP)\n    # Build EBOOT files if building for PSP\n    foreach(APP ${SDL_TEST_EXECUTABLES})\n        create_pbp_file(\n            TARGET          ${APP}\n            TITLE           SDL-${APP}\n            ICON_PATH       NULL\n            BACKGROUND_PATH NULL\n            PREVIEW_PATH    NULL\n            OUTPUT_DIR      $<TARGET_FILE_DIR:${APP}>/sdl-${APP}\n        )\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows Joystick Configuration (CMake)\nDESCRIPTION: This snippet configures joystick input for SDL on Windows. It sets flags for raw input, DirectInput, XInput, Windows Gaming Input (WGI), and GameInput based on header availability.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_168\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_JOYSTICK)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/windows/*.c\")\n\n    set(SDL_JOYSTICK_RAWINPUT 1)\n    if(HAVE_DINPUT_H)\n      set(SDL_JOYSTICK_DINPUT 1)\n      sdl_link_dependency(joystick LIBS dinput8)\n    endif()\n    if(HAVE_XINPUT_H)\n      set(SDL_JOYSTICK_XINPUT 1)\n      set(HAVE_XINPUT TRUE)\n    endif()\n    if(HAVE_WINDOWS_GAMING_INPUT_H)\n      set(SDL_JOYSTICK_WGI 1)\n    endif()\n    if(HAVE_GAMEINPUT_H)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/gdk/*.cpp\")\n      set(SDL_JOYSTICK_GAMEINPUT 1)\n    endif()\n    set(HAVE_SDL_JOYSTICK TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking SSE4.2 Support in C\nDESCRIPTION: This snippet checks for SSE4.2 support by compiling code using the `<nmmintrin.h>` header and the `_mm_crc32_u32` intrinsic for CRC32C calculation. A `calc_crc32c` function is used for the check.  `HAVE_SSE4_2` is set if the compilation succeeds.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_98\n\nLANGUAGE: C\nCODE:\n```\n#include <nmmintrin.h>\n      unsigned calc_crc32c(const char *text, unsigned len) {\n          unsigned crc32c = ~0;\n          for (; len >= 4; len -= 4, text += 4) {\n            crc32c = (unsigned)_mm_crc32_u32(crc32c, *(unsigned*)text);\n          }\n          return crc32c;\n      }\n      int main(int argc, char **argv) {\n        calc_crc32c(\"SDL_SSE4\",8);\n        return 0;\n      }\n```\n\n----------------------------------------\n\nTITLE: Checking for OpenBSD/NetBSD wscons Keyboard Support\nDESCRIPTION: This snippet checks for keyboard support via the `wscons` interface on OpenBSD and NetBSD systems. It includes relevant headers from `/dev/wscons`, attempts to get keyboard map data using `WSKBDIO_GETMAP`, and sets `HAVE_INPUT_WSCONS` accordingly.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_139\n\nLANGUAGE: C\nCODE:\n```\n#include <sys/time.h>\n#include <dev/wscons/wsconsio.h>\n#include <dev/wscons/wsksymdef.h>\n#include <dev/wscons/wsksymvar.h>\n#include <sys/ioctl.h>\nint main(int argc, char **argv) {\n    struct wskbd_map_data data;\n    ioctl(0, WSKBDIO_GETMAP, &data);\n    return 0;\n}\n```\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"\n          #include <sys/time.h>\n          #include <dev/wscons/wsconsio.h>\n          #include <dev/wscons/wsksymdef.h>\n          #include <dev/wscons/wsksymvar.h>\n          #include <sys/ioctl.h>\n          int main(int argc, char **argv) {\n              struct wskbd_map_data data;\n              ioctl(0, WSKBDIO_GETMAP, &data);\n              return 0;\n          }\" HAVE_INPUT_WSCONS)\n```\n\n----------------------------------------\n\nTITLE: Adding SDL Tests from Executables in CMake\nDESCRIPTION: This CMake snippet iterates through the `SDL_TEST_EXECUTABLES` list and calls the `add_sdl_test` function for each executable. This adds each executable as a test target with install option.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(TARGET ${SDL_TEST_EXECUTABLES})\n    add_sdl_test(${TARGET} ${TARGET} INSTALL)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: DirectInput Haptic Configuration (CMake)\nDESCRIPTION: This snippet configures DirectInput haptic support, setting flags and including source files if DirectInput headers are available.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_169\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_JOYSTICK)\n    if(SDL_HAPTIC)\n      if(HAVE_DINPUT_H)\n        sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/windows/*.c\")\n        set(SDL_HAPTIC_DINPUT 1)\n        set(HAVE_SDL_HAPTIC TRUE)\n      endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for Linux input.h Availability\nDESCRIPTION: This snippet checks if the `linux/input.h` header file is available and if the `EVIOCGNAME` ioctl is defined. This is used to determine whether the system has the necessary input event structures for joystick and other input device support. The result is stored in the `HAVE_LINUX_INPUT_H` variable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_135\n\nLANGUAGE: C\nCODE:\n```\n#include <linux/input.h>\n#ifndef EVIOCGNAME\n#error EVIOCGNAME() ioctl not available\n#endif\nint main(int argc, char** argv) { return 0; }\n```\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"\n        #include <linux/input.h>\n        #ifndef EVIOCGNAME\n        #error EVIOCGNAME() ioctl not available\n        #endif\n        int main(int argc, char** argv) { return 0; }\" HAVE_LINUX_INPUT_H)\n```\n\n----------------------------------------\n\nTITLE: SDL_GDKRunApp Macro Replacement (C)\nDESCRIPTION: This code defines a macro `SDL_GDKRunApp` as a replacement for the removed SDL2 function. It essentially calls `SDL_RunApp` with appropriate parameters, including passing the `reserved` parameter.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_GDKRunApp(MAIN_FUNC, RESERVED)  SDL_RunApp(0, NULL, MAIN_FUNC, RESERVED)\n```\n\n----------------------------------------\n\nTITLE: Setting up Joystick Driver for Haiku (CMake)\nDESCRIPTION: This snippet enables the Haiku joystick driver by setting a CMake variable and including the relevant source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_188\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_HAIKU 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/haiku/*.cc\")\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: SDL Shared and Static Library Check CMake\nDESCRIPTION: This conditional statement checks if both SDL_SHARED and SDL_STATIC are disabled. If both are disabled, it raises a FATAL_ERROR, indicating that at least one of them must be enabled for the build to proceed. This ensures that either a shared or static library is built.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_74\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT (SDL_SHARED OR SDL_STATIC))\n  message(FATAL_ERROR \"SDL_SHARED and SDL_STATIC cannot both be disabled\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Tests in CMake\nDESCRIPTION: This CMake code handles Android-specific configuration for SDL tests. It includes Android-related modules, finds the SdlAndroid package, sets up resource compilation, creates Android debug keystore, and iterates through test executables to create AndroidManifest.xml files and compile resources to generate APK files. Defines dependencies, Java compilation flags and packaging to create a jar file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\nif(ANDROID AND TARGET SDL3::Jar)\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/../cmake/android\")\n    find_package(SdlAndroid MODULE)\n    if(SdlAndroid_FOUND)\n        set(apks \"\")\n        set(packages \"\")\n\n        include(SdlAndroidFunctions)\n        sdl_create_android_debug_keystore(SDL_test-debug-keystore)\n        sdl_android_compile_resources(SDL_test-resources RESFOLDER android/res)\n        add_custom_target(sdl-test-apks)\n        foreach(TEST ${SDL_TEST_EXECUTABLES})\n            set(ANDROID_MANIFEST_APP_NAME \"${TEST}\")\n            set(ANDROID_MANIFEST_LABEL \"${TEST}\")\n            set(ANDROID_MANIFEST_LIB_NAME \"$<TARGET_FILE_BASE_NAME:${TEST}>\")\n            set(ANDROID_MANIFEST_PACKAGE \"org.libsdl.sdl.test.${TEST}\")\n            set(generated_manifest_path \"${CMAKE_CURRENT_BINARY_DIR}/android/${TEST}-src/AndroidManifest.xml\")\n            string(REPLACE \".\" \"/\" JAVA_PACKAGE_DIR \"${ANDROID_MANIFEST_PACKAGE}\")\n            set(GENERATED_SRC_FOLDER \"${CMAKE_CURRENT_BINARY_DIR}/android/${TEST}-src\")\n            set(GENERATED_RES_FOLDER \"${GENERATED_SRC_FOLDER}/res\")\n            set(JAVA_PACKAGE_DIR \"${GENERATED_SRC_FOLDER}/${JAVA_PACKAGE_DIR}\")\n            configure_file(android/cmake/SDLEntryTestActivity.java.cmake \"${JAVA_PACKAGE_DIR}/SDLEntryTestActivity.java\" @ONLY)\n            configure_file(android/cmake/SDLTestActivity.java.cmake \"${JAVA_PACKAGE_DIR}/SDLTestActivity.java\" @ONLY)\n            configure_file(android/cmake/res/values/strings.xml.cmake android/res/values/strings-${TEST}.xml @ONLY)\n            configure_file(android/cmake/res/xml/shortcuts.xml.cmake \"${GENERATED_RES_FOLDER}/xml/shortcuts.xml\" @ONLY)\n            configure_file(android/cmake/AndroidManifest.xml.cmake \"${generated_manifest_path}\" @ONLY)\n            file(GENERATE\n                OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/android/${TEST}-$<CONFIG>/res/values/strings.xml\"\n                INPUT \"${CMAKE_CURRENT_BINARY_DIR}/android/res/values/strings-${TEST}.xml\"\n            )\n\n            sdl_android_compile_resources(${TEST}-resources\n                RESOURCES\n                    \"${CMAKE_CURRENT_BINARY_DIR}/android/${TEST}-$<CONFIG>/res/values/strings.xml\"\n                    \"${GENERATED_RES_FOLDER}/xml/shortcuts.xml\"\n            )\n\n            sdl_android_link_resources(${TEST}-apk-linked\n                MANIFEST \"${generated_manifest_path}\"\n                PACKAGE ${ANDROID_MANIFEST_PACKAGE}\n                RES_TARGETS SDL_test-resources ${TEST}-resources\n                TARGET_SDK_VERSION 31\n            )\n\n            set(CMAKE_JAVA_COMPILE_FLAGS \"-encoding;utf-8\")\n            set(classes_path \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${TEST}-java.dir/classes\")\n            # Some CMake versions have a slow `cmake -E make_directory` implementation\n            if(NOT IS_DIRECTORY \"${classes_path}\")\n                execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory \"${classes_path}\")\n            endif()\n            set(OUT_JAR \"${CMAKE_CURRENT_BINARY_DIR}/${TEST}.jar\")\n            add_custom_command(\n                OUTPUT \"${OUT_JAR}\"\n                COMMAND ${CMAKE_COMMAND} -E rm -rf \"${classes_path}\"\n                COMMAND ${CMAKE_COMMAND} -E make_directory \"${classes_path}\"\n                COMMAND ${Java_JAVAC_EXECUTABLE}\n                    -source 1.8 -target 1.8\n                    -bootclasspath \"$<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>\"\n                    \"${JAVA_PACKAGE_DIR}/SDLEntryTestActivity.java\"\n                    \"${JAVA_PACKAGE_DIR}/SDLTestActivity.java\"\n                    $<TARGET_PROPERTY:${TEST}-apk-linked,JAVA_R>\n                    -cp \"$<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>:${SDL_ANDROID_PLATFORM_ANDROID_JAR}\"\n                    -d \"${classes_path}\"\n                COMMAND ${Java_JAR_EXECUTABLE} cf \"${OUT_JAR}\" -C \"${classes_path}\" .\n                DEPENDS $<TARGET_PROPERTY:${TEST}-apk-linked,OUTPUTS> \"$<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>\" \"${JAVA_PACKAGE_DIR}/SDLTestActivity.java\" \"${JAVA_PACKAGE_DIR}/SDLEntryTestActivity.java\"\n            )\n            add_custom_target(${TEST}-jar DEPENDS \"${OUT_JAR}\")\n            set_property(TARGET ${TEST}-jar PROPERTY OUTPUT \"${OUT_JAR}\")\n\n            set(dexworkdir \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${TEST}-dex.dir\")\n            # Some CMake versions have a slow `cmake -E make_directory` implementation\n            if(NOT IS_DIRECTORY \"${dexworkdir}\")\n                execute_process(COMMAND \"${CMAKE_COMMAND}\" -E make_directory \"${dexworkdir}\")\n            endif()\n            set(classes_dex_base_name \"classes.dex\")\n            set(classes_dex \"${dexworkdir}/${classes_dex_base_name}\")\n            add_custom_command(\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Struct Typedef Definition for Wikiheaders in C\nDESCRIPTION: This is an example of an incorrect struct typedef definition. Wikiheaders requires the struct name to be on the same line as the `typedef struct` declaration.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-documentation-rules.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct\n{\n    int a;\n    int b;\n} SDL_MyStruct;\n```\n\n----------------------------------------\n\nTITLE: gameinput.h Compilation Check (CMake)\nDESCRIPTION: This snippet uses `check_c_source_compiles` to check if `gameinput.h` can be compiled. It includes `stdbool.h` and defines `COBJMACROS` to ensure compatibility with COM interfaces.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_149\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"\n    #include <stdbool.h>\n    #define COBJMACROS\n    #include <gameinput.h>\n    int main(int argc, char **argv) { return 0; }\" HAVE_GAMEINPUT_H\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Package Configuration Commands CMake\nDESCRIPTION: This snippet uses a custom CMake function `sdl_cmake_config_find_pkg_config_commands` to generate commands for finding package configuration information.  This is done for both the core SDL3 library and the SDL3 test library, populating variables that can be used to detect their presence in the system.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_250\n\nLANGUAGE: CMake\nCODE:\n```\nsdl_cmake_config_find_pkg_config_commands(SDL_FIND_PKG_CONFIG_COMMANDS\n  COLLECTOR SDL3-collector\n  CONFIG_COMPONENT_FOUND_NAME SDL3_SDL3-static_FOUND\n)\nsdl_cmake_config_find_pkg_config_commands(SDL_TEST_FIND_PKG_CONFIG_COMMANDS\n  COLLECTOR SDL3_test-collector\n  CONFIG_COMPONENT_FOUND_NAME SDL3_SDL3_test_FOUND\n)\n```\n\n----------------------------------------\n\nTITLE: Aligning APK with CMake\nDESCRIPTION: This snippet aligns an unaligned APK using the `sdl_apk_align` custom command. It takes the unaligned APK `${TEST}-unaligned-apk` and an output directory to create the aligned APK.  The aligned APK will have its data properly aligned for optimal performance on Android devices.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\nsdl_apk_align(${TEST}-aligned-apk ${TEST}-unaligned-apk\n    OUTDIR \"${CMAKE_CURRENT_BINARY_DIR}/intermediates\"\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping Cherokee Small Letters\nDESCRIPTION: This snippet provides a mapping for Cherokee small letters to their respective Unicode representations. It ensures correct rendering and processing of text in the Cherokee language.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/build-scripts/casefolding.txt#_snippet_1\n\nLANGUAGE: Other\nCODE:\n```\nAB70; C; 13A0; # CHEROKEE SMALL LETTER A\nAB71; C; 13A1; # CHEROKEE SMALL LETTER E\nAB72; C; 13A2; # CHEROKEE SMALL LETTER I\nAB73; C; 13A3; # CHEROKEE SMALL LETTER O\nAB74; C; 13A4; # CHEROKEE SMALL LETTER U\nAB75; C; 13A5; # CHEROKEE SMALL LETTER V\nAB76; C; 13A6; # CHEROKEE SMALL LETTER GA\nAB77; C; 13A7; # CHEROKEE SMALL LETTER KA\nAB78; C; 13A8; # CHEROKEE SMALL LETTER GE\nAB79; C; 13A9; # CHEROKEE SMALL LETTER GI\nAB7A; C; 13AA; # CHEROKEE SMALL LETTER GO\nAB7B; C; 13AB; # CHEROKEE SMALL LETTER GU\nAB7C; C; 13AC; # CHEROKEE SMALL LETTER GV\nAB7D; C; 13AD; # CHEROKEE SMALL LETTER HA\nAB7E; C; 13AE; # CHEROKEE SMALL LETTER HE\nAB7F; C; 13AF; # CHEROKEE SMALL LETTER HI\nAB80; C; 13B0; # CHEROKEE SMALL LETTER HO\nAB81; C; 13B1; # CHEROKEE SMALL LETTER HU\nAB82; C; 13B2; # CHEROKEE SMALL LETTER HV\nAB83; C; 13B3; # CHEROKEE SMALL LETTER LA\nAB84; C; 13B4; # CHEROKEE SMALL LETTER LE\nAB85; C; 13B5; # CHEROKEE SMALL LETTER LI\nAB86; C; 13B6; # CHEROKEE SMALL LETTER LO\nAB87; C; 13B7; # CHEROKEE SMALL LETTER LU\nAB88; C; 13B8; # CHEROKEE SMALL LETTER LV\nAB89; C; 13B9; # CHEROKEE SMALL LETTER MA\nAB8A; C; 13BA; # CHEROKEE SMALL LETTER ME\nAB8B; C; 13BB; # CHEROKEE SMALL LETTER MI\nAB8C; C; 13BC; # CHEROKEE SMALL LETTER MO\nAB8D; C; 13BD; # CHEROKEE SMALL LETTER MU\nAB8E; C; 13BE; # CHEROKEE SMALL LETTER NA\nAB8F; C; 13BF; # CHEROKEE SMALL LETTER HNA\nAB90; C; 13C0; # CHEROKEE SMALL LETTER NAH\nAB91; C; 13C1; # CHEROKEE SMALL LETTER NE\nAB92; C; 13C2; # CHEROKEE SMALL LETTER NI\nAB93; C; 13C3; # CHEROKEE SMALL LETTER NO\nAB94; C; 13C4; # CHEROKEE SMALL LETTER NU\nAB95; C; 13C5; # CHEROKEE SMALL LETTER NV\nAB96; C; 13C6; # CHEROKEE SMALL LETTER QUA\nAB97; C; 13C7; # CHEROKEE SMALL LETTER QUE\nAB98; C; 13C8; # CHEROKEE SMALL LETTER QUI\nAB99; C; 13C9; # CHEROKEE SMALL LETTER QUO\nAB9A; C; 13CA; # CHEROKEE SMALL LETTER QUU\nAB9B; C; 13CB; # CHEROKEE SMALL LETTER QUV\nAB9C; C; 13CC; # CHEROKEE SMALL LETTER SA\nAB9D; C; 13CD; # CHEROKEE SMALL LETTER S\nAB9E; C; 13CE; # CHEROKEE SMALL LETTER SE\nAB9F; C; 13CF; # CHEROKEE SMALL LETTER SI\nABA0; C; 13D0; # CHEROKEE SMALL LETTER SO\nABA1; C; 13D1; # CHEROKEE SMALL LETTER SU\nABA2; C; 13D2; # CHEROKEE SMALL LETTER SV\nABA3; C; 13D3; # CHEROKEE SMALL LETTER DA\nABA4; C; 13D4; # CHEROKEE SMALL LETTER TA\nABA5; C; 13D5; # CHEROKEE SMALL LETTER DE\nABA6; C; 13D6; # CHEROKEE SMALL LETTER TE\nABA7; C; 13D7; # CHEROKEE SMALL LETTER DI\nABA8; C; 13D8; # CHEROKEE SMALL LETTER TI\nABA9; C; 13D9; # CHEROKEE SMALL LETTER DO\nABAA; C; 13DA; # CHEROKEE SMALL LETTER DU\nABAB; C; 13DB; # CHEROKEE SMALL LETTER DV\nABAC; C; 13DC; # CHEROKEE SMALL LETTER DLA\nABAD; C; 13DD; # CHEROKEE SMALL LETTER TLA\nABAE; C; 13DE; # CHEROKEE SMALL LETTER TLE\nABAF; C; 13DF; # CHEROKEE SMALL LETTER TLI\nABB0; C; 13E0; # CHEROKEE SMALL LETTER TLO\nABB1; C; 13E1; # CHEROKEE SMALL LETTER TLU\nABB2; C; 13E2; # CHEROKEE SMALL LETTER TLV\nABB3; C; 13E3; # CHEROKEE SMALL LETTER TSA\nABB4; C; 13E4; # CHEROKEE SMALL LETTER TSE\nABB5; C; 13E5; # CHEROKEE SMALL LETTER TSI\nABB6; C; 13E6; # CHEROKEE SMALL LETTER TSO\nABB7; C; 13E7; # CHEROKEE SMALL LETTER TSU\nABB8; C; 13E8; # CHEROKEE SMALL LETTER TSV\nABB9; C; 13E9; # CHEROKEE SMALL LETTER WA\nABBA; C; 13EA; # CHEROKEE SMALL LETTER WE\nABBB; C; 13EB; # CHEROKEE SMALL LETTER WI\nABBC; C; 13EC; # CHEROKEE SMALL LETTER WO\nABBD; C; 13ED; # CHEROKEE SMALL LETTER WU\nABBE; C; 13EE; # CHEROKEE SMALL LETTER WV\nABBF; C; 13EF; # CHEROKEE SMALL LETTER YA\n```\n\n----------------------------------------\n\nTITLE: Set Compile Definitions CMake\nDESCRIPTION: This snippet sets compile definitions for the SDL3 library, specifying the major, minor, and patch versions of the library. These definitions are used during compilation to embed version information into the library. The definitions are set as private to the target, so consumers do not receive these definitions unless explicitly exposed.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_246\n\nLANGUAGE: cmake\nCODE:\n```\nsdl_compile_definitions(\n  PRIVATE\n    \"SDL_BUILD_MAJOR_VERSION=${PROJECT_VERSION_MAJOR}\"\n    \"SDL_BUILD_MINOR_VERSION=${PROJECT_VERSION_MINOR}\"\n    \"SDL_BUILD_MICRO_VERSION=${PROJECT_VERSION_PATCH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenVR Video Driver Option (CMake)\nDESCRIPTION: This snippet configures an option to enable the OpenVR video driver. This is set to OFF by default.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_60\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_OPENVR              \"Use OpenVR video driver\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Checking for inotify.h Existence\nDESCRIPTION: This snippet checks for the existence of the `sys/inotify.h` header file, which provides file system event monitoring capabilities. The result is stored in `HAVE_SYS_INOTIFY_H`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_140\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_include_file(\"sys/inotify.h\" HAVE_SYS_INOTIFY_H)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Build Type\nDESCRIPTION: Configures the default build type to 'RelWithDebInfo' if the SDL3 is the main project and no build type is defined. It ensures consistent build behavior by explicitly setting the configuration.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL3_MAINPROJECT)\n  get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n  if(is_multi_config)\n      # The first item in CMAKE_CONFIGURATION_TYPES is the default configuration\n      if(DEFINED CMAKE_CONFIGURATION_TYPES AND \"RelWithDebInfo\" IN_LIST CMAKE_CONFIGURATION_TYPES)\n        list(REMOVE_ITEM CMAKE_CONFIGURATION_TYPES \"RelWithDebInfo\")\n        list(INSERT CMAKE_CONFIGURATION_TYPES 0 \"RelWithDebInfo\")\n        set(CMAKE_CONFIGURATION_TYPES \"${CMAKE_CONFIGURATION_TYPES}\" CACHE STRING \"CMake configuration types\" FORCE)\n      endif()\n  else()\n    if(cmake_build_type_undefined)\n      set(CMAKE_BUILD_TYPE \"RelWithDebInfo\" CACHE STRING \"CMake build type\" FORCE)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Application Bundle with Makefile\nDESCRIPTION: This Makefile snippet shows how to install an application bundle to the system's Applications directory. It removes any existing bundle at the destination, creates the necessary directory, and copies the bundle to the target location.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-macos.md#_snippet_5\n\nLANGUAGE: make\nCODE:\n```\ninstall-exec-hook: APP_NAME_bundle\n\trm -rf $(DESTDIR)$(prefix)/Applications/APP_NAME.app\n\tmkdir -p $(DESTDIR)$(prefix)/Applications/\n\tcp -r $< /$(DESTDIR)$(prefix)Applications/\n```\n\n----------------------------------------\n\nTITLE: Defining SDL3 Test Executables\nDESCRIPTION: This section defines various test executables using the `add_sdl_test_executable` macro. Each call specifies the test's name, source files, and optional arguments like `NEEDS_RESOURCES`, `NONINTERACTIVE`, `MAIN_CALLBACKS`, and dependencies. Platform-specific flags or compiler definitions are applied based on the target OS or available features.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sdl_test_executable(checkkeys SOURCES checkkeys.c)\nadd_sdl_test_executable(loopwave NEEDS_RESOURCES TESTUTILS MAIN_CALLBACKS SOURCES loopwave.c)\nadd_sdl_test_executable(testsurround SOURCES testsurround.c)\nadd_sdl_test_executable(testresample NEEDS_RESOURCES SOURCES testresample.c)\nadd_sdl_test_executable(testaudioinfo SOURCES testaudioinfo.c)\nadd_sdl_test_executable(testaudiostreamdynamicresample NEEDS_RESOURCES TESTUTILS SOURCES testaudiostreamdynamicresample.c)\n\nfile(GLOB TESTAUTOMATION_SOURCE_FILES testautomation*.c)\nadd_sdl_test_executable(testautomation NONINTERACTIVE NONINTERACTIVE_TIMEOUT 120 NEEDS_RESOURCES BUILD_DEPENDENT NO_C90 SOURCES ${TESTAUTOMATION_SOURCE_FILES})\nif(EMSCRIPTEN)\n    target_link_options(testautomation PRIVATE -sALLOW_MEMORY_GROWTH=1 -sMAXIMUM_MEMORY=1gb)\nendif()\nadd_sdl_test_executable(testmultiaudio NEEDS_RESOURCES TESTUTILS SOURCES testmultiaudio.c)\nadd_sdl_test_executable(testaudiohotplug NEEDS_RESOURCES TESTUTILS SOURCES testaudiohotplug.c)\nadd_sdl_test_executable(testaudiorecording MAIN_CALLBACKS SOURCES testaudiorecording.c)\nadd_sdl_test_executable(testatomic NONINTERACTIVE DISABLE_THREADS_ARGS \"--no-threads\" SOURCES testatomic.c)\nadd_sdl_test_executable(testintersections SOURCES testintersections.c)\nadd_sdl_test_executable(testrelative SOURCES testrelative.c)\nadd_sdl_test_executable(testhittesting SOURCES testhittesting.c)\nadd_sdl_test_executable(testdraw SOURCES testdraw.c)\nadd_sdl_test_executable(testdrawchessboard SOURCES testdrawchessboard.c)\nadd_sdl_test_executable(testdropfile MAIN_CALLBACKS SOURCES testdropfile.c)\nadd_sdl_test_executable(testerror NONINTERACTIVE DISABLE_THREADS_ARGS \"--no-threads\" SOURCES testerror.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sdl_test_executable(testshape NEEDS_RESOURCES SOURCES testshape.c ${glass_bmp_header} DEPENDS generate-glass_bmp_header)\nadd_sdl_test_executable(testsprite MAIN_CALLBACKS NEEDS_RESOURCES TESTUTILS SOURCES testsprite.c)\nadd_sdl_test_executable(testspriteminimal SOURCES testspriteminimal.c ${icon_bmp_header} DEPENDS generate-icon_bmp_header)\nadd_sdl_test_executable(testspritesurface SOURCES testspritesurface.c ${icon_bmp_header} DEPENDS generate-icon_bmp_header)\nadd_sdl_test_executable(teststreaming NEEDS_RESOURCES TESTUTILS SOURCES teststreaming.c)\nadd_sdl_test_executable(testtimer NONINTERACTIVE NONINTERACTIVE_ARGS --no-interactive NONINTERACTIVE_TIMEOUT 60 SOURCES testtimer.c)\nadd_sdl_test_executable(testurl SOURCES testurl.c)\nadd_sdl_test_executable(testver NONINTERACTIVE NOTRACKMEM SOURCES testver.c)\nadd_sdl_test_executable(testcamera MAIN_CALLBACKS SOURCES testcamera.c)\nadd_sdl_test_executable(testclipboard MAIN_CALLBACKS SOURCES testclipboard.c ${icon_bmp_header} DEPENDS generate-icon_bmp_header)\nadd_sdl_test_executable(testviewport NEEDS_RESOURCES TESTUTILS SOURCES testviewport.c)\nadd_sdl_test_executable(testwm SOURCES testwm.c)\nadd_sdl_test_executable(testyuv NONINTERACTIVE NONINTERACTIVE_ARGS \"--automated\" NEEDS_RESOURCES TESTUTILS SOURCES testyuv.c testyuv_cvt.c)\nadd_sdl_test_executable(torturethread NONINTERACTIVE THREADS NONINTERACTIVE_TIMEOUT 30 SOURCES torturethread.c)\nadd_sdl_test_executable(testrendercopyex NEEDS_RESOURCES TESTUTILS SOURCES testrendercopyex.c)\nadd_sdl_test_executable(testmessage SOURCES testmessage.c)\nadd_sdl_test_executable(testdisplayinfo SOURCES testdisplayinfo.c)\nadd_sdl_test_executable(testqsort NONINTERACTIVE SOURCES testqsort.c)\nadd_sdl_test_executable(testbounds NONINTERACTIVE SOURCES testbounds.c)\nadd_sdl_test_executable(testcustomcursor SOURCES testcustomcursor.c)\nadd_sdl_test_executable(testvulkan NO_C90 SOURCES testvulkan.c)\nadd_sdl_test_executable(testoffscreen SOURCES testoffscreen.c)\nadd_sdl_test_executable(testpopup SOURCES testpopup.c)\n```\n\n----------------------------------------\n\nTITLE: Checking SSE2 Support in C\nDESCRIPTION: This snippet checks for SSE2 support by compiling code that uses SSE2 intrinsics (`<emmintrin.h>`, `_mm_loadu_pd`, `_mm_add_pd`, `_mm_store_pd`). A dummy function `doubles_add` is used for the check. The detected support is indicated by setting `HAVE_SSE2`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_95\n\nLANGUAGE: C\nCODE:\n```\n#include <emmintrin.h>\n      void doubles_add(double *dest, double *a, double *b, unsigned size) {\n        for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n          _mm_store_pd(dest, _mm_add_pd(_mm_loadu_pd(a), _mm_loadu_pd(b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        doubles_add((double*)0, (double*)0, (double*)0, 0);\n        return 0;\n      }\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 5-byte Missing (U-03FFFFFF)\nDESCRIPTION: Tests incomplete 5-byte UTF-8 sequences with the last byte missing for the U-03FFFFFF range. The aim is to validate error handling for these sequences.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: XInput Header Compilation Check (CMake)\nDESCRIPTION: This snippet uses `check_c_source_compiles` to verify if the `xinput.h` header can be compiled successfully. It includes `windows.h` as a dependency for `xinput.h`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_147\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_XINPUT)\n  # xinput.h may need windows.h, but does not include it itself.\n  check_c_source_compiles(\"\n      #include <windows.h>\n      #include <xinput.h>\n      int main(int argc, char **argv) { return 0; }\" HAVE_XINPUT_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add SDL3 Test Library CMake\nDESCRIPTION: This code block adds the SDL3 test library.  It creates a static library named `SDL3_test` and adds an alias. It also adds common compiler flags using `SDL_AddCommonCompilerFlags`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_78\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_TEST_LIBRARY)\n  add_library(SDL3_test STATIC)\n  add_library(SDL3::SDL3_test ALIAS SDL3_test)\n  SDL_AddCommonCompilerFlags(SDL3_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Version Check and Message\nDESCRIPTION: Checks if the CMake version supports environment modification (version 3.22 or greater) and displays a message if running tests with ASAN (AddressSanitizer) enabled on MSVC and the CMake version is older than required, suggesting to run tests from MSVC Command Prompt.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/test/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VERSION_SUPPORTS_ENVIRONMENT_MODIFICATION \"3.22\")\n\nif(HIDAPI_ENABLE_ASAN AND MSVC)\n     if(CMAKE_VERSION VERSION_LESS CMAKE_VERSION_SUPPORTS_ENVIRONMENT_MODIFICATION)\n          message(\"CTest/ASAN: Make sure to run ctest from MSVC Command Prompt\")\n     endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set SDL Framework Resources CMake\nDESCRIPTION: This snippet defines the resources to be included in the SDL3 framework when building for macOS.  It sets the `SDL_FRAMEWORK_RESOURCES` variable with the paths to the LICENSE.txt and README.md files.  An `if` block conditionally includes these resources using the `sdl_sources` macro if `SDL_FRAMEWORK` is enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_242\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_FRAMEWORK_RESOURCES\n  LICENSE.txt\n  README.md\n)\nif(SDL_FRAMEWORK)\n  sdl_sources(${SDL_FRAMEWORK_RESOURCES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Malformed Sequence Test - 5-byte Sequence\nDESCRIPTION: This test case checks for handling of malformed UTF-8 sequences starting with bytes 0xf8-0xfb, each followed by a space. This validates the correct detection of errors in 5-byte UTF-8 sequences.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"    \"\n```\n\n----------------------------------------\n\nTITLE: Enabling MFI Joystick Support with CoreHaptics (CMake)\nDESCRIPTION: This snippet conditionally enables MFI joystick support by setting CMake variables if both the GameController and CoreHaptics frameworks are available. This ensures that rumble functionality, which relies on CoreHaptics, is also available.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_178\n\nLANGUAGE: cmake\nCODE:\n```\nif(HAVE_FRAMEWORK_GAMECONTROLLER AND HAVE_FRAMEWORK_COREHAPTICS)\n        # Only enable MFI if we also have CoreHaptics to ensure rumble works\n        set(SDL_JOYSTICK_MFI 1)\n        set(SDL_FRAMEWORK_GAMECONTROLLER 1)\n        set(SDL_FRAMEWORK_COREHAPTICS 1)\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Address Sanitizer Target Linking\nDESCRIPTION: Conditionally adds the `-fsanitize=address` linker flag to various targets (hidapi_winapi, hidapi_darwin, etc.) if ASAN is enabled and the compiler is not MSVC. If shared libraries are being built, the flag is added as a PRIVATE link option; otherwise, it's added as a PUBLIC link option.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(HIDAPI_ENABLE_ASAN)\n    if(NOT MSVC)\n        # MSVC doesn't recognize those options, other compilers - requiring it\n        foreach(HIDAPI_TARGET hidapi_winapi hidapi_darwin hidapi_hidraw hidapi_libusb hidtest_hidraw hidtest_libusb hidtest)\n            if(TARGET ${HIDAPI_TARGET})\n                if(BUILD_SHARED_LIBS)\n                    target_link_options(${HIDAPI_TARGET} PRIVATE -fsanitize=address)\n                else()\n                    target_link_options(${HIDAPI_TARGET} PUBLIC -fsanitize=address)\n                endif()\n            endif()\n        endforeach()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Link Dependencies to hidapi_hidraw\nDESCRIPTION: Links the hidapi_hidraw library against libudev and Threads.  libudev is linked privately and Threads is also linked privately.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hidapi_hidraw PRIVATE PkgConfig::libudev Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Installing libiconv on FreeBSD\nDESCRIPTION: This shell command installs the libiconv package on FreeBSD. libiconv is required as a dependency when building HIDAPI on FreeBSD. This command uses the pkg_add utility to install the package from a remote repository.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npkg_add -r libiconv\n```\n\n----------------------------------------\n\nTITLE: Set SDL Revision from REVISION.txt\nDESCRIPTION: This snippet attempts to read the SDL revision from a file named REVISION.txt in the source directory. If the file exists, it extracts the revision string. Otherwise, it checks for an environment variable override and if not set, attempts to derive the version from git.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_224\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/REVISION.txt\")\n  file(STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/REVISION.txt\" revisions)\n  list(GET revisions 0 revisions_0)\n  string(STRIP \"${revisions_0}\" SDL_REVISION)\nelse()\n  set(SDL_REVISION \"\" CACHE STRING \"Custom SDL revision (only used when REVISION.txt does not exist)\")\nendif()\nif(NOT SDL_REVISION)\n  # If SDL_REVISION is not overrided, use git to describe\n  git_describe(SDL_REVISION_GIT)\n  set(SDL_REVISION \"SDL3-${SDL3_VERSION}-${SDL_REVISION_GIT}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding OpenGL in CMake\nDESCRIPTION: This snippet attempts to find the OpenGL library using `find_package(OpenGL)`. It prefers GLVND if present and excludes ARM64 builds on MSVC due to an incorrect OpenGL detection issue.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT (MSVC AND SDL_CPU_ARM64))\n    # Prefer GLVND, if present\n    set(OpenGL_GL_PREFERENCE GLVND)\n    find_package(OpenGL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Audio Sources\nDESCRIPTION: This CMake snippet sets the dummy audio driver source files if `HAVE_SDL_AUDIO` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_205\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_AUDIO)\n  set(SDL_AUDIO_DRIVER_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Sources for Emscripten\nDESCRIPTION: This CMake snippet conditionally sets the generic thread source files if threads are disabled and the target platform is Emscripten. It uses `sdl_glob_sources` to include all C files in the specified directory.  If threads are not enabled, and not using Emscripten, it generates a FATAL_ERROR because the SDL subsystem relies on threads.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_220\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_THREADS)\n  # The emscripten platform has been carefully vetted to work without threads\n  if(EMSCRIPTEN)\n    set(SDL_THREADS_DISABLED 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/thread/generic/*.c\")\n  else()\n    message(FATAL_ERROR \"Threads are needed by many SDL subsystems and may not be disabled\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  Fails with a fatal error if the CMake version is not within the specified range.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6.3...3.25 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Hiding Sections from Wikiheaders with Preprocessor Directives in C\nDESCRIPTION: This code snippet shows how to exclude sections of the header file from being processed by `wikiheaders.pl`.  Everything between the `#ifndef SDL_WIKI_DOCUMENTATION_SECTION` and `#endif` directives will be ignored by the script. This is useful for sections that are not relevant to the documentation or would cause parsing issues.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-documentation-rules.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#ifndef SDL_WIKI_DOCUMENTATION_SECTION\n```\n\n----------------------------------------\n\nTITLE: Adding SDL3 CMake Modules Path\nDESCRIPTION: Appends the path to SDL3's custom CMake modules to the `CMAKE_MODULE_PATH`, and includes custom CMake scripts for various purposes like defining macros, checks, commands, and CPU detection.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${SDL3_SOURCE_DIR}/cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/macros.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlchecks.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlcommands.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlcompilers.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlcpu.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlmanpages.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlplatform.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/GetGitRevisionDescription.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/3rdparty.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/PreseedMSVCCache.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/PreseedEmscriptenCache.cmake\")\n```\n\n----------------------------------------\n\nTITLE: Building with NDK\nDESCRIPTION: This command initiates the build process for a Native Development Kit (NDK) project. It compiles the native code (C/C++) and creates shared libraries that can be used in the Android application.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nndk-build\n```\n\n----------------------------------------\n\nTITLE: Build, Install, and Start Single Test (CMake)\nDESCRIPTION: This CMake command combines building, installing, and starting the `testsprite` test application on the connected Android device into a single step.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target build-install-start-testsprite\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling HIDAPI with Autotools\nDESCRIPTION: Cross-compiles HIDAPI for an embedded Linux target using Autotools. It configures the build for the target architecture and specifies the location of dependencies. Requires the `HOST` and `STAGING` environment variables to be set, and the `libusb` or `libudev` dependencies to be cross-compiled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.autotools.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nPKG_CONFIG_DIR= \\\nPKG_CONFIG_LIBDIR=$STAGING/lib/pkgconfig:$STAGING/share/pkgconfig \\\nPKG_CONFIG_SYSROOT_DIR=$STAGING \\\n./configure --host=$HOST --prefix=$STAGING\n# make / make install - same as for a regular build\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling New 2/3DS Clock Speed\nDESCRIPTION: This snippet demonstrates how to control the clock speed on the New 2/3DS lineup. It uses the `osSetSpeedupEnable` function to either enable or disable the extra L2 cache and higher clock speeds.  This code should be placed within the user's main function.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-n3ds.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nosSetSpeedupEnable(false)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+002F (f0 80 80 af)\nDESCRIPTION: Tests overlong representation of the ASCII character slash (/) using the sequence f0 80 80 af. A safe decoder should reject this sequence.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding pp_data_dump Subdirectory\nDESCRIPTION: This conditional statement checks if both `HIDAPI_BUILD_PP_DATA_DUMP` is defined and its value is considered true. If both conditions are met, it adds the `pp_data_dump` subdirectory, which presumably contains code related to data dumping functionality.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED HIDAPI_BUILD_PP_DATA_DUMP AND HIDAPI_BUILD_PP_DATA_DUMP)\n    add_subdirectory(pp_data_dump)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding SDL3 Include Files\nDESCRIPTION: This CMake snippet finds all SDL3 header files, excluding `SDL_revision.h` and `SDL_test*.h`, and stores them in the `SDL3_INCLUDE_FILES` variable using `file(GLOB)` and a loop.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_223\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB SDL3_INCLUDE_FILES \"${SDL3_SOURCE_DIR}/include/SDL3/*.h\")\nfile(GLOB SDL3_TEST_INCLUDE_FILES \"${SDL3_SOURCE_DIR}/include/SDL3/SDL_test*.h\")\nforeach(_hdr IN LISTS SDL3_INCLUDE_FILES)\n  if(_hdr MATCHES \".*SDL_revision\\.h\" OR _hdr MATCHES \".*SDL_test.*\\.h\")\n    list(REMOVE_ITEM SDL3_INCLUDE_FILES \"${_hdr}\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Detecting Amazon Luna Controller in SDL\nDESCRIPTION: This code provides a function to detect if a connected joystick is an Amazon Luna controller based on its vendor and product IDs. It serves as a replacement for the removed SDL_CONTROLLER_TYPE_AMAZON_LUNA.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_IsJoystickAmazonLunaController(Uint16 vendor_id, Uint16 product_id)\n{\n    return ((vendor_id == 0x1949 && product_id == 0x0419) ||\n            (vendor_id == 0x0171 && product_id == 0x0419));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Dialog Sources\nDESCRIPTION: This CMake snippet sets the source files for SDL dialog functionalities based on the target platform. It includes different source files for Android, Unix-like systems, Haiku, Windows, and macOS, conditionally including the relevant files and setting `HAVE_SDL_DIALOG` to TRUE accordingly.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_200\n\nLANGUAGE: CMake\nCODE:\n```\nsdl_sources(${SDL3_SOURCE_DIR}/src/dialog/SDL_dialog.c)\nif (SDL_DIALOG)\n  sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/SDL_dialog_utils.c)\n  if(ANDROID)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/android/SDL_androiddialog.c)\n    set(HAVE_SDL_DIALOG TRUE)\n  elseif(UNIX AND NOT APPLE AND NOT RISCOS AND NOT HAIKU)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/unix/SDL_unixdialog.c)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/unix/SDL_portaldialog.c)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/unix/SDL_zenitydialog.c)\n    set(HAVE_SDL_DIALOG TRUE)\n  elseif(HAIKU)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/haiku/SDL_haikudialog.cc)\n    set(HAVE_SDL_DIALOG TRUE)\n  elseif(WINDOWS)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/windows/SDL_windowsdialog.c)\n    set(HAVE_SDL_DIALOG TRUE)\n  elseif(MACOS)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/cocoa/SDL_cocoadialog.m)\n    set(HAVE_SDL_DIALOG TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Packaging SDL Project on Xbox using makepkg\nDESCRIPTION: This command packages the SDL project for Xbox using the PackageLayout.xml file. It specifies the layout file, includes local time zone information, uses the current directory as the source, and sets the package directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-gdk.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nmakepkg pack /f PackageLayout.xml /lt /d . /pd Package\n```\n\n----------------------------------------\n\nTITLE: WASAPI Audio Driver Configuration (CMake)\nDESCRIPTION: This snippet configures the WASAPI audio driver for SDL if SDL_WASAPI is enabled and the required headers (audioclient.h and mmdeviceapi.h) are available. It sets the appropriate flags and includes necessary source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_152\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_AUDIO)\n  if(SDL_WASAPI AND HAVE_AUDIOCLIENT_H AND HAVE_MMDEVICEAPI_H)\n    set(SDL_AUDIO_DRIVER_WASAPI 1)\n    set(HAVE_WASAPI TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/wasapi/*.c\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Apple Joystick Configuration (CMake/Objective-C)\nDESCRIPTION: Configures Joystick Support for Apple platforms (iOS, tvOS, visionOS, watchOS). Defines SDL_JOYSTICK_MFI, adds required frameworks, and conditionally includes source files for Darwin.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_175\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_JOYSTICK)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/apple/*.m\")\n    if(IOS OR TVOS OR VISIONOS OR WATCHOS)\n      set(SDL_JOYSTICK_MFI 1)\n      if(IOS OR VISIONOS OR WATCHOS)\n        set(SDL_FRAMEWORK_COREMOTION 1)\n      endif()\n      set(SDL_FRAMEWORK_GAMECONTROLLER 1)\n      set(SDL_FRAMEWORK_COREHAPTICS 1)\n    else()\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/darwin/*.c\")\n      set_property(SOURCE ${MFI_JOYSTICK_SOURCES} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fobjc-weak\")\n      check_objc_source_compiles(\"\n          #include <AvailabilityMacros.h>\n          #include <TargetConditionals.h>\"\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U-03FFFFFF (fc 83 bf bf bf bf)\nDESCRIPTION: Tests the maximum overlong sequence for U-03FFFFFF (fc 83 bf bf bf bf).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: Sets the default CMake build type to \"Release\" if not already defined. Also provides an optional mechanism to switch build types through the CMake GUI via a dropdown based on a predefined list.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(DEFAULT_CMAKE_BUILD_TYPES \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nif(NOT DEFINED CMAKE_BUILD_TYPE OR NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"${DEFAULT_CMAKE_BUILD_TYPES}\" FORCE)\nendif()\n# This part is for convenience, when used one of the standard build types with cmake-gui\nlist(FIND DEFAULT_CMAKE_BUILD_TYPES \"${CMAKE_BUILD_TYPE}\" _build_type_index)\nif(${_build_type_index} GREATER -1)\n    # set it optionally, so a custom CMAKE_BUILD_TYPE can be used as well, if needed\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${DEFAULT_CMAKE_BUILD_TYPES})\nendif()\nunset(_build_type_index)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Library Loading Configuration (CMake)\nDESCRIPTION: Configures dynamic library loading for Windows SDL builds, sets the flag, and includes source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_164\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_LOADSO_WINDOWS 1)\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/loadso/windows/*.c\")\nset(HAVE_SDL_LOADSO TRUE)\n```\n\n----------------------------------------\n\nTITLE: iOS Simulator CMake Configuration (with Tests)\nDESCRIPTION: Configures CMake for building SDL test apps for the iOS Simulator. It enables SDL_TESTS, uses the latest installed SDK, targets the x86_64 architecture, and sets the deployment target to iOS 9.0.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DSDL_TESTS=1 -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Adding Test and Example Subdirectories CMake\nDESCRIPTION: This snippet adds the test and example subdirectories to the project, enabling the building of tests and examples. It uses `add_subdirectory` to include the subdirectories in the build process. `enable_testing()` is called before adding the test subdirectory to enable testing.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_261\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_TESTS)\n  set(HAVE_TESTS ON)\n  enable_testing()\n  add_subdirectory(test)\nendif()\n\nif(SDL_EXAMPLES)\n  set(HAVE_EXAMPLES ON)\n  add_subdirectory(examples)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows Specific Test Configuration CMake\nDESCRIPTION: This snippet configures test execution on Windows using sdlprocdump for minidump generation. It defines an option SDLTEST_PROCDUMP to enable/disable this feature.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    option(SDLTEST_PROCDUMP \"Run tests using sdlprocdump for minidump generation\" OFF)\n    add_executable(sdlprocdump win32/sdlprocdump.c)\n    set_property(TARGET sdlprocdump PROPERTY C_STANDARD \"90\")\n    SDL_AddCommonCompilerFlags(sdlprocdump)\n    if(SDLTEST_PROCDUMP)\n        set(CMAKE_TEST_LAUNCHER \"$<TARGET_FILE:sdlprocdump>;--\")\n    else()\n        set_property(TARGET sdlprocdump PROPERTY EXCLUDE_FROM_ALL \"1\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 3-byte Missing\nDESCRIPTION: Tests the handling of incomplete 3-byte UTF-8 sequences where the last byte is missing.  The decoder should identify this as a malformed sequence.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Detecting NVIDIA SHIELD Controller in SDL\nDESCRIPTION: This code provides a function to detect if a connected joystick is an NVIDIA SHIELD controller based on its vendor and product IDs. It serves as a replacement for the removed SDL_CONTROLLER_TYPE_NVIDIA_SHIELD.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_IsJoystickNVIDIASHIELDController(Uint16 vendor_id, Uint16 product_id)\n{\n    return (vendor_id == 0x0955 && (product_id == 0x7210 || product_id == 0x7214));\n}\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Android (CMake)\nDESCRIPTION: This CMake command configures the build system for Android, specifying the toolchain file, target architecture (ABI), Android SDK home directory, and Android platform version. It also enables SDL tests.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\ncmake .. -DCMAKE_TOOLCHAIN_FILE=<path/to/android.toolchain.cmake> -DANDROID_ABI=<android-abi> -DSDL_ANDROID_HOME=<path-to-android-sdk-home> -DANDROID_PLATFORM=23 -DSDL_TESTS=ON\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Sources for N3DS platform\nDESCRIPTION: This CMake snippet sets the locale-related source files for the Nintendo 3DS platform. It uses `sdl_glob_sources` to include all C files in the specified directory and sets the `HAVE_SDL_LOCALE` variable to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_198\n\nLANGUAGE: CMake\nCODE:\n```\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/n3ds/*.c\")\nset(HAVE_SDL_LOCALE TRUE)\n```\n\n----------------------------------------\n\nTITLE: iOS Device CMake Configuration (Mixed 32/64-bit)\nDESCRIPTION: Configures CMake for building SDL for iOS devices, using the latest installed SDK, supporting both arm64 and armv7s architectures, with a deployment target of iOS 9.0.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES=\"arm64;armv7s\" -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: SDL_UIKitRunApp Macro Replacement (C)\nDESCRIPTION: This code defines a macro `SDL_UIKitRunApp` as a replacement for the removed SDL2 function. It essentially calls `SDL_RunApp` with appropriate parameters, including passing NULL for the `reserved` parameter.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_UIKitRunApp(ARGC, ARGV, MAIN_FUNC)  SDL_RunApp(ARGC, ARGV, MAIN_FUNC, NULL)\n```\n\n----------------------------------------\n\nTITLE: Installing SDL Project Package on Xbox using xbapp\nDESCRIPTION: This command installs the created SDL project package (xvc file) on the Xbox console using the xbapp install command. It deploys the packaged application to the Xbox for testing and deployment.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-gdk.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nxbapp install [PACKAGE].xvc\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation CMake\nDESCRIPTION: This snippet installs documentation-related files, including manpages and Javadoc, if the `SDL_INSTALL_DOCS` option is enabled. It generates manpages from the header files and installs the Javadoc JAR file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_259\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_INSTALL_DOCS)\n    SDL_generate_manpages(\n      HEADERS_DIR \"${PROJECT_SOURCE_DIR}/include/SDL3\"\n      SYMBOL \"SDL_Init\"\n      WIKIHEADERS_PL_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/build-scripts/wikiheaders.pl\"\n      REVISION \"${SDL_REVISION}\"\n    )\n    if(TARGET SDL3-javadoc)\n      set(SDL_INSTALL_JAVADOCDIR \"${CMAKE_INSTALL_DATAROOTDIR}/javadoc\" CACHE PATH \"Path where to install SDL3 javadoc\")\n      install(FILES \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}-javadoc.jar\"\n        DESTINATION \"${SDL_INSTALL_JAVADOCDIR}/SDL3\")\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Starting Activity\nDESCRIPTION: This snippet creates a custom target `start-${TEST}` for starting an Android activity. It uses the `ADB_BIN` variable (assumed to hold the path to the Android Debug Bridge) to execute an `adb shell am start-activity` command.  The command starts the `SDLTestActivity` within the specified `ANDROID_MANIFEST_PACKAGE`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(start-${TEST}\n    COMMAND \"${ADB_BIN}\" shell am start-activity -S \"${ANDROID_MANIFEST_PACKAGE}/.SDLTestActivity\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Power Management for Darwin Platforms (CMake)\nDESCRIPTION: This snippet configures the power management driver based on the target platform. On iOS, TVOS, visionOS and watchOS, the UIKit power driver is used.  Otherwise, the macOS power driver is enabled and relevant source files are included.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_181\n\nLANGUAGE: cmake\nCODE:\n```\nif (IOS OR TVOS OR VISIONOS OR WATCHOS)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/uikit/*.m\")\n      set(SDL_POWER_UIKIT 1)\n    else()\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/macos/*.c\")\n      set(SDL_POWER_MACOSX 1)\n      set(SDL_FRAMEWORK_IOKIT 1)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Fixing Objective-C Builds CMake\nDESCRIPTION: This snippet appends the CMAKE_C_FLAGS to the CMAKE_OBJC_FLAGS variable, ensuring that the Objective-C compiler uses the same flags as the C compiler.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_262\n\nLANGUAGE: CMake\nCODE:\n```\n##### Fix Objective C builds #####\nstring(APPEND CMAKE_OBJC_FLAGS \" ${CMAKE_C_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Compiler and CPU Architectures\nDESCRIPTION: Calls custom CMake functions to detect the compiler being used and the target CPU architectures. Stores the detected CPU architectures in the `SDL_CPUS` variable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nSDL_DetectCompiler()\nSDL_DetectTargetCPUArchitectures(SDL_CPUS)\n```\n\n----------------------------------------\n\nTITLE: Checking for inotify_init Symbol\nDESCRIPTION: This snippet checks for the existence of the `inotify_init` symbol in the `sys/inotify.h` header file, which is part of the inotify API for file system event monitoring. The check result is stored in the `HAVE_INOTIFY_INIT` variable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_141\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_symbol_exists(inotify_init \"sys/inotify.h\" HAVE_INOTIFY_INIT)\n```\n\n----------------------------------------\n\nTITLE: Setting CMAKE_PREFIX_PATH for SDL (Shell)\nDESCRIPTION: This command configures CMake to use a specific path for finding SDL libraries. Setting `CMAKE_PREFIX_PATH` ensures that CMake can locate the installed SDL files during the build process of projects using SDL.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-windows.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncmake .. -G Ninja -DCMAKE_PREFIX_PATH=C:/Libraries\n```\n\n----------------------------------------\n\nTITLE: Building and Installing HIDAPI with Autotools\nDESCRIPTION: Builds and installs HIDAPI as a shared library using Autotools.  It prepares the configure script, configures the build, builds the library, and installs it into the system.  Requires Autotools to be installed and the `bootstrap` script to be present.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.autotools.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./bootstrap # this prepares the configure script\n./configure\nmake # build the library\nmake install # as root, or using sudo, this will install hidapi into your system\n```\n\n----------------------------------------\n\nTITLE: Apple Source File Properties\nDESCRIPTION: For Apple platforms, this loop iterates through the source files and sets properties based on the file extension. If the extension is '.m', it adds the '-x objective-c' flag. It also skips precompile headers for files that are not '.c' or '.cpp'.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_240\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  get_property(sources TARGET SDL3-collector PROPERTY INTERFACE_SOURCES)\n  foreach(SOURCE_FILE IN LISTS sources)\n    get_filename_component(FILE_EXTENSION ${SOURCE_FILE} EXT)\n    if(FILE_EXTENSION STREQUAL \".m\")\n      set_property(SOURCE ${SOURCE_FILE} APPEND_STRING PROPERTY COMPILE_FLAGS \" -x objective-c\")\n    endif()\n    if(NOT FILE_EXTENSION STREQUAL \".c\" AND NOT FILE_EXTENSION STREQUAL \".cpp\")\n      set_property(SOURCE ${SOURCE_FILE} PROPERTY SKIP_PRECOMPILE_HEADERS 1)\n    endif()\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDL Audio Subsystem Configuration CMake\nDESCRIPTION: This snippet configures the SDL audio subsystem, checking for `SDL_DUMMYAUDIO` and `SDL_DISKAUDIO` options. If enabled, it sets the corresponding audio driver flags, globs the source files, and defines `HAVE_SDL_AUDIO`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_126\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_AUDIO)\n  # CheckDummyAudio/CheckDiskAudio - valid for all platforms\n  if(SDL_DUMMYAUDIO)\n    set(SDL_AUDIO_DRIVER_DUMMY 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/dummy/*.c\")\n    set(HAVE_DUMMYAUDIO TRUE)\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n  if(SDL_DISKAUDIO)\n    set(SDL_AUDIO_DRIVER_DISK 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/disk/*.c\")\n    set(HAVE_DISKAUDIO TRUE)\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: C source for LSX check\nDESCRIPTION: This C source code is used by CMake's `check_c_source_compiles` function to verify LSX support. It checks if the `__loongarch_sx` macro is defined, indicating that the assembler CPP flag is enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_107\n\nLANGUAGE: c\nCODE:\n```\n#ifndef __loongarch_sx\n#error Assembler CPP flag not enabled\n#endif\nint main(int argc, char **argv) { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Full SDL3 Test Suite\nDESCRIPTION: Enables and configures the full SDL3 test suite if `TEST_FULL` option is enabled. It sets the test timeout multiplier and links either against shared or static libs based on `TEST_SHARED`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/cmake/test/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_FULL)\n    enable_testing()\n    set(SDL_TESTS_TIMEOUT_MULTIPLIER \"1\" CACHE STRING \"Test timeout multiplier\")\n    set(SDL_TESTS_LINK_SHARED ${TEST_SHARED})\n\n    add_definitions(-DNO_BUILD_CONFIG)\n    add_subdirectory(\"${CMAKE_CURRENT_LIST_DIR}/../../test\" SDL_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Update Version Number (Subsequent Feature Release) - Shell\nDESCRIPTION: This command updates the version number immediately after a feature release. It increments the minor version by one to prepare for the next development cycle, changing the version from 3.EVEN.0 to 3.(EVEN+1).0.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/release_checklist.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./build-scripts/update-version.sh 3 EVEN+1 0\n```\n\n----------------------------------------\n\nTITLE: Linking CoreHaptics Framework (CMake)\nDESCRIPTION: This snippet finds and links the CoreHaptics framework as a weak framework dependency. It checks for the framework's availability before linking.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_186\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library(COREHAPTICS CoreHaptics)\n    if(COREHAPTICS)\n      # macOS 10.15+ iOS 13.0+ tvOS 14.0+\n      sdl_link_dependency(core_haptics LIBS \"$<LINK_LIBRARY:WEAK_FRAMEWORK,CoreHaptics>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-weak_framework,CoreHaptics\")\n    endif()\n```\n\n----------------------------------------\n\nTITLE: iOS Device CMake Configuration (64-bit)\nDESCRIPTION: Configures CMake for building SDL for iOS devices, using the latest installed SDK. It targets the arm64 architecture and sets the deployment target to iOS 9.0.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Find Threads package\nDESCRIPTION: This command uses CMake's `find_package` command to locate the `Threads` package, which is required by the library. The `REQUIRED` keyword ensures that an error is raised if the package is not found.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: NetBSD/UHID Option\nDESCRIPTION: Conditionally adds the `HIDAPI_WITH_NETBSD` option on NetBSD to build HIDAPI with NetBSD/UHID support.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n        option(HIDAPI_WITH_NETBSD \"Build NetBSD/UHID implementation of HIDAPI\" ON)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Raspberry Pi Video Driver Option (CMake)\nDESCRIPTION: This snippet configures an option to enable the Raspberry Pi video driver. It depends on SDL_VIDEO being enabled, the system being UNIX_SYS, and the CPU architecture being ARM32 or ARM64.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_RPI                 \"Use Raspberry Pi video driver\" ON \"SDL_VIDEO;UNIX_SYS;SDL_CPU_ARM32 OR SDL_CPU_ARM64\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting Cocoa Video Driver Option (CMake)\nDESCRIPTION: This snippet configures an option to enable the Cocoa video driver for Apple platforms. It depends on the APPLE variable being set.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_COCOA               \"Use Cocoa video driver\" ON \"APPLE\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Disabling SDL_main Implementation\nDESCRIPTION: This code snippet demonstrates how to prevent SDL_main.h from generating platform-specific entry point code. By defining SDL_MAIN_NOIMPL before including SDL_main.h, you can avoid unwanted side effects, particularly if you need to include the header but don't want the default entry point implementation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-main-functions.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MAIN_NOIMPL\n```\n\n----------------------------------------\n\nTITLE: Setting Metal Support Option (CMake)\nDESCRIPTION: This snippet configures an option to enable Metal support on Apple platforms. It depends on the APPLE variable being set.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_59\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_METAL               \"Enable Metal support\" ON \"APPLE\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Installing SDL Build Dependencies on Arch Linux\nDESCRIPTION: This command installs the necessary build dependencies for SDL on Arch Linux. It uses pacman to install packages, including libraries and tools related to ALSA, CMake, HIDAPI, IBus, Jack, libdecor, OpenGL, PulseAudio, USB, X11, Xcursor, Xext, Xinerama, XKBCommon, XRandR, XRender, XSS, Xtst, Mesa, Ninja, PipeWire, sndio, Vulkan, Wayland, and Wayland Protocols.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S alsa-lib cmake hidapi ibus jack libdecor libgl libpulse libusb libx11 libxcursor libxext libxinerama libxkbcommon libxrandr libxrender libxss libxtst mesa ninja pipewire sndio vulkan-driver vulkan-headers wayland wayland-protocols\n```\n\n----------------------------------------\n\nTITLE: Checking for standard C library headers\nDESCRIPTION: This CMake snippet checks for the existence of various standard C library headers and defines corresponding `HAVE_*` variables.  It iterates through a list of headers, uses `check_include_file` to determine their availability, and sets the corresponding `HAVE_*` variable to reflect the result.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_112\n\nLANGUAGE: cmake\nCODE:\n```\nset(available_headers)\n  set(HAVE_LIBC TRUE)\n  set(headers_to_check\n    float.h\n    iconv.h\n    inttypes.h\n    limits.h\n    malloc.h\n    math.h\n    memory.h\n    signal.h\n    stdarg.h\n    stdbool.h\n    stddef.h\n    stdint.h\n    stdio.h\n    stdlib.h\n    string.h\n    strings.h\n    sys/types.h\n    time.h\n    wchar.h\n  )\n  foreach(_HEADER IN LISTS headers_to_check)\n    string(TOUPPER \"${_HEADER}\" HEADER_IDENTIFIER)\n    string(REGEX REPLACE \"[./]\" \"_\" HEADER_IDENTIFIER \"${HEADER_IDENTIFIER}\")\n    set(LIBC_HAS_VAR \"LIBC_HAS_${HEADER_IDENTIFIER}\")\n    check_include_file(\"${_HEADER}\" \"${LIBC_HAS_VAR}\")\n    set(HAVE_${HEADER_IDENTIFIER} ${${LIBC_HAS_VAR}})\n    if(HAVE_${HEADER_IDENTIFIER})\n      list(APPEND available_headers \"${_HEADER}\")\n    endif()\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Android Logging (C)\nDESCRIPTION: This C code snippet demonstrates how to use the Android logging system to print debug messages. It includes the necessary header file and shows an example of logging a string with an integer value.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\n#include <android/log.h>\n\n__android_log_print(ANDROID_LOG_INFO, \"foo\", \"Something happened! x = %d\", x);\n```\n\n----------------------------------------\n\nTITLE: Building SDL on Windows with CMake\nDESCRIPTION: This snippet demonstrates how to build and install SDL on Windows using CMake. It configures the build, builds the project with RelWithDebInfo configuration, and installs it to the C:/SDL directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build\ncmake --build build --config RelWithDebInfo\ncmake --install build --config RelWithDebInfo --prefix C:/SDL\n```\n\n----------------------------------------\n\nTITLE: Create alias for hidapi::darwin library\nDESCRIPTION: This command creates an alias `hidapi::darwin` for the `hidapi_darwin` library. This allows users to link against the library using the more descriptive name `hidapi::darwin` when using `find_package()`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(hidapi::darwin ALIAS hidapi_darwin)\n```\n\n----------------------------------------\n\nTITLE: Surface Creation (SDL3)\nDESCRIPTION: This code demonstrates the SDL3 approach to creating an indexed surface and its associated palette.  `SDL_CreateSurface` creates the surface, and `SDL_CreateSurfacePalette` creates and associates the palette.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface *surface = SDL_CreateSurface(32, 32, SDL_PIXELFORMAT_INDEX8);\nSDL_Palette *palette = SDL_CreateSurfacePalette(surface);\n...\n```\n\n----------------------------------------\n\nTITLE: iOS Device CMake Configuration (Specific SDK)\nDESCRIPTION: Configures CMake for building SDL for iOS devices, using a specific SDK revision (iOS 12.4 in this example). It targets the arm64 architecture.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos12.4 -DCMAKE_OSX_ARCHITECTURES=arm64\n```\n\n----------------------------------------\n\nTITLE: File to Header Conversion Invocation CMake\nDESCRIPTION: This snippet invokes the `files2headers` function to convert a list of BMP files into C header files, storing the result in the `gamepad_image_headers` variable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nfiles2headers(gamepad_image_headers\n    gamepad_axis_arrow.bmp\n    gamepad_axis.bmp\n    gamepad_back.bmp\n    gamepad_battery.bmp\n    gamepad_battery_wired.bmp\n    gamepad_button_background.bmp\n```\n\n----------------------------------------\n\nTITLE: Linking OpenGL Libraries\nDESCRIPTION: This snippet configures linking to the OpenGL library. If the `OpenGL::GL` target exists (modern CMake), it links against that. Otherwise, it links against the `OPENGL_gl_LIBRARY` variable, handling a special case for Emscripten where `OPENGL_gl_LIBRARY` might be \"nul\".\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(OPENGL_FOUND)\n    if(TARGET OpenGL::GL)\n        target_link_libraries(testshader PRIVATE OpenGL::GL)\n        target_link_libraries(testgl PRIVATE OpenGL::GL)\n    else()\n        if(EMSCRIPTEN AND OPENGL_gl_LIBRARY STREQUAL \"nul\")\n            set(OPENGL_gl_LIBRARY GL)\n        endif()\n        # emscripten's FindOpenGL.cmake does not create OpenGL::GL\n        target_link_libraries(testshader PRIVATE ${OPENGL_gl_LIBRARY})\n        target_link_libraries(testgl PRIVATE ${OPENGL_gl_LIBRARY})\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Timer Sources for N3DS platform\nDESCRIPTION: This CMake snippet sets the timer-related source files for the Nintendo 3DS platform. It uses `sdl_glob_sources` to include all C files in the specified directory and sets the `HAVE_SDL_TIMERS` variable to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_194\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_TIMER_N3DS 1)\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/n3ds/*.c\")\nset(HAVE_SDL_TIMERS TRUE)\n```\n\n----------------------------------------\n\nTITLE: Installing Additional SDL Dependencies on Ubuntu 22.04+\nDESCRIPTION: This command extends the Ubuntu 18.04 dependency installation by including additional packages for PipeWire, Wayland, libdecor, and liburing, which are relevant for newer Ubuntu releases.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlibpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev\n```\n\n----------------------------------------\n\nTITLE: Setting Default OSS Option\nDESCRIPTION: Sets the default OSS option for audio support. It is ON for RISCOS and UNIX systems (excluding Linux, NetBSD, and OpenBSD), and OFF otherwise.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nif((RISCOS OR UNIX_SYS) AND NOT (LINUX OR NETBSD OR OPENBSD))\n  set(SDL_OSS_DEFAULT ON)\nelse()\n  set(SDL_OSS_DEFAULT OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: tvOS Simulator CMake Configuration\nDESCRIPTION: Configures CMake for building SDL for the tvOS Simulator, using the latest installed SDK. It targets the x86_64 architecture and sets the deployment target to tvOS 9.0.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvsimulator -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Install hidapi_darwin target\nDESCRIPTION: This code block installs the `hidapi_darwin` target, including the library, archive, framework, and public headers, to the specified destinations if `HIDAPI_INSTALL_TARGETS` is set to true.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(HIDAPI_INSTALL_TARGETS)\n    install(TARGETS hidapi_darwin EXPORT hidapi\n        LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        FRAMEWORK DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        PUBLIC_HEADER DESTINATION \"${PUBLIC_HEADER_DESTINATION}\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDL_AppIterate Callback Function in C\nDESCRIPTION: This is the signature for the SDL_AppIterate callback function. It is called repeatedly, typically at the refresh rate of the display. The appstate parameter allows access to data set during SDL_AppInit. It returns a SDL_AppResult to indicate success, failure or continuation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-main-functions.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nSDL_AppResult SDL_AppIterate(void *appstate);\n```\n\n----------------------------------------\n\nTITLE: Build Single APK (CMake)\nDESCRIPTION: This CMake command builds the APK for a specific test executable, in this case, `testsprite`. It assumes that the CMake project has been configured for Android with tests enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target testsprite-apk\n```\n\n----------------------------------------\n\nTITLE: Linking CoreMedia Framework (CMake)\nDESCRIPTION: This snippet finds and links the CoreMedia framework, adding it as a linker dependency. It uses `sdl_link_dependency` to manage the linking process.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_184\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library(COREMEDIA CoreMedia)\n    if(COREMEDIA)\n      sdl_link_dependency(corevideo LIBS \"$<LINK_LIBRARY:FRAMEWORK,CoreMedia>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,CoreMedia\")\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Setting IO Sources for N3DS platform\nDESCRIPTION: This CMake snippet sets the input/output-related source files for the Nintendo 3DS platform. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_199\n\nLANGUAGE: CMake\nCODE:\n```\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/io/n3ds/*.c\")\n```\n\n----------------------------------------\n\nTITLE: Passing custom compile options to compiler Visual C\nDESCRIPTION: This snippet illustrates how to pass custom compile options to the compiler when building SDL with CMake. This example is for Visual C using /ARCH:AVX2.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncmake .. -DCMAKE_C_FLAGS=\"/ARCH:AVX2\" -DCMAKE_CXX_FLAGS=\"/ARCH:AVX2\"\n```\n\n----------------------------------------\n\nTITLE: Linking to libusb if available\nDESCRIPTION: This snippet demonstrates conditional linking to the `hidapi::libusb` target when it is available. If the libusb backend is not built, it defaults to linking against `hidapi::hidapi`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET hidapi::libusb)\n    target_link_libraries(my_project PRIVATE hidapi::libusb)\nelse()\n    target_link_libraries(my_project PRIVATE hidapi::hidapi)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing SDL Module with Prefab (Android)\nDESCRIPTION: This snippet demonstrates how to import the SDL module using the prefab build system in an Android project. It ensures that the project depends on the SDL library for building.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_7\n\nLANGUAGE: makefile\nCODE:\n```\n$(call import-module,prefab/@PROJECT_NAME@)\n```\n\n----------------------------------------\n\nTITLE: Viewing Logcat Output with ADB\nDESCRIPTION: This command utilizes ADB to display log messages from the default connected Android device.  It helps in debugging by showing real-time logs generated by the application.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nadb logcat\n```\n\n----------------------------------------\n\nTITLE: Enabling IOKit Joystick Support (CMake)\nDESCRIPTION: This snippet enables IOKit joystick support unless the target platform is visionOS.  It sets the CMake variables to enable the necessary code paths.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_179\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT VISIONOS)\n        set(SDL_JOYSTICK_IOKIT 1)\n        set(SDL_FRAMEWORK_IOKIT 1)\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring hidapi.pc File\nDESCRIPTION: This command configures the `hidapi.pc` file using the input file `hidapi.pc.in`. This file is used by `pkg-config` to provide information about the library to other software packages.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nhidapi_configure_pc(\"${PROJECT_ROOT}/pc/hidapi.pc.in\")\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Concatenation of Incomplete Sequences Test\nDESCRIPTION: This test checks the handling of concatenated incomplete UTF-8 sequences. It verifies that each incomplete sequence is detected and handled separately, resulting in multiple malformed sequence errors.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Install Single APK (CMake)\nDESCRIPTION: This CMake command installs a single APK, `testsprite.apk` to the connected Android device using adb. This assumes the CMake project has been configured for Android.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target install-testsprite\n```\n\n----------------------------------------\n\nTITLE: Installing Additional SDL Dependencies on Fedora 39+\nDESCRIPTION: This command extends the Fedora 35 dependency installation by including the `liburing-devel` package, which is relevant for newer Fedora releases (39+).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nliburing-devel\n```\n\n----------------------------------------\n\nTITLE: Creating Build Directory\nDESCRIPTION: This snippet describes the commands required to create a build directory, navigate into it, and configure the build using CMake in Release mode.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/video/yuv2rgb/README.md#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake\n```\n\n----------------------------------------\n\nTITLE: YUV420 to RGB24 Conversion\nDESCRIPTION: This command line invocation runs the test program to convert a raw YUV420 file to RGB24. It specifies the input YUV file, image width, image height, and the output filename template.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/video/yuv2rgb/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./test_yuv_rgb yuv2rgb image.yuv 4096 2160 image\n```\n\n----------------------------------------\n\nTITLE: Add hidapi_darwin library\nDESCRIPTION: This command creates a library named `hidapi_darwin` using the specified public headers and the `hid.c` source file. It defines the source files used to build the library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(hidapi_darwin\n    ${HIDAPI_PUBLIC_HEADERS}\n    hid.c\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing /W4 with /W3 for MSVC Clang\nDESCRIPTION: Replaces the `/W4` flag with `/W3` in the C compiler flags when using clang-cl. This is because clang-cl treats `/W4` as `-Wall -Wextra`, and `-Wextra` may not be desired.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\n  if(MSVC_CLANG)\n    # clang-cl treats /W4 as '-Wall -Wextra' -- we don't need -Wextra\n    foreach(flag_var\n        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)\n      string(REGEX REPLACE \"/W4\" \"/W3\" ${flag_var} \"${${flag_var}}\")\n    endforeach(flag_var)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Apple Bundles (CMake)\nDESCRIPTION: This CMake snippet sets properties for Apple targets (iOS, macOS) to define the bundle identifier, bundle version, and short version string. It iterates through SDL example executables, applying these properties to each.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n  foreach(CURRENT_TARGET ${SDL_EXAMPLE_EXECUTABLES})\n    set_target_properties(\"${CURRENT_TARGET}\" PROPERTIES\n      MACOSX_BUNDLE_GUI_IDENTIFIER \"org.libsdl.${CURRENT_TARGET}\"\n      MACOSX_BUNDLE_BUNDLE_VERSION \"${SDL3_VERSION}\"\n      MACOSX_BUNDLE_SHORT_VERSION_STRING \"${SDL3_VERSION}\"\n    )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Android Executable Macro\nDESCRIPTION: Defines a macro `add_executable` for Android to create shared libraries instead of executables. This is because Android typically uses shared libraries for applications.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/cmake/test/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID)\n    macro(add_executable NAME)\n        set(args ${ARGN})\n        list(REMOVE_ITEM args WIN32)\n        add_library(${NAME} SHARED ${args})\n        unset(args)\n    endmacro()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing libudev-dev and libusb-1.0-0-dev on Debian/Ubuntu\nDESCRIPTION: This shell script installs the libudev-dev and libusb-1.0-0-dev packages on Debian/Ubuntu systems. libudev-dev is required for the hidraw backend, and libusb-1.0-0-dev is required for the libusb backend. These packages provide the necessary development files for building HIDAPI with the respective backends.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# required only by hidraw backend\nsudo apt install libudev-dev\n# required only by libusb backend\nsudo apt install libusb-1.0-0-dev\n```\n\n----------------------------------------\n\nTITLE: Creating N3DS 3DSX Files\nDESCRIPTION: This snippet iterates through all SDL test executables and creates N3DS 3DSX files (Nintendo 3DS executables) for each. It generates SMDH metadata, creates a ROMFS directory, and then combines them into the final 3DSX file.  `ctr_generate_smdh` and `ctr_create_3dsx` are assumed to be defined elsewhere.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(N3DS)\n    foreach(APP ${SDL_TEST_EXECUTABLES})\n        get_target_property(TARGET_BINARY_DIR ${APP} BINARY_DIR)\n        set(ROMFS_DIR \"${TARGET_BINARY_DIR}/sdl-${APP}\")\n        set(SMDH_FILE \"${TARGET_BINARY_DIR}/${APP}.smdh\")\n        file(MAKE_DIRECTORY ${ROMFS_DIR})\n        ctr_generate_smdh(\"${SMDH_FILE}\"\n            NAME \"SDL-${APP}\"\n            DESCRIPTION \"SDL3 Test suite\"\n            AUTHOR \"SDL3 Contributors\"\n            ICON \"${CMAKE_CURRENT_SOURCE_DIR}/n3ds/logo48x48.png\"\n        )\n        ctr_create_3dsx(\n            ${APP}\n            ROMFS \"${ROMFS_DIR}\"\n            SMDH \"${SMDH_FILE}\"\n        )\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define PSVita Video Options CMake\nDESCRIPTION: This block conditionally defines options for building with PSVita support. If the VITA variable is defined, it creates options to enable or disable PSVita-specific features like piglet GLES2 support (VIDEO_VITA_PIB) and PVR GLES/GLES2 support (VIDEO_VITA_PVR).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_73\n\nLANGUAGE: cmake\nCODE:\n```\nif(VITA)\n  set_option(VIDEO_VITA_PIB  \"Build with PSVita piglet gles2 support\" OFF)\n  set_option(VIDEO_VITA_PVR  \"Build with PSVita PVR gles/gles2 support\" OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: macOS CMake Configuration (dylib/static lib)\nDESCRIPTION: Configures CMake to build a dynamic library (dylib) and/or static library for macOS, targeting both x86_64 and arm64 architectures, with a deployment target of macOS 10.11.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=\"x86_64;arm64\" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11\n```\n\n----------------------------------------\n\nTITLE: Creating Uninstall Target CMake\nDESCRIPTION: This snippet creates an uninstall target that removes all installed files. It uses `configure_file` to generate an uninstall script from a template (`cmake/cmake_uninstall.cmake.in`) and then adds a custom target that executes the script.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_260\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_UNINSTALL)\n  if(NOT TARGET uninstall)\n    configure_file(cmake/cmake_uninstall.cmake.in cmake_uninstall.cmake IMMEDIATE @ONLY)\n\n    add_custom_target(uninstall\n        COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Create Alias for Target Library CMake\nDESCRIPTION: This snippet creates an alias target `hidapi::hidapi` for the actual library target `hidapi_${EXPORT_ALIAS}`. This allows other CMake projects to easily link to the HIDAPI library using the `hidapi::hidapi` alias.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(hidapi::hidapi ALIAS hidapi_${EXPORT_ALIAS})\n```\n\n----------------------------------------\n\nTITLE: SDL Event Polling in C\nDESCRIPTION: This function polls for SDL events and handles the quit event. It returns 1 if the quit event is triggered, otherwise it returns 0. This function is used to handle events within the main loop of the application.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/relative_mode.markdown#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint PollEvents()\n{\n    SDL_Event event;\n    while (SDL_PollEvent(&event))\n    {\n        switch (event.type)\n        {\n            case SDL_EVENT_QUIT:\n                return 1;\n            default:\n                break;\n        }\n    }\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hidapi_netbsd target\nDESCRIPTION: This snippet conditionally installs the hidapi_netbsd target if HIDAPI_INSTALL_TARGETS is enabled. It specifies the destination directories for the library, archives, and public headers during the installation process. An export target named hidapi is created, allowing downstream projects to use this library after installation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/netbsd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(HIDAPI_INSTALL_TARGETS)\n    install(TARGETS hidapi_netbsd EXPORT hidapi\n        LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        PUBLIC_HEADER DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/hidapi\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Overriding CMAKE_FIND_ROOT_PATH_MODE\nDESCRIPTION: Overrides `CMAKE_FIND_ROOT_PATH_MODE_PACKAGE` to `NEVER`, which ensures that CMake searches for SDL3 outside of the sysroot. This is useful when SDL3 is installed in a non-standard location.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/cmake/test/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE NEVER)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 2-byte Missing\nDESCRIPTION: Tests the handling of incomplete 2-byte UTF-8 sequences where the last byte is missing. This verifies that the decoder identifies and handles truncated sequences correctly.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Audio Driver for Haiku (CMake)\nDESCRIPTION: This snippet enables the Haiku audio driver by setting a CMake variable and including the relevant source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_187\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_HAIKU 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/haiku/*.cc\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Power Management Configuration (CMake)\nDESCRIPTION: This snippet configures Windows power management and includes the necessary source files for power management functions.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_156\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_POWER)\n  set(SDL_POWER_WINDOWS 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/power/windows/SDL_syspower.c\")\n  set(HAVE_SDL_POWER TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building SDL tests with CMake\nDESCRIPTION: This snippet shows how to build the SDL test programs using CMake. It adds the -DSDL_TESTS=ON flag to the CMake configuration command.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build -DSDL_TESTS=ON\n```\n\n----------------------------------------\n\nTITLE: Adding SIMD-Disabled Tests in CMake\nDESCRIPTION: This CMake code adds `testautomation-no-simd` and `testplatform-no-simd` tests and disables SIMD features for them by setting the environment variable `SDL_CPU_FEATURE_MASK` to `-all`.  It also configures the `testautomation-no-simd` test to run serially to prevent conflicts with temporary files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT EMSCRIPTEN)\n    add_sdl_test(testautomation-no-simd testautomation)\n    add_sdl_test(testplatform-no-simd testplatform)\n    set_property(TEST testautomation-no-simd testplatform-no-simd APPEND PROPERTY ENVIRONMENT \"SDL_CPU_FEATURE_MASK=-all\")\n\n    # testautomation creates temporary files which might conflict\n    set_property(TEST testautomation-no-simd testautomation PROPERTY RUN_SERIAL TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Installing APK\nDESCRIPTION: This snippet creates a custom target `install-${TEST}` for installing the generated APK. It executes a CMake command that calls the `SdlAndroidScript.cmake` script with the `ACTION=install` parameter. The script uses the path of the APK obtained from the `${TEST}-apk` target. The target depends on the successful creation of `${TEST}-apk`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(install-${TEST}\n    COMMAND \"${CMAKE_COMMAND}\" -DACTION=install \"-DAPKS=$<TARGET_PROPERTY:${TEST}-apk,OUTPUT>\" -P \"${SDL3_SOURCE_DIR}/cmake/android/SdlAndroidScript.cmake\"\n    DEPENDS \"${TEST}-apk\"\n)\n```\n\n----------------------------------------\n\nTITLE: macOS Framework Option\nDESCRIPTION: Conditionally adds the `CMAKE_FRAMEWORK` option on macOS if CMake version is greater than or equal to 3.15. This allows building a macOS/iOS Framework version of the library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n    if(NOT CMAKE_VERSION VERSION_LESS \"3.15\")\n        option(CMAKE_FRAMEWORK \"Build macOS/iOS Framework version of the library\" OFF)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Shared Libraries on Specific Platforms\nDESCRIPTION: Disables the building of shared libraries on certain platforms, such as VITA, PSP, PS2, N3DS and RISCOS.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nif(VITA OR PSP OR PS2 OR N3DS OR RISCOS)\n  set(SDL_SHARED_AVAILABLE OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building SDL for Nintendo 3DS with CMake\nDESCRIPTION: This snippet shows the commands needed to build the SDL library for the Nintendo 3DS using CMake. It requires devkitARM and cmake to be installed, and it sets the toolchain file, build type, and then builds and installs the library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-n3ds.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_TOOLCHAIN_FILE=\"$DEVKITPRO/cmake/3DS.cmake\" -DCMAKE_BUILD_TYPE=Release\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: Check EXCLUDE_FROM_ALL Property CMake\nDESCRIPTION: This snippet checks if the `EXCLUDE_FROM_ALL` directory property is set. If it is and `HIDAPI_INSTALL_TARGETS` is also set to TRUE, a warning message is displayed, as installing targets excluded from all builds can lead to undefined behavior.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_directory_property(IS_EXCLUDE_FROM_ALL EXCLUDE_FROM_ALL)\nif(IS_EXCLUDE_FROM_ALL)\n    if(HIDAPI_INSTALL_TARGETS)\n        message(WARNING \"Installing EXCLUDE_FROM_ALL targets in an undefined behavior in CMake.\\nDon't add 'hidapi' sundirectory with 'EXCLUDE_FROM_ALL' property, or don't set 'HIDAPI_INSTALL_TARGETS' to TRUE.\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Uninstall All Test APKs (CMake)\nDESCRIPTION: This CMake command uninstalls all SDL test APKs from the connected Android device using adb. It's a convenient way to remove all test applications at once.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target uninstall-sdl-test-apks\n```\n\n----------------------------------------\n\nTITLE: Disable Declaration After Statement Warning on PS2\nDESCRIPTION: If building for PS2, this disables the 'declaration after statement' warning.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_238\n\nLANGUAGE: cmake\nCODE:\n```\nif(PS2)\n  sdl_compile_options(PRIVATE \"-Wno-error=declaration-after-statement\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDL_MapRGBA Example Update (C)\nDESCRIPTION: This code shows how to update your SDL2 code using `SDL_MapRGBA` to use the new `SDL_MapSurfaceRGBA` function in SDL3.  This shows how to map r, g, b, and a values to a pixel.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\npixel = SDL_MapSurfaceRGBA(surface, r, g, b, a);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring pp_data_dump Executable with CMake\nDESCRIPTION: This snippet demonstrates how to create an executable named 'pp_data_dump' from the source file 'pp_data_dump.c' using CMake. It sets the C standard to C11, links the 'hidapi_winapi' library, and defines the installation target.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/pp_data_dump/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pp_data_dump pp_data_dump.c)\nset_target_properties(pp_data_dump\n    PROPERTIES\n        C_STANDARD 11\n        C_STANDARD_REQUIRED TRUE\n)\ntarget_link_libraries(pp_data_dump\n    PRIVATE hidapi_winapi\n)\n\ninstall(TARGETS pp_data_dump\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Build, Install and Start\nDESCRIPTION: This snippet creates a custom target `build-install-start-${TEST}` that combines building, installing, and starting an Android activity. It runs a CMake command that calls the `SdlAndroidScript.cmake` script with `ACTION=build-install-run`, passing the executable name `${TEST}` and build folder `${CMAKE_BINARY_DIR}`. It depends on the availability of the `SdlAndroid::adb` target.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(build-install-start-${TEST}\n    COMMAND \"${CMAKE_COMMAND}\" -DACTION=build-install-run \"-DEXECUTABLES=${TEST}\" \"-DBUILD_FOLDER=${CMAKE_BINARY_DIR}\" -P \"${SDL3_SOURCE_DIR}/cmake/android/SdlAndroidScript.cmake\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Relocatable Option\nDESCRIPTION: Sets the default for whether to build a relocatable library. Defaults to OFF, except on MSVC, where it defaults to ON.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_RELOCATABLE_DEFAULT OFF)\nif(MSVC)\n  set(SDL_RELOCATABLE_DEFAULT ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDL Camera Subsystem Configuration CMake\nDESCRIPTION: This snippet configures the SDL camera subsystem, checking for `SDL_DUMMYCAMERA`. If enabled, it sets the corresponding camera driver flags, globs the source files, and defines `HAVE_SDL_CAMERA`. It includes a commented-out section for `SDL_DISKCAMERA`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_127\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_CAMERA)\n  # CheckDummyCamera/CheckDiskCamera - valid for all platforms\n  if(SDL_DUMMYCAMERA)\n    set(SDL_CAMERA_DRIVER_DUMMY 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/dummy/*.c\")\n    set(HAVE_DUMMYCAMERA TRUE)\n    set(HAVE_SDL_CAMERA TRUE)\n  endif()\n  # !!! FIXME: for later.\n  #if(SDL_DISKCAMERA)\n  #  set(SDL_CAMERA_DRIVER_DISK 1)\n  #  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/disk/*.c\")\n  #  set(HAVE_DISKCAMERA TRUE)\n  #  set(HAVE_SDL_CAMERA TRUE)\n  #endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Power Sources for N3DS platform\nDESCRIPTION: This CMake snippet conditionally sets the power-related source files for the Nintendo 3DS platform if `SDL_POWER` is enabled. It uses `sdl_glob_sources` to include all C files in the specified directory and sets the `HAVE_SDL_POWER` variable to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_191\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_POWER)\n  set(SDL_POWER_N3DS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/n3ds/*.c\")\n  set(HAVE_SDL_POWER TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting UNIX or MAC System Flag\nDESCRIPTION: Sets the `UNIX_OR_MAC_SYS` flag to `ON` if the platform is either Unix or macOS. Otherwise, it's set to `OFF`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX OR APPLE)\n  set(UNIX_OR_MAC_SYS ON)\nelse()\n  set(UNIX_OR_MAC_SYS OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Shared Library Build Option\nDESCRIPTION: Adds the `BUILD_SHARED_LIBS` option to control whether to build a shared library or a static library.  Default is ON, building a shared library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SHARED_LIBS \"Build shared version of the libraries, otherwise build statically\" ON)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+0000 (f0 80 80 80)\nDESCRIPTION: Tests overlong representation of the NUL character (U+0000) using f0 80 80 80.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Required Modules CMake\nDESCRIPTION: This snippet checks for required CMake modules and copies them to the binary directory if they exist. It uses `execute_process` to copy the modules, ensuring they are available during the build process.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_252\n\nLANGUAGE: CMake\nCODE:\n```\nsdl_cmake_config_required_modules(sdl_cmake_modules)\nif(sdl_cmake_modules)\n  execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${sdl_cmake_modules} \"${SDL3_BINARY_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH Default Value\nDESCRIPTION: Sets the default value for using RPATH. It is ON for UNIX systems (excluding Android, RISCOS and when building an Apple Framework), and OFF otherwise.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT ANDROID AND NOT RISCOS AND NOT SDL_FRAMEWORK)\n  set(SDL_RPATH_DEFAULT ON)\nelse()\n  set(SDL_RPATH_DEFAULT OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running evtest to List Input Devices\nDESCRIPTION: This command runs the `evtest` utility, which lists available input devices on the system. This is used to identify the joystick and its corresponding event number (e.g., /dev/input/eventXX).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo evtest\n```\n\n----------------------------------------\n\nTITLE: iOS Simulator CMake Configuration\nDESCRIPTION: Configures CMake for building SDL for the iOS Simulator, using the latest installed SDK. It targets the x86_64 architecture and sets the deployment target to iOS 9.0.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Setting Test Build Option (CMake)\nDESCRIPTION: This snippet configures an option to build the test directory.  It depends on SDL_TEST_LIBRARY being enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_70\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_TESTS           \"Build the test directory\" OFF SDL_TEST_LIBRARY OFF)\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation-Specific Sections in C\nDESCRIPTION: This code snippet shows how to define sections of the header file that are only used for documentation generation by `wikiheaders.pl`.  The content within the `#ifdef SDL_WIKI_DOCUMENTATION_SECTION` block will only be included when this macro is defined, allowing for documentation-specific content that doesn't affect the C compiler.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-documentation-rules.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#ifdef SDL_WIKI_DOCUMENTATION_SECTION\n```\n\n----------------------------------------\n\nTITLE: Configuring HIDAPI Project with CMake\nDESCRIPTION: This snippet sets the minimum CMake version required to 3.1.3...3.25 and declares a C language project named hidapi. It prepares a build directory to copy the source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/subprojects/hidapi_build_cmake/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.1.3...3.25 FATAL_ERROR)\nproject(hidapi LANGUAGES C)\n```\n\n----------------------------------------\n\nTITLE: tvOS Device CMake Configuration\nDESCRIPTION: Configures CMake for building SDL for tvOS devices, using the latest installed SDK. It targets the arm64 architecture and sets the deployment target to tvOS 9.0.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvos -DCMAKE_OSX_ARCHITECTURES=arm64` -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules\nDESCRIPTION: Includes standard CMake modules for checking library existence, include files, language support, symbols, C source compilation, and other build-related functionalities.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckLibraryExists)\ninclude(CheckIncludeFile)\ninclude(CheckLanguage)\ninclude(CheckSymbolExists)\ninclude(CheckCSourceCompiles)\ninclude(CheckCSourceRuns)\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckStructHasMember)\ninclude(CMakeDependentOption)\ninclude(CMakeParseArguments)\ninclude(CMakePushCheckState)\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: SDL Preseed CMake Cache CMake\nDESCRIPTION: This conditional statement checks if SDL_PRESEED is set. If it is, it calls the SDL_Preseed_CMakeCache() function, presumably to pre-populate the CMake cache with specific values.  The function `SDL_Preseed_CMakeCache` must be defined elsewhere.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_75\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_PRESEED)\n  SDL_Preseed_CMakeCache()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Debug Build Check\nDESCRIPTION: Sets a flag `IS_DEBUG_BUILD` to ON if the `CMAKE_BUILD_TYPE` is \"Debug\".\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(IS_DEBUG_BUILD OFF)\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(IS_DEBUG_BUILD ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy LoadSO Sources\nDESCRIPTION: This CMake snippet sets the dummy LoadSO source files if `HAVE_SDL_LOADSO` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_210\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_LOADSO)\n  set(SDL_LOADSO_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/loadso/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Get Project Root Directory CMake\nDESCRIPTION: This snippet retrieves the absolute path of the project's root directory using `get_filename_component`.  It sets the `PROJECT_ROOT` variable to the absolute path of the parent directory of the current CMake list file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nget_filename_component(PROJECT_ROOT \"${CMAKE_CURRENT_LIST_DIR}/..\" ABSOLUTE)\n```\n\n----------------------------------------\n\nTITLE: OpenGL Dependency Configuration CMake\nDESCRIPTION: This snippet configures OpenGL dependency based on platform. It prefers GLVND if present and uses find_package to locate OpenGL.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT (MSVC AND SDL_CPU_ARM64))\n    # Prefer GLVND, if present\n    set(OpenGL_GL_PREFERENCE GLVND)\n    find_package(OpenGL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing Static SDL3 Library\nDESCRIPTION: Tests linking with the static SDL3 library by creating an executable (`gui-static`) and linking it against `SDL3::SDL3-static`. Similar tests are also performed to create shared libraries that link against the static SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/cmake/test/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_STATIC)\n    find_package(SDL3 REQUIRED CONFIG COMPONENTS SDL3-static)\n    add_executable(gui-static WIN32 main_gui.c)\n    target_link_libraries(gui-static PRIVATE SDL3::SDL3-static)\n\n    # Assume SDL library has been built with `set(CMAKE_POSITION_INDEPENDENT_CODE ON)`\n    add_library(sharedlib-static SHARED main_lib.c)\n    target_link_libraries(sharedlib-static PRIVATE SDL3::SDL3-static)\n    generate_export_header(sharedlib-static EXPORT_MACRO_NAME MYLIBRARY_EXPORT)\n    target_compile_definitions(sharedlib-static PRIVATE \"EXPORT_HEADER=\\\"${CMAKE_CURRENT_BINARY_DIR}/sharedlib-static_export.h\\\"\")\n    set_target_properties(sharedlib-static PROPERTIES C_VISIBILITY_PRESET \"hidden\")\n\n    if(TEST_TEST)\n        add_executable(sdltest-static sdltest.c)\n        target_link_libraries(sdltest-static PRIVATE SDL3::SDL3_test SDL3::SDL3-static)\n    endif()\n\n    if(CMAKE_Swift_COMPILER)\n        add_executable(swift-static main.swift)\n        target_include_directories(swift-static PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/swift\")\n        target_link_libraries(swift-static PRIVATE SDL3::SDL3-static)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Include GNUInstallDirs CMake\nDESCRIPTION: This snippet includes the `GNUInstallDirs` module if `HIDAPI_INSTALL_TARGETS` is enabled. `GNUInstallDirs` provides standard installation directories according to the GNU Coding Standards.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(HIDAPI_INSTALL_TARGETS)\n    include(GNUInstallDirs)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDL Subsystem Options Configuration CMake\nDESCRIPTION: This snippet iterates through the `SDL_SUBSYSTEMS` list, converts each subsystem name to uppercase, and disables the subsystem if its corresponding CMake variable is not set.  It also checks for dependencies between subsystems (e.g., `SDL_HAPTIC` requires `SDL_JOYSTICK`).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_125\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(_SUB ${SDL_SUBSYSTEMS})\n  string(TOUPPER ${_SUB} _OPT)\n  if(NOT SDL_${_OPT})\n    set(SDL_${_OPT}_DISABLED 1)\n  endif()\nendforeach()\nif(SDL_HAPTIC)\n  if(NOT SDL_JOYSTICK)\n    # Haptic requires some private functions from the joystick subsystem.\n    message(FATAL_ERROR \"SDL_HAPTIC requires SDL_JOYSTICK, which is not enabled\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Default LIBC and System Iconv Options\nDESCRIPTION: Sets default options for using LIBC and the system's iconv library.  LIBC is ON by default, while system iconv is OFF on Windows, macOS, iOS, tvOS, visionOS and watchOS, and ON otherwise.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_LIBC_DEFAULT ON)\nset(SDL_SYSTEM_ICONV_DEFAULT ON)\nif(WINDOWS OR MACOS OR IOS OR TVOS OR VISIONOS OR WATCHOS)\n  set(SDL_SYSTEM_ICONV_DEFAULT OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Vendor Info Option (CMake)\nDESCRIPTION: This snippet sets an option to add vendor name and/or version information to SDL_REVISION.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_68\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_VENDOR_INFO \"\" CACHE STRING \"Vendor name and/or version to add to SDL_REVISION\")\n```\n\n----------------------------------------\n\nTITLE: Checking Metal Framework Compilation (Objective-C)\nDESCRIPTION: This snippet checks if the Metal framework is available and can be compiled. It includes Metal and QuartzCore headers, checks CPU architecture, and defines a simple main function. The availability of Metal influences Vulkan and Metal rendering options.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_182\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_objc_source_compiles(\"\n        #include <AvailabilityMacros.h>\n        #import <Metal/Metal.h>\n        #import <QuartzCore/CAMetalLayer.h>\n\n        #if (!TARGET_CPU_X86_64 && !TARGET_CPU_ARM64)\n        #error Metal doesn't work on this configuration\n        #endif\n        int main(int argc, char **argv) { return 0; }\" HAVE_FRAMEWORK_METAL)\n```\n\n----------------------------------------\n\nTITLE: Copying HIDAPI Source Files with CMake\nDESCRIPTION: This snippet creates a directory within the build directory and copies a list of necessary files and directories into it for the build process. The files include source and configuration files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/subprojects/hidapi_build_cmake/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(MAKE_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/root\")\n\nforeach(ROOT_ELEMENT CMakeLists.txt hidapi src windows linux mac libusb pc VERSION)\n  file(COPY \"${CMAKE_CURRENT_LIST_DIR}/../../${ROOT_ELEMENT}\" DESTINATION \"${CMAKE_CURRENT_BINARY_DIR}/root/\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Header Check: signal.h CMake\nDESCRIPTION: This snippet checks for the existence of the signal.h header file and defines HAVE_SIGNAL_H if found.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_include_file(signal.h HAVE_SIGNAL_H)\nif(HAVE_SIGNAL_H)\n    add_definitions(-DHAVE_SIGNAL_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for standard C library symbols\nDESCRIPTION: This CMake snippet checks for the existence of various standard C library symbols. It iterates through a list of symbols, uses `check_symbol_exists` to determine their availability, and sets the corresponding `HAVE_*` variable to reflect the result.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_113\n\nLANGUAGE: cmake\nCODE:\n```\nset(symbols_to_check\n    abs acos acosf asin asinf atan atan2 atan2f atanf atof atoi\n    bcopy\n    ceil ceilf copysign copysignf cos cosf\n    _Exit exp expf\n    fabs fabsf floor floorf fmod fmodf fopen64 fseeko fseeko64\n    getenv\n    _i64toa index itoa\n    log log10 log10f logf lround lroundf _ltoa\n    malloc memcmp memcpy memmove memset modf modff\n    pow powf putenv\n    rindex round roundf\n    scalbn scalbnf setenv sin sinf sqr sqrt sqrtf sscanf strchr\n    strcmp strlcat strlcpy strlen strncmp strnlen strpbrk\n    strrchr strstr strnstr strtod strtok_r strtol strtoll strtoul strtoull\n    tan tanf trunc truncf\n    unsetenv\n    vsnprintf vsscanf\n    wcsnlen wcscmp wcsdup wcslcat wcslcpy wcslen wcsncmp wcsstr wcstol\n  )\n  if(WINDOWS)\n    list(APPEND symbols_to_check\n      _copysign _fseeki64 _strrev _ui64toa _uitoa _ultoa _wcsdup\n    )\n  else()\n    list(APPEND symbols_to_check\n        strcasestr\n    )\n  endif()\n  check_library_exists(m pow \"\" HAVE_LIBM)\n  cmake_push_check_state()\n  if(HAVE_LIBM)\n    sdl_link_dependency(math LIBS m)\n    list(APPEND CMAKE_REQUIRED_LIBRARIES m)\n  endif()\n  foreach(_FN IN LISTS symbols_to_check)\n    string(TOUPPER ${_FN} _UPPER)\n    set(LIBC_HAS_VAR \"LIBC_HAS_${_UPPER}\")\n    check_symbol_exists(\"${_FN}\" \"${available_headers}\" ${LIBC_HAS_VAR})\n    set(HAVE_${_UPPER} ${${LIBC_HAS_VAR}})\n  endforeach()\n  cmake_pop_check_state()\n```\n\n----------------------------------------\n\nTITLE: Checking for Altivec support with GCC/Clang\nDESCRIPTION: This CMake snippet checks if the compiler (GCC or Clang) supports Altivec instructions. It attempts to compile a simple C program that uses Altivec intrinsics, and if successful, sets the `HAVE_ALTIVEC` variable to `TRUE`, defines `SDL_ALTIVEC_BLITTERS`, adds the `-maltivec` compiler option, and sets compile definitions for a specific source file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_104\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_ALTIVEC)\n      cmake_push_check_state()\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -maltivec\")\n      check_c_source_compiles(\"\n          #include <altivec.h>\n          vector unsigned int vzero() {\n              return vec_splat_u32(0);\n          }\n          int main(int argc, char **argv) { return 0; }\" COMPILER_SUPPORTS_ALTIVEC)\n      cmake_pop_check_state()\n      if(COMPILER_SUPPORTS_ALTIVEC)\n        set(HAVE_ALTIVEC TRUE)\n        set(SDL_ALTIVEC_BLITTERS 1)\n        sdl_compile_options(PRIVATE \"-maltivec\")\n        set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/video/SDL_blit_N.c\" APPEND PROPERTY COMPILE_DEFINITIONS \"SDL_ENABLE_ALTIVEC\")\n        set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/video/SDL_blit_N.c\" PROPERTY SKIP_PRECOMPILE_HEADERS 1)\n      endif()\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory on Haiku OS\nDESCRIPTION: This code snippet demonstrates how to set the current working directory to the executable's path on Haiku OS after calling SDL_Init(). This is necessary because SDL no longer automatically performs this action on Haiku OS.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n{\n    const char *path = SDL_GetBasePath();\n    if (path) {\n        chdir(path);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building SDL3 Project with CMake\nDESCRIPTION: These commands configure and build the SDL3 project using CMake. The first command generates the build files, and the second command compiles the project using the generated build files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-mingw.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncmake -S . -B build\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler-Specific Options (CMake)\nDESCRIPTION: This snippet configures options specific to the GCC compiler, such as enabling built-in atomics. These options may affect how the library is compiled and linked depending on the target platform and compiler.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_GCC_ATOMICS         \"Use gcc builtin atomics\" ${SDL_GCC_ATOMICS_DEFAULT})\n```\n\n----------------------------------------\n\nTITLE: Configuring System Library Options (CMake)\nDESCRIPTION: This snippet sets options related to system libraries, specifically the C library and iconv library. It enables the use of system-installed libraries or prefers libiconv if available.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_LIBC                \"Use the system C library\" ${SDL_LIBC_DEFAULT})\nset_option(SDL_SYSTEM_ICONV        \"Use iconv() from system-installed libraries\" ${SDL_SYSTEM_ICONV_DEFAULT})\nset_option(SDL_LIBICONV            \"Prefer iconv() from libiconv, if available, over libc version\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Unsetting OFF and ON Variables\nDESCRIPTION: Unsets the `OFF` and `ON` variables to avoid issues with CMake's conditional logic. Additionally, sets CMake policy CMP0054 to `NEW` if the policy exists.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nunset(OFF)\nunset(ON)\nif(POLICY CMP0054)\n  cmake_policy(SET CMP0054 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Debugging Message for Version Variables\nDESCRIPTION: Prints a debug message containing the values of the shared object version, dynamic library current version, and dynamic library compatibility version. Useful for debugging versioning issues.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nmessage(DEBUG \"SDL_SO_VERSION=${SDL_SO_VERSION} SDL_DYLIB_CURRENT_VERSION=${SDL_DYLIB_CURRENT_VERSION} SDL_DYLIB_COMPAT_VERSION=${SDL_DYLIB_COMPAT_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Offscreen Video Sources\nDESCRIPTION: This CMake snippet conditionally sets the offscreen video driver source files if both `SDL_VIDEO` and `SDL_OFFSCREEN` are enabled. It uses `sdl_glob_sources` to include all C files in the specified directory, sets `SDL_VIDEO_DRIVER_OFFSCREEN` to 1, and sets both `HAVE_OFFSCREEN` and `HAVE_SDL_VIDEO` to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_203\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_VIDEO)\n  if(SDL_OFFSCREEN)\n    set(SDL_VIDEO_DRIVER_OFFSCREEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/offscreen/*.c\")\n    set(HAVE_OFFSCREEN TRUE)\n    set(HAVE_SDL_VIDEO TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Clock Gettime Option\nDESCRIPTION: Sets the default for using clock_gettime. Defaults to ON on UNIX or Android.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX_SYS OR ANDROID)\n  set(SDL_CLOCK_GETTIME_DEFAULT ON)\nelse()\n  set(SDL_CLOCK_GETTIME_DEFAULT OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project meets the minimum requirements for the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n```\n\n----------------------------------------\n\nTITLE: C source for LASX check\nDESCRIPTION: This C source code is used by CMake's `check_c_source_compiles` function to verify LASX support. It checks if the `__loongarch_asx` macro is defined, indicating that the assembler CPP flag is enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_109\n\nLANGUAGE: c\nCODE:\n```\n#ifndef __loongarch_asx\n#error Assembler CPP flag not enabled\n#endif\nint main(int argc, char **argv) { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Disable Precompiled Headers CMake\nDESCRIPTION: This snippet disables precompiled headers for the SDL_dynapi.c source file.  This is done to prevent applying dynamic API overrides that might conflict with precompiled header content. It uses the `set_source_files_properties` CMake command to modify the properties of the specified file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_241\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(src/dynapi/SDL_dynapi.c PROPERTIES SKIP_PRECOMPILE_HEADERS 1)\n```\n\n----------------------------------------\n\nTITLE: Conditional Iconv Support\nDESCRIPTION: This snippet conditionally enables or disables Iconv support for the hidapi_libusb library, including checks for Iconv availability and compilation options.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/libusb/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(HIDAPI_NO_ICONV)\n    target_compile_definitions(hidapi_libusb PRIVATE NO_ICONV)\nelse()\n    if(NOT ANDROID)\n        include(CheckCSourceCompiles)\n\n        if(NOT CMAKE_VERSION VERSION_LESS 3.11)\n            message(STATUS \"Check for Iconv\")\n            find_package(Iconv)\n            if(Iconv_FOUND)\n                if(NOT Iconv_IS_BUILT_IN)\n                    target_link_libraries(hidapi_libusb PRIVATE Iconv::Iconv)\n                    set(CMAKE_REQUIRED_LIBRARIES \"Iconv::Iconv\")\n                    if(NOT BUILD_SHARED_LIBS)\n                        set(HIDAPI_NEED_EXPORT_ICONV TRUE PARENT_SCOPE)\n                    endif()\n                endif()\n            else()\n                message(STATUS \"Iconv Explicitly check '-liconv'\")\n                # Sometime the build environment is not setup\n                # in a way CMake can find Iconv on its own by default.\n                # But if we simply link against iconv (-liconv), the build may succeed\n                # due to other compiler/link flags.\n                set(CMAKE_REQUIRED_LIBRARIES \"iconv\")\n                check_c_source_compiles(\"\n                    #include <stddef.h>\n                    #include <iconv.h>\n                    int main() {\n                        char *a, *b;\n                        size_t i, j;\n                        iconv_t ic;\n                        ic = iconv_open(\\\"to\\\", \\\"from\\\");\n                        iconv(ic, &a, &i, &b, &j);\n                        iconv_close(ic);\n                    }\n                    \"\n                    Iconv_EXPLICITLY_AT_ENV)\n                if(Iconv_EXPLICITLY_AT_ENV)\n                    message(STATUS \"Iconv Explicitly check '-liconv' - Available\")\n                    target_link_libraries(hidapi_libusb PRIVATE iconv)\n                else()\n                    message(FATAL_ERROR \"Iconv is not found, make sure to provide it in the build environment\")\n                endif()\n            endif()\n        else()\n            # otherwise there is 2 options:\n            # 1) iconv is provided by Standard C library and the build will be just fine\n            # 2) The _user_ has to provide additional compilation options for this project/target\n        endif()\n\n        # check for error: \"conflicting types for 'iconv'\"\n        check_c_source_compiles(\"#include<iconv.h>\n            extern size_t iconv (iconv_t cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);\n            int main() {}\"\n        HIDAPI_ICONV_CONST)\n        if(HIDAPI_ICONV_CONST)\n            target_compile_definitions(hidapi_libusb PRIVATE \\\"ICONV_CONST=const\\\"\n)\n        endif()\n    else()\n        # On Android Iconv is disabled on the code level anyway, so no issue;\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Check Required Includes and Link Options\nDESCRIPTION: Sets and marks as advanced the variables `SDL_CHECK_REQUIRED_INCLUDES` and `SDL_CHECK_REQUIRED_LINK_OPTIONS` for extra includes and link options during CMake checks. These are cached strings to store extra includes and link options required during CMake checks.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_CHECK_REQUIRED_INCLUDES \"\" CACHE STRING \"Extra includes (for CMAKE_REQUIRED_INCLUDES)\")\nset(SDL_CHECK_REQUIRED_LINK_OPTIONS \"\" CACHE STRING \"Extra link options (for CMAKE_REQUIRED_LINK_OPTIONS)\")\nmark_as_advanced(SDL_CHECK_REQUIRED_INCLUDES SDL_CHECK_REQUIRED_LINK_OPTIONS)\n```\n\n----------------------------------------\n\nTITLE: SDL_AppQuit Callback Function in C\nDESCRIPTION: This is the signature for the SDL_AppQuit callback function. It is called once before the application terminates. It receives the application state and the result of the application's execution. This function should perform any necessary cleanup.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-main-functions.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_AppQuit(void *appstate, SDL_AppResult result);\n```\n\n----------------------------------------\n\nTITLE: Defining hidapi_netbsd library\nDESCRIPTION: This snippet defines the hidapi_netbsd library target using CMake. It includes public headers, source files (hid.c), and links necessary libraries. It utilizes find_package to locate the Threads library, linking it as a private dependency.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/netbsd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(hidapi_netbsd\n    ${HIDAPI_PUBLIC_HEADERS}\n    hid.c\n)\ntarget_link_libraries(hidapi_netbsd PUBLIC hidapi_include)\n\nfind_package(Threads REQUIRED)\n\ntarget_link_libraries(hidapi_netbsd PRIVATE Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Framework Version\nDESCRIPTION: Sets a placeholder framework version, which may be used in Apple-specific builds.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_FRAMEWORK_VERSION \"A\")\n```\n\n----------------------------------------\n\nTITLE: udev rule example for older udev versions\nDESCRIPTION: This snippet demonstrates a udev rule configuration for older systems (e.g. CentOS) that identifies joystick devices by checking if the `ID_CLASS` is set to \"joystick\". It also ensures the `ID_INPUT_JOYSTICK` environment variable is set to \"1\", enabling SDL to detect the joystick properly.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nSUBSYSTEM==\"input\", ENV{ID_CLASS}==\"joystick\", ENV{ID_INPUT_JOYSTICK}=\"1\"\n```\n\n----------------------------------------\n\nTITLE: mfapi.h Compilation Check (CMake)\nDESCRIPTION: This CMake code checks if the `mfapi.h` header file can be compiled.  It also includes `mfidl.h` and `mfreadwrite.h`. It's used for Media Foundation API support.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_150\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"\n    #include <windows.h>\n    #include <mfapi.h>\n    #include <mfidl.h>\n    #include <mfreadwrite.h>\n    int main(int argc, char **argv) { return 0; }\n    \" HAVE_MFAPI_H\n  )\n```\n\n----------------------------------------\n\nTITLE: Emscripten Specific Test Configuration CMake\nDESCRIPTION: This snippet configures the test environment for Emscripten. It defines options to specify the browser, port, and chrome binary, and creates a custom target to serve the tests using a Python script.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(EMSCRIPTEN)\n    set(SDLTEST_BROWSER \"firefox\" CACHE STRING \"Browser in which to run SDL unit tests (chrome or firefox)\")\n    set(SDLTEST_PORT \"8080\" CACHE STRING \"Port on which to serve the tests\")\n    set(SDLTEST_CHROME_BINARY \"\" CACHE STRING \"Chrome/Chromium browser binary (optional)\")\n    if(TARGET Python3::Interpreter)\n        add_custom_target(serve-sdl-tests\n                COMMAND Python3::Interpreter \"${CMAKE_CURRENT_SOURCE_DIR}/emscripten/server.py\"\n                \"${SDLTEST_PORT}\"\n                -d \"${CMAKE_CURRENT_BINARY_DIR}\"\n                --map \"${SDL3_SOURCE_DIR}:/SDL\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Dexing with D8 Tool in CMake\nDESCRIPTION: This snippet utilizes the D8 dexer to convert Java bytecode into Dalvik bytecode (DEX format) required for Android applications.  It defines a custom command that uses the SdlAndroid::d8 tool, along with input JAR files and output directory. It depends on the output of jar target and SDL3 jar file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\nCOMMAND SdlAndroid::d8\n    $<TARGET_PROPERTY:${TEST}-jar,OUTPUT>\n    $<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>\n    --lib \"${SDL_ANDROID_PLATFORM_ANDROID_JAR}\"\n    --output \"${dexworkdir}\"\nDEPENDS $<TARGET_PROPERTY:${TEST}-jar,OUTPUT> $<TARGET_PROPERTY:SDL3::Jar,JAR_FILE>\n```\n\n----------------------------------------\n\nTITLE: Running the Executable\nDESCRIPTION: These commands navigate to the build directory and execute the compiled SDL3 program.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-mingw.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd build\n./hello\n```\n\n----------------------------------------\n\nTITLE: Include Android CPU Features\nDESCRIPTION: If building for Android, this adds the CPU features include directory to the include directories.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_236\n\nLANGUAGE: cmake\nCODE:\n```\nif(ANDROID)\n  sdl_include_directories(PRIVATE SYSTEM \"${CMAKE_ANDROID_NDK}/sources/android/cpufeatures\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling SIMD Features in SDL\nDESCRIPTION: These CMake snippets disable various SIMD features (MMX, SSE, SSE2, SSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, LSX, LASX, ARMNEON) in SDL by setting corresponding variables. These variables are set if the corresponding `HAVE_*` variable is not defined or is false.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_110\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT HAVE_MMX)\n  set(SDL_DISABLE_MMX 1)\nendif()\n\nif(NOT HAVE_SSE)\n  set(SDL_DISABLE_SSE 1)\nendif()\n\nif(NOT HAVE_SSE2)\n  set(SDL_DISABLE_SSE2 1)\nendif()\n\nif(NOT HAVE_SSE3)\n  set(SDL_DISABLE_SSE3 1)\nendif()\n\nif(NOT HAVE_SSE4_1)\n  set(SDL_DISABLE_SSE4_1 1)\nendif()\n\nif(NOT HAVE_SSE4_2)\n  set(SDL_DISABLE_SSE4_2 1)\nendif()\n\nif(NOT HAVE_AVX)\n  set(SDL_DISABLE_AVX 1)\nendif()\n\nif(NOT HAVE_AVX2)\n  set(SDL_DISABLE_AVX2 1)\nendif()\n\nif(NOT HAVE_AVX512F)\n  set(SDL_DISABLE_AVX512F 1)\nendif()\n\nif(NOT HAVE_LSX)\n  set(SDL_DISABLE_LSX 1)\nendif()\n\nif(NOT HAVE_LASX)\n  set(SDL_DISABLE_LASX 1)\nendif()\n\nif(NOT HAVE_ARMNEON)\n  set(SDL_DISABLE_NEON 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding idVendor Value\nDESCRIPTION: This command uses udevadm to query device information and then grep to filter the output and find the idVendor value for the input device, used to create the udev rule.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-linux.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo udevadm info -a --name=input/eventXX | grep idVendor\n```\n\n----------------------------------------\n\nTITLE: Checking for Preseed Availability\nDESCRIPTION: Checks if `SDL_Preseed_CMakeCache` command is available. If yes, sets `SDL_PRESEED_AVAILABLE` to ON.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_PRESEED_AVAILABLE OFF)\nif(COMMAND SDL_Preseed_CMakeCache)\n  set(SDL_PRESEED_AVAILABLE ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Install Prefix\nDESCRIPTION: This snippet shows how to set the installation prefix using the CMAKE_INSTALL_PREFIX variable. This allows you to specify a different location for the installation, such as /usr, instead of the default /usr/local.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.cmake.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# install command now would install things into /usr\ncmake <HIDAPI source dir> -DCMAKE_INSTALL_PREFIX=/usr\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory\nDESCRIPTION: This conditional statement checks if `HIDAPI_WITH_TESTS` is enabled. If it is, it adds the `test` subdirectory, which presumably contains test code for the library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(HIDAPI_WITH_TESTS)\n     add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum version and appending HIDAPI public headers\nDESCRIPTION: This snippet sets the minimum required CMake version and appends header files to the list of public headers for the hidapi library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/libusb/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6.3...3.25 FATAL_ERROR)\n\nlist(APPEND HIDAPI_PUBLIC_HEADERS \"hidapi_libusb.h\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to the Executable\nDESCRIPTION: Links the `hidapi_include` and `hidapi_winapi` libraries to the `hid_report_reconstructor_test` executable as private dependencies. This ensures that the executable has access to the necessary HIDAPI functions and Windows API bindings.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(hid_report_reconstructor_test\n     PRIVATE hidapi_include hidapi_winapi\n)\n```\n\n----------------------------------------\n\nTITLE: Configure pkg-config File\nDESCRIPTION: Configures the pkg-config file for the hidapi-hidraw library. This allows other projects to easily find and use the library using pkg-config.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nhidapi_configure_pc(\"${PROJECT_ROOT}/pc/hidapi-hidraw.pc.in\")\n```\n\n----------------------------------------\n\nTITLE: Setting HIDAPI libusb availability\nDESCRIPTION: Sets whether HIDAPI libusb is available. It's unavailable on iOS, tvOS, visionOS, watchOS, and Android.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(IOS OR TVOS OR VISIONOS OR WATCHOS OR ANDROID)\n  set(SDL_HIDAPI_LIBUSB_AVAILABLE FALSE)\nelse()\n  set(SDL_HIDAPI_LIBUSB_AVAILABLE TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linux HIDRAW and LIBUSB Options\nDESCRIPTION: Conditionally adds `HIDAPI_WITH_HIDRAW` and `HIDAPI_WITH_LIBUSB` options on Linux. These options enable building HIDAPI with HIDRAW or LIBUSB support, respectively.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(NOT WIN32)\n    if(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n        option(HIDAPI_WITH_HIDRAW \"Build HIDRAW-based implementation of HIDAPI\" ON)\n        option(HIDAPI_WITH_LIBUSB \"Build LIBUSB-based implementation of HIDAPI\" ON)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Append HIDAPI public headers\nDESCRIPTION: This line appends the `hidapi_darwin.h` header file to the `HIDAPI_PUBLIC_HEADERS` list. This list will be used to include the public headers required for the hidapi library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND HIDAPI_PUBLIC_HEADERS \"hidapi_darwin.h\")\n```\n\n----------------------------------------\n\nTITLE: Setting GNU Source Definition and Appending Includes/Link Options\nDESCRIPTION: Appends `-D_GNU_SOURCE=1` to the required flags and adds the contents of `SDL_CHECK_REQUIRED_INCLUDES` and `SDL_CHECK_REQUIRED_LINK_OPTIONS` to the respective lists for CMAKE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nstring(APPEND CMAKE_REQUIRED_FLAGS \" -D_GNU_SOURCE=1\")\nlist(APPEND CMAKE_REQUIRED_INCLUDES ${SDL_CHECK_REQUIRED_INCLUDES})\nlist(APPEND CMAKE_REQUIRED_LINK_OPTIONS ${SDL_CHECK_REQUIRED_LINK_OPTIONS})\n```\n\n----------------------------------------\n\nTITLE: Setting Vita Resolution Hint\nDESCRIPTION: This code snippet demonstrates how to set the Vita resolution hint for SDL. It uses the SDL_SetHint function with the SDL_HINT_VITA_RESOLUTION hint key. Valid values are \"720\" and \"1080\".\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-vita.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetHint(SDL_HINT_VITA_RESOLUTION, \"720\");\n```\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetHint(SDL_HINT_VITA_RESOLUTION, \"1080\");\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project.  This ensures that the CMake version used to build the project supports the features and commands used in the script.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/cmake/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\n```\n\n----------------------------------------\n\nTITLE: Cloning SDL Source\nDESCRIPTION: Clones the SDL source code from GitHub into the `vendored/SDL` directory. This allows SDL to be included as a subproject in the CMake project.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-cmake.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/libsdl-org/SDL.git vendored/SDL\n```\n\n----------------------------------------\n\nTITLE: Starting a Shell on Android Device with ADB\nDESCRIPTION: This command uses ADB to initiate an interactive shell session on the connected Android device. It grants developers direct command-line access to the device's file system and functionalities.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\n```\n\n----------------------------------------\n\nTITLE: hidtest Application Option\nDESCRIPTION: Adds the `HIDAPI_BUILD_HIDTEST` option for building a console test application called `hidtest`. If enabled, it adds the `hidtest` subdirectory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\noption(HIDAPI_BUILD_HIDTEST \"Build small console test application hidtest\" ${IS_DEBUG_BUILD})\nif(HIDAPI_BUILD_HIDTEST)\n    add_subdirectory(hidtest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Test Defaults and Environment Variables in CMake\nDESCRIPTION: This CMake code sets default values for SDL test audio and video drivers, and defines the TESTS_ENVIRONMENT variable. It sets the audio and video drivers to 'dummy' by default, but overrides them to 'emscripten' if the build is for Emscripten. It also sets the SDL_ASSERT environment variable to 'abort'.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDLTEST_TIMEOUT_MULTIPLIER \"1\" CACHE STRING \"SDL test time-out multiplier\")\n\nset(SDLTEST_AUDIO_DRIVER_DEFAULT \"dummy\")\nset(SDLTEST_VIDEO_DRIVER_DEFAULT \"dummy\")\nif(EMSCRIPTEN)\n    set(SDLTEST_AUDIO_DRIVER_DEFAULT \"emscripten\")\n    set(SDLTEST_VIDEO_DRIVER_DEFAULT \"emscripten\")\nendif()\nset(SDLTEST_AUDIO_DRIVER \"${SDLTEST_AUDIO_DRIVER_DEFAULT}\" CACHE STRING \"SDL audio driver for CTest\")\nset(SDLTEST_VIDEO_DRIVER \"${SDLTEST_VIDEO_DRIVER_DEFAULT}\" CACHE STRING \"SDL video driver for CTest\")\n\nset(TESTS_ENVIRONMENT\n    \"SDL_AUDIO_DRIVER=${SDLTEST_AUDIO_DRIVER}\"\n    \"SDL_VIDEO_DRIVER=${SDLTEST_VIDEO_DRIVER}\"\n    \"SDL_ASSERT=abort\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configure and Install SDL_revision.h\nDESCRIPTION: This snippet creates a directory for the generated revision header and configures the SDL_revision.h.cmake file, replacing variables with their values. The resulting header is then added to the list of include files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_225\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process(COMMAND \"${CMAKE_COMMAND}\" -E make_directory \"${SDL3_BINARY_DIR}/include-revision/SDL3\")\nconfigure_file(include/build_config/SDL_revision.h.cmake include-revision/SDL3/SDL_revision.h @ONLY)\nlist(APPEND SDL3_INCLUDE_FILES \"${SDL3_BINARY_DIR}/include-revision/SDL3/SDL_revision.h\")\n```\n\n----------------------------------------\n\nTITLE: Setting UNIX System Flag\nDESCRIPTION: Sets the `UNIX_SYS` flag to `ON` if the platform is a Unix-like system but not Android, Apple, or RISCOS. Otherwise, it's set to `OFF`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT ANDROID AND NOT APPLE AND NOT RISCOS)\n  set(UNIX_SYS ON)\nelse()\n  set(UNIX_SYS OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for DEX Conversion\nDESCRIPTION: This snippet defines a custom target `${TEST}-dex` which depends on the generation of the classes.dex file. It sets properties such as OUTPUT and OUTPUT_BASE_NAME for the target, associating them with the generated DEX file. It allows CMake to track and manage the DEX conversion as part of the build process.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(${TEST}-dex DEPENDS \"${classes_dex}\")\nset_property(TARGET ${TEST}-dex PROPERTY OUTPUT \"${classes_dex}\")\nset_property(TARGET ${TEST}-dex PROPERTY OUTPUT_BASE_NAME \"${classes_dex_base_name}\")\n```\n\n----------------------------------------\n\nTITLE: Checking for FreeBSD Keyboard I/O Support\nDESCRIPTION: This snippet checks for FreeBSD-specific keyboard input/output support using `sys/kbio.h` and `sys/ioctl.h`. It attempts to enable I/O using `KDENABIO`. The result is stored in `HAVE_INPUT_KBIO` and will influence compilation options.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_138\n\nLANGUAGE: C\nCODE:\n```\n#include <sys/kbio.h>\n#include <sys/ioctl.h>\nint main(int argc, char **argv) {\n    accentmap_t accTable;\n    ioctl(0, KDENABIO, 1);\n    return 0;\n}\n```\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"\n          #include <sys/kbio.h>\n          #include <sys/ioctl.h>\n          int main(int argc, char **argv) {\n              accentmap_t accTable;\n              ioctl(0, KDENABIO, 1);\n              return 0;\n          }\" HAVE_INPUT_KBIO)\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Interactive Properties\nDESCRIPTION: These snippets conditionally set the `SDL_NONINTERACTIVE` property for specific test targets based on whether `SDL_DUMMYAUDIO` or `SDL_DUMMYVIDEO` are enabled.  This marks the tests as non-interactive which affects how they are executed in the test suite.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_DUMMYAUDIO)\n    set_property(TARGET testaudioinfo PROPERTY SDL_NONINTERACTIVE 1)\nendif()\n\nif(SDL_DUMMYVIDEO)\n    set_property(TARGET testkeys PROPERTY SDL_NONINTERACTIVE 1)\n    set_property(TARGET testbounds PROPERTY SDL_NONINTERACTIVE 1)\n    set_property(TARGET testdisplayinfo PROPERTY SDL_NONINTERACTIVE 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Subdirectory\nDESCRIPTION: Adds the `src` subdirectory, which presumably contains the source code for the HIDAPI library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Checking SSE4.1 Support in C\nDESCRIPTION: This snippet checks for SSE4.1 support using the intrinsics from `<smmintrin.h>` (`_mm_lddqu_si128`, `_mm_mullo_epi32`, `_mm_storeu_si128`). It defines an `ints_mul` function that performs integer multiplication using SSE4.1. The presence of SSE4.1 is indicated by setting `HAVE_SSE4_1`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_97\n\nLANGUAGE: C\nCODE:\n```\n#include <smmintrin.h>\n      void ints_mul(int *dest, int *a, int *b, unsigned size) {\n        for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n          _mm_storeu_si128((__m128i*)dest, _mm_mullo_epi32(_mm_lddqu_si128((__m128i*)a), _mm_lddqu_si128((__m128i*)b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        ints_mul((int*)0, (int*)0, (int*)0, 0);\n        return 0;\n      }\n```\n\n----------------------------------------\n\nTITLE: MSVC Assembly Source CMake\nDESCRIPTION: This conditional block configures assembly source files for MSVC builds, specifically for x64, ARM64, and ARM32 architectures when building the shared library and when not using the SDL_LIBC option. It enables the necessary assembly language, sets the source file, sets compiler options, sets the language property of the source, and adds the assembly file to the target sources.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_86\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC AND TARGET SDL3-shared AND NOT SDL_LIBC)\n  if(SDL_CPU_X64)\n    enable_language(ASM_MASM)\n    set(asm_src \"${SDL3_SOURCE_DIR}/src/stdlib/SDL_mslibc_x64.masm\")\n    target_compile_options(SDL3-shared PRIVATE \"<$<COMPILE_LANGUAGE:ASM_MASM>:/nologo>\")\n    set_property(SOURCE \"${asm_src}\" PROPERTY LANGUAGE \"ASM_MASM\")\n    target_sources(SDL3-shared PRIVATE \"${asm_src}\")\n  elseif(SDL_CPU_ARM64)\n    enable_language(ASM_MARMASM)\n    set(asm_src \"${SDL3_SOURCE_DIR}/src/stdlib/SDL_mslibc_arm64.masm\")\n    target_compile_options(SDL3-shared PRIVATE \"<$<COMPILE_LANGUAGE:ASM_MARMASM>:/nologo>\")\n    set_property(SOURCE \"${asm_src}\" PROPERTY LANGUAGE \"ASM_MARMASM\")\n    target_sources(SDL3-shared PRIVATE \"${asm_src}\")\n  elseif(SDL_CPU_ARM32)\n    # FIXME\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing Option\nDESCRIPTION: Adds the `HIDAPI_WITH_TESTS` option. If it is enabled, `enable_testing()` is called, and by default the option is only ON for Debug builds on Windows.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    # so far only Windows has tests\n    option(HIDAPI_WITH_TESTS \"Build HIDAPI (unit-)tests\" ${IS_DEBUG_BUILD})\nelse()\n    set(HIDAPI_WITH_TESTS OFF)\nendif()\n\nif(HIDAPI_WITH_TESTS)\n    enable_testing()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Python Interpreter for SDL Tests\nDESCRIPTION: This snippet locates the Python 3 interpreter. If Python 3 is not found via `find_package`, it defaults to using \"python3\" as the executable name. This is needed for any tests or scripts that require Python.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Python3 COMPONENTS Interpreter)\nif(NOT PYTHON3_EXECUTABLE)\n    set(PYTHON3_EXECUTABLE \"python3\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: QNX/aarch64 CMake Configuration\nDESCRIPTION: Configures CMake for building SDL for QNX/aarch64, using a specific toolchain file and disabling X11 support.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_TOOLCHAIN_FILE=~/sdl/build-scripts/cmake-toolchain-qnx-aarch64le.cmake -DSDL_X11=0\n```\n\n----------------------------------------\n\nTITLE: O_CLOEXEC Check CMake\nDESCRIPTION: This snippet checks for `O_CLOEXEC` support on UNIX, Apple, Haiku, and RISC OS platforms.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_129\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX OR APPLE OR HAIKU OR RISCOS)\n  CheckO_CLOEXEC()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including SDL3_main for ROMFS access\nDESCRIPTION: This snippet showcases the required include for ensuring ROMFS is enabled when using SDL on the Nintendo 3DS. The `SDL3/SDL_main.h` header must be included in the source file containing the main function.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-n3ds.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <SDL3/SDL_main.h>\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: Sets the CMake policy CMP0074 to NEW, which controls how CMake handles target-level include directories. This ensures consistent behavior across different CMake versions.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/cmake/test/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0074 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Camera Driver Option (CMake)\nDESCRIPTION: This snippet configures an option to support the dummy camera driver. It depends on SDL_CAMERA being enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_63\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_DUMMYCAMERA         \"Support the dummy camera driver\" ON SDL_CAMERA OFF)\n```\n\n----------------------------------------\n\nTITLE: Appending HIDAPI Public Headers\nDESCRIPTION: This command appends the `hidapi_winapi.h` header file to the `HIDAPI_PUBLIC_HEADERS` list. This list likely contains header files to be included when building the library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND HIDAPI_PUBLIC_HEADERS \"hidapi_winapi.h\")\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake for SDL Tests\nDESCRIPTION: This snippet initializes the CMake environment for building SDL tests. It sets the minimum required CMake version, defines the SDL3 source directory, appends the CMake module path, and includes necessary modules for checking include files and struct members.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n\nset(SDL3_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/..\")\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/../cmake\")\n\ninclude(CheckIncludeFile)\ninclude(CheckStructHasMember)\ninclude(CMakePushCheckState)\ninclude(sdlcompilers)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Initialization\nDESCRIPTION: Initializes the CMake project with a minimum required version and sets the project name to 'hidtest' with the language set to C.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/hidtest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.1.3...3.25 FATAL_ERROR)\nproject(hidtest C)\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Locale Sources\nDESCRIPTION: This CMake snippet sets the dummy locale source files if `HAVE_SDL_LOCALE` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_214\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_LOCALE)\n  set(SDL_LOCALE_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Default Options CMake\nDESCRIPTION: This snippet sets default values for several build options, including `HIDAPI_WITH_TESTS`, `BUILD_SHARED_LIBS`, `HIDAPI_INSTALL_TARGETS`, and `CMAKE_POSITION_INDEPENDENT_CODE`. If these options are not already defined, they are set to the specified default values.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED HIDAPI_WITH_TESTS)\n    set(HIDAPI_WITH_TESTS OFF)\nendif()\nif(NOT DEFINED BUILD_SHARED_LIBS)\n    set(BUILD_SHARED_LIBS ON)\nendif()\nif(NOT DEFINED HIDAPI_INSTALL_TARGETS)\n    set(HIDAPI_INSTALL_TARGETS OFF)\nendif()\nif(NOT DEFINED CMAKE_POSITION_INDEPENDENT_CODE)\n    set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Update Version Number (Bugfix Release) - Shell\nDESCRIPTION: This script updates the version number for a bugfix release. It increments the patch version (Z) by one. Y refers to the even minor version, resulting in a change from 3.Y.Z to 3.Y.(Z+1).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/release_checklist.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./build-scripts/update-version.sh 3 Y Z+1\n```\n\n----------------------------------------\n\nTITLE: Android/iOS/tvOS OpenGL ES Linking\nDESCRIPTION: This conditional code block links the testgles executable with the appropriate OpenGL ES library based on the target platform. On Android, it links against GLESv1_CM. On iOS and tvOS, it uses find_library to locate the OpenGLES library and then links against it.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(ANDROID)\n    target_link_libraries(testgles PRIVATE GLESv1_CM)\nelif(IOS OR TVOS)\n    find_library(GLES_LIB OpenGLES REQUIRED)\n    target_link_libraries(testgles PRIVATE \"${GLES_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Emscripten Shader Test Linking\nDESCRIPTION: This code snippet conditionally links the testshader executable with a specific Emscripten flag, `-sLEGACY_GL_EMULATION`, when the target platform is Emscripten. This flag ensures compatibility with older OpenGL ES implementations.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(EMSCRIPTEN)\n    target_link_options(testshader PRIVATE \"-sLEGACY_GL_EMULATION\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set target properties for hidapi_darwin\nDESCRIPTION: This command sets various properties for the `hidapi_darwin` target, including the export name, output name, version, compatibility version, framework version, and public headers. These properties are used to configure the library's build and installation process.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(hidapi_darwin\n    PROPERTIES\n        EXPORT_NAME \"darwin\"\n        OUTPUT_NAME \"hidapi\"\n        VERSION ${PROJECT_VERSION}\n        SOVERSION ${PROJECT_VERSION_MAJOR}\n        MACHO_COMPATIBILITY_VERSION ${PROJECT_VERSION_MAJOR}\n        FRAMEWORK_VERSION ${PROJECT_VERSION_MAJOR}\n        PUBLIC_HEADER \"${HIDAPI_PUBLIC_HEADERS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Xcode Project files\nDESCRIPTION: This bash snippet shows how to extract the Xcode project files to the correct directory using tar from the command line.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-macos.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd [path_to_SDL_source]\ntar zxf Xcode.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Set public header destination\nDESCRIPTION: This code block sets the installation destination for public headers. If `CMAKE_FRAMEWORK` is not defined, it appends `/hidapi` to the destination.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(PUBLIC_HEADER_DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\nif(NOT CMAKE_FRAMEWORK)\n    set(PUBLIC_HEADER_DESTINATION \"${PUBLIC_HEADER_DESTINATION}/hidapi\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Android Project with AAR Archives (Python)\nDESCRIPTION: This Python command line instruction shows how to generate a new Android project utilizing Android Archive (AAR) files.  The script `create-android-project.py` is called with arguments for the variant, package name, and a list of source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbuild-scripts/create-android-project.py --variant aar com.yourcompany.yourapp < sources.list\n```\n\n----------------------------------------\n\nTITLE: CMake Minimum Version Requirement\nDESCRIPTION: Specifies the minimum required CMake version for the project.  CMake will generate an error and stop processing if the version is older than 3.1.3 but newer than 3.25.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.1.3...3.25 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Configuring Autotools for SDL3\nDESCRIPTION: This Autotools snippet shows how to include SDL3 support in an Autotools project. It uses `PKG_CHECK_MODULES` to check for the SDL3 module and sets the necessary CFLAGS and LDFLAGS.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_5\n\nLANGUAGE: M4\nCODE:\n```\nPKG_CHECK_MODULES([SDL3], [sdl3])\n```\n\n----------------------------------------\n\nTITLE: Linux Target Configuration (hidraw, libusb)\nDESCRIPTION: On Linux systems, this section adds executable targets for both hidraw and libusb if the respective hidapi targets are available. It links the executables against the hidapi libraries. The `hidtest_libusb` target includes a compile definition USING_HIDAPI_LIBUSB.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/hidtest/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WIN32 AND NOT APPLE AND CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    if(TARGET hidapi::hidraw)\n        add_executable(hidtest_hidraw test.c)\n        target_link_libraries(hidtest_hidraw hidapi::hidraw)\n        list(APPEND HIDAPI_HIDTEST_TARGETS hidtest_hidraw)\n    endif()\n    if(TARGET hidapi::libusb)\n        add_executable(hidtest_libusb test.c)\n        target_compile_definitions(hidtest_libusb PRIVATE USING_HIDAPI_LIBUSB)\n        target_link_libraries(hidtest_libusb hidapi::libusb)\n        list(APPEND HIDAPI_HIDTEST_TARGETS hidtest_libusb)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: sdltests_utils Object Library CMake\nDESCRIPTION: This snippet defines an object library named sdltests_utils, which contains common test utilities. It links against the SDL3::Headers target.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(sdltests_utils OBJECT\n    testutils.c\n)\ntarget_link_libraries(sdltests_utils PRIVATE SDL3::Headers)\n```\n\n----------------------------------------\n\nTITLE: Install hidapi_hidraw Target\nDESCRIPTION: Installs the hidapi_hidraw library and its public headers. The LIBRARY and ARCHIVE destinations are set to CMAKE_INSTALL_LIBDIR, and the PUBLIC_HEADER destination is set to CMAKE_INSTALL_INCLUDEDIR/hidapi. The install command is only executed if HIDAPI_INSTALL_TARGETS is true.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(HIDAPI_INSTALL_TARGETS)\n    install(TARGETS hidapi_hidraw EXPORT hidapi\n        LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        PUBLIC_HEADER DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/hidapi\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+002F (e0 80 af)\nDESCRIPTION: Tests overlong representation of the ASCII character slash (/) using the sequence e0 80 af. This sequence should be rejected by a safe decoder.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Create Android Project Shell Command\nDESCRIPTION: This shell command executes a Python script to create a template SDL project for Android. It takes the package name and a C source file as arguments.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-androidstudio.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./build-scripts/create-android-project.py org.libsdl.hello docs/hello.c\n```\n\n----------------------------------------\n\nTITLE: Checking for Clang flag on MSVC\nDESCRIPTION: This CMake snippet checks for the availability of the `/Q_no-use-libirc` compiler flag when using Clang on MSVC.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_122\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC AND USE_CLANG)\n    check_c_compiler_flag(\"/Q_no-use-libirc\" HAS_Q_NO_USE_LIBIRC)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Bundle Properties for Apple Targets in CMake\nDESCRIPTION: This CMake snippet sets bundle properties for Apple targets. It iterates over each SDL test executable and defines properties such as GUI identifier, bundle version, and short version string based on the SDL3 version.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  foreach(CURRENT_TARGET ${SDL_TEST_EXECUTABLES})\n    set_target_properties(\"${CURRENT_TARGET}\" PROPERTIES\n      MACOSX_BUNDLE_GUI_IDENTIFIER \"org.libsdl.${CURRENT_TARGET}\"\n      MACOSX_BUNDLE_BUNDLE_VERSION \"${SDL3_VERSION}\"\n      MACOSX_BUNDLE_SHORT_VERSION_STRING \"${SDL3_VERSION}\"\n    )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking against usb-1.0\nDESCRIPTION: This snippet conditionally links the hidapi_libusb library against either the usb-1.0 target or the PkgConfig::libusb target, based on whether the usb-1.0 target is defined.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/libusb/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET usb-1.0)\n    target_link_libraries(hidapi_libusb PRIVATE usb-1.0)\nelse()\n    include(FindPkgConfig)\n    pkg_check_modules(libusb REQUIRED IMPORTED_TARGET libusb-1.0>=1.0.9)\n    target_link_libraries(hidapi_libusb PRIVATE PkgConfig::libusb)\nendif()\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Impossible Bytes Test - ff\nDESCRIPTION: This test case checks for handling of the impossible byte 'ff' in a UTF-8 string. This should also be flagged as a malformed sequence.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Joystick Sources\nDESCRIPTION: This CMake snippet sets the dummy joystick driver source files if `HAVE_SDL_JOYSTICK` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_207\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_JOYSTICK)\n  set(SDL_JOYSTICK_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Pushing Files to SD Card with ADB\nDESCRIPTION: This command pushes a specified file to the SD card directory of a connected Android device using the Android Debug Bridge (ADB). The command facilitates the transfer of assets such as data files to the device's external storage.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nadb push moose.dat /sdcard/moose.dat\n```\n\n----------------------------------------\n\nTITLE: Defining Struct Typedefs with Name on First Line in C\nDESCRIPTION: This example illustrates the correct way to define struct typedefs for wikiheaders parsing. The struct name must appear on the first line of the typedef to be correctly parsed by the script.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-documentation-rules.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MyStruct\n{\n    int a;\n    int b;\n} SDL_MyStruct;\n```\n\n----------------------------------------\n\nTITLE: Update Version Number (Feature Release) - Shell\nDESCRIPTION: This script updates the version number for a new feature release. It takes three arguments: the major version, a placeholder for the even minor version, and 0 for the patch version. It's used to increment the version from 3.X.0 to 3.(X+2).0.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/release_checklist.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-scripts/update-version.sh 3 EVEN 0\n```\n\n----------------------------------------\n\nTITLE: Enabling Resource Compilation (CMake)\nDESCRIPTION: Enables the RC language for compiling resource files and sets link options for MinGW or CYGWIN environments.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_171\n\nLANGUAGE: CMake\nCODE:\n```\nenable_language(RC)\nsdl_glob_sources(SHARED \"${SDL3_SOURCE_DIR}/src/core/windows/*.rc\")\nif(MINGW OR CYGWIN)\n  sdl_pc_link_options(\"-mwindows\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Default XUserHandle Pointer C++\nDESCRIPTION: Provides a method to get the default XUserHandle pointer for single-player games on GDK.  This function should be treated as a synchronous alternative to async APIs. The function returns on any OS errors, requiring return value validation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-gdk.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nSDL_GetGDKDefaultUser()\n```\n\n----------------------------------------\n\nTITLE: Building HIDAPI using manual Makefile on Linux\nDESCRIPTION: This shell command navigates to the linux/ directory and executes the manual Makefile to build HIDAPI. This command demonstrates building HIDAPI using the manual makefiles, which serve as examples of what dependencies are needed for each backend.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd linux/\nmake -f Makefile-manual\n```\n\n----------------------------------------\n\nTITLE: Create alias for hidapi library\nDESCRIPTION: This command creates an alias `hidapi` for the `hidapi_darwin` library. This allows users to link against the library using the simple name `hidapi` for raw library linking.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(hidapi ALIAS hidapi_darwin)\n```\n\n----------------------------------------\n\nTITLE: Switching Xbox Live Sandbox PowerShell\nDESCRIPTION: Demonstrates how to switch the Xbox Live sandbox using the `XblPCSandbox` command in the \"Desktop VS 2022 Gaming Command Prompt\".  `SANDBOX.#` represents the target sandbox, and `RETAIL` switches back to the retail sandbox.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-gdk.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nXblPCSandbox SANDBOX.#\nXblPCSandbox RETAIL\n```\n\n----------------------------------------\n\nTITLE: Adding HIDAPI Subdirectory with CMake\nDESCRIPTION: This snippet adds the specified subdirectory 'hidapi_root' to the build process.  It references the previously created build directory as its source.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/subprojects/hidapi_build_cmake/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"${CMAKE_CURRENT_BINARY_DIR}/root\" hidapi_root)\n```\n\n----------------------------------------\n\nTITLE: Setting Wiki Categories (C)\nDESCRIPTION: This C code snippet demonstrates how to explicitly set a wiki category for symbols using a specially formatted comment. All symbols defined after this comment in the header file will be assigned to the specified category. This method overrides the default categorization based on the header file name.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-documentation-rules.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* WIKI CATEGORY: Blah */\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Git Tag\nDESCRIPTION: This command creates an annotated git tag with release notes attached.  The -a option creates an annotated tag, -F specifies a file containing the tag message. <VERSION> should be replaced with the actual version number.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/HACKING.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -aF ../hidapi_release_notes hidapi-<VERSION>\n```\n\n----------------------------------------\n\nTITLE: Setting Default X11 Xrandr Option\nDESCRIPTION: Sets the default option for using X11 Xrandr. It is ON by default, but OFF on SOLARIS.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_X11_XRANDR_DEFAULT ON)\nif(SOLARIS)\n  set(SDL_X11_XRANDR_DEFAULT OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disable Optimization in NDK Build (Application.mk)\nDESCRIPTION: This entry within the `Application.mk` file instructs the NDK build system to disable optimization during the build process. This is useful for debugging purposes, as it makes it easier to step through the code and examine variables.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\nAPP_OPTIM := debug\n```\n\n----------------------------------------\n\nTITLE: Check Linker for Version File Support CMake\nDESCRIPTION: This code checks if the linker supports version scripts and then configures the linker options based on the outcome. If version scripts are supported, it uses one to define the dynamic API. If not, it throws an error on Linux/glibc and Android systems because a version script is required.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_82\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_linker_supports_version_file(HAVE_WL_VERSION_SCRIPT)\nif(HAVE_WL_VERSION_SCRIPT)\n  sdl_shared_link_options(\"-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/src/dynapi/SDL_dynapi.sym\")\nelse()\n  if((LINUX AND LIBC_IS_GLIBC) OR ANDROID)\n    message(FATAL_ERROR \"Linker does not support '-Wl,--version-script=xxx.sym'. This is required on the current host platform (${SDL_CMAKE_PLATFORM}).\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Start Single Test (CMake)\nDESCRIPTION: This CMake command starts a single test, `testsprite`, on the connected Android device. The device must have the APK installed already.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target start-testsprite\n```\n\n----------------------------------------\n\nTITLE: Setting Generic Storage Sources\nDESCRIPTION: This CMake snippet sets the generic storage source files if `HAVE_SDL_STORAGE` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_212\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_STORAGE)\n  set(SDL_STORAGE_GENERIC 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/generic/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Capital Letters in C\nDESCRIPTION: This snippet demonstrates the structure of data used to map Unicode code points to their respective capital letters and names. Each line defines a character mapping, including its Unicode value, a script identifier ('C'), a target Unicode value, and the character's name or description. This type of mapping is crucial for character encoding and representation in various applications.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/build-scripts/casefolding.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n10405; C; 1042D; # DESERET CAPITAL LETTER LONG OO\n10406; C; 1042E; # DESERET CAPITAL LETTER SHORT I\n10407; C; 1042F; # DESERET CAPITAL LETTER SHORT E\n10408; C; 10430; # DESERET CAPITAL LETTER SHORT A\n10409; C; 10431; # DESERET CAPITAL LETTER SHORT AH\n1040A; C; 10432; # DESERET CAPITAL LETTER SHORT O\n1040B; C; 10433; # DESERET CAPITAL LETTER SHORT OO\n1040C; C; 10434; # DESERET CAPITAL LETTER AY\n1040D; C; 10435; # DESERET CAPITAL LETTER OW\n1040E; C; 10436; # DESERET CAPITAL LETTER WU\n1040F; C; 10437; # DESERET CAPITAL LETTER YEE\n10410; C; 10438; # DESERET CAPITAL LETTER H\n10411; C; 10439; # DESERET CAPITAL LETTER PEE\n10412; C; 1043A; # DESERET CAPITAL LETTER BEE\n10413; C; 1043B; # DESERET CAPITAL LETTER TEE\n10414; C; 1043C; # DESERET CAPITAL LETTER DEE\n10415; C; 1043D; # DESERET CAPITAL LETTER CHEE\n10416; C; 1043E; # DESERET CAPITAL LETTER JEE\n10417; C; 1043F; # DESERET CAPITAL LETTER KAY\n10418; C; 10440; # DESERET CAPITAL LETTER GAY\n10419; C; 10441; # DESERET CAPITAL LETTER EF\n1041A; C; 10442; # DESERET CAPITAL LETTER VEE\n1041B; C; 10443; # DESERET CAPITAL LETTER ETH\n1041C; C; 10444; # DESERET CAPITAL LETTER THEE\n1041D; C; 10445; # DESERET CAPITAL LETTER ES\n1041E; C; 10446; # DESERET CAPITAL LETTER ZEE\n1041F; C; 10447; # DESERET CAPITAL LETTER ESH\n10420; C; 10448; # DESERET CAPITAL LETTER ZHEE\n10421; C; 10449; # DESERET CAPITAL LETTER ER\n10422; C; 1044A; # DESERET CAPITAL LETTER EL\n10423; C; 1044B; # DESERET CAPITAL LETTER EM\n10424; C; 1044C; # DESERET CAPITAL LETTER EN\n10425; C; 1044D; # DESERET CAPITAL LETTER ENG\n10426; C; 1044E; # DESERET CAPITAL LETTER OI\n10427; C; 1044F; # DESERET CAPITAL LETTER EW\n104B0; C; 104D8; # OSAGE CAPITAL LETTER A\n104B1; C; 104D9; # OSAGE CAPITAL LETTER AI\n104B2; C; 104DA; # OSAGE CAPITAL LETTER AIN\n104B3; C; 104DB; # OSAGE CAPITAL LETTER AH\n104B4; C; 104DC; # OSAGE CAPITAL LETTER BRA\n104B5; C; 104DD; # OSAGE CAPITAL LETTER CHA\n104B6; C; 104DE; # OSAGE CAPITAL LETTER EHCHA\n104B7; C; 104DF; # OSAGE CAPITAL LETTER E\n104B8; C; 104E0; # OSAGE CAPITAL LETTER EIN\n104B9; C; 104E1; # OSAGE CAPITAL LETTER HA\n104BA; C; 104E2; # OSAGE CAPITAL LETTER HYA\n104BB; C; 104E3; # OSAGE CAPITAL LETTER I\n104BC; C; 104E4; # OSAGE CAPITAL LETTER KA\n104BD; C; 104E5; # OSAGE CAPITAL LETTER EHKA\n104BE; C; 104E6; # OSAGE CAPITAL LETTER KYA\n104BF; C; 104E7; # OSAGE CAPITAL LETTER LA\n104C0; C; 104E8; # OSAGE CAPITAL LETTER MA\n104C1; C; 104E9; # OSAGE CAPITAL LETTER NA\n104C2; C; 104EA; # OSAGE CAPITAL LETTER O\n104C3; C; 104EB; # OSAGE CAPITAL LETTER OIN\n104C4; C; 104EC; # OSAGE CAPITAL LETTER PA\n104C5; C; 104ED; # OSAGE CAPITAL LETTER EHPA\n104C6; C; 104EE; # OSAGE CAPITAL LETTER SA\n104C7; C; 104EF; # OSAGE CAPITAL LETTER SHA\n104C8; C; 104F0; # OSAGE CAPITAL LETTER TA\n104C9; C; 104F1; # OSAGE CAPITAL LETTER EHTA\n104CA; C; 104F2; # OSAGE CAPITAL LETTER TSA\n104CB; C; 104F3; # OSAGE CAPITAL LETTER EHTSA\n104CC; C; 104F4; # OSAGE CAPITAL LETTER TSHA\n104CD; C; 104F5; # OSAGE CAPITAL LETTER DHA\n104CE; C; 104F6; # OSAGE CAPITAL LETTER U\n104CF; C; 104F7; # OSAGE CAPITAL LETTER WA\n104D0; C; 104F8; # OSAGE CAPITAL LETTER KHA\n104D1; C; 104F9; # OSAGE CAPITAL LETTER GHA\n104D2; C; 104FA; # OSAGE CAPITAL LETTER ZA\n104D3; C; 104FB; # OSAGE CAPITAL LETTER ZHA\n10570; C; 10597; # VITHKUQI CAPITAL LETTER A\n10571; C; 10598; # VITHKUQI CAPITAL LETTER BBE\n10572; C; 10599; # VITHKUQI CAPITAL LETTER BE\n10573; C; 1059A; # VITHKUQI CAPITAL LETTER CE\n10574; C; 1059B; # VITHKUQI CAPITAL LETTER CHE\n10575; C; 1059C; # VITHKUQI CAPITAL LETTER DE\n10576; C; 1059D; # VITHKUQI CAPITAL LETTER DHE\n10577; C; 1059E; # VITHKUQI CAPITAL LETTER EI\n10578; C; 1059F; # VITHKUQI CAPITAL LETTER E\n10579; C; 105A0; # VITHKUQI CAPITAL LETTER FE\n1057A; C; 105A1; # VITHKUQI CAPITAL LETTER GA\n1057C; C; 105A3; # VITHKUQI CAPITAL LETTER HA\n1057D; C; 105A4; # VITHKUQI CAPITAL LETTER HHA\n1057E; C; 105A5; # VITHKUQI CAPITAL LETTER I\n1057F; C; 105A6; # VITHKUQI CAPITAL LETTER IJE\n10580; C; 105A7; # VITHKUQI CAPITAL LETTER JE\n10581; C; 105A8; # VITHKUQI CAPITAL LETTER KA\n10582; C; 105A9; # VITHKUQI CAPITAL LETTER LA\n10583; C; 105AA; # VITHKUQI CAPITAL LETTER LLA\n10584; C; 105AB; # VITHKUQI CAPITAL LETTER ME\n10585; C; 105AC; # VITHKUQI CAPITAL LETTER NE\n10586; C; 105AD; # VITHKUQI CAPITAL LETTER NJE\n10587; C; 105AE; # VITHKUQI CAPITAL LETTER O\n10588; C; 105AF; # VITHKUQI CAPITAL LETTER PE\n10589; C; 105B0; # VITHKUQI CAPITAL LETTER QA\n1058A; C; 105B1; # VITHKUQI CAPITAL LETTER RE\n1058C; C; 105B3; # VITHKUQI CAPITAL LETTER SE\n1058D; C; 105B4; # VITHKUQI CAPITAL LETTER SHE\n1058E; C; 105B5; # VITHKUQI CAPITAL LETTER TE\n1058F; C; 105B6; # VITHKUQI CAPITAL LETTER THE\n10590; C; 105B7; # VITHKUQI CAPITAL LETTER U\n10591; C; 105B8; # VITHKUQI CAPITAL LETTER VE\n10592; C; 105B9; # VITHKUQI CAPITAL LETTER XE\n10594; C; 105BB; # VITHKUQI CAPITAL LETTER Y\n10595; C; 105BC; # VITHKUQI CAPITAL LETTER ZE\n10C80; C; 10CC0; # OLD HUNGARIAN CAPITAL LETTER A\n10C81; C; 10CC1; # OLD HUNGARIAN CAPITAL LETTER AA\n10C82; C; 10CC2; # OLD HUNGARIAN CAPITAL LETTER EB\n10C83; C; 10CC3; # OLD HUNGARIAN CAPITAL LETTER AMB\n10C84; C; 10CC4; # OLD HUNGARIAN CAPITAL LETTER EC\n10C85; C; 10CC5; # OLD HUNGARIAN CAPITAL LETTER ENC\n10C86; C; 10CC6; # OLD HUNGARIAN CAPITAL LETTER ECS\n10C87; C; 10CC7; # OLD HUNGARIAN CAPITAL LETTER ED\n10C88; C; 10CC8; # OLD HUNGARIAN CAPITAL LETTER AND\n10C89; C; 10CC9; # OLD HUNGARIAN CAPITAL LETTER E\n10C8A; C; 10CCA; # OLD HUNGARIAN CAPITAL LETTER CLOSE E\n10C8B; C; 10CCB; # OLD HUNGARIAN CAPITAL LETTER EE\n10C8C; C; 10CCC; # OLD HUNGARIAN CAPITAL LETTER EF\n10C8D; C; 10CCD; # OLD HUNGARIAN CAPITAL LETTER EG\n10C8E; C; 10CCE; # OLD HUNGARIAN CAPITAL LETTER EGY\n10C8F; C; 10CCF; # OLD HUNGARIAN CAPITAL LETTER EH\n10C90; C; 10CD0; # OLD HUNGARIAN CAPITAL LETTER I\n10C91; C; 10CD1; # OLD HUNGARIAN CAPITAL LETTER II\n10C92; C; 10CD2; # OLD HUNGARIAN CAPITAL LETTER EJ\n10C93; C; 10CD3; # OLD HUNGARIAN CAPITAL LETTER EK\n10C94; C; 10CD4; # OLD HUNGARIAN CAPITAL LETTER AK\n10C95; C; 10CD5; # OLD HUNGARIAN CAPITAL LETTER UNK\n10C96; C; 10CD6; # OLD HUNGARIAN CAPITAL LETTER EL\n10C97; C; 10CD7; # OLD HUNGARIAN CAPITAL LETTER ELY\n10C98; C; 10CD8; # OLD HUNGARIAN CAPITAL LETTER EM\n10C99; C; 10CD9; # OLD HUNGARIAN CAPITAL LETTER EN\n10C9A; C; 10CDA; # OLD HUNGARIAN CAPITAL LETTER ENY\n10C9B; C; 10CDB; # OLD HUNGARIAN CAPITAL LETTER O\n10C9C; C; 10CDC; # OLD HUNGARIAN CAPITAL LETTER OO\n10C9D; C; 10CDD; # OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG OE\n10C9E; C; 10CDE; # OLD HUNGARIAN CAPITAL LETTER RUDIMENTA OE\n10C9F; C; 10CDF; # OLD HUNGARIAN CAPITAL LETTER OEE\n10CA0; C; 10CE0; # OLD HUNGARIAN CAPITAL LETTER EP\n10CA1; C; 10CE1; # OLD HUNGARIAN CAPITAL LETTER EMP\n10CA2; C; 10CE2; # OLD HUNGARIAN CAPITAL LETTER ER\n10CA3; C; 10CE3; # OLD HUNGARIAN CAPITAL LETTER SHORT ER\n10CA4; C; 10CE4; # OLD HUNGARIAN CAPITAL LETTER ES\n10CA5; C; 10CE5; # OLD HUNGARIAN CAPITAL LETTER ESZ\n10CA6; C; 10CE6; # OLD HUNGARIAN CAPITAL LETTER ET\n10CA7; C; 10CE7; # OLD HUNGARIAN CAPITAL LETTER ENT\n10CA8; C; 10CE8; # OLD HUNGARIAN CAPITAL LETTER ETY\n10CA9; C; 10CEA; # OLD HUNGARIAN CAPITAL LETTER ECH\n10CAA; C; 10CEB; # OLD HUNGARIAN CAPITAL LETTER U\n10CAB; C; 10CEB; # OLD HUNGARIAN CAPITAL LETTER UU\n10CAC; C; 10CEC; # OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE\n10CAD; C; 10CED; # OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE\n10CAE; C; 10CEE; # OLD HUNGARIAN CAPITAL LETTER EV\n10CAF; C; 10CEF; # OLD HUNGARIAN CAPITAL LETTER EZ\n10CB0; C; 10CF0; # OLD HUNGARIAN CAPITAL LETTER EZS\n10CB1; C; 10CF1; # OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN\n10CB2; C; 10CF2; # OLD HUNGARIAN CAPITAL LETTER US\n118A0; C; 118C0; # WARANG CITI CAPITAL LETTER NGAA\n118A1; C; 118C1; # WARANG CITI CAPITAL LETTER A\n118A2; C; 118C2; # WARANG CITI CAPITAL LETTER WI\n118A3; C; 118C3; # WARANG CITI CAPITAL LETTER YU\n118A4; C; 118C4; # WARANG CITI CAPITAL LETTER YA\n118A5; C; 118C5; # WARANG CITI CAPITAL LETTER YO\n118A6; C; 118C6; # WARANG CITI CAPITAL LETTER II\n118A7; C; 118C7; # WARANG CITI CAPITAL LETTER UU\n118A8; C; 118C8; # WARANG CITI CAPITAL LETTER E\n118A9; C; 118C9; # WARANG CITI CAPITAL LETTER O\n118AA; C; 118CA; # WARANG CITI CAPITAL LETTER ANG\n118AB; C; 118CC; # WARANG CITI CAPITAL LETTER GA\n118AC; C; 118CD; # WARANG CITI CAPITAL LETTER KO\n118AD; C; 118CD; # WARANG CITI CAPITAL LETTER ENY\n118AE; C; 118CE; # WARANG CITI CAPITAL LETTER YUJ\n118AF; C; 118CF; # WARANG CITI CAPITAL LETTER UC\n118B0; C; 118D0; # WARANG CITI CAPITAL LETTER ENN\n118B1; C; 118D1; # WARANG CITI CAPITAL LETTER ODD\n118B2; C; 118D2; # WARANG CITI CAPITAL LETTER TTE\n118B3; C; 118D3; # WARANG CITI CAPITAL LETTER NUNG\n118B4; C; 118D4; # WARANG CITI CAPITAL LETTER DA\n118B5; C; 118D5; # WARANG CITI CAPITAL LETTER AT\n118B6; C; 118D6; # WARANG CITI CAPITAL LETTER AM\n118B7; C; 118D7; # WARANG CITI CAPITAL LETTER BU\n118B8; C; 118D8; # WARANG CITI CAPITAL LETTER PU\n118B9; C; 118D9; # WARANG CITI CAPITAL LETTER HIYO\n118BA; C; 118DA; # WARANG CITI CAPITAL LETTER HOLO\n118BB; C; 118DB; # WARANG CITI CAPITAL LETTER HORR\n118BC; C; 118DC; # WARANG CITI CAPITAL LETTER HAR\n118BD; C; 118DD; # WARANG CITI CAPITAL LETTER SSUU\n118BE; C; 118DE; # WARANG CITI CAPITAL LETTER SII\n118BF; C; 118DF; # WARANG CITI CAPITAL LETTER VIYO\n16E40; C; 16E60; # MEDEFAIDRIN CAPITAL LETTER M\n16E41; C; 16E61; # MEDEFAIDRIN CAPITAL LETTER S\n16E42; C; 16E62; # MEDEFAIDRIN CAPITAL LETTER V\n16E43; C; 16E63; # MEDEFAIDRIN CAPITAL LETTER W\n16E44; C; 16E64; # MEDEFAIDRIN CAPITAL LETTER ATIU\n16E45; C; 16E65; # MEDEFAIDRIN CAPITAL LETTER Z\n16E46; C; 16E66; # MEDEFAIDRIN CAPITAL LETTER KP\n16E47; C; 16E67; # MEDEFAIDRIN CAPITAL LETTER P\n16E48; C; 16E68; # MEDEFAIDRIN CAPITAL LETTER T\n16E49; C; 16E69; # MEDEFAIDRIN CAPITAL LETTER G\n16E4A; C; 16E6A; # MEDEFAIDRIN CAPITAL LETTER F\n16E4B; C; 16E6B; # MEDEFAIDRIN CAPITAL LETTER I\n16E4C; C; 16E6C; # MEDEFAIDRIN CAPITAL LETTER K\n16E4D; C; 16E6D; # MEDEFAIDRIN CAPITAL LETTER A\n16E4E; C; 16E6E; # MEDEFAIDRIN CAPITAL LETTER J\n16E4F; C; 16E6F; # MEDEFAIDRIN CAPITAL LETTER E\n16E50; C; 16E70; # MEDEFAIDRIN CAPITAL LETTER B\n16E51; C; 16E71; # MEDEFAIDRIN CAPITAL LETTER C\n16E52; C; 16E72; # MEDEFAIDRIN CAPITAL LETTER U\n```\n\n----------------------------------------\n\nTITLE: Update Version Number (Development Prerelease) - Shell\nDESCRIPTION: This script updates the version number for a development prerelease. Similar to the bugfix release, it increments the patch version (Z) by one, but this time Y refers to the odd minor version. The command changes the version from 3.Y.Z to 3.Y.(Z+1).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/release_checklist.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-scripts/update-version.sh 3 Y Z+1\n```\n\n----------------------------------------\n\nTITLE: Building SDL examples with CMake\nDESCRIPTION: This snippet shows how to build the SDL example programs using CMake. It adds the -DSDL_EXAMPLES=ON flag to the CMake configuration command.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-cmake.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build -DSDL_EXAMPLES=ON\n```\n\n----------------------------------------\n\nTITLE: Checking for struct members\nDESCRIPTION: These CMake snippets check for members in `struct sigaction` and `struct stat`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_120\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_struct_has_member(\"struct sigaction\" \"sa_sigaction\" \"signal.h\" HAVE_SA_SIGACTION)\n    check_struct_has_member(\"struct stat\" \"st_mtim\" \"sys/stat.h\" HAVE_ST_MTIM)\n```\n\n----------------------------------------\n\nTITLE: Installing the target\nDESCRIPTION: This snippet defines the installation targets for the hidapi_libusb library, including library files and public headers.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/libusb/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(HIDAPI_INSTALL_TARGETS)\n    install(TARGETS hidapi_libusb EXPORT hidapi\n        LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        PUBLIC_HEADER DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/hidapi\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Link Options\nDESCRIPTION: This snippet adds link options for macOS, linking against the Cocoa framework for the `testnative` target.  This is necessary for native Cocoa applications.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(MACOS)\n    target_link_options(testnative PRIVATE \"-Wl,-framework,Cocoa\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding APK Signing Dependency in CMake\nDESCRIPTION: This snippet ensures that the APK signing target is built before the `sdl-test-apks` target. It uses `add_dependencies` to create an explicit dependency between the two, ensuring the signing process completes before other dependent targets are built.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(sdl-test-apks ${TEST}-apk)\n```\n\n----------------------------------------\n\nTITLE: Generate Package Configuration Files CMake\nDESCRIPTION: This section generates and installs CMake package configuration files if `HIDAPI_INSTALL_TARGETS` is enabled. It uses `CMakePackageConfigHelpers` to create a version file and a configuration file, which are then installed to the appropriate directory.  The installation includes the exported targets.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(HIDAPI_INSTALL_TARGETS)\n    include(CMakePackageConfigHelpers)\n    set(EXPORT_DENERATED_LOCATION \"${CMAKE_BINARY_DIR}/export_generated\")\n    set(EXPORT_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/hidapi\")\n    write_basic_package_version_file(\"${EXPORT_DENERATED_LOCATION}/hidapi-config-version.cmake\"\n        COMPATIBILITY SameMajorVersion\n    )\n    configure_package_config_file(\"cmake/hidapi-config.cmake.in\" \"${EXPORT_DENERATED_LOCATION}/hidapi-config.cmake\"\n        INSTALL_DESTINATION \"${EXPORT_DESTINATION}\"\n        NO_SET_AND_CHECK_MACRO\n    )\n\n    install(EXPORT hidapi\n        DESTINATION \"${EXPORT_DESTINATION}\"\n        NAMESPACE hidapi::\n        FILE \"libhidapi.cmake\"\n    )\n    install(FILES\n            \"${EXPORT_DENERATED_LOCATION}/hidapi-config-version.cmake\"\n            \"${EXPORT_DENERATED_LOCATION}/hidapi-config.cmake\"\n        DESTINATION \"${EXPORT_DESTINATION}\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Standalone vs. Subdirectory Build Check\nDESCRIPTION: Checks if the current source directory is the same as the CMake source directory. If they are different, it assumes a subdirectory build and adds the `src` subdirectory.  Also, it sets the `hidapi_VERSION` variable in the parent scope to ensure compatibility.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n    add_subdirectory(src)\n    # compatibility with find_package() vs add_subdirectory\n    set(hidapi_VERSION \"${hidapi_VERSION}\" PARENT_SCOPE)\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Filesystem Support Configuration (CMake)\nDESCRIPTION: This snippet configures the filesystem support for SDL on Windows, setting the necessary flag and adding the relevant source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_158\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_FILESYSTEM_WINDOWS 1)\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/windows/*.c\")\nset(HAVE_SDL_FILESYSTEM TRUE)\n```\n\n----------------------------------------\n\nTITLE: Enable Verbose NDK Build Output (Shell)\nDESCRIPTION: This command enables verbose output during the ndk-build process, showing the complete command line used for building the native code.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nndk-build V=1\n```\n\n----------------------------------------\n\nTITLE: Cygwin Configuration CMake\nDESCRIPTION: This block configures SDL for the Cygwin environment. It includes MinGW headers, checks if the compiler supports the `-mno-cygwin` flag, and adds the flag to the linker options if supported. This is used when building SDL on Cygwin without the UNIX emulation layer.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_83\n\nLANGUAGE: cmake\nCODE:\n```\nif(CYGWIN)\n  # We build SDL on cygwin without the UNIX emulation layer\n  sdl_include_directories(PUBLIC SYSTEM \"/usr/include/mingw\")\n  cmake_push_check_state()\n  string(APPEND CMAKE_REQUIRED_FLAGS \" -mno-cygwin\")\n  check_c_source_compiles(\"int main(int argc, char **argv) { return 0; }\"\n    HAVE_GCC_NO_CYGWIN)\n  cmake_pop_check_state()\n  if(HAVE_GCC_NO_CYGWIN)\n    sdl_shared_link_options(\"-mno-cygwin\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for POSIX symbols (non-Windows)\nDESCRIPTION: This CMake snippet checks for the existence of various POSIX symbols, using `check_symbol_exists`. This block is only executed on non-Windows platforms.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_118\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WINDOWS)\n    check_symbol_exists(fdatasync \"unistd.h\" HAVE_FDATASYNC)\n    check_symbol_exists(gethostname \"unistd.h\" HAVE_GETHOSTNAME)\n    check_symbol_exists(getpagesize \"unistd.h\" HAVE_GETPAGESIZE)\n    check_symbol_exists(sigaction \"signal.h\" HAVE_SIGACTION)\n    check_symbol_exists(setjmp \"setjmp.h\" HAVE_SETJMP)\n    check_symbol_exists(nanosleep \"time.h\" HAVE_NANOSLEEP)\n    check_symbol_exists(gmtime_r \"time.h\" HAVE_GMTIME_R)\n    check_symbol_exists(localtime_r \"time.h\" HAVE_LOCALTIME_R)\n    check_symbol_exists(nl_langinfo \"langinfo.h\" HAVE_NL_LANGINFO)\n    check_symbol_exists(sysconf \"unistd.h\" HAVE_SYSCONF)\n    check_symbol_exists(sysctlbyname \"sys/types.h;sys/sysctl.h\" HAVE_SYSCTLBYNAME)\n    check_symbol_exists(getauxval \"sys/auxv.h\" HAVE_GETAUXVAL)\n    check_symbol_exists(elf_aux_info \"sys/auxv.h\" HAVE_ELF_AUX_INFO)\n    check_symbol_exists(poll \"poll.h\" HAVE_POLL)\n    check_symbol_exists(memfd_create \"sys/mman.h\" HAVE_MEMFD_CREATE)\n    check_symbol_exists(posix_fallocate \"fcntl.h\" HAVE_POSIX_FALLOCATE)\n    check_symbol_exists(posix_spawn_file_actions_addchdir \"spawn.h\" HAVE_POSIX_SPAWN_FILE_ACTIONS_ADDCHDIR)\n    check_symbol_exists(posix_spawn_file_actions_addchdir_np \"spawn.h\" HAVE_POSIX_SPAWN_FILE_ACTIONS_ADDCHDIR_NP)\n\n    if(SDL_SYSTEM_ICONV)\n      check_c_source_compiles(\"\n        #define LIBICONV_PLUG 1 /* in case libiconv header is in include path */\n        #include <stddef.h>\n        #include <iconv.h>\n        int main(int argc, char **argv) {\n            return !iconv_open(NULL,NULL);\n        }\" ICONV_IN_LIBC)\n\n      cmake_push_check_state()\n      list(APPEND CMAKE_REQUIRED_LIBRARIES iconv)\n      check_c_source_compiles(\"\n        #include <stddef.h>\n        #include <iconv.h>\n        int main(int argc, char **argv) {\n            return !iconv_open(NULL,NULL);\n        }\" ICONV_IN_LIBICONV)\n      cmake_pop_check_state()\n\n      if(ICONV_IN_LIBC OR ICONV_IN_LIBICONV)\n        set(HAVE_ICONV 1)\n        set(HAVE_SYSTEM_ICONV TRUE)\n        if(ICONV_IN_LIBICONV AND (SDL_LIBICONV OR (NOT ICONV_IN_LIBC)))\n          sdl_link_dependency(iconv LIBS iconv)\n          set(SDL_USE_LIBICONV 1)\n          set(HAVE_LIBICONV TRUE)\n        endif()\n      endif()\n    endif()\n\n    check_struct_has_member(\"struct sigaction\" \"sa_sigaction\" \"signal.h\" HAVE_SA_SIGACTION)\n    check_struct_has_member(\"struct stat\" \"st_mtim\" \"sys/stat.h\" HAVE_ST_MTIM)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Checking for Linux Keyboard ioctl Support\nDESCRIPTION: This snippet checks for the availability of specific Linux keyboard ioctl functions related to keyboard mapping. It includes relevant headers (`linux/kd.h`, `linux/keyboard.h`, `sys/ioctl.h`) and tries to perform an ioctl call using `KDGKBENT`. The result is stored in the `HAVE_INPUT_KD` variable, indicating if the system has this specific keyboard input support.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_136\n\nLANGUAGE: C\nCODE:\n```\n#include <linux/kd.h>\n#include <linux/keyboard.h>\n#include <sys/ioctl.h>\nint main(int argc, char **argv) {\n    struct kbentry kbe;\n    kbe.kb_table = KG_CTRL;\n    ioctl(0, KDGKBENT, &kbe);\n    return 0;\n}\n```\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"\n          #include <linux/kd.h>\n          #include <linux/keyboard.h>\n          #include <sys/ioctl.h>\n          int main(int argc, char **argv) {\n              struct kbentry kbe;\n              kbe.kb_table = KG_CTRL;\n              ioctl(0, KDGKBENT, &kbe);\n              return 0;\n          }\" HAVE_INPUT_KD)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Malformed Sequence Test - 4-byte Sequence\nDESCRIPTION: This test case checks for handling of malformed UTF-8 sequences starting with bytes 0xf0-0xf7, each followed by a space. This tests for proper error detection in 4-byte UTF-8 sequences.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"        \"\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U-000007FF (e0 9f bf)\nDESCRIPTION: Tests the maximum overlong sequence for U-000007FF (e0 9f bf). This is a boundary test for safe UTF-8 decoders.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Illegal Code Position Test - U+D800 (ed a0 80)\nDESCRIPTION: Tests handling of the single UTF-16 surrogate U+D800 (ed a0 80). It should be rejected.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Set Target Properties for hidapi_hidraw\nDESCRIPTION: Sets various properties for the hidapi_hidraw library target, including the export name, output name, version, SOVERSION, and public headers.  These properties control how the library is named and installed.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(hidapi_hidraw\n    PROPERTIES\n        EXPORT_NAME \"hidraw\"\n        OUTPUT_NAME \"hidapi-hidraw\"\n        VERSION ${PROJECT_VERSION}\n        SOVERSION ${PROJECT_VERSION_MAJOR}\n        PUBLIC_HEADER \"${HIDAPI_PUBLIC_HEADERS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: HID Device and Preparsed Data Structure Dump\nDESCRIPTION: This code snippet shows an example of the content of a .pp_data file generated by pp_data_dump.exe. It represents a dump of HID device info and the Preparsed Data structure, which HIDAPI uses internally. The structures contain information about the device's vendor ID, product ID, manufacturer string, product string, usage, usage page, path, and various fields related to input, output, and feature capabilities.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/pp_data_dump/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# HIDAPI device info struct:\ndev->vendor_id           = 0x046D\ndev->product_id          = 0xB010\ndev->manufacturer_string = \"Logitech\"\ndev->product_string      = \"Logitech Bluetooth Wireless Mouse\"\ndev->release_number      = 0x0000\ndev->interface_number    = -1\ndev->usage               = 0x0001\ndev->usage_page          = 0x000C\ndev->path                = \"\\\\?\\hid#{00001124-0000-1000-8000-00805f9b34fb}_vid&0002046d_pid&b010&col02#8&1cf1c1b9&3&0001#{4d1e55b2-f16f-11cf-88cb-001111000030}\"\n\n# Preparsed Data struct:\npp_data->MagicKey                             = 0x48696450204B4452\npp_data->Usage                                = 0x0001\npp_data->UsagePage                            = 0x000C\npp_data->Reserved                             = 0x00000000\n# Input caps_info struct:\npp_data->caps_info[0]->FirstCap           = 0\npp_data->caps_info[0]->LastCap            = 1\npp_data->caps_info[0]->NumberOfCaps       = 1\npp_data->caps_info[0]->ReportByteLength   = 2\n# Output caps_info struct:\npp_data->caps_info[1]->FirstCap           = 1\npp_data->caps_info[1]->LastCap            = 1\npp_data->caps_info[1]->NumberOfCaps       = 0\npp_data->caps_info[1]->ReportByteLength   = 0\n# Feature caps_info struct:\npp_data->caps_info[2]->FirstCap           = 1\npp_data->caps_info[2]->LastCap            = 1\npp_data->caps_info[2]->NumberOfCaps       = 0\npp_data->caps_info[2]->ReportByteLength   = 0\n# LinkCollectionArray Offset & Size:\npp_data->FirstByteOfLinkCollectionArray       = 0x0068\npp_data->NumberLinkCollectionNodes            = 1\n# Input hid_pp_cap struct:\npp_data->cap[0]->UsagePage                    = 0x0006\npp_data->cap[0]->ReportID                     = 0x03\npp_data->cap[0]->BitPosition                  = 0\npp_data->cap[0]->BitSize                      = 8\npp_data->cap[0]->ReportCount                  = 1\npp_data->cap[0]->BytePosition                 = 0x0001\npp_data->cap[0]->BitCount                     = 8\npp_data->cap[0]->BitField                     = 0x02\npp_data->cap[0]->NextBytePosition             = 0x0002\npp_data->cap[0]->LinkCollection               = 0x0000\npp_data->cap[0]->LinkUsagePage                = 0x000C\npp_data->cap[0]->LinkUsage                    = 0x0001\npp_data->cap[0]->IsMultipleItemsForArray      = 0\npp_data->cap[0]->IsButtonCap                  = 0\npp_data->cap[0]->IsPadding                    = 0\npp_data->cap[0]->IsAbsolute                   = 1\npp_data->cap[0]->IsRange                      = 0\npp_data->cap[0]->IsAlias                      = 0\npp_data->cap[0]->IsStringRange                = 0\npp_data->cap[0]->IsDesignatorRange            = 0\npp_data->cap[0]->Reserved1                    = 0x000000\npp_data->cap[0]->pp_cap->UnknownTokens[0].Token    = 0x00\npp_data->cap[0]->pp_cap->UnknownTokens[0].Reserved = 0x000000\npp_data->cap[0]->pp_cap->UnknownTokens[0].BitField = 0x00000000\npp_data->cap[0]->pp_cap->UnknownTokens[1].Token    = 0x00\npp_data->cap[0]->pp_cap->UnknownTokens[1].Reserved = 0x000000\npp_data->cap[0]->pp_cap->UnknownTokens[1].BitField = 0x00000000\npp_data->cap[0]->pp_cap->UnknownTokens[2].Token    = 0x00\npp_data->cap[0]->pp_cap->UnknownTokens[2].Reserved = 0x000000\npp_data->cap[0]->pp_cap->UnknownTokens[2].BitField = 0x00000000\npp_data->cap[0]->pp_cap->UnknownTokens[3].Token    = 0x00\npp_data->cap[0]->pp_cap->UnknownTokens[3].Reserved = 0x000000\npp_data->cap[0]->pp_cap->UnknownTokens[3].BitField = 0x00000000\npp_data->cap[0]->NotRange.Usage                        = 0x0020\npp_data->cap[0]->NotRange.Reserved1                    = 0x0020\npp_data->cap[0]->NotRange.StringIndex                  = 0\npp_data->cap[0]->NotRange.Reserved2                    = 0\npp_data->cap[0]->NotRange.DesignatorIndex              = 0\npp_data->cap[0]->NotRange.Reserved3                    = 0\npp_data->cap[0]->NotRange.DataIndex                    = 0\npp_data->cap[0]->NotRange.Reserved4                    = 0\npp_data->cap[0]->NotButton.HasNull                   = 0\npp_data->cap[0]->NotButton.Reserved4                 = 0x000000\npp_data->cap[0]->NotButton.LogicalMin                = 0\npp_data->cap[0]->NotButton.LogicalMax                = 100\npp_data->cap[0]->NotButton.PhysicalMin               = 0\npp_data->cap[0]->NotButton.PhysicalMax               = 0\npp_data->cap[0]->Units                    = 0\npp_data->cap[0]->UnitsExp                 = 0\n\n# Output hid_pp_cap struct:\n# Feature hid_pp_cap struct:\n# Link Collections:\npp_data->LinkCollectionArray[0]->LinkUsage          = 0x0001\npp_data->LinkCollectionArray[0]->LinkUsagePage      = 0x000C\npp_data->LinkCollectionArray[0]->Parent             = 0\npp_data->LinkCollectionArray[0]->NumberOfChildren   = 0\npp_data->LinkCollectionArray[0]->NextSibling        = 0\npp_data->LinkCollectionArray[0]->FirstChild         = 0\npp_data->LinkCollectionArray[0]->CollectionType     = 1\npp_data->LinkCollectionArray[0]->IsAlias            = 0\npp_data->LinkCollectionArray[0]->Reserved           = 0x00000000\n```\n\n----------------------------------------\n\nTITLE: Cleaning NDK Build with ndk-build\nDESCRIPTION: This command cleans the build directory of an NDK (Native Development Kit) project. It removes compiled object files and libraries, forcing a full rebuild on the next build invocation.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nndk-build clean\n```\n\n----------------------------------------\n\nTITLE: Pushing a Newly Created Git Tag\nDESCRIPTION: This command pushes the newly created tag to the remote repository (origin). <VERSION> should be replaced with the actual version number.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/HACKING.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin hidapi-<VERSION>\n```\n\n----------------------------------------\n\nTITLE: C source for math function check (float)\nDESCRIPTION: This C source code is used by CMake's `check_c_source_compiles` to verify the availability of a math function (e.g., isinf, isnan) for `float` arguments.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_116\n\nLANGUAGE: c\nCODE:\n```\n#include <math.h>\nint main() {\n  float f = 3.14159f;\n  return ${math_fn}(f);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for hidapi_winapi\nDESCRIPTION: This command sets various properties for the `hidapi_winapi` library, including the `EXPORT_NAME`, `OUTPUT_NAME`, `VERSION`, and `PUBLIC_HEADER`.  `EXPORT_NAME` defines name when exporting target. `OUTPUT_NAME` controls library file name. `VERSION` corresponds to the project version. `PUBLIC_HEADER` specifies the public headers for the library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(hidapi_winapi\n    PROPERTIES\n        EXPORT_NAME \"winapi\"\n        OUTPUT_NAME \"hidapi\"\n        VERSION ${PROJECT_VERSION}\n        PUBLIC_HEADER \"${HIDAPI_PUBLIC_HEADERS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+002F (fc 80 80 80 80 af)\nDESCRIPTION: Tests overlong representation of the ASCII character slash (/) using the sequence fc 80 80 80 80 af. This is an extreme overlong sequence.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default GCC Atomics Option\nDESCRIPTION: Sets the default for using GCC atomics. If GCC, Clang, IntelCC, or QCC is being used, it's ON; otherwise, it's OFF.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_GCC_ATOMICS_DEFAULT OFF)\nif(USE_GCC OR USE_CLANG OR USE_INTELCC OR USE_QCC)\n  set(SDL_GCC_ATOMICS_DEFAULT ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking GCC Sync Lock Support in C\nDESCRIPTION: This snippet checks if the compiler supports the `__sync_lock_test_and_set` and `__sync_lock_release` intrinsics for basic atomic operations. The result is stored in `HAVE_GCC_SYNC_LOCK_TEST_AND_SET`.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_91\n\nLANGUAGE: C\nCODE:\n```\nint main(int argc, char **argv) {\n          int a;\n          __sync_lock_test_and_set(&a, 1);\n          __sync_lock_release(&a);\n          return 0; }\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Unaligned APK in CMake\nDESCRIPTION: This snippet adds files to an unaligned APK using the `sdl_add_to_apk_unaligned` custom command.  It takes an input APK (`${TEST}-apk-linked`), output directory, assets from `${RESOURCE_FILES}`, native libraries (`SDL3::SDL3-shared` and `${TEST}`), and the DEX file generated by `${TEST}-dex` as input. The resulting unaligned APK is created in the specified output directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\nsdl_add_to_apk_unaligned(${TEST}-unaligned-apk\n    APK_IN ${TEST}-apk-linked\n    OUTDIR \"${CMAKE_CURRENT_BINARY_DIR}/intermediates\"\n    ASSETS ${RESOURCE_FILES}\n    NATIVE_LIBS SDL3::SDL3-shared ${TEST}\n    DEX ${TEST}-dex\n)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Illegal Code Position Test - U+DB80 (ed ae 80)\nDESCRIPTION: Tests handling of the single UTF-16 surrogate U+DB80 (ed ae 80).  This should be flagged as invalid.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 5-byte Missing\nDESCRIPTION: Tests handling of incomplete 5-byte UTF-8 sequences with the last byte missing. This verifies that the decoder identifies and handles truncated sequences correctly.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Configure Assertion Level CMake\nDESCRIPTION: This block configures the assertion level based on the value of the SDL_ASSERTIONS variable. It handles values like \"auto\", \"disabled\", \"release\", \"enabled\", and \"paranoid\", setting the SDL_DEFAULT_ASSERT_LEVEL accordingly. If an unknown assertion level is provided, it raises a FATAL_ERROR.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_88\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_DEFAULT_ASSERT_LEVEL_CONFIGURED 1)\nif(SDL_ASSERTIONS MATCHES \"^(auto|)$\")\n  # Do nada - use optimization settings to determine the assertion level\n  set(SDL_DEFAULT_ASSERT_LEVEL )\n  set(SDL_DEFAULT_ASSERT_LEVEL_CONFIGURED 0)\nelif(SDL_ASSERTIONS MATCHES \"^(disabled|0)$\")\n  set(SDL_DEFAULT_ASSERT_LEVEL 0)\nelif(SDL_ASSERTIONS MATCHES \"^(release|1)$\")\n  set(SDL_DEFAULT_ASSERT_LEVEL 1)\nelif(SDL_ASSERTIONS MATCHES \"^(enabled|2)$\")\n  set(SDL_DEFAULT_ASSERT_LEVEL 2)\nelif(SDL_ASSERTIONS MATCHES \"^(paranoid|3)$\")\n  set(SDL_DEFAULT_ASSERT_LEVEL 3)\nelse()\n  message(FATAL_ERROR \"unknown assertion level\")\nendif()\nset(HAVE_ASSERTIONS ${SDL_ASSERTIONS})\n```\n\n----------------------------------------\n\nTITLE: Building uclibc Static Library CMake\nDESCRIPTION: This snippet builds `uclibc` as a static library and configures its compile definitions and include directories. It also sets compiler flags and visibility properties, linking it to the SDL3 shared library if enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_124\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB SDL_UCLIBC_SOURCES \"${SDL3_SOURCE_DIR}/src/libm/*.c\")\nadd_library(SDL_uclibc STATIC \"${SDL_UCLIBC_SOURCES}\")\ntarget_compile_definitions(SDL_uclibc PRIVATE USING_GENERATED_CONFIG_H)\ntarget_include_directories(SDL_uclibc PRIVATE \"${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>/build_config\")\ntarget_include_directories(SDL_uclibc PRIVATE \"${SDL3_SOURCE_DIR}/src\")\ntarget_include_directories(SDL_uclibc PRIVATE \"${SDL3_SOURCE_DIR}/include\")\nSDL_AddCommonCompilerFlags(SDL_uclibc)\nsdl_sources(STATIC \"$<TARGET_OBJECTS:SDL_uclibc>\")\nif(TARGET SDL3-shared)\n  target_link_libraries(SDL3-shared PRIVATE SDL_uclibc)\nendif()\nif(HAVE_GCC_FVISIBILITY)\n  set_property(TARGET SDL_uclibc PROPERTY C_VISIBILITY_PRESET \"hidden\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Dynamic API Entry Point (C)\nDESCRIPTION: This code snippet shows the SDL_DYNAPI_entry function, which is called by SDL_InitDynamicAPI when an external SDL library is loaded. It receives the version number, the address of the jump table, and its size to initialize the table with the functions from the external library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-dynapi.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nSint32 SDL_DYNAPI_entry(Uint32 version, void *table, Uint32 tablesize);\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name as 'hidapi' and specifies C as the programming language.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nproject(hidapi LANGUAGES C)\n```\n\n----------------------------------------\n\nTITLE: Converting JPG to YUV420p\nDESCRIPTION: This command uses avconv (libavcodec) to convert a JPEG image into a raw YUV420p file. The raw YUV file is required as input for the test program.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/video/yuv2rgb/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\navconv -i example.jpg -c:v rawvideo -pix_fmt yuv420p example.yuv\n```\n\n----------------------------------------\n\nTITLE: Removing /RTC Flags for MSVC\nDESCRIPTION: Removes /RTC flags from the C compiler flags when building with MSVC and SDL_LIBC is OFF. This prevents the use of functions from the CRT.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  if(NOT SDL_LIBC)\n    # Make sure /RTC1 is disabled, otherwise it will use functions from the CRT\n    foreach(flag_var\n        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)\n      string(REGEX REPLACE \"/RTC(su|[1su])\" \"\" ${flag_var} \"${${flag_var}}\")\n    endforeach(flag_var)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Run Executable (Visual Studio)\nDESCRIPTION: Navigates to the 'build/Debug' directory, specifically when using the Visual Studio toolchain, and runs the compiled executable named 'hello'. This is because Visual Studio places the executable in the 'Debug' subdirectory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-cmake.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd build/Debug\n./hello\n```\n\n----------------------------------------\n\nTITLE: Listing SD Card Contents with ADB Shell\nDESCRIPTION: This command uses ADB to execute a shell command on the connected Android device and lists the contents of the SD card directory. It enables developers to verify file deployment and directory structure on the device.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nadb shell ls /sdcard/\n```\n\n----------------------------------------\n\nTITLE: Setting Vivante EGL Video Driver Option (CMake)\nDESCRIPTION: This snippet configures an option to enable the Vivante EGL video driver. It depends on the system being UNIX_SYS and the CPU architecture being ARM32.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\ndep_option(SDL_VIVANTE             \"Use Vivante EGL video driver\" ON \"${UNIX_SYS};SDL_CPU_ARM32\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Mapping Latin Ligatures\nDESCRIPTION: This snippet defines Latin ligatures, representing combinations of characters as single glyphs. Ligatures are used to improve readability and aesthetics in typography.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/build-scripts/casefolding.txt#_snippet_2\n\nLANGUAGE: Other\nCODE:\n```\nFB00; F; 0066 0066; # LATIN SMALL LIGATURE FF\nFB01; F; 0066 0069; # LATIN SMALL LIGATURE FI\nFB02; F; 0066 006C; # LATIN SMALL LIGATURE FL\nFB03; F; 0066 0066 0069; # LATIN SMALL LIGATURE FFI\nFB04; F; 0066 0066 006C; # LATIN SMALL LIGATURE FFL\nFB05; F; 0073 0074; # LATIN SMALL LIGATURE LONG S T\nFB05; S; FB06; # LATIN SMALL LIGATURE LONG S T\nFB06; F; 0073 0074; # LATIN SMALL LIGATURE ST\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet configures various properties for the hidapi_libusb target, such as EXPORT_NAME, OUTPUT_NAME, VERSION, SOVERSION, and PUBLIC_HEADER.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/libusb/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(hidapi_libusb\n    PROPERTIES\n        EXPORT_NAME \"libusb\"\n        OUTPUT_NAME \"hidapi-libusb\"\n        VERSION ${PROJECT_VERSION}\n        SOVERSION ${PROJECT_VERSION_MAJOR}\n        PUBLIC_HEADER \"${HIDAPI_PUBLIC_HEADERS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Sensor Sources\nDESCRIPTION: This CMake snippet sets the dummy sensor driver source files if `HAVE_SDL_SENSORS` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_209\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_SENSORS)\n  set(SDL_SENSOR_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Default Target Configuration\nDESCRIPTION: On platforms other than Linux, Windows, and Apple (or if hidraw/libusb targets are unavailable), this configures a default `hidtest` executable and links it against the `hidapi::hidapi` target.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/hidtest/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n    add_executable(hidtest test.c)\n    target_link_libraries(hidtest hidapi::hidapi)\n    list(APPEND HIDAPI_HIDTEST_TARGETS hidtest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for inotify_init1 Symbol\nDESCRIPTION: This snippet checks for the existence of the `inotify_init1` symbol within the `sys/inotify.h` header file. `inotify_init1` is another function for file system event monitoring. The result is stored in the `HAVE_INOTIFY_INIT1` variable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_142\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_symbol_exists(inotify_init1 \"sys/inotify.h\" HAVE_INOTIFY_INIT1)\n```\n\n----------------------------------------\n\nTITLE: Creating Aliases for hidapi_winapi\nDESCRIPTION: These commands create aliases for the `hidapi_winapi` library.  `hidapi::winapi` is for compatibility with `find_package()`, and `hidapi` is for compatibility with raw library linking.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# compatibility with find_package()\nadd_library(hidapi::winapi ALIAS hidapi_winapi)\n# compatibility with raw library link\nadd_library(hidapi ALIAS hidapi_winapi)\n```\n\n----------------------------------------\n\nTITLE: Mapping Latin Capital Letters\nDESCRIPTION: This snippet maps Latin capital letters with various diacritics, strokes, or modifications to their corresponding representations. These mappings are crucial for character encoding and display consistency.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/build-scripts/casefolding.txt#_snippet_0\n\nLANGUAGE: Other\nCODE:\n```\nA724; C; A725; # LATIN CAPITAL LETTER EGYPTOLOGICAL AIN\nA726; C; A727; # LATIN CAPITAL LETTER HENG\nA728; C; A729; # LATIN CAPITAL LETTER TZ\nA72A; C; A72B; # LATIN CAPITAL LETTER TRESILLO\nA72C; C; A72D; # LATIN CAPITAL LETTER CUATRILLO\nA72E; C; A72F; # LATIN CAPITAL LETTER CUATRILLO WITH COMMA\nA732; C; A733; # LATIN CAPITAL LETTER AA\nA734; C; A735; # LATIN CAPITAL LETTER AO\nA736; C; A737; # LATIN CAPITAL LETTER AU\nA738; C; A739; # LATIN CAPITAL LETTER AV\nA73A; C; A73B; # LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR\nA73C; C; A73D; # LATIN CAPITAL LETTER AY\nA73E; C; A73F; # LATIN CAPITAL LETTER REVERSED C WITH DOT\nA740; C; A741; # LATIN CAPITAL LETTER K WITH STROKE\nA742; C; A743; # LATIN CAPITAL LETTER K WITH DIAGONAL STROKE\nA744; C; A745; # LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE\nA746; C; A747; # LATIN CAPITAL LETTER BROKEN L\nA748; C; A749; # LATIN CAPITAL LETTER L WITH HIGH STROKE\nA74A; C; A74B; # LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY\nA74C; C; A74D; # LATIN CAPITAL LETTER O WITH LOOP\nA74E; C; A74F; # LATIN CAPITAL LETTER OO\nA750; C; A751; # LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER\nA752; C; A753; # LATIN CAPITAL LETTER P WITH FLOURISH\nA754; C; A755; # LATIN CAPITAL LETTER P WITH SQUIRREL TAIL\nA756; C; A757; # LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER\nA758; C; A759; # LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE\nA75A; C; A75B; # LATIN CAPITAL LETTER R ROTUNDA\nA75C; C; A75D; # LATIN CAPITAL LETTER RUM ROTUNDA\nA75E; C; A75F; # LATIN CAPITAL LETTER V WITH DIAGONAL STROKE\nA760; C; A761; # LATIN CAPITAL LETTER VY\nA762; C; A763; # LATIN CAPITAL LETTER VISIGOTHIC Z\nA764; C; A765; # LATIN CAPITAL LETTER THORN WITH STROKE\nA766; C; A767; # LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER\nA768; C; A769; # LATIN CAPITAL LETTER VEND\nA76A; C; A76B; # LATIN CAPITAL LETTER ET\nA76C; C; A76D; # LATIN CAPITAL LETTER IS\nA76E; C; A76F; # LATIN CAPITAL LETTER CON\nA779; C; A77A; # LATIN CAPITAL LETTER INSULAR D\nA77B; C; A77C; # LATIN CAPITAL LETTER INSULAR F\nA77D; C; 1D79; # LATIN CAPITAL LETTER INSULAR G\nA77E; C; A77F; # LATIN CAPITAL LETTER TURNED INSULAR G\nA780; C; A781; # LATIN CAPITAL LETTER TURNED L\nA782; C; A783; # LATIN CAPITAL LETTER INSULAR R\nA784; C; A785; # LATIN CAPITAL LETTER INSULAR S\nA786; C; A787; # LATIN CAPITAL LETTER INSULAR T\nA78B; C; A78C; # LATIN CAPITAL LETTER SALTILLO\nA78D; C; 0265; # LATIN CAPITAL LETTER TURNED H\nA790; C; A791; # LATIN CAPITAL LETTER N WITH DESCENDER\nA792; C; A793; # LATIN CAPITAL LETTER C WITH BAR\nA796; C; A797; # LATIN CAPITAL LETTER B WITH FLOURISH\nA798; C; A799; # LATIN CAPITAL LETTER F WITH STROKE\nA79A; C; A79B; # LATIN CAPITAL LETTER VOLAPUK AE\nA79C; C; A79D; # LATIN CAPITAL LETTER VOLAPUK OE\nA79E; C; A79F; # LATIN CAPITAL LETTER VOLAPUK UE\nA7A0; C; A7A1; # LATIN CAPITAL LETTER G WITH OBLIQUE STROKE\nA7A2; C; A7A3; # LATIN CAPITAL LETTER K WITH OBLIQUE STROKE\nA7A4; C; A7A5; # LATIN CAPITAL LETTER N WITH OBLIQUE STROKE\nA7A6; C; A7A7; # LATIN CAPITAL LETTER R WITH OBLIQUE STROKE\nA7A8; C; A7A9; # LATIN CAPITAL LETTER S WITH OBLIQUE STROKE\nA7AA; C; 0266; # LATIN CAPITAL LETTER H WITH HOOK\nA7AB; C; 025C; # LATIN CAPITAL LETTER REVERSED OPEN E\nA7AC; C; 0261; # LATIN CAPITAL LETTER SCRIPT G\nA7AD; C; 026C; # LATIN CAPITAL LETTER L WITH BELT\nA7AE; C; 026A; # LATIN CAPITAL LETTER SMALL CAPITAL I\nA7B0; C; 029E; # LATIN CAPITAL LETTER TURNED K\nA7B1; C; 0287; # LATIN CAPITAL LETTER TURNED T\nA7B2; C; 029D; # LATIN CAPITAL LETTER J WITH CROSSED-TAIL\nA7B3; C; AB53; # LATIN CAPITAL LETTER CHI\nA7B4; C; A7B5; # LATIN CAPITAL LETTER BETA\nA7B6; C; A7B7; # LATIN CAPITAL LETTER OMEGA\nA7B8; C; A7B9; # LATIN CAPITAL LETTER U WITH STROKE\nA7BA; C; A7BB; # LATIN CAPITAL LETTER GLOTTAL A\nA7BC; C; A7BD; # LATIN CAPITAL LETTER GLOTTAL I\nA7BE; C; A7BF; # LATIN CAPITAL LETTER GLOTTAL U\nA7C0; C; A7C1; # LATIN CAPITAL LETTER OLD POLISH O\nA7C2; C; A7C3; # LATIN CAPITAL LETTER ANGLICANA W\nA7C4; C; A794; # LATIN CAPITAL LETTER C WITH PALATAL HOOK\nA7C5; C; 0282; # LATIN CAPITAL LETTER S WITH HOOK\nA7C6; C; 1D8E; # LATIN CAPITAL LETTER Z WITH PALATAL HOOK\nA7C7; C; A7C8; # LATIN CAPITAL LETTER D WITH SHORT STROKE OVERLAY\nA7C9; C; A7CA; # LATIN CAPITAL LETTER S WITH SHORT STROKE OVERLAY\nA7D0; C; A7D1; # LATIN CAPITAL LETTER CLOSED INSULAR G\nA7D6; C; A7D7; # LATIN CAPITAL LETTER MIDDLE SCOTS S\nA7D8; C; A7D9; # LATIN CAPITAL LETTER SIGMOID S\nA7F5; C; A7F6; # LATIN CAPITAL LETTER REVERSED HALF H\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U-0000FFFF (f0 8f bf bf)\nDESCRIPTION: Tests the maximum overlong sequence for U-0000FFFF (f0 8f bf bf).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Filesystem Operations Configuration (CMake)\nDESCRIPTION: Enables filesystem operations support for the build.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_159\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_FSOPS_WINDOWS 1)\nset(HAVE_SDL_FSOPS TRUE)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+0000 (e0 80 80)\nDESCRIPTION: Tests overlong representation of the NUL character (U+0000) using e0 80 80.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Executable Installation\nDESCRIPTION: Installs the built executables to the CMAKE_INSTALL_BINDIR directory, making them available after the installation process.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/hidtest/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${HIDAPI_HIDTEST_TARGETS}\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining HID Descriptor Test Cases\nDESCRIPTION: Defines a list of test cases for HID descriptor reconstruction, where each case represents a specific device and its associated data files. These test cases are later used to validate the reconstruction process.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HID_DESCRIPTOR_RECONSTRUCT_TEST_CASES\n     046D_C52F_0001_000C\n     046D_C52F_0001_FF00\n     046D_C52F_0002_0001\n     046D_C52F_0002_FF00\n     17CC_1130_0000_FF01\n     046D_0A37_0001_000C\n     046A_0011_0006_0001\n     046D_C077_0002_0001\n     046D_C283_0004_0001\n     046D_B010_0006_0001\n     046D_B010_0002_FF00\n     046D_B010_0002_0001\n     046D_B010_0001_FF00\n     046D_B010_0001_000C\n     046D_C534_0001_000C\n     046D_C534_0001_FF00\n     046D_C534_0002_0001\n     046D_C534_0002_FF00\n     046D_C534_0006_0001\n     046D_C534_0080_0001\n     047F_C056_0001_000C\n     047F_C056_0003_FFA0\n     047F_C056_0005_000B\n     045E_02FF_0005_0001\n)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+002F (c0 af)\nDESCRIPTION: This test case verifies handling of an overlong representation of the ASCII character slash (/) using the sequence c0 af.  A safe decoder should reject this sequence.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Configure hidapi.pc file\nDESCRIPTION: This line calls the `hidapi_configure_pc` function (presumably defined elsewhere) to configure the `hidapi.pc` file, which is used by `pkg-config` to provide information about the hidapi library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nhidapi_configure_pc(\"${PROJECT_ROOT}/pc/hidapi.pc.in\")\n```\n\n----------------------------------------\n\nTITLE: Locale Support Configuration (CMake)\nDESCRIPTION: Configures locale support on Windows by setting flags and adding source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_157\n\nLANGUAGE: CMake\nCODE:\n```\nsdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/windows/*.c\")\nset(HAVE_SDL_LOCALE TRUE)\n```\n\n----------------------------------------\n\nTITLE: Default SDL Initialization (C)\nDESCRIPTION: This snippet shows the SDL_Init_DEFAULT function, which is initially called when SDL_Init is invoked. It calls SDL_InitDynamicAPI to populate the jump table with actual SDL function pointers, ensuring that the dynamic API is initialized.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-dynapi.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_Init_DEFAULT(SDL_InitFlags flags)\n{\n    SDL_InitDynamicAPI();\n    return jump_table.SDL_Init(flags);\n}\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Malformed Sequence Test - 6-byte Sequence\nDESCRIPTION: This test case checks for handling of malformed UTF-8 sequences starting with bytes 0xfc-0xfd, each followed by a space. This ensures proper error detection for 6-byte UTF-8 sequences.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"  \"\n```\n\n----------------------------------------\n\nTITLE: Setting Assembly Routine Options (CMake)\nDESCRIPTION: This snippet configures options for enabling and selecting specific assembly routines (AVX, AVX2, SSE, MMX, etc.) for optimized performance. The options depend on whether assembly routines are enabled (SDL_ASSEMBLY) and the target CPU architecture (SDL_CPU_X86, SDL_CPU_X64, etc.).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_ASSEMBLY            \"Enable assembly routines\" ${SDL_ASSEMBLY_DEFAULT})\ndep_option(SDL_AVX                 \"Use AVX assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_AVX2                \"Use AVX2 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_AVX512F             \"Use AVX512F assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE                 \"Use SSE assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE2                \"Use SSE2 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE3                \"Use SSE3 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE4_1              \"Use SSE4.1 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE4_2              \"Use SSE4.2 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_MMX                 \"Use MMX assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_ALTIVEC             \"Use Altivec assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_POWERPC32 OR SDL_CPU_POWERPC64\" OFF)\ndep_option(SDL_ARMNEON             \"Use NEON assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_ARM32 OR SDL_CPU_ARM64\" OFF)\ndep_option(SDL_LSX                 \"Use LSX assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_LOONGARCH64\" OFF)\ndep_option(SDL_LASX                \"Use LASX assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_LOONGARCH64\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Uninstalling APKs\nDESCRIPTION: This snippet creates a custom target `uninstall-sdl-test-apks` for uninstalling a list of Android packages specified in the `packages` variable.  It utilizes the `SdlAndroidScript.cmake` script with the `ACTION=uninstall` parameter. The script receives the path to the adb executable and the list of packages to uninstall. `VERBATIM` is used to pass the command as is.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(uninstall-sdl-test-apks\n    COMMAND \"${CMAKE_COMMAND}\" \"-DADB=$<TARGET_FILE:SdlAndroid::adb>\" -DACTION=uninstall \"-DPACKAGES=${packages}\" -P \"${SDL3_SOURCE_DIR}/cmake/android/SdlAndroidScript.cmake\"\n    VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Video Driver for Haiku (CMake)\nDESCRIPTION: This snippet enables the Haiku video driver by setting a CMake variable and including the relevant source files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_189\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_HAIKU 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/haiku/*.cc\")\n    set(HAVE_SDL_VIDEO TRUE)\n\n    if(SDL_OPENGL)\n      # TODO: Use FIND_PACKAGE(OpenGL) instead\n      set(SDL_VIDEO_OPENGL 1)\n      set(SDL_VIDEO_OPENGL_HAIKU 1)\n      set(SDL_VIDEO_RENDER_OGL 1)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+0000 (fc 80 80 80 80 80)\nDESCRIPTION: Tests overlong representation of the NUL character (U+0000) using fc 80 80 80 80 80.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Linking against Threads\nDESCRIPTION: This snippet links the hidapi_libusb library against the Threads::Threads target, requiring the Threads package.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/libusb/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Threads REQUIRED)\ntarget_link_libraries(hidapi_libusb PRIVATE Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Skipping IOP Reset for Debugging SDL on PS2\nDESCRIPTION: This code snippet demonstrates how to skip the IOP reset when debugging SDL applications on the PS2 using ps2client. Skipping the reset prevents the debugging connection from being lost.  This is achieved by calling the `SDL_PS2_SKIP_IOP_RESET()` macro.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-ps2.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n.....\n\nSDL_PS2_SKIP_IOP_RESET();\n\nint main(int argc, char *argv[])\n{\n.....\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+0000 (f8 80 80 80 80)\nDESCRIPTION: Tests overlong representation of the NUL character (U+0000) using f8 80 80 80 80.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating hidapi_netbsd aliases\nDESCRIPTION: This snippet creates aliases for the hidapi_netbsd library. The aliases provide compatibility with find_package() and raw library linking methods, allowing for different ways to reference the library in other CMake projects.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/netbsd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# compatibility with find_package()\nadd_library(hidapi::netbsd ALIAS hidapi_netbsd)\n# compatibility with raw library link\nadd_library(hidapi-netbsd ALIAS hidapi_netbsd)\n```\n\n----------------------------------------\n\nTITLE: Building SDL for RISC OS using CMake\nDESCRIPTION: These commands build SDL for RISC OS using CMake, configured to use GCCSDK toolchain and RISCOS platform, sets the installation prefix to the GCCSDK environment, and builds in Release mode. It requires CMake and GCCSDK to be installed and configured.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-riscos.md#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake -Bbuild-riscos -DCMAKE_TOOLCHAIN_FILE=$GCCSDK_INSTALL_ENV/toolchain-riscos.cmake -DRISCOS=ON -DCMAKE_INSTALL_PREFIX=$GCCSDK_INSTALL_ENV -DCMAKE_BUILD_TYPE=Release\ncmake --build build-riscos\ncmake --install build-riscos\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+002F (f8 80 80 80 af)\nDESCRIPTION: Tests overlong representation of the ASCII character slash (/) using the sequence f8 80 80 80 af. This should be rejected.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Filesystem Sources for POSIX platform\nDESCRIPTION: This CMake snippet sets the filesystem-related source files for the POSIX platform. It uses `sdl_sources` to include the specified C file and sets the `HAVE_SDL_FSOPS` variable to TRUE.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_195\n\nLANGUAGE: CMake\nCODE:\n```\nset(SDL_FSOPS_POSIX 1)\nsdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\nset(HAVE_SDL_FSOPS TRUE)\n```\n\n----------------------------------------\n\nTITLE: Checking GameController Framework Compilation (Objective-C)\nDESCRIPTION: This snippet checks if the GameController framework is available and can be compiled on the target platform. It includes Foundation and GameController headers and defines a simple main function. This check is used to enable MFI joystick support.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_176\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_objc_source_compiles(\"\n          #import <Foundation/Foundation.h>\n          #import <GameController/GameController.h>\n          #if MAC_OS_X_VERSION_MIN_REQUIRED < 1080\n          #error GameController framework doesn't work on this configuration\n          #endif\n          #if TARGET_CPU_X86\n          #error GameController framework doesn't work on this configuration\n          #endif\n          int main() { return 0; }\" HAVE_FRAMEWORK_GAMECONTROLLER)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 6-byte Missing (U-7FFFFFFF)\nDESCRIPTION: Tests handling of incomplete 6-byte UTF-8 sequences with the last byte missing for the U-7FFFFFFF range. This verifies correct detection and handling of truncated sequences.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking CoreHaptics Framework Compilation (Objective-C)\nDESCRIPTION: This snippet checks if the CoreHaptics framework is available and can be compiled. It includes Foundation and CoreHaptics headers and a simple main function. The availability of CoreHaptics is linked to MFI rumble support, necessitating both GameController and CoreHaptics for MFI to be enabled.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_177\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_objc_source_compiles(\"\n          #include <AvailabilityMacros.h>\n          #include <TargetConditionals.h>\n          #import <Foundation/Foundation.h>\n          #import <CoreHaptics/CoreHaptics.h>\n          int main() { return 0; }\" HAVE_FRAMEWORK_COREHAPTICS)\n```\n\n----------------------------------------\n\nTITLE: Checking MMX Support in C\nDESCRIPTION: This snippet checks for MMX support by attempting to compile code that uses MMX intrinsics (`<mmintrin.h>`, `__m64`, `_mm_add_pi32`).  It includes a dummy function `ints_add` using MMX instructions. The result is stored in the `HAVE_MMX` variable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_93\n\nLANGUAGE: C\nCODE:\n```\n#include <mmintrin.h>\n      void ints_add(int *dest, int *a, int *b, unsigned size) {\n        for (; size >= 2; size -= 2, dest += 2, a += 2, b += 2) {\n          *(__m64*)dest = _mm_add_pi32(*(__m64*)a, *(__m64*)b);\n        }\n      }\n      int main(int argc, char *argv[]) {\n        ints_add((int*)0, (int*)0, (int*)0, 0);\n        return 0;\n      }\n```\n\n----------------------------------------\n\nTITLE: SDL_TICKS_PASSED Macro Definition (SDL_timer.h) - Custom Implementation (C)\nDESCRIPTION: This code snippet shows how to define the SDL_TICKS_PASSED macro for custom use cases outside of SDL, if needed. It implements the macro using a signed 32-bit difference between the two tick values, checking if the result is less than or equal to zero.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_38\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_TICKS_PASSED(A, B)  ((Sint32)((B) - (A)) <= 0)\n```\n\n----------------------------------------\n\nTITLE: Set Static Library Name\nDESCRIPTION: This snippet determines the name of the static library based on whether a static library prefix/suffix is empty and whether building an Apple framework.  If either condition is true, the name is set to SDL3-static, otherwise it's SDL3.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_227\n\nLANGUAGE: cmake\nCODE:\n```\nif((CMAKE_STATIC_LIBRARY_PREFIX STREQUAL \"\" AND CMAKE_STATIC_LIBRARY_SUFFIX STREQUAL \".lib\") OR SDL_FRAMEWORK)\n  # - Avoid conflict between the dll import library and the static library\n  # - Create SDL3-static Apple Framework\n  set(sdl_static_libname \"SDL3-static\")\nelse()\n  set(sdl_static_libname \"SDL3\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Filesystem Sources\nDESCRIPTION: This CMake snippet sets the dummy filesystem driver source files if `HAVE_SDL_FILESYSTEM` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_211\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_FILESYSTEM)\n  set(SDL_FILESYSTEM_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking AVX512F Support in C\nDESCRIPTION: This snippet checks for AVX512F support using intrinsics from `<immintrin.h>` (`_mm512_loadu_ps`, `_mm512_add_ps`, `_mm512_storeu_ps`).  The `floats_add` function is used to check AVX512F by performing addition on floats. The result is stored in the `HAVE_AVX512F` variable.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_101\n\nLANGUAGE: C\nCODE:\n```\n#include <immintrin.h>\n      void floats_add(float *dest, float *a, float *b, unsigned size) {\n        for (; size >= 16; size -= 16, dest += 16, a += 16, b += 16) {\n          _mm512_storeu_ps(dest, _mm512_add_ps(_mm512_loadu_ps(a), _mm512_loadu_ps(b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        floats_add((float*)0, (float*)0, (float*)0, 0);\n        return 0;\n      }\n```\n\n----------------------------------------\n\nTITLE: Checking for math functions\nDESCRIPTION: This CMake snippet checks for the availability of `isinf` and `isnan` math functions and their float variants, using `check_c_source_compiles`. It also verifies that the standard library handles `float` arguments for these functions correctly.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_114\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_push_check_state()\n  if(MSVC)\n    string(APPEND CMAKE_REQUIRED_FLAGS \" -we4244 -WX\")  # 'conversion' conversion from 'type1' to 'type2', possible loss of data\n  else()\n    string(APPEND CMAKE_REQUIRED_FLAGS \" -Wfloat-conversion -Werror\")\n  endif()\n  foreach(math_fn isinf isnan)\n    string(TOUPPER \"${math_fn}\" MATH_FN)\n    check_c_source_compiles(\"\n        #include <math.h>\n        int main() {\n          double d = 3.14159;\n          return ${math_fn}(d);\n        }\n      \" LIBC_HAS_${MATH_FN})\n    set(HAVE_${MATH_FN} ${LIBC_HAS_${MATH_FN}})\n\n    check_c_source_compiles(\"\n      #include <math.h>\n      int main() {\n        float f = 3.14159f;\n        return ${math_fn}(f);\n      }\n    \" LIBC_${MATH_FN}_HANDLES_FLOAT)\n    set(HAVE_${MATH_FN}_FLOAT_MACRO ${LIBC_${MATH_FN}_HANDLES_FLOAT})\n\n    check_c_source_compiles(\"\n      #include <math.h>\n      int main() {\n        float f = 3.14159f;\n        return ${math_fn}f(f);\n      }\n    \" LIBC_HAS_${MATH_FN}F)\n    set(HAVE_${MATH_FN}F \"${LIBC_HAS_${MATH_FN}F}\")\n  endforeach()\n  cmake_pop_check_state()\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Illegal Code Position Test - U+DC00 (ed b0 80)\nDESCRIPTION: Tests handling of the single UTF-16 surrogate U+DC00 (ed b0 80).  This should be flagged as invalid.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_36\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Executable Creation and C Standard Setup\nDESCRIPTION: Creates an executable named `hid_report_reconstructor_test` from the source file `hid_report_reconstructor_test.c` and sets the C standard to C11 with required standard.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/windows/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(hid_report_reconstructor_test hid_report_reconstructor_test.c)\nset_target_properties(hid_report_reconstructor_test\n    PROPERTIES\n        C_STANDARD 11\n        C_STANDARD_REQUIRED TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 2-byte Missing (U-000007FF)\nDESCRIPTION: Tests the handling of incomplete 2-byte UTF-8 sequences where the last byte is missing, specifically for the U-000007FF code point range. This ensures proper detection and handling of such truncated sequences.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Camera Sources\nDESCRIPTION: This CMake snippet sets the dummy camera driver source files if `HAVE_CAMERA` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_219\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_CAMERA)\n  set(SDL_CAMERA_DRIVER_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Mapping Fullwidth Latin Characters\nDESCRIPTION: This snippet maps standard Latin capital letters to their fullwidth equivalents.  Fullwidth characters are often used to create visual alignment in East Asian text layouts.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/build-scripts/casefolding.txt#_snippet_4\n\nLANGUAGE: Other\nCODE:\n```\nFF21; C; FF41; # FULLWIDTH LATIN CAPITAL LETTER A\nFF22; C; FF42; # FULLWIDTH LATIN CAPITAL LETTER B\nFF23; C; FF43; # FULLWIDTH LATIN CAPITAL LETTER C\nFF24; C; FF44; # FULLWIDTH LATIN CAPITAL LETTER D\nFF25; C; FF45; # FULLWIDTH LATIN CAPITAL LETTER E\nFF26; C; FF46; # FULLWIDTH LATIN CAPITAL LETTER F\nFF27; C; FF47; # FULLWIDTH LATIN CAPITAL LETTER G\nFF28; C; FF48; # FULLWIDTH LATIN CAPITAL LETTER H\nFF29; C; FF49; # FULLWIDTH LATIN CAPITAL LETTER I\nFF2A; C; FF4A; # FULLWIDTH LATIN CAPITAL LETTER J\nFF2B; C; FF4B; # FULLWIDTH LATIN CAPITAL LETTER K\nFF2C; C; FF4C; # FULLWIDTH LATIN CAPITAL LETTER L\nFF2D; C; FF4D; # FULLWIDTH LATIN CAPITAL LETTER M\nFF2E; C; FF4E; # FULLWIDTH LATIN CAPITAL LETTER N\nFF2F; C; FF4F; # FULLWIDTH LATIN CAPITAL LETTER O\nFF30; C; FF50; # FULLWIDTH LATIN CAPITAL LETTER P\nFF31; C; FF51; # FULLWIDTH LATIN CAPITAL LETTER Q\nFF32; C; FF52; # FULLWIDTH LATIN CAPITAL LETTER R\nFF33; C; FF53; # FULLWIDTH LATIN CAPITAL LETTER S\nFF34; C; FF54; # FULLWIDTH LATIN CAPITAL LETTER T\nFF35; C; FF55; # FULLWIDTH LATIN CAPITAL LETTER U\nFF36; C; FF56; # FULLWIDTH LATIN CAPITAL LETTER V\nFF37; C; FF57; # FULLWIDTH LATIN CAPITAL LETTER W\nFF38; C; FF58; # FULLWIDTH LATIN CAPITAL LETTER X\nFF39; C; FF59; # FULLWIDTH LATIN CAPITAL LETTER Y\nFF3A; C; FF5A; # FULLWIDTH LATIN CAPITAL LETTER Z\n```\n\n----------------------------------------\n\nTITLE: Disabling alloca in SDL\nDESCRIPTION: This CMake snippet checks for the availability of the `alloca.h` header file and the `_alloca` symbol in `malloc.h` (on MSVC). If neither is available, it disables the use of `alloca` in SDL by setting `SDL_DISABLE_ALLOCA` to 1.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_111\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDL_DISABLE_ALLOCA 0)\ncheck_include_file(\"alloca.h\" \"HAVE_ALLOCA_H\")\nif(MSVC)\n  check_include_file(\"malloc.h\" \"HAVE_MALLOC_H\")\n  check_symbol_exists(\"_alloca\" \"malloc.h\" _ALLOCA_IN_MALLOC_H)\n  if(NOT HAVE_ALLOCA_H AND NOT _ALLOCA_IN_MALLOC_H)\n    set(SDL_DISABLE_ALLOCA 1)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Offscreen Video Driver Option (CMake)\nDESCRIPTION: This snippet configures an option to use the offscreen video driver. This is set to ON by default.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_62\n\nLANGUAGE: cmake\nCODE:\n```\nset_option(SDL_OFFSCREEN           \"Use offscreen video driver\" ON)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Illegal Code Position Test - U+DBFF (ed af bf)\nDESCRIPTION: Tests handling of the single UTF-16 surrogate U+DBFF (ed af bf).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Intel Compiler Specific Flags CMake\nDESCRIPTION: This section sets compiler flags for the Intel compiler to suppress specific warnings (division by zero, floating point underflow, and floating-point value does not fit) in certain math library files.  It also skips precompile headers for these files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_87\n\nLANGUAGE: cmake\nCODE:\n```\nif(USE_INTELCC)\n  # warning #39: division by zero\n  # warning #239: floating point underflow\n  # warning #264: floating-point value does not fit in required floating-point type\n  set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/libm/e_exp.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -wd239 -wd264\")\n  set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/libm/e_log.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -wd39\")\n  set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/libm/e_log10.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -wd39\")\n  set_property(SOURCE\n    \"${SDL3_SOURCE_DIR}/src/libm/e_exp.c\"\n    \"${SDL3_SOURCE_DIR}/src/libm/e_log.c\"\n    \"${SDL3_SOURCE_DIR}/src/libm/e_log10.c\"\n    PROPERTY SKIP_PRECOMPILE_HEADERS 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Touchscreens\nDESCRIPTION: These snippets show how to disable the front and back touchscreens individually. This can be useful to customize input behavior on the PS Vita.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-vita.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetHint(SDL_HINT_VITA_ENABLE_FRONT_TOUCH, \"0\");\n```\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetHint(SDL_HINT_VITA_ENABLE_BACK_TOUCH, \"0\");\n```\n\n----------------------------------------\n\nTITLE: Configuring hidapi_netbsd pc file\nDESCRIPTION: This snippet configures the pkg-config (.pc) file for hidapi_netbsd. This allows other build systems to find and use the hidapi library using pkg-config. The configuration is based on the provided input file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/netbsd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nhidapi_configure_pc(\"${PROJECT_ROOT}/pc/hidapi-netbsd.pc.in\")\n```\n\n----------------------------------------\n\nTITLE: Checking for iconv\nDESCRIPTION: This C source code checks if `iconv_open` exists in the standard library or libiconv.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_119\n\nLANGUAGE: c\nCODE:\n```\n#define LIBICONV_PLUG 1 /* in case libiconv header is in include path */\n#include <stddef.h>\n#include <iconv.h>\nint main(int argc, char **argv) {\n    return !iconv_open(NULL,NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Illegal Code Position Test - U+DB7F (ed ad bf)\nDESCRIPTION: Tests handling of the single UTF-16 surrogate U+DB7F (ed ad bf). It should be rejected.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Architecture Detection Code\nDESCRIPTION: This C code determines the target architecture (i686-w64-mingw32 or x86_64-w64-mingw32) by checking the size of a pointer. This is necessary for selecting the correct SDL3 libraries when using MinGW distributions other than MSYS2.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/INTRO-mingw.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#include <stddef.h>\n#include <stdio.h>\nint main() {\n    #if defined(__x86_64__) || defined(_M_X64) || defined(i386) || defined(__i386__) || defined(__i386) || defined(_M_IX86)\n        size_t ptr_size = sizeof(int*);\n        if (4 == ptr_size) puts(\"i686-w64-mingw32\");\n        else if (8 == ptr_size) puts(\"x86_64-w64-mingw32\");\n        else puts(\"Unknown Architecture\");\n    #else\n        puts(\"Unknown Architecture\");\n    #endif\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: C source for math function check (double)\nDESCRIPTION: This C source code is used by CMake's `check_c_source_compiles` to verify the availability of a math function (e.g., isinf, isnan) for `double` arguments.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_115\n\nLANGUAGE: c\nCODE:\n```\n#include <math.h>\nint main() {\n  double d = 3.14159;\n  return ${math_fn}(d);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting hidapi_netbsd target properties\nDESCRIPTION: This snippet sets properties for the hidapi_netbsd target, including the export name, output name, version, and public headers.  These properties configure how the library is built and identified.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/netbsd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(hidapi_netbsd\n    PROPERTIES\n        EXPORT_NAME \"netbsd\"\n        OUTPUT_NAME \"hidapi-netbsd\"\n        VERSION ${PROJECT_VERSION}\n        SOVERSION ${PROJECT_VERSION_MAJOR}\n        PUBLIC_HEADER \"${HIDAPI_PUBLIC_HEADERS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Display HIDAPI Version CMake\nDESCRIPTION: This snippet displays the HIDAPI version if `HIDAPI_PRINT_VERSION` is defined and true. It constructs a version string including the version number and any version suffix.  The version string is then printed as a status message.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/src/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED HIDAPI_PRINT_VERSION AND HIDAPI_PRINT_VERSION)\n    set(HIDAPI_PRINT_VERSION \"hidapi: v${VERSION}\")\n    if(VERSION_SUFFIX)\n        set(HIDAPI_PRINT_VERSION \"${HIDAPI_PRINT_VERSION} (${VERSION_SUFFIX})\")\n    endif()\n    message(STATUS \"${HIDAPI_PRINT_VERSION}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U-001FFFFF (f8 87 bf bf bf)\nDESCRIPTION: Tests the maximum overlong sequence for U-001FFFFF (f8 87 bf bf bf).\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Detect Architecture\nDESCRIPTION: This snippet determines if the architecture is 64-bit by checking CMAKE_SIZEOF_VOID_P and sets ARCH_64 accordingly.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_235\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n  set(ARCH_64 TRUE)\nelse()\n  set(ARCH_64 FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enable Tests\nDESCRIPTION: This snippet checks if SDL_TESTS is enabled and sets HAVE_TESTS to ON if it is.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_234\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_TESTS)\n  set(HAVE_TESTS ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Impossible Bytes Test - fe\nDESCRIPTION: This test case checks for handling of the impossible byte 'fe' in a UTF-8 string. It should be flagged as a malformed sequence.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U+0000 (c0 80)\nDESCRIPTION: Tests overlong representation of the NUL character (U+0000) using c0 80.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: File to Header Conversion Function CMake\nDESCRIPTION: This function, `files2headers`, converts input files (like BMPs) into C header files using a Python script (xxd.py). It creates custom commands to perform the conversion and copy the resulting header files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(files2headers OUTPUT)\n    set(xxd \"${SDL3_SOURCE_DIR}/cmake/xxd.py\")\n    set(inputs ${ARGN})\n    set(outputs )\n    foreach(input IN LISTS inputs)\n        get_filename_component(file_we \"${input}\" NAME_WE)\n        set(intermediate \"${CMAKE_CURRENT_BINARY_DIR}/${file_we}.h\")\n        set(output \"${CMAKE_CURRENT_SOURCE_DIR}/${file_we}.h\")\n        list(APPEND outputs \"${output}\")\n        if(TARGET Python3::Interpreter AND NOT CMAKE_CROSSCOMPILING)\n            list(APPEND outputs  \"${intermediate}\")\n            # Don't add the 'output' header to the output, to avoid marking them as GENERATED\n            # (generated files are removed when running the CLEAN target)\n            add_custom_command(OUTPUT \"${intermediate}\"\n                COMMAND Python3::Interpreter \"${xxd}\" -i \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\" \"-o\" \"${intermediate}\"\n                COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different \"${intermediate}\" \"${output}\"\n                DEPENDS \"${xxd}\" \"${bmp}\"\n            )\n        endif()\n    endforeach()\n    set(${OUTPUT} \"${outputs}\" PARENT_SCOPE)\n    add_custom_target(generate-${OUTPUT} DEPENDS ${outputs})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Project Initialization\nDESCRIPTION: Initializes the CMake project with the name `SDL_cmake_selftest` and specifies that the primary language is C. This sets up the basic project structure for CMake to manage the build process.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/cmake/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(SDL_cmake_selftest LANGUAGES C)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Executable with Arguments\nDESCRIPTION: This snippet adds the `testprocess` SDL test executable, configuring it to run non-interactively in a separate thread.  It passes arguments to the test executable, specifying both interactive and installed argument scenarios using target file properties and installation directories.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sdl_test_executable(testprocess\n    NONINTERACTIVE THREADS\n    NONINTERACTIVE_ARGS $<TARGET_FILE:childprocess>\n    INSTALLED_ARGS \"${CMAKE_INSTALL_FULL_LIBEXECDIR}/installed-tests/SDL3/childprocess${CMAKE_EXECUTABLE_SUFFIX}\"\n    SOURCES testprocess.c\n)\nadd_sdl_test_executable(childprocess SOURCES childprocess.c)\nadd_dependencies(testprocess childprocess)\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 4-byte Missing (U-001FFFFF)\nDESCRIPTION: Tests incomplete 4-byte UTF-8 sequences with the last byte missing for the U-001FFFFF range. This ensures proper error detection for high-range code points.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 6-byte Missing\nDESCRIPTION: Tests the handling of incomplete 6-byte UTF-8 sequences where the last byte is missing. This confirms that the decoder properly identifies the truncated sequence.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing SDL Examples (CMake)\nDESCRIPTION: This CMake snippet installs SDL example executables and associated resource files to the specified destination directory. It handles different installation paths for RISC OS and uses a custom function `SDL_install_pdb` for MSVC to install PDB files.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/examples/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(SDL_INSTALL_EXAMPLES)\n    if(RISCOS)\n        install(\n            FILES ${SDL_EXAMPLE_EXECUTABLES_AIF}\n            DESTINATION ${CMAKE_INSTALL_LIBEXECDIR}/installed-examples/SDL3\n        )\n    else()\n        install(\n            TARGETS ${SDL_EXAMPLE_EXECUTABLES}\n            DESTINATION ${CMAKE_INSTALL_LIBEXECDIR}/installed-examples/SDL3\n        )\n    endif()\n    if(MSVC)\n        foreach(example IN LISTS SDL_EXAMPLE_EXECUTABLES)\n            SDL_install_pdb(${example} \"${CMAKE_INSTALL_LIBEXECDIR}/installed-examples/SDL3\")\n        endforeach()\n    endif()\n    install(\n        FILES ${RESOURCE_FILES}\n        DESTINATION ${CMAKE_INSTALL_LIBEXECDIR}/installed-examples/SDL3\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handle Framework Header Sources\nDESCRIPTION: If building an Apple framework, this appends the test include files to the list of include files and uses `sdl_sources` to handle them.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_226\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_FRAMEWORK)\n  # With Apple frameworks, headers in the PUBLIC_HEADER property also need to be added as sources\n  list(APPEND SDL3_INCLUDE_FILES ${SDL3_TEST_INCLUDE_FILES})\n  sdl_sources(${SDL3_INCLUDE_FILES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Dialog Sources\nDESCRIPTION: This CMake snippet sets the dummy dialog source file if `HAVE_SDL_DIALOG` is not defined. It uses `sdl_sources` to include the specified C file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_216\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_DIALOG)\n  set(SDL_DIALOG_DUMMY 1)\n  sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/dummy/SDL_dummydialog.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 3-byte Missing (U-0000FFFF)\nDESCRIPTION: Tests the handling of incomplete 3-byte UTF-8 sequences where the last byte is missing, specifically for the U-0000FFFF code point range. It validates proper handling of truncated sequences.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Tray Sources\nDESCRIPTION: This CMake snippet sets the dummy tray source files if `HAVE_SDL_TRAY` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_218\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_TRAY)\n  set(SDL_TRAY_DUMMY 1)\n  sdl_glob_sources(${SDL3_SOURCE_DIR}/src/tray/dummy/*.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Impossible Bytes Test - fe fe ff ff\nDESCRIPTION: This test case checks for handling of a sequence of impossible bytes 'fe fe ff ff' in a UTF-8 string. The decoder should recognize the entire sequence as malformed.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Video Sources\nDESCRIPTION: This CMake snippet sets the dummy video driver source files if `HAVE_SDL_VIDEO` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_206\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_VIDEO)\n  set(SDL_VIDEO_DRIVER_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Converting JPG to PPM\nDESCRIPTION: This command uses ImageMagick's convert utility to convert a JPEG image to a PPM (Portable Pixmap) image format. The PPM file is used as the RGB24 input file for testing.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/video/yuv2rgb/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nconvert example.jpg example.ppm\n```\n\n----------------------------------------\n\nTITLE: Setting Dummy Misc Sources\nDESCRIPTION: This CMake snippet sets the dummy misc source files if `HAVE_SDL_MISC` is not defined. It uses `sdl_glob_sources` to include all C files in the specified directory.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_215\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_SDL_MISC)\n  set(SDL_MISC_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/dummy/*.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling libusb for HIDAPI\nDESCRIPTION: Cross-compiles libusb for use with HIDAPI on an embedded Linux target. It configures the build for the target architecture, builds the library, and installs it into the staging directory. Requires the `HOST` and `STAGING` environment variables to be set.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.autotools.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./configure --host=$HOST --prefix=$STAGING\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Key Event Structure Access - Before\nDESCRIPTION: This code snippet demonstrates how to access key event data in older versions of SDL using the `keysym` member of the `event.key` structure.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-migration.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nSDL_Event event;\nSDL_Keycode key = event.key.keysym.sym;\nSDL_Keymod mod = event.key.keysym.mod;\n```\n\n----------------------------------------\n\nTITLE: Installing Autotools on FreeBSD\nDESCRIPTION: Installs autotools and GNU make on FreeBSD using pkg_add. GNU make is required in addition to autotools.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.autotools.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npkg_add -r autotools\n```\n\nLANGUAGE: sh\nCODE:\n```\npkg_add -r gmake\n```\n\n----------------------------------------\n\nTITLE: Checking for Swift Language Support\nDESCRIPTION: Checks for Swift compiler and enables Swift language support for Apple platforms. This conditionally includes Swift if the platform is macOS or iOS and the Swift compiler is available.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/cmake/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE AND CMAKE_SYSTEM_NAME MATCHES \".*(Darwin|MacOS).*\")\n    # multiple values for CMAKE_OSX_ARCHITECTURES not supported with Swift\n    list(LENGTH CMAKE_OSX_ARCHITECTURES count_osx_archs)\n    if(count_osx_archs LESS_EQUAL 1)\n        check_language(Swift)\n        if(CMAKE_Swift_COMPILER)\n            enable_language(Swift)\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Autotools on Ubuntu\nDESCRIPTION: Installs autoconf, automake, and libtool on Ubuntu using APT. This provides the necessary tools for building HIDAPI with Autotools.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/BUILD.autotools.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install autoconf automake libtool\n```\n\n----------------------------------------\n\nTITLE: Set minimum CMake version\nDESCRIPTION: This command sets the minimum required version of CMake for the project to 3.4.3, up to 3.25. If the CMake version is outside this range, it will result in a fatal error.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/mac/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.3...3.25 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Displaying GPL Notice in Interactive Programs\nDESCRIPTION: This snippet illustrates how to display a short GPL notice when a program starts in an interactive mode.  It informs the user about the absence of warranty and the ability to redistribute the software under certain conditions.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/LICENSE-gpl3.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Attaching GPL Notices to Source Files\nDESCRIPTION: This snippet shows the recommended format for attaching GPL notices to the start of each source file in a program.  It includes the program's name, copyright information, and a statement about being free software under the GNU GPL.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/src/hidapi/LICENSE-gpl3.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Configuring Wayland Test Executable\nDESCRIPTION: This snippet conditionally adds and configures a Wayland test executable (`testwaylandcustom`) if Wayland support is enabled (`HAVE_WAYLAND`). It sets the GENERATED property for the Wayland protocol file, adds the test executable with the protocol file as a source, disables documentation warnings, and links against the `wayland-client` library.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif (HAVE_WAYLAND)\n    # Set the GENERATED property on the protocol file, since it is first created at build time\n    set_property(SOURCE ${SDL3_BINARY_DIR}/wayland-generated-protocols/xdg-shell-protocol.c PROPERTY GENERATED 1)\n    add_sdl_test_executable(testwaylandcustom NO_C90 NEEDS_RESOURCES SOURCES testwaylandcustom.c ${SDL3_BINARY_DIR}/wayland-generated-protocols/xdg-shell-protocol.c)\n    # Needed to silence the documentation warning in the generated header file\n    target_compile_options(testwaylandcustom PRIVATE -Wno-documentation-unknown-command)\n    target_link_libraries(testwaylandcustom PRIVATE wayland-client)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documenting Categories (C)\nDESCRIPTION: This C code snippet shows the required format for the first Doxygen-style comment in a header file to document a category. The comment must start with `/** * # CategoryABC`.  The text within this comment will be used to populate the top section of the corresponding wiki Category page. The content is treated as markdown.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-documentation-rules.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n/**\n * # CategoryABC\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Overlong Sequence Test - U-0000007F (c1 bf)\nDESCRIPTION: Tests the maximum overlong sequence for U-0000007F (c1 bf). It should be rejected.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Platform Detection Macro Definition C++\nDESCRIPTION: Defines platform-specific macros for GDK and Windows GDK. SDL_PLATFORM_GDK is defined on every GDK platform, while SDL_PLATFORM_WINGDK is defined specifically on Windows GDK. This allows conditional compilation based on the target GDK platform.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-gdk.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#define SDL_PLATFORM_GDK\n#define SDL_PLATFORM_WINGDK\n```\n\n----------------------------------------\n\nTITLE: Building SDL Library for PS2 with CMake\nDESCRIPTION: This snippet shows how to build the SDL library for the PS2 using CMake. It configures the build with the PS2 toolchain and installs the library.  The `PS2DEV` environment variable must be set to the PS2 SDK installation path.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-ps2.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PS2DEV/ps2sdk/ps2dev.cmake\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: Building SDL for PS Vita using CMake\nDESCRIPTION: This script demonstrates how to build SDL for the PS Vita using CMake. It sets the toolchain file, build type, and performs build and install steps. The environment variable VITASDK must be set to the location of the Vita SDK.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-vita.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_TOOLCHAIN_FILE=${VITASDK}/share/vita.toolchain.cmake -DCMAKE_BUILD_TYPE=Release\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenGL for Vita PVR Hint\nDESCRIPTION: This code snippet shows how to enable OpenGL support for the Vita PVR.  This requires gl4es4vita to be present in your SDK. You need to set this hint before video subsystem initialization.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-vita.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetHint(SDL_HINT_VITA_PVR_OPENGL, \"1\");\n```\n\n----------------------------------------\n\nTITLE: Building SDL as a Universal library on macOS\nDESCRIPTION: This snippet demonstrates how to build SDL as a Universal library (supporting both Intel and ARM architectures) on macOS using CMake. It configures the build with specific architectures and a deployment target before building and installing.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-macos.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake .. \"-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64\" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13\ncmake --build .\nsudo cmake --install .\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Incomplete Sequence Test - 4-byte Missing\nDESCRIPTION: Tests the handling of incomplete 4-byte UTF-8 sequences where the last byte is missing. It checks that the decoder correctly identifies the truncated sequence.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/test/utf8.txt#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Valgrind Wrapper Script (Shell)\nDESCRIPTION: This shell script is a wrapper for running an Android application with Valgrind for memory debugging. It sets the TMPDIR environment variable, executes Valgrind with specific options (logging to a file on the SD card and disabling the error limit), and then runs the application.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/docs/README-android.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\n#!/system/bin/sh\nexport TMPDIR=/data/data/org.libsdl.app\nexec /data/local/Inst/bin/valgrind --log-file=/sdcard/valgrind.log --error-limit=no $*\n```\n\n----------------------------------------\n\nTITLE: Setting Default Pthreads Option\nDESCRIPTION: Sets the default for using pthreads.  Defaults to ON on UNIX or macOS unless it's Emscripten, in which case it defaults to OFF.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif (UNIX_OR_MAC_SYS AND NOT EMSCRIPTEN)\n  set(SDL_PTHREADS_DEFAULT ON)\nelse()\n  set(SDL_PTHREADS_DEFAULT OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for LSX support with GCC/Clang\nDESCRIPTION: This CMake snippet checks if the compiler (GCC or Clang) supports Loongson Extension (LSX) instructions. It attempts to compile a simple C program that checks for the `__loongarch_sx` macro, and also checks for the existence of the `lsxintrin.h` header file. If both checks are successful, it sets the `HAVE_LSX` variable to `TRUE` and sets compile options for a specific source file.\nSOURCE: https://github.com/libsdl-org/sdl/blob/main/CMakeLists.txt#_snippet_106\n\nLANGUAGE: cmake\nCODE:\n```\nif(SDL_LSX)\n      cmake_push_check_state()\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -mlsx\")\n      check_c_source_compiles(\"\n          #ifndef __loongarch_sx\n          #error Assembler CPP flag not enabled\n          #endif\n          int main(int argc, char **argv) { return 0; }\" COMPILER_SUPPORTS_LSX)\n      check_include_file(\"lsxintrin.h\" HAVE_LSXINTRIN_H)\n      cmake_pop_check_state()\n\n      if(COMPILER_SUPPORTS_LSX AND HAVE_LSXINTRIN_H)\n        set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/video/yuv2rgb/yuv_rgb_lsx.c\" APPEND PROPERTY COMPILE_OPTIONS \"-mlsx\")\n        set(HAVE_LSX TRUE)\n      endif()\n    endif()\n```"
  }
]