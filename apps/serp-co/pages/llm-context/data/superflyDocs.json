[
  {
    "owner": "superfly",
    "repo": "docs",
    "content": "TITLE: Accessing DATABASE_URL in Prisma\nDESCRIPTION: This snippet shows how to access the DATABASE_URL environment variable in a Prisma schema file. It demonstrates the recommended way to configure database connections in Prisma ORM.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/database.html.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = env(\"DATABASE_URL\")\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Fly Machine with Interactive Shell\nDESCRIPTION: Command to create a temporary Fly Machine using the Dockerfile in the current directory and log into an interactive shell. The Machine is deleted upon logging out.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --shell\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Processes in fly.toml\nDESCRIPTION: Configuration for defining multiple processes (app and worker) in the fly.toml file to run background jobs separately from the main application.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[processes]\napp = \"/app/bin/server\"\nworker = \"/app/bin/worker\"\n```\n\n----------------------------------------\n\nTITLE: Deploying the App to Fly.io\nDESCRIPTION: Deploys the Django application to Fly.io using the fly deploy command.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_15\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Scaling App and Worker Processes in Fly\nDESCRIPTION: Command to scale the number of app and worker processes in a Fly application, allowing independent scaling of web servers and background workers.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/sidekiq.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly scale count app=3 worker=3\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Environment Variables in Fly\nDESCRIPTION: Command to set sensitive environment variables as secrets in Fly. This allows you to store confidential information like passwords that cannot be viewed except when the container is running.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/configuration.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set SUPER_SECRET_KEY=password1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Process in fly.toml\nDESCRIPTION: This snippet shows how to add a cron process to the fly.toml configuration file. It defines two process groups: 'app' for the web server and 'cron' for running the cron daemon.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/cron-and-queues.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[processes]\n  app = \"\"\n  cron = \"cron -f\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Rails Application on Fly.io\nDESCRIPTION: The fly launch command creates a new application on Fly.io, prompting for configuration options including app name, organization, region, and database setup.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch\n```\n\nLANGUAGE: output\nCODE:\n```\nCreating app in ~/list\nScanning source code\nDetected a Rails app\n? Choose an app name (leave blank to generate one): list\n? Select Organization: John Smith (personal)\n? Choose a region for deployment: Ashburn, Virginia (US) (iad)\nCreated app list in organization personal\nAdmin URL: https://fly.io/apps/list\nHostname: list.fly.dev\nSet secrets on list: RAILS_MASTER_KEY\n? Would you like to set up a Postgresql database now? Yes\nFor pricing information visit: https://fly.io/docs/about/pricing/#postgresql-clu\n? Select configuration: Development - Single node, 1x shared CPU, 256MB RAM, 1GB disk\nCreating postgres cluster in organization personal\n\n. . .\n\nPostgres cluster list-db is now attached to namelist\n? Would you like to set up an Upstash Redis database now? Yes\n? Select an Upstash Redis plan Free: 100 MB Max Data Size\n\nYour Upstash Redis database namelist-redis is ready.\n\n. . .\n\n      create  Dockerfile\n      create  .dockerignore\n      create  bin/docker-entrypoint\n      create  config/dockerfile.yml\nWrote config file fly.toml\n\nYour Rails app is prepared for deployment.\n\nBefore proceeding, please review the posted Rails FAQ:\nhttps://fly.io/docs/rails/getting-started/dockerfiles/.\n\nOnce ready: run 'fly deploy' to deploy your Rails app.\n```\n\n----------------------------------------\n\nTITLE: Available Options for fly deploy Command\nDESCRIPTION: Comprehensive list of options available for the fly deploy command, including application configuration, build settings, deployment strategies, machine specifications, and more.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                       Application name\n      --build-arg stringArray            Set of build time variables in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --build-only                       Build but do not deploy\n      --build-secret stringArray         Set of build secrets of NAME=VALUE pairs. Can be specified multiple times. See https://docs.docker.com/engine/reference/commandline/buildx_build/#secret\n      --build-target string              Set the target build stage to build if the Dockerfile has more than one stage\n      --buildpacks-docker-host string    Address to docker daemon that will be exposed to the build container.\n                                         If not set (or set to empty string) the standard socket location will be used.\n                                         Special value 'inherit' may be used in which case DOCKER_HOST environment variable will be used.\n                                         This option may set DOCKER_HOST environment variable for the build container if needed.\n                                         \n      --buildpacks-volume strings        Mount host volume into the build container, in the form '<host path>:<target path>[:<options>]'.\n                                         - 'host path': Name of the volume or absolute directory path to mount.\n                                         - 'target path': The path where the file or directory is available in the container.\n                                         - 'options' (default \"ro\"): An optional comma separated list of mount options.\n                                             - \"ro\", volume contents are read-only.\n                                             - \"rw\", volume contents are readable and writeable.\n                                             - \"volume-opt=<key>=<value>\", can be specified more than once, takes a key-value pair consisting of the option name and its value.\n                                         Repeat for each volume in order (comma-separated lists not accepted)\n                                         \n  -c, --config string                    Path to application configuration file\n      --deploy-retries string            Number of times to retry a deployment if it fails (default \"auto\")\n      --depot string[=\"true\"]            Deploy using depot to build the image (default \"auto\")\n      --depot-scope string               The scope of the Depot builder's cache to use (org or app) (default \"org\")\n      --detach                           Return immediately instead of monitoring deployment progress\n      --dns-checks                       Perform DNS checks during deployment (default true)\n      --dockerfile string                Path to a Dockerfile. Defaults to the Dockerfile in the working directory.\n  -e, --env stringArray                  Set of environment variables in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --exclude-machines strings         Deploy to all machines except machines with these IDs. Multiple IDs can be specified with comma separated values or by providing the flag multiple times.\n      --exclude-regions strings          Deploy to all machines except machines in these regions. Multiple regions can be specified with comma separated values or by providing the flag multiple times.\n      --file-literal stringArray         Set of literals in the form of /path/inside/machine=VALUE pairs where VALUE is the content. Can be specified multiple times.\n      --file-local stringArray           Set of files in the form of /path/inside/machine=<local/path> pairs. Can be specified multiple times.\n      --file-secret stringArray          Set of secrets in the form of /path/inside/machine=SECRET pairs where SECRET is the name of the secret. Can be specified multiple times.\n      --flycast                          Allocate a private IPv6 addresses\n      --ha                               Create spare machines that increases app availability (default true)\n  -h, --help                             help for deploy\n      --host-dedication-id string        The dedication id of the reserved hosts for your organization (if any)\n      --https-failover                   Determines whether to failover to plain internet(https) communication with remote builders if wireguard fails (default true)\n      --ignorefile string                Path to a Docker ignore file. Defaults to the .dockerignore file in the working directory.\n  -i, --image string                     The Docker image to deploy\n      --image-label string               Image label to use when tagging and pushing to the fly registry. Defaults to \"deployment-{timestamp}\".\n      --label stringArray                Add custom metadata to an image via docker labels\n      --lease-timeout string             Time duration to lease individual machines while running deployment. All machines are leased at the beginning and released at the end.The lease is refreshed periodically for this same time, which is why it is short.flyctl releases leases in most cases. (default \"13s\")\n      --local-only                       Perform builds locally using the local docker daemon. The default is --remote-only.\n      --max-concurrent int               Maximum number of machines to operate on concurrently. (default 8)\n      --max-unavailable float            Max number of unavailable machines during rolling updates. A number between 0 and 1 means percent of total machines (default 0.33)\n      --nixpacks                         Deploy using nixpacks to build the image\n      --no-cache                         Do not use the build cache when building the image\n      --no-public-ips                    Do not allocate any new public IP addresses\n      --now                              Deploy now without confirmation\n      --only-machines strings            Deploy to machines only with these IDs. Multiple IDs can be specified with comma separated values or by providing the flag multiple times.\n      --primary-region string            Override primary region in fly.toml configuration.\n      --process-groups strings           Deploy to machines only in these process groups\n      --push                             Push image to registry after build is complete\n      --recreate-builder                 Recreate the builder app, if it exists\n      --regions strings                  Deploy to machines only in these regions. Multiple regions can be specified with comma separated values or by providing the flag multiple times.\n      --release-command-timeout string   Time duration to wait for a release command finish running, or 'none' to disable. (default \"5m0s\")\n      --remote-only                      Perform builds on a remote builder instance instead of using the local docker daemon. This is the default. Use --local-only to build locally.\n  -s, --signal string                    Signal to stop the machine with for bluegreen strategy (default: SIGINT)\n      --skip-release-command             Do not run the release command during deployment.\n      --smoke-checks                     Perform smoke checks during deployment (default true)\n      --strategy string                  The strategy for replacing running instances. Options are canary, rolling, bluegreen, or immediate. The default strategy is rolling.\n      --update-only                      Do not create Machines for new process groups\n      --vm-cpu-kind string               The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                      Number of CPUs\n      --vm-gpu-kind string               If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                      Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string                 Memory (in megabytes) to attribute to the VM\n      --vm-size string                   The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n      --volume-initial-size int          The initial size in GB for volumes created on first deploy\n      --wait-timeout string              Time duration to wait for individual machines to transition states and become healthy. (default \"5m0s\")\n      --wg                               Determines whether communication with remote builders are conducted over wireguard or plain internet(https) (default true)\n  -y, --yes                              Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Verifying Rails Installation and Creating New Application\nDESCRIPTION: Commands to check Rails version and create a new Rails application with PostgreSQL database.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-record.html.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ rails --version\n$ rails new list --database postgresql\n$ cd list\n```\n\n----------------------------------------\n\nTITLE: Database Migration Configuration\nDESCRIPTION: TOML configuration for automatic database migrations after deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/deployments.html.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n  release_command = './bin/rails db:prepare'\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Cluster Creation Command\nDESCRIPTION: The basic command syntax for creating a new Postgres cluster using Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres create [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Dockerfile for Multi-Process Testing\nDESCRIPTION: A basic Dockerfile that sets up a Go application environment for testing multiple processes. The container includes bash and curl installations and builds a Go application, but doesn't actually run the application yet.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM golang\n\nRUN apt-get update && \\\n    apt-get install -y \\\n        bash \\\n        curl\n\nRUN mkdir /app\nWORKDIR /app\nADD go.* *.go /app/\nRUN go build\n\nCMD tail -f /dev/null\n```\n\n----------------------------------------\n\nTITLE: Fly.io Launch Command Options Reference\nDESCRIPTION: A comprehensive listing of all command-line flags and options available for the 'launch' command in the Fly.io CLI. The options cover application configuration, build settings, deployment strategies, resource allocation, networking, and various other deployment-related settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_launch.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n~~~\n      --attach                           Attach this new application to the current application\n      --auto-stop string                 Automatically suspend the app after a period of inactivity. Valid values are 'off', 'stop', and 'suspend (default \"stop\")\n      --build-arg stringArray            Set of build time variables in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --build-only                       Build but do not deploy\n      --build-secret stringArray         Set of build secrets of NAME=VALUE pairs. Can be specified multiple times. See https://docs.docker.com/engine/reference/commandline/buildx_build/#secret\n      --build-target string              Set the target build stage to build if the Dockerfile has more than one stage\n      --buildpacks-docker-host string    Address to docker daemon that will be exposed to the build container.\n                                         If not set (or set to empty string) the standard socket location will be used.\n                                         Special value 'inherit' may be used in which case DOCKER_HOST environment variable will be used.\n                                         This option may set DOCKER_HOST environment variable for the build container if needed.\n                                         \n      --buildpacks-volume strings        Mount host volume into the build container, in the form '<host path>:<target path>[:<options>]'.\n                                         - 'host path': Name of the volume or absolute directory path to mount.\n                                         - 'target path': The path where the file or directory is available in the container.\n                                         - 'options' (default \"ro\"): An optional comma separated list of mount options.\n                                             - \"ro\", volume contents are read-only.\n                                             - \"rw\", volume contents are readable and writeable.\n                                             - \"volume-opt=<key>=<value>\", can be specified more than once, takes a key-value pair consisting of the option name and its value.\n                                         Repeat for each volume in order (comma-separated lists not accepted)\n                                         \n  -c, --config string                    Path to application configuration file\n      --copy-config                      Use the configuration file if present without prompting\n      --deploy-retries string            Number of times to retry a deployment if it fails (default \"auto\")\n      --depot string[=\"true\"]            Deploy using depot to build the image (default \"auto\")\n      --depot-scope string               The scope of the Depot builder's cache to use (org or app) (default \"org\")\n      --detach                           Return immediately instead of monitoring deployment progress\n      --dns-checks                       Perform DNS checks during deployment (default true)\n      --dockerfile string                Path to a Dockerfile. Defaults to the Dockerfile in the working directory.\n      --dockerignore-from-gitignore      If a .dockerignore does not exist, create one from .gitignore files\n  -e, --env stringArray                  Set of environment variables in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --exclude-machines strings         Deploy to all machines except machines with these IDs. Multiple IDs can be specified with comma separated values or by providing the flag multiple times.\n      --exclude-regions strings          Deploy to all machines except machines in these regions. Multiple regions can be specified with comma separated values or by providing the flag multiple times.\n      --file-literal stringArray         Set of literals in the form of /path/inside/machine=VALUE pairs where VALUE is the content. Can be specified multiple times.\n      --file-local stringArray           Set of files in the form of /path/inside/machine=<local/path> pairs. Can be specified multiple times.\n      --file-secret stringArray          Set of secrets in the form of /path/inside/machine=SECRET pairs where SECRET is the name of the secret. Can be specified multiple times.\n      --flycast                          Allocate a private IPv6 addresses\n      --from string                      A github repo URL to use as a template for the new app\n      --generate-name                    Always generate a name for the app, without prompting\n      --ha                               Create spare machines that increases app availability (default true)\n  -h, --help                             help for launch\n      --host-dedication-id string        The dedication id of the reserved hosts for your organization (if any)\n      --https-failover                   Determines whether to failover to plain internet(https) communication with remote builders if wireguard fails (default true)\n      --ignorefile string                Path to a Docker ignore file. Defaults to the .dockerignore file in the working directory.\n  -i, --image string                     The Docker image to deploy\n      --image-label string               Image label to use when tagging and pushing to the fly registry. Defaults to \"deployment-{timestamp}\".\n      --internal-port int                Set internal_port for all services in the generated fly.toml (default -1)\n      --into string                      Destination directory for github repo specified with --from\n      --json                             Generate configuration in JSON format\n      --label stringArray                Add custom metadata to an image via docker labels\n      --lease-timeout string             Time duration to lease individual machines while running deployment. All machines are leased at the beginning and released at the end.The lease is refreshed periodically for this same time, which is why it is short.flyctl releases leases in most cases. (default \"13s\")\n      --local-only                       Perform builds locally using the local docker daemon. The default is --remote-only.\n      --max-concurrent int               Maximum number of machines to operate on concurrently. (default 8)\n      --max-unavailable float            Max number of unavailable machines during rolling updates. A number between 0 and 1 means percent of total machines (default 0.33)\n      --name string                      Name of the new app\n      --nixpacks                         Deploy using nixpacks to build the image\n      --no-cache                         Do not use the build cache when building the image\n      --no-create                        Do not create an app, only generate configuration files\n      --no-db                            Skip automatically provisioning a database\n      --no-deploy                        Do not immediately deploy the new app after fly launch creates and configures it\n      --no-object-storage                Skip automatically provisioning an object storage bucket\n      --no-public-ips                    Do not allocate any new public IP addresses\n      --no-redis                         Skip automatically provisioning a Redis instance\n      --now                              Deploy now without confirmation\n      --only-machines strings            Deploy to machines only with these IDs. Multiple IDs can be specified with comma separated values or by providing the flag multiple times.\n  -o, --org string                       The target Fly.io organization\n      --path string                      Path to the app source root, where fly.toml file will be saved (default \".\")\n      --primary-region string            Override primary region in fly.toml configuration.\n      --process-groups strings           Deploy to machines only in these process groups\n      --push                             Push image to registry after build is complete\n      --recreate-builder                 Recreate the builder app, if it exists\n  -r, --region string                    The target region (see 'flyctl platform regions')\n      --regions strings                  Deploy to machines only in these regions. Multiple regions can be specified with comma separated values or by providing the flag multiple times.\n      --release-command-timeout string   Time duration to wait for a release command finish running, or 'none' to disable. (default \"5m0s\")\n      --remote-only                      Perform builds on a remote builder instance instead of using the local docker daemon. This is the default. Use --local-only to build locally.\n  -s, --signal string                    Signal to stop the machine with for bluegreen strategy (default: SIGINT)\n      --smoke-checks                     Perform smoke checks during deployment (default true)\n      --strategy string                  The strategy for replacing running instances. Options are canary, rolling, bluegreen, or immediate. The default strategy is rolling.\n      --vm-cpu-kind string               The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                      Number of CPUs\n      --vm-gpu-kind string               If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                      Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string                 Memory (in megabytes) to attribute to the VM\n      --vm-size string                   The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n      --volume-initial-size int          The initial size in GB for volumes created on first deploy\n      --wait-timeout string              Time duration to wait for individual machines to transition states and become healthy. (default \"5m0s\")\n~~~\n```\n\n----------------------------------------\n\nTITLE: Using the fly config env Command\nDESCRIPTION: This command displays an app's runtime environment variables, including secrets and config file defined variables. It supports various options for specifying the app and configuration file.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config_env.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly config env [flags]\n```\n\n----------------------------------------\n\nTITLE: Accessing Rails Console via SSH in Fly.io\nDESCRIPTION: Command to launch an interactive Rails console in a production environment on Fly.io. Uses the fly ssh console command with the --pty flag to allocate a pseudo-terminal for interactive use.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/run-tasks-and-consoles.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console --pty -C \"/rails/bin/rails console\"\n```\n\nLANGUAGE: output\nCODE:\n```\nLoading production environment (Rails 7.0.4.2)\nirb(main):001:0>\n```\n\n----------------------------------------\n\nTITLE: Transferring Environment Variables from Heroku to Fly.io\nDESCRIPTION: This command exports environment variables from Heroku, filters out specific variables that Fly.io manages differently, and imports them as secrets in Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nheroku config -s | grep -v -e \"RAILS_MASTER_KEY\" -e \"DATABASE_URL\" -e \"REDIS_URL\" -e \"REDIS_TLS_URL\" | fly secrets import\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Launch Command\nDESCRIPTION: The basic usage syntax for the 'fly launch' command which initializes a new Fly.io application. This command creates and configures a new app from source code or a Docker image, with support for passing additional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_launch.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly launch [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly secrets import' Command in Fly.io CLI\nDESCRIPTION: This command imports encrypted secrets for a Fly.io application. It reads NAME=VALUE pairs from stdin and sets them as application secrets. The command supports various flags for specifying the application, configuration file, and deployment options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_import.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly secrets import [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Machine with Custom Entrypoint and CMD\nDESCRIPTION: Command to run a Debian Machine with a custom entrypoint script and CMD. It uses the --file-local option to copy a local script to the Machine and sets it as the entrypoint.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run debian --file-local /entrypoint.sh=./entrypoint.sh \\\n                       --entrypoint \"/entrypoint.sh\" \\\n                       sleep inf\n```\n\n----------------------------------------\n\nTITLE: Installing flyctl CLI for Fly.io\nDESCRIPTION: Command to install the Fly.io CLI (flyctl). This is a reference to the installation documentation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[install flyctl](/docs/flyctl/install/)\n```\n\n----------------------------------------\n\nTITLE: Setting a Secret Using fly secrets set Command\nDESCRIPTION: This command demonstrates how to set a single secret using the fly secrets set command. It sets a SECRET_KEY with a specified value.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/secrets.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set SECRET_KEY=YOURSECRETKEYGOESHERE\n```\n\n----------------------------------------\n\nTITLE: Running Fly Machine with Existing Docker Image\nDESCRIPTION: Command to run a Fly Machine using an existing Docker image from a remote registry. This example uses a Livebook image from GitHub Container Registry.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run ghcr.io/livebook-dev/livebook:0.11.4\n```\n\n----------------------------------------\n\nTITLE: Sample Entrypoint Script for Fly Machine\nDESCRIPTION: A simple bash script that can be used as a custom entrypoint for a Fly Machine. It prints a message and then executes any additional commands passed to it.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#! /bin/bash\n\necho \"Hello from my Fly Machine\"\n\nexec \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Generating Scaffold for Name Model\nDESCRIPTION: Rails command to generate a scaffold for a Name model with a single 'name' attribute.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-record.html.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/rails generate scaffold Name name\n```\n\n----------------------------------------\n\nTITLE: Opening Deployed Rails Application\nDESCRIPTION: Command to open the deployed Rails application in a web browser using Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-record.html.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrency Settings in TOML for Fly.io Web Service\nDESCRIPTION: TOML configuration example showing how to set concurrency limits for a web service. Defines soft and hard limits for request handling, with a soft limit of 20 concurrent requests and a hard limit of 25 requests.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/load-balancing.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n  [services.concurrency]\n    type = \"requests\"\n    hard_limit = 25\n    soft_limit = 20\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Create Command Syntax\nDESCRIPTION: The basic syntax for creating a Fly machine without starting it, which requires an image name and optionally a command to run.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine create <image> [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Fly.io Deployment\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to automatically deploy a Fly.io app when changes are pushed to the master branch. It uses the Fly.io GitHub Action to handle the deployment process.\nSOURCE: https://github.com/superfly/docs/blob/main/launch/continuous-deployment-with-github-actions.html.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Fly Deploy\non:\n  push:\n    branches:\n      - master    # change to main if needed\njobs:\n  deploy:\n    name: Deploy app\n    runs-on: ubuntu-latest\n    concurrency: deploy-group    # optional: ensure only one action runs at a time\n    steps:\n      - uses: actions/checkout@v4\n      - uses: superfly/flyctl-actions/setup-flyctl@master\n      - run: flyctl deploy --remote-only\n        env:\n          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to a Fly Machine\nDESCRIPTION: Shows how to add custom metadata to a Fly Machine. This example sets platform version, process group, and custom metadata values.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --metadata fly_platform_version=v2 \\\n                  --metadata fly_process_group=app \\\n                  --metadata my_metadata=mineallmine\n```\n\n----------------------------------------\n\nTITLE: Configuring Knex.js for PostgreSQL\nDESCRIPTION: This snippet shows the configuration for Knex.js ORM to connect to a PostgreSQL database. It uses the DATABASE_URL environment variable as the connection string.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/database.html.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  client: 'pg',\n  connection: process.env.DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Available Options for fly machine run Command\nDESCRIPTION: Comprehensive list of all available options for the 'fly machine run' command, including app configuration, networking, resources, and lifecycle management flags. These options allow for detailed customization of machine deployments.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_run.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                  Application name\n      --autostart                   Automatically start a stopped Machine when a network request is received (default true)\n      --autostop string[=\"stop\"]    Automatically stop a Machine when there are no network requests for it. Options include 'off', 'stop', and 'suspend'. (default \"off\")\n      --build-depot                 Build your image with depot.dev\n      --build-nixpacks              Build your image with nixpacks\n      --command string              Used with --shell. The command to run, if we're shelling into the Machine now (in case you don't have bash). (default \"/bin/bash\")\n  -c, --config string               Path to application configuration file\n      --detach                      Return immediately instead of monitoring deployment progress\n      --dockerfile string           The path to a Dockerfile. Defaults to the Dockerfile in the working directory.\n      --entrypoint string           The command to override the Docker ENTRYPOINT.\n  -e, --env stringArray             Set of environment variables in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --file-literal stringArray    Set of literals to write to the Machine, in the form of /path/inside/machine=VALUE pairs, where VALUE is the base64-encoded raw content. Can be specified multiple times.\n      --file-local stringArray      Set of files to write to the Machine, in the form of /path/inside/machine=<local/path> pairs. Can be specified multiple times.\n      --file-secret stringArray     Set of secrets to write to the Machine, in the form of /path/inside/machine=SECRET pairs, where SECRET is the name of the secret. The content of the secret must be base64 encoded. Can be specified multiple times.\n  -h, --help                        help for run\n      --host-dedication-id string   The dedication id of the reserved hosts for your organization (if any)\n      --id string                   Machine ID, if previously known\n      --kernel-arg stringArray      A list of kernel arguments to provide to the init. Can be specified multiple times.\n      --machine-config string       Read machine config from json file or string\n  -m, --metadata stringArray        Metadata in the form of NAME=VALUE pairs. Can be specified multiple times.\n  -n, --name string                 Machine name. Will be generated if omitted.\n      --org string                  The organization that will own the app\n  -p, --port strings                The external ports and handlers for services, in the format: port[:machinePort][/protocol[:handler[:handler...]]])\n                                    \tFor example: --port 80/tcp --port 443:80/tcp:http:tls --port 5432/tcp:pg_tls\n                                    \tTo remove a port mapping use '-' as handler. For example: --port 80/tcp:-\n  -r, --region string               The target region (see 'flyctl platform regions')\n      --restart string              Set the restart policy for a Machine. Options include 'no', 'always', and 'on-fail'.\n                                    \tDefault is 'on-fail' for Machines created by 'fly deploy' and Machines with a schedule. Default is 'always' for Machines created by 'fly m run'.\n      --rm                          Automatically remove the Machine when it exits. Sets the restart-policy to 'never' if not otherwise specified.\n      --schedule string             Schedule a Machine run at hourly, daily and monthly intervals\n      --shell                       Open a shell on the Machine once created (implies --it --rm). If no app is specified, a temporary app is created just for this Machine and destroyed when the Machine is destroyed. See also --command and --user.\n      --skip-dns-registration       Do not register the machine's 6PN IP with the internal DNS system\n      --standby-for strings         For Machines without services, a comma separated list of Machine IDs to act as standby for.\n      --use-zstd                    Enable zstd compression for the image\n      --user string                 Used with --shell. The username, if we're shelling into the Machine now. (default \"root\")\n      --vm-cpu-kind string          The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                 Number of CPUs\n      --vm-gpu-kind string          If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                 Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string            Memory (in megabytes) to attribute to the VM\n      --vm-size string              The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n  -v, --volume strings              Volume to mount, in the form of <volume_id_or_name>:/path/inside/machine[:<options>]\n      --wg                          Determines whether communication with remote builders are conducted over wireguard or plain internet(https) (default true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting with Arcjet in Node.js\nDESCRIPTION: TypeScript example showing how to integrate Arcjet rate limiting protection into a Node.js HTTP server. This uses the token bucket algorithm to limit requests based on user ID.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { tokenBucket } from \"@arcjet/node\";\nimport http from \"node:http\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!, // Set as a secret on your Fly app\n  rules: [\n    // Create a token bucket rate limit. Other algorithms are supported.\n    tokenBucket({\n      mode: \"LIVE\", // will block requests. Use \"DRY_RUN\" to log only\n      characteristics: [\"userId\"], // track requests by a custom user ID\n      refillRate: 5, // refill 5 tokens per interval\n      interval: 10, // refill every 10 seconds\n      capacity: 10, // bucket maximum capacity of 10 tokens\n    }),\n  ],\n});\n\nconst server = http.createServer(async function (\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n) {\n  const userId = \"user123\"; // Replace with your authenticated user ID\n  const decision = await aj.protect(req, { userId, requested: 5 }); // Deduct 5 tokens from the bucket\n  console.log(\"Arcjet decision\", decision);\n\n  if (decision.isDenied()) {\n    res.writeHead(429, { \"Content-Type\": \"application/json\" });\n    res.end(\n      JSON.stringify({ error: \"Too Many Requests\", reason: decision.reason }),\n    );\n  } else {\n    res.writeHead(200, { \"Content-Type\": \"application/json\" });\n    res.end(JSON.stringify({ message: \"Hello world\" }));\n  }\n});\n\nserver.listen(8000);\n```\n\n----------------------------------------\n\nTITLE: Launching Rails App with Fly CLI\nDESCRIPTION: Use the 'fly launch' command to set up a new Rails application on Fly.io. This interactive process allows you to configure app name, organization, region, and optional PostgreSQL and Redis databases.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Running Django Management Command on Fly.io\nDESCRIPTION: Executes a Django management command (createsuperuser) directly on the Fly.io server using SSH.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/existing.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh console --pty -C 'python /code/manage.py createsuperuser'\n```\n\n----------------------------------------\n\nTITLE: Creating and Mounting a Fly Volume to a Machine\nDESCRIPTION: Demonstrates how to create a Fly Volume and mount it to a Machine. This example creates a 10GB volume named 'data_volume' and mounts it to a new Machine in the same region.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_12\n\nLANGUAGE: cmd\nCODE:\n```\nfly volume create --size 10 data_volume --region arn\n```\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --volume data_volume:data --region arn\n```\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --volume vol_d42652p88kdw9l7r:data --region arn\n```\n\n----------------------------------------\n\nTITLE: Implementing Sticky Sessions with Express Middleware\nDESCRIPTION: This Express.js middleware implements session affinity using the fly-replay header. It sets a cookie with the Machine ID on the first request, and uses the fly-replay header to redirect subsequent requests to the correct Machine if needed.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/sticky-sessions.html.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Import required modules\nimport express from \"express\";\nimport cookieParser from \"cookie-parser\";\n\n// Create an Express app\nconst app = express();\n\n// Middleware to parse cookies\napp.use(cookieParser());\n\n// Make sessions sticky\napp.use((request, response, next) => {\n  if (!process.env.FLY_MACHINE_ID) {\n    next();\n  } else if (!request.cookies[\"fly-machine-id\"]) {\n    const maxAge = 6 * 24 * 60 * 60 * 1000; // six days\n    response.cookie(\"fly-machine-id\", process.env.FLY_MACHINE_ID, { maxAge });\n    next();\n  } else if (request.cookies[\"fly-machine-id\"] !== process.env.FLY_MACHINE_ID) {\n    response.set('Fly-Replay', `instance=${request.cookies[\"fly-machine-id\"]}`)\n    response.status(307)\n    response.send()\n  } else {\n    next();\n  }\n});\n\n// For demonstration purposes: show the Machine id that produced the response\napp.get(\"/\", (_request, response) => {\n  response.send(`FLY_MACHINE_ID: ${JSON.stringify(process.env.FLY_MACHINE_ID)}`);\n});\n\n// Start the Express server\nconst port = 3000;\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Isolated Production Organization on Fly.io\nDESCRIPTION: This command creates a new organization for production environments, separate from test/staging environments. This isolation is essential for HIPAA compliance by ensuring proper access controls and separation of environments handling PHI.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Replace $MYORG with the name of your organization\n$ fly orgs create $MYORG-production\n```\n\n----------------------------------------\n\nTITLE: Running Django Migrations\nDESCRIPTION: Initializes the local database and creates tables for Django's default apps using the migrate command.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dockerfile for Rails with Phusion Passenger\nDESCRIPTION: A Dockerfile based on phusion/passenger-full that sets up nginx and Passenger for a Rails application. It installs dependencies, configures nginx, sets environment variables, and prepares the application for deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/phusion-passenger.html.md#2025-04-16_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM phusion/passenger-full:2.3.0\nRUN rm -f /etc/service/nginx/down\nRUN rm -f /etc/service/redis/down\n\nRUN rm /etc/nginx/sites-enabled/default\nADD config/fly/rails.conf /etc/nginx/sites-enabled/rails.conf\nADD config/fly/envvars.conf /etc/nginx/main.d/envvars.conf\n\nENV RAILS_LOG_TO_STDOUT true\n\nARG BUNDLE_WITHOUT=development:test\nENV BUNDLE_WITHOUT ${BUNDLE_WITHOUT}\n\nRUN mkdir /app\nWORKDIR /app\nRUN mkdir -p tmp/pids\n\nCOPY Gemfile* ./\nRUN bundle install\n\nENV SECRET_KEY_BASE 1\n\nCOPY . .\n\nRUN bundle exec rails assets:precompile\n\nCMD [\"/sbin/my_init\"]\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust Application with Fly.io CLI\nDESCRIPTION: This command launches and deploys a Rust application using the Fly.io CLI tool. It simplifies the deployment process for most popular Rust frameworks.\nSOURCE: https://github.com/superfly/docs/blob/main/rust/the-basics.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Logging in Fly.toml\nDESCRIPTION: Environment configuration for Laravel logging setup in Fly.toml using stderr channel\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/post-deployment.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  APP_ENV = \"production\"\n  LOG_CHANNEL = \"stderr\"\n  LOG_LEVEL = \"info\"\n  LOG_STDERR_FORMATTER = \"Monolog\\\\Formatter\\\\JsonFormatter\"\n```\n\n----------------------------------------\n\nTITLE: Using the fly certs check Command\nDESCRIPTION: Command syntax for checking DNS configuration of a specified hostname. The command validates DNS settings and displays results in the same format as the SHOW command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_check.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly certs check <hostname> [flags]\n```\n\n----------------------------------------\n\nTITLE: Runtime Environment with Multi-stage Dockerfile (Part 2)\nDESCRIPTION: This second stage of a multi-stage Dockerfile creates a slim runtime environment, copying only the necessary files from the builder stage. It uses a much smaller base image and includes just the virtual environment containing compiled dependencies and the application code needed for execution.\nSOURCE: https://github.com/superfly/docs/blob/main/python/the-basics/multi-stage-builds.html.md#2025-04-16_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.11.9-slim-bookworm\n\nWORKDIR /app\n\nCOPY --from=builder /app .\nCOPY [python-app]/ ./[python-app]\n\nCMD [\"/app/.venv/bin/python\", \"[python-app]/app.py\"]\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly logs\nDESCRIPTION: Lists the available options for the fly logs command, including filters for application name, instance, region, and output format control.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_logs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string       Application name\n  -c, --config string    Path to application configuration file\n  -h, --help             help for logs\n  -j, --json             JSON output\n      --machine string   Filter by machine ID\n  -n, --no-tail          Do not continually stream logs\n  -r, --region string    The target region (see 'flyctl platform regions')\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Lists the global command-line options that can be used with any Fly CLI command, including authentication token, debug mode, and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_dashboard_metrics.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Setting RAILS_MASTER_KEY Secret in Fly.io from Local File (Unix/Linux/Mac)\nDESCRIPTION: This command reads the Rails master key from the local config/master.key file and sets it as a secret in the Fly.io application environment. This allows Rails to decrypt credentials files in the production environment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nfly secrets set RAILS_MASTER_KEY=$(cat config/master.key)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly deploy Command\nDESCRIPTION: The basic syntax for using the fly deploy command, which deploys Fly applications from a working directory.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy [WORKING_DIRECTORY] [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Fly Machine from Custom Dockerfile\nDESCRIPTION: Command to build and run a Fly Machine using a custom Dockerfile. This allows specifying a Dockerfile with a different name than the default.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --dockerfile Dockerfile-dev\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with Custom Configuration File\nDESCRIPTION: Complete GitHub Actions workflow configuration that includes a custom configuration file for staging environments. The 'config' input specifies the path to the staging-specific Fly.io configuration file.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/fly_pr_preview.yml\n\nname: Start preview app\n\non:\n  pull_request:\n    types: [labeled, synchronize, opened, reopened, closed]\n\nconcurrency:\n  group: ${{ github.workflow }}-pr-${{ github.event.number }}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n\njobs:\n  preview-app:\n    if: contains(github.event.pull_request.labels.*.name, 'PR preview app')\n    runs-on: ubuntu-latest\n    name: Preview app\n    environment:\n      name: pr-${{ github.event.number }}\n      url: ${{ steps.deploy.outputs.url }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Deploy preview app\n        uses: superfly/fly-pr-review-apps@1.2.0\n        id: deploy\n        with:\n          config: staging/fly_staging.toml  # ← Added\n          postgres: pg-fly-pr-staging-preview\n          region: waw\n          org: personal\n```\n\n----------------------------------------\n\nTITLE: Configuring Listening Port in Node.js\nDESCRIPTION: This snippet demonstrates how to set up a Node.js server to listen on a specific port and hostname. It uses environment variables for flexibility and logs the server's running address.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/listening-ports.html.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hostname = \"0.0.0.0\";\nconst port = process.env.port || 3000;\n\napp.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Routing Middleware for Fly.io Machines\nDESCRIPTION: Ruby middleware that examines request paths to determine if they should be routed to a different machine. Uses the fly-replay response header to redirect requests to the appropriate machine instance.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/cell-based.html.md#2025-04-16_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nif ENV[\"FLY_MACHINE_ID\"]\n  class FlyInstanceRouter\n    def initialize(app)\n      @app = app\n    end\n\n    def call(env)\n      segments = env[\"PATH_INFO\"].split('/')\n      instance = segments[1]\n\n      if instance =~ /^[0-9a-f]{14}$/ and instance != ENV[\"FLY_MACHINE_ID\"]\n        return [409, {\"Fly-Replay\" => \"instance=#{instance}\"}, [\"\"]]\n      end\n\n      @app.call(env)\n    end\n  end\n\n  Rails.application.config.middleware.use(FlyInstanceRouter)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Erlang COOKIE and Enabling IPv6 Support in Bash Environment\nDESCRIPTION: This snippet shows how to set the Erlang COOKIE and enable IPv6 support globally in the .bashrc file. It also enables shell history in IEx.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/clustering-from-home-to-your-app-in-fly.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ERL_AFLAGS=\"-kernel shell_history enabled -proto_dist inet6_tcp\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with Drizzle ORM\nDESCRIPTION: This snippet shows how to establish a connection to a PostgreSQL database using Drizzle ORM. It utilizes the DATABASE_URL environment variable for the connection string.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/database.html.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nconst db = drizzle(pool)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Fly.io Volume for Logs\nDESCRIPTION: Commands and configuration for creating and mounting a volume for log persistence\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/post-deployment.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly volumes create my_log_vol --region ams --size 10\n```\n\nLANGUAGE: toml\nCODE:\n```\n[mounts]\n  source=\"my_log_vol\"\n  destination=\"/var/www/html/storage/logs\"\n```\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing fly-replay for Write Requests in Multi-region Applications\nDESCRIPTION: Code snippet demonstrating how to detect if the current Machine is not in the primary region and send a response with the fly-replay header to route write requests to the primary region. This pattern ensures write operations are handled by the primary database.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/multi-region-fly-replay.html.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# This code should be in the handler for non-GET requests to the endpoint you \n# want to send to the primary region for write to the primary database.\nif os.environ(\"PRIMARY_REGION\") != os.environ(\"FLY_REGION\"):\n  # This machine is not in the primary region\n  response.headers = {\"fly-replay\": f\"region={os.environ(\"PRIMARY_REGION\")}\"}\n  return response\nelse:\n  # This machine *is* in the primary region\n  # Handle request normally, write to database.\n```\n\n----------------------------------------\n\nTITLE: Managing Fly.io Application Secrets\nDESCRIPTION: Command to manage secrets for applications on Fly.io using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[fly secrets](/docs/flyctl/secrets/)\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Controller\nDESCRIPTION: Ruby code for the JobController class, implementing start, complete, and status actions for managing background jobs.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass JobController < ApplicationController\n  skip_before_action :verify_authenticity_token\n\n  def start\n    File.write 'tmp/status', `date +\"%d-%m-%Y %T.%N %Z\"`\n    url = \"http://#{request.host_with_port}/job/complete\"\n    job = MachineJob.perform_later(url)\n    render plain: \"#{job}\\n\", layout: false\n  end\n\n  def complete\n    File.write 'tmp/status', `date +\"%d-%m-%Y %T.%N %Z\"`, mode: 'a+'\n    render plain: \"OK\\n\", layout: false\n  end\n\n  def status\n    render plain: IO.read('tmp/status'), layout: false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Verifying Redis URL Configuration in Fly Environment\nDESCRIPTION: Command to check if the REDIS_URL environment variable is properly set in the Fly application, which is essential for Sidekiq to connect to Redis.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/sidekiq.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console -C \"printenv REDIS_URL\"\n```\n\nLANGUAGE: output\nCODE:\n```\nREDIS_URL=redis://default:yoursecretpassword@my-apps-redis-host.internal:6379\n```\n\n----------------------------------------\n\nTITLE: Manual Database Migration Command\nDESCRIPTION: Command to manually run database migrations after deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/deployments.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console -C \"/rails/bin/rails db:migrate\"\n```\n\n----------------------------------------\n\nTITLE: Running Rails Console via Fly.io SSH\nDESCRIPTION: This command allows running the Rails console directly through Fly.io's SSH feature.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console --pty -C '/rails/bin/rails console'\n```\n\n----------------------------------------\n\nTITLE: Basic Flyctl Usage Command\nDESCRIPTION: Shows the basic command syntax for using the flyctl CLI tool with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Auth Signup Command\nDESCRIPTION: The basic syntax for creating a new Fly account using the signup command. This command opens a browser window where the user can provide their credentials.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_signup.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly auth signup [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets in Fly.io Environment\nDESCRIPTION: The fly secrets list command displays all environment variables and secrets stored in the Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets list\n```\n\nLANGUAGE: output\nCODE:\n```\nNAME                          DIGEST                            CREATED AT\nDATABASE_URL                  24e455edbfcf1247a642cdae30e14872  14m29s ago\nLANG                          95a7bb7a8d0ee402edde95bb78ef95c7  1m24s ago\nRACK_ENV                      fd89784e59c72499525556f80289b2c7  1m26s ago\nRAILS_ENV                     fd89784e59c72499525556f80289b2c7  1m26s ago\nRAILS_LOG_TO_STDOUT           a10311459433adf322f2590a4987c423  1m25s ago\nRAILS_SERVE_STATIC_FILES      a10311459433adf322f2590a4987c423  1m23s ago\nREDIS_TLS_URL                 b30fe87493e14d9b670dc0263dc935c9  1m25s ago\nREDIS_URL                     4583a46e747696319573e8bfbd0db04d  1m21s ago\nSECRET_KEY_BASE               5afb43c2ddbba6c02ffa7e2834689692  1m22s ago\n```\n\n----------------------------------------\n\nTITLE: Using fly postgres connect command in Bash\nDESCRIPTION: This command connects to a Postgres console using the Fly CLI. It supports various options for specifying the application, database, user, and password.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_connect.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres connect [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling Build Caching and Parallel Installation in Rails Dockerfile\nDESCRIPTION: This command regenerates the Dockerfile with options for build caching and parallel installation of gems and node packages.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_10\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate dockerfile --cache --parallel\n```\n\n----------------------------------------\n\nTITLE: Setting Heroku Database URL as a Secret in Fly.io\nDESCRIPTION: This command retrieves the DATABASE_URL from Heroku and sets it as HEROKU_DATABASE_URL in Fly.io's secrets for database migration.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set HEROKU_DATABASE_URL=$(heroku config:get DATABASE_URL)\n```\n\n----------------------------------------\n\nTITLE: Provisioning Postgres Database on Fly.io\nDESCRIPTION: Command to create a new Postgres database instance on Fly.io with configuration options for organization, region, and resources.\nSOURCE: https://github.com/superfly/docs/blob/main/postgres/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly pg create --name myapp-db\n```\n\nLANGUAGE: output\nCODE:\n```\n? Select Organization: Brad Gessler (personal)\n? Select regions: San Jose, California (US) (sjc)\n? Select configuration: Development - Single node, 1x shared CPU, 256MB RAM, 1GB disk\nCreating postgres cluster myapp-db in organization personal\nCreating app...\nSetting secrets...\nProvisioning 1 of 1 machines with image flyio/postgres-flex:15.2\nWaiting for machine to start...\nMachine 5683004b797d8e is created\n==> Monitoring health checks\n  Waiting for 5683004b797d8e to become healthy (started, 3/3)\n\nPostgres cluster myapp-db created\n  Username:    postgres\n  Password:    92u0rN52VUV2SFq\n  Hostname:    myapp-db.internal\n  Flycast:     fdaa:0:2e26:0:1::b6\n  Proxy port:  5432\n  Postgres port:  5433\n  Connection string: postgres://postgres:92u0rN52VUV2SFq@myapp-db.flycast:5432\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Source in Prisma Schema\nDESCRIPTION: This snippet shows how to configure the database source in the Prisma schema file to use PostgreSQL with an environment variable for the database URL.\nSOURCE: https://github.com/superfly/docs/blob/main/js/prisma/postgres.html.md#2025-04-16_snippet_0\n\nLANGUAGE: config\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Actions Workflow Configuration for PR Preview Apps\nDESCRIPTION: YAML configuration that defines a GitHub Actions workflow to create preview environments for pull requests. It specifies when to run the workflow, sets up concurrency rules, and configures the deployment steps using the fly-pr-review-apps action.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/fly_pr_preview.yml\n\nname: Start preview app\n\non:\n  pull_request:\n    types: [labeled, synchronize, opened, reopened, closed]\n\nconcurrency:\n  group: ${{ github.workflow }}-pr-${{ github.event.number }}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n\njobs:\n  preview-app:\n    if: contains(github.event.pull_request.labels.*.name, 'PR preview app')\n    runs-on: ubuntu-latest\n    name: Preview app\n    environment:\n      name: pr-${{ github.event.number }}\n      url: ${{ steps.deploy.outputs.url }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Deploy preview app\n        uses: superfly/fly-pr-review-apps@1.2.0\n        id: deploy\n        with:\n          region: waw\n          org: personal\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Stage Dockerfile for Rust Applications with cargo-chef\nDESCRIPTION: This Dockerfile template uses a multi-stage build process with cargo-chef to optimize Docker images for Rust applications. It separates dependency resolution, compilation, and runtime stages to create smaller, more efficient containers while leveraging build caching.\nSOURCE: https://github.com/superfly/docs/blob/main/rust/the-basics/cargo-chef.html.md#2025-04-16_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM lukemathwalker/cargo-chef:latest-rust-1 AS chef\nWORKDIR /app\n\nFROM chef AS planner\nCOPY . .\nRUN cargo chef prepare --recipe-path recipe.json\n\nFROM chef AS builder \nCOPY --from=planner /app/recipe.json recipe.json\n# Build dependencies - this is the caching Docker layer!\nRUN cargo chef cook --release --recipe-path recipe.json\n# Build application\nCOPY . .\nRUN cargo build --release --bin [rust-app]\n\n# We do not need the Rust toolchain to run the binary!\nFROM debian:bookworm-slim AS runtime\nWORKDIR /app\nCOPY --from=builder /app/target/release/[rust-app] /usr/local/bin\nENTRYPOINT [\"/usr/local/bin/[rust-app]\"]\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Create Command Options\nDESCRIPTION: The available options when creating a Fly machine, including app specification, autoscaling settings, build options, environment variables, file management, networking, and hardware resource configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                  Application name\n      --autostart                   Automatically start a stopped Machine when a network request is received (default true)\n      --autostop string[=\"stop\"]    Automatically stop a Machine when there are no network requests for it. Options include 'off', 'stop', and 'suspend'. (default \"off\")\n      --build-depot                 Build your image with depot.dev\n      --build-nixpacks              Build your image with nixpacks\n  -c, --config string               Path to application configuration file\n      --detach                      Return immediately instead of monitoring deployment progress\n      --dockerfile string           The path to a Dockerfile. Defaults to the Dockerfile in the working directory.\n      --entrypoint string           The command to override the Docker ENTRYPOINT.\n  -e, --env stringArray             Set of environment variables in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --file-literal stringArray    Set of literals to write to the Machine, in the form of /path/inside/machine=VALUE pairs, where VALUE is the base64-encoded raw content. Can be specified multiple times.\n      --file-local stringArray      Set of files to write to the Machine, in the form of /path/inside/machine=<local/path> pairs. Can be specified multiple times.\n      --file-secret stringArray     Set of secrets to write to the Machine, in the form of /path/inside/machine=SECRET pairs, where SECRET is the name of the secret. The content of the secret must be base64 encoded. Can be specified multiple times.\n  -h, --help                        help for create\n      --host-dedication-id string   The dedication id of the reserved hosts for your organization (if any)\n      --id string                   Machine ID, if previously known\n      --kernel-arg stringArray      A list of kernel arguments to provide to the init. Can be specified multiple times.\n      --machine-config string       Read machine config from json file or string\n  -m, --metadata stringArray        Metadata in the form of NAME=VALUE pairs. Can be specified multiple times.\n  -n, --name string                 Machine name. Will be generated if omitted.\n      --org string                  The organization that will own the app\n  -p, --port strings                The external ports and handlers for services, in the format: port[:machinePort][/protocol[:handler[:handler...]])])\n                                    \tFor example: --port 80/tcp --port 443:80/tcp:http:tls --port 5432/tcp:pg_tls\n                                    \tTo remove a port mapping use '-' as handler. For example: --port 80/tcp:-\n  -r, --region string               The target region (see 'flyctl platform regions')\n      --restart string              Set the restart policy for a Machine. Options include 'no', 'always', and 'on-fail'.\n                                    \tDefault is 'on-fail' for Machines created by 'fly deploy' and Machines with a schedule. Default is 'always' for Machines created by 'fly m run'.\n      --rm                          Automatically remove the Machine when it exits. Sets the restart-policy to 'never' if not otherwise specified.\n      --schedule string             Schedule a Machine run at hourly, daily and monthly intervals\n      --skip-dns-registration       Do not register the machine's 6PN IP with the internal DNS system\n      --standby-for strings         For Machines without services, a comma separated list of Machine IDs to act as standby for.\n      --use-zstd                    Enable zstd compression for the image\n      --vm-cpu-kind string          The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                 Number of CPUs\n      --vm-gpu-kind string          If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                 Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string            Memory (in megabytes) to attribute to the VM\n      --vm-size string              The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n  -v, --volume strings              Volume to mount, in the form of <volume_id_or_name>:/path/inside/machine[:<options>]\n```\n\n----------------------------------------\n\nTITLE: Setting Primary Region in fly.toml\nDESCRIPTION: Configures the primary region for GPU deployment to ensure compatibility with the selected GPU model.\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/getting-started-gpus.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nprimary_region = \"ord\"  # If you change this, ensure it's to a region that offers the GPU model you want\n```\n\n----------------------------------------\n\nTITLE: Signing Up for Fly.io Account\nDESCRIPTION: Command to sign up for a Fly.io account using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[fly auth signup](/docs/flyctl/auth-signup/)\n```\n\n----------------------------------------\n\nTITLE: Listing IP Addresses with Fly CLI\nDESCRIPTION: Command to list IP addresses allocated to a Fly application. Supports options for specifying the application, configuration file path, and output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ips list [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Redis URL Secret\nDESCRIPTION: Command to set the Redis connection URL as a secret in Fly.io environment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/turbo-streams-and-action-cable.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set REDIS_URL=redis://default:<redacted>.upstash.io\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fly.io Application\nDESCRIPTION: Command to create a new application on Fly.io using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[fly launch](/docs/flyctl/launch/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Logging for Full Stack Traces\nDESCRIPTION: This code snippet shows how to update the 'stderr' channel in the config/logging.php file to include full stack traces in the log output. It adds a 'formatter_with' configuration to enable stack trace inclusion.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/logging-stack-traces.html.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'stderr' => [\n    'driver' => 'monolog',\n    'level' => env('LOG_LEVEL', 'debug'),\n    'handler' => StreamHandler::class,\n    'formatter' => env('LOG_STDERR_FORMATTER'), // JsonFormatter\n    'formatter_with' => [\n        'includeStacktraces' => true,\n    ],\n    'with' => [\n        'stream' => 'php://stderr',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Memory in fly.toml\nDESCRIPTION: Configuration snippet for setting Node.js memory limits in fly.toml to handle larger memory requirements when using swap space. Sets the maximum old space size to 4096MB using NODE_OPTIONS environment variable.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/scaling.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nNODE_OPTIONS='--max-old-space-size=4096'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration\nDESCRIPTION: YAML configuration for setting up automated deployment to Fly.io using GitHub Actions.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/github-actions.html.md#2025-04-16_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nname: Fly Deploy\non: [push]\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\njobs:\n  deploy:\n      name: Deploy app\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - uses: superfly/flyctl-actions/setup-flyctl@master\n        - run: flyctl deploy\n```\n\n----------------------------------------\n\nTITLE: Installing AnyCable Rails Gem\nDESCRIPTION: Command to add the anycable-rails gem to the application's dependencies.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/anycable.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nbundle add anycable-rails\n```\n\n----------------------------------------\n\nTITLE: Testing Remote Logger Connection in Livebook\nDESCRIPTION: Elixir code snippet to test the connection to a remote server by logging a message.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-livebook-to-your-app.html.md#2025-04-16_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nrequire Logger\nLogger.info(\"Testing logger\")\n```\n\n----------------------------------------\n\nTITLE: Basic WireGuard Command Usage - Fly.io CLI\nDESCRIPTION: Base command structure for executing WireGuard-related operations in the Fly.io CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy\nDESCRIPTION: Nginx configuration for routing WebSocket connections to AnyCable and HTTP traffic to Rails application.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/anycable.html.md#2025-04-16_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n        listen 8080 default_server;\n        listen [::]:8080 default_server;\n\n        location /cable {\n                proxy_pass http://localhost:8082/cable;\n                proxy_http_version 1.1;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection \"Upgrade\";\n                proxy_set_header Host $host;\n        }\n\n        location / {\n                proxy_pass http://localhost:8081/;\n                proxy_set_header origin 'https://localhost:8081';\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Line Options - Global Settings\nDESCRIPTION: Global configuration options for the CLI including API access token, debug mode, and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_launch.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Extensions Command in Bash\nDESCRIPTION: This snippet shows the basic usage syntax for the 'fly extensions' command. It allows users to specify a subcommand and optional flags to manage various extensions for Fly apps.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Launching Django App on Fly.io\nDESCRIPTION: Uses the fly launch command to set up a Django app on Fly.io, including provisioning a Postgres database and configuring necessary settings.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/existing.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Automated Build Secrets Dockerfile\nDESCRIPTION: Complete Dockerfile for automating the inclusion of build secrets using an ephemeral Machine on Fly.io. Includes setup for handling multiple secrets.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/build-secrets.html.md#2025-04-16_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax = docker/dockerfile:1\n\nFROM flyio/flyctl:latest as flyio\nFROM debian:bullseye-slim\n\nRUN apt-get update; apt-get install -y ca-certificates jq\n\nCOPY <<\"EOF\" /srv/deploy.sh\n#!/bin/bash\ndeploy=(flyctl deploy)\ntouch /srv/.secrets\n\nwhile read -r secret; do\n  echo \"export ${secret}=${!secret}\" >> /srv/.secrets\n  deploy+=(--build-secret \"${secret}=${!secret}\")\ndone < <(flyctl secrets list --json | jq -r \".[].Name\")\n\ndeploy+=(--build-secret \"ALL_SECRETS=$(base64 --wrap=0 /srv/.secrets)\")\n${deploy[@]}\nEOF\n\nRUN chmod +x /srv/deploy.sh\n\nCOPY --from=flyio /flyctl /usr/bin\n\nWORKDIR /build\nCOPY . .\n```\n\n----------------------------------------\n\nTITLE: Basic Secrets Command Usage\nDESCRIPTION: The base command syntax for managing secrets in Fly.io applications.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly.io Volume Creation - Options\nDESCRIPTION: Available options for customizing volume creation including size, region, encryption settings, and VM specifications.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                  Application name\n  -c, --config string               Path to application configuration file\n  -n, --count int                   The number of volumes to create (default 1)\n  -h, --help                        help for create\n      --host-dedication-id string   The dedication id of the reserved hosts for your organization (if any)\n  -j, --json                        JSON output\n      --no-encryption               Do not encrypt the volume contents. Volume contents are encrypted by default.\n  -r, --region string               The target region (see 'flyctl platform regions')\n      --require-unique-zone         Place the volume in a separate hardware zone from existing volumes to help ensure availability (default true)\n  -s, --size int                    The size of volume in gigabytes (default 1)\n      --snapshot-id string          Create the volume from the specified snapshot\n      --snapshot-retention int      Snapshot retention in days (default 5)\n      --unique-zone-app-wide        Checks all volumes in app for unique zone handling, instead of only volumes with the same name (which is the default)\n      --vm-cpu-kind string          The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                 Number of CPUs\n      --vm-gpu-kind string          If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                 Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string            Memory (in megabytes) to attribute to the VM\n      --vm-size string              The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n  -y, --yes                         Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Elixir CI\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for Elixir projects. It includes steps for setting up Elixir and OTP, caching dependencies and build artifacts, compiling the project, checking formatting, and running tests. The workflow runs on pushes to the main branch and on pull requests targeting the main branch.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/github-actions-elixir-ci-cd.html.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Elixir CI\n\non:\n  push:\n    branches: [ \"main\" ]  # adapt branch for project\n  pull_request:\n    branches: [ \"main\" ]  # adapt branch for project\n\nenv:\n  MIX_ENV: test\n\npermissions:\n  contents: read\n\njobs:\n  test:\n    services:\n      db:\n        image: postgres:12\n        ports: ['5432:5432']\n        env:\n          POSTGRES_PASSWORD: postgres\n        options: >\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    runs-on: ubuntu-latest\n    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}\n    strategy:\n      matrix:\n        otp: ['25.0.4']       # Define the OTP version [required]\n        elixir: ['1.14.1']    # Define the elixir version [required]\n    steps:\n    - name: Set up Elixir\n      uses: erlef/setup-beam@v1\n      with:\n        otp-version: ${{matrix.otp}}\n        elixir-version: ${{matrix.elixir}}\n\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Cache deps\n      id: cache-deps\n      uses: actions/cache@v3\n      env:\n        cache-name: cache-elixir-deps\n      with:\n        path: deps\n        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-mix-${{ env.cache-name }}-\n\n    - name: Cache compiled build\n      id: cache-build\n      uses: actions/cache@v3\n      env:\n        cache-name: cache-compiled-build\n      with:\n        path: _build\n        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-mix-${{ env.cache-name }}-\n          ${{ runner.os }}-mix-\n\n    - name: Clean to rule out incremental build as a source of flakiness\n      if: github.run_attempt != '1'\n      run: |\n        mix deps.clean --all\n        mix clean\n      shell: sh\n\n    - name: Install dependencies\n      run: mix deps.get\n\n    - name: Compiles without warnings\n      run: mix compile --warnings-as-errors\n\n    - name: Check Formatting\n      run: mix format --check-formatted\n\n    - name: Run tests\n      run: mix test\n```\n\n----------------------------------------\n\nTITLE: Setting RAILS_MASTER_KEY Secret from Local File in Fly (Unix/Linux)\nDESCRIPTION: Command to set the RAILS_MASTER_KEY secret in Fly by reading from the local master.key file. This key is used to decrypt the Rails credentials file in production.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/configuration.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set RAILS_MASTER_KEY=$(cat config/master.key)\n```\n\n----------------------------------------\n\nTITLE: Building Python Dependencies with Multi-stage Dockerfile (Part 1)\nDESCRIPTION: This first stage of a multi-stage Dockerfile creates a build environment using a full Python image to install and compile dependencies with Poetry. It sets up environment variables for Python optimization and configures Poetry to create a virtual environment in the project directory.\nSOURCE: https://github.com/superfly/docs/blob/main/python/the-basics/multi-stage-builds.html.md#2025-04-16_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.11.9-bookworm AS builder\n\nENV PYTHONUNBUFFERED=1 \\ \n    PYTHONDONTWRITEBYTECODE=1 \n\nRUN pip install poetry && poetry config virtualenvs.in-project true\n\nWORKDIR /app\n\nCOPY pyproject.toml poetry.lock ./\n\nRUN poetry install\n```\n\n----------------------------------------\n\nTITLE: Placing Data into Files on a Fly Machine\nDESCRIPTION: Demonstrates how to copy local files or place literal data into files on a Fly Machine. These examples show copying a local file and creating a file with literal content.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_14\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --file-local /path/inside/machine=local/path\n```\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --file-literal /path/inside/machine=\"Some text I want in a file\"\n```\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --file-literal /b64file=SGVsbG8hIEknbSBGcmFua2llIHRoZSBiYWxsb29uIQo=\n```\n\n----------------------------------------\n\nTITLE: Deploying a Python Application with Fly.io CLI\nDESCRIPTION: This command launches a Python application on Fly.io. It initializes the deployment process, creating necessary configuration files and setting up the application in the Fly.io infrastructure.\nSOURCE: https://github.com/superfly/docs/blob/main/python/the-basics.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with node-postgres\nDESCRIPTION: This snippet shows how to create a client connection to a PostgreSQL database using the node-postgres module. It uses the DATABASE_URL environment variable as the connection string.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/database.html.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new pg.Client({connectionString: process.env.DATABASE_URL});\n```\n\n----------------------------------------\n\nTITLE: Launching a Fly.io Application in Production\nDESCRIPTION: This command starts the process of provisioning a production environment for the application. It would typically deploy the application using the production configuration specified in fly.production.toml.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ fly launch\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Custom Metrics Endpoints in fly.toml\nDESCRIPTION: This TOML configuration demonstrates how to set up multiple custom metrics endpoints for different processes in a Fly.io application using the fly.toml file.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/metrics.html.md#2025-04-16_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[metrics]]\nport = 9394\npath = \"/metrics\"\nprocesses = [\"web\"]\n\n[[metrics]]\nport = 9113\npath = \"/metrics\"\nprocesses = [\"proxy\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in fly.toml\nDESCRIPTION: TOML configuration snippet showing how to mount a named volume to a specific path in a Fly.io application. The configuration specifies the volume name as source, the mount destination path, and optionally the processes that can access the volume.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/volumes.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[mounts]\n  source = \"myapp_data\"\n  destination = \"/data\"\n  processes= [\"app\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring LiteStream Backup in YAML\nDESCRIPTION: LiteStream configuration for automated SQLite database backups to S3-compatible storage.\nSOURCE: https://github.com/superfly/docs/blob/main/js/prisma/sqlite.html.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndbs:\n  - path: /data/dev.db\n    replicas:\n      - type: s3\n        endpoint: $AWS_ENDPOINT_URL_S3\n        bucket: $BUCKET_NAME\n        path: litestream/dev.db\n        access-key-id: $AWS_ACCESS_KEY_ID\n        secret-access-key: $AWS_SECRET_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Status Command Usage\nDESCRIPTION: Basic command syntax for viewing application status using the fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly status [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying and Managing Fly.io Instances\nDESCRIPTION: Series of commands for deploying, listing, and cloning Fly.io machines across regions.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/litefs.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly machines list -q\n```\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine clone --region lhr 3d8d9930b32189\n```\n\nLANGUAGE: cmd\nCODE:\n```\nprintenv FLY_REGION\n```\n\nLANGUAGE: cmd\nCODE:\n```\n% /rails/bin/rails console\nLoading production environment (Rails 7.0.4)\nirb(main):001:0> Name.last\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron and Queue Worker Processes in fly.toml\nDESCRIPTION: This snippet demonstrates how to configure both cron and queue worker processes in the fly.toml file. It defines three process groups: 'app' for the web server, 'cron' for the cron daemon, and 'worker' for the Laravel queue worker.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/cron-and-queues.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[processes]\n  app = \"\"\n  cron = \"cron -f\"\n  worker = \"php artisan queue:listen\"\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres Backup using Fly CLI\nDESCRIPTION: This command creates a backup of a Postgres database using the Fly CLI. It supports various options for specifying the application, configuration, and backup details.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres backup create [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for flyctl Commands\nDESCRIPTION: Lists the global options available for all flyctl commands, including authentication, debugging, and output verbosity settings that can be used with the 'fly machine run' command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_run.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fly.io Deployment Configuration\nDESCRIPTION: Commands to initialize Fly.io deployment and generate a Dockerfile with LiteFS configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/litefs.html.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfly launch\nbin/rails generate dockerfile --litefs\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite with sqlite3 Module\nDESCRIPTION: This code demonstrates how to establish a connection to a SQLite database using the sqlite3 module. It extracts the database file path from the DATABASE_URL environment variable.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/database.html.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new sqlite3.Database(new URL(process.env.DATABASE_URL).pathname);\n```\n\n----------------------------------------\n\nTITLE: Global Connection Options\nDESCRIPTION: Global options available for all Fly.io commands, including authentication and debugging flags\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres_connect.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly logs Command\nDESCRIPTION: Shows the basic syntax for using the fly logs command to view application logs from the Fly platform.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_logs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly logs [flags]\n```\n\n----------------------------------------\n\nTITLE: Arcjet Create Command Options\nDESCRIPTION: Available flags for the 'fly extensions arcjet create' command. Options include specifying the application name, configuration file path, name of the application, organization, region, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for create\n  -n, --name string     The name of your application\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl platform regions')\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB with MongoDB Driver\nDESCRIPTION: This code demonstrates how to create a client connection to a MongoDB database using the official MongoDB driver. It utilizes the DATABASE_URL environment variable for the connection string.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/database.html.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new mongodb.MongoClient(process.env.DATABASE_URL);\n```\n\n----------------------------------------\n\nTITLE: Initiating Fly.io Launch for a Python Flask Application\nDESCRIPTION: The initial command to launch a Flask application on Fly.io, which automatically detects Python apps and suggests using the Paketo buildpacks builder.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/fly-launch.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch\n```\n\nLANGUAGE: out\nCODE:\n```\nScanning source code\nDetected a Python app\nUsing the following build configuration:\n\tBuilder: paketobuildpacks/builder:base\nCreating app in /Users/chris/FlyTests/hello-gunicorn-flask\nWe're about to launch your Python app on Fly.io. Here's what you're getting:\n\nOrganization: MyOrg                  (fly launch defaults to the personal org)\nName:         hello-gunicorn-flask   (derived from your directory name)\nRegion:       Secaucus, NJ (US)      (this is the fastest region for you)\nApp Machines: shared-cpu-1x, 1GB RAM (most apps need about 1GB of RAM)\nPostgres:     <none>                 (not requested)\nRedis:        <none>                 (not requested)\n\n? Do you want to tweak these settings before proceeding? (y/N)\n```\n\n----------------------------------------\n\nTITLE: Deploying Rails Application on Fly.io\nDESCRIPTION: Command to deploy the Rails application to Fly.io using the Rails deployment script. This initiates the deployment process for the application.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database Source in Prisma Schema\nDESCRIPTION: Prisma schema configuration for SQLite database connection, specifying the provider and database file location.\nSOURCE: https://github.com/superfly/docs/blob/main/js/prisma/sqlite.html.md#2025-04-16_snippet_0\n\nLANGUAGE: config\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fly-Rails Gem in a Rails Project\nDESCRIPTION: Installs and bundles the fly-rails gem in a Rails project to add deployment commands.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/fly-rails.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nbundle add fly-rails\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly machine run Command\nDESCRIPTION: Shows the basic command syntax for running a machine on the Fly.io platform. The command requires an image name and accepts an optional command to run in the container along with various flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_run.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine run <image> [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using dig to Query Fly.io DNS over WireGuard\nDESCRIPTION: Command to query the IPv6 address of an application using dig and the Fly.io DNS server over WireGuard. Demonstrates how to specify the DNS server explicitly.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\nroot@f066b83b:/# dig +short aaaa my-app-name.internal @fdaa:0:18::3\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metrics Endpoint in fly.toml\nDESCRIPTION: This TOML configuration snippet shows how to set up a custom metrics endpoint in the fly.toml file. It specifies the port and path for the metrics endpoint.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/metrics.html.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\nport = 9091\npath = \"/metrics\" # default for most prometheus exporters\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Rails Application for Cell-based Architecture\nDESCRIPTION: Commands to create a new Rails blog application with Tailwind CSS, generate a scaffold for Posts, and launch it on Fly.io with a unique name.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/cell-based.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails new blog --css tailwind\ncd blog\nbin/rails generate scaffold Post title:string body:text\nfly launch --name blog-$USER-$RANDOM\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Flyctl Configuration\nDESCRIPTION: Environment variables used for configuring and authenticating flyctl: FLY_ACCESS_TOKEN for authentication and FLY_APP for specifying the target application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/integrating.html.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `FLY_ACCESS_TOKEN` is an environment variable which can be used to pass an access token to an instance of Flyctl. The token may be obtained using `flyctl auth token`. A token with permission to manage a single app can be generated with `fly tokens create deploy`.\n* `FLY_APP` is an environment variable which is used as the application name.\n```\n\n----------------------------------------\n\nTITLE: Creating an EdgeDB App on Fly.io\nDESCRIPTION: Command to launch a new EdgeDB app on Fly.io using the official EdgeDB Docker image, without immediate deployment to allow for additional configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl launch --name myedgedb --image edgedb/edgedb --no-deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing Turbo Streams in View Template\nDESCRIPTION: Adding Turbo Stream subscription to the names index view for real-time updates.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/turbo-streams-and-action-cable.html.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  <p style=\"color: green\"><%= notice %></p>\n\n  <h1>Names</h1>\n+\n+ <%= turbo_stream_from 'names' %>\n\n  <div id=\"names\">\n    <% @names.each do |name| %>\n      <%= render name %>\n      <p>\n        <%= link_to \"Show this name\", name %>\n      </p>\n    <% end %>\n  </div>\n\n  <%= link_to \"New name\", new_name_path %>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Local Testing of Docker Build Secrets\nDESCRIPTION: Commands for testing Docker builds with secrets locally before deployment to Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/build-secrets.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"secret_value\" > mysecret.txt\n\ndocker build --secret id=MY_SUPER_SECRET,src=mysecret.txt .\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Client for Tigris Storage\nDESCRIPTION: JavaScript code showing how to initialize an S3 client to interact with Tigris storage. Uses AWS SDK S3Client class with auto-configured credentials.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/object-storage.html.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst S3 = new S3Client()\n```\n\n----------------------------------------\n\nTITLE: Checking Rails Version and Creating New Application\nDESCRIPTION: Shell commands to verify Rails installation and create a new Rails application named 'welcome'\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/index.html.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ rails --version\n$ rails new welcome\n$ cd welcome\n```\n\n----------------------------------------\n\nTITLE: Listing PostgreSQL Backups using Flyctl\nDESCRIPTION: This command lists PostgreSQL backups for a Fly.io application. It supports options for specifying the application name and configuration file path. Global options for API access token and debug/verbose output are also available.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_list.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly postgres backup list [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Native Module Dependencies\nDESCRIPTION: Commands to add necessary system libraries for native modules at different stages (base, build, deploy) of the container lifecycle.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/dependencies.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nnpx dockerfile --add-base=libxml2\nnpx dockerfile --add-build=babel\nnpx dockerfile --add-deploy=fontconfig\n```\n\n----------------------------------------\n\nTITLE: Managing Fly.io Applications\nDESCRIPTION: Command to manage applications on Fly.io using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[fly apps](/docs/flyctl/apps/)\n```\n\n----------------------------------------\n\nTITLE: Basic Error Viewing Command\nDESCRIPTION: The main command syntax for viewing application errors through the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_errors.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly apps errors [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing Machine Job\nDESCRIPTION: Ruby code for the MachineJob class, implementing the logic to create, monitor, and manage Fly.io machines for background tasks.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'fly.io-rails/machines'\n\nclass MachineJob < ApplicationJob\n  queue_as :default\n\n  def perform(url)\n    if Rails.env.production?\n      # specify a machine configuration\n      app = ENV['FLY_APP_NAME']\n\n      config = {\n        image: ENV['FLY_IMAGE_REF'],\n        guest: {cpus: 1, memory_mb: 256, cpu_kind: \"shared\"},\n        env: {'SERVER_COMMAND' => \"curl #{url}\"}\n      }\n\n      # start a machine\n      start = Fly::Machines.create_and_start_machine(app, config: config)\n      machine = start[:id]\n\n      if machine\n        logger.info \"Started machine: #{machine}\"\n      else\n        logger.error 'Error starting job machine'\n        logger.error JSON.pretty_generate(start)\n        return\n      end\n\n      # wait for machine to complete, checking every 10 seconds,\n      # and timing out after 5 minutes.\n      event = nil\n      30.times do\n        sleep 10\n        status = Fly::Machines.get_a_machine app, machine\n        event = status[:events]&.first\n        break if event && event[:type] == 'exit'\n      end\n\n      # extract exit code\n      exit_code = event.dig(:request, :exit_event, :exit_code)\n\n      if exit_code == 0\n        # delete job machine\n        delete = Fly::Machines.delete_machine app, machine\n        if delete[:error]\n          logger.error \"Error deleting machine: #{machine}\"\n          logger.error JSON.pretty_generate(delete)\n        else\n          logger.info \"Deleted machine: #{machine}\"\n        end\n      else\n        logger.error 'Error performing job'\n        logger.error (exit_code ? {exit_code: exit_code} : event).inspect\n      end\n    else\n      system \"curl\", url\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Health Check Configuration in fly.toml\nDESCRIPTION: TOML configuration example for setting up health check grace periods in Fly.io configuration file.\nSOURCE: https://github.com/superfly/docs/blob/main/getting-started/troubleshooting.html.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n  # If you're using tcp_checks\n  [[services.tcp_checks]]\n    grace_period = \"6s\"\n    ...\n\n  # If you're using http_checks\n  [[services.http_checks]]\n    grace_period = \"6s\"\n    ...\n  # or\n  [[http_service.checks]]\n    grace_period = \"6s\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Services in fly.toml\nDESCRIPTION: Basic service configuration in fly.toml that exposes an internal port with HTTP and HTTPS handlers. This connects the app to Fly.io's Anycast network.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[services]]\n  internal_port = 8080\n  protocol = \"tcp\"\n\n  [[services.ports]]\n    handlers = [\"http\"]\n    port = \"80\"\n\n  [[services.ports]]\n    handlers = [\"tls\", \"http\"]\n    port = \"443\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Managed Postgres with psql using flyctl\nDESCRIPTION: This command uses the Fly.io CLI (flyctl) to establish a direct connection to a Managed Postgres database using the psql client. Flags can be added to customize the connection.\nSOURCE: https://github.com/superfly/docs/blob/main/mpg/overview.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly mpg connect [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring URLs and Creating a View in Django\nDESCRIPTION: Updates the urls.py file to include a basic view that returns 'Hello, Fly!' and maps it to the root URL.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# hello_django/urls.py\nfrom django.contrib import admin\nfrom django.http import HttpResponse\nfrom django.urls import path\n\n\n# ↓ New basic view returning \"Hello, Fly!\" ↓\ndef hello(request):\n    return HttpResponse(\"Hello, Fly!\")\n\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", hello, name=\"hello\"),  # ← Added!\n]\n```\n\n----------------------------------------\n\nTITLE: Running a TypeScript Node.js App with Environment Variables\nDESCRIPTION: Command to execute a TypeScript Node.js application with environment variables loaded from a local .env file using tsx.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsx --env-file .env.local index.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Volume for SQLite3 Storage with Fly CLI\nDESCRIPTION: Command to create a persistent volume for storing SQLite3 database files. The volume name must contain only alphanumeric characters and underscores, with an optional size parameter to specify volume size in gigabytes.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/sqlite3.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes create name\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoscaler in fly.toml\nDESCRIPTION: This TOML snippet shows the configuration for the fly-autoscaler app in fly.toml. It sets up the autoscaler to maintain a fixed number of ready-to-start Machines based on the current number of running Machines.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autoscale-machines.html.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\napp = \"my-autoscaler\"\n\n[build]\nimage = \"flyio/fly-autoscaler:0.3.1\"\n\n[env]\nFAS_PROMETHEUS_ADDRESS = \"https://api.fly.io/prometheus/my-org\"\nFAS_PROMETHEUS_METRIC_NAME = \"running_machines\"\nFAS_PROMETHEUS_QUERY = \"count(fly_instance_up{app='$APP_NAME'})\"\n\nFAS_APP_NAME = \"my-target-app\"\nFAS_CREATED_MACHINE_COUNT = \"min(running_machines + 1, 10)\"\nFAS_INITIAL_MACHINE_STATE = \"stopped\"\n\n[metrics]\nport = 9090\npath = \"/metrics\"\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Auth Login Command in Bash\nDESCRIPTION: This command logs a user into the Fly platform. It supports browser-based, email/password, and one-time-password authentication methods. By default, it uses browser-based authentication.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_login.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly auth login [flags]\n```\n\n----------------------------------------\n\nTITLE: Launching a Rails App on Fly.io\nDESCRIPTION: Initial command to provision and deploy a Rails application to Fly.io using the fly-rails gem.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/fly-rails.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails fly:launch\n```\n\n----------------------------------------\n\nTITLE: Starting Fly Machines using Command-Line Interface\nDESCRIPTION: This command is used to start one or more Fly machines. It accepts optional machine IDs and various flags for configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_start.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine start [<id>...] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Processes in fly.toml\nDESCRIPTION: Configuration in fly.toml to set up web and cron processes. The web process launches a Rails server, while the cron process runs Supercronic with the crontab file.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/supercronic.html.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[processes]\n  # The command below is used to launch a Rails server; be sure to\n  # replace with the command you're using to launch your server.\n  web = \"bin/rails fly:server\"\n  cron = \"supercronic /app/crontab\"\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Backup Command Structure\nDESCRIPTION: The main command structure for executing Postgres backup operations in Fly.io\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres backup [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Sentry integration with Fly.io applications\nDESCRIPTION: Command to configure your Fly.io application to use Sentry monitoring. This creates a Sentry account, maps it to your Fly.io organization, and sets up the SENTRY_DSN environment variable.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/sentry.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext sentry create\n```\n\n----------------------------------------\n\nTITLE: Converting from SQLite to PostgreSQL - Migration Reset\nDESCRIPTION: This bash script removes existing migrations, sets up a local PostgreSQL database URL, and initializes a new Prisma migration for converting from SQLite to PostgreSQL.\nSOURCE: https://github.com/superfly/docs/blob/main/js/prisma/postgres.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf prisma/migrations\nexport DATABASE_URL=postgres://$USER@localhost/localdb\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Checking Fly.io Application Deployment Status\nDESCRIPTION: Command to check the deployment status of an application on Fly.io using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[fly status](/docs/flyctl/status/)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking an Arcjet Account to a Fly App\nDESCRIPTION: Command to create an Arcjet account and link it to your Fly application, setting up the necessary security key as a secret.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly ext arcjet create\n```\n\n----------------------------------------\n\nTITLE: Simple Procfile for Process Definition\nDESCRIPTION: A basic Procfile that defines multiple processes for a Procfile manager to handle. Each line defines a process name and command to run.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfoo: /app/server \nbar: /app/server -bar\n```\n\n----------------------------------------\n\nTITLE: Deploying Rails Application to Fly.io\nDESCRIPTION: The fly deploy command builds and deploys the application to Fly.io based on the configuration in fly.toml and the Dockerfile.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile with PostgreSQL Support\nDESCRIPTION: Generate a Dockerfile that includes PostgreSQL libraries, necessary when adding a PostgreSQL database to an existing Rails application on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ bin/rails generate dockerfile --postgresql\n```\n\n----------------------------------------\n\nTITLE: Using the fly machine leases view Command\nDESCRIPTION: Command syntax for viewing machine leases in Fly.io. The command requires a machine ID and accepts optional flags like app name, configuration path, and output format options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_leases_view.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine leases view [machine-id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global options for flyctl\nDESCRIPTION: Global options applicable to all flyctl commands, including settings for API access token, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using Fly Doctor Diagnostics Command\nDESCRIPTION: Base command for running Fly.io diagnostics with optional flags for configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_doctor_diag.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly doctor diag [flags]\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile to Use Supervisord\nDESCRIPTION: Modified Dockerfile that installs and configures Supervisord for process management. It adds the Supervisord configuration file and sets it as the command to run.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM golang\n\nRUN apt-get update && \\\n    apt-get install -y \\\n        bash \\\n        supervisor \\\n        curl\n# ...\n\nADD supervisor.conf /app/\nCMD supervisord -c /app/supervisor.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Service in fly.toml\nDESCRIPTION: This TOML snippet shows the configuration for the HTTP service in the fly.toml file. It specifies the internal port, HTTPS enforcement, and machine management settings for the Fly.io deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/listening-ports.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[http_service]\n  internal_port = 3000\n  force_https = true\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 0\n  processes = [\"app\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Groups in fly.toml\nDESCRIPTION: TOML configuration for setting up separate process groups for the main app and SSR server.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-inertia-ssr.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[processes]\n  app=\"\"\n  ssr=\"php /var/www/html/artisan inertia:start-ssr\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Service in fly.toml\nDESCRIPTION: TOML configuration for setting up HTTP service with autostop/autostart features for a private Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autostart-internal-apps.html.md#2025-04-16_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[http_service]\n  internal_port = 8081\n  force_https = false\n  auto_stop_machines = \"stop\"\n  auto_start_machines = true\n  min_machines_running = 0\n  [http_service.concurrency]\n    type = \"requests\"\n    soft_limit = 250\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Environment Variables\nDESCRIPTION: Shell environment configuration for distributed Erlang with IPv6 support\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/clustering.html.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# configure node for distributed erlang with IPV6 support\nexport ERL_AFLAGS=\"-proto_dist inet6_tcp\"\nexport ECTO_IPV6=\"true\"\nexport DNS_CLUSTER_QUERY=\"${FLY_APP_NAME}.internal\"\nexport RELEASE_DISTRIBUTION=\"name\"\nexport RELEASE_NODE=\"${FLY_APP_NAME}-${FLY_IMAGE_REF##*-}@${FLY_PRIVATE_IP}\"\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database Cluster with Fly CLI\nDESCRIPTION: Command to create a new PostgreSQL database cluster using the Fly CLI. This is the primary method for setting up a PostgreSQL database on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/postgres-whats-next.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly pg create\n```\n\n----------------------------------------\n\nTITLE: Launching Rails App on Fly.io\nDESCRIPTION: Command to launch the Rails application on Fly.io platform\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/index.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch\n```\n\nLANGUAGE: output\nCODE:\n```\nScanning source code\nDetected a Rails app\nCreating app in ~/tmp/welcome\nWe're about to launch your Rails app on Fly.io. Here's what you're getting:\n\nOrganization: Jane Developer          (fly launch defaults to the personal org)\nName:         welcome-proud-sun-3423  (generated)\nRegion:       Ashburn, Virginia (US) (this is the fastest region for you)\nApp Machines: shared-cpu-1x, 1GB RAM (most apps need about 1GB of RAM)\nPostgres:     <none>                 (not requested)\nRedis:        <none>                 (not requested)\nTigris:       <none>                 (not requested)\n\n? Do you want to tweak these settings before proceeding? (y/N) \n```\n\n----------------------------------------\n\nTITLE: Options for Creating Upstash Redis Database\nDESCRIPTION: These are the available options when creating a Redis database with Fly CLI. They include settings for eviction, naming, organization, region selection, and replica configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_create.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --disable-eviction         Disallow writes when the max data size limit has been reached\n      --enable-eviction          Evict objects when memory is full\n  -h, --help                     help for create\n  -n, --name string              The name of your Redis database\n      --no-replicas              Don't prompt for selecting replica regions\n  -o, --org string               The target Fly.io organization\n  -r, --region string            The target region (see 'flyctl platform regions')\n      --replica-regions string   Comma-separated list of regions to deploy read replicas (see 'flyctl platform regions')\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action Workflow for Fly.io Review Apps\nDESCRIPTION: YAML configuration for a GitHub Action workflow that deploys review apps to Fly.io on pull request events. It sets up environment variables, defines jobs, and uses a custom action for deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/review-apps-guide.html.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Review App\non:\n  pull_request:\n    types: [opened, reopened, synchronize, closed]\n\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n  FLY_REGION: iad\n  FLY_ORG: personal\n\njobs:\n  review_app:\n    runs-on: ubuntu-latest\n    outputs:\n      url: ${{ steps.deploy.outputs.url }}\n    concurrency:\n      group: pr-${{ github.event.number }}\n\n    environment:\n      name: review\n      url: ${{ steps.deploy.outputs.url }}\n    steps:\n      - name: Get code\n        uses: actions/checkout@v4\n\n      - name: Deploy PR app to Fly.io\n        id: deploy\n        uses: superfly/fly-pr-review-apps@1.2.1\n```\n\n----------------------------------------\n\nTITLE: Viewing Fly.io Application Logs\nDESCRIPTION: Command to view logs for an application on Fly.io using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[fly logs](/docs/flyctl/logs/)\n```\n\n----------------------------------------\n\nTITLE: Using the fly extensions storage update Command\nDESCRIPTION: The basic syntax for updating an existing Tigris object storage bucket in Fly.io. This command allows you to modify various bucket properties including privacy settings, custom domains, and shadow bucket configurations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions storage update <bucket_name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Processes in fly.toml\nDESCRIPTION: TOML configuration for setting up multiple processes in a Fly application, defining both the Rails server and Sidekiq worker processes.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/sidekiq.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[processes]\napp = \"bin/rails server\"\nworker = \"bundle exec sidekiq\"\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly extensions kubernetes create' Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'fly extensions kubernetes create' command in the Fly CLI. It indicates that the command can be run with various flags to customize the cluster creation process.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions kubernetes create [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Combined Build Secrets in Dockerfile\nDESCRIPTION: Example showing how to use all build secrets at once in a Dockerfile using base64 encoded secrets.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/build-secrets.html.md#2025-04-16_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=secret,id=ALL_SECRETS \\\n    eval \"$(base64 -d /run/secrets/ALL_SECRETS)\" && \\\n    some_command\n```\n\n----------------------------------------\n\nTITLE: Customizing Dockerfile with Additional Packages\nDESCRIPTION: This command uses the Fly.io Dockerfile generator to add the 'dnsutils' package to the Dockerfile. It demonstrates how to customize the Dockerfile without directly editing it.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/dockerfiles.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nnpx dockerfile --add=dnsutils\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Process Mapping in Fly.io TOML File\nDESCRIPTION: The services section in fly.toml maps processes to specific services and ports, allowing different processes to handle different types of traffic.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[[services]]\n  processes = [\"web\"] # this service only applies to the web process\n  http_checks = []\n  internal_port = 8080\n  protocol = \"tcp\"\n  script_checks = []\n```\n\n----------------------------------------\n\nTITLE: Deploying Application with Fly CLI\nDESCRIPTION: Command to deploy an application using the Fly.io command line interface (flyctl) after completing setup and configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Updating Mix Dependencies for SQLite3\nDESCRIPTION: This Elixir code snippet shows how to replace the Postgres dependency with the SQLite3 Ecto adapter in your mix.exs file.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:ecto_sqlite3, \"~> 0.9.1\"}, # Latest version at time of publication.\n    # deps..\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Using fly machine exec Command to Execute Commands on Fly Machines\nDESCRIPTION: Command syntax for executing commands on a Fly Machine. Requires specifying a machine ID followed by the command to execute. Various options can be specified including application name, config path, output format, and timeout.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_exec.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine exec [machine-id] <command> [flags]\n```\n\n----------------------------------------\n\nTITLE: Deployment Troubleshooting Logs\nDESCRIPTION: Command to view full deployment logs for troubleshooting purposes.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/deployments.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly logs\n```\n\n----------------------------------------\n\nTITLE: Opening the Deployed App in Browser\nDESCRIPTION: Opens the deployed Django application in a web browser.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_16\n\nLANGUAGE: cmd\nCODE:\n```\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Consul Detach Command Options\nDESCRIPTION: Available command-specific options for the consul detach operation, including app name, configuration path, and variable name settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_consul_detach.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string             Application name\n  -c, --config string          Path to application configuration file\n  -h, --help                   help for detach\n      --variable-name string   The secret name that will be removed from the app. (default \"FLY_CONSUL_URL\")\n```\n\n----------------------------------------\n\nTITLE: Listing Supported TLS 1.3 Cipher Suites\nDESCRIPTION: This snippet enumerates the cipher suites supported by the Fly proxy for TLS version 1.3. These suites provide strong security for modern connections.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/tls.html.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTLS_AES_128_GCM_SHA256\nTLS_AES_256_GCM_SHA384\nTLS_CHACHA20_POLY1305_SHA256\n```\n\n----------------------------------------\n\nTITLE: Checking App Status\nDESCRIPTION: Command to get a brief overview of an app including its machines and their current status.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly status -a testrun\n```\n\nLANGUAGE: out\nCODE:\n```\nApp\n  Name     = testrun          \n  Owner    = personal         \n  Hostname = testrun.fly.dev  \n  Platform = machines         \n\nID              STATE   REGION  HEALTH CHECKS           IMAGE                                           CREATED                 UPDATED              \n06e82d43ad1587  started yyz     1 total, 1 passing      testrun:deployment-01GQ0HKV6TDT7DX0G50MT50FZD   2023-01-17T17:54:04Z    2023-01-17T21:42:33Z\n```\n\n----------------------------------------\n\nTITLE: Using the fly config validate command\nDESCRIPTION: Basic usage syntax for the fly config validate command, which validates an application's configuration file against the Fly platform to ensure it is correct and meaningful.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config_validate.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly config validate [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring and Deploying Redis Fly Application\nDESCRIPTION: Series of commands to configure the Redis application, including setting a password, creating a volume for data persistence, updating the fly.toml file, and finally deploying the application.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/multiple-applications.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set REDIS_PASSWORD=mypassword\n\nflyctl volumes create redis_server\n\ncat <<EOT >> fly.toml\n[mounts]\n  source      = \"redis_server\"\n  destination = \"/data\"\nEOT\n\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Secrets from a .dotenv File\nDESCRIPTION: This command shows how to import multiple secrets from a .dotenv file using the fly secrets import command. It reads the contents of the .dotenv file and sets them as secrets.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/secrets.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets import < .dotenv\n```\n\n----------------------------------------\n\nTITLE: Setting Release Command for Prisma Migrations in fly.toml\nDESCRIPTION: This configuration in fly.toml specifies the release command to run Prisma migrations during deployment using npx prisma migrate deploy.\nSOURCE: https://github.com/superfly/docs/blob/main/js/prisma/postgres.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n  release_command = 'npx prisma migrate deploy'\n```\n\n----------------------------------------\n\nTITLE: Options for Fly Postgres Backup Create Command\nDESCRIPTION: These are the available options for the 'fly postgres backup create' command. They allow specifying the application name, configuration file path, and backup details.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string             Application name\n  -c, --config string          Path to application configuration file\n  -h, --help                   help for create\n  -i, --immediate-checkpoint   Forces Postgres to perform an immediate checkpoint\n  -n, --name string            Backup name\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails Binstubs for Proper Directory Context in Fly.io\nDESCRIPTION: Command to modify the Dockerfile to ensure Rails binstubs set the correct working directory when executed. This is necessary for running Rails tasks properly on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/run-tasks-and-consoles.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate dockerfile --bin-cd\n```\n\n----------------------------------------\n\nTITLE: Supervisord Configuration for Process Management\nDESCRIPTION: Configuration file for Supervisord that manages multiple processes. It sets up logging to stdout and defines two programs to be managed, each running the server with different parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[supervisord]\nlogfile=/dev/stdout \nlogfile_maxbytes=0  \nloglevel=info\npidfile=/tmp/supervisord.pid\nnodaemon=true\nuser=root\n\n[unix_http_server]\nfile=/tmp/supervisor.sock\n\n[program:foo]\ncommand=/app/server\n\n[program:bar]\ncommand=/app/server -bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Passenger and Rails\nDESCRIPTION: Nginx server configuration that sets up Passenger for a Rails application. It specifies the Ruby version, listening port, and other key settings required for proper functioning.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/phusion-passenger.html.md#2025-04-16_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 8080;\n    server_name www.webapp.com;\n    root /app/public;\n\n    # The following deploys your Ruby/Python/Node.js/Meteor app on Passenger.\n\n    # Not familiar with Passenger, and used (G)Unicorn/Thin/Puma/pure Node before?\n    # Yes, this is all you need to deploy on Passenger! All the reverse proxying,\n    # socket setup, process management, etc are all taken care automatically for\n    # you! Learn more at https://www.phusionpassenger.com/.\n    passenger_enabled on;\n    passenger_user app;\n\n    # If this is a Ruby app, specify a Ruby version:\n    # For Ruby 3.1\n    passenger_ruby /usr/bin/ruby3.1;\n    # For Ruby 3.0\n    # passenger_ruby /usr/bin/ruby3.0;\n    # For Ruby 2.7\n    # passenger_ruby /usr/bin/ruby2.7;\n    # For Ruby 2.6\n    # passenger_ruby /usr/bin/ruby2.6;\n\n    # Nginx has a default limit of 1 MB for request bodies, which also applies\n    # to file uploads. The following line enables uploads of up to 50 MB:\n    client_max_body_size 50M;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stimulus Controller for Fly.io Instance Routing Optimization\nDESCRIPTION: JavaScript Stimulus controller that adds the fly-force-instance-id header to Turbo requests, optimizing subsequent requests by routing directly to the correct machine and avoiding multiple hops.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/cell-based.html.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\n// Connects to data-controller=\"fly-router\"\nexport default class extends Controller {\n  connect() {\n    console.log('fly router connected')\n    this.instance = this.element.dataset.instance;\n\n    document.documentElement.addEventListener(\n     'turbo:before-fetch-request',\n     this.beforeFetchRequest\n    )\n  }\n\n  disconnect() {\n    document.documentElement.removeEventListener(\n     'turbo:before-fetch-request',\n     this.beforeFetchRequest\n    )\n  }\n\n  beforeFetchRequest = event => {\n    console.log('injecting ' + this.instance);\n    event.detail.fetchOptions.headers['fly-force-instance-id'] = this.instance;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying fly.toml Configuration for SQLite3\nDESCRIPTION: This diff shows the necessary changes to fly.toml to set up the DATABASE_PATH environment variable and remove the release command to allow database migrations during application startup.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n[env]\n+ DATABASE_PATH = \"/mnt/name/name.db\"\n\n-[deploy]\n-  release_command = \"/app/bin/migrate\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Rake Tasks for Fly.io SSH Commands in Rails\nDESCRIPTION: Ruby code for creating custom rake tasks that simplify accessing SSH console, Rails console, and database console on Fly.io. These tasks reduce the number of keystrokes needed for common operations.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/run-tasks-and-consoles.html.md#2025-04-16_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :fly do\n  task :ssh do\n    sh 'fly ssh console --pty -C \"sudo -iu rails\"'\n  end\n\n  task :console do\n    sh 'fly ssh console --pty -C \"/rails/bin/rails console\"'\n  end\n\n  task :dbconsole do\n    sh 'fly ssh console --pty -C \"/rails/bin/rails dbconsole\"'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for 'fly volumes extend' in Bash\nDESCRIPTION: These are the specific options available for the 'fly volumes extend' command. They include options for specifying the application, configuration file path, help, JSON output, target volume size, and confirmation acceptance.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_extend.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for extend\n  -j, --json            JSON output\n  -s, --size string     Target volume size in gigabytes\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 for Development Environment\nDESCRIPTION: This code configures the Ecto repository to use SQLite3 in the development environment with the appropriate database path.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :name, Name.Repo,\n  database: Path.expand(\"../name_dev.db\", Path.dirname(__ENV__.file)),\n  pool_size: 5,\n  show_sensitive_data_on_connection_error: true\n```\n\n----------------------------------------\n\nTITLE: Running Rails Database Migrations via SSH in Fly.io\nDESCRIPTION: Command to execute Rails database migrations on a deployed application through SSH. Requires the --bin-cd configuration to be applied to the Dockerfile.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/run-tasks-and-consoles.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console -C \"/rails/bin/rails db:migrate\"\n```\n\n----------------------------------------\n\nTITLE: Using the Fly CLI to Get Tigris Storage Bucket Status\nDESCRIPTION: This command displays details about a specified Tigris storage bucket. It requires the bucket name as an argument and accepts various flags for configuration and output control.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions storage status [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling IPv6 Support for Local Elixir Application\nDESCRIPTION: This command demonstrates how to start an Elixir application with IPv6 support enabled, which is necessary for clustering with a Fly.io deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/clustering-from-home-to-your-app-in-fly.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\niex --erl \"-proto_dist inet6_tcp\" --sname local [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Service in fly.toml\nDESCRIPTION: TOML configuration for the HTTP service in fly.toml, specifying that the service only applies to the app process and not the worker process.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/sidekiq.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[http_service]\n  processes = [\"app\"] # this service only applies to the app process\n  internal_port = 3000\n  force_https = true\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 0\n```\n\n----------------------------------------\n\nTITLE: Heroku Procfile Example for Multi-Process Rails Application\nDESCRIPTION: A sample Procfile from Heroku that defines web server, background worker, and release processes for a Rails application.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_9\n\nLANGUAGE: Procfile\nCODE:\n```\nweb: bundle exec puma -C config/puma.rb\nworker: bundle exec sidekiq\nrelease: rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Creating an Upstash Kafka Cluster using Fly CLI\nDESCRIPTION: This command creates a new Upstash Kafka cluster on Fly.io. It prompts for organization selection, cluster name, and primary region. The command returns connection details including password, username, and TCP endpoint.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/kafka.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext kafka create\n```\n\n----------------------------------------\n\nTITLE: Accessing Interactive Rails User Shell via SSH in Fly.io\nDESCRIPTION: Command to open an interactive shell session as the rails user on a Fly.io deployed application. Requires prior setup with the --sudo Dockerfile option.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/run-tasks-and-consoles.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console --pty -C 'sudo -iu rails'\n```\n\nLANGUAGE: output\nCODE:\n```\n$\n```\n\n----------------------------------------\n\nTITLE: Updating Postgres to Latest Point Release\nDESCRIPTION: Command to update a Postgres cluster to the latest available point release. This is needed because Fly doesn't automatically upgrade Postgres versions.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/postgres-whats-next.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly image update\n```\n\n----------------------------------------\n\nTITLE: Viewing Fly.io Application Logs\nDESCRIPTION: Command to view application logs captured by Fly.io service\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/post-deployment.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly logs\n```\n\nLANGUAGE: output\nCODE:\n```\n2022-09-23T12:05:07Z app[8ebaa037] ams [info]{\"message\":\"reached test\",\"context\":{},\"level\":200,\"level_name\":\"INFO\",\"channel\":\"production\",\"datetime\":\"2022-09-23T12:05:07.200105+00:00\",\"extra\":{}}\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Shows the global options that can be used with any Fly CLI command, including authentication token and debug/verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Version Command Usage\nDESCRIPTION: The basic command to display flyctl version information\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_version.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly version [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands\nDESCRIPTION: These global options can be used with any fly command, including 'config env'. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config_env.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Testing Rails Application Locally with Docker\nDESCRIPTION: This set of commands allows testing the Rails application locally using Docker Compose before deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nbin/rails generate dockerfile --compose\nexport RAILS_MASTER_KEY=$(cat config/master.key)\ndocker compose build\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Creating a Volume for SQLite3 Database in Fly.io\nDESCRIPTION: This command creates a persistent volume to store your SQLite3 database. You can optionally specify the size in gigabytes using the --size parameter.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly volumes create name\n```\n\n----------------------------------------\n\nTITLE: Scaling Machine Count with flyctl\nDESCRIPTION: Command-line instructions for scaling the number of Machines using flyctl. It demonstrates how to scale to a specific count and how to deploy Machines across multiple regions.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/resilient-apps-multiple-machines.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly scale count 2\n```\n\nLANGUAGE: bash\nCODE:\n```\nfly scale count 20 --region ams,ewr,gig\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Instance on Fly.io\nDESCRIPTION: Command line interaction to provision a Redis instance on Fly.io platform with configuration options.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/turbo-streams-and-action-cable.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly redis create\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly apps destroy Command\nDESCRIPTION: Command syntax for deleting applications from Fly platform. Accepts one or more application names as arguments.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly apps destroy <app name(s)> [flags]\n```\n\n----------------------------------------\n\nTITLE: Mounting Docker Build Secrets in Dockerfile\nDESCRIPTION: Example showing how to mount secrets within a Dockerfile RUN statement. The secret is made available in the /run/secrets directory during build time.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/build-secrets.html.md#2025-04-16_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Note: You can mount multiple secrets\nRUN --mount=type=secret,id=MY_SUPER_SECRET \\\n    MY_SUPER_SECRET=\"$(cat /run/secrets/MY_SUPER_SECRET)\" some_command \\\n    && more_commands_maybe\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for Rails App\nDESCRIPTION: Command to update the Dockerfile for your Rails application, ensuring it uses the correct versions of tools and runtimes.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ bin/rails generate dockerfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Processes in Fly.io TOML File\nDESCRIPTION: The processes section in fly.toml defines multiple processes that should run in the application container, equivalent to Heroku's Procfile.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[processes]\nweb = \"bundle exec puma -C config/puma.rb\"\nworker = \"bundle exec sidekiq\"\n```\n\n----------------------------------------\n\nTITLE: Options for MySQL Database Creation in Fly.io\nDESCRIPTION: These are the available options when creating a MySQL database using the Fly.io CLI. They include settings for application configuration, resource allocation, naming, and region selection.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n      --cpu int         The number of CPUs assigned to each cluster member\n      --disk int        Disk size (in GB) assigned to each cluster member\n  -h, --help            help for create\n      --memory int      Memory (in GB) assigned to each cluster member\n  -n, --name string     The name of your database\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl platform regions')\n      --size int        The number of members in your cluster\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Basic Deployment Command for Fly.io\nDESCRIPTION: Command to deploy an application to Fly.io platform.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/deployments.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Managing Environment-Specific Configuration Files for Fly.io\nDESCRIPTION: These commands create separate configuration files for staging and production environments. This separation supports HIPAA compliance by maintaining distinct configurations for different environments handling PHI.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cp fly.toml fly.staging.toml\n$ mv fly.toml fly.production.toml\n```\n\n----------------------------------------\n\nTITLE: Testing Local Service Connection with cURL\nDESCRIPTION: Example of using cURL to test connection to a local service running inside a Fly Machine VM with a HEAD request. Shows how to verify service availability and response headers.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/app-services.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# curl -I http://localhost:80\n```\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nServer: nginx/1.23.4\nDate: Tue, 02 May 2023 20:32:32 GMT\nContent-Type: text/html\nContent-Length: 615\nLast-Modified: Tue, 28 Mar 2023 15:01:54 GMT\nConnection: keep-alive\nETag: \"64230162-267\"\nAccept-Ranges: bytes\n\n```\n\n----------------------------------------\n\nTITLE: Deploying a Fly.io Application\nDESCRIPTION: Command to deploy an application to Fly.io using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[fly deploy](/docs/flyctl/deploy/)\n```\n\n----------------------------------------\n\nTITLE: Creating Worker Script from Server Script\nDESCRIPTION: Command to copy the existing server script as a base for the worker script.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\ncp rel/overlays/bin/server rel/overlays/bin/worker\n```\n\n----------------------------------------\n\nTITLE: Deploying Active Storage Rails App to Fly.io\nDESCRIPTION: Command to launch and deploy the Rails application to Fly.io, which will automatically configure Tigris for Active Storage if applicable.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-storage.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly machine clone' Command in Bash\nDESCRIPTION: This command clones a Fly Machine. It creates a new Machine as a copy of the specified Machine. If the original Machine has a volume, a new empty volume is created and attached to the new Machine.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_clone.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine clone [machine_id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing flyctl CLI using Homebrew\nDESCRIPTION: Command to install the Fly.io command-line tool (flyctl) using the Homebrew package manager on macOS.\nSOURCE: https://github.com/superfly/docs/blob/main/index.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nbrew install flyctl\n```\n\n----------------------------------------\n\nTITLE: Creating a standby Machine for resilience\nDESCRIPTION: Command to create a standby Machine that remains stopped unless specified Machines are affected by a host failure, providing resilience for Machines without Fly Proxy services.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_21\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --standby-for 287444ec026748,148ed726c54768\n```\n\n----------------------------------------\n\nTITLE: Creating a Flexible Bash Entrypoint Script\nDESCRIPTION: A bash entrypoint script that handles command passing for process groups. It either executes the passed command or defaults to starting the server if no command is provided.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nif [[ $# -gt 0 ]]; then\n    # If we pass a command, run it\n    exec \"$@\"\nelse\n    # Else default to starting the server\n    exec /app/server\nfi\n```\n\n----------------------------------------\n\nTITLE: Deploying Updates to a Rails App on Fly.io\nDESCRIPTION: Command to deploy changes and run migrations for a Rails application on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/fly-rails.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails fly:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating a New Phoenix Project with SQLite3\nDESCRIPTION: This command creates a new Phoenix project configured to use SQLite3 as the database from the start.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmix phx.new my_app --database sqlite3\n```\n\n----------------------------------------\n\nTITLE: Updating Fly CLI Version\nDESCRIPTION: Commands for updating the Fly CLI (flyctl) and managing auto-updates.\nSOURCE: https://github.com/superfly/docs/blob/main/getting-started/troubleshooting.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly version update\n```\n\nLANGUAGE: cmd\nCODE:\n```\nfly settings autoupdate enable\n```\n\n----------------------------------------\n\nTITLE: Using Bash for Multiple Process Management\nDESCRIPTION: A simple bash script approach to running multiple processes. It launches processes in the background and foregrounds one of them to prevent the container from exiting.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nset -m # to make job control work\n/app/server &\n/app/server -bar &\nfg %1 # gross!\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Static Files Collection for Django\nDESCRIPTION: Dockerfile configuration that includes collecting static files during the build process rather than in the release command. This is necessary because release commands cannot modify local storage in Fly.io deployments.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_15\n\nLANGUAGE: docker\nCODE:\n```\nARG PYTHON_VERSION=3.10-slim-bullseye\n\nFROM python:${PYTHON_VERSION}\n\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\nRUN mkdir -p /code\n\nWORKDIR /code\n\nCOPY requirements.txt /tmp/requirements.txt\nRUN set -ex && \\\n    pip install --upgrade pip && \\\n    pip install -r /tmp/requirements.txt && \\\n    rm -rf /root/.cache/\nCOPY . /code\n\n# ↓ Added ↓\nRUN set -ex && \\\n    python /code/manage.py collectstatic --noinput\n\nEXPOSE 8000\n\nCMD [\"gunicorn\", \"--bind\", \":8000\", \"--workers\", \"2\", \"hello_pr_preview_example.wsgi\"]\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for Updating Upstash Redis Database with Fly CLI\nDESCRIPTION: The basic syntax for using the 'fly redis update' command to update an Upstash Redis database. It requires specifying the database name and allows for additional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly redis update <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing DNS Clustering in Application\nDESCRIPTION: Elixir application configuration for DNS-based clustering setup\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/clustering.html.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule HelloElixir.Application do\n  use Application\n\n  def start(_type, _args) do\n    children = [\n      # ...\n      # setup for clustering\n      {Phoenix.PubSub, ...},\n      {DNSCluster, query: Application.get_env(:hello_elixir, :dns_cluster_query) || :ignore},\n      HelloElixirWeb.Endpoint\n    ]\n\n    # ...\n  end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using Fly Dashboard Command\nDESCRIPTION: Basic command syntax for opening the Fly Web UI dashboard.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly dashboard [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database with Fly CLI\nDESCRIPTION: This command creates a new MySQL database cluster using Fly CLI. It supports various options for configuring the database, including specifying the application, CPU, memory, disk size, and region.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mysql create [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly.io Application Configuration\nDESCRIPTION: TOML configuration for the Fly.io application, including GPU settings, swap configuration, and volume mounts\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/python-gpu-example.html.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\napp = \"cgpu-allinone\"   # Change this to your app's name\nprimary_region = \"ord\"  # If you change this, ensure it's to a region that offers GPUs\nvm.size = \"a100-40gb\"   # A shorthand for the size preset in the [[vm]] section\nswap_size_mb = 32768    # This enables 32GB swap\n\n[build]\n  [build.args]\n    NONROOT_USER = \"pythonuser\" # Access this value in the Dockerfile using `ARG NONROOT_USER`\n\n# Use a volume to store LLMs or any big file that doesn't fit in a Docker image\n# This whole volume will be the non-root user's home directory\n[mounts]\nsource = \"data\"\ndestination = \"/home/pythonuser\"   # Make sure this matches the value of the NONROOT_USER build arg\n# initial_size = \"50gb\"            # Uncomment to set the size for the volume created on first deployment\n```\n\n----------------------------------------\n\nTITLE: Specifying PHP and Node Versions in fly.toml for Laravel Apps\nDESCRIPTION: This TOML snippet demonstrates how to define custom PHP and NodeJS versions in the fly.toml configuration file. It allows developers to specify exact versions for their Laravel application build environment.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/php-node-version.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build]\n  [build.args]\n    PHP_VERSION = \"8.3\"\n    NODE_VERSION = \"18\"\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly services' Command in Fly.io CLI\nDESCRIPTION: Demonstrates the basic usage syntax for the 'fly services' command in the Fly.io command line interface. This command is used to show information about the services of the application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_services.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly services [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Opening Deployed Application in Browser\nDESCRIPTION: Command to open the deployed application in a web browser.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/deployments.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Using SSH Command in Fly.io CLI\nDESCRIPTION: The basic usage syntax for the 'fly ssh' command. It allows for running SSH-related commands with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Fly CLI in Dockerfile\nDESCRIPTION: Dockerfile instructions to install the Fly CLI and set up the necessary environment variables.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRUN curl -L https://fly.io/install.sh | sh\nENV FLYCTL_INSTALL=\"/root/.fly\"\nENV PATH=\"$FLYCTL_INSTALL/bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile with Build-time Asset Precompilation\nDESCRIPTION: Generate a Dockerfile that performs asset precompilation at build time, which is more efficient for deployment but requires resolving secret access issues.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nbin/rails generate dockerfile --precompile=build\n```\n\n----------------------------------------\n\nTITLE: Defining Fly Proxy Network Services with Port Mapping\nDESCRIPTION: Demonstrates how to map external ports to internal ports on a Fly Machine, specifying protocols and connection handlers. This example configures HTTP on port 80 and HTTPS on port 443.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_10\n\nLANGUAGE: plain\nCODE:\n```\nport[:machinePort][/protocol[:handler[:handler...]]]\n```\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --port 80/tcp:http \\\n                  --port 443:80/tcp:http:tls \\\n                  --app my-app-name\n```\n\n----------------------------------------\n\nTITLE: Setting Fly API Token as Secret\nDESCRIPTION: Command to set the Fly API token as a secret for the application.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set FLY_API_TOKEN=$(fly tokens deploy)\n```\n\n----------------------------------------\n\nTITLE: Creating Procfile for Process Management\nDESCRIPTION: Procfile.fly configuration to start nginx, Rails server, AnyCable, and WebSocket server processes.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/anycable.html.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nnginx: nginx -g 'daemon off;'\nserver: bin/rails server -p 8081\nanycable: bundle exec anycable\nws: anycable-go --port=8082\n```\n\n----------------------------------------\n\nTITLE: Setting Read-Only Token for Prometheus Access\nDESCRIPTION: These bash commands create a read-only token for the organization and set it as a secret for the autoscaler app, allowing access to Prometheus metrics.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autoscale-machines.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ fly tokens create readonly -o my-org\n$ fly secrets set -o my-autoscaler --stage FAS_PROMETHEUS_TOKEN=\"FlyV1 ...\"\n```\n\n----------------------------------------\n\nTITLE: Observer Script with IPv6 Support\nDESCRIPTION: Example of running the IEx session with IPv6 support enabled for connecting to Fly.io's IPv6 network.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-observer-to-your-app.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\niex --erl \"-proto_dist inet6_tcp\" --sname my_remote --cookie ${COOKIE} -e \"IO.inspect(Node.connect(:'${FULL_NODE_NAME}'), label: \\\"Node Connected?\\\"); IO.inspect(Node.list(), label: \\\"Connected Nodes\\\"); :observer.start\"\n```\n\n----------------------------------------\n\nTITLE: Using the Fly CLI to List Application Releases\nDESCRIPTION: Command for listing all releases of an application on the Fly platform. Shows deployment history including type, timestamp, success/failure status, and the user who initiated the release.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_releases.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly apps releases [flags]\n```\n\n----------------------------------------\n\nTITLE: Provisioning Response in JavaScript\nDESCRIPTION: Example of a response to a provisioning request. It includes a unique ID, configuration details with environment variables, and optional fields for Fly.io application name and updated extension name.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"id\": \"432cb1c9-4d06-4a91-95dc-bc7aa27b896d\",\n  \"config\": {\n    \"LOGJAM_URL\": \"https://user:password@test.logjam.io\"\n  },\n  \"name\": \"logjam-1bd03ba\",\n  \"fly_app_name\": \"logjam-production\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Secret for Fly.io Application\nDESCRIPTION: This command sets the DATABASE_URL secret for a Fly.io application, allowing it to connect to a Managed Postgres instance. The secret contains the connection string with username, password, host, port, and database name.\nSOURCE: https://github.com/superfly/docs/blob/main/mpg/overview.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set DATABASE_URL=\"postgres://username:password@host:port/database\"\n```\n\n----------------------------------------\n\nTITLE: Updating Tigris Object Storage Bucket with Fly CLI\nDESCRIPTION: This command updates an existing Tigris object storage bucket. It allows for various configurations including setting custom domains, configuring shadow buckets, and modifying access permissions.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly storage update <bucket_name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Upstash Kafka Cluster with fly CLI\nDESCRIPTION: Command syntax for provisioning a new Upstash Kafka cluster using the Fly.io CLI. This command allows users to create a Kafka cluster with specific configuration options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions kafka create [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Update Command Options\nDESCRIPTION: Complete list of options available for the 'fly machine update' command, including application settings, resource allocation, networking, environment variables, and more.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                  Application name\n      --autostart                   Automatically start a stopped Machine when a network request is received (default true)\n      --autostop string[=\"stop\"]    Automatically stop a Machine when there are no network requests for it. Options include 'off', 'stop', and 'suspend'. (default \"off\")\n      --build-depot                 Build your image with depot.dev\n      --build-nixpacks              Build your image with nixpacks\n  -C, --command string              Command to run\n  -c, --config string               Path to application configuration file\n      --detach                      Return immediately instead of monitoring deployment progress\n      --dockerfile string           The path to a Dockerfile. Defaults to the Dockerfile in the working directory.\n      --entrypoint string           The command to override the Docker ENTRYPOINT.\n  -e, --env stringArray             Set of environment variables in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --file-literal stringArray    Set of literals to write to the Machine, in the form of /path/inside/machine=VALUE pairs, where VALUE is the base64-encoded raw content. Can be specified multiple times.\n      --file-local stringArray      Set of files to write to the Machine, in the form of /path/inside/machine=<local/path> pairs. Can be specified multiple times.\n      --file-secret stringArray     Set of secrets to write to the Machine, in the form of /path/inside/machine=SECRET pairs, where SECRET is the name of the secret. The content of the secret must be base64 encoded. Can be specified multiple times.\n  -h, --help                        help for update\n      --host-dedication-id string   The dedication id of the reserved hosts for your organization (if any)\n  -i, --image string                The Docker image to deploy\n      --kernel-arg stringArray      A list of kernel arguments to provide to the init. Can be specified multiple times.\n      --machine-config string       Read machine config from json file or string\n  -m, --metadata stringArray        Metadata in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --mount-point string          New volume mount point\n  -p, --port strings                The external ports and handlers for services, in the format: port[:machinePort][/protocol[:handler[:handler...]])])\n                                    \tFor example: --port 80/tcp --port 443:80/tcp:http:tls --port 5432/tcp:pg_tls\n                                    \tTo remove a port mapping use '-' as handler. For example: --port 80/tcp:-\n      --restart string              Set the restart policy for a Machine. Options include 'no', 'always', and 'on-fail'.\n                                    \tDefault is 'on-fail' for Machines created by 'fly deploy' and Machines with a schedule. Default is 'always' for Machines created by 'fly m run'.\n      --schedule string             Schedule a Machine run at hourly, daily and monthly intervals\n      --skip-dns-registration       Do not register the machine's 6PN IP with the internal DNS system\n      --skip-health-checks          Updates machine without waiting for health checks.\n      --skip-start                  Updates machine without starting it.\n      --standby-for strings         For Machines without services, a comma separated list of Machine IDs to act as standby for.\n      --vm-cpu-kind string          The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                 Number of CPUs\n      --vm-gpu-kind string          If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                 Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string            Memory (in megabytes) to attribute to the VM\n      --vm-size string              The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n      --wait-timeout int            Seconds to wait for individual machines to transition states and become healthy. (default 300) (default 300)\n  -y, --yes                         Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Fly Scale Count Command Options\nDESCRIPTION: This snippet lists all available options for the 'fly scale count' command. It includes flags for specifying the application, configuration file, environment variables, VM specifications, and other scaling parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_count.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                  Application name\n  -c, --config string               Path to application configuration file\n  -e, --env stringArray             Set of environment variables in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --from-snapshot string        New volumes are restored from snapshot, use 'last' for most recent snapshot. The default is an empty volume\n  -h, --help                        help for count\n      --host-dedication-id string   The dedication id of the reserved hosts for your organization (if any)\n      --max-per-region int          Max number of VMs per region (default -1)\n  -g, --process-group string        The process group to scale\n  -r, --region string               Comma separated list of regions to act on. Defaults to all regions where there is at least one machine running for the app\n      --vm-cpu-kind string          The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                 Number of CPUs\n      --vm-gpu-kind string          If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                 Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string            Memory (in megabytes) to attribute to the VM\n      --vm-size string              The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n      --with-new-volumes            New machines each get a new volumes even if there are unattached volumes available\n  -y, --yes                         Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Custom Symfony Runtime Implementation\nDESCRIPTION: PHP class extending SymfonyRuntime to disable .env file requirement for Fly.io deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-symfony.html.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass FlySymfonyRuntime extends SymfonyRuntime\n{\n    public function __construct(array $options = [])\n    {\n        $options['disable_dotenv'] = true;\n\n        parent::__construct($options);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global configuration options that can be applied to any Fly CLI command, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Job Response Output\nDESCRIPTION: Sample response shown when initiating a job through the /job/start endpoint. This represents the Ruby ActiveJob object that's been created.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n#<MachineJob:0x00007f2b31b047e0>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fly App for Arcjet\nDESCRIPTION: Command to set up a new Fly application without immediate deployment, generating the necessary Dockerfile and configuration files.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly launch --no-deploy\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global options applicable to all Fly CLI commands, including Arcjet extension commands. These allow for authentication via access token and control debug/verbose output levels.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Machine Uncordon Command\nDESCRIPTION: The 'fly machine uncordon' command is used to reactivate all services on one or more specified machines. It requires machine ID(s) and supports app specification and configuration path options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_uncordon.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine uncordon [<id>...] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options applicable to all Fly.io CLI commands, including authentication token specification and debug/verbose logging controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Deploying Ollama on Fly.io for testing private network\nDESCRIPTION: Series of commands to launch an Ollama instance from a demo repository, allocate a private IPv6 address, and deploy it to test the WireGuard connection.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/connect-private-network-wireguard/index.html.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfly launch --from https://github.com/fly-apps/ollama-demo --no-deploy\nfly ips allocate-v6 --private\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Executing Postgres Backup Restore Command\nDESCRIPTION: Basic command syntax for restoring a Postgres backup to a new cluster destination.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_restore.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres backup restore <destination-app-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Scaling EdgeDB App Memory\nDESCRIPTION: Command to scale the memory allocation for the EdgeDB app from the default 256MB to 1024MB to ensure adequate performance.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl scale memory 1024\n```\n\n----------------------------------------\n\nTITLE: Deploying Rails App on Fly.io\nDESCRIPTION: Deploy your Rails application to Fly.io using the 'fly deploy' command. This uploads your app, builds a machine image, deploys it, and monitors the startup process.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Build Target Deployment\nDESCRIPTION: Commands demonstrating how to deploy specific stages of a multi-stage Dockerfile using the --build-target flag.\nSOURCE: https://github.com/superfly/docs/blob/main/launch/monorepo.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy --build-target web\nfly deploy --build-target api\nfly deploy --build-target worker\n```\n\n----------------------------------------\n\nTITLE: Creating Tigris Storage Bucket using CLI\nDESCRIPTION: Command to create a new storage bucket using the Fly CLI tool. This command sets up necessary AWS-compatible credentials and environment variables.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/object-storage.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly storage create\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly.io App with Rails Generator\nDESCRIPTION: Command to generate Fly.io configuration files for the Rails app with passenger and serverless options.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate fly:app --passenger --serverless\n```\n\n----------------------------------------\n\nTITLE: Launching Applications on Fly.io\nDESCRIPTION: This command initiates the process of launching an application on Fly.io. It automatically generates a Dockerfile and handles the deployment setup.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/dockerfiles.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Accessing SSH Console on Fly.io\nDESCRIPTION: The fly ssh console command provides shell access to the deployed application container for executing commands directly.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console\n```\n\n----------------------------------------\n\nTITLE: Updating Django Settings for Production\nDESCRIPTION: Modifies the settings.py file to allow requests from the Fly.io domain by using the FLY_APP_NAME environment variable.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# hello_django/settings.py\nimport os\n\nAPP_NAME = os.environ.get(\"FLY_APP_NAME\")\nALLOWED_HOSTS = [f\"{APP_NAME}.fly.dev\"]  # ← Updated!\n```\n\n----------------------------------------\n\nTITLE: Opening the Sentry dashboard for a Fly.io application\nDESCRIPTION: Command to open the Sentry dashboard for the project associated with the current Fly.io application. This provides access to monitoring data and error reports.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/sentry.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext sentry dashboard\n```\n\n----------------------------------------\n\nTITLE: Running Fly Diagnostics\nDESCRIPTION: Command to run basic connectivity tests for WireGuard, IP addresses, and Docker instance.\nSOURCE: https://github.com/superfly/docs/blob/main/getting-started/troubleshooting.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly doctor\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for Access Token in HTTP\nDESCRIPTION: HTTP POST request to exchange the authorization code for an access token. It includes the client_id, client_secret, grant_type, code, and redirect_uri parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.fly.io/oauth/token\n\nclient_id=logjam\nclient_secret=123\ngrant_type=authorization_code\ncode=myauthcode\nredirect_uri=https://logjam.io/flyio/callback\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Gem Configuration in Rails\nDESCRIPTION: Configuration for Redis gem in the Gemfile to enable Action Cable functionality in production.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/turbo-streams-and-action-cable.html.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Use Redis adapter to run Action Cable in production\ngem \"redis\", \"~> 4.0\"\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile with Dev Dependencies\nDESCRIPTION: Command to generate a Dockerfile that includes all dependencies including devDependencies for deployment purposes.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/dependencies.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnpx dockerfile --dev\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Configuration for Symfony\nDESCRIPTION: Dockerfile command to copy custom runtime implementation during deployment build process.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-symfony.html.md#2025-04-16_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\ncp .fly/FlySymfonyRuntime.php /var/www/html/src/FlySymfonyRuntime.php\n```\n\n----------------------------------------\n\nTITLE: Managing SSL Certificates for Fly.io Applications\nDESCRIPTION: Command to manage SSL certificates for applications on Fly.io using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n[fly certs](/docs/flyctl/certs/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-sensitive Environment Variables in fly.toml\nDESCRIPTION: Example of how to set non-sensitive environment variables in the fly.toml configuration file using the [env] directive. This shows setting RAILS_LOG_TO_STDOUT which is a common Rails configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/configuration.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  RAILS_LOG_TO_STDOUT = x\n```\n\n----------------------------------------\n\nTITLE: Opening Rails Console on Fly.io\nDESCRIPTION: Open a Rails console on an ephemeral machine for troubleshooting production issues. This is recommended for apps not using sqlite3 or volumes.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfly console\n```\n\n----------------------------------------\n\nTITLE: Viewing Fly.io Application Logs\nDESCRIPTION: View the log files of your deployed Rails application using the 'fly logs' command. This shows recent log entries and continues to tail the production logs.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfly logs\n```\n\n----------------------------------------\n\nTITLE: Using fly litefs-cloud import Command in Bash\nDESCRIPTION: This command imports a local SQLite database into a LiteFS Cloud cluster. It requires specifying the cluster name, database name, and input filename. Additional options allow for JSON output and targeting a specific Fly.io organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_import.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly litefs-cloud import [flags]\n```\n\n----------------------------------------\n\nTITLE: SSH Console Access\nDESCRIPTION: Commands to access a machine's console via SSH and run commands remotely.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console -s\n```\n\nLANGUAGE: out\nCODE:\n```\n? Select Machine: iad: e286065f969386 fdaa:0:3b99:a7b:8aeb:fea3:148b:2 rough-tree-1360\nConnecting to fdaa:0:3b99:a7b:8aeb:fea3:148b:2... complete\n# \n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SDK for Node.js\nDESCRIPTION: Command to install the Arcjet SDK package for Node.js applications as a dependency.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @arcjet/node\n```\n\n----------------------------------------\n\nTITLE: Setting Up an Active Storage Demo Application in Rails\nDESCRIPTION: Commands to create a new Rails application with Active Storage, generate scaffolding, and set up database migrations for a simple file upload demo.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-storage.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrails new filelist --css tailwind\ncd filelist\nbin/rails active_storage:install\nbin/rails generate scaffold Item name:string contents:attachment\nbin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Testing Access to External Peer from Fly.io Network\nDESCRIPTION: Ping command demonstrating how to access an external server from within the Fly.io network using the special peer DNS naming convention, showing the bidirectional connectivity of the setup.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/bridge-deployments-wireguard.html.md#2025-04-16_snippet_6\n\nLANGUAGE: docker\nCODE:\n```\n$ ping phantoon._peer.internal\nPING phantoon._peer.internal (fdaa:0:641b:a7b:9285:0:a:1b02) 56 data bytes\n64 bytes from phantoon._peer.internal (fdaa:0:641b:a7b:9285:0:a:1b02): icmp_seq=1 ttl=62 time=24.4 ms\n64 bytes from phantoon._peer.internal (fdaa:0:641b:a7b:9285:0:a:1b02): icmp_seq=2 ttl=62 time=37.6 ms\n64 bytes from phantoon._peer.internal (fdaa:0:641b:a7b:9285:0:a:1b02): icmp_seq=3 ttl=62 time=85.4 ms\n64 bytes from phantoon._peer.internal (fdaa:0:641b:a7b:9285:0:a:1b02): icmp_seq=4 ttl=62 time=197 ms\n```\n\n----------------------------------------\n\nTITLE: Basic Volume Snapshots Command\nDESCRIPTION: The main command structure for managing volume snapshots in Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_snapshots.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes snapshots [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite with Drizzle ORM\nDESCRIPTION: This code demonstrates how to connect to a SQLite database using Drizzle ORM. It uses the DATABASE_URL environment variable to determine the database file path.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/database.html.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = drizzle(new Database(new URL(process.env.DATABASE_URL).pathname));\n```\n\n----------------------------------------\n\nTITLE: Available Options for Kafka Cluster Updates\nDESCRIPTION: Lists all available options when updating an Upstash Kafka cluster, including specifying application name, configuration path, organization targeting, and automatic confirmation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for update\n  -o, --org string      The target Fly.io organization\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Executing Managed Postgres Attach Command in Fly CLI\nDESCRIPTION: This command attaches a managed Postgres cluster to a Fly.io application. It requires a cluster ID and supports various flags for customization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres_attach.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly managed-postgres attach <CLUSTER ID> [flags]\n```\n\n----------------------------------------\n\nTITLE: Launching Redis Fly Application\nDESCRIPTION: Command to initialize a new Fly application using Redis image, creating necessary configuration files without immediate deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/multiple-applications.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch --image flyio/redis:6.2.6 --no-deploy --name my-project-name-redis\n```\n\n----------------------------------------\n\nTITLE: Running Debian Machine with Custom CMD\nDESCRIPTION: Command to run a Debian Linux Machine with a custom CMD to keep it awake. This overrides the default CMD of the Docker image.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run debian sleep inf\n```\n\n----------------------------------------\n\nTITLE: Creating Tigris Object Storage Bucket with Fly CLI\nDESCRIPTION: This command creates a Tigris object storage bucket using the Fly CLI. It supports various options for configuring the bucket, including naming, public accessibility, and shadow bucket settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly storage create [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options that can be used with any fly command, including setting the API access token, enabling debug mode for detailed logs, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_uncordon.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Update Machine with Existing Image\nDESCRIPTION: Updates a Fly Machine using an existing container image from a registry.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-update.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine update --image ghcr.io/livebook-dev/livebook:0.11.4\n```\n\n----------------------------------------\n\nTITLE: Options for fly postgres connect command in Bash\nDESCRIPTION: These are the specific options available for the 'fly postgres connect' command. They allow you to specify the application, configuration file, database name, user, and password for the connection.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_connect.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string        Application name\n  -c, --config string     Path to application configuration file\n  -d, --database string   The name of the database you would like to connect to (default \"postgres\")\n  -h, --help              help for connect\n  -p, --password string   The postgres user password\n  -u, --user string       The postgres user to connect with (default \"postgres\")\n```\n\n----------------------------------------\n\nTITLE: Converting SQLite Database to PostgreSQL using pgloader\nDESCRIPTION: This bash script downloads an existing SQLite database from Fly.io and uses pgloader to convert it to a local PostgreSQL database.\nSOURCE: https://github.com/superfly/docs/blob/main/js/prisma/postgres.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfly sftp get /data/dev.db\npgloader sqlite:./dev.db pgsql://$USER@localhost/localdb\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployment History\nDESCRIPTION: Command to view the history of deployments with their details including version, status, and timestamp.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/deployments.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly releases\n```\n\nLANGUAGE: output\nCODE:\n```\nVERSION STABLE  TYPE  STATUS    DESCRIPTION                             USER                  DATE\nv55     true    scale succeeded Scale VM count: [\"web, 6\"]              brad@fly.io           2022-08-10T17:05:57Z\nv54     true    scale dead      Scale VM count: [\"web, 0\"]              brad@fly.io           2022-08-10T16:43:13Z\nv53     true    scale succeeded Scale VM count: [\"web, 6\"]              brad@fly.io           2022-08-10T16:42:51Z\nv52     true    scale succeeded Scale VM count: [\"web, 6\"]              brad@fly.io           2022-08-10T16:40:57Z\nv51     true    scale succeeded Scale VM count: [\"web, 3\"]              kurt@fly.io           2022-08-08T20:14:08Z\nv50     true    scale succeeded Scale VM count: [\"web, 3\"]              kurt@fly.io           2022-08-08T19:55:23Z\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Database with Fly CLI\nDESCRIPTION: Command to create a new Upstash Redis database using the Fly CLI, including prompts for organization selection, primary region, and optional replica regions.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/redis.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl redis create\n```\n\nLANGUAGE: output\nCODE:\n```\n? Select Organization: fly-apps (fly-apps)\n? Choose a primary region (can't be changed later) Madrid, Spain (mad)\n? Optionally, choose one or more replica regions (can be changed later): Amsterdam, Netherlands (ams)\n```\n\n----------------------------------------\n\nTITLE: Sample Crontab Entry\nDESCRIPTION: Example of a crontab entry that runs a job every 5 minutes.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/supercronic.html.md#2025-04-16_snippet_1\n\nLANGUAGE: crontab\nCODE:\n```\n*/5 * * * * echo \"hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Destroy Redis Database Command Syntax\nDESCRIPTION: Basic command syntax for permanently destroying an Upstash Redis database instance.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly redis destroy <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Scaling Process Groups in Fly.io\nDESCRIPTION: This bash command demonstrates how to scale different process groups independently in Fly.io. It sets the count of 'app' instances to 2 and 'worker' instances to 4.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/cron-and-queues.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfly scale count app=2 worker=4\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fly API Token with Command Line\nDESCRIPTION: Command to generate a Fly API token for a specific organization, which will be used for authentication in GitHub Actions.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly tokens org <ORG NAME>\n```\n\n----------------------------------------\n\nTITLE: DNS Cluster Runtime Configuration\nDESCRIPTION: Runtime configuration for DNS cluster query settings\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/clustering.html.md#2025-04-16_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n  config :hello_elixir, dns_cluster_query: System.get_env(\"DNS_CLUSTER_QUERY\")\n```\n\n----------------------------------------\n\nTITLE: Querying Fly.io DNS for App's 6PN Address\nDESCRIPTION: Example of using dig command to query the Fly.io DNS server (fdaa::3) for the 6PN address of an app named 'my-app-name'.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nroot@f066b83b:/# dig +short aaaa my-app-name.internal @fdaa::3\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with Postgres Integration\nDESCRIPTION: Enhanced YAML configuration that adds a Postgres database to the PR preview app workflow. The 'postgres' input specifies which Postgres cluster to attach to each staging environment.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/fly_pr_preview.yml\n\nname: Start preview app\n\non:\n  pull_request:\n    types: [labeled, synchronize, opened, reopened, closed]\n\nconcurrency:\n  group: ${{ github.workflow }}-pr-${{ github.event.number }}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n\njobs:\n  preview-app:\n    if: contains(github.event.pull_request.labels.*.name, 'PR preview app')\n    runs-on: ubuntu-latest\n    name: Preview app\n    environment:\n      name: pr-${{ github.event.number }}\n      url: ${{ steps.deploy.outputs.url }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Deploy preview app\n        uses: superfly/fly-pr-review-apps@1.2.0\n        id: deploy\n        with:\n          postgres: pg-fly-pr-staging-preview  # ← Added\n          region: waw\n          org: personal\n```\n\n----------------------------------------\n\nTITLE: Fly.io Warning Message for Incorrect Port Configuration\nDESCRIPTION: This text snippet shows the warning message displayed by Fly.io when the application is not listening on the expected address. It suggests the correct configuration to make the app reachable by fly-proxy.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/listening-ports.html.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWARNING The app is not listening on the expected address and will not be reachable by fly-proxy.\nYou can fix this by configuring your app to listen on the following addresses:\n  - 0.0.0.0:3000\n```\n\n----------------------------------------\n\nTITLE: Modifying Dockerfile for AnyCable Dependencies\nDESCRIPTION: Dockerfile modifications to install foreman, anycable-go, nginx and other required dependencies.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/anycable.html.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n FROM base\n \n+RUN gem install foreman\n+RUN curl -L https://go.dev/dl/go1.19.linux-amd64.tar.gz | tar xz -C /opt\n+RUN GOBIN=/usr/local/bin /opt/go/bin/go install github.com/anycable/anycable-go/cmd/anycable-go@latest\n+\n-ARG PROD_PACKAGES=\"postgresql-client file vim curl gzip libsqlite3-0\"\n+ARG PROD_PACKAGES=\"postgresql-client file vim curl gzip libsqlite3-0 nginx\"\n ENV PROD_PACKAGES=${PROD_PACKAGES}\n \n RUN --mount=type=cache,id=prod-apt-cache,sharing=locked,target=/var/cache/apt \\\n     --mount=type=cache,id=prod-apt-lib,sharing=locked,target=/var/lib/apt \\\n     apt-get update -qq && \\\n     apt-get install --no-install-recommends -y \\\n     ${PROD_PACKAGES} \\\n     && rm -rf /var/lib/apt/lists /var/cache/apt/archives\n+\n+ADD config/nginx.conf /etc/nginx/sites-available/default\n \n COPY --from=gems /app /app\n COPY --from=node_modules /app/node_modules /app/node_modules\n```\n\n----------------------------------------\n\nTITLE: Checking Machine Status\nDESCRIPTION: Command to get detailed status information about a specific machine, including CPU and RAM settings.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine status e286065f969386\n```\n\nLANGUAGE: out\nCODE:\n```\nMachine ID: e286065f969386\nInstance ID: 01GQR4GR5TPQC65T5RMKR0HS87\nState: started\n\nMachine\n  ID            = e286065f969386                               \n  Instance ID   = 01GQR4GR5TPQC65T5RMKR0HS87                   \n  State         = started                                      \n  Image         = testrun:deployment-01GQR4GN7EA8G12VE1DBRQG4KQ  \n  Name          = rough-tree-1360                              \n  Private IP    = fdaa:0:3b99:a7b:8aeb:fea3:148b:2             \n  Region        = iad                                          \n  Process Group =                                              \n  Memory        = 256                                          \n  CPUs          = 1                                            \n  Created       = 2023-01-25T21:35:32Z                         \n  Updated       = 2023-01-26T22:52:36Z                         \n  Command       =                                              \n\nEvent Logs\nSTATE   EVENT   SOURCE  TIMESTAMP                       INFO \nstarted start   flyd    2023-01-26T17:52:36.678-05:00\ncreated launch  user    2023-01-26T17:52:33.348-05:00\n```\n\n----------------------------------------\n\nTITLE: Starting Livebook Server\nDESCRIPTION: Command to start the Livebook server in the project directory\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/interesting-things-with-livebook.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nlivebook server\n```\n\n----------------------------------------\n\nTITLE: Opening the Arcjet Dashboard\nDESCRIPTION: Command to access the Arcjet dashboard for monitoring security events and managing configurations for your application.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly ext arcjet dashboard\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage for Egress IP Allocation\nDESCRIPTION: Main command syntax for allocating static egress IPs to a Fly machine, requiring a machine ID parameter.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip_allocate.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine egress-ip allocate <machine-id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Model in fly.toml\nDESCRIPTION: Specifies the GPU model type for the Fly Machine using the vm.size configuration in fly.toml.\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/getting-started-gpus.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nvm.size = \"a100-40gb\"\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options are available for all Fly CLI commands, including 'fly image show'. They allow setting the API access token and controlling debug output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image_show.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Deployment Inputs Configuration\nDESCRIPTION: YAML snippet that specifies inputs for the fly-pr-review-apps action, including the region and organization to use for deployment on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nwith:\n  region: waw\n  org: personal\n```\n\n----------------------------------------\n\nTITLE: Checking Deployed RAILS_MASTER_KEY Value on Fly.io\nDESCRIPTION: This command uses Fly.io's SSH console to print the value of the RAILS_MASTER_KEY environment variable in your deployed application. It helps verify that the correct key is available to your application.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nfly ssh console -C 'printenv RAILS_MASTER_KEY'\n```\n\n----------------------------------------\n\nTITLE: Running Ollama over the private network connection\nDESCRIPTION: Commands to set the Ollama host environment variable to use the private network connection and run a language model query to test connectivity.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/connect-private-network-wireguard/index.html.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport OLLAMA_HOST=http://xe-ollama.flycast\nollama run llama3 \"Why is the sky blue? Explain in a single sentence.\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector Index with Fly CLI\nDESCRIPTION: Command to create a new Upstash Vector index using the Fly CLI extension. This interactive command prompts for organization selection, similarity function, embedding model, index name, and primary region.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/vector.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext vector create\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly volumes list' Command in Fly.io CLI\nDESCRIPTION: This command lists the volumes associated with a Fly.io application. It supports various options for filtering and output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes list [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Secrets and Environment Variables to GitHub Action\nDESCRIPTION: Example of how to add secrets and environment variables to the GitHub Action workflow. This snippet demonstrates adding multiple secrets to the deploy step.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/review-apps-guide.html.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Deploy PR app to Fly.io\n    id: deploy\n    uses: superfly/fly-pr-review-apps@1.2.0\n    with:\n      secrets: FOOBAR=${{ secrets.FOOBAR }} SOME_API_KEY=${{ secrets.SOME_API_KEY}}\n```\n\n----------------------------------------\n\nTITLE: SSH Console Access for Post-Deployment Tasks\nDESCRIPTION: Commands to access SSH console and run post-deployment scripts.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/deployments.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console\n```\n\nLANGUAGE: output\nCODE:\n```\nConnecting to top1.nearest.of.my-rails-app.internal... complete\n```\n\nLANGUAGE: cmd\nCODE:\n```\nls\n```\n\nLANGUAGE: output\nCODE:\n```\nDockerfile      README.md       config          lib             test\nGemfile         Rakefile        config.ru       log             tmp\nGemfile.lock    app             db              public          vendor\nProcfile.dev    bin             fly.toml        storage\n```\n\nLANGUAGE: cmd\nCODE:\n```\nbundle exec ruby my-hello-world-script.rb\n```\n\nLANGUAGE: output\nCODE:\n```\nhello world\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Command in Fly.io TOML File\nDESCRIPTION: The deploy section in fly.toml configuration defines commands to run during application deployment, such as database migrations.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n  release_command = \"bin/rails db:migrate\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Packages to Rails Dockerfile\nDESCRIPTION: This command regenerates the Dockerfile while adding specific Debian packages for kernel and network monitoring.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate dockerfile --add procps net-tools traceroute iputils-ping\n```\n\n----------------------------------------\n\nTITLE: Signing Provisioning Requests in JavaScript\nDESCRIPTION: Example of parameters added to requests for authentication and request signing. These parameters help verify the authenticity of requests, including a timestamp, nonce, and full request URL.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\ntimestamp: A UNIX epoch timestamp value\nnonce: A random unique string identifying the individual request\nurl: The full request target URL\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Database with Redis CLI\nDESCRIPTION: Command to establish a connection to a Redis database using the redis-cli tool, allowing for direct interaction with the database through a local port proxied to the remote Redis instance.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/redis.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly redis connect\n```\n\nLANGUAGE: output\nCODE:\n```\n? Select a database to connect to empty-water-3291 (sjc) 200M\nProxying local port 16379 to remote [fdaa:0:6d6b:0:1::3]:6379\n127.0.0.1:16379> set foo bar\nOK\n127.0.0.1:16379> get foo\n\"bar\"\n127.0.0.1:16379>\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Shipper for a specific application\nDESCRIPTION: TOML configuration for setting the SUBJECT environment variable to limit log shipping to a specific application named 'sandwich'. Uses the > wildcard to capture all logs from any region or instance of the app.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/exporting-logs.html.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  SUBJECT = \"logs.sandwich.>\"\n```\n\n----------------------------------------\n\nTITLE: Querying WireGuard Peer Names via DNS\nDESCRIPTION: Command to list all WireGuard peer names in the current Fly.io organization using a DNS TXT query to _peer.internal with the organization's DNS server.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\ndig +short txt _peer.internal @fdaa:0:18::3\n```\n\n----------------------------------------\n\nTITLE: Using fly extensions arcjet destroy Command in Bash\nDESCRIPTION: Command syntax for permanently destroying an Arcjet site. The command accepts a site name parameter and various flags to customize behavior.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions arcjet destroy [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails for Tigris with dockerfile-rails Generator\nDESCRIPTION: Command to run the dockerfile-rails generator with the --tigris flag to automatically configure Rails for Tigris storage, updating the necessary configuration files.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-storage.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate dockerfile --tigris\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Node with Observer\nDESCRIPTION: Command to launch IEx with Observer and connect to a remote node using IPv6. Requires cookie value and full node name to be substituted.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-observer-to-your-app.html.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\niex --erl \"-proto_dist inet6_tcp\" --sname my_remote --cookie ${YOUR-COOKIE-VALUE} -e \"IO.inspect(Node.connect(:'${FULL_NODE_NAME}'), label: \\\"Node Connected?\\\"); :observer.start\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment on Windows\nDESCRIPTION: Creates and activates a Python virtual environment using venv on Windows with PowerShell.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Windows (PowerShell)\n> python -m venv .venv\n> .venv\\Scripts\\Activate.ps1\n(.venv) ...>\n```\n\n----------------------------------------\n\nTITLE: Viewing the WireGuard Interface Configuration\nDESCRIPTION: Command to display information about the WireGuard interface created by the configuration, showing the IPv6 address assigned to the server on the Fly.io private network.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/bridge-deployments-wireguard.html.md#2025-04-16_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\n$ ip addr show fly0\n4: fly0: <POINTOPOINT,NOARP,UP,LOWER_UP> mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/none\n    inet6 fdaa:0:641b:a7b:9285:0:a:1b02/120 scope global\n       valid_lft forever preferred_lft forever\n```\n\n----------------------------------------\n\nTITLE: Installing SQL Server Drivers in Laravel Dockerfile\nDESCRIPTION: Demonstrates how to install SQL Server drivers and PHP extensions (sqlsrv and pdo_sqlsrv) in a Laravel Dockerfile. The installation is placed before the COPY instruction to leverage Docker's build cache and optimize deployment time.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/customizing-dockerfile.html.md#2025-04-16_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Things above this omitted\n\nLABEL fly_launch_runtime=\"laravel\"\n\n###\n## NEW STUFF HERE\n#\nENV ACCEPT_EULA=Y\n\n# Note we specify version 18 of SqlServer via package msodbcsql18\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n    && curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends -y php${PHP_VERSION}-dev php-pear \\\n       g++ make msodbcsql18 unixodbc-dev mssql-tools \\\n    && pecl install sqlsrv \\\n    && pecl install pdo_sqlsrv \\\n    && printf \"; priority=20\\nextension=sqlsrv.so\\n\" > /etc/php/${PHP_VERSION}/mods-available/sqlsrv.ini \\\n    && printf \"; priority=30\\nextension=pdo_sqlsrv.so\\n\" > /etc/php/${PHP_VERSION}/mods-available/pdo_sqlsrv.ini \\\n    && phpenmod -v ${PHP_VERSION} sqlsrv pdo_sqlsrv\n###\n## END NEW STUFF\n#\n\n# copy application code, skipping files based on .dockerignore\nCOPY . /var/www/html\n\n# Things below this omitted\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Directory Structure\nDESCRIPTION: Commands to create the directory structure for a Redis Fly application within the main project.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/multiple-applications.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nmkdir -p fly/applications/redis\ncd fly/applications/redis\n```\n\n----------------------------------------\n\nTITLE: Updating Postgres App with Custom Image\nDESCRIPTION: Command to update a Postgres application with a custom image after forking the base repository. This allows for customizing the Postgres deployment with specific configurations or extensions.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/postgres-whats-next.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy --image\n```\n\n----------------------------------------\n\nTITLE: Creating an Enveloop Project with Fly CLI\nDESCRIPTION: This command is used to create a new Enveloop project. It allows specifying various options such as application name, configuration file path, project name, organization, and region. The command also supports global options for API access token and debug/verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions enveloop create [flags]\n```\n\n----------------------------------------\n\nTITLE: Opening SFTP Shell to Transfer Files to Fly.io\nDESCRIPTION: This command opens an SFTP shell connection to your Fly.io application to transfer files to the remote filesystem.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_18\n\nLANGUAGE: cmd\nCODE:\n```\nfly sftp shell\n```\n\n----------------------------------------\n\nTITLE: Sample WireGuard Configuration File for Fly.io\nDESCRIPTION: Example WireGuard configuration file generated by the 'fly wireguard create' command. Contains interface settings including private key, IPv6 address, and DNS server address.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n[Interface]\nPrivateKey = [redacted]\nAddress = fdaa:0:18:a7b:d6b:0:a:2/120\nDNS = fdaa:0:18::3\n```\n\n----------------------------------------\n\nTITLE: Listing Fly Apps\nDESCRIPTION: Command to list all Fly.io applications associated with your account, showing name, owner, status, platform and latest deployment info.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly apps list\n```\n\nLANGUAGE: out\nCODE:\n```\nNAME          OWNER           STATUS          PLATFORM        LATEST DEPLOY        \ntestrun       personal        deployed        machines        21h17m ago                    \nmy-app        personal        suspended       machines        2023-11-15T23:33:07Z\n```\n\n----------------------------------------\n\nTITLE: Setting EdgeDB Configuration Secrets\nDESCRIPTION: Command to set multiple environment variables as Fly secrets for configuring the EdgeDB server, including database connection, TLS certificate generation, and port settings.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl secrets set \\\n  EDGEDB_SERVER_BACKEND_DSN_ENV=DATABASE_URL \\\n  EDGEDB_SERVER_TLS_CERT_MODE=generate_self_signed \\\n  EDGEDB_SERVER_PORT=8080\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI Commands\nDESCRIPTION: Global options that can be used with any fly CLI command, including machine egress-ip commands.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global options for Fly CLI commands in Bash\nDESCRIPTION: These global options are applicable to all Fly CLI commands, including 'fly postgres connect'. They allow you to specify an API access token and enable debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_connect.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using Fly CLI Enveloop Extension\nDESCRIPTION: Basic usage syntax for the Fly CLI Enveloop extension. This command allows users to interact with Enveloop projects through various subcommands.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions enveloop [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Broadcast Updates to Controller\nDESCRIPTION: Implementing broadcast updates in the names controller for real-time data synchronization.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/turbo-streams-and-action-cable.html.md#2025-04-16_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  # PATCH/PUT /names/1 or /names/1.json\n  def update\n    respond_to do |format|\n      if @name.update(name_params)\n        format.html { redirect_to name_url(@name), notice: \"Name was successfully updated.\" }\n        format.json { render :show, status: :ok, location: @name }\n+\n+       @name.broadcast_replace_later_to 'names', partial: 'names/name'\n      else\n        format.html { render :edit, status: :unprocessable_entity }\n        format.json { render json: @name.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mount in fly.toml\nDESCRIPTION: Configuration added to fly.toml that mounts the persistent volume to a specified path in the application container.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/sqlite3.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[mounts]\n  source=\"name\"\n  destination=\"/mnt/name\"\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database with Fly.io CLI\nDESCRIPTION: This command creates a MySQL database cluster using Fly.io's extension system. It allows configuration of various parameters such as application name, CPU, memory, disk size, and region.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions mysql create [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Cluster Attachment Command\nDESCRIPTION: Main command syntax for attaching a PostgreSQL cluster to a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_attach.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres attach <POSTGRES APP> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Swap Memory in fly.toml\nDESCRIPTION: Enables and configures swap memory for the Fly Machine to handle memory-intensive workloads.\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/getting-started-gpus.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nswap_size_mb = 8192    # This enables 8GB swap\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Space\nDESCRIPTION: Command to check available disk space on a machine using SSH console.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console -C df\n```\n\nLANGUAGE: out\nCODE:\n```\nConnecting to fdaa:0:3b99:a7b:7e:3155:9844:2... complete\nFilesystem     1K-blocks   Used Available Use% Mounted on\ndevtmpfs          103068      0    103068   0% /dev\n/dev/vda         8191416 172748   7582856   3% /\nshm               113224      0    113224   0% /dev/shm\ntmpfs             113224      0    113224   0% /sys/fs/cgroup\n/dev/vdb         1011672   2564    940500   1% /storage\n```\n\n----------------------------------------\n\nTITLE: Querying Machine Status in Fly CLI\nDESCRIPTION: Base command to check the status of a specific Fly machine by ID. Requires machine ID and supports optional flags for configuration and display options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine status [id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage for Listing Volume Snapshots\nDESCRIPTION: The base command to list snapshots for a specified volume ID. Requires a volume ID parameter.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_snapshots_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes snapshots list <volume id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting multiple key-value pairs in a single secret\nDESCRIPTION: Command to Base64-encode the contents of a local file and set it as a secret value, allowing multiple settings to be stored in a single secret.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_18\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set MY_SECRETS=\"$(base64 < local-secrets)\" --stage\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSH Server in Dockerfile\nDESCRIPTION: Installs and configures OpenSSH server in a Debian-based Docker container, setting up port 2222 and disabling password authentication.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/opensshd.html.md#2025-04-16_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update \\\n && apt-get install -y openssh-server \\\n && cp /etc/ssh/sshd_config /etc/ssh/sshd_config-original \\\n && sed -i 's/^#\\s*Port.*/Port 2222/' /etc/ssh/sshd_config \\\n && sed -i 's/^#\\s*PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config \\\n && mkdir -p /root/.ssh \\\n && chmod 700 /root/.ssh \\\n && mkdir /var/run/sshd \\\n && chmod 755 /var/run/sshd \\\n && rm -rf /var/lib/apt/lists /var/cache/apt/archives\n```\n\n----------------------------------------\n\nTITLE: Deploying Application\nDESCRIPTION: Command to deploy the application to Fly.io\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/python-gpu-example.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Listing Redis Databases\nDESCRIPTION: Command to list all Redis databases in your Fly.io account, showing their IDs, names, organizations, plans, primary regions, and read regions.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/redis.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl redis list\n```\n\nLANGUAGE: output\nCODE:\n```\nID             \tNAME               \tORG          \tPLAN\tPRIMARY REGION\tREAD REGIONS\naaV829vaMVQGbi5\tlate-waterfall-1133\tfly-apps     \tpayg\tmad           \tams\n```\n\n----------------------------------------\n\nTITLE: Deploying Rails Application with Sidekiq to Fly\nDESCRIPTION: Command to deploy the configured Rails application with Sidekiq workers to Fly.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/sidekiq.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Database Status\nDESCRIPTION: Command to view detailed status information about a specific Redis database, including its ID, name, plan type, primary region, read regions, and connection URL.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/redis.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly redis status late-waterfall-1133\n```\n\nLANGUAGE: output\nCODE:\n```\nRedis\n  ID             = aaV829vaMVDGbi5\n  Name           = late-waterfall-1133\n  Plan           = Pay-as-you-go\n  Primary Region = mad\n  Read Regions   = ams\n  Private URL     = redis://password@fly-late-waterfall-1133.upstash.io\n```\n\n----------------------------------------\n\nTITLE: Creating Upstash Redis Database with Fly CLI\nDESCRIPTION: This command is used to create an Upstash Redis database. It allows configuration of eviction policies, replicas, and regional deployment options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_create.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly redis create [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly.io TOML Configuration with Release Command\nDESCRIPTION: TOML configuration for Fly.io that includes a release_command to execute the post-deployment script. This enables automated database setup during the deployment process.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n# staging/fly_staging.toml\n\nconsole_command = \"/code/manage.py shell\"\n\n[build]\n\n[env]\n  PORT = \"8000\"\n\n[deploy]\n  release_command = \"sh ./staging/post_deploy.sh\" # ← Added.\n\n...\n```\n\n----------------------------------------\n\nTITLE: Example Prometheus Query using cURL\nDESCRIPTION: Shell command demonstrating how to query Prometheus metrics using cURL with proper authentication and query parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/metrics.html.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://api.fly.io/prometheus/$ORG_SLUG/api/v1/query \\\n  --data-urlencode 'query=sum(increase(fly_edge_http_responses_count)) by (app, status)' \\\n  -H \"Authorization: FlyV1 $TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Interactive Root Shell via SSH in Fly.io\nDESCRIPTION: Command to open an interactive shell session as the root user on a Fly.io deployed application. Uses the --pty flag to allocate a pseudo-terminal for interactive use.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/run-tasks-and-consoles.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console --pty -C '/bin/bash'\n```\n\nLANGUAGE: output\nCODE:\n```\n#\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly machine egress-ip list Command\nDESCRIPTION: The primary command for listing allocated static egress IP addresses with their corresponding machines in Fly applications.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine egress-ip list [flags]\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for GPU Environment\nDESCRIPTION: Dockerfile configuration for setting up Ubuntu-based Python GPU environment with necessary dependencies and user setup\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/python-gpu-example.html.md#2025-04-16_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu:22.04\nRUN apt update -q && apt install -y python3 python3-pip python3-venv python3-wheel git nano && \\\n    apt clean && rm -f /var/lib/apt/lists/*_*\n\nARG NONROOT_USER\nRUN echo \"User will be $NONROOT_USER\"\nENV PYTHON_USER=$NONROOT_USER\n\n# Create unprivileged user with a home dir and using bash\nRUN useradd -ms /bin/bash $PYTHON_USER\n\nCOPY --chmod=0755 ./entrypoint.sh ./entrypoint.sh\nCOPY --chown=$PYTHON_USER:$PYTHON_USER --chmod=0755 ./post-initialization.sh ./post-initialization.sh\n# If you have a requirements.txt for the project, uncomment this and\n# adjust post-initialization.sh to use it\n# COPY --chown=$PYTHON_USER:$PYTHON_USER requirements.txt .\n\n# CMD [\"sleep\", \"inf\"]\nCMD [\"/bin/bash\", \"-c\", \"./entrypoint.sh $PYTHON_USER\"]\n```\n\n----------------------------------------\n\nTITLE: Using the Fly CLI Ping Command\nDESCRIPTION: The 'fly ping' command is used to test connectivity within the Fly.io network. It can target either a '.internal' DNS name or the gateway. The command requires specifying a WireGuard tunnel, which can be done by running from an app directory, using the '-a' flag with an app name, or the '-o' flag with an org name.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ping.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ping [hostname] [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying App from Custom Path in Fly.io\nDESCRIPTION: Command to deploy a Fly.io application from a specific directory path instead of the current working directory.\nSOURCE: https://github.com/superfly/docs/blob/main/launch/monorepo.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy ./path/to/app\n```\n\n----------------------------------------\n\nTITLE: Inertia PHP Configuration\nDESCRIPTION: PHP configuration file setup for Inertia SSR with environment variable integration.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-inertia-ssr.html.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/* config/inertia.php */\n'ssr' => [\n    'enabled' => true,\n    'url' => env('SSR_URL','http://127.0.0.1:13714')\n],\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly machine stop\nDESCRIPTION: Available configuration options including app name, config file path, stop signal, timeout settings, and wait duration parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_stop.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string              Application name\n  -c, --config string           Path to application configuration file\n  -h, --help                    help for stop\n  -s, --signal string           Signal to stop the machine with (default: SIGINT)\n      --timeout int             Seconds to wait before sending SIGKILL to the machine\n  -w, --wait-timeout duration   Time duration to wait for individual machines to transition states and become stopped.\n```\n\n----------------------------------------\n\nTITLE: Creating an Ollama Client Shell\nDESCRIPTION: Command to create a temporary machine with the Ollama client installed, which will be used to interact with the Ollama service.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ fly machine run --shell ollama/ollama\n```\n\n----------------------------------------\n\nTITLE: Copying WireGuard Configuration to Target Server\nDESCRIPTION: SCP command to securely copy the generated WireGuard configuration file to the target server that will be connected to the Fly.io network.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/bridge-deployments-wireguard.html.md#2025-04-16_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nscp ~/fly0.conf root@phantoon.local:/etc/wireguard/fly0.conf\n```\n\n----------------------------------------\n\nTITLE: Options for fly ssh console Command in Bash\nDESCRIPTION: These are the available options for the 'fly ssh console' command. They allow users to specify the target VM, app, command to run, configuration file, and other parameters for the SSH session.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -A, --address string         Address of VM to connect to\n  -a, --app string             Application name\n  -C, --command string         command to run on SSH session\n  -c, --config string          Path to application configuration file\n      --container string       Container to connect to\n  -h, --help                   help for console\n      --machine string         Run the console in the existing machine with the specified ID\n  -o, --org string             The target Fly.io organization\n  -g, --process-group string   The target process group\n      --pty                    Allocate a pseudo-terminal (default: on when no command is provided)\n  -q, --quiet                  Don't print progress indicators for WireGuard\n  -r, --region string          The target region (see 'flyctl platform regions')\n  -s, --select                 select available instances\n  -u, --user string            Unix username to connect as (default \"root\")\n```\n\n----------------------------------------\n\nTITLE: Revoking Fly.io API Tokens using fly CLI\nDESCRIPTION: This command revokes one or more Fly.io API tokens. It requires specifying the token IDs to be revoked. The command supports help flags and global options for access token, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_revoke.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens revoke [flags] ID ID ...\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These are global options that can be used with any Fly CLI command, including 'fly postgres config'. They allow setting an API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_config.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the fly apps restart Command\nDESCRIPTION: Basic usage syntax for restarting a Fly application. This command performs a rolling restart against all running Machines for the specified app.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_restart.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly apps restart <app name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Scaling App and Worker Processes\nDESCRIPTION: Command to scale the application by specifying the number of instances for both app and worker processes.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nfly scale count app=3 worker=3\n```\n\n----------------------------------------\n\nTITLE: Options for MySQL Database Creation in Fly CLI\nDESCRIPTION: These are the available options when creating a MySQL database using the Fly CLI. They allow customization of various aspects of the database cluster, such as application association, resource allocation, and naming.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n      --cpu int         The number of CPUs assigned to each cluster member\n      --disk int        Disk size (in GB) assigned to each cluster member\n  -h, --help            help for create\n      --memory int      Memory (in GB) assigned to each cluster member\n  -n, --name string     The name of your database\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl platform regions')\n      --size int        The number of members in your cluster\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Provisioning Tigris Object Storage Buckets in Fly.io\nDESCRIPTION: The basic command syntax for creating a new Tigris object storage bucket in Fly.io. This command supports various configuration options including naming, public access settings, and shadow bucket configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions storage create [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly scale memory' Command in Fly CLI\nDESCRIPTION: This snippet shows the basic usage syntax for the 'fly scale memory' command. It allows setting the VM memory allocation for a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_memory.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly scale memory [memoryMB] [flags]\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Available command-line options for customizing the Postgres import operation, including application configuration, database cleaning, and import behavior settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_import.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string       Application name\n      --clean            Drop database objects prior to creating them.\n  -c, --config string    Path to application configuration file\n      --create           Begin by creating the database itself and reconnecting to it. If --clean is also specified, the script drops and recreates the target database before reconnecting to it. (default true)\n      --data-only        Dump only the data, not the schema (data definitions).\n  -h, --help             help for import\n      --image string     Path to public image containing custom migration process\n      --no-owner         Do not set ownership of objects to match the original database. Makes dump restorable by any user. (default true)\n      --region string    Region to provision migration machine\n      --vm-size string   the size of the VM\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly postgres list' Command\nDESCRIPTION: Shows the basic usage syntax for the 'fly postgres list' command in the Fly CLI. This command is used to list Postgres clusters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres list [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Groups in fly.toml\nDESCRIPTION: Configuration for running multiple processes using Fly.io's process groups feature. This defines two processes (web and bar_web) that run different commands, with services configured to only apply to specific processes.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[processes]\nweb = \"/app/server\"\nbar_web = \"/app/server -bar\"\n\n[[services]]\n  processes = [\"web\"] # this service only applies to the web process\n  http_checks = []\n  internal_port = 8080\n  protocol = \"tcp\"\n  script_checks = []\n```\n\n----------------------------------------\n\nTITLE: Testing Fly.io private network connection with ping\nDESCRIPTION: Shows how to verify the WireGuard connection to Fly.io's private network by pinging the internal API endpoint with IPv6 ping.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/connect-private-network-wireguard/index.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ping6 _api.internal -c4\nPING6(56=40+8+8 bytes) fdaa:3:9018:a7b:9285:0:a:602 --> fdaa:3:9018::3\n16 bytes from fdaa:3:9018::3, icmp_seq=0 hlim=64 time=9.741 ms\n16 bytes from fdaa:3:9018::3, icmp_seq=1 hlim=64 time=49.103 ms\n16 bytes from fdaa:3:9018::3, icmp_seq=2 hlim=64 time=97.667 ms\n16 bytes from fdaa:3:9018::3, icmp_seq=3 hlim=64 time=14.726 ms\n\n--- _api.internal ping6 statistics ---\n4 packets transmitted, 4 packets received, 0.0% packet loss\nround-trip min/avg/max/std-dev = 9.741/42.809/97.667/35.111 ms\n```\n\n----------------------------------------\n\nTITLE: Opening Deployed Rails Application in Browser\nDESCRIPTION: The fly apps open command opens the deployed application in a web browser using the default URL.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Enabling WireGuard Service on Boot\nDESCRIPTION: SystemD command to enable and start the WireGuard service using the Fly.io configuration, which establishes the VPN connection on system startup.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/bridge-deployments-wireguard.html.md#2025-04-16_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nssh root@phantoon.local\nsystemctl enable --now wg-quick@fly0.service\n```\n\n----------------------------------------\n\nTITLE: Opening Deployed Rails Application\nDESCRIPTION: Command to open the deployed Rails application in a web browser\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/index.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Configuring Entrypoint Script for Fly.io Machine with GPU Support\nDESCRIPTION: This bash script runs as root when the Machine boots. It sets ownership of the non-root user's home directory, initializes the GPU drivers, and then executes the post-initialization script as the non-root user.\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/python-gpu-example.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nUSERNAME=$1\n\necho \"Inside entrypoint script.\"\nchown $USERNAME:$USERNAME /home/$USERNAME\nnvidia-smi # This ensures the driver is initialized so that non-root user can use the GPU\n\necho \"About to run post-initialization script as $USERNAME.\"\nsu -c \"bash ./post-initialization.sh\" $USERNAME\n```\n\n----------------------------------------\n\nTITLE: Using 'fly scale show' Command in Fly CLI\nDESCRIPTION: This command displays the current VM size and counts for a Fly.io application. It can be customized with various flags to specify the application, configuration file, and output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_show.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly scale show [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying the Log Shipper app\nDESCRIPTION: Command to deploy the configured Log Shipper app to Fly.io after setting up the necessary configuration and secrets.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/exporting-logs.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Opening the Upstash Web Console\nDESCRIPTION: Command to access the Upstash web console dashboard for a specific organization. This allows viewing detailed index information including usage statistics.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/vector.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext vector dashboard -o <org_name>\n```\n\n----------------------------------------\n\nTITLE: Fastify Node.js Server Configuration - Fixed\nDESCRIPTION: Corrected Fastify server configuration that properly listens on 0.0.0.0 for Fly.io deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/getting-started/troubleshooting.html.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfastify.listen({ port: 3000, host: '0.0.0.0' }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  fastify.log.info(`server listening on ${address}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Observer Script\nDESCRIPTION: Command to run the observer script and connect to the remote Elixir node.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-observer-to-your-app.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./observer\n```\n\n----------------------------------------\n\nTITLE: Basic Machine Update Command\nDESCRIPTION: The basic syntax for updating a Fly Machine using the machine ID and optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-update.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine update [machine_id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly Secrets Deploy Command Options\nDESCRIPTION: Available command-specific options for the secrets deploy command, including application name specification, configuration file path, and deployment monitoring options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n      --detach          Return immediately instead of monitoring deployment progress\n  -h, --help            help for deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban in runtime.exs\nDESCRIPTION: Elixir configuration that dynamically sets up Oban queues based on environment variables, allowing different queue configurations for each process.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nenv_queues = System.get_env(\"OBAN_QUEUES\")\n# Based on https://hexdocs.pm/oban/splitting-queues.html#content\nqueues =\n  case env_queues do\n    nil -> []\n    \"*\" -> [default: 15, media: 10, events: 25] # The default\n    _ ->\n     env_values\n       |> String.split(\" \", trim: true)\n       |> Enum.map(&String.split(&1, \",\", trim: true))\n       |> Keyword.new(fn [queue, limit] ->\n         {String.to_existing_atom(queue), String.to_integer(limit)}\n       end)\n  end\n\nconfig :my_app, Oban,\n  repo: MyApp.Repo,\n  queues: queues\n```\n\n----------------------------------------\n\nTITLE: Checking Application Status and Process Distribution\nDESCRIPTION: Command to view the current status of the application, showing the distribution and health of app and worker processes across regions.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/sidekiq.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly status\n```\n\nLANGUAGE: output\nCODE:\n```\nApp\n  Name     = my-rails-app\n  Owner    = personal\n  Version  = 41\n  Status   = running\n  Hostname = my-rails-app.fly.dev\n\nInstances\nID        PROCESS VERSION REGION  DESIRED STATUS  HEALTH CHECKS       RESTARTS  CREATED\n15088508  worker  41      ord     run     running                     0         34s ago\n8789ef49  app     41      ord     run     running 1 total, 1 passing  0         2022-07-26T16:06:34Z\nc419942b  app     41      ord     run     running 1 total, 1 passing  0         2022-07-26T16:05:52Z\nea7af986  app     41      ord     run     running 1 total, 1 passing  0         2022-07-26T16:05:52Z\nd681c33d  worker  41      ord     run     running                     0         2022-07-26T15:42:30Z\nd8d8dc08  worker  41      ord     run     running                     0         2022-07-26T15:42:30Z\n```\n\n----------------------------------------\n\nTITLE: Testing Local Service Connectivity in Fly 6PN\nDESCRIPTION: Commands to test service connectivity from within a VM, within the app's 6PN network, and to specific VMs. These curl commands verify if services are properly configured and accessible.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/app-services.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I http://fly-local-6pn:<port>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I http://<app-name>.internal:<port>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I 'http://[<vm-6pn-address>]:<port>'\n```\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh console\n```\n\n----------------------------------------\n\nTITLE: Options for Updating Tigris Object Storage Bucket\nDESCRIPTION: These are the available options when updating a Tigris object storage bucket. They include specifying the application, setting custom domains, configuring shadow buckets, and modifying access permissions.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                 Application name\n      --clear-custom-domain        Remove a custom domain from a bucket\n      --clear-shadow               Remove an existing shadow bucket\n  -c, --config string              Path to application configuration file\n      --custom-domain string       A custom domain name pointing at your bucket\n  -h, --help                       help for update\n  -o, --org string                 The target Fly.io organization\n      --private                    Set a public bucket to be private\n  -p, --public                     Objects in the bucket should be publicly accessible\n      --shadow-access-key string   Shadow bucket access key\n      --shadow-endpoint string     Shadow bucket endpoint\n      --shadow-name string         Shadow bucket name\n      --shadow-region string       Shadow bucket region\n      --shadow-secret-key string   Shadow bucket secret key\n      --shadow-write-through       Write objects through to the shadow bucket\n  -y, --yes                        Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: HTTP Service Configuration in fly.toml\nDESCRIPTION: TOML configuration for HTTP service settings, including process mapping and machine management.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-inertia-ssr.html.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[http_service]\n  internal_port = 8080\n  force_https = true\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 0\n  processes = [\"app\"]\n```\n\n----------------------------------------\n\nTITLE: Testing Connection to Fly.io Private Network API\nDESCRIPTION: Ping command to verify connectivity to the Fly.io Machines API server through the WireGuard tunnel, confirming the successful establishment of the private network connection.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/bridge-deployments-wireguard.html.md#2025-04-16_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\n$ ping _api.internal -c 4\nPING _api.internal (fdaa:0:641b::3) 56 data bytes\n64 bytes from fdaa:0:641b::3: icmp_seq=1 ttl=64 time=10.4 ms\n64 bytes from fdaa:0:641b::3: icmp_seq=2 ttl=64 time=39.2 ms\n64 bytes from fdaa:0:641b::3: icmp_seq=3 ttl=64 time=83.7 ms\n64 bytes from fdaa:0:641b::3: icmp_seq=4 ttl=64 time=123 ms\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Secret for SQLite3\nDESCRIPTION: Command to set the DATABASE_URL environment secret pointing to the SQLite3 database file stored on the mounted volume.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/sqlite3.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set DATABASE_URL=sqlite3:///mnt/name/production.sqlite\n```\n\n----------------------------------------\n\nTITLE: Updating DATABASE_PATH in fly.toml\nDESCRIPTION: This diff shows how to update the DATABASE_PATH environment variable in fly.toml to use the newly uploaded database file.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n[env]\n- DATABASE_PATH = \"/mnt/name.db\"\n+ DATABASE_PATH = \"/mnt/name-prod.db\"\n```\n\n----------------------------------------\n\nTITLE: Basic Consul Attach Command\nDESCRIPTION: The basic command syntax for attaching a Consul cluster to a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_consul_attach.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly consul attach [flags]\n```\n\n----------------------------------------\n\nTITLE: SSH Server Startup Script\nDESCRIPTION: Bash script to start SSH server before the main application process\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/opensshd.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash -e\n\n/usr/sbin/sshd\n\nexec \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Basic Kubernetes Extension Command Usage\nDESCRIPTION: Base command structure for using Fly Kubernetes extensions with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly extensions kubernetes [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Nginx and Passenger\nDESCRIPTION: Configuration for exposing environment variables to the Nginx server. This configuration enables the Rails application to access critical environment variables like DATABASE_URL and REDIS_URL.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/phusion-passenger.html.md#2025-04-16_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nenv DATABASE_URL;\nenv REDIS_URL;\nenv RAILS_LOG_TO_STDOUT;\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Shipper for a specific region\nDESCRIPTION: TOML configuration for setting the SUBJECT environment variable to limit log shipping to only apps in the 'dfw' region. Uses wildcards to capture logs from any application in that region.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/exporting-logs.html.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  SUBJECT = \"logs.*.dfw.>\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Proxy Connection to Managed Postgres using flyctl\nDESCRIPTION: This command uses the Fly.io CLI (flyctl) to create a proxy connection to a Managed Postgres database. This is useful for connecting from a local machine using tools other than psql. Flags can be added to customize the connection.\nSOURCE: https://github.com/superfly/docs/blob/main/mpg/overview.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly mpg proxy [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Machine Update Command\nDESCRIPTION: The basic syntax for updating a Fly Machine. Requires specifying a machine ID and can include various configuration flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine update [machine_id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting PHP and Node Versions via Fly Deploy Command\nDESCRIPTION: This bash command shows how to override PHP and NodeJS versions during deployment using the fly CLI. It allows developers to specify custom versions without modifying the fly.toml file.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/php-node-version.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy --build-arg \"PHP_VERSION=8.1\" --build-arg \"NODE_VERSION=14\"\n```\n\n----------------------------------------\n\nTITLE: Deploying with a custom Vector configuration file\nDESCRIPTION: Command for deploying the Log Shipper with a customized Vector configuration file. Uses the --file-local flag to specify a local configuration file that will override the default Vector configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/exporting-logs.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy --file-local=\"/etc/vector/vector.toml=/path/to/local/vector.toml\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node in Final Docker Image\nDESCRIPTION: Complete Dockerfile configuration for installing Node.js directly in the final image, including asset building and permissions setup.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-inertia-ssr.html.md#2025-04-16_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Install node in fly-laravel image\nRUN cd ~ \\\n    && curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh \\\n    && bash nodesource_setup.sh \\ \n    && apt install nodejs \\ \n    && cd /var/www/html\n\n# The snippet below already exists in the Dockerfile btw,\n# In the multi-stage build set up:\nRUN if [ -f \"vite.config.js\" ]; then \\\n        ASSET_CMD=\"build\"; \\\n    else \\\n        ASSET_CMD=\"production\"; \\\n    fi; \\\n    if [ -f \"yarn.lock\" ]; then \\\n        yarn install --frozen-lockfile; \\\n        yarn $ASSET_CMD; \\\n    elif [ -f \"pnpm-lock.yaml\" ]; then \\\n        corepack enable && corepack prepare pnpm@latest-8 --activate; \\\n        pnpm install --frozen-lockfile; \\\n        pnpm run $ASSET_CMD; \\\n    elif [ -f \"package-lock.json\" ]; then \\\n        npm ci --no-audit; \\\n        npm run $ASSET_CMD; \\\n    else \\\n        npm install; \\\n        npm run $ASSET_CMD; \\\n    fi;\n\nRUN  chown -R www-data:www-data /var/www/html/public\n\nEXPOSE 8080\n\nENTRYPOINT [\"/entrypoint\"]\n```\n\n----------------------------------------\n\nTITLE: Scaling VM Resources\nDESCRIPTION: Command to scale the Fly.io VM to meet AnyCable's minimum memory requirements.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/anycable.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nfly scale vm shared-cpu-1x --vm-memory 512\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Redis Application\nDESCRIPTION: Commands to create the directory structure for the Redis application within the Laravel project.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/multiple-applications.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nmkdir -p fly/applications/redis\ncd fly/applications/redis\n```\n\n----------------------------------------\n\nTITLE: Using fly secrets unset Command\nDESCRIPTION: Basic command syntax for removing one or more encrypted secrets from a Fly application. Requires specifying secret names as arguments.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_unset.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets unset [flags] NAME NAME ...\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to run the Next.js development server for local testing of the Arcjet-protected application.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment on Unix/macOS\nDESCRIPTION: Creates and activates a Python virtual environment using venv on Unix/macOS systems.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Unix/macOS\n$ python3 -m venv .venv\n$ source .venv/bin/activate\n(.venv) $\n```\n\n----------------------------------------\n\nTITLE: Command Line Options - Basic Configuration\nDESCRIPTION: Basic command line arguments for configuring application behavior including wireguard, YAML format generation, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_launch.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--wg                               Determines whether communication with remote builders are conducted over wireguard or plain internet(https) (default true)\n      --yaml                             Generate configuration in YAML format\n  -y, --yes                              Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for 'fly storage destroy'\nDESCRIPTION: Lists the specific options available for the 'fly storage destroy' command. These include specifying the application name, configuration file path, displaying help, and auto-accepting confirmations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for destroy\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Viewing Environment Variables in a Fly App\nDESCRIPTION: Command to view all environment variables in a Fly Rails application by accessing the app's console and running printenv. This displays variables set through secrets, fly.toml, and Dockerfile.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/configuration.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console -C \"printenv\"\n```\n\n----------------------------------------\n\nTITLE: Starting IEx Shell\nDESCRIPTION: Command to start an interactive Elixir shell for testing Observer locally.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-observer-to-your-app.html.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\niex\n```\n\n----------------------------------------\n\nTITLE: Setting EdgeDB Password Secret\nDESCRIPTION: Command to set the EdgeDB password as a Fly secret, which will be used for authentication when connecting to the EdgeDB instance.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl secrets set EDGEDB_PASSWORD=mysecretpassword\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Fly Platform Regions Command\nDESCRIPTION: Shows the basic command syntax for listing Fly regions\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform_regions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly platform regions [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Backup Config Update Command\nDESCRIPTION: Main command syntax for updating Postgres backup configuration settings via Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_config_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres backup config update [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Flyctl CLI\nDESCRIPTION: These global options apply to all Flyctl commands, including 'fly apps list'. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Initialization Script for Python Environment and Jupyter Notebook\nDESCRIPTION: This bash script runs as the non-root user. It creates and activates a Python virtual environment, installs necessary packages (including Jupyter), and starts a Jupyter notebook server on the Machine's private IPv6 address.\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/python-gpu-example.html.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nPROJECT_DIR=\"project\"\nVENV_DIR=\"$PROJECT_DIR-venv\"\n\necho \"Running post-initialization script as $USER.\"\necho \"Entering $USER's home dir\"\ncd ~\necho \"Creating venv dir for $PROJECT_DIR if it doesn't exist\"\nmkdir -p $VENV_DIR \necho \"Creating venv in $VENV_DIR if it doesn't exist\"\n\nif [ ! -f \"$VENV_DIR/pyvenv.cfg\" ]; then\n    echo \"No 'pyvenv.cfg' file found in $VENV_DIR; creating a venv\"\n    python3 -m venv $VENV_DIR\nfi\n\necho \"Activating venv in $VENV_DIR\"\nsource $VENV_DIR/bin/activate\n\necho \"Creating dir $PROJECT_DIR if it doesn't exist\"\nmkdir -p $PROJECT_DIR && cd $PROJECT_DIR\n# If you want to get project Python deps using requirements.txt, uncomment this and \n# adjust the Dockerfile to copy the file into the image\n# cp /requirements.txt .\n\n# The following only installs pip packages if Jupyter isn't yet installed; \n# essentially on first boot.\nif pip show jupyter &> /dev/null; then\n    echo \"Jupyter is installed with pip.\"\nelse\n    echo \"Installing packages with pip\"\n    # Uncomment to use requirements.txt. You can also install more packages\n    # after deployment. This Python venv lives on the persistent Fly Volume.\n    # pip install -r requirements.txt\n\n    # Install from scratch without a requirements.txt; some examples:\n    pip install jupyter \n    # pip install numpy torch # numpy isn't getting installed as a dep of torch so do it explicitly\n    # pip install diffusers transformers accelerate # HuggingFace libs for specific projects\nfi\n\necho \"Starting Jupyter notebook server!\"\njupyter notebook --ip $FLY_PRIVATE_IP --no-browser\n\n# If you don't want Jupyter, use the `sleep inf` command instead, and \n# `fly ssh console` into the Machine to interact with it.\n# sleep inf\n```\n\n----------------------------------------\n\nTITLE: Git Repository Initialization\nDESCRIPTION: Commands to initialize a Git repository and connect it to the remote GitHub repository.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/github-actions.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\ngit init\ngit remote add origin git@github.com:<username>/<repository-name>.git\n```\n\n----------------------------------------\n\nTITLE: Monitoring Logs with Fly CLI\nDESCRIPTION: Command to watch application logs in real-time using the Fly CLI tool. This is essential for monitoring the application and machine activities during deployment and execution.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_12\n\nLANGUAGE: cmd\nCODE:\n```\nfly logs\n```\n\n----------------------------------------\n\nTITLE: Setting RAILS_MASTER_KEY Secret in Fly.io from Local File (Windows PowerShell)\nDESCRIPTION: Windows PowerShell version of the command to read the Rails master key and set it as a Fly.io secret. This accomplishes the same task as the Unix version but uses PowerShell syntax.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nfly secrets set RAILS_MASTER_KEY=$(Get-Content config\\master.key)\n```\n\n----------------------------------------\n\nTITLE: Running a Machine with file-based secrets\nDESCRIPTION: Command to create a new Fly Machine that makes a secret available as a file using the --file-secret flag, which places the secret's contents in a specified file path.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_16\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . \\\n  --file-secret /secret-file=MY_BASE64_SECRET\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly scale show' Command\nDESCRIPTION: These are the available options for the 'fly scale show' command. They allow specifying the application name, configuration file path, and output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_show.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for show\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: Global configuration options that can be used with the incidents hosts command, including API token configuration and debug options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents_hosts.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Configuring Oban Worker Script\nDESCRIPTION: Shell script for the worker process that runs Oban queues without starting the Phoenix HTTP server.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\ncd -P -- \"$(dirname -- \"$0\")\"\nPHX_SERVER=false OBAN_QUEUES=\"*\" exec ./my_app start\n```\n\n----------------------------------------\n\nTITLE: Using the Sentry Extension Command in Fly.io\nDESCRIPTION: The base command for interacting with the Sentry extension in Fly.io. This command allows users to create, manage, and view Sentry projects integrated with their Fly.io applications.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_sentry.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions sentry [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io Database URL from Heroku\nDESCRIPTION: This command sets the DATABASE_URL secret in Fly.io using the value from Heroku's config. It allows Fly.io apps to connect to a Heroku-managed database.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_14\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set DATABASE_URL=$(heroku config:get DATABASE_URL)\n```\n\n----------------------------------------\n\nTITLE: Configuring a queue for high availability setup\nDESCRIPTION: TOML configuration for setting the QUEUE environment variable to avoid duplicate log messages when running multiple Log Shipper instances for high availability. Uses NATS subscription queues to ensure messages are only processed once.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/exporting-logs.html.md#2025-04-16_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  QUEUE = \"org-logs\"\n```\n\n----------------------------------------\n\nTITLE: Sudo Configuration for SSH\nDESCRIPTION: Dockerfile configuration to enable sudo access for running SSH server as non-root user\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/opensshd.html.md#2025-04-16_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get install -y sudo && \\\n    echo \"%rails ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n```\n\n----------------------------------------\n\nTITLE: Deploying the Ollama Application\nDESCRIPTION: Command to deploy the configured Ollama application to Fly.io with the private IPv6 address previously allocated.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ fly deploy\n```\n\n----------------------------------------\n\nTITLE: Using the fly sftp command in Bash\nDESCRIPTION: The basic usage syntax for the 'fly sftp' command. It allows for various subcommands and flags to be specified.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly sftp [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: fly auth docker Command Options\nDESCRIPTION: Available options specific to the 'fly auth docker' command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_docker.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for docker\n```\n\n----------------------------------------\n\nTITLE: Setting Encrypted Secrets using Flyctl CLI\nDESCRIPTION: This command allows users to set one or more encrypted secrets for a Fly.io application. It accepts name-value pairs for secrets and offers various options for specifying the application and controlling the deployment process.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_set.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set [flags] NAME=VALUE NAME=VALUE ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Convenience Shell Script for IEx Connection\nDESCRIPTION: A shell script named 'fiex' that simplifies connecting to a Fly.io-deployed Elixir application's IEx shell, with instance selection support.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/iex-into-running-app.html.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\n\nset -e\n\nfly ssh console --pty --select -C \"/app/bin/hello_elixir remote\"\n```\n\n----------------------------------------\n\nTITLE: Using the Fly CLI Scale Count Command\nDESCRIPTION: This command allows you to change an app's VM count to a specified value. It includes various options for configuring the scaling operation, such as specifying the app, environment variables, and VM specifications.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_count.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly scale count [count] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Network Utilities on Test Machine\nDESCRIPTION: Commands to update package lists and install essential network troubleshooting tools (curl, ping, and DNS utilities) on the test Ubuntu machine.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# apt update && apt install -y curl iputils-ping dnsutils\n```\n\n----------------------------------------\n\nTITLE: Relaunching with Dockerfile-based Configuration\nDESCRIPTION: Restarting the launch process with a Dockerfile present, which gets detected by Fly.io instead of using the Python buildpack, allowing for more customized deployment options.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/fly-launch.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch\n```\n\nLANGUAGE: out\nCODE:\n```\nAn existing fly.toml file was found for app hello-gunicorn-flask\n? Would you like to copy its configuration to the new app? No\n```\n\n----------------------------------------\n\nTITLE: Basic MPG Database Connection Command\nDESCRIPTION: The base command for connecting to a Managed Postgres database through Fly.io's CLI\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres_connect.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly managed-postgres connect [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying the Arcjet-Protected App to Fly\nDESCRIPTION: Command to deploy the application with Arcjet security protection to Fly's infrastructure.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for GitHub Actions\nDESCRIPTION: YAML snippet that makes the FLY_API_TOKEN secret available for authentication with Fly.io services in the GitHub Actions workflow.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Installing Django with pip\nDESCRIPTION: Installs the latest version of Django using pip package manager within the activated virtual environment.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\npython -m pip install Django\n```\n\n----------------------------------------\n\nTITLE: Allocating a Private IPv6 Address for Flycast\nDESCRIPTION: Command to allocate a private IPv6 address for the application, which is required for Flycast functionality and keeps the application accessible only within your organization's private network.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ fly ips allocate-v6 --private\n```\n\n----------------------------------------\n\nTITLE: Fly.io Service Configuration for SSH\nDESCRIPTION: TOML configuration for mapping internal SSH port to external port 22 in fly.toml\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/opensshd.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[services]]\n  internal_port = 2222\n  protocol = \"tcp\"\n  auto_stop_machines = true\n  auto_start_machines = true\n  [[services.ports]]\n    port = 22\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly machine restart' Command in Bash\nDESCRIPTION: Demonstrates the basic usage syntax for the 'fly machine restart' command. It allows restarting one or more Fly machines by specifying their IDs and optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_restart.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine restart [<id>...] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using 'fly orgs remove' Command in Fly CLI\nDESCRIPTION: This command removes a user from a Fly organization. The user must have previously accepted an invitation to join. It requires the organization slug and the user's email address as arguments.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_remove.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly orgs remove [slug] [email] [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for Creating Volume Snapshots with Fly CLI\nDESCRIPTION: This snippet shows the basic syntax for creating a volume snapshot using the Fly CLI. It requires specifying the volume ID and allows for additional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_snapshots_create.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfly volumes snapshots create <volume id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Machine ID Scoping in Rails\nDESCRIPTION: Ruby code for modifying the Rails routes configuration to scope all routes under the machine ID path, except for health checks. This enables each machine to handle its own routes.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/cell-based.html.md#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nscope ENV.fetch(\"FLY_MACHINE_ID\", \"\") do\n...\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  scope ENV.fetch(\"FLY_MACHINE_ID\", \"\") do\n    resources :posts\n    # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html\n\n    # Defines the root path route (\"/\")\n    root \"posts#index\"\n  end\n\n  # Reveal health status on /up that returns 200 if the app boots with no exceptions, otherwise 500.\n  # Can be used by load balancers and uptime monitors to verify that the app is live.\n  get \"up\" => \"rails/health#show\", as: :rails_health_check\nend\n```\n\n----------------------------------------\n\nTITLE: Logging Into Fly.io Account\nDESCRIPTION: Command to log into a Fly.io account using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[fly auth login](/docs/flyctl/auth-login/)\n```\n\n----------------------------------------\n\nTITLE: Command Options for Fly Machine Status\nDESCRIPTION: Available options for the status command including application name specification, config file path, and display configuration settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string       Application name\n  -c, --config string    Path to application configuration file\n  -d, --display-config   Display the machine config as JSON\n  -h, --help             help for status\n```\n\n----------------------------------------\n\nTITLE: Running Fly Machine with Environment Variables\nDESCRIPTION: Command to run a Fly Machine with custom environment variables. It demonstrates setting multiple environment variables, including one with spaces in its value.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --env MY_VAR=MY_VALUE \\\n                  --env MY_OTHER_VAR=\"my spacey value\" \\\n                  --app my-app-name\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Kill Command Global Options in Bash\nDESCRIPTION: These global options apply to all Fly CLI commands, including 'fly machine kill'. They allow setting the API access token and controlling the verbosity of output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_kill.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for 'fly secrets set'\nDESCRIPTION: These are the specific options available for the 'fly secrets set' command. They include specifying the application, config file path, deployment behavior, and displaying help information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_set.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-a, --app string      Application name\n-c, --config string   Path to application configuration file\n    --detach          Return immediately instead of monitoring deployment progress\n-h, --help            help for set\n    --stage           Set secrets but skip deployment for machine apps\n```\n\n----------------------------------------\n\nTITLE: Using 'fly tokens 3p add' Command for Fly.io Token Management\nDESCRIPTION: This command adds a third-party caveat to a Fly.io token. It requires specifying a location (URL) for the third-party service that will supply a discharge token. The command also accepts options for setting a shared secret.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_add.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens 3p add [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Process Command in Fly.toml\nDESCRIPTION: Fly.io configuration for running the database setup script before starting the application.\nSOURCE: https://github.com/superfly/docs/blob/main/js/prisma/sqlite.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[processes]\n  app = \"node dbsetup.js npm run start\"\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for fly image\nDESCRIPTION: Displays the help option available specifically for the fly image command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for image\n```\n\n----------------------------------------\n\nTITLE: Installing Supercronic in Dockerfile\nDESCRIPTION: Dockerfile instructions to download, verify, and install Supercronic in the container. It also copies the crontab file into the container.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/supercronic.html.md#2025-04-16_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Latest releases available at https://github.com/aptible/supercronic/releases\nENV SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.2.29/supercronic-linux-amd64 \\\n    SUPERCRONIC=supercronic-linux-amd64 \\\n    SUPERCRONIC_SHA1SUM=cd48d45c4b10f3f0bfdd3a57d054cd05ac96812b\n\nRUN curl -fsSLO \"$SUPERCRONIC_URL\" \\\n && echo \"${SUPERCRONIC_SHA1SUM}  ${SUPERCRONIC}\" | sha1sum -c - \\\n && chmod +x \"$SUPERCRONIC\" \\\n && mv \"$SUPERCRONIC\" \"/usr/local/bin/${SUPERCRONIC}\" \\\n && ln -s \"/usr/local/bin/${SUPERCRONIC}\" /usr/local/bin/supercronic\n\n# You might need to change this depending on where your crontab is located\nCOPY crontab crontab\n```\n\n----------------------------------------\n\nTITLE: Listing Machine Details\nDESCRIPTION: Command to list detailed information about all machines in an app, including internal IPv6 addresses.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine list -a testrun\n```\n\nLANGUAGE: out\nCODE:\n```\n1 machines have been retrieved from app testrun.\nView them in the UI here (​https://fly.io/apps/testrun/machines/)\n\ntestrun\nID              NAME                    STATE   REGION  IMAGE                                           IP ADDRESS                           VOLUME  CREATED                 LAST UPDATED            APP PLATFORM    PROCESS GROUP \n178115db494e18  holy-waterfall-9884     started lhr     testrun:deployment-01GTYFV11PM7D7B30AWZSH1FZE       fdaa:0:3b99:a7b:a98:6c48:67c5:2              2023-03-07T16:52:59Z    2023-03-07T16:53:06Z    v2              app    \n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts in Fly.toml\nDESCRIPTION: Volume configuration for persistent SQLite storage, including auto-scaling settings for database growth.\nSOURCE: https://github.com/superfly/docs/blob/main/js/prisma/sqlite.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[mounts]\n  source = \"data\"\n  destination=\"/data\"\n  auto_extend_size_threshold = 80\n  auto_extend_size_increment = \"1GB\"\n  auto_extend_size_limit = \"10GB\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to a Poetry Project\nDESCRIPTION: Command to add package dependencies to a Poetry project. This automatically updates the pyproject.toml file and creates a virtual environment if one doesn't exist.\nSOURCE: https://github.com/superfly/docs/blob/main/python/the-basics/initial-setup.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\npoetry add <dep>\n```\n\n----------------------------------------\n\nTITLE: Running Temporary Ubuntu Machine with Shell\nDESCRIPTION: Command to create a temporary Ubuntu Machine within the organization's private network and open an interactive shell. No image argument is required.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run --shell\n```\n\n----------------------------------------\n\nTITLE: Deploying and Scaling Processes in Bash\nDESCRIPTION: Commands to deploy the application and scale the cron and web processes in Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/supercronic.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ fly deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ fly scale count cron=1 web=\n```\n\n----------------------------------------\n\nTITLE: Available Command Options\nDESCRIPTION: Command-specific options for configuring the backup restore operation, including app selection, configuration path, and restore target specifications.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_restore.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                   Application name\n  -c, --config string                Path to application configuration file\n      --detach                       Return immediately instead of monitoring deployment progress\n  -h, --help                         help for restore\n      --image-ref string             Specify a non-default base image for the restored Postgres app\n      --restore-target-inclusive     Set to true to stop recovery after the specified time, or false to stop before it (default true)\n      --restore-target-name string   ID or alias of backup to restore.\n      --restore-target-time string   RFC3339-formatted timestamp up to which recovery will proceed. Example: 2021-07-16T12:34:56Z\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for 'fly redis list' in Bash\nDESCRIPTION: These are the specific options available for the 'fly redis list' command. They allow for getting help and specifying the target Fly.io organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n```\n\n----------------------------------------\n\nTITLE: Release Cookie Configuration\nDESCRIPTION: Fly.toml configuration for setting release cookie\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/clustering.html.md#2025-04-16_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  RELEASE_COOKIE = \"my-app-cookie\"\n```\n\n----------------------------------------\n\nTITLE: Creating Fly.io App for Autoscaler\nDESCRIPTION: This bash command creates a new Fly.io application that will run the autoscaler.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autoscale-machines.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ fly apps create my-autoscaler\n```\n\n----------------------------------------\n\nTITLE: Showing Machine Configuration\nDESCRIPTION: Command to show detailed configuration of a specific machine including its current status and JSON configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\nfly m status e784459b655483 -d\n```\n\nLANGUAGE: out\nCODE:\n```\nMachine ID: e784459b655483\nInstance ID: 01GQTQV0EMGV8XY4NYJN68247W\nState: started\n\nVM\n  ID            = e784459b655483                               \n  Instance ID   = 01GQTQV0EMGV8XY4NYJN68247W                   \n  State         = started                                      \n  Image         = testrun:deployment-01GQTQTJB5RCS03FKGX9K2H60B  \n  Name          = red-feather-7761                             \n  Private IP    = fdaa:0:3b99:a7b:92:9336:667f:2               \n  Region        = iad                                          \n  Process Group =                                              \n  Memory        = 256                                          \n  CPUs          = 1                                            \n  Created       = 2023-01-27T23:08:41Z                         \n  Updated       = 2023-01-27T23:09:10Z                         \n  Command       =                                              \n\nEvent Logs\nSTATE   EVENT   SOURCE  TIMESTAMP                       INFO \nstarted start   flyd    2023-01-27T18:09:10.855-05:00\ncreated launch  user    2023-01-27T18:08:41.361-05:00\n\n\nConfig:\n{\n  \"init\": {},\n  \"image\": \"registry.fly.io/testrun:deployment-01GQTQTJB5RCS03FKGX9K2H60B\",\n  \"metadata\": {\n    \"fly_platform_version\": \"v2\",\n    \"fly_release_id\": \"QgDeJ3o11V2D7fkXVQGvPBON\",\n    \"fly_release_version\": \"1\"\n  },\n  \"restart\": {},\n  \"services\": [\n    {\n      \"protocol\": \"tcp\",\n      \"internal_port\": 4999,\n      \"ports\": [\n        {\n          \"port\": 80,\n          \"handlers\": [\n            \"http\"\n          ],\n          \"force_https\": true\n        },\n        {\n          \"port\": 443,\n          \"handlers\": [\n            \"tls\",\n            \"http\"\n          ]\n        }\n      ],\n      \"checks\": [\n        {\n          \"type\": \"tcp\",\n          \"interval\": \"15s\",\n          \"timeout\": \"2s\"\n        }\n      ],\n      \"concurrency\": {\n        \"type\": \"connections\",\n        \"hard_limit\": 25,\n        \"soft_limit\": 20\n      }\n    }\n  ],\n  \"guest\": {\n    \"cpu_kind\": \"shared\",\n    \"cpus\": 1,\n    \"memory_mb\": 256\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn for Production\nDESCRIPTION: Installs Gunicorn, a production-ready WSGI server for Django applications.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\npython -m pip install gunicorn\n```\n\n----------------------------------------\n\nTITLE: Updating Ecto Repository to Use SQLite3 Adapter\nDESCRIPTION: This code modifies the Ecto repository module to use the SQLite3 adapter instead of the default Postgres adapter.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Name.Repo do\n  use Ecto.Repo,\n    otp_app: :name,\n    adapter: Ecto.Adapters.SQLite3\nend\n\n```\n\n----------------------------------------\n\nTITLE: Measuring Application Startup Time\nDESCRIPTION: Command to measure the time it takes for a scaled-down Ollama application to start up when receiving a request, demonstrating the auto-scaling capabilities.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# time curl http://xe-ollama.flycast\n```\n\n----------------------------------------\n\nTITLE: Querying and Aggregating Data\nDESCRIPTION: Ecto query to group questions by personality type and count them\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/interesting-things-with-livebook.html.md#2025-04-16_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nquery =\n  from(q in Question,\n    group_by: q.personality,\n    select: {q.personality, count(q.id)}\n  )\n\npersonality_counts =\n  query\n  |> Repo.all()\n  |> Enum.into(%{})\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Postgres Backup Config Command\nDESCRIPTION: This command is used to manage backup configurations for Postgres databases in Fly. It provides options to show or update the current backup configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres backup config [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly postgres config update' Command\nDESCRIPTION: This snippet shows the basic usage syntax for the 'fly postgres config update' command in the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_config_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres config update [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly wireguard list' Command in Fly CLI\nDESCRIPTION: This command is used to list all WireGuard peer connections. It can be run with an optional organization parameter and supports various flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard list [org] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly orgs delete' Command in Fly CLI\nDESCRIPTION: This command deletes an existing Fly organization. It accepts an optional slug parameter and has a -yes flag for automatic confirmation. Global options for API access token and debug/verbose output are also available.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_delete.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly orgs delete [-yes] [slug] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the fly machine suspend Command\nDESCRIPTION: Basic usage of the fly machine suspend command, which allows suspending one or more machines by ID. The command can be followed by optional machine IDs and command flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_suspend.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine suspend [<id>...] [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying IPv6 Address for a Specific WireGuard Peer\nDESCRIPTION: Command to look up the IPv6 address of a specific WireGuard peer using DNS. This demonstrates how to resolve peer addresses for direct connections.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_15\n\nLANGUAGE: cmd\nCODE:\n```\ndig +short aaaa my-peer._peer.internal @fdaa:0:18::3\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly apps move in Fly.io CLI\nDESCRIPTION: Available options for the fly apps move command including help flag, organization specification, health check control, and confirmation bypass.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_move.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                 help for move\n  -o, --org string           The target Fly.io organization\n      --skip-health-checks   Update machines without waiting for health checks\n  -y, --yes                  Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Limits in fly.toml\nDESCRIPTION: Example configuration for handling connection limits in the fly.toml file. Shows how to set hard and soft limits for connections, which can help prevent applications from exhausting available connections.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/troubleshooting.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n  [services.concurrency]\n    hard_limit = 50\n    soft_limit = 25\n    type = \"connections\"\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: This snippet shows the global options available for all Fly CLI commands, including the 'fly scale count' command. These options allow setting the API access token and controlling debug and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_count.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options can be used with all Fly CLI commands, including 'fly storage create'. They provide settings for API access token, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These are the global options available for all Fly CLI commands, including the ability to specify an API access token and enable debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_config.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Local Command Options\nDESCRIPTION: Available local options for the allocate-v4 command including app specification, configuration path, region selection, and shared IP allocation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_allocate-v4.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for allocate-v4\n  -r, --region string   The target region (see 'flyctl platform regions')\n      --shared          Allocates a shared IPv4\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Checking file-based secret contents\nDESCRIPTION: Example showing how to view the contents of a file-based secret after it's been decoded from Base64 to plain text on the Machine.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_17\n\nLANGUAGE: cmd\nCODE:\n```\nroot@1857770b4e10e8:/# cat secret-file\nHello! I'm Frankie the balloon!\n```\n\n----------------------------------------\n\nTITLE: Using 'fly apps list' Command in Flyctl CLI\nDESCRIPTION: This command lists all applications available to the user across their organizations. It displays app name, owner, status, and latest deploy time. Various flags can modify the output format and content.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly apps list [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Read-only Fly.io API Token Command\nDESCRIPTION: Basic command syntax for creating a read-only token in Fly.io. The token will have limited access to read a single organization's resources.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_readonly.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens create readonly [flags]\n```\n\n----------------------------------------\n\nTITLE: Getting Fly.io Authentication Token\nDESCRIPTION: Command to obtain an authentication token using flyctl.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/metrics.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nTOKEN=$(flyctl auth token)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Asset Serving in fly.toml\nDESCRIPTION: Configuration snippet for setting up static asset serving directly through Fly.io proxies. Defines the container path where static assets are stored and the URL prefix where they will be served from.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[[statics]]\n  guest_path = \"/app/public\"\n  url_prefix = \"/public\"\n```\n\n----------------------------------------\n\nTITLE: Fly Certificates Command Usage\nDESCRIPTION: The basic command structure for using the fly certs command. This is the entry point for all certificate-related operations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly certs [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Regenerating Dockerfile for Rails Application\nDESCRIPTION: This command regenerates the Dockerfile for a Rails application, allowing for updates to dependencies or configuration changes.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate dockerfile\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Redis Command\nDESCRIPTION: Basic usage syntax for the 'fly redis' command, which is used to manage Redis databases on Upstash.com through the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly redis [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Opening Upstash Web Console\nDESCRIPTION: Command to access the Upstash web console for viewing database details, connection strings, and usage metrics for a specific organization.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/redis.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl redis dashboard <org_name>\n```\n\n----------------------------------------\n\nTITLE: Querying IPv6 Addresses of All App Machines\nDESCRIPTION: Command to look up IPv6 addresses of all running machines for a specific app using DNS. This is useful for connecting to individual machines within an app.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_17\n\nLANGUAGE: cmd\nCODE:\n```\ndig +short aaaa my-app-name.internal\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Cluster Creation Local Options\nDESCRIPTION: Available local command options including help flag, JSON output toggle, organization specification, and region selection\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_clusters_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for create\n  -j, --json            JSON output\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl litefs-cloud regions')\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 for Test Environment\nDESCRIPTION: This code configures the Ecto repository to use SQLite3 in the test environment with sandbox pool for testing isolation.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :name, Name.Repo,\n  database: Path.expand(\"../name_test.db\", Path.dirname(__ENV__.file)),\n  pool_size: 5,\n  pool: Ecto.Adapters.SQL.Sandbox\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Agent Restart Command\nDESCRIPTION: Command syntax for restarting the Fly agent. The agent is a background process that manages flyctl wireguard connections.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_restart.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly agent restart [flags]\n```\n\n----------------------------------------\n\nTITLE: Update Machine with Dockerfile\nDESCRIPTION: Updates a Fly Machine by building a new image from a specified Dockerfile in the working directory.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-update.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine update --dockerfile Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Running Cluster Script for Same Application\nDESCRIPTION: This command runs the cluster_with_remote script to connect a local Elixir application to its counterpart deployed on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/clustering-from-home-to-your-app-in-fly.html.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./cluster_with_remote\n```\n\n----------------------------------------\n\nTITLE: Copying WireGuard Configuration to System Directory on Linux\nDESCRIPTION: Command to copy a WireGuard configuration file to the system directory with sudo permissions. This is required for system-wide WireGuard setup on Linux.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nsudo cp basic.conf /etc/wireguard\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly releases' Command in Bash\nDESCRIPTION: This command lists all releases of an application on the Fly platform. It provides information such as release type, timestamp, success/failure status, and the user who triggered the release.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_releases.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly releases [flags]\n```\n\n----------------------------------------\n\nTITLE: Attaching Postgres to EdgeDB App\nDESCRIPTION: Command to attach the Postgres app to the EdgeDB app, which sets the DATABASE_URL environment variable in EdgeDB and creates a new database role.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl postgres attach mypostgres\n```\n\n----------------------------------------\n\nTITLE: Using fly platform status Command in Bash\nDESCRIPTION: This command shows the current Fly platform status in a browser or via JSON output. It can be customized with various flags for different output formats and additional information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly platform status [kind] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Fly.io Volumes - Basic Command\nDESCRIPTION: Basic command syntax for creating a new volume in Fly.io. Requires specifying a volume name and supports additional configuration flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes create <volume name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Launching Rails Application on Fly.io\nDESCRIPTION: Command to launch the Rails application on Fly.io using the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-record.html.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly scale vm' Command\nDESCRIPTION: Available options for the 'fly scale vm' command, including application name, configuration file path, process group selection, and VM memory specification.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_vm.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string             Application name\n  -c, --config string          Path to application configuration file\n  -h, --help                   help for vm\n  -g, --process-group string   The process group to apply the VM size to\n      --vm-memory int          Memory in MB for the VM\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options can be used with the 'fly scale show' command and other Fly CLI commands. They allow setting the API access token and controlling debug and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_show.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Initializing Release Configuration\nDESCRIPTION: Command to initialize release configuration for an Elixir application\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/clustering.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nmix release.init\n```\n\n----------------------------------------\n\nTITLE: Using fly ssh console Command in Bash\nDESCRIPTION: This command connects to a running instance of the current Fly.io app. It supports various options for specifying the target instance, running commands, and configuring the SSH session.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh console [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all fly CLI commands, including authentication and debugging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Service in fly.toml\nDESCRIPTION: This snippet shows the configuration for the HTTP service in fly.toml. It sets up the internal port, HTTPS enforcement, auto-scaling options, and specifies that this configuration applies to the 'app' process group.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/cron-and-queues.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[http_service]\n  internal_port = 8080\n  force_https = true\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 0\n  processes = [\"app\"]\n```\n\n----------------------------------------\n\nTITLE: Command Options for Supabase List\nDESCRIPTION: Available command-specific options including help, organization selection, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Service Process Association in fly.toml\nDESCRIPTION: Configuration to associate the HTTP service with the app process only, ensuring web traffic is only handled by the main application.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[http_service]\n  processes = [\"app\"] # this service only applies to the app process\n```\n\n----------------------------------------\n\nTITLE: Configuring Swap Space in fly.toml\nDESCRIPTION: This TOML configuration adds 1GB of swap space to the application for use as virtual memory.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nswap_size_mb = 1024\n```\n\n----------------------------------------\n\nTITLE: Creating WireGuard Peer Connection using fly CLI\nDESCRIPTION: This command creates a WireGuard peer connection for a specified organization, region, and name. It allows for specifying a custom network name and supports global options for authentication and debugging.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard create [org] [region] [name] [file] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Backup Enable Command\nDESCRIPTION: Main command syntax for enabling backups on a Postgres cluster. Creates a Tigris bucket for storage.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_enable.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres backup enable [flags]\n```\n\n----------------------------------------\n\nTITLE: MySQL Update Command Options\nDESCRIPTION: Available command-specific options for customizing the MySQL database update operation, including app configuration, resource allocation, and organization settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n      --cpu int         The number of CPUs assigned to each cluster member\n  -h, --help            help for update\n      --memory int      Memory (in GB) assigned to each cluster member\n  -o, --org string      The target Fly.io organization\n      --size int        The number of members in your cluster\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Fly Auth Login Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'fly auth login' command. They allow users to specify login credentials and choose between interactive and non-interactive login methods.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_login.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --email string      Login email\n  -h, --help              help for login\n  -i, --interactive       Log in with an email and password interactively\n      --otp string        One time password\n      --password string   Login password\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Machine Kill Command in Bash\nDESCRIPTION: This command is used to forcefully terminate (SIGKILL) a Fly machine. It requires the machine ID and supports various options for specifying the application and configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_kill.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine kill [id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using 'fly image show' Command in Fly CLI\nDESCRIPTION: This command is used to show image details in a Fly.io application. It supports various options for specifying the application, configuration, and output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image_show.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly image show [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Tigris Storage Bucket with Fly CLI\nDESCRIPTION: Command to create a new storage bucket on Tigris using the Fly CLI, which sets up necessary environment variables and secrets for Active Storage.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-storage.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly storage create\n```\n\nLANGUAGE: output\nCODE:\n```\n? Choose a name, use the default, or leave blank to generate one: \nYour Tigris project (xxx) is ready. See details and next steps with: https://fly.io/docs/tigris/\n\nSetting the following secrets on xxx:\nAWS_ACCESS_KEY_ID: tid_xxx\nAWS_ENDPOINT_URL_S3: https://fly.storage.tigris.dev\nAWS_REGION: auto\nAWS_SECRET_ACCESS_KEY: tsec_xxxxx\nBUCKET_NAME: xxx\n\nSecrets are staged for the first deployment\n```\n\n----------------------------------------\n\nTITLE: Using the fly apps move Command in Fly.io CLI\nDESCRIPTION: Basic usage syntax for the fly apps move command which transfers an application to another organization. Requires specifying the application name and supports additional flags for configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_move.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly apps move <app name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Fly Machine with Custom Name\nDESCRIPTION: Command to run a new Fly Machine with a custom name using the 'fly machine run' command. This sets the 'name' property of the Machine.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run . --name my-special-Machine\n```\n\n----------------------------------------\n\nTITLE: Using the fly ips command\nDESCRIPTION: Basic syntax for the 'fly ips' command which is used to manage IP addresses for Fly.io applications.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ips [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Initiating OAuth Authorization in HTTP\nDESCRIPTION: HTTP GET request to start the OAuth authorization process for Fly.io. It includes the client_id, response_type, redirect_uri, and scope parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.fly.io/oauth/authorize?client_id=123&response_type=code&redirect_uri=https://logjam.io/flyio/callback&scope=read\n```\n\n----------------------------------------\n\nTITLE: Using the fly volumes command\nDESCRIPTION: The main command for managing Fly Volumes. It requires a subcommand and optional flags to perform specific operations on volumes.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile to Use Bash Script for Process Management\nDESCRIPTION: Modified Dockerfile that uses the bash script approach for running multiple processes. It adds the script to the container and sets it as the command to run.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nADD gross.sh /app/\nCMD /app/gross.sh\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to Ollama via Flycast\nDESCRIPTION: Command to test HTTP connectivity to the Ollama application via its Flycast address using curl, which may trigger machine startup if the application is scaled down.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# curl http://xe-ollama.flycast\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Stack Logging\nDESCRIPTION: Configuration for Laravel stack logging channel in fly.toml and logging.php\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/post-deployment.html.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  APP_ENV = \"production\"\n  LOG_CHANNEL = \"stack\"\n  LOG_LEVEL = \"info\"\n  LOG_STDERR_FORMATTER = \"Monolog\\\\Formatter\\\\JsonFormatter\"\n```\n\nLANGUAGE: php\nCODE:\n```\n'stack' => [\n    'driver' => 'stack',\n    'channels' => ['single'],\n    'ignore_exceptions' => false,\n  ],\n```\n\n----------------------------------------\n\nTITLE: Adding Deploy Command in fly.toml\nDESCRIPTION: This TOML configuration adds a release command to prepare the database during deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n  release_command = \"bin/rails db:prepare\"\n```\n\n----------------------------------------\n\nTITLE: Deploy Token Command Options\nDESCRIPTION: Available configuration options for token creation including app name, config path, expiry duration, and output format settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string        Application name\n  -c, --config string     Path to application configuration file\n  -x, --expiry duration   The duration that the token will be valid (default 175200h0m0s)\n  -h, --help              help for deploy\n  -j, --json              JSON output\n  -n, --name string       Token name (default \"flyctl deploy token\")\n```\n\n----------------------------------------\n\nTITLE: Pinging App Machine on macOS via IPv6\nDESCRIPTION: Command to ping a Fly.io application machine from macOS using IPv6 and the internal DNS name. This verifies network connectivity to the app.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_20\n\nLANGUAGE: cmd\nCODE:\n```\nping6 my-app.internal\n```\n\n----------------------------------------\n\nTITLE: Listing Vector Indexes\nDESCRIPTION: Command to list all Vector indexes in your Fly.io organization. This provides a quick overview of your available indexes and their primary regions.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/vector.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext vector list\n```\n\n----------------------------------------\n\nTITLE: Launching Ollama from Template Repository without Immediate Deployment\nDESCRIPTION: Command to create a new Fly.io application based on the Ollama demo template without immediately deploying it, which prevents the automatic allocation of public IP addresses.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly launch --from https://github.com/fly-apps/ollama-demo --no-deploy\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly redis list' Command in Bash\nDESCRIPTION: This command lists Upstash Redis databases for a Fly.io organization. It supports options for specifying the organization and includes global options for authentication and output control.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly redis list [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Local Development\nDESCRIPTION: Command to install all required npm dependencies for the Arcjet example application.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly machine clone' Command in Bash\nDESCRIPTION: These are the available options for the 'fly machine clone' command. They allow you to customize the cloning process, such as specifying the application, attaching volumes, setting CPU and memory parameters, and more.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_clone.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                    Application name\n      --attach-volume string          Existing volume to attach to the new Machine in the form of <volume_id>[:/path/inside/machine]\n      --clear-auto-destroy            Disable auto destroy setting on the new Machine\n      --clear-cmd                     Set empty CMD on the new Machine so it uses default CMD for the image\n  -c, --config string                 Path to application configuration file\n      --detach                        Return immediately instead of monitoring deployment progress\n      --from-snapshot string          Clone attached volumes and restore from snapshot, use 'last' for most recent snapshot. The default is an empty volume.\n  -h, --help                          help for clone\n      --host-dedication-id string     The dedication id of the reserved hosts for your organization (if any)\n      --name string                   Optional name for the new Machine\n      --override-cmd string           Set CMD on the new Machine to this value\n  -r, --region string                 The target region (see 'flyctl platform regions')\n      --standby-for strings           Comma separated list of Machine IDs to watch for. You can use '--standby-for=source' to create a standby for the cloned Machine.\n      --vm-cpu-kind string            The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                   Number of CPUs\n      --vm-gpu-kind string            If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                   Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string              Memory (in megabytes) to attribute to the VM\n      --vm-size string                The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n      --volume-requires-unique-zone   Require volume to be placed in separate hardware zone from existing volumes. Default true. (default true)\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for Listing PostgreSQL Backups\nDESCRIPTION: These are the specific options available for the 'fly postgres backup list' command. They allow specifying the application name, configuration file path, and accessing help information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_list.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n```\n\n----------------------------------------\n\nTITLE: Observer Script Output\nDESCRIPTION: Example output when running the observer script, showing successful connection to the remote Elixir node.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-observer-to-your-app.html.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAttempting to connect to hello-elixir-01HR8CXEYKQ9RXYQFEWSE5PTE0@fdaa:0:1da8:a7b:a160:73d2:f48b:2\nErlang/OTP 26 [erts-14.2.2] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1] [jit]\n\nNode Connected?: true\nConnected Nodes: [:\\\"hello-elixir-01HR8CXEYKQ9RXYQFEWSE5PTE0@fdaa:0:1da8:a7b:a160:73d2:f48b:2\\\"]\n\n...\n\nInteractive Elixir (1.16.1) - press Ctrl+C to exit (type h() ENTER for help)\n```\n\n----------------------------------------\n\nTITLE: Using save-kubeconfig Command in Fly CLI Kubernetes Extension\nDESCRIPTION: This command saves the kubeconfig file for a specified Kubernetes cluster. It requires the cluster name as an argument and offers an option to specify the output path for the saved file.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_save-kubeconfig.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions kubernetes save-kubeconfig [cluster name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options for Fly Commands\nDESCRIPTION: Global configuration options applicable across all Fly CLI commands, including API authentication and debug output controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for save-kubeconfig Command in Fly CLI\nDESCRIPTION: These are the specific options available for the save-kubeconfig command. It includes a help flag and an option to specify the output path for the kubeconfig file.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_save-kubeconfig.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for save-kubeconfig\n      --output string   The output path to save the kubeconfig file\n```\n\n----------------------------------------\n\nTITLE: Using the fly dashboard metrics Command\nDESCRIPTION: The basic usage syntax for the fly dashboard metrics command. This command opens a web browser displaying the metrics page for a Fly application in the Fly Web UI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_dashboard_metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly dashboard metrics [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Scale Command Usage\nDESCRIPTION: The basic syntax for using the fly scale command to manage application resources.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly scale [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile with Deferred Asset Precompilation\nDESCRIPTION: Generate a Dockerfile that defers the asset precompilation step to deployment time, useful for resolving build-time secret access issues.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbin/rails generate dockerfile --precompile=defer\n```\n\n----------------------------------------\n\nTITLE: Updating Cable Configuration\nDESCRIPTION: Diff showing changes to config/cable.yml to switch from Redis adapter to AnyCable adapter.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/anycable.html.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n production:\n-  adapter: redis\n-  url: <%= ENV.fetch(\"REDIS_URL\") { \"redis://localhost:6379/1\" } %>\n-  channel_prefix: namelist_production\n+  adapter: any_cable\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly machine stop Command\nDESCRIPTION: Basic command syntax for stopping one or more Fly machines. Allows specifying machine IDs as arguments.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_stop.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine stop [<id>...] [flags]\n```\n\n----------------------------------------\n\nTITLE: Launching Livebook Server with ENV Variables\nDESCRIPTION: Command to start Livebook server with required environment variables for connecting to a Fly.io app.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-livebook-to-your-app.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nLIVEBOOK_DISTRIBUTION=name ERL_AFLAGS=\"-proto_dist inet6_tcp\" livebook server\n```\n\n----------------------------------------\n\nTITLE: Releasing Public IP Addresses\nDESCRIPTION: Command template for removing public IP addresses from a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autostart-internal-apps.html.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly ips release <ip address> <ip address> ...\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 Database in fly.toml\nDESCRIPTION: This TOML configuration sets up environment variables and volume mounts for using SQLite3 with a Fly Volume.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  DATABASE_URL = \"sqlite3:///mnt/volume/production.sqlite3\"\n\n[mounts]\n  source = \"sqlite3_volume\"\n  destination = \"/mnt/volume\"\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile with Sudo Access in Rails on Fly.io\nDESCRIPTION: Command to modify the Dockerfile to enable sudo access, which is required for accessing the application as the rails user. This must be run locally before deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/run-tasks-and-consoles.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate dockerfile --sudo\n```\n\n----------------------------------------\n\nTITLE: Creating Deploy Token Command\nDESCRIPTION: Command syntax for creating a new deployment token with the fly CLI. The token is valid for 20 years by default and can be scoped to a specific application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens create deploy [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly machine restart' Command in Bash\nDESCRIPTION: Lists the available options for the 'fly machine restart' command, including app selection, configuration file path, force stop, help, stop signal, health check skipping, and wait time.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_restart.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string           Application name\n  -c, --config string        Path to application configuration file\n      --force                Force stop the machine(s)\n  -h, --help                 help for restart\n  -s, --signal string        Signal to stop the machine with (default: SIGINT)\n      --skip-health-checks   Restarts app without waiting for health checks.\n      --time int             Seconds to wait before killing the machine\n```\n\n----------------------------------------\n\nTITLE: Activating WireGuard Tunnel on Linux\nDESCRIPTION: Command to bring up a WireGuard connection using wg-quick on Linux. The command uses the configuration file name without the .conf extension.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nwg-quick up mypeer\n```\n\n----------------------------------------\n\nTITLE: Fly Status Command Options\nDESCRIPTION: Available options and flags for customizing the status command output including showing completed instances, specifying app name, config path, deployment status, output format and refresh settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --all             Show completed instances\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n      --deployment      Always show deployment status\n  -h, --help            help for status\n  -j, --json            JSON output\n      --rate int        Refresh Rate for --watch (default 5)\n      --watch           Refresh details\n```\n\n----------------------------------------\n\nTITLE: Command Options for Bucket Updates\nDESCRIPTION: Complete list of available options when updating Tigris object storage buckets. Options include specifying application context, modifying bucket privacy, setting custom domains, and configuring shadow bucket functionality.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                 Application name\n      --clear-custom-domain        Remove a custom domain from a bucket\n      --clear-shadow               Remove an existing shadow bucket\n  -c, --config string              Path to application configuration file\n      --custom-domain string       A custom domain name pointing at your bucket\n  -h, --help                       help for update\n  -o, --org string                 The target Fly.io organization\n      --private                    Set a public bucket to be private\n  -p, --public                     Objects in the bucket should be publicly accessible\n      --shadow-access-key string   Shadow bucket access key\n      --shadow-endpoint string     Shadow bucket endpoint\n      --shadow-name string         Shadow bucket name\n      --shadow-region string       Shadow bucket region\n      --shadow-secret-key string   Shadow bucket secret key\n      --shadow-write-through       Write objects through to the shadow bucket\n  -y, --yes                        Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Fly MySQL Update Command Options\nDESCRIPTION: Available options for the 'fly extensions mysql update' command, including application specification, resource allocation parameters, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n      --cpu int         The number of CPUs assigned to each cluster member\n  -h, --help            help for update\n      --memory int      Memory (in GB) assigned to each cluster member\n  -o, --org string      The target Fly.io organization\n      --size int        The number of members in your cluster\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Clearing Machine Leases using Fly CLI\nDESCRIPTION: This command clears leases for a specified machine. It requires a machine ID and supports various options for configuration and authentication.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_leases_clear.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine leases clear [machine-id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options that can be used with any Fly CLI command, including the suspend command. These options include API access token specification and debug/verbose output controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_suspend.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly postgres users' Command in Fly CLI\nDESCRIPTION: This snippet shows the basic usage syntax for the 'fly postgres users' command. It can be used with various subcommands and flags to manage users in Postgres clusters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_users.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfly postgres users [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage Command for Destroying Fly Volumes\nDESCRIPTION: Basic command syntax for destroying one or more Fly volumes. Accepts multiple volume IDs as arguments.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes destroy <volume id> ... [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly postgres config update' Command\nDESCRIPTION: This snippet lists all available options for the 'fly postgres config update' command, including application-specific, Postgres configuration, and utility flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_config_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                          Application name\n  -c, --config string                       Path to application configuration file\n      --detach                              Return immediately instead of monitoring deployment progress\n      --force                               Skips pg-setting value verification.\n  -h, --help                                help for update\n      --log-min-duration-statement string   Sets the minimum execution time above which all statements will be logged. (ms)\n      --log-statement string                Sets the type of statements logged. (none, ddl, mod, all)\n      --maintenance-work-mem string         Sets the maximum amount of memory used for maintenance operations like ALTER TABLE, CREATE INDEX, and VACUUM\n      --max-connections string              Sets the maximum number of concurrent connections.\n      --max-replication-slots string        Specifies the maximum number of replication slots. This should typically match max_wal_senders.\n      --max-wal-senders string              Maximum number of concurrent connections from standby servers or streaming backup clients. (0 disables replication)\n      --shared-buffers string               Sets the amount of memory the database server uses for shared memory buffers\n      --shared-preload-libraries string     Sets the shared libraries to preload. (comma separated string)\n      --wal-level string                    Sets the level of information written to the WAL. (minimal, replica, logical).\n      --work-mem string                     Sets the maximum amount of memory each Postgres query can use\n  -y, --yes                                 Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Usage of Supabase Status Command in Flyctl\nDESCRIPTION: Shows the basic usage syntax for the 'fly extensions supabase status' command. This command is used to display details about a Supabase Postgres database.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions supabase status [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for 'fly postgres events'\nDESCRIPTION: This snippet lists the command-specific options available for the 'fly postgres events' command. It includes help and JSON output options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_events.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for events\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Installing WireGuard Tools on Ubuntu Linux\nDESCRIPTION: Command to install the required WireGuard tools and openresolv on Ubuntu Linux. This is necessary for setting up WireGuard tunnels on Ubuntu 18.04 to 22.04.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nsudo apt install wireguard-tools openresolv\n```\n\n----------------------------------------\n\nTITLE: Machine Execution Token Command Options\nDESCRIPTION: Available options for configuring machine execution tokens, including application name, allowed commands, expiry duration, and output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_machine-exec.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string               Application name\n  -C, --command strings          An allowed command with arguments. This command must match exactly\n  -p, --command-prefix strings   An allowed command with arguments. This command must match the prefix of a command\n  -c, --config string            Path to application configuration file\n  -x, --expiry duration          The duration that the token will be valid (default 175200h0m0s)\n  -h, --help                     help for machine-exec\n  -j, --json                     JSON output\n  -n, --name string              Token name (default \"flyctl machine-exec token\")\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: Presents the global options available for all Fly.io CLI commands, including setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_services.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: This snippet shows the global options that can be used with any Fly CLI command, including the 'create' subcommand. These options allow setting the API access token, enabling debug mode, and specifying verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly machine exec\nDESCRIPTION: Available options for the fly machine exec command. Includes options for specifying the application, configuration file path, help documentation, JSON output format, and execution timeout in seconds.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_exec.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for exec\n  -j, --json            JSON output\n      --timeout int     Timeout in seconds\n```\n\n----------------------------------------\n\nTITLE: Listing Databases in Fly Postgres using Flyctl\nDESCRIPTION: This command lists databases in a Fly Postgres cluster. It supports options for specifying the application name and configuration file path. Global options for API access token and debug/verbose output are also available.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_db_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres db list [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n```\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Creating a WireGuard Tunnel in Fly.io\nDESCRIPTION: Command to create a new WireGuard tunnel configuration for connecting to Fly.io. This generates a configuration file with private keys that cannot be recovered later.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly wireguard create\n```\n\n----------------------------------------\n\nTITLE: Downloading SQLite Database from Fly.io\nDESCRIPTION: This command downloads your production SQLite database from Fly.io to your local machine for backup or development purposes.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_22\n\nLANGUAGE: elixir\nCODE:\n```\nfly sftp get /mnt/name/name-prod.db prod.db\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe API Key in Rails\nDESCRIPTION: Example of safely configuring the Stripe API key in a Rails application, avoiding build-time errors by checking for the presence of credentials.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nif Rails.application.credentials.stripe\n  Stripe.api_key = Rails.application.credentials.stripe[:secret_key]\nend\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL User List Command\nDESCRIPTION: The main command syntax for listing PostgreSQL users in a Fly.io database cluster.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_users_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres users list [flags]\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Token Options\nDESCRIPTION: Available command-line options for configuring the token creation, including cluster specification, expiration time, output format, and organization settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_litefs-cloud.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --cluster string    Cluster name\n  -x, --expiry duration   The duration that the token will be valid (default 175200h0m0s)\n  -h, --help              help for litefs-cloud\n  -j, --json              JSON output\n  -n, --name string       Token name (default \"LiteFS Cloud token\")\n  -o, --org string        The target Fly.io organization\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Machine API Proxy Command in Bash\nDESCRIPTION: This snippet shows the basic usage of the 'fly machine api-proxy' command. It establishes a proxy to the Machine API through a Wireguard tunnel for local connections.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_api-proxy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine api-proxy [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly Proxy Autostop/Autostart for a Machine\nDESCRIPTION: Shows how to set autostop and autostart flags for a Fly Machine. This example configures a Machine to be stopped by the Fly Proxy when inactive, but not automatically restarted.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run nginx --port 80:80/tcp:http \\\n                --port 443:80/tcp:http:tls \\\n                --autostop \\\n                --autostart=false\n```\n\n----------------------------------------\n\nTITLE: Creating a WireGuard Peer Configuration for Fly.io\nDESCRIPTION: Command using the Fly CLI to generate a WireGuard configuration for connecting an external server to a Fly.io private network. Specifies the organization, region, and name for the new peer.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/bridge-deployments-wireguard.html.md#2025-04-16_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nfly wireguard create personal yyz phantoon ~/fly0.conf\n```\n\n----------------------------------------\n\nTITLE: Opening Rails Console via SSH on Fly.io\nDESCRIPTION: Open a Rails console via SSH for apps using sqlite3 or volumes. This connects to an existing machine and may require additional memory allocation.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nfly ssh console --pty -C \"/rails/bin/rails console\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly image update Command\nDESCRIPTION: Shows the basic syntax for using the fly image update command to update an application's image to the latest version. The command performs a rolling restart that may cause brief service disruption.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly image update [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying Updates to Redis Application\nDESCRIPTION: Commands to navigate to the Redis application directory and deploy updates.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/multiple-applications.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\ncd fly/application/redis\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Accessing Django App Console on Fly.io\nDESCRIPTION: Opens an SSH console to the deployed Django application for running management commands like createsuperuser.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/existing.html.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh console\n# python manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Verifying WireGuard Connection by Listing Apps\nDESCRIPTION: Command to verify a working WireGuard connection by listing all apps in the connected organization via DNS. This is a useful troubleshooting step.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_18\n\nLANGUAGE: cmd\nCODE:\n```\ndig _apps.internal TXT +short\n```\n\n----------------------------------------\n\nTITLE: Implementing Sticky Sessions with Stimulus in JavaScript\nDESCRIPTION: This JavaScript code defines a Stimulus controller that adds a fly-force-instance-id header to all Turbo requests. It listens for turbo:before-fetch-request events and adds the header based on the instance ID stored in the body tag.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/sticky-sessions.html.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\n// Connects to data-controller=\"sticky-session\"\nexport default class extends Controller {\n  connect() {\n    document.documentElement.addEventListener(\n     'turbo:before-fetch-request',\n     this.beforeFetchRequest\n    )\n  }\n\n  disconnect() {\n    document.documentElement.removeEventListener(\n     'turbo:before-fetch-request',\n     this.beforeFetchRequest\n    )\n  }\n\n  beforeFetchRequest = event => {\n    event.detail.fetchOptions.headers['fly-force-instance-id'] =\n      this.element.dataset.instance;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking App Deployment Status and Organization\nDESCRIPTION: Command to check the status of a Fly.io application, including which organization it belongs to. Useful for troubleshooting WireGuard connection issues.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_22\n\nLANGUAGE: cmd\nCODE:\n```\nfly status\n```\n\n----------------------------------------\n\nTITLE: Command Options for 'fly ips release' in Fly.io CLI\nDESCRIPTION: This snippet lists the available options specific to the 'fly ips release' command. It includes options for specifying the application name and configuration file path.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_release.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for release\n```\n\n----------------------------------------\n\nTITLE: Using the Fly CLI to List Private IP Addresses\nDESCRIPTION: Command to list instances' private IP addresses that are accessible from within the Fly network. The command supports app specification and JSON output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_private.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ips private [flags]\n```\n\n----------------------------------------\n\nTITLE: Redis Proxy Basic Usage Command\nDESCRIPTION: Basic command syntax for initializing a Redis proxy connection\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_proxy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly redis proxy [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly volumes show' Command in Fly.io CLI\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the 'fly volumes show' command. It requires a volume ID and can accept additional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_show.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes show <volume id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly Doctor Command Options\nDESCRIPTION: Lists all available local options for the doctor command including app selection, configuration path, and output format settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_doctor.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for doctor\n  -j, --json            JSON output\n  -o, --org string      The name of the organization to use for WireGuard tests. (default \"personal\")\n  -v, --verbose         Print extra diagnostic information.\n```\n\n----------------------------------------\n\nTITLE: Synthetics Command Options\nDESCRIPTION: Available command line options for the synthetics command including help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_synthetics.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for synthetics\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands\nDESCRIPTION: Global options available for all 'fly' commands, including setting the API access token and debug/verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config_save.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for Fly Storage Dashboard\nDESCRIPTION: Command syntax for accessing the Tigris storage dashboard with optional bucket name parameter.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly storage dashboard [bucket_name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global options for fly CLI commands\nDESCRIPTION: Global options that apply to all fly CLI commands, including authentication token and logging verbosity controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_checks.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Viewing WireGuard create command help in the Fly CLI\nDESCRIPTION: Shows the help information for the 'fly wg create' command, which is used to add a WireGuard peer connection to an organization.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/connect-private-network-wireguard/index.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ fly wg create --help\nAdd a WireGuard peer connection to an organization\n\nUsage:\n  fly wireguard create [org] [region] [name] [file] [flags]\n```\n\n----------------------------------------\n\nTITLE: Building WireGuard configuration command for Fly.io\nDESCRIPTION: Step-by-step process of constructing the complete 'fly wireguard create' command with organization, region, peer name, and config file parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/connect-private-network-wireguard/index.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ fly wireguard create\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ fly wireguard create personal\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ fly wireguard create personal yul\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ fly wireguard create personal yul camellia\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ fly wireguard create personal yul camellia camellia.conf\n```\n\n----------------------------------------\n\nTITLE: Listing Upstash Kafka Clusters using Fly CLI\nDESCRIPTION: This command lists all Upstash Kafka clusters in your Fly.io organization. It can be customized with options to specify the organization or to automatically accept confirmations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions kafka list [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring App Name in fly.toml\nDESCRIPTION: A minimal fly.toml file that provides an app name for commands run from the same directory. This can be used to avoid repeatedly specifying the app name with the --app flag.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# a fly.toml just to provide an app name to commands\n# run from the same directory\n\napp = my-app-name\n```\n\n----------------------------------------\n\nTITLE: SSH Token Command Options\nDESCRIPTION: Available command-line options for customizing the SSH token creation, including application specification, configuration path, token expiry, and output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_ssh.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string        Application name\n  -c, --config string     Path to application configuration file\n  -x, --expiry duration   The duration that the token will be valid (default 175200h0m0s)\n  -h, --help              help for ssh\n  -j, --json              JSON output\n  -n, --name string       Token name (default \"flyctl ssh token\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Autostop/Autostart in fly.toml\nDESCRIPTION: TOML configuration for setting up Fly Proxy autostop/autostart features. It defines HTTP service settings, including internal port, HTTPS enforcement, and Machine management based on traffic.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/resilient-apps-multiple-machines.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[http_service]\n  internal_port = 8080\n  force_https = true\n  auto_stop_machines = \"stop\" # Fly Proxy stops Machines based on traffic\n  auto_start_machines = true # Fly Proxy starts Machines based on traffic \n  min_machines_running = 0 # No. of Machines to keep running in primary region\n  [http_service.concurrency]\n    type = \"requests\"\n    soft_limit = 200 # Used by Fly Proxy to determine Machine excess capacity\n```\n\n----------------------------------------\n\nTITLE: Using the Arcjet List Command in Fly.io CLI\nDESCRIPTION: Basic command syntax for listing Arcjet sites using the Fly.io CLI. This command displays all Arcjet sites associated with your account or specified organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions arcjet list [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Standby Machine with flyctl\nDESCRIPTION: Command-line instruction for creating a standby Machine by cloning an existing worker Machine. This ensures redundancy for processes without services.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/resilient-apps-multiple-machines.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly machine clone <worker machine id> --standby-for <worker machine id>\n```\n\n----------------------------------------\n\nTITLE: Adding Certificates Basic Usage\nDESCRIPTION: Basic command syntax for adding a certificate to a Fly.io application. Requires a hostname parameter.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_add.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly certs add <hostname> [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for 'fly volumes list'\nDESCRIPTION: These are the specific options available for the 'fly volumes list' command, including showing all volumes, specifying the application, setting a config file path, and enabling JSON output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --all             Show all volumes including those in destroyed states\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Checking Upstash Kafka Cluster Status on Fly.io\nDESCRIPTION: This command fetches and displays the status of a specific Kafka cluster. It requires the cluster name as an argument and returns the cluster's current status.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/kafka.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly ext kafka status late-waterfall-1133\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Import Command\nDESCRIPTION: The main command syntax for importing a Postgres database using the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_import.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres import <source-uri> [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling YJIT in Rails Dockerfile\nDESCRIPTION: This command regenerates the Dockerfile with the option to enable YJIT for improved runtime performance.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate dockerfile --yjit\n```\n\n----------------------------------------\n\nTITLE: Webhook Request Body Example in JSON\nDESCRIPTION: JSON structure for webhook requests, including timestamp, action, and resource details. This example shows a resource update action.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"1693513586\",\n  \"action\": \"resource.updated\",\n  \"resource\": {\n    \"plan\": \"scaler_pro\",\n    \"id\": \"5lgmabb3y30\",\n    \"status\": \"ready\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Supported TLS 1.2 Cipher Suites\nDESCRIPTION: This snippet lists the cipher suites supported by the Fly proxy for TLS version 1.2. These suites ensure compatibility with slightly older systems while maintaining strong security.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/tls.html.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n```\n\n----------------------------------------\n\nTITLE: Modifying Fly Rake Tasks for SQLite3 Deployment\nDESCRIPTION: Diff showing the modification of Rails deployment tasks to move database migrations from the release phase to the server phase, ensuring migrations run after the volume is mounted.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/sqlite3.html.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n # commands used to deploy a Rails application\n namespace :fly do\n   # BUILD step:\n   #  - changes to the filesystem made here DO get deployed\n   #  - NO access to secrets, volumes, databases\n   #  - Failures here prevent deployment\n   task :build => 'assets:precompile'\n \n   # RELEASE step:\n   #  - changes to the filesystem made here are DISCARDED\n   #  - full access to secrets, databases\n   #  - failures here prevent deployment\n-  task :release => 'db:migrate'\n+  task :release\n \n   # SERVER step:\n   #  - changes to the filesystem made here are deployed\n   #  - full access to secrets, databases\n   #  - failures here result in VM being stated, shutdown, and rolled back\n   #    to last successful deploy (if any).\n-  task :server do\n+  task :server => 'db:migrate' do\n     sh 'bin/rails server'\n   end\n end\n```\n\n----------------------------------------\n\nTITLE: Listing IP Addresses Associated with the Application\nDESCRIPTION: Command to view all IP addresses allocated to your application, confirming it only has a private Flycast IPv6 address and no public addresses.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ fly ips list\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Project\nDESCRIPTION: Creates a new Django project named 'hello_django' in the current directory using django-admin.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\ndjango-admin startproject hello_django .\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for Fly.io Applications\nDESCRIPTION: Command to set up SSH access to Fly.io applications by issuing SSH credentials to the local agent.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/iex-into-running-app.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh issue --agent\n```\n\n----------------------------------------\n\nTITLE: Options for Fly.io Organization API Token Creation\nDESCRIPTION: Available options when creating a Fly.io API token for organization management. These include setting the expiry duration, enabling JSON output, specifying a token name, and targeting a specific Fly.io organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_org.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -x, --expiry duration   The duration that the token will be valid (default 175200h0m0s)\n  -h, --help              help for org\n  -j, --json              JSON output\n  -n, --name string       Token name (default \"Org deploy token\")\n  -o, --org string        The target Fly.io organization\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile Shared Deployment\nDESCRIPTION: Command showing how to deploy a specific target from a shared multi-stage Dockerfile using custom configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/launch/monorepo.html.md#2025-04-16_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy --config fly.api.toml --build-target api\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage\nDESCRIPTION: The basic command to show the currently authenticated user in Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_whoami.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly auth whoami [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for Creating an Enveloop Project\nDESCRIPTION: These are the available options when creating an Enveloop project. They include specifying the application name, configuration file path, project name, target organization, and region. There's also an option to automatically accept all confirmations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for create\n  -n, --name string     The name of your project\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl platform regions')\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands in Bash\nDESCRIPTION: These global options can be used with the 'fly tokens attenuate' command and other Fly.io CLI commands. They include options for specifying an API access token, enabling debug output, and verbose logging.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_attenuate.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres Instance\nDESCRIPTION: Command to connect to the Postgres instance via psql to perform necessary role permission modifications.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl postgres connect --app mypostgres\n```\n\n----------------------------------------\n\nTITLE: Sentry Creation Command Options\nDESCRIPTION: Available flags for customizing the Sentry project creation process, including specifying the application name, configuration file path, and enabling automatic confirmation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_sentry_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for create\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly postgres config' Command\nDESCRIPTION: This snippet shows the available options for the 'fly postgres config' command. Currently, it only includes a help flag for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_config.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for config\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets Command Usage\nDESCRIPTION: Basic command syntax for listing secrets in a Fly.io application\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets list [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing IP Addresses\nDESCRIPTION: Command to list all IP addresses associated with a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autostart-internal-apps.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly ips list\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Endpoint URL Format\nDESCRIPTION: The base URL format for querying metrics from Fly.io's Prometheus endpoint. Requires authentication via Fly Access Token in Bearer Token format.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/metrics.html.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.fly.io/prometheus/<org-slug>/\n```\n\n----------------------------------------\n\nTITLE: Using fly apps open Command in Fly CLI\nDESCRIPTION: This command opens a browser to the current deployed application. An optional relative URI can be appended to the root URL. It includes various options for specifying the application name, configuration file path, and global options for API access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_open.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly apps open [RELATIVE_URI] [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for fly litefs-cloud import in Bash\nDESCRIPTION: These are the specific options available for the 'fly litefs-cloud import' command. They include specifying the cluster name, database name, input filename, JSON output, and target organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_import.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --cluster string    LiteFS Cloud cluster name\n  -d, --database string   LiteFS Cloud database name\n  -h, --help              help for import\n      --input string      Input filename\n  -j, --json              JSON output\n  -o, --org string        The target Fly.io organization\n```\n\n----------------------------------------\n\nTITLE: Listing IP Addresses\nDESCRIPTION: Command to list public Anycast IPs and private Flycast IPs assigned to the app.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly ips list\n```\n\nLANGUAGE: out\nCODE:\n```\nVERSION\tIP                  \tTYPE              \tREGION\tCREATED AT\nv6     \t2a09:8280:1::2d:678b\tpublic (dedicated)\tglobal\tSep 1 2023 19:47\nv6     \tfdaa:2:45b:0:1::23  \tprivate           \tglobal\tMar 16 2024 18:20\nv4     \t66.241.124.63       \tpublic (shared)   \t      \tJan 1 0001 00:00\n```\n\n----------------------------------------\n\nTITLE: Using the MySQL Status Command in Fly CLI\nDESCRIPTION: Shows the basic usage syntax for the `fly extensions mysql status` command, which displays details about a MySQL database.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions mysql status [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Restore Command Options\nDESCRIPTION: Lists the available options for the 'fly litefs-cloud restore' command, including cluster specification, database name, help flag, JSON output option, organization selection, and timestamp for point-in-time recovery.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_restore.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --cluster string     LiteFS Cloud cluster name\n  -d, --database string    LiteFS Cloud database name\n  -h, --help               help for restore\n  -j, --json               JSON output\n  -o, --org string         The target Fly.io organization\n      --timestamp string   Time to restore to (ISO 8601)\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly postgres config' Command in Fly CLI\nDESCRIPTION: This command is used to show and manage Postgres configuration. It can be used with subcommands 'show' and 'update' to display or modify the configuration respectively.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres config [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic SFTP Shell Command Usage\nDESCRIPTION: Basic command syntax for initiating an SFTP shell session\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp_shell.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh sftp shell [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Deploy Token for Autoscaler\nDESCRIPTION: These bash commands create a deploy token for the target app and set it as a secret for the autoscaler app, allowing it to scale the target app.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autoscale-machines.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ fly tokens create deploy -a my-target-app\n$ fly secrets set -o my-autoscaler --stage FAS_API_TOKEN=\"FlyV1 ...\"\n```\n\n----------------------------------------\n\nTITLE: SFTP Find Command Options\nDESCRIPTION: Available command-line options for customizing the SFTP find operation including VM addressing, application selection, and connection parameters\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp_find.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -A, --address string         Address of VM to connect to\n  -a, --app string             Application name\n  -C, --command string         command to run on SSH session\n  -c, --config string          Path to application configuration file\n      --container string       Container to connect to\n  -h, --help                   help for find\n      --machine string         Run the console in the existing machine with the specified ID\n  -o, --org string             The target Fly.io organization\n  -g, --process-group string   The target process group\n      --pty                    Allocate a pseudo-terminal (default: on when no command is provided)\n  -q, --quiet                  Don't print progress indicators for WireGuard\n  -r, --region string          The target region (see 'flyctl platform regions')\n  -s, --select                 select available instances\n  -u, --user string            Unix username to connect as (default \"root\")\n```\n\n----------------------------------------\n\nTITLE: Options for the machine suspend Command\nDESCRIPTION: Available options specific to the suspend command, including specifying an application name, configuration file path, help flag, and a wait timeout duration for the suspension process.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_suspend.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string              Application name\n  -c, --config string           Path to application configuration file\n  -h, --help                    help for suspend\n  -w, --wait-timeout duration   Duration to wait for individual Machines to be suspended.\n```\n\n----------------------------------------\n\nTITLE: Global Options for Flyctl Commands\nDESCRIPTION: These global options can be used with any Flyctl command, including 'fly secrets set'. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_set.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-t, --access-token string   Fly API Access Token\n    --debug                 Print additional logs and traces\n    --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby on macOS for Database Migration\nDESCRIPTION: This command installs Ruby on macOS using Homebrew, which is required for using the Sequel tool to migrate data from other databases to SQLite.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_12\n\nLANGUAGE: cmd\nCODE:\n```\nbrew install ruby\n```\n\n----------------------------------------\n\nTITLE: DNS Configuration Response in JavaScript\nDESCRIPTION: Example of a provisioning response that includes DNS configuration. It demonstrates how to provide a public DNS record for an internal service that resolves to a Flycast IP address.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"config\": {\n    \"LOGJAM_URL\": \"https://user:password@logjam-instance-01.logjam.io\"\n  },\n  \"fly_app_name\": \"logjam-instance-01\",\n  \"id\": \"432cb1c9-4d06-4a91-95dc-bc7aa27b896d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Deployment Regions in Fly.io\nDESCRIPTION: This command lists all available regions for application deployment on Fly.io platform, showing their codes, gateway status, and GPU availability. This helps healthcare app developers select regions that comply with data residency requirements.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly platform regions\nNAME                                          CODE  GATEWAY LAUNCH PLAN + ONLY  GPUS\nAmsterdam, Netherlands                        ams   ✓                           ✓\nAshburn, Virginia (US)                        iad   ✓                           ✓\nAtlanta, Georgia (US)                         atl\nBogotá, Colombia                              bog\nBoston, Massachusetts (US)                    bos\nBucharest, Romania                            otp\nChicago, Illinois (US)                        ord   ✓\nDallas, Texas (US)                            dfw   ✓\nDenver, Colorado (US)                         den\nEzeiza, Argentina                             eze\nFrankfurt, Germany                            fra   ✓       ✓\nGuadalajara, Mexico                           gdl\n# ... Lots more regions...\n```\n\n----------------------------------------\n\nTITLE: Command Options for litefs-cloud export\nDESCRIPTION: Lists all available options for the 'fly litefs-cloud export' command, including cluster selection, database specification, and output configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_export.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --cluster string    LiteFS Cloud cluster name\n  -d, --database string   LiteFS Cloud database name\n  -f, --force             Overwrite output file if it already exists\n  -h, --help              help for export\n  -j, --json              JSON output\n  -o, --org string        The target Fly.io organization\n      --output string     Output filename\n```\n\n----------------------------------------\n\nTITLE: Basic SSH Credential Issue Command\nDESCRIPTION: Command syntax for issuing new SSH credentials with optional organization and path parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_issue.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh issue [org] [path] [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting Observer\nDESCRIPTION: Elixir command to launch Observer locally to verify WxWidgets support and dependencies.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-observer-to-your-app.html.md#2025-04-16_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n:observer.start\n```\n\n----------------------------------------\n\nTITLE: Querying All Apps in Fly.io Organization via DNS\nDESCRIPTION: Command to list all applications in the current Fly.io organization using a DNS TXT query to _apps.internal. This provides a way to verify WireGuard connectivity.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\ndig +noall +answer _apps.internal txt\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly postgres restart' Command in Bash\nDESCRIPTION: Lists the available options for the 'fly postgres restart' command. These options allow specifying the application, configuration file, forcing a restart, and skipping health checks.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_restart.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string           Application name\n  -c, --config string        Path to application configuration file\n      --force                Force a restart even we don't have an active leader\n  -h, --help                 help for restart\n      --skip-health-checks   Runs rolling restart process without waiting for health checks.\n```\n\n----------------------------------------\n\nTITLE: Basic Organization Invite Command\nDESCRIPTION: Core command syntax for inviting a user to a Fly organization by email address. Requires organization slug and email address as parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_invite.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly orgs invite [slug] [email] [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for Fly IP List Command\nDESCRIPTION: Available options for the 'fly ips list' command, including application selection, configuration file specification, help display, and JSON output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Help Options for Disable Command\nDESCRIPTION: Available help options for the disable command\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_autoupdate_disable.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for disable\n```\n\n----------------------------------------\n\nTITLE: Connecting to Another Elixir Node\nDESCRIPTION: Command to explicitly connect to another Elixir node using its full node name, which returns true if successful.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/troubleshooting.html.md#2025-04-16_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nNode.connect(\":\"result-from-terminal-A@ipvs-address\")\n```\n\n----------------------------------------\n\nTITLE: Command Options for Fly.io Token Ticket\nDESCRIPTION: Available command-specific options for the ticket command, including help flag and location URL specification.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_ticket.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for ticket\n  -l, --location string   URL identifying third-party service\n```\n\n----------------------------------------\n\nTITLE: Basic Autoupdate Command Usage\nDESCRIPTION: The base command for managing automatic update settings in Flyctl.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_autoupdate.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly settings autoupdate [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly.toml DNS Configuration\nDESCRIPTION: Fly.io application configuration for DNS clustering\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/clustering.html.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  DNS_CLUSTER_QUERY = \"hello-elixir.internal\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Peer Dependencies\nDESCRIPTION: Command to generate a Dockerfile that handles legacy peer dependencies appropriately based on the package manager.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/dependencies.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nnpx dockerfile --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Launching Production Environment on Fly.io\nDESCRIPTION: Command to create a production environment for an existing application on Fly.io. It uses a specific configuration file for production and copies settings from the existing application configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ fly launch --name $MYAPPNAME-production --path fly.production.yml --org $MYORG-production\n```\n\n----------------------------------------\n\nTITLE: Creating a Sentry Project for Fly.io App\nDESCRIPTION: The command to create a new Sentry project associated with a Fly.io application. This will provision the necessary resources in Sentry and configure the integration with your app.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_sentry_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions sentry create [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Config Command Usage\nDESCRIPTION: The basic syntax for using fly config commands with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly config [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Launching Livebook Server\nDESCRIPTION: Command to start the Livebook server locally.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-livebook-to-your-app.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlivebook server\n```\n\n----------------------------------------\n\nTITLE: Running Fly Agent in Foreground\nDESCRIPTION: Command syntax for running the Fly agent in the foreground. This command starts the Fly agent as a foreground process rather than in the background.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_run.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly agent run [flags]\n```\n\n----------------------------------------\n\nTITLE: Launching a Fly.io App\nDESCRIPTION: Runs the fly launch command to configure and create a new application on Fly.io based on the Django project.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Options for fly config save Command\nDESCRIPTION: Available options for the 'fly config save' command, including specifying the application, configuration file path, output format, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config_save.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for save\n      --json            Output the configuration in JSON format\n      --yaml            Output the configuration in YAML format\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Proxy Command in Bash\nDESCRIPTION: This command proxies connections to a Fly Machine through a WireGuard tunnel. It allows specifying local and remote ports, and optionally a remote host.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_proxy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly proxy <local:remote> [remote_host] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using 'fly certs show' Command in Fly CLI\nDESCRIPTION: This command displays certificate information for a specified hostname. It requires the hostname as a parameter and supports various options for customizing output and specifying the application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_show.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly certs show <hostname> [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly storage list' Command in Bash\nDESCRIPTION: Shows the basic usage syntax for the 'fly storage list' command. This command is used to list Tigris object storage buckets associated with a Fly.io account.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly storage list [flags]\n```\n\n----------------------------------------\n\nTITLE: Disabling SQLite3 Production Warnings in Rails\nDESCRIPTION: Configuration to silence Rails warnings about using SQLite3 in production environment by adding a setting to production.rb.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/sqlite3.html.md#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n Rails.application.configure do\n+  config.active_record.sqlite3_production_warning=false\n```\n\n----------------------------------------\n\nTITLE: Using 'fly scale vm' Command in Flyctl CLI\nDESCRIPTION: This command allows users to change an application's VM size to one of the named VM sizes. It supports specifying memory size and various options for configuration and process group selection.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_vm.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly scale vm [size] [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for fly machine egress-ip Command\nDESCRIPTION: Available options specific to the egress-ip command for Fly Machines.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for egress-ip\n```\n\n----------------------------------------\n\nTITLE: Tigris Dashboard Command Usage\nDESCRIPTION: The main command for accessing the Tigris storage dashboard with a specified bucket name.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions storage dashboard [bucket_name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Creating Volume Snapshots\nDESCRIPTION: These are the specific options available for the 'create' subcommand of 'fly volumes snapshots'. It includes options for help and JSON output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_snapshots_create.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for create\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Accessing Fly.io SSH Console\nDESCRIPTION: Command to access the SSH console of a running Fly.io instance\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/post-deployment.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console\n```\n\nLANGUAGE: output\nCODE:\n```\nConnecting to top1.nearest.of.frosty-glitter-7650.internal... complete\n# \n```\n\n----------------------------------------\n\nTITLE: SFTP GET Command Options\nDESCRIPTION: Available command-line options for customizing the SFTP GET operation, including VM addressing, application selection, and connection parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp_get.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -A, --address string         Address of VM to connect to\n  -a, --app string             Application name\n  -C, --command string         command to run on SSH session\n  -c, --config string          Path to application configuration file\n      --container string       Container to connect to\n  -h, --help                   help for get\n      --machine string         Run the console in the existing machine with the specified ID\n  -o, --org string             The target Fly.io organization\n  -g, --process-group string   The target process group\n      --pty                    Allocate a pseudo-terminal (default: on when no command is provided)\n  -q, --quiet                  Don't print progress indicators for WireGuard\n  -r, --region string          The target region (see 'flyctl platform regions')\n  -s, --select                 select available instances\n  -u, --user string           Unix username to connect as (default \"root\")\n```\n\n----------------------------------------\n\nTITLE: Making Observer Script Executable\nDESCRIPTION: Command to make the observer script file executable on Unix-based systems.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-observer-to-your-app.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x observer\n```\n\n----------------------------------------\n\nTITLE: Basic Third-Party Token Command Structure\nDESCRIPTION: The base command structure for managing third-party tokens in Fly.io CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens 3p [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: MySQL Status Command Options\nDESCRIPTION: Lists the command-specific options available for the `fly extensions mysql status` command, including app selection, configuration path, and confirmation flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for status\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: These are global options applicable to all Fly CLI commands, including 'fly releases'. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_releases.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Volume Directory on Fly.io\nDESCRIPTION: This SFTP command lists the files in the mounted volume directory to verify the database file was uploaded correctly.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n» ls /mnt\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly secrets import' Command in Fly.io CLI\nDESCRIPTION: These are the specific options available for the 'fly secrets import' command. They allow users to specify the application name, configuration file path, deployment behavior, and whether to set secrets without deployment for machine apps.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_import.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n      --detach          Return immediately instead of monitoring deployment progress\n  -h, --help            help for import\n      --stage           Set secrets but skip deployment for machine apps\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Clusters Command Usage in Fly CLI\nDESCRIPTION: The base command syntax for listing Kubernetes clusters using the Fly CLI extensions. This command displays all Kubernetes clusters associated with your Fly.io account.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions kubernetes list [flags]\n```\n\n----------------------------------------\n\nTITLE: Viewing Application Logs on Fly.io\nDESCRIPTION: Command to view logs for a Fly.io application using a specific configuration path, useful for troubleshooting deployment issues.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ fly logs --path fly.production.yml\n```\n\n----------------------------------------\n\nTITLE: Setting EdgeDB DSN in Another App\nDESCRIPTION: Command to set the EdgeDB connection string as a secret in another Fly app, allowing it to connect to the EdgeDB instance.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl secrets set \\\n  EDGEDB_DSN=edgedb://edgedb:mysecretpassword@myedgedb.internal:8080 \\\n  --app my-other-app\n```\n\n----------------------------------------\n\nTITLE: Available Options for fly console command\nDESCRIPTION: Lists all available command line options for the 'fly console' command, including application configuration, environment settings, machine specifications, and networking options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                  Application name\n  -C, --command string              command to run on SSH session\n  -c, --config string               Path to application configuration file\n      --container string            Container to connect to\n      --dockerfile string           Path to a Dockerfile. Defaults to the Dockerfile in the working directory.\n      --entrypoint string           ENTRYPOINT replacement\n  -e, --env stringArray             Set of environment variables in the form of NAME=VALUE pairs. Can be specified multiple times.\n      --file-literal stringArray    Set of literals to write to the Machine, in the form of /path/inside/machine=VALUE pairs, where VALUE is the base64-encoded raw content. Can be specified multiple times.\n      --file-local stringArray      Set of files to write to the Machine, in the form of /path/inside/machine=<local/path> pairs. Can be specified multiple times.\n      --file-secret stringArray     Set of secrets to write to the Machine, in the form of /path/inside/machine=SECRET pairs, where SECRET is the name of the secret. The content of the secret must be base64 encoded. Can be specified multiple times.\n  -h, --help                        help for console\n      --host-dedication-id string   The dedication id of the reserved hosts for your organization (if any)\n  -i, --image string                image to use (default: current release)\n      --machine string              Run the console in the existing machine with the specified ID\n  -p, --port strings                Publish ports, format: port[:machinePort][/protocol[:handler[:handler...]]])]\n                                    \t\ti.e.: --port 80/tcp --port 443:80/tcp:http:tls --port 5432/tcp:pg_tls\n                                    \t\tTo remove a port mapping use '-' as handler, i.e.: --port 80/tcp:-\n  -r, --region string               The target region (see 'flyctl platform regions')\n  -s, --select                      Select the machine on which to execute the console from a list.\n  -u, --user string                 Unix username to connect as (default \"root\")\n      --vm-cpu-kind string          The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                 Number of CPUs\n      --vm-gpu-kind string          If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                 Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string            Memory (in megabytes) to attribute to the VM\n      --vm-size string              The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n      --volume strings              Volume to mount, in the form of <volume_id_or_name>:/path/inside/machine[:<options>]\n      --wg                          Determines whether communication with remote builders are conducted over wireguard or plain internet(https) (default true)\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for Creating Fly.io Organization API Token\nDESCRIPTION: The command syntax for creating a Fly.io API token limited to managing a single organization and its resources. This token is valid for 20 years by default, but a shorter expiry is recommended if practical.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_org.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens create org [flags]\n```\n\n----------------------------------------\n\nTITLE: Activating Poetry Shell Environment\nDESCRIPTION: Commands to activate the Poetry virtual environment shell and run Python scripts within it. This method provides an active shell session with access to all project dependencies.\nSOURCE: https://github.com/superfly/docs/blob/main/python/the-basics/initial-setup.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\npoetry shell\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Exposing Custom Port in Dockerfile\nDESCRIPTION: Dockerfile configuration line that exposes port 4999 for the Flask application. Fly.io's scanner detects this EXPOSE statement and uses it to configure the internal port in fly.toml.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/fly-launch.html.md#2025-04-16_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nEXPOSE 4999\n```\n\n----------------------------------------\n\nTITLE: Scaling Fly.io Application Across Multiple Regions\nDESCRIPTION: Command to scale a Fly.io application by adding machines in multiple regions (ord and iad) to match Fauna's distributed footprint.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/fauna.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly scale count 2 --region ord,iad\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly litefs-cloud clusters list' Command in Flyctl CLI\nDESCRIPTION: This command lists LiteFS Cloud clusters in the specified Fly.io organization. It supports various options for customizing the output and filtering results.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_clusters_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly litefs-cloud clusters list [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Services for a Fly.io Application using CLI\nDESCRIPTION: This command lists the services associated with a Fly.io application. It can be customized with various flags to specify the application, configuration file, and output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_services_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly services list [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for PostgreSQL Events List\nDESCRIPTION: The basic command syntax for listing PostgreSQL cluster events.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_events_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres events list [flags]\n```\n\n----------------------------------------\n\nTITLE: Opening Upstash Web Console for Kafka Cluster\nDESCRIPTION: This command opens the Upstash web console dashboard for a specific organization's Kafka cluster. It provides detailed information about the cluster, including usage statistics.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/kafka.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext kafka dashboard -o <org_name>\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for fly config env\nDESCRIPTION: These options allow users to specify the application name, configuration file path, and access help for the command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config_env.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for env\n```\n\n----------------------------------------\n\nTITLE: Wafris Dashboard Command Options in Fly CLI\nDESCRIPTION: These are the available options for the Wafris dashboard command. They allow specifying the application name, configuration file path, target organization, and enable automatic confirmation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris_dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for dashboard\n  -o, --org string      The target Fly.io organization\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Basic SFTP GET Command Usage in Fly.io CLI\nDESCRIPTION: Basic command syntax for retrieving files from a remote VM using Fly.io's SFTP implementation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp_get.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh sftp get <path> [flags]\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Configuration Deployment\nDESCRIPTION: Commands showing how to deploy using different environment-specific fly.toml configuration files.\nSOURCE: https://github.com/superfly/docs/blob/main/launch/monorepo.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy --config ./fly.production.toml\nfly deploy --config ./fly.staging.toml\n```\n\n----------------------------------------\n\nTITLE: Launching Redis Fly Application\nDESCRIPTION: Command to launch a new Fly application for Redis using a specific Redis image. This creates the necessary Dockerfile and fly.toml file without deploying.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/multiple-applications.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch --image flyio/redis:6.2.6 --no-deploy --name my-project-name-redis\n```\n\n----------------------------------------\n\nTITLE: Using fly extensions mysql list Command\nDESCRIPTION: Command to list all MySQL databases in your Fly.io account. This command supports organization filtering and confirmation bypassing options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions mysql list [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly orgs list Command\nDESCRIPTION: Shows the basic command syntax for listing organizations in Fly.io\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly orgs list [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Repository via CLI\nDESCRIPTION: Command to create a new GitHub repository using the GitHub CLI tool.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/github-actions.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ngh repo create <repository-name> --public\n```\n\n----------------------------------------\n\nTITLE: Options for fly machine cordon Command\nDESCRIPTION: Available options for the cordon command include specifying the application name and the path to the application configuration file.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_cordon.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for cordon\n```\n\n----------------------------------------\n\nTITLE: Running Cluster Script for Different Application\nDESCRIPTION: This command demonstrates how to run the cluster_with_remote script to connect a local Elixir application to a different application deployed on Fly.io by specifying the app name.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/clustering-from-home-to-your-app-in-fly.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCLUSTER_APP_NAME=server-app-name ./cluster_with_remote\n```\n\n----------------------------------------\n\nTITLE: Volume Update Command Options\nDESCRIPTION: Available options for the volume update command including app specification, configuration path, and snapshot settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_update.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string               Application name\n  -c, --config string            Path to application configuration file\n  -h, --help                     help for update\n  -j, --json                     JSON output\n      --scheduled-snapshots      Activate/deactivate scheduled automatic snapshots\n      --snapshot-retention int   Snapshot retention in days\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Action Workflow File\nDESCRIPTION: Command to create a new YAML file for the GitHub Action workflow.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/review-apps-guide.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ntouch .github/workflows/fly-review.yml\n```\n\n----------------------------------------\n\nTITLE: Usage of fly machine egress-ip release command in Fly.io CLI\nDESCRIPTION: Shows the syntax for using the 'fly machine egress-ip release' command to release an egress IP address for a specific machine. It requires a machine ID and supports additional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip_release.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine egress-ip release <machine-id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for fly mysql status Command in Bash\nDESCRIPTION: Lists the available options for the 'fly mysql status' command, including application name, configuration file path, help, and confirmation flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for status\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Starting Flyctl MCP Server in Bash\nDESCRIPTION: Command usage for starting a flyctl MCP server. This experimental command initiates a Model Context Protocol server with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp_server.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mcp server [flags]\n```\n\n----------------------------------------\n\nTITLE: Checking EdgeDB App Status\nDESCRIPTION: Command to check the deployment status of the EdgeDB app.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl status\n```\n\n----------------------------------------\n\nTITLE: Querying Enveloop Project Status using Fly CLI\nDESCRIPTION: Command syntax for retrieving status details of an Enveloop project with optional name parameter and flags. Supports configuration via app name, config file path, and various output control options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions enveloop status [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Network Error from Improperly Configured Elixir Node on Fly.io\nDESCRIPTION: Error message that appears when an Elixir application is not properly configured for IPv6 networking on Fly.io. This typically occurs when the required environment variables are missing from the Dockerfile.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/clustering.html.md#2025-04-16_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nCould not contact remote node my-app@fdaa:0:31d4:a5b:9d36:7c1e:f284:2, reason: :nodedown. Aborting...\n```\n\n----------------------------------------\n\nTITLE: Fly Proxy Command Options in Bash\nDESCRIPTION: These are the available options for the 'fly proxy' command, including app selection, binding address, configuration file path, and more.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_proxy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string         Application name\n  -b, --bind-addr string   Local address to bind to (default \"127.0.0.1\")\n  -c, --config string      Path to application configuration file\n  -h, --help               help for proxy\n  -o, --org string         The target Fly.io organization\n  -q, --quiet              Don't print progress indicators for WireGuard\n  -s, --select             Prompt to select from available Machines from the current application\n      --watch-stdin        Watches stdin and terminates once it gets closed\n```\n\n----------------------------------------\n\nTITLE: Output from Vector Index Creation\nDESCRIPTION: Example output from creating a Vector index showing the interactive prompts and resulting endpoint and access tokens. The output provides the necessary credentials needed to connect to the newly created index.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/vector.html.md#2025-04-16_snippet_1\n\nLANGUAGE: output\nCODE:\n```\n? Select Organization: myorg (myorg)\n? Select a similarity function: Euclidean Distance (Natural Language Processing, Recommendation Systems)\n? Select an embedding model: WhereIsAI/UAE-Large-V1\n? Choose a name, use the default, or leave blank to generate one: my-vector-index\n\n\n? Choose the primary region (can't be changed later) Ashburn, Virginia (US) (iad)\nYour Upstash Vector index (my-vector-index) in iad is ready.\n\nSet the following secrets on your target app.\nVECTOR_ENDPOINT: my-vector-index-fly-vector.upstash.io\nVECTOR_READONLY_TOKEN: token\nVECTOR_TOKEN: token\n```\n\n----------------------------------------\n\nTITLE: Options for fly platform status Command in Bash\nDESCRIPTION: These are the specific options available for the 'fly platform status' command. They allow for requesting help or specifying JSON output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for status\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Fly Managed Postgres Command\nDESCRIPTION: Shows the basic syntax for using the fly managed-postgres command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly managed-postgres [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Supabase Dashboard Command in Fly CLI\nDESCRIPTION: Main command syntax for accessing the Supabase database dashboard, allowing specification of database name and additional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase_dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions supabase dashboard [database_name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Fly.io organizations with CLI\nDESCRIPTION: Demonstrates how to list all organizations associated with your Fly.io account using the 'fly orgs list' command, showing organization names, slugs, and types.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/connect-private-network-wireguard/index.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ fly orgs list\nName                 Slug                 Type\n----                 ----                 ----\nXe Iaso              personal             PERSONAL\ndevrel-demos         devrel-demos         SHARED\n```\n\n----------------------------------------\n\nTITLE: Checking available Fly.io regions\nDESCRIPTION: Shows how to list all available Fly.io platform regions using the 'fly platform regions' command to help select the closest region.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/connect-private-network-wireguard/index.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ fly platform regions\n```\n\n----------------------------------------\n\nTITLE: Configuring services in fly.toml for Log Shipper\nDESCRIPTION: TOML configuration that should replace the default [[services]] section in the fly.toml file for the Log Shipper app. It defines an HTTP service with no health checks and an internal port of 8686.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/exporting-logs.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[services]]\n  http_checks = []\n  internal_port = 8686\n```\n\n----------------------------------------\n\nTITLE: Listing Services\nDESCRIPTION: Command to list configured services and their protocols and ports.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly services list\n```\n\nLANGUAGE: out\nCODE:\n```\nServices\nPROTOCOL        PORTS                   FORCE HTTPS \nTCP             80 => 8080 [HTTP]       True       \n                443 => 8080 [TLS,HTTP]  False \n```\n\n----------------------------------------\n\nTITLE: Token Introspection Request in HTTP\nDESCRIPTION: HTTP GET request to the token introspection endpoint, including the Bearer token for authorization.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.fly.io/oauth/token/info\nAuthorization: Bearer fo1__034hk03k4mhjea0l4224hk\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly console command\nDESCRIPTION: Shows the basic syntax for using the 'fly console' command in Fly.io CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly console [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly postgres events' Command in Fly CLI\nDESCRIPTION: This snippet shows the basic usage syntax for the 'fly postgres events' command. It allows for additional commands and flags to be specified.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres events [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly.io Apps List DNS Query Result\nDESCRIPTION: Output showing the list of all applications in the connected Fly.io organization from a DNS TXT query. The result includes the main app and its instances.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_12\n\nLANGUAGE: output\nCODE:\n```\n_apps.internal.\t\t5\tIN\tTXT\t\"my-app-name,my-app-name-0,my-app-name-1\"\n```\n\n----------------------------------------\n\nTITLE: Related Commands for fly machine\nDESCRIPTION: Shows that the cordon command is part of the fly machine command group, with a link to the main machine command documentation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_cordon.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly machine](/docs/flyctl/machine/)\\t - Manage Fly Machines.\n```\n\n----------------------------------------\n\nTITLE: Listing Enveloop Projects\nDESCRIPTION: Commands to list and view status of Enveloop projects\nSOURCE: https://github.com/superfly/docs/blob/main/reference/enveloop.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext enveloop list\n```\n\nLANGUAGE: output\nCODE:\n```\nNAME ORG PRIMARY REGION\nquiet-butterfly-6638 moon\n```\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext enveloop status quiet-butterfly-6638\n```\n\nLANGUAGE: output\nCODE:\n```\nStatus\n  Name   = quiet-butterfly-6638\n  Status = created\n  Region = \n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Livebook Desktop\nDESCRIPTION: Configuration for setting environment variables used by Livebook Desktop on macOS or Windows.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-livebook-to-your-app.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport LIVEBOOK_DISTRIBUTION=name\nexport ERL_AFLAGS=\"-proto_dist inet6_tcp\"\n```\n\n----------------------------------------\n\nTITLE: Basic Consul Detach Command Usage\nDESCRIPTION: Basic command syntax for detaching a Consul cluster from a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_consul_detach.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly consul detach [flags]\n```\n\n----------------------------------------\n\nTITLE: Looking Up Flycast Address with DNS\nDESCRIPTION: Command to perform a DNS lookup on the application's Flycast address to confirm it resolves to the private IPv6 address previously allocated.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# nslookup xe-ollama.flycast\n```\n\n----------------------------------------\n\nTITLE: Basic Volume Fork Command Usage\nDESCRIPTION: Basic command syntax for forking a Fly volume with a volume ID parameter and optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_fork.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes fork <volume id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Ping Command Options\nDESCRIPTION: These are the available options for the 'fly ping' command. They allow you to specify the application, configuration file, number of probes, interval between probes, organization, and size of the probe.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ping.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string        Application name\n  -c, --config string     Path to application configuration file\n  -n, --count int         Number of probes to send (0=indefinite)\n  -h, --help              help for ping\n  -i, --interval string   Interval between ping probes (default \"1s\")\n  -o, --org string        The target Fly.io organization\n  -s, --size int          Size of probe to send (not including headers) (default 12)\n```\n\n----------------------------------------\n\nTITLE: Command Options for Tigris Storage Bucket Creation\nDESCRIPTION: Available options when creating a Tigris storage bucket, including application targeting, bucket naming, visibility settings, and shadow bucket configuration options for advanced use cases.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                 Application name\n  -c, --config string              Path to application configuration file\n  -h, --help                       help for create\n  -n, --name string                The name of your bucket\n  -o, --org string                 The target Fly.io organization\n  -p, --public                     Objects in the bucket should be publicly accessible\n      --shadow-access-key string   Shadow bucket access key\n      --shadow-endpoint string     Shadow bucket endpoint\n      --shadow-name string         Shadow bucket name\n      --shadow-region string       Shadow bucket region\n      --shadow-secret-key string   Shadow bucket secret key\n      --shadow-write-through       Write objects through to the shadow bucket\n  -y, --yes                        Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Options for fly incidents list Command\nDESCRIPTION: Lists the available options for the fly incidents list command including app filtering, configuration path specification, help display, JSON output format, and organization targeting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n  -j, --json            JSON output\n  -o, --org string      The target Fly.io organization\n```\n\n----------------------------------------\n\nTITLE: Command Options for Volume Snapshot Listing\nDESCRIPTION: Available local options for the list command, including help and JSON output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_snapshots_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Global Fly CLI Options\nDESCRIPTION: Global options available for all Fly CLI commands, including authentication, debugging, and verbosity controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for Egress IP Allocation\nDESCRIPTION: Available options for customizing the egress IP allocation command, including application name specification, configuration file path, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip_allocate.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for allocate\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Adding SSL Certificate for Custom Domain on Fly.io\nDESCRIPTION: Command to add an SSL certificate for a custom domain to a Fly.io application using a specific configuration path. This is necessary to secure the communication with your application.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ fly certs add myappname.com --path fly.production.yml\n```\n\n----------------------------------------\n\nTITLE: Importing Database from Heroku to Fly.io\nDESCRIPTION: Command to import an existing Heroku database to the newly created Fly.io Postgres instance using the Heroku database URL.\nSOURCE: https://github.com/superfly/docs/blob/main/postgres/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly pg import $HEROKU_DATABASE_URL --app myapp-db\n```\n\nLANGUAGE: output\nCODE:\n```\n? Choose a region to deploy the migration machine: San Jose, California (US) (sjc)\n? Select VM size: shared-cpu-1x - 256\nWaiting for machine 6e82946c0dd0e8 to start...\nConnecting to fdaa:0:2e26:a7b:9ad9:3148:a144:2... complete\n[info] Running pre-checks...\n[info] Source Postgres version: 14.7 (Ubuntu 14.7-1.pgdg20.04+1)\n[info] Target Postgres version: 15.2 (Debian 15.2-1.pgdg110+1)\n[info] Pre-checks completed without issue\n[info] Starting import process... (This could take a while)\n[info] Import complete!\nWaiting for machine 6e82946c0dd0e8 to stop...\n6e82946c0dd0e8 has been destroyed\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Available options for customizing the postgres users list command output and behavior.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_users_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Updating Application Module to Run Migrations on Start\nDESCRIPTION: This code modification ensures database migrations run on application startup, which is necessary because volumes may not be ready during the release phase.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  @impl true\n  def start(_type, _args) do\n+   Name.Release.migrate()\n    children = [\n```\n\n----------------------------------------\n\nTITLE: Volume Fork Command Options\nDESCRIPTION: Available command line options for configuring volume forking including application settings, hardware specifications, and resource allocation parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_fork.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                  Application name\n  -c, --config string               Path to application configuration file\n  -h, --help                        help for fork\n      --host-dedication-id string   The dedication id of the reserved hosts for your organization (if any)\n  -j, --json                        JSON output\n  -n, --name string                 The name of the new volume\n  -r, --region string               The target region. By default, the new volume will be created in the source volume's region.\n      --require-unique-zone         Place the volume in a separate hardware zone from existing volumes. This is the default. (default true)\n      --unique-zone-app-wide        Checks all volumes in app for unique zone handling, instead of only volumes with the same name (which is the default)\n      --vm-cpu-kind string          The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                 Number of CPUs\n      --vm-gpu-kind string          If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                 Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string            Memory (in megabytes) to attribute to the VM\n      --vm-size string              The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n```\n\n----------------------------------------\n\nTITLE: WireGuard Global Command Options\nDESCRIPTION: Global configuration options available for all WireGuard token commands, including API access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the fly extensions kafka status Command\nDESCRIPTION: The command syntax for checking the status of an Upstash Kafka cluster. It accepts a cluster name parameter and various flags to customize the command execution.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions kafka status [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating WireGuard Token Command\nDESCRIPTION: Basic command syntax for creating a new WireGuard token. Requires organization name and token name parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard token create [org] [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly machine leases view\nDESCRIPTION: Optional flags that can be used with the fly machine leases view command including app selection, configuration path, help, and JSON output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_leases_view.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for view\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Password Reset Command\nDESCRIPTION: Main command syntax for resetting an Upstash Redis database password\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_reset.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly redis reset <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Secrets List Command Options\nDESCRIPTION: Available command-line options specific to the secrets list command, including application selection and output format configuration\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for SQLite3 Files\nDESCRIPTION: These additions to .gitignore ensure SQLite database files are not tracked in version control.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_6\n\nLANGUAGE: .gitignore\nCODE:\n```\n# Database files\n*.db\n*.db-*\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: Global options that apply to all Fly.io CLI commands, including authentication and logging controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application with Multiple Processes\nDESCRIPTION: Command to deploy the application with the configured app and worker processes.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Deleting a Vector Index\nDESCRIPTION: Command to delete a Vector index. This operation is permanent and cannot be undone, so caution is advised.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/vector.html.md#2025-04-16_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nfly ext vector destroy my-index\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Database using Fly CLI\nDESCRIPTION: Basic command syntax for connecting to a Redis database using the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_connect.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly redis connect [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the Arcjet Dashboard Command in Fly CLI\nDESCRIPTION: This command opens the Arcjet dashboard for a specified site. It accepts various options for configuration and organization targeting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions arcjet dashboard [site_name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Copying Node to Final Docker Image\nDESCRIPTION: Dockerfile instructions for copying Node binaries and modules from the build image to the final fly-laravel image for Inertia SSR support.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-inertia-ssr.html.md#2025-04-16_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM base\n\nCOPY --from=node_modules_go_brrr /usr/local/bin/node /usr/local/bin/node\nCOPY --from=node_modules_go_brrr /app/node_modules /var/www/html/node_modules\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly postgres restart' Command in Bash\nDESCRIPTION: Shows the basic usage syntax for the 'fly postgres restart' command in the Fly CLI. This command is used to restart each member of a Postgres cluster one by one, aiming for minimal downtime.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_restart.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres restart [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly MCP Wrap Command Options in Bash\nDESCRIPTION: Lists the available options for the 'fly mcp wrap' command, including help, MCP program path, authentication credentials, and port configuration. The MCP program path is required, while other options have default values or can use environment variables.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp_wrap.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for wrap\n  -m, --mcp string        [required] Path to the stdio MCP program to be wrapped.\n      --password string   [optional] Password to authenticate with. Defaults to the value of the FLY_MCP_PASSWORD environment variable.\n  -p, --port int          [optional] Port to listen on.  Defaults to 8080. (default 8080)\n      --user string       [optional] User to authenticate with. Defaults to the value of the FLY_MCP_USER environment variable.\n```\n\n----------------------------------------\n\nTITLE: Executing Storage Bucket Destruction Command\nDESCRIPTION: Basic command syntax for destroying a Tigris storage bucket using the Fly.io CLI\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly extensions storage destroy [storage-bucket-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: MySQL List Command Options\nDESCRIPTION: Available command-specific options including help flag, organization selection, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly postgres detach' Command in Fly.io CLI\nDESCRIPTION: These are the specific options available for the 'fly postgres detach' command. They include specifying the application name, path to configuration file, and accessing help.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_detach.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for detach\n```\n\n----------------------------------------\n\nTITLE: Options for Fly Services List Command\nDESCRIPTION: These are the specific options available for the 'fly services list' command. They allow specifying the application name, configuration file path, and accessing help information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_services_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n```\n\n----------------------------------------\n\nTITLE: Command-specific options for fly config validate\nDESCRIPTION: Available command-specific flags for the fly config validate command, including options to specify the application name and configuration file path.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config_validate.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for validate\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for Clearing Machine Leases\nDESCRIPTION: These options allow specifying the application name, configuration file path, and accessing help for the 'clear' command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_leases_clear.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for clear\n```\n\n----------------------------------------\n\nTITLE: Third-Party Token Help Options\nDESCRIPTION: Available help options for the third-party token commands.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for 3p\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options apply to all Fly CLI commands, including 'fly orgs show'. They allow setting an API access token, enabling debug output, and verbose logging.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_show.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Launching Ephemeral Machine for Deployment\nDESCRIPTION: Command to launch an ephemeral machine using Fly CLI for automated secret deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/build-secrets.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflyctl console --dockerfile Dockerfile.builder -C \"/srv/deploy.sh\" --env=FLY_API_TOKEN=$(fly auth token)\n```\n\n----------------------------------------\n\nTITLE: Using fly config save Command\nDESCRIPTION: The basic usage of the 'fly config save' command with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config_save.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly config save [flags]\n```\n\n----------------------------------------\n\nTITLE: Persisting TLS Certificates\nDESCRIPTION: Command to extract and store the auto-generated TLS certificates as Fly secrets to ensure they persist across app restarts.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_12\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ssh console \\\n  -C \"edgedb-show-secrets.sh --format=toml EDGEDB_SERVER_TLS_KEY EDGEDB_SERVER_TLS_CERT\" \\\n  | tr -d '\\r' | flyctl secrets import\n```\n\n----------------------------------------\n\nTITLE: Command Options for Supabase Dashboard Access\nDESCRIPTION: Available command-specific options including application name, configuration path, help, organization selection, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase_dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for dashboard\n  -o, --org string      The target Fly.io organization\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Using the fly ips allocate-v6 command\nDESCRIPTION: Basic syntax for allocating an IPv6 address to a Fly.io application. This command allows you to assign a new IPv6 address to your application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_allocate-v6.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ips allocate-v6 [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying Updates to Redis Fly Application\nDESCRIPTION: Commands to navigate to the Redis application directory and deploy updates in the future.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/multiple-applications.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\ncd fly/application/redis\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Fly Launch Command Output\nDESCRIPTION: Shows the output from the fly launch command which detects the Django app and provides configuration options.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_14\n\nLANGUAGE: output\nCODE:\n```\nScanning source code\nDetected a Django app\nCreating app in /flyio/hello-django\nWe're about to launch your Django app on Fly.io. Here's what you're getting:\n\nOrganization: Joe Doe                (fly launch defaults to the personal org)\nName:         hello-django           (derived from your directory name)\nRegion:       Amsterdam, Netherlands (this is the fastest region for you)\nApp Machines: shared-cpu-1x, 1GB RAM (most apps need about 1GB of RAM)\nPostgres:     <none>                 (not requested)\nRedis:        <none>                 (not requested)\n\n? Do you want to tweak these settings before proceeding? Yes\nOpening https://fly.io/cli/launch/mo1ootho9ualooghoch3iih6cha2shah ...\n\nWaiting for launch data... Done\nCreated app 'hello-django' in organization 'personal'\nAdmin URL: https://fly.io/apps/hello-django\nHostname: hello-django.fly.dev\nSet secrets on hello-django: SECRET_KEY\nWrote config file fly.toml\n\n[INFO] Python 3.10.12 was detected. 'python:3.10-slim-bullseye' image will be set in the Dockerfile.\n\nValidating /flyio/hello-django/fly.toml\nPlatform: machines\n✓ Configuration is valid\nYour app is ready! Deploy with `flyctl deploy`\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly Commands in Bash\nDESCRIPTION: These global options can be used with the 'fly auth login' command and other Fly commands. They provide ways to specify an API access token and control the verbosity of command output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_login.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: Global options that apply to all fly commands, including consul commands. These control authentication, debugging, and verbosity levels.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_consul.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Creating Machine Execution Token Command\nDESCRIPTION: Base command for creating a machine execution token in Fly.io with optional command restrictions.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_machine-exec.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens create machine-exec [command...] [flags]\n```\n\n----------------------------------------\n\nTITLE: VM Sizes Command Options\nDESCRIPTION: Available command-specific options including help and JSON output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform_vm-sizes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for vm-sizes\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Modifying Rails Routes Configuration\nDESCRIPTION: Diff showing the modification of config/routes.rb to set up the root route to display Rails welcome page\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/index.html.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n Rails.application.routes.draw do\n  # Define your application routes per the DSL in\n  # https://guides.rubyonrails.org/routing.html\n\n  # Reveal health status on /up that returns 200 if the app boots\n  # with no exceptions, otherwise 500.\n  # Can be used by load balancers and uptime monitors to verify\n  # that the app is live.\n  get \"up\" => \"rails/health#show\", as: :rails_health_check\n\n   # Defines the root path route (\"/\")\n-  # root \"articles#index\"\n+  root \"rails/welcome#index\"\n end\n```\n\n----------------------------------------\n\nTITLE: Application and Machine Log Output\nDESCRIPTION: Complete log output showing the job processing workflow, including machine creation, execution, inter-machine communication, and cleanup. This demonstrates the entire machine lifecycle from creation to termination.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n2022-09-20T04:07:59Z app[9080514c12d787] iad [info]I, [2022-09-20T04:07:59.525790 #514]  INFO -- : [b2f7eb1f-e552-445d-84ac-72d4a63fa4d4] Started GET \"/job/start\" for 168.220.92.2 at 2022-09-20 04:07:59 +0000\n2022-09-20T04:07:59Z app[9080514c12d787] iad [info]I, [2022-09-20T04:07:59.529213 #514]  INFO -- : [b2f7eb1f-e552-445d-84ac-72d4a63fa4d4] Processing by JobController#start as HTML\n2022-09-20T04:07:59Z app[9080514c12d787] iad [info]I, [2022-09-20T04:07:59.541820 #514]  INFO -- : [b2f7eb1f-e552-445d-84ac-72d4a63fa4d4] [ActiveJob] Enqueued MachineJob (Job ID: 7984003d-bb82-4815-acff-81d1ba91539f) to Async(default) with arguments: \"http://weathered-sunset-3812.fly.dev/job/complete\"\n2022-09-20T04:07:59Z app[9080514c12d787] iad [info]I, [2022-09-20T04:07:59.544837 #514]  INFO -- : [b2f7eb1f-e552-445d-84ac-72d4a63fa4d4]   Rendered text template (Duration: 0.0ms | Allocations: 8)\n2022-09-20T04:07:59Z app[9080514c12d787] iad [info]I, [2022-09-20T04:07:59.545257 #514]  INFO -- : [b2f7eb1f-e552-445d-84ac-72d4a63fa4d4] Completed 200 OK in 16ms (Views: 2.9ms | Allocations: 1056)\n2022-09-20T04:07:59Z app[9080514c12d787] iad [info]I, [2022-09-20T04:07:59.546683 #514]  INFO -- : [ActiveJob] [MachineJob] [7984003d-bb82-4815-acff-81d1ba91539f] Performing MachineJob (Job ID: 7984003d-bb82-4815-acff-81d1ba91539f) from Async(default) enqueued at 2022-09-20T04:07:59Z with arguments: \"http://weathered-sunset-3812.fly.dev/job/complete\"\n2022-09-20T04:07:59Z app[9080514c12d787] iad [info]E, [2022-09-20T04:07:59.546905 #514] ERROR -- : [ActiveJob] [MachineJob] [7984003d-bb82-4815-acff-81d1ba91539f] danger\n2022-09-20T04:07:59Z runner[5683009c17548e] iad [info]Reserved resources for machine '5683009c17548e'\n2022-09-20T04:07:59Z runner[5683009c17548e] iad [info]Pulling container image\n2022-09-20T04:08:00Z app[9080514c12d787] iad [info]I, [2022-09-20T04:08:00.071564 #514]  INFO -- : [ActiveJob] [MachineJob] [7984003d-bb82-4815-acff-81d1ba91539f] Started machine: 5683009c17548e\n2022-09-20T04:08:00Z runner[5683009c17548e] iad [info]Unpacking image\n2022-09-20T04:08:02Z runner[5683009c17548e] iad [info]Configuring firecracker\n2022-09-20T04:08:03Z app[5683009c17548e] iad [info]  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n  0     0    0     0    0     0  load  Upload   Total   Spent    Left  Speed\n2022-09-20T04:08:04Z app[9080514c12d787] iad [info]I, [2022-09-20T04:08:04.813284 #514]  INFO -- : [c6131d3b-bcba-4ab7-88cb-3e07800ec6b2] Started GET \"/job/complete\" for 2a09:8280:1::7635 at 2022-09-20 04:08:04 +0000\n2022-09-20T04:08:04Z app[9080514c12d787] iad [info]I, [2022-09-20T04:08:04.814303 #514]  INFO -- : [c6131d3b-bcba-4ab7-88cb-3e07800ec6b2] Processing by JobController#complete as */*\n2022-09-20T04:08:04Z app[9080514c12d787] iad [info]I, [2022-09-20T04:08:04.826253 #514]  INFO -- : [c6131d3b-bcba-4ab7-88cb-3e07800ec6b2]   Rendered text template (Duration: 0.0ms | Allocations: 2)\n2022-09-20T04:08:04Z app[9080514c12d787] iad [info]I, [2022-09-20T04:08:04.827434 #514]  INFO -- : [c6131d3b-bcba-4ab7-88cb-3e07800ec6b2] Completed 200 OK in 13ms (Views: 2.1ms | Allocations: 167)\n100     3    0     3    0     0      1      0 --:--:--  0:00:02 --:--:--     2\n2022-09-20T04:08:04Z app[5683009c17548e] iad [info]OK\n2022-09-20T04:08:07Z runner[5683009c17548e] iad [info]machine exited with exit code 0, not restarting\n2022-09-20T04:08:10Z app[9080514c12d787] iad [info]I, [2022-09-20T04:08:10.238155 #514]  INFO -- : [ActiveJob] [MachineJob] [7984003d-bb82-4815-acff-81d1ba91539f] Deleted machine: 5683009c17548e\n2022-09-20T04:08:10Z app[9080514c12d787] iad [info]I, [2022-09-20T04:08:10.238536 #514]  INFO -- : [ActiveJob] [MachineJob] [7984003d-bb82-4815-acff-81d1ba91539f] Performed MachineJob (Job ID: 7984003d-bb82-4815-acff-81d1ba91539f) from Async(default) in 10691.24ms\n```\n\n----------------------------------------\n\nTITLE: Scaling Fly.io Application Memory\nDESCRIPTION: This command scales the application's real memory allocation to 1GB on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly scale memory 1024\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly image update\nDESCRIPTION: Lists the available options for the fly image update command, including specifying the application name, configuration file path, targeting a specific image, and skipping health checks.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string           Application name\n  -c, --config string        Path to application configuration file\n  -h, --help                 help for update\n      --image string         Target a specific image\n      --skip-health-checks   Skip waiting for health checks inbetween VM updates.\n  -y, --yes                 Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Fly.toml Environment Configuration\nDESCRIPTION: TOML configuration to specify custom runtime class for Symfony application.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-symfony.html.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n  APP_RUNTIME = '\\App\\FlySymfonyRuntime'\n```\n\n----------------------------------------\n\nTITLE: IP Address List Output Example\nDESCRIPTION: Example output showing both public and private IP addresses assigned to a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autostart-internal-apps.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nVERSION\tIP                  \tTYPE              \tREGION\tCREATED AT\nv6     \t2a09:8280:1::2d:1111\tpublic (dedicated)\tglobal\tSep 1 2023 19:47\nv6     \tfdaa:2:45b:0:1::11  \tprivate           \tglobal\tMar 16 2024 18:20\nv4     \t66.241.124.11       \tpublic (shared)   \t      \tJan 1 0001 00:00\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly extensions storage list Command\nDESCRIPTION: The basic command syntax for listing Tigris object storage buckets in Fly.io. This command displays all buckets available in the current or specified organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions storage list [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Config Show Command\nDESCRIPTION: The basic command syntax for displaying Postgres configuration settings in Fly.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_config_show.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly postgres config show [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for 'fly mysql destroy' in Bash\nDESCRIPTION: These options allow specifying the application name, configuration file path, displaying help, and automatically accepting confirmations for the 'fly mysql destroy' command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for destroy\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for MPG Proxy\nDESCRIPTION: The basic command syntax for running the Postgres proxy command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres_proxy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly managed-postgres proxy [flags]\n```\n\n----------------------------------------\n\nTITLE: Enveloop Destroy Command Options\nDESCRIPTION: Available command-specific options for the destroy operation including application name, config path, help, and confirmation flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for destroy\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Available options specific to the list command, including help and JSON output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly ssh sftp Command in Bash\nDESCRIPTION: This snippet lists the global options available for the 'fly ssh sftp' command. These options include setting an access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Setting Base64-encoded secrets with flyctl\nDESCRIPTION: Example of setting a Base64-encoded secret named MY_BASE64_SECRET using the fly secrets set command with the --stage flag to prevent automatic deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_15\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets set \\\n  MY_BASE64_SECRET=SGVsbG8hIEknbSBGcmFua2llIHRoZSBiYWxsb29uIQo= \\\n  --stage\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly scale memory' Command in Fly CLI\nDESCRIPTION: This snippet lists the available options for the 'fly scale memory' command, including specifying the application name, configuration file path, and process group.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_memory.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string             Application name\n  -c, --config string          Path to application configuration file\n  -h, --help                   help for memory\n  -g, --process-group string   The process group to apply the VM size to\n```\n\n----------------------------------------\n\nTITLE: Opening Deployed Rails App in Browser\nDESCRIPTION: Open your deployed Rails application in a web browser using the 'fly apps open' command.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Updating Fly.toml Configuration\nDESCRIPTION: Changes to fly.toml to use foreman for process management.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/anycable.html.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n [env]\n   PORT = \"8080\"\n-  SERVER_COMMAND = \"bin/rails fly:server\"\n+  SERVER_COMMAND = \"foreman start -f Procfile.fly\"\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile to Use Overmind Procfile Manager\nDESCRIPTION: Modified Dockerfile that installs Overmind (a Procfile manager) and sets up for process management. It adds a Procfile and configures Overmind as the command to run.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/multiple-processes.html.md#2025-04-16_snippet_9\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM golang\n\nRUN apt-get update && \\\n    apt-get install -y \\\n        bash \\\n        tmux \\\n        curl\n# ...\n\nRUN GO111MODULE=on go get -u github.com/DarthSim/overmind/v2\nADD Procfile /app/\nCMD [\"overmind\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Machine with multiple key-value secrets in a file\nDESCRIPTION: Command to run a new Ubuntu Machine with the MY_SECRETS secret available as a file, which contains multiple key-value pairs encoded in Base64.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_19\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine run ubuntu sleep inf --file-secret /secret-file=MY_SECRETS\n```\n\n----------------------------------------\n\nTITLE: Command Options for Upstash Kafka Dashboard\nDESCRIPTION: Available command options for the 'fly extensions kafka dashboard' command. These options allow you to specify the application, configuration file, organization, and confirmation preferences.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for dashboard\n  -o, --org string      The target Fly.io organization\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Using the LiteFS Cloud Restore Command\nDESCRIPTION: Shows the basic syntax for using the 'fly litefs-cloud restore' command to restore a database to a previous state.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_restore.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly litefs-cloud restore [flags]\n```\n\n----------------------------------------\n\nTITLE: Using fly mysql status Command in Bash\nDESCRIPTION: Shows how to use the 'fly mysql status' command to display details about a MySQL database. The command accepts an optional database name and various flags for configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mysql status [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Pie Chart Visualization\nDESCRIPTION: Code to transform data and create a pie chart using VegaLite\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/interesting-things-with-livebook.html.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n# Convert the raw data into a Pie Chart friendly format\ndata =\n  Enum.map(personality_counts, fn {type, count} ->\n    %{\"personality\" => Atom.to_string(type), \"value\" => count}\n  end)\n\nVl.new()\n|> Vl.data_from_values(data)\n|> Vl.mark(:arc)\n|> Vl.encode_field(:theta, \"value\", type: :quantitative)\n|> Vl.encode_field(:color, \"personality\", type: :nominal)\n|> Vl.config(view: [stroke: nil])\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Supabase Status in Flyctl\nDESCRIPTION: Lists the specific options available for the 'fly extensions supabase status' command. These options allow specifying the application, configuration file, and enabling auto-confirmation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for status\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI commands\nDESCRIPTION: Presents global options applicable to all Fly.io CLI commands. These options allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip_release.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for Fly Storage Status\nDESCRIPTION: Lists the available command-specific options including application name specification, configuration file path, help option, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for status\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly certs show' Command\nDESCRIPTION: These are the specific options available for the 'fly certs show' command. They allow specifying the application, configuration file path, and output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_show.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for show\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global configuration options available for all secrets-related commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Available options specific to the certs list command, including app selection, config file path, help, and JSON output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Auth Command Usage\nDESCRIPTION: Base command syntax for fly authentication commands with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly auth [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for fly certs remove Command in Bash\nDESCRIPTION: Available options for the 'fly certs remove' command, including specifying application name, configuration file path, help, and confirmation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_remove.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for remove\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Listing Deployed Fly Apps\nDESCRIPTION: Command to list all deployed applications on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-livebook-to-your-app.html.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly apps list\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Proxy Client in Bash\nDESCRIPTION: This command starts an MCP proxy client using the fly command-line interface. It supports various options for authentication and server configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp_proxy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mcp proxy [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global flags available across all Fly CLI commands including API token, debug mode, and verbose output options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly mcp' Command in Bash\nDESCRIPTION: Demonstrates the basic usage syntax for the 'fly mcp' command. This command is used to interact with the Flyctl Model Context Protocol and accepts various subcommands and flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mcp [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly litefs-cloud export Command\nDESCRIPTION: Shows the basic syntax for using the litefs-cloud export command to export a database state to a file.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_export.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly litefs-cloud export [flags]\n```\n\n----------------------------------------\n\nTITLE: Command Options for Postgres Config Show\nDESCRIPTION: Available command-specific options including application name and configuration file path settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_config_show.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for show\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly settings synthetics' Command in Bash\nDESCRIPTION: This snippet lists the available options for the 'fly settings synthetics' command. It includes a help flag for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_synthetics.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for synthetics\n```\n\n----------------------------------------\n\nTITLE: Command Options for Enveloop List\nDESCRIPTION: Available options for the 'fly extensions enveloop list' command, including help flag, organization specification, and confirmation automation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Redis Destroy Command Options\nDESCRIPTION: Local command options specific to the destroy operation, including help flag and confirmation skip.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for destroy\n  -y, --yes    Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a documentation page defining its title, layout template, table of contents setting, and display order.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides.html.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Advanced guides\nlayout: framework_docs_overview\ntoc: false\norder: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Knex.js for SQLite\nDESCRIPTION: This code snippet demonstrates how to configure Knex.js ORM for a SQLite database. It extracts the database file path from the DATABASE_URL environment variable.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/database.html.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  client: 'sqlite3',\n  connection: { filename: new URL(process.env.DATABASE_URL).pathname },\n```\n\n----------------------------------------\n\nTITLE: Connecting to an Elixir App Console via SSH\nDESCRIPTION: Command to open an IEx console into a running Elixir application on Fly.io using SSH with pseudo-terminal support.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/iex-into-running-app.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh console --pty -C \"/app/bin/hello_elixir remote\"\n```\n\n----------------------------------------\n\nTITLE: Launching Demo Application with Tigris Storage\nDESCRIPTION: Command to launch a demo application that demonstrates Tigris storage functionality through audio recording and playback features.\nSOURCE: https://github.com/superfly/docs/blob/main/js/the-basics/object-storage.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly launch --from https://github.com/fly-apps/node-dictaphone.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres App on Fly.io\nDESCRIPTION: Command to create a Postgres app on Fly.io with specific configuration parameters including app name, VM size, volume size, and initial cluster size.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl postgres create \\\n  --name mypostgres \\\n  --vm-size performance-1x \\\n  --volume-size 10 \\\n  --initial-cluster-size 1\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global configuration options that apply to all fly commands, including authentication and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform_vm-sizes.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Access Token Response in JSON\nDESCRIPTION: JSON response containing the access token, token type, expiration time, refresh token, scope, and creation timestamp.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"fo1__034hk03k4mhjea0l4224hk\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 7200,\n  \"refresh_token\": \"j-elry40hpy05m2qbaptr\",\n  \"scope\": \"read\",\n  \"created_at\": 1683733170\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly.io Machine Settings\nDESCRIPTION: TOML configuration to prevent automatic machine shutdown in Fly.io deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/litefs.html.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n  auto_stop_machines = false\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Consul Command Usage Syntax\nDESCRIPTION: The basic syntax for using the fly consul command in the Fly.io CLI. This is the entry point for all Consul cluster management operations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_consul.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly consul [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: MySQL List Command Options\nDESCRIPTION: Available command-specific options for the 'fly extensions mysql list' command, including help display, organization targeting, and confirmation automation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Options for the Arcjet List Command\nDESCRIPTION: Available command flags for the 'list' command including help display, organization specification, and auto-confirmation options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Generating Job Controller\nDESCRIPTION: Command to generate a Rails controller with start, complete, and status actions for job management.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate controller job start complete status\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Available options for customizing the error viewing command, including application name and configuration file path specification.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_errors.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for errors\n```\n\n----------------------------------------\n\nTITLE: Local Options for Postgres Backup Enable\nDESCRIPTION: Command-specific options including application name and config file path settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_enable.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for enable\n```\n\n----------------------------------------\n\nTITLE: Using fly tokens 3p add-discharge Command in Bash\nDESCRIPTION: This command is used to add a third-party discharge token to the Fly.io API token header. It requires a discharge token obtained from a third-party service in exchange for a caveat ticket.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_add-discharge.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens 3p add-discharge [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Updating Upstash Redis Database\nDESCRIPTION: Lists the specific options available for the 'fly redis update' command. These include help flag, organization specification, target region selection, and replica regions configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                     help for update\n  -o, --org string               The target Fly.io organization\n  -r, --region string            The target region (see 'flyctl platform regions')\n      --replica-regions string   Comma-separated list of regions to deploy read replicas (see 'flyctl platform regions')\n```\n\n----------------------------------------\n\nTITLE: Using SFTP Shell Command in Fly.io CLI\nDESCRIPTION: The basic usage of the 'fly sftp shell' command. This command initiates an interactive SFTP session for file transfers with a VM.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp_shell.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly sftp shell [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing Fly.io Configuration for Symfony\nDESCRIPTION: Commands to trick fly launch into generating Laravel-compatible configuration for a Symfony app by creating an empty artisan file.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-symfony.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntouch artisan\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Using the Enveloop Dashboard Command in Fly.io CLI\nDESCRIPTION: The basic command syntax for opening the Enveloop dashboard in a web browser. This command connects to the Enveloop dashboard for managing Enveloop projects.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions enveloop dashboard [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Global Options\nDESCRIPTION: Global configuration options available for all fly machine commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly.io DNS Query Result for App IPv6 Address\nDESCRIPTION: Output showing the IPv6 address returned from a DNS query for an application on Fly.io network. This demonstrates a successful DNS resolution over WireGuard.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_10\n\nLANGUAGE: output\nCODE:\n```\nfdaa:0:18:a7b:7d:f066:b83b:2\n```\n\n----------------------------------------\n\nTITLE: Command Options for Enveloop Dashboard in Fly.io CLI\nDESCRIPTION: Available options specific to the 'fly extensions enveloop dashboard' command, including app selection, configuration path, and organization targeting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for dashboard\n  -o, --org string      The target Fly.io organization\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly wireguard reset' Command in Bash\nDESCRIPTION: This command resets the WireGuard peer connection for a specified organization. It accepts an optional organization parameter and can be used with various flags for customization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_reset.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard reset [org] [flags]\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Available command-specific flags including help and JSON output options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_invite.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for invite\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly orgs show' Command in Fly CLI\nDESCRIPTION: This command displays information about a Fly organization, including name, slug, type, user permissions, DNS zones, and associated members. It accepts an optional organization slug and flags for customizing output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_show.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly orgs show [slug] [flags]\n```\n\n----------------------------------------\n\nTITLE: Enveloop Status Command Options\nDESCRIPTION: Available command-specific options for the status command including application name specification, configuration file path, and confirmation automation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for status\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Backup Command Help Options\nDESCRIPTION: Available help flag for the backup command\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for backup\n```\n\n----------------------------------------\n\nTITLE: Outbound Webhook Payload Example in JSON\nDESCRIPTION: JSON payload for outbound webhooks from Fly.io, conforming to the CloudEvents spec. This example shows a machine failure event.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"machine_id\": \"5683977ad31768\",\n  \"status\": \"failed\",\n  \"data\": {\n    \"Error\": \"image not found\",\n    \"Transition\": \"prepareImage\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the fly machine cordon Command\nDESCRIPTION: This command is used to deactivate all services on specified machines. It accepts machine IDs as arguments and supports application specification and configuration file options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_cordon.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine cordon [<id>...] [flags]\n```\n\n----------------------------------------\n\nTITLE: Viewing Real-time Logs with Fly CLI\nDESCRIPTION: The 'fly logs' command displays an application's logs in real-time. In this example, the command watches logs for an app named 'testrun' which has a mounted volume.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/info.html.md#2025-04-16_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\nfly logs -a testrun\n```\n\nLANGUAGE: out\nCODE:\n```\n2023-03-07T16:17:48Z runner[5683606c41098e] lhr [info]Pulling container image\n2023-03-07T16:17:51Z runner[5683606c41098e] lhr [info]Unpacking image\n2023-03-07T16:18:00Z runner[5683606c41098e] lhr [info]Setting up volume 'data'\n2023-03-07T16:18:00Z runner[5683606c41098e] lhr [info]Uninitialized volume 'data', initializing...\n2023-03-07T16:18:00Z runner[5683606c41098e] lhr [info]Encrypting volume\n2023-03-07T16:18:05Z runner[5683606c41098e] lhr [info]Opening encrypted volume\n2023-03-07T16:18:07Z runner[5683606c41098e] lhr [info]Formatting volume\n2023-03-07T16:18:08Z runner[5683606c41098e] lhr [info]Configuring firecracker\n2023-03-07T16:18:08Z app[5683606c41098e] lhr [info]Starting init (commit: 08b4c2b)...\n2023-03-07T16:18:08Z app[5683606c41098e] lhr [info]Mounting /dev/vdb at /storage w/ uid: 0, gid: 0 and chmod 0755\n2023-03-07T16:18:08Z app[5683606c41098e] lhr [info]Preparing to run: `sleep infinity` as root\n2023-03-07T16:18:08Z app[5683606c41098e] lhr [info]2023/03/07 16:18:08 listening on [fdaa:0:3b99:a7b:7e:3155:9844:2]:22 (DNS: [fdaa::3]:53)\n```\n\n----------------------------------------\n\nTITLE: Migrating Database from Heroku to Fly.io\nDESCRIPTION: This command uses pg_dump to export the Heroku database and pg_restore to import it into the Fly.io PostgreSQL database.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\npg_dump -Fc --no-acl --no-owner -d $HEROKU_DATABASE_URL | pg_restore --verbose --clean --no-acl --no-owner -d $DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Command Options for Wafris WAF Creation in Fly.io\nDESCRIPTION: Available options when creating a Wafris WAF. These flags allow specifying the application name, configuration path, WAF name, organization, region, and confirmation preferences.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for create\n  -n, --name string     The name of your WAF\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl platform regions')\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 for Production Environment\nDESCRIPTION: This code sets up the runtime configuration for SQLite3 in production, using the DATABASE_PATH environment variable to locate the database file.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nif config_env() == :prod do\n  database_path =\n    System.get_env(\"DATABASE_PATH\") ||\n      raise \"\"\"\n      environment variable DATABASE_PATH is missing.\n      For example: /data/name/name.db\n      \"\"\"\n\n  config :name, Name.Repo,\n    database: database_path,\n    pool_size: String.to_integer(System.get_env(\"POOL_SIZE\") || \"5\")\n```\n\n----------------------------------------\n\nTITLE: Installing fly.io-rails Gem\nDESCRIPTION: Command to add the fly.io-rails gem to the Rails project.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nbundle add fly.io-rails\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global configuration options that apply to all Fly CLI commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_enable.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: WireGuard Token Start Command Syntax\nDESCRIPTION: Basic command syntax for starting a WireGuard peer connection with parameters for name, group, region, and file.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_start.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard token start [name] [group] [region] [file] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly tokens' Command in Bash\nDESCRIPTION: The basic usage syntax for the 'fly tokens' command. It allows for various subcommands and flags to manage Fly.io API tokens.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Fly.io Token Ticket Command\nDESCRIPTION: Command syntax for retrieving third-party caveat tickets from Fly.io API tokens. Used to obtain discharge tokens from third-party services.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_ticket.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens 3p ticket [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: Global command-line options that apply to all flyctl commands, including authentication via access token and debugging options for troubleshooting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global options that apply to all Fly CLI commands, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_config_show.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for Kubernetes List Command\nDESCRIPTION: Available options specific to the 'list' command. Currently only includes the help flag to display usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Fly Storage Bucket Status\nDESCRIPTION: These options allow users to specify the application, configuration file path, and enable automatic confirmation for the storage bucket status command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for status\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Options for fly postgres renew-certs Command in Bash\nDESCRIPTION: These are the specific options available for the renew-certs command. They include specifying the application name, configuration file path, and the number of days the certificate should be valid.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_renew-certs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string       Application name\n  -c, --config string    Path to application configuration file\n  -h, --help             help for renew-certs\n      --valid-days int   The number of days the certificate should be valid for. (default 36525)\n```\n\n----------------------------------------\n\nTITLE: Consul Attach Command Options\nDESCRIPTION: Available command-specific options for the consul attach command, including app name, config path, and variable name configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_consul_attach.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string             Application name\n  -c, --config string          Path to application configuration file\n  -h, --help                   help for attach\n      --variable-name string   The environment variable name that will be added to the consuming app. (default \"FLY_CONSUL_URL\")\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Kill Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'fly machine kill' command. They allow specifying the application name and configuration file path.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_kill.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for kill\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Start Command Options\nDESCRIPTION: These are the specific options available for the 'fly machine start' command. They include specifying the application name and configuration file path.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_start.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for start\n```\n\n----------------------------------------\n\nTITLE: Command Options for Discharge Token Generation\nDESCRIPTION: Available command-specific options including help flag, location URL, secret handling, and ticket specification.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_discharge.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                 help for discharge\n  -l, --location string      URL identifying third-party service\n  -S, --secret string        (insecure) base64 shared secret for third-party caveat\n  -s, --secret-file string   file containing base64 shared secret for third-party caveat\n      --ticket string        Third party caveat ticket\n```\n\n----------------------------------------\n\nTITLE: Fly Apps Releases Command Options\nDESCRIPTION: Available flags for the 'fly apps releases' command, including specifying application name, config file path, help display, image reference display, and JSON output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_releases.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for releases\n      --image           Display the Docker image reference of the release\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Options for Fly Storage Create Command\nDESCRIPTION: These are the available options for the 'fly storage create' command. They include settings for specifying the application, bucket name, organization, public accessibility, and shadow bucket configurations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                 Application name\n  -c, --config string              Path to application configuration file\n  -h, --help                       help for create\n  -n, --name string                The name of your bucket\n  -o, --org string                 The target Fly.io organization\n  -p, --public                     Objects in the bucket should be publicly accessible\n      --shadow-access-key string   Shadow bucket access key\n      --shadow-endpoint string     Shadow bucket endpoint\n      --shadow-name string         Shadow bucket name\n      --shadow-region string       Shadow bucket region\n      --shadow-secret-key string   Shadow bucket secret key\n      --shadow-write-through       Write objects through to the shadow bucket\n  -y, --yes                        Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: Global options available for all Fly CLI commands, including access token specification, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for Health Checks List\nDESCRIPTION: Available options for customizing the health checks list command output and filtering results.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_checks_list.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string          Application name\n      --check-name string   Filter checks by name\n  -c, --config string       Path to application configuration file\n  -h, --help                help for list\n  -j, --json                JSON output\n```\n\n----------------------------------------\n\nTITLE: Using the Arcjet Create Command in Fly CLI\nDESCRIPTION: Basic usage syntax for creating an Arcjet site using the Fly CLI extensions command. This command provisions a new Arcjet site with the specified configuration options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions arcjet create [flags]\n```\n\n----------------------------------------\n\nTITLE: SFTP GET Command Options in Fly.io CLI\nDESCRIPTION: Available command-line options for configuring the SFTP GET operation, including VM addressing, application selection, and connection parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp_get.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -A, --address string         Address of VM to connect to\n  -a, --app string             Application name\n  -C, --command string         command to run on SSH session\n  -c, --config string          Path to application configuration file\n      --container string       Container to connect to\n  -h, --help                   help for get\n      --machine string         Run the console in the existing machine with the specified ID\n  -o, --org string             The target Fly.io organization\n  -g, --process-group string   The target process group\n      --pty                    Allocate a pseudo-terminal (default: on when no command is provided)\n  -q, --quiet                  Don't print progress indicators for WireGuard\n  -r, --region string          The target region (see 'flyctl platform regions')\n  -s, --select                 select available instances\n  -u, --user string            Unix username to connect as (default \"root\")\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Available options for customizing the token listing command, including application selection, configuration path, and organization targeting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n  -o, --org string      The target Fly.io organization\n  -s, --scope string    either 'app' or 'org'\n```\n\n----------------------------------------\n\nTITLE: Fly Platform Command Options in Bash\nDESCRIPTION: This snippet displays the available options for the 'fly platform' command. Currently, it only includes the help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for platform\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly services' Command in Fly.io CLI\nDESCRIPTION: Lists the available options for the 'fly services' command. Currently, it only includes the help flag for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_services.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for services\n```\n\n----------------------------------------\n\nTITLE: Options for Managed Postgres Attach Command in Fly CLI\nDESCRIPTION: These are the available options for the 'fly managed-postgres attach' command. They allow specifying the app, configuration file, database name, user, and environment variable name.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres_attach.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string             Application name\n  -c, --config string          Path to application configuration file\n      --database-name string   The designated database name for this consuming app.\n      --database-user string   The database user to create. By default, we will use the name of the consuming app.\n  -h, --help                   help for attach\n      --variable-name string   The environment variable name that will be added to the consuming app.  (default \"DATABASE_URL\")\n  -y, --yes                    Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options that can be used with the 'disable' command, including setting an access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_synthetics_disable.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Deploying Redis Fly Application\nDESCRIPTION: Command to deploy the Redis Fly application after configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/multiple-applications.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Using the Fly CLI to Access Upstash Kafka Dashboard\nDESCRIPTION: Command syntax for accessing the Upstash Kafka dashboard through the Fly CLI. This command opens the Upstash Kafka dashboard on the Upstash web console for monitoring and managing your Kafka clusters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions kafka dashboard [flags]\n```\n\n----------------------------------------\n\nTITLE: Running a Llama 3 Query via Ollama Client\nDESCRIPTION: JavaScript-styled command to run a query against the Llama 3 model hosted on the Ollama service via Flycast, demonstrating the end-to-end functionality.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n# ollama run llama3 \"Why is the sky blue?\"\n```\n\n----------------------------------------\n\nTITLE: Enable Autoupdate Command Usage\nDESCRIPTION: Basic command syntax for enabling automatic updates in Fly CLI\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_autoupdate_enable.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly settings autoupdate enable [flags]\n```\n\n----------------------------------------\n\nTITLE: JSON Output Configuration for Flyctl\nDESCRIPTION: Description of how to enable JSON output in flyctl commands using the --json or -j flag, with output either in JSON-NL format or as a single JSON object.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/integrating.html.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nMany flyctl commands can produce JSON output using the `--json` or `-j` flag. The JSON may be streamed messages in JSON-NL format or a single JSON object, depending on what is being requested.\n```\n\n----------------------------------------\n\nTITLE: Using the Fly CLI to Update Kafka Clusters\nDESCRIPTION: The basic syntax for updating an existing Upstash Kafka cluster using the Fly CLI. The command requires a cluster name and supports various optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions kafka update <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Redis Proxy Global Options\nDESCRIPTION: Global configuration options that apply to all Redis proxy commands including access token and debug settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_proxy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Available command-specific options for fly auth whoami command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_whoami.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for whoami\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for destroy\nDESCRIPTION: Available flags specific to the destroy command, including help and confirmation skip options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for destroy\n  -y, --yes    Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Vector List Command Options\nDESCRIPTION: Available options for customizing the vector list command, including help flag, organization selection, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Using the fly ssh sftp Command in Bash\nDESCRIPTION: This snippet shows the basic usage of the 'fly ssh sftp' command. It can be used with various subcommands and flags to interact with files on remote VMs.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh sftp [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for fly extensions storage list Command\nDESCRIPTION: Available command-specific options for the list command, including help flag, organization targeting, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Read-only Token Command Options\nDESCRIPTION: Available options for customizing the read-only token creation, including expiry duration, token name, and output format settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_readonly.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -x, --expiry duration   The duration that the token will be valid (default 175200h0m0s)\n      --from-existing     Use an existing token as the basis for the read-only token\n  -h, --help              help for readonly\n  -j, --json              JSON output\n  -n, --name string       Token name (default \"Read-only org token\")\n```\n\n----------------------------------------\n\nTITLE: Using fly extensions mysql update Command Syntax\nDESCRIPTION: The basic syntax for updating an existing MySQL database using the Fly.io CLI. This command requires a database name and can accept various flags to modify the configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions mysql update <database_name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Related fly auth Commands\nDESCRIPTION: Links to related authentication commands in the fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_docker.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly auth](/docs/flyctl/auth/)    Manage authentication\n```\n\n----------------------------------------\n\nTITLE: Available Options for Upstash Kafka Creation\nDESCRIPTION: Lists all available options for the 'fly extensions kafka create' command, including specifying application names, configuration files, cluster names, organizations, and target regions.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for create\n  -n, --name string     The name of your cluster\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl platform regions')\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly apps list' Command\nDESCRIPTION: These are the specific options available for the 'fly apps list' command. They allow for help display, JSON output, organization targeting, and quiet mode for name-only listing.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -j, --json         JSON output\n  -o, --org string   The target Fly.io organization\n  -q, --quiet        Only list app names\n```\n\n----------------------------------------\n\nTITLE: SFTP Shell Command Options\nDESCRIPTION: Available command-line options for customizing the SFTP shell connection including VM addressing, application selection, and authentication parameters\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp_shell.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -A, --address string         Address of VM to connect to\n  -a, --app string             Application name\n  -C, --command string         command to run on SSH session\n  -c, --config string          Path to application configuration file\n      --container string       Container to connect to\n  -h, --help                   help for shell\n      --machine string         Run the console in the existing machine with the specified ID\n  -o, --org string             The target Fly.io organization\n  -g, --process-group string   The target process group\n      --pty                    Allocate a pseudo-terminal (default: on when no command is provided)\n  -q, --quiet                  Don't print progress indicators for WireGuard\n  -r, --region string          The target region (see 'flyctl platform regions')\n  -s, --select                 select available instances\n  -u, --user string           Unix username to connect as (default \"root\")\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options are available for all Fly CLI commands, including the Kubernetes extension. They allow setting an API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_save-kubeconfig.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Wafris WAF Destroy Command Options in Bash\nDESCRIPTION: Available options for the 'fly extensions wafris destroy' command, including application name, configuration path, help, and confirmation options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for destroy\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Using the Fly SSH Log Command in Bash\nDESCRIPTION: This command displays a log of all issued SSH certificates. It can be customized with various flags to modify output format and target organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_log.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh log [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly ssh console Command in Bash\nDESCRIPTION: These are the global options applicable to the 'fly ssh console' command. They include options for specifying the API access token and controlling debug output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_console.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Disabling Synthetics using Fly CLI\nDESCRIPTION: This command disables synthetics agent execution in Fly.io. It can be run with optional flags for help, access token, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_synthetics_disable.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly settings synthetics disable [flags]\n```\n\n----------------------------------------\n\nTITLE: Command Options for Backup Configuration\nDESCRIPTION: Available command flags for customizing the backup configuration display, including app name specification and config file path.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_config_show.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for show\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for 'fly postgres users'\nDESCRIPTION: This snippet lists the command-specific options available for the 'fly postgres users' command. Currently, it only includes the help flag for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_users.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for users\n```\n\n----------------------------------------\n\nTITLE: Viewing fly ips help options\nDESCRIPTION: Options available specifically for the 'fly ips' command, showing how to access the help documentation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for ips\n```\n\n----------------------------------------\n\nTITLE: Global Options\nDESCRIPTION: Global configuration options that apply across all Fly CLI commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_errors.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: SFTP Find Command Basic Usage\nDESCRIPTION: Basic command syntax for using the SFTP find command to list files on a remote VM.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp_find.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ssh sftp find [path] [flags]\n```\n\n----------------------------------------\n\nTITLE: Viewing Fly.io Application Logs\nDESCRIPTION: Displays and tails the log files for the deployed Django application on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/existing.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfly logs\n```\n\n----------------------------------------\n\nTITLE: Creating a New Python Project with Poetry\nDESCRIPTION: Command to initialize a new Python project using Poetry. This creates a basic project structure with the specified application name.\nSOURCE: https://github.com/superfly/docs/blob/main/python/the-basics/initial-setup.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\npoetry new <app-name>\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly ips release' Command in Fly.io CLI\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the 'fly ips release' command. It allows releasing one or more IP addresses from a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_release.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ips release [flags] ADDRESS ADDRESS ...\n```\n\n----------------------------------------\n\nTITLE: Listing All Connected Nodes Including Hidden Ones in Elixir\nDESCRIPTION: This Elixir code snippet shows how to list all connected nodes in a cluster, including hidden nodes.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/clustering-from-home-to-your-app-in-fly.html.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nNode.list(:hidden)\n```\n\n----------------------------------------\n\nTITLE: Deploying SQLite3 Application to Fly.io\nDESCRIPTION: This command deploys your application with the SQLite3 configuration to Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Fly Machine API Proxy Command Options in Bash\nDESCRIPTION: This snippet lists the available options for the 'fly machine api-proxy' command. It includes options for specifying the target organization and controlling output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_api-proxy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for api-proxy\n  -o, --org string   The target Fly.io organization\n  -q, --quiet        Don't print progress indicators for WireGuard\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fly API Token\nDESCRIPTION: Command to obtain a Fly API token for a specific organization using flyctl.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/review-apps-guide.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly tokens org <ORG NAME>\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Version Upgrade Command\nDESCRIPTION: The basic command syntax for upgrading the Fly CLI version.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_version_upgrade.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly version upgrade [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly SSH Log Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'fly ssh log' command. They include help output, JSON formatting, and specifying a target organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_log.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for log\n  -j, --json         JSON output\n  -o, --org string   The target Fly.io organization\n```\n\n----------------------------------------\n\nTITLE: Fly Dashboard Command Options\nDESCRIPTION: Available command-line options for configuring the dashboard command execution.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for dashboard\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all Fly CLI commands, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_restore.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Making Bash Script Executable\nDESCRIPTION: This command makes the cluster_with_remote bash script executable, allowing it to be run directly.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/clustering-from-home-to-your-app-in-fly.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x cluster_with_remote\n```\n\n----------------------------------------\n\nTITLE: Basic Logout Command Syntax\nDESCRIPTION: The basic command syntax for logging out of the Fly platform.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_logout.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly auth logout [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the fly certs remove Command in Bash\nDESCRIPTION: Command to remove a certificate from a Fly application. Takes a hostname parameter to identify which certificate to remove.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_remove.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly certs remove <hostname> [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Available options specific to the destroy command including app selection, configuration path, and confirmation flags\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for destroy\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: MySQL Update Command Syntax\nDESCRIPTION: Basic command syntax for updating a MySQL database on Fly.io. Requires specifying the database name and allows optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mysql update <database_name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Checking Development Environment Versions\nDESCRIPTION: Commands to check the versions of various tools in your development environment, useful for ensuring consistency with the production environment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle -v\n$ node -v\n$ ruby -v\n$ yarn -v\n```\n\n----------------------------------------\n\nTITLE: Local Options for Fly Volumes Destroy Command\nDESCRIPTION: Available command-specific options including app selection, configuration path, help display, and confirmation bypass.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for destroy\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Options for Fly CLI Organization Creation\nDESCRIPTION: Available options for the 'fly orgs create' command include help and JSON output flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_create.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for create\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: SFTP Shell Command Options in Fly.io CLI\nDESCRIPTION: Available options for the 'fly sftp shell' command. These options allow users to specify the target VM, application, organization, and other connection parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp_shell.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -A, --address string         Address of VM to connect to\n  -a, --app string             Application name\n  -C, --command string         command to run on SSH session\n  -c, --config string          Path to application configuration file\n      --container string       Container to connect to\n  -h, --help                   help for shell\n      --machine string         Run the console in the existing machine with the specified ID\n  -o, --org string             The target Fly.io organization\n  -g, --process-group string   The target process group\n      --pty                    Allocate a pseudo-terminal (default: on when no command is provided)\n  -q, --quiet                  Don't print progress indicators for WireGuard\n  -r, --region string          The target region (see 'flyctl platform regions')\n  -s, --select                 select available instances\n  -u, --user string            Unix username to connect as (default \"root\")\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global options available for all Fly CLI commands including API token, debug mode, and verbosity settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_autoupdate_disable.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Certificate Addition Command Options\nDESCRIPTION: Available options for the certificate addition command including application name, config path, help, and JSON output flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_add.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for add\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Available Options for fly machine egress-ip list Command\nDESCRIPTION: Options that can be used with the 'fly machine egress-ip list' command, including specifying the application name and configuration file path.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Update Global Options\nDESCRIPTION: Global options that can be used with the 'fly machine update' command, including authentication and logging configurations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage for Discharge Token Generation\nDESCRIPTION: The base command syntax for generating a discharge token using fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_discharge.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens 3p discharge [flags]\n```\n\n----------------------------------------\n\nTITLE: Help Options for Redis Status\nDESCRIPTION: Available help flag for the Redis status command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_status.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for status\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options available for all Fly CLI commands, including the Kafka dashboard command. These options control authentication, debugging, and output verbosity levels.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly secrets unset\nDESCRIPTION: Available options for customizing the secret removal process, including specifying the application, configuration path, deployment options, and help.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_unset.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n      --detach          Return immediately instead of monitoring deployment progress\n  -h, --help            help for unset\n      --stage           Set secrets but skip deployment for machine apps\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Dockerfile Deployment\nDESCRIPTION: Commands showing how to deploy using different environment-specific Dockerfile variants.\nSOURCE: https://github.com/superfly/docs/blob/main/launch/monorepo.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy --dockerfile ./Dockerfile.production\nfly deploy --dockerfile ./Dockerfile.staging\n```\n\n----------------------------------------\n\nTITLE: Creating Crontab File in Bash\nDESCRIPTION: Command to create an empty crontab file in the project root directory.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/supercronic.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntouch ./crontab\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Failover Command Usage\nDESCRIPTION: The basic command syntax for initiating a Postgres failover operation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_failover.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres failover [flags]\n```\n\n----------------------------------------\n\nTITLE: Post-Deployment Script for Staging Environment\nDESCRIPTION: Bash script that runs after deployment to set up the staging database. It performs database migrations and loads test fixtures to populate the staging database with test data.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# staging/post_deploy.sh\n#!/usr/bin/env bash\n\n# Migrate database.\npython /code/manage.py migrate\n# Load fixtures with test data.\npython /code/manage.py loaddata /code/staging/test_groups.json\n```\n\n----------------------------------------\n\nTITLE: Removing Heroku Database URL Secret After Migration\nDESCRIPTION: The fly secrets unset command removes the HEROKU_DATABASE_URL environment variable which is no longer needed after database migration.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\nfly secrets unset HEROKU_DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Deleting an Upstash Kafka Cluster on Fly.io\nDESCRIPTION: This command deletes a specified Kafka cluster. It requires the cluster name as an argument. This action is irreversible and should be used with caution.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/kafka.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly ext kafka destroy my-cluster\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for GitHub Actions Deployment\nDESCRIPTION: YAML snippet that describes the deployment target to display in the pull request UI, including the environment name based on PR number and URL from the deployment output.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  name: pr-${{ github.event.number }}\n  url: ${{ steps.deploy.outputs.url }}\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Rails Credentials\nDESCRIPTION: Command to display help information about Rails' encrypted credentials system. This provides guidance on how to use credential files like config/credentials.yml.enc.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/configuration.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails credentials:help\n```\n\n----------------------------------------\n\nTITLE: Enabling Analytics Command in Fly CLI\nDESCRIPTION: This command enables analytics collection in the Fly CLI. It can be run with optional flags and global options to customize the behavior.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_analytics_enable.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly settings analytics enable [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI Commands\nDESCRIPTION: Global options that apply to all fly CLI commands. Includes options for specifying the Fly API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_exec.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using Fly CLI Organizations Command\nDESCRIPTION: The main command for managing Fly organizations. It requires a subcommand and optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly orgs [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Token Listing Command\nDESCRIPTION: Base command syntax for listing Fly.io API tokens.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens list [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Health Checks List Command\nDESCRIPTION: The basic command syntax for listing health checks in Fly.io applications.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_checks_list.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly checks list [flags]\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Status Command Options\nDESCRIPTION: Lists the available command-specific options including cluster name, JSON output format, and organization selection.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --cluster string   LiteFS Cloud cluster name\n  -h, --help             help for status\n  -j, --json             JSON output\n  -o, --org string       The target Fly.io organization\n```\n\n----------------------------------------\n\nTITLE: Checking Fly.io Application Scale Status\nDESCRIPTION: Commands to display the current distribution of machines across regions for a Fly.io application, showing CPU, memory, and region allocation.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/fauna.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly scale show\n```\n\nLANGUAGE: output\nCODE:\n```\nVM Resources for app: my-app-name\n\nGroups\nNAME\tCOUNT\tKIND  \tCPUS\tMEMORY\tREGIONS\napp \t3    \tshared\t1   \t256 MB\tiad,ord,sjc\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly volumes show' Command in Fly.io CLI\nDESCRIPTION: This snippet lists the available options for the 'fly volumes show' command, including specifying the application, configuration file path, help, and JSON output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_show.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for show\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Redis Connection Command Options\nDESCRIPTION: Available command-specific options for the Redis connect command, including organization and region selection.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_connect.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for connect\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl platform regions')\n```\n\n----------------------------------------\n\nTITLE: Command for Listing Machine IDs on Fly.io\nDESCRIPTION: Shell command to list all machine IDs in the current Fly.io application using the quiet flag to reduce output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/cell-based.html.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfly machines list -q\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These are global options applicable to all Fly CLI commands, including 'fly redis plans'. They allow specifying an API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_plans.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: WireGuard Token Global Options\nDESCRIPTION: Global options available for all WireGuard token commands including API access token setting and debug modes.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: Global options that apply to all Fly.io CLI commands including Wafris commands. These include options for authentication, debugging, and output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly machine Commands\nDESCRIPTION: Global configuration options that apply to all fly machine commands, including API access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_stop.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Creating LiteFS Cloud Cluster Base Command\nDESCRIPTION: Basic command syntax for creating a new LiteFS Cloud cluster with a specified cluster name\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_clusters_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly litefs-cloud clusters create CLUSTERNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands\nDESCRIPTION: Global options that can be used with any fly command, including authentication and logging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for Enabling Analytics in Fly CLI\nDESCRIPTION: This snippet shows the available options when enabling analytics. Currently, only the help flag is available.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_analytics_enable.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for enable\n```\n\n----------------------------------------\n\nTITLE: Global WireGuard Options - Fly.io CLI\nDESCRIPTION: Global configuration options available for all WireGuard commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for Fly Storage Dashboard\nDESCRIPTION: Available command-specific flags including application name, configuration path, help, organization selection, and confirmation options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for dashboard\n  -o, --org string      The target Fly.io organization\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Repository\nDESCRIPTION: Command to clone the Python GPU example repository\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/python-gpu-example.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ngit clone git@github.com:fly-apps/python_gpu_example.git && cd python_gpu_example\n```\n\n----------------------------------------\n\nTITLE: Connecting to EdgeDB via CLI\nDESCRIPTION: Command to connect to the EdgeDB instance using the EdgeDB CLI tool over a Wireguard tunnel, using the DSN connection string and disabling strict TLS verification.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_14\n\nLANGUAGE: cmd\nCODE:\n```\nedgedb --dsn edgedb://edgedb:mysecretpassword@myedgedb.internal:8080 --tls-security insecure\n```\n\n----------------------------------------\n\nTITLE: Cloning the Arcjet Example Next.js Repository\nDESCRIPTION: Command to clone the example Next.js application that demonstrates Arcjet security features.\nSOURCE: https://github.com/superfly/docs/blob/main/security/arcjet.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:arcjet/arcjet-example-nextjs-fly.git\n```\n\n----------------------------------------\n\nTITLE: Basic Analytics Settings Command\nDESCRIPTION: The main command syntax for managing analytics settings in Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_analytics.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly settings analytics [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying with Build Secrets using Fly CLI\nDESCRIPTION: Command to deploy an application with build secrets using the Fly CLI. Demonstrates how to pass secret values during deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/apps/build-secrets.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Note: You can pass multiple secrets if you need\nfly deploy \\\n    --build-secret MY_SUPER_SECRET=some_value\n```\n\n----------------------------------------\n\nTITLE: Using the fly tokens create Command in Bash\nDESCRIPTION: This command is used to create Fly.io API tokens. It supports various subcommands for creating specific types of tokens such as deploy, LiteFS Cloud, machine exec, org, read-only, and SSH tokens.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens create [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly Global Options\nDESCRIPTION: Shows the global options that can be used with any fly command, including accessing API tokens, debugging, and verbose output options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the Arcjet Status Command in Fly CLI\nDESCRIPTION: This command is used to display details about an Arcjet site setup. It can be run with an optional site name and various flags to customize the output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions arcjet status [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using fly extensions mysql destroy command\nDESCRIPTION: Command for permanently destroying a MySQL database on Fly.io. Takes a database name argument and supports various flags to customize behavior.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions mysql destroy [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global configuration options that apply to all Fly.io CLI commands, including authentication and debugging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_events_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands\nDESCRIPTION: Lists global options applicable to all fly commands, including authentication with access tokens and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_export.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Django Project Directory Structure\nDESCRIPTION: Shows the expected directory structure after creating a Django project.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nhello-django/\n|-- .venv\n|-- hello_django/\n|   |-- __init__.py\n|   |-- asgi.py\n|   |-- settings.py\n|   |-- urls.py\n|   |-- wsgi.py\n|-- manage.py\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options apply to all Fly CLI commands, including 'services list'. They allow setting the API access token, enabling debug mode, and increasing output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_services_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Kafka Extension Command Usage\nDESCRIPTION: The base command structure for interacting with Kafka extensions through the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions kafka [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: SSH Host Key Management Script\nDESCRIPTION: Bash script to maintain stable SSH host keys across deployments using volume storage\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/opensshd.html.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /volume/.ssh\n\nif [[ \"$(ls /volume/.ssh/*_key)\" = \"\" ]]; then\n  cp /etc/ssh/*_key /volume/.ssh\nelse\n  cp /volume/.ssh/*_key /etc/ssh\nfi\n```\n\n----------------------------------------\n\nTITLE: WireGuard WebSocket Command Syntax\nDESCRIPTION: Basic command syntax for enabling or disabling WireGuard WebSocket tunneling\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_websockets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard websockets [enable|disable] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly Agent Commands\nDESCRIPTION: Global options that can be used with the fly agent restart command, including options for authentication, debugging, and verbosity levels.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_restart.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Disabling Analytics Command Usage\nDESCRIPTION: The main command syntax for disabling analytics collection in Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_analytics_disable.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly settings analytics disable [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Fly Application\nDESCRIPTION: Command to create a new Fly.io application\nSOURCE: https://github.com/superfly/docs/blob/main/gpus/python-gpu-example.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nfly apps create <app-name>\n```\n\n----------------------------------------\n\nTITLE: Connection Command Specific Options\nDESCRIPTION: Available specific options for the connect command, including organization targeting\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres_connect.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for connect\n  -o, --org string   The target Fly.io organization\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly settings synthetics' Command in Bash\nDESCRIPTION: This snippet shows the basic usage syntax for the 'fly settings synthetics' command. It allows users to manage synthetics agent execution settings in Fly.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_synthetics.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly settings synthetics [flags]\n```\n\n----------------------------------------\n\nTITLE: Global options for fly CLI commands in Bash\nDESCRIPTION: Lists the global options available for all Fly.io CLI commands, including setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for Upstash Vector Status Command\nDESCRIPTION: Available options when checking Upstash Vector index status, including application specification, configuration path, help, and confirmation flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for status\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: MCP Proxy Client Options in Bash\nDESCRIPTION: These are the available options for the 'fly mcp proxy' command. They include help, password, URL, and user authentication options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp_proxy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for proxy\n  -p, --password string   [optional] Password to authenticate with\n      --url string        URL of the MCP wrapper server\n  -u, --user string       [optional] User to authenticate with\n```\n\n----------------------------------------\n\nTITLE: Local Options for MPG Proxy\nDESCRIPTION: Command-specific options including organization selection and region targeting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres_proxy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for proxy\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl platform regions')\n```\n\n----------------------------------------\n\nTITLE: Deleting a Redis Database\nDESCRIPTION: Command to permanently delete a Redis database. This operation cannot be undone and will result in data loss.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/redis.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly redis destroy my-redis-db\n```\n\nLANGUAGE: output\nCODE:\n```\nYour Redis database my-redis-db was deleted\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Shows the global options available for all Fly CLI commands, including API access token configuration and debug/verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands in Bash\nDESCRIPTION: These global options are available for all Fly.io CLI commands, including 'fly redis list'. They provide authentication, debugging, and output verbosity controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Output from Listing Vector Indexes\nDESCRIPTION: Example output showing the list of Vector indexes with their names, organizations, and primary regions.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/vector.html.md#2025-04-16_snippet_4\n\nLANGUAGE: output\nCODE:\n```\nNAME               \tORG          \tPRIMARY REGION\nmy-vector-index\tmyorg         \tiad\n```\n\n----------------------------------------\n\nTITLE: Global Options for Flyctl Commands in Bash\nDESCRIPTION: These are the global options available for all Flyctl commands, including 'fly machine clone'. They allow you to set the API access token, enable debug mode, and increase verbosity of the output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_clone.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Running Python Commands with Poetry\nDESCRIPTION: Command to run Python scripts within the Poetry virtual environment without explicitly activating it. This ensures all dependencies are available to the script.\nSOURCE: https://github.com/superfly/docs/blob/main/python/the-basics/initial-setup.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\npoetry run python main.py\n```\n\n----------------------------------------\n\nTITLE: Using Wafris Dashboard Command in Fly CLI\nDESCRIPTION: This command opens the Wafris dashboard for a specified firewall. It supports various options for specifying the application, configuration, and organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris_dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions wafris dashboard [firewall_name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Sequel to Copy Data from Postgres to SQLite\nDESCRIPTION: This command uses Sequel to copy database structure and data from a PostgreSQL database to a new SQLite database file.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_16\n\nLANGUAGE: cmd\nCODE:\n```\nsequel -C postgres://localhost/database sqlite://name.db\n```\n\n----------------------------------------\n\nTITLE: WireGuard Peer Names Query Result\nDESCRIPTION: Output showing the result of a DNS query for WireGuard peer names in the Fly.io organization. This example shows a single peer named 'my-peer'.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_14\n\nLANGUAGE: output\nCODE:\n```\n\"my-peer\"\n```\n\n----------------------------------------\n\nTITLE: Checking Application Status\nDESCRIPTION: Command to view the current state of the deployed application, including all running instances.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\nfly status\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all fly commands, including authentication and debugging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Kubernetes Commands\nDESCRIPTION: Global options that can be used with any Fly CLI kubernetes command, including authentication with access token and debug/verbose output controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: MySQL Update Global Options\nDESCRIPTION: Global options that apply to all Fly CLI commands, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: Global options applicable to all Fly CLI commands, including MySQL-related commands. These options allow setting an API access token, enabling debug output, and increasing verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Viewing Fly.io Application Releases\nDESCRIPTION: Command to view the release history of an application on Fly.io using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[fly releases](/docs/flyctl/releases/)\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Secret via CLI\nDESCRIPTION: Command to set the FLY_API_TOKEN secret in GitHub repository using GitHub CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/github-actions.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\ngh secret set FLY_API_TOKEN --repos <username>/<repository-name>\n```\n\n----------------------------------------\n\nTITLE: Basic WireGuard Token List Command\nDESCRIPTION: The main command syntax for listing WireGuard tokens. Can be used with an optional organization parameter.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard token list [org] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global options for fly CLI commands\nDESCRIPTION: Lists the global options available for all 'fly' CLI commands, including setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Dashboard Command Usage\nDESCRIPTION: The main command syntax for accessing the Redis dashboard, requiring an organization slug parameter.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_dashboard.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly redis dashboard <org_slug> [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for Arcjet Status Command\nDESCRIPTION: These are the specific options available for the 'arcjet status' command. They include specifying the application name, configuration file path, and options for help and confirmation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for status\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Command options for fly ips allocate-v6\nDESCRIPTION: Available options for the allocate-v6 command including targeting specific applications, configuring networks, and selecting regions. These options let you customize how and where the IPv6 address is allocated.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_allocate-v6.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string       Application name\n  -c, --config string    Path to application configuration file\n  -h, --help             help for allocate-v6\n      --network string   Target network name for a Flycast private IPv6 address\n  -o, --org string       The target Fly.io organization\n      --private          Allocate a private IPv6 address\n  -r, --region string    The target region (see 'flyctl platform regions')\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI in Bash\nDESCRIPTION: Presents the global options applicable to all Fly CLI commands, including 'fly storage list'. These options allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global configuration options that apply to all Fly CLI commands, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options available for all Fly.io CLI commands, including authentication and debugging settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for 'fly mcp' Command in Bash\nDESCRIPTION: Shows the option for displaying help information for the 'fly mcp' command. This flag provides users with information about the command's usage and available options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for mcp\n```\n\n----------------------------------------\n\nTITLE: Help Options for Autoupdate Enable\nDESCRIPTION: Available help options for the enable command\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_autoupdate_enable.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for enable\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for Destroying Tigris Storage Buckets with Fly CLI\nDESCRIPTION: Demonstrates the basic command structure for permanently destroying a Tigris object storage bucket using the Fly CLI. The command requires specifying the storage bucket name and allows for additional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly storage destroy [storage-bucket-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly jobs Command\nDESCRIPTION: Lists the global configuration options available for the fly jobs command, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_jobs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: Lists the global options available for all Fly.io CLI commands, including SSH. These options allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global command options applicable across all Fly CLI commands, including access token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase_dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: These are global options that can be used with various Fly CLI commands, including 'fly wireguard reset'. They allow setting an access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_reset.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly wireguard create\nDESCRIPTION: These are the specific options available for the 'fly wireguard create' command. It includes help and custom network name options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help             help for create\n      --network string   Custom network name\n```\n\n----------------------------------------\n\nTITLE: Verifying Rails Credentials with Current Master Key\nDESCRIPTION: This Rails command displays the decrypted contents of your credentials file using the current master key. It helps verify that your credentials are correctly encoded with your master key before deployment.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/existing.html.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nbin/rails credentials:show\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Database Command Usage\nDESCRIPTION: Main command structure for interacting with Postgres databases in a Fly.io cluster.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_db.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres db [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Adapter for Sequel\nDESCRIPTION: This command installs the PostgreSQL adapter for the Sequel gem, necessary when migrating from a Postgres database.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_15\n\nLANGUAGE: cmd\nCODE:\n```\ngem install pg\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations with Fly CLI Command\nDESCRIPTION: The 'fly orgs create' command is used to create a new organization. It accepts an optional name parameter and various flags for customization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_create.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly orgs create [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Vector Command Usage\nDESCRIPTION: The base command structure for using the Upstash Vector extension in Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions vector [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying the EdgeDB App\nDESCRIPTION: Command to deploy the EdgeDB app after all the configuration has been completed.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_10\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl deploy\n```\n\n----------------------------------------\n\nTITLE: Updating Root Route in Rails Application\nDESCRIPTION: Diff showing the change in routes.rb to set the root path to the names index action.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-record.html.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nRails.application.routes.draw do\n  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html\n\n  # Defines the root path route (\"/\")\n-  root \"rails/welcome#index\"\n+  root \"names#index\"\nend\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: These global options are available for all Fly.io CLI commands, including setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI Commands\nDESCRIPTION: Global options available for all fly CLI commands, including access token specification and debugging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_restart.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Consul Command Options\nDESCRIPTION: The options available specifically for the consul command, including the help flag for displaying documentation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_consul.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for consul\n```\n\n----------------------------------------\n\nTITLE: Global options for fly commands\nDESCRIPTION: Global options that can be used with any fly command, including authentication with access tokens and debug/verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Managing IP Addresses for Fly.io Applications\nDESCRIPTION: Command to manage IP addresses for applications on Fly.io using the flyctl CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/index.html.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n[fly ips](/docs/flyctl/ips/)\n```\n\n----------------------------------------\n\nTITLE: Basic WireGuard Peer Removal Command\nDESCRIPTION: Command syntax for removing a WireGuard peer connection from an organization. Requires organization name and peer name parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_remove.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard remove [org] [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for Listing Host Incidents\nDESCRIPTION: The base command syntax for listing host incidents in Fly applications.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents_hosts_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly incidents hosts list [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options that apply to all Fly CLI commands, including API access token specification, debug mode for additional logs, and verbose output option.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_private.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI\nDESCRIPTION: Global configuration options available across all fly CLI commands, including API access token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_unset.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Apps Command Usage\nDESCRIPTION: The basic command structure for interacting with Fly applications via CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly apps [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Secrets Command Options\nDESCRIPTION: Help flag option available for the secrets command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for secrets\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly litefs-cloud clusters list' Command\nDESCRIPTION: These are the available options for the 'fly litefs-cloud clusters list' command. They allow for customizing the output format, limiting the number of results, specifying an offset, and targeting a specific organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_clusters_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -j, --json         JSON output\n      --limit int    Number of results to return (default 50)\n      --offset int   Index of results to return from\n  -o, --org string   The target Fly.io organization\n```\n\n----------------------------------------\n\nTITLE: Options for Fly Postgres Backup Config Command\nDESCRIPTION: This snippet shows the available option for the 'fly postgres backup config' command, which is the help flag to display usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_config.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for config\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly extensions sentry list\nDESCRIPTION: Lists available options for the 'fly extensions sentry list' command, including help flag, organization targeting, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_sentry_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Fly Doctor Global Options\nDESCRIPTION: Shows global options that apply to all fly commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_doctor.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n```\n\n----------------------------------------\n\nTITLE: Options for fly machine egress-ip release command in Fly.io CLI\nDESCRIPTION: Lists the available options for the 'fly machine egress-ip release' command. Options include specifying the application name, configuration file path, displaying help, and accepting all confirmations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip_release.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for release\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global options available for all fly CLI commands, including API token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Shows global options that can be used with any Fly CLI command, including authentication token specification and debugging flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_restore.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Postgres Commands\nDESCRIPTION: Global configuration options that apply to all Postgres-related commands including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_failover.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Base MySQL Extension Command\nDESCRIPTION: The base command structure for interacting with MySQL databases through Fly extensions.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions mysql [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating LiteFS Cloud Token Command\nDESCRIPTION: Basic command syntax for creating a new LiteFS Cloud API token using the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_litefs-cloud.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens create litefs-cloud [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mount in fly.toml\nDESCRIPTION: This configuration in fly.toml specifies where to mount your persistent volume in the application container filesystem.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[mounts]\n  source=\"name\"\n  destination=\"/mnt/name\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Postgres Backup Configuration Command\nDESCRIPTION: Main command for showing the backup configuration of a Postgres instance in Fly.io. Requires application name and can accept optional configuration path.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_config_show.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres backup config show [flags]\n```\n\n----------------------------------------\n\nTITLE: Modifying Postgres Role Permissions\nDESCRIPTION: SQL command to modify the EdgeDB app's Postgres role, granting necessary permissions to create roles and databases required for EdgeDB functionality.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\npostgres=# alter role myedgedb createrole createdb;\nALTER ROLE\npostgres=# \\quit\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Agent Stop Command\nDESCRIPTION: Basic command syntax for stopping the Fly agent process.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_stop.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly agent stop [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Rails One Pager Documentation\nDESCRIPTION: YAML frontmatter that configures a consolidated Rails documentation page. It sets the title, layout type, status, TOC setting, and includes paths to multiple documentation sections that will be combined into a single page.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/one-pager.html.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Rails One Pager\nlayout: one-pager\nstatus: alpha\ntoc: false\npaths:\n  - docs/rails/getting-started\n  - docs/rails/the-basics\n  - docs/rails/advanced-guides\n---\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options apply to all Fly CLI commands, including the Arcjet dashboard command. They allow setting the API access token and adjusting output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Available options specific to the regions command, including help and JSON output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_regions.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for regions\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI Commands in Bash\nDESCRIPTION: These global options can be used with various fly CLI commands, including the 'tokens 3p add-discharge' command. They allow specifying an API access token, enabling debug mode, and setting verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_add-discharge.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options for Fly.io CLI\nDESCRIPTION: Global configuration options available for all Fly.io CLI commands, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_consul_detach.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Secrets Deployment Command\nDESCRIPTION: The main command syntax for deploying secrets to a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets deploy [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: Presents the global options available for all Fly CLI commands, including setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_restart.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic LiteFS Cloud Command Usage\nDESCRIPTION: Basic command syntax for using the LiteFS Cloud CLI tool\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly litefs-cloud [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Tokens Debug Command Usage\nDESCRIPTION: Shows the basic command syntax for debugging Fly.io API tokens.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_debug.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens debug [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options available across all Fly.io CLI commands, including authentication and debugging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands in Bash\nDESCRIPTION: Global options available for all fly CLI commands, including API access token, debug mode, and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_remove.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Executing Redis Plans Command in Fly CLI\nDESCRIPTION: This command lists available Redis plans. It can be run with optional flags for help or additional options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_plans.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly redis plans [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly Agent Command Options\nDESCRIPTION: Available help options specific to the Fly agent command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for agent\n```\n\n----------------------------------------\n\nTITLE: Fly Doctor Command Options\nDESCRIPTION: Available command-specific options including application name, config path, force flag, and help.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_doctor_diag.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n      --force           Send diagnostics even if we can't find your local Fly.io app\n  -h, --help            help for diag\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global options that can be used with any storage command, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options and Help Flag\nDESCRIPTION: Available command-specific options for the logout command, including the help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_logout.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for logout\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Kafka Commands\nDESCRIPTION: Shows global options available for all Fly CLI commands, including API access token specification and debug/verbose output controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options available for all Fly CLI commands, including API access token specification and debug/verbose output controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI\nDESCRIPTION: Global configuration options that apply to all Fly.io CLI commands including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres_proxy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic SFTP GET Command Usage\nDESCRIPTION: Basic command syntax for retrieving files from a remote VM using Fly.io's SFTP functionality.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp_get.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly sftp get <path> [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global configuration options applicable to all Fly CLI commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_invite.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global configuration options applicable to all Fly CLI commands, including API authentication and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents_hosts_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global configuration options available for all volume snapshot commands, including API access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_snapshots.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Modifying Name Partial for Turbo Frames\nDESCRIPTION: Updates to the name partial template to implement Turbo Frame functionality.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/turbo-streams-and-action-cable.html.md#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- <div id=\"<%= dom_id name %>\">\n+ <%= turbo_frame_tag(dom_id name) do %>\n    <p>\n      <strong>Name:</strong>\n      <%= name.name %>\n    </p>\n\n- </div>\n+ <% end %>\n```\n\n----------------------------------------\n\nTITLE: Cookie Generation Command\nDESCRIPTION: Elixir command to generate a secure cookie for node authentication\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/clustering.html.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nBase.url_encode64(:crypto.strong_rand_bytes(40))\n```\n\n----------------------------------------\n\nTITLE: Setting RAILS_MASTER_KEY Environment Variable in Windows PowerShell\nDESCRIPTION: PowerShell command to set the RAILS_MASTER_KEY environment variable by reading from the local master.key file. This is the Windows equivalent of the Unix command for managing Rails master keys.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/configuration.html.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:RAILS_MASTER_KEY = Get-Content 'config\\master.key'\n```\n\n----------------------------------------\n\nTITLE: Local Options for Backup Config Update\nDESCRIPTION: Available local flags for customizing the backup configuration update, including application name, archive timeout, backup frequency, and redundancy settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_config_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string                     Application name\n      --archive-timeout string         Archive timeout\n  -c, --config string                  Path to application configuration file\n      --full-backup-frequency string   Full backup frequency\n  -h, --help                           help for update\n      --minimum-redundancy string      Minimum redundancy\n      --recovery-window string         Recovery window\n```\n\n----------------------------------------\n\nTITLE: Inviting Team Members to Production Environment on Fly.io\nDESCRIPTION: This command grants access to specific team members for the production environment. This supports HIPAA access control requirements by limiting PHI access to authorized personnel only.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ fly orgs invite somebody@$MYORG.com --org $MYORG-production\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly mysql destroy' Command in Bash\nDESCRIPTION: This command is used to permanently destroy a MySQL database in Fly.io. It requires specifying the database name and supports various flags for configuration and confirmation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mysql destroy [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Volume Snapshots Help Options\nDESCRIPTION: Available help options for the snapshots command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_snapshots.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for snapshots\n```\n\n----------------------------------------\n\nTITLE: Creating Staging Directory for Configuration Files\nDESCRIPTION: Command to create a staging directory to store configuration files specific to staging environments.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_10\n\nLANGUAGE: cmd\nCODE:\n```\nmkdir staging\n```\n\n----------------------------------------\n\nTITLE: Fastify Node.js Server Configuration - Basic\nDESCRIPTION: Initial Fastify server setup that listens only on localhost, which would cause deployment issues on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/getting-started/troubleshooting.html.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Require the framework and instantiate it\n\n// ESM\nimport Fastify from 'fastify'\nconst fastify = Fastify({\n  logger: true\n})\n// CommonJs\nconst fastify = require('fastify')({\n  logger: true\n})\n\n// Declare a route\nfastify.get('/', function (request, reply) {\n  reply.send({ hello: 'world' })\n})\n\n// Run the server!\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is now listening on ${address}\n})\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Cluster Creation Global Options\nDESCRIPTION: Global configuration options that apply to all LiteFS Cloud commands including API token setting and debug modes\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_clusters_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options apply to all Fly CLI commands, including setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_leases_clear.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: Global command flags available across all Fly.io CLI commands, including authentication, debugging, and verbosity settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global options that can be used with any Fly CLI command, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_import.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Auth Command Options\nDESCRIPTION: Help flag option available for the auth command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for auth\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options for Fly.io Commands\nDESCRIPTION: Global options that can be used with any Fly.io CLI command including the storage update command. These options control authentication, debugging, and output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Platform Command in Bash\nDESCRIPTION: This snippet shows the basic usage of the 'fly platform' command. It can be followed by a specific subcommand and optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly platform [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: Global options applicable to all Fly.io CLI commands, including the SFTP shell command. These options control authentication, debugging, and output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp_shell.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options apply to all Fly CLI commands, including 'managed-postgres attach'. They allow setting the API access token and controlling debug and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres_attach.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Base Storage Command Usage\nDESCRIPTION: The base command syntax for using the Fly storage CLI commands.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly storage [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Organizations Command Options\nDESCRIPTION: Available options for the 'fly orgs' command, including a help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for orgs\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly orgs list\nDESCRIPTION: Lists the available options for the orgs list command, including help and JSON output formatting\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Using fly wireguard token update Command in Bash\nDESCRIPTION: This command is used to update a WireGuard token in the Fly CLI. It requires setting the FLY_WIREGUARD_TOKEN environment variable. The command takes a name and file as arguments, with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard token update [name] [file] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global flags available across all fly CLI commands, including access token configuration and debug options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options apply to all Fly CLI commands, including 'fly certs show'. They provide functionality for authentication, debugging, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_show.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Presents global options available for all Fly CLI commands, including authentication, debugging, and verbosity settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_sentry_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options can be used with the 'fly machine start' command and other Fly CLI commands. They include setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_start.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options in Bash\nDESCRIPTION: These are the global options available for all Fly CLI commands, including setting the API access token and debug/verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_proxy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options available across all fly commands that can be used with whoami command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_whoami.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the fly postgres renew-certs Command in Bash\nDESCRIPTION: This command renews SSH certificates for a Postgres cluster. It accepts various flags to specify the application, configuration, and certificate validity period.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_renew-certs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres renew-certs [flags]\n```\n\n----------------------------------------\n\nTITLE: Modifying Rails Routes for Root Path\nDESCRIPTION: Diff showing the modification of config/routes.rb to set the root path to the Rails welcome page.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n Rails.application.routes.draw do\n   # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html\n\n   # Defines the root path route (\"/\")\n-  # root \"articles#index\"\n+  root \"rails/welcome#index\"\n end\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Script with Specific Oban Queues\nDESCRIPTION: Shell script for the app process that starts the Phoenix HTTP server with specific Oban queue configurations.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\ncd -P -- \"$(dirname -- \"$0\")\"\nPHX_SERVER=true OBAN_QUEUES=\"default,1 media,0, events,0\" exec ./my_app start\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly incidents list Command\nDESCRIPTION: Shows the basic syntax for using the fly incidents list command to display active incidents on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly incidents list [flags]\n```\n\n----------------------------------------\n\nTITLE: Launching New Private Fly App with Flycast\nDESCRIPTION: Command to create a new Fly.io application with a private Flycast IPv6 address instead of public IP addresses.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autostart-internal-apps.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly launch --flycast\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Agent Command\nDESCRIPTION: Basic usage syntax for the Fly agent command. The command requires a specific subcommand to perform actions like ping, restart, run, start, or stop.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly agent [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Workflows Directory\nDESCRIPTION: Commands to create the GitHub Actions workflow directory and file.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/github-actions.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nmkdir -p .github/workflows\ntouch .github/workflows/main.yml\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options can be used with any Fly CLI command, including 'fly wireguard list'. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Flyctl MCP Server Command-Specific Options in Bash\nDESCRIPTION: Command-specific options for the 'fly mcp server' command. Currently, it only includes a help flag for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp_server.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for server\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global options available across all Fly.io CLI commands including authentication and logging settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global configuration options available for all fly CLI commands including access token, debug mode and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_status.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Kafka Extension Help Options\nDESCRIPTION: Available help flag for the Kafka extension command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for kafka\n```\n\n----------------------------------------\n\nTITLE: Global Redis CLI Options\nDESCRIPTION: Global configuration options available for all Redis CLI commands, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_connect.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly extensions sentry list Command\nDESCRIPTION: Shows the basic syntax for using the 'fly extensions sentry list' command to display Sentry projects associated with a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_sentry_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions sentry list [flags]\n```\n\n----------------------------------------\n\nTITLE: Checking Vector Index Status\nDESCRIPTION: Command to check the status of a specific Vector index. This provides information about whether the index is properly created and available.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/vector.html.md#2025-04-16_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nfly ext Vector status my-vector-index\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: Global options that apply to all fly commands including the dig command, such as authentication tokens and verbosity settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_dig.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Synthetics Command Usage\nDESCRIPTION: Basic command structure for using the Fly.io synthetics monitoring tool.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_synthetics.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly synthetics [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Vector Command Options\nDESCRIPTION: Help flag option available for the vector command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for vector\n```\n\n----------------------------------------\n\nTITLE: WireGuard Token Global Options\nDESCRIPTION: Global configuration options including API access token, debug mode, and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_start.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Create Global Options\nDESCRIPTION: Global options that can be used with the 'fly machine create' command, including access token and debugging flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: WireGuard Peer IPv6 Address Query Result\nDESCRIPTION: Output showing the IPv6 address of a specific WireGuard peer in the Fly.io organization. This confirms the peer is registered and accessible.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_16\n\nLANGUAGE: output\nCODE:\n```\nfdaa:0:18:a7b:7d:f066:b83b:102\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io Commands\nDESCRIPTION: Global configuration options applicable to all Fly.io commands, including API token specification and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_ticket.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI\nDESCRIPTION: Lists the global options available across all Fly.io CLI commands, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_console.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: These are global options that can be used with the 'fly ping' command, as well as other Fly CLI commands. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ping.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: SFTP Find Command Options\nDESCRIPTION: Available command line options for configuring the SFTP find operation, including VM address, application name, and connection parameters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp_find.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -A, --address string         Address of VM to connect to\n  -a, --app string             Application name\n  -C, --command string         command to run on SSH session\n  -c, --config string          Path to application configuration file\n      --container string       Container to connect to\n  -h, --help                   help for find\n      --machine string         Run the console in the existing machine with the specified ID\n  -o, --org string             The target Fly.io organization\n  -g, --process-group string   The target process group\n      --pty                    Allocate a pseudo-terminal (default: on when no command is provided)\n  -q, --quiet                  Don't print progress indicators for WireGuard\n  -r, --region string          The target region (see 'flyctl platform regions')\n  -s, --select                 select available instances\n  -u, --user string           Unix username to connect as (default \"root\")\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global options available across all Redis commands, including authentication, debugging, and output verbosity settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Synthetics Agent Options in Bash\nDESCRIPTION: Options specific to the 'fly synthetics agent' command, including a help flag for additional information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_synthetics_agent.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for agent\n```\n\n----------------------------------------\n\nTITLE: Token Introspection Response in JSON\nDESCRIPTION: JSON response from the token introspection endpoint, containing user information, organization details, scope, and application data.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource_owner_id\": \"rzjkdw3g0ypx061q\",\n  \"user_id\": \"rzjkdw3g0ypx061q\",\n  \"user_name\": \"Gabriella Fern\",\n  \"email\": \"5mrgw4xzkxoz02yk@customer.fly.io\",\n  \"organizations\": [\n      {\n        \"id\": \"zd3e5wvkjel6pgqw\",\n        \"role\": \"admin\"\n      },\n      {\n        \"id\": \"zgyep87w1m4q06d4\",\n        \"role\": \"member\"\n      }\n    ],\n  \"scope\": [\"read\"],\n  \"expires_in\": 7200,\n  \"application\": {\"uid\": \"logjam\"},\n  \"created_at\": 1683740928\n}\n```\n\n----------------------------------------\n\nTITLE: Available Options for fly dashboard metrics Command\nDESCRIPTION: Lists the specific command-line options available for the fly dashboard metrics command, including application name specification, configuration file path, and help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_dashboard_metrics.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for metrics\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly image Command\nDESCRIPTION: Shows the basic syntax for using the fly image command in the Fly.io CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly image [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Detecting Release Command Environment in Bash Script\nDESCRIPTION: This bash snippet demonstrates how to detect if a script is running in the context of a release command. It uses the presence of the RELEASE_COMMAND environment variable to determine the execution context.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/customizing-deployments.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif [ -z \"$RELEASE_COMMAND\" ]; then\n    # We are NOT in a temporary VM, run as normal...\nelse\n    # We are in the temporary VM created\n    # for release commands...\nfi\n```\n\n----------------------------------------\n\nTITLE: List Supabase Databases Command Usage\nDESCRIPTION: Basic command syntax for listing Supabase databases in Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions supabase list [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Sequel Ruby Gem for Database Migration\nDESCRIPTION: This command installs the Sequel Ruby gem, which provides tools for copying databases between different database systems.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_14\n\nLANGUAGE: cmd\nCODE:\n```\ngem install sequel\n```\n\n----------------------------------------\n\nTITLE: Usage of 'fly postgres detach' Command in Fly.io CLI\nDESCRIPTION: This command is used to detach a Postgres cluster from a Fly.io application. It requires specifying the Postgres app name and supports various flags for configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_detach.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres detach <POSTGRES APP> [flags]\n```\n\n----------------------------------------\n\nTITLE: Help Option for Version Upgrade\nDESCRIPTION: Flag to display help information for the version upgrade command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_version_upgrade.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for upgrade\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options can be used with any Fly CLI command, including the storage bucket status command. They allow setting the API access token, enabling debug output, and verbose logging.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Standby Machine with flyctl\nDESCRIPTION: Command-line instruction for creating a standby Machine from a different image. This allows for custom recovery scripts or alerts when a watched Machine becomes unavailable.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/resilient-apps-multiple-machines.html.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfly machine run <image> --standby-for <machine-id>\n```\n\n----------------------------------------\n\nTITLE: Fly Global Command Options\nDESCRIPTION: Global options available across all fly CLI commands including API token, debug and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: SSH Client Configuration\nDESCRIPTION: SSH client configuration for custom hostnames, users, and port settings\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/opensshd.html.md#2025-04-16_snippet_5\n\nLANGUAGE: config\nCODE:\n```\nHost appname\n  Hostname appname.fly.dev\n  User rails\n  Port 2222\nHost *.appname\n  HostName %h.internal\n  ProxyJump rails@appname.fly.dev:2222\n  User rails\n  Port 2222\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Global Options\nDESCRIPTION: Global configuration options for the LiteFS Cloud CLI, including API token and debug settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all fly CLI commands, including API token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip_allocate.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Certificate Listing Command\nDESCRIPTION: The main command syntax for listing SSL certificates associated with a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly certs list [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly MCP Wrap Global Options in Bash\nDESCRIPTION: Specifies global options applicable to the 'fly mcp wrap' command, including setting the Fly API Access Token and enabling debug or verbose output. These options can be used to customize the command's behavior and logging.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp_wrap.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: WireGuard Help Options - Fly.io CLI\nDESCRIPTION: Help flag option available for the WireGuard command module.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for wireguard\n```\n\n----------------------------------------\n\nTITLE: Using the Arcjet Extension Command\nDESCRIPTION: The base command for using the Arcjet extension within the Fly CLI. This command is the entry point for all Arcjet-related operations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions arcjet [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly Global Command Options\nDESCRIPTION: Global configuration options that apply to all Fly CLI commands, including API authentication and logging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Incidents Command Usage\nDESCRIPTION: The basic command syntax for using the fly incidents command with optional commands and flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly incidents [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: Global options applicable to various Fly.io CLI commands, including setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_org.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options available for all Fly CLI commands, including authentication token specification and verbosity settings for debugging.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: WireGuard Token Help Options\nDESCRIPTION: Basic help flag options available for the WireGuard token commands.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for token\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global command-line options that apply to all Fly.io CLI commands, including API token specification and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_ssh.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Dashboard Global Options\nDESCRIPTION: Global configuration options that apply to all Fly CLI commands including dashboard.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic SSH Token Creation Command\nDESCRIPTION: The base command for creating an SSH access token in Fly.io CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_ssh.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens create ssh [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all Fly.io CLI commands, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_consul_attach.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Help Options\nDESCRIPTION: Shows the help flag option for fly machine commands.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for machine\n```\n\n----------------------------------------\n\nTITLE: Modifying HTML Body Tag to Support Fly Router Controller\nDESCRIPTION: ERB template code that adds data attributes to the body tag when running on Fly.io, connecting the page to the fly-router Stimulus controller and providing the current machine ID.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/cell-based.html.md#2025-04-16_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n  <body<% if ENV['FLY_MACHINE_ID'] %> data-instance=\"<%= ENV['FLY_MACHINE_ID'] %>\" data-controller=\"fly-router\"<% end %>>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Virtual Environment Settings\nDESCRIPTION: Commands to configure Poetry to create virtual environments and store them in the project directory. This configuration helps make the development environment more similar to what will be used in a Docker container.\nSOURCE: https://github.com/superfly/docs/blob/main/python/the-basics/initial-setup.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\npoetry config virtualenvs.create true\npoetry config virtualenvs.in-project true\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres Cluster for Staging\nDESCRIPTION: Command to create a PostgreSQL cluster specifically for staging environments on Fly.io, which will be used by the preview apps.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\nfly postgres create --name pg-fly-pr-staging-preview\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly jobs open' Command in Fly.io CLI\nDESCRIPTION: This command opens the Fly.io jobs page in the default browser. It supports a help flag and several global options for configuring the CLI behavior.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_jobs_open.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly jobs open [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: This snippet shows the global options available for all Fly CLI commands, including 'fly extensions'. These options allow users to specify an API access token, enable debug mode, and increase verbosity of output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for WireGuard Commands\nDESCRIPTION: Global configuration options available for all WireGuard-related commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_remove.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Synthetics Agent Global Options in Bash\nDESCRIPTION: Global options applicable to the 'fly synthetics agent' command, including access token specification, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_synthetics_agent.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Viewing multiple key-value secrets in a file\nDESCRIPTION: Example showing the contents of a file-based secret that contains multiple key-value pairs after decoding from Base64.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-run.html.md#2025-04-16_snippet_20\n\nLANGUAGE: cmd\nCODE:\n```\nroot@d891116b465018:/# cat secret-file\nUSER=\"my_name\"\nPASSWORD=\"1a2s3d4f\"\nMACARON=\"macaroon in French\"\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI SFTP Commands\nDESCRIPTION: Global configuration options that apply to all SFTP operations, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp_get.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Incidents Global Options\nDESCRIPTION: Lists the global options available for the incidents command, including API token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global configuration options for Fly.io token management including access token specification and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Wafris Extension Options\nDESCRIPTION: Available options for the 'fly extensions wafris' command. Currently, it only includes a help flag for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for wafris\n```\n\n----------------------------------------\n\nTITLE: Fly Redis Command Options\nDESCRIPTION: Available options for the 'fly redis' command, including the help flag for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for redis\n```\n\n----------------------------------------\n\nTITLE: Fly Scale Global Options\nDESCRIPTION: Global configuration options available for all fly scale commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Installing Superfly CLI using npm\nDESCRIPTION: Command for installing the Superfly CLI tool globally using npm. This is a prerequisite for deploying applications to Superfly.\nSOURCE: https://github.com/superfly/docs/blob/main/styles/Google/vocab.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @superfly/fly\n```\n\n----------------------------------------\n\nTITLE: Basic LiteFS Cloud Cluster Command Usage\nDESCRIPTION: The base command structure for executing LiteFS Cloud cluster operations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_clusters.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly litefs-cloud clusters [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: These global options can be used with various Fly.io CLI commands, including 'fly tokens 3p add'. They allow setting an access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_add.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all fly commands, including API token authentication and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_allocate-v4.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Flyctl Commands\nDESCRIPTION: Displays the global options that can be used with all Flyctl commands, including the Supabase status command. These options allow setting the API access token and controlling debug output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly wireguard list' Command in Fly CLI\nDESCRIPTION: These are the specific options available for the 'fly wireguard list' command. It includes help and JSON output options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Flyctl Global Options in Bash\nDESCRIPTION: Global options applicable to all flyctl commands, including the MCP server command. These options allow setting an API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp_server.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly tokens attenuate' Command in Bash\nDESCRIPTION: This command is used to attenuate a Fly.io API token. It can take flags for specifying a file to read caveats from and for displaying help information. The API token can be provided via the -t argument or the FLY_API_TOKEN environment variable.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_attenuate.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly tokens attenuate [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly Platform Commands\nDESCRIPTION: Shows the global configuration options available for all Fly platform commands including API access token and debug settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform_regions.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using Fly CLI Incidents Hosts Command\nDESCRIPTION: The main command syntax for accessing host-related incidents in Fly applications. This is the base command that can be used with additional subcommands.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents_hosts.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly incidents hosts [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Machine Command Usage\nDESCRIPTION: Basic command structure for using fly machine commands with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Frontmatter for Advanced Guides Page\nDESCRIPTION: This snippet defines the YAML frontmatter for the advanced guides page in the Superfly framework documentation. It sets the title, specifies a custom layout, disables the table of contents, and sets the order of the page.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides.html.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Advanced guides\nlayout: framework_docs_overview\ntoc: false\norder: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Status Command\nDESCRIPTION: Command to check status of a named Redis database instance via fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_status.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly redis status <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Instance ID to HTML Body Tag in Rails\nDESCRIPTION: This ERB snippet shows how to add the Fly Machine ID as a data attribute to the body tag in a Rails layout file. It also includes a data-controller attribute for Stimulus.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/sticky-sessions.html.md#2025-04-16_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<body data-instance=\"<%= ENV['FLY_MACHINE_ID'] %>\"\n   data-controller=\"sticky-session\">\n```\n\n----------------------------------------\n\nTITLE: Verifying Database Migration\nDESCRIPTION: Commands to connect to the newly migrated database and verify the imported data by listing all tables.\nSOURCE: https://github.com/superfly/docs/blob/main/postgres/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly pg connect -a myapp-db -d myapp\n```\n\nLANGUAGE: output\nCODE:\n```\nmyapp=# \\dt\n                     List of relations\n Schema |              Name                | Type  |  Owner\n--------+----------------------------------+-------+----------\n public | [ Your tables will appear here ] | table | postgres\n public | [              ...             ] | table | postgres\n public | [ Your tables will appear here ] | table | postgres\n```\n\n----------------------------------------\n\nTITLE: Customizing GitHub Action Workflow with Inputs\nDESCRIPTION: Example of how to customize the GitHub Action workflow by adding inputs to the deploy step. This snippet shows how to specify a custom app name and configuration file.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/review-apps-guide.html.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Deploy PR app to Fly.io\n    id: deploy\n    uses: superfly/fly-pr-review-apps@1.2.0\n    with:\n      name: my-app-name-pr-${{ github.event.number }}\n      config: fly.review.toml\n```\n\n----------------------------------------\n\nTITLE: Running Fly Synthetics Agent in Bash\nDESCRIPTION: This command runs the Synthetics agent in the foreground. It includes options for help, access token, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_synthetics_agent.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly synthetics agent [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling Synthetics Command Syntax\nDESCRIPTION: Base command for enabling synthetics functionality in Fly.io applications\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_synthetics_enable.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly settings synthetics enable [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Flyctl CLI\nDESCRIPTION: Global options applicable to all Flyctl commands, including API access token, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_vm.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly storage list' Command in Bash\nDESCRIPTION: Lists the specific options available for the 'fly storage list' command. These options allow users to specify the target organization and automatically accept confirmations.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These are global options that can be used with any Fly CLI command, including the storage update command. They allow setting the API access token and controlling debug output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global flags that can be used with the version upgrade command, including API token authentication and debug options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_version_upgrade.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Related Fly Agent Commands\nDESCRIPTION: Reference to related Fly agent commands that provide additional functionality for managing the Fly agent.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_run.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly agent](/docs/flyctl/agent/)  - Commands that manage the Fly agent, a background process that manages flyctl wireguard connections\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI in Bash\nDESCRIPTION: Lists the global options available for the Fly.io command line interface. These options include setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options can be used with any Fly CLI command, including volume snapshot creation. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_snapshots_create.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Flyctl Global Options\nDESCRIPTION: Lists the global command line options available for all flyctl commands, including access token configuration, debug mode, and help options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n  -h, --help                  help for fly\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic VM Sizes Command Usage\nDESCRIPTION: Basic command syntax for viewing available VM sizes on the Fly platform.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform_vm-sizes.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly platform vm-sizes [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI commands\nDESCRIPTION: Global options applicable to all fly CLI commands, including 'fly tokens revoke'. These options allow specifying an access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_revoke.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Disabling Fly CLI Auto-Updates Command\nDESCRIPTION: Base command to disable automatic updates in Fly CLI\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_autoupdate_disable.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly settings autoupdate disable [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying help for fly volumes command\nDESCRIPTION: Shows the help information for the 'fly volumes' command, including usage instructions and available options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for volumes\n```\n\n----------------------------------------\n\nTITLE: Options for Disabling Synthetics\nDESCRIPTION: Available options for the 'disable' command, which currently only includes a help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_synthetics_disable.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for disable\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options apply to all Fly CLI commands, including the Wafris dashboard command. They allow setting the API access token and controlling debug and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris_dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for Managed Postgres Command\nDESCRIPTION: Displays the help flag available for the managed-postgres command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for managed-postgres\n```\n\n----------------------------------------\n\nTITLE: Generating Machine Job\nDESCRIPTION: Command to generate a Rails job for managing Fly.io machines.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_10\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate job machine\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These are global options available for all Fly CLI commands, including 'fly orgs remove'. They allow setting an API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_remove.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: These global options can be used with any Fly CLI command, including 'fly mysql destroy'. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the Fly MySQL CLI Command\nDESCRIPTION: Basic usage syntax for the 'fly mysql' command. This command is used to manage MySQL databases on Fly.io and accepts various subcommands and flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mysql [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Postgres Attachment Command Options\nDESCRIPTION: Available configuration options for the postgres attach command, including app name, database settings, and user privileges.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_attach.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string             Application name\n  -c, --config string          Path to application configuration file\n      --database-name string   The designated database name for this consuming app.\n      --database-user string   The database user to create. By default, we will use the name of the consuming app.\n  -h, --help                   help for attach\n      --superuser              Grants attached user superuser privileges (default true)\n      --variable-name string   The environment variable name that will be added to the consuming app.  (default \"DATABASE_URL\")\n  -y, --yes                    Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Help Options\nDESCRIPTION: Command flag for accessing help documentation\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for litefs-cloud\n```\n\n----------------------------------------\n\nTITLE: Output from Vector Index Status Check\nDESCRIPTION: Example output showing the status of a Vector index, indicating that it has been successfully created.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/vector.html.md#2025-04-16_snippet_6\n\nLANGUAGE: output\nCODE:\n```\nRStatus\n  Name   = my-vector-index\n  Status = created\n```\n\n----------------------------------------\n\nTITLE: Command Options for Host Incident Listing\nDESCRIPTION: Available command-specific options including application selection, configuration file path, help documentation, and JSON output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents_hosts_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for list\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Uploading SQLite Database to Fly.io Volume Using SFTP\nDESCRIPTION: This SFTP command uploads a local SQLite database file to the persistent volume mounted in your Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n» put ./name.db mnt/volume_name/name-prod.db\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global configuration options available for all Kafka extension commands, including authentication and debugging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global flags available across all Fly.io CLI commands, including authentication token and debug options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_config_show.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Pinging App Machine on Linux via IPv6\nDESCRIPTION: Command to ping a Fly.io application machine from Linux using IPv6 and the internal DNS name. This verifies network connectivity to the app.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_21\n\nLANGUAGE: cmd\nCODE:\n```\nping -6 my-app.internal\n```\n\n----------------------------------------\n\nTITLE: Global Extension Options\nDESCRIPTION: Global configuration options available for all Fly extension commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI Commands in Bash\nDESCRIPTION: Lists the global options available across all fly CLI commands, including authentication token specification and various verbosity controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: Global options available for all Fly CLI commands, including access token, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for flyctl Commands\nDESCRIPTION: Global options that can be used with any flyctl command including API access token specification and debug/verbose output controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_leases_view.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly tokens create Command in Bash\nDESCRIPTION: These are the global options available for the 'fly tokens create' command. They include setting the Fly API Access Token, enabling debug mode for additional logs, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These are global options that can be used with the 'fly settings analytics enable' command, including setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_analytics_enable.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using fly mcp wrap Command in Bash\nDESCRIPTION: Demonstrates the usage syntax for the 'fly mcp wrap' command. This command wraps an MCP stdio program and allows passing additional options to the MCP program after double dashes.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp_wrap.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mcp wrap [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly orgs remove' Command\nDESCRIPTION: This snippet shows the available options for the 'fly orgs remove' command. Currently, there is only a help option.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_remove.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for remove\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for 'fly postgres list'\nDESCRIPTION: Lists the command-specific options available for the 'fly postgres list' command. It includes options for help and JSON output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Presents the global options applicable to all Fly CLI commands, including setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for fly extensions kafka status\nDESCRIPTION: Available options specific to the 'status' command, including specifying an application, configuration file path, help documentation, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_status.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for status\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: This snippet shows the global options available for all Fly CLI commands, including the 'fly postgres config update' command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_config_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: Global options available for all fly CLI commands including API token specification, debug mode, and verbose output control.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_move.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Resource Creation Webhook Example in JSON\nDESCRIPTION: JSON structure for a resource creation webhook, including organization_id and user_id of the provisioning user.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"1693513586\",\n  \"action\": \"resource.created\",\n  \"resource\": {\n    \"plan\": \"scaler_pro\",\n    \"name\": \"myprod-db\",\n    \"organization_id\": \"kg032ljbmqs0j\",\n    \"user_id\": \"nh0kweyt23jyhl\",\n    \"id\": \"5lgmabb3y30\",\n    \"status\": \"ready\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: This snippet shows the global options available for all Fly CLI commands, including setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly machine egress-ip Command\nDESCRIPTION: The basic syntax for using the fly machine egress-ip command in the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine egress-ip [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options available across all Fly CLI commands, including API token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Command Usage\nDESCRIPTION: Base command structure for interacting with Postgres clusters via Fly.io CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the Fly Dig Command Syntax\nDESCRIPTION: The basic syntax for using the fly dig command to query DNS records against Fly.io's internal DNS server.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_dig.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly dig [type] <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Help Options for fly jobs Command\nDESCRIPTION: Shows the available help flag option for the jobs command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_jobs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for jobs\n```\n\n----------------------------------------\n\nTITLE: Basic Supabase Command Structure\nDESCRIPTION: The base command structure for interacting with Supabase databases through Fly.io CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions supabase [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Related MySQL Commands\nDESCRIPTION: A reference to the parent command for MySQL database management in Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_list.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly extensions mysql](/docs/flyctl/extensions-mysql/)   - Provision and manage MySQL database clusters\n```\n\n----------------------------------------\n\nTITLE: Basic SFTP Find Command Usage\nDESCRIPTION: Basic syntax for using the SFTP find command to list files on a remote VM\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp_find.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly sftp find [path] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart Visualization\nDESCRIPTION: Code to transform data and create a sorted bar chart using VegaLite\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/interesting-things-with-livebook.html.md#2025-04-16_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n# Convert the raw data into a Bar Chart friendly format\ndata =\n  Enum.map(personality_counts, fn {type, count} ->\n    %{\"Personality\" => Atom.to_string(type), \"Question Count\" => count}\n  end)\n\n# Sort the data by counts to order the results\ndata = Enum.sort_by(data, & &1[\"Question Count\"], :desc)\n\nVl.new(width: 300, height: 300)\n|> Vl.data_from_values(data)\n|> Vl.mark(:bar)\n|> Vl.encode_field(:x, \"Personality\",\n  type: :nominal,\n  axis: [label_angle: 0],\n  sort: [field: \"Question Count\", order: \"descending\"]\n)\n|> Vl.encode_field(:y, \"Question Count\", type: :quantitative)\n```\n\n----------------------------------------\n\nTITLE: Deleting WireGuard Token Command Usage\nDESCRIPTION: Main command syntax for deleting a WireGuard token. The token can be specified either by name or token value, and an optional organization can be specified.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_delete.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard token delete [org] [token] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Livebook as an Escript\nDESCRIPTION: Commands for installing Livebook as an Escript using Mix.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-livebook-to-your-app.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmix do local.rebar --force, local.hex --force\nmix escript.install hex livebook\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all Fly CLI commands, including authentication and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_users_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for 'fly releases' in Bash\nDESCRIPTION: These are the specific options available for the 'fly releases' command. They allow specifying the application name, configuration file path, help display, image reference display, and JSON output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_releases.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for releases\n      --image           Display the Docker image reference of the release\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Displays the global options that can be used with all Fly CLI commands, including 'fly postgres list'. These options allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global options that can be used with any Fly CLI command, including the Wafris extension. These options allow setting the API access token, enabling debug output, and increasing verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Doctor Global Options\nDESCRIPTION: Global options available across all fly doctor commands including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_doctor_diag.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: SSH Credential Command Options\nDESCRIPTION: Available command-line flags for configuring SSH credential generation, including agent integration, storage location, and validity period settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_issue.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --agent              Add key to SSH agent\n  -d, --dotssh             Store keys in ~/.ssh, like normal keys\n  -h, --help               help for issue\n      --hours int          Expiration, in hours (<72) (default 24)\n  -o, --org string         The target Fly.io organization\n      --overwrite          Overwrite existing SSH keys in same location, if we generated them\n  -u, --username strings   Unix usernames the SSH cert can authenticate as (default [root,fly])\n```\n\n----------------------------------------\n\nTITLE: Tigris Dashboard Global Options\nDESCRIPTION: Global configuration options that apply to all dashboard commands, including API access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Token Creation Options\nDESCRIPTION: Global configuration options available for all token creation commands, including API access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_machine-exec.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for 'fly tokens' Command in Bash\nDESCRIPTION: Shows the option to display help information for the 'fly tokens' command. This can be useful for understanding the command's usage and available options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for tokens\n```\n\n----------------------------------------\n\nTITLE: Postgres Command Options\nDESCRIPTION: Help flag available for the postgres command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for postgres\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Redis Plans Command\nDESCRIPTION: This snippet shows the command-specific options for the 'fly redis plans' command. Currently, only a help flag is available.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_plans.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for plans\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: These are global options applicable to various Fly CLI commands, including the Redis create command. They provide options for authentication, debugging, and output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_create.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI Commands\nDESCRIPTION: Shows the global options available across all fly CLI commands, including authentication via access token and debugging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Pull Request Events Configuration in GitHub Actions\nDESCRIPTION: YAML snippet that specifies which pull request events should trigger the workflow execution, including events like labeled, synchronize, opened, reopened, and closed.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npull_request:\n  types: [labeled, synchronize, opened, reopened, closed]\n```\n\n----------------------------------------\n\nTITLE: MySQL destroy command options\nDESCRIPTION: Available options for the MySQL destroy command, including app specification, configuration path, help, and confirmation bypass.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for destroy\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Fly Extensions Command Options in Bash\nDESCRIPTION: This snippet displays the available options for the 'fly extensions' command. Currently, it only shows the help flag, which provides assistance for using the command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for extensions\n```\n\n----------------------------------------\n\nTITLE: Checking Node Name When Troubleshooting Elixir Remote Shell\nDESCRIPTION: Example of an invalid remote shell connection showing a node name with a \"rem-\" prefix, indicating that the IEx session is not properly connected to the target node.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/troubleshooting.html.md#2025-04-16_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n:\"rem-ea46-hello_elixir@fdaa:0:1da8:a7b:115:5641:7e85:2\"\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options are available for all Fly CLI commands, including 'fly orgs delete'. They allow setting an API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_delete.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global options that apply to all Fly CLI commands, including API access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_add.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Example IP Release Command\nDESCRIPTION: Example command showing how to release specific public IPv4 and IPv6 addresses from a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autostart-internal-apps.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly ips release 2a09:8280:1::2d:1111 66.241.124.11\n```\n\n----------------------------------------\n\nTITLE: Using the 'fly volumes extend' Command in Bash\nDESCRIPTION: This command extends a Fly volume to a specified size. It requires a volume ID and accepts various flags for configuration. Most machines don't require a restart after extending a volume, but some older machines may need a manual restart.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_extend.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes extend <volume id> [flags]\n```\n\n----------------------------------------\n\nTITLE: GitHub Secret Setting Output\nDESCRIPTION: Example output when successfully setting the FLY_API_TOKEN secret.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/github-actions.html.md#2025-04-16_snippet_4\n\nLANGUAGE: output\nCODE:\n```\n? Paste your secret *******************************************\n\n✓ Set Actions secret FLY_API_TOKEN for <username>/<repository-name>\n```\n\n----------------------------------------\n\nTITLE: Conditional Job Execution Based on PR Label\nDESCRIPTION: YAML snippet that conditionally executes the preview app job only for pull requests with the 'PR preview app' label, providing control over when staging environments are created.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nif: contains(github.event.pull_request.labels.*.name, 'PR preview app')\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: This snippet shows the global options available for all Fly CLI commands, including setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_events.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: IEx Shell Output When Connected\nDESCRIPTION: Example output showing a successful connection to an Elixir application's IEx shell running on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/iex-into-running-app.html.md#2025-04-16_snippet_2\n\nLANGUAGE: output\nCODE:\n```\nConnecting to hello_elixir.internal... complete\nErlang/OTP 23 [erts-11.2.1] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nInteractive Elixir (1.11.2) - press Ctrl+C to exit (type h() ENTER for help)\niex(hello_elixir@fdaa:0:1da8:a7b:ac4:b204:7e29:2)1>\n```\n\n----------------------------------------\n\nTITLE: Related fly image Commands\nDESCRIPTION: Shows related commands that can be used to manage app images in the Fly platform, specifically linking to the parent 'fly image' command documentation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image_update.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly image](/docs/flyctl/image/)     Manage app image\n```\n\n----------------------------------------\n\nTITLE: Fly.io Volume Creation - Global Options\nDESCRIPTION: Global configuration options that apply to all flyctl commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for fly certs check Command\nDESCRIPTION: Available command-line options for the 'fly certs check' command, including application specification, configuration path, help information, and JSON output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_check.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for check\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Global options for fly commands\nDESCRIPTION: Global options that apply to all fly CLI commands, including authentication, debugging, and verbosity settings. These options can be used with any fly command including the ips allocate-v6 command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_allocate-v6.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Config Global Options\nDESCRIPTION: Global configuration options available for all fly config commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands\nDESCRIPTION: Shows the global options available for all fly commands, including access token specification and debug output controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_logs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options can be used with any Fly CLI command, including the 'fly postgres backup create' command. They provide options for authentication and output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options applicable to all Fly CLI commands, including setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_create.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Local Options for fly machine leases Command\nDESCRIPTION: Shows the available local options for the fly machine leases command. Currently only includes the help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_leases.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for leases\n```\n\n----------------------------------------\n\nTITLE: Sentry Extension Command Options\nDESCRIPTION: Help flag option for the Sentry extension command in Fly.io. This flag displays help information about using the Sentry extension.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_sentry.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for sentry\n```\n\n----------------------------------------\n\nTITLE: Fly Apps Help Options\nDESCRIPTION: Basic help flag option for the apps command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for apps\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly machine egress-ip Commands\nDESCRIPTION: Global options that apply to all fly machine commands, including authentication, debugging, and verbosity settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_egress-ip_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: This snippet shows the global options available for all Fly CLI commands, including setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale_memory.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Observer Script without IPv6 Support\nDESCRIPTION: Example of running the IEx session without explicitly enabling IPv6 support, for use when it's already enabled globally.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-observer-to-your-app.html.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\niex --sname my_remote --cookie ${COOKIE} -e \"IO.inspect(Node.connect(:'${FULL_NODE_NAME}'), label: \\\"Node Connected?\\\"); IO.inspect(Node.list(), label: \\\"Connected Nodes\\\"); :observer.start\"\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Fly Regions\nDESCRIPTION: Lists the specific flags available for the regions command including help and JSON output options\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform_regions.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for regions\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Starting Django's Development Server\nDESCRIPTION: Starts Django's built-in development server to test the application locally.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Checking Fly App Logs\nDESCRIPTION: Command to view the logs of a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-livebook-to-your-app.html.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfly logs\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands in Bash\nDESCRIPTION: Displays the global options available for all 'fly' commands, including setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly machine leases Command\nDESCRIPTION: Shows the basic syntax for using the fly machine leases command in the Fly CLI. This is the top-level command for managing machine leases.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_leases.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly machine leases [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Related Kubernetes Commands in Fly CLI\nDESCRIPTION: Reference to the parent Kubernetes command that provides additional functionality for provisioning and managing Kubernetes clusters.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_list.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly extensions kubernetes](/docs/flyctl/extensions-kubernetes/)   - Provision and manage Kubernetes clusters\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Incidents Hosts Command Options\nDESCRIPTION: Basic help flag option available for the incidents hosts command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents_hosts.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for hosts\n```\n\n----------------------------------------\n\nTITLE: Getting Private IPv6 Address for Fly App\nDESCRIPTION: Command to retrieve the private IPv6 address for a specific Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/connect-livebook-to-your-app.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly ips private --app icy-leaf-7381\n```\n\n----------------------------------------\n\nTITLE: Setting Up VegaLite and Project Aliases\nDESCRIPTION: Initial setup code for visualization and database access in Livebook\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/interesting-things-with-livebook.html.md#2025-04-16_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nalias VegaLite, as: Vl\nalias Core.Schemas.Question\nalias Core.Repo\nimport Ecto.Query\n```\n\n----------------------------------------\n\nTITLE: Options for fly apps restart Command\nDESCRIPTION: Available options when using the fly apps restart command, including force-stop for aggressive termination and an option to skip health checks during restart.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_restart.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --force-stop           Performs a force stop against the target Machine\n  -h, --help                 help for restart\n      --skip-health-checks   Restarts app without waiting for health checks\n```\n\n----------------------------------------\n\nTITLE: Configuring Autostop/Autostart in fly.toml\nDESCRIPTION: This TOML snippet shows how to configure autostop/autostart settings for a service in fly.toml. It sets the app to automatically stop and start Machines based on traffic demand.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autoscale-machines.html.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[services]]\n  ...\n  auto_stop_machines = \"stop\"\n  auto_start_machines = true\n  min_machines_running = 0\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Volume Update Command Usage\nDESCRIPTION: The basic command syntax for updating a Fly.io volume, requiring a volume ID and optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_update.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly volumes update <volume id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Postgres Failover Command Options\nDESCRIPTION: Available specific options for the failover command including app selection, configuration path, and force failover settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_failover.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-secondary-region   Allow failover to a machine in a secondary region. This is useful when the primary region is unavailable, but the secondary region is still healthy. This is only available for flex machines.\n  -a, --app string               Application name\n  -c, --config string            Path to application configuration file\n      --force                    Force a failover even if we can't connect to the active leader\n  -h, --help                     help for failover\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global configuration options that apply to all Fly CLI commands, including API token specification and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_litefs-cloud.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose              Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using Fly CLI Wafris Extension\nDESCRIPTION: The main command for interacting with Wafris WAFs through the Fly CLI. It provides access to various subcommands for creating, managing, and destroying WAFs.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly extensions wafris [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global flags that can be used with any Fly CLI command, including the Arcjet create command. These options control API access, debug output, and verbosity levels.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: WireGuard Tunnel Activation Output on Linux\nDESCRIPTION: Terminal output showing the successful activation of a WireGuard tunnel on Linux, including IP configuration and routing setup steps.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_7\n\nLANGUAGE: output\nCODE:\n```\n[#] ip link add mypeer type wireguard\n[#] wg setconf mypeer /dev/fd/63\n[#] ip -6 address add fdaa:0:4:a7b:ab6:0:a:102/120 dev mypeer\n[#] ip link set mtu 1420 up dev mypeer\n[#] resolvconf -a tun.mypeer -m 0 -x\n[#] ip -6 route add fdaa:0:4::/48 dev mypeer\n```\n\n----------------------------------------\n\nTITLE: Django Error Message for Invalid Project Name\nDESCRIPTION: Shows the error message that appears when using hyphens in a Django project name, which are not valid Python identifiers.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n'hello-django' is not a valid project name. Please make sure the name is a valid identifier.\n```\n\n----------------------------------------\n\nTITLE: Fly Dig Command Options\nDESCRIPTION: Available command-specific options for the fly dig command, including app selection, configuration path, organization targeting, and output format options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_dig.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for dig\n  -o, --org string      The target Fly.io organization\n  -s, --short           Just print the answers, not DNS record details\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all Fly.io CLI commands, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_update.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for LiteFS Cloud Regions\nDESCRIPTION: The basic command syntax for viewing LiteFS Cloud regions with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_regions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly litefs-cloud regions [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for the Fly Agent Restart Command\nDESCRIPTION: Available command-specific options for the fly agent restart command. Currently only includes the help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_restart.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for restart\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI\nDESCRIPTION: Shows the global configuration options available across all fly commands, including API token and debug settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose              Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global options that can be used with the disable analytics command, including API token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_analytics_disable.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Flyctl Commands\nDESCRIPTION: These global options are available for all Flyctl commands, including 'fly postgres backup list'. They allow setting the API access token and controlling the verbosity of output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_list.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Configuring Services in fly.toml\nDESCRIPTION: Configuration in fly.toml to expose the web process to the public internet.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/supercronic.html.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# Make sure there's only one `processes` entry under `[[services]]`\n[[services]]\n  processes = [\"web\"]\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly tokens 3p add' Command\nDESCRIPTION: These are the specific options available for the 'fly tokens 3p add' command. They include help, location specification, and methods to provide a shared secret for the third-party caveat.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_add.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                 help for add\n  -l, --location string      URL identifying third-party service\n  -S, --secret string        (insecure) base64 shared secret for third-party caveat\n  -s, --secret-file string   file containing base64 shared secret for third-party caveat\n```\n\n----------------------------------------\n\nTITLE: Deploying Rails Project to Fly.io\nDESCRIPTION: Command to deploy the Rails project to Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Client to Use Flycast Address\nDESCRIPTION: Command to set the OLLAMA_HOST environment variable, directing the Ollama client to communicate with the Ollama service via its Flycast address.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# export OLLAMA_HOST=http://xe-ollama.flycast\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global configuration options that apply to all Fly.io CLI commands, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_attach.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Analytics Command Options\nDESCRIPTION: Available help options for the analytics settings command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_analytics.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for analytics\n```\n\n----------------------------------------\n\nTITLE: GitHub workflow for automatic Superfly deployments\nDESCRIPTION: GitHub Actions workflow configuration for automatically deploying to Superfly on code pushes. This workflow triggers on push to the main branch and uses Superfly's GitHub action.\nSOURCE: https://github.com/superfly/docs/blob/main/styles/Google/vocab.txt#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy to Superfly\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    name: Deploy app\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: superfly/flyctl-actions/setup-flyctl@master\n      - run: flyctl deploy --remote-only\n        env:\n          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Laravel Project and Fly.io Configuration\nDESCRIPTION: Commands to create a new Laravel project and configure it as a Fly app with automatic deployment to the Amsterdam region.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/github-actions.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\n# Initialize your Laravel project\ncomposer create-project laravel/laravel fly-laravel\ncd fly-laravel\n\n# Auto generate your `fly.toml` configuration file:\n# Add in the ams region with --region\n# Auto deploy using --now while your at it!\nflyctl launch --region ams --now\n```\n\n----------------------------------------\n\nTITLE: Removing Prepare Step from Rails Dockerfile\nDESCRIPTION: This command regenerates the Dockerfile without the database preparation step, useful for multi-server deployments.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate dockerfile --no-prepare\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands\nDESCRIPTION: Global options that can be used with all fly commands, including setting an API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_cordon.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby on Ubuntu for Database Migration\nDESCRIPTION: This command installs Ruby on Ubuntu, which is required for using the Sequel tool to migrate data from other databases to SQLite.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\napt-get install ruby-full\n```\n\n----------------------------------------\n\nTITLE: Displaying help for fly sftp command in Bash\nDESCRIPTION: Shows the help option flag for the 'fly sftp' command, which provides information about its usage.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for sftp\n```\n\n----------------------------------------\n\nTITLE: Platform Component Reference\nDESCRIPTION: References to key platform components including fly-proxy (Rust) and flyd (Go) that handle proxy and machine orchestration respectively.\nSOURCE: https://github.com/superfly/docs/blob/main/hiring/roles.html.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfly-proxy\\nflyd\\ninit\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for 'fly orgs delete'\nDESCRIPTION: These are the specific options available for the 'fly orgs delete' command. It includes a help option and a yes flag for accepting all confirmations automatically.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_delete.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for delete\n  -y, --yes    Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: This snippet shows the global options available for all Fly.io CLI commands, including setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_release.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: WireGuard Token Delete Global Options\nDESCRIPTION: Global configuration options available for all WireGuard token operations, including API token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_delete.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Activating WireGuard on Linux with wg-quick\nDESCRIPTION: Command to enable a WireGuard tunnel on a Linux system using the wg-quick utility with the previously created configuration file.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/connect-private-network-wireguard/index.html.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nwg-quick up camellia.conf\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that can be used with the logout command, including access token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_logout.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: SFTP Find Global Options\nDESCRIPTION: Global configuration options that apply to all SFTP operations including API access token and debug settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp_find.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options\nDESCRIPTION: Global configuration options available for all Fly.io CLI commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global options for fly CLI commands\nDESCRIPTION: Global options that apply to all fly CLI commands, including authentication token, debug mode, and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: SFTP Find Global Options\nDESCRIPTION: Global configuration options that apply to all SFTP commands, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp_find.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Help Options for Autoupdate Command\nDESCRIPTION: Available help flag for the autoupdate command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_autoupdate.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for autoupdate\n```\n\n----------------------------------------\n\nTITLE: Deploying Autoscaler App\nDESCRIPTION: This bash command deploys the autoscaler app with the --ha option set to false, ensuring only one Machine is deployed.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autoscale-machines.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ fly deploy --ha=false\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: These are global options available for all Fly CLI commands, including 'wireguard token update'. They allow setting an access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Enveloop Extension Options\nDESCRIPTION: Available options for the Fly CLI Enveloop extension. The -h or --help flag can be used to display help information for the command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for enveloop\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Slug using Flyctl\nDESCRIPTION: Command to list organizations and set the organization slug as a variable.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/metrics.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl orgs list\nORG_SLUG=[org-slug]\n```\n\n----------------------------------------\n\nTITLE: Resource Provisioning Request in JavaScript\nDESCRIPTION: Example of a POST request for provisioning a Fly.io extension. It includes details about the extension, organization, user, and optional parameters for region-aware or Fly.io-deployed extensions.\nSOURCE: https://github.com/superfly/docs/blob/main/reference/extensions_api.html.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://logjam.io/flyio/extensions\n\n{\n  name: \"test\",\n  id: \"test\",\n  organization_id: \"04La2mblTaz\",\n  organization_name: \"High Flyers\",\n  user_email: \"v9WvKokd@customer.fly.io\",\n  user_id: \"NeBO2G0l0yJ6\",\n  user_role: \"admin\",\n  primary_region: \"mad\",\n  ip_address: \"fdaa:0:47fb:0:1::1d\",\n  read_regions: [\"syd\", \"scl\"],\n  url: \"https://logjam.io/flyio/extensions\",\n  nonce: \"e3f7b4c8f5ea016d0d2e92048ca0d856\",\n  timestamp: 1685641159\n}\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly jobs open' Command\nDESCRIPTION: This snippet shows the available options for the 'fly jobs open' command. Currently, it only includes a help flag for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_jobs_open.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for open\n```\n\n----------------------------------------\n\nTITLE: Using the fly checks command\nDESCRIPTION: The basic usage syntax for the fly checks command in Fly.io CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_checks.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly checks [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Fly Storage Status Command\nDESCRIPTION: Shows the basic command syntax for checking the status of a Tigris storage bucket. The command accepts an optional bucket name parameter.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly storage status [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: WireGuard WebSocket Global Options\nDESCRIPTION: Global configuration options that apply to the WireGuard WebSocket command, including API token and debug settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_websockets.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Concurrency Configuration for GitHub Actions\nDESCRIPTION: YAML snippet that prevents concurrent deploys for the same PR by creating a unique concurrency group for each PR and workflow combination, and cancels in-progress workflows when new ones are triggered.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconcurrency:\n  group: ${{ github.workflow }}-pr-${{ github.event.number }}\n  cancel-in-progress: true\n```\n\n----------------------------------------\n\nTITLE: Example Output of Application Status\nDESCRIPTION: Sample output showing the running instances of both app and worker processes after scaling.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/oban.md#2025-04-16_snippet_9\n\nLANGUAGE: output\nCODE:\n```\nApp\n  Name     = my-app\n  Owner    = personal\n  Version  = 41\n  Status   = running\n  Hostname = my-app.fly.dev\n\nInstances\nID        PROCESS VERSION REGION  DESIRED STATUS  HEALTH CHECKS       RESTARTS  CREATED\n15088508  worker  41      ord     run     running                     0         34s ago\n8789ef49  app     41      ord     run     running 1 total, 1 passing  0         2022-07-26T16:06:34Z\nc419942b  app     41      ord     run     running 1 total, 1 passing  0         2022-07-26T16:05:52Z\nea7af986  app     41      ord     run     running 1 total, 1 passing  0         2022-07-26T16:05:52Z\nd681c33d  worker  41      ord     run     running                     0         2022-07-26T15:42:30Z\nd8d8dc08  worker  41      ord     run     running                     0         2022-07-26T15:42:30Z\n```\n\n----------------------------------------\n\nTITLE: Arcjet Extension Options\nDESCRIPTION: Help flag available specifically for the Arcjet extension command. Used to display usage information about the Arcjet extension.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for arcjet\n```\n\n----------------------------------------\n\nTITLE: Listing Laravel Directory Structure\nDESCRIPTION: Commands to navigate to the Laravel application directory and list its contents\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/the-basics/post-deployment.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ncd /var/www/html\nls -l\n```\n\nLANGUAGE: output\nCODE:\n```\nDockerfile  artisan        composer.lock  docker             package.json       public     storage             vendor\nREADME.md   bootstrap      config         lang               phpunit.xml        resources  tailwind.config.js  vite.config.js\napp         composer.json  database       package-lock.json  postcss.config.js  routes     tests\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands\nDESCRIPTION: Global options that can be used with the 'fly auth docker' command and other fly commands.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_docker.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Opening a Deployed Fly.io App in Browser\nDESCRIPTION: Command to open and view your deployed application in a web browser.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/fly-rails.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Redis Dashboard Global Options\nDESCRIPTION: Global configuration options that apply to the dashboard command, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_dashboard.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: Global options that can be used with any Fly CLI command, including API access token specification, debug mode for additional logs, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_releases.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI Commands\nDESCRIPTION: Global options that can be used with any fly CLI command, including authentication token, debug mode, and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global options available for all Fly CLI commands including API token configuration, debug mode, and verbosity settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_autoupdate_enable.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Update Machine Command Override\nDESCRIPTION: Updates a Fly Machine by overriding the default CMD with a custom command.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-update.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine update --command sleep inf\n```\n\n----------------------------------------\n\nTITLE: Adjusting Rails Binstubs for SSH Access\nDESCRIPTION: This command regenerates the Dockerfile to adjust binstubs for easier SSH access to Rails commands.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate dockerfile --bin-cd\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io Token Commands\nDESCRIPTION: Global configuration options that apply to all token-related commands, including API access token specification and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create_readonly.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Postgres Database Command Options\nDESCRIPTION: Local command options for database operations including help and JSON output formatting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_db.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for db\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Fly Scale Command Options\nDESCRIPTION: Help flag option available for the scale command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_scale.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for scale\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global flags that can be used with any Fly CLI command, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup_config_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for fly tokens 3p add-discharge Command in Bash\nDESCRIPTION: These are the specific options available for the 'add-discharge' subcommand. The '-d' or '--discharge' flag is used to specify the third-party discharge token, while '-h' or '--help' provides help information for the command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_add-discharge.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -d, --discharge string   Third-party discharge token\n  -h, --help               help for add-discharge\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: This snippet shows the global options that can be used with all Fly CLI commands, including 'fly postgres users'. These options allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_users.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: These global options can be used with the 'fly platform status' command and other Fly CLI commands. They allow for specifying an API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_platform_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI in Bash\nDESCRIPTION: These are the global options available for all Fly CLI commands. They include options for specifying the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_extend.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global options that can be used with any Fly CLI command, including authentication and debugging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_snapshots_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Lists the global options that can be used with any fly command, including access token, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_managed-postgres.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Vector List Command Usage\nDESCRIPTION: The basic command syntax for listing Upstash Vector indices in Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions vector list [flags]\n```\n\n----------------------------------------\n\nTITLE: Postgres Creation Options\nDESCRIPTION: Comprehensive list of available configuration flags for customizing the Postgres cluster creation, including VM specifications, backup settings, and cluster management options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --autostart                   Automatically start a stopped Postgres app when a network request is received\n      --consul-url string           Opt into using an existing consul as the backend store by specifying the target consul url.\n      --detach                      Return immediately instead of monitoring deployment progress\n      --enable-backups              Create a new tigris bucket and enable WAL-based backups\n      --flex                        Create a postgres cluster that's managed by Repmgr (default true)\n      --fork-from string            Specify a source Postgres application to fork from. Format: <app-name> or <app-name>:<volume-id>\n  -h, --help                        help for create\n      --host-dedication-id string   The dedication id of the reserved hosts for your organization (if any)\n      --image-ref string            Specify a non-default base image for the Postgres app\n      --initial-cluster-size int    Initial cluster size\n  -n, --name string                 The name of your Postgres app\n  -o, --org string                  The target Fly.io organization\n  -p, --password string             The superuser password. The password will be generated for you if you leave this blank\n  -r, --region string               The target region (see 'flyctl platform regions')\n      --snapshot-id string          Creates the volume with the contents of the snapshot\n      --stolon                      Create a postgres cluster that's managed by Stolon\n      --vm-cpu-kind string          The kind of CPU to use ('shared' or 'performance')\n      --vm-cpus int                 Number of CPUs\n      --vm-gpu-kind string          If set, the GPU model to attach (a100-pcie-40gb, a100-sxm4-80gb, l40s, a10, none)\n      --vm-gpus int                 Number of GPUs. Must also choose the GPU model with --vm-gpu-kind flag\n      --vm-memory string            Memory (in megabytes) to attribute to the VM\n      --vm-size string              The VM size to set machines to. See \"fly platform vm-sizes\" for valid values\n      --volume-size int             The volume size in GB\n```\n\n----------------------------------------\n\nTITLE: Basic Fly Doctor Command Usage\nDESCRIPTION: Shows the basic syntax for using the fly doctor command with optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_doctor.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly doctor [flags]\n```\n\n----------------------------------------\n\nTITLE: Removing a Region from Fly.io Application Deployment\nDESCRIPTION: This command removes a specific region (Singapore) from the list of deployment regions. This helps healthcare organizations ensure PHI is only stored in authorized locations as required by HIPAA.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ fly regions remove sin\n```\n\n----------------------------------------\n\nTITLE: SFTP GET Global Options\nDESCRIPTION: Global configuration options that apply to all Fly.io CLI commands, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_sftp_get.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Logging into Superfly account\nDESCRIPTION: Command for authenticating with Superfly using the CLI. This step is required before deploying applications.\nSOURCE: https://github.com/superfly/docs/blob/main/styles/Google/vocab.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly auth login\n```\n\n----------------------------------------\n\nTITLE: Options for fly apps open Command\nDESCRIPTION: These are the specific options available for the 'fly apps open' command. They allow specifying the application name, configuration file path, and accessing help information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_open.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for open\n```\n\n----------------------------------------\n\nTITLE: Help Options for WireGuard Remove Command\nDESCRIPTION: Available help flag for the remove command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_remove.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for remove\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options can be used with any Fly CLI command, including the MySQL database creation command. They provide additional control over authentication, debugging, and output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global configuration options that apply to all synthetics commands, including API token, debug mode, and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_synthetics.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global flags that can be used with the version command including access token and debug options\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_version.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io Sentry Commands\nDESCRIPTION: Global options that can be used with any Sentry extension command in Fly.io. These options allow setting the API access token and enabling verbose or debug output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_sentry.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Checking Upstash Vector Index Status in Fly CLI\nDESCRIPTION: Command syntax for retrieving status information about an Upstash Vector index. The command accepts an optional index name parameter and various flags to customize the operation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions vector status [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Related Upstash Vector Commands\nDESCRIPTION: Reference to the parent command for managing Upstash Vector indexes on Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector_status.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly extensions vector](/docs/flyctl/extensions-vector/)\t - Provision and manage Upstash Vector index\n```\n\n----------------------------------------\n\nTITLE: Setting Rails Master Key in Windows PowerShell\nDESCRIPTION: This PowerShell command sets the RAILS_MASTER_KEY environment variable for local Docker testing on Windows.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:RAILS_MASTER_KEY = Get-Content 'config\\master.key'\n```\n\n----------------------------------------\n\nTITLE: WireGuard Token Delete Command Options\nDESCRIPTION: Available command-specific options for the delete operation, showing help flag option.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_delete.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for delete\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Global Command Options\nDESCRIPTION: Shows the global options available for all LiteFS Cloud commands, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Shows the global options that can be used with any fly CLI command, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_debug.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Help Option for Stop Command\nDESCRIPTION: Available help flag for the stop command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_stop.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for stop\n```\n\n----------------------------------------\n\nTITLE: Using the Wafris WAF Destroy Command in Bash\nDESCRIPTION: Command syntax for permanently destroying a Wafris WAF. The command requires a WAF name and supports various flags for configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions wafris destroy [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Available Options for arcjet destroy Command in Bash\nDESCRIPTION: Lists the available command-specific options including application name specification, configuration file path, help information, and confirmation bypass.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_destroy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for destroy\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: WireGuard WebSocket Help Options\nDESCRIPTION: Available help flags for the WireGuard WebSocket command\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_websockets.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for websockets\n```\n\n----------------------------------------\n\nTITLE: Basic LiteFS Cloud Status Command Usage\nDESCRIPTION: Shows the basic command syntax for checking LiteFS Cloud cluster status.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_status.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly litefs-cloud status [flags]\n```\n\n----------------------------------------\n\nTITLE: Fly Agent Global Options\nDESCRIPTION: Global options that can be used with any Fly agent command, including authentication token settings and logging verbosity options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command Options for Listing Kafka Clusters\nDESCRIPTION: Options that can be used with the 'list' command including help flag, organization specification, and automatic confirmation.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for list\n  -o, --org string   The target Fly.io organization\n  -y, --yes          Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Listing Upstash Kafka Clusters on Fly.io\nDESCRIPTION: This command lists all Kafka clusters associated with the user's Fly.io account. It displays the name, organization, and primary region for each cluster.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/kafka.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext kafka list\n```\n\n----------------------------------------\n\nTITLE: Enabling Fullstaq and Jemalloc in Rails Dockerfile\nDESCRIPTION: This command regenerates the Dockerfile with options to use Fullstaq Ruby and Jemalloc for memory optimization.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/dockerfiles.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate dockerfile --fullstaq --jemalloc\n```\n\n----------------------------------------\n\nTITLE: Command-specific options for fly checks\nDESCRIPTION: Options specific to the fly checks command, including app selection and configuration file specification.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_checks.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for checks\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: Global options applicable across all Fly.io CLI commands, including authentication via access token and debug/verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options can be used with any Fly CLI command, including the Enveloop project creation. They allow setting the API access token and enabling debug or verbose output for troubleshooting purposes.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Creating a Project Directory in Command Line\nDESCRIPTION: Creates a project directory named 'hello-django' and changes into that directory.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nmkdir hello-django && cd hello-django\n```\n\n----------------------------------------\n\nTITLE: Storage Command Options\nDESCRIPTION: Basic help option available for the storage command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for storage\n```\n\n----------------------------------------\n\nTITLE: Related Arcjet Command Reference\nDESCRIPTION: Navigation link to the parent command documentation for Arcjet extensions. This provides access to additional Arcjet management commands within the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_create.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly extensions arcjet](/docs/flyctl/extensions-arcjet/)   - Provision and manage Arcjet\n```\n\n----------------------------------------\n\nTITLE: Installing Visualization Dependencies in mix.exs\nDESCRIPTION: Adding VegaLite and Kino packages to the project dependencies for enabling visualization capabilities in Livebook\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/interesting-things-with-livebook.html.md#2025-04-16_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n  defp deps do\n    [\n      {:phoenix, \"~> 1.5.6\"},\n      # ...\n\n      # Graphing/charting - for Livebook or analysis\n      {:vega_lite, \"~> 0.1.0\"},\n      {:kino, \"~> 0.1.0\"}\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Regex Pattern for Healthcheck Endpoints\nDESCRIPTION: A regular expression pattern that matches 'healthcheck' or 'healthchecks' in any case (upper, lower, or mixed). The (?i) prefix makes the pattern case-insensitive.\nSOURCE: https://github.com/superfly/docs/blob/main/styles/config/vocabularies/fly-terms/reject.txt#2025-04-16_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n(?i)healthcheck(s)\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options that apply to all Fly CLI commands, including API token specification, debug mode, and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options that can be used with any Fly CLI command, including authentication, debugging, and output verbosity settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Basic Storage Command Usage\nDESCRIPTION: Base command syntax for using the Fly CLI storage extension\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions storage [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: SSH Command Options in Fly.io CLI\nDESCRIPTION: Lists the available options for the 'fly ssh' command. Currently, it only shows the help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for ssh\n```\n\n----------------------------------------\n\nTITLE: Creating New Rails Project with Name Scaffold\nDESCRIPTION: Commands to create a new Rails project, generate a scaffold for Names, and configure the root route.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/litefs.html.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrails new list\ncd list\nbin/rails generate scaffold Name name\necho 'Rails.application.routes.draw {root \"names#index\"}' >> config/routes.rb\n```\n\n----------------------------------------\n\nTITLE: Basic WireGuard Token Command Structure\nDESCRIPTION: The base command structure for executing WireGuard token operations in the Fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly wireguard token [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Available Command Options\nDESCRIPTION: List of all available options and flags for customizing the events list output, including filtering and formatting options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_events_list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -o, --all                Outputs all entries\n  -a, --app string         Application name\n  -d, --compact            Omit the 'Details' column\n  -c, --config string      Path to application configuration file\n  -e, --event string       Event type in a postgres cluster\n  -h, --help               help for list\n  -l, --limit string       Set the maximum number of entries to output (default: 20)\n  -i, --node-id string     Restrict entries to node with this ID\n  -n, --node-name string   Restrict entries to node with this name\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fly jobs Command\nDESCRIPTION: Shows the basic syntax for using the fly jobs command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_jobs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly jobs [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding a Region for Fly.io Application Deployment\nDESCRIPTION: This command adds a specific region (Chicago) for application deployment. For healthcare applications, this allows controlling where PHI is stored to meet HIPAA data residency requirements.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ fly regions add ord\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: These global options apply to all Fly CLI commands, including 'fly ssh log'. They allow setting an API access token, enabling debug output, and increasing verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_log.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: Presents the global options available for all Fly CLI commands, including the 'fly postgres restart' command. These options allow setting the API access token and controlling debug and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_restart.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: EdgeDB CLI Connection Output\nDESCRIPTION: Output displayed when successfully connecting to the EdgeDB instance via the CLI, showing the version and REPL information.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_15\n\nLANGUAGE: output\nCODE:\n```\nEdgeDB 2.x (repl 2.x.x)\nType \\help for help, \\quit to quit.\nedgedb>\n```\n\n----------------------------------------\n\nTITLE: Fly MySQL CLI Options\nDESCRIPTION: Available options for the 'fly mysql' command. Currently, only the help flag is shown, which provides assistance with command usage.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for mysql\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for Wafris WAF Creation in Fly.io\nDESCRIPTION: The basic command syntax to create a Wafris WAF using the Fly.io CLI. This command is used to provision a new Web Application Firewall instance.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris_create.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions wafris create [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly wireguard reset' Command in Bash\nDESCRIPTION: This snippet shows the available options for the 'fly wireguard reset' command. Currently, it only includes a help option for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_reset.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for reset\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Presents the global options applicable to all Fly CLI commands, including the 'fly storage destroy' command. These options allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_storage_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Redis Dashboard Command Options\nDESCRIPTION: Available command-specific options for the dashboard command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for dashboard\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands\nDESCRIPTION: Lists the global options that can be used with any fly command, including setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image_update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration File for Staging\nDESCRIPTION: Command to copy the existing Fly.io configuration file to create a staging-specific version that can be customized for the preview environments.\nSOURCE: https://github.com/superfly/docs/blob/main/django/advanced-guides/staging-environments-with-github-actions.html.md#2025-04-16_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\ncp fly.toml staging/fly_staging.toml\n```\n\n----------------------------------------\n\nTITLE: Basic Enveloop Destroy Command\nDESCRIPTION: Main command syntax for destroying an Enveloop project using fly CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_destroy.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfly extensions enveloop destroy [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for fly tokens revoke command\nDESCRIPTION: Available options for the 'fly tokens revoke' command. Currently, only the help flag is available.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_revoke.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for revoke\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly image show' Command\nDESCRIPTION: These are the specific options available for the 'fly image show' command. They allow specifying the application, configuration file, and output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image_show.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for show\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Listing Available Rails Tasks via SSH in Fly.io\nDESCRIPTION: Command to display all available Rails tasks on a deployed application through SSH. Useful for discovering available commands that can be run remotely.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/run-tasks-and-consoles.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nfly ssh console -C \"/rails/bin/rails help\"\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global configuration options available for all vector commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Postgres App Creation Output\nDESCRIPTION: Output after creating a Postgres app on Fly.io, showing the generated credentials including username, password, hostname, and ports.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_1\n\nLANGUAGE: output\nCODE:\n```\nAutomatically selected personal organization: <Your Name>\n? Select region: sea (Seattle, Washington (US))\nCreating postgres cluster mypostgres in organization personal\nPostgres cluster mypostgres created\n  Username:    postgres\n  Password:    <generated passworD>\n  Hostname:    mypostgres.internal\n  Proxy Port:  5432\n  PG Port: 5433\nSave your credentials in a secure place, you won't be able to see them again!\n```\n\n----------------------------------------\n\nTITLE: Options for fly tokens create Command in Bash\nDESCRIPTION: This snippet shows the available options for the 'fly tokens create' command. Currently, it only includes a help flag for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for create\n```\n\n----------------------------------------\n\nTITLE: WireGuard Token Creation Help Options\nDESCRIPTION: Available help options for the WireGuard token creation command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for create\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly Agent Commands\nDESCRIPTION: Global configuration options available for all Fly agent commands, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_stop.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Getting Current Node Name in Elixir\nDESCRIPTION: Command to retrieve the current node's name in an IEx session, which is useful for troubleshooting clustering issues.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/troubleshooting.html.md#2025-04-16_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nNode.self\n```\n\n----------------------------------------\n\nTITLE: Fly Global Command Options\nDESCRIPTION: Global options that apply to all fly CLI commands, including API authentication and logging configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: App Status Command Output\nDESCRIPTION: Output from the 'fly status' command showing app details including the owning organization, hostname, and running machines. This helps verify which org the app belongs to.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_23\n\nLANGUAGE: output\nCODE:\n```\nApp\n  Name     = my-app\n  Owner    = my-biz\n  Hostname = my-app.fly.dev\n  Image    = my-app:deployment-0123456789\n\nMachines\nPROCESS ID              VERSION REGION  STATE   ROLE    CHECKS  LAST UPDATED\napp     90706e10f12094  10      ord     started                 2024-04-16T20:20:59Z\n```\n\n----------------------------------------\n\nTITLE: Redis Proxy Command Options\nDESCRIPTION: Available flags for configuring the Redis proxy connection including organization and region settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_proxy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for proxy\n  -o, --org string      The target Fly.io organization\n  -r, --region string   The target region (see 'flyctl platform regions')\n```\n\n----------------------------------------\n\nTITLE: WireGuard Token Start Help Options\nDESCRIPTION: Available help options for the start command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_start.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for start\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Uncordon Command Options\nDESCRIPTION: Available options for the 'fly machine uncordon' command, including specifying the application name and the path to the application configuration file.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_uncordon.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for uncordon\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands in Bash\nDESCRIPTION: These global options apply to all Fly.io CLI commands, including 'fly litefs-cloud import'. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_import.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Creating Requirements File\nDESCRIPTION: Generates a requirements.txt file containing all Python packages installed in the virtual environment.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/index.html.md#2025-04-16_snippet_12\n\nLANGUAGE: cmd\nCODE:\n```\npip freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Fly Agent Run Command Options\nDESCRIPTION: Available options specific to the 'fly agent run' command. Currently only includes the help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_run.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for run\n```\n\n----------------------------------------\n\nTITLE: Help Options for Synthetics Enable Command\nDESCRIPTION: Available help flags for the synthetics enable command\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_synthetics_enable.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for enable\n```\n\n----------------------------------------\n\nTITLE: Setting up Fly Log Shipper for Logtail integration\nDESCRIPTION: Commands for creating, configuring, and setting required secrets for a Fly Log Shipper app that exports logs to Logtail. This creates the app without deploying it initially, then sets organization, access token, and Logtail token secrets.\nSOURCE: https://github.com/superfly/docs/blob/main/monitoring/exporting-logs.html.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Make a directory for your log shipper app\nmkdir logshippper\ncd logshippper\n\n# Create the app but don't deploy just yet\nfly launch --no-deploy --image ghcr.io/superfly/fly-log-shipper:latest\n\n# Set some secrets. The secret / env var you set\n# determines which \"sinks\" are configured\nORG=personal\nfly secrets set ORG=$ORG\nfly secrets set ACCESS_TOKEN=$(fly tokens create readonly $ORG)\nfly secrets set LOGTAIL_TOKEN=<token provided by logtail source>\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands in Bash\nDESCRIPTION: These global options apply to all fly commands, including the postgres renew-certs command. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_renew-certs.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly machine leases Command\nDESCRIPTION: Lists the global options that can be used with any fly machine leases command, including authentication tokens and debug flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_leases.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Usage of flyctl settings command\nDESCRIPTION: The basic usage syntax for the flyctl settings command. It allows specifying a command and optional flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly settings [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Status\nDESCRIPTION: Command to view the status of the deployed application, showing the created machines and their current state (stopped due to autostop feature).\nSOURCE: https://github.com/superfly/docs/blob/main/reference/fly-launch.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly status\n```\n\nLANGUAGE: out\nCODE:\n```\nApp\n  Name     = hello-gunicorn-flask\n  Owner    = personal\n  Hostname = hello-gunicorn-flask.fly.dev\n  Image    = hello-gunicorn-flask:deployment-01HGEDDH0R7T762T90B45GZRWP\n  Platform = machines\n\nMachines\nPROCESS\tID            \tVERSION\tREGION\tSTATE  \tROLE\tCHECKS\tLAST UPDATED\napp    \t918543b477de83\t1      \tewr   \tstopped\t    \t      \t2023-11-29T21:17:19Z\napp    \te28697ce6d3986\t1      \tewr   \tstopped\t    \t      \t2023-11-29T20:55:33Z\n```\n\n----------------------------------------\n\nTITLE: Command Options for Fly Tokens Debug\nDESCRIPTION: Lists the specific options available for the debug command, including file input and help flags.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_debug.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --file string   Filename to read caveats from. Defaults to stdin\n  -h, --help          help for debug\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global options that apply to all Fly CLI commands, including API access token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Agent Global Options\nDESCRIPTION: Global options that can be used with the 'fly agent run' command, including access token specification and debug/verbose output controls.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_agent_run.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Cluster Command Options\nDESCRIPTION: Available help options for the clusters command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_clusters.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for clusters\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: This snippet shows the global options available for all Fly CLI commands, including 'fly settings synthetics'. These options allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_synthetics.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: WireGuard Tunnel Organization Selection Output\nDESCRIPTION: Terminal output showing organization selection when creating a WireGuard tunnel. Users can choose between personal and team organizations.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_2\n\nLANGUAGE: output\nCODE:\n```\n? Select organization:  [Use arrows to move, type to filter]\n> My Org (personal)\n  Test Org (test-org)\n```\n\n----------------------------------------\n\nTITLE: Fly Certificates Command Options\nDESCRIPTION: Shows the help flag option available for the fly certs command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for certs\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global flags that apply to all fly CLI commands, including authentication and logging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_3p_discharge.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI in Bash\nDESCRIPTION: These global options apply to all fly commands, including 'fly mcp proxy'. They allow setting an API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mcp_proxy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for flyctl settings command\nDESCRIPTION: Available options for the flyctl settings command. Currently, it only includes a help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for settings\n```\n\n----------------------------------------\n\nTITLE: Starting Local Project with Named Node\nDESCRIPTION: Command to start the local project with a specific node name and cookie for Livebook connection\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/interesting-things-with-livebook.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\niex --sname my_app --cookie secret -S mix phx.server\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Extension Command Options\nDESCRIPTION: Help flag option available for the kubernetes command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for kubernetes\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly extensions kubernetes create' Command\nDESCRIPTION: This snippet lists the specific options available for the 'create' subcommand. It includes flags for specifying the cluster name, target organization, output path for the kubeconfig file, and target region.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kubernetes_create.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for create\n  -n, --name string     The name of your cluster\n  -o, --org string      The target Fly.io organization\n      --output string   The output path to save the kubeconfig file\n  -r, --region string   The target region (see 'flyctl platform regions')\n```\n\n----------------------------------------\n\nTITLE: Global options for fly commands\nDESCRIPTION: Global flags that can be used with all fly commands, including the config validate command. These options control authentication, debugging, and output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config_validate.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly CLI Global Options\nDESCRIPTION: Global options available for all Fly CLI commands, including the Enveloop extension. These options allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Elixir Nodes\nDESCRIPTION: Command to list all nodes connected to the current Elixir node. An empty list indicates no connections are established.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/troubleshooting.html.md#2025-04-16_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nNode.list()\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global configuration options that apply to all Fly commands including API access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_fork.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Core Infrastructure Components\nDESCRIPTION: Key system components including fly-proxy (Rust proxy), attache (Go SQLite cache), corrosion (Rust state replication), flyd (Go orchestrator), vold (storage orchestration), and init (Rust VM initialization)\nSOURCE: https://github.com/superfly/docs/blob/main/hiring/stack.html.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfly-proxy   # Rust/Tokio/Hyper proxy for Anycast network\\nattache     # Go SQLite Consul cache\\ncorrosion   # Rust SWIM-based state replication\\nflyd        # Go orchestrator\\nvold        # Storage orchestration component\\ninit        # Rust VM initialization\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options for Fly.io\nDESCRIPTION: Global flags that can be used with any flyctl command, including authentication with an access token, enabling debug output, and setting verbose output mode.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_sentry_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global flags available across all storage commands including access token and debug options\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Checking Valid Node Name in Elixir Remote Shell\nDESCRIPTION: Example of a correctly connected remote shell showing a properly formatted node name without the \"rem-\" prefix, indicating a successful connection.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/troubleshooting.html.md#2025-04-16_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n:\"hello_elixir@fdaa:0:1da8:a7b:115:5641:7e85:2\"\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global configuration options that apply to all Fly CLI commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: These global options are available for all Fly.io CLI commands, including 'fly secrets import'. They allow users to specify the API access token, enable debug mode, and set verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_secrets_import.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Setting IPv6 Environment Variables in Dockerfile for Elixir Applications on Fly.io\nDESCRIPTION: Environment variable configuration appended by flyctl to enable IPv6 networking for Elixir applications. These settings are crucial for proper functioning within Fly's private IPv6 network and for successful node clustering.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/the-basics/clustering.html.md#2025-04-16_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Appended by flyctl\nENV ECTO_IPV6 true\nENV ERL_AFLAGS \"-proto_dist inet6_tcp\"\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all Fly.io MySQL commands, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands in Bash\nDESCRIPTION: Global options that apply to all Fly CLI commands, including API access token, debug mode, and verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_wafris_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Output from Deleting a Vector Index\nDESCRIPTION: Example output confirming that a Vector index has been successfully deleted.\nSOURCE: https://github.com/superfly/docs/blob/main/upstash/vector.html.md#2025-04-16_snippet_8\n\nLANGUAGE: output\nCODE:\n```\nYour vector index my-index was deleted\n```\n\n----------------------------------------\n\nTITLE: Fly Global Command Options\nDESCRIPTION: Global options available across all fly commands, including API token configuration and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Tigris Dashboard Command Options\nDESCRIPTION: Available command-specific flags for configuring the dashboard access, including application name, config file path, organization selection, and confirmation settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage_dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for dashboard\n  -o, --org string      The target Fly.io organization\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: Global options available across all Fly CLI commands, including setting API access tokens and enabling debug or verbose output modes.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global flags available for all analytics-related commands, including API token configuration and debug options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_analytics.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Version Command Options\nDESCRIPTION: Available flags for the version command including help and JSON output options\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_version.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for version\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes\nDESCRIPTION: Git commands to save and push the GitHub Actions configuration to the repository.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/github-actions.html.md#2025-04-16_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\ngit add .\ngit commit -m \"Configure auto-deploy through GitHub Actions\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: WireGuard Configuration File Creation Output\nDESCRIPTION: Terminal output when saving a WireGuard configuration file, showing the warning about private keys and confirmation of successful file creation.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_3\n\nLANGUAGE: output\nCODE:\n```\n!!!! WARNING: Output includes private key. Private keys cannot be recovered !!!!\n!!!! after creating the peer; if you lose the key, you'll need to remove    !!!!\n!!!! and re-add the peering connection.                                     !!!!\n? Filename to store WireGuard configuration in, or 'stdout':  mypeer.conf\nWrote WireGuard configuration to 'mypeer.conf'; load in your WireGuard client\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: These global options apply to all Fly.io CLI commands, including the MySQL database creation. They provide options for authentication, debugging, and output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Auth Signup Global Options\nDESCRIPTION: Lists the global options that can be used with the signup command. Includes options for API access token, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_signup.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global flags available for all Fly.io CLI commands including API token configuration and debug options\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_synthetics_enable.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Incidents Help Options\nDESCRIPTION: Shows the help flag option for the incidents command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_incidents.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for incidents\n```\n\n----------------------------------------\n\nTITLE: Global Options for Flyctl CLI Commands\nDESCRIPTION: These global options can be used with various Flyctl CLI commands, including 'fly litefs-cloud clusters list'. They provide options for authentication, debugging, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_clusters_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Command for Cloning a Fly Machine\nDESCRIPTION: Shell command to create a second machine instance, which will have its own volume and database but share the same application code.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/cell-based.html.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly machine clone\n```\n\n----------------------------------------\n\nTITLE: MIT License for write-good project\nDESCRIPTION: The full MIT License text for the write-good project, granting permissions to use, modify, and distribute the software with minimal restrictions, as long as the license notice is included.\nSOURCE: https://github.com/superfly/docs/blob/main/styles/write-good/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2014 Brian Ford\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Fly-Rails Gem for Advanced Configuration\nDESCRIPTION: Generates a fly.toml and Dockerfile for direct use with flyctl, providing more control over application configuration.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/fly-rails.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nbin/rails generate fly:app --eject\n```\n\n----------------------------------------\n\nTITLE: Testing Connectivity with Ping\nDESCRIPTION: Command to test network connectivity to the Flycast address using ping, verifying the application is reachable within the private network.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# ping xe-ollama.flycast -c2\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global flags available for all Flyctl commands including API token configuration and debug options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_autoupdate.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Storage Command Options\nDESCRIPTION: Help flag option available for the storage command\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_storage.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for storage\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly Commands\nDESCRIPTION: Global command-line options available for all fly CLI commands, including authentication token specification and debug/verbose output settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_certs_check.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Installing WireGuard on Ubuntu\nDESCRIPTION: Command to install the WireGuard VPN software on an Ubuntu server, which is necessary for creating a secure tunnel to the Fly.io private network.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/bridge-deployments-wireguard.html.md#2025-04-16_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nsudo apt -y install wireguard\n```\n\n----------------------------------------\n\nTITLE: Regenerating Dockerfile Without Prepare Step\nDESCRIPTION: This Rails command regenerates the Dockerfile without including the prepare step which would run migrations during build.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/getting-started/migrate-from-heroku.html.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ bin/rails generate dockerfile --no-prepare\n```\n\n----------------------------------------\n\nTITLE: Fly Machine Create Related Commands\nDESCRIPTION: References to related documentation for the parent 'fly machine' command category.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_create.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly machine](/docs/flyctl/machine/)\t - Manage Fly Machines.\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global options that can be used with any Fly.io CLI command, including authentication and logging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_checks_list.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Styles for Names List\nDESCRIPTION: CSS code to style the names list, including grid layout and margin adjustments.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/the-basics/active-record.html.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#names {\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  margin: 1em;\n}\n\n#names strong {\n  display: none;\n}\n\n#names p {\n  margin: 0.2em;\n}\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global configuration options available for all Supabase commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for fly wireguard token update Command in Bash\nDESCRIPTION: This snippet shows the available options for the 'fly wireguard token update' command. Currently, it only includes a help option for displaying command usage information.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_token_update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for update\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: These global options can be used with the 'fly jobs open' command and other Fly.io CLI commands. They allow setting an API access token, enabling debug output, and increasing verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_jobs_open.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using fly auth docker Command\nDESCRIPTION: The command adds registry.fly.io to Docker daemon's authenticated registries, enabling direct image pushing to Fly from the Docker CLI.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_docker.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly auth docker [flags]\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom fly.toml Configuration Path\nDESCRIPTION: Command to deploy using a custom fly.toml configuration file path using the --config flag.\nSOURCE: https://github.com/superfly/docs/blob/main/launch/monorepo.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy --config ./path/to/fly.toml\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly orgs show' Command in Fly CLI\nDESCRIPTION: These are the specific options available for the 'fly orgs show' command. It includes a help flag and an option for JSON output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_orgs_show.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for show\n  -j, --json   JSON output\n```\n\n----------------------------------------\n\nTITLE: Help Option for Redis Reset\nDESCRIPTION: Available help flag for the reset command\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_reset.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for reset\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI\nDESCRIPTION: Global configuration options available for all fly CLI commands including access token, debug mode, and verbose output settings\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_redis_reset.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: This snippet shows the global options available for all Fly.io CLI commands, including setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_volumes_show.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Dockerfile Path\nDESCRIPTION: Command to deploy using a custom Dockerfile path using the --dockerfile flag.\nSOURCE: https://github.com/superfly/docs/blob/main/launch/monorepo.html.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy --dockerfile ./path/to/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Launching application with Superfly\nDESCRIPTION: Command for deploying an application to Superfly. This initializes a new application based on files in the current directory.\nSOURCE: https://github.com/superfly/docs/blob/main/styles/Google/vocab.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: Creating Enveloop Project via Fly CLI\nDESCRIPTION: Command to create a new Enveloop project and set up API keys as Fly Secrets\nSOURCE: https://github.com/superfly/docs/blob/main/reference/enveloop.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext enveloop create\n```\n\nLANGUAGE: output\nCODE:\n```\n? Select Organization: moon (moon)\n? Choose a name, use the default, or leave blank to generate one:\nYour Enveloop project (quiet-butterfly-6638) is ready. See details and next steps with:\n\nSetting the following secrets on quiet-butterfly-6638:\nENVELOOP_LIVE_API_KEY: live_**********\nENVELOOP_SANDBOX_API_KEY: test_**********\n```\n\n----------------------------------------\n\nTITLE: Fly Auth Signup Command Options\nDESCRIPTION: Lists the available options specific to the signup command. Currently only includes the help flag.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_auth_signup.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for signup\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails Project\nDESCRIPTION: Command to create a new Rails project named 'welcome' and change to its directory.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nrails new welcome; cd welcome\n```\n\n----------------------------------------\n\nTITLE: Accessing Enveloop Dashboard\nDESCRIPTION: Command to launch the Enveloop web console dashboard for a specific project\nSOURCE: https://github.com/superfly/docs/blob/main/reference/enveloop.html.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nflyctl ext enveloop dashboard <project_name>\n```\n\n----------------------------------------\n\nTITLE: Opening Deployed Django App\nDESCRIPTION: Opens the deployed Django application in a web browser using the fly apps open command.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/existing.html.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Options for Arcjet Dashboard Command\nDESCRIPTION: These are the specific options available for the Arcjet dashboard command, including application name, configuration file path, and organization targeting.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_dashboard.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for dashboard\n  -o, --org string      The target Fly.io organization\n  -y, --yes             Accept all confirmations\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands\nDESCRIPTION: These global options are available for all Fly.io CLI commands, including 'fly postgres detach'. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_detach.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global flags available for all Postgres backup commands including access token, debug, and verbose output options\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_backup.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: MySQL Extension Options\nDESCRIPTION: Help flag option available for the MySQL extension command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_mysql.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for mysql\n```\n\n----------------------------------------\n\nTITLE: Supabase Help Options\nDESCRIPTION: Available help flags for the Supabase extension command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_supabase.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for supabase\n```\n\n----------------------------------------\n\nTITLE: Subdirectory Application Deployment\nDESCRIPTION: Command to deploy an application located in a subdirectory of the project.\nSOURCE: https://github.com/superfly/docs/blob/main/launch/monorepo.html.md#2025-04-16_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nfly deploy ./apps/api\n```\n\n----------------------------------------\n\nTITLE: Deploying Django App on Fly.io\nDESCRIPTION: Deploys the configured Django application to Fly.io using the fly deploy command.\nSOURCE: https://github.com/superfly/docs/blob/main/django/getting-started/existing.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Clear Machine Standby Configuration\nDESCRIPTION: Removes the standby configuration from a Fly Machine to allow normal operation.\nSOURCE: https://github.com/superfly/docs/blob/main/machines/flyctl/fly-machine-update.html.md#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nfly machine update <machine-id> --standby-for \"\"\n```\n\n----------------------------------------\n\nTITLE: Deleting an Enveloop Project\nDESCRIPTION: Command to delete an Enveloop project with confirmation prompt\nSOURCE: https://github.com/superfly/docs/blob/main/reference/enveloop.html.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nfly ext enveloop destroy quiet-butterfly-6638\n```\n\nLANGUAGE: output\nCODE:\n```\nDestroying an Enveloop project is not reversible.\n\n? Destroy Enveloop project named quiet-butterfly-6638? Yes\nYour Enveloop project quiet-butterfly-6638 was destroyed\n```\n\n----------------------------------------\n\nTITLE: Basic MySQL List Command\nDESCRIPTION: The main command syntax for listing MySQL databases in Fly.io.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_mysql_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly mysql list [flags]\n```\n\n----------------------------------------\n\nTITLE: Related Kafka Commands in Fly CLI\nDESCRIPTION: Related command for managing Upstash Kafka clusters through the Fly CLI extensions system.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_kafka_list.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [fly extensions kafka](/docs/flyctl/extensions-kafka/)  - Provision and manage Upstash Kafka clusters\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly.io CLI Commands in Bash\nDESCRIPTION: Lists the global options available for all Fly.io CLI commands, including setting the API access token, enabling debug mode, and verbose output. These options can be used with the 'fly tokens' command and its subcommands.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Help Options for Disable Command\nDESCRIPTION: Available help options specific to the disable analytics command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_settings_analytics_disable.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for disable\n```\n\n----------------------------------------\n\nTITLE: Basic IPv4 Allocation Command\nDESCRIPTION: Basic command syntax for allocating an IPv4 address to a Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_allocate-v4.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly ips allocate-v4 [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options\nDESCRIPTION: Global options that can be used with any LiteFS Cloud command, including API authentication and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_regions.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Using the Enveloop List Command in Fly.io CLI\nDESCRIPTION: Command syntax for listing Enveloop projects using the Fly.io CLI tool. This command displays all Enveloop projects associated with your account or organization.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly extensions enveloop list [flags]\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global options that apply to all Fly CLI commands, including authentication and logging settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_vector_list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Fly Config Help Options\nDESCRIPTION: Available help options for the fly config command.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_config.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for config\n```\n\n----------------------------------------\n\nTITLE: Postgres Connection Output\nDESCRIPTION: Output displayed when successfully connecting to the Postgres instance, showing the PostgreSQL version and connection information.\nSOURCE: https://github.com/superfly/docs/blob/main/app-guides/edgedb.html.md#2025-04-16_snippet_8\n\nLANGUAGE: output\nCODE:\n```\nConnecting to mypostgres.internal... complete\npsql (14.4 (Debian 14.4-1.pgdg110+1))\nType \"help\" for help.\n\npostgres=# \n```\n\n----------------------------------------\n\nTITLE: App Listing Verification Output\nDESCRIPTION: Output showing the list of applications in the connected Fly.io organization, confirming a working WireGuard connection. This example shows two apps.\nSOURCE: https://github.com/superfly/docs/blob/main/networking/private-networking.html.md#2025-04-16_snippet_19\n\nLANGUAGE: output\nCODE:\n```\nmy-app,my-app-db\n```\n\n----------------------------------------\n\nTITLE: Global Command Options for Fly.io CLI\nDESCRIPTION: Global options applicable to all Fly.io CLI commands, including authentication and debugging options.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_postgres_db.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Deploying Application with Specific Configuration on Fly.io\nDESCRIPTION: Command to deploy an application to Fly.io using a specific configuration file. This is used after setting up the environment and SSL certificates.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/going-to-production-with-healthcare-apps.html.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ fly deploy --path fly.production.yml\n```\n\n----------------------------------------\n\nTITLE: Options for 'fly tokens attenuate' Command in Bash\nDESCRIPTION: These are the specific options available for the 'fly tokens attenuate' command. They include a file option for specifying a file to read caveats from, and a help option for displaying command help.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_tokens_attenuate.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --file string   Filename to read caveats from. Defaults to stdin\n  -h, --help          help for attenuate\n```\n\n----------------------------------------\n\nTITLE: Command Options for Fly IPs Private Command\nDESCRIPTION: Available options for the 'fly ips private' command, including specifying the application, configuration file path, help information, and JSON output format.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ips_private.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --app string      Application name\n  -c, --config string   Path to application configuration file\n  -h, --help            help for private\n  -j, --json            JSON output\n```\n\n----------------------------------------\n\nTITLE: Global SFTP Shell Options\nDESCRIPTION: Global configuration options that apply to all SFTP shell operations\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_sftp_shell.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly Machine Commands in Bash\nDESCRIPTION: This snippet shows the global options available for all Fly Machine commands, including the API proxy. These options allow setting the API access token, enabling debug mode, and controlling output verbosity.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_machine_api-proxy.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Allocating Private Flycast IP Address\nDESCRIPTION: Command to allocate a private IPv6 Flycast address for an existing Fly.io application.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/autostart-internal-apps.html.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfly ips allocate-v6 --private\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Shell Machine for Testing\nDESCRIPTION: Command to create a temporary Ubuntu-based virtual machine with an interactive shell to test connectivity to the Flycast address.\nSOURCE: https://github.com/superfly/docs/blob/main/blueprints/private-applications-flycast.html.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ fly machine run --shell ubuntu\n```\n\n----------------------------------------\n\nTITLE: LiteFS Cloud Global Command Options\nDESCRIPTION: Global configuration options available for all LiteFS Cloud commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_litefs-cloud_clusters.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These global options are available for all Fly CLI commands, including 'fly apps open'. They allow setting the API access token, enabling debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_apps_open.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Enveloop Global Command Options\nDESCRIPTION: Global options available for all Fly.io CLI commands, including access token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_enveloop_destroy.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Creating Status File\nDESCRIPTION: Command to create an empty status file for job tracking.\nSOURCE: https://github.com/superfly/docs/blob/main/rails/advanced-guides/machine.html.md#2025-04-16_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\ntouch tmp/status\n```\n\n----------------------------------------\n\nTITLE: Global Options for Fly CLI Commands\nDESCRIPTION: These options are available globally for all Fly CLI commands. They include setting the API access token and enabling debug or verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_extensions_arcjet_status.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Options for flyctl Commands\nDESCRIPTION: Lists the global options available for all flyctl commands, including access token specification, debug mode, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_image.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Opening an SQLite Database Using Command Line\nDESCRIPTION: This command opens an SQLite database file using the SQLite3 command-line tool for inspection or manipulation.\nSOURCE: https://github.com/superfly/docs/blob/main/elixir/advanced-guides/sqlite3.html.md#2025-04-16_snippet_17\n\nLANGUAGE: cmd\nCODE:\n```\nsqlite3 name.db\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for SSR URL\nDESCRIPTION: Environment variable configuration for SSR internal communication URL.\nSOURCE: https://github.com/superfly/docs/blob/main/laravel/advanced-guides/using-inertia-ssr.html.md#2025-04-16_snippet_4\n\nLANGUAGE: env\nCODE:\n```\n[env]\n  SSR_URL=\"ssr.process.<yourAppNameHerePlease>.internal:13714\"\n  // other envs here\n```\n\n----------------------------------------\n\nTITLE: Global Options for fly CLI commands\nDESCRIPTION: These global options can be used with any fly CLI command, including 'wireguard create'. They provide options for authentication, debugging, and verbose output.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_wireguard_create.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```\n\n----------------------------------------\n\nTITLE: Global Command Options\nDESCRIPTION: Global configuration options that apply to all Fly CLI commands, including API token and debug settings.\nSOURCE: https://github.com/superfly/docs/blob/main/flyctl/cmd/fly_ssh_issue.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -t, --access-token string   Fly API Access Token\n      --debug                 Print additional logs and traces\n      --verbose               Verbose output\n```"
  }
]