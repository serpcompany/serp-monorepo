[
  {
    "owner": "urschrei",
    "repo": "pyzotero.git",
    "content": "TITLE: Initializing Zotero Client and Retrieving Items in Python\nDESCRIPTION: This snippet demonstrates how to create a Zotero client instance and retrieve the top 5 items from a Zotero library. It requires the library ID, type, and API key. The code then prints the item type and key for each retrieved item.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyzotero import zotero\nzot = zotero.Zotero(library_id, library_type, api_key)\nitems = zot.top(limit=5)\n# we've retrieved the latest five top-level items in our library\n# we can print each item's item type and ID\nfor item in items:\nprint('Item Type: %s | Key: %s' % (item['data']['itemType'], item['data']['key']))\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Pyzotero Client in Python\nDESCRIPTION: This code demonstrates how to initialize a Pyzotero client and retrieve the top 5 items from a Zotero library. It shows how to connect to the API using library ID, type, and API key, then iterate through retrieved items to display their item type and key.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyzotero import zotero\nzot = zotero.Zotero(library_id, library_type, api_key) # local=True for read access to local Zotero\nitems = zot.top(limit=5)\n# we've retrieved the latest five top-level items in our library\n# we can print each item's item type and ID\nfor item in items:\n    print('Item: %s | Key: %s' % (item['data']['itemType'], item['data']['key']))\n```\n\n----------------------------------------\n\nTITLE: Creating Items in Zotero Using Pyzotero\nDESCRIPTION: Example of how to create a new book item in Zotero using Pyzotero. The code demonstrates getting an item template, populating creator and title fields, and creating the item in the Zotero library.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntemplate = zot.item_template('book')\ntemplate['creators'][0]['firstName'] = 'Monty'\ntemplate['creators'][0]['lastName'] = 'Cantsin'\ntemplate['title'] = 'Maris Kundzins: A Life'\nresp = zot.create_items([template])\n```\n\n----------------------------------------\n\nTITLE: Updating Items in Zotero Using Pyzotero\nDESCRIPTION: Example showing how to update an existing item in Zotero. The code retrieves items, modifies the title and creator of the first item, and updates it in the library.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ni = zot.items()\n# see above for example of returned item structure\n# modify the latest item which was added to your library\ni[0]['data']['title'] = 'The Sheltering Sky'\ni[0]['data']['creators'][0]['firstName'] = 'Paul'\ni[0]['data']['creators'][0]['lastName'] = 'Bowles'\nzot.update_item(i[0])\n```\n\n----------------------------------------\n\nTITLE: Initializing Zotero Client with Optional Parameters in Python\nDESCRIPTION: This code snippet demonstrates the initialization of a Zotero client with various optional parameters. It includes the library ID, type, API key, and options for preserving JSON order, setting locale, and using a local server.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pyzotero import zotero\nzot = zotero.Zotero('123', 'user', 'ABC1234XYZ')\n# we now have a Zotero object, zot, and access to all its methods\nfirst_ten = zot.items(limit=10)\n# a list containing dicts of the ten most recently modified library items\n```\n\n----------------------------------------\n\nTITLE: Using everything() Method in Pyzotero\nDESCRIPTION: Shows how to use the everything() method to retrieve all items matching a particular API call, automatically handling pagination.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pyzotero import zotero\nzot = zotero.Zotero(library_id, library_type, api_key)\n# retrieve all top-level items\ntoplevel = zot.everything(zot.top())\n```\n\n----------------------------------------\n\nTITLE: Saving File Content to Disk in Python using Pyzotero\nDESCRIPTION: Demonstrates how to download file attachments from Zotero using the file() method and save them to disk using the write method in binary mode.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith open('article.pdf', 'wb') as f:\n  f.write(zot.file('BM8MZJBB'))\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Zotero Items Example\nDESCRIPTION: Example showing how to add multiple tags to a Zotero item. First retrieves the most recent top-level item, then adds three tags to it and updates the item on the server.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nz = zot.top(limit=1)\n# we've now retrieved the most recent top-level item\nupdated = zot.add_tags(z[0], 'tag1', 'tag2', 'tag3')\n# updated now contains a representation of the updated server item\n```\n\n----------------------------------------\n\nTITLE: Using the dump() Method for Saving Zotero Attachments\nDESCRIPTION: Shows how to use the dump() method, which is a wrapper around file(), to save Zotero attachments to disk. Demonstrates usage with default parameters and with custom filename and path.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# write a file to the current working directory using the stored filename\nzot.dump('BM8MZJBB')\n# write the same file to a different path, with a new name\nzot.dump('BM8MZJBB', 'article_1.pdf', '/home/beckett/pdfs')\n```\n\n----------------------------------------\n\nTITLE: Setting Search Parameters in Pyzotero\nDESCRIPTION: Demonstrates two equivalent ways to set parameters for API calls: directly in the method call or using the add_parameters() method.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# set parameters on the call itself\nz = zot.top(limit=7, start=3)\n\n# set parameters using explicit method\nzot.add_parameters(limit=7, start=3)\nz = zot.top()\n```\n\n----------------------------------------\n\nTITLE: Using follow() Method in Pyzotero\nDESCRIPTION: Demonstrates how to use the follow() method to retrieve items sequentially after an initial API call, allowing for RESTful pagination through results.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pyzotero import zotero\nzot = zotero.Zotero(library_id, library_type, api_key)\n# only retrieve a single item\n# this will retrieve the most recently added/modified top-level item\nfirst_item = zot.top(limit=1)\n# now we can start retrieving subsequent items\nnext_item = zot.follow()\nthird_item = zot.follow()\n```\n\n----------------------------------------\n\nTITLE: Using iterfollow() Generator in Pyzotero\nDESCRIPTION: Demonstrates the iterfollow() generator method which creates an iterator over the follow() method for more efficient item retrieval.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nz = zot.top(limit=5)\nlazy = zot.iterfollow()\nlazy.next() # the next() call has returned the next five items\n```\n\n----------------------------------------\n\nTITLE: Using makeiter() Generator in Pyzotero\nDESCRIPTION: Shows how to create a generator over a Read API method using makeiter(), allowing for lazy evaluation of API results.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ngen = zot.makeiter(zot.top(limit=5))\ngen.next() # this will return the first five items\ngen.next() # this will return the next five items\n```\n\n----------------------------------------\n\nTITLE: Updating Zotero Collection Names Example\nDESCRIPTION: Example demonstrating how to retrieve collections, modify a collection name, and update it on the server. The code renames the first collection in the library to 'Whither Digital Humanities?'.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# get existing collections, which will return a list of dicts\nc = zot.collections()\n# rename the last collection created in the library\nc[0]['name'] = 'Whither Digital Humanities?'\n# update collection name on the server\nzot.update_collection(c[0])\n```\n\n----------------------------------------\n\nTITLE: Example of Returned Zotero Item Data in Python\nDESCRIPTION: This snippet shows an example of the data structure returned by Pyzotero when retrieving items from a Zotero library. It includes fields such as ISBN, abstract note, creators, and other bibliographic information.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n[{u'data': {u'ISBN': u'0810116820',\n           u'abstractNote': u'',\n           u'accessDate': u'',\n           u'archive': u'',\n           u'archiveLocation': u'',\n           u'callNumber': u'HIB 828.912 BEC:3g N9',\n           u'collections': [u'2UNGXMU9'],\n           u'creators': [{u'creatorType': u'author',\n                          u'firstName': u'Daniel',\n                          u'lastName': u'Katz'}],\n```\n\n----------------------------------------\n\nTITLE: Setting Bibliographic Style Parameters in Pyzotero\nDESCRIPTION: Shows how to set content and style parameters to retrieve formatted bibliographic entries using the Zotero API.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nzot.add_parameters(content='bib', style='mla')\n```\n\n----------------------------------------\n\nTITLE: Example of Zotero Collection Data Structure\nDESCRIPTION: Shows the structure of the collection data returned by collection-related methods in Pyzotero. This is a Python dictionary containing collection metadata like key, name, and relations.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n[{u'data': {u'key': u'5TSDXJG6',\n                    u'name': u'Critical GIS',\n                    u'parentCollection': False,\n                    u'relations': {},\n                    u'version': 778},\n          u'key': u'5TSDXJG6',\n          u'library': {u'id': 436,\n                       u'links': {u'alternate': {u'href': u'https://www.zotero.org/urschrei',\n                                                 u'type': u'text/html'}},\n                       u'name': u'urschrei',\n                       u'type': u'user'},\n          u'links': {u'alternate': {u'href': u'https://www.zotero.org/urschrei/collections/5TSDXJG6',\n                                    u'type': u'text/html'},\n                     u'self': {u'href': u'https://api.zotero.org/users/436/collections/5TSDXJG6',\n                               u'type': u'application/json'}},\n          u'meta': {u'numCollections': 0, u'numItems': 1},\n          u'version': 778}]\n```\n\n----------------------------------------\n\nTITLE: Example of Zotero Group Data Structure\nDESCRIPTION: Illustrates the structure of group data returned by the groups() method in Pyzotero. Shows a Python dictionary containing group metadata like description, members, and permissions.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n[{u'data': {u'description': u'',\n                    u'fileEditing': u'admins',\n                    u'hasImage': 1,\n                    u'id': 169947,\n                    u'libraryEditing': u'admins',\n                    u'libraryReading': u'members',\n                    u'members': [1177919, 1408658],\n                    u'name': u'smart_cities',\n                    u'owner': 436,\n                    u'type': u'Private',\n                    u'url': u'',\n                    u'version': 0},\n          u'id': 169947,\n          u'links': {u'alternate': {u'href': u'https://www.zotero.org/groups/169947',\n                                    u'type': u'text/html'},\n                     u'self': {u'href': u'https://api.zotero.org/groups/169947',\n                               u'type': u'application/json'}},\n          u'meta': {u'created': u'2013-05-22T11:22:46Z',\n                    u'lastModified': u'2013-05-22T11:26:50Z',\n                    u'numItems': 817},\n          u'version': 0}]\n```\n\n----------------------------------------\n\nTITLE: Example of Zotero Tag Data Structure\nDESCRIPTION: Shows the simple structure of tag data returned by the tags() and item_tags() methods in Pyzotero, which is a list of strings representing tag names.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n['Authority in literature', 'Errata']\n```\n\n----------------------------------------\n\nTITLE: Item Creation Response Format in Pyzotero\nDESCRIPTION: Example of the response format when creating items with Pyzotero. The dictionary shows creation status with success, failed, and unchanged items.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n{'failed': {}, 'success': {'0': 'ABC123'}, 'unchanged': {}}\n```\n\n----------------------------------------\n\nTITLE: Attachment Upload Response Format in Pyzotero\nDESCRIPTION: Example of the return value format when uploading attachments with Pyzotero. The dictionary shows success, failure, and unchanged status for each attachment.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n{\n    'success': [attach1, attach2...],\n    'failure': [attach3, attach4...],\n    'unchanged': [attach4, attach5...]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Zotero Version Data Structure\nDESCRIPTION: Demonstrates the structure of version data returned by version-related methods in Pyzotero. Shows a Python dictionary mapping item IDs to version numbers.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n{'C9KW275P': 3915, 'IB489TKM': 4025 }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Newer Library Versions Example in Python\nDESCRIPTION: Shows the returned data format when retrieving item keys and library versions newer than a specified version using Pyzotero.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n{\n    u'229QED6I': 747,\n    u'22TGJFS2': 769,\n    u'23SZWREM': 764\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full-text Data Example in Python\nDESCRIPTION: Shows the returned data format when retrieving full-text data for an attachment item, containing content and page information.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n{\n\"content\": \"This is full-text content.\",\n\"indexedPages\": 50,\n\"totalPages\": 50\n}\n```\n\n----------------------------------------\n\nTITLE: Full-text Payload Example in Python\nDESCRIPTION: Example payload structure for setting full-text data for an item, containing content and page information for PDFs.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n{\n\"content\": \"This is full-text content.\",\n\"indexedPages\": 50,\n\"totalPages\": 50\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pyzotero from Git Repository\nDESCRIPTION: This bash code snippet shows how to clone the Pyzotero repository, check out the main branch, and install it locally. This approach is useful for accessing specific branches or development versions of the library.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/urschrei/pyzotero.git\ncd pyzotero\ngit checkout main\npip install .\n```\n\n----------------------------------------\n\nTITLE: Installing Pyzotero from a Specific Branch using Git and Pip\nDESCRIPTION: This bash snippet shows how to clone the Pyzotero repository, checkout a specific branch (main), and install it using pip. This method is useful for installing development versions or specific branches of Pyzotero.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/doc/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/urschrei/pyzotero.git\ncd pyzotero\ngit checkout main\npip install .\n```\n\n----------------------------------------\n\nTITLE: Listing Zotero API Keys\nDESCRIPTION: A collection of API access tokens or keys used for authenticating with the Zotero API. Each key is an 8-character alphanumeric string.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/tests/api_responses/keys_doc.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nJIFWQ4AN\n4GBKM5DU\nKPJMSIWH\n3KGKHBQS\n9NUCPDWG\nJ726UZDG\nGW8V2CK7\nCIUH85A5\nIPMKUDPK\nHKXARWU6\n```\n\n----------------------------------------\n\nTITLE: Contributors Table in Markdown\nDESCRIPTION: A markdown table displaying contributor statistics, including the number of commits and GitHub usernames with links to their individual commit histories.\nSOURCE: https://github.com/urschrei/pyzotero.git/blob/main/CONTRIBUTORS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Commits** | **Contributor**<br/> |\n| --- |--- |\n| 13 | [TruePath](https://github.com/urschrei/pyzotero/commits?author=TruePath) |\n| 5 | [patrickfournier](https://github.com/urschrei/pyzotero/commits?author=patrickfournier) |\n| 3 | [davidlesieur](https://github.com/urschrei/pyzotero/commits?author=davidlesieur) |\n| 2 | [ptgolden](https://github.com/urschrei/pyzotero/commits?author=ptgolden) |\n| 2 | [bemuzie](https://github.com/urschrei/pyzotero/commits?author=bemuzie) |\n| 2 | [skybristol](https://github.com/urschrei/pyzotero/commits?author=skybristol) |\n| 1 | [akx](https://github.com/urschrei/pyzotero/commits?author=akx) |\n| 1 | [alee](https://github.com/urschrei/pyzotero/commits?author=alee) |\n| 1 | [avram](https://github.com/urschrei/pyzotero/commits?author=avram) |\n| 1 | [christianbrodbeck](https://github.com/urschrei/pyzotero/commits?author=christianbrodbeck) |\n| 1 | [egh](https://github.com/urschrei/pyzotero/commits?author=egh) |\n| 1 | [fmagin](https://github.com/urschrei/pyzotero/commits?author=fmagin) |\n| 1 | [pnb](https://github.com/urschrei/pyzotero/commits?author=pnb) |\n| 1 | [porduna](https://github.com/urschrei/pyzotero/commits?author=porduna) |\n| 1 | [stakats](https://github.com/urschrei/pyzotero/commits?author=stakats) |\n| 1 | [epistemery](https://github.com/urschrei/pyzotero/commits?author=epistemery) |\n| 1 | [tnajdek](https://github.com/urschrei/pyzotero/commits?author=tnajdek) |\n| 1 | [jghauser](https://github.com/urschrei/pyzotero/commits?author=jghauser) |\n```"
  }
]