[
  {
    "owner": "reduxjs",
    "repo": "redux",
    "content": "TITLE: Complete Todos Slice Implementation with Redux Toolkit and createEntityAdapter\nDESCRIPTION: This snippet presents the full implementation of the todos slice using Redux Toolkit and createEntityAdapter. It includes thunks, reducers, selectors, and demonstrates how to use adapter functions and selectors throughout the slice.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createSlice,\n  createSelector,\n  createAsyncThunk,\n  createEntityAdapter\n} from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\nimport { StatusFilters } from '../filters/filtersSlice'\n\nconst todosAdapter = createEntityAdapter()\n\nconst initialState = todosAdapter.getInitialState({\n  status: 'idle'\n})\n\n// Thunk functions\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await client.get('/fakeApi/todos')\n  return response.todos\n})\n\nexport const saveNewTodo = createAsyncThunk('todos/saveNewTodo', async text => {\n  const initialTodo = { text }\n  const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n  return response.todo\n})\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoToggled(state, action) {\n      const todoId = action.payload\n      const todo = state.entities[todoId]\n      todo.completed = !todo.completed\n    },\n    todoColorSelected: {\n      reducer(state, action) {\n        const { color, todoId } = action.payload\n        state.entities[todoId].color = color\n      },\n      prepare(todoId, color) {\n        return {\n          payload: { todoId, color }\n        }\n      }\n    },\n    todoDeleted: todosAdapter.removeOne,\n    allTodosCompleted(state, action) {\n      Object.values(state.entities).forEach(todo => {\n        todo.completed = true\n      })\n    },\n    completedTodosCleared(state, action) {\n      const completedIds = Object.values(state.entities)\n        .filter(todo => todo.completed)\n        .map(todo => todo.id)\n      todosAdapter.removeMany(state, completedIds)\n    }\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(fetchTodos.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        todosAdapter.setAll(state, action.payload)\n        state.status = 'idle'\n      })\n      .addCase(saveNewTodo.fulfilled, todosAdapter.addOne)\n  }\n})\n\nexport const {\n  allTodosCompleted,\n  completedTodosCleared,\n  todoAdded,\n  todoColorSelected,\n  todoDeleted,\n  todoToggled\n} = todosSlice.actions\n\nexport default todosSlice.reducer\n\nexport const { selectAll: selectTodos, selectById: selectTodoById } =\n  todosAdapter.getSelectors(state => state.todos)\n\nexport const selectTodoIds = createSelector(\n  selectTodos,\n  todos => todos.map(todo => todo.id)\n)\n\nexport const selectFilteredTodos = createSelector(\n  selectTodos,\n  state => state.filters,\n  (todos, filters) => {\n    const { status, colors } = filters\n    const showAllCompletions = status === StatusFilters.All\n    if (showAllCompletions && colors.length === 0) {\n      return todos\n    }\n\n    const completedStatus = status === StatusFilters.Completed\n    return todos.filter(todo => {\n      const statusMatches =\n        showAllCompletions || todo.completed === completedStatus\n      const colorMatches = colors.length === 0 || colors.includes(todo.color)\n      return statusMatches && colorMatches\n    })\n  }\n)\n\nexport const selectFilteredTodoIds = createSelector(\n  selectFilteredTodos,\n  filteredTodos => filteredTodos.map(todo => todo.id)\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Toolkit and React-Redux\nDESCRIPTION: Command to install the Redux Toolkit and React-Redux packages using npm.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/quick-start.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @reduxjs/toolkit react-redux\n```\n\n----------------------------------------\n\nTITLE: Advanced Redux Store Configuration with Redux Toolkit and Hot Reloading\nDESCRIPTION: This snippet demonstrates a more advanced configuration of a Redux store using Redux Toolkit's configureStore function. It includes custom middleware, enhancers, and hot reloading setup for reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nimport monitorReducersEnhancer from './enhancers/monitorReducers'\nimport loggerMiddleware from './middleware/logger'\nimport rootReducer from './reducers'\n\nexport default function configureAppStore(preloadedState) {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware =>\n      getDefaultMiddleware().prepend(loggerMiddleware),\n    preloadedState,\n    enhancers: [monitorReducersEnhancer]\n  })\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))\n  }\n\n  return store\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Redux Toolkit\nDESCRIPTION: Creates a Redux store using configureStore from Redux Toolkit, importing a counter reducer and configuring TypeScript types for the store, state, dispatch, and thunks.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Action, ThunkAction } from '@reduxjs/toolkit'\nimport { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from '@/features/counter/counterSlice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n})\n\n// Infer the type of `store`\nexport type AppStore = typeof store\nexport type RootState = ReturnType<AppStore['getState']>\n// Infer the `AppDispatch` type from the store itself\nexport type AppDispatch = AppStore['dispatch']\n// Define a reusable type describing thunk functions\nexport type AppThunk<ThunkReturnType = void> = ThunkAction<\n  ThunkReturnType,\n  RootState,\n  unknown,\n  Action\n>\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Selector Functions in Redux Slice\nDESCRIPTION: Shows how to define and export selector functions in a slice file to access posts data. Includes selectors for getting all posts and finding a post by ID, enabling more maintainable state access.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RootState } from '@/app/store'\n\nconst postsSlice = createSlice(/* omit slice code*/)\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n\nexport const selectAllPosts = (state: RootState) => state.posts\n\nexport const selectPostById = (state: RootState, postId: string) =>\n  state.posts.find(post => post.id === postId)\n```\n\n----------------------------------------\n\nTITLE: Modern Redux Implementation with Redux Toolkit\nDESCRIPTION: Example showing how to implement a counter using Redux Toolkit, demonstrating createSlice and configureStore usage.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/GettingStarted.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice, configureStore } from '@reduxjs/toolkit'\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\nexport const { incremented, decremented } = counterSlice.actions\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n})\n\n// Can still subscribe to the store\nstore.subscribe(() => console.log(store.getState()))\n\n// Still pass action objects to `dispatch`, but they're created for us\nstore.dispatch(incremented())\n// {value: 1}\nstore.dispatch(incremented())\n// {value: 2}\nstore.dispatch(decremented())\n// {value: 1}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Post Page Component with RTK Query\nDESCRIPTION: React component that uses RTK Query hook to fetch and display a single post. Handles loading states and conditional rendering based on query results.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const SinglePostPage = () => {\n  const { postId } = useParams()\n\n  const currentUsername = useAppSelector(selectCurrentUsername)\n  const { data: post, isFetching, isSuccess } = useGetPostQuery(postId!)\n\n  let content: React.ReactNode\n\n  const canEdit = currentUsername === post?.user\n\n  if (isFetching) {\n    content = <Spinner text=\"Loading...\" />\n  } else if (isSuccess) {\n    content = (\n      <article className=\"post\">\n        <h2>{post.title}</h2>\n        <div>\n          <PostAuthor userId={post.user} />\n          <TimeAgo timestamp={post.date} />\n        </div>\n        <p className=\"post-content\">{post.content}</p>\n        <ReactionButtons post={post} />\n        {canEdit && (\n          <Link to={`/editPost/${post.id}`} className=\"button\">\n            Edit Post\n          </Link>\n        )}\n      </article>\n    )\n  }\n\n  return <section>{content}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Redux Store Setup with Custom Configuration\nDESCRIPTION: A comprehensive Redux store setup using configureStore with advanced options including Redux-Persist integration, custom middleware configuration, thunk extras, and conditional middleware based on environment.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore, combineReducers } from '@reduxjs/toolkit'\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER\n} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport logger from 'redux-logger'\n\nimport postsReducer from '../features/posts/postsSlice'\nimport usersReducer from '../features/users/usersSlice'\nimport { api } from '../features/api/apiSlice'\nimport { serviceLayer } from '../features/api/serviceLayer'\n\nimport stateSanitizerForDevtools from './devtools'\nimport customMiddleware from './someCustomMiddleware'\n\n// Can call `combineReducers` yourself if needed\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  users: usersReducer,\n  [api.reducerPath]: api.reducer\n})\n\nconst persistConfig = {\n  key: 'root',\n  version: 1,\n  storage\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store = configureStore({\n  // Pass previously created persisted reducer\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => {\n    const middleware = getDefaultMiddleware({\n      // Pass in a custom `extra` argument to the thunk middleware\n      thunk: {\n        extraArgument: { serviceLayer }\n      },\n      // Customize the built-in serializability dev check\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n      }\n    }).concat(customMiddleware, api.middleware)\n\n    // Conditionally add another middleware in dev\n    if (process.env.NODE_ENV !== 'production') {\n      middleware.push(logger)\n    }\n\n    return middleware\n  },\n  // Turn off devtools in prod, or pass options in dev\n  devTools:\n    process.env.NODE_ENV === 'production'\n      ? false\n      : {\n          stateSanitizer: stateSanitizerForDevtools\n        }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with TypeScript\nDESCRIPTION: Sets up a Redux store using configureStore and defines types for RootState and AppDispatch. This allows for type inference in other parts of the application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n// ...\n\nexport const store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    comments: commentsReducer,\n    users: usersReducer\n  }\n})\n\n// Get the type of our store variable\nexport type AppStore = typeof store\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<AppStore['getState']>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = AppStore['dispatch']\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Tuple Middleware in TypeScript\nDESCRIPTION: Demonstrates how to use the new Tuple type for configuring middleware in Redux Toolkit 2.0. This change requires using Tuple for non-default middleware to maintain correct TypeScript types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore, Tuple } from '@reduxjs/toolkit'\n\nconfigureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => new Tuple(additionalMiddleware, logger)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Slice with Redux Toolkit in TypeScript\nDESCRIPTION: Complete example of creating a Redux slice using createSlice from Redux Toolkit, including defining state types, initial state, reducer functions with immer-powered state updates, and exporting actions and reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport type { PayloadAction } from '@reduxjs/toolkit'\n\n// Define the TS type for the counter slice's state\nexport interface CounterState {\n  value: number\n  status: 'idle' | 'loading' | 'failed'\n}\n\n// Define the initial value for the slice state\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle'\n}\n\n// Slices contain Redux reducer logic for updating state, and\n// generate actions that can be dispatched to trigger those updates.\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    }\n  }\n})\n\n// Export the generated action creators for use in components\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// Export the slice reducer for use in the store configuration\nexport default counterSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Defining Slice State and Action Types in Redux Toolkit with TypeScript\nDESCRIPTION: This snippet illustrates how to define types for slice state and actions in a Redux Toolkit slice file, including the use of PayloadAction type for action creators.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/typescript.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState } from '../../app/store'\n\n// Define a type for the slice state\nexport interface CounterState {\n  value: number\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  value: 0\n}\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    }\n  }\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectCount = (state: RootState) => state.counter.value\n\nexport default counterSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Component State in Redux with redux-react-local\nDESCRIPTION: This snippet demonstrates how to use the redux-react-local library to manage local component state in Redux. It sets up a counter component with an initial state and a reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n@local({\n  ident: 'counter', initial: 0, reducer : (state, action) => action.me ? state + 1 : state }\n})\nclass Counter extends React.Component {\n```\n\n----------------------------------------\n\nTITLE: Normalizing Users Slice with createEntityAdapter in TypeScript\nDESCRIPTION: Implementation of a normalized users slice using Redux Toolkit's createEntityAdapter. Includes setup of entity adapter, state initialization, and selector generation for managing user data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createSlice,\n  createEntityAdapter\n} from '@reduxjs/toolkit'\n\nimport { client } from '@/api/client'\nimport { createAppAsyncThunk } from '@/app/withTypes'\n\nconst usersAdapter = createEntityAdapter<User>()\n\nconst initialState = usersAdapter.getInitialState()\n\nexport const fetchUsers = createAppAsyncThunk('users/fetchUsers', async () => {\n  const response = await client.get('/fakeApi/users')\n  return response.users\n})\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchUsers.fulfilled, usersAdapter.setAll)\n  }\n})\n\nexport default usersSlice.reducer\n\nexport const { selectAll: selectAllUsers, selectById: selectUserById } =\n  usersAdapter.getSelectors((state: RootState) => state.users)\n\nexport const selectCurrentUser = (state: RootState) => {\n  const currentUsername = selectCurrentUsername(state)\n  if (!currentUsername) {\n    return\n  }\n  return selectUserById(state, currentUsername)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Hot Reloading\nDESCRIPTION: This snippet shows how to set up a Redux store with middleware, enhancers, and hot reloading for reducers. It uses the createStore function from Redux and adds conditional logic for hot reloading in development mode.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { thunk } from 'redux-thunk'\n\nimport monitorReducersEnhancer from './enhancers/monitorReducers'\nimport loggerMiddleware from './middleware/logger'\nimport rootReducer from './reducers'\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [loggerMiddleware, thunk]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer]\n  const composedEnhancers = compose(...enhancers)\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))\n  }\n\n  return store\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Hooks for React-Redux\nDESCRIPTION: Creates pre-typed versions of useDispatch, useSelector, and useStore hooks using the .withTypes() method. This ensures correct typing when using these hooks throughout the application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDispatch, useSelector, useStore } from 'react-redux'\nimport type { AppDispatch, AppStore, RootState } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\nexport const useAppStore = useStore.withTypes<AppStore>()\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Request Thunk in Redux Slice\nDESCRIPTION: Demonstrates creating an async thunk for handling POST requests using createAsyncThunk, including type definitions and reducer updates. Shows how to handle the API response and update the Redux store accordingly.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype PostUpdate = Pick<Post, 'id' | 'title' | 'content'>\ntype NewPost = Pick<Post, 'title' | 'content' | 'user'>\n\nexport const addNewPost = createAppAsyncThunk(\n  'posts/addNewPost',\n  async (initialPost: NewPost) => {\n    const response = await client.post<Post>('/fakeApi/posts', initialPost)\n    return response.data\n  }\n)\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {}, \n    postUpdated(state, action) {}\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(addNewPost.fulfilled, (state, action) => {\n        state.posts.push(action.payload)\n      })\n  }\n})\n\nexport const { postUpdated, reactionAdded } = postsSlice.actions\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Enforcing Typed Redux Hooks\nDESCRIPTION: ESLint configuration to warn developers when they use untyped hooks from react-redux directly instead of the typed versions. This helps maintain type safety across the codebase.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"no-restricted-imports\": \"off\",\n\"@typescript-eslint/no-restricted-imports\": [\n  \"warn\",\n  {\n    \"name\": \"react-redux\",\n    \"importNames\": [\"useSelector\", \"useDispatch\"],\n    \"message\": \"Use typed hooks `useAppDispatch` and `useAppSelector` instead.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-typed Redux Hooks\nDESCRIPTION: Utility file that creates pre-typed versions of useSelector and useDispatch hooks to avoid repeating type declarations throughout the application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { AppDispatch, RootState } from './store'\n\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\n```\n\n----------------------------------------\n\nTITLE: Implementing Normalized State Structure in Redux\nDESCRIPTION: Example of a normalized state structure for blog data, organizing posts, comments, and users into separate 'tables' with byId and allIds patterns for efficient lookups and updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/NormalizingStateShape.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    posts : {\n        byId : {\n            \"post1\" : {\n                id : \"post1\",\n\t\t\t\tauthor : \"user1\",\n\t\t\t\tbody : \"......\",\n\t\t\t\tcomments : [\"comment1\", \"comment2\"]\n            },\n            \"post2\" : {\n\t\t\t\tid : \"post2\",\n\t\t\t\tauthor : \"user2\",\n\t\t\t\tbody : \"......\",\n\t\t\t\tcomments : [\"comment3\", \"comment4\", \"comment5\"]\n            }\n        },\n        allIds : [\"post1\", \"post2\"]\n    },\n    comments : {\n        byId : {\n            \"comment1\" : {\n                id : \"comment1\",\n                author : \"user2\",\n                comment : \".....\",\n            },\n            \"comment2\" : {\n                id : \"comment2\",\n                author : \"user3\",\n                comment : \".....\",\n            },\n            \"comment3\" : {\n                id : \"comment3\",\n                author : \"user3\",\n                comment : \".....\",\n            },\n            \"comment4\" : {\n                id : \"comment4\",\n                author : \"user1\",\n                comment : \".....\",\n            },\n            \"comment5\" : {\n                id : \"comment5\",\n                author : \"user3\",\n                comment : \".....\",\n            },\n        },\n        allIds : [\"comment1\", \"comment2\", \"comment3\", \"comment4\", \"comment5\"]\n    },\n    users : {\n        byId : {\n            \"user1\" : {\n                username : \"user1\",\n                name : \"User 1\",\n            },\n            \"user2\" : {\n                username : \"user2\",\n                name : \"User 2\",\n            },\n            \"user3\" : {\n                username : \"user3\",\n                name : \"User 3\",\n            }\n        },\n        allIds : [\"user1\", \"user2\", \"user3\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Provider in React Application Entry Point\nDESCRIPTION: This snippet shows how to set up the Redux Provider component in the main entry point of a React application. It wraps the root App component with Provider, passing the Redux store to make it accessible throughout the component tree.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_24\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport { store } from './app/store'\n\nimport './index.css'\n\nconst container = document.getElementById('root')!\nconst root = createRoot(container)\n\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux State Slice with createSlice\nDESCRIPTION: Defines a Redux slice for a counter, including initial state and reducer functions. Uses Immer for immutable updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/quick-start.md#2025-04-07_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createSlice } from '@reduxjs/toolkit'\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    increment: state => {\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    }\n  }\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\nexport default counterSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Hooks for React-Redux with TypeScript\nDESCRIPTION: This snippet shows how to create typed versions of useDispatch and useSelector hooks from React-Redux, using the AppDispatch and RootState types from the Redux store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/typescript.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { AppDispatch, RootState } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\n```\n\n----------------------------------------\n\nTITLE: Logging Generated Action Objects\nDESCRIPTION: Shows what auto-generated action objects look like. The generated action creators use the slice name and reducer function name to create type strings, and place arguments into the payload field.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(todoToggled(42))\n// {type: 'todos/todoToggled', payload: 42}\n```\n\n----------------------------------------\n\nTITLE: Implementing Normalized Posts Slice with createEntityAdapter in TypeScript\nDESCRIPTION: Shows how to set up a normalized posts state using createEntityAdapter, including state interface definition, adapter creation with sort comparator, and reducer implementations using adapter methods.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createEntityAdapter,\n  EntityState\n  // omit other imports\n} from '@reduxjs/toolkit'\n\ninterface PostsState extends EntityState<Post, string> {\n  status: 'idle' | 'pending' | 'succeeded' | 'rejected'\n  error: string | null\n}\n\nconst postsAdapter = createEntityAdapter<Post>({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n})\n\nconst initialState: PostsState = postsAdapter.getInitialState({\n  status: 'idle',\n  error: null\n})\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postUpdated(state, action: PayloadAction<PostUpdate>) {\n      const { id, title, content } = action.payload\n      const existingPost = state.entities[id]\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n    reactionAdded(\n      state,\n      action: PayloadAction<{ postId: string; reaction: ReactionName }>\n    ) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.entities[postId]\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        postsAdapter.setAll(state, action.payload)\n      })\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enhanced Redux Store Configuration\nDESCRIPTION: Extended store setup with middleware and enhancer composition\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore, compose } from 'redux'\nimport { thunk } from 'redux-thunk'\nimport rootReducer from './reducers'\nimport loggerMiddleware from './middleware/logger'\nimport monitorReducerEnhancer from './enhancers/monitorReducer'\nimport App from './components/App'\n\nconst middlewareEnhancer = applyMiddleware(loggerMiddleware, thunk)\nconst composedEnhancers = compose(middlewareEnhancer, monitorReducerEnhancer)\n\nconst store = createStore(rootReducer, undefined, composedEnhancers)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Multiple Slices in TypeScript\nDESCRIPTION: Example of setting up a Redux store using configureStore from Redux Toolkit with multiple slice reducers for different features (users, posts, comments) in a blogging application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport usersReducer from '../features/users/usersSlice'\nimport postsReducer from '../features/posts/postsSlice'\nimport commentsReducer from '../features/comments/commentsSlice'\n\nexport const store = configureStore({\n  reducer: {\n    users: usersReducer,\n    posts: postsReducer,\n    comments: commentsReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up RTK Query API Slice in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up an RTK Query API slice for data fetching. It creates an API instance with a base URL and defines endpoints for fetching todos, users, and updating todos.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({\n    // Fill in your own server starting URL here\n    baseUrl: '/'\n  }),\n  endpoints: build => ({\n    // highlight-start\n    // A query endpoint with no arguments\n    getTodos: build.query({\n      query: () => '/todos'\n    }),\n    // A query endpoint with an argument\n    userById: build.query({\n      query: userId => `/users/${userId}`\n    }),\n    // highlight-end\n    // A mutation endpoint\n    updateTodo: build.mutation({\n      query: updatedTodo => ({\n        url: `/todos/${updatedTodo.id}`,\n        method: 'POST',\n        body: updatedTodo\n      })\n    })\n  })\n})\n\n// highlight-next-line\nexport const { useGetTodosQuery, useUserByIdQuery, useUpdateTodoMutation } = api\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Listener Middleware in JavaScript\nDESCRIPTION: This snippet shows how to set up a Redux store using Redux Toolkit's configureStore and include the listener middleware in the middleware array.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nimport { listenerMiddleware } from './listenerMiddleware'\n\n// omit reducers\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  // Add the listener middleware _before_ the thunk or dev checks\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().prepend(listenerMiddleware.middleware)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Redux Toolkit's Listener Middleware for Reactive Logic\nDESCRIPTION: Examples of Redux Toolkit's createListenerMiddleware API for implementing reactive logic with async/await syntax. Shows how to handle events, manage child tasks, and implement conditional logic based on actions or state changes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/side-effects-approaches.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the middleware instance and methods\nconst listenerMiddleware = createListenerMiddleware()\n\n// Add one or more listener entries that look for specific actions.\n// They may contain any sync or async logic, similar to thunks.\nlistenerMiddleware.startListening({\n  actionCreator: todoAdded,\n  effect: async (action, listenerApi) => {\n    // Run whatever additional side-effect-y logic you want here\n    console.log('Todo added: ', action.payload.text)\n\n    // Can cancel other running instances\n    listenerApi.cancelActiveListeners()\n\n    // Run async logic\n    const data = await fetchData()\n\n    // Use the listener API methods to dispatch, get state,\n    // unsubscribe the listener, start child tasks, and more\n    listenerApi.dispatch(todoAdded('Buy pet food'))\n  }\n})\n\nlistenerMiddleware.startListening({\n  // Can match against actions _or_ state changes/contents\n  predicate: (action, currentState, previousState) => {\n    return currentState.counter.value !== previousState.counter.value\n  },\n  // Listeners can have long-running async workflows\n  effect: async (action, listenerApi) => {\n    // Pause until action dispatched or state changed\n    if (await listenerApi.condition(matchSomeAction)) {\n      // Spawn \"child tasks\" that can do more work and return results\n      const task = listenerApi.fork(async forkApi => {\n        // Can pause execution\n        await forkApi.delay(5)\n        // Complete the child by returning a value\n        return 42\n      })\n\n      // Unwrap the child result in the listener\n      const result = await task.result\n      if (result.status === 'ok') {\n        console.log('Child succeeded: ', result.value)\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Async Thunk for Fetching Posts in TypeScript\nDESCRIPTION: Implements a createAsyncThunk function to fetch posts from an API, handling the asynchronous request and returning the data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, nanoid, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '@/api/client'\n\nimport type { RootState } from '@/app/store'\nimport { createAppAsyncThunk } from '@/app/withTypes'\n\nexport const fetchPosts = createAppAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get<Post[]>('/fakeApi/posts')\n  return response.data\n})\n\nconst initialState: PostsState = {\n  posts: [],\n  status: 'idle',\n  error: null\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Redux Thunks with TypeScript\nDESCRIPTION: Shows how to use Redux Thunk's ThunkAction type to properly type thunk functions that perform asynchronous operations and interact with the Redux store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UnknownAction } from 'redux'\nimport { sendMessage } from './store/chat/actions'\nimport { RootState } from './store'\nimport { ThunkAction } from 'redux-thunk'\n\nexport const thunkSendMessage =\n  (message: string): ThunkAction<void, RootState, unknown, UnknownAction> =>\n  async dispatch => {\n    const asyncResp = await exampleAPI()\n    dispatch(\n      sendMessage({\n        message,\n        user: asyncResp,\n        timestamp: new Date().getTime()\n      })\n    )\n  }\n\nfunction exampleAPI() {\n  return Promise.resolve('Async Chat Bot')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Page Component in React with Redux and TypeScript\nDESCRIPTION: This component renders a login form that displays a dropdown of users from the Redux store. Upon submission, it dispatches the userLoggedIn action and navigates to the posts page.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nimport { useAppDispatch, useAppSelector } from '@/app/hooks'\nimport { selectAllUsers } from '@/features/users/usersSlice'\n\nimport { userLoggedIn } from './authSlice'\n\ninterface LoginPageFormFields extends HTMLFormControlsCollection {\n  username: HTMLSelectElement\n}\ninterface LoginPageFormElements extends HTMLFormElement {\n  readonly elements: LoginPageFormFields\n}\n\nexport const LoginPage = () => {\n  const dispatch = useAppDispatch()\n  const users = useAppSelector(selectAllUsers)\n  const navigate = useNavigate()\n\n  const handleSubmit = (e: React.FormEvent<LoginPageFormElements>) => {\n    e.preventDefault()\n\n    const username = e.currentTarget.elements.username.value\n    dispatch(userLoggedIn(username))\n    navigate('/posts')\n  }\n\n  const usersOptions = users.map(user => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ))\n\n  return (\n    <section>\n      <h2>Welcome to Tweeter!</h2>\n      <h3>Please log in:</h3>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"username\">User:</label>\n        <select id=\"username\" name=\"username\" required>\n          <option value=\"\"></option>\n          {usersOptions}\n        </select>\n        <button>Log In</button>\n      </form>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deep State Access without Selectors\nDESCRIPTION: Example of directly accessing deeply nested state in a useSelector hook, demonstrating a pattern that works but lacks proper encapsulation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useSelector(state => state.some.deeply.nested.field)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with TypeScript and Custom Middleware\nDESCRIPTION: Demonstrates how to use configureStore with TypeScript, including adding custom middleware while preserving correct types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware()\n      .prepend(\n        // correctly typed middlewares can just be used\n        additionalMiddleware,\n        // you can also type middlewares manually\n        untypedMiddleware as Middleware<\n          (action: Action<'specialAction'>) => number,\n          RootState\n        >\n      )\n      // prepend and concat calls can be chained\n      .concat(logger)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with TypeScript (Redux Toolkit)\nDESCRIPTION: This snippet demonstrates how to set up a Redux store using Redux Toolkit's configureStore. It includes root reducer configuration, store setup function, and TypeScript type definitions for the root state and store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { combineReducers, configureStore } from '@reduxjs/toolkit'\nimport userReducer from '../features/users/userSlice'\n// Create the root reducer independently to obtain the RootState type\nconst rootReducer = combineReducers({\n  user: userReducer\n})\nexport function setupStore(preloadedState?: Partial<RootState>) {\n  return configureStore({\n    reducer: rootReducer,\n    preloadedState\n  })\n}\nexport type RootState = ReturnType<typeof rootReducer>\nexport type AppStore = ReturnType<typeof setupStore>\nexport type AppDispatch = AppStore['dispatch']\n```\n\n----------------------------------------\n\nTITLE: Redux Toolkit Slice with Immer-powered Reducers\nDESCRIPTION: This snippet defines a Redux slice using Redux Toolkit's createSlice function. It demonstrates how to write reducers that appear to mutate state directly, but actually produce immutable updates thanks to Immer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchUsers Thunk in User Slice\nDESCRIPTION: Implementation of the fetchUsers thunk in the usersSlice to retrieve users from the API. This example shows how to structure an async thunk with proper type definitions and handle the fulfilled action to update state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\n// highlight-next-line\nimport { client } from '@/api/client'\n\nimport type { RootState } from '@/app/store'\n// highlight-next-line\nimport { createAppAsyncThunk } from '@/app/withTypes'\n\ninterface User {\n  id: string\n  name: string\n}\n\n// highlight-start\nexport const fetchUsers = createAppAsyncThunk('users/fetchUsers', async () => {\n  const response = await client.get<User[]>('/fakeApi/users')\n  return response.data\n})\n\nconst initialState: User[] = []\n// highlight-end\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  // highlight-start\n  extraReducers(builder) {\n    builder.addCase(fetchUsers.fulfilled, (state, action) => {\n      return action.payload\n    })\n  }\n  // highlight-end\n})\n\nexport default usersSlice.reducer\n\n// omit selectors\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with DevTools Extension in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a Redux store with the Redux DevTools Extension. It imports the necessary dependencies, composes middleware with the DevTools enhancer, and creates a store. The composeWithDevTools function simplifies the integration of Redux DevTools.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducer'\nimport { print1, print2, print3 } from './exampleAddons/middleware'\n\nconst composedEnhancer = composeWithDevTools(\n  // EXAMPLE: Add whatever middleware you actually want to use here\n  applyMiddleware(print1, print2, print3)\n  // other store enhancers if any\n)\n\nconst store = createStore(rootReducer, composedEnhancer)\nexport default store\n```\n\n----------------------------------------\n\nTITLE: Modern Redux Store Setup with configureStore\nDESCRIPTION: A simplified Redux store setup using Redux Toolkit's configureStore API that automatically handles combining reducers, adding thunk middleware, and setting up Redux DevTools.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nimport postsReducer from '../reducers/postsReducer'\nimport usersReducer from '../reducers/usersReducer'\n\n// Automatically adds the thunk middleware and the Redux DevTools extension\nconst store = configureStore({\n  // Automatically calls `combineReducers`\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Typed Redux Hooks in React Components with TypeScript\nDESCRIPTION: Demonstrates how to use pre-typed hooks (useAppSelector and useAppDispatch) in a React component instead of the standard hooks from React Redux for better type safety.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\n\n// highlight-next-line\nimport { useAppSelector, useAppDispatch } from 'app/hooks'\n\nimport { decrement, increment } from './counterSlice'\n\nexport function Counter() {\n  // highlight-start\n  // The `state` arg is correctly typed as `RootState` already\n  const count = useAppSelector(state => state.counter.value)\n  const dispatch = useAppDispatch()\n  // highlight-end\n\n  // omit rendering logic\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable AppThunk Type for Redux Thunks\nDESCRIPTION: Shows how to define a reusable AppThunk type to reduce repetition when writing thunks in a TypeScript Redux application, with support for return types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  UnknownAction\n>\n```\n\n----------------------------------------\n\nTITLE: Normalizing Notifications Slice with createEntityAdapter in TypeScript\nDESCRIPTION: Implementation of a normalized notifications slice using Redux Toolkit's createEntityAdapter. Includes custom sort comparator, state initialization, and notification management logic.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEntityAdapter, createSlice } from '@reduxjs/toolkit'\n\nimport { client } from '@/api/client'\n\nconst notificationsAdapter = createEntityAdapter<ClientNotification>({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n})\n\nconst initialState = notificationsAdapter.getInitialState()\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    allNotificationsRead(state) {\n      Object.values(state.entities).forEach(notification => {\n        notification.read = true\n      })\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      const notificationsWithMetadata: ClientNotification[] =\n        action.payload.map(notification => ({\n          ...notification,\n          read: false,\n          isNew: true\n        }))\n\n      Object.values(state.entities).forEach(notification => {\n        notification.isNew = !notification.read\n      })\n\n      notificationsAdapter.upsertMany(state, notificationsWithMetadata)\n    })\n  }\n})\n\nexport const { allNotificationsRead } = notificationsSlice.actions\n\nexport default notificationsSlice.reducer\n\nexport const { selectAll: selectAllNotifications } =\n  notificationsAdapter.getSelectors((state: RootState) => state.notifications)\n\nexport const selectUnreadNotificationsCount = (state: RootState) => {\n  const allNotifications = selectAllNotifications(state)\n  const unreadNotifications = allNotifications.filter(\n    notification => !notification.read\n  )\n  return unreadNotifications.length\n}\n```\n\n----------------------------------------\n\nTITLE: Modern Redux Store Setup with configureStore\nDESCRIPTION: Simplified store setup using Redux Toolkit's configureStore API, which automatically includes common middleware and DevTools setup.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nimport todosReducer from './features/todos/todosSlice'\nimport filtersReducer from './features/filters/filtersSlice'\n\nconst store = configureStore({\n  reducer: {\n    todos: todosReducer,\n    filters: filtersReducer\n  }\n})\n\nexport default store\n```\n\n----------------------------------------\n\nTITLE: Creating Extended Slice Builder with Async Thunk Support\nDESCRIPTION: Using buildCreateSlice and asyncThunkCreator to create a custom slice builder that supports defining async thunks inside createSlice. This enables more integrated code organization for async operations.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildCreateSlice, asyncThunkCreator } from '@reduxjs/toolkit'\n\nexport const createAppSlice = buildCreateSlice({\n  creators: { asyncThunk: asyncThunkCreator }\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Async Flows with Redux-Observable and RxJS\nDESCRIPTION: Examples of Redux-Observable epics using RxJS operators for handling AJAX requests and implementing complex async workflows with debouncing, cancellation, and error handling.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/side-effects-approaches.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Typical AJAX example:\nconst fetchUserEpic = action$ =>\n  action$.pipe(\n    filter(fetchUser.match),\n    mergeMap(action =>\n      ajax\n        .getJSON(`https://api.github.com/users/${action.payload}`)\n        .pipe(map(response => fetchUserFulfilled(response)))\n    )\n  )\n\n// Can write highly complex async pipelines, including delays,\n// cancellation, debouncing, and error handling:\nconst fetchReposEpic = action$ =>\n  action$.pipe(\n    filter(fetchReposInput.match),\n    debounceTime(300),\n    switchMap(action =>\n      of(fetchReposStart()).pipe(\n        concat(\n          searchRepos(action.payload).pipe(\n            map(payload => fetchReposSuccess(payload.items)),\n            catchError(error => of(fetchReposError(error)))\n          )\n        )\n      )\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing a Conditional Thunk in Redux (TypeScript)\nDESCRIPTION: This snippet demonstrates the creation of a thunk action creator that conditionally dispatches an action based on the current state. It showcases the structure of a thunk with both sync and async logic capabilities.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport const incrementIfOdd = (amount: number): AppThunk => {\n  return (dispatch, getState) => {\n    const currentValue = selectCount(getState())\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Saga in JavaScript with Redux-Saga\nDESCRIPTION: This snippet demonstrates how to use redux-saga for managing side effects in todo fetching. It includes a saga for fetching todos and a watcher saga that listens for a specific action to trigger the fetch.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { put, takeEvery, call } from 'redux-saga/effects'\nimport {\n  FETCH_TODOS_BEGIN,\n  fetchTodosStarted,\n  fetchTodosSucceeded,\n  fetchTodosFailed\n} from '../actions/todos'\n\n// Saga to actually fetch data\nexport function* fetchTodos() {\n  yield put(fetchTodosStarted())\n\n  try {\n    const res = yield call(axios.get, '/todos')\n    yield put(fetchTodosSucceeded(res.data))\n  } catch (err) {\n    yield put(fetchTodosFailed(err))\n  }\n}\n\n// \"Watcher\" saga that waits for a \"signal\" action, which is\n// dispatched only to kick off logic, not to update state\nexport function* fetchTodosSaga() {\n  yield takeEvery(FETCH_TODOS_BEGIN, fetchTodos)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Todos with Undo Example\nDESCRIPTION: Commands to install the Todos with Undo example featuring Redux Undo functionality.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/todos-with-undo\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Modernizing Redux with createSlice (JavaScript)\nDESCRIPTION: This code demonstrates how to use Redux Toolkit's createSlice API to combine action creators, action types, and reducer logic into a single file. It showcases the simplified syntax for state updates using Immer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = []\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action) {\n      const { id, text } = action.payload\n      state.todos.push({\n        id,\n        text,\n        completed: false\n      })\n    },\n    todoToggled(state, action) {\n      const matchingTodo = state.todos.find(todo => todo.id === action.payload)\n\n      if (matchingTodo) {\n        matchingTodo.completed = !matchingTodo.completed\n      }\n    }\n  }\n})\n\nexport const { todoAdded, todoToggled } = todosSlice.actions\n\nexport default todosSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Async/Await in Thunks\nDESCRIPTION: This snippet shows the recommended pattern for handling errors with async/await in thunks, ensuring that error handling only captures network errors and not errors from processing successful responses.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchData(someValue) {\n  return async (dispatch, getState) => {\n    dispatch(requestStarted())\n\n    // Have to declare the response variable outside the try block\n    let response\n\n    try {\n      response = await myAjaxLib.post('/someEndpoint', { data: someValue })\n    } catch (error) {\n      // Ensure we only catch network errors\n      dispatch(requestFailed(error.message))\n      // Bail out early on failure\n      return\n    }\n\n    // We now have the result and there's no error. Dispatch \"fulfilled\".\n    dispatch(requestSucceeded(response.data))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using createAsyncThunk for Async Operations in Redux (TypeScript)\nDESCRIPTION: This snippet shows how to use Redux Toolkit's createAsyncThunk to create an async thunk. It handles a mock API request and automatically dispatches pending, fulfilled, or rejected actions based on the promise result.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount)\n    return response.data\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Updated Builder Callback Pattern for createReducer and createSlice\nDESCRIPTION: The recommended approach for defining reducers in Redux Toolkit 2.0, using the builder callback pattern which provides better TypeScript support and allows for matchers and default handlers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreateReducer(initialState, builder => {\n  builder.addCase(todoAdded, (state, action) => {})\n})\n\ncreateSlice({\n  name,\n  initialState,\n  reducers: {\n    /* case reducers here */\n  },\n  extraReducers: builder => {\n    builder.addCase(todoAdded, (state, action) => {})\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Sorting in TypeScript/React\nDESCRIPTION: Sorts posts in reverse chronological order using array methods. Creates a copy of the posts array to avoid mutations and sorts based on date timestamps.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date))\n\nconst renderedPosts = orderedPosts.map(post => {\n  return (\n    // omit rendering logic\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Redux Listener Middleware Configuration\nDESCRIPTION: Sets up the listener middleware with proper TypeScript types for Redux store state and dispatch. Creates typed versions of startListening and addListener functions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createListenerMiddleware, addListener } from '@reduxjs/toolkit'\nimport type { RootState, AppDispatch } from './store'\n\nexport const listenerMiddleware = createListenerMiddleware()\n\nexport const startAppListening = listenerMiddleware.startListening.withTypes<\n  RootState,\n  AppDispatch\n>()\nexport type AppStartListening = typeof startAppListening\n\nexport const addAppListener = addListener.withTypes<RootState, AppDispatch>()\nexport type AppAddListener = typeof addAppListener\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Operations with Redux-Saga\nDESCRIPTION: Examples of Redux-Saga worker and watcher patterns for handling async operations. Shows how to fetch user data with error handling and demonstrates complex workflows using child tasks with fork and delay effects.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/side-effects-approaches.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put, takeEvery } from 'redux-saga/effects'\n\n// \"Worker\" saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n  yield put(fetchUserStarted())\n  try {\n    const user = yield call(userApi.getUserById, action.payload.userId)\n    yield put(fetchUserSucceeded(user))\n  } catch (err) {\n    yield put(fetchUserFailed(err.message))\n  }\n}\n\n// \"Watcher\" saga: starts fetchUser on each `USER_FETCH_REQUESTED` action\nfunction* fetchUserWatcher() {\n  yield takeEvery('USER_FETCH_REQUESTED', fetchUser)\n}\n\n// Can use also use sagas for complex async workflows with \"child tasks\":\nfunction* fetchAll() {\n  const task1 = yield fork(fetchResource, 'users')\n  const task2 = yield fork(fetchResource, 'comments')\n  yield delay(1000)\n}\n\nfunction* fetchResource(resource) {\n  const { data } = yield call(api.fetch, resource)\n  yield put(receiveData(data))\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Async Thunk Actions in createSlice (TypeScript)\nDESCRIPTION: This example demonstrates how to handle actions dispatched by createAsyncThunk within a Redux slice. It uses the extraReducers field to update state based on the pending, fulfilled, and rejected action types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    // omit reducers\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(incrementAsync.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.value += action.payload\n      })\n      .addCase(incrementAsync.rejected, state => {\n        state.status = 'failed'\n      })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Async Thunk - TypeScript\nDESCRIPTION: Basic example of using createAsyncThunk to implement an async request for fetching an item by ID. Shows the minimal setup required for creating an async thunk.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAsyncThunk } from '@reduxjs/toolkit'\n\nexport const fetchItemById = createAsyncThunk(\n  'items/fetchItemById',\n  async (itemId: string) => {\n    const item = await someHttpRequest(itemId)\n    return item\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Action Objects\nDESCRIPTION: Examples of basic Redux action objects showing the standard structure with type and payload properties.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ type: 'ADD_TODO', text: 'Use Redux' }\n{ type: 'REMOVE_TODO', id: 42 }\n{ type: 'LOAD_ARTICLE', response: { ... } }\n```\n\n----------------------------------------\n\nTITLE: Creating Memoized Selectors with createSelector in JavaScript\nDESCRIPTION: This snippet demonstrates how to use createSelector to create memoized selectors with multiple input selectors and an output selector. It shows both array and argument syntax for input selectors.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectA = state => state.a\nconst selectB = state => state.b\nconst selectC = state => state.c\n\nconst selectABC = createSelector([selectA, selectB, selectC], (a, b, c) => {\n  // do something with a, b, and c, and return a result\n  return a + b + c\n})\n\n// Call the selector function and get a result\nconst abc = selectABC(state)\n\n// could also be written as separate arguments, and works exactly the same\nconst selectABC2 = createSelector(selectA, selectB, selectC, (a, b, c) => {\n  // do something with a, b, and c, and return a result\n  return a + b + c\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with React-Redux\nDESCRIPTION: Main Counter component implementation showcasing Redux integration using hooks for state management and action dispatching. Includes UI elements for incrementing, decrementing, and custom value addition.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react'\n\nimport { useAppDispatch, useAppSelector } from '@/app/hooks'\nimport {\n  decrement,\n  increment,\n  incrementAsync,\n  incrementByAmount,\n  incrementIfOdd,\n  selectCount,\n  selectStatus\n} from './counterSlice'\n\nimport styles from './Counter.module.css'\n\nexport function Counter() {\n  const dispatch = useAppDispatch()\n  const count = useAppSelector(selectCount)\n  const status = useAppSelector(selectStatus)\n  const [incrementAmount, setIncrementAmount] = useState('2')\n\n  const incrementValue = Number(incrementAmount) || 0\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => {\n            dispatch(decrement())\n          }}\n        >\n          -\n        </button>\n        <span aria-label=\"Count\" className={styles.value}>\n          {count}\n        </span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => {\n            dispatch(increment())\n          }}\n        >\n          +\n        </button>\n      </div>\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Slice with createSlice\nDESCRIPTION: Demonstrates how to use createSlice to define a todos reducer with various actions. This example shows how to configure the slice with a name, initial state, and reducer functions that can safely 'mutate' state through Immer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  entities: [],\n  status: null\n}\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action) {\n      // ✅ This \"mutating\" code is okay inside of createSlice!\n      state.entities.push(action.payload)\n    },\n    todoToggled(state, action) {\n      const todo = state.entities.find(todo => todo.id === action.payload)\n      todo.completed = !todo.completed\n    },\n    todosLoading(state, action) {\n      return {\n        ...state,\n        status: 'loading'\n      }\n    }\n  }\n})\n\nexport const { todoAdded, todoToggled, todosLoading } = todosSlice.actions\n\nexport default todosSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Selectors in JavaScript\nDESCRIPTION: This snippet defines selector functions for accessing todo-related state from the Redux store. These selectors can be used in components to retrieve the current status and list of todos.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const selectTodosStatus = state => state.todos.status\nexport const selectTodos = state => state.todos.todos\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of createAsyncThunk with TypeScript\nDESCRIPTION: Shows the basic usage of createAsyncThunk with TypeScript, including type inference for the payload creator argument and return value.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchUserById = createAsyncThunk(\n  'users/fetchById',\n  async (userId: number) => {\n    const response = await fetch(`https://reqres.in/api/users/${userId}`)\n    return (await response.json()) as MyData\n  }\n)\n\nconst lastReturnedAction = await store.dispatch(fetchUserById(3))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Thunk Middleware in Redux\nDESCRIPTION: A simple implementation of the thunk middleware that intercepts function actions, calls them with dispatch and getState arguments, and otherwise passes actions to the next middleware. This is the foundational pattern enabling thunks in Redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/side-effects-approaches.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst thunkMiddleware =\n  ({ dispatch, getState }) =>\n  next =>\n  action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState)\n    }\n\n    return next(action)\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Redux Toolkit\nDESCRIPTION: This snippet shows how to use Redux Toolkit's configureStore function to set up a Redux store. It demonstrates the simplest usage by passing just the root reducer function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nconst store = configureStore({\n  reducer: rootReducer\n})\n\nexport default store\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Thunks with createAsyncThunk in Redux Toolkit\nDESCRIPTION: This snippet demonstrates how to use createAsyncThunk to generate action creators for asynchronous operations. It shows the implementation of fetchTodos and saveNewTodo thunks, and how to handle their actions in the slice's extraReducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await client.get('/fakeApi/todos')\n  return response.todos\n})\n\nexport const saveNewTodo = createAsyncThunk('todos/saveNewTodo', async text => {\n  const initialTodo = { text }\n  const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n  return response.todo\n})\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    // omit reducer cases\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(fetchTodos.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        const newEntities = {}\n        action.payload.forEach(todo => {\n          newEntities[todo.id] = todo\n        })\n        state.entities = newEntities\n        state.status = 'idle'\n      })\n      .addCase(saveNewTodo.fulfilled, (state, action) => {\n        const todo = action.payload\n        state.entities[todo.id] = todo\n      })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an AddPostForm Component with TypeScript\nDESCRIPTION: This form component captures user input for creating new posts with TypeScript form handling. It defines TypeScript interfaces for form elements and implements form submission handling.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\n\n// TS types for the input fields\n// See: https://epicreact.dev/how-to-type-a-react-form-on-submit-handler/\ninterface AddPostFormFields extends HTMLFormControlsCollection {\n  postTitle: HTMLInputElement\n  postContent: HTMLTextAreaElement\n}\ninterface AddPostFormElements extends HTMLFormElement {\n  readonly elements: AddPostFormFields\n}\n\nexport const AddPostForm = () => {\n  const handleSubmit = (e: React.FormEvent<AddPostFormElements>) => {\n    // Prevent server submission\n    e.preventDefault()\n\n    const { elements } = e.currentTarget\n    const title = elements.postTitle.value\n    const content = elements.postContent.value\n\n    console.log('Values: ', { title, content })\n\n    e.currentTarget.reset()\n  }\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input type=\"text\" id=\"postTitle\" defaultValue=\"\" required />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          defaultValue=\"\"\n          required\n        />\n        <button>Save Post</button>\n      </form>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Fetching Actions and Thunk in JavaScript\nDESCRIPTION: This snippet defines action creators and a thunk for fetching todos. It includes actions for starting, succeeding, and failing the fetch operation, as well as an asynchronous thunk that handles the API call and dispatches appropriate actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios'\nimport {\n  FETCH_TODOS_STARTED,\n  FETCH_TODOS_SUCCEEDED,\n  FETCH_TODOS_FAILED\n} from '../constants/todos'\n\nexport const fetchTodosStarted = () => ({\n  type: FETCH_TODOS_STARTED\n})\n\nexport const fetchTodosSucceeded = todos => ({\n  type: FETCH_TODOS_SUCCEEDED,\n  todos\n})\n\nexport const fetchTodosFailed = error => ({\n  type: FETCH_TODOS_FAILED,\n  error\n})\n\nexport const fetchTodos = () => {\n  return async dispatch => {\n    dispatch(fetchTodosStarted())\n\n    try {\n      // Axios is common, but also `fetch`, or your own \"API service\" layer\n      const res = await axios.get('/todos')\n      dispatch(fetchTodosSucceeded(res.data))\n    } catch (err) {\n      dispatch(fetchTodosFailed(err))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Thunks in PostsList Component (TypeScript/React)\nDESCRIPTION: Updates the PostsList component to dispatch the fetchPosts thunk when mounted. It uses useEffect to check the posts status and dispatch only if the status is 'idle'.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { useAppSelector, useAppDispatch } from '@/app/hooks'\nimport { TimeAgo } from '@/components/TimeAgo'\n\nimport { PostAuthor } from './PostAuthor'\nimport { ReactionButtons } from './ReactionButtons'\nimport { fetchPosts, selectAllPosts, selectPostsStatus } from './postsSlice'\n\nexport const PostsList = () => {\n  const dispatch = useAppDispatch()\n  const posts = useAppSelector(selectAllPosts)\n  const postStatus = useAppSelector(selectPostsStatus)\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts())\n    }\n  }, [postStatus, dispatch])\n\n  // omit rendering logic\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Selector Factory with createSelector in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a 'selector factory' - a function that generates a new unique selector instance every time it's called, useful for reusing selectors with different inputs.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst makeSelectItemsByCategory = () => {\n  const selectItemsByCategory = createSelector(\n    [state => state.items, (state, category) => category],\n    (items, category) => items.filter(item => item.category === category)\n  )\n  return selectItemsByCategory\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Example using Redux Toolkit\nDESCRIPTION: Demonstrates how to set up a simple Redux store and slice using Redux Toolkit, including creating a slice with reducers, configuring the store, and dispatching actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/README.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice, configureStore } from '@reduxjs/toolkit'\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\nexport const { incremented, decremented } = counterSlice.actions\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n})\n\n// Can still subscribe to the store\nstore.subscribe(() => console.log(store.getState()))\n\n// Still pass action objects to `dispatch`, but they're created for us\nstore.dispatch(incremented())\n// {value: 1}\nstore.dispatch(incremented())\n// {value: 2}\nstore.dispatch(decremented())\n// {value: 1}\n```\n\n----------------------------------------\n\nTITLE: Implementing TodoList Component with useSelector Hook\nDESCRIPTION: A React component that uses the useSelector hook to read the todos array from the Redux store and renders a list of TodoListItem components. This shows the pattern for consuming Redux state in React components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\n// highlight-next-line\nimport { useSelector } from 'react-redux'\nimport TodoListItem from './TodoListItem'\n\n// highlight-next-line\nconst selectTodos = state => state.todos\n\nconst TodoList = () => {\n  // highlight-next-line\n  const todos = useSelector(selectTodos)\n\n  // since `todos` is an array, we can loop over it\n  const renderedListItems = todos.map(todo => {\n    return <TodoListItem key={todo.id} todo={todo} />\n  })\n\n  return <ul className=\"todo-list\">{renderedListItems}</ul>\n}\n\nexport default TodoList\n```\n\n----------------------------------------\n\nTITLE: Importing RTK Query APIs in TypeScript\nDESCRIPTION: Shows how to import the core RTK Query APIs from Redux Toolkit, including both the UI-agnostic and React-specific entry points.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// UI-agnostic entry point with the core logic\nimport { createApi } from '@reduxjs/toolkit/query'\n\n// React-specific entry point that automatically generates\n// hooks corresponding to the defined endpoints\nimport { createApi } from '@reduxjs/toolkit/query/react'\n```\n\n----------------------------------------\n\nTITLE: Defining Dispatch Types in Redux\nDESCRIPTION: Specifies the type signatures for BaseDispatch and Dispatch functions in Redux. These functions are responsible for dispatching actions to the store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntype BaseDispatch = (a: Action) => Action\ntype Dispatch = (a: Action | AsyncAction) => any\n```\n\n----------------------------------------\n\nTITLE: Creating Memoized Selector with Reselect in Redux\nDESCRIPTION: Demonstrates how to use createSelector from Reselect to create a memoized selector for todo IDs, optimizing performance by caching results.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSelector } from 'reselect'\n\nexport const selectTodoIds = createSelector(\n  // First, pass one or more \"input selector\" functions:\n  state => state.todos,\n  // Then, an \"output selector\" that receives all the input results as arguments\n  // and returns a final result value\n  todos => todos.map(todo => todo.id)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Display Component with Redux (React & TypeScript)\nDESCRIPTION: This React component uses Redux hooks to display user information and trigger user fetching. It demonstrates the usage of custom hooks, selectors, and dispatching async thunk actions in a TypeScript environment.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport { fetchUser, selectUserName, selectUserFetchStatus } from './userSlice'\n\nexport default function UserDisplay() {\n  const dispatch = useAppDispatch()\n  const userName = useAppSelector(selectUserName)\n  const userFetchStatus = useAppSelector(selectUserFetchStatus)\n\n  return (\n    <div>\n      {/* Display the current user name */}\n      <div>{userName}</div>\n      {/* On button click, dispatch a thunk action to fetch a user */}\n      <button onClick={() => dispatch(fetchUser())}>Fetch user</button>\n      {/* At any point if we're fetching a user, display that on the UI */}\n      {userFetchStatus === 'loading' && <div>Fetching user...</div>}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Async Thunk Implementation - TypeScript\nDESCRIPTION: Detailed example showing how to manually implement an async thunk without using createAsyncThunk. Demonstrates the traditional approach with action creators and error handling.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst getRepoDetailsStarted = () => ({\n  type: 'repoDetails/fetchStarted'\n})\nconst getRepoDetailsSuccess = (repoDetails: RepoDetails) => ({\n  type: 'repoDetails/fetchSucceeded',\n  payload: repoDetails\n})\nconst getRepoDetailsFailed = (error: any) => ({\n  type: 'repoDetails/fetchFailed',\n  error\n})\n\nconst fetchIssuesCount = (org: string, repo: string) => {\n  return async (dispatch: AppDispatch) => {\n    dispatch(getRepoDetailsStarted())\n    try {\n      const repoDetails = await getRepoDetails(org, repo)\n      dispatch(getRepoDetailsSuccess(repoDetails))\n    } catch (err) {\n      dispatch(getRepoDetailsFailed(err.toString()))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Async Thunk Actions in Reducers with TypeScript\nDESCRIPTION: Updates the posts slice to handle the pending, fulfilled, and rejected actions dispatched by the fetchPosts thunk, updating the state accordingly.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // omit existing reducers here\n  },\n\n  extraReducers: builder => {\n    builder\n      .addCase(userLoggedOut, state => {\n        // Clear out the list of posts whenever the user logs out\n        return initialState\n      })\n      .addCase(fetchPosts.pending, (state, action) => {\n        state.status = 'pending'\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        // Add any fetched posts to the array\n        state.posts.push(...action.payload)\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message ?? 'Unknown Error'\n      })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Redux Store Provider for Next.js App Router\nDESCRIPTION: This snippet demonstrates how to create a StoreProvider component that initializes the Redux store and provides it to the React component tree. It ensures the store is only created once and is re-render safe.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/nextjs.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\nimport { useRef } from 'react'\nimport { Provider } from 'react-redux'\nimport { makeStore, AppStore } from '../lib/store'\n\nexport default function StoreProvider({\n  children\n}: {\n  children: React.ReactNode\n}) {\n  const storeRef = useRef<AppStore | null>(null)\n  if (!storeRef.current) {\n    // Create the store instance the first time this renders\n    storeRef.current = makeStore()\n  }\n\n  return <Provider store={storeRef.current}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Async Requests with Promise Chaining in Thunks\nDESCRIPTION: This example demonstrates how to properly handle async requests in thunks using promise chaining, ensuring correct handling of network errors versus application errors.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchData(someValue) {\n  return (dispatch, getState) => {\n    dispatch(requestStarted())\n\n    myAjaxLib.post('/someEndpoint', { data: someValue }).then(\n      response => dispatch(requestSucceeded(response.data)),\n      error => dispatch(requestFailed(error.message))\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Test for Redux-Connected Component with MSW Mocking\nDESCRIPTION: This example demonstrates a complete integration test for a Redux-connected component that makes API calls. It uses MSW to mock API responses and a custom renderer to provide Redux store to components during testing.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { http, HttpResponse, delay } from 'msw'\nimport { setupServer } from 'msw/node'\nimport { fireEvent, screen } from '@testing-library/react'\n// We're using our own custom render function and not RTL's render.\nimport { renderWithProviders } from '../../../utils/test-utils'\nimport UserDisplay from '../UserDisplay'\n\n// We use msw to intercept the network request during the test,\n// and return the response 'John Smith' after 150ms\n// when receiving a get request to the `/api/user` endpoint\nexport const handlers = [\n  http.get('/api/user', async () => {\n    await delay(150)\n    return HttpResponse.json('John Smith')\n  })\n]\n\nconst server = setupServer(...handlers)\n\n// Enable API mocking before tests.\nbeforeAll(() => server.listen())\n\n// Reset any runtime request handlers we may add during the tests.\nafterEach(() => server.resetHandlers())\n\n// Disable API mocking after the tests are done.\nafterAll(() => server.close())\n\ntest('fetches & receives a user after clicking the fetch user button', async () => {\n  renderWithProviders(<UserDisplay />)\n\n  // should show no user initially, and not be fetching a user\n  expect(screen.getByText(/no user/i)).toBeInTheDocument()\n  expect(screen.queryByText(/Fetching user\\.\\.\\.i/)).not.toBeInTheDocument()\n\n  // after clicking the 'Fetch user' button, it should now show that it is fetching the user\n  fireEvent.click(screen.getByRole('button', { name: /Fetch user/i }))\n  expect(screen.queryByText(/no user/i)).not.toBeInTheDocument()\n  expect(screen.getByText(/Fetching user\\.\\.\\.i/)).toBeInTheDocument()\n\n  // after some time, the user should be received\n  expect(await screen.findByText(/John Smith/i)).toBeInTheDocument()\n  expect(screen.queryByText(/no user/i)).not.toBeInTheDocument()\n  expect(screen.queryByText(/Fetching user\\.\\.\\.i/)).not.toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Adding UndoRedo Component to App\nDESCRIPTION: Integrates the UndoRedo component into the main App component, completing the implementation of undo/redo functionality in the Redux Todo application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport Footer from './Footer'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\nimport UndoRedo from '../containers/UndoRedo'\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    <Footer />\n    <UndoRedo />\n  </div>\n)\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Creating Thunk Action Creators with Function Keyword\nDESCRIPTION: Demonstrates creating a thunk action creator function that returns a thunk function. This example uses the function keyword and handles an async API call to fetch a todo by ID.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// fetchTodoById is the \"thunk action creator\"\nexport function fetchTodoById(todoId) {\n  // fetchTodoByIdThunk is the \"thunk function\"\n  return async function fetchTodoByIdThunk(dispatch, getState) {\n    const response = await client.get(`/fakeApi/todo/${todoId}`)\n    dispatch(todosLoaded(response.todos))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware Types in Redux\nDESCRIPTION: Defines the type signatures for MiddlewareAPI and Middleware in Redux. Middleware is a higher-order function that composes a dispatch function to return a new dispatch function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntype MiddlewareAPI = { dispatch: Dispatch, getState: () => State }\ntype Middleware = (api: MiddlewareAPI) => (next: Dispatch) => Dispatch\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Argument Memoized Selector in Redux\nDESCRIPTION: Demonstrates creating a memoized selector that takes multiple input selectors to filter todos based on completion status.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSelector } from 'reselect'\nimport { StatusFilters } from '../filters/filtersSlice'\n\nexport const selectFilteredTodos = createSelector(\n  // First input selector: all todos\n  state => state.todos,\n  // Second input selector: current status filter\n  state => state.filters.status,\n  // Output selector: receives both values\n  (todos, status) => {\n    if (status === StatusFilters.All) {\n      return todos\n    }\n\n    const completedStatus = status === StatusFilters.Completed\n    // Return either active or completed todos based on filter\n    return todos.filter(todo => todo.completed === completedStatus)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a SinglePostPage Component with Redux and React Router in TypeScript\nDESCRIPTION: This component renders a single post detail page by extracting the postId from URL parameters using React Router's useParams hook, then selecting the corresponding post from Redux store with useAppSelector.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from 'react-router-dom'\n\nimport { useAppSelector } from '@/app/hooks'\n\nexport const SinglePostPage = () => {\n  const { postId } = useParams()\n\n  const post = useAppSelector(state =>\n    state.posts.find(post => post.id === postId)\n  )\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  return (\n    <section>\n      <article className=\"post\">\n        <h2>{post.title}</h2>\n        <p className=\"post-content\">{post.content}</p>\n      </article>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Form Submission in React Component\nDESCRIPTION: Shows how to integrate the async thunk with a React component form, including handling loading states and error handling using try/catch with the unwrap() function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\n\nimport { useAppDispatch, useAppSelector } from '@/app/hooks'\nimport { selectCurrentUsername } from '@/features/auth/authSlice'\nimport { addNewPost } from './postsSlice'\n\nexport const AddPostForm = () => {\n  const [addRequestStatus, setAddRequestStatus] = useState<'idle' | 'pending'>('idle')\n\n  const dispatch = useAppDispatch()\n  const userId = useAppSelector(selectCurrentUsername)!\n\n  const handleSubmit = async (e: React.FormEvent<AddPostFormElements>) => {\n    e.preventDefault()\n\n    const { elements } = e.currentTarget\n    const title = elements.postTitle.value\n    const content = elements.postContent.value\n\n    const form = e.currentTarget\n\n    try {\n      setAddRequestStatus('pending')\n      await dispatch(addNewPost({ title, content, user: userId })).unwrap()\n\n      form.reset()\n    } catch (err) {\n      console.error('Failed to save the post: ', err)\n    } finally {\n      setAddRequestStatus('idle')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TodosList Component with Redux Hooks in JavaScript\nDESCRIPTION: This snippet shows a React component that uses Redux hooks to fetch and display todos. It dispatches the fetchTodos action on mount and selects the todos status and data from the store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchTodos } from '../actions/todos'\nimport { selectTodosStatus, selectTodos } from '../selectors/todos'\n\nexport function TodosList() {\n  const dispatch = useDispatch()\n  const status = useSelector(selectTodosStatus)\n  const todos = useSelector(selectTodos)\n\n  useEffect(() => {\n    dispatch(fetchTodos())\n  }, [dispatch])\n\n  // omit rendering logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TodosList Component with Redux Hooks in JavaScript\nDESCRIPTION: This snippet shows a React component that uses Redux hooks to fetch and display todos. It dispatches the fetchTodos action on mount and selects the todos status and data from the store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchTodos } from '../actions/todos'\nimport { selectTodosStatus, selectTodos } from '../selectors/todos'\n\nexport function TodosList() {\n  const dispatch = useDispatch()\n  const status = useSelector(selectTodosStatus)\n  const todos = useSelector(selectTodos)\n\n  useEffect(() => {\n    dispatch(fetchTodos())\n  }, [dispatch])\n\n  // omit rendering logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todos Slice with createEntityAdapter in Redux Toolkit\nDESCRIPTION: This snippet shows how to use createEntityAdapter to manage a normalized state for todos. It includes setting up the adapter, creating the initial state, and using adapter functions in reducers and extra reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createSlice,\n  createAsyncThunk,\n  createEntityAdapter\n} from '@reduxjs/toolkit'\n// omit some imports\n\nconst todosAdapter = createEntityAdapter()\n\nconst initialState = todosAdapter.getInitialState({\n  status: 'idle'\n})\n\n// omit thunks\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    // omit some reducers\n    todoDeleted: todosAdapter.removeOne,\n    completedTodosCleared(state, action) {\n      const completedIds = Object.values(state.entities)\n        .filter(todo => todo.completed)\n        .map(todo => todo.id)\n      todosAdapter.removeMany(state, completedIds)\n    }\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(fetchTodos.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        todosAdapter.setAll(state, action.payload)\n        state.status = 'idle'\n      })\n      .addCase(saveNewTodo.fulfilled, todosAdapter.addOne)\n  }\n})\n\n// omit selectors\n```\n\n----------------------------------------\n\nTITLE: Using Thunk Middleware for Async Actions in Redux\nDESCRIPTION: This example illustrates how to use thunk middleware in Redux to handle asynchronous actions. It includes examples of action creators, thunks, and dispatching both synchronous and asynchronous actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/applyMiddleware.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { thunk } from 'redux-thunk'\nimport * as reducers from './reducers'\n\nconst reducer = combineReducers(reducers)\n// applyMiddleware supercharges createStore with middleware:\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nfunction fetchSecretSauce() {\n  return fetch('https://www.google.com/search?q=secret+sauce')\n}\n\n// These are the normal action creators you have seen so far.\n// The actions they return can be dispatched without any middleware.\n// However, they only express \"facts\" and not the \"async flow\".\nfunction makeASandwich(forPerson, secretSauce) {\n  return {\n    type: 'MAKE_SANDWICH',\n    forPerson,\n    secretSauce\n  }\n}\n\nfunction apologize(fromPerson, toPerson, error) {\n  return {\n    type: 'APOLOGIZE',\n    fromPerson,\n    toPerson,\n    error\n  }\n}\n\nfunction withdrawMoney(amount) {\n  return {\n    type: 'WITHDRAW',\n    amount\n  }\n}\n\n// Even without middleware, you can dispatch an action:\nstore.dispatch(withdrawMoney(100))\n\n// But what do you do when you need to start an asynchronous action,\n// such as an API call, or a router transition?\n\n// Meet thunks.\n// A thunk is a function that returns a function.\n// This is a thunk.\nfunction makeASandwichWithSecretSauce(forPerson) {\n  // Invert control!\n  // Return a function that accepts `dispatch` so we can dispatch later.\n  // Thunk middleware knows how to turn thunk async actions into actions.\n  return function (dispatch) {\n    return fetchSecretSauce().then(\n      sauce => dispatch(makeASandwich(forPerson, sauce)),\n      error => dispatch(apologize('The Sandwich Shop', forPerson, error))\n    )\n  }\n}\n\n// Thunk middleware lets me dispatch thunk async actions\n// as if they were actions!\nstore.dispatch(makeASandwichWithSecretSauce('Me'))\n\n// It even takes care to return the thunk's return value\n// from the dispatch, so I can chain Promises as long as I return them.\nstore.dispatch(makeASandwichWithSecretSauce('My wife')).then(() => {\n  console.log('Done!')\n})\n\n// In fact I can write action creators that dispatch\n// actions and async actions from other action creators,\n// and I can build my control flow with Promises.\nfunction makeSandwichesForEverybody() {\n  return function (dispatch, getState) {\n    if (!getState().sandwiches.isShopOpen) {\n      // You don't have to return Promises, but it's a handy convention\n      // so the caller can always call .then() on async dispatch result.\n      return Promise.resolve()\n    }\n\n    // We can dispatch both plain object actions and other thunks,\n    // which lets us compose the asynchronous actions in a single flow.\n    return dispatch(makeASandwichWithSecretSauce('My Grandma'))\n      .then(() =>\n        Promise.all([\n          dispatch(makeASandwichWithSecretSauce('Me')),\n          dispatch(makeASandwichWithSecretSauce('My wife'))\n        ])\n      )\n      .then(() => dispatch(makeASandwichWithSecretSauce('Our kids')))\n      .then(() =>\n        dispatch(\n          getState().myMoney > 42\n            ? withdrawMoney(42)\n            : apologize('Me', 'The Sandwich Shop')\n        )\n      )\n  }\n}\n\n// This is very useful for server side rendering, because I can wait\n// until data is available, then synchronously render the app.\n\nimport { renderToString } from 'react-dom/server'\n\nstore\n  .dispatch(makeSandwichesForEverybody())\n  .then(() => response.send(renderToString(<MyApp store={store} />)))\n\n// I can also dispatch a thunk async action from a component\n// any time its props change to load the missing data.\n\nimport React from 'react'\nimport { connect } from 'react-redux'\n\nfunction SandwichShop(props) {\n  const { dispatch, forPerson } = props\n\n  useEffect(() => {\n    dispatch(makeASandwichWithSecretSauce(forPerson))\n  }, [forPerson])\n\n  return <p>{this.props.sandwiches.join('mustard')}</p>\n}\n\nexport default connect(state => ({\n  sandwiches: state.sandwiches\n}))(SandwichShop)\n```\n\n----------------------------------------\n\nTITLE: Redux Thunk Middleware Implementation with Annotations\nDESCRIPTION: The actual implementation of the Redux thunk middleware with detailed annotations explaining how it works. This middleware intercepts function actions and calls them with dispatch and getState as arguments.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// standard middleware definition, with 3 nested functions:\n// 1) Accepts `{dispatch, getState}`\n// 2) Accepts `next`\n// 3) Accepts `action`\nconst thunkMiddleware =\n  ({ dispatch, getState }) =>\n  next =>\n  action => {\n    // If the \"action\" is actually a function instead...\n    if (typeof action === 'function') {\n      // then call the function and pass `dispatch` and `getState` as arguments\n      return action(dispatch, getState)\n    }\n\n    // Otherwise, it's a normal action - send it onwards\n    return next(action)\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Tests for React App\nDESCRIPTION: This command launches the test runner in interactive watch mode, allowing you to run and monitor tests for your React application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter/README.md#2025-04-07_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Dispatching Thunks from React Components\nDESCRIPTION: Demonstrates how to dispatch a thunk action from a React component using the useDispatch hook. The component calls the thunk action creator which then gets dispatched to the Redux store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TodoComponent({ todoId }) {\n  const dispatch = useDispatch()\n\n  const onFetchClicked = () => {\n    // Calls the thunk action creator, and passes the thunk function to dispatch\n    dispatch(fetchTodoById(todoId))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Store Enhancer Type in Redux\nDESCRIPTION: Specifies the type signature for a Store Enhancer in Redux. A Store Enhancer is a higher-order function that composes a store creator to return a new enhanced store creator.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntype StoreEnhancer = (next: StoreCreator) => StoreCreator\n```\n\n----------------------------------------\n\nTITLE: Injecting Slice Reducers with combineSlices in TypeScript\nDESCRIPTION: Shows how to use the new combineSlices API to create a reducer that supports lazy-loading of slice reducers. This example demonstrates creating a combined reducer, injecting a new slice, and the resulting type changes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a reducer with a TS type that knows `numberSlice` will be injected\nconst combinedReducer =\n  combineSlices(stringSlice).withLazyLoadedSlices<\n    WithSlice<typeof numberSlice>\n  >()\n\n// `state.number` doesn't exist initially\nexpect(combinedReducer(undefined, dummyAction()).number).toBe(undefined)\n\n// Create a version of the reducer with `numberSlice` injected (mainly useful for types)\nconst injectedReducer = combinedReducer.inject(numberSlice)\n\n// `state.number` now exists, and injectedReducer's type no longer marks it as optional\nexpect(injectedReducer(undefined, dummyAction()).number).toBe(\n  numberSlice.getInitialState()\n)\n\n// original reducer has also been changed (type is still optional)\nexpect(combinedReducer(undefined, dummyAction()).number).toBe(\n  numberSlice.getInitialState()\n)\n```\n\n----------------------------------------\n\nTITLE: Adding User Routes to App Component in React Router\nDESCRIPTION: React Router configuration that adds routes for the UsersList and UserPage components, enabling navigation to user-related pages in the application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n          <Route path=\"/posts/:postId\" element={<SinglePostPage />} />\n          <Route path=\"/editPost/:postId\" element={<EditPostForm />} />\n          // highlight-start\n          <Route path=\"/users\" element={<UsersList />} />\n          <Route path=\"/users/:userId\" element={<UserPage />} />\n          // highlight-end\n          <Redirect to=\"/\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced Memoized Selector with Multiple Filters in Redux\nDESCRIPTION: Demonstrates a more complex memoized selector that filters todos based on both completion status and color.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport const selectFilteredTodos = createSelector(\n  // First input selector: all todos\n  selectTodos,\n  // Second input selector: all filter values\n  state => state.filters,\n  // Output selector: receives both values\n  (todos, filters) => {\n    const { status, colors } = filters\n    const showAllCompletions = status === StatusFilters.All\n    if (showAllCompletions && colors.length === 0) {\n      return todos\n    }\n\n    const completedStatus = status === StatusFilters.Completed\n    // Return either active or completed todos based on filter\n    return todos.filter(todo => {\n      const statusMatches =\n        showAllCompletions || todo.completed === completedStatus\n      const colorMatches = colors.length === 0 || colors.includes(todo.color)\n      return statusMatches && colorMatches\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating NotificationsList Component for Redux Application\nDESCRIPTION: Implements a NotificationsList component that displays notifications from the Redux store, using the PostAuthor and TimeAgo components for formatting. Each notification shows the user who sent it and when it was sent.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppSelector } from '@/app/hooks'\n\nimport { TimeAgo } from '@/components/TimeAgo'\n\nimport { PostAuthor } from '@/features/posts/PostAuthor'\n\nimport { selectAllNotifications } from './notificationsSlice'\n\nexport const NotificationsList = () => {\n  const notifications = useAppSelector(selectAllNotifications)\n\n  const renderedNotifications = notifications.map(notification => {\n    return (\n      <div key={notification.id} className=\"notification\">\n        <div>\n          <b>\n            <PostAuthor userId={notification.user} showPrefix={false} />\n          </b>{' '}\n          {notification.message}\n        </div>\n        <TimeAgo timestamp={notification.date} />\n      </div>\n    )\n  })\n\n  return (\n    <section className=\"notificationsList\">\n      <h2>Notifications</h2>\n      {renderedNotifications}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slice with TypeScript (Redux Toolkit Approach)\nDESCRIPTION: This snippet demonstrates the recommended approach to defining a slice with TypeScript using Redux Toolkit, including state type declaration and PayloadAction usage.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface Todo {\n  id: string\n  text: string\n  completed: boolean\n}\n\n// highlight-start\n// Declare and export a type for the slice's state\nexport type TodosState = Todo[]\n\nconst initialState: TodosState = []\n// highlight-end\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  // The `state` argument type will be inferred for all case reducers\n  // from the type of `initialState`\n  initialState,\n  reducers: {\n    // highlight-start\n    // Use `PayloadAction<YourPayloadTypeHere>` for each `action` argument\n    todoAdded(state, action: PayloadAction<{ id: string; text: string }>) {\n      // omit logic\n    },\n    todoToggled(state, action: PayloadAction<string>) {\n      // omit logic\n    }\n    // highlight-end\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Reducers with Prepare Callbacks in createSlice\nDESCRIPTION: This snippet extends the todos slice by adding two more reducers: todoColorSelected with a prepare callback for handling multiple parameters, and todoDeleted for removing items from the normalized state object.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action) {\n      const todo = action.payload\n      state.entities[todo.id] = todo\n    },\n    todoToggled(state, action) {\n      const todoId = action.payload\n      const todo = state.entities[todoId]\n      todo.completed = !todo.completed\n    },\n    // highlight-start\n    todoColorSelected: {\n      reducer(state, action) {\n        const { color, todoId } = action.payload\n        state.entities[todoId].color = color\n      },\n      prepare(todoId, color) {\n        return {\n          payload: { todoId, color }\n        }\n      }\n    },\n    todoDeleted(state, action) {\n      delete state.entities[action.payload]\n    }\n    // highlight-end\n  }\n})\n\nexport const { todoAdded, todoToggled, todoColorSelected, todoDeleted } =\n  todosSlice.actions\n\nexport default todosSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Multiple Reducers\nDESCRIPTION: Configures the Redux store with multiple slice reducers including auth, posts, and users using configureStore from Redux Toolkit.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nimport authReducer from '@/features/auth/authSlice'\nimport postsReducer from '@/features/posts/postsSlice'\nimport usersReducer from '@/features/users/usersSlice'\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    posts: postsReducer,\n    users: usersReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring User-agent for All Web Crawlers in Robot.txt\nDESCRIPTION: This snippet sets the User-agent directive to allow all web crawlers to access the entire website. It uses the wildcard (*) to indicate that the rules apply to all crawlers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter/public/robots.txt#2025-04-07_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Configure Store Implementation\nDESCRIPTION: Modular store configuration function with middleware and enhancer setup\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { thunk } from 'redux-thunk'\n\nimport monitorReducersEnhancer from './enhancers/monitorReducers'\nimport loggerMiddleware from './middleware/logger'\nimport rootReducer from './reducers'\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [loggerMiddleware, thunk]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer]\n  const composedEnhancers = compose(...enhancers)\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\n\n  return store\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Reducer Function Signature\nDESCRIPTION: Shows the basic signature pattern for Redux reducer functions that could be used with Array.reduce()\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/SplittingReducerLogic.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(state, action) -> newState\n```\n\n----------------------------------------\n\nTITLE: New CreateSlice Callback Syntax - TypeScript\nDESCRIPTION: Demonstrates the new callback syntax for createSlice that allows defining thunks directly within the slice.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst createSliceWithThunks = buildCreateSlice({\n  creators: { asyncThunk: asyncThunkCreator }\n})\n\nconst todosSlice = createSliceWithThunks({\n  name: 'todos',\n  initialState: {\n    loading: false,\n    todos: [],\n    error: null\n  } as TodoState,\n  reducers: create => ({\n    deleteTodo: create.reducer((state, action: PayloadAction<number>) => {\n      state.todos.splice(action.payload, 1)\n    }),\n    addTodo: create.preparedReducer(\n      (text: string) => {\n        const id = nanoid()\n        return { payload: { id, text } }\n      },\n      (state, action) => {\n        state.todos.push(action.payload)\n      }\n    ),\n    fetchTodo: create.asyncThunk(\n      async (id: string, thunkApi) => {\n        const res = await fetch(`myApi/todos?id=${id}`)\n        return (await res.json()) as Item\n      },\n      {\n        pending: state => {\n          state.loading = true\n        },\n        rejected: (state, action) => {\n          state.error = action.payload ?? action.error\n        },\n        fulfilled: (state, action) => {\n          state.todos.push(action.payload)\n        },\n        settled: (state, action) => {\n          state.loading = false\n        }\n      }\n    )\n  })\n})\n\nexport const { addTodo, deleteTodo, fetchTodo } = todosSlice.actions\n```\n\n----------------------------------------\n\nTITLE: Updating Navbar to Show Current User and Logout Button\nDESCRIPTION: This component retrieves the current user from Redux state and conditionally renders the navbar content including a logout button that dispatches the userLoggedOut action when clicked.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\n\nimport { useAppDispatch, useAppSelector } from '@/app/hooks'\n\nimport { userLoggedOut } from '@/features/auth/authSlice'\nimport { selectCurrentUser } from '@/features/users/usersSlice'\n\nimport { UserIcon } from './UserIcon'\n\nexport const Navbar = () => {\n  const dispatch = useAppDispatch()\n  const user = useAppSelector(selectCurrentUser)\n\n  const isLoggedIn = !!user\n\n  let navContent: React.ReactNode = null\n\n  if (isLoggedIn) {\n    const onLogoutClicked = () => {\n      dispatch(userLoggedOut())\n    }\n\n    navContent = (\n      <div className=\"navContent\">\n        <div className=\"navLinks\">\n          <Link to=\"/posts\">Posts</Link>\n        </div>\n        <div className=\"userDetails\">\n          <UserIcon size={32} />\n          {user.name}\n          <button className=\"button small\" onClick={onLogoutClicked}>\n            Log Out\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n        {navContent}\n      </section>\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectors with Reselect\nDESCRIPTION: Example of creating a memoized selector using Reselect to derive todo descriptions from state. Shows how Reselect handles memoization based on input changes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSelector } from 'reselect'\n\nconst selectTodoDescriptionsReselect = createSelector(\n  [state => state.todos],\n  todos => todos.map(todo => todo.text)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Selector for Current User in Redux\nDESCRIPTION: This selector composes two other selectors to retrieve the current user object based on the authenticated username from the auth slice and the users data from the users slice.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\nimport { selectCurrentUsername } from '@/features/auth/authSlice'\n\n// omit the rest of the slice and selectors\n\nexport const selectCurrentUser = (state: RootState) => {\n  const currentUsername = selectCurrentUsername(state)\n  return selectUserById(state, currentUsername)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Redux Store with createStore\nDESCRIPTION: Example of creating a Redux store using the createStore method with a simple todos reducer. The example demonstrates initializing with preloaded state and dispatching an action to modify the state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/createStore.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([action.text])\n    default:\n      return state\n  }\n}\n\nconst store = createStore(todos, ['Use Redux'])\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Read the docs'\n})\n\nconsole.log(store.getState())\n// [ 'Use Redux', 'Read the docs' ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Thunks Inside createSlice Using Extended Builder\nDESCRIPTION: Example of implementing fetchPosts thunk directly inside createSlice using the extended createAppSlice. This approach integrates the thunk definition, condition handling, and state management cases in a single location.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst postsSlice = createAppSlice({\n  name: 'posts',\n  initialState,\n  reducers: create => {\n    return {\n      // omit the other reducers\n      // highlight-start\n      fetchPosts: create.asyncThunk(\n        // Payload creator function to fetch the data\n        async () => {\n          const response = await client.get<Post[]>('/fakeApi/posts')\n          return response.data\n        },\n        {\n          // Options for `createAsyncThunk`\n          options: {\n            condition(arg, thunkApi) {\n              const { posts } = thunkApi.getState() as RootState\n              if (posts.status !== 'idle') {\n                return false\n              }\n            }\n          },\n          // The case reducers to handle the dispatched actions.\n          // Each of these is optional, but must use these names.\n          pending: (state, action) => {\n            state.status = 'pending'\n          },\n          fulfilled: (state, action) => {\n            state.status = 'succeeded'\n            // Add any fetched posts to the array\n            state.posts.push(...action.payload)\n          },\n          rejected: (state, action) => {\n            state.status = 'rejected'\n            state.error = action.error.message ?? 'Unknown Error'\n          }\n        }\n      )\n      // highlight-end\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(userLoggedOut, state => {\n      // Clear out the list of posts whenever the user logs out\n      return initialState\n    })\n    // highlight-next-line\n    // The thunk handlers have been removed here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Undoable Reducer Enhancer in JavaScript\nDESCRIPTION: A custom implementation of an undoable reducer enhancer that adds undo/redo functionality to any Redux reducer. It maintains past, present, and future states and handles UNDO and REDO action types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction undoable(reducer) {\n  // Call the reducer with empty action to populate the initial state\n  const initialState = {\n    past: [],\n    present: reducer(undefined, {}),\n    future: []\n  }\n\n  // Return a reducer that handles undo and redo\n  return function (state = initialState, action) {\n    const { past, present, future } = state\n\n    switch (action.type) {\n      case 'UNDO':\n        const previous = past[past.length - 1]\n        const newPast = past.slice(0, past.length - 1)\n        return {\n          past: newPast,\n          present: previous,\n          future: [present, ...future]\n        }\n      case 'REDO':\n        const next = future[0]\n        const newFuture = future.slice(1)\n        return {\n          past: [...past, present],\n          present: next,\n          future: newFuture\n        }\n      default:\n        // Delegate handling the action to the passed reducer\n        const newPresent = reducer(present, action)\n        if (present === newPresent) {\n          return state\n        }\n        return {\n          past: [...past, present],\n          present: newPresent,\n          future: []\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of State Mutation Error Detection\nDESCRIPTION: Demonstration of Redux Toolkit's built-in immutability check middleware catching direct state mutations in reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'todos/todosLoading': {\n      state.status = 'loading'\n      return state\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selectors in React Redux Footer Component\nDESCRIPTION: Example showing how to use multiple useSelector hooks in a Footer component to access different pieces of Redux state. The component retrieves the count of remaining todos and filter values from the store. Demonstrates proper state selection patterns by selecting minimal required state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { availableColors, capitalize } from '../filters/colors'\nimport { StatusFilters } from '../filters/filtersSlice'\n\nconst Footer = () => {\n  const todosRemaining = useSelector(state => {\n    const uncompletedTodos = state.todos.filter(todo => !todo.completed)\n    return uncompletedTodos.length\n  })\n\n  const { status, colors } = useSelector(state => state.filters)\n\n  return (\n    <footer className=\"footer\">\n      <div className=\"actions\">\n        <h5>Actions</h5>\n        <button className=\"button\">Mark All Completed</button>\n        <button className=\"button\">Clear Completed</button>\n      </div>\n\n      <RemainingTodos count={todosRemaining} />\n      <StatusFilter value={status} onChange={onStatusChange} />\n      <ColorFilters value={colors} onChange={onColorChange} />\n    </footer>\n  )\n}\n\nexport default Footer\n```\n\n----------------------------------------\n\nTITLE: Injected Slice Selectors\nDESCRIPTION: Shows how injected slice instances handle selectors with initial state provision\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst injectedCounterSlice = counterSlice.injectInto(rootReducer)\n\nconsole.log(counterSlice.selectors.selectValue({})) // runtime error\nconsole.log(injectedCounterSlice.selectors.selectValue({})) // 0\n```\n\n----------------------------------------\n\nTITLE: Dynamic Middleware Setup - TypeScript\nDESCRIPTION: Shows how to set up and use the new dynamic middleware feature for runtime middleware addition.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDynamicMiddleware, configureStore } from '@reduxjs/toolkit'\n\nconst dynamicMiddleware = createDynamicMiddleware()\n\nconst store = configureStore({\n  reducer: {\n    todos: todosReducer\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().prepend(dynamicMiddleware.middleware)\n})\n\n// later\ndynamicMiddleware.addMiddleware(someOtherMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Updating Navbar Component with Auth Thunks\nDESCRIPTION: Updates the Navbar component to use the new authentication thunks for handling user logout functionality.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { useAppDispatch, useAppSelector } from '@/app/hooks'\nimport { logout } from '@/features/auth/authSlice'\nimport { selectCurrentUser } from '@/features/users/usersSlice'\nimport { UserIcon } from './UserIcon'\n\nexport const Navbar = () => {\n  const dispatch = useAppDispatch()\n  const user = useAppSelector(selectCurrentUser)\n  const isLoggedIn = !!user\n  let navContent: React.ReactNode = null\n\n  if (isLoggedIn) {\n    const onLogoutClicked = () => {\n      dispatch(logout())\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Specific Post Editing Permissions in SinglePostPage\nDESCRIPTION: This component conditionally shows the Edit Post button only if the current authenticated user is the author of the post, using Redux selectors to compare the post's user ID with the current username.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport { selectCurrentUsername } from '@/features/auth/authSlice'\n\nexport const SinglePostPage = () => {\n  const { postId } = useParams()\n\n  const post = useAppSelector(state => selectPostById(state, postId!))\n  const currentUsername = useAppSelector(selectCurrentUsername)!\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  const canEdit = currentUsername === post.user\n\n  return (\n    <section>\n      <article className=\"post\">\n        <h2>{post.title}</h2>\n        <div>\n          <PostAuthor userId={post.user} />\n          <TimeAgo timestamp={post.date} />\n        </div>\n        <p className=\"post-content\">{post.content}</p>\n        <ReactionButtons post={post} />\n        {canEdit && (\n          <Link to={`/editPost/${post.id}`} className=\"button\">\n            Edit Post\n          </Link>\n        )}\n      </article>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Navbar Component to Use Websocket Notifications in React Redux\nDESCRIPTION: This code updates the Navbar component to dispatch the new websocket-based notification thunk instead of the previous HTTP-based async thunk, enabling server-push notifications.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  // highlight-next-line\n  fetchNotificationsWebsocket,\n  selectUnreadNotificationsCount,\n} from '@/features/notifications/notificationsSlice'\nimport { selectCurrentUser } from '@/features/users/usersSlice'\n\nimport { UserIcon } from './UserIcon'\n\nexport const Navbar = () => {\n  // omit hooks\n\n  if (isLoggedIn) {\n    const onLogoutClicked = () => {\n      dispatch(logout())\n    }\n\n    const fetchNewNotifications = () => {\n      // highlight-next-line\n      dispatch(fetchNotificationsWebsocket())\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Selectors with Reducers\nDESCRIPTION: Example of defining and exporting selector functions alongside their corresponding reducers in a Redux slice file.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState: [],\n  reducers: {\n    todoAdded(state, action) {\n      state.push(action.payload)\n    }\n  }\n})\n\nexport const { todoAdded } = todosSlice.actions\nexport default todosSlice.reducer\n\nexport const selectTodos = state => state.todos\n```\n\n----------------------------------------\n\nTITLE: Configuring Thunk Middleware with Extra Arguments\nDESCRIPTION: This snippet demonstrates how to create a custom instance of the Redux Thunk middleware with an extra argument, commonly used for injecting API service layers into thunk functions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withExtraArgument } from 'redux-thunk'\n\nconst serviceApi = createServiceApi('/some/url')\n\nconst thunkMiddlewareWithArg = withExtraArgument({ serviceApi })\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Redux Hooks with TypeScript\nDESCRIPTION: This snippet defines custom hooks for using Redux with TypeScript. It creates typed versions of useDispatch and useSelector to provide better type inference when used throughout the application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { AppDispatch, RootState } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\n```\n\n----------------------------------------\n\nTITLE: Redux Todos Loading State Implementation\nDESCRIPTION: Implements loading state handling in the todos reducer with loading and loaded action handlers and async thunk.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = {\n  status: 'idle',\n  entities: []\n}\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'todos/todosLoading': {\n      return {\n        ...state,\n        status: 'loading'\n      }\n    }\n    case 'todos/todosLoaded': {\n      return {\n        ...state,\n        status: 'idle',\n        entities: action.payload\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const fetchTodos = () => async dispatch => {\n  dispatch(todosLoading())\n  const response = await client.get('/fakeApi/todos')\n  dispatch(todosLoaded(response.todos))\n}\n```\n\n----------------------------------------\n\nTITLE: Memoized Redux Selector with createSelector\nDESCRIPTION: Optimized implementation using createSelector from Redux Toolkit to memoize the selector and prevent unnecessary recalculations when inputs haven't changed.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const selectPostsByUser = createSelector(\n  [\n    selectAllPosts,\n    (state: RootState, userId: string) => userId\n  ],\n  (posts, userId) => posts.filter(post => post.user === userId)\n)\n```\n\n----------------------------------------\n\nTITLE: Middleware Order Control\nDESCRIPTION: Demonstrates how to control middleware execution order using multiple dynamic middleware instances\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDynamicMiddleware, configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\nimport reducer from './reducer'\n\nconst beforeMiddleware = createDynamicMiddleware()\nconst afterMiddleware = createDynamicMiddleware()\n\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware()\n      .prepend(beforeMiddleware.middleware)\n      .concat(afterMiddleware.middleware)\n})\n\nbeforeMiddleware.addMiddleware(logger)\nafterMiddleware.addMiddleware(logger)\n\n// middleware chain is now [logger, thunk, logger]\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with API Slice in TypeScript\nDESCRIPTION: This snippet shows how to configure a Redux store to include an API slice from RTK Query. It adds the API slice's reducer to the store's reducers and includes the required middleware that manages cache lifetimes and expiration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\n// highlight-next-line\nimport { apiSlice } from '@/features/api/apiSlice'\nimport authReducer from '@/features/auth/authSlice'\nimport postsReducer from '@/features/posts/postsSlice'\nimport usersReducer from '@/features/users/usersSlice'\nimport notificationsReducer from '@/features/notifications/notificationsSlice'\n\nimport { listenerMiddleware } from './listenerMiddleware'\n\nexport const store = configureStore({\n  // Pass in the root reducer setup as the `reducer` argument\n  reducer: {\n    auth: authReducer,\n    posts: postsReducer,\n    users: usersReducer,\n    notifications: notificationsReducer,\n    // highlight-next-line\n    [apiSlice.reducerPath]: apiSlice.reducer\n  },\n  middleware: getDefaultMiddleware =>\n    // highlight-start\n    getDefaultMiddleware()\n      .prepend(listenerMiddleware.middleware)\n      .concat(apiSlice.middleware)\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Notifications Query Hook in Navbar Component\nDESCRIPTION: This snippet shows how to implement the useGetNotificationsQuery hook in the Navbar component to trigger initial fetch of notifications and keep the websocket open for updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// omit other imports\nimport {\n  fetchNotificationsWebsocket,\n  selectUnreadNotificationsCount,\n  // highlight-next-line\n  useGetNotificationsQuery\n} from '@/features/notifications/notificationsSlice'\n\nexport const Navbar = () => {\n  const dispatch = useAppDispatch()\n  const user = useAppSelector(selectCurrentUser)\n\n  // highlight-start\n  // Trigger initial fetch of notifications and keep the websocket open to receive updates\n  useGetNotificationsQuery()\n  // highlight-end\n\n  // omit rest of the component\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing createAsyncThunk in Redux Toolkit\nDESCRIPTION: Demonstrates how to use createAsyncThunk to handle async operations with automatic action dispatching and state updates using createSlice's extraReducers. Shows fetching todos and handling pending/fulfilled states.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await client.get('/fakeApi/todos')\n  return response.todos\n})\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    // omit reducer cases\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(fetchTodos.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        const newEntities = {}\n        action.payload.forEach(todo => {\n          newEntities[todo.id] = todo\n        })\n        state.entities = newEntities\n        state.status = 'idle'\n      })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with TypeScript (Redux Toolkit Approach)\nDESCRIPTION: This snippet shows the recommended approach to setting up a Redux store with TypeScript using Redux Toolkit, inferring RootState and AppDispatch types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n// omit any other imports\n\nconst store = configureStore({\n  reducer: {\n    todos: todosReducer,\n    counter: counterReducer\n  }\n})\n\n// highlight-start\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\n// Inferred state type: {todos: TodosState, counter: CounterState}\nexport type RootState = ReturnType<typeof store.getState>\n\n// Inferred dispatch type: Dispatch & ThunkDispatch<RootState, undefined, UnknownAction>\nexport type AppDispatch = typeof store.dispatch\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Parameters in SinglePostPage Component\nDESCRIPTION: Demonstrates how to use the selectPostById selector in a component that needs to find a specific post by ID. Shows how to pass both state and additional parameters to a selector.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// omit imports\nimport { selectPostById } from './postsSlice'\n\nexport const SinglePostPage = () => {\n  const { postId } = useParams()\n\n  const post = useAppSelector(state => selectPostById(state, postId!))\n  // omit component logic\n}\n```\n\n----------------------------------------\n\nTITLE: Using createEntityAdapter with Custom selectId\nDESCRIPTION: Demonstrates using createEntityAdapter with TypeScript when a custom selectId function is needed for entity normalization.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Book {\n  bookId: number\n  title: string\n  // ...\n}\n\nconst booksAdapter = createEntityAdapter({\n  selectId: (book: Book) => book.bookId,\n  sortComparer: (a, b) => a.title.localeCompare(b.title)\n})\n\nconst booksSlice = createSlice({\n  name: 'books',\n  initialState: booksAdapter.getInitialState(),\n  reducers: {\n    bookAdded: booksAdapter.addOne,\n    booksReceived(state, action: PayloadAction<{ books: Book[] }>) {\n      booksAdapter.setAll(state, action.payload.books)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Miniature Redux Store in JavaScript\nDESCRIPTION: A minimal implementation of a Redux store in about 25 lines of code, showing the core functionality including state management, subscription handling, and action dispatching. This demonstrates the fundamental concepts behind Redux's state container.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createStore(reducer, preloadedState) {\n  let state = preloadedState\n  const listeners = []\n\n  function getState() {\n    return state\n  }\n\n  function subscribe(listener) {\n    listeners.push(listener)\n    return function unsubscribe() {\n      const index = listeners.indexOf(listener)\n      listeners.splice(index, 1)\n    }\n  }\n\n  function dispatch(action) {\n    state = reducer(state, action)\n    listeners.forEach(listener => listener())\n  }\n\n  dispatch({ type: '@@redux/INIT' })\n\n  return { dispatch, subscribe, getState }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Selectors in PostsList Component\nDESCRIPTION: Shows how to use the selectAllPosts selector function in a React component to access the posts data from Redux state, improving code maintainability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// omit imports\nimport { selectAllPosts } from './postsSlice'\n\nexport const PostsList = () => {\n  const posts = useAppSelector(selectAllPosts)\n  // omit component contents\n}\n```\n\n----------------------------------------\n\nTITLE: Using RTK Query Hooks in React Components for Data Fetching\nDESCRIPTION: This code demonstrates how to use the generated RTK Query hooks in a React component to fetch and display posts data. The useGetPostsQuery hook replaces multiple useSelector, useDispatch, and useEffect calls, handling data fetching, caching, and loading states automatically.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { Spinner } from '@/components/Spinner'\nimport { TimeAgo } from '@/components/TimeAgo'\n\n// highlight-next-line\nimport { useGetPostsQuery, Post } from '@/features/api/apiSlice'\n\nimport { PostAuthor } from './PostAuthor'\nimport { ReactionButtons } from './ReactionButtons'\n\n// highlight-start\n// Go back to passing a `post` object as a prop\ninterface PostExcerptProps {\n  post: Post\n}\n\nfunction PostExcerpt({ post }: PostExcerptProps) {\n  // highlight-end\n  return (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>\n        <Link to={`/posts/${post.id}`}>{post.title}</Link>\n      </h3>\n      <div>\n        <PostAuthor userId={post.user} />\n        <TimeAgo timestamp={post.date} />\n      </div>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n      <ReactionButtons post={post} />\n    </article>\n  )\n}\n\nexport const PostsList = () => {\n  // highlight-start\n  // Calling the `useGetPostsQuery()` hook automatically fetches data!\n  const {\n    data: posts = [],\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  } = useGetPostsQuery()\n  // highlight-end\n\n  let content: React.ReactNode\n\n  // highlight-start\n  // Show loading states based on the hook status flags\n  if (isLoading) {\n    content = <Spinner text=\"Loading...\" />\n  } else if (isSuccess) {\n    content = posts.map(post => <PostExcerpt key={post.id} post={post} />)\n  } else if (isError) {\n    content = <div>{error.toString()}</div>\n  }\n  // highlight-end\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {content}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Input Parameters with createSelector in JavaScript\nDESCRIPTION: This snippet shows how to pass additional parameters through to the output selector by defining input selectors that extract values from the original selector arguments.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectItemsByCategory = createSelector(\n  [\n    // Usual first input - extract value from `state`\n    state => state.items,\n    // Take the second arg, `category`, and forward to the output selector\n    (state, category) => category\n  ],\n  // Output selector gets (`items, category)` as args\n  (items, category) => items.filter(item => item.category === category)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring RTK Query API Slice with Post Endpoints\nDESCRIPTION: Sets up an API slice with endpoints for fetching posts and individual post data. Includes TypeScript types for Post data and defines query endpoints.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  endpoints: builder => ({\n    getPosts: builder.query<Post[], void>({\n      query: () => '/posts'\n    }),\n    getPost: builder.query<Post, string>({\n      query: postId => `/posts/${postId}`\n    })\n  })\n})\n\nexport const { useGetPostsQuery, useGetPostQuery } = apiSlice\n```\n\n----------------------------------------\n\nTITLE: Setting up Pre-typed Redux Hooks with TypeScript\nDESCRIPTION: Configuration of pre-typed Redux hooks for TypeScript usage across the application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { AppDispatch, RootState } from './store'\n\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Slice Reducer Creators\nDESCRIPTION: JavaScript example showing a potential API for custom slice reducer creators that could modify reducer behavior, attach actions, and expose case reducers. This is a future feature under consideration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst asyncThunkCreator = {\n  type: ReducerType.asyncThunk,\n  define(payloadCreator, config) {\n    return {\n      type: ReducerType.asyncThunk, // needs to match reducer type, so correct handler can be called\n      payloadCreator,\n      ...config\n    }\n  },\n  handle(\n    {\n      // the key the reducer was defined under\n      reducerName,\n      // the autogenerated action type, i.e. `${slice.name}/${reducerName}`\n      type\n    },\n    // the definition from define()\n    definition,\n    // methods to modify slice\n    context\n  ) {\n    const { payloadCreator, options, pending, fulfilled, rejected, settled } =\n      definition\n    const asyncThunk = createAsyncThunk(type, payloadCreator, options)\n\n    if (pending) context.addCase(asyncThunk.pending, pending)\n    if (fulfilled) context.addCase(asyncThunk.fulfilled, fulfilled)\n    if (rejected) context.addCase(asyncThunk.rejected, rejected)\n    if (settled) context.addMatcher(asyncThunk.settled, settled)\n\n    context.exposeAction(reducerName, asyncThunk)\n    context.exposeCaseReducer(reducerName, {\n      pending: pending || noop,\n      fulfilled: fulfilled || noop,\n      rejected: rejected || noop,\n      settled: settled || noop\n    })\n  }\n}\n\nconst createSlice = buildCreateSlice({\n  creators: {\n    asyncThunk: asyncThunkCreator\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Thunks for One-Time State Selection\nDESCRIPTION: This example demonstrates a technique to use thunks as a way to make one-time selections from Redux state when only dispatch is available, useful in React components without direct access to getState.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// In your Redux slices:\nconst getSelectedData = selector => (dispatch, getState) => {\n  return selector(getState())\n}\n\n// in a component\nconst onClick = () => {\n  const todos = dispatch(getSelectedData(selectTodos))\n  // do more logic with this data\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Routes with React Router and Redux\nDESCRIPTION: This snippet shows how to update the App component to implement protected routes using React Router. It includes a ProtectedRoute component that checks authentication status and redirects unauthenticated users to the login page.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n  Navigate\n} from 'react-router-dom'\n\nimport { useAppSelector } from './app/hooks'\nimport { Navbar } from './components/Navbar'\nimport { LoginPage } from './features/auth/LoginPage'\nimport { PostsMainPage } from './features/posts/PostsMainPage'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\nimport { EditPostForm } from './features/posts/EditPostForm'\n\nimport { selectCurrentUsername } from './features/auth/authSlice'\n\nconst ProtectedRoute = ({ children }: { children: React.ReactNode }) => {\n  const username = useAppSelector(selectCurrentUsername)\n\n  if (!username) {\n    return <Navigate to=\"/\" replace />\n  }\n\n  return children\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/\" element={<LoginPage />} />\n          <Route\n            path=\"/*\"\n            element={\n              <ProtectedRoute>\n                <Routes>\n                  <Route path=\"/posts\" element={<PostsMainPage />} />\n                  <Route path=\"/posts/:postId\" element={<SinglePostPage />} />\n                  <Route path=\"/editPost/:postId\" element={<EditPostForm />} />\n                </Routes>\n              </ProtectedRoute>\n            }\n          />\n        </Routes>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Conditional Dispatching Based on State in Thunks\nDESCRIPTION: This snippet demonstrates how to use getState in a thunk to access the current Redux state and conditionally dispatch actions based on that state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst MAX_TODOS = 5\n\nfunction addTodosIfAllowed(todoText) {\n  return (dispatch, getState) => {\n    const state = getState()\n\n    // Could also check `state.todos.length < MAX_TODOS`\n    if (selectCanAddNewTodo(state, MAX_TODOS)) {\n      dispatch(todoAdded(todoText))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Actions with Cross-Slice Data in Thunks\nDESCRIPTION: This snippet shows how to read data from multiple state slices in a thunk and include all necessary data in a dispatched action, addressing the cross-slice state access limitation in reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// One solution to the \"cross-slice state in reducers\" problem:\n// read the current state in a thunk, and include all the necessary\n// data in the action\nfunction crossSliceActionThunk() {\n  return (dispatch, getState) => {\n    const state = getState()\n    // Read both slices out of state\n    const { a, b } = state\n\n    // Include data from both slices in the action\n    dispatch(actionThatNeedsMoreData(a, b))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Redux Hooks for Next.js\nDESCRIPTION: Creates and exports pre-typed versions of React-Redux hooks (useAppDispatch, useAppSelector, useAppStore) to simplify usage and maintain type safety throughout the application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/nextjs.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDispatch, useSelector, useStore } from 'react-redux'\nimport type { AppDispatch, AppStore, RootState } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\nexport const useAppStore = useStore.withTypes<AppStore>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Thunk Extra Arguments with Redux Toolkit\nDESCRIPTION: This snippet shows how to use Redux Toolkit's configureStore to set up thunk middleware with extra arguments, providing a cleaner API for thunk configuration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      thunk: {\n        extraArgument: { serviceApi }\n      }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Typical Usage of createSelector with Nested Selectors in JavaScript\nDESCRIPTION: This snippet demonstrates typical usage of createSelector with top-level input selectors and nested memoized selectors for looking up nested values.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = {\n  a: {\n    first: 5\n  },\n  b: 10\n}\n\nconst selectA = state => state.a\nconst selectB = state => state.b\n\nconst selectA1 = createSelector([selectA], a => a.first)\n\nconst selectResult = createSelector([selectA1, selectB], (a1, b) => {\n  console.log('Output selector running')\n  return a1 + b\n})\n\nconst result = selectResult(state)\n// Log: \"Output selector running\"\nconsole.log(result)\n// 15\n\nconst secondResult = selectResult(state)\n// No log output\nconsole.log(secondResult)\n// 15\n```\n\n----------------------------------------\n\nTITLE: Configuring RTK Query API Slice with Tags for Invalidation\nDESCRIPTION: This snippet shows how to set up an RTK Query API slice with tag-based invalidation for posts. It defines endpoints for getting posts, getting a single post, adding a new post, and editing a post, each with appropriate tag configurations for optimal caching and invalidation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    getPosts: builder.query<Post[], void>({\n      query: () => '/posts',\n      providesTags: (result = [], error, arg) => [\n        'Post',\n        ...result.map(({ id }) => ({ type: 'Post', id }) as const)\n      ]\n    }),\n    getPost: builder.query<Post, string>({\n      query: postId => `/posts/${postId}`,\n      providesTags: (result, error, arg) => [{ type: 'Post', id: arg }]\n    }),\n    addNewPost: builder.mutation<Post, NewPost>({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        body: initialPost\n      }),\n      invalidatesTags: ['Post']\n    }),\n    editPost: builder.mutation<Post, PostUpdate>({\n      query: post => ({\n        url: `posts/${post.id}`,\n        method: 'PATCH',\n        body: post\n      }),\n      invalidatesTags: (result, error, arg) => [{ type: 'Post', id: arg.id }]\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Awaiting Thunk Result Promises in Components\nDESCRIPTION: This snippet shows how components can await the promise returned by a dispatched thunk to coordinate additional work after the async operation completes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst onAddTodoClicked = async () => {\n  await dispatch(saveTodo(todoText))\n  setTodoText('')\n}\n```\n\n----------------------------------------\n\nTITLE: Checking State After Dispatch in Thunks\nDESCRIPTION: This example shows how to access state after dispatching an action to check for changes and conditionally dispatch additional actions based on state transitions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction checkStateAfterDispatch() {\n  return (dispatch, getState) => {\n    const firstState = getState()\n    dispatch(firstAction())\n\n    const secondState = getState()\n\n    if (secondState.someField != firstState.someField) {\n      dispatch(secondAction())\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Thunks on Application Startup\nDESCRIPTION: Loading user data when the application initializes by dispatching the fetchUsers thunk directly from the main entry point. This approach ensures data is available before components render.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// omit other imports\n\nimport store from './app/store'\n// highlight-next-line\nimport { fetchUsers } from './features/users/usersSlice'\n\nimport { worker } from './api/server'\n\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  // highlight-next-line\n  store.dispatch(fetchUsers())\n\n  const root = createRoot(document.getElementById('root')!)\n\n  root.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  )\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Redux Action Creator Thunk Example\nDESCRIPTION: Illustrates using Redux Thunk middleware for handling asynchronous actions and side effects. Shows how to create action creators that can dispatch multiple actions and perform async operations.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/Actions.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator with Redux Thunk\nconst fetchUserData = (userId) => async dispatch => {\n  dispatch({ type: \"FETCH_USER_REQUEST\" });\n  try {\n    const response = await api.fetchUser(userId);\n    dispatch({ type: \"FETCH_USER_SUCCESS\", payload: response.data });\n  } catch (error) {\n    dispatch({ type: \"FETCH_USER_ERROR\", error });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Redux Store in JavaScript\nDESCRIPTION: This snippet demonstrates how to apply middleware to a Redux store using applyMiddleware. It imports custom middleware functions and applies them to the store creation process.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducer'\nimport { print1, print2, print3 } from './exampleAddons/middleware'\n\nconst middlewareEnhancer = applyMiddleware(print1, print2, print3)\n\n// Pass enhancer as the second arg, since there's no preloadedState\nconst store = createStore(rootReducer, middlewareEnhancer)\n\nexport default store\n```\n\n----------------------------------------\n\nTITLE: Defining getUsers Query Endpoint in RTK Query\nDESCRIPTION: This snippet shows how to define a new 'getUsers' query endpoint in the apiSlice. It uses createApi and fetchBaseQuery to set up the API slice with the new endpoint for fetching users.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nimport type { Post, NewPost, PostUpdate } from '@/features/posts/postsSlice'\nimport type { User } from '@/features/users/usersSlice'\n\nexport type { Post }\n\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    // omit other endpoints\n\n    getUsers: builder.query<User[], void>({\n      query: () => '/users'\n    })\n  })\n})\n\nexport const {\n  useGetPostsQuery,\n  useGetPostQuery,\n  useGetUsersQuery,\n  useAddNewPostMutation,\n  useEditPostMutation\n} = apiSlice\n```\n\n----------------------------------------\n\nTITLE: Warning Message in Markdown\nDESCRIPTION: A markdown warning block notifying users that the todos example uses outdated patterns and directing them to the current Redux documentation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/todos/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> **Warning**: This example is outdated, and shows legacy patterns that we no longer teach or recommend.\n> Please see the Redux docs tutorials for our recommended usage patterns, and specifically the \"Essentials\" tutorial:\n> **https://redux.js.org/tutorials/index**\n```\n\n----------------------------------------\n\nTITLE: Using Redux State and Actions in React Components\nDESCRIPTION: Creates a Counter component that uses useSelector to read state and useDispatch to dispatch actions from the Redux store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/quick-start.md#2025-04-07_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { decrement, increment } from './counterSlice'\nimport styles from './Counter.module.css'\n\nexport function Counter() {\n  const count = useSelector(state => state.counter.value)\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <div>\n        <button\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          Increment\n        </button>\n        <span>{count}</span>\n        <button\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          Decrement\n        </button>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Counter Vanilla Example\nDESCRIPTION: Commands to clone and run the basic Counter Vanilla example that demonstrates raw Redux API with ES5.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/counter-vanilla\nopen index.html\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Slice with Redux Toolkit\nDESCRIPTION: This code creates a new Redux slice for posts using createSlice from Redux Toolkit. It defines the initial state and exports the generated reducer function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice } from '@reduxjs/toolkit'\n\n// Define a TS type for the data we'll be using\nexport interface Post {\n  id: string\n  title: string\n  content: string\n}\n\n// Create an initial state value for the reducer, with that type\nconst initialState: Post[] = [\n  { id: '1', title: 'First Post!', content: 'Hello!' },\n  { id: '2', title: 'Second Post', content: 'More text' }\n]\n\n// Create the slice and pass in the initial state\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {}\n})\n\n// Export the generated reducer function\nexport default postsSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Saga and Epic Middleware in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a Redux store with both saga and epic middleware, including the creation and running of root saga and epic.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { combineEpics, createEpicMiddleware  } from 'redux-observable';\n\n// skip reducers\n\nimport { pingEpic } from '../sagas/ping'\nimport { pingSaga } from '../epics/ping\n\nfunction* rootSaga() {\n  yield pingSaga()\n}\n\nconst rootEpic = combineEpics(\n  pingEpic\n);\n\nconst sagaMiddleware = createSagaMiddleware()\nconst epicMiddleware = createEpicMiddleware()\n\nconst middlewareEnhancer = applyMiddleware(sagaMiddleware, epicMiddleware)\n\nconst store = createStore(rootReducer, middlewareEnhancer)\n\nsagaMiddleware.run(rootSaga)\nepicMiddleware.run(rootEpic)\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Models with Redux-ORM in JavaScript\nDESCRIPTION: This snippet shows how to use the Redux-ORM session interface to access related models. It demonstrates retrieving a Comment instance and its related Post, as well as filtering comments.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/UpdatingNormalizedData.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst session = orm.session(store.getState().entities)\nconst comment = session.Comment.first() // Comment instance\nconst { post } = comment // Post instance\npost.comments.filter(c => c.text === 'This is a comment').count() // 1\n```\n\n----------------------------------------\n\nTITLE: Using Specialized Counter Reducers with Dispatched Actions in Redux\nDESCRIPTION: Shows how to use the specialized counter reducers created with higher-order reducer factories and dispatch actions that target specific counters.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ReusingReducerLogic.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootReducer = combineReducers({\n  counterA: createCounterWithNamedType('A'),\n  counterB: createCounterWithNamedType('B'),\n  counterC: createCounterWithNamedType('C')\n})\n\nstore.dispatch({ type: 'INCREMENT_B' })\nconsole.log(store.getState())\n// {counterA : 0, counterB : 1, counterC : 0}\n\nfunction incrementCounter(type = 'A') {\n  return {\n    type: `INCREMENT_${type}`\n  }\n}\nstore.dispatch(incrementCounter('C'))\nconsole.log(store.getState())\n// {counterA : 0, counterB : 1, counterC : 1}\n```\n\n----------------------------------------\n\nTITLE: Using RTK Query Hook in TodoList Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to use an RTK Query hook in a React component. It uses the useGetTodosQuery hook to fetch todos and access the loading state and data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-next-line\nimport { useGetTodosQuery } from '../api/apiSlice'\n\nexport function TodoList() {\n  // highlight-next-line\n  const { data: todos, isFetching, isSuccess } = useGetTodosQuery()\n\n  // omit rendering logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Multiple Actions in Thunks\nDESCRIPTION: This example shows how thunks can dispatch multiple actions or other thunks, allowing for orchestration of complex synchronous logic that requires multiple state changes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// An example of a thunk dispatching other action creators,\n// which may or may not be thunks themselves. No async code, just\n// orchestration of higher-level synchronous logic.\nfunction complexSynchronousThunk(someValue) {\n  return (dispatch, getState) => {\n    dispatch(someBasicActionCreator(someValue))\n    dispatch(someThunkActionCreator())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store using configureStore\nDESCRIPTION: Code snippet showing how to create a Redux store using configureStore from Redux Toolkit. The store is initialized with a reducer and getState() is used to retrieve the current state from the store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-2-concepts-data-flow.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nconst store = configureStore({ reducer: counterReducer })\n\nconsole.log(store.getState())\n// {value: 0}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Reducer in JavaScript\nDESCRIPTION: This snippet defines a reducer for managing the todo state. It handles actions for starting, succeeding, and failing the fetch operation, updating the state accordingly with loading status, todos data, and error information.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  FETCH_TODOS_STARTED,\n  FETCH_TODOS_SUCCEEDED,\n  FETCH_TODOS_FAILED\n} from '../constants/todos'\n\nconst initialState = {\n  status: 'uninitialized',\n  todos: [],\n  error: null\n}\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_TODOS_STARTED: {\n      return {\n        ...state,\n        status: 'loading'\n      }\n    }\n    case FETCH_TODOS_SUCCEEDED: {\n      return {\n        ...state,\n        status: 'succeeded',\n        todos: action.todos\n      }\n    }\n    case FETCH_TODOS_FAILED: {\n      return {\n        ...state,\n        status: 'failed',\n        todos: [],\n        error: action.error\n      }\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Properly Preserving Default Enhancers in ConfigureStore\nDESCRIPTION: Example showing how to properly use the enhancers callback to preserve the default enhancers, including the middleware enhancer. This prevents accidental loss of configured middleware.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = configureStore({\n  reducer,\n  enhancers: getDefaultEnhancers => {\n    return [myEnhancer] // we've lost the  middleware here\n    // instead:\n    return getDefaultEnhancers().concat(myEnhancer)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Logic with Listener Middleware in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the listener middleware to replace saga and epic functionality, listening for an action and dispatching another after a delay.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice } from '@reduxjs/toolkit'\nimport { startListening } from '../../app/listenerMiddleware'\n\nconst pingSlice = createSlice({\n  name: 'ping',\n  initialState,\n  reducers: {\n    pong(state, action) {\n      // state update here\n    }\n  }\n})\n\nexport const { pong } = pingSlice.actions\nexport default pingSlice.reducer\n\n// highlight-start\n// The `startListening()` call could go in different files,\n// depending on your preferred app setup. Here, we just add\n// it directly in a slice file.\nstartListening({\n  // Match this exact action type based on the action creator\n  actionCreator: pong,\n  // Run this effect callback whenever that action is dispatched\n  effect: async (action, listenerApi) => {\n    // Listener effect functions get a `listenerApi` object\n    // with many useful methods built in, including `delay`:\n    await listenerApi.delay(1000)\n    listenerApi.dispatch(pong())\n  }\n})\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating a PostsList Component with Redux in TypeScript\nDESCRIPTION: This component uses useAppSelector hook to retrieve posts data from the Redux store and renders each post as an article with title and content excerpt.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport { useAppSelector } from '@/app/hooks'\n\nexport const PostsList = () => {\n  // highlight-start\n  // Select the `state.posts` value from the store into the component\n  const posts = useAppSelector(state => state.posts)\n  // highlight-end\n\n  const renderedPosts = posts.map(post => (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n    </article>\n  ))\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {renderedPosts}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Named Type Counter Reducers in Redux\nDESCRIPTION: Implements a higher-order reducer factory that creates counter reducers with namespaced action types. This enables targeting specific counters with actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ReusingReducerLogic.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createCounterWithNamedType(counterName = '') {\n  return function counter(state = 0, action) {\n    switch (action.type) {\n      case `INCREMENT_${counterName}`:\n        return state + 1\n      case `DECREMENT_${counterName}`:\n        return state - 1\n      default:\n        return state\n    }\n  }\n}\n\nfunction createCounterWithNameData(counterName = '') {\n  return function counter(state = 0, action) {\n    const { name } = action\n    if (name !== counterName) return state\n\n    switch (action.type) {\n      case `INCREMENT`:\n        return state + 1\n      case `DECREMENT`:\n        return state - 1\n      default:\n        return state\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Undo History Structure with Todo List Objects in Redux\nDESCRIPTION: This example shows how the undo history structure works with more complex data types like arrays of todo items, maintaining the same pattern of past, present, and future states.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  todos: {\n    past: [\n      [],\n      [{ text: 'Use Redux' }],\n      [{ text: 'Use Redux', complete: true }]\n    ],\n    present: [\n      { text: 'Use Redux', complete: true },\n      { text: 'Implement Undo' }\n    ],\n    future: [\n      [\n        { text: 'Use Redux', complete: true },\n        { text: 'Implement Undo', complete: true }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Counter Reducer with combineReducers in Redux\nDESCRIPTION: Demonstrates a basic counter reducer implementation with combineReducers to handle multiple counters. This approach has a limitation where all counters respond to the same action type.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ReusingReducerLogic.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  counterA: counter,\n  counterB: counter,\n  counterC: counter\n})\n```\n\n----------------------------------------\n\nTITLE: Traditional Redux Root Reducer Setup\nDESCRIPTION: Classic implementation of combining reducers in Redux without Redux Toolkit.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { combineReducers } from 'redux'\n\nimport todosReducer from './features/todos/todosSlice'\nimport filtersReducer from './features/filters/filtersSlice'\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  filters: filtersReducer\n})\n\nexport default rootReducer\n```\n\n----------------------------------------\n\nTITLE: Testing Redux Reducers\nDESCRIPTION: Shows how to write unit tests for Redux reducers using Jest, demonstrating how to test pure reducer functions with example state and actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport todosReducer from './todosSlice'\n\ntest('Toggles a todo based on id', () => {\n  const initialState = [{ id: 0, text: 'Test text', completed: false }]\n\n  const action = { type: 'todos/todoToggled', payload: 0 }\n  const result = todosReducer(initialState, action)\n  expect(result[0].completed).toBe(true)\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Globalized and Localized Selectors in JavaScript\nDESCRIPTION: This snippet demonstrates the difference between 'globalized' and 'localized' selectors in Redux. The globalized selector accepts the entire Redux root state and knows where to find the relevant data, while the localized selector expects only the specific slice of state it needs.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Globalized\" - accepts root state, knows to find data at `state.todos`\nconst selectAllTodosCompletedGlobalized = state =>\n  state.todos.every(todo => todo.completed)\n\n// \"Localized\" - only accepts `todos` as argument, doesn't know where that came from\nconst selectAllTodosCompletedLocalized = todos =>\n  todos.every(todo => todo.completed)\n```\n\n----------------------------------------\n\nTITLE: Defining Reducer with TypeScript (Legacy Approach)\nDESCRIPTION: This snippet shows a legacy approach to defining a reducer function with TypeScript, using manually defined action and state types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ADD_TODO, TOGGLE_TODO, TodoActions } from '../constants/todos'\n\ninterface Todo {\n  id: string\n  text: string\n  completed: boolean\n}\n\nexport type TodosState = Todo[]\n\nconst initialState: TodosState = []\n\nexport default function todosReducer(\n  state = initialState,\n  action: TodoActions\n) {\n  switch (action.type) {\n    // omit reducer logic\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Listener Middleware\nDESCRIPTION: Adds the listener middleware to the Redux store configuration using configureStore from Redux Toolkit. Places the listener middleware at the start of the middleware pipeline.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nimport authReducer from '@/features/auth/authSlice'\nimport postsReducer from '@/features/posts/postsSlice'\nimport usersReducer from '@/features/users/usersSlice'\nimport notificationsReducer from '@/features/notifications/notificationsSlice'\n\nimport { listenerMiddleware } from './listenerMiddleware'\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    posts: postsReducer,\n    users: usersReducer,\n    notifications: notificationsReducer\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().prepend(listenerMiddleware.middleware)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Redux Slice with Jest\nDESCRIPTION: Test suite demonstrating how to test Redux slice reducer functionality using Jest, including initial state and adding todos to empty and existing lists.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport reducer, { todoAdded, Todo } from './todosSlice'\n\ntest('should return the initial state', () => {\n  expect(reducer(undefined, { type: 'unknown' })).toEqual([\n    { text: 'Use Redux', completed: false, id: 0 }\n  ])\n})\n\ntest('should handle a todo being added to an empty list', () => {\n  const previousState: Todo[] = []\n\n  expect(reducer(previousState, todoAdded('Run the tests'))).toEqual([\n    { text: 'Run the tests', completed: false, id: 0 }\n  ])\n})\n\ntest('should handle a todo being added to an existing list', () => {\n  const previousState: Todo[] = [\n    { text: 'Run the tests', completed: true, id: 0 }\n  ]\n\n  expect(reducer(previousState, todoAdded('Use Redux'))).toEqual([\n    { text: 'Run the tests', completed: true, id: 0 },\n    { text: 'Use Redux', completed: false, id: 1 }\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Basic combineReducers Usage with Object Literal Shorthand in Redux\nDESCRIPTION: This example demonstrates how using object literal shorthand with combineReducers defines the state shape. It shows how the naming of imported reducers affects the keys in the resulting state object.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/UsingCombineReducers.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// reducers.js\nexport default theDefaultReducer = (state = 0, action) => state\n\nexport const firstNamedReducer = (state = 1, action) => state\n\nexport const secondNamedReducer = (state = 2, action) => state\n\n// rootReducer.js\nimport { combineReducers, createStore } from 'redux'\n\nimport theDefaultReducer, {\n  firstNamedReducer,\n  secondNamedReducer\n} from './reducers'\n\n// Use object literal shorthand syntax to define the object shape\nconst rootReducer = combineReducers({\n  theDefaultReducer,\n  firstNamedReducer,\n  secondNamedReducer\n})\n\nconst store = createStore(rootReducer)\nconsole.log(store.getState())\n// {theDefaultReducer : 0, firstNamedReducer : 1, secondNamedReducer : 2}\n```\n\n----------------------------------------\n\nTITLE: Creating Filtered Reducer in Redux\nDESCRIPTION: Implements a highly flexible higher-order reducer that uses a predicate function to determine whether the wrapped reducer should process an action, allowing for customized filtering logic.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ReusingReducerLogic.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createFilteredReducer(reducerFunction, reducerPredicate) {\n    return (state, action) => {\n        const isInitializationCall = state === undefined;\n        const shouldRunWrappedReducer = reducerPredicate(action) || isInitializationCall;\n        return shouldRunWrappedReducer ? reducerFunction(state, action) : state;\n    }\n}\n\nconst rootReducer = combineReducers({\n    // check for suffixed strings\n    counterA : createFilteredReducer(counter, action => action.type.endsWith('_A')),\n    // check for extra data in the action\n    counterB : createFilteredReducer(counter, action => action.name === 'B'),\n    // respond to all 'INCREMENT' actions, but never 'DECREMENT'\n    counterC : createFilteredReducer(counter, action => action.type === 'INCREMENT')\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React-Redux bindings\nDESCRIPTION: Command to install React-Redux bindings for use with React applications.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Installation.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-redux\n```\n\n----------------------------------------\n\nTITLE: Using Redux-ORM Session in a Case Reducer in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Redux-ORM as an abstraction layer within a single case reducer. It shows how to start an immutable session and create a new Comment instance.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/UpdatingNormalizedData.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { orm } from './models'\n\n// Assume this case reducer is being used in our \"entities\" slice reducer,\n// and we do not have reducers defined on our Redux-ORM Model subclasses\nfunction addComment(entitiesState, action) {\n  // Start an immutable session\n  const session = orm.session(entitiesState)\n\n  session.Comment.create(action.payload)\n\n  // The internal state reference has now changed\n  return session.state\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Redux Store Setup\nDESCRIPTION: Classic implementation of creating a Redux store with middleware and DevTools without Redux Toolkit.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport { thunk } from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducer'\n\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunk))\n\nconst store = createStore(rootReducer, composedEnhancer)\nexport default store\n```\n\n----------------------------------------\n\nTITLE: Creating an Edit Post Form Component in React with TypeScript\nDESCRIPTION: This snippet defines an EditPostForm component that allows users to edit existing posts. It retrieves the post data from the Redux store, renders a form with the current post data, and dispatches a postUpdated action when the form is submitted.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\n\nimport { useAppSelector, useAppDispatch } from '@/app/hooks'\nimport { postUpdated } from './postsSlice'\n\nexport const EditPostForm = () => {\n  const { postId } = useParams()\n\n  const post = useAppSelector(state =>\n    state.posts.find(post => post.id === postId)\n  )\n\n  const dispatch = useAppDispatch()\n  const navigate = useNavigate()\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  const onSavePostClicked = (e: React.FormEvent<EditPostFormElements>) => {\n    e.preventDefault()\n\n    const { elements } = e.currentTarget\n    const title = elements.postTitle.value\n    const content = elements.postContent.value\n\n    if (title && content) {\n      dispatch(postUpdated({ id: post.id, title, content }))\n      navigate(`/posts/${postId}`)\n    }\n  }\n\n  return (\n    <section>\n      <h2>Edit Post</h2>\n      <form onSubmit={onSavePostClicked}>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          defaultValue={post.title}\n          required\n        />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          defaultValue={post.content}\n          required\n        />\n\n        <button>Save Post</button>\n      </form>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Slice with createAsyncThunk in JavaScript\nDESCRIPTION: This snippet shows how to use createAsyncThunk for data fetching in a Redux slice. It defines an async thunk for fetching todos and handles the pending, fulfilled, and rejected states in the extraReducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst initialState = {\n  status: 'uninitialized',\n  todos: [],\n  error: null\n}\n\nconst fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  // Just make the async request here, and return the response.\n  // This will automatically dispatch a `pending` action first,\n  // and then `fulfilled` or `rejected` actions based on the promise.\n  // as needed based on the\n  const res = await axios.get('/todos')\n  return res.data\n})\n\nexport const todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    // any additional \"normal\" case reducers here.\n    // these will generate new action creators\n  },\n  extraReducers: builder => {\n    // Use `extraReducers` to handle actions that were generated\n    // _outside_ of the slice, such as thunks or in other slices\n    builder\n      .addCase(fetchTodos.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      // Pass the generated action creators to `.addCase()`\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        // Same \"mutating\" update syntax thanks to Immer\n        state.status = 'succeeded'\n        state.todos = action.payload\n      })\n      .addCase(fetchTodos.rejected, (state, action) => {\n        state.status = 'failed'\n        state.todos = []\n        state.error = action.error\n      })\n  }\n})\n\nexport default todosSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Alternative Array Manipulation Methods\nDESCRIPTION: Demonstrates alternative approaches to array manipulation using slice and splice on copied arrays.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ImmutableUpdatePatterns.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction insertItem(array, action) {\n  let newArray = array.slice()\n  newArray.splice(action.index, 0, action.item)\n  return newArray\n}\n\nfunction removeItem(array, action) {\n  let newArray = array.slice()\n  newArray.splice(action.index, 1)\n  return newArray\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Store with DevTools Integration\nDESCRIPTION: Final store configuration implementation with Redux DevTools extension support\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { applyMiddleware, createStore } from 'redux'\nimport { thunk } from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport monitorReducersEnhancer from './enhancers/monitorReducers'\nimport loggerMiddleware from './middleware/logger'\nimport rootReducer from './reducers'\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [loggerMiddleware, thunk]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer]\n  const composedEnhancers = composeWithDevTools(...enhancers)\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\n\n  return store\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Async Action Type in Redux\nDESCRIPTION: Specifies the type signature for an Async Action in Redux. Async Actions are values that are not yet ready for consumption by the reducer and are transformed by middleware.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntype AsyncAction = any\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Reducers for Cross-Slice Updates in Redux\nDESCRIPTION: This example demonstrates how to use combineReducers for simple cases and a separate cross-slice reducer for special cases, combining them into a root reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/BeyondCombineReducers.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst combinedReducer = combineReducers({\n  a: sliceReducerA,\n  b: sliceReducerB\n})\n\nfunction crossSliceReducer(state, action) {\n  switch (action.type) {\n    case 'SOME_SPECIAL_ACTION': {\n      return {\n        // specifically pass state.b as an additional argument\n        a: handleSpecialCaseForA(state.a, action, state.b),\n        b: sliceReducerB(state.b, action)\n      }\n    }\n    default:\n      return state\n  }\n}\n\nfunction rootReducer(state, action) {\n  const intermediateState = combinedReducer(state, action)\n  const finalState = crossSliceReducer(intermediateState, action)\n  return finalState\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Reducer Composition with Utility Functions\nDESCRIPTION: Demonstrates a complete Redux reducer implementation using utility functions for common operations, individual case reducers for specific actions, slice reducers for state sections, and combining them into a root reducer. Includes helper functions for immutable state updates and a reducer factory function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/RefactoringReducersExample.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Reusable utility functions\n\nfunction updateObject(oldObject, newValues) {\n  // Encapsulate the idea of passing a new object as the first parameter\n  // to Object.assign to ensure we correctly copy data instead of mutating\n  return Object.assign({}, oldObject, newValues)\n}\n\nfunction updateItemInArray(array, itemId, updateItemCallback) {\n  const updatedItems = array.map(item => {\n    if (item.id !== itemId) {\n      // Since we only want to update one item, preserve all others as they are now\n      return item\n    }\n\n    // Use the provided callback to create an updated item\n    const updatedItem = updateItemCallback(item)\n    return updatedItem\n  })\n\n  return updatedItems\n}\n\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n\n// Handler for a specific case (\"case reducer\")\nfunction setVisibilityFilter(visibilityState, action) {\n  // Technically, we don't even care about the previous state\n  return action.filter\n}\n\n// Handler for an entire slice of state (\"slice reducer\")\nconst visibilityReducer = createReducer('SHOW_ALL', {\n  SET_VISIBILITY_FILTER: setVisibilityFilter\n})\n\n// Case reducer\nfunction addTodo(todosState, action) {\n  const newTodos = todosState.concat({\n    id: action.id,\n    text: action.text,\n    completed: false\n  })\n\n  return newTodos\n}\n\n// Case reducer\nfunction toggleTodo(todosState, action) {\n  const newTodos = updateItemInArray(todosState, action.id, todo => {\n    return updateObject(todo, { completed: !todo.completed })\n  })\n\n  return newTodos\n}\n\n// Case reducer\nfunction editTodo(todosState, action) {\n  const newTodos = updateItemInArray(todosState, action.id, todo => {\n    return updateObject(todo, { text: action.text })\n  })\n\n  return newTodos\n}\n\n// Slice reducer\nconst todosReducer = createReducer([], {\n  ADD_TODO: addTodo,\n  TOGGLE_TODO: toggleTodo,\n  EDIT_TODO: editTodo\n})\n\n// \"Root reducer\"\nconst appReducer = combineReducers({\n  visibilityFilter: visibilityReducer,\n  todos: todosReducer\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing RTK Query Notifications Endpoint in TypeScript\nDESCRIPTION: Sets up a notifications endpoint using RTK Query by injecting a new endpoint into the API slice. Includes query definition for fetching notifications and exports the generated hook for component usage.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEntityAdapter, createSlice } from '@reduxjs/toolkit'\n\nimport { client } from '@/api/client'\nimport { forceGenerateNotifications } from '@/api/server'\n\nimport type { AppThunk, RootState } from '@/app/store'\nimport { createAppAsyncThunk } from '@/app/withTypes'\n\nimport { apiSlice } from '@/features/api/apiSlice'\n\nexport const apiSliceWithNotifications = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getNotifications: builder.query<ServerNotification[], void>({\n      query: () => '/notifications'\n    })\n  })\n})\n\nexport const { useGetNotificationsQuery } = apiSliceWithNotifications\n```\n\n----------------------------------------\n\nTITLE: Separating Data Handling by Domain in Redux\nDESCRIPTION: Splits the reducer logic into separate domains for visibility filter and todos, further improving modularity and separation of concerns.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/RefactoringReducersExample.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setVisibilityFilter(visibilityState, action) {\n  return action.filter\n}\n\nfunction visibilityReducer(visibilityState = 'SHOW_ALL', action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return setVisibilityFilter(visibilityState, action)\n    default:\n      return visibilityState\n  }\n}\n\nfunction addTodo(todosState, action) {\n  const newTodos = todosState.concat({\n    id: action.id,\n    text: action.text,\n    completed: false\n  })\n\n  return newTodos\n}\n\nfunction toggleTodo(todosState, action) {\n  const newTodos = updateItemInArray(todosState, action.id, todo => {\n    return updateObject(todo, { completed: !todo.completed })\n  })\n\n  return newTodos\n}\n\nfunction editTodo(todosState, action) {\n  const newTodos = updateItemInArray(todosState, action.id, todo => {\n    return updateObject(todo, { text: action.text })\n  })\n\n  return newTodos\n}\n\nfunction todosReducer(todosState = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return addTodo(todosState, action)\n    case 'TOGGLE_TODO':\n      return toggleTodo(todosState, action)\n    case 'EDIT_TODO':\n      return editTodo(todosState, action)\n    default:\n      return todosState\n  }\n}\n\nfunction appReducer(state = initialState, action) {\n  return {\n    todos: todosReducer(state.todos, action),\n    visibilityFilter: visibilityReducer(state.visibilityFilter, action)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Listener Middleware with Redux Toolkit in JavaScript\nDESCRIPTION: This snippet shows how to create and export a listener middleware using Redux Toolkit's createListenerMiddleware function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createListenerMiddleware } from '@reduxjs/toolkit'\n\n// Best to define this in a separate file, to avoid importing\n// from the store file into the rest of the codebase\nexport const listenerMiddleware = createListenerMiddleware()\n\nexport const { startListening, stopListening } = listenerMiddleware\n```\n\n----------------------------------------\n\nTITLE: Updating Post Entries with Redux Toolkit in TypeScript\nDESCRIPTION: This snippet shows how to update the postsSlice to include a new reducer function for updating posts. It defines the postUpdated reducer, which handles updating a post's title and content based on the provided action payload.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded(state, action: PayloadAction<Post>) {\n      state.push(action.payload)\n    },\n    postUpdated(state, action: PayloadAction<Post>) {\n      const { id, title, content } = action.payload\n      const existingPost = state.find(post => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    }\n  }\n})\n\nexport const { postAdded, postUpdated } = postsSlice.actions\n\nexport default postsSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Converting Todos Reducer to createSlice in Redux Toolkit\nDESCRIPTION: This snippet demonstrates converting a traditional Redux reducer to use Redux Toolkit's createSlice API. It creates a slice for todos with two reducer functions that handle adding and toggling todos, with support for Immer's direct state mutation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-next-line\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  status: 'idle',\n  entities: {}\n}\n\n// highlight-start\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action) {\n      const todo = action.payload\n      state.entities[todo.id] = todo\n    },\n    todoToggled(state, action) {\n      const todoId = action.payload\n      const todo = state.entities[todoId]\n      todo.completed = !todo.completed\n    }\n  }\n})\n\nexport const { todoAdded, todoToggled } = todosSlice.actions\n\nexport default todosSlice.reducer\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Logger Middleware Function\nDESCRIPTION: Improved middleware implementation that returns a new dispatch function instead of modifying the store directly.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logger(store) {\n  const next = store.dispatch\n\n  return function dispatchAndLog(action) {\n    console.log('dispatching', action)\n    let result = next(action)\n    console.log('next state', store.getState())\n    return result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using combineSlices for Reducer Injection in Redux Toolkit (TypeScript)\nDESCRIPTION: Demonstrates how to use the combineSlices utility from Redux Toolkit 2.0 for easy reducer injection and code splitting.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst withUserReducer = rootReducer.inject({\n  reducerPath: 'user',\n  reducer: userReducer\n})\n\nconst withApiReducer = rootReducer.inject(fooApi)\n```\n\n----------------------------------------\n\nTITLE: Accessing Normalized State Data\nDESCRIPTION: Shows how to efficiently access data from a normalized state structure using an ID lookup.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst userId = 'user2'\nconst userObject = state.users.entities[userId]\n```\n\n----------------------------------------\n\nTITLE: Initializing RTK Query API and Using Hooks in React\nDESCRIPTION: This snippet demonstrates how to create an RTK Query API definition with endpoints for fetching and mutating data, and how to use the generated hooks in a React component. It showcases query and mutation examples for a Pokemon API and a posts API.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/side-effects-approaches.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport type { Pokemon } from './types'\n\n// Create an API definition using a base URL and expected endpoints\nexport const api = createApi({\n  reducerPath: 'pokemonApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),\n  endpoints: builder => ({\n    getPokemonByName: builder.query<Pokemon, string>({\n      query: name => `pokemon/${name}`\n    }),\n    getPosts: builder.query<Post[], void>({\n      query: () => '/posts'\n    }),\n    addNewPost: builder.mutation<void, Post>({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        // Include the entire post object as the body of the request\n        body: initialPost\n      })\n    })\n  })\n})\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const { useGetPokemonByNameQuery } = api\n\nexport default function App() {\n  // Using a query hook automatically fetches data and returns query values\n  const { data, error, isLoading } = useGetPokemonByNameQuery('bulbasaur')\n\n  // render UI based on data and loading state\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Redux Reducer Implementation\nDESCRIPTION: The starting point of the refactoring process, showing a single large reducer function handling multiple action types for a todo application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/RefactoringReducersExample.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = {\n  visibilityFilter: 'SHOW_ALL',\n  todos: []\n}\n\nfunction appReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER': {\n      return Object.assign({}, state, {\n        visibilityFilter: action.filter\n      })\n    }\n    case 'ADD_TODO': {\n      return Object.assign({}, state, {\n        todos: state.todos.concat({\n          id: action.id,\n          text: action.text,\n          completed: false\n        })\n      })\n    }\n    case 'TOGGLE_TODO': {\n      return Object.assign({}, state, {\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.id) {\n            return todo\n          }\n\n          return Object.assign({}, todo, {\n            completed: !todo.completed\n          })\n        })\n      })\n    }\n    case 'EDIT_TODO': {\n      return Object.assign({}, state, {\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.id) {\n            return todo\n          }\n\n          return Object.assign({}, todo, {\n            text: action.text\n          })\n        })\n      })\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Redux Storage for Flexible Persistence\nDESCRIPTION: Configures Redux Storage to provide a persistence layer with flexible backend options and custom middleware.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst reducer = storage.reducer(combineReducers(reducers))\nconst engine = createEngineLocalStorage('my-save-key')\nconst storageMiddleware = storage.createMiddleware(engine)\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware.concat(storageMiddleware)\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Reducers with Redux combineReducers\nDESCRIPTION: Shows how to use Redux's combineReducers utility to combine multiple slice reducers into a single root reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { combineReducers } from 'redux'\n\nimport todosReducer from './features/todos/todosSlice'\nimport filtersReducer from './features/filters/filtersSlice'\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  filters: filtersReducer\n})\n\nexport default rootReducer\n```\n\n----------------------------------------\n\nTITLE: Simple Redux Connect with TypeScript Implementation\nDESCRIPTION: Basic implementation of Redux connect pattern using TypeScript with type definitions for state and props.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from 'react-redux'\nimport { RootState } from '../../app/store'\nimport {\n  todoToggled,\n  todoDeleted,\n  selectTodoById,\n  selectActiveTodoId\n} from './todosSlice'\n\ninterface TodoListItemOwnProps {\n  todoId: string\n}\n\nconst mapStateToProps = (state: RootState, ownProps) => {\n  return {\n    todo: selectTodoById(state, ownProps.todoId),\n    activeTodoId: selectActiveTodoId(state)\n  }\n}\n\nconst mapDispatchToProps = {\n  todoDeleted,\n  todoToggled\n}\n\ntype TodoListItemProps = TodoListItemOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps\n\nfunction TodoListItem({\n  todo,\n  activeTodoId,\n  todoDeleted,\n  todoToggled\n}: TodoListItemProps) {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListItem)\n```\n\n----------------------------------------\n\nTITLE: Implementing Side Effect Middleware in Redux (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create middleware that handles side effects for actions, using the RTK listener middleware as an example. It shows how to process specific actions, manage listeners, and execute side effects after the reducer processes the action.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingCustomMiddleware.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst middleware: ListenerMiddleware<S, D, ExtraArgument> =\n  api => next => action => {\n    if (addListener.match(action)) {\n      return startListening(action.payload)\n    }\n\n    if (clearAllListeners.match(action)) {\n      clearListenerMiddleware()\n      return\n    }\n\n    if (removeListener.match(action)) {\n      return stopListening(action.payload)\n    }\n\n    // Need to get this state _before_ the reducer processes the action\n    let originalState: S | typeof INTERNAL_NIL_TOKEN = api.getState()\n\n    // `getOriginalState` can only be called synchronously.\n    // @see https://github.com/reduxjs/redux-toolkit/discussions/1648#discussioncomment-1932820\n    const getOriginalState = (): S => {\n      if (originalState === INTERNAL_NIL_TOKEN) {\n        throw new Error(\n          `${alm}: getOriginalState can only be called synchronously`\n        )\n      }\n\n      return originalState as S\n    }\n\n    let result: unknown\n\n    try {\n      // Actually forward the action to the reducer before we handle listeners\n      result = next(action)\n\n      if (listenerMap.size > 0) {\n        let currentState = api.getState()\n        // Work around ESBuild+TS transpilation issue\n        const listenerEntries = Array.from(listenerMap.values())\n        for (let entry of listenerEntries) {\n          let runListener = false\n\n          try {\n            runListener = entry.predicate(action, currentState, originalState)\n          } catch (predicateError) {\n            runListener = false\n\n            safelyNotifyError(onError, predicateError, {\n              raisedBy: 'predicate'\n            })\n          }\n\n          if (!runListener) {\n            continue\n          }\n\n          notifyListener(entry, action, api, getOriginalState)\n        }\n      }\n    } finally {\n      // Remove `originalState` store from this scope.\n      originalState = INTERNAL_NIL_TOKEN\n    }\n\n    return result\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Middleware in Redux (TypeScript)\nDESCRIPTION: This snippet demonstrates how to correctly implement asynchronous middleware in Redux without breaking compatibility with other middlewares. It shows how to handle asynchronous operations without modifying the return value of dispatch.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingCustomMiddleware.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst middleware: Middleware = api => next => action => {\n  const response = next(action)\n\n  // Do something after the action hits the reducer\n  const afterState = api.getState()\n  if (action.type === 'some/action') {\n    void loadData(api)\n  }\n\n  return response\n}\n\nasync function loadData(api) {\n  const data = await fetchData()\n  api.dispatch(dataFetchedAction(data))\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Thunk Declaration - TypeScript\nDESCRIPTION: Shows the traditional way of declaring thunks separately from createSlice using createAsyncThunk.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchUserById = createAsyncThunk(\n  'users/fetchByIdStatus',\n  async (userId: number, thunkAPI) => {\n    const response = await userAPI.fetchById(userId)\n    return response.data\n  }\n)\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    // standard reducer logic, with auto-generated action types per reducer\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      state.entities.push(action.payload)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Streamlined Thunk Dispatching in a React Component\nDESCRIPTION: An optimized version of the component code that creates and dispatches the thunk function in a single step, demonstrating a cleaner approach to thunk usage.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleKeyDown = e => {\n  // If the user pressed the Enter key:\n  const trimmedText = text.trim()\n  if (e.which === 13 && trimmedText) {\n    // highlight-start\n    // Create the thunk function and immediately dispatch it\n    dispatch(saveNewTodo(trimmedText))\n    // highlight-end\n    setText('')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Application Entry Point to Use Extended API Slice\nDESCRIPTION: Shows how to update the application's main entry point to use the extended API slice with the injected getUsers endpoint. This ensures the correct reference is used for dispatching API requests.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport { apiSliceWithUsers } from './features/users/usersSlice'\n\nimport { worker } from './api/server'\n\nimport './index.css'\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  // highlight-next-line\n  store.dispatch(apiSliceWithUsers.endpoints.getUsers.initiate())\n\n  const root = createRoot(document.getElementById('root')!)\n\n  root.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Custom Hooks Configuration for RTK Query\nDESCRIPTION: Example showing the new pattern for configuring custom React hooks in RTK Query's reactHooksModule. All three hooks (useDispatch, useSelector, useStore) must now be provided under a single 'hooks' property.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// previously\nconst customCreateApi = buildCreateApi(\n  coreModule(),\n  reactHooksModule({\n    useDispatch: createDispatchHook(MyContext),\n    useSelector: createSelectorHook(MyContext),\n    useStore: createStoreHook(MyContext)\n  })\n)\n\n// now\nconst customCreateApi = buildCreateApi(\n  coreModule(),\n  reactHooksModule({\n    hooks: {\n      useDispatch: createDispatchHook(MyContext),\n      useSelector: createSelectorHook(MyContext),\n      useStore: createStoreHook(MyContext)\n    }\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Root Reducer with Initial State in Redux\nDESCRIPTION: Demonstrates how to set up a basic Redux reducer with initial state containing todos and filters. The reducer function includes a default case to return state unchanged when it doesn't need to respond to an action.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = {\n  todos: [\n    { id: 0, text: 'Learn React', completed: true },\n    { id: 1, text: 'Learn Redux', completed: false, color: 'purple' },\n    { id: 2, text: 'Build something fun!', completed: false, color: 'blue' }\n  ],\n  filters: {\n    status: 'All',\n    colors: []\n  }\n}\n\n// Use the initialState as a default value\nexport default function appReducer(state = initialState, action) {\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    // Do something here based on the different types of actions\n    default:\n      // If this reducer doesn't recognize the action type, or doesn't\n      // care about this specific action, return the existing state unchanged\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Typed AsyncThunk - TypeScript\nDESCRIPTION: Implementation of a pre-typed version of createAsyncThunk with correct dispatch and state types built in.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAsyncThunk } from '@reduxjs/toolkit'\n\nimport type { RootState, AppDispatch } from './store'\n\nexport const createAppAsyncThunk = createAsyncThunk.withTypes<{\n  state: RootState\n  dispatch: AppDispatch\n}>()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Redux Reducer in JavaScript\nDESCRIPTION: A simple example of a Redux reducer function that handles the 'counter/incremented' action by creating an immutable copy of the state and incrementing a value property. It demonstrates the core reducer pattern of checking action types and returning either modified or unchanged state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-2-concepts-data-flow.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = { value: 0 }\n\nfunction counterReducer(state = initialState, action) {\n  // Check to see if the reducer cares about this action\n  if (action.type === 'counter/incremented') {\n    // If so, make a copy of `state`\n    return {\n      ...state,\n      // and update the copy with the new value\n      value: state.value + 1\n    }\n  }\n  // otherwise return the existing state unchanged\n  return state\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Redux Middleware with TypeScript\nDESCRIPTION: Demonstrates how to type a custom Redux middleware using the Middleware type from Redux core, specifying the state type and maintaining the dispatch behavior.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware } from 'redux'\n\nimport { RootState } from '../store'\n\nexport const exampleMiddleware: Middleware<\n  {}, // Most middleware do not modify the dispatch return value\n  RootState\n> = storeApi => next => action => {\n  const state = storeApi.getState() // correctly typed as RootState\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Custom Middleware in JavaScript (ES6 Arrow Functions)\nDESCRIPTION: This snippet shows how to write custom middleware using ES6 arrow functions. It's a more concise version of the previous example, demonstrating the same middleware structure.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst anotherExampleMiddleware = storeAPI => next => action => {\n  // Do something in here, when each action is dispatched\n\n  return next(action)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users Slice - TypeScript\nDESCRIPTION: Implements a new users slice with TypeScript interfaces, initial state, and selector functions. Creates a basic structure for managing user data in the Redux store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport type { RootState } from '@/app/store'\n\ninterface User {\n  id: string\n  name: string\n}\n\nconst initialState: User[] = [\n  { id: '0', name: 'Tianna Jenkins' },\n  { id: '1', name: 'Kevin Grant' },\n  { id: '2', name: 'Madison Price' }\n]\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {}\n})\n\nexport default usersSlice.reducer\n\nexport const selectAllUsers = (state: RootState) => state.users\n\nexport const selectUserById = (state: RootState, userId: string | null) =>\n  state.users.find(user => user.id === userId)\n```\n\n----------------------------------------\n\nTITLE: Creating Counter Reducers with redux-data-structures\nDESCRIPTION: Example of using redux-data-structures to create a counter reducer factory. It specifies which action types should increment or decrement the counter state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myCounter = counter({\n  incrementActionTypes: ['INCREMENT'],\n  decrementActionTypes: ['DECREMENT']\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Dispatching getUsers Query in App Initialization\nDESCRIPTION: This snippet demonstrates how to manually dispatch the getUsers query during app initialization. It uses the initiate thunk from the apiSlice to start fetching user data as soon as the app loads.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { apiSlice } from './features/api/apiSlice'\n\nasync function main() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  store.dispatch(apiSlice.endpoints.getUsers.initiate())\n\n  const root = createRoot(document.getElementById('root')!)\n\n  root.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  )\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Customizing createSelector Memoization in TypeScript\nDESCRIPTION: Shows how to customize the memoization function for createSelector to use the original lruMemoize method with a custom equality function. This is necessary if you need to customize equality comparisons in Reselect.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSelector(inputs, resultFn, {\n  memoize: lruMemoize,\n  memoizeOptions: { equalityCheck: yourEqualityFunction }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with Custom Return Value in JavaScript\nDESCRIPTION: This example shows a middleware that always returns a specific value ('Hello!') regardless of the action or state changes. It demonstrates how middleware can modify the return value of dispatch.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst alwaysReturnHelloMiddleware = storeAPI => next => action => {\n  const originalResult = next(action)\n  // Ignore the original result, return something else\n  return 'Hello!'\n}\n\nconst middlewareEnhancer = applyMiddleware(alwaysReturnHelloMiddleware)\nconst store = createStore(rootReducer, middlewareEnhancer)\n\nconst dispatchResult = store.dispatch({ type: 'some/action' })\nconsole.log(dispatchResult)\n// log: 'Hello!'\n```\n\n----------------------------------------\n\nTITLE: Defining Initial State and Reducer for User Login (JavaScript)\nDESCRIPTION: Illustrates a problematic reducer implementation that blindly returns the action payload, potentially leading to state inconsistencies if the payload is not correctly formatted.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = {\n    firstName: null,\n    lastName: null,\n    age: null,\n};\n\nexport default usersReducer = (state = initialState, action) {\n    switch(action.type) {\n        case \"users/userLoggedIn\": {\n            return action.payload;\n        }\n        default: return state;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Multiple Enhancers using compose\nDESCRIPTION: Shows how to combine multiple store enhancers using Redux's compose function. This example combines sayHiOnDispatch and includeMeaningOfLife enhancers to simultaneously modify different store behaviors.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, compose } from 'redux'\nimport rootReducer from './reducer'\nimport {\n  sayHiOnDispatch,\n  includeMeaningOfLife\n} from './exampleAddons/enhancers'\n\nconst composedEnhancer = compose(sayHiOnDispatch, includeMeaningOfLife)\n\nconst store = createStore(rootReducer, undefined, composedEnhancer)\n\nexport default store\n```\n\n----------------------------------------\n\nTITLE: Avoiding Circular Type References in Redux Store Setup\nDESCRIPTION: Shows how to define RootState type to avoid circular type references between middleware and store definitions when using combineReducers with Redux Toolkit.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// instead of defining the reducers in the reducer field of configureStore, combine them here:\nconst rootReducer = combineReducers({ counter: counterReducer })\n\n// then set rootReducer as the reducer object of configureStore\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(yourMiddleware)\n})\n\ntype RootState = ReturnType<typeof rootReducer>\n```\n\n----------------------------------------\n\nTITLE: Using Selectors to Extract Data from Redux State\nDESCRIPTION: A simple example of a selector function that extracts specific data from the Redux store state. Selectors help avoid duplicating logic when different parts of an application need to access the same data from the store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-2-concepts-data-flow.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectCounterValue = state => state.value\n\nconst currentValue = selectCounterValue(store.getState())\nconsole.log(currentValue)\n// 2\n```\n\n----------------------------------------\n\nTITLE: Updating Navbar Component with Notifications Tab in Redux Application\nDESCRIPTION: Modifies the Navbar component to include a \"Notifications\" tab and a button to fetch new notifications. The component imports the fetchNotifications thunk and dispatches it when the button is clicked.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// omit several imports\n\nimport { logout } from '@/features/auth/authSlice'\n// highlight-next-line\nimport { fetchNotifications } from '@/features/notifications/notificationsSlice'\nimport { selectCurrentUser } from '@/features/users/usersSlice'\n\nexport const Navbar = () => {\n  const dispatch = useAppDispatch()\n  const user = useAppSelector(selectCurrentUser)\n\n  const isLoggedIn = !!user\n\n  let navContent: React.ReactNode = null\n\n  if (isLoggedIn) {\n    const onLogoutClicked = () => {\n      dispatch(logout())\n    }\n\n    // highlight-start\n    const fetchNewNotifications = () => {\n      dispatch(fetchNotifications())\n    }\n    // highlight-end\n\n    navContent = (\n      <div className=\"navContent\">\n        <div className=\"navLinks\">\n          <Link to=\"/posts\">Posts</Link>\n          <Link to=\"/users\">Users</Link>\n          // highlight-start\n          <Link to=\"/notifications\">Notifications</Link>\n          <button className=\"button small\" onClick={fetchNewNotifications}>\n            Refresh Notifications\n          </button>\n          // highlight-end\n        </div>\n        {/* omit user details */}\n      </div>\n    )\n  }\n\n  // omit other rendering\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Redux Reducer Function\nDESCRIPTION: A simple example of a Redux reducer function that handles increment and decrement actions with explicit state initialization. This demonstrates the core responsibilities of checking for undefined state and responding to different action types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/BasicReducerStructure.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction counter(state, action) {\n  if (typeof state === 'undefined') {\n    state = 0 // If state is undefined, initialize it with a default value\n  }\n\n  if (action.type === 'INCREMENT') {\n    return state + 1\n  } else if (action.type === 'DECREMENT') {\n    return state - 1\n  } else {\n    return state // In case an action is passed in we don't understand\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Posts with useMemo in React Component\nDESCRIPTION: This snippet shows how to sort posts fetched from an RTK Query hook using useMemo for performance optimization. It creates a memoized sorted copy of the posts array to avoid re-sorting on every render while maintaining the immutability of the original data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// omit setup\n\nexport const PostsList = () => {\n  const {\n    // highlight-next-line\n    data: posts = [],\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  } = useGetPostsQuery()\n\n  // highlight-start\n  const sortedPosts = useMemo(() => {\n    const sortedPosts = posts.slice()\n    // Sort posts in descending chronological order\n    sortedPosts.sort((a, b) => b.date.localeCompare(a.date))\n    return sortedPosts\n  }, [posts])\n  // highlight-end\n\n  let content\n\n  if (isLoading) {\n    content = <Spinner text=\"Loading...\" />\n  } else if (isSuccess) {\n    // highlight-next-line\n    content = sortedPosts.map(post => <PostExcerpt key={post.id} post={post} />)\n  } else if (isError) {\n    content = <div>{error.toString()}</div>\n  }\n\n  // omit rendering\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Creating New References in Selectors\nDESCRIPTION: An example of an inefficient selector that always returns a new array reference, which would cause unnecessary re-renders when used with useSelector. This demonstrates what to avoid when creating selector functions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Bad: always returning a new reference\nconst selectTodoDescriptions = state => {\n  // This creates a new array reference!\n  return state.todos.map(todo => todo.text)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Selectors in CreateSlice - TypeScript\nDESCRIPTION: Demonstrates how to define and use selectors directly within createSlice, including basic usage and custom state mounting.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst slice = createSlice({\n  name: 'counter',\n  initialState: 42,\n  reducers: {},\n  selectors: {\n    selectSlice: state => state,\n    selectMultiple: (state, multiplier: number) => state * multiplier\n  }\n})\n\n// Basic usage\nconst testState = {\n  [slice.name]: slice.getInitialState()\n}\nconst { selectSlice, selectMultiple } = slice.selectors\nexpect(selectSlice(testState)).toBe(slice.getInitialState())\nexpect(selectMultiple(testState, 2)).toBe(slice.getInitialState() * 2)\n\n// Usage with the slice reducer mounted under a different key\nconst customState = {\n  number: slice.getInitialState()\n}\nconst { selectSlice, selectMultiple } = slice.getSelectors(\n  (state: typeof customState) => state.number\n)\nexpect(selectSlice(customState)).toBe(slice.getInitialState())\nexpect(selectMultiple(customState, 2)).toBe(slice.getInitialState() * 2)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Action with Middleware in JavaScript\nDESCRIPTION: This code snippet shows how to dispatch an action when middleware is applied to the store. It demonstrates the order in which middleware functions are executed.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport store from './store'\n\nstore.dispatch({ type: 'todos/todoAdded', payload: 'Learn about actions' })\n// log: '1'\n// log: '2'\n// log: '3'\n```\n\n----------------------------------------\n\nTITLE: Configuring RTK Query API Slice with Endpoints\nDESCRIPTION: Demonstrates setting up an API slice with various endpoints including queries for fetching posts and mutations for adding/editing posts. Shows configuration of tags for cache invalidation and endpoint definitions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    getPosts: builder.query<Post[], void>({\n      query: () => '/posts',\n      providesTags: ['Post']\n    }),\n    getPost: builder.query<Post, string>({\n      query: postId => `/posts/${postId}`\n    }),\n    addNewPost: builder.mutation<Post, NewPost>({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        body: initialPost\n      }),\n      invalidatesTags: ['Post']\n    }),\n    editPost: builder.mutation<Post, PostUpdate>({\n      query: post => ({\n        url: `posts/${post.id}`,\n        method: 'PATCH',\n        body: post\n      })\n    })\n  })\n})\n\nexport const {\n  useGetPostsQuery,\n  useGetPostQuery,\n  useAddNewPostMutation,\n  useEditPostMutation\n} = apiSlice\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions to Redux Store\nDESCRIPTION: Implements event listeners that dispatch actions to the Redux store in response to user interactions. This includes basic increment/decrement actions, conditional dispatching based on current state, and asynchronous action dispatching with setTimeout.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-1-overview.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Handle user inputs by \"dispatching\" action objects,\n// which should describe \"what happened\" in the app\ndocument.getElementById('increment').addEventListener('click', function () {\n  store.dispatch({ type: 'counter/incremented' })\n})\n\ndocument.getElementById('decrement').addEventListener('click', function () {\n  store.dispatch({ type: 'counter/decremented' })\n})\n\ndocument\n  .getElementById('incrementIfOdd')\n  .addEventListener('click', function () {\n    // We can write logic to decide what to do based on the state\n    if (store.getState().value % 2 !== 0) {\n      store.dispatch({ type: 'counter/incremented' })\n    }\n  })\n\ndocument\n  .getElementById('incrementAsync')\n  .addEventListener('click', function () {\n    // We can also write async logic that interacts with the store\n    setTimeout(function () {\n      store.dispatch({ type: 'counter/incremented' })\n    }, 1000)\n  })\n```\n\n----------------------------------------\n\nTITLE: Typing useSelector Hook with TypeScript in React Redux\nDESCRIPTION: Demonstrates how to properly type the useSelector hook in React Redux by specifying the RootState type for the state parameter, allowing TypeScript to infer the return type.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RootState {\n  isOn: boolean\n}\n\n// TS infers type: (state: RootState) => boolean\nconst selectIsOn = (state: RootState) => state.isOn\n\n// TS infers `isOn` is boolean\nconst isOn = useSelector(selectIsOn)\n```\n\n----------------------------------------\n\nTITLE: Simulating Redux State Management with Array.reduce()\nDESCRIPTION: A demonstration of how Redux conceptually works by using Array.reduce() to process multiple actions through a reducer function, resulting in a final state. This illustrates how Redux reduces actions over time into application state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-2-concepts-data-flow.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = [\n  { type: 'counter/incremented' },\n  { type: 'counter/incremented' },\n  { type: 'counter/incremented' }\n]\n\nconst initialState = { value: 0 }\n\nconst finalResult = actions.reduce(counterReducer, initialState)\nconsole.log(finalResult)\n// {value: 3}\n```\n\n----------------------------------------\n\nTITLE: React Component with Redux Thunk Loading State\nDESCRIPTION: Header component implementation showing how to handle loading states while dispatching thunks. Uses local state to track loading status and displays a loading indicator.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst Header = () => {\n  const [text, setText] = useState('')\n  const [status, setStatus] = useState('idle')\n  const dispatch = useDispatch()\n\n  const handleChange = e => setText(e.target.value)\n\n  const handleKeyDown = async e => {\n    const trimmedText = text.trim()\n    if (e.which === 13 && trimmedText) {\n      setStatus('loading')\n      await dispatch(saveNewTodo(trimmedText))\n      setText('')\n      setStatus('idle')\n    }\n  }\n\n  let isLoading = status === 'loading'\n  let placeholder = isLoading ? '' : 'What needs to be done?'\n  let loader = isLoading ? <div className=\"loader\" /> : null\n\n  return (\n    <header className=\"header\">\n      <input\n        className=\"new-todo\"\n        placeholder={placeholder}\n        autoFocus={true}\n        value={text}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        disabled={isLoading}\n      />\n      {loader}\n    </header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Todos Slice with Loading State\nDESCRIPTION: Restructures the todos reducer to include loading state and entities, demonstrating proper state nesting and immutable updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = {\n  status: 'idle',\n  entities: []\n}\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'todos/todoAdded': {\n      return {\n        ...state,\n        entities: [...state.entities, action.payload]\n      }\n    }\n    case 'todos/todoToggled': {\n      return {\n        ...state,\n        entities: state.entities.map(todo => {\n          if (todo.id !== action.payload) {\n            return todo\n          }\n          return {\n            ...todo,\n            completed: !todo.completed\n          }\n        })\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const selectTodos = state => state.todos.entities\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Redux Selectors for State Access\nDESCRIPTION: Demonstrates creating simple selector functions for accessing todos and finding a specific todo by ID in the Redux state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport const selectTodos = state => state.todos\n\nexport const selectTodoById = (state, todoId) => {\n  return selectTodos(state).find(todo => todo.id === todoId)\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing PostExcerpt Component with React.memo\nDESCRIPTION: Shows how to wrap a PostExcerpt component with React.memo() to prevent unnecessary re-renders when props haven't changed.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nlet PostExcerpt = ({ post }: PostExcerptProps) => {\n  // omit logic\n}\n\nPostExcerpt = React.memo(PostExcerpt)\n```\n\n----------------------------------------\n\nTITLE: Type Checking Redux Reducers with TypeScript\nDESCRIPTION: Shows how to type a standalone Redux reducer by declaring the type of initialState and using UnknownAction for the action parameter when not using Redux Toolkit's createSlice.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UnknownAction } from 'redux'\n\ninterface CounterState {\n  value: number\n}\n\nconst initialState: CounterState = {\n  value: 0\n}\n\nexport default function counterReducer(\n  state = initialState,\n  action: UnknownAction\n) {\n  // logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectors with proxy-memoize\nDESCRIPTION: Demonstrates how to create a memoized selector using proxy-memoize, which tracks specific property access for more granular memoization.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memoize } from 'proxy-memoize'\n\nconst selectTodoDescriptionsProxy = memoize(state =>\n  state.todos.map(todo => todo.text)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Testing Redux Slice with TypeScript\nDESCRIPTION: Example of creating a Redux slice for managing todos using createSlice from Redux Toolkit, along with corresponding test cases for reducer functionality.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport type Todo = {\n  id: number\n  text: string\n  completed: boolean\n}\n\nconst initialState: Todo[] = [{ text: 'Use Redux', completed: false, id: 0 }]\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action: PayloadAction<string>) {\n      state.push({\n        id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n        completed: false,\n        text: action.payload\n      })\n    }\n  }\n})\n\nexport const { todoAdded } = todosSlice.actions\n\nexport default todosSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Parameters in React-Redux\nDESCRIPTION: Demonstrates how to use selectors with additional parameters in React-Redux components using useSelector hook.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { selectTodoById } from './todosSlice'\n\nfunction TodoListitem({ todoId }) {\n  const todo = useSelector(state => selectTodoById(state, todoId))\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Typing of createAsyncThunk\nDESCRIPTION: Demonstrates advanced typing of createAsyncThunk, including specifying return type, payload argument type, and thunkApi field types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchUserById = createAsyncThunk<\n  MyData,\n  number,\n  {\n    dispatch: AppDispatch\n    state: State\n    extra: {\n      jwt: string\n    }\n  }\n>('users/fetchById', async (userId, thunkApi) => {\n  const response = await fetch(`https://reqres.in/api/users/${userId}`, {\n    headers: {\n      Authorization: `Bearer ${thunkApi.extra.jwt}`\n    }\n  })\n  return (await response.json()) as MyData\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Immutable Updates in JavaScript\nDESCRIPTION: Examples of how to update JavaScript objects and arrays immutably using spread operators and array methods. It demonstrates creating copies before making changes to maintain immutability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-2-concepts-data-flow.md#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst obj = {\n  a: {\n    // To safely update obj.a.c, we have to copy each piece\n    c: 3\n  },\n  b: 2\n}\n\nconst obj2 = {\n  // copy obj\n  ...obj,\n  // overwrite a\n  a: {\n    // copy obj.a\n    ...obj.a,\n    // overwrite c\n    c: 42\n  }\n}\n\nconst arr = ['a', 'b']\n// Create a new copy of arr, with \"c\" appended to the end\nconst arr2 = arr.concat('c')\n\n// or, we can make a copy of the original array:\nconst arr3 = arr.slice()\n// and mutate the copy:\narr3.push('c')\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Redux Store Changes\nDESCRIPTION: Example demonstrating how to subscribe to Redux store changes and unsubscribe. It shows a pattern for monitoring specific state changes by comparing previous and current values of a nested property in the state tree.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/Store.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction select(state) {\n  return state.some.deep.property\n}\n\nlet currentValue\nfunction handleChange() {\n  let previousValue = currentValue\n  currentValue = select(store.getState())\n\n  if (previousValue !== currentValue) {\n    console.log(\n      'Some deep nested property changed from',\n      previousValue,\n      'to',\n      currentValue\n    )\n  }\n}\n\nconst unsubscribe = store.subscribe(handleChange)\nunsubscribe()\n```\n\n----------------------------------------\n\nTITLE: Exporting Typed Redux Hooks for React-Redux\nDESCRIPTION: This snippet creates and exports pre-typed versions of useDispatch and useSelector hooks from React-Redux, incorporating the correct TypeScript types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { AppDispatch, RootState } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\n```\n\n----------------------------------------\n\nTITLE: Chaining Memoized Selectors in Redux\nDESCRIPTION: Shows how to create a new memoized selector that uses the output of another memoized selector as its input.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const selectFilteredTodoIds = createSelector(\n  // Pass our other memoized selector as an input\n  selectFilteredTodos,\n  // And derive data in the output selector\n  filteredTodos => filteredTodos.map(todo => todo.id)\n)\n```\n\n----------------------------------------\n\nTITLE: Redux Logger Middleware Implementation\nDESCRIPTION: Custom middleware implementation that logs actions and state changes\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = store => next => action => {\n  console.group(action.type)\n  console.info('dispatching', action)\n  let result = next(action)\n  console.log('next state', store.getState())\n  console.groupEnd()\n  return result\n}\n\nexport default logger\n```\n\n----------------------------------------\n\nTITLE: Typing extraReducers in createSlice\nDESCRIPTION: Shows how to correctly type extraReducers in createSlice using the builder callback form for proper action type inference.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    // fill in primary logic here\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUserById.pending, (state, action) => {\n      // both `state` and `action` are now correctly typed\n      // based on the slice state and the `pending` action creator\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Selector Instances with connect\nDESCRIPTION: Demonstrates how to create unique selector instances in class components using connect's factory function pattern.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeSelectItemsByCategory } from './categoriesSlice'\n\nconst makeMapState = (state, ownProps) => {\n  const selectItemsByCategory = makeSelectItemsByCategory()\n\n  const realMapState = (state, ownProps) => {\n    return {\n      itemsByCategory: selectItemsByCategory(state, ownProps.category)\n    }\n  }\n\n  return realMapState\n}\n\nexport default connect(makeMapState)(CategoryList)\n```\n\n----------------------------------------\n\nTITLE: Creating a Handwritten Async Thunk in Redux (TypeScript)\nDESCRIPTION: This example illustrates a manually written async thunk that handles API calls, dispatches pending and success actions, and includes error handling. It demonstrates the structure of a more complex thunk with asynchronous operations.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchUserById = (userId: string): AppThunk => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(userPending())\n      const user = await userAPI.fetchById(userId)\n      dispatch(userLoaded(user))\n    } catch (err) {\n      // If something went wrong, handle it here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Selector with Multiple Expensive Operations\nDESCRIPTION: Example of an inefficient selector that performs multiple expensive operations during every render, regardless of whether the input data has changed.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ExampleComplexComponent() {\n  const data = useSelector(state => {\n    const initialData = state.data\n    const filteredData = expensiveFiltering(initialData)\n    const sortedData = expensiveSorting(filteredData)\n    const transformedData = expensiveTransformation(sortedData)\n\n    return transformedData\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using createEntityAdapter with Default ID\nDESCRIPTION: Shows how to use createEntityAdapter with TypeScript when entities have a default 'id' property for normalization.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Book {\n  id: number\n  title: string\n}\n\nconst booksAdapter = createEntityAdapter<Book>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title)\n})\n\nconst booksSlice = createSlice({\n  name: 'books',\n  initialState: booksAdapter.getInitialState(),\n  reducers: {\n    bookAdded: booksAdapter.addOne,\n    booksReceived(state, action: PayloadAction<{ books: Book[] }>) {\n      booksAdapter.setAll(state, action.payload.books)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Creation Toast Listener\nDESCRIPTION: Creates a listener that shows a toast notification when a new post is successfully added. Demonstrates usage of listener middleware for handling side effects.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport const addPostsListeners = (startAppListening: AppStartListening) => {\n  startAppListening({\n    actionCreator: addNewPost.fulfilled,\n    effect: async (action, listenerApi) => {\n      const { toast } = await import('react-tiny-toast')\n\n      const toastId = toast.show('New post added!', {\n        variant: 'success',\n        position: 'bottom-right',\n        pause: true\n      })\n\n      await listenerApi.delay(5000)\n      toast.remove(toastId)\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing TodoList Component with ID-based Selection in React-Redux\nDESCRIPTION: This code demonstrates how to optimize list rendering by selecting only todo IDs from the Redux store instead of full todo objects. This approach helps prevent unnecessary re-renders when only a single todo item changes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport TodoListItem from './TodoListItem'\n\n// highlight-next-line\nconst selectTodoIds = state => state.todos.map(todo => todo.id)\n\nconst TodoList = () => {\n  // highlight-next-line\n  const todoIds = useSelector(selectTodoIds)\n\n  const renderedListItems = todoIds.map(todoId => {\n    // highlight-next-line\n    return <TodoListItem key={todoId} id={todoId} />\n  })\n\n  return <ul className=\"todo-list\">{renderedListItems}</ul>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Action Creator's match Method for Type Narrowing\nDESCRIPTION: Shows how to use the match method of RTK-generated action creators as a type predicate for narrowing action types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst increment = createAction<number>('increment')\nfunction test(action: Action) {\n  if (increment.match(action)) {\n    // action.payload inferred correctly here\n    const num = 5 + action.payload\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Multiple Middleware\nDESCRIPTION: Example of creating a Redux store with multiple middleware applied in a specific order using applyMiddleware.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst todoApp = combineReducers(reducers)\nconst store = createStore(\n  todoApp,\n  applyMiddleware(\n    rafScheduler,\n    timeoutScheduler,\n    thunk,\n    vanillaPromise,\n    readyStatePromise,\n    logger,\n    crashReporter\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Counter Example\nDESCRIPTION: Commands to set up the Counter example that demonstrates basic Redux integration with React.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/counter\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Typing prepare Callbacks in createSlice\nDESCRIPTION: Demonstrates how to type prepare callbacks in createSlice for customizing action payloads and adding meta or error properties.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst blogSlice = createSlice({\n  name: 'blogData',\n  initialState,\n  reducers: {\n    receivedAll: {\n      reducer(\n        state,\n        action: PayloadAction<Page[], string, { currentPage: number }>\n      ) {\n        state.all = action.payload\n        state.meta = action.meta\n      },\n      prepare(payload: Page[], currentPage: number) {\n        return { payload, meta: { currentPage } }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with TypeScript (Legacy Approach)\nDESCRIPTION: This snippet demonstrates a legacy approach to setting up a Redux store with TypeScript, manually defining root state and action types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore, Dispatch } from 'redux'\n\nimport { TodoActions } from '../actions/todos'\nimport { CounterActions } from '../actions/counter'\nimport { TodosState } from '../reducers/todos'\nimport { CounterState } from '../reducers/counter'\n\n// omit reducer setup\n\nexport const store = createStore(rootReducer)\n\n// ❌ Common pattern: an \"action type union\" of all possible actions\nexport type RootAction = TodoActions | CounterActions\n// ❌ Common pattern: manually defining the root state type with each field\nexport interface RootState {\n  todos: TodosState\n  counter: CounterState\n}\n\n// ❌ Common pattern: limiting what can be dispatched at the types level\nexport type AppDispatch = Dispatch<RootAction>\n```\n\n----------------------------------------\n\nTITLE: Deriving Data with Redux Selector in JavaScript\nDESCRIPTION: Shows how to create a selector that derives data from the state, in this case extracting todo IDs from the todos array.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectTodoIds = state => state.todos.map(todo => todo.id)\n```\n\n----------------------------------------\n\nTITLE: Preparing Test State with Preloaded State in Redux Tests\nDESCRIPTION: This code snippet demonstrates how to prepare initial test state in Redux integration tests using the preloadedState parameter of the custom render function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntest('Uses preloaded state to render', () => {\n  const initialTodos = [{ id: 5, text: 'Buy Milk', completed: false }]\n\n  const { getByText } = renderWithProviders(<TodoList />, {\n    preloadedState: {\n      todos: initialTodos\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Notification Badge in Navbar Component\nDESCRIPTION: This snippet shows how to integrate an unread notification counter in a navigation bar. It uses a selector to retrieve the count of unread notifications and conditionally renders a badge when there are unread notifications, providing visual feedback to users.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n// omit other imports\n\nimport {\n  fetchNotifications,\n  selectUnreadNotificationsCount\n} from '@/features/notifications/notificationsSlice'\n\nexport const Navbar = () => {\n  const dispatch = useAppDispatch()\n  const username = useAppSelector(selectCurrentUsername)\n  const user = useAppSelector(selectCurrentUser)\n\n  const numUnreadNotifications = useAppSelector(selectUnreadNotificationsCount)\n\n  const isLoggedIn = !!user\n\n  let navContent: React.ReactNode = null\n\n  if (isLoggedIn) {\n    const onLogoutClicked = () => {\n      dispatch(logout())\n    }\n\n    const fetchNewNotifications = () => {\n      dispatch(fetchNotifications())\n    }\n\n    let unreadNotificationsBadge: React.ReactNode | undefined\n\n    if (numUnreadNotifications > 0) {\n      unreadNotificationsBadge = (\n        <span className=\"badge\">{numUnreadNotifications}</span>\n      )\n    }\n\n    navContent = (\n      <div className=\"navContent\">\n        <div className=\"navLinks\">\n          <Link to=\"/posts\">Posts</Link>\n          <Link to=\"/users\">Users</Link>\n          <Link to=\"/notifications\">\n            Notifications {unreadNotificationsBadge}\n          </Link>\n          <button className=\"button small\" onClick={fetchNewNotifications}>\n            Refresh Notifications\n          </button>\n        </div>\n        {/* omit button */}\n      </div>\n    )\n  }\n\n  // omit other rendering\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redux Toolkit's Listener Middleware for Side Effects\nDESCRIPTION: Demonstrates how to use Redux Toolkit's listenerMiddleware as a lightweight alternative for handling side effects and async logic.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlistenerMiddleware.startListening({\n  matcher: isAnyOf(action1, action2, action3),\n  effect: (action, listenerApi) => {\n    const user = selectUserDetails(listenerApi.getState())\n\n    const { specialData } = action.meta\n\n    analyticsApi.trackUsage(action.type, user, specialData)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating New Redux Projects\nDESCRIPTION: Commands to create new Redux applications using official templates with Vite or Next.js.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/GettingStarted.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Vite with our Redux+TS template\n# (using the `degit` tool to clone and extract the template)\nnpx degit reduxjs/redux-templates/packages/vite-template-redux my-app\n\n# Next.js using the `with-redux` template\nnpx create-next-app --example with-redux my-app\n```\n\n----------------------------------------\n\nTITLE: Post Author Component Implementation\nDESCRIPTION: Reusable component for displaying post author information by looking up user details from Redux store using a user ID.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppSelector } from '@/app/hooks'\n\nimport { selectUserById } from '@/features/users/usersSlice'\n\ninterface PostAuthorProps {\n  userId: string\n}\n\nexport const PostAuthor = ({ userId }: PostAuthorProps) => {\n  const author = useAppSelector(state => selectUserById(state, userId))\n\n  return <span>by {author?.name ?? 'Unknown author'}</span>\n}\n```\n\n----------------------------------------\n\nTITLE: Loading State Enum Example\nDESCRIPTION: Demonstrates the recommended approach of using string enum values for loading states instead of boolean flags.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  status: 'idle' // or: 'loading', 'succeeded', 'failed'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Slice with Async Thunk in Redux Toolkit (TypeScript)\nDESCRIPTION: This snippet defines a user slice using Redux Toolkit's createSlice and createAsyncThunk. It includes an async thunk for fetching user data, initial state definition, and reducer logic for handling async actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { userAPI } from './userAPI'\nimport type { RootState } from '../../app/store'\n\nexport const fetchUser = createAsyncThunk('user/fetchUser', async () => {\n  const response = await userAPI.fetchUser()\n  return response.data\n})\n\ninterface UserState {\n  name: string\n  status: 'idle' | 'loading' | 'complete'\n}\n\nconst initialState: UserState = {\n  name: 'No user',\n  status: 'idle'\n}\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchUser.pending, (state, action) => {\n      state.status = 'loading'\n    })\n    builder.addCase(fetchUser.fulfilled, (state, action) => {\n      state.status = 'complete'\n      state.name = action.payload\n    })\n  }\n})\n\nexport const selectUserName = (state: RootState) => state.user.name\nexport const selectUserFetchStatus = (state: RootState) => state.user.status\n\nexport default userSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Using withMiddleware Action Creator\nDESCRIPTION: Shows how to use withMiddleware for typed dispatch with middleware extensions\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst listenerDispatch = store.dispatch(\n  withMiddleware(listenerMiddleware.middleware)\n)\n\nconst unsubscribe = listenerDispatch(addListener({ actionCreator, effect }))\n//    ^? () => void\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store with configureStore\nDESCRIPTION: Sets up an empty Redux store using the configureStore API from Redux Toolkit. This automatically configures the Redux DevTools extension.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/quick-start.md#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nexport default configureStore({\n  reducer: {}\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Dispatching a Basic Thunk Function in Redux\nDESCRIPTION: Example of a basic thunk function that logs the state before and after incrementing a counter. This demonstrates the fundamental pattern of accessing state and dispatching actions from within a thunk.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = configureStore({ reducer: counterReducer })\n\nconst exampleThunkFunction = (\n  dispatch: AppDispatch,\n  getState: () => RootState\n) => {\n  const stateBefore = getState()\n  console.log(`Counter before: ${stateBefore.counter}`)\n  dispatch(increment())\n  const stateAfter = getState()\n  console.log(`Counter after: ${stateAfter.counter}`)\n}\n\nstore.dispatch(exampleThunkFunction)\n```\n\n----------------------------------------\n\nTITLE: Typing Connect HOC in React Redux with TypeScript\nDESCRIPTION: Shows how to use ConnectedProps type from react-redux to infer prop types from the connect higher-order component automatically, enabling proper type checking for connected components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connect, ConnectedProps } from 'react-redux'\n\ninterface RootState {\n  isOn: boolean\n}\n\nconst mapState = (state: RootState) => ({\n  isOn: state.isOn\n})\n\nconst mapDispatch = {\n  toggleOn: () => ({ type: 'TOGGLE_IS_ON' })\n}\n\nconst connector = connect(mapState, mapDispatch)\n\n// The inferred type will look like:\n// {isOn: boolean, toggleOn: () => void}\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & {\n  backgroundColor: string\n}\n\nconst MyComponent = (props: Props) => (\n  <div style={{ backgroundColor: props.backgroundColor }}>\n    <button onClick={props.toggleOn}>\n      Toggle is {props.isOn ? 'ON' : 'OFF'}\n    </button>\n  </div>\n)\n\nexport default connector(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with RTK Query in JavaScript\nDESCRIPTION: This snippet shows how to configure a Redux store with RTK Query. It adds the API reducer to the store and includes the API middleware in the middleware configuration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\n// Import the API object\n// highlight-next-line\nimport { api } from '../features/api/apiSlice'\n// Import any other slice reducers as usual here\nimport usersReducer from '../features/users/usersSlice'\n\nexport const store = configureStore({\n  reducer: {\n    // Add the generated RTK Query \"API slice\" caching reducer\n    // highlight-next-line\n    [api.reducerPath]: api.reducer,\n    // Add any other reducers\n    users: usersReducer\n  },\n  // Add the RTK Query API middleware\n  // highlight-start\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(api.middleware)\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Setter-Based Action Example\nDESCRIPTION: Demonstrates the anti-pattern of modeling Redux actions as setters, requiring multiple dispatches for a single logical operation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"orders/setPizzasOrdered\",\n    payload: {\n        amount: getState().orders.pizza + 1,\n    }\n}\n\n{\n    type: \"orders/setCokesOrdered\",\n    payload: {\n        amount: getState().orders.coke + 1,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Selector with useSelector Hook\nDESCRIPTION: A simplified example showing how to write a selector function directly inside the useSelector call, which is a common pattern for simple selections that don't need to be reused elsewhere.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst todos = useSelector(state => state.todos)\n```\n\n----------------------------------------\n\nTITLE: Creating a Store with Combined Reducers in JavaScript\nDESCRIPTION: This example shows how to create a Redux store using combined reducers, resulting in a state object with default values for 'a' and 'b'.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/InitializingState.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\nconst store = createStore(combined)\nconsole.log(store.getState()) // { a: 'lol', b: 'wat' }\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Utils with Redux Provider\nDESCRIPTION: Creates a custom render function that wraps components with Redux Provider and manages store creation. Includes TypeScript types for render options and store configuration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { PropsWithChildren } from 'react'\nimport { render } from '@testing-library/react'\nimport type { RenderOptions } from '@testing-library/react'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { Provider } from 'react-redux'\n\nimport type { AppStore, RootState } from '../app/store'\nimport { setupStore } from '../app/store'\nimport userReducer from '../features/users/userSlice'\n\ninterface ExtendedRenderOptions extends Omit<RenderOptions, 'queries'> {\n  preloadedState?: Partial<RootState>\n  store?: AppStore\n}\n\nexport function renderWithProviders(\n  ui: React.ReactElement,\n  extendedRenderOptions: ExtendedRenderOptions = {}\n) {\n  const {\n    preloadedState = {},\n    store = setupStore(preloadedState),\n    ...renderOptions\n  } = extendedRenderOptions\n\n  const Wrapper = ({ children }: PropsWithChildren) => (\n    <Provider store={store}>{children}</Provider>\n  )\n\n  return {\n    store,\n    ...render(ui, { wrapper: Wrapper, ...renderOptions })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Types in Legacy Redux (JavaScript)\nDESCRIPTION: This snippet shows how action types were traditionally defined in a separate constants file in Redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const ADD_TODO = 'ADD_TODO'\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\n```\n\n----------------------------------------\n\nTITLE: Using Async Function Middleware with Redux Store\nDESCRIPTION: Example showing how to use the async function middleware to handle API requests and dispatch actions based on the response.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst middlewareEnhancer = applyMiddleware(asyncFunctionMiddleware)\nconst store = createStore(rootReducer, middlewareEnhancer)\n\n// Write a function that has `dispatch` and `getState` as arguments\nconst fetchSomeData = (dispatch, getState) => {\n  // Make an async HTTP request\n  client.get('todos').then(todos => {\n    // Dispatch an action with the todos we received\n    dispatch({ type: 'todos/todosLoaded', payload: todos })\n    // Check the updated store state after dispatching\n    const allTodos = getState().todos\n    console.log('Number of todos after loading: ', allTodos.length)\n  })\n}\n\n// Pass the _function_ we wrote to `dispatch`\nstore.dispatch(fetchSomeData)\n// logs: 'Number of todos after loading: ###'\n```\n\n----------------------------------------\n\nTITLE: Conditionally Applying Redux Middleware Based on Environment\nDESCRIPTION: Demonstrates how to conditionally include debug middleware only in non-production environments. This pattern helps reduce bundle size by allowing bundling tools to exclude unnecessary modules in production builds.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/applyMiddleware.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet middleware = [a, b]\nif (process.env.NODE_ENV !== 'production') {\n  const c = require('some-debug-middleware')\n  const d = require('another-debug-middleware')\n  middleware = [...middleware, c, d]\n}\n\nconst store = createStore(\n  reducer,\n  preloadedState,\n  applyMiddleware(...middleware)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Store Types - TypeScript\nDESCRIPTION: Setup for TypeScript types in a Redux store, including AppStore, AppDispatch, RootState, and AppThunk type definitions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Action, ThunkAction, configureStore } from '@reduxjs/toolkit'\n\nexport type AppStore = typeof store\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Thunks in Redux Slice\nDESCRIPTION: Converts client-side authentication actions to async thunks that communicate with a server API. Handles login and logout operations with proper state management.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '@/api/client'\nimport type { RootState } from '@/app/store'\nimport { createAppAsyncThunk } from '@/app/withTypes'\n\ninterface AuthState {\n  username: string | null\n}\n\nexport const login = createAppAsyncThunk(\n  'auth/login',\n  async (username: string) => {\n    await client.post('/fakeApi/login', { username })\n    return username\n  }\n)\n\nexport const logout = createAppAsyncThunk('auth/logout', async () => {\n  await client.post('/fakeApi/logout', {})\n})\n\nconst initialState: AuthState = {\n  username: null\n}\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(login.fulfilled, (state, action) => {\n        state.username = action.payload\n      })\n      .addCase(logout.fulfilled, state => {\n        state.username = null\n      })\n  }\n})\n\nexport default authSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Message Middleware in JavaScript\nDESCRIPTION: This snippet shows a middleware that responds to a specific action type ('todos/todoAdded') by logging a message after a delay. It demonstrates how middleware can perform asynchronous operations.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst delayedMessageMiddleware = storeAPI => next => action => {\n  if (action.type === 'todos/todoAdded') {\n    setTimeout(() => {\n      console.log('Added a new todo: ', action.payload)\n    }, 1000)\n  }\n\n  return next(action)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redux-ORM Models and Reducers in JavaScript\nDESCRIPTION: This snippet demonstrates how to define Redux-ORM Model classes for Posts and Comments, including fields, relations, and reducer functions. It also shows how to register these models with an ORM instance.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/UpdatingNormalizedData.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// models.js\nimport { Model, fk, attr, ORM } from 'redux-orm'\n\nexport class Post extends Model {\n  static get fields() {\n    return {\n      id: attr(),\n      name: attr()\n    }\n  }\n\n  static reducer(action, Post, session) {\n    switch (action.type) {\n      case 'CREATE_POST': {\n        Post.create(action.payload)\n        break\n      }\n    }\n  }\n}\nPost.modelName = 'Post'\n\nexport class Comment extends Model {\n  static get fields() {\n    return {\n      id: attr(),\n      text: attr(),\n      // Define a foreign key relation - one Post can have many Comments\n      postId: fk({\n        to: 'Post', // must be the same as Post.modelName\n        as: 'post', // name for accessor (comment.post)\n        relatedName: 'comments' // name for backward accessor (post.comments)\n      })\n    }\n  }\n\n  static reducer(action, Comment, session) {\n    switch (action.type) {\n      case 'ADD_COMMENT': {\n        Comment.create(action.payload)\n        break\n      }\n    }\n  }\n}\nComment.modelName = 'Comment'\n\n// Create an ORM instance and hook up the Post and Comment models\nexport const orm = new ORM()\norm.register(Post, Comment)\n```\n\n----------------------------------------\n\nTITLE: Preparing Test State with Redux Actions in Tests\nDESCRIPTION: This snippet shows an alternative approach to setting up test state by creating a Redux store instance and dispatching actions to build the required state before rendering components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ntest('Sets up initial state state with actions', () => {\n  const store = setupStore()\n  store.dispatch(todoAdded('Buy milk'))\n\n  const { getByText } = renderWithProviders(<TodoList />, { store })\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a Redux Reducer to Handle Server-Generated Todo Items\nDESCRIPTION: Modified todo reducer that handles the 'todos/todoAdded' action for server-created todo items, where the payload contains the complete todo object with server-generated ID.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = []\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    // highlight-start\n    case 'todos/todoAdded': {\n      // Return a new todos state array with the new todo item at the end\n      return [...state, action.payload]\n    }\n    // highlight-end\n    // omit other cases\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit Post Form with RTK Query Hooks\nDESCRIPTION: Shows how to implement a form component using RTK Query hooks for fetching post data and handling updates. Uses useGetPostQuery for reading data and useEditPostMutation for saving changes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\n\nimport { Spinner } from '@/components/Spinner'\n\nimport { useGetPostQuery, useEditPostMutation } from '@/features/api/apiSlice'\n\nexport const EditPostForm = () => {\n  const { postId } = useParams()\n  const navigate = useNavigate()\n\n  const { data: post } = useGetPostQuery(postId!)\n\n  const [updatePost, { isLoading }] = useEditPostMutation()\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  const onSavePostClicked = async (\n    e: React.FormEvent<EditPostFormElements>\n  ) => {\n    e.preventDefault()\n\n    const { elements } = e.currentTarget\n    const title = elements.postTitle.value\n    const content = elements.postContent.value\n\n    if (title && content) {\n      await updatePost({ id: post.id, title, content })\n      navigate(`/posts/${postId}`)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators in React Component\nDESCRIPTION: Example React component demonstrating how to use bindActionCreators with react-redux connect HOC. Shows proper usage patterns and common pitfalls when working with bound action creators.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/bindActionCreators.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport * as TodoActionCreators from './TodoActionCreators'\nconsole.log(TodoActionCreators)\n// {\n//   addTodo: Function,\n//   removeTodo: Function\n// }\n\nfunction TodoListContainer(props) {\n  // Injected by react-redux:\n  const { dispatch, todos } = props\n\n  // Here's a good use case for bindActionCreators:\n  // You want a child component to be completely unaware of Redux.\n  // We create bound versions of these functions now so we can\n  // pass them down to our child later.\n\n  const boundActionCreators = useMemo(\n    () => bindActionCreators(TodoActionCreators, dispatch),\n    [dispatch]\n  )\n  console.log(boundActionCreators)\n  // {\n  //   addTodo: Function,\n  //   removeTodo: Function\n  // }\n\n  useEffect(() => {\n    // Note: this won't work:\n    // TodoActionCreators.addTodo('Use Redux')\n\n    // You're just calling a function that creates an action.\n    // You must dispatch the action, too!\n\n    // This will work:\n    let action = TodoActionCreators.addTodo('Use Redux')\n    dispatch(action)\n  }, [])\n\n  return <TodoList todos={todos} {...this.boundActionCreators} />\n\n  // An alternative to bindActionCreators is to pass\n  // just the dispatch function down, but then your child component\n  // needs to import action creators and know about them.\n\n  // return <TodoList todos={todos} dispatch={dispatch} />\n}\n\nexport default connect(state => ({ todos: state.todos }))(TodoListContainer)\n```\n\n----------------------------------------\n\nTITLE: Typical Redux Setup with Dynamic Injection\nDESCRIPTION: Complete example showing typical Redux setup with lazy-loaded slices and dynamic injection patterns\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// file: reducer.ts\nimport { combineSlices } from '@reduxjs/toolkit'\nimport { staticSlice } from './staticSlice'\n\nexport interface LazyLoadedSlices {}\n\nexport const rootReducer =\n  combineSlices(staticSlice).withLazyLoadedSlices<LazyLoadedSlices>()\n\n// file: store.ts\nimport { configureStore } from '@reduxjs/toolkit'\nimport { rootReducer } from './reducer'\n\nexport const store = configureStore({ reducer: rootReducer })\n\n// file: counterSlice.ts\nimport type { WithSlice } from '@reduxjs/toolkit'\nimport { createSlice } from '@reduxjs/toolkit'\nimport { rootReducer } from './reducer'\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 },\n  reducers: {\n    increment: state => void state.value++\n  },\n  selectors: {\n    selectValue: state => state.value\n  }\n})\n\nexport const { increment } = counterSlice.actions\n\ndeclare module './reducer' {\n  export interface LazyLoadedSlices extends WithSlice<typeof counterSlice> {}\n}\n\nconst injectedCounterSlice = counterSlice.injectInto(rootReducer)\n\nexport const { selectValue } = injectedCounterSlice.selectors\n\n// file: Counter.tsx\n// by importing from counterSlice we guarantee\n// the injection happens before this component is defined\nimport { increment, selectValue } from './counterSlice'\nimport { useAppDispatch, useAppSelector } from './hooks'\n\nexport default function Counter() {\n  const dispatch = usAppDispatch()\n  const value = useAppSelector(selectValue)\n  return (\n    <>\n      <p>{value}</p>\n      <button onClick={() => dispatch(increment())}>Increment</button>\n    </>\n  )\n}\n\n// file: App.tsx\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\n// lazily importing the component means that the code\n// doesn't actually get pulled in and executed until the component is rendered.\n// this means that the inject call only happens once Counter renders\nconst Counter = React.lazy(() => import('./Counter'))\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Counter />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using configureStore with Slice Reducers in Redux Toolkit\nDESCRIPTION: Example of using Redux Toolkit's configureStore method with multiple slice reducers, which automatically calls combineReducers internally.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/combineReducers.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    comments: commentsReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading State Structure in TypeScript\nDESCRIPTION: Defines a TypeScript interface for the posts state, including status and error fields to track the progress of API requests.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PostsState {\n  posts: Post[]\n  status: 'idle' | 'pending' | 'succeeded' | 'failed'\n  error: string | null\n}\n\nconst initialState: PostsState = {\n  posts: [],\n  status: 'idle',\n  error: null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserPage Component with Route Parameters and Redux Selectors\nDESCRIPTION: A TypeScript React component that displays a specific user's page with their posts. It uses route parameters to identify the user, fetches relevant data with useAppSelector, and renders a list of post links.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Link, useParams } from 'react-router-dom'\n\nimport { useAppSelector } from '@/app/hooks'\nimport { selectPostsByUser } from '@/features/posts/postsSlice'\n\nimport { selectUserById } from './usersSlice'\n\nexport const UserPage = () => {\n  const { userId } = useParams()\n\n  const user = useAppSelector(state => selectUserById(state, userId!))\n\n  const postsForUser = useAppSelector(state =>\n    selectPostsByUser(state, userId!)\n  )\n\n  if (!user) {\n    return (\n      <section>\n        <h2>User not found!</h2>\n      </section>\n    )\n  }\n\n  const postTitles = postsForUser.map(post => (\n    <li key={post.id}>\n      <Link to={`/posts/${post.id}`}>{post.title}</Link>\n    </li>\n  ))\n\n  return (\n    <section>\n      <h2>{user.name}</h2>\n\n      <ul>{postTitles}</ul>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router for Post Editing in TypeScript\nDESCRIPTION: This snippet shows how to set up routing for the EditPostForm component in a React application. It imports the necessary components and defines a new route for editing posts with a postId parameter.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\nimport { Navbar } from './components/Navbar'\nimport { PostsMainPage } from './features/posts/PostsMainPage'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\nimport { EditPostForm } from './features/posts/EditPostForm'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/\" element={<PostsMainPage />}></Route>\n          <Route path=\"/posts/:postId\" element={<SinglePostPage />} />\n          <Route path=\"/editPost/:postId\" element={<EditPostForm />} />\n        </Routes>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Logic with Redux Thunk\nDESCRIPTION: Shows how to use Redux Thunk for handling asynchronous operations and complex synchronous logic in Redux actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchData(someValue) {\n    return (dispatch, getState) => {\n        dispatch({type : \"REQUEST_STARTED\"});\n\n        myAjaxLib.post(\"/someEndpoint\", {data : someValue})\n            .then(response => dispatch({type : \"REQUEST_SUCCEEDED\", payload : response})\n            .catch(error => dispatch({type : \"REQUEST_FAILED\", error : error});\n    };\n}\n\nfunction addTodosIfAllowed(todoText) {\n    return (dispatch, getState) => {\n        const state = getState();\n\n        if(state.todos.length < MAX_TODOS) {\n            dispatch({type : \"ADD_TODO\", text : todoText});\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Redux Actions\nDESCRIPTION: Shows how to emit actions to change state in Redux using the dispatch method. The example demonstrates completing a todo item and changing the visibility filter.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/ThreePrinciples.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstore.dispatch({\n  type: 'COMPLETE_TODO',\n  index: 1\n})\n\nstore.dispatch({\n  type: 'SET_VISIBILITY_FILTER',\n  filter: 'SHOW_COMPLETED'\n})\n```\n\n----------------------------------------\n\nTITLE: React Integration with Dynamic Middleware\nDESCRIPTION: Demonstrates React integration patterns for dynamic middleware using custom hooks\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDynamicMiddleware } from '@reduxjs/toolkit/react'\n\nconst dynamicMiddleware = createDynamicMiddleware()\n\nconst useListenerDispatch = dynamicMiddleware.createDispatchWithMiddlewareHook(\n  listenerMiddleware.middleware\n)\n\nfunction Component() {\n  const dispatch = useListenerDispatch()\n\n  useEffect(() => {\n    const unsubscribe = dispatch(addListener({ actionCreator, effect }))\n    return unsubscribe\n  }, [dispatch])\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Endpoints in RTK Query with TypeScript\nDESCRIPTION: Demonstrates how to move the getUsers endpoint definition from apiSlice.ts to usersSlice.ts using apiSlice.injectEndpoints(). This approach maintains a single API slice reference while enabling code splitting.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiSlice } from '../api/apiSlice'\n\n// highlight-start\n// This is the _same_ reference as `apiSlice`, but this has\n// the TS types updated to include the injected endpoints\nexport const apiSliceWithUsers = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query<User[], void>({\n      query: () => '/users'\n    })\n  })\n})\n\nexport const { useGetUsersQuery } = apiSliceWithUsers\n\nexport const selectUsersResult = apiSliceWithUsers.endpoints.getUsers.select()\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Implementing a Todo Reducer in Redux\nDESCRIPTION: Implementation of a todos reducer that handles the ADD_TODO action and maintains an array of todo items.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/combineReducers.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([action.text])\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illegal State Mutation in Redux\nDESCRIPTION: This snippet demonstrates an incorrect way to update state in Redux by directly mutating the state object. This approach is not allowed and can cause bugs.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Illegal - by default, this will mutate the state!\nstate.value = 123\n```\n\n----------------------------------------\n\nTITLE: Using Combined Reducers with Redux Store\nDESCRIPTION: Example of setting up a Redux store with combined reducers and dispatching actions to see state changes, using Redux Toolkit's configureStore.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/combineReducers.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport reducer from './reducers/index'\n\nconst store = configureStore({\n  reducer\n})\nconsole.log(store.getState())\n// {\n//   counter: 0,\n//   todos: []\n// }\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Use Redux'\n})\nconsole.log(store.getState())\n// {\n//   counter: 0,\n//   todos: [ 'Use Redux' ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Fetches with Thunk Conditions (TypeScript)\nDESCRIPTION: Adds a condition callback to the fetchPosts thunk to prevent duplicate API calls. It checks the current posts status in the Redux state and cancels the thunk if a request is already in progress.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const fetchPosts = createAppAsyncThunk(\n  'posts/fetchPosts',\n  async () => {\n    const response = await client.get<Post[]>('/fakeApi/posts')\n    return response.data\n  },\n  {\n    condition(arg, thunkApi) {\n      const postsStatus = selectPostsStatus(thunkApi.getState())\n      if (postsStatus !== 'idle') {\n        return false\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating User-Specific Post Selector in Redux Slice\nDESCRIPTION: A TypeScript selector function that filters posts by user ID. The implementation uses existing selectors and filter operations to extract the appropriate data from the Redux store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// omit rest of the file\nexport const selectPostById = (state: RootState, postId: string) =>\n  state.posts.posts.find(post => post.id === postId)\n\n// highlight-start\nexport const selectPostsByUser = (state: RootState, userId: string) => {\n  const allPosts = selectAllPosts(state)\n  // ❌ This seems suspicious! See more details below\n  return allPosts.filter(post => post.user === userId)\n}\n// highlight-end\n\nexport const selectPostsStatus = (state: RootState) => state.posts.status\nexport const selectPostsError = (state: RootState) => state.posts.error\n```\n\n----------------------------------------\n\nTITLE: Enhanced Post Form with Author Selection\nDESCRIPTION: React component for adding new posts with author selection from a dropdown menu. Includes form validation and user selection integration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { selectAllUsers } from '@/features/users/usersSlice'\n\nconst AddPostForm = () => {\n  const dispatch = useAppDispatch()\n  const users = useAppSelector(selectAllUsers)\n\n  const handleSubmit = (e: React.FormEvent<AddPostFormElements>) => {\n    e.preventDefault()\n\n    const { elements } = e.currentTarget\n    const title = elements.postTitle.value\n    const content = elements.postContent.value\n    const userId = elements.postAuthor.value\n\n    dispatch(postAdded(title, content, userId))\n\n    e.currentTarget.reset()\n  }\n\n  const usersOptions = users.map(user => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ))\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input type=\"text\" id=\"postTitle\" defaultValue=\"\" required />\n        <label htmlFor=\"postAuthor\">Author:</label>\n        <select id=\"postAuthor\" name=\"postAuthor\" required>\n          <option value=\"\"></option>\n          {usersOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          defaultValue=\"\"\n          required\n        />\n        <button>Save Post</button>\n      </form>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shopping Cart Example\nDESCRIPTION: Commands to set up the Shopping Cart example demonstrating normalized entities and Redux patterns.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/shopping-cart\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Post Reactions Slice in Redux Toolkit\nDESCRIPTION: Creates a Redux slice for managing post reactions with TypeScript interfaces and initial state. Includes a reducer for adding reactions to posts.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, nanoid, PayloadAction } from '@reduxjs/toolkit'\nimport { sub } from 'date-fns'\n\nexport interface Reactions {\n  thumbsUp: number\n  tada: number\n  heart: number\n  rocket: number\n  eyes: number\n}\n\nexport type ReactionName = keyof Reactions\n\nexport interface Post {\n  id: string\n  title: string\n  content: string\n  user: string\n  date: string\n  reactions: Reactions\n}\n\ntype PostUpdate = Pick<Post, 'id' | 'title' | 'content'>\n\nconst initialReactions: Reactions = {\n  thumbsUp: 0,\n  tada: 0,\n  heart: 0,\n  rocket: 0,\n  eyes: 0\n}\n\nconst initialState: Post[] = [\n  // omit initial state\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(\n      state,\n      action: PayloadAction<{ postId: string; reaction: ReactionName }>\n    ) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.find(post => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    }\n  }\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n```\n\n----------------------------------------\n\nTITLE: Simplified Store Configuration Entry Point\nDESCRIPTION: Clean entry point using configureStore pattern\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport configureStore from './configureStore'\n\nconst store = configureStore()\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Transforming Response Data with createEntityAdapter in RTK Query\nDESCRIPTION: Implements response data transformation using createEntityAdapter to normalize the server response before caching. This approach optimizes data lookup by transforming array data into a normalized entity structure.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createSelector,\n  // highlight-start\n  createEntityAdapter,\n  EntityState\n  // highlight-end\n} from '@reduxjs/toolkit'\n\nimport type { RootState } from '@/app/store'\n\nimport { apiSlice } from '@/features/api/apiSlice'\nimport { selectCurrentUsername } from '@/features/auth/authSlice'\n\nexport interface User {\n  id: string\n  name: string\n}\n\n// highlight-start\nconst usersAdapter = createEntityAdapter<User>()\nconst initialState = usersAdapter.getInitialState()\n// highlight-end\n\n// This is the _same_ reference as `apiSlice`, but this has\n// the TS types updated to include the injected endpoints\nexport const apiSliceWithUsers = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    // highlight-start\n    getUsers: builder.query<EntityState<User, string>, void>({\n      query: () => '/users',\n      transformResponse(res: User[]) {\n        // Create a normalized state object containing all the user items\n        return usersAdapter.setAll(initialState, res)\n      }\n    })\n    // highlight-end\n  })\n})\n\nexport const { useGetUsersQuery } = apiSliceWithUsers\n\n// Calling `someEndpoint.select(someArg)` generates a new selector that will return\n// the query result object for a query with those parameters.\n// To generate a selector for a specific query argument, call `select(theQueryArg)`.\n// In this case, the users query has no params, so we don't pass anything to select()\nexport const selectUsersResult = apiSliceWithUsers.endpoints.getUsers.select()\n// highlight-start\nconst selectUsersData = createSelector(\n  selectUsersResult,\n  // Fall back to the empty entity state if no response yet.\n  result => result.data ?? initialState\n)\n// highlight-end\n\nexport const selectCurrentUser = (state: RootState) => {\n  const currentUsername = selectCurrentUsername(state)\n  if (currentUsername) {\n    return selectUserById(state, currentUsername)\n  }\n}\n\n// highlight-start\nexport const { selectAll: selectAllUsers, selectById: selectUserById } =\n  usersAdapter.getSelectors(selectUsersData)\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Using compose with Redux store enhancers\nDESCRIPTION: This example demonstrates how to use the compose function to enhance a Redux store with middleware and developer tools. It combines applyMiddleware with the Redux DevTools instrument method to create an enhanced store configuration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/compose.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { thunk } from 'redux-thunk'\nimport DevTools from './containers/DevTools'\nimport reducer from '../reducers'\n\nconst store = createStore(\n  reducer,\n  compose(applyMiddleware(thunk), DevTools.instrument())\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Selectors for Undoable State Structure\nDESCRIPTION: Demonstrates how to access the present state in a component that maps state to props when using redux-undo.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = state => {\n  return {\n    todos: getVisibleTodos(state.todos.present, state.visibilityFilter)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions in Redux Store\nDESCRIPTION: Example showing how to create a Redux store and dispatch actions to it. The example creates a store with a 'todos' reducer and initial state, defines an action creator function, and dispatches actions to add todo items.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/Store.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\nconst store = createStore(todos, ['Use Redux'])\n\nfunction addTodo(text) {\n  return {\n    type: 'ADD_TODO',\n    text\n  }\n}\n\nstore.dispatch(addTodo('Read the docs'))\nstore.dispatch(addTodo('Read about the middleware'))\n```\n\n----------------------------------------\n\nTITLE: Defining Thunks Inside createSlice Using create Object\nDESCRIPTION: Converting a standard reducers object to use the create callback syntax in createSlice. This approach enables more advanced reducer definition patterns and shows the equivalent implementation using create.preparedReducer and create.reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  // highlight-start\n  reducers: create => {\n    return {\n      postAdded: create.preparedReducer(\n        (title: string, content: string, userId: string) => {\n          return {\n            payload: {\n              id: nanoid(),\n              date: new Date().toISOString(),\n              title,\n              content,\n              user: userId,\n              reactions: initialReactions\n            }\n          }\n        },\n        (state, action) => {\n          state.posts.push(action.payload)\n        }\n      ),\n      postUpdated: create.reducer<PostUpdate>((state, action) => {\n        const { id, title, content } = action.payload\n        const existingPost = state.posts.find(post => post.id === id)\n        if (existingPost) {\n          existingPost.title = title\n          existingPost.content = content\n        }\n      }),\n      reactionAdded: create.reducer<{ postId: string; reaction: ReactionName }>\n        ((state, action) => {\n          const { postId, reaction } = action.payload\n          const existingPost = state.posts.find(post => post.id === postId)\n          if (existingPost) {\n            existingPost.reactions[reaction]++\n          }\n        }\n      )\n    }\n  },\n  // highlight-end\n  extraReducers: builder => {\n    // same as before\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating App Component to Include AddPostForm\nDESCRIPTION: This snippet shows how to modify the App component to include both the AddPostForm and PostsList components on the home route using React Fragment.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// omit outer `<App>` definition\n<Route\n  path=\"/\"\n  element={\n    <>\n      // highlight-next-line\n      <AddPostForm />\n      <PostsList />\n    </>\n  }\n></Route>\n```\n\n----------------------------------------\n\nTITLE: Simplified Reducer Using Immer\nDESCRIPTION: Shows how Immer allows writing reducers with much simpler syntax. The function can directly \"mutate\" nested values, and Immer handles the immutable update behind the scenes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducerWithImmer(state, action) {\n  state.first.second[action.someId].fourth = action.someValue\n}\n```\n\n----------------------------------------\n\nTITLE: Using Selector Utilities with Redux\nDESCRIPTION: Demonstrates how to use selector utilities with injected reducers, showing type-safe state access and initial state handling\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst selectCounterValue = (state: RootState) => state.counter?.value // number | undefined\n\nconst withCounterSlice = rootReducer.inject(counterSlice)\nconst selectCounterValue = withCounterSlice.selector(\n  state => state.counter.value // number - initial state used if not in store\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Notifications List Component with RTK Query\nDESCRIPTION: React component that uses RTK Query hook to fetch and display notifications. Demonstrates integration with Redux for marking notifications as read and handling notification states.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport const NotificationsList = () => {\n  const dispatch = useAppDispatch()\n  const { data: notifications = [] } = useGetNotificationsQuery()\n\n  useLayoutEffect(() => {\n    dispatch(allNotificationsRead())\n  })\n\n  const renderedNotifications = notifications.map((notification) => {\n    const notificationClassname = classnames('notification', {\n      // new: notification.isNew,\n    })\n  }\n\n  // omit rendering\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Store Initialization with Data Fetching\nDESCRIPTION: Application entry point setup with Redux Provider and initial data fetching using thunk\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './App'\n\nimport './api/server'\n\nimport store from './store'\nimport { fetchTodos } from './features/todos/todosSlice'\n\nstore.dispatch(fetchTodos)\n\nconst root = createRoot(document.getElementById('root'))\n\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Selective Data Fetching in React Component with RTK Query's selectFromResult\nDESCRIPTION: This code demonstrates how to use RTK Query's selectFromResult option with a memoized selector to efficiently filter posts by user ID. It creates a reusable selector with createSelector, properly types the selector arguments with TypedUseQueryStateResult, and returns only the needed data to prevent unnecessary re-renders.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, useParams } from 'react-router-dom'\nimport { createSelector } from '@reduxjs/toolkit'\nimport type { TypedUseQueryStateResult } from '@reduxjs/toolkit/query/react'\n\nimport { useAppSelector } from '@/app/hooks'\n\nimport { useGetPostsQuery, Post } from '@/features/api/apiSlice'\n\nimport { selectUserById } from './usersSlice'\n\n// Create a TS type that represents \"the result value passed\n// into the `selectFromResult` function for this hook\"\ntype GetPostSelectFromResultArg = TypedUseQueryStateResult<Post[], any, any>\n\nconst selectPostsForUser = createSelector(\n  (res: GetPostSelectFromResultArg) => res.data,\n  (res: GetPostSelectFromResultArg, userId: string) => userId,\n  (data, userId) => data?.filter(post => post.user === userId)\n)\n\nexport const UserPage = () => {\n  const { userId } = useParams()\n\n  const user = useAppSelector(state => selectUserById(state, userId!))\n\n  // Use the same posts query, but extract only part of its data\n  const { postsForUser } = useGetPostsQuery(undefined, {\n    selectFromResult: result => ({\n      // Optional: Include all of the existing result fields like `isFetching`\n      ...result,\n      // Include a field called `postsForUser` in the result object,\n      // which will be a filtered list of posts\n      postsForUser: selectPostsForUser(result, userId!)\n    })\n  })\n\n  // omit rendering logic\n}\n```\n\n----------------------------------------\n\nTITLE: Redux State and Action Type Example\nDESCRIPTION: Demonstrates how Redux actions should use string types for serialization purposes rather than Symbols or other non-serializable values. Shows importance of maintaining serializable actions for features like time travel debugging.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/Actions.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Good - serializable action type\nconst action = {\n  type: \"ADD_TODO\",\n  payload: { text: \"Buy milk\" }\n};\n\n// Bad - non-serializable Symbol type\nconst action = {\n  type: Symbol(\"ADD_TODO\"),\n  payload: { text: \"Buy milk\" }\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Lazy Loaded Slices with Redux Toolkit (TypeScript)\nDESCRIPTION: Shows how to declare and inject lazy loaded slices using Redux Toolkit's combineSlices and withLazyLoadedSlices utilities, including module augmentation for type inference.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// file: reducer.ts\nimport { combineSlices } from '@reduxjs/toolkit'\nimport { staticSlice } from './staticSlice'\n\nexport interface LazyLoadedSlices {}\n\nexport const rootReducer =\n  combineSlices(staticSlice).withLazyLoadedSlices<LazyLoadedSlices>()\n\n// file: counterSlice.ts\nimport type { WithSlice } from '@reduxjs/toolkit'\nimport { createSlice } from '@reduxjs/toolkit'\nimport { rootReducer } from './reducer'\n\ninterface CounterState {\n  value: number\n}\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 } as CounterState,\n  reducers: {\n    increment: state => void state.value++\n  },\n  selectors: {\n    selectValue: state => state.value\n  }\n})\n\ndeclare module './reducer' {\n  // WithSlice utility assumes reducer is under slice.reducerPath\n  export interface LazyLoadedSlices extends WithSlice<typeof counterSlice> {}\n\n  // if it's not, just use a normal key\n  export interface LazyLoadedSlices {\n    aCounter: CounterState\n  }\n}\n\nconst injectedCounterSlice = counterSlice.injectInto(rootReducer)\nconst injectedACounterSlice = counterSlice.injectInto(rootReducer, {\n  reducerPath: 'aCounter'\n})\n```\n\n----------------------------------------\n\nTITLE: Example Redux Project Folder Structure\nDESCRIPTION: A recommended folder structure for organizing a Redux project with feature folders and a single 'slice' file per feature.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/CodeStructure.md#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- /src\n  - index.tsx: Entry point file that renders the React component tree\n  - /app\n    - store.ts: store setup\n    - rootReducer.ts: root reducer (optional)\n    - App.tsx: root React component\n  - /common: hooks, generic components, utils, etc\n  - /features: contains all \"feature folders\"\n    - /todos: a single feature folder\n      - todosSlice.ts: Redux reducer logic and associated actions\n      - Todos.tsx: a React component\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions and Subscribing to Store Updates\nDESCRIPTION: Illustrates how to dispatch actions to the Redux store, subscribe to state changes, and unsubscribe from updates. Includes various action dispatching examples for a todo application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Initial state: ', store.getState())\n\nconst unsubscribe = store.subscribe(() =>\n  console.log('State after dispatch: ', store.getState())\n)\n\nstore.dispatch({ type: 'todos/todoAdded', payload: 'Learn about actions' })\nstore.dispatch({ type: 'todos/todoAdded', payload: 'Learn about reducers' })\nstore.dispatch({ type: 'todos/todoAdded', payload: 'Learn about stores' })\n\nstore.dispatch({ type: 'todos/todoToggled', payload: 0 })\nstore.dispatch({ type: 'todos/todoToggled', payload: 1 })\n\nstore.dispatch({ type: 'filters/statusFilterChanged', payload: 'Active' })\n\nstore.dispatch({\n  type: 'filters/colorFilterChanged',\n  payload: { color: 'red', changeType: 'added' }\n})\n\nunsubscribe()\n\nstore.dispatch({ type: 'todos/todoAdded', payload: 'Try creating a store' })\n```\n\n----------------------------------------\n\nTITLE: Updating App Component with PostsList in React Router\nDESCRIPTION: This snippet shows how to update the main App component to use React Router for displaying the PostsList component on the home route. It uses React Fragment to prepare for adding more components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\nimport { Navbar } from './components/Navbar'\n// highlight-next-line\nimport { PostsList } from './features/posts/PostsList'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              // highlight-start\n              <>\n                <PostsList />\n              </>\n              // highlight-end\n            }\n          ></Route>\n        </Routes>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Implementing combineReducers as a Reducer Enhancer in Redux\nDESCRIPTION: This code shows how to implement combineReducers as a reducer enhancer that composes multiple reducers into a single reducer, demonstrating the higher-order reducer pattern.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction combineReducers(reducers) {\n  return function (state = {}, action) {\n    return Object.keys(reducers).reduce((nextState, key) => {\n      // Call every reducer with the part of the state it manages\n      nextState[key] = reducers[key](state[key], action)\n      return nextState\n    }, {})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Redux Provider in Application Root\nDESCRIPTION: The application entry point that wraps the entire App component with React-Redux's Provider component, passing the Redux store as a prop. This makes the store available to all components that use React-Redux hooks.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\n// highlight-next-line\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport store from './store'\n\nconst root = createRoot(document.getElementById('root'))\n\nroot.render(\n  // highlight-start\n  // Render a `<Provider>` around the entire `<App>`,\n  // and pass the Redux store to it as a prop\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n  // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Using match Method with Redux-Observable for Better Type Filtering\nDESCRIPTION: TypeScript example showing how to use the match method with redux-observable for better type filtering compared to the older ofType approach with toString().\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// before (works in runtime, will not filter types properly)\nconst epic = (action$: Observable<Action>) =>\n  action$.pipe(\n    ofType(todoAdded),\n    map(action => action)\n    //   ^? still Action<any>\n  )\n\n// consider (better type filtering)\nconst epic = (action$: Observable<Action>) =>\n  action$.pipe(\n    filter(todoAdded.match),\n    map(action => action)\n    //   ^? now PayloadAction<Todo>\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Link in Navbar Component\nDESCRIPTION: Enhances the Navbar component with a Link to return to the main posts page, improving navigation through the application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport { Link } from 'react-router-dom'\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            // highlight-next-line\n            <Link to=\"/\">Posts</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates for Reactions with onQueryStarted\nDESCRIPTION: This enhanced version of the addReaction mutation uses onQueryStarted to implement optimistic updates. It immediately updates the cache on the client side before the server responds, and reverts the changes if the request fails.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    // omit other endpoints\n\n    addReaction: builder.mutation<\n      Post,\n      { postId: string; reaction: ReactionName }\n    >({\n      query: ({ postId, reaction }) => ({\n        url: `posts/${postId}/reactions`,\n        method: 'POST',\n        // In a real app, we'd probably need to base this on user ID somehow\n        // so that a user can't do the same reaction more than once\n        body: { reaction }\n      }),\n      // highlight-start\n      // The `invalidatesTags` line has been removed,\n      // since we're now doing optimistic updates\n      async onQueryStarted({ postId, reaction }, lifecycleApi) {\n        // `updateQueryData` requires the endpoint name and cache key arguments,\n        // so it knows which piece of cache state to update\n        const getPostsPatchResult = lifecycleApi.dispatch(\n          apiSlice.util.updateQueryData('getPosts', undefined, draft => {\n            // The `draft` is Immer-wrapped and can be \"mutated\" like in createSlice\n            const post = draft.find(post => post.id === postId)\n            if (post) {\n              post.reactions[reaction]++\n            }\n          })\n        )\n\n        // We also have another copy of the same data in the `getPost` cache\n        // entry for this post ID, so we need to update that as well\n        const getPostPatchResult = lifecycleApi.dispatch(\n          apiSlice.util.updateQueryData('getPost', postId, draft => {\n            draft.reactions[reaction]++\n          })\n        )\n\n        try {\n          await lifecycleApi.queryFulfilled\n        } catch {\n          getPostsPatchResult.undo()\n          getPostPatchResult.undo()\n        }\n      }\n    })\n    // highlight-end\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Reducers with Redux combineReducers Function\nDESCRIPTION: This snippet demonstrates how to use the combineReducers function in Redux to combine multiple reducer functions into a single reducer. It shows the structure for creating a store with separate slices for todos and counter state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/ImmutableData.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombineReducers({ todos: myTodosReducer, counter: myCounterReducer })\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store Factory for Next.js\nDESCRIPTION: Defines a makeStore function that creates a new Redux store instance for each request, along with type definitions for AppStore, RootState, and AppDispatch.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/nextjs.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nexport const makeStore = () => {\n  return configureStore({\n    reducer: {}\n  })\n}\n\n// Infer the type of makeStore\nexport type AppStore = ReturnType<typeof makeStore>\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<AppStore['getState']>\nexport type AppDispatch = AppStore['dispatch']\n```\n\n----------------------------------------\n\nTITLE: Inefficient mapStateToProps Implementation\nDESCRIPTION: Example of a mapStateToProps function that always causes re-renders by returning a new object. This pattern should be avoided for performance reasons.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/ImmutableData.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// AVOID - will always cause a re-render\nfunction mapStateToProps(state) {\n  return {\n    // todos always references a newly-created object\n    todos: {\n      all: state.todos,\n      visibleTodos: getVisibleTodos(state)\n    }\n  }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Testing a Redux Store with an Enhancer\nDESCRIPTION: A snippet demonstrating how to dispatch an action with a store that has been configured with an enhancer. This code shows the flow of execution when using enhanced dispatch functions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport store from './store'\n\nconsole.log('Dispatching action')\nstore.dispatch({ type: 'todos/todoAdded', payload: 'Learn about actions' })\nconsole.log('Dispatch complete')\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Redux Store in JavaScript\nDESCRIPTION: This snippet shows how to apply middleware to a Redux store using the applyMiddleware function. It demonstrates the usage with logger and crashReporter middleware.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\n\nconst todoApp = combineReducers(reducers)\nconst store = createStore(\n  todoApp,\n  // applyMiddleware() tells createStore() how to handle middleware\n  applyMiddleware(logger, crashReporter)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous State Fetching in Server-Side Rendering with Redux\nDESCRIPTION: This snippet demonstrates how to handle asynchronous state fetching in server-side rendering. It uses a mock API call to fetch initial counter value, then renders the React component with the fetched state and sends the pre-rendered page to the client.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ServerRendering.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Add this to our imports\nimport { fetchCounter } from './api/counter'\nimport { renderToString } from 'react-dom/server'\n\nfunction handleRender(req, res) {\n  // Query our mock API asynchronously\n  fetchCounter(apiResult => {\n    // Read the counter from the request, if provided\n    const params = qs.parse(req.query)\n    const counter = parseInt(params.counter, 10) || apiResult || 0\n\n    // Compile an initial state\n    let preloadedState = { counter }\n\n    // Create a new Redux store instance\n    const store = createStore(counterApp, preloadedState)\n\n    // Render the component to a string\n    const html = renderToString(\n      <Provider store={store}>\n        <App />\n      </Provider>\n    )\n\n    // Grab the initial state from our Redux store\n    const finalState = store.getState()\n\n    // Send the rendered page back to the client\n    res.send(renderFullPage(html, finalState))\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Core Library\nDESCRIPTION: Commands to install the core Redux library using NPM or Yarn package managers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/GettingStarted.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install redux\n\n# Yarn\nyarn add redux\n```\n\n----------------------------------------\n\nTITLE: Improved combineReducers Usage with Explicit Key Naming in Redux\nDESCRIPTION: This example shows a better approach to using combineReducers by carefully renaming imports and explicitly defining state keys. This results in a state shape that better reflects the data being managed.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/UsingCombineReducers.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { combineReducers, createStore } from 'redux'\n\n// Rename the default import to whatever name we want. We can also rename a named import.\nimport defaultState, {\n  firstNamedReducer,\n  secondNamedReducer as secondState\n} from './reducers'\n\nconst rootReducer = combineReducers({\n  defaultState, // key name same as the carefully renamed default export\n  firstState: firstNamedReducer, // specific key name instead of the variable name\n  secondState // key name same as the carefully renamed named export\n})\n\nconst reducerInitializedStore = createStore(rootReducer)\nconsole.log(reducerInitializedStore.getState())\n// {defaultState : 0, firstState : 1, secondState : 2}\n```\n\n----------------------------------------\n\nTITLE: Creating and Dispatching Batched Actions with redux-batch-actions-enhancer\nDESCRIPTION: Example of using redux-batch-actions-enhancer to accept batched actions. It creates a store with the batch enhancer and dispatches multiple actions using createAction.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = configureStore({ reducer, enhancers: [batch().enhancer] })\nstore.dispatch(createAction({ type: 'INCREMENT' }, { type: 'INCREMENT' }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Websocket Notification Thunk in TypeScript with Redux Toolkit\nDESCRIPTION: This code modifies a notifications slice to support websocket-based push notifications by creating a new thunk function that triggers server notifications and selectors to access notification data from the cache.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createEntityAdapter,\n  createSlice,\n  // highlight-next-line\n  createSelector\n} from '@reduxjs/toolkit'\n\n// highlight-start\nimport { forceGenerateNotifications } from '@/api/server'\nimport type { AppThunk, RootState } from '@/app/store'\n// highlight-end\n\nimport { apiSlice } from '@/features/api/apiSlice'\n\n// omit types and API slice setup\n\nexport const { useGetNotificationsQuery } = apiSliceWithNotifications\n\n// highlight-start\nexport const fetchNotificationsWebsocket =\n  (): AppThunk => (dispatch, getState) => {\n    const allNotifications = selectNotificationsData(getState())\n    const [latestNotification] = allNotifications\n    const latestTimestamp = latestNotification?.date ?? ''\n    // Hardcode a call to the mock server to simulate a server push scenario over websockets\n    forceGenerateNotifications(latestTimestamp)\n  }\n\nconst emptyNotifications: ServerNotification[] = []\n\nexport const selectNotificationsResult =\n  apiSliceWithNotifications.endpoints.getNotifications.select()\n\nconst selectNotificationsData = createSelector(\n  selectNotificationsResult,\n  notificationsResult => notificationsResult.data ?? emptyNotifications\n)\n// highlight-end\n\n// omit slice and selectors\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Shallow Equality with Mutable Objects\nDESCRIPTION: This code snippet shows why shallow equality checking doesn't work with mutable objects. The function mutates the input object, but the reference remains the same.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/ImmutableData.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mutateObj(obj) {\n  obj.key = 'newValue'\n  return obj\n}\n\nconst param = { key: 'originalValue' }\nconst returnVal = mutateObj(param)\n\nparam === returnVal\n//> true\n```\n\n----------------------------------------\n\nTITLE: Installing React-Redux\nDESCRIPTION: Shell command for installing the official React-Redux bindings library via npm.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-redux\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mutation Issues in mapStateToProps\nDESCRIPTION: Example showing how mutating and returning a persistent object in mapStateToProps prevents React-Redux component re-rendering due to shallow equality checking.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/ImmutableData.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// State object held in the Redux store\nconst state = {\n  user: {\n    accessCount: 0,\n    name: 'keith'\n  }\n}\n\n// Selector function\nconst getUser = state => {\n  ++state.user.accessCount // mutate the state object\n  return state\n}\n\n// mapStateToProps\nconst mapStateToProps = state => ({\n  // The object returned from getUser() is always\n  // the same object, so this wrapped\n  // component will never re-render, even though it's been\n  // mutated\n  userRecord: getUser(state)\n})\n\nconst a = mapStateToProps(state)\nconst b = mapStateToProps(state)\n\na.userRecord === b.userRecord\n//> true\n```\n\n----------------------------------------\n\nTITLE: Testing a Redux Store with Multiple Enhancers\nDESCRIPTION: Demonstrates how to use a Redux store configured with multiple enhancers, showing both the dispatch behavior modification and the state modification provided by different enhancers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport store from './store'\n\nstore.dispatch({ type: 'todos/todoAdded', payload: 'Learn about actions' })\n// log: 'Hi!'\n\nconsole.log('State after dispatch: ', store.getState())\n// log: {todos: [...], filters: {status, colors}, meaningOfLife: 42}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Middleware with Function Composition in JavaScript\nDESCRIPTION: This snippet demonstrates a more advanced implementation of logger middleware using function composition. It accepts the next dispatch function as a parameter instead of reading it from the store instance.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logger(store) {\n  return function wrapDispatchToAddLogging(next) {\n    return function dispatchAndLog(action) {\n      console.log('dispatching', action)\n      let result = next(action)\n      console.log('next state', store.getState())\n      return result\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array.reduce() to Demonstrate Redux Reducer Concept\nDESCRIPTION: An example showing how Array.reduce() works to help understand why Redux reducers are named as such. It demonstrates summing an array of numbers with a reduce callback function that accumulates values, which is conceptually similar to how Redux reducers process actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-2-concepts-data-flow.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst numbers = [2, 5, 8]\n\nconst addNumbers = (previousResult, currentItem) => {\n  console.log({ previousResult, currentItem })\n  return previousResult + currentItem\n}\n\nconst initialValue = 0\n\nconst total = numbers.reduce(addNumbers, initialValue)\n// {previousResult: 0, currentItem: 2}\n// {previousResult: 2, currentItem: 5}\n// {previousResult: 7, currentItem: 8}\n\nconsole.log(total)\n// 15\n```\n\n----------------------------------------\n\nTITLE: Managing Promise-based Actions with Redux Pack\nDESCRIPTION: Shows how to use Redux Pack for handling promise-based actions in a declarative way, with conventions for different stages of promise lifecycle.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndispatch({type : \"FETCH_DATA\", payload : myAjaxLib.get(\"/data\") });\n\n// in a reducer:\n        case \"FETCH_DATA\": =\n            return handle(state, action, {\n                start: prevState => ({\n                  ...prevState,\n                  isLoading: true,\n                  fooError: null\n                }),\n                finish: prevState => ({ ...prevState, isLoading: false }),\n                failure: prevState => ({ ...prevState, fooError: payload }),\n                success: prevState => ({ ...prevState, foo: payload }),\n            });\n```\n\n----------------------------------------\n\nTITLE: Implementing Reducer Injection in Redux Store Configuration (JavaScript)\nDESCRIPTION: Shows how to create a configureStore function that includes an injectReducer method for adding async reducers to the store dynamically.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\n\n// Define the Reducers that will always be present in the application\nconst staticReducers = {\n  users: usersReducer,\n  posts: postsReducer\n}\n\n// Configure the store\nexport default function configureStore(initialState) {\n  const store = createStore(createReducer(), initialState)\n\n  // Add a dictionary to keep track of the registered async reducers\n  store.asyncReducers = {}\n\n  // Create an inject reducer function\n  // This function adds the async reducer, and creates a new combined reducer\n  store.injectReducer = (key, asyncReducer) => {\n    store.asyncReducers[key] = asyncReducer\n    store.replaceReducer(createReducer(store.asyncReducers))\n  }\n\n  // Return the modified store\n  return store\n}\n\nfunction createReducer(asyncReducers) {\n  return combineReducers({\n    ...staticReducers,\n    ...asyncReducers\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Notification Metadata with Redux Toolkit\nDESCRIPTION: Refactors a notifications slice to track metadata for notifications rather than full notification objects. Uses RTK Query's matchFulfilled matcher to listen for query results and maintain read status separately from the actual notification data stored in the RTK Query cache.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// omit imports and thunks\n\n// Replaces `ClientNotification`, since we just need these fields\nexport interface NotificationMetadata {\n  // Add an `id` field, since this is now a standalone object\n  id: string\n  read: boolean\n  isNew: boolean\n}\n\nexport const fetchNotifications = createAppAsyncThunk(\n  'notifications/fetchNotifications',\n  async (_unused, thunkApi) => {\n    // Deleted timestamp lookups - we're about to remove this thunk anyway\n    const response = await client.get<ServerNotification[]>(\n      `/fakeApi/notifications`\n    )\n    return response.data\n  }\n)\n\n// Renamed from `notificationsAdapter`, and we don't need sorting\nconst metadataAdapter = createEntityAdapter<NotificationMetadata>()\n\nconst initialState = metadataAdapter.getInitialState()\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    allNotificationsRead(state) {\n      // Rename to `metadata`\n      Object.values(state.entities).forEach(metadata => {\n        metadata.read = true\n      })\n    }\n  },\n  extraReducers(builder) {\n    // Listen for the endpoint `matchFulfilled` action with `addMatcher`\n    builder.addMatcher(\n      apiSliceWithNotifications.endpoints.getNotifications.matchFulfilled,\n      (state, action) => {\n        // Add client-side metadata for tracking new notifications\n        const notificationsMetadata: NotificationMetadata[] =\n          action.payload.map(notification => ({\n            // Give the metadata object the same ID as the notification\n            id: notification.id,\n            read: false,\n            isNew: true\n          }))\n\n        // Rename to `metadata`\n        Object.values(state.entities).forEach(metadata => {\n          // Any notifications we've read are no longer new\n          metadata.isNew = !metadata.read\n        })\n\n        metadataAdapter.upsertMany(state, notificationsMetadata)\n      }\n    )\n  }\n})\n\nexport const { allNotificationsRead } = notificationsSlice.actions\n\nexport default notificationsSlice.reducer\n\n// Rename the selector\nexport const {\n  selectAll: selectAllNotificationsMetadata,\n  selectEntities: selectMetadataEntities\n} = metadataAdapter.getSelectors(\n  (state: RootState) => state.notifications\n)\n\nexport const selectUnreadNotificationsCount = (state: RootState) => {\n  const allMetadata = selectAllNotificationsMetadata(state)\n  const unreadNotifications = allMetadata.filter(metadata => !metadata.read)\n  return unreadNotifications.length\n}\n```\n\n----------------------------------------\n\nTITLE: Normalized State Structure Example\nDESCRIPTION: Demonstrates the structure of normalized state data using a users collection example, showing how data is organized with IDs and entities.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  users: {\n    ids: [\"user1\", \"user2\", \"user3\"],\n    entities: {\n      \"user1\": {id: \"user1\", firstName, lastName},\n      \"user2\": {id: \"user2\", firstName, lastName},\n      \"user3\": {id: \"user3\", firstName, lastName},\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batching Multiple Redux Actions with react-redux\nDESCRIPTION: This snippet demonstrates how to use the batch API from react-redux to combine multiple dispatched actions into a single render update. This helps improve performance by preventing unnecessary React re-renders when dispatching multiple actions consecutively.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/Performance.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { batch } from 'react-redux'\n\nfunction myThunk() {\n  return (dispatch, getState) => {\n    // should only result in one combined re-render, not two\n    batch(() => {\n      dispatch(increment())\n      dispatch(increment())\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Objects in Redux State\nDESCRIPTION: Demonstrates the correct approach for deeply nested state updates by copying each level of nesting while maintaining immutability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ImmutableUpdatePatterns.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateVeryNestedField(state, action) {\n  return {\n    ...state,\n    first: {\n      ...state.first,\n      second: {\n        ...state.first.second,\n        [action.someId]: {\n          ...state.first.second[action.someId],\n          fourth: action.someValue\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Redux State Structure\nDESCRIPTION: Example of a todo app's state structure in Redux, showing how application state is represented as a plain JavaScript object with todos and visibility filter.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/CoreConcepts.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  todos: [{\n    text: 'Eat food',\n    completed: true\n  }, {\n    text: 'Exercise',\n    completed: false\n  }],\n  visibilityFilter: 'SHOW_COMPLETED'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Middleware in JavaScript\nDESCRIPTION: This code snippet demonstrates a custom logger middleware that logs the action being dispatched and the next state after the action has been processed by the reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst loggerMiddleware = storeAPI => next => action => {\n  console.log('dispatching', action)\n  let result = next(action)\n  console.log('next state', storeAPI.getState())\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Monkeypatched Dispatch with Logging\nDESCRIPTION: Direct modification of the store's dispatch method to add logging, demonstrating monkeypatching approach.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst next = store.dispatch\nstore.dispatch = function dispatchAndLog(action) {\n  console.log('dispatching', action)\n  let result = next(action)\n  console.log('next state', store.getState())\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Persist for State Persistence\nDESCRIPTION: Sets up Redux Persist to save and rehydrate the Redux store, with options for serializable checks and ignored actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst persistConfig = { key: 'root', version: 1, storage }\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n      }\n    })\n})\nexport const persistor = persistStore(store)\n```\n\n----------------------------------------\n\nTITLE: Defining Store Type in Redux\nDESCRIPTION: Specifies the type signature for a Store in Redux. A Store holds the application's state tree and provides methods for state management and updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntype Store = {\n  dispatch: Dispatch\n  getState: () => State\n  subscribe: (listener: () => void) => () => void\n  replaceReducer: (reducer: Reducer) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Data Refetching with RTK Query's refetch Function\nDESCRIPTION: Implementation of a PostsList component that uses the refetch function from useGetPostsQuery to manually trigger data refetching. It also visualizes the fetching state by adding a disabled class when data is being fetched.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport classnames from 'classnames'\n\nimport { useGetPostsQuery, Post } from '@/features/api/apiSlice'\n\n// omit other imports and PostExcerpt\n\nexport const PostsList = () => {\n  const {\n    data: posts = [],\n    isLoading,\n    // highlight-next-line\n    isFetching,\n    isSuccess,\n    isError,\n    error,\n    refetch\n  } = useGetPostsQuery()\n\n  const sortedPosts = useMemo(() => {\n    const sortedPosts = posts.slice()\n    sortedPosts.sort((a, b) => b.date.localeCompare(a.date))\n    return sortedPosts\n  }, [posts])\n\n  let content: React.ReactNode\n\n  if (isLoading) {\n    content = <Spinner text=\"Loading...\" />\n  } else if (isSuccess) {\n    // highlight-start\n    const renderedPosts = sortedPosts.map(post => (\n      <PostExcerpt key={post.id} post={post} />\n    ))\n    // highlight-end\n\n    // highlight-start\n    const containerClassname = classnames('posts-container', {\n      disabled: isFetching\n    })\n\n    content = <div className={containerClassname}>{renderedPosts}</div>\n    // highlight-end\n  } else if (isError) {\n    content = <div>{error.toString()}</div>\n  }\n\n  // omit return\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Action Object Structure\nDESCRIPTION: Example of a Redux action object for incrementing the counter by a specific amount, showing the type and payload structure.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: 'counter/incrementByAmount',\n  payload: 3\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing PostsList Component with Normalized State\nDESCRIPTION: Demonstrates how to update a React component to work with normalized state, using selectPostIds for efficient rendering and individual post selection.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  fetchPosts,\n  selectPostById,\n  selectPostIds,\n  selectPostsStatus,\n  selectPostsError\n} from './postsSlice'\n\ninterface PostExcerptProps {\n  postId: string\n}\n\nfunction PostExcerpt({ postId }: PostExcerptProps) {\n  const post = useAppSelector(state => selectPostById(state, postId))\n}\n\nexport const PostsList = () => {\n  const dispatch = useDispatch()\n  const orderedPostIds = useSelector(selectPostIds)\n\n  if (postStatus === 'pending') {\n    content = <Spinner text=\"Loading...\" />\n  } else if (postStatus === 'succeeded') {\n    content = orderedPostIds.map(postId => (\n      <PostExcerpt key={postId} postId={postId} />\n    ))\n  } else if (postStatus === 'rejected') {\n    content = <div>{postsError}</div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Reduce Example for Redux Concepts\nDESCRIPTION: Demonstrates the relationship between Array.reduce() and Redux reducers through a practical example.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-1-overview-concepts.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst numbers = [2, 5, 8]\n\nconst addNumbers = (previousResult, currentItem) => {\n  console.log({ previousResult, currentItem })\n  return previousResult + currentItem\n}\n\nconst initialValue = 0\n\nconst total = numbers.reduce(addNumbers, initialValue)\n// {previousResult: 0, currentItem: 2}\n// {previousResult: 2, currentItem: 5}\n// {previousResult: 7, currentItem: 8}\n\nconsole.log(total)\n// 15\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Thunk Middleware\nDESCRIPTION: NPM command to install redux-thunk middleware for handling asynchronous actions\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install redux-thunk\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router Routes for Posts in App Component\nDESCRIPTION: Sets up the application routing structure using React Router, defining routes for the main posts page and individual post pages with URL parameters for post IDs.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\nimport { Navbar } from './components/Navbar'\n// highlight-start\nimport { PostsMainPage } from './features/posts/PostsMainPage'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\n// highlight-end\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Routes>\n          // highlight-start\n          <Route path=\"/\" element={<PostsMainPage />}></Route>\n          <Route path=\"/posts/:postId\" element={<SinglePostPage />} />\n          // highlight-end\n        </Routes>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Toggle Action in Redux Reducer\nDESCRIPTION: Shows how to handle the todoToggled action by updating a todo item's completed status in the state array while maintaining immutability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function appReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'todos/todoAdded': {\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            id: nextTodoId(state.todos),\n            text: action.payload,\n            completed: false\n          }\n        ]\n      }\n    }\n    case 'todos/todoToggled': {\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.payload) {\n            return todo\n          }\n          return {\n            ...todo,\n            completed: !todo.completed\n          }\n        })\n      }\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Reducers\nDESCRIPTION: Implementation of individual reducers for handling specific parts of the state, including visibility filter and todos management with their respective action handlers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/CoreConcepts.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction visibilityFilter(state = 'SHOW_ALL', action) {\n  if (action.type === 'SET_VISIBILITY_FILTER') {\n    return action.filter\n  } else {\n    return state\n  }\n}\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([{ text: action.text, completed: false }])\n    case 'TOGGLE_TODO':\n      return state.map((todo, index) =>\n        action.index === index\n          ? { text: todo.text, completed: !todo.completed }\n          : todo\n      )\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Context with Dynamic Middleware\nDESCRIPTION: Shows how to use dynamic middleware with custom React context integration\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createContext } from 'react'\nimport { createDynamicMiddleware } from '@reduxjs/toolkit/react'\nimport type { ReactReduxContextValue } from 'react-redux'\n\nconst context = createContext<ReactReduxContextValue | null>(null)\n\nconst dynamicMiddleware = createDynamicMiddleware()\n\nconst createDispatchWithMiddlewareHook =\n  dynamicMiddleware.createDispatchWithMiddlewareHookFactory(context)\n\nconst useListenerDispatch = createDispatchWithMiddlewareHook(\n  listenerMiddleware.middleware\n)\n\nfunction Component() {\n  const dispatch = useListenerDispatch()\n\n  useEffect(() => {\n    const unsubscribe = dispatch(addListener({ actionCreator, effect }))\n    return unsubscribe\n  }, [dispatch])\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Toast Display for RTK Query Mutations\nDESCRIPTION: This code snippet demonstrates how to update a toast listener to work with RTK Query mutations. It uses a matcher function to listen for the completion of the addNewPost mutation and trigger a toast notification.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEntityAdapter, createSelector, createSlice, EntityState, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '@/api/client'\n\nimport type { RootState } from '@/app/store'\nimport { AppStartListening } from '@/app/listenerMiddleware'\nimport { createAppAsyncThunk } from '@/app/withTypes'\n\nimport { apiSlice } from '@/features/api/apiSlice'\nimport { logout } from '@/features/auth/authSlice'\n\n// omit types, posts slice, and selectors\n\nexport const addPostsListeners = (startAppListening: AppStartListening) => {\n  startAppListening({\n    matcher: apiSlice.endpoints.addNewPost.matchFulfilled,\n    effect: async (action, listenerApi) => {\n      // Toast effect implementation\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Slice in Redux\nDESCRIPTION: Sets up basic authentication state management using Redux Toolkit. Includes reducers for login/logout and a selector for current username.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface AuthState {\n  username: string | null\n}\n\nconst initialState: AuthState = {\n  username: null\n}\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    userLoggedIn(state, action: PayloadAction<string>) {\n      state.username = action.payload\n    },\n    userLoggedOut(state) {\n      state.username = null\n    }\n  }\n})\n\nexport const { userLoggedIn, userLoggedOut } = authSlice.actions\n\nexport const selectCurrentUsername = (state: RootState) => state.auth.username\n\nexport default authSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Integrating Toast Container in React App\nDESCRIPTION: Adds the ToastContainer component to the main App component for displaying toast notifications triggered by Redux actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n  Navigate\n} from 'react-router-dom'\nimport { ToastContainer } from 'react-tiny-toast'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Routes>{/* omit routes content */}</Routes>\n        <ToastContainer />\n      </div>\n    </Router>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hand-Written Action Creator in Redux\nDESCRIPTION: Demonstrates how to manually write an action creator function that generates a unique ID and formats the payload object. This shows the pattern that Redux Toolkit's createSlice is automating behind the scenes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// hand-written action creator\nfunction postAdded(title: string, content: string) {\n  const id = nanoid()\n  return {\n    type: 'posts/postAdded',\n    payload: { id, title, content }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Redux Middleware for Delayed Actions and API Fetching\nDESCRIPTION: Examples of Redux middleware implementations that handle delayed actions and API fetching. The code shows how to intercept specific action types and perform async operations.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from '../api/client'\n\nconst delayedActionMiddleware = storeAPI => next => action => {\n  if (action.type === 'todos/todoAdded') {\n    setTimeout(() => {\n      // Delay this action by one second\n      next(action)\n    }, 1000)\n    return\n  }\n\n  return next(action)\n}\n\nconst fetchTodosMiddleware = storeAPI => next => action => {\n  if (action.type === 'todos/fetchTodos') {\n    // Make an API call to fetch todos from the server\n    client.get('todos').then(todos => {\n      // Dispatch an action with the todos we received\n      storeAPI.dispatch({ type: 'todos/todosLoaded', payload: todos })\n    })\n  }\n\n  return next(action)\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying PostAuthor Component to Include Optional Prefix in Redux Application\nDESCRIPTION: Updates the PostAuthor component to accept a showPrefix prop that defaults to true, allowing control over whether to display the 'by' prefix before the author's name.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ninterface PostAuthorProps {\n  userId: string\n  // highlight-next-line\n  showPrefix?: boolean\n}\n\n// highlight-next-line\nexport const PostAuthor = ({ userId, showPrefix = true }: PostAuthorProps) => {\n  const author = useAppSelector(state => selectUserById(state, userId))\n\n  return (\n    <span>\n      // highlight-next-line\n      {showPrefix ? 'by ' : null}\n      {author?.name ?? 'Unknown author'}\n    </span>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todos Actions in Slice Reducer\nDESCRIPTION: Demonstrates handling todo-specific actions in the todos slice reducer with simplified state structure.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'todos/todoAdded': {\n      return [\n        ...state,\n        {\n          id: nextTodoId(state),\n          text: action.payload,\n          completed: false\n        }\n      ]\n    }\n    case 'todos/todoToggled': {\n      return state.map(todo => {\n        if (todo.id !== action.payload) {\n          return todo\n        }\n        return {\n          ...todo,\n          completed: !todo.completed\n        }\n      })\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with a Single Enhancer\nDESCRIPTION: Shows how to configure a Redux store with a single enhancer that adds custom behavior. This example uses the sayHiOnDispatch enhancer to log a message whenever an action is dispatched.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\nimport rootReducer from './reducer'\nimport { sayHiOnDispatch } from './exampleAddons/enhancers'\n\nconst store = createStore(rootReducer, undefined, sayHiOnDispatch)\n\nexport default store\n```\n\n----------------------------------------\n\nTITLE: Comparison of Handwritten Immutable Updates vs Immer\nDESCRIPTION: Demonstrates the difference between writing immutable updates by hand versus using Immer. The handwritten version requires multiple spreads, while the Immer version allows direct \"mutation\" syntax.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handwrittenReducer(state, action) {\n  return {\n    ...state,\n    first: {\n      ...state.first,\n      second: {\n        ...state.first.second,\n        [action.someId]: {\n          ...state.first.second[action.someId],\n          fourth: action.someValue\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Toolkit using Package Managers\nDESCRIPTION: Commands to install Redux Toolkit using NPM or Yarn package managers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/GettingStarted.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install @reduxjs/toolkit\n\n# Yarn\nyarn add @reduxjs/toolkit\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Vanilla Promise Middleware\nDESCRIPTION: A middleware that enables dispatching promises as actions. When resolved, the promise result is dispatched as a regular action.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst vanillaPromise = store => next => action => {\n  if (typeof action.then !== 'function') {\n    return next(action)\n  }\n\n  return Promise.resolve(action).then(store.dispatch)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ReactionButtons Component in React\nDESCRIPTION: Implements a reusable component for displaying and handling post reaction buttons. Maps through available reactions and dispatches Redux actions on click.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppDispatch } from '@/app/hooks'\n\nimport type { Post, ReactionName } from './postsSlice'\nimport { reactionAdded } from './postsSlice'\n\nconst reactionEmoji: Record<ReactionName, string> = {\n  thumbsUp: '👍',\n  tada: '🎉',\n  heart: '❤️',\n  rocket: '🚀',\n  eyes: '👀'\n}\n\ninterface ReactionButtonsProps {\n  post: Post\n}\n\nexport const ReactionButtons = ({ post }: ReactionButtonsProps) => {\n  const dispatch = useAppDispatch()\n\n  const reactionButtons = Object.entries(reactionEmoji).map(\n    ([stringName, emoji]) => {\n      const reaction = stringName as ReactionName\n      return (\n        <button\n          key={reaction}\n          type=\"button\"\n          className=\"muted-button reaction-button\"\n          onClick={() => dispatch(reactionAdded({ postId: post.id, reaction }))}\n        >\n          {emoji} {post.reactions[reaction]}\n        </button>\n      )\n    }\n  )\n\n  return <div>{reactionButtons}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Edit Post Link to Single Post Page in React\nDESCRIPTION: This snippet demonstrates how to add an Edit Post link to the SinglePostPage component. It uses React Router's Link component to create a navigation link to the edit post page for the current post.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, useParams } from 'react-router-dom'\n\nexport const SinglePostPage = () => {\n  // omit other contents\n\n  <p className=\"post-content\">{post.content}</p>\n  <Link to={`/editPost/${post.id}`} className=\"button\">\n    Edit Post\n  </Link>\n```\n\n----------------------------------------\n\nTITLE: Adding Notifications Route to App Component in Redux Application\nDESCRIPTION: Updates the App component to include a route for the NotificationsList component, allowing users to navigate to the notifications page via the /notifications path.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// omit imports\n// highlight-next-line\nimport { NotificationsList } from './features/notifications/NotificationsList'\n\nfunction App() {\n  return (\n    // omit all the outer router setup\n    <Routes>\n      <Route path=\"/posts\" element={<PostsMainPage />} />\n      <Route path=\"/posts/:postId\" element={<SinglePostPage />} />\n      <Route path=\"/editPost/:postId\" element={<EditPostForm />} />\n      <Route path=\"/users\" element={<UsersList />} />\n      <Route path=\"/users/:userId\" element={<UserPage />} />\n      // highlight-start\n      <Route path=\"/notifications\" element={<NotificationsList />} />\n      // highlight-end\n    </Routes>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing combineReducers Logic in JavaScript\nDESCRIPTION: This snippet demonstrates how combineReducers works internally, combining multiple reducers into a single reducer function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/InitializingState.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// const combined = combineReducers({ a, b })\nfunction combined(state = {}, action) {\n  return {\n    a: a(state.a, action),\n    b: b(state.b, action)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root React Component with Redux Provider\nDESCRIPTION: This snippet shows how to wrap the root React component with the Redux Provider component to make the Redux store available to all components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Dispatch Wrapper Function Implementation\nDESCRIPTION: A function that wraps store.dispatch to add logging functionality, showing a more reusable approach to action logging.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction dispatchAndLog(store, action) {\n  console.log('dispatching', action)\n  store.dispatch(action)\n  console.log('next state', store.getState())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Redux Store with Root Reducer\nDESCRIPTION: Demonstrates how to create a basic Redux store using createStore API and a root reducer. This is the fundamental setup required for any Redux application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\nimport rootReducer from './reducer'\n\nconst store = createStore(rootReducer)\n\nexport default store\n```\n\n----------------------------------------\n\nTITLE: Defining Redux State Structure for Todo App\nDESCRIPTION: This example demonstrates how to structure the Redux state for a todo application, including an array of todo items and filter options.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst todoAppState = {\n  todos: [\n    { id: 0, text: 'Learn React', completed: true },\n    { id: 1, text: 'Learn Redux', completed: false, color: 'purple' },\n    { id: 2, text: 'Build something fun!', completed: false, color: 'blue' }\n  ],\n  filters: {\n    status: 'Active',\n    colors: ['red', 'blue']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching for State Changes with redux-watch\nDESCRIPTION: Example of using redux-watch to watch for state changes based on selectors. It demonstrates how to create a watcher and subscribe to changes with callbacks that receive both new and old values.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet w = watch(() => mySelector(store.getState()))\nstore.subscribe(\n  w((newVal, oldVal) => {\n    console.log(newval, oldVal)\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Todo Logic in Reducer (JavaScript)\nDESCRIPTION: Demonstrates how to implement the logic for toggling a todo item's completion status within the reducer, which is the preferred approach in Redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Click handler:\nconst onTodoClicked = (id) => {\n    dispatch({type: \"todos/toggleTodo\", payload: {id}})\n}\n\n// Reducer:\ncase \"todos/toggleTodo\": {\n    return state.map(todo => {\n        if(todo.id !== action.payload.id) return todo;\n\n        return {...todo, completed: !todo.completed };\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Redux Reducers\nDESCRIPTION: Implementation of the root reducer that combines individual reducers to manage the complete application state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/CoreConcepts.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction todoApp(state = {}, action) {\n  return {\n    todos: todos(state.todos, action),\n    visibilityFilter: visibilityFilter(state.visibilityFilter, action)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions with Simplified Arguments in React Component\nDESCRIPTION: Demonstrates how to update a React component to use the customized action creator with separate title and content arguments, rather than building the payload object directly in the component.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleSubmit = (e: React.FormEvent<AddPostFormElements>) => {\n  // Prevent server submission\n  e.preventDefault()\n\n  const { elements } = e.currentTarget\n  const title = elements.postTitle.value\n  const content = elements.postContent.value\n\n  // Now we can pass these in as separate arguments,\n  // and the ID will be generated automatically\n  dispatch(postAdded(title, content))\n\n  e.currentTarget.reset()\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect State Mutation in Redux\nDESCRIPTION: An example demonstrating incorrect usage of Redux by directly mutating the state. This illustrates a common mistake developers should avoid when working with Redux's immutable state pattern.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = store.getState()\n// ❌ Don't do this - it mutates the current state!\nstate.filters.status = 'Active'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store Setup\nDESCRIPTION: Implements a reusable store setup function with TypeScript types for state and dispatch. Creates root reducer and configures store with optional preloaded state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combineReducers, configureStore } from '@reduxjs/toolkit'\n\nimport userReducer from '../features/users/userSlice'\n\nconst rootReducer = combineReducers({\n  user: userReducer\n})\n\nexport const setupStore = (preloadedState?: Partial<RootState>) => {\n  return configureStore({\n    reducer: rootReducer,\n    preloadedState\n  })\n}\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport type AppStore = ReturnType<typeof setupStore>\nexport type AppDispatch = AppStore['dispatch']\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger and CrashReporter Middleware with Arrow Functions in JavaScript\nDESCRIPTION: This snippet shows the final form of Redux middleware using arrow functions. It implements both logger and crashReporter middleware, demonstrating the concise syntax and chaining capabilities.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = store => next => action => {\n  console.log('dispatching', action)\n  let result = next(action)\n  console.log('next state', store.getState())\n  return result\n}\n\nconst crashReporter = store => next => action => {\n  try {\n    return next(action)\n  } catch (err) {\n    console.error('Caught an exception!', err)\n    Raven.captureException(err, {\n      extra: {\n        action,\n        state: store.getState()\n      }\n    })\n    throw err\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Separate Logging and Error Reporting Middleware\nDESCRIPTION: Two separate utility functions for adding logging and crash reporting capabilities to Redux store dispatch.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction patchStoreToAddLogging(store) {\n  const next = store.dispatch\n  store.dispatch = function dispatchAndLog(action) {\n    console.log('dispatching', action)\n    let result = next(action)\n    console.log('next state', store.getState())\n    return result\n  }\n}\n\nfunction patchStoreToAddCrashReporting(store) {\n  const next = store.dispatch\n  store.dispatch = function dispatchAndReportErrors(action) {\n    try {\n      return next(action)\n    } catch (err) {\n      console.error('Caught an exception!', err)\n      Raven.captureException(err, {\n        extra: {\n          action,\n          state: store.getState()\n        }\n      })\n      throw err\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Todos Slice Reducer\nDESCRIPTION: Shows the implementation of a separate todos slice reducer with its initial state and basic structure.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = [\n  { id: 0, text: 'Learn React', completed: true },\n  { id: 1, text: 'Learn Redux', completed: false, color: 'purple' },\n  { id: 2, text: 'Build something fun!', completed: false, color: 'blue' }\n]\n\nfunction nextTodoId(todos) {\n  const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1)\n  return maxId + 1\n}\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Redux Store with Persisted State\nDESCRIPTION: Shows how to create a Redux store with preloaded state from localStorage, demonstrating state persistence and initialization patterns.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\nimport rootReducer from './reducer'\n\nlet preloadedState\nconst persistedTodosString = localStorage.getItem('todos')\n\nif (persistedTodosString) {\n  preloadedState = {\n    todos: JSON.parse(persistedTodosString)\n  }\n}\n\nconst store = createStore(rootReducer, preloadedState)\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Sub-Apps in React\nDESCRIPTION: This snippet demonstrates how to render multiple instances of a sub-app component within a larger React application. It shows the structure of a 'BigApp' component that includes several 'SubApp' components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/IsolatingSubapps.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react'\nimport SubApp from './subapp'\n\nclass BigApp extends Component {\n  render() {\n    return (\n      <div>\n        <SubApp />\n        <SubApp />\n        <SubApp />\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Action Creators with Redux Store\nDESCRIPTION: Shows how to dispatch actions using action creators with the Redux store\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstore.dispatch(todoAdded('Buy milk'))\n\nconsole.log(store.getState().todos)\n// [ {id: 0, text: 'Buy milk', completed: false}]\n```\n\n----------------------------------------\n\nTITLE: Handling Promises with Redux Promise Middleware\nDESCRIPTION: Demonstrates the use of Redux Promise middleware to dispatch promises as action payloads and handle their resolution or rejection.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndispatch({ type: 'FETCH_DATA', payload: myAjaxLib.get('/data') })\n// will dispatch either {type : \"FETCH_DATA\", payload : response} if resolved,\n// or dispatch {type : \"FETCH_DATA\", payload : error, error : true} if rejected\n```\n\n----------------------------------------\n\nTITLE: Using Selectors in EditPostForm Component\nDESCRIPTION: Shows another example of using the selectPostById selector in the EditPostForm component to find a specific post by ID from the Redux state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// omit imports\nimport { postUpdated, selectPostById } from './postsSlice'\n\nexport const EditPostForm = () => {\n  const { postId } = useParams()\n\n  const post = useAppSelector(state => selectPostById(state, postId!))\n  // omit component logic\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Naive applyMiddleware Function in JavaScript\nDESCRIPTION: This snippet demonstrates a naive implementation of the applyMiddleware function. It applies the middleware to the store's dispatch function, but lacks some important features of the actual Redux implementation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction applyMiddleware(store, middlewares) {\n  middlewares = middlewares.slice()\n  middlewares.reverse()\n  let dispatch = store.dispatch\n  middlewares.forEach(middleware => (dispatch = middleware(store)(dispatch)))\n  return Object.assign({}, store, { dispatch })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware for Delayed Actions in Redux\nDESCRIPTION: This example shows how to create a custom Redux middleware that delays the 'todos/todoAdded' action by one second. It demonstrates the structure of a middleware function and how to selectively intercept and modify specific actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/side-effects-approaches.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst delayedActionMiddleware = storeAPI => next => action => {\n  if (action.type === 'todos/todoAdded') {\n    setTimeout(() => {\n      // Delay this action by one second\n      next(action)\n    }, 1000)\n    return\n  }\n\n  return next(action)\n}\n```\n\n----------------------------------------\n\nTITLE: Designing Undo History State Shape in JavaScript\nDESCRIPTION: This snippet shows how to structure state to support undo/redo functionality with past, present, and future states.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  counter: {\n    past: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    present: 10,\n    future: []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Application Helper\nDESCRIPTION: Helper function to apply multiple middleware functions to a Redux store using monkeypatching.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction applyMiddlewareByMonkeypatching(store, middlewares) {\n  middlewares = middlewares.slice()\n  middlewares.reverse()\n\n  // Transform dispatch function with each middleware.\n  middlewares.forEach(middleware => (store.dispatch = middleware(store)))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Status Filter Change Handler to Redux Reducer\nDESCRIPTION: Demonstrates handling the statusFilterChanged action by updating the filters state while maintaining immutability of nested objects.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function appReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'todos/todoAdded': {\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            id: nextTodoId(state.todos),\n            text: action.payload,\n            completed: false\n          }\n        ]\n      }\n    }\n    case 'todos/todoToggled': {\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.payload) {\n            return todo\n          }\n          return {\n            ...todo,\n            completed: !todo.completed\n          }\n        })\n      }\n    }\n    case 'filters/statusFilterChanged': {\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          status: action.payload\n        }\n      }\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Basic Thunk Functions in Redux\nDESCRIPTION: Shows the fundamental pattern of a thunk function and how to dispatch it to the Redux store. The thunk receives dispatch and getState as arguments and can contain arbitrary logic.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst thunkFunction = (dispatch, getState) => {\n  // logic here that can dispatch actions or read state\n}\n\nstore.dispatch(thunkFunction)\n```\n\n----------------------------------------\n\nTITLE: Generating Full HTML Page with Initial State\nDESCRIPTION: Function to create complete HTML document with server-rendered React components and preloaded Redux state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ServerRendering.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderFullPage(html, preloadedState) {\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        <title>Redux Universal Example</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          // WARNING: See the following for security issues around embedding JSON in HTML:\n          // https://redux.js.org/usage/server-rendering#security-considerations\n          window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(\n            /</g,\n            '\\\\u003c'\n          )}\n        </script>\n        <script src=\"/static/bundle.js\"></script>\n      </body>\n    </html>\n    `\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reducer in Legacy Redux (JavaScript)\nDESCRIPTION: This snippet shows a traditional Redux reducer using a switch statement to handle different action types and perform immutable state updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ADD_TODO, TOGGLE_TODO } from '../constants/todos'\n\nconst initialState = []\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO: {\n      return state.concat({\n        id: action.id,\n        text: action.text,\n        completed: false\n      })\n    }\n    case TOGGLE_TODO: {\n      return state.map(todo => {\n        if (todo.id !== action.id) {\n          return todo\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed\n        }\n      })\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UsersList Component with Redux Selectors in TypeScript\nDESCRIPTION: A TypeScript React component that displays a list of users with links to their individual pages. It demonstrates accessing the Redux store with useAppSelector and mapping over user data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Link } from 'react-router-dom'\n\nimport { useAppSelector } from '@/app/hooks'\n\nimport { selectAllUsers } from './usersSlice'\n\nexport const UsersList = () => {\n  const users = useAppSelector(selectAllUsers)\n\n  const renderedUsers = users.map(user => (\n    <li key={user.id}>\n      <Link to={`/users/${user.id}`}>{user.name}</Link>\n    </li>\n  ))\n\n  return (\n    <section>\n      <h2>Users</h2>\n\n      <ul>{renderedUsers}</ul>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Timestamps to Posts Slice\nDESCRIPTION: Updates the posts slice to include timestamp functionality using date-fns for date manipulation and ISO string storage.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, nanoid } from '@reduxjs/toolkit'\nimport { sub } from 'date-fns'\n\nconst initialState: Post[] = [\n  {\n    content: 'Hello!',\n    date: sub(new Date(), { minutes: 10 }).toISOString()\n  },\n  {\n    content: 'More text',\n    date: sub(new Date(), { minutes: 5 }).toISOString()\n  }\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action: PayloadAction<Post>) {\n        state.push(action.payload)\n      },\n      prepare(title: string, content: string, userId: string) {\n        return {\n          payload: {\n            id: nanoid(),\n            date: new Date().toISOString(),\n            title,\n            content,\n            user: userId\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Undo Package via NPM\nDESCRIPTION: Terminal command to install the redux-undo package, which provides undo/redo functionality for Redux applications.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nnpm install redux-undo\n```\n\n----------------------------------------\n\nTITLE: Common Mistake: Shallow Copy\nDESCRIPTION: Illustrates an incorrect implementation where only the top level of the state object is copied, leaving nested objects mutable.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ImmutableUpdatePatterns.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateNestedState(state, action) {\n  // Problem: this only does a shallow copy!\n  let newState = { ...state }\n\n  // ERROR: nestedState is still the same object!\n  newState.nestedState.nestedField = action.data\n\n  return newState\n}\n```\n\n----------------------------------------\n\nTITLE: Action Type Constants Declaration\nDESCRIPTION: Declaration of action type constants using string literals to maintain consistency and prevent typos.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ADD_TODO = 'ADD_TODO'\nconst REMOVE_TODO = 'REMOVE_TODO'\nconst LOAD_ARTICLE = 'LOAD_ARTICLE'\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Middleware with Monkeypatching in JavaScript\nDESCRIPTION: This snippet shows an early implementation of logger middleware using monkeypatching. It overwrites the store.dispatch function to add logging functionality.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logger(store) {\n  // Must point to the function returned by the previous middleware:\n  const next = store.dispatch\n\n  return function dispatchAndLog(action) {\n    console.log('dispatching', action)\n    let result = next(action)\n    console.log('next state', store.getState())\n    return result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Addition Action in Redux Reducer\nDESCRIPTION: Expands the Redux reducer to handle the 'todos/todoAdded' action type. Demonstrates the immutable update pattern by creating a new state object with a modified todos array, following Redux's rules of immutability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction nextTodoId(todos) {\n  const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1)\n  return maxId + 1\n}\n\n// Use the initialState as a default value\nexport default function appReducer(state = initialState, action) {\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    // Do something here based on the different types of actions\n    case 'todos/todoAdded': {\n      // We need to return a new state object\n      return {\n        // that has all the existing state data\n        ...state,\n        // but has a new array for the `todos` field\n        todos: [\n          // with all of the old todos\n          ...state.todos,\n          // and the new todo object\n          {\n            // Use an auto-incrementing numeric ID for this example\n            id: nextTodoId(state.todos),\n            text: action.payload,\n            completed: false\n          }\n        ]\n      }\n    }\n    default:\n      // If this reducer doesn't recognize the action type, or doesn't\n      // care about this specific action, return the existing state unchanged\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions to a Redux Store\nDESCRIPTION: Example showing how to update Redux state by dispatching an action to the store. The store runs the reducer with the dispatched action and current state, then updates its internal state which can be accessed with getState().\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-2-concepts-data-flow.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstore.dispatch({ type: 'counter/incremented' })\n\nconsole.log(store.getState())\n// {value: 1}\n```\n\n----------------------------------------\n\nTITLE: Problematic Redux Selector Implementation\nDESCRIPTION: Example of a problematic selector that always creates new array references, causing unnecessary re-renders in React components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport const selectPostsByUser = (state: RootState, userId: string) => {\n  const allPosts = selectAllPosts(state)\n  // ❌ WRONG - this _always_ creates a new array reference!\n  return allPosts.filter(post => post.user === userId)\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Immutable Update in Redux\nDESCRIPTION: This snippet demonstrates a complex immutable update in Redux, manually creating copies of nested objects to update a deeply nested value. This approach is correct but verbose.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handwrittenReducer(state, action) {\n  return {\n    ...state,\n    first: {\n      ...state.first,\n      second: {\n        ...state.first.second,\n        [action.someId]: {\n          ...state.first.second[action.someId],\n          fourth: action.someValue\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Proper Thunk Action Creator in Redux\nDESCRIPTION: A correct implementation of a thunk action creator that receives parameters from the UI component and returns a thunk function that makes the API call with the provided data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Write a synchronous outer function that receives the `text` parameter:\nexport function saveNewTodo(text) {\n  // And then creates and returns the async thunk function:\n  return async function saveNewTodoThunk(dispatch, getState) {\n    // ✅ Now we can use the text value and send it to the server\n    const initialTodo = { text }\n    const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n    dispatch({ type: 'todos/todoAdded', payload: response.todo })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RTK Query Mutation Hooks in React Component\nDESCRIPTION: A React component that uses the useAddNewPostMutation hook to add new posts. The component gets the current username from state, handles form submission, and uses the mutation hook to save the post data to the server.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\n\nimport { useAppSelector } from '@/app/hooks'\n\n// highlight-next-line\nimport { useAddNewPostMutation } from '@/features/api/apiSlice'\nimport { selectCurrentUsername } from '@/features/auth/authSlice'\n\n// omit field types\n\nexport const AddPostForm = () => {\n  const userId = useAppSelector(selectCurrentUsername)!\n  // highlight-next-line\n  const [addNewPost, { isLoading }] = useAddNewPostMutation()\n\n  const handleSubmit = async (e: React.FormEvent<AddPostFormElements>) => {\n    // Prevent server submission\n    e.preventDefault()\n\n    const { elements } = e.currentTarget\n    const title = elements.postTitle.value\n    const content = elements.postContent.value\n\n    const form = e.currentTarget\n\n    try {\n      // highlight-next-line\n      await addNewPost({ title, content, user: userId }).unwrap()\n\n      form.reset()\n    } catch (err) {\n      console.error('Failed to save the post: ', err)\n    }\n  }\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input type=\"text\" id=\"postTitle\" defaultValue=\"\" required />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          defaultValue=\"\"\n          required\n        />\n        // highlight-next-line\n        <button disabled={isLoading}>Save Post</button>\n      </form>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Action Creator Generator\nDESCRIPTION: Utility function to generate action creators dynamically and reduce boilerplate.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction makeActionCreator(type, ...argNames) {\n  return function (...args) {\n    const action = { type }\n    argNames.forEach((arg, index) => {\n      action[argNames[index]] = args[index]\n    })\n    return action\n  }\n}\n\nconst ADD_TODO = 'ADD_TODO'\nconst EDIT_TODO = 'EDIT_TODO'\nconst REMOVE_TODO = 'REMOVE_TODO'\n\nexport const addTodo = makeActionCreator(ADD_TODO, 'text')\nexport const editTodo = makeActionCreator(EDIT_TODO, 'id', 'text')\nexport const removeTodo = makeActionCreator(REMOVE_TODO, 'id')\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with React-Redux useSelector Hook\nDESCRIPTION: Example of using a selector function with the useSelector hook from React-Redux, demonstrating how anonymous arrow functions can serve as selectors.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TodoList() {\n  // highlight-start\n  // This anonymous arrow function is a selector!\n  const todos = useSelector(state => state.todos)\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Reducer Generation Helper\nDESCRIPTION: A utility function to create reducers from an object mapping of action types to handlers, reducing boilerplate code.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reducer Logic for Special Actions in JavaScript\nDESCRIPTION: This snippet demonstrates a custom reducer function that handles typical actions using combineReducers-like logic, but also manages special cases where data needs to be shared between slice reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/BeyondCombineReducers.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction combinedReducer(state, action) {\n  switch (action.type) {\n    case 'A_TYPICAL_ACTION': {\n      return {\n        a: sliceReducerA(state.a, action),\n        b: sliceReducerB(state.b, action)\n      }\n    }\n    case 'SOME_SPECIAL_ACTION': {\n      return {\n        // specifically pass state.b as an additional argument\n        a: sliceReducerA(state.a, action, state.b),\n        b: sliceReducerB(state.b, action)\n      }\n    }\n    case 'ANOTHER_SPECIAL_ACTION': {\n      return {\n        a: sliceReducerA(state.a, action),\n        // specifically pass the entire state as an additional argument\n        b: sliceReducerB(state.b, action, state)\n      }\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial State in Redux\nDESCRIPTION: Initializes the Redux state for a counter application. The state is structured as a JavaScript object with a single 'value' property set to 0, which will be used to track the counter's current value.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-1-overview.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Define an initial state value for the app\nconst initialState = {\n  value: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Async Action Creators\nDESCRIPTION: Example of action creators for handling async operations with success and failure cases.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport function loadPostsSuccess(userId, response) {\n  return {\n    type: 'LOAD_POSTS_SUCCESS',\n    userId,\n    response\n  }\n}\n\nexport function loadPostsFailure(userId, error) {\n  return {\n    type: 'LOAD_POSTS_FAILURE',\n    userId,\n    error\n  }\n}\n\nexport function loadPostsRequest(userId) {\n  return {\n    type: 'LOAD_POSTS_REQUEST',\n    userId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Separate Case Reducers in createSlice\nDESCRIPTION: Demonstrates how to define case reducers outside of createSlice for better organization and reusability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/UsageWithTypescript.md#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype State = number\nconst increment: CaseReducer<State, PayloadAction<number>> = (state, action) =>\n  state + action.payload\n\ncreateSlice({\n  name: 'test',\n  initialState: 0,\n  reducers: {\n    increment\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Reducer Naming in combineReducers (JavaScript)\nDESCRIPTION: Shows an incorrect way of naming reducers when using combineReducers, which can lead to redundant and confusing state key names.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport usersReducer from 'features/users/usersSlice'\n\nconst rootReducer = combineReducers({\n  usersReducer\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Posts Slice with Loading State in TypeScript\nDESCRIPTION: Updates the posts slice to include the new state structure and modifies existing reducers to work with the updated state shape.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, nanoid } from '@reduxjs/toolkit'\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action: PayloadAction<Post>) {\n        state.posts.push(action.payload)\n      },\n      prepare(title: string, content: string, userId: string) {\n        // omit prepare logic\n      }\n    },\n    postUpdated(state, action: PayloadAction<PostUpdate>) {\n      const { id, title, content } = action.payload\n      const existingPost = state.posts.find(post => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n    reactionAdded(\n      state,\n      action: PayloadAction<{ postId: string; reaction: ReactionName }>\n    ) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.posts.find(post => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(userLoggedOut, state => {\n      return initialState\n    })\n  }\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n\nexport const selectAllPosts = (state: RootState) => state.posts.posts\n\nexport const selectPostById = (state: RootState, postId: string) =>\n  state.posts.posts.find(post => post.id === postId)\n\nexport const selectPostsStatus = (state: RootState) => state.posts.status\nexport const selectPostsError = (state: RootState) => state.posts.error\n```\n\n----------------------------------------\n\nTITLE: Initializing Redux Store with Data in Next.js App Router\nDESCRIPTION: This code shows how to initialize the Redux store with data passed as props to the StoreProvider component. It uses a Redux action to set the initial data in the store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/nextjs.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\nimport { useRef } from 'react'\nimport { Provider } from 'react-redux'\nimport { makeStore, AppStore } from '../lib/store'\nimport { initializeCount } from '../lib/features/counter/counterSlice'\n\nexport default function StoreProvider({\n  count,\n  children\n}: {\n  count: number\n  children: React.ReactNode\n}) {\n  const storeRef = useRef<AppStore | null>(null)\n  if (!storeRef.current) {\n    storeRef.current = makeStore()\n    storeRef.current.dispatch(initializeCount(count))\n  }\n\n  return <Provider store={storeRef.current}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies with npm\nDESCRIPTION: Commands to install Express and React-Redux packages required for server-side rendering implementation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ServerRendering.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install express react-redux\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Async Function Middleware in Redux\nDESCRIPTION: Implementation of a middleware that enables dispatching functions for async operations. This pattern allows for more flexible async logic handling with access to dispatch and getState.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst asyncFunctionMiddleware = storeAPI => next => action => {\n  // If the \"action\" is actually a function instead...\n  if (typeof action === 'function') {\n    // then call the function and pass `dispatch` and `getState` as arguments\n    return action(storeAPI.dispatch, storeAPI.getState)\n  }\n\n  // Otherwise, it's a normal action - send it onwards\n  return next(action)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Reducer with Switch Statement and Default Parameter\nDESCRIPTION: An improved version of the counter reducer that uses a switch statement for better readability and ES6 default parameter syntax for state initialization. This pattern is the typical structure used in Redux reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/BasicReducerStructure.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using reduce-reducers for Simplified Reducer Composition in Redux\nDESCRIPTION: This snippet shows how to use the reduce-reducers utility to simplify the process of combining multiple reducers, including those that handle cross-slice updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/BeyondCombineReducers.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Same as the \"manual\" rootReducer above\nconst rootReducer = reduceReducers(combinedReducers, crossSliceReducer)\n```\n\n----------------------------------------\n\nTITLE: Adding Post Creation Mutation Endpoint\nDESCRIPTION: Extends the API slice with a mutation endpoint for creating new posts. Includes TypeScript types and POST request configuration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Post, NewPost } from '@/features/posts/postsSlice'\nexport type { Post }\n\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  endpoints: builder => ({\n    getPosts: builder.query<Post[], void>({\n      query: () => '/posts'\n    }),\n    getPost: builder.query<Post, string>({\n      query: postId => `/posts/${postId}`\n    }),\n    addNewPost: builder.mutation<Post, NewPost>({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        body: initialPost\n      })\n    })\n  })\n})\n\nexport const {\n  useGetPostsQuery,\n  useGetPostQuery,\n  useAddNewPostMutation\n} = apiSlice\n```\n\n----------------------------------------\n\nTITLE: Creating Filters Slice Reducer\nDESCRIPTION: Shows the implementation of a separate filters slice reducer with its initial state and status filter handling.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-3-state-actions-reducers.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = {\n  status: 'All',\n  colors: []\n}\n\nexport default function filtersReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'filters/statusFilterChanged': {\n      return {\n        ...state,\n        status: action.payload\n      }\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Action Creators Example\nDESCRIPTION: Example of multiple action creators showing potential boilerplate.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport function addTodo(text) {\n  return {\n    type: 'ADD_TODO',\n    text\n  }\n}\n\nexport function editTodo(id, text) {\n  return {\n    type: 'EDIT_TODO',\n    id,\n    text\n  }\n}\n\nexport function removeTodo(id) {\n  return {\n    type: 'REMOVE_TODO',\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Action Creator Usage\nDESCRIPTION: Example of importing and using an action creator in a component.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo } from './actionCreators'\n\n// somewhere in an event handler\ndispatch(addTodo('Use Redux'))\n```\n\n----------------------------------------\n\nTITLE: Dispatching Arrays of Actions with redux-batch\nDESCRIPTION: Example of using redux-batch to enable dispatching arrays of actions. It shows how to configure the store with the batch enhancer and dispatch multiple actions at once.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = configureStore({\n  reducer,\n  enhancers: existingEnhancersArray => [\n    reduxBatch,\n    ...existingEnhancersArray,\n    reduxBatch\n  ]\n})\nstore.dispatch([{ type: 'INCREMENT' }, { type: 'INCREMENT' }])\n```\n\n----------------------------------------\n\nTITLE: Managing Per-Route State with Redux in Next.js App Router\nDESCRIPTION: This example demonstrates how to manage per-route state using Redux in a Next.js App Router setup. It initializes the store with product data on each route change to ensure correct data is displayed.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/nextjs.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\nimport { useRef } from 'react'\nimport { useAppSelector, useAppDispatch, useAppStore } from '../lib/hooks'\nimport {\n  initializeProduct,\n  setProductName,\n  Product\n} from '../lib/features/product/productSlice'\n\nexport default function ProductName({ product }: { product: Product }) {\n  // Initialize the store with the product information\n  const store = useAppStore()\n  const initialized = useRef(false)\n  if (!initialized.current) {\n    store.dispatch(initializeProduct(product))\n    initialized.current = true\n  }\n  const name = useAppSelector(state => state.product.name)\n  const dispatch = useAppDispatch()\n\n  return (\n    <input\n      value={name}\n      onChange={e => dispatch(setProductName(e.target.value))}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Todo App Redux State\nDESCRIPTION: Example of a typical state structure for a Todo application, showing how to organize related data into slices. This demonstrates the state shape with visibilityFilter and todos as top-level slices of state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/BasicReducerStructure.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  visibilityFilter: 'SHOW_ALL',\n  todos: [\n    {\n      text: 'Consider using Redux',\n      completed: true,\n    },\n    {\n      text: 'Keep all state in a single tree',\n      completed: false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Generated Action Creators in JavaScript\nDESCRIPTION: Example showing how createSlice automatically generates action creators that return properly formatted action objects with the correct type string based on slice name and reducer function names.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(counterSlice.actions.increment())\n// {type: \"counter/increment\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Thunk Action Creator for Shared Data in Redux\nDESCRIPTION: This snippet shows how to use a thunk action creator to include additional data in the action, avoiding the need for special handling in the reducer when sharing data between slices.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/BeyondCombineReducers.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction someSpecialActionCreator() {\n  return (dispatch, getState) => {\n    const state = getState()\n    const dataFromB = selectImportantDataFromB(state)\n\n    dispatch({\n      type: 'SOME_SPECIAL_ACTION',\n      payload: {\n        dataFromB\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Advanced Reducer Functionality in Redux\nDESCRIPTION: This example demonstrates how to compose multiple reducer enhancers to create a more complex slice reducer with undo functionality and action filtering.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/BeyondCombineReducers.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst undoableFilteredSliceA = compose(\n  undoReducer,\n  filterReducer('ACTION_1', 'ACTION_2'),\n  sliceReducerA\n)\nconst rootReducer = combineReducers({\n  a: undoableFilteredSliceA,\n  b: normalSliceReducerB\n})\n```\n\n----------------------------------------\n\nTITLE: Non-Memoized Count Selector Example\nDESCRIPTION: Example of a selector that doesn't require memoization since it returns a primitive value (number) instead of a new reference.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport const selectUnreadNotificationsCount = (state: RootState) => {\n  const allNotifications = selectAllNotifications(state)\n  const unreadNotifications = allNotifications.filter(\n    notification => !notification.read\n  )\n  return unreadNotifications.length\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Component with useDispatch Hook\nDESCRIPTION: A React component that uses the useDispatch hook to get access to the Redux store's dispatch function. This component creates a controlled form input that dispatches a 'todos/todoAdded' action when the user presses Enter.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react'\n// highlight-next-line\nimport { useDispatch } from 'react-redux'\n\nconst Header = () => {\n  const [text, setText] = useState('')\n  // highlight-next-line\n  const dispatch = useDispatch()\n\n  const handleChange = e => setText(e.target.value)\n\n  const handleKeyDown = e => {\n    const trimmedText = e.target.value.trim()\n    // If the user pressed the Enter key:\n    if (e.key === 'Enter' && trimmedText) {\n      // highlight-start\n      // Dispatch the \"todo added\" action with this text\n      dispatch({ type: 'todos/todoAdded', payload: trimmedText })\n      // highlight-end\n      // And clear out the text input\n      setText('')\n    }\n  }\n\n  return (\n    <input\n      type=\"text\"\n      placeholder=\"What needs to be done?\"\n      autoFocus={true}\n      value={text}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n    />\n  )\n}\n\nexport default Header\n```\n\n----------------------------------------\n\nTITLE: Using re-reselect with Key Selectors\nDESCRIPTION: Shows how to use re-reselect to create cached selectors with key selectors for improved caching behavior across multiple components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createCachedSelector } from 're-reselect'\n\nconst getUsersByLibrary = createCachedSelector(\n  // inputSelectors\n  getUsers,\n  getLibraryId,\n\n  // resultFunc\n  (users, libraryId) => expensiveComputation(users, libraryId)\n)(\n  // re-reselect keySelector (receives selectors' arguments)\n  // Use \"libraryName\" as cacheKey\n  (_state_, libraryName) => libraryName\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Todo Logic in Action Creator (JavaScript)\nDESCRIPTION: Shows an alternative approach where the logic for toggling a todo item's completion status is implemented in the action creator. This is less preferred in Redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Click handler:\nconst onTodoClicked = id => {\n  const newTodos = todos.map(todo => {\n    if (todo.id !== id) return todo\n\n    return { ...todo, completed: !todo.completed }\n  })\n\n  dispatch({ type: 'todos/toggleTodo', payload: { todos: newTodos } })\n}\n\n// Reducer:\ncase \"todos/toggleTodo\":\n    return action.payload.todos;\n```\n\n----------------------------------------\n\nTITLE: Creating RTK Query API Slice\nDESCRIPTION: Shows how to define an API slice using RTK Query with endpoint definitions and auto-generated hooks for data fetching. Includes configuration for Pokemon API endpoint.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const pokemonApi = createApi({\n  reducerPath: 'pokemonApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),\n  endpoints: builder => ({\n    getPokemonByName: builder.query({\n      query: (name: string) => `pokemon/${name}`\n    })\n  })\n})\n\nexport const { useGetPokemonByNameQuery } = pokemonApi\n```\n\n----------------------------------------\n\nTITLE: Redux Thunk Action Creator Implementation\nDESCRIPTION: Implementation of action creators using redux-thunk middleware to handle asynchronous actions and API calls.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport function loadPosts(userId) {\n  return function (dispatch, getState) {\n    const { posts } = getState()\n    if (posts[userId]) {\n      return\n    }\n\n    dispatch({\n      type: 'LOAD_POSTS_REQUEST',\n      userId\n    })\n\n    fetch(`http://myapi.com/users/${userId}/posts`).then(\n      response =>\n        dispatch({\n          type: 'LOAD_POSTS_SUCCESS',\n          userId,\n          response\n        }),\n      error =>\n        dispatch({\n          type: 'LOAD_POSTS_FAILURE',\n          userId,\n          error\n        })\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Many-to-Many Relationships in Redux with Join Tables\nDESCRIPTION: Example of using a join table approach to model many-to-many relationships between entities in a normalized Redux state, similar to database design patterns.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/NormalizingStateShape.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    entities: {\n        authors : { byId : {}, allIds : [] },\n        books : { byId : {}, allIds : [] },\n        authorBook : {\n            byId : {\n                1 : {\n                    id : 1,\n                    authorId : 5,\n                    bookId : 22\n                },\n                2 : {\n                    id : 2,\n                    authorId : 5,\n                    bookId : 15,\n                },\n                3 : {\n                    id : 3,\n                    authorId : 42,\n                    bookId : 12\n                }\n            },\n            allIds : [1, 2, 3]\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running RTK Codemods for Automatic Migration\nDESCRIPTION: Commands to run Redux Toolkit codemods that automatically transform deprecated object syntax to builder callback syntax. The codemods help simplify the upgrade process for codebases.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx @reduxjs/rtk-codemods createReducerBuilder ./src\n\nnpx @reduxjs/rtk-codemods createSliceBuilder ./packages/my-app/**/*.ts\n```\n\n----------------------------------------\n\nTITLE: Using React.addons.update for Immutable Updates\nDESCRIPTION: Example showing how to use React.addons.update to perform immutable state updates with a more concise syntax.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/Troubleshooting.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn update(state, {\n  [action.index]: {\n    completed: {\n      $set: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Array Items Immutably\nDESCRIPTION: Demonstrates how to update a specific item in an array using map while maintaining immutability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ImmutableUpdatePatterns.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateObjectInArray(array, action) {\n  return array.map((item, index) => {\n    if (index !== action.index) {\n      return item\n    }\n    return {\n      ...item,\n      ...action.item\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Posts Slice with Logout Handler\nDESCRIPTION: Modifies the posts slice to handle logout actions by clearing the posts state when a user logs out.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { client } from '@/api/client'\nimport type { RootState } from '@/app/store'\nimport { logout } from '@/features/auth/authSlice'\n\nconst postsSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    /* omitted */\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(logout.fulfilled, state => {\n        return initialState\n      })\n    // omit other cases\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Providing Redux Store to React Components\nDESCRIPTION: Wraps the React application with a Redux Provider component, making the store available to all components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/quick-start.md#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nconst root = createRoot(document.getElementById('root')!)\n\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Reducer Type in Redux\nDESCRIPTION: Defines the type signature for a Reducer in Redux. A Reducer is a function that takes the current state and an action, and returns a new state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype Reducer<S, A> = (state: S, action: A) => S\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Action Creators\nDESCRIPTION: Shows how to create an action creator function that generates action objects with consistent structure.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-1-overview-concepts.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst addTodo = text => {\n  return {\n    type: 'todos/todoAdded',\n    payload: text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Creator Type in Redux\nDESCRIPTION: Defines the type signature for an Action Creator in Redux. An Action Creator is a function that creates and returns an Action or AsyncAction.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntype ActionCreator<A, P extends any[] = any[]> = (...args: P) => Action | AsyncAction\n```\n\n----------------------------------------\n\nTITLE: Accessing Extra Arguments in Thunk Functions\nDESCRIPTION: This example demonstrates how to access the extra argument passed to the thunk middleware from within a thunk function, allowing for dependency injection of services.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fetchTodoById =\n  todoId => async (dispatch, getState, extraArgument) => {\n    // In this example, the extra arg is an object with an API service inside\n    const { serviceApi } = extraArgument\n    const response = await serviceApi.getTodo(todoId)\n    dispatch(todosLoaded(response.todos))\n  }\n```\n\n----------------------------------------\n\nTITLE: Object Spread Operator for Immutable Updates\nDESCRIPTION: Demonstration of using the object spread operator for more concise immutable state updates in Redux reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/Troubleshooting.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn state.map((todo, index) => {\n  if (index === action.index) {\n    return { ...todo, completed: true }\n  }\n  return todo\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Cache Invalidation with RTK Query Tags\nDESCRIPTION: API slice configuration that uses RTK Query's tags system for automatic cache invalidation. It defines a 'Post' tag type, provides this tag for the getPosts query, and invalidates it when addNewPost mutation runs.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  // highlight-next-line\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    getPosts: builder.query<Post[], void>({\n      query: () => '/posts',\n      // highlight-next-line\n      providesTags: ['Post']\n    }),\n    getPost: builder.query<Post, string>({\n      query: postId => `/posts/${postId}`\n    }),\n    addNewPost: builder.mutation<Post, NewPost>({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        body: initialPost\n      }),\n      // highlight-next-line\n      invalidatesTags: ['Post']\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Thunk Middleware (TypeScript)\nDESCRIPTION: This snippet shows how to create middleware that modifies the input accepted by dispatch, allowing it to handle function actions. It demonstrates the pattern used by Redux Thunk to enable asynchronous action creators.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingCustomMiddleware.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst middleware: ThunkMiddleware<State, BasicAction, ExtraThunkArg> =\n  ({ dispatch, getState }) =>\n  next =>\n  action => {\n    // The thunk middleware looks for any functions that were passed to `store.dispatch`.\n    // If this \"action\" is really a function, call it and return the result.\n    if (typeof action === 'function') {\n      // Inject the store's `dispatch` and `getState` methods, as well as any \"extra arg\"\n      return action(dispatch, getState, extraArgument)\n    }\n\n    // Otherwise, pass the action down the middleware chain as usual\n    return next(action)\n  }\n```\n\n----------------------------------------\n\nTITLE: Redux Toolkit CreateReducer Example\nDESCRIPTION: Demonstrates using Redux Toolkit's createReducer with Immer for simplified immutable updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ImmutableUpdatePatterns.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createReducer } from '@reduxjs/toolkit'\n\nconst initialState = {\n  first: {\n    second: {\n      id1: { fourth: 'a' },\n      id2: { fourth: 'b' }\n    }\n  }\n}\n\nconst reducer = createReducer(initialState, {\n  UPDATE_ITEM: (state, action) => {\n    state.first.second[action.someId].fourth = action.someValue\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading States in PostsList Component (TypeScript/React)\nDESCRIPTION: Enhances the PostsList component to handle different loading states. It renders a spinner during loading, displays an error message if the fetch fails, and shows the posts list when data is available.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { useAppSelector, useAppDispatch } from '@/app/hooks'\n\nimport { Spinner } from '@/components/Spinner'\nimport { TimeAgo } from '@/components/TimeAgo'\n\nimport { PostAuthor } from './PostAuthor'\nimport { ReactionButtons } from './ReactionButtons'\nimport {\n  Post,\n  selectAllPosts,\n  selectPostsError,\n  fetchPosts\n} from './postsSlice'\n\ninterface PostExcerptProps {\n  post: Post\n}\n\nfunction PostExcerpt({ post }: PostExcerptProps) {\n  return (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>\n        <Link to={`/posts/${post.id}`}>{post.title}</Link>\n      </h3>\n      <div>\n        <PostAuthor userId={post.user} />\n        <TimeAgo timestamp={post.date} />\n      </div>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n      <ReactionButtons post={post} />\n    </article>\n  )\n}\n\nexport const PostsList = () => {\n  const dispatch = useAppDispatch()\n  const posts = useAppSelector(selectAllPosts)\n  const postStatus = useAppSelector(selectPostsStatus)\n  const postsError = useAppSelector(selectPostsError)\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts())\n    }\n  }, [postStatus, dispatch])\n\n  let content: React.ReactNode\n\n  if (postStatus === 'pending') {\n    content = <Spinner text=\"Loading...\" />\n  } else if (postStatus === 'succeeded') {\n    // Sort posts in reverse chronological order by datetime string\n    const orderedPosts = posts\n      .slice()\n      .sort((a, b) => b.date.localeCompare(a.date))\n\n    content = orderedPosts.map(post => (\n      <PostExcerpt key={post.id} post={post} />\n    ))\n  } else if (postStatus === 'rejected') {\n    content = <div>{postsError}</div>\n  }\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {content}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Redux Store to UI\nDESCRIPTION: Sets up the UI to display and react to Redux state changes. This code creates a render function that reads the current state from the store and updates the UI accordingly, then subscribes to the store to re-render whenever the state changes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-1-overview.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Our \"user interface\" is some text in a single HTML element\nconst valueEl = document.getElementById('value')\n\n// Whenever the store state changes, update the UI by\n// reading the latest store state and showing new data\nfunction render() {\n  const state = store.getState()\n  valueEl.innerHTML = state.value.toString()\n}\n\n// Update the UI with the initial data\nrender()\n// And subscribe to redraw whenever the data changes in the future\nstore.subscribe(render)\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Thunk Middleware\nDESCRIPTION: A middleware that allows dispatching functions as actions. The function receives dispatch and getState as arguments for complex async flows.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst thunk = store => next => action =>\n  typeof action === 'function'\n    ? action(store.dispatch, store.getState)\n    : next(action)\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Syntax for Action Creators\nDESCRIPTION: Demonstrates concise arrow function syntax for writing action creators\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const todoAdded = todo => ({ type: 'todos/todoAdded', payload: todo })\n```\n\n----------------------------------------\n\nTITLE: Installing Reselect Library via npm\nDESCRIPTION: Command to install the Reselect library, which is used for creating memoized selectors in Redux applications.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reselect\n```\n\n----------------------------------------\n\nTITLE: Using a Thunk Action Creator in a React Component with Temporary Variable\nDESCRIPTION: Code showing how to use a thunk action creator in a React component by first creating a thunk function with the required parameters and then dispatching it.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\n// highlight-next-line\nimport { saveNewTodo } from '../todos/todosSlice'\n\nconst Header = () => {\n  const [text, setText] = useState('')\n  const dispatch = useDispatch()\n\n  const handleChange = e => setText(e.target.value)\n\n  const handleKeyDown = e => {\n    // If the user pressed the Enter key:\n    const trimmedText = text.trim()\n    if (e.which === 13 && trimmedText) {\n      // highlight-start\n      // Create the thunk function with the text the user wrote\n      const saveNewTodoThunk = saveNewTodo(trimmedText)\n      // Then dispatch the thunk function itself\n      dispatch(saveNewTodoThunk)\n      // highlight-end\n      setText('')\n    }\n  }\n\n  // omit rendering output\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Toolkit and React-Redux\nDESCRIPTION: Command to install Redux Toolkit and React-Redux packages using npm.\nSOURCE: https://github.com/reduxjs/redux/blob/master/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reduxjs/toolkit react-redux\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Counters with lean-redux\nDESCRIPTION: This code snippet shows how to use the lean-redux library to manage component state in Redux. It creates a dynamic counter component with initial state and actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst DynamicCounters = connectLean(\n    scope: \"dynamicCounters\",\n    getInitialState() => ({counterCount : 1}),\n    addCounter, removeCounter\n)(CounterList);\n```\n\n----------------------------------------\n\nTITLE: Building Redux artifacts\nDESCRIPTION: Command to run the build process which compiles Redux source code and generates distribution files in the ./dist folder. Uses Yarn as the package manager.\nSOURCE: https://github.com/reduxjs/redux/blob/master/CONTRIBUTING.md#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Simple Merging with Lodash for Normalized Data in Redux\nDESCRIPTION: A simple approach using Lodash's merge function to combine existing state with incoming normalized entities. This method requires minimal reducer code but needs action creators to properly structure the data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/UpdatingNormalizedData.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport merge from 'lodash/merge'\n\nfunction commentsById(state = {}, action) {\n  switch (action.type) {\n    default: {\n      if (action.entities && action.entities.comments) {\n        return merge({}, state, action.entities.comments.byId)\n      }\n      return state\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized Thunk Action Creator in Redux\nDESCRIPTION: Example of a thunk action creator that accepts a parameter and returns a thunk function. This pattern allows for reusable async logic that can be customized with arguments when dispatched.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-5-async-logic.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst logAndAdd = (amount: number) => {\n  return (dispatch: AppDispatch, getState: () => RootState) => {\n    const stateBefore = getState()\n    console.log(`Counter before: ${stateBefore.counter}`)\n    dispatch(incrementByAmount(amount))\n    const stateAfter = getState()\n    console.log(`Counter after: ${stateAfter.counter}`)\n  }\n}\n\nstore.dispatch(logAndAdd(5))\n```\n\n----------------------------------------\n\nTITLE: Legacy Redux Implementation\nDESCRIPTION: Example showing how to implement a counter using traditional Redux syntax without abstractions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/GettingStarted.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\n\n/**\n * This is a reducer - a function that takes a current state value and an\n * action object describing \"what happened\", and returns a new state value.\n * A reducer's function signature is: (state, action) => newState\n *\n * The Redux state should contain only plain JS objects, arrays, and primitives.\n * The root state value is usually an object. It's important that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * You can use any conditional logic you want in a reducer. In this example,\n * we use a switch statement, but it's not required.\n */\nfunction counterReducer(state = { value: 0 }, action) {\n  switch (action.type) {\n    case 'counter/incremented':\n      return { value: state.value + 1 }\n    case 'counter/decremented':\n      return { value: state.value - 1 }\n    default:\n      return state\n  }\n}\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nlet store = createStore(counterReducer)\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n\nstore.subscribe(() => console.log(store.getState()))\n\n// The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\nstore.dispatch({ type: 'counter/incremented' })\n// {value: 1}\nstore.dispatch({ type: 'counter/incremented' })\n// {value: 2}\nstore.dispatch({ type: 'counter/decremented' })\n// {value: 1}\n```\n\n----------------------------------------\n\nTITLE: Creating an addReaction Mutation Endpoint with RTK Query\nDESCRIPTION: This snippet defines an API slice with an addReaction mutation endpoint to persist reaction data to the server. It includes query configuration, invalidation tags, and exports the generated hook.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    // omit other endpoints\n    // highlight-start\n    addReaction: builder.mutation<\n      Post,\n      { postId: string; reaction: ReactionName }\n    >({\n      query: ({ postId, reaction }) => ({\n        url: `posts/${postId}/reactions`,\n        method: 'POST',\n        // In a real app, we'd probably need to base this on user ID somehow\n        // so that a user can't do the same reaction more than once\n        body: { reaction }\n      }),\n      invalidatesTags: (result, error, arg) => [\n        { type: 'Post', id: arg.postId }\n      ]\n    })\n    // highlight-end\n  })\n})\n\nexport const {\n  useGetPostsQuery,\n  useGetPostQuery,\n  useAddNewPostMutation,\n  useEditPostMutation,\n  // highlight-next-line\n  useAddReactionMutation\n} = apiSlice\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with React useState Hook\nDESCRIPTION: This snippet demonstrates a basic React counter component using the useState hook for local state management. It shows the core concepts of state, actions, and view in a React component.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-1-overview-concepts.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n  // State: a counter value\n  const [counter, setCounter] = useState(0)\n\n  // Action: code that causes an update to the state when something happens\n  const increment = () => {\n    setCounter(prevCounter => prevCounter + 1)\n  }\n\n  // View: the UI definition\n  return (\n    <div>\n      Value: {counter} <button onClick={increment}>Increment</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selector Functions in Redux\nDESCRIPTION: This snippet shows how to define selector functions in Redux. Selectors are used to extract specific pieces of state from the Redux store, allowing for efficient data access and derived calculations.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Selector functions allows us to select a value from the Redux root state.\n// Selectors can also be defined inline in the `useSelector` call\n// in a component, or inside the `createSlice.selectors` field.\nexport const selectCount = (state: RootState) => state.counter.value\nexport const selectStatus = (state: RootState) => state.counter.status\n```\n\n----------------------------------------\n\nTITLE: Implementing ID-based Todo Item Selection in TodoListItem Component\nDESCRIPTION: This code shows how a TodoListItem component can select its own data from the Redux store using an ID prop. It implements a selectTodoById selector and uses useDispatch to handle toggling the todo's completed status.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\n// highlight-next-line\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { availableColors, capitalize } from '../filters/colors'\n\n// highlight-start\nconst selectTodoById = (state, todoId) => {\n  return state.todos.find(todo => todo.id === todoId)\n}\n// highlight-end\n\n// Destructure `props.id`, since we only need the ID value\nconst TodoListItem = ({ id }) => {\n  // Call our `selectTodoById` with the state _and_ the ID value\n  // highlight-next-line\n  const todo = useSelector(state => selectTodoById(state, id))\n  const { text, completed, color } = todo\n\n  // highlight-next-line\n  const dispatch = useDispatch()\n\n  // highlight-start\n  const handleCompletedChanged = () => {\n    dispatch({ type: 'todos/todoToggled', payload: todo.id })\n  }\n  // highlight-end\n\n  // omit other change handlers\n  // omit other list item rendering logic and contents\n\n  return (\n    <li>\n      <div className=\"view\">{/* omit other rendering output */}</div>\n    </li>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Redux tests in watch mode\nDESCRIPTION: Command to continuously watch for file changes and automatically run tests. This is useful during active development to get immediate feedback.\nSOURCE: https://github.com/reduxjs/redux/blob/master/CONTRIBUTING.md#2025-04-07_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:watch\n```\n\n----------------------------------------\n\nTITLE: Incorrect Redux Reducer Implementation with State Mutation\nDESCRIPTION: Example of an incorrect reducer implementation that mutates state directly, which violates Redux's principles of immutability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/Troubleshooting.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      // Wrong! This mutates state\n      state.push({\n        text: action.text,\n        completed: false\n      })\n      return state\n    case 'COMPLETE_TODO':\n      // Wrong! This mutates state[action.index].\n      state[action.index].completed = true\n      return state\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Redux examples\nDESCRIPTION: Command to run tests for the official Redux examples. This ensures that the example projects work correctly and demonstrate the intended concepts.\nSOURCE: https://github.com/reduxjs/redux/blob/master/CONTRIBUTING.md#2025-04-07_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn examples:test\n```\n\n----------------------------------------\n\nTITLE: Setting up Redux Store with Redux-ORM in JavaScript\nDESCRIPTION: This snippet shows how to set up a Redux store using the auto-generated Redux-ORM reducer. It also includes examples of dispatching actions to create Post and Comment instances.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/UpdatingNormalizedData.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nimport { createStore, combineReducers } from 'redux'\nimport { createReducer } from 'redux-orm'\nimport { orm } from './models'\n\nconst rootReducer = combineReducers({\n  // Insert the auto-generated Redux-ORM reducer.  This will\n  // initialize our model \"tables\", and hook up the reducer\n  // logic we defined on each Model subclass\n  entities: createReducer(orm)\n})\n\n// Dispatch an action to create a Post instance\nstore.dispatch({\n  type: 'CREATE_POST',\n  payload: {\n    id: 1,\n    name: 'Test Post Please Ignore'\n  }\n})\n\n// Dispatch an action to create a Comment instance as a child of that Post\nstore.dispatch({\n  type: 'ADD_COMMENT',\n  payload: {\n    id: 123,\n    text: 'This is a comment',\n    postId: 1\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing a Slice Reducer with Generated Actions in JavaScript\nDESCRIPTION: Example showing how to manually test a slice reducer by calling it with an initial state and a dispatched action, demonstrating how the reducer correctly updates state in response to actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst newState = counterSlice.reducer(\n  { value: 10 },\n  counterSlice.actions.increment()\n)\nconsole.log(newState)\n// {value: 11}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Reducer Function\nDESCRIPTION: Implements a reducer function that handles state updates based on dispatched actions. The reducer responds to 'counter/incremented' and 'counter/decremented' action types by returning new state objects with updated counter values while preserving immutability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-1-overview.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a \"reducer\" function that determines what the new state\n// should be when something happens in the app\nfunction counterReducer(state = initialState, action) {\n  // Reducers usually look at the type of action that happened\n  // to decide how to update the state\n  switch (action.type) {\n    case 'counter/incremented':\n      return { ...state, value: state.value + 1 }\n    case 'counter/decremented':\n      return { ...state, value: state.value - 1 }\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Slice with createSlice in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the createSlice API from Redux Toolkit to define a todos reducer with automatic action creators and simplified state updates using Immer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/why-rtk-is-redux-today.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState: [],\n  reducers: {\n    todoAdded(state, action) {\n      state.push({\n        id: action.payload.id,\n        text: action.payload.text,\n        completed: false\n      })\n    },\n    todoToggled(state, action) {\n      const todo = state.find(todo => todo.id === action.payload)\n      todo.completed = !todo.completed\n    }\n  }\n})\n\nexport const { todoAdded, todoToggled } = todosSlice.actions\nexport default todosSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Overriding Redux Dependencies with Yarn for All Packages\nDESCRIPTION: JSON configuration for applying a blanket override of Redux version for all dependent packages in Yarn using the resolutions field in package.json.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"redux\": \"^5.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Selector Function in JavaScript\nDESCRIPTION: A simple selector function that takes the Redux state as an argument and returns the todos array from that state. This pattern is used with the useSelector hook to access store data in components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst selectTodos = state => state.todos\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Creators in Todo Slice\nDESCRIPTION: Shows implementation of action creators in a Redux todos slice file with async thunk integration\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const todosLoaded = todos => {\n  return {\n    type: 'todos/todosLoaded',\n    payload: todos\n  }\n}\n\nexport async function fetchTodos(dispatch, getState) {\n  const response = await client.get('/fakeApi/todos')\n  dispatch(todosLoaded(response.todos))\n}\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: This command builds the app for production, creating an optimized bundle in the 'build' folder that is ready for deployment.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter/README.md#2025-04-07_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Logic with Redux-Saga in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a saga that listens for a 'PING' action, waits for one second, and then dispatches a 'PONG' action using redux-saga.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { delay, put, takeEvery } from 'redux-saga/effects'\n\nexport function* ping() {\n  yield delay(1000)\n  yield put({ type: 'PONG' })\n}\n\n// \"Watcher\" saga that waits for a \"signal\" action, which is\n// dispatched only to kick off logic, not to update state\nexport function* pingSaga() {\n  yield takeEvery('PING', ping)\n}\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Command to build the app for production deployment. Creates an optimized bundle in the 'build' folder with minified files and content hashes for cache busting.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter-ts/README.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter State Shape with Undo History in JavaScript\nDESCRIPTION: This code shows the state structure for a counter app with undo history capability. It demonstrates how to structure state with past, present, and future values.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  counter: 10\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Reducer Manually in JavaScript\nDESCRIPTION: Example of manually creating a root reducer function that combines multiple slice reducers by calling each one with its corresponding state slice and combining the results into a single state object.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction rootReducer(state = {}, action) {\n  return {\n    users: usersReducer(state.users, action),\n    posts: postsReducer(state.posts, action),\n    comments: commentsReducer(state.comments, action)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redux connect() Function Pattern\nDESCRIPTION: Example showing how mapStateToProps and mapDispatchToProps parameters work with Redux connect() function to control component access to store data and dispatch capability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/ReactRedux.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(mapStateToProps, mapDispatchToProps)\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: Command to start the application in development mode. This launches a local development server and opens the app at http://localhost:3000 in the browser with hot reloading enabled.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter-ts/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store - TypeScript\nDESCRIPTION: Shows how to configure the Redux store by combining multiple reducers including the new users reducer. Sets up the root reducer structure.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nimport postsReducer from '@/features/posts/postsSlice'\nimport usersReducer from '@/features/users/usersSlice'\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Todo Addition Action Creator Implementation\nDESCRIPTION: Implements action creator for adding todos with async thunk functionality\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const todoAdded = todo => {\n  return {\n    type: 'todos/todoAdded',\n    payload: todo\n  }\n}\n\nexport function saveNewTodo(text) {\n  return async function saveNewTodoThunk(dispatch, getState) {\n    const initialTodo = { text }\n    const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n    dispatch(todoAdded(response.todo))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Documentation\nDESCRIPTION: Command to generate static website content in the build directory for production deployment.\nSOURCE: https://github.com/reduxjs/redux/blob/master/website/README.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed Component Implementation\nDESCRIPTION: React component implementation for embedding a YouTube video about modern Redux using the LiteYouTubeEmbed component.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/videos.md#2025-04-07_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LiteYouTubeEmbed\n    id=\"9zySeP5vH9c\"\n    title=\"Learn Modern Redux - Redux Toolkit, React-Redux Hooks, and RTK Query\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Generic Type Definition for Undo History in JavaScript\nDESCRIPTION: This code provides a generic type definition for the undo history state structure, showing the consistent pattern regardless of the data type being stored.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  past: Array<T>,\n  present: T,\n  future: Array<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Store Initial State Structure\nDESCRIPTION: Shows the initial state structure of the Redux store for the counter application with a counter object containing value and status fields.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  counter: {\n    value: 0\n    status: 'idle'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Undoable Reducer Implementation in Redux\nDESCRIPTION: This code shows a first attempt at implementing an undoable reducer that handles UNDO and REDO actions. It demonstrates the core algorithm but has some limitations to be addressed.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = {\n  past: [],\n  present: null, // (?) How do we initialize the present?\n  future: []\n}\n\nfunction undoable(state = initialState, action) {\n  const { past, present, future } = state\n\n  switch (action.type) {\n    case 'UNDO':\n      const previous = past[past.length - 1]\n      const newPast = past.slice(0, past.length - 1)\n      return {\n        past: newPast,\n        present: previous,\n        future: [present, ...future]\n      }\n    case 'REDO':\n      const next = future[0]\n      const newFuture = future.slice(1)\n      return {\n        past: [...past, present],\n        present: next,\n        future: newFuture\n      }\n    default:\n      // (?) How do we handle other actions?\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new React Redux app with Next.js template\nDESCRIPTION: Command to create a new Next.js project using the 'with-redux' template, which includes Redux Toolkit and React-Redux pre-configured.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Installation.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Next.js using the `with-redux` template\nnpx create-next-app --example with-redux my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Posts Reducer\nDESCRIPTION: This snippet updates the Redux store configuration to include the new posts reducer, replacing the previous counter reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\n// Removed the `counterReducer` function, `CounterState` type, and `Action` import\n\nimport postsReducer from '@/features/posts/postsSlice'\n\nexport const store = configureStore({\n  reducer: {\n    posts: postsReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Redux Selector in JavaScript\nDESCRIPTION: Demonstrates how to create a simple selector function that accepts the Redux state and returns a value.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectTodos = state => state.todos\n```\n\n----------------------------------------\n\nTITLE: Do-Nothing Reducer Enhancer in Redux\nDESCRIPTION: This snippet demonstrates the concept of a reducer enhancer by showing a simple example that doesn't modify behavior but establishes the pattern of taking a reducer and returning an enhanced reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doNothingWith(reducer) {\n  return function (state, action) {\n    // Just call the passed reducer\n    return reducer(state, action)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Store Configuration and State Access\nDESCRIPTION: Shows how to create a Redux store and access its state using getState()\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-1-overview-concepts.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nconst store = configureStore({ reducer: counterReducer })\n\nconsole.log(store.getState())\n// {value: 0}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple React Counter Component\nDESCRIPTION: A basic React counter component that demonstrates one-way data flow. It uses useState to manage the counter state and includes a button to increment the counter value.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-2-concepts-data-flow.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n  // State: a counter value\n  const [counter, setCounter] = useState(0)\n\n  // Action: code that causes an update to the state when something happens\n  const increment = () => {\n    setCounter(prevCounter => prevCounter + 1)\n  }\n\n  // View: the UI definition\n  return (\n    <div>\n      Value: {counter} <button onClick={increment}>Increment</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new React Redux app with Vite template\nDESCRIPTION: Command to create a new React Redux application using the official Redux+TS template for Vite, which includes Redux Toolkit and React-Redux pre-configured.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Installation.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Vite with our Redux+TS template\n# (using the `degit` tool to clone and extract the template)\nnpx degit reduxjs/redux-templates/packages/vite-template-redux my-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Reducers\nDESCRIPTION: Demonstrates how to create pure reducer functions that transform state in response to actions. The example includes reducers for visibility filters and todos, showing how to combine them into a single store using Redux's combineReducers and createStore functions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/ThreePrinciples.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction visibilityFilter(state = 'SHOW_ALL', action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'COMPLETE_TODO':\n      return state.map((todo, index) => {\n        if (index === action.index) {\n          return Object.assign({}, todo, {\n            completed: true\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}\n\nimport { combineReducers, createStore } from 'redux'\nconst reducer = combineReducers({ visibilityFilter, todos })\nconst store = createStore(reducer)\n```\n\n----------------------------------------\n\nTITLE: Fake API Server Timing Configuration\nDESCRIPTION: Configuration for adding artificial delay to API calls in the fake server implementation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    // this.timing = 2000\n\n    // omit other code\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting UndoRedo Component to Redux Store\nDESCRIPTION: Uses connect from React Redux to map state and dispatch to the UndoRedo component props, checking the past and future arrays to enable/disable buttons.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/* ... */\n\nimport { ActionCreators as UndoActionCreators } from 'redux-undo'\nimport { connect } from 'react-redux'\n\n/* ... */\n\nconst mapStateToProps = state => {\n  return {\n    canUndo: state.todos.past.length > 0,\n    canRedo: state.todos.future.length > 0\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUndo: () => dispatch(UndoActionCreators.undo()),\n    onRedo: () => dispatch(UndoActionCreators.redo())\n  }\n}\n\nUndoRedo = connect(mapStateToProps, mapDispatchToProps)(UndoRedo)\n\nexport default UndoRedo\n```\n\n----------------------------------------\n\nTITLE: Correct Reducer Naming in combineReducers (JavaScript)\nDESCRIPTION: Demonstrates the correct way to name and combine reducers using combineReducers, resulting in clear and meaningful state key names.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport usersReducer from 'features/users/usersSlice'\nimport postsReducer from 'features/posts/postsSlice'\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n  posts: postsReducer\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Redux Reducer Implementation with Immutable Updates\nDESCRIPTION: Proper implementation of a Redux reducer that maintains immutability by creating new state objects instead of mutating existing ones.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/Troubleshooting.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      // Return a new array\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'COMPLETE_TODO':\n      // Return a new array\n      return state.map((todo, index) => {\n        if (index === action.index) {\n          // Copy the object before mutating\n          return Object.assign({}, todo, {\n            completed: true\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Warning Message in Markdown\nDESCRIPTION: A markdown warning block notifying users that the example is outdated and directing them to current Redux documentation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/real-world/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> **Warning**: This example is outdated, and shows legacy patterns that we no longer teach or recommend.\\n> Please see the Redux docs tutorials for our recommended usage patterns, and specifically the \"Essentials\" tutorial:\\n> **https://redux.js.org/tutorials/index**\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Slice with Read/Unread Tracking in Redux Toolkit\nDESCRIPTION: This snippet defines a Redux slice for notification management. It includes interfaces for server and client notifications, reducers for marking notifications as read, and selectors for counting unread notifications. It handles notification state management with client-side metadata for tracking read status.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// omit imports\n\nexport interface ServerNotification {\n  id: string\n  date: string\n  message: string\n  user: string\n}\n\nexport interface ClientNotification extends ServerNotification {\n  read: boolean\n  isNew: boolean\n}\n\n// omit thunk\n\nconst initialState: ClientNotification[] = []\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    allNotificationsRead(state) {\n      state.forEach(notification => {\n        notification.read = true\n      })\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      // Add client-side metadata for tracking new notifications\n      const notificationsWithMetadata: ClientNotification[] =\n        action.payload.map(notification => ({\n          ...notification,\n          read: false,\n          isNew: true\n        }))\n\n      state.forEach(notification => {\n        // Any notifications we've read are no longer new\n        notification.isNew = !notification.read\n      })\n\n      state.push(...notificationsWithMetadata)\n      // Sort with newest first\n      state.sort((a, b) => b.date.localeCompare(a.date))\n    })\n  }\n})\n\nexport const { allNotificationsRead } = notificationsSlice.actions\n\nexport default notificationsSlice.reducer\n\nexport const selectUnreadNotificationsCount = (state: RootState) => {\n  const allNotifications = selectAllNotifications(state)\n  const unreadNotifications = allNotifications.filter(\n    notification => !notification.read\n  )\n  return unreadNotifications.length\n}\n```\n\n----------------------------------------\n\nTITLE: TodoList Component with Loading State\nDESCRIPTION: React component implementation showing loading spinner based on Redux loading state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst TodoList = () => {\n  const todoIds = useSelector(selectFilteredTodoIds)\n  const loadingStatus = useSelector(state => state.todos.status)\n\n  if (loadingStatus === 'loading') {\n    return (\n      <div className=\"todo-list\">\n        <div className=\"loader\" />\n      </div>\n    )\n  }\n\n  const renderedListItems = todoIds.map(todoId => {\n    return <TodoListItem key={todoId} id={todoId} />\n  })\n\n  return <ul className=\"todo-list\">{renderedListItems}</ul>\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Selectors with createSelector in JavaScript\nDESCRIPTION: This snippet demonstrates how to nest selectors created with createSelector, using one selector as an input for another.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectTodos = state => state.todos\n\nconst selectCompletedTodos = createSelector([selectTodos], todos =>\n  todos.filter(todo => todo.completed)\n)\n\nconst selectCompletedTodoDescriptions = createSelector(\n  [selectCompletedTodos],\n  completedTodos => completedTodos.map(todo => todo.text)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with configureStore in JavaScript\nDESCRIPTION: This snippet shows how to use the configureStore API from Redux Toolkit to set up a Redux store with combined reducers, middleware, and DevTools integration in a simplified manner.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/why-rtk-is-redux-today.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport todosReducer from '../features/todos/todosSlice'\nimport filtersReducer from '../features/filters/filtersSlice'\n\nexport const store = configureStore({\n  reducer: {\n    todos: todosReducer,\n    filters: filtersReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Navbar Component with Users Link in React\nDESCRIPTION: Update to the Navbar component that adds a link to the users page, allowing navigation to the UsersList component via the application's navigation bar.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nexport const Navbar = () => {\n  // omit other logic\n\n  navContent = (\n    <div className=\"navContent\">\n      <div className=\"navLinks\">\n        <Link to=\"/posts\">Posts</Link>\n        // highlight-next-line\n        <Link to=\"/users\">Users</Link>\n      </div>\n      <div className=\"userDetails\">\n        <UserIcon size={32} />\n        {user.name}\n        <button className=\"button small\" onClick={onLogoutClicked}>\n          Log Out\n        </button>\n      </div>\n    </div>\n  )\n\n  // omit other rendering\n}\n```\n\n----------------------------------------\n\nTITLE: Using shallowEqual for Optimized List Rendering in React-Redux\nDESCRIPTION: This code demonstrates how to use the shallowEqual comparison function with useSelector to prevent unnecessary re-renders when the array reference changes but the array contents remain the same.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\n// highlight-next-line\nimport { useSelector, shallowEqual } from 'react-redux'\nimport TodoListItem from './TodoListItem'\n\n// highlight-next-line\nconst selectTodoIds = state => state.todos.map(todo => todo.id)\n\nconst TodoList = () => {\n  // highlight-next-line\n  const todoIds = useSelector(selectTodoIds, shallowEqual)\n\n  const renderedListItems = todoIds.map(todoId => {\n    return <TodoListItem key={todoId} id={todoId} />\n  })\n\n  return <ul className=\"todo-list\">{renderedListItems}</ul>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Normalized State Structure in Redux\nDESCRIPTION: Example of normalized state structure where todos are stored as objects with IDs as keys instead of arrays. This pattern reduces data duplication and enables direct lookups by ID.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootState = {\n  todos: {\n    status: 'idle',\n    entities: {\n      2: { id: 2, text: 'Buy milk', completed: false },\n      7: { id: 7, text: 'Clean room', completed: true }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Selector Instances with React Hooks\nDESCRIPTION: Shows how to create unique memoized selector instances in function components using useMemo.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeSelectItemsByCategory } from './categoriesSlice'\n\nfunction CategoryList({ category }) {\n  const selectItemsByCategory = useMemo(makeSelectItemsByCategory, [])\n\n  const itemsByCategory = useSelector(state =>\n    selectItemsByCategory(state, category)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Real World Example\nDESCRIPTION: Commands to set up the comprehensive Real World example with advanced Redux patterns.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/real-world\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Basic Action Creator Implementation in Redux\nDESCRIPTION: Demonstrates creating a basic action creator function that generates an action object with type and payload properties\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst todoAdded = text => {\n  return {\n    type: 'todos/todoAdded',\n    payload: text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redux DevTools Extension\nDESCRIPTION: NPM command to install Redux DevTools extension for debugging\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev redux-devtools-extension\n```\n\n----------------------------------------\n\nTITLE: Redux Todos Reducer with Normalized State\nDESCRIPTION: Complete implementation of a todos reducer that manages normalized state, including actions for adding, toggling, deleting, and loading todos. Includes selectors for accessing the normalized data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = {\n  status: 'idle',\n  entities: {}\n}\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'todos/todoAdded': {\n      const todo = action.payload\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [todo.id]: todo\n        }\n      }\n    }\n    case 'todos/todoToggled': {\n      const todoId = action.payload\n      const todo = state.entities[todoId]\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [todoId]: {\n            ...todo,\n            completed: !todo.completed\n          }\n        }\n      }\n    }\n    case 'todos/colorSelected': {\n      const { color, todoId } = action.payload\n      const todo = state.entities[todoId]\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [todoId]: {\n            ...todo,\n            color\n          }\n        }\n      }\n    }\n    case 'todos/todoDeleted': {\n      const newEntities = { ...state.entities }\n      delete newEntities[action.payload]\n      return {\n        ...state,\n        entities: newEntities\n      }\n    }\n    case 'todos/allCompleted': {\n      const newEntities = { ...state.entities }\n      Object.values(newEntities).forEach(todo => {\n        newEntities[todo.id] = {\n          ...todo,\n          completed: true\n        }\n      })\n      return {\n        ...state,\n        entities: newEntities\n      }\n    }\n    case 'todos/completedCleared': {\n      const newEntities = { ...state.entities }\n      Object.values(newEntities).forEach(todo => {\n        if (todo.completed) {\n          delete newEntities[todo.id]\n        }\n      })\n      return {\n        ...state,\n        entities: newEntities\n      }\n    }\n    case 'todos/todosLoading': {\n      return {\n        ...state,\n        status: 'loading'\n      }\n    }\n    case 'todos/todosLoaded': {\n      const newEntities = {}\n      action.payload.forEach(todo => {\n        newEntities[todo.id] = todo\n      })\n      return {\n        ...state,\n        status: 'idle',\n        entities: newEntities\n      }\n    }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Redux Component with Direct API Calls\nDESCRIPTION: A React component that manages posts data fetching using Redux connect and direct API calls. Shows basic implementation before middleware optimization.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  loadPostsRequest,\n  loadPostsSuccess,\n  loadPostsFailure\n} from './actionCreators'\n\nclass Posts extends Component {\n  loadData(userId) {\n    const { dispatch, posts } = this.props\n\n    if (posts[userId]) {\n      return\n    }\n\n    dispatch(loadPostsRequest(userId))\n\n    fetch(`http://myapi.com/users/${userId}/posts`).then(\n      response => dispatch(loadPostsSuccess(userId, response)),\n      error => dispatch(loadPostsFailure(userId, error))\n    )\n  }\n\n  componentDidMount() {\n    this.loadData(this.props.userId)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData(this.props.userId)\n    }\n  }\n\n  render() {\n    if (this.props.isFetching) {\n      return <p>Loading...</p>\n    }\n\n    const posts = this.props.posts.map(post => (\n      <Post post={post} key={post.id} />\n    ))\n\n    return <div>{posts}</div>\n  }\n}\n\nexport default connect(state => ({\n  posts: state.posts,\n  isFetching: state.isFetching\n}))(Posts)\n```\n\n----------------------------------------\n\nTITLE: Installing Async Example\nDESCRIPTION: Commands to install the Async example demonstrating API integration and Redux Thunk usage.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/async\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Action Creators in Legacy Redux (JavaScript)\nDESCRIPTION: This code demonstrates the traditional way of creating action creators in Redux, importing action types from a separate file.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ADD_TODO, TOGGLE_TODO } from '../constants/todos'\n\nexport const addTodo = (id, text) => ({\n  type: ADD_TODO,\n  text,\n  id\n})\n\nexport const toggleTodo = id => ({\n  type: TOGGLE_TODO,\n  id\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing the postAdded Reducer in Redux Toolkit\nDESCRIPTION: This shows how to add a reducer function to the posts slice that handles adding new posts to the state. It uses Redux Toolkit's createSlice with TypeScript PayloadAction to ensure type safety.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n// highlight-start\n// Import the `PayloadAction` TS type\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n// highlight-end\n\n// omit initial state\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // highlight-start\n    // Declare a \"case reducer\" named `postAdded`.\n    // The type of `action.payload` will be a `Post` object.\n    postAdded(state, action: PayloadAction<Post>) {\n      // \"Mutate\" the existing state array, which is\n      // safe to do here because `createSlice` uses Immer inside.\n      state.push(action.payload)\n    }\n    // highlight-end\n  }\n})\n\n// highlight-start\n// Export the auto-generated action creator with the same name\nexport const { postAdded } = postsSlice.actions\n// highlight-end\n\nexport default postsSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Slice Reducer Composition for Normalized Data in Redux\nDESCRIPTION: A comprehensive approach using slice reducers to manage different parts of the state. This example shows action creators and multiple reducers working together to add a comment to a post in normalized form.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/UpdatingNormalizedData.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// actions.js\nfunction addComment(postId, commentText) {\n  // Generate a unique ID for this comment\n  const commentId = generateId('comment')\n\n  return {\n    type: 'ADD_COMMENT',\n    payload: {\n      postId,\n      commentId,\n      commentText\n    }\n  }\n}\n\n// reducers/posts.js\nfunction addComment(state, action) {\n  const { payload } = action\n  const { postId, commentId } = payload\n\n  // Look up the correct post, to simplify the rest of the code\n  const post = state[postId]\n\n  return {\n    ...state,\n    // Update our Post object with a new \"comments\" array\n    [postId]: {\n      ...post,\n      comments: post.comments.concat(commentId)\n    }\n  }\n}\n\nfunction postsById(state = {}, action) {\n  switch (action.type) {\n    case 'ADD_COMMENT':\n      return addComment(state, action)\n    default:\n      return state\n  }\n}\n\nfunction allPosts(state = [], action) {\n  // omitted - no work to be done for this example\n}\n\nconst postsReducer = combineReducers({\n  byId: postsById,\n  allIds: allPosts\n})\n\n// reducers/comments.js\nfunction addCommentEntry(state, action) {\n  const { payload } = action\n  const { commentId, commentText } = payload\n\n  // Create our new Comment object\n  const comment = { id: commentId, text: commentText }\n\n  // Insert the new Comment object into the updated lookup table\n  return {\n    ...state,\n    [commentId]: comment\n  }\n}\n\nfunction commentsById(state = {}, action) {\n  switch (action.type) {\n    case 'ADD_COMMENT':\n      return addCommentEntry(state, action)\n    default:\n      return state\n  }\n}\n\nfunction addCommentId(state, action) {\n  const { payload } = action\n  const { commentId } = payload\n  // Just append the new Comment's ID to the list of all IDs\n  return state.concat(commentId)\n}\n\nfunction allComments(state = [], action) {\n  switch (action.type) {\n    case 'ADD_COMMENT':\n      return addCommentId(state, action)\n    default:\n      return state\n  }\n}\n\nconst commentsReducer = combineReducers({\n  byId: commentsById,\n  allIds: allComments\n})\n```\n\n----------------------------------------\n\nTITLE: Custom API Middleware Implementation\nDESCRIPTION: A custom Redux middleware implementation that handles API calls with standard request/success/failure action patterns.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction callAPIMiddleware({ dispatch, getState }) {\n  return next => action => {\n    const { types, callAPI, shouldCallAPI = () => true, payload = {} } = action\n\n    if (!types) {\n      return next(action)\n    }\n\n    if (\n      !Array.isArray(types) ||\n      types.length !== 3 ||\n      !types.every(type => typeof type === 'string')\n    ) {\n      throw new Error('Expected an array of three string types.')\n    }\n\n    if (typeof callAPI !== 'function') {\n      throw new Error('Expected callAPI to be a function.')\n    }\n\n    if (!shouldCallAPI(getState())) {\n      return\n    }\n\n    const [requestType, successType, failureType] = types\n\n    dispatch(\n      Object.assign({}, payload, {\n        type: requestType\n      })\n    )\n\n    return callAPI().then(\n      response =>\n        dispatch(\n          Object.assign({}, payload, {\n            response,\n            type: successType\n          })\n        ),\n      error =>\n        dispatch(\n          Object.assign({}, payload, {\n            error,\n            type: failureType\n          })\n        )\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tree View Example\nDESCRIPTION: Setup instructions for the Tree View example showing normalized state management for nested data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/tree-view\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: State after New Action with Undo History in Redux\nDESCRIPTION: This snippet shows how the state is restructured when a new action is performed while in the middle of the undo stack - the future states are discarded.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  counter: {\n    past: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    present: 8,\n    future: []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an API Slice with RTK Query in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an API slice using createApi from RTK Query. It sets up a base query using fetchBaseQuery, defines an endpoint for fetching posts, and exports the auto-generated hook for use in React components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-7-rtk-query-basics.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the RTK Query methods from the React-specific entry point\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\n// Use the `Post` type we've already defined in `postsSlice`,\n// and then re-export it for ease of use\nimport type { Post } from '@/features/posts/postsSlice'\nexport type { Post }\n\n// Define our single API slice object\nexport const apiSlice = createApi({\n  // The cache reducer expects to be added at `state.api` (already default - this is optional)\n  reducerPath: 'api',\n  // All of our requests will have URLs starting with '/fakeApi'\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  // The \"endpoints\" represent operations and requests for this server\n  endpoints: builder => ({\n    // The `getPosts` endpoint is a \"query\" operation that returns data.\n    // The return value is a `Post[]` array, and it takes no arguments.\n    getPosts: builder.query<Post[], void>({\n      // The URL for the request is '/fakeApi/posts'\n      query: () => '/posts'\n    })\n  })\n})\n\n// Export the auto-generated hook for the `getPosts` query endpoint\nexport const { useGetPostsQuery } = apiSlice\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection/Item Reducer Pattern in Redux\nDESCRIPTION: Demonstrates the collection/item reducer pattern for handling multiple states with a common reducer. Includes examples for both array-based and object map-based collections of counters.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ReusingReducerLogic.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction counterReducer(state, action) {\n    switch(action.type) {\n        case \"INCREMENT\" : return state + 1;\n        case \"DECREMENT\" : return state - 1;\n    }\n}\n\nfunction countersArrayReducer(state, action) {\n    switch(action.type) {\n        case \"INCREMENT\":\n        case \"DECREMENT\":\n            return state.map( (counter, index) => {\n                if(index !== action.index) return counter;\n                return counterReducer(counter, action);\n            });\n        default:\n            return state;\n    }\n}\n\nfunction countersMapReducer(state, action) {\n    switch(action.type) {\n        case \"INCREMENT\":\n        case \"DECREMENT\":\n            return {\n                ...state,\n                state[action.name] : counterReducer(state[action.name], action)\n            };\n        default:\n            return state;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Isolated Redux Sub-App in React\nDESCRIPTION: This snippet demonstrates how to create a self-contained Redux sub-app by wrapping the main app component with a Provider and creating a new store for each instance. This approach allows multiple independent instances of the sub-app to coexist within a larger application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/IsolatingSubapps.md#2025-04-07_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport reducer from './reducers'\nimport App from './App'\n\nclass SubApp extends Component {\n  constructor(props) {\n    super(props)\n    this.store = createStore(reducer)\n  }\n\n  render() {\n    return (\n      <Provider store={this.store}>\n        <App />\n      </Provider>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Calls with Redux Axios Middleware\nDESCRIPTION: Demonstrates how to use Redux Axios Middleware to handle API calls and dispatch corresponding actions for different request stages.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport const loadCategories() => ({ type: 'LOAD', payload: { request : { url: '/categories'} } });\n```\n\n----------------------------------------\n\nTITLE: Granular History State Design in Redux\nDESCRIPTION: This code demonstrates a more granular approach to history tracking, where each counter has its own independent undo/redo history, allowing for more fine-grained control.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  counterA: {\n    past: [1, 0],\n    present: 2,\n    future: []\n  },\n  counterB: {\n    past: [0],\n    present: 1,\n    future: []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification List Component with Auto-Read Functionality\nDESCRIPTION: This React component renders a list of notifications and automatically marks them as read when displayed. It uses useLayoutEffect to dispatch the allNotificationsRead action when the component renders, and applies conditional styling to highlight new notifications using classnames.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLayoutEffect } from 'react'\nimport classnames from 'classnames'\nimport { useAppSelector, useAppDispatch } from '@/app/hooks'\n\nimport { TimeAgo } from '@/components/TimeAgo'\n\nimport { PostAuthor } from '@/features/posts/PostAuthor'\n\nimport {\n  allNotificationsRead,\n  selectAllNotifications\n} from './notificationsSlice'\n\nexport const NotificationsList = () => {\n  const dispatch = useAppDispatch()\n  const notifications = useAppSelector(selectAllNotifications)\n\n  useLayoutEffect(() => {\n    dispatch(allNotificationsRead())\n  })\n\n  const renderedNotifications = notifications.map(notification => {\n    const notificationClassname = classnames('notification', {\n      new: notification.isNew\n    })\n\n    return (\n      <div key={notification.id} className={notificationClassname}>\n        <div>\n          <b>\n            <PostAuthor userId={notification.user} showPrefix={false} />\n          </b>{' '}\n          {notification.message}\n        </div>\n        <TimeAgo timestamp={notification.date} />\n      </div>\n    )\n  })\n\n  return (\n    <section className=\"notificationsList\">\n      <h2>Notifications</h2>\n      {renderedNotifications}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Store Creation with React\nDESCRIPTION: Initial basic setup of a Redux store with React integration using Provider component\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\nimport App from './components/App'\n\nconst store = createStore(rootReducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Client-Side Redux Store Initialization\nDESCRIPTION: Client-side setup to hydrate the server-rendered HTML and initialize Redux store with preloaded state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ServerRendering.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { hydrate } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './containers/App'\nimport counterApp from './reducers'\n\n// Create Redux store with state injected by the server\nconst store = createStore(counterApp, window.__PRELOADED_STATE__)\n\n// Allow the passed state to be garbage-collected\ndelete window.__PRELOADED_STATE__\n\nhydrate(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Decoupled Async Logic with Redux Logic\nDESCRIPTION: Shows how to use Redux Logic for handling decoupled asynchronous operations in Redux applications, supporting various async patterns.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst loginLogic = createLogic({\n  type: Actions.LOGIN_REQUEST,\n\n  process({ getState, action }, dispatch, done) {\n    const { username, password } = action.payload\n\n    postLogin(username, password)\n      .then(\n        ({ user, msg }) => {\n          dispatch(loginSucceeded(user))\n\n          setTimeout(() => dispatch(showMessage(msg)), 2000)\n        },\n        err => dispatch(loginFailure(err))\n      )\n      .then(done)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating AddPostForm to Use Current User ID from Auth State\nDESCRIPTION: This snippet shows how to modify the AddPostForm component to automatically use the logged-in user's ID instead of showing a dropdown selection, by retrieving the user ID from Redux auth state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nexport const AddPostForm = () => {\n  const dispatch = useAppDispatch()\n  const userId = useAppSelector(selectCurrentUsername)!\n\n  const handleSubmit = (e: React.FormEvent<AddPostFormElements>) => {\n    // Prevent server submission\n    e.preventDefault()\n\n    const { elements } = e.currentTarget\n    const title = elements.postTitle.value\n    const content = elements.postContent.value\n    // Removed the `postAuthor` field everywhere in the component\n\n    dispatch(postAdded(title, content, userId))\n\n    e.currentTarget.reset()\n  }\n```\n\n----------------------------------------\n\nTITLE: Codemod Command - Shell\nDESCRIPTION: Command to run the codemod for converting existing slices to the new callback syntax.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpx @reduxjs/rtk-codemods createSliceReducerBuilder ./src/features/todos/slice.ts\n```\n\n----------------------------------------\n\nTITLE: Redux Reducer Monitor Enhancer\nDESCRIPTION: Store enhancer that monitors reducer performance by measuring execution time\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst round = number => Math.round(number * 100) / 100\n\nconst monitorReducerEnhancer =\n  createStore => (reducer, initialState, enhancer) => {\n    const monitoredReducer = (state, action) => {\n      const start = performance.now()\n      const newState = reducer(state, action)\n      const end = performance.now()\n      const diff = round(end - start)\n\n      console.log('reducer process time:', diff)\n\n      return newState\n    }\n\n    return createStore(monitoredReducer, initialState, enhancer)\n  }\n\nexport default monitorReducerEnhancer\n```\n\n----------------------------------------\n\nTITLE: Redux Reducer Function Signature\nDESCRIPTION: Demonstrates the basic signature of a Redux reducer function, which takes the previous state and an action as arguments and returns a new state. The reducer must be pure and avoid mutations.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/PrerequisiteConcepts.md#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n(previousState, action) => newState\n```\n\n----------------------------------------\n\nTITLE: Implementing Side Effects with Redux Loop\nDESCRIPTION: Demonstrates the use of Redux Loop to handle side effects by returning them from reducers, similar to the Elm Architecture.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport const reducer = (state = {}, action) => {\n  switch (action.type) {\n    case ActionType.LOGIN_REQUEST:\n      const { username, password } = action.payload\n      return loop(\n        { pending: true },\n        Effect.promise(loginPromise, username, password)\n      )\n    case ActionType.LOGIN_SUCCESS:\n      const { user, msg } = action.payload\n      return loop(\n        { pending: false, user },\n        Effect.promise(delayMessagePromise, msg, 2000)\n      )\n    case ActionType.LOGIN_FAILURE:\n      return { pending: false, err: action.payload }\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps in React-Redux\nDESCRIPTION: Example of a mapStateToProps function that returns an object with state values and a selector. React-Redux will perform shallow equality checks on each value in this object.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/ImmutableData.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return {\n    todos: state.todos, // prop value\n    visibleTodos: getVisibleTodos(state) // selector\n  }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Form with Redux Dispatch in React-TypeScript\nDESCRIPTION: This code snippet shows how to create a form component that dispatches Redux actions using the useAppDispatch hook. It demonstrates creating a form that collects post title and content, generates a unique ID using nanoid, and dispatches a postAdded action to add the new post to the Redux store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\n// highlight-start\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport { useAppDispatch } from '@/app/hooks'\n\nimport { type Post, postAdded } from './postsSlice'\n// highlight-end\n\n// omit form types\n\nexport const AddPostForm = () => {\n  // highlight-start\n  // Get the `dispatch` method from the store\n  const dispatch = useAppDispatch()\n\n  // highlight-end\n\n  const handleSubmit = (e: React.FormEvent<AddPostFormElements>) => {\n    // Prevent server submission\n    e.preventDefault()\n\n    const { elements } = e.currentTarget\n    const title = elements.postTitle.value\n    const content = elements.postContent.value\n\n    // highlight-start\n    // Create the post object and dispatch the `postAdded` action\n    const newPost: Post = {\n      id: nanoid(),\n      title,\n      content\n    }\n    dispatch(postAdded(newPost))\n    // highlight-end\n\n    e.currentTarget.reset()\n  }\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input type=\"text\" id=\"postTitle\" defaultValue=\"\" required />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          defaultValue=\"\"\n          required\n        />\n        <button>Save Post</button>\n      </form>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hot Reloading for React Components with Redux\nDESCRIPTION: This snippet demonstrates how to set up hot reloading for React components in a Redux application. It creates a renderApp function that wraps the main App component with Redux Provider and implements hot reloading logic.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ConfiguringYourStore.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport configureStore from './configureStore'\n\nconst store = configureStore()\n\nconst renderApp = () =>\n  render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n  )\n\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n  module.hot.accept('./components/App', renderApp)\n}\n\nrenderApp()\n```\n\n----------------------------------------\n\nTITLE: Dispatching Incorrect Payload Type (JavaScript)\nDESCRIPTION: Demonstrates how dispatching an incorrectly formatted payload can lead to state inconsistencies when using a reducer that blindly returns the action payload.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndispatch({\n  type: 'users/userLoggedIn',\n  payload: {\n    id: 42,\n    text: 'Buy milk'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Offline for Offline-First Applications\nDESCRIPTION: Sets up Redux Offline to enable persistent store and support for optimistic UI updates in offline-first applications.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = configureStore({ reducer, enhancer: [offline(offlineConfig)] })\nstore.dispatch({\n  type: 'FOLLOW_USER_REQUEST',\n  meta: { offline: { effect: {}, commit: {}, rollback: {} } }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Links to PostsList Component\nDESCRIPTION: Updates the PostsList component to include React Router Link components for each post, allowing navigation to individual post detail pages.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport { Link } from 'react-router-dom'\nimport { useAppSelector } from '@/app/hooks'\n\nexport const PostsList = () => {\n  const posts = useAppSelector(state => state.posts)\n\n  const renderedPosts = posts.map(post => (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>\n        // highlight-next-line\n        <Link to={`/posts/${post.id}`}>{post.title}</Link>\n      </h3>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n    </article>\n  ))\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {renderedPosts}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: This command removes the single build dependency and copies all configuration files into your project, giving you full control over the setup. Note that this is a one-way operation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter/README.md#2025-04-07_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Connecting a Redux Sub-App Component\nDESCRIPTION: This snippet shows a typical Redux connected component that would serve as the root of a sub-app. It uses the 'connect' function to map state to props for the 'App' component.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/IsolatingSubapps.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass App extends Component { ... }\nexport default connect(mapStateToProps)(App)\n```\n\n----------------------------------------\n\nTITLE: Implementing State Machine Pattern in Redux Reducer\nDESCRIPTION: Demonstrates how to structure a Redux reducer as a state machine using explicit finite states with TypeScript-friendly patterns. Shows initial state setup and state-specific reducer implementation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialUserState = {\n  status: 'idle', // explicit finite state\n  user: null,\n  error: null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Actions\nDESCRIPTION: Examples of Redux actions that describe state changes in the todo app, including adding todos, toggling completion status, and setting visibility filters.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/CoreConcepts.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ type: 'ADD_TODO', text: 'Go to swimming pool' }\n{ type: 'TOGGLE_TODO', index: 1 }\n{ type: 'SET_VISIBILITY_FILTER', filter: 'SHOW_ALL' }\n```\n\n----------------------------------------\n\nTITLE: Using createSelector with Multiple Arguments in JavaScript\nDESCRIPTION: This snippet shows how to use createSelector with multiple arguments, demonstrating how Reselect calls input selectors with all provided arguments.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectItems = state => state.items\nconst selectItemId = (state, itemId) => itemId\n\nconst selectItemById = createSelector(\n  [selectItems, selectItemId],\n  (items, itemId) => items[itemId]\n)\n\nconst item = selectItemById(state, 42)\n\n/*\nInternally, Reselect does something like this:\n\nconst firstArg = selectItems(state, 42);  \nconst secondArg = selectItemId(state, 42);  \n  \nconst result = outputSelector(firstArg, secondArg);  \nreturn result;  \n*/\n```\n\n----------------------------------------\n\nTITLE: Using Memoized Selector in React Component with Redux\nDESCRIPTION: Shows how to use a memoized selector in a React component with useSelector hook from React-Redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { useSelector, shallowEqual } from 'react-redux'\n\nimport { selectTodoIds } from './todosSlice'\nimport TodoListItem from './TodoListItem'\n\nconst TodoList = () => {\n  const todoIds = useSelector(selectTodoIds)\n\n  const renderedListItems = todoIds.map(todoId => {\n    return <TodoListItem key={todoId} id={todoId} />\n  })\n\n  return <ul className=\"todo-list\">{renderedListItems}</ul>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Server with Redux\nDESCRIPTION: Initial server setup using Express and Redux, including middleware configuration and basic route handling.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ServerRendering.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'path'\nimport Express from 'express'\nimport React from 'react'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport counterApp from './reducers'\nimport App from './containers/App'\n\nconst app = Express()\nconst port = 3000\n\n// Serve static files\napp.use('/static', Express.static('static'))\n\n// This is fired every time the server side receives a request\napp.use(handleRender)\n\n// We are going to fill these out in the sections to follow\nfunction handleRender(req, res) {\n  /* ... */\n}\nfunction renderFullPage(html, preloadedState) {\n  /* ... */\n}\n\napp.listen(port)\n```\n\n----------------------------------------\n\nTITLE: Combining Reducers with Topological Dependencies in JavaScript\nDESCRIPTION: Example of using topologically-combine-reducers to define cross-slice dependencies between reducers. This allows specifying dependencies between reducers for ordering and data passing.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar masterReducer = topologicallyCombineReducers(\n  { auth, users, todos },\n  // define the dependency tree\n  { auth: ['users'], todos: ['auth'] }\n)\n```\n\n----------------------------------------\n\nTITLE: Alternative Middleware Signature Pattern\nDESCRIPTION: Shows the alternative, non-curried middleware signature that was considered but not implemented to maintain backward compatibility with existing ecosystem.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/DesignDecisions.md#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst middleware = (storeAPI, next, action) => {}\n```\n\n----------------------------------------\n\nTITLE: Writing Custom Middleware in JavaScript (ES5 Style)\nDESCRIPTION: This example illustrates how to write custom middleware using ES5 function syntax. It shows the structure of middleware with three nested functions and explains their purposes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-4-store.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction exampleMiddleware(storeAPI) {\n  return function wrapDispatch(next) {\n    return function handleAction(action) {\n      // Do anything here: pass the action onwards with next(action),\n      // or restart the pipeline with storeAPI.dispatch(action)\n      // Can also use storeAPI.getState() here\n\n      return next(action)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Selectors in Redux Thunks\nDESCRIPTION: Example of using a selector function within a Redux thunk to access derived state data before dispatching an action. Shows how selectors can be used with getState().\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addTodosIfAllowed(todoText) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const canAddTodos = selectCanAddTodos(state)\n\n    if (canAddTodos) {\n      dispatch(todoAdded(todoText))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Root Reducer in Redux Store (JavaScript)\nDESCRIPTION: Demonstrates how to use the store's replaceReducer function to swap the internal reducer function reference and add a new slice reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst newRootReducer = combineReducers({\n  existingSlice: existingSliceReducer,\n  newSlice: newSliceReducer\n})\n\nstore.replaceReducer(newRootReducer)\n```\n\n----------------------------------------\n\nTITLE: Creating Composable Reducer Transformers with redux-xforms\nDESCRIPTION: Example of using redux-xforms to create composable reducer transformers. It demonstrates a composition of transformer functions to create a filtered, isolated reducer with initial state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst createByFilter = (predicate, mapActionToKey) =>\n  compose(\n    withInitialState({}), // inject initial state as {}\n    withFilter(predicate), // let through if action has filterName\n    updateSlice(mapActionToKey), // update a single key in the state\n    isolateSlice(mapActionToKey) // run the reducer on a single state slice\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Reducer in Redux\nDESCRIPTION: Implementation of a counter reducer that handles INCREMENT and DECREMENT actions to maintain a numeric state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/combineReducers.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State after Multiple Undo Actions in Redux\nDESCRIPTION: This snippet shows the state shape after multiple Undo operations, with multiple items moved from past to future arrays.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  counter: {\n    past: [0, 1, 2, 3, 4, 5, 6, 7],\n    present: 8,\n    future: [9, 10]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Ready State Promise Middleware\nDESCRIPTION: A middleware that handles actions with a promise field, dispatching separate actions for the initial state and promise resolution.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst readyStatePromise = store => next => action => {\n  if (!action.promise) {\n    return next(action)\n  }\n\n  function makeAction(ready, data) {\n    const newAction = Object.assign({}, action, { ready }, data)\n    delete newAction.promise\n    return newAction\n  }\n\n  next(makeAction(false))\n  return action.promise.then(\n    result => next(makeAction(true, { result })),\n    error => next(makeAction(true, { error }))\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reducer Manager for Dynamic Reducer Management (JavaScript)\nDESCRIPTION: Implements a 'Reducer Manager' object that keeps track of registered reducers and provides methods for adding and removing reducers dynamically.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createReducerManager(initialReducers) {\n  // Create an object which maps keys to reducers\n  const reducers = { ...initialReducers }\n\n  // Create the initial combinedReducer\n  let combinedReducer = combineReducers(reducers)\n\n  // An array which is used to delete state keys when reducers are removed\n  let keysToRemove = []\n\n  return {\n    getReducerMap: () => reducers,\n\n    // The root reducer function exposed by this object\n    // This will be passed to the store\n    reduce: (state, action) => {\n      // If any reducers have been removed, clean up their state first\n      if (keysToRemove.length > 0) {\n        state = { ...state }\n        for (let key of keysToRemove) {\n          delete state[key]\n        }\n        keysToRemove = []\n      }\n\n      // Delegate to the combined reducer\n      return combinedReducer(state, action)\n    },\n\n    // Adds a new reducer with the specified key\n    add: (key, reducer) => {\n      if (!key || reducers[key]) {\n        return\n      }\n\n      // Add the reducer to the reducer mapping\n      reducers[key] = reducer\n\n      // Generate a new combined reducer\n      combinedReducer = combineReducers(reducers)\n    },\n\n    // Removes a reducer with the specified key\n    remove: key => {\n      if (!key || !reducers[key]) {\n        return\n      }\n\n      // Remove it from the reducer mapping\n      delete reducers[key]\n\n      // Add the key to the list of keys to clean up\n      keysToRemove.push(key)\n\n      // Generate a new combined reducer\n      combinedReducer = combineReducers(reducers)\n    }\n  }\n}\n\nconst staticReducers = {\n  users: usersReducer,\n  posts: postsReducer\n}\n\nexport function configureStore(initialState) {\n  const reducerManager = createReducerManager(staticReducers)\n\n  // Create a store with the root reducer function being the one exposed by the manager.\n  const store = createStore(reducerManager.reduce, initialState)\n\n  // Optional: Put the reducer manager on the store so it is easily accessible\n  store.reducerManager = reducerManager\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Batched Actions with redux-batched-actions\nDESCRIPTION: Example of using redux-batched-actions to handle batched actions with a higher-order reducer. It wraps the root reducer with enableBatching and uses batchActions to dispatch multiple actions at once.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = configureStore({ reducer: enableBatching(rootReducer) })\nstore.dispatch(batchActions([{ type: 'INCREMENT' }, { type: 'INCREMENT' }]))\n```\n\n----------------------------------------\n\nTITLE: Basic combineReducers Usage in Redux\nDESCRIPTION: Example of the basic syntax for combining multiple reducers using the combineReducers function, showing how to pass an object of slice reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/combineReducers.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncombineReducers({\n  posts: postsReducer,\n  comments: commentsReducer\n})\n```\n\n----------------------------------------\n\nTITLE: Using Immer for Immutable State Updates in Redux\nDESCRIPTION: Demonstrates how to use Immer to perform immutable state updates with normal mutative code in Redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextState = produce(baseState, draftState => {\n  draftState.push({ todo: 'Tweet about it' })\n  draftState[1].done = true\n})\n```\n\n----------------------------------------\n\nTITLE: Task-Based Updates for Normalized Data in Redux\nDESCRIPTION: An alternative approach organizing reducer logic by tasks rather than slices. Uses immutable update utilities like dot-prop-immutable to handle nested state updates, and reduce-reducers to combine different reducer patterns.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/UpdatingNormalizedData.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport posts from \"./postsReducer\";\nimport comments from \"./commentsReducer\";\nimport dotProp from \"dot-prop-immutable\";\nimport {combineReducers} from \"redux\";\nimport reduceReducers from \"reduce-reducers\";\n\nconst combinedReducer = combineReducers({\n    posts,\n    comments\n});\n\n\nfunction addComment(state, action) {\n    const {payload} = action;\n    const {postId, commentId, commentText} = payload;\n\n    // State here is the entire combined state\n    const updatedWithPostState = dotProp.set(\n        state,\n        `posts.byId.${postId}.comments`,\n        comments => comments.concat(commentId)\n    );\n\n    const updatedWithCommentsTable = dotProp.set(\n        updatedWithPostState,\n        `comments.byId.${commentId}`,\n        {id : commentId, text : commentText}\n    );\n\n    const updatedWithCommentsList = dotProp.set(\n        updatedWithCommentsTable,\n        `comments.allIds`,\n        allIds => allIds.concat(commentId);\n    );\n\n    return updatedWithCommentsList;\n}\n\nconst featureReducers = createReducer({}, {\n    ADD_COMMENT : addComment,\n});\n\nconst rootReducer = reduceReducers(\n    combinedReducer,\n    featureReducers\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Middleware\nDESCRIPTION: Shows how to create and configure dynamic middleware with Redux Toolkit\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/CodeSplitting.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDynamicMiddleware, configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\nimport reducer from './reducer'\n\nconst dynamicMiddleware = createDynamicMiddleware()\n\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(dynamicMiddleware.middleware)\n})\n\ndynamicMiddleware.addMiddleware(logger)\n```\n\n----------------------------------------\n\nTITLE: Managing Complex Async Logic with Redux Saga\nDESCRIPTION: Illustrates the use of Redux Saga for handling complex asynchronous operations using generator functions in Redux applications.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* fetchData(action) {\n  const { someValue } = action\n  try {\n    const response = yield call(myAjaxLib.post, '/someEndpoint', {\n      data: someValue\n    })\n    yield put({ type: 'REQUEST_SUCCEEDED', payload: response })\n  } catch (error) {\n    yield put({ type: 'REQUEST_FAILED', error: error })\n  }\n}\n\nfunction* addTodosIfAllowed(action) {\n  const { todoText } = action\n  const todos = yield select(state => state.todos)\n\n  if (todos.length < MAX_TODOS) {\n    yield put({ type: 'ADD_TODO', text: todoText })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger Middleware in Redux\nDESCRIPTION: This example demonstrates how to create and apply a custom logger middleware in Redux. The middleware logs actions before dispatch and the resulting state after dispatch.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/applyMiddleware.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport todos from './reducers'\n\nfunction logger({ getState }) {\n  return next => action => {\n    console.log('will dispatch', action)\n\n    // Call the next dispatch method in the middleware chain.\n    const returnValue = next(action)\n\n    console.log('state after dispatch', getState())\n\n    // This will likely be the action itself, unless\n    // a middleware further in chain changed it.\n    return returnValue\n  }\n}\n\nconst store = createStore(todos, ['Use Redux'], applyMiddleware(logger))\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Understand the middleware'\n})\n// (These lines will be logged by the middleware:)\n// will dispatch: { type: 'ADD_TODO', text: 'Understand the middleware' }\n// state after dispatch: [ 'Use Redux', 'Understand the middleware' ]\n```\n\n----------------------------------------\n\nTITLE: Inefficient Selector Usage in React Component\nDESCRIPTION: Example of a poorly optimized useSelector implementation that always returns a new array reference, causing unnecessary re-renders after every Redux action.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TodoList() {\n  // highlight-start\n  // ❌ WARNING: this _always_ returns a new reference, so it will _always_ re-render!\n  const completedTodos = useSelector(state =>\n    state.todos.map(todo => todo.completed)\n  )\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ReactionButtons Component to Use the Mutation\nDESCRIPTION: This component renders reaction buttons for a post and uses the addReaction mutation hook to update reactions on the server when a button is clicked.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport { useAddReactionMutation } from '@/features/api/apiSlice'\n\nimport type { Post, ReactionName } from './postsSlice'\n\nconst reactionEmoji: Record<ReactionName, string> = {\n  thumbsUp: '👍',\n  tada: '🎉',\n  heart: '❤️',\n  rocket: '🚀',\n  eyes: '👀'\n}\n\ninterface ReactionButtonsProps {\n  post: Post\n}\n\nexport const ReactionButtons = ({ post }: ReactionButtonsProps) => {\n  // highlight-next-line\n  const [addReaction] = useAddReactionMutation()\n\n  const reactionButtons = Object.entries(reactionEmoji).map(\n    ([stringName, emoji]) => {\n      // Ensure TS knows this is a _specific_ string type\n      const reaction = stringName as ReactionName\n      return (\n        <button\n          key={reaction}\n          type=\"button\"\n          className=\"muted-button reaction-button\"\n          onClick={() => {\n            // highlight-next-line\n            addReaction({ postId: post.id, reaction })\n          }}\n        >\n          {emoji} {post.reactions[reaction]}\n        </button>\n      )\n    }\n  )\n\n  return <div>{reactionButtons}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Hand-crafted vs. CreateAsyncThunk Data Fetching in Redux\nDESCRIPTION: Comparison between manually writing a thunk function for fetching data with proper error handling and using Redux Toolkit's createAsyncThunk API. Shows the evolution from verbose hand-written code to the more declarative approach.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/side-effects-approaches.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Original \"hand-written\" thunk fetch request pattern\nconst fetchUserById = userId => {\n  return async (dispatch, getState) => {\n    // Dispatch \"pending\" action to help track loading state\n    dispatch(fetchUserStarted())\n    // Need to pull this out to have correct error handling\n    let lastAction\n    try {\n      const user = await userApi.getUserById(userId)\n      // Dispatch \"fulfilled\" action on success\n      lastAction = fetchUserSucceeded(user)\n    } catch (err) {\n      // Dispatch \"rejected\" action on failure\n      lastAction = fetchUserFailed(err.message)\n    }\n    dispatch(lastAction)\n  }\n}\n\n// Similar request with `createAsyncThunk`\nconst fetchUserById2 = createAsyncThunk('fetchUserById', async userId => {\n  const user = await userApi.getUserById(userId)\n  return user\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Async Logic with Redux Observable\nDESCRIPTION: Shows how to use Redux Observable to manage complex asynchronous logic using RxJS observable chains in Redux applications.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst loginRequestEpic = action$ =>\n  action$\n    .ofType(LOGIN_REQUEST)\n    .mergeMap(({ payload: { username, password } }) =>\n      Observable.from(postLogin(username, password))\n        .map(loginSuccess)\n        .catch(loginFailure)\n    )\n\nconst loginSuccessfulEpic = action$ =>\n  action$\n    .ofType(LOGIN_SUCCESS)\n    .delay(2000)\n    .mergeMap(({ payload: { msg } }) => showMessage(msg))\n\nconst rootEpic = combineEpics(loginRequestEpic, loginSuccessfulEpic)\n```\n\n----------------------------------------\n\nTITLE: Warning Message in Markdown\nDESCRIPTION: Markdown warning block indicating the deprecated status of the example and directing users to current documentation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/universal/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> **Warning**: This example is outdated, and shows legacy patterns that we no longer teach or recommend.\\n> Please see the Redux docs tutorials for our recommended usage patterns, and specifically the \"Essentials\" tutorial:\\n> **https://redux.js.org/tutorials/index**\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of createSelector in JavaScript\nDESCRIPTION: This snippet shows an incorrect usage of createSelector where the output selector simply returns its input, which breaks memoization and serves no useful purpose.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ BROKEN: this will not memoize correctly, and does nothing useful!\nconst brokenSelector = createSelector(\n  state => state.todos,\n  todos => todos\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Redux Store State\nDESCRIPTION: Demonstrates how to access the current state of a Redux store using the getState() method. The example shows a store containing visibility filter settings and a todo list.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/ThreePrinciples.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(store.getState())\n\n/* Prints\n{\n  visibilityFilter: 'SHOW_ALL',\n  todos: [\n    {\n      text: 'Consider using Redux',\n      completed: true,\n    },\n    {\n      text: 'Keep all state in a single tree',\n      completed: false\n    }\n  ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: State after Undo Action in Redux\nDESCRIPTION: This code demonstrates how the state changes after an Undo action, moving the present state into the future and taking the last past state as the new present.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  counter: {\n    past: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    present: 9,\n    future: [10]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React YouTube Embed Component Import\nDESCRIPTION: Import statements for the React Lite YouTube Embed component and its associated styles for displaying video content.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/videos.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiteYouTubeEmbed from 'react-lite-youtube-embed';\nimport 'react-lite-youtube-embed/dist/LiteYouTubeEmbed.css'\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: Command to eject from Create React App's preconfigured setup. This one-way operation copies all configuration files and dependencies into the project for full customization control.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter-ts/README.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Handling API Calls with Redux API Middleware\nDESCRIPTION: Shows how to use Redux API Middleware to make API calls and automatically dispatch actions for different stages of the request.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchUsers = () => ({\n  [CALL_API]: {\n    endpoint: 'http://www.example.com/api/users',\n    method: 'GET',\n    types: ['REQUEST', 'SUCCESS', 'FAILURE']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Thunk Middleware\nDESCRIPTION: Setup of Redux store with thunk middleware integration, including dev tools configuration\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport { thunk } from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducer'\n\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunk))\n\nconst store = createStore(rootReducer, composedEnhancer)\nexport default store\n```\n\n----------------------------------------\n\nTITLE: Generic Undo History Structure with Simple Values in Redux\nDESCRIPTION: This code demonstrates the uniform structure of undo history state, regardless of the data type being tracked (in this case, simple numerical values).\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  counter: {\n    past: [0, 1, 2],\n    present: 3,\n    future: [4]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Egghead Course Video Embed Implementation\nDESCRIPTION: HTML/JSX implementation for embedding an Egghead.io course video with responsive iframe styling.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/videos.md#2025-04-07_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{position:\"relative\",paddingTop:\"56.25%\"}}>\n  <iframe \n    src=\"https://app.egghead.io/lessons/redux-course-introduction-and-application-walk-through-for-rtk-query-basics/embed?af=7pnhj6\" \n    title=\"RTK Query Video course at Egghead: Course Introduction and Application Walk through for RTK Query Basics\"\n    frameborder=\"0\" \n    allowfullscreen\n    style={{position:\"absolute\",top:0,left:0,width:\"100%\",height:\"100%\"}}\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Optimized Test Utils Implementation\nDESCRIPTION: Enhanced version of test utilities using setupStore function for consistent store creation across tests. Includes improved TypeScript types and cleaner implementation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { PropsWithChildren } from 'react'\nimport { render } from '@testing-library/react'\nimport type { RenderOptions } from '@testing-library/react'\nimport { Provider } from 'react-redux'\n\nimport { setupStore } from '../app/store'\nimport type { AppStore, RootState } from '../app/store'\n\ninterface ExtendedRenderOptions extends Omit<RenderOptions, 'queries'> {\n  preloadedState?: Partial<RootState>\n  store?: AppStore\n}\n\nexport function renderWithProviders(\n  ui: React.ReactElement,\n  {\n    preloadedState = {},\n    store = setupStore(preloadedState),\n    ...renderOptions\n  }: ExtendedRenderOptions = {}\n) {\n  function Wrapper({ children }: PropsWithChildren<{}>): JSX.Element {\n    return <Provider store={store}>{children}</Provider>\n  }\n  return { store, ...render(ui, { wrapper: Wrapper, ...renderOptions }) }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Socket.IO with Redux\nDESCRIPTION: Demonstrates how to integrate Socket.IO with Redux using redux-socket.io middleware for real-time communication.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware.concat(socketIoMiddleware)\n})\nstore.dispatch({ type: 'server/hello', data: 'Hello!' })\n```\n\n----------------------------------------\n\nTITLE: Handling User Logout in Posts Slice using extraReducers in Redux Toolkit\nDESCRIPTION: This snippet shows how to use extraReducers in a Redux Toolkit slice to clear the posts state when a user logs out, responding to an action defined in another slice.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, nanoid, PayloadAction } from '@reduxjs/toolkit'\nimport { sub } from 'date-fns'\n\n// highlight-next-line\nimport { userLoggedOut } from '@/features/auth/authSlice'\n\n// omit initial state and types\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      // omit postAdded and other case reducers\n  },\n  // highlight-start\n  extraReducers: (builder) => {\n    // Pass the action creator to `builder.addCase()`\n    builder.addCase(userLoggedOut, (state) => {\n      // Clear out the list of posts whenever the user logs out\n      return []\n    })\n  },\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Redux Reducers with Undoable Todos\nDESCRIPTION: Shows the root reducer file that combines multiple reducers including the undoable todos reducer, maintaining the standard Redux structure.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\n\nconst todoApp = combineReducers({\n  todos,\n  visibilityFilter\n})\n\nexport default todoApp\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown with React Component\nDESCRIPTION: This code embeds a YouTube video titled 'Learn Modern Redux - Redux Toolkit, React-Redux Hooks, and RTK Query' using the LiteYouTubeEmbed component.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/tutorials-index.md#2025-04-07_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LiteYouTubeEmbed\n    id=\"9zySeP5vH9c\"\n    title=\"Learn Modern Redux - Redux Toolkit, React-Redux Hooks, and RTK Query\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using RTK Query Hooks in React Components\nDESCRIPTION: Shows how to use auto-generated RTK Query hooks in React components for automatic data fetching with loading and error states.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useGetPokemonByNameQuery } from './services/pokemon'\n\nexport default function Pokemon() {\n  const { data, error, isLoading } = useGetPokemonByNameQuery('bulbasaur')\n\n  // rendering logic\n}\n```\n\n----------------------------------------\n\nTITLE: Scoping Actions and Reducers with redux-doghouse\nDESCRIPTION: This snippet demonstrates how to use redux-doghouse to scope actions and reducers to a particular instance of a component. It creates scoped action creators and reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst scopeableActions = new ScopedActionFactory(actionCreators)\nconst actionCreatorsScopedToA = scopeableActions.scope('a')\nactionCreatorsScopedToA.foo('bar') //{ type: SET_FOO, value: 'bar', scopeID: 'a' }\n\nconst boundScopeableActions = bindScopedActionFactories(\n  scopeableActions,\n  store.dispatch\n)\nconst scopedReducers = scopeReducers(reducers)\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Data Structure in JavaScript for Redux\nDESCRIPTION: Example of a nested data structure representing blog posts with comments and authors, demonstrating the problematic approach before normalization.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/NormalizingStateShape.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst blogPosts = [\n  {\n    id: 'post1',\n    author: { username: 'user1', name: 'User 1' },\n    body: '......',\n    comments: [\n      {\n        id: 'comment1',\n        author: { username: 'user2', name: 'User 2' },\n        comment: '.....'\n      },\n      {\n        id: 'comment2',\n        author: { username: 'user3', name: 'User 3' },\n        comment: '.....'\n      }\n    ]\n  },\n  {\n    id: 'post2',\n    author: { username: 'user2', name: 'User 2' },\n    body: '......',\n    comments: [\n      {\n        id: 'comment3',\n        author: { username: 'user3', name: 'User 3' },\n        comment: '.....'\n      },\n      {\n        id: 'comment4',\n        author: { username: 'user1', name: 'User 1' },\n        comment: '.....'\n      },\n      {\n        id: 'comment5',\n        author: { username: 'user3', name: 'User 3' },\n        comment: '.....'\n      }\n    ]\n  }\n  // and repeat many times\n]\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Type Guards with Redux Toolkit's match Method\nDESCRIPTION: Example showing how to use Redux Toolkit's action creator match() method as a type guard to properly type-narrow an unknown action in TypeScript.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (todoAdded.match(someUnknownAction)) {\n  // action is now typed as a PayloadAction<Todo>\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to GitHub Pages\nDESCRIPTION: Command to build and deploy the website to GitHub Pages, requiring GitHub username and SSH configuration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/website/README.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> USE_SSH=1 npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with RTK Query\nDESCRIPTION: Demonstrates store setup for RTK Query including reducer configuration and middleware integration for enabling caching and other RTK Query features.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport { pokemonApi } from './services/pokemon'\n\nexport const store = configureStore({\n  reducer: {\n    [pokemonApi.reducerPath]: pokemonApi.reducer\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(pokemonApi.middleware)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Selector Factories for Unique Selector Instances\nDESCRIPTION: TypeScript example showing a selector factory pattern used to create unique memoized selector instances, which is a common solution for caching issues but cannot be directly used with createSlice.selectors.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport const makeSelectTodosByAuthor = () =>\n  createSelector(\n    (state: RootState) => state.todos.todos,\n    (state: RootState, author: string) => author,\n    (todos, author) => todos.filter(todo => todo.author === author)\n  )\n\nfunction AuthorTodos({ author }: { author: string }) {\n  const selectTodosByAuthor = useMemo(makeSelectTodosByAuthor, [])\n  const todos = useSelector(state => selectTodosByAuthor(state, author))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Component\nDESCRIPTION: Updates the LoginPage component to handle form submission and dispatch login thunk actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useAppDispatch, useAppSelector } from '@/app/hooks'\nimport { selectAllUsers } from '@/features/users/usersSlice'\nimport { login } from './authSlice'\n\nexport const LoginPage = () => {\n  const dispatch = useAppDispatch()\n  const users = useAppSelector(selectAllUsers)\n  const navigate = useNavigate()\n\n  const handleSubmit = async (e: React.FormEvent<LoginPageFormElements>) => {\n    e.preventDefault()\n    const username = e.currentTarget.elements.username.value\n    await dispatch(login(username))\n    navigate('/posts')\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Updated Reducer Type Definition with PreloadedState Generic in Redux\nDESCRIPTION: The Redux Reducer type now includes a third generic parameter for PreloadedState, which defaults to S (the state type). This improves type safety when working with preloaded states, especially with combineReducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Reducer<S, A extends Action, PreloadedState = S> = (\n  state: S | PreloadedState | undefined,\n  action: A\n) => S\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Core Library\nDESCRIPTION: Command to install the Redux core library using npm.\nSOURCE: https://github.com/reduxjs/redux/blob/master/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install redux\n```\n\n----------------------------------------\n\nTITLE: Customizing Middleware Return Values\nDESCRIPTION: This example demonstrates how middleware can override the return value from dispatch, using a simple middleware that always returns the value 42 regardless of the action.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst return42Middleware = storeAPI => next => action => {\n  const originalReturnValue = next(action)\n  return 42\n}\n\n// later\nconst result = dispatch(anyAction())\nconsole.log(result) // 42\n```\n\n----------------------------------------\n\nTITLE: Using match and type Methods with Redux-Saga\nDESCRIPTION: JavaScript example showing the different approaches to use action creators with redux-saga, including the original toString() method and the recommended match and type properties.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// before (still works)\nyield takeEvery(todoAdded, saga)\n\n// consider\nyield takeEvery(todoAdded.match, saga)\n// or\nyield takeEvery(todoAdded.type, saga)\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Reducer with Redux Undo\nDESCRIPTION: Shows how to enhance a todos reducer with the undoable function from redux-undo library in a separate reducer file.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport undoable from 'redux-undo'\n\n/* ... */\n\nconst todos = (state = [], action) => {\n  /* ... */\n}\n\nconst undoableTodos = undoable(todos)\n\nexport default undoableTodos\n```\n\n----------------------------------------\n\nTITLE: Overriding Redux Dependencies with NPM for Individual Packages\nDESCRIPTION: JSON configuration for overriding specific package dependencies in npm using the overrides field in package.json. This example shows how to force redux-persist to use Redux 5.0.0.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": {\n    \"redux-persist\": {\n      \"redux\": \"^5.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running linting checks for Redux\nDESCRIPTION: Command to execute only the linting process without running tests. This helps ensure code quality and adherence to project style guidelines.\nSOURCE: https://github.com/reduxjs/redux/blob/master/CONTRIBUTING.md#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Creating Thunk Action Creators with Arrow Functions\nDESCRIPTION: Shows the same thunk action creator implementation but using arrow functions instead of the function keyword. This more concise syntax is commonly used when writing Redux thunks.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/writing-logic-thunks.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fetchTodoById = todoId => async dispatch => {\n  const response = await client.get(`/fakeApi/todo/${todoId}`)\n  dispatch(todosLoaded(response.todos))\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient mapStateToProps Implementation\nDESCRIPTION: Example showing a common anti-pattern in mapStateToProps that creates new array references on each call, leading to unnecessary re-renders.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/ReactRedux.md#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mapStateToProps = state => {\n  return {\n    objects: state.objectIds.map(id => state.objects[id])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Object Syntax with createReducer and toString() Method\nDESCRIPTION: TypeScript example showing the now-removed object syntax for createReducer that relied on the toString() method of action creators. This pattern is no longer recommended.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst todoAdded = createAction<Todo>('todos/todoAdded')\n\ncreateReducer(initialState, {\n  [todoAdded]: (state, action) => {} // toString called here, 'todos/todoAdded'\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Redux Dependencies with NPM for All Packages\nDESCRIPTION: JSON configuration for applying a blanket override of Redux version for all dependent packages in npm using the overrides field in package.json.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": {\n    \"redux\": \"^5.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Links for Redux Documentation Navigation\nDESCRIPTION: Navigation links in markdown format for the main sections of Redux documentation including core concepts, learning resources, ecosystem, and examples.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Core Concepts](CoreConcepts.md)\n- [Learning Resources](LearningResources.md)\n- [Ecosystem](Ecosystem.md)\n- [Examples](Examples.md)\n```\n\n----------------------------------------\n\nTITLE: Extracting Case Reducers in Redux\nDESCRIPTION: Further refactors the reducer by splitting each case into its own function, improving clarity and maintainability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/RefactoringReducersExample.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setVisibilityFilter(state, action) {\n  return updateObject(state, { visibilityFilter: action.filter })\n}\n\nfunction addTodo(state, action) {\n  const newTodos = state.todos.concat({\n    id: action.id,\n    text: action.text,\n    completed: false\n  })\n\n  return updateObject(state, { todos: newTodos })\n}\n\nfunction toggleTodo(state, action) {\n  const newTodos = updateItemInArray(state.todos, action.id, todo => {\n    return updateObject(todo, { completed: !todo.completed })\n  })\n\n  return updateObject(state, { todos: newTodos })\n}\n\nfunction editTodo(state, action) {\n  const newTodos = updateItemInArray(state.todos, action.id, todo => {\n    return updateObject(todo, { text: action.text })\n  })\n\n  return updateObject(state, { todos: newTodos })\n}\n\nfunction appReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return setVisibilityFilter(state, action)\n    case 'ADD_TODO':\n      return addTodo(state, action)\n    case 'TOGGLE_TODO':\n      return toggleTodo(state, action)\n    case 'EDIT_TODO':\n      return editTodo(state, action)\n    default:\n      return state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Reducers Sequentially with reduce-reducers\nDESCRIPTION: Example of using reduce-reducers to compose reducers sequentially at the same level. It combines a standard combined reducer with another top-level reducer to create a root reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst combinedReducer = combineReducers({ users, posts, comments })\nconst rootReducer = reduceReducers(combinedReducer, otherTopLevelFeatureReducer)\n```\n\n----------------------------------------\n\nTITLE: State Machine Based Reducer Implementation\nDESCRIPTION: Shows a complete implementation of a state machine based user fetch reducer with separate handlers for each finite state. Includes state transition logic and action handling.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  FETCH_USER,\n  // ...\n} from './actions'\n\nconst IDLE_STATUS = 'idle';\nconst LOADING_STATUS = 'loading';\nconst SUCCESS_STATUS = 'success';\nconst FAILURE_STATUS = 'failure';\n\nconst fetchIdleUserReducer = (state, action) => {\n  // state.status is \"idle\"\n  switch (action.type) {\n    case FETCH_USER:\n      return {\n        ...state,\n        status: LOADING_STATUS\n      }\n    }\n    default:\n      return state;\n  }\n}\n\n// ... other reducers\n\nconst fetchUserReducer = (state, action) => {\n  switch (state.status) {\n    case IDLE_STATUS:\n      return fetchIdleUserReducer(state, action);\n    case LOADING_STATUS:\n      return fetchLoadingUserReducer(state, action);\n    case SUCCESS_STATUS:\n      return fetchSuccessUserReducer(state, action);\n    case FAILURE_STATUS:\n      return fetchFailureUserReducer(state, action);\n    default:\n      // this should never be reached\n      return state;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Property Instead of toString() for Type Safety\nDESCRIPTION: TypeScript example showing the recommended approach of using the static type property of action creators for better type safety compared to the toString() method.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst test = todoAdded.toString()\n//    ^? typed as string, rather than specific action type\n\nconst test = todoAdded.type\n//    ^? 'todos/todoAdded'\n\n// acts as a type predicate\nif (todoAdded.match(unknownAction)) {\n  unknownAction.payload\n  // ^? now typed as PayloadAction<Todo>\n}\n```\n\n----------------------------------------\n\nTITLE: TimeAgo Component Implementation\nDESCRIPTION: Reusable component for formatting timestamps as relative time descriptions using date-fns utilities.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { parseISO, formatDistanceToNow } from 'date-fns'\n\ninterface TimeAgoProps {\n  timestamp: string\n}\n\nexport const TimeAgo = ({ timestamp }: TimeAgoProps) => {\n  let timeAgo = ''\n  if (timestamp) {\n    const date = parseISO(timestamp)\n    const timePeriod = formatDistanceToNow(date)\n    timeAgo = `${timePeriod} ago`\n  }\n\n  return (\n    <time dateTime={timestamp} title={timestamp}>\n      &nbsp; <i>{timeAgo}</i>\n    </time>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Domain and Entity Data in Redux State\nDESCRIPTION: Example of a common pattern for organizing normalized entity data alongside domain data and UI state, with a dedicated 'entities' section for relational data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/NormalizingStateShape.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    simpleDomainData1: {....},\n    simpleDomainData2: {....},\n    entities : {\n        entityType1 : {....},\n        entityType2 : {....}\n    },\n    ui : {\n        uiSection1 : {....},\n        uiSection2 : {....}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing Nested Data with Normalizr\nDESCRIPTION: Example of using Normalizr to normalize nested JSON according to a schema. It defines entity schemas for users, comments, and articles with relationships between them.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = new schema.Entity('users')\nconst comment = new schema.Entity('comments', { commenter: user })\nconst article = new schema.Entity('articles', {\n  author: user,\n  comments: [comment]\n})\nconst normalizedData = normalize(originalData, article)\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Undoable Reducer Enhancer with Redux Store\nDESCRIPTION: Demonstrates how to use the custom undoable reducer enhancer with a todos reducer, create a Redux store with it, and dispatch actions including undo functionality.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// This is a reducer\nfunction todos(state = [], action) {\n  /* ... */\n}\n\n// This is also a reducer!\nconst undoableTodos = undoable(todos)\n\nimport { createStore } from 'redux'\nconst store = createStore(undoableTodos)\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Use Redux'\n})\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Implement Undo'\n})\n\nstore.dispatch({\n  type: 'UNDO'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Traditional Redux Connect Pattern in JavaScript\nDESCRIPTION: Example of a traditional Redux component using connect HOC with mapStateToProps and mapDispatchToProps implementations.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport {\n  todoToggled,\n  todoDeleted,\n  selectTodoById,\n  selectActiveTodoId\n} from './todosSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    todo: selectTodoById(state, ownProps.todoId),\n    activeTodoId: selectActiveTodoId(state)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    todoDeleted: id => dispatch(todoDeleted(id)),\n    todoToggled: id => dispatch(todoToggled(id))\n  }\n}\n\nfunction TodoListItem({ todo, activeTodoId, todoDeleted, todoToggled }) {\n  // rendering logic here\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListItem)\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Action Object\nDESCRIPTION: Example of a Redux action object with a type field and payload. This demonstrates the standard structure of Redux actions that describe events in the application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-2-concepts-data-flow.md#2025-04-07_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst addTodoAction = {\n  type: 'todos/todoAdded',\n  payload: 'Buy milk'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Store with Combined Reducers and Preloaded State in JavaScript\nDESCRIPTION: This snippet demonstrates creating a Redux store with combined reducers and a preloaded state, showing how it overrides the default state for 'a' but not 'b'.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/InitializingState.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\nconst store = createStore(combined, { a: 'horse' })\nconsole.log(store.getState()) // { a: 'horse', b: 'wat' }\n```\n\n----------------------------------------\n\nTITLE: Creating Simplified Selectors with Selectorator\nDESCRIPTION: Example of using Selectorator to create selectors with simplified syntax for common use cases. It shows how to select and combine values from different paths in the state tree.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst getBarBaz = createSelector(\n  ['foo.bar', 'baz'],\n  (bar, baz) => `${bar} ${baz}`\n)\ngetBarBaz({ foo: { bar: 'a' }, baz: 'b' }) // \"a b\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Selector Functions in Redux\nDESCRIPTION: Examples of different ways to write selector functions in Redux. Shows various function styles (arrow, declaration) and patterns for direct lookups and data derivation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Arrow function, direct lookup\nconst selectEntities = state => state.entities\n\n// Function declaration, mapping over an array to derive values\nfunction selectItemIds(state) {\n  return state.items.map(item => item.id)\n}\n\n// Function declaration, encapsulating a deep lookup\nfunction selectSomeSpecificField(state) {\n  return state.some.deeply.nested.field\n}\n\n// Arrow function, deriving values from an array\nconst selectItemsWhoseNamesStartWith = (items, namePrefix) =>\n  items.filter(item => item.name.startsWith(namePrefix))\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Hooks Component with TypeScript\nDESCRIPTION: Example of a React component using pre-typed Redux hooks with TypeScript support.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport {\n  todoToggled,\n  todoDeleted,\n  selectTodoById,\n  selectActiveTodoId\n} from './todosSlice'\n\ninterface TodoListItemProps {\n  todoId: string\n}\n\nfunction TodoListItem({ todoId }: TodoListItemProps) {\n  const dispatch = useAppDispatch()\n  const activeTodoId = useAppSelector(selectActiveTodoId)\n  const todo = useAppSelector(state => selectTodoById(state, todoId))\n}\n```\n\n----------------------------------------\n\nTITLE: State Structure Produced by combineReducers in Redux\nDESCRIPTION: Example showing how combineReducers namespaces each reducer's state under the corresponding keys passed to it, creating a structured state object.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/combineReducers.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrootReducer = combineReducers({potato: potatoReducer, tomato: tomatoReducer})\n// This would produce the following state object\n{\n  potato: {\n    // ... potatoes, and other state managed by the potatoReducer ...\n  },\n  tomato: {\n    // ... tomatoes, and other state managed by the tomatoReducer, maybe some nice sauce? ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Typical Redux Application State\nDESCRIPTION: A conceptual example showing the recommended approach for organizing Redux state into domain data, application state, and UI state categories. This structure separates concerns and avoids coupling state to UI components.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/BasicReducerStructure.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    domainData1 : {},\n    domainData2 : {},\n    appState1 : {},\n    appState2 : {},\n    ui : {\n        uiState1 : {},\n        uiState2 : {},\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Path-Based State Changes with redux-subscribe\nDESCRIPTION: Example of using redux-subscribe to create centralized subscriptions to state changes based on specific paths. It shows how to dispatch a subscription action for a specific user ID.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstore.dispatch( subscribe(\"users.byId.abcd\", \"subscription1\", () => {} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Immutable Updates in JavaScript\nDESCRIPTION: Demonstrates proper immutable update patterns using object spread operators and array methods that create new copies instead of mutating existing data.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-1-overview-concepts.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  a: {\n    // To safely update obj.a.c, we have to copy each piece\n    c: 3\n  },\n  b: 2\n}\n\nconst obj2 = {\n  // copy obj\n  ...obj,\n  // overwrite a\n  a: {\n    // copy obj.a\n    ...obj.a,\n    // overwrite c\n    c: 42\n  }\n}\n\nconst arr = ['a', 'b']\n// Create a new copy of arr, with \"c\" appended to the end\nconst arr2 = arr.concat('c')\n\n// or, we can make a copy of the original array:\nconst arr3 = arr.slice()\n// and mutate the copy:\narr3.push('c')\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Logger Middleware\nDESCRIPTION: A middleware that logs all actions and resulting states after they are dispatched. Uses console grouping for better organization of logs.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = store => next => action => {\n  console.group(action.type)\n  console.info('dispatching', action)\n  let result = next(action)\n  console.log('next state', store.getState())\n  console.groupEnd()\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Reducers in Redux\nDESCRIPTION: Example of importing and combining multiple reducers using Redux's combineReducers in a dedicated reducers index file.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/combineReducers.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { combineReducers } from '@reduxjs/toolkit'\nimport todos from './todos'\nimport counter from './counter'\n\nexport default combineReducers({\n  todos,\n  counter\n})\n```\n\n----------------------------------------\n\nTITLE: Thunk Middleware Action Creator\nDESCRIPTION: Advanced action creator using redux-thunk middleware for conditional action dispatching.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addTodoWithoutCheck(text) {\n  return {\n    type: 'ADD_TODO',\n    text\n  }\n}\n\nexport function addTodo(text) {\n  return function (dispatch, getState) {\n    if (getState().todos.length === 3) {\n      return\n    }\n    dispatch(addTodoWithoutCheck(text))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debouncing Redux Subscription Notifications\nDESCRIPTION: Example of using redux-batched-subscribe to debounce subscription notifications. It creates a store enhancer that uses Lodash's debounce function to delay notification of subscribers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst debounceNotify = _.debounce(notify => notify())\nconst store = configureStore({\n  reducer,\n  enhancers: [batchedSubscribe(debounceNotify)]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Selectors in Redux createSlice - TypeScript\nDESCRIPTION: Demonstrates how to define selectors directly inside createSlice instead of as standalone functions. The selectors receive only the slice state rather than the entire RootState.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    /* omit reducer logic */\n  },\n  selectors: {\n    selectAllPosts: postsState => postsState,\n    selectPostById: (postsState, postId: string) => {\n      return postsState.find(post => post.id === postId)\n    }\n  }\n})\n\nexport const { selectAllPosts, selectPostById } = postsSlice.selectors\n\nexport default postsSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Crash Reporter Middleware\nDESCRIPTION: A middleware that captures and reports exceptions that occur during action dispatching, using Raven for error reporting.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst crashReporter = store => next => action => {\n  try {\n    return next(action)\n  } catch (err) {\n    console.error('Caught an exception!', err)\n    Raven.captureException(err, {\n      extra: {\n        action,\n        state: store.getState()\n      }\n    })\n    throw err\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Action Creators\nDESCRIPTION: Example of action creator functions that generate todo actions for adding and removing items.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/api/bindActionCreators.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function addTodo(text) {\n  return {\n    type: 'ADD_TODO',\n    text\n  }\n}\n\nexport function removeTodo(id) {\n  return {\n    type: 'REMOVE_TODO',\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Action Creator Implementation\nDESCRIPTION: Basic action creator function implementation in a separate file.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function addTodo(text) {\n  return {\n    type: 'ADD_TODO',\n    text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Multiple Actions for User Logout in Redux\nDESCRIPTION: This snippet demonstrates dispatching separate actions for user logout and clearing user data, which is considered duplicate behavior.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ndispatch(userLoggedOut())\n// highlight-start\n// This seems like it's duplicate behavior\ndispatch(clearUserData())\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Toolkit using npm or yarn\nDESCRIPTION: Commands to install Redux Toolkit, which includes the Redux core and other essential packages for building Redux applications.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Installation.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install @reduxjs/toolkit\n\n# Yarn\nyarn add @reduxjs/toolkit\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Timeout Scheduler Middleware\nDESCRIPTION: A middleware that handles delayed actions by checking for a meta.delay property and scheduling the action execution using setTimeout.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeoutScheduler = store => next => action => {\n  if (!action.meta || !action.meta.delay) {\n    return next(action)\n  }\n\n  const timeoutId = setTimeout(() => next(action), action.meta.delay)\n\n  return function cancel() {\n    clearTimeout(timeoutId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Pattern for Redux Action Handling\nDESCRIPTION: While switch statements are the conventional approach for handling different action types in Redux reducers, alternatives like if statements or lookup tables are equally valid. The only requirement is that reducers follow the (state, action) => newState pattern.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/Reducers.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ACTION_TYPE':\n      return newState\n    default:\n      return state\n  }\n```\n\n----------------------------------------\n\nTITLE: Converting Redux Connect to Hooks Pattern in JavaScript\nDESCRIPTION: Demonstration of converting a connect-based component to use React-Redux hooks (useSelector and useDispatch).\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  todoAdded,\n  todoToggled,\n  selectTodoById,\n  selectActiveTodoId\n} from './todosSlice'\n\nexport function TodoListItem({ todoId }) {\n  const dispatch = useDispatch()\n  const activeTodoId = useSelector(selectActiveTodoId)\n  const todo = useSelector(state => selectTodoById(state, todoId))\n\n  const handleToggleClick = () => {\n    dispatch(todoToggled(todoId))\n  }\n\n  const handleDeleteClick = () => {\n    dispatch(todoDeleted(todoId))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Redux Example Sandbox Embedding\nDESCRIPTION: HTML iframe element embedding a CodeSandbox example demonstrating Redux concepts with TypeScript implementation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  class=\"codesandbox\"\n  src=\"https://codesandbox.io/embed/github/reduxjs/redux-essentials-example-app/tree/ts-checkpoint-4-listenerToasts?fontsize=14&hidenavigation=1&module=%2fsrc%2Ffeatures%2Fposts%2FpostsSlice.ts&theme=dark&runonclick=1\"\n  title=\"redux-essentials-example\"\n  allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Form Handling in Counter Component\nDESCRIPTION: Example of form implementation within the Counter component, demonstrating local state management with useState for form inputs.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst [incrementAmount, setIncrementAmount] = useState('2')\n\nconst incrementValue = Number(incrementAmount) || 0\n\nreturn (\n  <div className={styles.row}>\n    <input\n      className={styles.textbox}\n      aria-label=\"Set increment amount\"\n      value={incrementAmount}\n      onChange={e => setIncrementAmount(e.target.value)}\n    />\n    <button\n      className={styles.button}\n      onClick={() => dispatch(incrementByAmount(incrementValue))}\n    >\n      Add Amount\n    </button>\n    <button\n      className={styles.asyncButton}\n      onClick={() => dispatch(incrementAsync(incrementValue))}\n    >\n      Add Async\n    </button>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining State Type in Redux\nDESCRIPTION: Defines the type signature for State in Redux using Flow notation. State can be of any type, but is typically an object representing the entire state tree of a Redux application.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntype State = any\n```\n\n----------------------------------------\n\nTITLE: Immutability Issues with Array Operations in mapStateToProps\nDESCRIPTION: Example demonstrating how immutable array operations in mapStateToProps can cause unnecessary re-renders by always returning new object references.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/ImmutableData.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// A JavaScript array's 'filter' method treats the array as immutable,\n// and returns a filtered copy of the array.\nconst getVisibleTodos = todos => todos.filter(t => !t.completed)\n\nconst state = {\n  todos: [\n    {\n      text: 'do todo 1',\n      completed: false\n    },\n    {\n      text: 'do todo 2',\n      completed: true\n    }\n  ]\n}\n\nconst mapStateToProps = state => ({\n  // getVisibleTodos() always returns a new array, and so the\n  // 'visibleToDos' prop will always reference a different array,\n  // causing the wrapped component to re-render, even if the array's\n  // values haven't changed\n  visibleToDos: getVisibleTodos(state.todos)\n})\n\nconst a = mapStateToProps(state)\n//  Call mapStateToProps(state) again with exactly the same arguments\nconst b = mapStateToProps(state)\n\na.visibleToDos\n//> { \"completed\": false, \"text\": \"do todo 1\" }\n\nb.visibleToDos\n//> { \"completed\": false, \"text\": \"do todo 1\" }\n\na.visibleToDos === b.visibleToDos\n//> false\n```\n\n----------------------------------------\n\nTITLE: ConfigureStore with Enhancers Callback Pattern\nDESCRIPTION: Example showing the required callback pattern for configureStore's enhancers option in Redux Toolkit 2.0, demonstrating how to customize the autoBatch enhancer settings.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = configureStore({\n  reducer,\n  enhancers: getDefaultEnhancers => {\n    return getDefaultEnhancers({\n      autoBatch: { type: 'tick' }\n    }).concat(myEnhancer)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Redux Action JSON Parsing Example\nDESCRIPTION: Demonstrates how JSON parsing returns plain JavaScript objects rather than class instances, explaining why Redux prefers plain objects over classes for actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/DesignDecisions.md#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nJSON.parse(string)\n```\n\n----------------------------------------\n\nTITLE: Color Filter Action Creator Implementation\nDESCRIPTION: Shows implementation of a color filter action creator with multiple parameters\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-7-standard-patterns.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const colorFilterChanged = (color, changeType) => {\n  return {\n    type: 'filters/colorFilterChanged',\n    payload: { color, changeType }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Type in Redux\nDESCRIPTION: Specifies the type signature for Action in Redux. An Action is a plain object that must have a 'type' field and can contain additional data for state updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype Action = Object\n```\n\n----------------------------------------\n\nTITLE: Middleware Signature Pattern in Redux\nDESCRIPTION: Demonstrates the curried function signature used for Redux middleware, showing how middleware functions are structured with triple-nested functions to access store API, next middleware, and action.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/DesignDecisions.md#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst middleware = storeAPI => next => action => {}\n```\n\n----------------------------------------\n\nTITLE: ConfigureStore with Middleware Callback Pattern\nDESCRIPTION: Example showing the required callback pattern for configureStore's middleware option in Redux Toolkit 2.0. This prevents accidental overwriting of default middleware.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware => {\n    // WARNING: this means that _none_ of the default middleware are added!\n    return [myMiddleware]\n    // or for TS users, use:\n    // return new Tuple(myMiddleware)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Redux Middleware\nDESCRIPTION: Example of testing a Redux middleware implementation similar to redux-thunk, showing how to test function actions and regular actions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/WritingTests.mdx#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst thunkMiddleware =\n  ({ dispatch, getState }) =>\n  next =>\n  action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState)\n    }\n\n    return next(action)\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst create = () => {\n  const store = {\n    getState: jest.fn(() => ({})),\n    dispatch: jest.fn()\n  }\n  const next = jest.fn()\n\n  const invoke = action => thunkMiddleware(store)(next)(action)\n\n  return { store, next, invoke }\n}\n\ntest('passes through non-function action', () => {\n  const { next, invoke } = create()\n  const action = { type: 'TEST' }\n  invoke(action)\n  expect(next).toHaveBeenCalledWith(action)\n})\n\ntest('calls the function', () => {\n  const { invoke } = create()\n  const fn = jest.fn()\n  invoke(fn)\n  expect(fn).toHaveBeenCalled()\n})\n\ntest('passes dispatch and getState', () => {\n  const { store, invoke } = create()\n  invoke((dispatch, getState) => {\n    dispatch('TEST DISPATCH')\n    getState()\n  })\n  expect(store.dispatch).toHaveBeenCalledWith('TEST DISPATCH')\n  expect(store.getState).toHaveBeenCalled()\n})\n```\n\n----------------------------------------\n\nTITLE: State after Redo Action in Redux\nDESCRIPTION: This code example shows how the state changes after a Redo action, moving an item from the future array to the present state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  counter: {\n    past: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    present: 9,\n    future: [10]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Store Creator Type in Redux\nDESCRIPTION: Defines the type signature for a Store Creator in Redux. A Store Creator is a function that creates and returns a Redux store.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/thinking-in-redux/Glossary.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntype StoreCreator = (reducer: Reducer, preloadedState: ?State) => Store\n```\n\n----------------------------------------\n\nTITLE: Redux Store Dispatch Pattern\nDESCRIPTION: Shows how Redux allows dispatching an array of actions using redux-batch enhancement.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/DesignDecisions.md#2025-04-07_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nstore.dispatch()\n```\n\n----------------------------------------\n\nTITLE: Migration from Object Syntax to Builder Callback in createReducer and createSlice\nDESCRIPTION: Example showing how to migrate from the deprecated object syntax to the builder callback pattern in Redux Toolkit's createReducer and createSlice.extraReducers APIs. The builder callback form works better with TypeScript.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst todoAdded = createAction('todos/todoAdded')\n\ncreateReducer(initialState, {\n  [todoAdded]: (state, action) => {}\n})\n\ncreateSlice({\n  name,\n  initialState,\n  reducers: {\n    /* case reducers here */\n  },\n  extraReducers: {\n    [todoAdded]: (state, action) => {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dispatching Action with Applied Middleware in JavaScript\nDESCRIPTION: This snippet demonstrates how to dispatch an action to a store with applied middleware. The action will flow through both logger and crashReporter middleware.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Will flow through both logger and crashReporter middleware!\nstore.dispatch(addTodo('Use Redux'))\n```\n\n----------------------------------------\n\nTITLE: Legacy Redux Store Setup with createStore\nDESCRIPTION: A typical legacy Redux store setup that combines reducers, creates middleware enhancer with thunk, adds Redux DevTools, and calls createStore.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport { thunk } from 'redux-thunk'\n\nimport postsReducer from '../reducers/postsReducer'\nimport usersReducer from '../reducers/usersReducer'\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  users: usersReducer\n})\n\nconst middlewareEnhancer = applyMiddleware(thunk)\n\nconst composeWithDevTools =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst composedEnhancers = composeWithDevTools(middlewareEnhancer)\n\nconst store = createStore(rootReducer, composedEnhancers)\n```\n\n----------------------------------------\n\nTITLE: Installing a Redux App Example Using degit\nDESCRIPTION: Commands to create a local copy of either the basic Redux Toolkit app structure example or the full Redux Toolkit template for Vite using degit.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit reduxjs/redux-templates/packages/rtk-app-structure-example my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit reduxjs/redux-templates/packages/vite-template-redux my-app\n```\n\n----------------------------------------\n\nTITLE: Using mergeProps for Combined State and Dispatch Access in Redux\nDESCRIPTION: Demonstrates the recommended pattern for combining state and dispatch props in Redux using mergeProps, the third argument to connect(). This approach avoids performance overhead from recreating dispatch functions on every state update.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/DesignDecisions.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)\n```\n\n----------------------------------------\n\nTITLE: Creating UndoRedo React Component\nDESCRIPTION: A React component that renders Undo and Redo buttons for a Redux application with redux-undo integration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\n\n/* ... */\n\nlet UndoRedo = ({ canUndo, canRedo, onUndo, onRedo }) => (\n  <p>\n    <button onClick={onUndo} disabled={!canUndo}>\n      Undo\n    </button>\n    <button onClick={onRedo} disabled={!canRedo}>\n      Redo\n    </button>\n  </p>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Action Dispatch with Logging\nDESCRIPTION: Simple example of manually logging Redux actions and state changes by wrapping a dispatch call.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst action = addTodo('Use Redux')\n\nconsole.log('dispatching', action)\nstore.dispatch(action)\nconsole.log('next state', store.getState())\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Redux Reducer\nDESCRIPTION: Example of a simple Redux reducer that handles state updates immutably based on action types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-1-overview-concepts.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialState = { value: 0 }\n\nfunction counterReducer(state = initialState, action) {\n  // Check to see if the reducer cares about this action\n  if (action.type === 'counter/increment') {\n    // If so, make a copy of `state`\n    return {\n      ...state,\n      // and update the copy with the new value\n      value: state.value + 1\n    }\n  }\n  // otherwise return the existing state unchanged\n  return state\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with a Root Reducer in JavaScript\nDESCRIPTION: Example of passing a pre-combined root reducer function directly to configureStore when creating a Redux store, as an alternative to passing an object of slice reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = configureStore({\n  reducer: rootReducer\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Store Injection in Redux Application Entry Point\nDESCRIPTION: Code for the application entry point that imports the Redux store and injects it into the API module. This completes the store injection pattern by providing the store reference during application initialization.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/CodeStructure.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport store from './app/store'\nimport { injectStore } from './common/api'\ninjectStore(store)\n```\n\n----------------------------------------\n\nTITLE: Top-Level History State Design in Redux\nDESCRIPTION: This snippet shows a design approach where a single top-level history tracks changes to multiple counters in the application state.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ImplementingUndoHistory.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  past: [\n    { counterA: 1, counterB: 1 },\n    { counterA: 1, counterB: 0 },\n    { counterA: 0, counterB: 0 }\n  ],\n  present: { counterA: 2, counterB: 1 },\n  future: []\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Redux Dependencies with Yarn for Individual Packages\nDESCRIPTION: JSON configuration for overriding specific package dependencies in Yarn using the resolutions field in package.json. This example forces redux-persist to use Redux 5.0.0.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrations/migrating-rtk-2.md#2025-04-07_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"redux-persist/redux\": \"^5.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store with Preloaded State in JavaScript\nDESCRIPTION: This snippet shows how to create a Redux store with a preloaded state of 42, overriding the default state in the reducer.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/InitializingState.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'redux'\nconst store = createStore(counter, 42)\nconsole.log(store.getState()) // 42\n```\n\n----------------------------------------\n\nTITLE: Safe Immutable State Update in Redux\nDESCRIPTION: This snippet shows the correct way to update state in Redux by creating a copy of the state object and then modifying the copy. This approach maintains immutability.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-2-app-structure.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ This is safe, because we made a copy\nreturn {\n  ...state,\n  value: 123\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Redux Store to Observable Pattern\nDESCRIPTION: A utility function that exposes a Redux store as an observable, enabling integration with RxJS or other reactive programming libraries. The function creates a subscription that emits state updates whenever the store changes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/PriorArt.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction toObservable(store) {\n  return {\n    subscribe({ next }) {\n      const unsubscribe = store.subscribe(() => next(store.getState()))\n      next(store.getState())\n      return { unsubscribe }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Action Creator Usage\nDESCRIPTION: Example showing incorrect usage of an action creator without proper dispatching.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/Troubleshooting.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react'\nimport { addTodo } from './TodoActions'\n\nclass AddTodo extends Component {\n  handleClick() {\n    // Won't work!\n    addTodo('Fix the issue')\n  }\n\n  render() {\n    return <button onClick={() => this.handleClick()}>Add</button>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Action Creator Definition\nDESCRIPTION: Example of defining a Redux action creator function that returns an action object.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/Troubleshooting.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport function addTodo(text) {\n  return { type: 'ADD_TODO', text }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Thunk Package\nDESCRIPTION: Command to install the redux-thunk package from NPM\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install redux-thunk\n```\n\n----------------------------------------\n\nTITLE: Creating Redux Actions\nDESCRIPTION: Example of a basic Redux action object structure with type and payload fields.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-1-overview-concepts.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst addTodoAction = {\n  type: 'todos/todoAdded',\n  payload: 'Buy milk'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store\nDESCRIPTION: Creates a Redux store using the Redux.createStore API and the previously defined counterReducer. The store will be responsible for holding the application state and handling state updates through the reducer function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-1-overview.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a new Redux store with the `createStore` function,\n// and use the `counterReducer` for the update logic\nconst store = Redux.createStore(counterReducer)\n```\n\n----------------------------------------\n\nTITLE: Adding Slice Reducers to the Redux Store\nDESCRIPTION: Imports the counter reducer and adds it to the Redux store configuration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/quick-start.md#2025-04-07_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from '../features/counter/counterSlice'\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Slice Reducers to the Redux Store\nDESCRIPTION: Imports the counter reducer and adds it to the Redux store configuration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/quick-start.md#2025-04-07_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from '../features/counter/counterSlice'\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Redux Tutorial Video Embed Component\nDESCRIPTION: React component implementation for embedding a YouTube video about Redux Toolkit tutorial using the LiteYouTubeEmbed component.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/videos.md#2025-04-07_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<LiteYouTubeEmbed\n    id=\"NqzdVN2tyvQ\"\n    title=\"Dave Gray - Redux Toolkit Complete Tutorial\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Correct Action Creator Usage with React-Redux\nDESCRIPTION: Proper implementation showing how to connect a React component to Redux and dispatch actions correctly using react-redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/Troubleshooting.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from './TodoActions'\n\nclass AddTodo extends Component {\n  handleClick() {\n    // Works!\n    this.props.dispatch(addTodo('Fix the issue'))\n  }\n\n  render() {\n    return <button onClick={() => this.handleClick()}>Add</button>\n  }\n}\n\n// In addition to the state, `connect` puts `dispatch` in our props.\nexport default connect()(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions to Redux Store\nDESCRIPTION: Demonstrates how to dispatch actions to update Redux store state using both action objects and action creators.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-1-overview-concepts.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstore.dispatch({ type: 'counter/increment' })\n\nconsole.log(store.getState())\n// {value: 1}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Interactive Watch Mode\nDESCRIPTION: Command to launch the test runner in interactive watch mode. This allows for continuous testing while developing, automatically re-running tests as files change.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter-ts/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Basic Redux UI Integration Example\nDESCRIPTION: Demonstrates the core steps of integrating Redux with a UI layer using a counter example, including store creation, subscription, state updates and event handling.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = Redux.createStore(counterReducer)\n\nstore.subscribe(render)\n\nconst valueEl = document.getElementById('value')\n\nfunction render() {\n  const state = store.getState()\n  const newValue = state.value.toString()\n\n  valueEl.innerHTML = newValue\n}\n\nrender()\n\ndocument.getElementById('increment').addEventListener('click', function () {\n  store.dispatch({ type: 'counter/incremented' })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing YouTube Embed Components in Markdown\nDESCRIPTION: This code snippet imports the LiteYouTubeEmbed component and its associated CSS for embedding a YouTube video about modern Redux on the page.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/tutorials-index.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiteYouTubeEmbed from 'react-lite-youtube-embed';\nimport 'react-lite-youtube-embed/dist/LiteYouTubeEmbed.css'\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux RAF Scheduler Middleware\nDESCRIPTION: A middleware that schedules actions to be dispatched within requestAnimationFrame loops, useful for animation-related state updates.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/understanding/history-and-design/middleware.md#2025-04-07_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst rafScheduler = store => next => {\n  const queuedActions = []\n  let frame = null\n\n  function loop() {\n    frame = null\n    try {\n      if (queuedActions.length) {\n        next(queuedActions.shift())\n      }\n    } finally {\n      maybeRaf()\n    }\n  }\n\n  function maybeRaf() {\n    if (queuedActions.length && !frame) {\n      frame = requestAnimationFrame(loop)\n    }\n  }\n\n  return action => {\n    if (!action.meta || !action.meta.raf) {\n      return next(action)\n    }\n\n    queuedActions.push(action)\n    maybeRaf()\n\n    return function cancel() {\n      queuedActions = queuedActions.filter(a => a !== action)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Derived Selector Function in JavaScript\nDESCRIPTION: A more complex selector that derives data from the Redux state, filtering todos to count how many are marked as completed. This demonstrates how selectors can transform state data before components use it.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-5-ui-and-react.md#2025-04-07_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst selectTotalCompletedTodos = state => {\n  const completedTodos = state.todos.filter(todo => todo.completed)\n  return completedTodos.length\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notifications Slice\nDESCRIPTION: Creates a new slice for handling notifications with async thunk for fetching notifications from the server API.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-6-performance-normalization.md#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice } from '@reduxjs/toolkit'\nimport { client } from '@/api/client'\nimport type { RootState } from '@/app/store'\nimport { createAppAsyncThunk } from '@/app/withTypes'\n\nexport interface ServerNotification {\n  id: string\n  date: string\n  message: string\n  user: string\n}\n\nexport const fetchNotifications = createAppAsyncThunk(\n  'notifications/fetchNotifications',\n  async (_unused, thunkApi) => {\n    const allNotifications = selectAllNotifications(thunkApi.getState())\n    const [latestNotification] = allNotifications\n    const latestTimestamp = latestNotification ? latestNotification.date : ''\n    const response = await client.get<ServerNotification[]>(\n      `/fakeApi/notifications?since=${latestTimestamp}`\n    )\n    return response.data\n  }\n)\n\nconst initialState: ServerNotification[] = []\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      state.push(...action.payload)\n      state.sort((a, b) => b.date.localeCompare(a.date))\n    })\n  }\n})\n\nexport default notificationsSlice.reducer\n\nexport const selectAllNotifications = (state: RootState) => state.notifications\n```\n\n----------------------------------------\n\nTITLE: Updating User Selectors to Use RTK Query Cache\nDESCRIPTION: This snippet shows how to update the user selectors to use the RTK Query cache instead of the separate users slice. It creates new selectors that read from the cache and replaces the existing entity adapter selectors.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSelector } from '@reduxjs/toolkit'\nimport { apiSlice } from '@/features/api/apiSlice'\nimport { selectCurrentUsername } from '@/features/auth/authSlice'\n\nconst emptyUsers: User[] = []\n\nexport const selectUsersResult = apiSlice.endpoints.getUsers.select()\n\nexport const selectAllUsers = createSelector(\n  selectUsersResult,\n  usersResult => usersResult?.data ?? emptyUsers\n)\n\nexport const selectUserById = createSelector(\n  selectAllUsers,\n  (state: RootState, userId: string) => userId,\n  (users, userId) => users.find(user => user.id === userId)\n)\n\nexport const selectCurrentUser = (state: RootState) => {\n  const currentUsername = selectCurrentUsername(state)\n  if (currentUsername) {\n    return selectUserById(state, currentUsername)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleanup Package Dependencies\nDESCRIPTION: Command to remove redundant package dependencies that are included with Redux Toolkit.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall redux redux-thunk reselect\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Creators with Prepare Callback in createSlice\nDESCRIPTION: Shows how to use the 'prepare' callback in createSlice to customize the payload generation for the postAdded action. This separates the reducer logic from the payload preparation logic.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action: PayloadAction<Post>) {\n        state.push(action.payload)\n      },\n      prepare(title: string, content: string) {\n        return {\n          payload: { id: nanoid(), title, content }\n        }\n      }\n    }\n    // other reducers here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing an Incorrect Thunk Function in Redux\nDESCRIPTION: An example of a problematic thunk implementation that lacks proper parameter access for making an API call to save a new todo item.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function saveNewTodo(dispatch, getState) {\n  // ❌ We need to have the text of the new todo, but where is it coming from?\n  // highlight-next-line\n  const initialTodo = { text }\n  const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n  dispatch({ type: 'todos/todoAdded', payload: response.todo })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Websocket and Cache Management in Notifications Slice\nDESCRIPTION: This snippet demonstrates the implementation of the onCacheEntryAdded lifecycle handler for the getNotifications endpoint. It sets up a websocket connection, handles incoming messages, updates the cache, and manages the lifecycle of the cache entry.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createEntityAdapter,\n  createSlice,\n  createSelector,\n  // highlight-start\n  createAction,\n  isAnyOf\n  // highlight-end\n} from '@reduxjs/toolkit'\n// omit imports and other code\n\n// highlight-next-line\nconst notificationsReceived = createAction<ServerNotification[]>('notifications/notificationsReceived')\n\nexport const apiSliceWithNotifications = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getNotifications: builder.query<ServerNotification[], void>({\n      query: () => '/notifications',\n      // highlight-start\n      async onCacheEntryAdded(arg, lifecycleApi) {\n        // create a websocket connection when the cache subscription starts\n        const ws = new WebSocket('ws://localhost')\n        try {\n          // wait for the initial query to resolve before proceeding\n          await lifecycleApi.cacheDataLoaded\n\n          // when data is received from the socket connection to the server,\n          // update our query result with the received message\n          const listener = (event: MessageEvent<string>) => {\n            const message: {\n              type: 'notifications'\n              payload: ServerNotification[]\n            } = JSON.parse(event.data)\n            switch (message.type) {\n              case 'notifications': {\n                lifecycleApi.updateCachedData(draft => {\n                  // Insert all received notifications from the websocket\n                  // into the existing RTKQ cache array\n                  draft.push(...message.payload)\n                  draft.sort((a, b) => b.date.localeCompare(a.date))\n                })\n\n                // Dispatch an additional action so we can track \"read\" state\n                lifecycleApi.dispatch(notificationsReceived(message.payload))\n                break\n              }\n              default:\n                break\n            }\n          }\n\n          ws.addEventListener('message', listener)\n        } catch {\n          // no-op in case `cacheEntryRemoved` resolves before `cacheDataLoaded`,\n          // in which case `cacheDataLoaded` will throw\n        }\n        // cacheEntryRemoved will resolve when the cache subscription is no longer active\n        await lifecycleApi.cacheEntryRemoved\n        // perform cleanup steps once the `cacheEntryRemoved` promise resolves\n        ws.close()\n      }\n    })\n    // highlight-end\n  })\n})\n\nexport const { useGetNotificationsQuery } = apiSliceWithNotifications\n\n// highlight-start\nconst matchNotificationsReceived = isAnyOf(\n  notificationsReceived,\n  apiSliceWithNotifications.endpoints.getNotifications.matchFulfilled,\n)\n// highlight-end\n\n// omit other code\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: { /* omit reducers */  },\n  extraReducers(builder) {\n    // highlight-next-line\n    builder.addMatcher(matchNotificationsReceived, (state, action) => {\n     // omit logic\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store with configureStore in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a Redux store using the configureStore function from Redux Toolkit. It includes a basic counterReducer as an example and shows how to structure the store with TypeScript typing.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport type { Action } from '@reduxjs/toolkit'\n\ninterface CounterState {\n  value: number\n}\n\n// An example slice reducer function that shows how a Redux reducer works inside.\n// We'll replace this soon with real app logic.\nfunction counterReducer(state: CounterState = { value: 0 }, action: Action) {\n  switch (action.type) {\n    // Handle actions here\n    default: {\n      return state\n    }\n  }\n}\n\nexport const store = configureStore({\n  // Pass in the root reducer setup as the `reducer` argument\n  reducer: {\n    // Declare that `state.counter` will be updated by the `counterReducer` function\n    counter: counterReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store with configureStore in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a Redux store using the configureStore function from Redux Toolkit. It includes a basic counterReducer as an example and shows how to structure the store with TypeScript typing.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport type { Action } from '@reduxjs/toolkit'\n\ninterface CounterState {\n  value: number\n}\n\n// An example slice reducer function that shows how a Redux reducer works inside.\n// We'll replace this soon with real app logic.\nfunction counterReducer(state: CounterState = { value: 0 }, action: Action) {\n  switch (action.type) {\n    // Handle actions here\n    default: {\n      return state\n    }\n  }\n}\n\nexport const store = configureStore({\n  // Pass in the root reducer setup as the `reducer` argument\n  reducer: {\n    // Declare that `state.counter` will be updated by the `counterReducer` function\n    counter: counterReducer\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Toolkit Package\nDESCRIPTION: Command to add Redux Toolkit as a dependency to the project using npm.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-8-modern-redux.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reduxjs/toolkit\n```\n\n----------------------------------------\n\nTITLE: Exporting Redux Store Types in TypeScript\nDESCRIPTION: This code exports TypeScript types for the Redux store, dispatch function, and root state, which are inferred from the store configuration.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-3-data-flow.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\n// omit counter slice setup\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n})\n\n// Infer the type of `store`\nexport type AppStore = typeof store\n// Infer the `AppDispatch` type from the store itself\nexport type AppDispatch = typeof store.dispatch\n// Same for the `RootState` type\nexport type RootState = ReturnType<typeof store.getState>\n```\n\n----------------------------------------\n\nTITLE: Event-Based Action Example\nDESCRIPTION: Shows how to model Redux actions as events rather than setters, using a restaurant order example.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/style-guide/style-guide.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{ type: \"food/orderAdded\",  payload: {pizza: 1, coke: 1} }\n```\n\n----------------------------------------\n\nTITLE: Installing Todos Example\nDESCRIPTION: Setup instructions for the Todos example that shows state updates and component integration in Redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/todos\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Updating NotificationsList Component to Use Metadata with RTK Query\nDESCRIPTION: Updates the NotificationsList component to use the new metadata system for tracking read/unread status. Retrieves notifications from RTK Query and combines them with local state metadata to apply proper styling.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-8-rtk-query-advanced.md#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allNotificationsRead, useGetNotificationsQuery, selectMetadataEntities } from './notificationsSlice'\n\nexport const NotificationsList = () => {\n  const dispatch = useAppDispatch()\n  const { data: notifications = [] } = useGetNotificationsQuery()\n  const notificationsMetadata = useAppSelector(selectMetadataEntities)\n\n  useLayoutEffect(() => {\n    dispatch(allNotificationsRead())\n  })\n\n  const renderedNotifications = notifications.map((notification) => {\n\n      // Get the metadata object matching this notification\n    const metadata = notificationsMetadata[notification.id]\n    const notificationClassname = classnames('notification', {\n      // re-enable the `isNew` check for styling\n      new: metadata.isNew,\n    })\n\n    // omit rendering\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving Data During Rendering in React Components\nDESCRIPTION: Example of deriving data within a React component instead of storing it in state. This demonstrates calculating whether all todos are completed during the render process.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/deriving-data-selectors.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TodoList() {\n  const [todos, setTodos] = useState([])\n\n  // highlight-start\n  // Derive the data while rendering\n  const allTodosCompleted = todos.every(todo => todo.completed)\n  // highlight-end\n\n  // render with this value\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Types and Creators with TypeScript (Legacy Approach)\nDESCRIPTION: This snippet demonstrates a verbose legacy approach to defining action types and creators in TypeScript, which is not recommended with Redux Toolkit.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/migrating-to-modern-redux.mdx#2025-04-07_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ADD_TODO, TOGGLE_TODO } from '../constants/todos'\n\n// ❌ Common pattern: manually defining types for each action object\ninterface AddTodoAction {\n  type: typeof ADD_TODO\n  text: string\n  id: string\n}\n\ninterface ToggleTodoAction {\n  type: typeof TOGGLE_TODO\n  id: string\n}\n\n// ❌ Common pattern: an \"action type union\" of all possible actions\nexport type TodoActions = AddTodoAction | ToggleTodoAction\n\nexport const addTodo = (id: string, text: string): AddTodoAction => ({\n  type: ADD_TODO,\n  text,\n  id\n})\n\nexport const toggleTodo = (id: string): ToggleTodoAction => ({\n  type: TOGGLE_TODO,\n  id\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TodoMVC Example\nDESCRIPTION: Setup instructions for the classical TodoMVC implementation using Redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/todomvc\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mutable JavaScript Operations\nDESCRIPTION: Shows basic mutable operations on JavaScript objects and arrays, illustrating how default JavaScript mutations work.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-1-overview-concepts.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = { a: 1, b: 2 }\n// still the same object outside, but the contents have changed\nobj.b = 3\n\nconst arr = ['a', 'b']\n// In the same way, we can change the contents of this array\narr.push('c')\narr[1] = 'd'\n```\n\n----------------------------------------\n\nTITLE: Array Reduce Reference\nDESCRIPTION: Shows the similar pattern between Redux reducers and JavaScript's Array.prototype.reduce() method signature.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/PrerequisiteConcepts.md#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nArray.prototype.reduce(reducer, ?initialValue)\n```\n\n----------------------------------------\n\nTITLE: Mocking Asynchronous API Calls for Counter Service in JavaScript\nDESCRIPTION: This code snippet simulates an asynchronous API call to fetch a random counter value. It uses setTimeout to mimic network delay and returns a random integer between 1 and 100 through a callback function.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ServerRendering.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nexport function fetchCounter(callback) {\n  setTimeout(() => {\n    callback(getRandomInt(1, 100))\n  }, 500)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Universal Example\nDESCRIPTION: Setup instructions for the Universal example showing server-side rendering with Redux.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md#2025-04-07_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/reduxjs/redux.git\n\ncd redux/examples/universal\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Named Wrapper Reducer in Redux\nDESCRIPTION: Demonstrates a more generic higher-order reducer that accepts both a reducer function and a name identifier to filter actions based on a name property.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ReusingReducerLogic.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n\nfunction createNamedWrapperReducer(reducerFunction, reducerName) {\n  return (state, action) => {\n    const { name } = action\n    const isInitializationCall = state === undefined\n    if (name !== reducerName && !isInitializationCall) return state\n\n    return reducerFunction(state, action)\n  }\n}\n\nconst rootReducer = combineReducers({\n  counterA: createNamedWrapperReducer(counter, 'A'),\n  counterB: createNamedWrapperReducer(counter, 'B'),\n  counterC: createNamedWrapperReducer(counter, 'C')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Reducers with Default States in JavaScript\nDESCRIPTION: This example defines two simple reducers, 'a' and 'b', each with their own default state values.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/InitializingState.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction a(state = 'lol', action) {\n  return state\n}\n\nfunction b(state = 'wat', action) {\n  return state\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with Redux in Node.js\nDESCRIPTION: This snippet shows how to set up server-side rendering using Redux and React. It includes parsing request parameters, creating a Redux store, rendering React components to strings, and sending the pre-rendered page to the client.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ServerRendering.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport qs from 'qs' // Add this at the top of the file\nimport { renderToString } from 'react-dom/server'\n\nfunction handleRender(req, res) {\n  // Read the counter from the request, if provided\n  const params = qs.parse(req.query)\n  const counter = parseInt(params.counter, 10) || 0\n\n  // Compile an initial state\n  let preloadedState = { counter }\n\n  // Create a new Redux store instance\n  const store = createStore(counterApp, preloadedState)\n\n  // Render the component to a string\n  const html = renderToString(\n    <Provider store={store}>\n      <App />\n    </Provider>\n  )\n\n  // Grab the initial state from our Redux store\n  const finalState = store.getState()\n\n  // Send the rendered page back to the client\n  res.send(renderFullPage(html, finalState))\n}\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: This command runs the app in development mode, allowing you to view it in your browser and see live updates as you make changes.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter/README.md#2025-04-07_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementing Todos Thunk and Reducer\nDESCRIPTION: Implementation of a thunk function for fetching todos and the corresponding reducer logic\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/fundamentals/part-6-async-logic.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { client } from '../../api/client'\n\nconst initialState = []\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'todos/todosLoaded': {\n      return action.payload\n    }\n    default:\n      return state\n  }\n}\n\nexport async function fetchTodos(dispatch, getState) {\n  const response = await client.get('/fakeApi/todos')\n  dispatch({ type: 'todos/todosLoaded', payload: response.todos })\n}\n```\n\n----------------------------------------\n\nTITLE: Common Mistake: Reference Assignment\nDESCRIPTION: Shows an incorrect approach where a new variable reference is created but still points to the same object, leading to direct state mutation.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ImmutableUpdatePatterns.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateNestedState(state, action) {\n  let nestedState = state.nestedState\n  // ERROR: this directly modifies the existing object reference - don't do this!\n  nestedState.nestedField = action.data\n\n  return {\n    ...state,\n    nestedState\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Handler for Server-Side Rendering\nDESCRIPTION: Function to handle incoming requests, create Redux store, render React components to string, and send response.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ServerRendering.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToString } from 'react-dom/server'\n\nfunction handleRender(req, res) {\n  // Create a new Redux store instance\n  const store = createStore(counterApp)\n\n  // Render the component to a string\n  const html = renderToString(\n    <Provider store={store}>\n      <App />\n    </Provider>\n  )\n\n  // Grab the initial state from our Redux store\n  const preloadedState = store.getState()\n\n  // Send the rendered page back to the client\n  res.send(renderFullPage(html, preloadedState))\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the local development server which provides live preview of changes in a browser window.\nSOURCE: https://github.com/reduxjs/redux/blob/master/website/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Creating Memoized Selectors with Reselect\nDESCRIPTION: Example of using Reselect to create memoized selector functions for efficiently deriving data from the store state. This code calculates a tax amount based on subtotal and tax percentage.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Ecosystem.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst taxSelector = createSelector(\n  [subtotalSelector, taxPercentSelector],\n  (subtotal, taxPercent) => subtotal * (taxPercent / 100)\n)\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation: Insert and Remove Items\nDESCRIPTION: Shows immutable patterns for inserting and removing items from arrays using spread operator and slice methods.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/structuring-reducers/ImmutableUpdatePatterns.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction insertItem(array, action) {\n  return [\n    ...array.slice(0, action.index),\n    action.item,\n    ...array.slice(action.index)\n  ]\n}\n\nfunction removeItem(array, action) {\n  return [...array.slice(0, action.index), ...array.slice(action.index + 1)]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Redux tests\nDESCRIPTION: Command to execute the test suite for the Redux project. This verifies that the code is functioning correctly and hasn't introduced regressions.\nSOURCE: https://github.com/reduxjs/redux/blob/master/CONTRIBUTING.md#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Documentation Dependencies\nDESCRIPTION: Command to install all required npm dependencies for the Redux documentation website.\nSOURCE: https://github.com/reduxjs/redux/blob/master/website/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Updating Posts Slice with User Attribution\nDESCRIPTION: Extends the posts slice to include user attribution and updates the post interface with user field. Implements post addition and update logic with TypeScript types.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/tutorials/essentials/part-4-using-data.md#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Post {\n  id: string\n  title: string\n  content: string\n  user: string\n}\n\ntype PostUpdate = Pick<Post, 'id' | 'title' | 'content'>\n\nconst initialState: Post[] = [\n  { id: '1', title: 'First Post!', content: 'Hello!', user: '0' },\n  { id: '2', title: 'Second Post', content: 'More text', user: '2' }\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action: PayloadAction<Post>) {\n        state.push(action.payload)\n      },\n      prepare(title: string, content: string, userId: string) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            user: userId\n          }\n        }\n      }\n    },\n    postUpdated(state, action: PayloadAction<PostUpdate>) {\n      const { id, title, content } = action.payload\n      const existingPost = state.find(post => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using combineReducers for State Management in Redux\nDESCRIPTION: The combineReducers utility function helps manage separate slices of state with individual reducer functions. While commonly used, it's not required and can be replaced with custom reducer logic when more flexibility is needed for sharing state between reducers.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/faq/Reducers.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombineReducers({\n  sliceA: reducerA,\n  sliceB: reducerB\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning the Redux repository\nDESCRIPTION: Command for cloning the forked Redux repository to begin contributing to the project. This is the first step in the development process after forking the repository.\nSOURCE: https://github.com/reduxjs/redux/blob/master/CONTRIBUTING.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/your-username/redux.git\n```\n\n----------------------------------------\n\nTITLE: Installing Redux core package\nDESCRIPTION: Commands to install the Redux core package by itself using npm or yarn.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/introduction/Installation.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install redux\n\n# Yarn\nyarn add redux\n```\n\n----------------------------------------\n\nTITLE: Setting Default Web Crawler Access Rules in robots.txt\nDESCRIPTION: Configures default access rules for all web crawlers with no path restrictions. Uses the standard syntax defined by robotstxt.org protocol to allow complete site access to search engine bots.\nSOURCE: https://github.com/reduxjs/redux/blob/master/examples/counter-ts/public/robots.txt#2025-04-07_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Inline Action Dispatch Example\nDESCRIPTION: Example of dispatching an action directly using an object literal.\nSOURCE: https://github.com/reduxjs/redux/blob/master/docs/usage/ReducingBoilerplate.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndispatch({\n  type: 'ADD_TODO',\n  text: 'Use Redux'\n})\n```"
  }
]