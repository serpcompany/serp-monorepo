[
  {
    "owner": "pymupdf",
    "repo": "pymupdf",
    "content": "TITLE: Integrating PyMuPDF with LangChain\nDESCRIPTION: Code snippet showing how to use PyMuPDF with LangChain using their dedicated document loader. This allows for loading and processing PDF documents within the LangChain framework.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rag.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.document_loaders import PyMuPDFLoader\nloader = PyMuPDFLoader(\"example.pdf\")\ndata = loader.load()\n```\n\n----------------------------------------\n\nTITLE: Redacting Content from a PDF using PyMuPDF\nDESCRIPTION: This snippet demonstrates how to redact specific content from a PDF document using PyMuPDF. It searches for instances of \"Jane Doe\" on each page, adds redaction annotations to cover these instances, and then applies the redactions. The modified document is then saved with the redacted content removed.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\n# Open the PDF document\ndoc = pymupdf.open('test.pdf')\n\n# Iterate over each page of the document\nfor page in doc:\n    # Find all instances of \"Jane Doe\" on the current page\n    instances = page.search_for(\"Jane Doe\")\n\n    # Redact each instance of \"Jane Doe\" on the current page\n    for inst in instances:\n        page.add_redact_annot(inst)\n\n    # Apply the redactions to the current page\n    page.apply_redactions()\n\n# Save the modified document\ndoc.save('redacted_document.pdf')\n\n# Close the document\ndoc.close()\n```\n\n----------------------------------------\n\nTITLE: Importing PyMuPDF Module\nDESCRIPTION: Shows how to import the PyMuPDF module and check its version information.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pymupdf\n>>> print(pymupdf.__doc__)\nPyMuPDF 1.16.0: Python bindings for the MuPDF 1.16.0 library.\nVersion date: 2019-07-28 07:30:14.\nBuilt for Python 3.7 on win32 (64-bit).\n```\n\n----------------------------------------\n\nTITLE: Basic PDF Text Extraction with PyMuPDF in Python\nDESCRIPTION: This snippet demonstrates the fundamental usage of PyMuPDF for opening a PDF document and extracting text from its pages. It shows how to import the library, open a document file, iterate through pages, and extract plain text encoded as UTF-8.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf # imports the pymupdf library\ndoc = pymupdf.open(\"example.pdf\") # open a document\nfor page in doc: # iterate the document pages\n  text = page.get_text() # get plain text encoded as UTF-8\n\n```\n\n----------------------------------------\n\nTITLE: Saving a PDF document with comprehensive options in PyMuPDF\nDESCRIPTION: The save() method saves a PDF document in its current state with numerous options for compression, encryption, garbage collection, and formatting. It supports file paths, pathlib.Path objects, or file objects as output destinations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nsave(outfile, garbage=0, clean=False, deflate=False, deflate_images=False, deflate_fonts=False, incremental=False, ascii=False, expand=0, linear=False, pretty=False, no_new_id=False, encryption=PDF_ENCRYPT_NONE, permissions=-1, owner_pw=None, user_pw=None, use_objstms=0)\n```\n\n----------------------------------------\n\nTITLE: Opening Documents with PyMuPDF\nDESCRIPTION: Examples of different ways to open documents using PyMuPDF, including from files, memory, and creating new empty PDFs. Also shows context manager usage.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# from a file\ndoc = pymupdf.open(\"some.xps\")\n# handle wrong extension\ndoc = pymupdf.open(\"some.file\", filetype=\"xps\")\n\n# from memory, filetype is required if not a PDF\ndoc = pymupdf.open(\"xps\", mem_area)\ndoc = pymupdf.open(None, mem_area, \"xps\")\ndoc = pymupdf.open(stream=mem_area, filetype=\"xps\")\n\n# new empty PDF\ndoc = pymupdf.open()\ndoc = pymupdf.open(None)\ndoc = pymupdf.open(\"\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Table of Contents in PDF with PyMuPDF\nDESCRIPTION: This example shows how to retrieve, modify, and update a PDF's table of contents. It demonstrates getting the current TOC, changing a title entry, and then saving the modified TOC back to the document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\ndoc = pymupdf.open(\"test.pdf\")\ntoc = doc.get_toc()\nfor t in toc: print(t)                           # show what we have\ntoc[1][1] += \" modified by set_toc\"               # modify something\ndoc.set_toc(toc)                                  # replace outline tree\nfor t in doc.get_toc(): print(t)                  # demonstrate it worked\n```\n\n----------------------------------------\n\nTITLE: Opening a PDF File with PyMuPDF\nDESCRIPTION: Basic example of opening a PDF file using PyMuPDF. The open function creates a Document object, and Document() constructor can be used interchangeably with open().\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/how-to-open-a-file.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(\"a.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Images from PDF Pages with PyMuPDF\nDESCRIPTION: This example demonstrates how to extract all page-referenced images from a PDF document and save them as separate PNG files. It handles both RGB and CMYK images, converting the latter to RGB before saving.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(doc.page_count):\n    imglist = doc.get_page_images(i)\n    for img in imglist:\n        xref = img[0]                  # xref number\n        pix = pymupdf.Pixmap(doc, xref)   # make pixmap from image\n        if pix.n - pix.alpha < 4:      # can be saved as PNG\n            pix.save(\"p%s-%s.png\" % (i, xref))\n        else:                          # CMYK: must convert first\n            pix0 = pymupdf.Pixmap(pymupdf.csRGB, pix)\n            pix0.save(\"p%s-%s.png\" % (i, xref))\n            pix0 = None                # free Pixmap resources\n        pix = None                     # free Pixmap resources\n```\n\n----------------------------------------\n\nTITLE: Extracting Images from PDF with PyMuPDF\nDESCRIPTION: Extract and save all images from a PDF document, converting CMYK images to RGB format when necessary.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\n\nfor page_index in range(len(doc)): # iterate over pdf pages\n    page = doc[page_index] # get the page\n    image_list = page.get_images()\n\n    # print the number of images found on the page\n    if image_list:\n        print(f\"Found {len(image_list)} images on page {page_index}\")\n    else:\n        print(\"No images found on page\", page_index)\n\n    for image_index, img in enumerate(image_list, start=1): # enumerate the image list\n        xref = img[0] # get the XREF of the image\n        pix = pymupdf.Pixmap(doc, xref) # create a Pixmap\n\n        if pix.n - pix.alpha > 3: # CMYK: convert to RGB first\n            pix = pymupdf.Pixmap(pymupdf.csRGB, pix)\n\n        pix.save(\"page_%s-image_%s.png\" % (page_index, image_index)) # save the image as png\n        pix = None\n```\n\n----------------------------------------\n\nTITLE: Extracting PDF content as LlamaIndex document\nDESCRIPTION: Python code to extract PDF content and convert it directly to a LlamaIndex document format. This is useful for integrating with LLM and RAG systems.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf4llm/index.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf4llm\nllama_reader = pymupdf4llm.LlamaMarkdownReader()\nllama_docs = llama_reader.load_data(\"input.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Opening a Document with PyMuPDF\nDESCRIPTION: Demonstrates how to open a document using PyMuPDF's open function or Document constructor.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(filename)  # or pymupdf.Document(filename)\n```\n\n----------------------------------------\n\nTITLE: Extracting Tables from PDF Pages with PyMuPDF\nDESCRIPTION: This code snippet shows how to extract tables from a PDF page using PyMuPDF. It opens a PDF document, accesses the first page, finds tables on that page, and prints the content of the first table if any are found. The script uses the find_tables() method to locate and extract tables.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\nfrom pprint import pprint\n\ndoc = pymupdf.open(\"test.pdf\") # open document\npage = doc[0] # get the 1st page of the document\ntabs = page.find_tables() # locate and extract any tables on page\nprint(f\"{len(tabs.tables)} found on {page}\") # display number of found tables\n\nif tabs.tables:  # at least one table found?\n   pprint(tabs[0].extract())  # print content of first table\n```\n\n----------------------------------------\n\nTITLE: Adding Various Annotation Types in PyMuPDF\nDESCRIPTION: This script demonstrates how to add multiple types of annotations to a PDF page using PyMuPDF. It creates a variety of annotations including text, freetext, line, square, circle, polygon, and more.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-annotations.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/new-annots.py\n   :language: python\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Annotations from a PDF with PyMuPDF\nDESCRIPTION: This code snippet shows how to retrieve all annotations from a PDF document using PyMuPDF. It iterates through each page of the document and uses the annots() method to get all annotations on the page, printing the page number, annotation type, and rectangle for each annotation found.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\nfor page in doc:\n    for annot in page.annots():\n        print(f'Annotation on page: {page.number} with type: {annot.type} and rect: {annot.rect}')\n```\n\n----------------------------------------\n\nTITLE: Generating PNG Images from Document Pages in Python with PyMuPDF\nDESCRIPTION: A script that opens a document, iterates through its pages, renders each page to a PNG image, and saves them with sequential filenames. Works with any supported document type.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pymupdf  # import the bindings\nfname = sys.argv[1]  # get filename from command line\ndoc = pymupdf.open(fname)  # open document\nfor page in doc:  # iterate through the pages\n    pix = page.get_pixmap()  # render page to an image\n    pix.save(\"page-%i.png\" % page.number)  # store image as a PNG\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from PDF with PyMuPDF\nDESCRIPTION: Extract text content from a PDF file and write it to a text file with UTF-8 encoding. Includes page delimitation with form feed characters.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"a.pdf\") # open a document\nout = open(\"output.txt\", \"wb\") # create a text output\nfor page in doc: # iterate the document pages\n    text = page.get_text().encode(\"utf8\") # get plain text (is in UTF-8)\n    out.write(text) # write text of page\n    out.write(bytes((12,))) # write page delimiter (form feed 0x0C)\nout.close()\n```\n\n----------------------------------------\n\nTITLE: Opening PDF Files with PyMuPDF\nDESCRIPTION: Basic example of opening a PDF document using PyMuPDF library.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"a.pdf\") # open a document\n```\n\n----------------------------------------\n\nTITLE: Converting Documents to PDF with PyMuPDF\nDESCRIPTION: Script to convert various document formats (XPS, EPUB, FB2, CBZ, images) to PDF while preserving metadata, table of contents, and links. Handles multiple page documents and maintains document structure.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-common-issues-and-their-solutions.rst#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nimport pymupdf\nif not (list(map(int, pymupdf.VersionBind.split(\".\"))) >= [1,14,0]):\n    raise SystemExit(\"need PyMuPDF v1.14.0+\")\nfn = sys.argv[1]\n\nprint(\"Converting '%s' to '%s.pdf'\" % (fn, fn))\n\ndoc = pymupdf.open(fn)\n\nb = doc.convert_to_pdf()  # convert to pdf\npdf = pymupdf.open(\"pdf\", b)  # open as pdf\n\ntoc= doc.get_toc()  # table of contents of input\npdf.set_toc(toc)  # simply set it for output\nmeta = doc.metadata  # read and set metadata\nif not meta[\"producer\"]:\n    meta[\"producer\"] = \"PyMuPDF v\" + pymupdf.VersionBind\n\nif not meta[\"creator\"]:\n    meta[\"creator\"] = \"PyMuPDF PDF converter\"\nmeta[\"modDate\"] = pymupdf.get_pdf_now()\nmeta[\"creationDate\"] = meta[\"modDate\"]\npdf.set_metadata(meta)\n\n# now process the links\nlink_cnti = 0\nlink_skip = 0\nfor pinput in doc:  # iterate through input pages\n    links = pinput.get_links()  # get list of links\n    link_cnti += len(links)  # count how many\n    pout = pdf[pinput.number]  # read corresp. output page\n    for l in links:  # iterate though the links\n        if l[\"kind\"] == pymupdf.LINK_NAMED:  # we do not handle named links\n            print(\"named link page\", pinput.number, l)\n            link_skip += 1  # count them\n            continue\n        pout.insert_link(l)  # simply output the others\n\n# save the conversion result\npdf.save(fn + \".pdf\", garbage=4, deflate=True)\n# say how many named links we skipped\nif link_cnti > 0:\n    print(\"Skipped %i named links of a total of %i in input.\" % (link_skip, link_cnti))\n```\n\n----------------------------------------\n\nTITLE: Increasing Image Resolution with Matrix Zoom in PyMuPDF\nDESCRIPTION: Code that creates a higher resolution page image by applying a zoom factor using a Matrix. This increases the image quality by a factor of 4 when using zoom factor 2 in each dimension.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nzoom_x = 2.0  # horizontal zoom\nzoom_y = 2.0  # vertical zoom\nmat = pymupdf.Matrix(zoom_x, zoom_y)  # zoom factor 2 in each dimension\npix = page.get_pixmap(matrix=mat)  # use 'mat' instead of the identity matrix\n```\n\n----------------------------------------\n\nTITLE: PDF Document Splitting Example\nDESCRIPTION: Example showing how to create a new PDF containing the first and last 10 pages of an existing document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndoc2 = pymupdf.open()                 # new empty PDF\ndoc2.insert_pdf(doc1, to_page = 9)  # first 10 pages\ndoc2.insert_pdf(doc1, from_page = len(doc1) - 10) # last 10 pages\ndoc2.save(\"first-and-last-10.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving All PDF Metadata Items with PyMuPDF\nDESCRIPTION: This code snippet shows how to access all metadata items in a PDF, including private or custom fields not available through the standard metadata dictionary. It uses low-level PyMuPDF functions to extract the metadata from the PDF's Info dictionary.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmetadata = {}  # make my own metadata dict\nwhat, value = doc.xref_get_key(-1, \"Info\")  # /Info key in the trailer\nif what != \"xref\":\n    pass  # PDF has no metadata\nelse:\n    xref = int(value.replace(\"0 R\", \"\"))  # extract the metadata xref\n    for key in doc.xref_get_keys(xref):\n        metadata[key] = doc.xref_get_key(xref, key)[1]\npprint(metadata)\n```\n\n----------------------------------------\n\nTITLE: Encrypting a PDF with User and Owner Passwords using PyMuPDF\nDESCRIPTION: This snippet demonstrates how to create a new PDF, add content, and encrypt it with separate user and owner passwords. It sets specific permissions for the user password and uses AES-256 encryption. The code uses PyMuPDF to create the document, add text, and save it with encryption settings.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ntext = \"some secret information\" # keep this data secret\nperm = int(\n    pymupdf.PDF_PERM_ACCESSIBILITY # always use this\n    | pymupdf.PDF_PERM_PRINT # permit printing\n    | pymupdf.PDF_PERM_COPY # permit copying\n    | pymupdf.PDF_PERM_ANNOTATE # permit annotations\n)\nowner_pass = \"owner\" # owner password\nuser_pass = \"user\" # user password\nencrypt_meth = pymupdf.PDF_ENCRYPT_AES_256 # strongest algorithm\ndoc = pymupdf.open() # empty pdf\npage = doc.new_page() # empty page\npage.insert_text((50, 72), text) # insert the data\ndoc.save(\n    \"secret.pdf\",\n    encryption=encrypt_meth, # set the encryption method\n    owner_pw=owner_pass, # set the owner password\n    user_pw=user_pass, # set the user password\n    permissions=perm, # set permissions\n)\n```\n\n----------------------------------------\n\nTITLE: Merging PDF Files with PyMuPDF\nDESCRIPTION: Combine multiple PDF documents into a single file.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc_a = pymupdf.open(\"a.pdf\") # open the 1st document\ndoc_b = pymupdf.open(\"b.pdf\") # open the 2nd document\n\ndoc_a.insert_pdf(doc_b) # merge the docs\ndoc_a.save(\"a+b.pdf\") # save the merged document with a new filename\n```\n\n----------------------------------------\n\nTITLE: Concatenating PDFs with Combined Table of Contents using PyMuPDF\nDESCRIPTION: This example demonstrates how to merge two PDF documents while preserving and combining their tables of contents. It retrieves TOCs from both documents, merges the PDFs, adjusts page numbers in the second TOC, and then applies the combined TOC to the merged document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_64\n\nLANGUAGE: python\nCODE:\n```\ndoc1 = pymupdf.open(\"file1.pdf\")          # must be a PDF\ndoc2 = pymupdf.open(\"file2.pdf\")          # must be a PDF\npages1 = len(doc1)                     # save doc1's page count\ntoc1 = doc1.get_toc(False)     # save TOC 1\ntoc2 = doc2.get_toc(False)     # save TOC 2\ndoc1.insert_pdf(doc2)                   # doc2 at end of doc1\nfor t in toc2:                         # increase toc2 page numbers\n    t[2] += pages1                     # by old len(doc1)\ndoc1.set_toc(toc1 + toc2)               # now result has total TOC\n```\n\n----------------------------------------\n\nTITLE: Extracting PDF content as Markdown using PyMuPDF4LLM\nDESCRIPTION: Python code snippet to extract content from a PDF file and convert it to Markdown format using PyMuPDF4LLM. It demonstrates the basic usage of the library.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf4llm/index.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf4llm\nmd_text = pymupdf4llm.to_markdown(\"input.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Redacting PDF Content with Vector Graphics Preservation in PyMuPDF\nDESCRIPTION: This code demonstrates how to redact a specific area of a PDF page while preserving vector graphics. It opens a PDF file, defines a rectangular area for redaction, adds a redaction annotation with a red fill color, and applies the redaction with the graphics parameter set to 0 to ignore vector graphics.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\n# Open the PDF document\ndoc = pymupdf.open('test.pdf')\n\n# Get the first page\npage = doc[0]\n\n# Add an area to redact\nrect = [0,0,200,200]\n\n# Add a redacction annotation which will have a red fill color\npage.add_redact_annot(rect, fill=(1,0,0))\n\n# Apply the redactions to the current page, but ignore vector graphics\npage.apply_redactions(graphics=0)\n\n# Save the modified document\ndoc.save('redactied_document.pdf')\n\n# Close the document\ndoc.close()\n```\n\n----------------------------------------\n\nTITLE: Installing PyMuPDF4LLM via pip\nDESCRIPTION: Command to install the PyMuPDF4LLM package using pip. This is the first step to use the library for PDF content extraction.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf4llm/index.rst#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pymupdf4llm\n```\n\n----------------------------------------\n\nTITLE: Retrieving PDF Object Key Values with PyMuPDF\nDESCRIPTION: This snippet demonstrates how to access individual key values of a PDF object using PyMuPDF's Document.xref_get_key method. It shows that the method returns both the value and its PDF object type, which helps in interpreting the data.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndoc.xref_get_key(page.xref, \"MediaBox\")\n```\n\n----------------------------------------\n\nTITLE: Text Box Insertion Method - Python\nDESCRIPTION: Inserts text into a specified rectangle with automatic text wrapping and alignment options. Supports various font settings and text formatting parameters.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ninsert_textbox(rect, buffer, *, fontsize=11, fontname=\"helv\", fontfile=None, set_simple=False, encoding=TEXT_ENCODING_LATIN, color=None, fill=None, render_mode=0, miter_limit=1, border_width=1, expandtabs=8, align=TEXT_ALIGN_LEFT, rotate=0, lineheight=None, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Splitting PDF Pages into Multiple Parts with PyMuPDF\nDESCRIPTION: This snippet demonstrates how to split each page of a PDF into four parts, creating a new PDF with magnified content. It uses PyMuPDF to open the source PDF, create a new document, and process each page by dividing it into rectangles and showing each part on a new page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\nsrc = pymupdf.open(\"test.pdf\")\ndoc = pymupdf.open()  # empty output PDF\n\nfor spage in src:  # for each page in input\n    r = spage.rect  # input page rectangle\n    d = pymupdf.Rect(spage.cropbox_position,  # CropBox displacement if not\n                  spage.cropbox_position)  # starting at (0, 0)\n    #--------------------------------------------------------------------------\n    # example: cut input page into 2 x 2 parts\n    #--------------------------------------------------------------------------\n    r1 = r / 2  # top left rect\n    r2 = r1 + (r1.width, 0, r1.width, 0)  # top right rect\n    r3 = r1 + (0, r1.height, 0, r1.height)  # bottom left rect\n    r4 = pymupdf.Rect(r1.br, r.br)  # bottom right rect\n    rect_list = [r1, r2, r3, r4]  # put them in a list\n\n    for rx in rect_list:  # run thru rect list\n        rx += d  # add the CropBox displacement\n        page = doc.new_page(-1,  # new output page with rx dimensions\n                           width = rx.width,\n                           height = rx.height)\n        page.show_pdf_page(\n                page.rect,  # fill all new page with the image\n                src,  # input document\n                spage.number,  # input page number\n                clip = rx,  # which part to use of input page\n            )\n\n# that's it, save output file\ndoc.save(\"poster-\" + src.name,\n         garbage=3,  # eliminate duplicate objects\n         deflate=True,  # compress stuff where possible\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Markdown Text for LLM with LangChain\nDESCRIPTION: Example showing how to process Markdown text from a PDF for use with LLMs in LangChain. This includes generating Markdown with pymupdf4llm and then splitting it into chunks using LangChain's MarkdownTextSplitter.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rag.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf4llm\nfrom langchain.text_splitter import MarkdownTextSplitter\n\n# Get the MD text\nmd_text = pymupdf4llm.to_markdown(\"input.pdf\")  # get markdown for all pages\n\nsplitter = MarkdownTextSplitter(chunk_size=40, chunk_overlap=0)\n\nsplitter.create_documents([md_text])\n```\n\n----------------------------------------\n\nTITLE: Adding Watermark to PDF with PyMuPDF\nDESCRIPTION: Add a watermark image to every page of a PDF document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"document.pdf\") # open a document\n\nfor page_index in range(len(doc)): # iterate over pdf pages\n    page = doc[page_index] # get the page\n\n    # insert an image watermark from a file name to fit the page bounds\n    page.insert_image(page.bound(),filename=\"watermark.png\", overlay=False)\n\ndoc.save(\"watermarked-document.pdf\") # save the document with a new filename\n```\n\n----------------------------------------\n\nTITLE: Selecting PDF Pages in PyMuPDF\nDESCRIPTION: The 'select' method keeps only specified pages in a PDF document. It takes a sequence of page numbers and removes all other pages from memory. This method creates a new page tree and is versatile for selecting pages based on various criteria.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef select(s):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Clearing Metadata in PDF Documents with PyMuPDF\nDESCRIPTION: This example demonstrates how to anonymize a PDF by clearing its metadata and XML metadata for privacy concerns. It shows opening a document, examining its metadata, clearing all fields, removing XML metadata, and saving with garbage collection to remove old data.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\ndoc=pymupdf.open(\"pymupdf.pdf\")\ndoc.metadata             # look at what we currently have\ndoc.set_metadata({})      # clear all fields\ndoc.metadata             # look again to show what happened\ndoc.del_xml_metadata()    # clear any XML metadata\ndoc.save(\"anonymous.pdf\", garbage = 4)       # save anonymized doc\n```\n\n----------------------------------------\n\nTITLE: Converting PDF to Markdown with pymupdf4llm\nDESCRIPTION: Code demonstrating how to convert a PDF document to Markdown format using the pymupdf4llm package. This includes extracting text and writing it to a file with UTF-8 encoding.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rag.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# convert the document to markdown\nimport pymupdf4llm\nmd_text = pymupdf4llm.to_markdown(\"input.pdf\")\n\n# Write the text to some file in UTF8-encoding\nimport pathlib\npathlib.Path(\"output.md\").write_bytes(md_text.encode())\n```\n\n----------------------------------------\n\nTITLE: Marking Searched Text in PDF\nDESCRIPTION: Script that searches for specific text in a PDF document and marks it with squiggly annotations. Works with tilted or non-horizontal text by using quads instead of rectangles.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nimport pymupdf\n\n# the document to annotate\ndoc = pymupdf.open(\"tilted-text.pdf\")\n\n# the text to be marked\nneedle = \"¡La práctica hace el campeón!\"\n\n# work with first page only\npage = doc[0]\n\n# get list of text locations\n# we use \"quads\", not rectangles because text may be tilted!\nrl = page.search_for(needle, quads=True)\n\n# mark all found quads with one annotation\npage.add_squiggly_annot(rl)\n\n# save to a new PDF\ndoc.save(\"a-squiggly.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Text Insertion Method - Python\nDESCRIPTION: Inserts text lines starting at a specified point with various formatting options including font settings, rotation, and opacity controls.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ninsert_text(point, text, *, fontsize=11, fontname=\"helv\", fontfile=None, set_simple=False, encoding=TEXT_ENCODING_LATIN, color=None, lineheight=None, fill=None, render_mode=0, miter_limit=1, border_width=1, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Finding Tables in PyMuPDF\nDESCRIPTION: Method to detect tables on a page and return related information. It offers various strategies and parameters for fine-tuning the table detection process, including options for handling vector graphics and text positions.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndef find_tables(clip=None, strategy=None, vertical_strategy=None, horizontal_strategy=None, vertical_lines=None, horizontal_lines=None, snap_tolerance=None, snap_x_tolerance=None, snap_y_tolerance=None, join_tolerance=None, join_x_tolerance=None, join_y_tolerance=None, edge_min_length=3, min_words_vertical=3, min_words_horizontal=1, intersection_tolerance=None, intersection_x_tolerance=None, intersection_y_tolerance=None, text_tolerance=None, text_x_tolerance=None, text_y_tolerance=None, add_lines=None):\n```\n\n----------------------------------------\n\nTITLE: Opening Remote Files with PyMuPDF and Requests\nDESCRIPTION: Example of opening a PDF file from a remote URL by streaming its content using the requests library. The file content is downloaded and then passed to PyMuPDF as a stream.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/how-to-open-a-file.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\nimport requests\n\nr = requests.get('https://mupdf.com/docs/mupdf_explored.pdf')\ndata = r.content\ndoc = pymupdf.Document(stream=data)\n```\n\n----------------------------------------\n\nTITLE: Initializing PyMuPDF Document Class\nDESCRIPTION: Constructor method for creating a Document object from a file or memory stream. Supports various document types with options for reflowable document layout.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self, filename=None, stream=None, *, filetype=None, rect=None, width=0, height=0, fontsize=11)\n```\n\n----------------------------------------\n\nTITLE: Extracting Image Data with Document.extract_image\nDESCRIPTION: This method extracts image data and metadata from a PDF document. It returns a dictionary containing image format, dimensions, color space information, and the raw image data. It's faster than using Pixmap for non-PNG images and often produces smaller output files.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nd = doc.extract_image(1373)\nd\n{'ext': 'png', 'smask': 2934, 'width': 5, 'height': 629, 'colorspace': 3, 'xres': 96,\n'yres': 96, 'cs-name': 'DeviceRGB',\n'image': b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x05\\ ...'}\nimgout = open(f\"image.{d['ext']}\", \"wb\")\nimgout.write(d[\"image\"])\n102\nimgout.close()\n```\n\n----------------------------------------\n\nTITLE: Adding Embedded File to PDF in PyMuPDF\nDESCRIPTION: Method to embed a new file in a PDF document. It takes parameters for the file name, content, optional filename, unicode filename, and description. Returns the xref of the inserted file.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\ndef embfile_add(name, buffer, filename=None, ufilename=None, desc=None):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Multiprocess PDF Page Rendering in Python with PyMuPDF\nDESCRIPTION: Sample code demonstrating how to use multiprocessing to speed up page processing of large PDF documents using PyMuPDF. This approach can achieve at least twice the performance of sequential processing.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-multiprocessing.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsamples/multiprocess-render.py\n```\n\n----------------------------------------\n\nTITLE: Saving PDF with Encryption in Python\nDESCRIPTION: Shows how to save a PDF document with encryption using the updated save method in version 1.16.0, which now fully supports password-based encryption.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndocument.save(\"output.pdf\", encryption=True, user_pw=\"userpass\", owner_pw=\"ownerpass\")\n```\n\n----------------------------------------\n\nTITLE: Getting Image Bounding Box in PDF Pages with PyMuPDF\nDESCRIPTION: This method returns the boundary box and optionally the transformation matrix of an embedded image in a PDF page. It works with images directly referenced by the page or by a Form XObject directly referenced by the page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\ndef get_image_bbox(item, transform=False):\n    # Implementation details not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Easy PDF saving with optimized defaults in PyMuPDF\nDESCRIPTION: The ez_save() method is a convenience wrapper for save() with optimized defaults for file size reduction (deflate=True, garbage=3, use_objstms=1). Added in PyMuPDF v1.18.11.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nez_save(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Adding Freetext Annotation in PyMuPDF\nDESCRIPTION: Method to add text in a specified rectangle with extensive customization options including fonts, colors, borders, callouts, and rich text support using HTML syntax.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nadd_freetext_annot(rect, text, *, fontsize=11, fontname=\"helv\", text_color=0, fill_color=None, border_width=0, dashes=None, callout=None, line_end=PDF_ANNOT_LE_OPEN_ARROW, opacity=1, align=TEXT_ALIGN_LEFT, rotate=0, richtext=False, style=None)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Links from PDF Pages with PyMuPDF\nDESCRIPTION: This snippet demonstrates how to extract links from PDF pages using PyMuPDF. It iterates through each page of the document and retrieves all links on the page using the first_link attribute and the next property of each Link object.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\nfor page in doc: # iterate the document pages\n    link = page.first_link  # a `Link` object or `None`\n\n    while link: # iterate over the links on page\n        # do something with the link, then:\n        link = link.next # get next link, last one has `None` in its `next`\n```\n\n----------------------------------------\n\nTITLE: Searching for Text on a PDF Page with PyMuPDF\nDESCRIPTION: This code snippet illustrates how to use the search_for method to find occurrences of a specific text on a PDF page. It demonstrates the use of regular expressions for more complex text matching scenarios.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\npattern = re.compile(r\"...\")  # the regex pattern\nwords = page.get_text(\"words\")  # extract words on page\nmatches = [w for w in words if pattern.search(w[4])]\n```\n\n----------------------------------------\n\nTITLE: Generating Pixmap from PDF Page with PyMuPDF\nDESCRIPTION: This method creates a pixmap from a PDF page. It offers various parameters to control the output, including resolution, colorspace, clipping, alpha channel, and annotation rendering. The method returns a Pixmap object.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\ndef get_pixmap(*, matrix=pymupdf.Identity, dpi=None, colorspace=pymupdf.csRGB, clip=None, alpha=False, annots=True):\n    # Implementation details not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle in PDF with PyMuPDF\nDESCRIPTION: Method to draw a rectangle in a PDF document. Supports various styling options including rounded corners with the radius parameter.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\ndraw_rect(rect, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, radius=None, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Inserting Text Box on PDF Page with PyMuPDF\nDESCRIPTION: Method to insert a text box within a specified rectangle on a PDF page. Supports various text formatting and alignment options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndef insert_textbox(rect, buffer, *, fontsize=11, fontname=\"helv\", fontfile=None, idx=0, color=None, fill=None, render_mode=0, miter_limit=1, border_width=1, encoding=TEXT_ENCODING_LATIN, expandtabs=8, align=TEXT_ALIGN_LEFT, charwidths=None, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1, oc=0, overlay=True):\n```\n\n----------------------------------------\n\nTITLE: Document Saving with Compression Options in PyMuPDF\nDESCRIPTION: Example showing how to save a PDF document with maximum compression settings equivalent to mutool clean command. The code demonstrates using garbage collection level 4 with stream deflation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndoc.save(filename, garbage=4, deflate=True)\n```\n\n----------------------------------------\n\nTITLE: Displaying PDF Page as Vector Image in Python with PyMuPDF\nDESCRIPTION: This code snippet demonstrates how to use the show_pdf_page method to display a page from another PDF document as a vector image. It shows the same source page rotated by 90 and -90 degrees on the upper and lower halves of a new page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\ndoc = pymupdf.open()  # new empty PDF\npage=doc.new_page()  # new page in A4 format\n\n# upper half page\nr1 = pymupdf.Rect(0, 0, page.rect.width, page.rect.height/2)\n\n# lower half page\nr2 = r1 + (0, page.rect.height/2, 0, page.rect.height/2)\n\nsrc = pymupdf.open(\"PyMuPDF.pdf\")  # show page 0 of this\n\npage.show_pdf_page(r1, src, 0, rotate=90)\npage.show_pdf_page(r2, src, 0, rotate=-90)\ndoc.save(\"show.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested PDF Dictionary Keys with PyMuPDF\nDESCRIPTION: This snippet demonstrates how to access nested dictionary keys in PDF objects using a path-like notation with PyMuPDF's Document.xref_get_key method. It shows how to retrieve the value of a key that is several levels deep in the object hierarchy.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndoc.xref_get_key(page.xref, \"Resources/XObject/Im1\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Document Text to File with PyMuPDF\nDESCRIPTION: Script to extract text from a document and save it to a text file. Pages are separated by form feed characters. Supports any document type compatible with PyMuPDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys, pathlib, pymupdf\nfname = sys.argv[1]  # get document filename\nwith pymupdf.open(fname) as doc:  # open document\n    text = chr(12).join([page.get_text() for page in doc])\n# write as a binary file to support non-ASCII characters\npathlib.Path(fname + \".txt\").write_bytes(text.encode())\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Copy of a Page in a PDF Document with PyMuPDF\nDESCRIPTION: This method makes a full copy (duplicate) of a page in a PDF document. It creates a new page object with a new xref, which can be changed independently from the original. Popup and 'IRT' annotations are not copied.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\nfullcopy_page(pno, to=-1)\n```\n\n----------------------------------------\n\nTITLE: Adding Text Search Highlights in PyMuPDF\nDESCRIPTION: Example of searching for text and adding highlight annotations to all occurrences. Uses the search_for method with quads option for accurate text marking.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nquads = page.search_for(\"pymupdf\", quads=True)\npage.add_highlight_annot(quads)\n```\n\n----------------------------------------\n\nTITLE: Inserting pages from another PDF in PyMuPDF\nDESCRIPTION: The insert_pdf() method copies a range of pages from another PDF document into the current one. It offers options for page rotation and controlling whether to include links, annotations, and widgets from the source document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ninsert_pdf(docsrc, from_page=-1, to_page=-1, start_at=-1, rotate=-1, links=True, annots=True, widgets=True, join_duplicates=False, show_progress=0, final=1)\n```\n\n----------------------------------------\n\nTITLE: Drawing Oval in PDF with PyMuPDF\nDESCRIPTION: Method to draw an oval (ellipse) within a given rectangle or quadrilateral in a PDF document. Supports various styling options like color, fill, width, and opacity.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\ndraw_oval(quad, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Adding Images to PDF with PyMuPDF\nDESCRIPTION: Insert an image (like a logo) at a specific position on PDF pages.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"document.pdf\") # open a document\n\nfor page_index in range(len(doc)): # iterate over pdf pages\n    page = doc[page_index] # get the page\n\n    # insert an image logo from a file name at the top left of the document\n    page.insert_image(pymupdf.Rect(0,0,50,50),filename=\"my-logo.png\")\n\ndoc.save(\"logo-document.pdf\") # save the document with a new filename\n```\n\n----------------------------------------\n\nTITLE: Modifying PDF Annotation Properties with PyMuPDF in Python\nDESCRIPTION: This code snippet demonstrates how to access and modify various properties of a PDF annotation using PyMuPDF. It changes the border style, colors, metadata, and size of an annotation, then saves the modified document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\npage = doc[0]                          # page 0\nannot = page.first_annot                # get the annotation\nannot.set_border(dashes=[3])           # set dashes to \"3 on, 3 off ...\"\n\n# set stroke and fill color to some blue\nannot.set_colors({\"stroke\":(0, 0, 1), \"fill\":(0.75, 0.8, 0.95)})\ninfo = annot.info                      # get info dict\ninfo[\"title\"] = \"Jorj X. McKie\"        # set author\n\n# text in popup window ...\ninfo[\"content\"] = \"I changed border and colors and enlarged the image by 20%.\"\ninfo[\"subject\"] = \"Demonstration of PyMuPDF\"     # some PDF viewers also show this\nannot.set_info(info)                   # update info dict\nr = annot.rect                         # take annot rect\nr.x1 = r.x0 + r.width  * 1.2           # new location has same top-left\nr.y1 = r.y0 + r.height * 1.2           # but 20% longer sides\nannot.set_rect(r)                      # update rectangle\nannot.update()                         # update the annot's appearance\ndoc.save(\"circle-out.pdf\")             # save\n```\n\n----------------------------------------\n\nTITLE: Modifying Text Extraction Flags in PyMuPDF\nDESCRIPTION: Demonstrates how to modify default text extraction flags in PyMuPDF. Examples include including images in 'blocks' output, excluding images from 'dict' output, and turning off dehyphenation in text searches.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app1.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nflags = TEXTFLAGS_BLOCKS | TEXT_PRESERVE_IMAGES\n\nflags = TEXTFLAGS_DICT & ~TEXT_PRESERVE_IMAGES\n\nflags = TEXTFLAGS_SEARCH & ~TEXT_DEHYPHENATE\n```\n\n----------------------------------------\n\nTITLE: Multi-Language Text Output with PyMuPDF\nDESCRIPTION: This snippet demonstrates PyMuPDF's automatic multi-language support, including text shaping for complex scripting systems. It outputs greetings in various languages, showcasing automatic handling of different writing systems.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ngreetings = (\n    \"Hello, World!\",  # english\n    \"Hallo, Welt!\",  # german\n    \"سلام دنیا!\",  # persian\n    \"வணக்கம், உலகம்!\",  # tamil\n    \"สวัสดีชาวโลก!\",  # thai\n    \"Привіт Світ!\",  # ucranian\n    \"שלום עולם!\",  # hebrew\n    \"ওহে বিশ্ব!\",  # bengali\n    \"你好世界！\",  # chinese\n    \"こんにちは世界！\",  # japanese\n    \"안녕하세요, 월드!\",  # korean\n    \"नमस्कार, विश्व !\",  # sanskrit\n    \"हैलो वर्ल्ड!\",  # hindi\n)\ndoc = pymupdf.open()\npage = doc.new_page()\nrect = (50, 50, 200, 500)\n\n# join greetings into one text string\ntext = \" ... \".join([t for t in greetings])\n\n# the output of the above is simple:\npage.insert_htmlbox(rect, text)\ndoc.save(__file__.replace(\".py\", \".pdf\"))\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents with PyMuPDF Story\nDESCRIPTION: This script creates a table of contents for Python scripts in a directory. It uses multiple Story objects for header, footer, and main content, and demonstrates bidirectional communication between story output and script.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/code-printer.py\n```\n\n----------------------------------------\n\nTITLE: Adding Header and Footer to PDF with PyMuPDF\nDESCRIPTION: Script demonstrating how to add header and footer text to each page of a PDF document. The header is placed at a fixed position and the footer includes page numbers.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(\"some.pdf\")\nheader = \"Header\"  # text in header\nfooter = \"Page %i of %i\"  # text in footer\nfor page in doc:\n    page.insert_text((50, 50), header)  # insert header\n    page.insert_text(  # insert footer 50 points above page bottom\n        (50, page.rect.height - 50),\n        footer % (page.number + 1, doc.page_count),\n    )\n```\n\n----------------------------------------\n\nTITLE: Extracting Font Data with Document.extract_font\nDESCRIPTION: This method extracts embedded font data from a PDF document. It returns font information including name, file extension, font type, and content. The extracted data can be saved as an external font file.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nDocument.extract_font(xref, info_only=False, named=None)\n```\n\n----------------------------------------\n\nTITLE: Searching for text on a specific page in PyMuPDF\nDESCRIPTION: The search_page_for() method searches for specified text on a given page number. It works like the Page.search_for() method but accepts a page number parameter to specify which page to search.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nsearch_page_for(pno, text, quads=False)\n```\n\n----------------------------------------\n\nTITLE: Inserting Image on Multiple PDF Pages with PyMuPDF\nDESCRIPTION: Example demonstrating how to insert the same image on every page of a PDF document using PyMuPDF. The code shows efficient image reuse by storing the xref of the first insertion.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(...)\nrect = pymupdf.Rect(0, 0, 50, 50)       # put thumbnail in upper left corner\nimg = open(\"some.jpg\", \"rb\").read()  # an image file\nimg_xref = 0                         # first execution embeds the image\nfor page in doc:\n    img_xref = page.insert_image(rect, stream=img,\n                 xref=img_xref,  # 2nd time reuses existing image\n              )\ndoc.save(...)\n```\n\n----------------------------------------\n\nTITLE: Text Search and Annotation with PyMuPDF\nDESCRIPTION: Script to search for text in a document and mark matches with underline annotations. Processes word by word and supports case-sensitive searching.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport pymupdf\n\ndef mark_word(page, text):\n    \"\"\"Underline each word that contains 'text'.\n    \"\"\"\n    found = 0\n    wlist = page.get_text(\"words\", delimiters=None)  # make the word list\n    for w in wlist:  # scan through all words on page\n        if text in w[4]:  # w[4] is the word's string\n            found += 1  # count\n            r = pymupdf.Rect(w[:4])  # make rect from word bbox\n            page.add_underline_annot(r)  # underline\n    return found\n\nfname = sys.argv[1]  # filename\ntext = sys.argv[2]  # search string\ndoc = pymupdf.open(fname)\n\nprint(\"underlining words containing '%s' in document '%s'\" % (word, doc.name))\n\nnew_doc = False  # indicator if anything found at all\n\nfor page in doc:  # scan through the pages\n    found = mark_word(page, text)  # mark the page's words\n    if found:  # if anything found ...\n        new_doc = True\n        print(\"found '%s' %i times on page %i\" % (text, found, page.number + 1))\n\nif new_doc:\n    doc.save(\"marked-\" + doc.name)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Links in PyMuPDF\nDESCRIPTION: This method retrieves all links on a PDF page. It returns a list of dictionaries containing link information.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef get_links():\n    \"\"\"Retrieves **all** links of a page.\n\n    :rtype: list\n    :returns: A list of dictionaries. For a description of the dictionary entries, see :ref:`link_dict_description`. Always use this or the :meth:`Page.links` method if you intend to make changes to the links of a page.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Writing Text Lines to PDF\nDESCRIPTION: Example of writing multiple lines of text to a PDF page with control over font, size, rotation and positioning. Shows how to handle text overflow and line spacing.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\ndoc = pymupdf.open(...)  # new or existing PDF\npage = doc.new_page()  # new or existing page via doc[n]\np = pymupdf.Point(50, 72)  # start point of 1st line\n\ntext = \"Some text,\\nspread across\\nseveral lines.\"\n# the same result is achievable by\n# text = [\"Some text\", \"spread across\", \"several lines.\"]\n\nrc = page.insert_text(p,  # bottom-left of 1st char\n                     text,  # the text (honors '\\n')\n                     fontname = \"helv\",  # the default font\n                     fontsize = 11,  # the default font size\n                     rotate = 0,  # also available: 90, 180, 270\n                     )\nprint(\"%i lines printed on page %i.\" % (rc, page.number))\n\ndoc.save(\"text.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Extracting XHTML Text with PyMuPDF\nDESCRIPTION: Shows the output format of XHTML text extraction using PyMuPDF's get_text method. This method produces a simplified HTML structure containing the bare text and images.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app1.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n<div id=\"page0\">\n<p>Some text on first page.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating OCR PDF from Images using PyMuPDF\nDESCRIPTION: Example demonstrating how to read images from a folder, perform OCR using Tesseract, and combine them into a single PDF with searchable text layers.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pixmap.rst#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndoc = pymupdf.open()\nfor imgfile in os.listdir(folder):\n   pix = pymupdf.Pixmap(imgfile)\n   imgpdf = pymupdf.open(\"pdf\", pix.pdfocr_tobytes())\n   doc.insert_pdf(imgpdf)\n   pix = None\n   imgpdf.close()\ndoc.save(\"ocr-images.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Creating Image Tiles with PyMuPDF\nDESCRIPTION: Creates a new image composed of 3x4 tiles from an original image using PyMuPDF's Pixmap capabilities\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\nsrc = pymupdf.Pixmap(\"img-7edges.png\")      # create pixmap from a picture\ncol = 3                                  # tiles per row\nlin = 4                                  # tiles per column\ntar_w = src.width * col                  # width of target\ntar_h = src.height * lin                 # height of target\n\n# create target pixmap\ntar_pix = pymupdf.Pixmap(src.colorspace, (0, 0, tar_w, tar_h), src.alpha)\n\n# now fill target with the tiles\nfor i in range(col):\n    for j in range(lin):\n        src.set_origin(src.width * i, src.height * j)\n        tar_pix.copy(src, src.irect) # copy input to new loc\n\ntar_pix.save(\"tar.png\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Images from Any Document Type with get_text() in PyMuPDF\nDESCRIPTION: Code that extracts image data from any document type by using the get_text method with 'dict' parameter. It filters image blocks from the returned dictionary structure.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> d = page.get_text(\"dict\")\n>>> blocks = d[\"blocks\"]  # the list of block dictionaries\n>>> imgblocks = [b for b in blocks if b[\"type\"] == 1]\n>>> pprint(imgblocks[0])\n{'bbox': (100.0, 135.8769989013672, 300.0, 364.1230163574219),\n 'bpc': 8,\n 'colorspace': 3,\n 'ext': 'jpeg',\n 'height': 501,\n 'image': b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\...',  # CAUTION: LARGE!\n 'size': 80518,\n 'transform': (200.0, 0.0, -0.0, 228.2460174560547, 100.0, 135.8769989013672),\n 'type': 1,\n 'width': 439,\n 'xres': 96,\n 'yres': 96}\n```\n\n----------------------------------------\n\nTITLE: Text Alignment and Rotation in PyMuPDF\nDESCRIPTION: This snippet shows how to rotate text, use a font from pymupdf-fonts package, and align text with the 'justify' option in PyMuPDF. It demonstrates combining multiple text formatting requirements.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n    eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n    minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b> \n    nisi ut aliquid ex ea commodi consequat. Quis aute iure \n    <span style=\"color: red;\">reprehenderit</span> \n    in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit \n    esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat \n    cupiditat non proident, sunt in culpa qui \n    <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id \n    est laborum.\"\"\"\n\narch = pymupdf.Archive()\n\ncss = pymupdf.css_for_pymupdf_font(\"ubuntu\", archive=arch, name=\"myfont\")\ncss += \"* {font-family: myfont;text-align: justify;}\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page(width=150, height=150)\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch, rotate=90)\n\ndoc.subset_fonts(verbose=True)\ndoc.ez_save(__file__.replace(\".py\", \".pdf\"))\n```\n\n----------------------------------------\n\nTITLE: Inserting Text on PDF Page with PyMuPDF\nDESCRIPTION: Method to insert text lines starting at a specified point on a PDF page. Supports various text formatting options including font size, color, opacity, and rotation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\ndef insert_text(point, text, *, fontsize=11, fontname=\"helv\", fontfile=None, idx=0, color=None, fill=None, render_mode=0, miter_limit=1, border_width=0.05, encoding=TEXT_ENCODING_LATIN, rotate=0, morph=None, stroke_opacity=1, fill_opacity=1, overlay=True, oc=0):\n```\n\n----------------------------------------\n\nTITLE: Inserting Specific PDF Pages with PyMuPDF\nDESCRIPTION: These examples show different ways to insert pages from one PDF into another using PyMuPDF's insert_pdf method. They demonstrate inserting a range of pages at a specific position, inserting with rotation, and inserting pages at the beginning of a document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n# insert 5 pages of doc2, where its page 21 becomes page 15 in doc1\ndoc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=15)\n\n# same example, but pages are rotated and copied in reverse order\ndoc1.insert_pdf(doc2, from_page=25, to_page=21, start_at=15, rotate=90)\n\n# put copied pages in front of doc1\ndoc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=0)\n```\n\n----------------------------------------\n\nTITLE: Scrubbing sensitive data from a PDF in PyMuPDF\nDESCRIPTION: The scrub() method removes potentially sensitive data from a PDF document, similar to Adobe Acrobat's Sanitize function. It offers multiple configuration options for selectively removing different types of content. Added in PyMuPDF v1.16.14.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nscrub(attached_files=True, clean_pages=True, embedded_files=True, hidden_text=True, javascript=True, metadata=True, redactions=True, redact_images=0, remove_links=True, reset_fields=True, reset_responses=True, thumbnails=True, xml_metadata=True)\n```\n\n----------------------------------------\n\nTITLE: Incremental PDF saving in PyMuPDF\nDESCRIPTION: The saveIncr() method is a convenience method for saving a document incrementally. It's equivalent to doc.save(doc.name, incremental=True, encryption=PDF_ENCRYPT_KEEP), which is useful for preserving verified signatures.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nsaveIncr()\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Page with Text in a PDF Document using PyMuPDF\nDESCRIPTION: This method combines creating a new page and inserting text into it. It's a convenience function that combines Document.new_page and parts of Page.insert_text. It returns the number of successfully inserted lines.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\ninsert_page(pno, text=None, fontsize=11, width=595, height=842, fontname=\"helv\", fontfile=None, color=None)\n```\n\n----------------------------------------\n\nTITLE: Using Python Sequence Types with PyMuPDF Objects\nDESCRIPTION: Demonstrates how PyMuPDF accepts various Python sequence types as arguments, and how geometry objects from PyMuPDF can be converted to standard Python sequences. Shows interoperability with list, tuple, array.array, and numpy.array.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app3.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf, array, numpy as np\nm = pymupdf.Matrix(1, 2, 3, 4, 5, 6)\n\nlist(m)\n[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\n\ntuple(m)\n(1.0, 2.0, 3.0, 4.0, 5.0, 6.0)\n\narray.array(\"f\", m)\narray('f', [1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\nnp.array(m)\narray([1., 2., 3., 4., 5., 6.])\n```\n\n----------------------------------------\n\nTITLE: Extracting Colored Text from PDF with PyMuPDF\nDESCRIPTION: This snippet demonstrates how to extract text with color information from a PDF document using PyMuPDF. It iterates through text blocks, lines, and spans to retrieve text content and associated colors.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfor page in doc:\n    text_blocks = page.get_text(\"dict\", flags=pymupdf.TEXTFLAGS_TEXT)[\"blocks\"]\n    for block in text_blocks:\n        for line in block[\"lines\"]:\n            for span in line[\"spans\"]:\n                text = span[\"text\"]\n                color = pymupdf.sRGB_to_rgb(span[\"color\"])\n                print(f\"Text: {text}, Color: {color}\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Table Output with PyMuPDF Story\nDESCRIPTION: This script extends table output options in PyMuPDF Story, including multi-page output with repeating headers, alternating row colors, gridlines, and dynamic data fetching from an SQL database.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/national-capitals.py\n```\n\n----------------------------------------\n\nTITLE: Creating a New Page in a PDF Document with PyMuPDF\nDESCRIPTION: This method inserts an empty page into a PDF document. It allows specifying the position, width, and height of the new page. The method returns the created page object.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nnew_page(pno=-1, width=595, height=842)\n```\n\n----------------------------------------\n\nTITLE: Checking Text Visibility Using PyMuPDF Pixmap\nDESCRIPTION: Demonstrates how to check if text on a PDF page is visible by analyzing the color distribution in the text area using Pixmap's color_topusage method. Useful for detecting hidden or camouflaged text.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\npix = page.get_pixmap(dpi=150)  # make page image with a decent resolution\n\n# the following matrix transforms page to pixmap coordinates\nmat = page.rect.torect(pix.irect)\n\n# search for some string \"needle\"\nrlist = page.search_for(\"needle\")\n# check the visibility for each hit rectangle\nfor rect in rlist:\n    if pix.color_topusage(clip=rect * mat)[0] > 0.95:\n        print(\"'needle' is invisible here:\", rect)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple PDF Pages into One with PyMuPDF\nDESCRIPTION: This code snippet shows how to combine multiple PDF pages into a single page, creating a \"4-up\" layout. It uses PyMuPDF to open the source PDF, create a new document with A4 size pages, and place four input pages onto each output page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\nsrc = pymupdf.open(\"test.pdf\")\ndoc = pymupdf.open()  # empty output PDF\n\nwidth, height = pymupdf.paper_size(\"a4\")  # A4 portrait output page format\nr = pymupdf.Rect(0, 0, width, height)\n\n# define the 4 rectangles per page\nr1 = r / 2  # top left rect\nr2 = r1 + (r1.width, 0, r1.width, 0)  # top right\nr3 = r1 + (0, r1.height, 0, r1.height)  # bottom left\nr4 = pymupdf.Rect(r1.br, r.br)  # bottom right\n\n# put them in a list\nr_tab = [r1, r2, r3, r4]\n\n# now copy input pages to output\nfor spage in src:\n    if spage.number % 4 == 0:  # create new output page\n        page = doc.new_page(-1,\n                      width = width,\n                      height = height)\n    # insert input page into the correct rectangle\n    page.show_pdf_page(r_tab[spage.number % 4],  # select output rect\n                     src,  # input document\n                     spage.number)  # input page number\n\n# by all means, save new file using garbage collection and compression\ndoc.save(\"4up.pdf\", garbage=3, deflate=True)\n```\n\n----------------------------------------\n\nTITLE: Inserting a File into a PDF Document with PyMuPDF\nDESCRIPTION: This method adds an arbitrary supported document to the current PDF. It opens 'infile' as a document, converts it to PDF, and then invokes Document.insert_pdf. It can be used to append images as full pages to an output PDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\ninsert_file(infile, from_page=-1, to_page=-1, start_at=-1, rotate=-1, links=True, annots=True, show_progress=0, final=1)\n```\n\n----------------------------------------\n\nTITLE: Converting Image Files to PDF Pages using PyMuPDF\nDESCRIPTION: Shows how to convert multiple image files into PDF pages, where each page contains one image at its original dimensions. Uses convert_to_pdf() to convert each image to a PDF page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open()                     # new PDF\nimglist = [ ... image file names ...] # e.g. a directory listing\nfor img in imglist:\n    imgdoc=pymupdf.open(img)           # open image as a document\n    pdfbytes=imgdoc.convert_to_pdf()  # make a 1-page PDF of it\n    imgpdf=pymupdf.open(\"pdf\", pdfbytes)\n    doc.insert_pdf(imgpdf)             # insert the image PDF\ndoc.save(\"allmyimages.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Inserting Font in PDF with PyMuPDF\nDESCRIPTION: Method to add a new font to be used by text output methods in a PDF document. Supports built-in Base14_Fonts, CJK fonts, and custom fonts via file or buffer.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\ninsert_font(fontname=\"helv\", fontfile=None, fontbuffer=None, set_simple=False, encoding=TEXT_ENCODING_LATIN)\n```\n\n----------------------------------------\n\nTITLE: Adding Blank Pages to PDF using PyMuPDF\nDESCRIPTION: Demonstrates how to add blank pages to a PDF document with specified dimensions. Includes example of using predefined paper formats.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(...) # some new or existing PDF document\npage = doc.new_page(-1, # insertion point: end of document\n                    width = 595, # page dimension: A4 portrait\n                    height = 842)\ndoc.save(\"doc-with-new-blank-page.pdf\") # save the document\n```\n\n----------------------------------------\n\nTITLE: Adding Line Annotation in PyMuPDF\nDESCRIPTION: Method to add a line annotation between two points. Returns an annotation with red stroke color and line width 1, with the annotation rectangle automatically sized to accommodate line end symbols.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nadd_line_annot(p1, p2)\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML Box on PDF Page with PyMuPDF\nDESCRIPTION: Method to insert HTML content into a specified rectangle on a PDF page. Supports complex text formatting, images, tables, and links through HTML and CSS.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\ndef insert_htmlbox(rect, text, *, css=None, scale_low=0, archive=None, rotate=0, oc=0, opacity=1, overlay=True):\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML Content with CSS in PyMuPDF\nDESCRIPTION: This snippet demonstrates how to create a PDF document with formatted text using PyMuPDF's insert_htmlbox method. It includes CSS styling for font family and size.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrect = pymupdf.Rect(100, 100, 400, 300)\n\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n    eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n    minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b> \n    nisi ut aliquid ex ea commodi consequat. Quis aute iure \n    <span style=\"color: #f00;\">reprehenderit</span> \n    in <span style=\"color: #0f0;font-weight:bold;\">voluptate</span> velit \n    esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat \n    cupiditat non proident, sunt in culpa qui \n    <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id \n    est laborum.\"\"\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page()\npage.insert_htmlbox(rect, text, css=\"* {font-family: sans-serif;font-size:14px;}\")\n\ndoc.ez_save(__file__.replace(\".py\", \".pdf\"))\n```\n\n----------------------------------------\n\nTITLE: Shape Finishing Method - Python\nDESCRIPTION: Finalizes a set of draw methods by applying common parameters like width, color, fill etc. Supports morphing of compound drawings and includes opacity settings.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfinish(width=1, color=(0,), fill=None, lineCap=0, lineJoin=0, dashes=None, closePath=True, even_odd=False, morph=(fixpoint, matrix), stroke_opacity=1, fill_opacity=1, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Displaying PDF Pages with PyMuPDF Page.show_pdf_page Method\nDESCRIPTION: Shows how to overlay content from one PDF page onto another using PyMuPDF's show_pdf_page method. Includes parameters for positioning, rotation, and display options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\npage.show_pdf_page(\n    rect,                  # where to place the image (rect-like)\n    src,                   # source PDF\n    pno=0,                 # page number in source PDF\n    clip=None,             # only display this area (rect-like)\n    rotate=0,              # rotate (float, any value)\n    oc=0,                  # control visibility via OCG / OCMD\n    keep_proportion=True,  # keep aspect ratio\n    overlay=True,          # put in foreground\n)\n```\n\n----------------------------------------\n\nTITLE: Attaching Files to PDF Documents with PyMuPDF\nDESCRIPTION: Demonstrates how to attach a file to a PDF document at a specific point using PyMuPDF. Creates a file annotation with the attachment data and saves the modified document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npoint = pymupdf.Point(100, 100) # create the point where you want to add the attachment\nattachment_data = attachment.tobytes() # get the document byte data as a buffer\n\n# add the file annotation with the point, data and the file name\nfile_annotation = page.add_file_annot(point, attachment_data, \"attachment.pdf\")\n\ndoc.save(\"document-with-attachment.pdf\") # save the document\n```\n\n----------------------------------------\n\nTITLE: Drawing Line on PDF Page with PyMuPDF\nDESCRIPTION: Method to draw a line between two points on a PDF page. Supports customization of color, width, dash pattern, and opacity.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndef draw_line(p1, p2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0):\n```\n\n----------------------------------------\n\nTITLE: Deleting Single and Multiple Pages in PDF using PyMuPDF\nDESCRIPTION: Examples of deleting both single pages and page ranges from PDF documents using PyMuPDF. Includes single page deletion and range deletion with from_page and to_page parameters.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.delete_page(0) # delete the 1st page of the document\ndoc.save(\"test-deleted-page-one.pdf\") # save the document\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.delete_pages(from_page=9, to_page=14) # delete a page range from the document\ndoc.save(\"test-deleted-pages.pdf\") # save the document\n```\n\n----------------------------------------\n\nTITLE: Advanced FreeText Annotations with Rich Text and Call-out Lines\nDESCRIPTION: This example demonstrates how to create FreeText annotations with rich text formatting and call-out lines in PyMuPDF. It showcases more advanced features of FreeText annotations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-annotations.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/annotations-freetext2.py\n```\n\n----------------------------------------\n\nTITLE: Writing HTML to PDF with Element Positioning in PyMuPDF\nDESCRIPTION: This code snippet demonstrates how to create a PDF document from HTML content using PyMuPDF's Story class. It includes setting up the document, placing content, and using a callback function for element positioning.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/story-class.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nHTML = \"\"\"\n<html>\n    <head></head>\n    <body>\n        <h1>Header level 1</h1>\n        <h2>Header level 2</h2>\n        <p>Hello MuPDF!</p>\n    </body>\n</html>\n\"\"\"\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # size of a page\nWHERE = MEDIABOX + (36, 36, -36, -36)  # leave borders of 0.5 inches\nstory =  pymupdf.Story(html=HTML)  # make the story\nwriter = pymupdf.DocumentWriter(\"test.pdf\")  # make the writer\npno = 0 # current page number\nmore = 1  # will be set to 0 when done\nwhile more:  # loop until all story content is processed\n    dev = writer.begin_page(MEDIABOX)  # make a device to write on the page\n    more, filled = story.place(WHERE)  # compute content positions on page\n    story.element_positions(recorder, {\"page\": pno})  # provide page number in addition\n    story.draw(dev)\n    writer.end_page()\n    pno += 1  # increase page number\nwriter.close()  # close output file\n\ndef recorder(elpos):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Circle Annotation in PyMuPDF\nDESCRIPTION: Method to add a circle or ellipse annotation within a specified rectangle. Returns an annotation with red stroke color and line width 1, with fill color support.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nadd_circle_annot(rect)\n```\n\n----------------------------------------\n\nTITLE: Creating Font Subsets with Document.subset_fonts\nDESCRIPTION: This method reduces PDF file size by replacing fonts with versions containing only the characters actually used in the document. It's particularly useful for documents using large fonts like Asian scripts. Two algorithms are available, with the native MuPDF function being much faster.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nDocument.subset_fonts(verbose=False, fallback=False)\n```\n\n----------------------------------------\n\nTITLE: Basic Layout with Story.write() in PyMuPDF\nDESCRIPTION: This script demonstrates basic layout using Story.write() method in PyMuPDF. It lays out multiple copies of its own source code into four rectangles per page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/story-write.py\n```\n\n----------------------------------------\n\nTITLE: Creating a DisplayList from a Page in PyMuPDF\nDESCRIPTION: Creates a DisplayList representing an interpreted document page. This can improve performance when a page needs to be rendered multiple times or when both text search and extraction are required.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/coop_low.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndl = page.get_displaylist()              # create the display list\n```\n\n----------------------------------------\n\nTITLE: Calculating Zoom Factor to Fit Clip to GUI Window in PyMuPDF\nDESCRIPTION: Code that computes the appropriate zoom factor to make a page clip fit a GUI window, maintaining the aspect ratio. The zoom is calculated based on whether the clip or window is wider.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# WIDTH: width of the GUI window\n# HEIGHT: height of the GUI window\n# clip: a subrectangle of the document page\n# compare width/height ratios of image and window\n\nif clip.width / clip.height < WIDTH / HEIGHT:\n    # clip is narrower: zoom to window HEIGHT\n    zoom = HEIGHT / clip.height\nelse:  # clip is broader: zoom to window WIDTH\n    zoom = WIDTH / clip.width\nmat = pymupdf.Matrix(zoom, zoom)\npix = page.get_pixmap(matrix=mat, clip=clip)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Rectangles in PDF Pages with PyMuPDF\nDESCRIPTION: This method returns boundary boxes and transformation matrices of an embedded image in a PDF page. It supports multiple occurrences of the same image and works with images invoked by the page or its Form XObjects.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\ndef get_image_rects(item, transform=False):\n    # Implementation details not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Drawing Circle on PDF Page with PyMuPDF\nDESCRIPTION: Method to draw a circle on a PDF page given a center point and radius. Supports customization of color, fill, width, and opacity.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\ndef draw_circle(center, radius, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0):\n```\n\n----------------------------------------\n\nTITLE: Deleting a Page from a PDF Document with PyMuPDF\nDESCRIPTION: This method deletes a single page from a PDF document given its 0-based number. It supports negative indexing to count backwards from the end of the document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\ndelete_page(pno=-1)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic FreeText Annotations in PyMuPDF\nDESCRIPTION: This script shows basic ways to create and manipulate FreeText annotations in PyMuPDF. It demonstrates how to set various properties of FreeText annotations such as position, text content, and appearance.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-annotations.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/annotations-freetext1.py\n```\n\n----------------------------------------\n\nTITLE: Rotating All Pages in a PDF with PyMuPDF\nDESCRIPTION: A simple example showing how to rotate all pages in a PDF document by 90 degrees using a for loop and the set_rotation method.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nfor page in doc: page.set_rotation(90)\n```\n\n----------------------------------------\n\nTITLE: Adding Layer Configuration in PyMuPDF\nDESCRIPTION: Method to add an optional content configuration (layer) to a document, specifying which optional content groups should be visible when the layer is activated.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef add_layer(name, creator=None, on=None)\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison between extract_image and Pixmap\nDESCRIPTION: This code demonstrates the performance difference between using Document.extract_image and creating a Pixmap for extracting images from a PDF. For JPEG images, extract_image is significantly faster and produces smaller output.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_55\n\nLANGUAGE: python\nCODE:\n```\n%timeit pix = pymupdf.Pixmap(doc, 1268);pix.tobytes()\n10.8 ms ± 52.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\nlen(pix.tobytes())\n21462\n\n%timeit img = doc.extract_image(1268)\n10.8 ms ± 86 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\nlen(img[\"image\"])\n21462\n\n%timeit pix = pymupdf.Pixmap(doc, 1186);pix.tobytes()\n341 ms ± 2.86 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\nlen(pix.tobytes())\n2599433\n\n%timeit img = doc.extract_image(1186)\n15.7 µs ± 116 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\nlen(img[\"image\"])\n371177\n```\n\n----------------------------------------\n\nTITLE: Selecting Pages in PDF using PyMuPDF\nDESCRIPTION: Shows how to select specific pages from a PDF document to create a new document containing only the selected pages.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.select([0, 1]) # select the 1st & 2nd page of the document\ndoc.save(\"just-page-one-and-two.pdf\") # save the document\n```\n\n----------------------------------------\n\nTITLE: Moving a Page within a PDF Document using PyMuPDF\nDESCRIPTION: This method moves a page within the PDF document by copying it to a new location and then deleting the original.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\nmove_page(pno, to=-1)\n```\n\n----------------------------------------\n\nTITLE: Inserting Pages with Text Content using PyMuPDF\nDESCRIPTION: Shows how to insert new pages with text content into a PDF document, specifying font properties, text color and page dimensions.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(...)  # some new or existing PDF document\nn = doc.insert_page(-1, # default insertion point\n                    text = \"The quick brown fox jumped over the lazy dog\",\n                    fontsize = 11,\n                    width = 595,\n                    height = 842,\n                    fontname = \"Helvetica\", # default font\n                    fontfile = None, # any font file name\n                    color = (0, 0, 0)) # text color (RGB)\n```\n\n----------------------------------------\n\nTITLE: Using Document as Context Manager in PyMuPDF\nDESCRIPTION: Example demonstrating how to use the Document class as a context manager, which automatically closes the document when exiting the context.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\nwith pymupdf.open(...) as doc:\n        for page in doc: print(\"page %i\" % page.number)\npage 0\npage 1\npage 2\npage 3\n>>> doc.is_closed\nTrue\n>>>\n```\n\n----------------------------------------\n\nTITLE: Inserting Page Links in PyMuPDF\nDESCRIPTION: Demonstrates how to create an internal page link in a PDF document using PyMuPDF. Creates a dictionary with link parameters including the target page number, bounding box, and destination point, then inserts the link using page.insert_link().\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nd = {\"kind\": pymupdf.LINK_GOTO, \"page\": pno, \"from\": bbox, \"to\": point}\npage.insert_link(d)\n```\n\n----------------------------------------\n\nTITLE: Extracting Font Information from PDF Pages\nDESCRIPTION: Example demonstrating how to extract and display font information from a PDF page using get_page_fonts() method\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> pprint(doc.get_page_fonts(0, full=False))\n[(12, 'ttf', 'TrueType', 'FNUUTH+Calibri-Bold', 'R8', ''),\n (13, 'ttf', 'TrueType', 'DOKBTG+Calibri', 'R10', ''),\n (14, 'ttf', 'TrueType', 'NOHSJV+Calibri-Light', 'R12', ''),\n (15, 'ttf', 'TrueType', 'NZNDCL+CourierNewPSMT', 'R14', ''),\n (16, 'ttf', 'Type0', 'MNCSJY+SymbolMT', 'R17', 'Identity-H'),\n (17, 'cff', 'Type1', 'UAEUYH+Helvetica', 'R20', 'WinAnsiEncoding'),\n (18, 'ttf', 'Type0', 'ECPLRU+Calibri', 'R23', 'Identity-H'),\n (19, 'ttf', 'Type0', 'TONAYT+CourierNewPSMT', 'R27', 'Identity-H')]\n```\n\n----------------------------------------\n\nTITLE: Copying Pages in PDF using PyMuPDF\nDESCRIPTION: Demonstrates how to duplicate pages within a PDF document by copying a page and adding it to the end of the document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.copy_page(0) # copy the 1st page and puts it at the end of the document\ndoc.save(\"test-page-copied.pdf\") # save the document\n```\n\n----------------------------------------\n\nTITLE: Updating Annotation Appearance in PyMuPDF\nDESCRIPTION: Synchronizes the appearance of an annotation with its properties after relevant changes. Supports various parameters for different annotation types.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nannot.update(opacity=None, blend_mode=None, fontsize=0, text_color=None, border_color=None, fill_color=None, cross_out=True, rotate=-1)\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Pages from a PDF Document using PyMuPDF\nDESCRIPTION: This method allows deleting multiple pages from a PDF document. It supports various formats for specifying pages to delete, including keyword arguments, positional parameters, lists, tuples, ranges, and Python's del statement with index/slice notation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\ndelete_pages(*args, **kwds)\n```\n\n----------------------------------------\n\nTITLE: Switching Between Layer Configurations in PyMuPDF\nDESCRIPTION: Method to switch to a specific layer configuration view, with an option to make it the default configuration for the document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef switch_layer(number, as_default=False)\n```\n\n----------------------------------------\n\nTITLE: Creating PDF from Images using Page Insertion\nDESCRIPTION: Script that converts multiple images to PDF pages while maintaining original dimensions. Uses PySimpleGUI for progress tracking and PyMuPDF for PDF creation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os, pymupdf\nimport PySimpleGUI as psg  # for showing a progress bar\ndoc = pymupdf.open()  # PDF with the pictures\nimgdir = \"D:/2012_10_05\"  # where the pics are\nimglist = os.listdir(imgdir)  # list of them\nimgcount = len(imglist)  # pic count\n\nfor i, f in enumerate(imglist):\n    img = pymupdf.open(os.path.join(imgdir, f))  # open pic as document\n    rect = img[0].rect  # pic dimension\n    pdfbytes = img.convert_to_pdf()  # make a PDF stream\n    img.close()  # no longer needed\n    imgPDF = pymupdf.open(\"pdf\", pdfbytes)  # open stream as PDF\n    page = doc.new_page(width = rect.width,  # new page with ...\n                       height = rect.height)  # pic dimension\n    page.show_pdf_page(rect, imgPDF, 0)  # image fills the page\n    psg.EasyProgressMeter(\"Import Images\",  # show our progress\n        i+1, imgcount)\n\ndoc.save(\"all-my-pics.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Handling XML Metadata in PDF with Python\nDESCRIPTION: Demonstrates how to read, modify and write XML metadata in PDF files using PyMuPDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nxmlmetadata = doc.get_xml_metadata()\nprint(xmlmetadata)\n\n# write back modified XML metadata:\ndoc.set_xml_metadata(xmlmetadata)\n\n# XML metadata can be deleted like this:\ndoc.del_xml_metadata()\n```\n\n----------------------------------------\n\nTITLE: Cropping PDF Pages with PyMuPDF\nDESCRIPTION: Crop a PDF page to a specified rectangle area.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open document\npage = doc[0] # get the 1st page of the document\npage.set_cropbox(pymupdf.Rect(100, 100, 400, 400)) # set a cropbox for the page\ndoc.save(\"cropped-page-1.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Filling Text Boxes with Rotation in PDF\nDESCRIPTION: Script that creates four equally-sized text boxes and fills them with text at different rotation angles (0, 90, 180, 270 degrees) using PyMuPDF's Shape object.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open()  # new or existing PDF\npage = doc.new_page()  # new page, or choose doc[n]\n\n# write in this overall area\nrect = pymupdf.Rect(100, 100, 300, 150)\n\n# partition the area in 4 equal sub-rectangles\nCELLS = pymupdf.make_table(rect, cols=4, rows=1)\n\nt1 = \"text with rotate = 0.\"  # these texts we will written\nt2 = \"text with rotate = 90.\"\nt3 = \"text with rotate = 180.\"\nt4 = \"text with rotate = 270.\"\ntext = [t1, t2, t3, t4]\nred = pymupdf.pdfcolor[\"red\"]  # some colors\ngold = pymupdf.pdfcolor[\"gold\"]\nblue = pymupdf.pdfcolor[\"blue\"]\n\nshape = page.new_shape()  # create Shape\nfor i in range(len(CELLS[0])):\n    shape.draw_rect(CELLS[0][i])  # draw rectangle\n    shape.insert_textbox(\n        CELLS[0][i], text[i], fontname=\"hebo\", color=blue, rotate=90 * i\n    )\n\nshape.finish(width=0.3, color=red, fill=gold)\n\nshape.commit()  # write all stuff to the page\ndoc.ez_save(__file__.replace(\".py\", \".pdf\"))\n```\n\n----------------------------------------\n\nTITLE: Setting CropBox and Manipulating Page Dimensions in PyMuPDF\nDESCRIPTION: This code snippet demonstrates how to set the CropBox of a PDF page using PyMuPDF. It shows the effects on the page's rect and mediabox properties, and how to revert changes.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n>>> page = doc.new_page()\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> page.cropbox  # cropbox and mediabox still equal\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> # now set cropbox to a part of the page\n>>> page.set_cropbox(pymupdf.Rect(100, 100, 400, 400))\n>>> # this will also change the \"rect\" property:\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 300.0, 300.0)\n>>>\n>>> # but mediabox remains unaffected\n>>> page.mediabox\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>>\n>>> # revert CropBox change\n>>> # either set it to MediaBox\n>>> page.set_cropbox(page.mediabox)\n>>> # or 'refresh' MediaBox: will remove all other rectangles\n>>> page.set_mediabox(page.mediabox)\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Image from PDF Page with PyMuPDF\nDESCRIPTION: This method creates an SVG image from a PDF page. It supports full page images and allows control over text representation in the SVG output. The method returns a UTF-8 encoded string containing the SVG image.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\ndef get_svg_image(matrix=pymupdf.Identity, text_as_path=True):\n    # Implementation details not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Metadata in PyMuPDF\nDESCRIPTION: The 'set_metadata' method sets or updates the metadata of a PDF document. It takes a dictionary with metadata keys and values. Empty values or 'none' are omitted from the metadata.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef set_metadata(m):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Information in Python with PyMuPDF\nDESCRIPTION: Method to modify annotation properties including dates, contents, subject and author. Supports selective updates through dictionary or individual parameter updates.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nset_info(info=None, content=None, title=None, creationDate=None, modDate=None, subject=None)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Tables with Images in PyMuPDF\nDESCRIPTION: This example shows how to create a PDF with an HTML table containing styled cells and an embedded image using PyMuPDF. It demonstrates inline CSS styling and image inclusion within a table cell.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\nimport os\n\nfiledir = os.path.dirname(__file__)\n\n\ntext = \"\"\"\n<style>\nbody {\n    font-family: sans-serif;\n}\n\ntd,\nth {\n    border: 1px solid blue;\n    border-right: none;\n    border-bottom: none;\n    padding: 5px;\n    text-align: center;\n}\n\ntable {\n    border-right: 1px solid blue;\n    border-bottom: 1px solid blue;\n    border-spacing: 0;\n}\n</style>\n\n<body>\n<p><b>Some Colors</b></p>\n<table>\n    <tr>\n    <th>Lime</th>\n    <th>Lemon</th>\n    <th>Image</th>\n    <th>Mauve</th>\n    </tr>\n    <tr>\n    <td>Green</td>\n    <td>Yellow</td>\n    <td><img src=\"img-cake.png\" width=50></td>\n    <td>Between<br>Gray and Purple</td>\n    </tr>\n</table>\n</body>\n\"\"\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page()\nrect = page.rect + (36, 36, -36, -36)\n\n# we must specify an Archive because of the image\npage.insert_htmlbox(rect, text, archive=pymupdf.Archive(\".\"))\n\ndoc.ez_save(__file__.replace(\".py\", \".pdf\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Content Group in PyMuPDF\nDESCRIPTION: Method to add an optional content group (OCG) to a PDF document, which is essential for implementing optional content functionality for controlling object visibility.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef add_ocg(name, config=-1, on=True, intent=\"View\", usage=\"Artwork\")\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Pie Chart with PyMuPDF\nDESCRIPTION: Example demonstrating how to create a circular pie chart with multiple colored segments using PyMuPDF Shape drawing methods.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nshape = page.new_shape()  # start a new shape\ncols = (...)  # a sequence of RGB color triples\npieces = len(cols)  # number of pieces to draw\nbeta = 360. / pieces  # angle of each piece of pie\ncenter = pymupdf.Point(...)  # center of the pie\np0 = pymupdf.Point(...)  # starting point\nfor i in range(pieces):\n    p0 = shape.draw_sector(center, p0, beta,\n                          fullSector=True) # draw piece\n    # now fill it but do not connect ends of the arc\n    shape.finish(fill=cols[i], closePath=False)\nshape.commit()  # update the page\n```\n\n----------------------------------------\n\nTITLE: Enabling Journalling and Performing Operations in PyMuPDF\nDESCRIPTION: This snippet demonstrates how to enable journalling on a PDF document, perform operations like adding pages and text, and navigate the journal by undoing and redoing operations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-journalling.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pymupdf\n>>> doc=pymupdf.open()\n>>> doc.journal_enable()\n\n>>> # try update without an operation:\n>>> page = doc.new_page()\nmupdf: No journalling operation started\n... omitted lines\nRuntimeError: No journalling operation started\n\n>>> doc.journal_start_op(\"op1\")\n>>> page = doc.new_page()\n>>> doc.journal_stop_op()\n\n>>> doc.journal_start_op(\"op2\")\n>>> page.insert_text((100,100), \"Line 1\")\n>>> doc.journal_stop_op()\n\n>>> doc.journal_start_op(\"op3\")\n>>> page.insert_text((100,120), \"Line 2\")\n>>> doc.journal_stop_op()\n\n>>> doc.journal_start_op(\"op4\")\n>>> page.insert_text((100,140), \"Line 3\")\n>>> doc.journal_stop_op()\n\n>>> # show position in journal\n>>> doc.journal_position()\n(4, 4)\n>>> # 4 operations recorded - positioned at bottom\n>>> # what can we do?\n>>> doc.journal_can_do()\n{'undo': True, 'redo': False}\n>>> # currently only undos are possible. Print page content:\n>>> print(page.get_text())\nLine 1\nLine 2\nLine 3\n\n>>> # undo last insert:\n>>> doc.journal_undo()\n>>> # show combined status again:\n>>> doc.journal_position();doc.journal_can_do()\n(3, 4)\n{'undo': True, 'redo': True}\n>>> print(page.get_text())\nLine 1\nLine 2\n\n>>> # our position is now second to last\n>>> # last text insertion was reverted\n>>> # but we can redo / move forward as well:\n>>> doc.journal_redo()\n>>> # our combined status:\n>>> doc.journal_position();doc.journal_can_do()\n(4, 4)\n{'undo': True, 'redo': False}\n>>> print(page.get_text())\nLine 1\nLine 2\nLine 3\n>>> # line 3 has appeared again!\n```\n\n----------------------------------------\n\nTITLE: OCR Document Page Text Extraction in Python\nDESCRIPTION: Example showing how to OCR a document page and store the result in a TextPage object for subsequent text extractions and searches. This approach optimizes performance by performing OCR only once per page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-ocr.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntp = page.get_textpage_ocr(...)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Redrawing Graphics in PyMuPDF\nDESCRIPTION: Script that demonstrates how to extract vector graphics from a page and redraw them on a new page, including handling different drawing commands and properties.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-drawing-and-graphics.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\ndoc = pymupdf.open(\"some.file\")\npage = doc[0]\npaths = page.get_drawings()\n\noutpdf = pymupdf.open()\noutpage = outpdf.new_page(width=page.rect.width, height=page.rect.height)\nshape = outpage.new_shape()\n\nfor path in paths:\n    for item in path[\"items\"]:\n        if item[0] == \"l\":\n            shape.draw_line(item[1], item[2])\n        elif item[0] == \"re\":\n            shape.draw_rect(item[1])\n        elif item[0] == \"qu\":\n            shape.draw_quad(item[1])\n        elif item[0] == \"c\":\n            shape.draw_bezier(item[1], item[2], item[3], item[4])\n        else:\n            raise ValueError(\"unhandled drawing\", item)\n    \n    shape.finish(\n        fill=path[\"fill\"],\n        color=path[\"color\"],\n        dashes=path[\"dashes\"],\n        even_odd=path.get(\"even_odd\", True),\n        closePath=path[\"closePath\"],\n        lineJoin=path[\"lineJoin\"],\n        lineCap=max(path[\"lineCap\"]),\n        width=path[\"width\"],\n        stroke_opacity=path.get(\"stroke_opacity\", 1),\n        fill_opacity=path.get(\"fill_opacity\", 1),\n        )\n\nshape.commit()\noutpdf.save(\"drawings-page-0.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Converting a PDF to bytes object in PyMuPDF\nDESCRIPTION: The tobytes() method writes the current content of the document to a bytes object instead of a file. It accepts the same parameters as save() and is useful for memory-based processing or interfacing with other libraries.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ntobytes(garbage=0, clean=False, deflate=False, deflate_images=False, deflate_fonts=False, ascii=False, expand=0, linear=False, pretty=False, no_new_id=False, encryption=PDF_ENCRYPT_NONE, permissions=-1, owner_pw=None, user_pw=None, use_objstms=0)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Shape Object to Draw a Triangle in PyMuPDF\nDESCRIPTION: This example demonstrates how to create a Shape object, draw three connected squiggly lines forming a triangle, finish the shape with color settings, and commit it to the page. The triangle is filled with yellow and has a blue outline.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pymupdf\n>>> doc=pymupdf.open()\n>>> page=doc.new_page()\n>>> r = pymupdf.Rect(100, 100, 300, 200)\n>>> shape=page.new_shape()\n>>> shape.draw_squiggle(r.tl, r.tr)\n>>> shape.draw_squiggle(r.tr, r.br)\n>>> shape.draw_squiggle(r.br, r.tl)\n>>> shape.finish(color=(0, 0, 1), fill=(1, 1, 0))\n>>> shape.commit()\n>>> doc.save(\"x.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to PDF with PyMuPDF\nDESCRIPTION: This snippet demonstrates how to add custom metadata items to a PDF using PyMuPDF. It first retrieves the metadata xref, then uses xref_set_key to add a new key-value pair to the metadata dictionary. The example adds a custom key 'mykey' with a Unicode value.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwhat, value = doc.xref_get_key(-1, \"Info\")  # /Info key in the trailer\nif what != \"xref\":\n    raise ValueError(\"PDF has no metadata\")\nxref = int(value.replace(\"0 R\", \"\"))  # extract the metadata xref\n# add some private information\ndoc.xref_set_key(xref, \"mykey\", pymupdf.get_pdf_str(\"北京 is Beijing\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Annotation Pixmap in Python with PyMuPDF\nDESCRIPTION: Method to create a pixmap from an annotation as it appears on the page in untransformed coordinates. Supports matrix transformation, DPI specification, colorspace selection and transparency options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nget_pixmap(matrix=pymupdf.Identity, dpi=None, colorspace=pymupdf.csRGB, alpha=False)\n```\n\n----------------------------------------\n\nTITLE: Loading PDF from URL in Pyodide\nDESCRIPTION: Python code demonstrating how to fetch and load a PDF from a URL using Pyodide's http module and PyMuPDF. Shows workaround for URL fetching limitations in Pyodide.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pyodide.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pyodide.http\nr = await pyodide.http.pyfetch('https://...')\ndata = await r.bytes()\ndoc = pymupdf.Document(stream=data)\n```\n\n----------------------------------------\n\nTITLE: Using Context Managers with PyMuPDF Xml Class\nDESCRIPTION: Illustrates the use of context managers to simplify the process of adding nodes and setting text properties in the Xml class. This approach provides a more concise and readable syntax.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/xml-class.rst#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nbody = story.body\nwith body.add_paragraph() as para:\n   para.set_bold().add_text(\"some bold text\")\n   para.set_italic().add_text(\"this is bold and italic\")\n   para.set_italic(False).set_bold(False).add_text(\"regular text\")\n   para.add_text(\"more regular text\")\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Grid Layout with PyMuPDF Story\nDESCRIPTION: This script demonstrates how to create a simple grid layout using PyMuPDF's Story objects and the make_table function. It shows how to arrange content in a grid format.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/simple-grid.py\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Page Images (Clips) in PyMuPDF\nDESCRIPTION: Code that renders only a portion of a page by defining a clip rectangle. This example shows how to render the bottom right quarter of a page with increased resolution.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmat = pymupdf.Matrix(2, 2)  # zoom factor 2 in each direction\nrect = page.rect  # the page rectangle\nmp = (rect.tl + rect.br) / 2  # its middle point, becomes top-left of clip\nclip = pymupdf.Rect(mp, rect.br)  # the area we want\npix = page.get_pixmap(matrix=mat, clip=clip)\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Page Labels Example - Python\nDESCRIPTION: Example showing how to define page label rules in PDF documents using a list of dictionaries. Each dictionary specifies the starting page, prefix, numbering style and first page number.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n[{'startpage': 6, 'prefix': 'A-', 'style': 'D', 'firstpagenum': 10},\n {'startpage': 10, 'prefix': '', 'style': 'D', 'firstpagenum': 1}]\n```\n\n----------------------------------------\n\nTITLE: Handling Image Masks in PDF\nDESCRIPTION: Code demonstrating how to handle PDF images with transparency masks. Creates pixmaps from both the base image and its mask, then combines them to preserve transparency.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npix1 = pymupdf.Pixmap(doc.extract_image(xref)[\"image\"])    # (1) pixmap of image w/o alpha\nmask = pymupdf.Pixmap(doc.extract_image(smask)[\"image\"])   # (2) mask pixmap\npix = pymupdf.Pixmap(pix1, mask)                           # (3) copy of pix1, image mask added\n```\n\n----------------------------------------\n\nTITLE: Rearranging Pages in PDF using PyMuPDF\nDESCRIPTION: Shows how to change the sequence of pages in a PDF document by moving pages to different positions using the move_page method.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open a document\ndoc.move_page(1,0) # move the 2nd page of the document to the start of the document\ndoc.save(\"test-page-moved.pdf\") # save the document\n```\n\n----------------------------------------\n\nTITLE: Using PyMuPDF4LLM with PyMuPDF Pro for Office document support\nDESCRIPTION: Python code demonstrating how to use PyMuPDF4LLM with PyMuPDF Pro to enable support for Office document formats. This extends the library's capabilities beyond PDF files.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf4llm/index.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf4llm\nimport pymupdf.pro\npymupdf.pro.unlock()\nmd_text = pymupdf4llm.to_markdown(\"sample.doc\")\n```\n\n----------------------------------------\n\nTITLE: Rotating PDF Pages with PyMuPDF\nDESCRIPTION: Rotate a specific page in a PDF document by 90 degrees.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open document\npage = doc[0] # get the 1st page of the document\npage.set_rotation(90) # rotate the page\ndoc.save(\"rotated-page-1.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Updating PDF Stream in PyMuPDF\nDESCRIPTION: Method to replace the stream of a PDF object. It can convert a non-stream object into a stream object. Offers options for compression of the inserted stream.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\ndef update_stream(xref, data, new=False, compress=True):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Blocks with PyMuPDF\nDESCRIPTION: Shows block-level text extraction which includes coordinates and block metadata.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app1.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(page.get_text(\"blocks\", sort=False))\n[(50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375,\n'Some text on first page.', 0, 0)]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PyMuPDF Cache Management and Utility Functions in Python\nDESCRIPTION: This example session shows how to use PyMuPDF's cache management features and utility functions. It demonstrates checking cache sizes, creating a document and pixmap, shrinking the cache, generating unique IDs, and observing cache behavior after closing a document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> import pymupdf\n# print the maximum and current cache sizes\n>>> pymupdf.TOOLS.store_maxsize\n268435456\n>>> pymupdf.TOOLS.store_size\n0\n>>> doc = pymupdf.open(\"demo1.pdf\")\n# pixmap creation puts lots of object in cache (text, images, fonts),\n# apart from the pixmap itself\n>>> pix = doc[0].get_pixmap(alpha=False)\n>>> pymupdf.TOOLS.store_size\n454519\n# release (at least) 50% of the storage\n>>> pymupdf.TOOLS.store_shrink(50)\n13471\n>>> pymupdf.TOOLS.store_size\n13471\n# get a few unique numbers\n>>> pymupdf.TOOLS.gen_id()\n1\n>>> pymupdf.TOOLS.gen_id()\n2\n>>> pymupdf.TOOLS.gen_id()\n3\n# close document and see how much cache is still in use\n>>> doc.close()\n>>> pymupdf.TOOLS.store_size\n0\n>>>\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Flags in PyMuPDF\nDESCRIPTION: Changes the annotation flags. Multiple flags can be combined using the | operator.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nannot.set_flags(flags)\n```\n\n----------------------------------------\n\nTITLE: Inserting Rotated Text in PDF Corners\nDESCRIPTION: Demonstrates how to insert text at different rotations (0, 90, -90, 180 degrees) near the corners of a PDF page with visual markers for insertion points.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\ndoc = pymupdf.open()\npage = doc.new_page()\n# the text strings, each having 3 lines\ntext1 = \"rotate=0\\nLine 2\\nLine 3\"\ntext2 = \"rotate=90\\nLine 2\\nLine 3\"\ntext3 = \"rotate=-90\\nLine 2\\nLine 3\"\ntext4 = \"rotate=180\\nLine 2\\nLine 3\"\nred = (1, 0, 0) # the color for the red dots\n# the insertion points, each with a 25 pix distance from the corners\np1 = pymupdf.Point(25, 25)\np2 = pymupdf.Point(page.rect.width - 25, 25)\np3 = pymupdf.Point(25, page.rect.height - 25)\np4 = pymupdf.Point(page.rect.width - 25, page.rect.height - 25)\n# create a Shape to draw on\nshape = page.new_shape()\n\n# draw the insertion points as red, filled dots\nshape.draw_circle(p1,1)\nshape.draw_circle(p2,1)\nshape.draw_circle(p3,1)\nshape.draw_circle(p4,1)\nshape.finish(width=0.3, color=red, fill=red)\n\n# insert the text strings\nshape.insert_text(p1, text1)\nshape.insert_text(p3, text2, rotate=90)\nshape.insert_text(p2, text3, rotate=-90)\nshape.insert_text(p4, text4, rotate=180)\n\n# store our work to the page\nshape.commit()\ndoc.save(...)\n```\n\n----------------------------------------\n\nTITLE: Creating a Story with HTML Source in PyMuPDF\nDESCRIPTION: Creates a PDF file with formatted text using an HTML string and the PyMuPDF Story class. The example places 'Hello World!' text in blue sans-serif font on a letter-sized page with half-inch margins.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\nHTML = \"\"\"\n<p style=\"font-family: sans-serif;color: blue\">Hello World!</p>\n\"\"\"\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")  # output page format: Letter\nWHERE = MEDIABOX + (36, 36, -36, -36)  # leave borders of 0.5 inches\n\nstory = pymupdf.Story(html=HTML)  # create story from HTML\nwriter = pymupdf.DocumentWriter(\"output.pdf\")  # create the writer\n\nmore = 1  # will indicate end of input once it is set to 0\n\nwhile more:  # loop outputting the story\n    device = writer.begin_page(MEDIABOX)  # make new page\n    more, _ = story.place(WHERE)  # layout into allowed rectangle\n    story.draw(device)  # write on page\n    writer.end_page()  # finish page\n\nwriter.close()  # close output file\n```\n\n----------------------------------------\n\nTITLE: Recovering Image Transparency in PyMuPDF\nDESCRIPTION: This code snippet demonstrates how to recover a transparent image from its base image and mask using PyMuPDF's Pixmap objects. It creates pixmaps from the image and mask data, then overlays them to produce the final result.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textpage.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> base = pymupdf.Pixmap(block[\"image\"])\n>>> mask = pymupdf.Pixmap(block[\"mask\"])\n>>> result = pymupdf.Pixmap(base, mask)\n```\n\n----------------------------------------\n\nTITLE: Writing Text to PDF Page in PyMuPDF\nDESCRIPTION: This method writes text from one or more TextWriter objects to a PDF page. It allows customization of text placement, color, opacity, and rotation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef write_text(rect=None, writers=None, overlay=True, color=None, opacity=None, keep_proportion=True, rotate=0, oc=0):\n    \"\"\"PDF only: Write the text of one or more :ref:`Textwriter` objects to the page.\n\n    :arg rect_like rect: where to place the text. If omitted, the rectangle union of the text writers is used.\n    :arg sequence writers: a non-empty tuple / list of :ref:`TextWriter` objects or a single :ref:`TextWriter`.\n    :arg float opacity: set transparency, overwrites resp. value in the text writers.\n    :arg sequ color: set the text color, overwrites  resp. value in the text writers.\n    :arg bool overlay: put the text in foreground or background.\n    :arg bool keep_proportion: maintain the aspect ratio.\n    :arg float rotate: rotate the text by an arbitrary angle.\n    :arg int oc: the :data:`xref` of an :data:`OCG` or :data:`OCMD`. (New in v1.18.4)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Performing Text Search using DisplayList and TextPage in PyMuPDF\nDESCRIPTION: Demonstrates how to search for text on a page by first creating a TextPage from a DisplayList, then searching for specific text and processing the results.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/coop_low.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntp = dl.get_textpage()                    # display list from above\nrlist = tp.search(\"needle\")              # look up \"needle\" locations\nfor r in rlist:                          # work with the found locations, e.g.\n    pix.invert_irect(r.irect)             # invert colors in the rectangles\n```\n\n----------------------------------------\n\nTITLE: Adding an Image with Optional Content Group Control in PyMuPDF\nDESCRIPTION: This snippet demonstrates how to insert an image on a page and associate it with an Optional Content Group (OCG) by passing the OCG's xref to the insert_image method. This allows controlling the image's visibility based on the OCG's state.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-optional-content.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimg_xref = page.insert_image(rect, filename=\"image.file\", oc=xref)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Annotation Names from PDF Page with PyMuPDF\nDESCRIPTION: This method returns a list of names of annotations, widgets, and links in a PDF page. It retrieves the /NM values of every PDF object found in the page's /Annots array.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\ndef annot_names():\n    # Implementation details not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: GUI Integration with PyMuPDF\nDESCRIPTION: Examples of integrating PyMuPDF rendered images with different GUI frameworks like wxPython and Tkinter.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif pix.alpha:\n    bitmap = wx.Bitmap.FromBufferRGBA(pix.width, pix.height, pix.samples)\nelse:\n    bitmap = wx.Bitmap.FromBuffer(pix.width, pix.height, pix.samples)\n\n# Tkinter example with Pillow\nfrom PIL import Image, ImageTk\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\ntkimg = ImageTk.PhotoImage(img)\n```\n\n----------------------------------------\n\nTITLE: Checking Font Glyph Support in PyMuPDF\nDESCRIPTION: This code demonstrates how to create a Font object and retrieve an array of supported Unicode codepoints. The example creates a mathematical symbols font and then obtains all the codepoints that have glyphs in this font.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/font.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pymupdf\n>>> font = pymupdf.Font(\"math\")\n>>> vuc = font.valid_codepoints()\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Border in PyMuPDF\nDESCRIPTION: Changes border width, dashing, style, and cloud effect for PDF annotations. Supports direct parameter specification or dictionary input.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nannot.set_border(border=None, width=None, style=None, dashes=None, clouds=None)\n```\n\n----------------------------------------\n\nTITLE: Iterative Layout with PDF Links using Story.write_stabilized_links() in PyMuPDF\nDESCRIPTION: This script demonstrates creating a document with a table of contents and PDF links using Story.write_stabilized_links() in PyMuPDF. It generates a PDF with internal links corresponding to the original HTML.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/story-write-stabilized-links.py\n```\n\n----------------------------------------\n\nTITLE: Embedding Files in PDF Documents using PyMuPDF\nDESCRIPTION: Shows how to embed a PDF file within another PDF document using PyMuPDF. Opens both documents, converts embedded file to bytes, and adds it to the main document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open main document\nembedded_doc = pymupdf.open(\"my-embed.pdf\") # open document you want to embed\n\nembedded_data = embedded_doc.tobytes() # get the document byte data as a buffer\n\n# embed with the file name and the data\ndoc.embfile_add(\"my-embedded_file.pdf\", embedded_data)\n\ndoc.save(\"document-with-embed.pdf\") # save the document\n```\n\n----------------------------------------\n\nTITLE: Extracting Plain Text with PyMuPDF\nDESCRIPTION: Demonstrates basic text extraction from a PDF page using get_text() method with 'text' format.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app1.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(page.get_text(\"text\"))\nSome text on first page.\n```\n\n----------------------------------------\n\nTITLE: Basic Shape Drawing Pattern in PyMuPDF\nDESCRIPTION: Example showing the basic pattern for creating and committing shapes with multiple draw operations and text insertions.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nshape = page.new_shape()\nshape.draw1(...)\nshape.draw2(...)\n...\nshape.finish(width=..., color=..., fill=..., morph=...)\nshape.draw3(...)\nshape.draw4(...)\n...\nshape.finish(width=..., color=..., fill=..., morph=...)\n...\nshape.insert_text*\n...\nshape.commit()\n....\n```\n\n----------------------------------------\n\nTITLE: Generating Page Annotations in PyMuPDF\nDESCRIPTION: This method returns a generator over the page's annotations. It allows filtering by annotation types and yields Annot objects.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef annots(types=None):\n    \"\"\"Return a generator over the page's annotations.\n\n    :arg sequence types: a sequence of integers to down-select to one or more annotation types. Default is all annotations. Example: `types=(pymupdf.PDF_ANNOT_FREETEXT, pymupdf.PDF_ANNOT_TEXT)` will only return 'FreeText' and 'Text' annotations.\n\n    :rtype: generator\n    :returns: an :ref:`Annot` for each iteration.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Integrating PyMuPDF with LlamaIndex\nDESCRIPTION: Example of how to use PyMuPDF with LlamaIndex using the dedicated PyMuPDFReader. This allows for loading PDF documents into the LlamaIndex framework for further processing.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rag.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.readers.file import PyMuPDFReader\nloader = PyMuPDFReader()\ndocuments = loader.load(file_path=\"example.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Adding Embedded Files to PDF with PyMuPDF\nDESCRIPTION: Illustrates the command syntax for adding a new embedded file to a PDF document using PyMuPDF. The command requires the input PDF, a name for the new entry, and a path to the file data.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npymupdf embed-add -h\n```\n\n----------------------------------------\n\nTITLE: Setting XML Metadata for PDF in PyMuPDF\nDESCRIPTION: The 'set_xml_metadata' method sets or updates the XML metadata of a PDF document. It accepts any string as input, though it should ideally be valid XML syntax.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef set_xml_metadata(xml):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Converting Document to PDF for Image Extraction in PyMuPDF\nDESCRIPTION: Code that converts a non-PDF document to PDF format, enabling access to PDF-specific image extraction methods. The conversion creates a bytes object that can be opened as a PDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> pdfbytes = doc.convert_to_pdf()  # this a bytes object\n>>> pdf = pymupdf.open(\"pdf\", pdfbytes)  # open it as a PDF document\n>>> # now use 'pdf' like any PDF document\n```\n\n----------------------------------------\n\nTITLE: Initializing Device Class for Pixmap or DisplayList in PyMuPDF\nDESCRIPTION: Constructor for creating a Device object that works with either a Pixmap or DisplayList. For Pixmap devices, an optional clip rectangle can be specified to restrict rendering to a specific area.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/device.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n__init__(self, object, clip)\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Line Endings in Python with PyMuPDF\nDESCRIPTION: Method to set line ending styles for annotations that support them, such as Line, PolyLine, and Polygon annotations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nset_line_ends(start, end)\n```\n\n----------------------------------------\n\nTITLE: Drawing Circles in PyMuPDF\nDESCRIPTION: Demonstrates two methods for drawing circles on a PDF page: directly using Page methods and using a Shape object. The Shape object approach allows combining multiple drawings with common properties.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-drawing-and-graphics.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Draw a circle on the page using the Page method\npage.draw_circle((center_x, center_y), radius, color=(1, 0, 0), width=2)\n\n# Draw a circle on the page using a Shape object\nshape = page.new_shape()\nshape.draw_circle((center_x, center_y), radius)\nshape.finish(color=(1, 0, 0), width=2)\nshape.commit(overlay=True)\n```\n\n----------------------------------------\n\nTITLE: Optimizing TextPage Creation with Specific Flags in PyMuPDF\nDESCRIPTION: Shows how to create a TextPage with specific flags to optimize performance. The first example preserves ligatures and whitespace but excludes images, while the second preserves images as well.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/coop_low.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nflags = pymupdf.TEXT_PRESERVE_LIGATURES | pymupdf.TEXT_PRESERVE_WHITESPACE\ntp = dl.get_textpage(flags)\n```\n\n----------------------------------------\n\nTITLE: Checking for Links and Annotations in PDF\nDESCRIPTION: These methods check if a PDF document contains links or annotations. They efficiently parse each page and return as soon as a link or annotation is found. For large documents with no matches, the process may take some time.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nDocument.has_links()\n\nDocument.has_annots()\n```\n\n----------------------------------------\n\nTITLE: Querying Button States in PyMuPDF\nDESCRIPTION: Example of accessing button states of a form field widget to determine possible values for selected/unselected states.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/widget.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(field.field_name, field.button_states())\nGender Second person {'down': ['Male', 'Off'], 'normal': ['Male', 'Off']}\n```\n\n----------------------------------------\n\nTITLE: Converting an Office document to PDF using PyMuPDF Pro\nDESCRIPTION: Python code snippet showing how to convert an Office document to PDF format using PyMuPDF Pro.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf-pro.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf.pro\npymupdf.pro.unlock()\n\ndoc = pymupdf.open(\"my-office-doc.xlsx\")\n\npdfdata = doc.convert_to_pdf()\nwith open('output.pdf', 'wb') as f:\n    f.write(pdfdata)\n```\n\n----------------------------------------\n\nTITLE: PyMuPDF GUI Integration with Multiprocessing\nDESCRIPTION: Advanced example showing inter-process communication between a main GUI process and a child process handling PyMuPDF document operations. Demonstrates how to separate document processing from the user interface.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-multiprocessing.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsamples/multiprocess-gui.py\n```\n\n----------------------------------------\n\nTITLE: Extracting Text in Multiple Formats with TextPage in PyMuPDF\nDESCRIPTION: Shows how to extract text from a TextPage object in various formats including plain text, JSON, HTML, XML, and XHTML.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/coop_low.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntxt  = tp.extractText()                  # plain text format\njson = tp.extractJSON()                  # json format\nhtml = tp.extractHTML()                  # HTML format\nxml  = tp.extractXML()                   # XML format\nxml  = tp.extractXHTML()                 # XHTML format\n```\n\n----------------------------------------\n\nTITLE: Creating Symbol List with PyMuPDF Shapes\nDESCRIPTION: Script that creates a PDF document containing a list of available symbol functions from shapes_and_symbols.py. It demonstrates creating shapes, inserting text, and saving the document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-drawing-and-graphics.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\nimport shapes_and_symbols as sas\n\ntlist = [\n         (sas.arrow, \"arrow (easy)\"),\n         (sas.caro, \"caro (easy)\"),\n         (sas.clover, \"clover (easy)\"),\n         (sas.diamond, \"diamond (easy)\"),\n         (sas.dontenter, \"do not enter (medium)\"),\n         (sas.frowney, \"frowney (medium)\"),\n         (sas.hand, \"hand (complex)\"),\n         (sas.heart, \"heart (easy)\"),\n         (sas.pencil, \"pencil (very complex)\"),\n         (sas.smiley, \"smiley (easy)\"),\n         ]\n\nr = pymupdf.Rect(50, 50, 100, 100)\nd = pymupdf.Rect(0, r.height + 10, 0, r.height + 10)\np = (15, -r.height * 0.2)\nrlist = [r]\n\nfor i in range(1, len(tlist)):\n    rlist.append(rlist[i-1] + d)\n\ndoc = pymupdf.open()\npage = doc.new_page()\nshape = page.new_shape()\n\nfor i, r in enumerate(rlist):\n    tlist[i][0](shape, rlist[i])\n    shape.insert_text(rlist[i].br + p,\n                   tlist[i][1], fontsize=r.height/1.2)\n\nshape.commit()\n\nimport os\nscriptdir = os.path.dirname(__file__)\ndoc.save(os.path.join(scriptdir, \"symbol-list.pdf\"))\n```\n\n----------------------------------------\n\nTITLE: Extracting Annotation Text in Python with PyMuPDF\nDESCRIPTION: Method to retrieve annotation content in various formats including plain text, HTML, XML, and JSON. Primarily useful for FreeText and Stamp annotation types.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nget_text(opt, clip=None, flags=None)\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachment Annotation in PyMuPDF\nDESCRIPTION: Method to add a file attachment annotation with customizable icon. Supports various input formats for file data and allows setting filename, unicode filename, and description.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nadd_file_annot(pos, buffer, filename, ufilename=None, desc=None, icon=\"PushPin\")\n```\n\n----------------------------------------\n\nTITLE: Defining Text Extraction Flags in PyMuPDF\nDESCRIPTION: Constants for text extraction flags in PyMuPDF, including TEXTFLAGS_TEXT, TEXTFLAGS_WORDS, TEXTFLAGS_BLOCKS, TEXTFLAGS_DICT, TEXTFLAGS_RAWDICT, TEXTFLAGS_HTML, TEXTFLAGS_XHTML, TEXTFLAGS_XML, and TEXTFLAGS_SEARCH.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTEXTFLAGS_TEXT = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_CID_FOR_UNKNOWN_UNICODE\n\nTEXTFLAGS_WORDS = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_CID_FOR_UNKNOWN_UNICODE\n\nTEXTFLAGS_BLOCKS = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_CID_FOR_UNKNOWN_UNICODE\n\nTEXTFLAGS_DICT = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE\n\nTEXTFLAGS_RAWDICT = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE\n\nTEXTFLAGS_HTML = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE\n\nTEXTFLAGS_XHTML = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE\n\nTEXTFLAGS_XML = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_CID_FOR_UNKNOWN_UNICODE\n\nTEXTFLAGS_SEARCH = TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_DEHYPHENATE\n```\n\n----------------------------------------\n\nTITLE: Adding Redaction Annotation in PyMuPDF\nDESCRIPTION: Method to add a redaction annotation that marks content for removal. This is the first step of a two-step process, followed by apply_redactions() to actually remove the content.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nadd_redact_annot(quad, text=None, fontname=None, fontsize=11, align=TEXT_ALIGN_LEFT, fill=(1, 1, 1), text_color=(0, 0, 0), cross_out=True)\n```\n\n----------------------------------------\n\nTITLE: Custom Font Usage in PyMuPDF\nDESCRIPTION: This example demonstrates how to use custom fonts with PyMuPDF's insert_htmlbox method. It defines font files using CSS @font-face statements and applies them to the text. The example uses MS Comic Sans font in various styles.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-text.rst#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n    eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n    minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b> \n    nisi ut aliquid ex ea commodi consequat. Quis aute iure \n    <span style=\"color: red;\">reprehenderit</span> \n    in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit \n    esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat \n    cupiditat non proident, sunt in culpa qui \n    <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id \n    est laborum.\"\"\"\n\narch = pymupdf.Archive(\"C:/Windows/Fonts\")\n\ncss = \"\"\"\n@font-face {font-family: comic; src: url(comic.ttf);}\n@font-face {font-family: comic; src: url(comicbd.ttf);font-weight: bold;}\n@font-face {font-family: comic; src: url(comicz.ttf);font-weight: bold;font-style: italic;}\n@font-face {font-family: comic; src: url(comici.ttf);font-style: italic;}\n* {font-family: comic;}\n\"\"\"\n\ndoc = pymupdf.Document()\npage = doc.new_page(width=150, height=150)  # make small page\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch)\n\ndoc.subset_fonts(verbose=True)  # build subset fonts to reduce file size\ndoc.ez_save(__file__.replace(\".py\", \".pdf\"))\n```\n\n----------------------------------------\n\nTITLE: Copying PDFs with PyMuPDF in Python\nDESCRIPTION: Opens a PDF file and saves it to a new output file using PyMuPDF. This approach is used to measure the performance of parsing and processing PDF files.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app4.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\ndoc = pymupdf.open(\"input.pdf\")\ndoc.save(\"output.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Working with Document Pages in PyMuPDF\nDESCRIPTION: Shows different ways to access document pages using load_page method and iterations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npage = doc.load_page(pno)  # loads page number 'pno' of the document (0-based)\npage = doc[pno]  # the short form\n\nfor page in doc:\n    # do something with 'page'\n\n# ... or read backwards\nfor page in reversed(doc):\n    # do something with 'page'\n\n# ... or even use 'slicing'\nfor page in doc.pages(start, stop, step):\n    # do something with 'page'\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Page Layout in PyMuPDF\nDESCRIPTION: The 'set_pagelayout' method sets the /PageLayout of a PDF document. It accepts specific string values representing different layout options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef set_pagelayout(value):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Extracting XML Text with PyMuPDF\nDESCRIPTION: Demonstrates how to extract text in XML format from a PDF page using PyMuPDF's get_text method. The XML output includes detailed information about text positioning, fonts, and colors.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app1.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> for line in page.get_text(\"xml\").splitlines():\n        print(line)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Matrix Effects on Rectangles in PyMuPDF\nDESCRIPTION: Example code showing how to apply matrix transformations to rectangles and draw them on a PDF page using PyMuPDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/matrix.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\n# just definitions and a temp PDF\nRED = (1, 0, 0)\nBLUE = (0, 0, 1)\nGREEN = (0, 1, 0)\ndoc = pymupdf.open()\npage = doc.new_page()\n\n# rectangle\nr1 = pymupdf.Rect(100, 100, 200, 200)\n\n# scales down by 50% in x- and up by 50% in y-direction\nmat1 = pymupdf.Matrix(0.5, 1.5)\n\n# shifts by 50 in both directions\nmat2 = pymupdf.Matrix(1, 0, 0, 1, 50, 50)\n\n# draw corresponding rectangles\npage.draw_rect(r1, color=RED)  # original\npage.draw_rect(r1 * mat1, color=GREEN)  # scaled\npage.draw_rect(r1 * mat2, color=BLUE)  # shifted\ndoc.ez_save(\"matrix-effects.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Rectangle in PyMuPDF\nDESCRIPTION: Changes the rectangle of an annotation. This can move the annotation or scale its sides independently.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nannot.set_rect(rect)\n```\n\n----------------------------------------\n\nTITLE: Page Link and Annotation Iteration in PyMuPDF\nDESCRIPTION: Demonstrates how to iterate through page links, annotations, and form fields.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# get all links on a page\nlinks = page.get_links()\n\nfor link in page.links():\n    # do something with 'link'\n\nfor annot in page.annots():\n    # do something with 'annot'\n\nfor field in page.widgets():\n    # do something with 'field'\n```\n\n----------------------------------------\n\nTITLE: Setting Anti-Aliasing Level in PyMuPDF\nDESCRIPTION: This method sets the number of bits to use for anti-aliasing in graphics and text rendering. The level should be an integer between 0 and 8. Values outside this range will be adjusted to valid values. The setting remains in effect for the current session or until changed again.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nset_aa_level(level)\n```\n\n----------------------------------------\n\nTITLE: Adding Images to a Story in PyMuPDF\nDESCRIPTION: Demonstrates how to add images to a Story by using an Archive to reference the image location. This example adds an image from the local directory after the formatted text.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")\nWHERE = MEDIABOX + (36, 36, -36, -36)\n\n# create story, let it look at script folder for resources\nstory = pymupdf.Story(archive=\".\")\nbody = story.body  # access the body of its DOM\n\nwith body.add_paragraph() as para:\n    # store desired content\n    para.set_font(\"sans-serif\").set_color(\"blue\").add_text(\"Hello World!\")\n\n# another paragraph for our image:\nwith body.add_paragraph() as para:\n    # store image in another paragraph\n    para.add_image(\"world.jpg\")\n\nwriter = pymupdf.DocumentWriter(\"output.pdf\")\n\nmore = 1\n\nwhile more:\n    device = writer.begin_page(MEDIABOX)\n    more, _ = story.place(WHERE)\n    story.draw(device)\n    writer.end_page()\n\nwriter.close()\n```\n\n----------------------------------------\n\nTITLE: Matrix Transformations with PyMuPDF Objects\nDESCRIPTION: Demonstration of matrix operations including transforming points with matrices, matrix multiplication, division, and handling non-invertible matrices.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/algebra.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> m = pymupdf.Matrix(1, 2, 3, 4, 5, 6)\n>>> n = pymupdf.Matrix(6, 5, 4, 3, 2, 1)\n>>> p = pymupdf.Point(1, 2)\n>>> p * m\nPoint(12.0, 16.0)\n>>> p * (1, 2, 3, 4, 5, 6)\nPoint(12.0, 16.0)\n>>> p / m\nPoint(2.0, -2.0)\n>>> p / (1, 2, 3, 4, 5, 6)\nPoint(2.0, -2.0)\n>>>\n>>> m * n  # matrix multiplication\nMatrix(14.0, 11.0, 34.0, 27.0, 56.0, 44.0)\n>>> m / n  # matrix division\nMatrix(2.5, -3.5, 3.5, -4.5, 5.5, -7.5)\n>>>\n>>> m / m  # result is equal to the Identity matrix\nMatrix(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n>>>\n>>> # look at this non-invertible matrix:\n>>> m = pymupdf.Matrix(1, 0, 1, 0, 1, 0)\n>>> ~m\nMatrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\n>>> # we try dividing by it in two ways:\n>>> p = pymupdf.Point(1, 2)\n>>> p * ~m  # this delivers point (0, 0):\nPoint(0.0, 0.0)\n>>> p / m  # but this is an exception:\nTraceback (most recent call last):\n  File \"<pyshell#6>\", line 1, in <module>\n    p / m\n  File \"... /site-packages/fitz/pymupdf.py\", line 869, in __truediv__\n    raise ZeroDivisionError(\"matrix not invertible\")\nZeroDivisionError: matrix not invertible\n>>>\n```\n\n----------------------------------------\n\nTITLE: Creating Ink Annotations with Mathematical Curves in PyMuPDF\nDESCRIPTION: This script creates an Ink annotation representing mathematical curves (sine and cosine function graphs) as line segments. It demonstrates how to use point lists to define freehand scribbling in PyMuPDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-annotations.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/annotations-ink.py\n```\n\n----------------------------------------\n\nTITLE: Creating Tkinter Image from PyMuPDF Pixmap\nDESCRIPTION: Code to convert a PyMuPDF Pixmap to a Tkinter PhotoImage, handling transparency.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npix1 = pymupdf.Pixmap(pix, 0) if pix.alpha else pix  # PPM does not support transparency\nimgdata = pix1.tobytes(\"ppm\")  # extremely fast!\ntkimg = tkinter.PhotoImage(data = imgdata)\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Page Mode in PyMuPDF\nDESCRIPTION: The 'set_pagemode' method sets the /PageMode of a PDF document. It accepts specific string values representing different page mode options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef set_pagemode(value):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text from Page Search Results with get_textbox\nDESCRIPTION: Example of using the get_textbox method to retrieve text from a search result rectangle. This method extracts text contained within a specified rectangle on the page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\n>>> rl = page.search_for(\"currency:\")\n>>> page.get_textbox(rl[0])\n'Currency:'\n>>>\n```\n\n----------------------------------------\n\nTITLE: Computing Clip Rectangle from Zoom Factor in PyMuPDF\nDESCRIPTION: Code that calculates the appropriate clip rectangle dimensions based on a given zoom factor and GUI window size, ensuring the clip stays within the page boundaries.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwidth = WIDTH / zoom\nheight = HEIGHT / zoom\nclip = pymupdf.Rect(tl, tl.x + width, tl.y + height)\n# ensure we still are inside the page\nclip &= page.rect\nmat = pymupdf.Matrix(zoom, zoom)\npix = pymupdf.Pixmap(matrix=mat, clip=clip)\n```\n\n----------------------------------------\n\nTITLE: Drawing Squiggle Line on PDF Page with PyMuPDF\nDESCRIPTION: Method to draw a squiggly (wavy, undulated) line between two points on a PDF page. Supports customization of breadth, color, width, and opacity.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\ndef draw_squiggle(p1, p2, breadth=2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0):\n```\n\n----------------------------------------\n\nTITLE: PDF Named Destinations Dictionary Example - Python\nDESCRIPTION: Example showing the structure of resolved PDF named destinations dictionary containing page numbers, target coordinates and zoom factors.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n{\n    '__bookmark_1': {'page': 0, 'to': (0.0, 541.0), 'zoom': 0.0},\n    '__bookmark_2': {'page': 0, 'to': (0.0, 481.45), 'zoom': 0.0},\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Document Journaling\nDESCRIPTION: This method enables the journaling feature for the document. Journaling tracks changes made to the document, allowing for functionality like undo/redo operations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nDocument.journal_enable()\n```\n\n----------------------------------------\n\nTITLE: Adding Text Annotation (Sticky Note) in PyMuPDF\nDESCRIPTION: Method to add a comment icon with hidden text that appears on mouse hover. Returns an Annot object with yellow stroke color and supports different icon types.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nadd_text_annot(point, text, icon=\"Note\")\n```\n\n----------------------------------------\n\nTITLE: Displaying List from JSON Data with PyMuPDF Story\nDESCRIPTION: This example uses JSON data to populate a Story object in PyMuPDF. It includes visual text formatting and demonstrates how to add links within the document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/json-example.py\n```\n\n----------------------------------------\n\nTITLE: Controlling MuPDF Warning Display in PyMuPDF\nDESCRIPTION: This method controls whether MuPDF warnings should be displayed as PyMuPDF messages. If set to True, future MuPDF warnings will be shown as messages. Regardless of this setting, MuPDF warnings are always stored in the warnings store. The default value is True when PyMuPDF is imported.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmupdf_display_warnings(value=None)\n```\n\n----------------------------------------\n\nTITLE: Including Images in TextPage Extraction in PyMuPDF\nDESCRIPTION: Demonstrates how to set flags to include image extraction alongside text when creating a TextPage from a DisplayList.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/coop_low.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nflags = pymupdf.TEXT_PRESERVE_LIGATURES | pymupdf.TEXT_PRESERVE_WHITESPACE | pymupdf.TEXT_PRESERVE_IMAGES\n```\n\n----------------------------------------\n\nTITLE: Reading External HTML and CSS Files for Stories in PyMuPDF\nDESCRIPTION: Shows how to read HTML and CSS content from external files using pathlib and properly decode them before using in a Story. This approach is recommended for handling external content.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pathlib\nimport pymupdf\n\nhtmlpath = pathlib.Path(\"myhtml.html\")\ncsspath = pathlib.Path(\"mycss.css\")\n\nHTML = htmlpath.read_bytes().decode()\nCSS = csspath.read_bytes().decode()\n\nstory = pymupdf.Story(html=HTML, user_css=CSS)\n```\n\n----------------------------------------\n\nTITLE: Comparing Text Length Calculation Methods in PyMuPDF\nDESCRIPTION: This code demonstrates different ways to measure text length using PyMuPDF's Font.text_length method and compares it with the sum of individual character lengths using Font.char_lengths method.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/font.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> font = pymupdf.Font(\"helv\")\n>>> text = \"PyMuPDF\"\n>>> font.text_length(text)\n50.115999937057495\n>>> pymupdf.get_text_length(text, fontname=\"helv\")\n50.115999937057495\n>>> sum(font.char_lengths(text))\n50.115999937057495\n>>> pprint(font.char_lengths(text))\n(7.336999952793121,  # P\n5.5,                 # y\n9.163000047206879,   # M\n6.115999937057495,   # u\n7.336999952793121,   # P\n7.942000031471252,   # D\n6.721000015735626)   # F\n```\n\n----------------------------------------\n\nTITLE: Initializing a Story Object in PyMuPDF\nDESCRIPTION: Creates a Story object that parses and holds HTML/CSS content as a DOM, which can later be laid out and drawn to PDF pages. Accepts HTML content, CSS styling, default font size, and an optional archive for resources.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/story-class.rst#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n__init__(self, html=None, user_css=None, em=12, archive=None)\n```\n\n----------------------------------------\n\nTITLE: Setting PDF TOC Item Properties in PyMuPDF\nDESCRIPTION: The 'set_toc_item' method changes properties of a specific TOC item in a PDF document. It can modify the item's title, destination, appearance, or collapsing of sub-items.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef set_toc_item(idx, dest_dict=None, kind=None, pno=None, uri=None, title=None, to=None, filename=None, zoom=0):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Loading PyMuPDF in Pyodide\nDESCRIPTION: Python code to load a PyMuPDF wheel from a URL in a Pyodide environment. Uses pyodide_js to load the package and import pymupdf.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pyodide.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pyodide_js\nawait pyodide_js.loadPackage(url)\nimport pymupdf\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Catalog in Python\nDESCRIPTION: Script to access and print the PDF catalog object, which serves as a root object containing important PDF information and options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\ndoc=pymupdf.open(\"PyMuPDF.pdf\")\ncat = doc.pdf_catalog()  # get xref of the /Catalog\nprint(doc.xref_object(cat))  # print object definition\n```\n\n----------------------------------------\n\nTITLE: Accessing Standard PDF Metadata with PyMuPDF\nDESCRIPTION: This snippet demonstrates how to access standard metadata fields of a PDF document using PyMuPDF's Document.metadata attribute. It prints out a dictionary containing common metadata fields such as author, creation date, and title.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npprint(doc.metadata)\n```\n\n----------------------------------------\n\nTITLE: Adding Ink Annotation (Freehand Scribble) in PyMuPDF\nDESCRIPTION: Method to add freehand scribble annotations by specifying points through which connecting lines are drawn. Returns an annotation with black stroke color and line width 1.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nadd_ink_annot(list)\n```\n\n----------------------------------------\n\nTITLE: Converting Between Image Formats with PyMuPDF\nDESCRIPTION: Basic image format conversion using PyMuPDF's Pixmap class. Shows how to load an image and save it in a different format.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npix = pymupdf.Pixmap(\"input.xxx\")  # any supported input format\npix.save(\"output.yyy\")  # any supported output format\n```\n\n----------------------------------------\n\nTITLE: Drawing Bézier Curve in PDF with PyMuPDF\nDESCRIPTION: Method to draw a cubic Bézier curve from p1 to p4 with control points p2 and p3 in a PDF document. Supports various line styling options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\ndraw_bezier(p1, p2, p3, p4, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Opening Text Files with PyMuPDF\nDESCRIPTION: Example of opening a plain text file as a document using PyMuPDF. By specifying the filetype as 'txt', any text-based file can be processed and manipulated like other document types.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/how-to-open-a-file.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(\"my_program.py\", filetype=\"txt\")\n```\n\n----------------------------------------\n\nTITLE: Creating PNG from NumPy Array with PyMuPDF\nDESCRIPTION: Demonstrates creating a PNG image from a NumPy array using PyMuPDF, which is faster than most other methods\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pymupdf\n\nheight = 150\nwidth  = 100\nbild = np.ndarray((height, width, 3), dtype=np.uint8)\n\nfor i in range(height):\n    for j in range(width):\n        # one pixel (some fun coloring)\n        bild[i, j] = [(i+j)%256, i%256, j%256]\n\nsamples = bytearray(bild.tostring())    # get plain pixel data from numpy array\npix = pymupdf.Pixmap(pymupdf.csRGB, width, height, samples, alpha=False)\npix.save(\"test.png\")\n```\n\n----------------------------------------\n\nTITLE: Converting sRGB to PDF Color Format\nDESCRIPTION: Function that converts an sRGB integer color value to PDF color triple format, where each component is normalized between 0 and 1.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsRGB_to_pdf(0xff0000) = (1, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: TextWriter Attribute Definitions\nDESCRIPTION: Definitions of TextWriter class attributes including text_rect, last_point, opacity, color, and rect. These attributes provide access to text positioning, appearance, and boundary information.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textwriter.rst#2025-04-11_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. attribute:: text_rect\n\n      The area currently occupied.\n\n      :rtype: :ref:`Rect`\n\n   .. attribute:: last_point\n\n      The \"cursor position\" -- a :ref:`Point` -- after the last written character (its bottom-right).\n\n      :rtype: :ref:`Point`\n\n   .. attribute:: opacity\n\n      The text opacity (modifiable).\n\n      :rtype: float\n\n   .. attribute:: color\n\n      The text color (modifiable).\n\n      :rtype: float,tuple\n\n   .. attribute:: rect\n\n      The page rectangle for which this TextWriter was created. Must not be modified.\n\n      :rtype: :ref:`Rect`\n```\n\n----------------------------------------\n\nTITLE: Building PyMuPDF from Local Source\nDESCRIPTION: Command to build and install PyMuPDF from a local source tree. This will automatically download the required MuPDF version.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd PyMuPDF && pip install .\n```\n\n----------------------------------------\n\nTITLE: Saving extracted Markdown content to a file\nDESCRIPTION: Python code to save the extracted Markdown content to a UTF-8 encoded file. This snippet shows how to persist the extracted content for further use.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf4llm/index.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pathlib\npathlib.Path(\"output.md\").write_bytes(md_text.encode())\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Name in PyMuPDF\nDESCRIPTION: Changes the name field of an annotation. For 'FileAttachment' and 'Text' annotations, this sets the icon name. For 'Stamp' annotations, it sets the text in the stamp.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nannot.set_name(name)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Table Features with PyMuPDF Story\nDESCRIPTION: This script demonstrates basic table features using PyMuPDF's Story functionality. It likely includes table creation, cell formatting, and basic layout options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/table01.py\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle Method - Python\nDESCRIPTION: Draws a rectangle on a page with optional rounded corners. Takes a rect_like parameter and optional radius for rounded corners. Returns the top-left corner point.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndraw_rect(rect, *, radius=None)\n```\n\n----------------------------------------\n\nTITLE: Drawing Circular Sector in PDF with PyMuPDF\nDESCRIPTION: Method to draw a circular sector in a PDF document, with options to connect the arc to the circle's center. Supports various styling parameters.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\ndraw_sector(center, point, angle, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, fullSector=True, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Opening a JSON File as Text with PyMuPDF\nDESCRIPTION: Example of opening a JSON file as a text document in PyMuPDF. This allows JSON data files to be analyzed, searched, or converted to other formats like PDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/how-to-open-a-file.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(\"more_of_my_data.json\", filetype=\"txt\")\n```\n\n----------------------------------------\n\nTITLE: Writing Story Content to a DocumentWriter in PyMuPDF\nDESCRIPTION: Handles the complete process of placing and drawing Story content to a DocumentWriter, eliminating the need for manual implementation of place() and draw() loops. Uses callback functions to control the layout behavior.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/story-class.rst#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nwrite(writer, rectfn, positionfn=None, pagefn=None)\n```\n\n----------------------------------------\n\nTITLE: Defining Annotation Types in PyMuPDF\nDESCRIPTION: Constants for annotation types in PyMuPDF, including various PDF annotation types such as text, link, free text, line, square, circle, polygon, and more.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nPDF_ANNOT_TEXT = 0\nPDF_ANNOT_LINK = 1\nPDF_ANNOT_FREE_TEXT = 2\nPDF_ANNOT_LINE = 3\nPDF_ANNOT_SQUARE = 4\nPDF_ANNOT_CIRCLE = 5\nPDF_ANNOT_POLYGON = 6\nPDF_ANNOT_POLY_LINE = 7\nPDF_ANNOT_HIGHLIGHT = 8\nPDF_ANNOT_UNDERLINE = 9\nPDF_ANNOT_SQUIGGLY = 10\nPDF_ANNOT_STRIKE_OUT = 11\nPDF_ANNOT_REDACT = 12\nPDF_ANNOT_STAMP = 13\nPDF_ANNOT_CARET = 14\nPDF_ANNOT_INK = 15\nPDF_ANNOT_POPUP = 16\nPDF_ANNOT_FILE_ATTACHMENT = 17\nPDF_ANNOT_SOUND = 18\nPDF_ANNOT_MOVIE = 19\nPDF_ANNOT_RICH_MEDIA = 20\nPDF_ANNOT_WIDGET = 21\nPDF_ANNOT_SCREEN = 22\nPDF_ANNOT_PRINTER_MARK = 23\nPDF_ANNOT_TRAP_NET = 24\nPDF_ANNOT_WATERMARK = 25\nPDF_ANNOT_3D = 26\nPDF_ANNOT_PROJECTION = 27\nPDF_ANNOT_UNKNOWN = -1\n```\n\n----------------------------------------\n\nTITLE: Setting Form Field State in PyMuPDF\nDESCRIPTION: Example showing how to set and verify the state of checkboxes and radio buttons using on_state()\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/widget.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfield.field_value = field.on_state()\nfield.field_value == field.on_state()\nTrue\n```\n\n----------------------------------------\n\nTITLE: PDF Document Joining Example\nDESCRIPTION: Code demonstrating how to append one PDF document to another using PyMuPDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# append complete doc2 to the end of doc1\ndoc1.insert_pdf(doc2)\n```\n\n----------------------------------------\n\nTITLE: Pixmap Copy Example - Python\nDESCRIPTION: Example demonstrating how to copy the lower right quarter of one pixmap to another pixmap's top-left corner. Shows usage of set_origin() and copy() methods.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pixmap.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# safeguard: set top-left of pix1 and pix2 to (0, 0)\npix1.set_origin(0, 0)\npix2.set_origin(0, 0)\n# compute top-left coordinates of pix2 region to copy\nx1 = int(pix2.width / 2)\ny1 = int(pix2.height / 2)\n# shift top-left of pix2 such, that the to-be-copied\n# area starts at (0, 0):\npix2.set_origin(-x1, -y1)\n# now copy ...\npix1.copy(pix2, (0, 0, x1, y1))\n```\n\n----------------------------------------\n\nTITLE: Rectangle Operations in PyMuPDF: Inclusion, Intersection, and Containment\nDESCRIPTION: Example of creating a minimal rectangle that encloses a set of points, demonstrating the inclusion (|) operator and the containment check (in) for rectangles.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/algebra.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> # first define some point-likes\n>>> points = []\n>>> for i in range(10):\n        for j in range(10):\n            points.append((i, j))\n>>>\n>>> # now create a rectangle containing all these 100 points\n>>> # start with an empty rectangle\n>>> r = pymupdf.Rect(points[0], points[0])\n>>> for p in points[1:]:  # and include remaining points one by one\n        r |= p\n>>> r  # here is the to be expected result:\nRect(0.0, 0.0, 9.0, 9.0)\n>>> (4, 5) in r  # this point-like lies inside the rectangle\nTrue\n```\n\n----------------------------------------\n\nTITLE: Iterating through PDF xref Table in Python\nDESCRIPTION: Script to loop through the PDF's xref table and print each object's definition. Skips object 0 which is reserved.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nxreflen = doc.xref_length()  # length of objects table\nfor xref in range(1, xreflen):  # skip item 0!\n    print(\"\")\n    print(\"object %i (stream: %s)\" % (xref, doc.xref_is_stream(xref)))\n    print(doc.xref_object(xref, compressed=False))\n```\n\n----------------------------------------\n\nTITLE: Adding Rectangle Annotation in PyMuPDF\nDESCRIPTION: Method to add a rectangle annotation within a specified rectangle. Returns an annotation with red stroke color and line width 1, with fill color support.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nadd_rect_annot(rect)\n```\n\n----------------------------------------\n\nTITLE: Drawing Polyline in PDF with PyMuPDF\nDESCRIPTION: Method to draw several connected lines defined by a sequence of points in a PDF document. Supports various line styling options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\ndraw_polyline(points, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Table of Contents in PyMuPDF\nDESCRIPTION: The 'set_toc' method replaces the entire outline tree (table of contents) of a PDF document. It accepts a sequence of bookmark entries and an optional collapse level parameter.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef set_toc(toc, collapse=1):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: TextWriter write_text Method Definition\nDESCRIPTION: Method to write text to a PDF page with options for opacity, color, morphing, overlay, OCG and render mode settings. The page parameter is mandatory while others are optional overrides.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textwriter.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwrite_text(page, opacity=None, color=None, morph=None, overlay=True, oc=0, render_mode=0)\n```\n\n----------------------------------------\n\nTITLE: Running DisplayList through a Device in Python for PyMuPDF\nDESCRIPTION: Runs the DisplayList through a device, applying a transformation matrix and considering a specific area. This method populates the DisplayList with commands for text extraction or image creation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/displaylist.rst#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nrun(device, matrix, area)\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Colors in PyMuPDF\nDESCRIPTION: Changes the 'stroke' and 'fill' colors for supported annotation types. Colors can be specified directly or via a dictionary.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nannot.set_colors(colors=None, stroke=None, fill=None)\n```\n\n----------------------------------------\n\nTITLE: Text Render Mode Examples in PyMuPDF\nDESCRIPTION: Integer values controlling text appearance for insert_text and insert_textbox methods. Values range from 0-7 affecting fill and stroke behavior.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrender_mode = 0  # fill only (default)\nrender_mode = 1  # stroke only\nrender_mode = 2  # fill and stroke\nrender_mode = 3  # invisible\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Content Cross-Reference in PyMuPDF\nDESCRIPTION: Method to set or remove an optional contents object cross-reference for an image or form xobject in a PDF document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef set_oc(xref, ocxref)\n```\n\n----------------------------------------\n\nTITLE: Retrieving OCG Details Example - Python\nDESCRIPTION: Example showing how to get details of all Optional Content Groups using get_ocgs() method, which returns a dictionary of OCG properties.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> pprint(doc.get_ocgs())\n{13: {'on': True,\n      'intent': ['View', 'Design'],\n      'name': 'Circle',\n      'usage': 'Artwork'},\n14: {'on': True,\n      'intent': ['View', 'Design'],\n      'name': 'Square',\n      'usage': 'Artwork'},\n15: {'on': False, 'intent': ['View'], 'name': 'Square', 'usage': 'Artwork'}}\n>>>\n```\n\n----------------------------------------\n\nTITLE: Embedding Files into PDF\nDESCRIPTION: Script that embeds multiple files into a single PDF document. Creates one empty page and embeds files as attachments. Works with any file type, not just images.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os, pymupdf\nimport PySimpleGUI as psg  # for showing progress bar\ndoc = pymupdf.open()  # PDF with the pictures\nimgdir = \"D:/2012_10_05\"  # where my files are\n\nimglist = os.listdir(imgdir)  # list of pictures\nimgcount = len(imglist)  # pic count\nimglist.sort()  # nicely sort them\n\nfor i, f in enumerate(imglist):\n    img = open(os.path.join(imgdir,f), \"rb\").read()  # make pic stream\n    doc.embfile_add(img, f, filename=f,  # and embed it\n                        ufilename=f, desc=f)\n    psg.EasyProgressMeter(\"Embedding Files\",  # show our progress\n        i+1, imgcount)\n\npage = doc.new_page()  # at least 1 page is needed\n\ndoc.save(\"all-my-pics-embedded.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Rotation in PyMuPDF\nDESCRIPTION: Sets the rotation of an annotation. This rotates the annotation rectangle around its center point and calculates a new rectangle from the resulting quad.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nannot.set_rotation(angle)\n```\n\n----------------------------------------\n\nTITLE: Drawing Curve in PDF with PyMuPDF\nDESCRIPTION: Method to draw a special case of Bézier curve in a PDF document. It's a simplified version of the draw_bezier() method.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\ndraw_curve(p1, p2, p3, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Manipulating PyMuPDF Rect with Numbers\nDESCRIPTION: Example of adding a number to a Rect object, checking if a number is in a Rect, and dividing a page rectangle by 2 to create a quarter rectangle.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/algebra.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> pymupdf.Rect(1, 2, 3, 4) + 5\nRect(6.0, 7.0, 8.0, 9.0)\n>>> 3 in pymupdf.Rect(1, 2, 3, 4)\nTrue\n>>> \n\n>>> page.rect\nRect(0.0, 0.0, 595.0, 842.0)\n>>> page.rect / 2\nRect(0.0, 0.0, 297.5, 421.0)\n>>> \n```\n\n----------------------------------------\n\nTITLE: Setting Tesseract Data Environment Variable on Unix Systems\nDESCRIPTION: Command to set the TESSDATA_PREFIX environment variable on Unix systems to enable OCR functionality.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndeclare -x TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing PyMuPDF Archives\nDESCRIPTION: Example showing how to create an Archive object in PyMuPDF, add multiple resources with a path prefix, and print the resulting archive structure. The example adds two folders and an image file to demonstrate the representation of different resource types.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/archive-class.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pprint import pprint\n>>> import pymupdf\n>>> dir1 = \"fitz-32\"  # a folder name\n>>> dir2 = \"fitz-64\"  # a folder name\n>>> img = (\"nur-ruhig.jpg\", \"img\")  # an image file\n>>> members = (dir1, img, dir2)  # we want to append these in one go\n>>> arch = pymupdf.Archive()\n>>> arch.add(members, path=\"mypath\")\n>>> pprint(arch.entry_list)\n[{'entries': ['310', '37', '38', '39'], 'fmt': 'dir', 'path': 'mypath'},\n{'entries': ['img'], 'fmt': 'tree', 'path': 'mypath'},\n{'entries': ['310', '311', '37', '38', '39', 'pypy'],\n'fmt': 'dir',\n'path': 'mypath'}]\n>>> \n```\n\n----------------------------------------\n\nTITLE: Baking PDF Annotations and Widgets in PyMuPDF\nDESCRIPTION: The 'bake' method converts annotations and/or widgets to become permanent parts of the PDF pages. This changes the document, potentially removing its form functionality.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef bake(*, annots=True, widgets=True):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Document Class Import Example\nDESCRIPTION: Shows the two equivalent ways to create a Document object in PyMuPDF - using either Document() or open() constructor.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npymupdf.Document(...)\npymupdf.open(...)\n```\n\n----------------------------------------\n\nTITLE: Initializing Device Class for TextPage in PyMuPDF\nDESCRIPTION: Constructor for creating a Device object that works with a TextPage. The flags parameter controls how text is parsed into the text page, with options from the TextPreserve enumeration.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/device.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__init__(self, textpage, flags=0)\n```\n\n----------------------------------------\n\nTITLE: Clustering Vector Graphics in PyMuPDF\nDESCRIPTION: Method to cluster vector graphics based on geometrical vicinity. It processes the output of Page.get_drawings() and groups paths that are close to each other within specified tolerances.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef cluster_drawings(clip=None, drawings=None, x_tolerance=3, y_tolerance=3):\n```\n\n----------------------------------------\n\nTITLE: Placing Story Content in a Rectangle in PyMuPDF\nDESCRIPTION: Calculates what portion of the Story content will fit in a provided rectangle, maintaining a pointer to continue from in subsequent calls. Returns whether more content remains and the portion of the rectangle that was filled.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/story-class.rst#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nplace(where)\n```\n\n----------------------------------------\n\nTITLE: Adding Caret Annotation in PyMuPDF\nDESCRIPTION: Method to add a caret annotation to indicate text edits on a PDF page. Returns an Annot object with blue stroke color and no fill color.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nadd_caret_annot(point)\n```\n\n----------------------------------------\n\nTITLE: Drawing Quadrilateral in PDF with PyMuPDF\nDESCRIPTION: Method to draw a quadrilateral in a PDF document. Supports various line and fill styling options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\ndraw_quad(quad, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)\n```\n\n----------------------------------------\n\nTITLE: Rect Rounding Example - Python\nDESCRIPTION: Demonstrates rounding a Rect object to the smallest containing IRect. Shows how the top-left corner is rounded upwards/left and bottom-right downwards/right.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rect.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> pymupdf.Rect(0.5, -0.01, 123.88, 455.123456).round()\nIRect(0, -1, 124, 456)\n```\n\n----------------------------------------\n\nTITLE: Retrieving PDF Object Definition in PyMuPDF\nDESCRIPTION: Method to get the definition source of a PDF object. It accepts the object's xref, and options for compressed output and ASCII encoding of binary data.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\ndef xref_object(xref, compressed=False, ascii=False):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Listing Embedded Files in PDF with PyMuPDF\nDESCRIPTION: Shows how to list embedded files in a PDF using the PyMuPDF command-line interface. The command displays the names of all embedded files found in the specified PDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npymupdf embed-info some.pdf\n```\n\n----------------------------------------\n\nTITLE: Saving Extracted Font as External File\nDESCRIPTION: This example demonstrates how to use the extract_font method to save an embedded font from a PDF as an external file. It gets the font data and suggested file extension, then writes the content to a file.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_57\n\nLANGUAGE: python\nCODE:\n```\n# store font as an external file\nname, ext, _, content = doc.extract_font(4711)\n# assuming content is not None:\nofile = open(name + \".\" + ext, \"wb\")\nofile.write(content)\nofile.close()\n```\n\n----------------------------------------\n\nTITLE: Initializing Colorspace Object in Python\nDESCRIPTION: Constructor for the Colorspace class that takes an integer parameter identifying the colorspace type (RGB, GRAY, or CMYK).\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/colorspace.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n__init__(self, n)\n```\n\n----------------------------------------\n\nTITLE: Handling Rotated PDF Pages in PyMuPDF\nDESCRIPTION: This snippet shows how to work with rotated PDF pages in PyMuPDF. It demonstrates the use of rotation_matrix to calculate new coordinates after page rotation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n>>> page.set_rotation(90)  # rotate an ISO A4 page\n>>> page.rect\nRect(0.0, 0.0, 842.0, 595.0)\n>>> p = pymupdf.Point(0, 0)  # where did top-left point land?\n>>> p * page.rotation_matrix\nPoint(842.0, 0.0)\n>>>\n```\n\n----------------------------------------\n\nTITLE: Creating a TextWriter and Appending Text with Small Caps in PyMuPDF\nDESCRIPTION: Example demonstrating how to create a TextWriter object, append text with small caps formatting, and save it to a PDF. The code creates a new PDF document, initializes a TextWriter with the page rectangle, appends text using the Figo font with small caps enabled, and then writes the text to the page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textwriter.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = pymupdf.open()\n>>> page = doc.new_page()\n>>> text = \"PyMuPDF: the Python bindings for MuPDF\"\n>>> font = pymupdf.Font(\"figo\")  # choose a font with small caps\n>>> tw = pymupdf.TextWriter(page.rect)\n>>> tw.append((50,100), text, font=font, small_caps=True)\n>>> tw.write_text(page)\n>>> doc.ez_save(\"x.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Drawing Quadrilateral Method - Python\nDESCRIPTION: Draws a quadrilateral shape starting from the top-left corner in counter-clockwise direction. Takes a quad_like parameter and returns the upper-left point.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndraw_quad(quad)\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Rectangle Element in PyMuPDF\nDESCRIPTION: This snippet demonstrates how a rectangle element is defined in PyMuPDF, including its color properties, coordinates, and drawing instructions.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/tests/resources/symbols.txt#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n{\n  'closePath': False,\n  'color': (0.9333329796791077, 0.8470590114593506, 0.6823530197143555),\n  'dashes': '[] 0',\n  'even_odd': False,\n  'fill': (0.7215690016746521, 0.5254899859428406, 0.04313730075955391),\n  'fill_opacity': 1.0,\n  'items': [('re',\n             (56.52170181274414,\n              547.753173828125,\n              85.5072021484375,\n              562.2459716796875),\n             1)],\n  'layer': '',\n  'lineCap': (0, 0, 0),\n  'lineJoin': 0.0,\n  'rect': (56.52170181274414,\n           547.753173828125,\n           85.5072021484375,\n           562.2459716796875),\n  'seqno': 20,\n  'stroke_opacity': 1.0,\n  'type': 'fs',\n  'width': 0.07246380299329758\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Font Properties in PyMuPDF\nDESCRIPTION: This code snippet shows how to check if a text span is both bold and italic using bitwise operations on the 'flags' property.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textpage.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif flags & pymupdf.TEXT_FONT_BOLD & pymupdf.TEXT_FONT_ITALIC:\n    print(f\"{span['text']=} is bold and italic\")\n```\n\n----------------------------------------\n\nTITLE: Drawing Regular Polygon with PyMuPDF\nDESCRIPTION: Example showing how to create a regular n-sided polygon with yellow fill and red border using PyMuPDF Shape methods.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nshape = page.new_shape() # start a new shape\nbeta = -360.0 / n  # our angle, drawn clockwise\ncenter = pymupdf.Point(...)  # center of circle\np0 = pymupdf.Point(...)  # start here (1st edge)\npoints = [p0]  # store polygon edges\nfor i in range(n):  # calculate the edges\n    p0 = shape.draw_sector(center, p0, beta)\n    points.append(p0)\nshape.draw_cont = \"\"  # do not draw the circle sectors\nshape.draw_polyline(points)  # draw the polygon\nshape.finish(color=(1,0,0), fill=(1,1,0), closePath=False)\nshape.commit()\n```\n\n----------------------------------------\n\nTITLE: Checking Rectangle Containment in PyMuPDF\nDESCRIPTION: Demonstrates how to check if one rectangle-like object is contained within another using PyMuPDF's rectangle containment operator. The example shows that the rectangle (4,4,5,5) is contained within a larger rectangle r.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/algebra.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# and this rect-like is also inside\n(4, 4, 5, 5) in r\nTrue\n```\n\n----------------------------------------\n\nTITLE: Setting Text Properties in PyMuPDF Xml Class\nDESCRIPTION: Demonstrates how to set text properties like bold and italic using the Xml class methods. Shows the standard approach of adding nodes and setting properties sequentially.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/xml-class.rst#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbody = story.body\npara = body.add_paragraph()  # add a paragraph\npara.set_bold()  # text that follows will be bold\npara.add_text(\"some bold text\")\npara.set_italic()  # text that follows will additionally be italic\npara.add_txt(\"this is bold and italic\")\npara.set_italic(False).set_bold(False)  # all following text will be regular\npara.add_text(\"regular text\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Color and Alpha Channels from RGBA Pixmap in Python\nDESCRIPTION: Demonstrates how to separate color and transparency bytes in separate pixmaps from an RGBA source pixmap. This technique is useful for applications like wxPython that require separate color and alpha channels.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pixmap.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# 'pix' is an RGBA pixmap\npixcolors = pymupdf.Pixmap(pix, 0)    # extract the RGB part (drop alpha)\npixalpha = pymupdf.Pixmap(None, pix)  # extract the alpha part\nbm = wx.Bitmap.FromBufferAndAlpha(pix.width, pix.height, pixcolors.samples, pixalpha.samples)\n```\n\n----------------------------------------\n\nTITLE: Copying PDF Object References with Document.xref_copy\nDESCRIPTION: This method copies data from a source xref to a target xref in a PDF document. It can preserve specified keys in the target dictionary and copy stream data if the source is a stream object. Both source and target must be existing dictionary objects.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nDocument.xref_copy(source, target, *, keep=None)\n```\n\n----------------------------------------\n\nTITLE: Initializing Point Objects in Python\nDESCRIPTION: Various ways to initialize a Point object, including default constructor, coordinate-based constructor, copy constructor, and sequence-based constructor.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/point.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self)\n\ndef __init__(self, x, y)\n\ndef __init__(self, point)\n\ndef __init__(self, sequence)\n```\n\n----------------------------------------\n\nTITLE: Rectangle ToRect Transformation Method - Python\nDESCRIPTION: Computes transformation matrix to convert current rectangle to target rectangle. Useful for coordinate system transformations between page and pixmap coordinates.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rect.rst#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef torect(rect):\n    # rect: rect_like\n    # returns: Matrix\n```\n\n----------------------------------------\n\nTITLE: Drawing Story Content to a Page in PyMuPDF\nDESCRIPTION: Writes the content prepared by the place() method to the page using a device, with an optional transformation matrix. This outputs the actual content to the PDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/story-class.rst#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndraw(dev, matrix=None)\n```\n\n----------------------------------------\n\nTITLE: Checking Font Glyph Availability in Python\nDESCRIPTION: This example demonstrates how to check if a font supports a specific glyph by using glyph_name_to_unicode method to get the unicode value and then checking if the font has that glyph.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/font.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> font = pymupdf.Font(\"helv\")\n>>> font.has_glyph(font.glyph_name_to_unicode(\"infinity\"))\nTrue\n```\n\n----------------------------------------\n\nTITLE: Checking if a PDF can be saved incrementally in PyMuPDF\nDESCRIPTION: The can_save_incrementally() method checks whether the document can be saved incrementally, allowing you to choose the right save option without encountering exceptions. Added in PyMuPDF v1.16.0.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ncan_save_incrementally()\n```\n\n----------------------------------------\n\nTITLE: Drawing Zigzag Line on PDF Page with PyMuPDF\nDESCRIPTION: Method to draw a zigzag line between two points on a PDF page. Supports customization of breadth, color, width, and opacity.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\ndef draw_zigzag(p1, p2, breadth=2, color=(0,), width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0):\n```\n\n----------------------------------------\n\nTITLE: Copying Embedded Files Between PDFs with PyMuPDF\nDESCRIPTION: Demonstrates the command syntax for copying embedded files from one PDF to another using PyMuPDF. The command allows copying specific entries or all embedded files.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npymupdf embed-copy -h\n```\n\n----------------------------------------\n\nTITLE: Accessing Full Color Information in Python\nDESCRIPTION: Illustrates how to import and use the getColorInfoList function from pymupdf.utils to retrieve detailed color information including RGB integer values for all colors in the database.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/colors.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> # to see the full integer color coding\n>>> from pymupdf.utils import getColorInfoList\n>>> il = getColorInfoList()\n>>> il\n[('ALICEBLUE', 240, 248, 255), ('ANTIQUEWHITE', 250, 235, 215),\n('ANTIQUEWHITE1', 255, 239, 219), ('ANTIQUEWHITE2', 238, 223, 204),\n('ANTIQUEWHITE3', 205, 192, 176), ('ANTIQUEWHITE4', 139, 131, 120),\n('AQUAMARINE', 127, 255, 212), ('AQUAMARINE1', 127, 255, 212)] ...\n```\n\n----------------------------------------\n\nTITLE: Loading an Office document with PyMuPDF Pro\nDESCRIPTION: Python code snippet demonstrating how to import PyMuPDF Pro, unlock its features, and open an Office document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf-pro.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf.pro\npymupdf.pro.unlock()\n# PyMuPDF has now been extended with PyMuPDF Pro features, with some restrictions.\ndoc = pymupdf.open(\"my-office-doc.xls\")\n```\n\n----------------------------------------\n\nTITLE: Creating TextPage from Annotation in Python with PyMuPDF\nDESCRIPTION: Method to create a TextPage object from an annotation with support for flags to control content extraction and clip area specification.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nget_textpage(clip=None, flags=3)\n```\n\n----------------------------------------\n\nTITLE: Initializing DocumentWriter Class\nDESCRIPTION: Constructor method for creating a DocumentWriter object. Accepts a file path or file pointer and optional saving options. Can be used as a Python context manager.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document-writer-class.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n__init__(self, path, options=None)\n```\n\n----------------------------------------\n\nTITLE: Computing Vector Dot Products and Angles with PyMuPDF Points\nDESCRIPTION: Example showing how to compute the vector dot product of two Point objects, calculate the cosine of the angle between them, and check for orthogonality.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/algebra.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> p1 = pymupdf.Point(1, 0)\n>>> p2 = pymupdf.Point(1, 1)\n>>> dot = p1 * p2\n>>> dot\n1.0\n\n>>> # compute the cosine of the angle between p1 and p2:\n>>> cosine = dot / (abs(p1) * abs(p2))\n>>> cosine  # cosine of 45 degrees\n0.7071067811865475\n\n>>> math.cos(mat.radians(45))  # verify:\n0.7071067811865476\n\n>>> # check orhogonality\n>>> p3 = pymupdf.Point(0, 1)\n>>> # p1 and p3 are orthogonal so, as expected:\n>>> p1 * p3  \n0.0\n```\n\n----------------------------------------\n\nTITLE: Deleting Page Drawings with PyMuPDF\nDESCRIPTION: Shows how to delete the first drawing found on a PDF page using redaction annotations. The code identifies the drawing's rectangle coordinates and applies redaction with configurable options for images, drawings, and text.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-drawing-and-graphics.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npaths = page.get_drawings()\nrect = paths[0][\"rect\"]  # rectangle of the 1st drawing\npage.add_redact_annot(rect)\npage.apply_redactions(0,2,1)  # potentially set options for any of images, drawings, text\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from Documents with PyMuPDF\nDESCRIPTION: Shows the command syntax for extracting text from supported documents using PyMuPDF. The command offers various formatting modes and options to control the text extraction process.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npymupdf gettext -h\n```\n\nLANGUAGE: shell\nCODE:\n```\npymupdf gettext -pages 1 demo1.pdf\n```\n\n----------------------------------------\n\nTITLE: Attaching Files to PDF with PyMuPDF\nDESCRIPTION: Basic setup for attaching a file to a PDF document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\ndoc = pymupdf.open(\"test.pdf\") # open main document\nattachment = pymupdf.open(\"my-attachment.pdf\") # open document you want to attach\n\npage = doc[0] # get the 1st page of the document\n```\n\n----------------------------------------\n\nTITLE: Text Trace Dictionary Structure\nDESCRIPTION: Example structure of the dictionary returned by Page.get_texttrace() method, showing text properties including bbox coordinates, character information, and style attributes.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{\n'ascender': 0.83251953125,\n'bbox': (458.14019775390625,\n         749.4671630859375,\n         467.76458740234375,\n         757.5071411132812),\n'bidi': 0,\n'chars': (\n    (45,\n    16,\n    (458.14019775390625,\n    755.3758544921875),\n    (458.14019775390625,\n    749.4671630859375,\n    462.9649963378906,\n    757.5071411132812)),\n),\n'color': (0.0,),\n'colorspace': 1,\n'descender': -0.30029296875,\n'dir': (1.0, 0.0)}\n```\n\n----------------------------------------\n\nTITLE: Understanding Drawing Path Hierarchy in PyMuPDF with Extended Option\nDESCRIPTION: This example shows the hierarchical structure of drawing paths when using extended=True with the get_drawings() method. It illustrates how clipping paths and groups establish hierarchy levels and how their scope affects subsequent paths.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n+------+------+--------+------+--------+\n| line | lvl0 | lvl1   | lvl2 |  lvl3  |\n+------+------+--------+------+--------+\n|  0   | clip |        |      |        |\n|  1   |      | fill   |      |        |\n|  2   |      | group  |      |        |\n|  3   |      |        | clip |        |\n|  4   |      |        |      | stroke |\n|  5   |      |        | fill |        |  ends scope of clip in line 3\n|  6   |      | stroke |      |        |  ends scope of group in line 2\n|  7   |      | clip   |      |        |\n|  8   | fill |        |      |        |  ends scope of line 0\n+------+------+--------+------+--------+\n```\n\n----------------------------------------\n\nTITLE: Document Closing in PyMuPDF\nDESCRIPTION: Method to properly close a PDF document and release system resources. This frees associated buffer areas and relinquishes control of the file to the operating system.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nDocument.close()\n```\n\n----------------------------------------\n\nTITLE: Unlocking PyMuPDF Pro with a license key\nDESCRIPTION: Python code snippet demonstrating how to initialize PyMuPDF Pro with a license key to unlock full functionality.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf-pro.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf.pro\npymupdf.pro.unlock(my_key)\n# PyMuPDF has now been extended with PyMuPDF Pro features.\n```\n\n----------------------------------------\n\nTITLE: Generating Page Links in PyMuPDF\nDESCRIPTION: This method returns a generator over the page's links. It allows filtering by link types and yields entries similar to get_links().\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/page.rst#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef links(kinds=None):\n    \"\"\"Return a generator over the page's links. The results equal the entries of :meth:`Page.get_links`.\n\n    :arg sequence kinds: a sequence of integers to down-select to one or more link kinds. Default is all links. Example: *kinds=(pymupdf.LINK_GOTO,)* will only return internal links.\n\n    :rtype: generator\n    :returns: an entry of :meth:`Page.get_links()` for each iteration.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Quad Corrections in PyMuPDF\nDESCRIPTION: This method enables or disables PyMuPDF-specific code that attempts to rebuild valid character quads when encountering issues in text extractions. When set to True, PyMuPDF will not try to access certain font properties and instead use default values for ascender and descender.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nunset_quad_corrections(on=None)\n```\n\n----------------------------------------\n\nTITLE: Performing Matrix Operations in PyMuPDF\nDESCRIPTION: Methods for performing matrix operations such as rotation, scaling, shearing, and translation in PyMuPDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/matrix.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmatrix.norm()\nmatrix.prerotate(deg)\nmatrix.prescale(sx, sy)\nmatrix.preshear(sx, sy)\nmatrix.pretranslate(tx, ty)\nmatrix.concat(m1, m2)\nmatrix.invert(m = None)\n```\n\n----------------------------------------\n\nTITLE: Image Profile Example with JPEG\nDESCRIPTION: Example showing the output structure of image_profile() method when analyzing a JPEG image. Returns metadata including dimensions, orientation, color space and other properties.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npymupdf.image_profile(open(\"nur-ruhig.jpg\", \"rb\").read())\n{\n'width': 439,\n'height': 501,\n'orientation': 0,\n'transform': (1.0, 0.0, 0.0, 1.0, 0.0, 0.0),\n'xres': 96,\n'yres': 96,\n'colorspace': 3,\n'bpc': 8,\n'ext': 'jpeg',\n'cs-name': 'DeviceRGB'}\n```\n\n----------------------------------------\n\nTITLE: Iterative Layout for Table of Contents with Story.write_stabilized() in PyMuPDF\nDESCRIPTION: This script creates a table of contents using Story.write_stabilized() in PyMuPDF. It dynamically generates HTML content and iteratively lays out the document until page numbers stabilize.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: samples/story-write-stabilized.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Story with Python API in PyMuPDF\nDESCRIPTION: Creates the same formatted text effect using PyMuPDF's Python API instead of HTML or CSS. This approach builds the document programmatically by adding paragraphs and setting text properties.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\nMEDIABOX = pymupdf.paper_rect(\"letter\")\nWHERE = MEDIABOX + (36, 36, -36, -36)\n\nstory = pymupdf.Story()  # create an empty story\nbody = story.body  # access the body of its DOM\nwith body.add_paragraph() as para:  # store desired content\n    para.set_font(\"sans-serif\").set_color(\"blue\").add_text(\"Hello World!\")\n\nwriter = pymupdf.DocumentWriter(\"output.pdf\")\n\nmore = 1\n\nwhile more:\n    device = writer.begin_page(MEDIABOX)\n    more, _ = story.place(WHERE)\n    story.draw(device)\n    writer.end_page()\n\nwriter.close()\n```\n\n----------------------------------------\n\nTITLE: Text Trace Dictionary Structure - Python Dictionary Example\nDESCRIPTION: Example showing the structure of a text trace dictionary containing font, text and styling information for PDF text content extraction. Includes flags, font properties, line width, opacity and other text rendering attributes.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{\n    'flags': 12,                        # font flags (1)\n    'font': 'CourierNewPSMT',           # font name (1)\n    'linewidth': 0.4019999980926514,    # current line width value (3)\n    'opacity': 1.0,                     # alpha value of the text (5)\n    'layer': None,                      # name of Optional Content Group (9)\n    'seqno': 246,                       # sequence number (8)\n    'size': 8.039999961853027,          # font size (1)\n    'spacewidth': 4.824785133358091,    # width of space char\n    'type': 0,                          # span type (2)\n    'wmode': 0                          # writing mode (1)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Visibility in Python with PyMuPDF\nDESCRIPTION: Method to control annotation visibility using PDF optional content mechanisms, independent from other visibility attributes.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nset_oc(xref)\n```\n\n----------------------------------------\n\nTITLE: Using Planish Line Matrix Transformation\nDESCRIPTION: Demonstrates the planish_line function which creates a matrix to map a line to the x-axis, showing how points are transformed while preserving distance.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n>>> p1 = pymupdf.Point(1, 1)\n>>> p2 = pymupdf.Point(4, 5)\n>>> abs(p2 - p1)  # distance of points\n5.0\n>>> m = pymupdf.planish_line(p1, p2)\n>>> p1 * m\nPoint(0.0, 0.0)\n>>> p2 * m\nPoint(5.0, -5.960464477539063e-08)\n>>> # distance of the resulting points\n>>> abs(p2 * m - p1 * m)\n5.0\n```\n\n----------------------------------------\n\nTITLE: Getting PDF Outline Item XRef in PyMuPDF\nDESCRIPTION: The 'outline_xref' method returns the xref of a specific outline item in a PDF document. It's mainly used for internal purposes.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef outline_xref(idx):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Advanced Journalling Operations in PyMuPDF\nDESCRIPTION: This snippet shows more advanced journalling operations, including undoing multiple operations and adding new operations after undoing, which permanently removes undone journal entries.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-journalling.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> doc=pymupdf.open()\n>>> doc.journal_enable()\n>>> doc.journal_start_op(\"Page insert\")\n>>> page=doc.new_page()\n>>> doc.journal_stop_op()\n>>> for i in range(5):\n        doc.journal_start_op(\"insert-%i\" % i)\n        page.insert_text((100, 100 + 20*i), \"text line %i\" %i)\n        doc.journal_stop_op()\n\n>>> # combined status info:\n>>> doc.journal_position();doc.journal_can_do()\n(6, 6)\n{'undo': True, 'redo': False}\n\n>>> for i in range(3):  # revert last three operations\n        doc.journal_undo()\n>>> doc.journal_position();doc.journal_can_do()\n(3, 6)\n{'undo': True, 'redo': True}\n\n>>> # now do a different update:\n>>> doc.journal_start_op(\"Draw some line\")\n>>> page.draw_line((100,150), (300,150))\nPoint(300.0, 150.0)\n>>> doc.journal_stop_op()\n>>> doc.journal_position();doc.journal_can_do()\n(4, 4)\n{'undo': True, 'redo': False}\n\n>>> # this has changed the journal:\n>>> # previous last 3 text line operations were removed, and\n>>> # we have only 4 operations: drawing the line is the new last one\n```\n\n----------------------------------------\n\nTITLE: Accessing PyMuPDF Configuration Dictionary in Python\nDESCRIPTION: This snippet demonstrates how to import PyMuPDF and access the fitz_config dictionary, which contains various configuration settings for the library. The output shows boolean flags for different file format support and font handling options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nIn [1]: import pymupdf\nIn [2]: TOOLS.fitz_config\nOut[2]:\n{'plotter-g': True,\n 'plotter-rgb': True,\n 'plotter-cmyk': True,\n 'plotter-n': True,\n 'pdf': True,\n 'xps': True,\n 'svg': True,\n 'cbz': True,\n 'img': True,\n 'html': True,\n 'epub': True,\n 'jpx': True,\n 'js': True,\n 'tofu': False,\n 'tofu-cjk': True,\n 'tofu-cjk-ext': False,\n 'tofu-cjk-lang': False,\n 'tofu-emoji': False,\n 'tofu-historic': False,\n 'tofu-symbol': False,\n 'tofu-sil': False,\n 'icc': True,\n 'py-memory': False,\n 'base14': True}\n```\n\n----------------------------------------\n\nTITLE: Transforming a Point with a Matrix in Python\nDESCRIPTION: Method to apply a transformation matrix to the point and replace it with the result.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/point.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef transform(m)\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Identifier in Python with PyMuPDF\nDESCRIPTION: This method generates a unique positive integer that increases by 1 on every invocation. It's useful for creating unique keys in databases and is faster than using timestamps. The maximum value is sys.maxsize, after which it starts over at 1.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngen_id()\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Dictionary Keys using PyMuPDF\nDESCRIPTION: Example showing how to retrieve and print PDF dictionary keys and their values using xref_get_keys() and xref_get_key() methods. Demonstrates accessing both page dictionary and PDF trailer.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom pprint import pprint\nimport pymupdf\ndoc=pymupdf.open(\"pymupdf.pdf\")\nxref = doc.page_xref(0)  # xref of page 0\npprint(doc.xref_get_keys(xref))  # primary level keys of a page\npprint(doc.xref_get_keys(-1))  # primary level keys of the trailer\n```\n\n----------------------------------------\n\nTITLE: Intersecting IRect Objects in Python\nDESCRIPTION: Method to calculate the intersection of the current IRect with another rectangle, replacing the current rectangle with the result.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/irect.rst#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef intersect(self, ir):\n```\n\n----------------------------------------\n\nTITLE: Creating Qt Images from PyMuPDF Pixmap\nDESCRIPTION: Example showing two methods of creating Qt images from a PyMuPDF Pixmap. The second method using samples_ptr is significantly faster as it avoids copying the pixel data.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pixmap.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimg = QtGui.QImage(pix.samples, pix.width, pix.height, format)\n```\n\nLANGUAGE: python\nCODE:\n```\nimg = QtGui.QImage(pix.samples_ptr, pix.width, pix.height, format)\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Opacity in PyMuPDF\nDESCRIPTION: Sets the transparency of an annotation. The opacity value should be a float between 0 and 1, where 0 is fully transparent and 1 is fully opaque.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nannot.set_opacity(value)\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Mark Info in PyMuPDF\nDESCRIPTION: The 'set_markinfo' method sets the /MarkInfo values of a PDF document. It accepts a dictionary containing information about Tagged PDF conventions usage.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef set_markinfo(value):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Blend Mode in PyMuPDF\nDESCRIPTION: Sets the blend mode of an annotation. The blend mode affects how the annotation is composited with the content beneath it.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nannot.set_blendmode(blendmode)\n```\n\n----------------------------------------\n\nTITLE: Copying a Page Reference within a PDF Document using PyMuPDF\nDESCRIPTION: This method copies a page reference within the document. It creates a new reference to the page object, not a new page object. Changes to one copy will appear on all copies.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\ncopy_page(pno, to=-1)\n```\n\n----------------------------------------\n\nTITLE: Extracting Embedded Files from PDF with PyMuPDF\nDESCRIPTION: Demonstrates the command syntax for extracting embedded files from a PDF document using PyMuPDF. The command requires specifying the input PDF and the name of the entry to extract.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npymupdf embed-extract -h\n```\n\nLANGUAGE: shell\nCODE:\n```\npymupdf embed-extract some.pdf -name neue.datei\n```\n\n----------------------------------------\n\nTITLE: Testing Quad Containment Comparison in Python\nDESCRIPTION: Example showing the difference in containment behavior between Rect and Quad objects. While a rectangle's bottom-right point is not considered part of the rectangle (due to rectangles being 'open'), the same point is considered part of the equivalent quadrilateral.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/quad.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> rect.br in rect\nFalse\n>>> # but:\n>>> rect.br in rect.quad\nTrue\n```\n\n----------------------------------------\n\nTITLE: Generating Pixmap from DisplayList in Python for PyMuPDF\nDESCRIPTION: Runs the DisplayList through a draw device and returns a pixmap. Allows specifying a matrix, colorspace, alpha channel, and clip area.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/displaylist.rst#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nget_pixmap(matrix=pymupdf.Identity, colorspace=pymupdf.csRGB, alpha=0, clip=None)\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Object Keys with PyMuPDF\nDESCRIPTION: This code snippet shows how to retrieve the keys of a PDF object (in this case, a page object) using PyMuPDF's Document.xref_get_keys method. It demonstrates how to access the structure of PDF objects at a low level.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\ndoc = pymupdf.open(\"pymupdf.pdf\")\npage = doc[0]\nfrom pprint import pprint\npprint(doc.xref_get_keys(page.xref))\n```\n\n----------------------------------------\n\nTITLE: Line Dash Pattern Examples in PyMuPDF\nDESCRIPTION: Examples of dash pattern syntax for drawing dashed lines. Patterns are specified as '[n m] p' where n is dash length, m is gap length (optional), and p is the phase offset.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"[3 4] 0\"  # dashes of 3 and gaps of 4 pixels\n\"[3 3] 0\"  # equivalent to '[3] 0'\n\"[] 0\"     # continuous line (no dashes)\n\"\"         # continuous line (alternative)\n```\n\n----------------------------------------\n\nTITLE: Converting sRGB to RGB Color Format\nDESCRIPTION: Function that converts an sRGB integer color value to RGB tuple format with values between 0-255.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsRGB_to_pdf(0xff0000) = (255, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Converting MuPDF to PDF Coordinates using Transformation Matrix\nDESCRIPTION: Demonstrates how to convert rectangle coordinates from MuPDF's coordinate system (origin at top-left) to PDF's coordinate system (origin at bottom-left) using a page's transformation matrix. Creates a Letter-sized page and converts a 100x100 point rectangle between coordinate systems.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app3.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> page = doc.new_page(width=612, height=792)  # make new Letter page\n>>> ptm = page.transformation_matrix\n>>> # the inverse matrix of ptm is ~ptm\n>>> pymupdf.Rect(0, 0, 100, 100) * ~ptm\nRect(0.0, 692.0, 100.0, 792.0)\n```\n\n----------------------------------------\n\nTITLE: Opening PDF Document with PyMuPDF\nDESCRIPTION: Example showing how to open a PDF document to modify annotation properties\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/annot.rst#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(\"circle-in.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Layer Configuration Example - Python\nDESCRIPTION: Example showing how to get layer configuration information using get_layer() method, which returns a dictionary containing OCG cross reference numbers for different states.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> pprint(doc.get_layer())\n{'off': [8, 9, 10], 'on': [5, 6, 7], 'rbgroups': [[7, 10]]}\n>>>\n```\n\n----------------------------------------\n\nTITLE: Supported Widget Types in PyMuPDF\nDESCRIPTION: A list of widget types supported by PyMuPDF for creation and update, including their corresponding PDF widget type constants. Note the limitations for radio buttons and signature fields.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/widget.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Supported Widget Types\nPDF_WIDGET_TYPE_TEXT\nPDF_WIDGET_TYPE_BUTTON\nPDF_WIDGET_TYPE_CHECKBOX\nPDF_WIDGET_TYPE_COMBOBOX\nPDF_WIDGET_TYPE_LISTBOX\nPDF_WIDGET_TYPE_RADIOBUTTON\nPDF_WIDGET_TYPE_SIGNATURE  # read only\n```\n\n----------------------------------------\n\nTITLE: Deleting PDF TOC Item in PyMuPDF\nDESCRIPTION: The 'del_toc_item' method disables a specific TOC item in a PDF document. The item remains in the TOC structure but is shown grayed-out and no longer points to a destination.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef del_toc_item(idx):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Deleting Embedded Files from PDF with PyMuPDF\nDESCRIPTION: Shows the command syntax for deleting an embedded file from a PDF document using PyMuPDF. The command requires the input PDF and the name of the entry to delete.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npymupdf embed-del -h\n```\n\n----------------------------------------\n\nTITLE: Rect Empty State Example - Python\nDESCRIPTION: Shows how a non-empty rectangle can result in an empty IRect due to MuPDF's small tolerance (1e-3) during rounding operations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rect.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> r = pymupdf.Rect(100, 100, 200, 100.001)\n>>> r.is_empty  # rect is NOT empty\nFalse\n>>> r.round()  # but its irect IS empty!\npymupdf.IRect(100, 100, 200, 100)\n>>> r.round().is_empty\nTrue\n```\n\n----------------------------------------\n\nTITLE: Setting Tesseract Data Environment Variable on Windows\nDESCRIPTION: Command to set the TESSDATA_PREFIX environment variable on Windows systems to enable OCR functionality.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsetx TESSDATA_PREFIX \"C:/Program Files/Tesseract-OCR/tessdata\"\n```\n\n----------------------------------------\n\nTITLE: Getting XML Metadata from PDF in PyMuPDF\nDESCRIPTION: The 'get_xml_metadata' method retrieves the XML metadata of a PDF document. It returns an empty string if no metadata is present or if the document is not a PDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef get_xml_metadata():\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Retrieving Optional Content Cross-Reference in PyMuPDF\nDESCRIPTION: Method to get the cross reference number of an OCG or OCMD attached to an image or form xobject in a PDF document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_oc(xref)\n```\n\n----------------------------------------\n\nTITLE: Accessing Paper Size in PyMuPDF\nDESCRIPTION: Demonstrates retrieving paper dimensions using the paper_rect method. Returns a Rect object with dimensions for standard paper formats.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pymupdf\n>>> pymupdf.paper_rect(\"letter-l\")\npymupdf.Rect(0.0, 0.0, 792.0, 612.0)\n>>>\n```\n\n----------------------------------------\n\nTITLE: Setting Small Glyph Heights in PyMuPDF\nDESCRIPTION: This snippet demonstrates how to enable automatic small glyph height calculation for all subsequent text searches and extractions in PyMuPDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textpage.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npymupdf.TOOLS.set_small_glyph_heights(True)\n```\n\n----------------------------------------\n\nTITLE: Adding Date Field Scripts in JavaScript\nDESCRIPTION: Example of adding JavaScript handlers for date field formatting and validation\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/widget.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwidget.script_format = 'AFDate_FormatEx(\"mm/dd/yyyy\");'\nwidget.script_stroke = 'AFDate_KeystrokeEx(\"mm/dd/yyyy\");'\n```\n\n----------------------------------------\n\nTITLE: Checking Character Visibility in PyMuPDF\nDESCRIPTION: This snippet demonstrates how to check if a character is invisible by examining the 'char_flags' property for fill and stroke attributes.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textpage.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif not (char_flags & 2**3 & 2**4):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Points in Python\nDESCRIPTION: Method to calculate the distance between two points or between a point and a rectangle. The distance can be measured in pixels, inches, centimeters, or millimeters.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/point.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef distance_to(x [, unit])\n```\n\n----------------------------------------\n\nTITLE: Defining Widget Flags in PyMuPDF\nDESCRIPTION: Constants for widget flags in PyMuPDF, including common flags for all field types, and specific flags for text widgets, button widgets, and choice widgets.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Common to all field types\nPDF_FIELD_IS_READ_ONLY = 1\nPDF_FIELD_IS_REQUIRED = 1 << 1\nPDF_FIELD_IS_NO_EXPORT = 1 << 2\n\n# Text widgets\nPDF_TX_FIELD_IS_MULTILINE = 1 << 12\nPDF_TX_FIELD_IS_PASSWORD = 1 << 13\nPDF_TX_FIELD_IS_FILE_SELECT = 1 << 20\nPDF_TX_FIELD_IS_DO_NOT_SPELL_CHECK = 1 << 22\nPDF_TX_FIELD_IS_DO_NOT_SCROLL = 1 << 23\nPDF_TX_FIELD_IS_COMB = 1 << 24\nPDF_TX_FIELD_IS_RICH_TEXT = 1 << 25\n\n# Button widgets\nPDF_BTN_FIELD_IS_NO_TOGGLE_TO_OFF = 1 << 14\nPDF_BTN_FIELD_IS_RADIO = 1 << 15\nPDF_BTN_FIELD_IS_PUSHBUTTON = 1 << 16\nPDF_BTN_FIELD_IS_RADIOS_IN_UNISON = 1 << 25\n\n# Choice widgets\nPDF_CH_FIELD_IS_COMBO = 1 << 17\nPDF_CH_FIELD_IS_EDIT = 1 << 18\nPDF_CH_FIELD_IS_SORT = 1 << 19\nPDF_CH_FIELD_IS_MULTI_SELECT = 1 << 21\nPDF_CH_FIELD_IS_DO_NOT_SPELL_CHECK = 1 << 22\nPDF_CH_FIELD_IS_COMMIT_ON_SEL_CHANGE = 1 << 26\n```\n\n----------------------------------------\n\nTITLE: Retrieving MuPDF Warnings in PyMuPDF\nDESCRIPTION: This method returns all stored MuPDF messages as a string with interspersed line-breaks. The reset parameter determines whether to automatically empty the store after retrieving the warnings. By default, the store is emptied after retrieval.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmupdf_warnings(reset=True)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Layer Configurations in PyMuPDF\nDESCRIPTION: Method to list all optional layer configurations in a document, returning configuration details that can be used in layer management.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_layers()\n```\n\n----------------------------------------\n\nTITLE: Calculating Pixel Width of Text in Python\nDESCRIPTION: This function calculates the pixel width of a given text string using a list of character widths and a specified font size. It handles potential index errors for characters outside the width list range.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef pixlen(text, widthlist, fontsize):\n    try:\n        return sum([widthlist[ord(c)] for c in text]) * fontsize\n    except IndexError:\n        raise ValueError:(\"max. code point found: %i, increase limit\" % ord(max(text)))\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Stem in PyMuPDF\nDESCRIPTION: This method sets or inquires the prefix for the id of new annotations, fields or links. If no argument is provided, it returns the current value. The default stem is \"fitz\". It generates identifiers in the format \"stem-Annn\", \"stem-Wnnn\", or \"stem-Lnnn\" for annotations, widgets, and links respectively.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nset_annot_stem(stem=None)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Anti-Aliasing Levels in PyMuPDF\nDESCRIPTION: This method returns the current anti-aliasing values used for rendering graphics and text elements. It returns a dictionary with keys for graphics, text, and graphics_min_line_width, each associated with their respective anti-aliasing values.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nshow_aa_level()\n```\n\n----------------------------------------\n\nTITLE: Computing Image Transformation with PyMuPDF\nDESCRIPTION: Demonstrates how to compute an image's bbox on a page using the transformation matrix and shrink matrix. Shows the relationship between the original image dimensions and their display on the page, including detecting rotation and scaling.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app3.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimginfo = page.get_images()[0]  # get an image item on a page\nimginfo\n(5, 0, 439, 501, 8, 'DeviceRGB', '', 'fzImg0', 'DCTDecode')\n#------------------------------------------------\n# define image shrink matrix and rectangle\n#------------------------------------------------\nshrink = pymupdf.Matrix(1 / 439, 0, 0, 1 / 501, 0, 0)\nimgrect = pymupdf.Rect(0, 0, 439, 501)\n#------------------------------------------------\n# determine image bbox and transformation matrix:\n#------------------------------------------------\nbbox, transform = page.get_image_bbox(\"fzImg0\", transform=True)\n#------------------------------------------------\n# confirm equality - permitting rounding errors\n#------------------------------------------------\nbbox\nRect(100.0, 112.37525939941406, 300.0, 287.624755859375)\nimgrect * shrink * transform\nRect(100.0, 112.375244140625, 300.0, 287.6247253417969)\n#------------------------------------------------\nshrink * transform\nMatrix(0.0, -0.39920157194137573, 0.3992016017436981, 0.0, 100.0, 287.6247253417969)\n#------------------------------------------------\n# the above shows:\n# image sides are scaled by same factor ~0.4,\n# and the image is rotated by 90 degrees clockwise\n# compare this with pymupdf.Matrix(-90) * 0.4\n#------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: PyMuPDF Error Handling Example\nDESCRIPTION: Demonstrates how PyMuPDF handles damaged PDF files and displays warnings/errors, including checking document state after repair attempts.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app3.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import pymupdf\n>>> doc = pymupdf.open(\"damaged-file.pdf\")  # leads to a sys.stderr message:\nmupdf: cannot find startxref\n>>> print(pymupdf.TOOLS.mupdf_warnings())  # check if there is more info:\ncannot find startxref\ntrying to repair broken xref\nrepairing PDF document\nobject missing 'endobj' token\n>>> doc.can_save_incrementally()  # this is to be expected:\nFalse\n>>> doc.is_dirty\nTrue\n>>> doc\npymupdf.Document('damaged-file.pdf')\n```\n\n----------------------------------------\n\nTITLE: Word Data Structure in Python\nDESCRIPTION: Shows the tuple structure returned by extractWORDS method containing word coordinates, text content, block number, line number and word number.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textpage.rst#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n(x0, y0, x1, y1, \"word\", block_no, line_no, word_no)\n```\n\n----------------------------------------\n\nTITLE: Computing Euclidean Norm of a Point in Python\nDESCRIPTION: Method to calculate the Euclidean norm (length) of the point as a vector. Equivalent to the abs() function.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/point.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef norm()\n```\n\n----------------------------------------\n\nTITLE: Comparing Text Extraction with and without Inhibit Spaces in PyMuPDF\nDESCRIPTION: Illustrates the effect of the TEXT_INHIBIT_SPACES flag on text extraction in PyMuPDF. The example shows how the flag affects the spacing in the extracted text.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app1.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> print(page.get_text(\"text\"))\nH a l l o !\nMo r e  t e x t\ni s  f o l l o w i n g\ni n  E n g l i s h\n. . .  l e t ' s  s e e\nw h a t  h a p p e n s .\n>>> print(page.get_text(\"text\", flags=pymupdf.TEXT_INHIBIT_SPACES))\nHallo!\nMore text\nis following\nin English\n... let's see\nwhat happens.\n>>>\n```\n\n----------------------------------------\n\nTITLE: Generating TextPage from DisplayList in Python for PyMuPDF\nDESCRIPTION: Runs the DisplayList through a text device and returns a text page. The flags parameter controls which information is parsed into the text page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/displaylist.rst#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nget_textpage(flags)\n```\n\n----------------------------------------\n\nTITLE: Rectangle Intersects Method - Python\nDESCRIPTION: Method to check if two rectangles have a non-empty intersection. Returns False if either rectangle is infinite or empty.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rect.rst#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef intersects(r):\n    # r: rect_like\n    # returns: bool\n```\n\n----------------------------------------\n\nTITLE: Creating Nested PDF Dictionary Keys with PyMuPDF\nDESCRIPTION: This code snippet illustrates how to create nested dictionary keys in PDF objects using PyMuPDF's Document.xref_set_key method with a path-like notation. It demonstrates that intermediate dictionaries are automatically created if they don't exist.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndoc.xref_set_key(xref, \"A/B/C/D\", \"[1 2 3 4]\")\nprint(doc.xref_object(xref))  # check out what happened:\n```\n\n----------------------------------------\n\nTITLE: Implementing Multilingual Text Translation in JavaScript\nDESCRIPTION: This script handles the translation of webpage content between English and Japanese. It defines a translation function that maps English strings to Japanese equivalents based on the detected language setting, then applies translations to multiple DOM elements by their IDs.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/about-performance.rst#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet langB = document.getElementsByTagName('html')[0].getAttribute('lang');\n\nfunction getTranslationB(str) {\n    if (langB == \"ja\") {\n        if (str==\"Copying\") {\n            return \"コピー\";\n        } else if (str == \"This refers to opening a document and then saving it to a new file. This test measures the speed of reading a <cite>PDF</cite> and re-writing as a new <cite>PDF</cite>. This process is also at the core of functions like merging / joining multiple documents. The numbers below therefore apply to <cite>PDF</cite> joining and merging.\") {\n            return \"以下は、ドキュメントを開いてから新しいファイルとして保存することを指します。このテストは、PDFを読み込み、新しいPDFとして再書き込む速度を測定します。このプロセスは、複数のドキュメントを結合するなどの機能の中核でもあります。したがって、以下の数字はPDFの結合とマージにも適用されます。\";\n        } else if (str == \"The results for all 7,031 pages are:\") {\n            return \"全7,031ページの結果は次のとおりです：\";\n        } else if (str == \"seconds\") {\n            return \"秒\";\n        } else if (str == \"fastest\") {\n            return \"最速\";\n        } else if (str == \"slowest\") {\n            return \"最遅\";\n        } else if (str == \"Text Extraction\") {\n            return \"テキスト抽出\";\n        } else if (str == \"This refers to extracting simple, plain text from every page of the document and storing it in a text file.\") {\n            return \"以下は、ドキュメントの各ページから簡単なプレーンテキストを抽出し、テキストファイルに保存することを指します。\";\n        } else if (str == \"Rendering\") {\n            return \"レンダリング\";\n        } else if (str == \"This refers to making an image (like PNG) from every page of a document at a given DPI resolution. This feature is the basis for displaying a document in a GUI window.\") {\n            return \"この場合、\\\"レンダリング\\\" は、指定されたDPI解像度でドキュメントの各ページから画像（PNGなど）を作成することを指します。この機能は、GUIウィンドウでドキュメントを表示するための基本となります。\";\n        }\n\n\n\n    }\n\n    return str;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Finishing Page in DocumentWriter\nDESCRIPTION: Method to complete the current page, flush pending data, and append it to the output document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document-writer-class.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nend_page()\n```\n\n----------------------------------------\n\nTITLE: Rectangle Morph Method - Python\nDESCRIPTION: Transforms rectangle into a quad using a fixed point and transformation matrix. Returns infinite quad if rectangle is infinite.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rect.rst#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef morph(fixpoint, matrix):\n    # fixpoint: point_like\n    # matrix: matrix_like\n    # returns: Quad\n```\n\n----------------------------------------\n\nTITLE: PyMuPDF Cascading Object Deletion Example\nDESCRIPTION: Shows how deleting a document affects child objects like pages and annotations, making them unusable and raising exceptions when accessed.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app3.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> doc = pymupdf.open(\"some.pdf\")\n>>> page = doc[n]\n>>> annot = page.first_annot\n>>> page.rect\npymupdf.Rect(0.0, 0.0, 595.0, 842.0)\n>>> annot.type\n[5, 'Circle']\n>>> del doc                       # or doc = None or doc.close()\n>>> page.rect\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None\n>>> annot.type\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None\n```\n\n----------------------------------------\n\nTITLE: Rectangle Normalize Method - Python\nDESCRIPTION: Reorganizes rectangle corners to ensure proper orientation with bottom-right corner southeast of top-left corner.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rect.rst#2025-04-11_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef normalize():\n    # Modifies rectangle in-place\n    # No return value\n```\n\n----------------------------------------\n\nTITLE: Calculating Area of IRect in Python\nDESCRIPTION: Method to calculate the area of an IRect object, with an optional parameter to specify the unit of measurement.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/irect.rst#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef get_area(self, [unit]):\n```\n\n----------------------------------------\n\nTITLE: Predefined Colorspace Objects in Python\nDESCRIPTION: Predefined colorspace objects for RGB, GRAY, and CMYK color spaces to simplify usage.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/colorspace.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncsRGB  = pymupdf.Colorspace(pymupdf.CS_RGB)\ncsGRAY = pymupdf.Colorspace(pymupdf.CS_GRAY)\ncsCMYK = pymupdf.Colorspace(pymupdf.CS_CMYK)\n```\n\n----------------------------------------\n\nTITLE: Accessing XML Metadata in PDF\nDESCRIPTION: This method returns the xref number of the document's XML metadata. XML metadata in PDFs often contains information about the document's creation, modification, and other properties.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nDocument.xref_xml_metadata()\n```\n\n----------------------------------------\n\nTITLE: Converting XPS to PDF using PyMuPDF\nDESCRIPTION: Demonstrates converting an XPS file to PDF format using PyMuPDF's convert_to_pdf() method. Shows two different ways to save the resulting PDF bytes to a file.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# convert an XPS file to PDF\nxps = pymupdf.open(\"some.xps\")\npdfbytes = xps.convert_to_pdf()\n\n# either do this -->\npdf = pymupdf.open(\"pdf\", pdfbytes)\npdf.save(\"some.pdf\")\n\n# or this -->\npdfout = open(\"some.pdf\", \"wb\")\npdfout.tobytes(pdfbytes)\npdfout.close()\n```\n\n----------------------------------------\n\nTITLE: Initializing IRect Objects in Python\nDESCRIPTION: Shows different ways to initialize an IRect object, including empty constructor, coordinate parameters, copying another IRect, and using a sequence of numbers.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/irect.rst#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef __init__(self)\n\ndef __init__(self, x0, y0, x1, y1)\n\ndef __init__(self, irect)\n\ndef __init__(self, sequence)\n```\n\n----------------------------------------\n\nTITLE: Handling PDF Object Streams in Python\nDESCRIPTION: Example of reading and writing stream objects in a PDF file. Demonstrates automatic stream decompression and compression.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nxreflen = doc.xref_length() # number of objects in file\nfor xref in range(1, xreflen): # skip item 0!\n    if stream := doc.xref_stream(xref):\n        # do something with it (it is a bytes object or None)\n        # e.g. just write it back:\n        doc.update_stream(xref, stream)\n```\n\n----------------------------------------\n\nTITLE: Extracting PDF Metadata with PyMuPDF in JSON Format\nDESCRIPTION: This JSON object represents metadata extracted from a PDF document using PyMuPDF. It includes fields such as PDF format, title, author, creation date, modification date, and various other properties.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/tests/resources/metadata.txt#2025-04-11_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"format\": \"PDF 1.6\",\n  \"title\": \"RUBRIK_Editorial_01-06.indd\",\n  \"author\": \"Natalie Schaefer\",\n  \"subject\": \"\",\n  \"keywords\": \"\",\n  \"creator\": \"\",\n  \"producer\": \"Acrobat Distiller 7.0.5 (Windows)\",\n  \"creationDate\": \"D:20070113191400+01'00'\",\n  \"modDate\": \"D:20070120104154+01'00'\",\n  \"trapped\": \"\",\n  \"encryption\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CSS for PyMuPDF Fonts\nDESCRIPTION: Example showing how to use the css_for_pymupdf_font function to replace the default sans-serif font with Noto Sans in a Story application.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\narch = pymupdf.Archive()\nCSS = pymupdf.css_for_pymupdf_font(\"notos\", name=\"sans-serif\", archive=arch)\nstory = pymupdf.Story(user_css=CSS, archive=arch)\n```\n\n----------------------------------------\n\nTITLE: Updating PDF Object in PyMuPDF\nDESCRIPTION: Method to replace the definition of a PDF object identified by its xref. It can also create a new object if the xref is new. Optionally refreshes page annotations if a page object is provided.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\ndef update_object(xref, obj_str, page=None):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Name List in Python\nDESCRIPTION: Shows how to import and use the getColorList function from pymupdf.utils to obtain a list of all available color names in the database.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/colors.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> # to get a list of all existing names\n>>> from pymupdf.utils import getColorList\n>>> cl = getColorList()\n>>> cl\n['ALICEBLUE', 'ANTIQUEWHITE', 'ANTIQUEWHITE1', 'ANTIQUEWHITE2', 'ANTIQUEWHITE3',\n'ANTIQUEWHITE4', 'AQUAMARINE', 'AQUAMARINE1'] ...\n```\n\n----------------------------------------\n\nTITLE: Checking Intersection of IRect Objects in Python\nDESCRIPTION: Method to check if the IRect intersects with another rectangle, returning a boolean result.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/irect.rst#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef intersects(self, r):\n```\n\n----------------------------------------\n\nTITLE: Configuring Small Glyph Heights in PyMuPDF\nDESCRIPTION: This method sets or inquires the use of reduced bbox heights in text extract and text search methods. When set to True, character, span, line or block bboxes will have a height equal to the font size. When False (default), bbox height is based on font properties and typically equals line height.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nset_small_glyph_heights(on=None)\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Base14 Font Dictionary in PyMuPDF\nDESCRIPTION: Shows the Base14_fontdict dictionary provided by PyMuPDF, which maps font abbreviations to the 14 standard fonts that must be supported by every PDF viewer application.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app3.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nIn [2]: pymupdf.Base14_fontdict\nOut[2]:\n{'courier': 'Courier',\n'courier-oblique': 'Courier-Oblique',\n'courier-bold': 'Courier-Bold',\n'courier-boldoblique': 'Courier-BoldOblique',\n'helvetica': 'Helvetica',\n'helvetica-oblique': 'Helvetica-Oblique',\n'helvetica-bold': 'Helvetica-Bold',\n'helvetica-boldoblique': 'Helvetica-BoldOblique',\n'times-roman': 'Times-Roman',\n'times-italic': 'Times-Italic',\n'times-bold': 'Times-Bold',\n'times-bolditalic': 'Times-BoldItalic',\n'symbol': 'Symbol',\n'zapfdingbats': 'ZapfDingbats',\n'helv': 'Helvetica',\n'heit': 'Helvetica-Oblique',\n'hebo': 'Helvetica-Bold',\n'hebi': 'Helvetica-BoldOblique',\n'cour': 'Courier',\n'coit': 'Courier-Oblique',\n'cobo': 'Courier-Bold',\n'cobi': 'Courier-BoldOblique',\n'tiro': 'Times-Roman',\n'tibo': 'Times-Bold',\n'tiit': 'Times-Italic',\n'tibi': 'Times-BoldItalic',\n'symb': 'Symbol',\n'zadb': 'ZapfDingbats'}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tolerant PDF Reader with PyMuPDF and pdfrw\nDESCRIPTION: A function that handles corrupt or password-protected PDFs by using PyMuPDF to repair and decrypt the document before processing with pdfrw. Includes error handling and PDF cleanup options.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-common-issues-and-their-solutions.rst#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nfrom io import BytesIO\nfrom pdfrw import PdfReader\nimport pymupdf\n\ndef reader(fname, password = None):\n    idata = open(fname, \"rb\").read()  # read the PDF into memory and\n    ibuffer = BytesIO(idata)  # convert to stream\n    if password is None:\n        try:\n            return PdfReader(ibuffer)  # if this works: fine!\n        except:\n            pass\n\n    # either we need a password or it is a problem-PDF\n    # create a repaired / decompressed / decrypted version\n    doc = pymupdf.open(\"pdf\", ibuffer)\n    if password is not None:  # decrypt if password provided\n        rc = doc.authenticate(password)\n        if not rc > 0:\n            raise ValueError(\"wrong password\")\n    c = doc.tobytes(garbage=3, deflate=True)\n    del doc  # close & delete doc\n    return PdfReader(BytesIO(c))  # let pdfrw retry\n```\n\n----------------------------------------\n\nTITLE: HTML Search Form Integration for PyMuPDF Documentation\nDESCRIPTION: HTML markup for a search form component that enables users to search through PyMuPDF documentation. The form is styled with flexbox for layout positioning and includes hidden inputs for search parameters.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/header-404.rst#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"display:flex;justify-content:space-between;align-items: center;\">\n    <form class=\"sidebar-search-container top\" method=\"get\" action=\"/en/latest/search.html\" role=\"search\" style=\"width:100%\">\n      <input class=\"sidebar-search\" placeholder=\"Search\" name=\"q\" aria-label=\"Search\">\n      <input type=\"hidden\" name=\"check_keywords\" value=\"yes\">\n      <input type=\"hidden\" name=\"area\" value=\"default\">\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Link Colors in PyMuPDF\nDESCRIPTION: Method to change the stroke color of a PDF link. Links do not support fill colors as they are technically annotations. Changed in version 1.16.9 to allow direct color specification.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/link.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nset_colors(colors=None, stroke=None)\n```\n\n----------------------------------------\n\nTITLE: Setting Link Border Properties in PyMuPDF\nDESCRIPTION: Method to modify the border properties of a PDF link including width, style, and dash pattern. Changed in version 1.16.9 to allow direct parameter specification without requiring a dictionary.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/link.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nset_border(border=None, width=0, style=None, dashes=None)\n```\n\n----------------------------------------\n\nTITLE: Alternative PDF Named Destinations Format - Python\nDESCRIPTION: Alternative format for PDF named destinations dictionary showing destinations without resolved page numbers.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n{\n    '21154a7c20684ceb91f9c9adc3b677c40': {'page': -1, 'dest': '/XYZ 15.75 1486 0'},\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Font Replacement Utility for HTML Output\nDESCRIPTION: Script to replace font references in HTML output with standard Base-14 fonts for better browser compatibility.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app1.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfilename = sys.argv[1]\notext = open(filename).read()                 # original html text string\npos1 = 0                                      # search start poition\nfont_serif = \"font-family:Times\"              # enter ...\nfont_sans  = \"font-family:Helvetica\"          # ... your choices ...\nfont_mono  = \"font-family:Courier\"            # ... here\nfound_one  = False                            # true if search successful\n\nwhile True:\n    pos0 = otext.find(\"font-family:\", pos1)   # start of a font spec\n    if pos0 < 0:                              # none found - we are done\n        break\n    pos1 = otext.find(\";\", pos0)              # end of font spec\n    test = otext[pos0 : pos1]                 # complete font spec string\n    testn = \"\"                                # the new font spec string\n    if test.endswith(\",serif\"):               # font with serifs?\n        testn = font_serif                    # use Times instead\n    elif test.endswith(\",sans-serif\"):        # sans serifs font?\n        testn = font_sans                     # use Helvetica\n    elif test.endswith(\",monospace\"):         # monospaced font?\n        testn = font_mono                     # becomes Courier\n\n    if testn != \"\":                           # any of the above found?\n        otext = otext.replace(test, testn)    # change the source\n        found_one = True\n        pos1 = 0                              # start over\n\nif found_one:\n    ofile = open(filename + \".html\", \"w\")\n    ofile.write(otext)\n    ofile.close()\nelse:\n    print(\"Warning: could not find any font specs!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Matrix Objects in Python\nDESCRIPTION: Various ways to initialize a Matrix object in PyMuPDF, including default, zoom, shear, rotation, and custom matrices.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/matrix.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMatrix()\nMatrix(zoom-x, zoom-y)\nMatrix(shear-x, shear-y, 1)\nMatrix(a, b, c, d, e, f)\nMatrix(matrix)\nMatrix(degree)\nMatrix(sequence)\n```\n\n----------------------------------------\n\nTITLE: Getting Element Position Information in PyMuPDF\nDESCRIPTION: Provides positioning information about HTML elements after they've been placed on the page. This can be used for creating tables of contents or other navigation structures.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/story-class.rst#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nelement_positions(function, args=None)\n```\n\n----------------------------------------\n\nTITLE: Normalizing IRect in Python\nDESCRIPTION: Method to make the IRect finite by shuffling its corners to ensure the bottom-right corner is south-eastern to the top-left corner.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/irect.rst#2025-04-11_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef normalize(self):\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PDF String Conversion with PyMuPDF\nDESCRIPTION: Example showing how PyMuPDF's get_pdf_str() method handles string conversions for PDF encoding, including UTF-16BE BOM generation and character escaping\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> # because of the € symbol, the following yields UTF-16BE BOM\n>>> pymupdf.get_pdf_str(\"Pay in $ or €.\")\n'<feff00500061007900200069006e002000240020006f0072002020ac002e>'\n>>> # escapes for brackets and non-ASCII\n>>> pymupdf.get_pdf_str(\"Prices in EUR (USD also accepted). Areas are in m².\")\n'(Prices in EUR \\\\(USD also accepted\\\\). Areas are in m\\\\262.)'\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Stream Object Structure in PyMuPDF\nDESCRIPTION: Illustrates the structure of a PDF stream object which consists of a dictionary followed by a sequence of bytes bracketed between 'stream' and 'endstream' keywords. This is used for objects with potentially large amounts of data like images and page descriptions.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/glossary.rst#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnnn 0 obj\n<<\n   dictionary definition\n>>\nstream\n(zero or more bytes)\nendstream\nendobj\n```\n\n----------------------------------------\n\nTITLE: Building PyMuPDF Wheel for Pyodide\nDESCRIPTION: Shell command to build a PyMuPDF wheel for Pyodide using gh_release.py script. Sets specific environment variables to configure the build process including MuPDF source and build targets.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pyodide.rst#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninputs_sdist=0 \\\ninputs_PYMUPDF_SETUP_MUPDF_BUILD=\"git:--recursive --depth 1 --shallow-submodules --branch master https://github.com/ArtifexSoftware/mupdf.git\" \\\ninputs_wheels_default=0 \\\ninputs_wheels_linux_pyodide=1 \\\n./scripts/gh_release.py build\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Toggle and Feedback Link JavaScript\nDESCRIPTION: JavaScript functionality for the language toggle buttons and feedback link. Highlights the selected language and dynamically constructs the feedback URL.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/header.rst#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// highlightSelectedLanguage\n\n        if (document.getElementsByTagName('html')[0].getAttribute('lang')==\"ja\") {\n            document.getElementById(\"button-select-ja\").style.backgroundColor = \"#ff6600\";\n            document.getElementById(\"button-select-en\").style.color = \"#000\";\n        } else {\n            document.getElementById(\"button-select-en\").style.backgroundColor = \"#ff6600\";\n            document.getElementById(\"button-select-ja\").style.color = \"#000\";\n        }\n\n\n        var url_string = window.location.href;\n        var a = document.getElementById('feedbackLinkTop');\n        a.setAttribute(\"href\", \"https://artifex.com/contributor/feedback.php?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=header-link&url=\"+url_string);\n\n        function changeLanguage(lang) {\n            var new_url;\n\n            if (lang == \"en\") {\n                new_url = url_string.replace(\"/ja/\", \"/en/\");\n            } else {\n                new_url = url_string.replace(\"/en/\", \"/ja/\");\n            }\n\n            window.location.replace(new_url);\n        }\n```\n\n----------------------------------------\n\nTITLE: Color Specification in PyMuPDF\nDESCRIPTION: Examples of color specification using tuples or lists for GRAY, RGB, and CMYK color spaces. Values range from 0 to 1.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/shape.rst#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n0.5           # GRAY color (single float)\n(0.5,)        # GRAY color (tuple)\n[0.5, 0, 0]   # RGB color (red)\n[0.5, 0, 0, 0] # CMYK color\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PyMuPDF Object Lifecycle\nDESCRIPTION: Example showing how page and annotation objects become invalidated when their parent document is closed or modified. Demonstrates the cascading effect of object invalidation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app3.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> page = doc[n]\n>>> annot = page.first_annot\n>>> annot.type                    # everything works fine\n[5, 'Circle']\n>>> page = None                   # this turns 'annot' into an orphan\n>>> annot.type\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None\n>>>\n>>> # same happens, if you do this:\n>>> annot = doc[n].first_annot     # deletes the page again immediately!\n>>> annot.type                    # so, 'annot' is 'born' orphaned\n<... omitted lines ...>\nRuntimeError: orphaned object: parent is None\n```\n\n----------------------------------------\n\nTITLE: Setting Tesseract Data Folder in Python\nDESCRIPTION: Example of importing the os module and setting the TESSDATA_PREFIX environment variable for OCR functionality.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"TESSDATA_PREFIX\"] = \"/path/to/tessdata\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Font Descriptors in PyMuPDF\nDESCRIPTION: Shows how to inspect available fonts in the pymupdf-fonts repository and access their attributes using the fitz_fontdescriptors dictionary.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/functions.rst#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nIn [2]: pymupdf.fitz_fontdescriptors.keys()\nOut[2]: dict_keys(['figbo', 'figo', 'figbi', 'figit', 'fimbo', 'fimo',\n'spacembo', 'spacembi', 'spacemit', 'spacemo', 'math', 'music', 'symbol1',\n'symbol2'])\nIn [3]: pymupdf.fitz_fontdescriptors[\"fimo\"]\nOut[3]:\n{'name': 'Fira Mono Regular',\n'size': 125712,\n'mono': True,\n'bold': False,\n'italic': False,\n'serif': True,\n'glyphs': 1485}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running PyMuPDF Tests\nDESCRIPTION: Commands for installing required test dependencies and running the PyMuPDF test suite using pytest. Shows example output from a test run with 171 tests completing in about 78 seconds.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/tests/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> python -m pip install pytest fontTools psutil pymupdf-fonts pillow\n> pytest PyMuPDF\n```\n\nLANGUAGE: text\nCODE:\n```\n============================= test session starts ==============================\nplatform linux -- Python 3.11.2, pytest-7.4.3, pluggy-1.3.0\nrootdir: /home/jules/artifex-remote/PyMuPDF\nconfigfile: pytest.ini\ncollected 171 items\n\nPyMuPDF/tests/test_2548.py .                                             [  0%]\nPyMuPDF/tests/test_2634.py .                                             [  1%]\nPyMuPDF/tests/test_2736.py .                                             [  1%]\nPyMuPDF/tests/test_2791.py .                                             [  2%]\nPyMuPDF/tests/test_2861.py .                                             [  2%]\nPyMuPDF/tests/test_annots.py ..................                          [ 13%]\nPyMuPDF/tests/test_badfonts.py .                                         [ 14%]\nPyMuPDF/tests/test_crypting.py .                                         [ 14%]\nPyMuPDF/tests/test_docs_samples.py .............                         [ 22%]\nPyMuPDF/tests/test_drawings.py ......                                    [ 25%]\nPyMuPDF/tests/test_embeddedfiles.py .                                    [ 26%]\nPyMuPDF/tests/test_extractimage.py ..                                    [ 27%]\nPyMuPDF/tests/test_flake8.py .                                           [ 28%]\nPyMuPDF/tests/test_font.py .....                                         [ 30%]\nPyMuPDF/tests/test_general.py .......................................... [ 55%]\n...                                                                      [ 57%]\nPyMuPDF/tests/test_geometry.py ........                                  [ 61%]\nPyMuPDF/tests/test_imagebbox.py ..                                       [ 63%]\nPyMuPDF/tests/test_insertimage.py ..                                     [ 64%]\nPyMuPDF/tests/test_insertpdf.py ..                                       [ 65%]\nPyMuPDF/tests/test_linequad.py .                                         [ 66%]\nPyMuPDF/tests/test_metadata.py ..                                        [ 67%]\nPyMuPDF/tests/test_nonpdf.py ...                                         [ 69%]\nPyMuPDF/tests/test_object_manipulation.py ....                           [ 71%]\nPyMuPDF/tests/test_optional_content.py ..                                [ 72%]\nPyMuPDF/tests/test_pagedelete.py .                                       [ 73%]\nPyMuPDF/tests/test_pagelabels.py .                                       [ 73%]\nPyMuPDF/tests/test_pixmap.py ..........                                  [ 79%]\nPyMuPDF/tests/test_showpdfpage.py .                                      [ 80%]\nPyMuPDF/tests/test_story.py ...                                          [ 81%]\nPyMuPDF/tests/test_tables.py ...                                         [ 83%]\nPyMuPDF/tests/test_tesseract.py .                                        [ 84%]\nPyMuPDF/tests/test_textbox.py ......                                     [ 87%]\nPyMuPDF/tests/test_textextract.py ..                                     [ 88%]\nPyMuPDF/tests/test_textsearch.py ..                                      [ 90%]\nPyMuPDF/tests/test_toc.py ........                                       [ 94%]\nPyMuPDF/tests/test_widgets.py ........                                   [ 99%]\nPyMuPDF/tests/test_word_delimiters.py .                                  [100%]\n\n======================== 171 passed in 78.65s (0:01:18) ========================\n> \n```\n\n----------------------------------------\n\nTITLE: Morphing IRect with Matrix in Python\nDESCRIPTION: Method to apply a transformation matrix to the IRect using a fixed point, returning a new Quad object.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/irect.rst#2025-04-11_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef morph(self, fixpoint, matrix):\n```\n\n----------------------------------------\n\nTITLE: Direct PyMuPDF to Qt Image Conversion\nDESCRIPTION: Creating Qt QImage directly from PyMuPDF Pixmap without using Pillow as intermediary.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom PyQt5.QtGui import QImage\n\n# set the correct QImage format depending on alpha\nfmt = QImage.Format_RGBA8888 if pix.alpha else QImage.Format_RGB888\nqtimg = QImage(pix.samples_ptr, pix.width, pix.height, fmt)\n```\n\n----------------------------------------\n\nTITLE: Copying PDFs with PikePDF in Python\nDESCRIPTION: Opens a PDF file with PikePDF and saves it to a new output file. Part of the performance comparison for PDF parsing and copying operations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app4.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pikepdf import Pdf\ndoc = Pdf.open(\"input.pdf\")\ndoc.save(\"output.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Sphinx\nDESCRIPTION: Command to build HTML documentation using Sphinx. Use -a flag to rebuild all assets including those in _static directory\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build -b html . build/html\n```\n\n----------------------------------------\n\nTITLE: Setting Link Flags in PyMuPDF\nDESCRIPTION: Method introduced in v1.18.16 to set the PDF /F property of link annotations. Has no effect for non-PDF documents.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/link.rst#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nset_flags(flags)\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF File Trailer in Python\nDESCRIPTION: Example of accessing the PDF file trailer, which contains special objects and pointers to important information.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\ndoc=pymupdf.open(\"PyMuPDF.pdf\")\nprint(doc.xref_object(-1))  # or: print(doc.pdf_trailer())\n```\n\n----------------------------------------\n\nTITLE: Building PyMuPDF for Specific Python Versions on Windows\nDESCRIPTION: Commands demonstrating how to build PyMuPDF for specific Python versions on Windows using the py launcher.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd PyMuPDF && py -3.9 -m pip install .\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd PyMuPDF && py -3.10-32 -m pip install .\n```\n\n----------------------------------------\n\nTITLE: PDF Page Dictionary Example\nDESCRIPTION: Example showing the structure of a PDF page dictionary object with various entries including contents, type, media box, rotation, parent reference, resources, and annotations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/glossary.rst#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<<\n/Contents 40 0 R                  % value: an indirect object\n/Type/Page                        % value: a name object\n/MediaBox[0 0 595.32 841.92]      % value: an array object\n/Rotate 0                         % value: a number object\n/Parent 12 0 R                    % value: an indirect object\n/Resources<<                      % value: a dictionary object\n    /ExtGState<</R7 26 0 R>>\n    /Font<<\n         /R8 27 0 R/R10 21 0 R/R12 24 0 R/R14 15 0 R\n         /R17 4 0 R/R20 30 0 R/R23 7 0 R /R27 20 0 R\n         >>\n    /ProcSet[/PDF/Text]           % value: array of two name objects\n    >>\n/Annots[55 0 R]                   % value: array, one entry (indirect object)\n>>\n```\n\n----------------------------------------\n\nTITLE: Starting New Page in DocumentWriter\nDESCRIPTION: Method to begin a new output page with specified dimensions using a rectangle-like mediabox parameter.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document-writer-class.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbegin_page(mediabox)\n```\n\n----------------------------------------\n\nTITLE: Installing PyMuPDF using pip\nDESCRIPTION: Command to install or upgrade PyMuPDF using pip. This will install from a pre-built wheel if available for the platform.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pymupdf\n```\n\n----------------------------------------\n\nTITLE: Language Translation Function Implementation\nDESCRIPTION: JavaScript function that translates strings between English and Japanese based on the page's language setting. Used to localize feature comparison table content.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/about-feature-matrix.rst#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getTranslation(str) {\n    if (lang == \"ja\") {\n        if (str==\"Feature\") {\n            return \"特徴\";\n        } else if (str==\"Supports Multiple Document Formats\") {\n            return \"複数の文書形式に対応\";\n        }\n        // ... additional translations ...\n    }\n    return str;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JPEG to Photoshop Format\nDESCRIPTION: Example of converting a JPEG image to Adobe Photoshop (PSD) format using PyMuPDF\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npix = pymupdf.Pixmap(\"myfamily.jpg\")\npix.save(\"myfamily.psd\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Character Mapping with unicode_to_glyph_name in Python\nDESCRIPTION: This code iterates through a variable 'vuc' (presumably a list of unicode values), printing each character's hexadecimal code, the character itself, and its glyph name using the font.unicode_to_glyph_name method.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/font.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in vuc:\n      print(\"%04X %s (%s)\" % (i, chr(i), font.unicode_to_glyph_name(i)))\n0000\n000D   (CR)\n0020   (space)\n0021 ! (exclam)\n0022 \" (quotedbl)\n0023 # (numbersign)\n0024 $ (dollar)\n0025 % (percent)\n...\n00AC ¬ (logicalnot)\n00B1 ± (plusminus)\n...\n21D0 ⇐ (arrowdblleft)\n21D1 ⇑ (arrowdblup)\n21D2 ⇒ (arrowdblright)\n21D3 ⇓ (arrowdbldown)\n21D4 ⇔ (arrowdblboth)\n...\n221E ∞ (infinity)\n...\n```\n\n----------------------------------------\n\nTITLE: Rendering PDF Pages with PyMuPDF in Python\nDESCRIPTION: Converts each page of a PDF to a PNG image at 150 DPI resolution using PyMuPDF. Used to measure the performance of PDF page rendering.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app4.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef ProcessFile(datei):\n    print \"processing:\", datei\n    doc=pymupdf.open(datei)\n    for p in pymupdf.Pages(doc):\n        pix = p.get_pixmap(dpi=150)\n        pix.save(\"t-%s.png\" % p.number)\n        pix = None\n    doc.close()\n    return\n```\n\n----------------------------------------\n\nTITLE: Defining Link Destination Flags in PyMuPDF\nDESCRIPTION: Constants for link destination flags in PyMuPDF, including LINK_FLAG_L_VALID, LINK_FLAG_T_VALID, LINK_FLAG_R_VALID, LINK_FLAG_B_VALID, LINK_FLAG_FIT_H, LINK_FLAG_FIT_V, and LINK_FLAG_R_IS_ZOOM.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nLINK_FLAG_L_VALID = 1\nLINK_FLAG_T_VALID = 2\nLINK_FLAG_R_VALID = 4\nLINK_FLAG_B_VALID = 8\nLINK_FLAG_FIT_H = 16\nLINK_FLAG_FIT_V = 32\nLINK_FLAG_R_IS_ZOOM = 64\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Path Element in PyMuPDF\nDESCRIPTION: This snippet shows how a complex path element is defined in PyMuPDF, including multiple line segments, color properties, and other rendering attributes.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/tests/resources/symbols.txt#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n{\n  'closePath': False,\n  'color': (0.9333329796791077, 0.8470590114593506, 0.6823530197143555),\n  'dashes': '[] 0',\n  'even_odd': False,\n  'fill': (0.9333329796791077, 0.8470590114593506, 0.6823530197143555),\n  'fill_opacity': 1.0,\n  'items': [('l',\n             (56.52170181274414, 547.7540283203125),\n             (59.4202995300293, 550.6519775390625)),\n            ('l',\n             (59.4202995300293, 550.6519775390625),\n             (59.4202995300293, 559.3480224609375)),\n            ('l',\n             (59.4202995300293, 559.3480224609375),\n             (56.52170181274414, 562.2459716796875)),\n            ('l',\n             (85.5072021484375, 547.7540283203125),\n             (82.60870361328125, 550.6519775390625)),\n            ('l',\n             (82.60870361328125, 550.6519775390625),\n             (82.60870361328125, 559.3480224609375)),\n            ('l',\n             (82.60870361328125, 559.3480224609375),\n             (85.5072021484375, 562.2459716796875))],\n  'layer': '',\n  'lineCap': (0, 0, 0),\n  'lineJoin': 0.0,\n  'rect': (56.52170181274414,\n           547.7540283203125,\n           85.5072021484375,\n           562.2459716796875),\n  'seqno': 22,\n  'stroke_opacity': 1.0,\n  'type': 'fs',\n  'width': 0.07246380299329758\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JPEG to Tkinter PhotoImage\nDESCRIPTION: Demonstrates conversion of JPEG images to Tkinter PhotoImage format via PPM conversion\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport tkinter as tk\npix = pymupdf.Pixmap(\"input.jpg\")  # or any RGB / no-alpha image\ntkimg = tk.PhotoImage(data=pix.tobytes(\"ppm\"))\n```\n\n----------------------------------------\n\nTITLE: Resetting Story Content Position in PyMuPDF\nDESCRIPTION: Rewinds the Story's document to the beginning, allowing the content to be output again from the start.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/story-class.rst#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nreset()\n```\n\n----------------------------------------\n\nTITLE: Populating HTML Elements with Translated Text for Document Feature Comparison\nDESCRIPTION: This JavaScript code updates multiple HTML elements with translated text using the getTranslation() function. It covers various document processing features, including PDF-specific capabilities, OCR integration, and support for different document types.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/about-feature-matrix.rst#2025-04-11_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.getElementById(\"transFM13\").innerHTML = getTranslation(\"All document types\");\ndocument.getElementById(\"transFM13x\").innerHTML = getTranslation(\"All document types\");\ndocument.getElementById(\"transFM13xx\").innerHTML = getTranslation(\"All document types\");\ndocument.getElementById(\"transFM14\").innerHTML = getTranslation(\"only\");\ndocument.getElementById(\"transFM14x\").innerHTML = getTranslation(\"only\");\ndocument.getElementById(\"transFM14xx\").innerHTML = getTranslation(\"only\");\ndocument.getElementById(\"transFM15\").innerHTML = getTranslation(\"Extract Vector Graphics\");\ndocument.getElementById(\"transFM16\").innerHTML = getTranslation(\"All document types\");\ndocument.getElementById(\"transFM16x\").innerHTML = getTranslation(\"Limited\");\ndocument.getElementById(\"transFM17\").innerHTML = getTranslation(\"Draw Vector Graphics (PDF)\");\ndocument.getElementById(\"transFM18\").innerHTML = getTranslation(\"Based on Existing, Mature Library\");\ndocument.getElementById(\"transFM19\").innerHTML = getTranslation(\"Automatic Repair of Damaged PDFs\");\ndocument.getElementById(\"transFM20\").innerHTML = getTranslation(\"Encrypted PDFs\");\ndocument.getElementById(\"transFM21\").innerHTML = getTranslation(\"Limited\");\ndocument.getElementById(\"transFM21x\").innerHTML = getTranslation(\"Limited\");\ndocument.getElementById(\"transFM22\").innerHTML = getTranslation(\"Linerarized PDFs\");\ndocument.getElementById(\"transFM23\").innerHTML = getTranslation(\"Incremental Updates\");\ndocument.getElementById(\"transFM24\").innerHTML = getTranslation(\"Integrates with Jupyter and IPython Notebooks\");\ndocument.getElementById(\"transFM25\").innerHTML = getTranslation(\"Joining / Merging PDF with other Document Types\");\ndocument.getElementById(\"transFM26\").innerHTML = getTranslation(\"All document types\");\ndocument.getElementById(\"transFM27\").innerHTML = getTranslation(\"only\");\ndocument.getElementById(\"transFM28\").innerHTML = getTranslation(\"only\");\ndocument.getElementById(\"transFM29\").innerHTML = getTranslation(\"only\");\ndocument.getElementById(\"transFM29x\").innerHTML = getTranslation(\"only\");\ndocument.getElementById(\"transFM30\").innerHTML = getTranslation(\"OCR API for Seamless Integration with Tesseract\");\ndocument.getElementById(\"transFM31\").innerHTML = getTranslation(\"All document types\");\ndocument.getElementById(\"transFM32\").innerHTML = getTranslation(\"Integrated Checkpoint / Restart Feature (PDF)\");\ndocument.getElementById(\"transFM33\").innerHTML = getTranslation(\"PDF Optional Content\");\ndocument.getElementById(\"transFM34\").innerHTML = getTranslation(\"PDF Embedded Files\");\ndocument.getElementById(\"transFM35\").innerHTML = getTranslation(\"Limited\");\ndocument.getElementById(\"transFM35x\").innerHTML = getTranslation(\"Limited\");\ndocument.getElementById(\"transFM36\").innerHTML = getTranslation(\"PDF Redactions\");\ndocument.getElementById(\"transFM37\").innerHTML = getTranslation(\"PDF Annotations\");\ndocument.getElementById(\"transFM38\").innerHTML = getTranslation(\"Full\");\ndocument.getElementById(\"transFM39\").innerHTML = getTranslation(\"Limited\");\n\ndocument.getElementById(\"transFM40\").innerHTML = getTranslation(\"PDF Form Fields\");\ndocument.getElementById(\"transFM41\").innerHTML = getTranslation(\"Create, read, update\");\ndocument.getElementById(\"transFM42\").innerHTML = getTranslation(\"Limited, no creation\");\n\ndocument.getElementById(\"transFM43\").innerHTML = getTranslation(\"PDF Page Labels\");\ndocument.getElementById(\"transFM44\").innerHTML = getTranslation(\"Support Font Sub-Setting\");\n\n\ndocument.getElementById(\"transFMSupportsCJK\").innerHTML = getTranslation(\"Supports CJK characters\");\ndocument.getElementById(\"transFMSupportsMarkdown\").innerHTML = getTranslation(\"Extract Text as Markdown (.md)\");\ndocument.getElementById(\"transFMExtractTables\").innerHTML = getTranslation(\"Extract Tables\");\n```\n\n----------------------------------------\n\nTITLE: Generating Sierpinski Carpet Fractal\nDESCRIPTION: Creates a Sierpinski Carpet fractal image using recursive pixel manipulation with PyMuPDF\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-images.rst#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf, time\nif not list(map(int, pymupdf.VersionBind.split(\".\"))) >= [1, 14, 8]:\n    raise SystemExit(\"need PyMuPDF v1.14.8 for this script\")\nn = 6                             # depth (precision)\nd = 3**n                          # edge length\n\nt0 = time.perf_counter()\nir = (0, 0, d, d)                 # the pixmap rectangle\n\npm = pymupdf.Pixmap(pymupdf.csRGB, ir, False)\npm.set_rect(pm.irect, (255,255,0)) # fill it with some background color\n\ncolor = (0, 0, 255)               # color to fill the punch holes\n\nfill = pymupdf.Pixmap(pymupdf.csRGB, ir, False)\nfill.set_rect(fill.irect, (0, 255, 255))\n\ndef punch(x, y, step):\n    s = step // 3\n    for i in range(3):\n        for j in range(3):\n            if i != j or i != 1:\n                if s >= 3:\n                    punch(x+i*s, y+j*s, s)\n            else:\n                pm.set_rect((x+s, y+s, x+2*s, y+2*s), color)\n    return\n\npunch(0, 0, d)\nt1 = time.perf_counter()\npm.save(\"sierpinski-punch.png\")\nt2 = time.perf_counter()\nprint (\"%g sec to create / fill the pixmap\" % round(t1-t0,3))\nprint (\"%g sec to save the image\" % round(t2-t1,3))\n```\n\n----------------------------------------\n\nTITLE: Block Data Structure in Python\nDESCRIPTION: Shows the tuple structure returned by extractBLOCKS method containing block coordinates, text content, block number and type.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textpage.rst#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n(x0, y0, x1, y1, \"lines in the block\", block_no, block_type)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using getColor Function in Python\nDESCRIPTION: Demonstrates how to import and use the getColor function from pymupdf.utils to retrieve RGB color values for predefined color names.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/colors.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> # \"getColor\" is the only method you really need\n>>> from pymupdf.utils import getColor\n>>> getColor(\"aliceblue\")\n(0.9411764705882353, 0.9725490196078431, 1.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Link Destination Kinds in PyMuPDF\nDESCRIPTION: Constants for link destination kinds in PyMuPDF, including LINK_NONE, LINK_GOTO, LINK_URI, LINK_LAUNCH, LINK_NAMED, and LINK_GOTOR.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nLINK_NONE = 0\nLINK_GOTO = 1\nLINK_URI = 2\nLINK_LAUNCH = 3\nLINK_NAMED = 4\nLINK_GOTOR = 5\n```\n\n----------------------------------------\n\nTITLE: Accessing Font Options for Widgets in PyMuPDF\nDESCRIPTION: A table showing the available font options for widgets in PyMuPDF, including their abbreviations and full names. The default font is Helvetica.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/widget.rst#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHeBI          Helvetica-BoldOblique\nHeBo          Helvetica-Bold\nHeIt          Helvetica-Oblique\nHelv          Helvetica **(default)**\nSymb          Symbol\nTiBI          Times-BoldItalic\nTiBo          Times-Bold\nTiIt          Times-Italic\nTiRo          Times-Roman\nZaDb          ZapfDingbats\n```\n\n----------------------------------------\n\nTITLE: Generating a Pixmap from a DisplayList in PyMuPDF\nDESCRIPTION: Creates a Pixmap from a previously generated DisplayList. This can be up to 50% faster than using Page.get_pixmap() directly.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/coop_low.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npix = dl.get_pixmap()                    # create the page's pixmap\n```\n\n----------------------------------------\n\nTITLE: Closing DocumentWriter\nDESCRIPTION: Method to close the output file and write any pending data. Required for proper file completion.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document-writer-class.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclose()\n```\n\n----------------------------------------\n\nTITLE: Document Opening Variations\nDESCRIPTION: Different ways to open documents using Document or open methods with various parameter combinations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nopen()\nopen(filename)  # equivalent to open(filename, None)\nopen(filetype, area)  # equivalent to open(filetype, stream = area)\n```\n\n----------------------------------------\n\nTITLE: Defining Widget Types in PyMuPDF\nDESCRIPTION: Constants for widget types in PyMuPDF, including unknown, button, checkbox, combobox, listbox, radiobutton, signature, and text.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nPDF_WIDGET_TYPE_UNKNOWN = 0\nPDF_WIDGET_TYPE_BUTTON = 1\nPDF_WIDGET_TYPE_CHECKBOX = 2\nPDF_WIDGET_TYPE_COMBOBOX = 3\nPDF_WIDGET_TYPE_LISTBOX = 4\nPDF_WIDGET_TYPE_RADIOBUTTON = 5\nPDF_WIDGET_TYPE_SIGNATURE = 6\nPDF_WIDGET_TYPE_TEXT = 7\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment on Linux/MacOS\nDESCRIPTION: Commands to create and activate a Python virtual environment on Linux or MacOS systems, then upgrade pip to the latest version.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv pymupdf-venv\n. pymupdf-venv/bin/activate\npython -m pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Checking Containment in IRect Objects in Python\nDESCRIPTION: Method to check if a given object (rectangle, point, or number) is contained within the IRect.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/irect.rst#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef contains(self, x):\n```\n\n----------------------------------------\n\nTITLE: Computing Transformation Matrix for IRect in Python\nDESCRIPTION: Method to compute the matrix that transforms the current IRect to a given rectangle.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/irect.rst#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef torect(self, rect):\n```\n\n----------------------------------------\n\nTITLE: Defining Annotation Line Ending Styles in PyMuPDF\nDESCRIPTION: Constants for annotation line ending styles in PyMuPDF, including none, square, circle, diamond, open arrow, closed arrow, butt, reversed open arrow, reversed closed arrow, and slash.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nPDF_ANNOT_LE_NONE = 0\nPDF_ANNOT_LE_SQUARE = 1\nPDF_ANNOT_LE_CIRCLE = 2\nPDF_ANNOT_LE_DIAMOND = 3\nPDF_ANNOT_LE_OPEN_ARROW = 4\nPDF_ANNOT_LE_CLOSED_ARROW = 5\nPDF_ANNOT_LE_BUTT = 6\nPDF_ANNOT_LE_R_OPEN_ARROW = 7\nPDF_ANNOT_LE_R_CLOSED_ARROW = 8\nPDF_ANNOT_LE_SLASH = 9\n```\n\n----------------------------------------\n\nTITLE: Defining Annotation Flag Bits in PyMuPDF\nDESCRIPTION: Constants for annotation flag bits in PyMuPDF, including flags for invisibility, hidden, print, no zoom, no rotate, no view, read-only, locked, toggle no view, and locked contents.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nPDF_ANNOT_IS_INVISIBLE = 1 << (1-1)\nPDF_ANNOT_IS_HIDDEN = 1 << (2-1)\nPDF_ANNOT_IS_PRINT = 1 << (3-1)\nPDF_ANNOT_IS_NO_ZOOM = 1 << (4-1)\nPDF_ANNOT_IS_NO_ROTATE = 1 << (5-1)\nPDF_ANNOT_IS_NO_VIEW = 1 << (6-1)\nPDF_ANNOT_IS_READ_ONLY = 1 << (7-1)\nPDF_ANNOT_IS_LOCKED = 1 << (8-1)\nPDF_ANNOT_IS_TOGGLE_NO_VIEW = 1 << (9-1)\nPDF_ANNOT_IS_LOCKED_CONTENTS = 1 << (10-1)\n```\n\n----------------------------------------\n\nTITLE: Resetting MuPDF Warnings in PyMuPDF\nDESCRIPTION: This method empties the MuPDF warnings message buffer. It's useful for clearing any accumulated warnings before performing operations where you want to capture only new warnings.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreset_mupdf_warnings()\n```\n\n----------------------------------------\n\nTITLE: Initializing DisplayList in Python for PyMuPDF\nDESCRIPTION: Creates a new DisplayList object with a specified mediabox. The mediabox represents the page's rectangle.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/displaylist.rst#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n__init__(self, mediabox)\n```\n\n----------------------------------------\n\nTITLE: Using Sphinx Autobuild for Live Updates\nDESCRIPTION: Command to run Sphinx in auto-build mode which serves docs locally and updates them live as changes are made\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-autobuild . _build/html\n```\n\n----------------------------------------\n\nTITLE: URL Format Change Example in PyMuPDF 1.20.0\nDESCRIPTION: Shows the change in MuPDF link URI format from using simple integers to a more structured query string format with page and zoom parameters.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#<int>,<int>,<int> -> #page=<int>&zoom=<float>,<float>,<float>\n```\n\n----------------------------------------\n\nTITLE: PyMuPDF Progress Bar Example\nDESCRIPTION: Example showing the text-based progress bar format when processing pages with show_progress=True parameter.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf4llm/api.rst#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nProcessing input.pdf...\n[====================                    ] (148/291)\n```\n\n----------------------------------------\n\nTITLE: Including Footer in reStructuredText Documentation for PyMuPDF\nDESCRIPTION: This directive includes the content of the 'footer.rst' file in the current document. It's commonly used to add consistent footer information across multiple documentation pages.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_13\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: footer.rst\n```\n\n----------------------------------------\n\nTITLE: Opening a C# File as Text with PyMuPDF\nDESCRIPTION: Example of opening a C# source code file using PyMuPDF's text handling capabilities. This allows code files to be treated as documents for analysis or conversion.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/how-to-open-a-file.rst#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(\"MyClass.cs\", filetype=\"txt\")\n```\n\n----------------------------------------\n\nTITLE: Updating Embedded Files in PDF with PyMuPDF\nDESCRIPTION: Shows the command syntax for updating an existing embedded file in a PDF document using PyMuPDF. The command allows changing file data and metadata of an existing entry.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npymupdf embed-upd -h\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Shape Elements in PyMuPDF\nDESCRIPTION: This snippet shows the structure of dictionaries used to define various PDF elements like shapes, paths, and their properties in PyMuPDF. It includes details such as coordinates, colors, line styles, and drawing instructions.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/tests/resources/symbols.txt#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{\n  'items': [('c', (75.0, 485.0), (62.5, 470.0), (50.0, 490.0), (75.0, 510.0)),\n            ('c', (75.0, 485.0), (87.5, 470.0), (100.0, 490.0), (75.0, 510.0)),\n            ('l', (75.0, 510.0), (75.0, 485.0))],\n  'layer': '',\n  'lineCap': (0, 0, 0),\n  'lineJoin': 0.0,\n  'rect': (50.0, 470.0, 100.0, 510.0),\n  'seqno': 18,\n  'stroke_opacity': 1.0,\n  'type': 'fs',\n  'width': 1.0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Standard Blend Modes in PyMuPDF\nDESCRIPTION: Constants for PDF standard blend modes in PyMuPDF, including various color blending modes such as Color, ColorBurn, ColorDodge, Darken, Difference, and more.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nPDF_BM_Color = \"Color\"\nPDF_BM_ColorBurn = \"ColorBurn\"\nPDF_BM_ColorDodge = \"ColorDodge\"\nPDF_BM_Darken = \"Darken\"\nPDF_BM_Difference = \"Difference\"\nPDF_BM_Exclusion = \"Exclusion\"\nPDF_BM_HardLight = \"HardLight\"\nPDF_BM_Hue = \"Hue\"\nPDF_BM_Lighten = \"Lighten\"\nPDF_BM_Luminosity = \"Luminosity\"\nPDF_BM_Multiply = \"Multiply\"\nPDF_BM_Normal = \"Normal\"\nPDF_BM_Overlay = \"Overlay\"\nPDF_BM_Saturation = \"Saturation\"\nPDF_BM_Screen = \"Screen\"\nPDF_BM_SoftLight = \"Softlight\"\n```\n\n----------------------------------------\n\nTITLE: Modifying PDF Object Properties with PyMuPDF\nDESCRIPTION: This code snippet shows how to add or modify properties of a PDF object using PyMuPDF's Document.xref_set_key method. The example adds a 'Rotate' key to a page object, effectively rotating the page by 90 degrees.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-low-level-interfaces.rst#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndoc.xref_set_key(page.xref, \"Rotate\", \"90\")\nprint(doc.xref_object(page.xref))  # confirm success\n```\n\n----------------------------------------\n\nTITLE: Converting PyMuPDF Pixmap to PIL Image for Qt\nDESCRIPTION: Converting a PyMuPDF Pixmap to a PIL Image and then to Qt format using Pillow.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tutorial.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom PIL import Image, ImageQt\n\n# set the mode depending on alpha\nmode = \"RGBA\" if pix.alpha else \"RGB\"\nimg = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\nqtimg = ImageQt.ImageQt(img)\n```\n\n----------------------------------------\n\nTITLE: Configuring reST Documentation Settings for PyMuPDF\nDESCRIPTION: Sets up syntax highlighting for Python code blocks and includes a footer template file in the documentation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_9\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. highlight:: python\n\n.. include:: footer.rst\n```\n\n----------------------------------------\n\nTITLE: MuPDF Release Reference\nDESCRIPTION: Version specification for the MuPDF dependency used in PyMuPDF 1.20.0.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMuPDF-1.20.0\n```\n\n----------------------------------------\n\nTITLE: Applying Translations to DOM Elements in JavaScript\nDESCRIPTION: This code applies translations to DOM elements by their IDs using the getTranslationB function. It targets multiple elements containing text related to PDF operations such as copying, text extraction, and rendering.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/about-performance.rst#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.getElementById(\"transP1\").innerHTML = getTranslationB(\"Copying\");\ndocument.getElementById(\"transP2\").innerHTML = getTranslationB(\"This refers to opening a document and then saving it to a new file. This test measures the speed of reading a <cite>PDF</cite> and re-writing as a new <cite>PDF</cite>. This process is also at the core of functions like merging / joining multiple documents. The numbers below therefore apply to <cite>PDF</cite> joining and merging.\");\n\ndocument.getElementById(\"transP3\").innerHTML = getTranslationB(\"The results for all 7,031 pages are:\");\ndocument.getElementById(\"transP4\").innerHTML = getTranslationB(\"seconds\");\ndocument.getElementById(\"transP5\").innerHTML = getTranslationB(\"fastest\");\ndocument.getElementById(\"transP6\").innerHTML = getTranslationB(\"slowest\");\ndocument.getElementById(\"transP7\").innerHTML = getTranslationB(\"Text Extraction\");\ndocument.getElementById(\"transP8\").innerHTML = getTranslationB(\"This refers to extracting simple, plain text from every page of the document and storing it in a text file.\");\ndocument.getElementById(\"transP9\").innerHTML = getTranslationB(\"The results for all 7,031 pages are:\");\ndocument.getElementById(\"transP10\").innerHTML = getTranslationB(\"seconds\");\ndocument.getElementById(\"transP11\").innerHTML = getTranslationB(\"fastest\");\ndocument.getElementById(\"transP12\").innerHTML = getTranslationB(\"slowest\");\ndocument.getElementById(\"transP13\").innerHTML = getTranslationB(\"Rendering\");\ndocument.getElementById(\"transP14\").innerHTML = getTranslationB(\"This refers to making an image (like PNG) from every page of a document at a given DPI resolution. This feature is the basis for displaying a document in a GUI window.\");\ndocument.getElementById(\"transP15\").innerHTML = getTranslationB(\"The results for all 7,031 pages are:\");\ndocument.getElementById(\"transP16\").innerHTML = getTranslationB(\"seconds\");\ndocument.getElementById(\"transP17\").innerHTML = getTranslationB(\"fastest\");\ndocument.getElementById(\"transP18\").innerHTML = getTranslationB(\"slowest\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Document Permissions in Python\nDESCRIPTION: Shows how to access PDF document permissions, which changed from a dictionary to an integer of boolean indicators in version 1.16.0.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npermissions = document.permissions  # Now returns an integer instead of a dictionary\n```\n\n----------------------------------------\n\nTITLE: Opening an XML File as Text with PyMuPDF\nDESCRIPTION: Example of opening an XML file as a text document in PyMuPDF. This enables data extraction and analysis from structured XML content.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/how-to-open-a-file.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(\"my_data.xml\", filetype=\"txt\")\n```\n\n----------------------------------------\n\nTITLE: Defining Text Widget Subtypes in PyMuPDF\nDESCRIPTION: Constants for text widget subtypes in PyMuPDF, including none, number, special, date, and time.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nPDF_WIDGET_TX_FORMAT_NONE = 0\nPDF_WIDGET_TX_FORMAT_NUMBER = 1\nPDF_WIDGET_TX_FORMAT_SPECIAL = 2\nPDF_WIDGET_TX_FORMAT_DATE = 3\nPDF_WIDGET_TX_FORMAT_TIME = 4\n```\n\n----------------------------------------\n\nTITLE: Importing PyMuPDF CLI Module in Python Script\nDESCRIPTION: Shows how to use the PyMuPDF command line interface within a Python script by manipulating sys.argv\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pymupdf.__main__\n>>> cmd = \"clean input.pdf output.pdf -pages 1,N\".split()  # prepare command line\n>>> saved_parms = sys.argv[1:]  # save original command line\n>>> sys.argv[1:] = cmd  # store new command line\n>>> pymupdf.__main__()  # execute module\n>>> sys.argv[1:] = saved_parms  # restore original command line\n```\n\n----------------------------------------\n\nTITLE: Cloning MuPDF Git Repository\nDESCRIPTION: Command to clone the MuPDF git repository, which is needed when building PyMuPDF with a custom MuPDF source tree.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://git.ghostscript.com/mupdf.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Story with CSS and HTML in PyMuPDF\nDESCRIPTION: Shows how to achieve the same formatted text effect using separate CSS and HTML sources. The CSS applies sans-serif font family and blue color to the text.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes-stories.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pymupdf\n\nCSS = \"\"\"\nbody {\n    font-family: sans-serif;\n    color: blue;\n}\n\"\"\"\n\nHTML = \"\"\"\n<p>Hello World!</p>\n\"\"\"\n\n# the story would then be created like this:\nstory = pymupdf.Story(html=HTML, user_css=CSS)\n```\n\n----------------------------------------\n\nTITLE: Opening a File with Wrong Extension in PyMuPDF\nDESCRIPTION: Example of opening a file with an incorrect extension by explicitly specifying the file type. This allows PyMuPDF to correctly process files regardless of their extension.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/how-to-open-a-file.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(\"some.file\", filetype=\"xps\")\n```\n\n----------------------------------------\n\nTITLE: Styling Language Toggle and Documentation UI in CSS\nDESCRIPTION: CSS styling for the documentation interface including language toggle buttons, responsive design for different screen sizes, and layout adjustments for the search bar and social links.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/header.rst#2025-04-11_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#languageToggle {\n            width:25%;\n            margin:8px 10px 0;\n        }\n\n        #button-select-en {\n            padding: 5px 10px;\n            background-color: #fff;\n            border: 1px solid #000;\n            border-radius: 10px 0 0 10px;\n            font-size: 14px;\n        }\n\n        #button-select-ja {\n            padding: 5px 10px;\n            background-color: #fff;\n            border: 1px solid #000;\n            border-radius: 0px 10px 10px 0;\n            border-left: 0;\n            font-size: 14px;\n        }\n\n        #button-select-en , #button-select-ja, #button-select-en:hover , #button-select-ja:hover  {\n            color: #fff;\n            text-decoration: none;\n        }\n\n        /* small screens */\n        @media all and (max-width : 768px)  {\n            #languageToggle {\n                width:50%;\n            }\n        }\n\n        @media all and (max-width : 400px)  {\n            #languageToggle {\n                width:70%;\n            }\n        }\n\n        @media all and (max-width : 375px)  {\n            #button-select-en , #button-select-ja {\n                font-size: 11px;\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Drawing Complex Shapes in PDF using PyMuPDF\nDESCRIPTION: This code snippet defines a series of drawing commands for creating complex shapes in a PDF document. It includes operations for drawing lines, curves, and filled shapes with various attributes such as color, opacity, and line styles.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/tests/resources/symbols.txt#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n[\n {'closePath': False,\n  'color': (0.0, 0.0, 0.0),\n  'dashes': '[] 0',\n  'items': [('l',\n             (58.937198638916016, 561.52197265625),\n             (61.352699279785156, 548.47802734375))],\n  'layer': '',\n  'lineCap': (0, 0, 0),\n  'lineJoin': 0.0,\n  'rect': (58.937198638916016,\n           548.47802734375,\n           61.352699279785156,\n           561.52197265625),\n  'seqno': 38,\n  'stroke_opacity': 1.0,\n  'type': 's',\n  'width': 1.1594200134277344},\n {'closePath': False,\n  'even_odd': False,\n  'fill': (1.0, 1.0, 0.0),\n  'fill_opacity': 1.0,\n  'items': [('c',\n             (50.0, 615.0),\n             (50.0, 628.8070068359375),\n             (61.192901611328125, 640.0),\n             (75.0, 640.0)),\n            ('c',\n             (75.0, 640.0),\n             (88.80709838867188, 640.0),\n             (100.0, 628.8070068359375),\n             (100.0, 615.0)),\n            ('c',\n             (100.0, 615.0),\n             (100.0, 601.1929931640625),\n             (88.80709838867188, 590.0),\n             (75.0, 590.0)),\n            ('c',\n             (75.0, 590.0),\n             (61.192901611328125, 590.0),\n             (50.0, 601.1929931640625),\n             (50.0, 615.0))],\n  'layer': '',\n  'rect': (50.0, 590.0, 100.0, 640.0),\n  'seqno': 39,\n  'type': 'f'},\n {'closePath': False,\n  'even_odd': False,\n  'fill': (0.0, 0.0, 0.0),\n  'fill_opacity': 1.0,\n  'items': [('c',\n             (60.0, 608.75),\n             (60.0, 612.2020263671875),\n             (62.23860168457031, 615.0),\n             (65.0, 615.0)),\n            ('c',\n             (65.0, 615.0),\n             (67.76139831542969, 615.0),\n             (70.0, 612.2020263671875),\n             (70.0, 608.75)),\n            ('c',\n             (70.0, 608.75),\n             (70.0, 605.2979736328125),\n             (67.76139831542969, 602.5),\n             (65.0, 602.5)),\n            ('c',\n             (65.0, 602.5),\n             (62.23860168457031, 602.5),\n             (60.0, 605.2979736328125),\n             (60.0, 608.75)),\n            ('c',\n             (80.0, 608.75),\n             (80.0, 612.2020263671875),\n             (82.23860168457031, 615.0),\n             (85.0, 615.0)),\n            ('c',\n             (85.0, 615.0),\n             (87.76139831542969, 615.0),\n             (90.0, 612.2020263671875),\n             (90.0, 608.75)),\n            ('c',\n             (90.0, 608.75),\n             (90.0, 605.2979736328125),\n             (87.76139831542969, 602.5),\n             (85.0, 602.5)),\n            ('c',\n             (85.0, 602.5),\n             (82.23860168457031, 602.5),\n             (80.0, 605.2979736328125),\n             (80.0, 608.75))],\n  'layer': '',\n  'rect': (60.0, 602.5, 90.0, 615.0),\n  'seqno': 40,\n  'type': 'f'},\n {'closePath': False,\n  'color': (0.0, 0.0, 0.0),\n  'dashes': '[] 0',\n  'items': [('c',\n             (60.0, 624.375),\n             (68.2843017578125, 633.0040283203125),\n             (81.7156982421875, 633.0040283203125),\n             (90.0, 624.375))],\n  'layer': '',\n  'lineCap': (0, 0, 0),\n  'lineJoin': 0.0,\n  'rect': (60.0, 624.375, 90.0, 633.0040283203125),\n  'seqno': 41,\n  'stroke_opacity': 1.0,\n  'type': 's',\n  'width': 1.0}]\n```\n\n----------------------------------------\n\nTITLE: Handling Translations and UI Updates in JavaScript\nDESCRIPTION: Detects the document language and updates various UI elements with translations if the language is Japanese. Also handles translations for feedback links, Discord link, and the disclaimer.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/footer.rst#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet docLanguage = document.getElementsByTagName('html')[0].getAttribute('lang');\n\nfunction getHeaderAndFooterTranslation(str) {\n    if (docLanguage == \"ja\") {\n        if (str == \"Do you have any feedback on this page?\") {\n            return \"このページに関するご意見はありますか？\";\n        } else if (str == \"Find <b>#pymupdf</b> on <b>Discord</b>\") {\n            return \"<b>Discord</b>の <b>#pymupdf</b> を見つける\";\n        } else if (str == \"This software is provided AS-IS with no warranty, either express or implied. This software is distributed under license and may not be copied, modified or distributed except as expressly authorized under the terms of that license. Refer to licensing information at <a href='https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link'>artifex.com</a> or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA 94129, United States for further information.\") {\n            return \"このソフトウェアは無保証で提供されており、明示または黙示を問わず、いかなる保証もありません。このソフトウェアはライセンスの下で配布され、ライセンスの条件に明示的に許可されている場合を除き、コピー、変更、または配布してはなりません。ライセンシング情報については、<a href='https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link'>artifex.com</a>でライセンス情報を参照するか、アメリカ合衆国カリフォルニア州サンフランシスコのArtifex Software Inc. までお問い合わせください。\"\n        }\n    }\n    return str;\n}\n\ndocument.getElementById(\"findOnDiscord\").innerHTML = getHeaderAndFooterTranslation(\"Find <b>#pymupdf</b> on <b>Discord</b>\");\ndocument.getElementById(\"feedbackLinkTop\").innerHTML = getHeaderAndFooterTranslation(\"Do you have any feedback on this page?\");\ndocument.getElementById(\"feedbackLinkBottom\").innerHTML = getHeaderAndFooterTranslation(\"Do you have any feedback on this page?\");\ndocument.getElementById(\"footerDisclaimer\").innerHTML = getHeaderAndFooterTranslation(\"This software is provided AS-IS with no warranty, either express or implied. This software is distributed under license and may not be copied, modified or distributed except as expressly authorized under the terms of that license. Refer to licensing information at <a href='https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link'>artifex.com</a> or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA 94129, United States for further information.\");\n\nif (docLanguage == \"ja\") {\n    const collection = document.getElementsByClassName(\"admonition-title\");\n    for (var i=0;i<collection.length;i++) {\n        collection[i].innerHTML = \"注\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Widget Fields in Python\nDESCRIPTION: Demonstrates how to access form fields (widgets) on a PDF page using the new firstWidget attribute and next method introduced in version 1.16.0.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nwidget = page.firstWidget\nwhile widget:\n    # Process widget\n    widget = widget.next()\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable Identity Matrices in PyMuPDF\nDESCRIPTION: Different ways to create a mutable identity matrix in PyMuPDF. These matrices can be used as starting points for transformations, unlike the immutable Identity constant.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/identity.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> m = pymupdf.Matrix(1, 0, 0, 1, 0, 0)  # specify the values\n>>> m = pymupdf.Matrix(1, 1)              # use scaling by factor 1\n>>> m = pymupdf.Matrix(0)                 # use rotation by zero degrees\n>>> m = pymupdf.Matrix(pymupdf.Identity)     # make a copy of Identity\n```\n\n----------------------------------------\n\nTITLE: PyMuPDF Feature Comparison HTML Table Structure\nDESCRIPTION: HTML structure for a feature comparison table that displays PyMuPDF capabilities versus other PDF libraries. Includes rows for file format support, implementation details, rendering capabilities, and various document manipulation features.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/about-feature-matrix.rst#2025-04-11_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n    <table id=\"feature-matrix\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n        <tr>\n            <th id=\"transFM1\">Feature</th>\n            <th>PyMuPDF</th>\n            <th>pikepdf</th>\n            <th>PyPDF2</th>\n            <th>pdfrw</th>\n            <th>pdfplumber / pdfminer</th>\n        </tr>\n\n\n        <tr id=\"PyMuPDFFileSupport\">\n            <td><cite id=\"transFM2\">Supports Multiple Document Formats</cite></td>\n\n            <td>\n                <span class=\"icon pdf\"><cite>PDF</cite></span>\n                <span class=\"icon xps\"><cite>XPS</cite></span>\n                <span class=\"icon epub\"><cite>EPUB</cite></span>\n                <span class=\"icon mobi\"><cite>MOBI</cite></span>\n                <span class=\"icon fb2\"><cite>FB2</cite></span>\n                <span class=\"icon cbz\"><cite>CBZ</cite></span>\n                <span class=\"icon svg\"><cite>SVG</cite></span>\n                <span class=\"icon txt\"><cite>TXT</cite></span>\n                <span class=\"icon image\"><cite id=\"transFM3\">Image</cite></span>\n                <hr/>\n                <span class=\"icon docx\"><cite>DOCX</cite></span>\n                <span class=\"icon xlsx\"><cite>XLSX</cite></span>\n                <span class=\"icon pptx\"><cite>PPTX</cite></span>\n                <span class=\"icon hangul\"><cite>HWPX</cite></span>\n                <span class=\"\"><cite>See <a href=\"#note\">note</a></cite></span>\n            </td>\n            <td>\n                <span class=\"icon pdf\"><cite>PDF</cite></span>\n            </td>\n            <td>\n                <span class=\"icon pdf\"><cite>PDF</cite></span>\n            </td>\n            <td>\n                <span class=\"icon pdf\"><cite>PDF</cite></span>\n            </td>\n            <td>\n                <span class=\"icon pdf\"><cite>PDF</cite></span>\n            </td>\n        </tr>\n\n        <tr>\n            <td><cite id=\"transFM4\">Implementation</cite></td>\n            <td><cite>Python</cite> <span id=\"transFM5\">and</span> <cite>C</cite></td>\n            <td><cite>Python</cite> <span id=\"transFM6\">and</span> <cite>C++</cite></td>\n            <td><cite>Python</cite></td>\n            <td><cite>Python</cite></td>\n            <td><cite>Python</cite></td>\n        </tr>\n\n        <tr>\n            <td><cite id=\"transFM7\">Render Document Pages</cite></td>\n            <td class=\"yes\" id=\"transFM8\">All document types</td>\n            <td class=\"no\" id=\"transFM9\">No rendering</td>\n            <td class=\"no\" id=\"transFM10\">No rendering</td>\n            <td class=\"no\" id=\"transFM11\">No rendering</td>\n            <td class=\"no\" id=\"transFM11x\">No rendering</td>\n        </tr>\n\n        <tr>\n            <td><cite id=\"transFM7x\">Write Text to PDF Page</cite></td>\n            <td class=\"yes\">\n                <br/>\n                <small>See:\n                    <a style=\"color:black;\" href=\"page.html#Page.insert_htmlbox\">Page.insert_htmlbox</a>\n                    <br/>or:<br/>\n                    <a style=\"color:black;\" href=\"page.html#Page.insert_textbox \">Page.insert_textbox</a>\n                    <br/>or:<br/>\n                    <a style=\"color:black;\" href=\"textwriter.html\">TextWriter</a>\n                <small>\n            </td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n        </tr>\n\n        <tr>\n            <td><cite id=\"transFMSupportsCJK\">Supports CJK characters</cite></td>\n            <td class=\"yes\"></td>\n            <td class=\"no\"></td>\n            <td class=\"yes\"></td>\n            <td class=\"no\"></td>\n            <td class=\"yes\"></td>\n        </tr>\n\n        <tr>\n            <td><cite id=\"transFM12\">Extract Text</cite></td>\n            <td class=\"yes\" id=\"transFM13\">All document types</td>\n            <td class=\"no\"></td>\n            <td class=\"yes\"><cite>PDF</cite> <span id=\"transFM14\">only</span></td>\n            <td class=\"no\"></td>\n            <td class=\"yes\"><cite>PDF</cite> <span id=\"transFM14x\">only</span></td>\n        </tr>\n\n        <tr>\n            <td><cite id=\"transFMSupportsMarkdown\">Extract Text as Markdown (.md)</cite></td>\n            <td class=\"yes\" id=\"transFM13x\">All document types</td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n        </tr>\n\n        <tr>\n            <td style=\"padding:20px 0;\"><cite id=\"transFMExtractTables\">Extract Tables</cite></td>\n            <td class=\"yes\" id=\"transFM13xx\">All document types</td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"yes\"><cite>PDF</cite> <span id=\"transFM14xx\">only</span></td>\n        </tr>\n\n        <tr>\n            <td><cite id=\"transFM15\">Extract Vector Graphics</cite></td>\n            <td class=\"yes\" id=\"transFM16\">All document types</td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"limited\" id=\"transFM16x\">Limited</td>\n        </tr>\n\n        <tr>\n            <td><cite id=\"transFM17\">Draw Vector Graphics (PDF)</cite></td>\n            <td class=\"yes\"></td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n            <td class=\"no\"></td>\n        </tr>\n\n        <tr>\n            <td><cite id=\"transFM18\">Based on Existing, Mature Library</cite></td>\n            <td class=\"yes\"><cite>MuPDF</cite></td>\n```\n\n----------------------------------------\n\nTITLE: Running sysinstall.py Script for PyMuPDF Installation\nDESCRIPTION: Commands for running the sysinstall.py script to perform a full build, installation and testing of PyMuPDF both in a local fake root and system root environment.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/packaging.rst#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./PyMuPDF/scripts/sysinstall.py\n./PyMuPDF/scripts/sysinstall.py --root /\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies and Running Tests\nDESCRIPTION: Commands to install test dependencies and run the PyMuPDF test suite using pytest.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest fontTools\npytest PyMuPDF/tests\n```\n\n----------------------------------------\n\nTITLE: Building PyMuPDF with Custom MuPDF Source\nDESCRIPTION: Command to build PyMuPDF using a local MuPDF source tree by specifying its location with an environment variable.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd PyMuPDF && PYMUPDF_SETUP_MUPDF_BUILD=../mupdf pip install .\n```\n\n----------------------------------------\n\nTITLE: Defining External Link in PyMuPDF Documentation\nDESCRIPTION: This snippet defines an external hyperlink reference named 'LlamaIndex' pointing to its PyPI page. This allows for easy reuse of the link throughout the documentation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf4llm/api.rst#2025-04-11_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _LlamaIndex: https://pypi.org/project/llama-index/\n```\n\n----------------------------------------\n\nTITLE: Generating Feedback Link in HTML\nDESCRIPTION: Creates a div element with a feedback link at the bottom of the page. The link's href is dynamically set using JavaScript.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/footer.rst#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"feedbackLink\"><a id=\"feedbackLinkBottom\" target=_blank>Do you have any feedback on this page?</b></a></div>\n```\n\n----------------------------------------\n\nTITLE: PyMuPDF Shape Drawing Data Structure\nDESCRIPTION: Complex data structure containing drawing coordinates and properties to render various shapes like lines, curves and rectangles in a PDF. Each object includes positioning, styling, fill and stroke properties.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/tests/resources/symbols.txt#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[{'closePath': False,\n  'color': (1.0, 1.0, 1.0),\n  'dashes': '[] 0',\n  'even_odd': False,\n  'fill': (1.0, 0.0, 0.0),\n  'fill_opacity': 1.0,\n  'items': [('l', (50.0, 50.0), (50.0, 100.0)),\n            ('l', (50.0, 100.0), (100.0, 75.0)),\n            ('l', (100.0, 75.0), (50.0, 50.0))],\n  'layer': '',\n  'lineCap': (0, 0, 0),\n  'lineJoin': 0.0,\n  'rect': (50.0, 50.0, 100.0, 100.0),\n  'seqno': 0,\n  'stroke_opacity': 1.0,\n  'type': 'fs',\n  'width': 1.0}]\n```\n\n----------------------------------------\n\nTITLE: Hiding TOC Sidebar with CSS in reStructuredText\nDESCRIPTION: This HTML snippet contains CSS that hides the table of contents drawer and adjusts the main content width. It's embedded within a reStructuredText document using the 'raw' directive.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/index.rst#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n\n      .toc-drawer {\n         display: none;\n      }\n\n      .main .content {\n         width:  100% !important;\n      }\n\n   </style>\n```\n\n----------------------------------------\n\nTITLE: Test File Reference Update in PyMuPDF 1.20.0\nDESCRIPTION: Reference to updated test file path in test_insertpdf.py to accommodate new MuPDF version changes.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntests/test_insertpdf.py\n```\n\n----------------------------------------\n\nTITLE: Controlling MuPDF Error Display in PyMuPDF\nDESCRIPTION: This method controls whether MuPDF errors should be displayed as PyMuPDF messages. If set to True, future MuPDF errors will be shown as messages. Regardless of this setting, MuPDF errors are always stored in the warnings store. The default value is True when PyMuPDF is imported.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmupdf_display_errors(value=None)\n```\n\n----------------------------------------\n\nTITLE: Copying PDFs with PyPDF2 in Python\nDESCRIPTION: Uses PyPDF2's PdfMerger to append an input PDF to a new file. Demonstrates how PyPDF2 handles PDF copying for performance comparison.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app4.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npdfmerge = PyPDF2.PdfMerger()\npdfmerge.append(\"input.pdf\")\npdfmerge.write(\"output.pdf\")\npdfmerge.close()\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation UI Layout with Search and Language Toggle\nDESCRIPTION: HTML markup for the top section of the documentation interface that includes a search bar and language toggle buttons for English and Japanese.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/header.rst#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"display:flex;justify-content:space-between;align-items: center;\">\n        <form class=\"sidebar-search-container top\" method=\"get\" action=\"search.html\" role=\"search\" style=\"width:75%\">\n          <input class=\"sidebar-search\" placeholder=\"Search\" name=\"q\" aria-label=\"Search\">\n          <input type=\"hidden\" name=\"check_keywords\" value=\"yes\">\n          <input type=\"hidden\" name=\"area\" value=\"default\">\n        </form>\n        <div id=\"languageToggle\"><span><a id=\"button-select-en\" href=\"javaScript:changeLanguage('en')\">English</a></span><span><a id=\"button-select-ja\" href=\"javaScript:changeLanguage('ja')\">日本語</a></span></div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Rectangle Properties\nDESCRIPTION: Examples showing how to access rectangle properties using indices and named attributes for geometric operations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nIRect.x1 == IRect[2]\nRect.bottom_right  # accessing named corner\nif x in rect:  # equivalent to rect.contains(x)\n```\n\n----------------------------------------\n\nTITLE: Recalculating Span Bounding Box in PyMuPDF\nDESCRIPTION: This code snippet shows how to recalculate the bounding box of a text span to fit the text exactly, using font ascender and descender values. It adjusts the y-coordinates of the bounding box based on the font metrics and span origin.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/textpage.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> a = span[\"ascender\"]\n>>> d = span[\"descender\"]\n>>> r = pymupdf.Rect(span[\"bbox\"])\n>>> o = pymupdf.Point(span[\"origin\"])  # its y-value is the baseline\n>>> r.y1 = o.y - span[\"size\"] * d / (a - d)\n>>> r.y0 = r.y1 - span[\"size\"]\n>>> # r now is a rectangle of height 'fontsize'\n```\n\n----------------------------------------\n\nTITLE: Operating with 'Like' Objects in PyMuPDF\nDESCRIPTION: Examples of using 'like' objects (sequences of numbers of same length) as operands in PyMuPDF operations, including point addition and rectangle shifting.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/algebra.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> p1 + p2\nPoint(4712.0, 3143.0)\n>>> p1 + (4711, 3141)\nPoint(4712.0, 3143.0)\n>>> p1 += (4711, 3141)\n>>> p1\nPoint(4712.0, 3143.0)\n>>> \n\n>>> pymupdf.Rect(100, 100, 200, 200) + (5, 0, 5, 0)  # add 5 to the x coordinates\nRect(105.0, 100.0, 205.0, 200.0)\n>>>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Feedback Link URL in JavaScript\nDESCRIPTION: Sets the href attribute of the feedback link to include the current page URL as a parameter.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/footer.rst#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar url_string = window.location.href;\nvar a = document.getElementById('feedbackLinkBottom');\na.setAttribute(\"href\", \"https://artifex.com/contributor/feedback.php?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link&url=\"+url_string);\n```\n\n----------------------------------------\n\nTITLE: Including Header and Footer in reStructuredText\nDESCRIPTION: Includes external header and footer files in the current reStructuredText document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/resources.rst#2025-04-11_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: header.rst\n\n\n# Content of the document\n\n.. include:: footer.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Stamp Annotation Icons in PyMuPDF\nDESCRIPTION: Constants for stamp annotation icons in PyMuPDF, including various predefined stamps such as Approved, AsIs, Confidential, Departmental, Experimental, and more.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/vars.rst#2025-04-11_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nSTAMP_Approved = 0\nSTAMP_AsIs = 1\nSTAMP_Confidential = 2\nSTAMP_Departmental = 3\nSTAMP_Experimental = 4\nSTAMP_Expired = 5\nSTAMP_Final = 6\nSTAMP_ForComment = 7\nSTAMP_ForPublicRelease = 8\nSTAMP_NotApproved = 9\nSTAMP_NotForPublicRelease = 10\nSTAMP_Sold = 11\nSTAMP_TopSecret = 12\nSTAMP_Draft = 13\n```\n\n----------------------------------------\n\nTITLE: Shrinking Storables Cache in PyMuPDF\nDESCRIPTION: This method reduces the storables cache by a specified percentage of its current size. If the percentage is 100 or greater, the store will be emptied. If zero, no action is taken. The method returns the new current store size after reduction.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstore_shrink(percent)\n```\n\n----------------------------------------\n\nTITLE: Cloning PyMuPDF Git Repository\nDESCRIPTION: Command to clone the PyMuPDF git repository from GitHub, which provides the source code for building PyMuPDF locally.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pymupdf/PyMuPDF.git\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Matrix Table Structure in HTML for PyMuPDF\nDESCRIPTION: This HTML snippet creates the structure of the feature matrix table for PyMuPDF. It includes placeholders for translations and lists supported document and image formats with their respective icons.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/supported-files-table.rst#2025-04-11_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table id=\"feature-matrix\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n    <tr>\n        <th style=\"width:20%;\"></th>\n        <th style=\"width:20%;\"><div id=\"trans1\"></div></th>\n    </tr>\n\n    <tr>\n        <td><cite><div id=\"trans2\"></div></cite></td>\n        <td>\n            <span class=\"icon pdf\"><cite>PDF</cite></span>\n            <span class=\"icon xps\"><cite>XPS</cite></span>\n            <span class=\"icon epub\"><cite>EPUB</cite></span>\n            <span class=\"icon mobi\"><cite>MOBI</cite></span>\n            <span class=\"icon fb2\"><cite>FB2</cite></span>\n            <span class=\"icon cbz\"><cite>CBZ</cite></span>\n            <span class=\"icon svg\"><cite>SVG</cite></span>\n            <span class=\"icon txt\"><cite>TXT</cite></span>\n        </td>\n    </tr>\n\n    <tr>\n        <td><cite><div id=\"trans3\"></div></cite></td>\n        <td>\n            <span class=\"icon image\"></span>\n            <div><u><div id=\"trans4\"></div></u> <cite>JPG/JPEG, PNG, BMP, GIF, TIFF, PNM, PGM, PBM, PPM, PAM, JXR, JPX/JP2, PSD</cite></div>\n            <div><u><div id=\"trans5\"></div></u> <cite>JPG/JPEG, PNG, PNM, PGM, PBM, PPM, PAM, PSD, PS</cite></div>\n        </td>\n    </tr>\n\n</table>\n```\n\n----------------------------------------\n\nTITLE: Rendering PDF Pages with XPDF using Command Line\nDESCRIPTION: Uses the XPDF command line utility pdftopng to convert PDF pages to PNG images at 150 DPI. Used for comparison with PyMuPDF's rendering performance.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app4.rst#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npdftopng.exe -r 150 file.pdf ./\n```\n\n----------------------------------------\n\nTITLE: Controlling Subset Fontname Tags in PyMuPDF\nDESCRIPTION: This method controls the suppression of subset fontname tags in text extractions. When set to True, options like \"dict\", \"json\", \"rawdict\", and \"rawjson\" will return full fontnames (e.g., \"NOHSJV+Calibri-Light\"). When False (default), only the base fontname is returned (e.g., \"Calibri-Light\").\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/tools.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nset_subset_fontnames(on=None)\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Link in reStructuredText\nDESCRIPTION: Generates a hyperlink to the PyMuPDF-Utilities GitHub repository using reStructuredText syntax.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/resources.rst#2025-04-11_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n`PyMuPDF-Utilities <https://github.com/pymupdf/PyMuPDF-Utilities>`_\n```\n\n----------------------------------------\n\nTITLE: Translation Application to DOM Elements\nDESCRIPTION: JavaScript code that applies translations to DOM elements by updating their innerHTML with translated content based on element IDs.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/about-feature-matrix.rst#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.getElementById(\"transFM1\").innerHTML = getTranslation(\"Feature\");\ndocument.getElementById(\"transFM2\").innerHTML = getTranslation(\"Supports Multiple Document Formats\");\n// ... additional element updates ...\n```\n\n----------------------------------------\n\nTITLE: Referencing PyMuPDF Version Variables in Python\nDESCRIPTION: Shows the Python variables that can be used to access PyMuPDF and MuPDF version information programmatically.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/version.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npymupdf_version\n```\n\nLANGUAGE: python\nCODE:\n```\nmupdf_version\n```\n\n----------------------------------------\n\nTITLE: Dry Run of sysinstall.py Script\nDESCRIPTION: Command to preview the installation commands that would be executed by sysinstall.py without actually running them, using flags to disable build (-m 0), install (-p 0), and test (-t 0) operations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/packaging.rst#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./PyMuPDF/scripts/sysinstall.py -m 0 -p 0 -t 0\n```\n\n----------------------------------------\n\nTITLE: Installing Furo Theme for Sphinx\nDESCRIPTION: Command to install the Furo theme required for building the HTML documentation\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install furo\n```\n\n----------------------------------------\n\nTITLE: Rendering PDF Pages with PDF2JPG in Python\nDESCRIPTION: Converts all pages of a PDF to JPG images at 150 DPI using the PDF2JPG library. Part of the performance comparison for PDF page rendering.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app4.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef ProcessFile(datei):\n    print(\"processing:\", datei)\n    pdf2jpg.convert_pdf2jpg(datei, \"images\", pages=\"ALL\", dpi=150)\n    return\n```\n\n----------------------------------------\n\nTITLE: Structuring PyMuPDF FAQ Documentation in reStructuredText\nDESCRIPTION: This snippet defines the structure of the FAQ page for PyMuPDF documentation. It includes header and footer files, sets up the FAQ title, and references a table of contents for recipes.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/faq.rst#2025-04-11_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: header.rst\n\n.. _FAQ:\n\n==============================\nFAQ\n==============================\n\nA collection of recipes in \"How-To\" format for using PyMuPDF.\n\n\nPlease see:\n\n:ref:`Recipes: Table of Contents<RecipesTOC>`\n\n\n.. include:: footer.rst\n```\n\n----------------------------------------\n\nTITLE: Styling Feature Matrix Table with CSS for PyMuPDF Comparison\nDESCRIPTION: CSS styling for a feature comparison table that highlights PyMuPDF capabilities against other PDF libraries. Includes styling for yes/no indicators, document format icons, and custom table formatting.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/about-feature-matrix.rst#2025-04-11_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n    <style>\n\n        table {\n            border-style: hidden;\n        }\n\n        #feature-matrix th {\n            border: 1px #999 solid;\n            padding: 10px 2px;\n            background-color: #007aff;\n            color: white;\n            text-align: center;\n        }\n\n        #feature-matrix tr {\n\n        }\n\n        #feature-matrix td {\n            border: 1px #999 solid;\n            padding: 10px 2px;\n            text-align: center;\n        }\n\n        #feature-matrix tr td.yes {\n            background-color: #83e57c !important;\n            color: #000;\n        }\n\n        #feature-matrix tr td.yes::before {\n            content: \"✔︎ \";\n        }\n\n        #feature-matrix tr td.no {\n            background-color: #e5887c !important;\n            color: #000;\n        }\n\n        #feature-matrix tr td.no::before {\n            content: \"✕ \";\n        }\n\n        #feature-matrix tr td.limited {\n            background-color: #e4c07b !important;\n            color: #000;\n        }\n\n        #feature-matrix .icon-holder {\n            line-height: 40px;\n        }\n\n        #feature-matrix .icon {\n            text-indent: 45px;\n            line-height: 40px;\n            width: 100px;\n            height: 40px;\n        }\n\n        #feature-matrix .icon.pdf {\n            background: url(\"_images/icon-pdf.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.xps {\n            background: url(\"_images/icon-xps.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.epub {\n            background: url(\"_images/icon-epub.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.mobi {\n            background: url(\"_images/icon-mobi.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.fb2 {\n            background: url(\"_images/icon-fb2.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.cbz {\n            background: url(\"_images/icon-cbz.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.svg {\n            background: url(\"_images/icon-svg.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.image {\n            background: url(\"_images/icon-image.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.txt {\n            background: url(\"_images/icon-txt.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.docx {\n            background: url(\"_images/icon-docx.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.pptx {\n            background: url(\"_images/icon-pptx.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.xlsx {\n            background: url(\"_images/icon-xlsx.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n        #feature-matrix .icon.hangul {\n            background: url(\"_images/icon-hangul.svg\") 0 0 transparent no-repeat;\n            background-size: 40px 40px;\n        }\n\n    </style>\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment on Windows\nDESCRIPTION: Commands to create and activate a Python virtual environment on Windows, then upgrade pip to the latest version.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/installation.rst#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npy -m venv pymupdf-venv\n.\\pymupdf-venv\\Scripts\\activate\npython -m pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Building Japanese Documentation\nDESCRIPTION: Commands for building and updating Japanese language documentation\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build -a -b html -D language=ja . _build/html/ja\n```\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build -b gettext . _build/gettext\n```\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-intl update -p _build/gettext -l ja\n```\n\n----------------------------------------\n\nTITLE: Displaying Software Disclaimer in HTML\nDESCRIPTION: Creates a paragraph element with a disclaimer about the software's license and warranty. Includes a link to Artifex's website for more information.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/footer.rst#2025-04-11_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<p style=\"color:#999\" id=\"footerDisclaimer\">This software is provided AS-IS with no warranty, either express or implied. This software is distributed under license and may not be copied, modified or distributed except as expressly authorized under the terms of that license. Refer to licensing information at <a href=\"https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link\">artifex.com</a> or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA 94129, United States for further information.</p>\n```\n\n----------------------------------------\n\nTITLE: PyMuPDF Unrecoverable Error Example\nDESCRIPTION: Shows how PyMuPDF handles and reports unrecoverable errors when attempting to open a non-existent PDF file.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app3.rst#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import pymupdf\n>>> doc = pymupdf.open(\"does-not-exist.pdf\")\nmupdf: cannot open does-not-exist.pdf: No such file or directory\nTraceback (most recent call last):\n  File \"<pyshell#1>\", line 1, in <module>\n    doc = pymupdf.open(\"does-not-exist.pdf\")\n  File \"C:\\Users\\Jorj\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\fitz\\pymupdf.py\", line 2200, in __init__\n    _pymupdf.Document_swiginit(self, _pymupdf.new_Document(filename, stream, filetype, rect, width, height, fontsize))\nRuntimeError: cannot open does-not-exist.pdf: No such file or directory\n```\n\n----------------------------------------\n\nTITLE: Installing PyMuPDF Pro via pip\nDESCRIPTION: Command to install PyMuPDF Pro using pip package manager.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf-pro.rst#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pymupdfpro\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Translation for PyMuPDF Feature Matrix in JavaScript\nDESCRIPTION: This JavaScript snippet handles language-specific translations for the feature matrix. It detects the page language and translates key phrases between English and Japanese, updating the HTML elements accordingly.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/supported-files-table.rst#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n\n    let lang = document.getElementsByTagName('html')[0].getAttribute('lang');\n\n    function getTranslation(str) {\n        if (lang == \"ja\") {\n            if (str==\"File type\") {\n                return \"ファイルタイプ\";\n            } else if (str==\"Document Formats\") {\n                return \"文書のフォーマット\";\n            } else if (str==\"Image Formats\") {\n                return \"画像のフォーマット\";\n            } else if (str==\"Input formats\") {\n                return \"入力フォーマット\";\n            } else if (str==\"Output formats\") {\n                return \"出力フォーマット\";\n            }\n\n        }\n\n        return str;\n    }\n\n    document.getElementById(\"trans1\").innerHTML = getTranslation(\"File type\");\n    document.getElementById(\"trans2\").innerHTML = getTranslation(\"Document Formats\");\n    document.getElementById(\"trans3\").innerHTML = getTranslation(\"Image Formats\");\n    document.getElementById(\"trans4\").innerHTML = getTranslation(\"Input formats\");\n    document.getElementById(\"trans5\").innerHTML = getTranslation(\"Output formats\");\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building PDF Documentation\nDESCRIPTION: Commands to install rst2pdf and build PDF documentation using Sphinx\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install rst2pdf\n```\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build -b pdf . build/pdf\n```\n\n----------------------------------------\n\nTITLE: Setting Layer Configuration Example - Python\nDESCRIPTION: Example demonstrating how to set layer configuration using set_layer() method with basestate parameter.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/document.rst#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> doc.set_layer(-1, basestate=\"OFF\")  # only changes the base state\n>>> pprint(doc.get_layer())\n{'basestate': 'OFF', 'off': [8, 9, 10], 'on': [5, 6, 7], 'rbgroups': [[7, 10]]}\n```\n\n----------------------------------------\n\nTITLE: Including External RST Files with Directives\nDESCRIPTION: This snippet demonstrates how to include external content in an RST file using the include directive. The file imports header.rst, changes.txt, and footer.rst to assemble a complete document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/changes.rst#2025-04-11_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: header.rst\n\n.. include:: ../changes.txt\n\n.. include:: footer.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Dependencies\nDESCRIPTION: Specifies the required Python packages for building documentation with Sphinx. Includes a pinned Sphinx version (5.3.0) and various extensions for enhanced documentation features like search, theming, and analytics.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/requirements.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrst2pdf\n\n# define sphinx versioning\nsphinx==5.3.0\nfuro\nreadthedocs-sphinx-search==0.3.2\nsphinx_copybutton\nsphinx-notfound-page\nsphinxcontrib-googleanalytics\n```\n\n----------------------------------------\n\nTITLE: Styling Feature Matrix Table for PyMuPDF in HTML and CSS\nDESCRIPTION: This snippet defines the CSS styles for a feature matrix table, including custom classes for yes/no indicators, icon display for various file formats, and responsive layout. It sets up the visual presentation of supported file types in PyMuPDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/supported-files-table.rst#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n\n    table {\n        border-style: hidden;\n    }\n\n    #feature-matrix th {\n        border: 1px #999 solid;\n        padding: 10px;\n        background-color: #007aff;\n        color: white;\n    }\n\n    #feature-matrix tr {\n\n    }\n\n    #feature-matrix td {\n        border: 1px #999 solid;\n        padding: 10px;\n    }\n\n    #feature-matrix tr td.yes {\n        background-color: #83e57c !important;\n        color: #000;\n    }\n\n    #feature-matrix tr td.yes::before {\n        content: \"✔︎ \";\n    }\n\n    #feature-matrix tr td.no {\n        background-color: #e5887c !important;\n        color: #000;\n    }\n\n    #feature-matrix tr td.no::before {\n        content: \"✕ \";\n    }\n\n    #feature-matrix tr td.limited {\n        background-color: #e4c07b !important;\n        color: #000;\n    }\n\n    #feature-matrix .icon-holder {\n        line-height: 40px;\n    }\n\n    #feature-matrix .icon {\n        text-indent: 45px;\n        line-height: 40px;\n        width: 100px;\n        height: 40px;\n    }\n\n    #feature-matrix .icon.pdf {\n        background: url(\"_images/icon-pdf.svg\") 0 0 transparent no-repeat;\n        background-size: 40px 40px;\n    }\n\n    #feature-matrix .icon.xps {\n        background: url(\"_images/icon-xps.svg\") 0 0 transparent no-repeat;\n        background-size: 40px 40px;\n    }\n\n    #feature-matrix .icon.epub {\n        background: url(\"_images/icon-epub.svg\") 0 0 transparent no-repeat;\n        background-size: 40px 40px;\n    }\n\n    #feature-matrix .icon.mobi {\n        background: url(\"_images/icon-mobi.svg\") 0 0 transparent no-repeat;\n        background-size: 40px 40px;\n    }\n\n    #feature-matrix .icon.fb2 {\n        background: url(\"_images/icon-fb2.svg\") 0 0 transparent no-repeat;\n        background-size: 40px 40px;\n    }\n\n    #feature-matrix .icon.cbz {\n        background: url(\"_images/icon-cbz.svg\") 0 0 transparent no-repeat;\n        background-size: 40px 40px;\n    }\n\n    #feature-matrix .icon.svg {\n        background: url(\"_images/icon-svg.svg\") 0 0 transparent no-repeat;\n        background-size: 40px 40px;\n    }\n\n    #feature-matrix .icon.image {\n        background: url(\"_images/icon-image.svg\") 0 0 transparent no-repeat;\n        background-size: 40px 40px;\n    }\n\n    #feature-matrix .icon.txt {\n        background: url(\"_images/icon-txt.svg\") 0 0 transparent no-repeat;\n        background-size: 40px 40px;\n    }\n\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone PyMuPDF CLI Executable\nDESCRIPTION: Two-line script that can be compiled with Nuitka to create a standalone CLI executable\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/module.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pymupdf.__main__ import main\nmain()\n```\n\n----------------------------------------\n\nTITLE: Rectangle Contains Method - Python\nDESCRIPTION: Method to check if a point or rectangle is contained within the current rectangle. Accepts IRect, Rect, Point or number as input. Returns True if input is an empty rectangle, False if the current rectangle is empty.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/rect.rst#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef contains(x):\n    # x: rect_like or point_like\n    # returns: bool\n```\n\n----------------------------------------\n\nTITLE: Calculating Euclidean Norm of IRect in Python\nDESCRIPTION: Method to calculate the Euclidean norm of the IRect treated as a vector of four numbers.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/irect.rst#2025-04-11_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef norm(self):\n```\n\n----------------------------------------\n\nTITLE: Accessing Deprecated Method Documentation in Python\nDESCRIPTION: Example showing how to access and view the documentation for deprecated methods in PyMuPDF, specifically demonstrating the newPage method documentation with its deprecation notice and original documentation.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/znames.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> print(pymupdf.Document.newPage.__doc__)\n*** Deprecated and removed in version following 1.19.0 - use 'new_page'. ***\nCreate and return a new page object.\n\n    Args:\n        pno: (int) insert before this page. Default: after last page.\n        width: (float) page width in points. Default: 595 (ISO A4 width).\n        height: (float) page height in points. Default 842 (ISO A4 height).\n    Returns:\n        A Page object.\n```\n\n----------------------------------------\n\nTITLE: RST Version and Reference Links\nDESCRIPTION: ReStructuredText (RST) content showing version numbers and external reference links to PDF tools and sample files.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app4.rst#2025-04-11_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n     - :green-color:`1.0`\n     - :orange-color:`1.76`\n     - :red-color:`2.32`\n\n\n.. include:: footer.rst\n\n\n.. External links\n\n.. _PDFrw : https://pypi.org/project/pdfrw/\n.. _PyPDF2 : https://pypi.org/project/pypdf/\n.. _PDFMiner : https://pypi.org/project/pdfminer.six/\n.. _PDFtk : https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/\n.. _XPDF : https://www.xpdfreader.com/\n.. _PikePDF : https://pypi.org/search/?q=pikepdf\n.. _PDF2JPG : https://pypi.org/project/pdf2jpg/\n\n.. _adobe.pdf : https://artifex.com/samples/pdf/adobe.pdf\n.. _artifex-website.pdf : https://artifex.com/samples/pdf/artifex-website.pdf\n.. _db-systems.pdf : https://artifex.com/samples/pdf/db-systems.pdf\n.. _fontforge.pdf : https://artifex.com/samples/pdf/fontforge.pdf\n.. _pandas.pdf : https://artifex.com/samples/pdf/pandas.pdf\n.. _pymupdf.pdf : https://artifex.com/samples/pdf/pymupdf.pdf\n.. _pythonbook.pdf : https://artifex.com/samples/pdf/pythonbook.pdf\n.. _sample-50-MB-pdf-file.pdf : https://artifex.com/samples/pdf/sample-50-MB-pdf-file.pdf\n```\n\n----------------------------------------\n\nTITLE: Adding Discord and Feedback Links to Documentation\nDESCRIPTION: HTML markup for the Discord community link with SVG logo and feedback link. This section is positioned below the search bar and language toggle.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/header.rst#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"display:flex;justify-content:space-between;align-items:center;margin-top:20px;\">\n        <div class=\"discordLink\" style=\"display:flex;align-items:center;margin-top: -5px;\">\n            <a href=\"https://discord.gg/TSpYGBW4eq\" id=\"findOnDiscord\" target=_blank>Find <b>#pymupdf</b> on <b>Discord</b></a>\n            <a href=\"https://discord.gg/TSpYGBW4eq\" target=_blank>\n                <div style=\"width:30px;height:30px;margin-left:5px;\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 127.14 96.36\">\n                        <defs>\n                            <style>.discordLogoFill{fill:#5865f2;}</style>\n                        </defs>\n                        <g id=\"Discord_Logo\" data-name=\"Discord Logo\">\n                            <path class=\"discordLogoFill\" d=\"M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z\"/>\n                        </g>\n                    </svg>\n                </div>\n            </a>\n        </div>\n\n        <div class=\"feedbackLink\"><a id=\"feedbackLinkTop\" target=_blank>Do you have any feedback on this page?</b></a></div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Styling PDF Performance Comparison Charts with CSS\nDESCRIPTION: CSS styles defining the layout and appearance of bar charts comparing PDF library performance metrics. Includes responsive design elements and dark mode considerations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/about-performance.rst#2025-04-11_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n* {\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\n.graph {\n    font-family: arial;\n}\n\n.central-graph {\n    display: flex;\n}\n\n/* Additional styling properties... */\n```\n\n----------------------------------------\n\nTITLE: Organizing PyMuPDF Documentation with toctree Directives in reStructuredText\nDESCRIPTION: This snippet demonstrates how to structure documentation using reStructuredText's toctree directives. It includes multiple toctree sections that reference different recipe files, creating a hierarchical documentation structure for the PyMuPDF guide.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/recipes.rst#2025-04-11_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: header.rst\n\n.. title:: PyMuPDF: How to Guide\n\n\n.. _RecipesTOC:\n\n\n.. toctree::\n\n   how-to-open-a-file.rst\n\n\n----\n\n\n.. toctree::\n\n   recipes-text.rst\n\n\n----\n\n.. toctree::\n\n   recipes-images.rst\n\n\n----\n\n.. toctree::\n\n   recipes-annotations.rst\n\n\n----\n\n.. toctree::\n\n   recipes-drawing-and-graphics.rst\n\n----\n\n.. toctree::\n\n   recipes-stories.rst\n\n----\n\n.. toctree::\n\n   recipes-journalling.rst\n\n----\n\n.. toctree::\n\n   recipes-multiprocessing.rst\n\n----\n\n.. toctree::\n\n   recipes-ocr.rst\n\n----\n\n.. toctree::\n\n   recipes-optional-content.rst\n\n----\n\n.. toctree::\n\n   recipes-low-level-interfaces.rst\n\n----\n\n.. toctree::\n\n   recipes-common-issues-and-their-solutions.rst\n\n\n.. include:: footer.rst\n```\n\n----------------------------------------\n\nTITLE: Including External RST File in PyMuPDF Documentation\nDESCRIPTION: This snippet includes an external RST file named 'footer.rst' into the current document. It's commonly used to add consistent footer content across multiple documentation pages.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/pymupdf4llm/api.rst#2025-04-11_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../footer.rst\n```\n\n----------------------------------------\n\nTITLE: Method References for PyMuPDF Changes\nDESCRIPTION: Collection of method references mentioned in the changelog including Page.get_textpage_ocr, Page.get_drawings, Page.get_cdrawings, and Page.get_text. These methods handle text extraction, OCR functionality, and drawing operations.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nPage.get_textpage_ocr(dpi)  # OCR with quality control\nPage.get_drawings()      # Get page drawings with RGB colors\nPage.get_cdrawings()     # Performance-optimized drawings\nPage.get_text(sort=True) # Get sorted text output\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for PDF Performance Charts\nDESCRIPTION: HTML markup creating three performance comparison bar charts showing copying, text extraction, and rendering speeds across different PDF libraries.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/about-performance.rst#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"graph\">\n    <div class=\"central-graph\" id=\"copying-graph\">\n        <div class=\"about-graph-y-axis-text\">\n            <div class=\"segment\">600</div>\n            <!-- Additional segments... -->\n        </div>\n        <!-- Additional chart elements... -->\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Finding the Middle Point between Two Points in PyMuPDF\nDESCRIPTION: Demonstration of calculating the middle point of a line connecting two Point objects by adding them and dividing by 2.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/algebra.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> p1 = pymupdf.Point(1, 2)\n>>> p2 = pymupdf.Point(4711, 3141)\n>>> mp = (p1 + p2) / 2\n>>> mp\nPoint(2356.0, 1571.5)\n>>> \n```\n\n----------------------------------------\n\nTITLE: Accessing Deprecated Property Documentation in Python\nDESCRIPTION: Example showing how to access and view the documentation for deprecated properties in PyMuPDF, specifically demonstrating the pageCount property documentation with its deprecation notice.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/znames.rst#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> print(pymupdf.Document.pageCount.__doc__)\n*** Deprecated and removed in version following 1.19.0 - use 'page_count'. ***\nNumber of pages.\n```\n\n----------------------------------------\n\nTITLE: Using Document Indexing and Iteration\nDESCRIPTION: Examples of accessing PDF pages using document indexing and iteration features. Demonstrates how documents can be accessed with page numbers as indices and used as iterators.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndoc[n] = doc.loadPage(n)\nfor page in doc:\n    # do something with page\n```\n\n----------------------------------------\n\nTITLE: Extracting Text with Color Information in Python\nDESCRIPTION: Demonstrates how to extract text from a page including color information using the getText method with the 'dict' option, as introduced in version 1.16.2.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ntext_dict = page.getText(\"dict\")\n# text_dict now includes sRGB color information for each text span\n```\n\n----------------------------------------\n\nTITLE: Copying PDFs with PDFrw in Python\nDESCRIPTION: Opens a PDF file with PDFrw and writes its contents to a new file. Used to compare PDF parsing and copying performance against PyMuPDF.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/app4.rst#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc = PdfReader(\"input.pdf\")\nwriter = PdfWriter()\nwriter.trailer = doc\nwriter.write(\"output.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Using Page Iterator in Python\nDESCRIPTION: Shows how to use the new pages method introduced in version 1.16.4 to iterate over a range of pages in a document.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfor page in document.pages(start=0, stop=10):\n    # Process page\n```\n\n----------------------------------------\n\nTITLE: Python Dict Usage Example\nDESCRIPTION: Example showing the paper_rect method return value format for letter paper size.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfitz.paper_rect(\"letter\") = fitz.Rect(0.0, 0.0, 612.0, 792.0)\n```\n\n----------------------------------------\n\nTITLE: Extracting Vector Graphics from PDF with PyMuPDF\nDESCRIPTION: Extract vector graphics paths from a PDF page.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/docs/the-basics.rst#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndoc = pymupdf.open(\"some.file\")\npage = doc[0]\npaths = page.get_drawings()\n```\n\n----------------------------------------\n\nTITLE: Creating Empty PDF Document\nDESCRIPTION: Example showing how to create a new empty PDF document using fitz.open()\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfitz.open()  # creates new empty PDF document\n```\n\n----------------------------------------\n\nTITLE: Python Method Call Example\nDESCRIPTION: Example showing the getText method call with rawdict parameter.\nSOURCE: https://github.com/pymupdf/PyMuPDF/blob/main/changes.txt#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nPage.getText(\"rawdict\")\n```"
  }
]