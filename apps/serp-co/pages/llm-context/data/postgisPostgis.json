[
  {
    "owner": "postgis",
    "repo": "postgis",
    "content": "TITLE: Defining Well-Known Binary Representation Grammar for PostGIS\nDESCRIPTION: This grammar defines the Well-Known Binary (WKB) format used in PostGIS for serializing geometric objects. It supports various dimensions (2D, Z, M, ZM) and different geometry types including points, lines, polygons, and their collections.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/bnf-wkb.txt#2025-04-21_snippet_0\n\nLANGUAGE: bnf\nCODE:\n```\n<well-known binary representation> ::= \n    <well-knownzm binary representation> | \n    <well-knownz binary representation> | \n    <well-knownm binary representation> | \n    <well-known2d binary representation>\n\n<well-knownzm binary representation> ::= \n    <pointzm binary representation> | \n    <curvezm binary representation> | \n    <surfacezm binary representation> | \n    <collectionzm binary representation>\n    \n<well-knownz binary representation> ::= \n    <pointz binary representation> | \n    <curvez binary representation> | \n    <surfacez binary representation> | \n    <collectionz binary representation>\n    \n<well-knownm binary representation> ::= \n    <pointm binary representation> | \n    <curvem binary representation> | \n    <surfacem binary representation> | \n    <collectionm binary representation>\n    \n<well-known2d binary representation> ::= \n    <point binary representation> | \n    <curve binary representation> | \n    <surface binary representation> | \n    <collection binary representation>\n    \n<pointzm binary representation> ::= \n    <byte order> <wkbpointzm> <wkbpointzm binary>\n    \n<pointz binary representation> ::= \n    <byte order> <wkbpointz> <wkbpointz binary>\n    \n<pointm binary representation> ::= \n    <byte order> <wkbpointm> <wkbpointm binary>\n    \n<point binary representation> ::= \n    <byte order> <wkbpoint> <wkbpoint binary>\n    \n<curvezm binary representation> ::= \n    <linestringzm binary representation> | \n    <circularstringzm binary representation> | \n    <compoundcurvezm binary representation>\n    \n<curvez binary representation> ::= \n    <linestringz binary representation> | \n    <circularstringz binary representation> | \n    <compoundcurvez binary representation>\n    \n<curvem binary representation> ::= \n    <linestringm binary representation> | \n    <circularstringm binary representation> | \n    <compoundcurvem binary representation>\n    \n\n<curve binary representation> ::= \n    <linestring binary representation> | \n    <circularstring binary representation> | \n    <compoundcurve binary representation>\n    \n<linestringzm binary representation> ::= \n    <byte order> <wkblinestringzm> <num> <wkbpointzm binary>\n    \n<linestringz binary representation> ::= \n    <byte order> <wkblinestringz> <num> <wkbpointz binary>\n    \n<linestringm binary representation> ::= \n    <byte order> <wkblinestringm> <num> <wkbpointm binary>\n    \n<linestring binary representation> ::= \n    <byte order> <wkblinestring> <num> <wkbpoint binary>\n    \n<circularstringzm binary representation> ::= \n    <byte order> <wkbcircularstringzm> <num> <wkbpointzm binary>\n    \n<circularstringz binary representation> ::= \n    <byte order> <wkbcircularstringz> <num> <wkbpointz binary>\n    \n<circularstringm binary representation> ::= \n    <byte order> <wkbcircularstringm> <num> <wkbpointm binary>\n    \n<circularstring binary representation> ::= \n    <byte order> <wkbcircularstring> <num> <wkbpoint binary>\n    \n<compoundcurvezm binary representation> ::= \n    <byte order> <wkbcompoundcurvezm> <num> <wkbcurvezm binary>\n    \n<compoundcurvez binary representation> ::= \n    <byte order> <wkbcompoundcurvez> <num> <wkbcurvez binary>\n    \n<compoundcurvem binary representation> ::= \n    <byte order> <wkbcompoundcurvem> <num> <wkbcurvem binary>\n    \n<compoundcurve binary representation> ::= \n    <byte order> <wkbcompoundcurve> <num> <wkbcurve binary>\n    \n<surfacezm binary representation> ::= \n    <curvezmpolygonzm binary representation>\n    \n<surfacez binary representation> ::= \n    <curvepolygonz binary representation>\n    \n<surfacem binary representation> ::= \n    <curvepolygonm binary representation>\n    \n<surface binary representation> ::= \n    <curvepolygon binary representation>\n    \n<curvepolygonzm binary representation> ::= \n    <byte order> <wkbcurvepolygonzm> <num> <wkbringzm binary> | \n    <polygonzm binary representation> |\n    <trianglezm binary representation> \n        \n<curvepolygonz binary representation> ::= \n    <byte order> <wkbcurvepolygonz> <num> <wkbringz binary> | \n    <polygonz binary representation> |\n    <trianglez binary representation> \n        \n<curvepolygonm binary representation> ::= \n    <byte order> <wkbcurvepolygonm> <num> <wkbringm binary> | \n    <polygonm binary representation> |\n    <trianglem binary representation> \n    \n<curvepolygon binary representation> ::= \n    <byte order> <wkbcurvepolygon> <num> <wkbring binary> | \n    <polygon binary representation> |\n    <triangle binary representation>\n    \n<polygonzm binary representation> ::= \n    <byte order> <wkbpolygonzm> <num> <wkblinearringzm binary>\n\n<polygonz binary representation> ::= \n    <byte order> <wkbpolygonz> <num> <wkblinearringz binary>\n\n<polygonm binary representation> ::= \n    <byte order> <wkbpolygonm> <num> <wkblinearringm binary>\n\n<polygon binary representation> ::= \n    <byte order> <wkbpolygon> <num> <wkblinearring binary>\n\n<trianglezm binary representation> ::= \n    <byte order> <wkbtrianglezm> <num> <wkblinearringzm binary>\n\n<trianglem binary representation> ::= \n    <byte order> <wkbtrianglem> <num> <wkblinearringm binary>\n\n<trianglez binary representation> ::= \n    <byte order> <wkbtrianglez> <num> <wkblinearringz binary>\n\n<triangle binary representation> ::= \n    <byte order> <wkbtriangle> <num> <wkblinearring binary>\n\n<collectionzm binary representation> ::= \n    <multipointzm binary representation> | \n    <multicurvezm binary representation> | \n    <multisurfacezm binary representation> | \n    <geometrycollectionzm binary representation>\n    \n<collectionz binary representation> ::= \n    <multipointz binary representation> | \n    <multicurvez binary representation> | \n    <multisurfacez binary representation> | \n    <geometrycollectionz binary representation>\n    \n<collectionm binary representation> ::= \n    <multipointm binary representation> | \n    <multicurvem binary representation> | \n    <multisurfacem binary representation> | \n    <geometrycollectionm binary representation>\n    \n<collection binary representation> ::= \n    <multipoint binary representation> | \n    <multicurve binary representation> | \n    <multisurface binary representation> | \n    <geometrycollection binary representation>\n    \n<multipointzm binary representation> ::= \n    <byte order> <wkbmultipointzm> <num> <pointzm binary representation>\n\n<multipointz binary representation> ::= \n    <byte order> <wkbmultipointz> <num> <pointz binary representation>\n    \n<multipointm binary representation> ::= \n    <byte order> <wkbmultipointm> <num> <pointm binary representation>\n    \n<multipoint binary representation> ::= \n    <byte order> <wkbmultipoint> <num> <point binary representation>\n    \n<multicurvezm binary representation> ::= \n    <byte order> <wkbmulticurvezm> <num> <curvezm binary representation> | \n    <multilinestringzm binary representation>\n    \n<multicurvez binary representation> ::= \n    <byte order> <wkbmulticurvez> <num> <curvez binary representation> | \n    <multilinestringz binary representation>\n    \n<multicurvem binary representation> ::= \n    <byte order> <wkbmulticurvem> <num> <curvem binary representation> | \n    <multilinestringm binary representation>\n    \n<multicurve binary representation> ::= \n    <byte order> <wkbmulticurve> <num> <curve binary representation> | \n    <multilinestring binary representation>\n\n<multilinestringzm binary representation> ::= \n    <byte order> <wkbmultilinestringzm> <num> <linestringzm binary representation>\n\n<multilinestringz binary representation> ::= \n    <byte order> <wkbmultilinestringz> <num> <linestringz binary representation>\n\n<multilinestringm binary representation> ::= \n    <byte order> <wkbmultilinestringm> <num> <linestringm binary representation>\n\n<multilinestring binary representation> ::= \n    <byte order> <wkbmultilinestring> <num> <linestring binary representation>\n\n<multisurfacezm binary representation> ::= \n    <byte order> <wkbmultisurfacezm> <num> <surfacezm binary representation> | \n    <multipolygonzm binary representation> |\n    <tinzm binary representation>\n\n<multisurfacez binary representation> ::= \n    <byte order> <wkbmultisurfacez> <num> <surfacez binary representation> | \n    <multipolygonz binary representation> |\n    <tinz binary representation>\n\n<multisurfacem binary representation> ::= \n    <byte order> <wkbmultisurfacem> <num> <surfacem binary representation> | \n    <multipolygonm binary representation> |\n    <tinm binary representation>\n\n<multisurface binary representation> ::= \n    <byte order> <wkbmultisurface> <num> <surface binary representation> | \n    <multipolygon binary representation> |\n    <tin binary representation>\n\n<multipolygonzm binary representation> ::= \n    <byte order> <wkbmultipolygonzm> <num> <polygonzm binary representation>\n\n<multipolygonz binary representation> ::= \n    <byte order> <wkbmultipolygonz> <num> <polygonz binary representation>\n\n<multipolygonm binary representation> ::= \n    <byte order> <wkbmultipolygonm> <num> <polygonm binary representation>\n\n<multipolygon binary representation> ::= \n    <byte order> <wkbmultipolygon> <num> <polygon binary representation>\n\n<polyhedralsurfacezm binary representation> ::= \n    <byte order> <wkbpolyhedralsurfacezm> <num> <polygonzm binary representation>\n\n<polyhedralsurfacez binary representation> ::= \n    <byte order> <wkbpolyhedralsurfacez> <num> <polygonz binary representation>\n\n<polyhedralsurfacem binary representation> ::= \n    <byte order> <wkbpolyhedralsurfacem> <num> <polygonm binary representation>\n\n<polyhedralsurface binary representation> ::= \n    <byte order> <wkbpolyhedralsurface> <num> <polygon binary representation>\n\n<tinzm binary representation> ::= \n    <byte order> <wkbtinzm> <num> <trianglezm binary representation>\n\n<tinz binary representation> ::= \n    <byte order> <wkbtinz> <num> <trianglez binary representation>\n\n<tinm binary representation> ::= \n    <byte order> <wkbtinm> <num> <trianglem binary representation>\n\n<tin binary representation> ::= \n```\n\n----------------------------------------\n\nTITLE: Well-Known Text (WKT) Grammar Definition for PostGIS\nDESCRIPTION: Complete BNF grammar specification for Well-Known Text (WKT) representation of geometric objects in PostGIS. Includes syntax definitions for all supported geometry types such as points, linestrings, polygons, and collections, with optional Z and M dimensions.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/bnf-wkt.txt#2025-04-21_snippet_0\n\nLANGUAGE: BNF\nCODE:\n```\n<well-known text representation> ::= \n    <point text representation> | \n    <curve text representation> |\n    <surface text representation> |\n    <collection text representation>\n\n<point text representation> ::= POINT [ <z m> ] <point text>\n\n<curve text representation> ::= \n    <linestring text representation> | \n    <circularstring text representation> | \n    <compoundcurve text representation>\n\n<linestring text representation> ::= \n    LINESTRING [ <z m> ] <linestring text body>\n\n<circularstring text representation> ::= \n    CIRCULARSTRING [ <z m> ] <circularstring text>\n\n<compoundcurve text representation> ::= \n    COMPOUNDCURVE [ <z m> ] <compoundcurve text>\n\n<surface text representation> ::= \n    <curvepolygon text representation>\n\n<curvepolygon text representation> ::= \n    CURVEPOLYGON [ <z m> ] <curvepolygon text body> | \n    <polygon text representation> |\n    <triangle text representation>\n\n<polygon text representation> ::= \n    POLYGON [ <z m> ] <polygon text body>\n\n<triangle text representation> ::= \n    TRIANGLE [ <z m> ] <triangle text body>\n\n<collection text representation> ::= \n    <multipoint text representation> | \n    <multicurve text representation> | \n    <multisurface text representation> | \n    <geometrycollection text representation>\n\n<multipoint text representation> ::= \n    MULTIPOINT [ <z m> ] <multipoint text>\n\n<multicurve text representation> ::= \n    MULTICURVE [ <z m> ] <multicurve text> | \n    <multilinestring text representation>\n\n<multilinestring text representation> ::= \n    MULTILINESTRING [ <z m> ] <multilinestring text>\n\n<multisurface text representation> ::= \n    MULTISURFACE [ <z m> ] <multisurface text> | \n    <multipolygon text representation> |\n    <polyhedralsurface text representation> |\n    <tin text representation>\n\n<multipolygon text representation> ::= \n    MULTIPOLYGON [ <z m> ] <multipolygon text>\n\n<polyhedralsurface text representation> ::= \n    POLYHEDRALSURFACE [ <z m> ] <polyhedralsurface text>\n\n<tin text representation> ::= \n    TIN [ <z m> ] <tin text>\n\n<geometrycollection text representation> ::= \n    GEOMETRYCOLLECTION [ <z m> ] <geometrycollection text>\n\n<linestring text body> ::= \n    <linestring text>\n\n<curvepolygon text body> ::= \n    <curvepolygon text>\n\n<polygon text body> ::= \n    <polygon text>\n\n<triangle text body> ::= \n    <triangle text>\n\n<point text> ::= \n    <empty set> | \n    <left paren> <point> <right paren> \n\n<point> ::= <x> <y> [ <z> ] [ <m> ] \n\n<x> ::= <number> \n<y> ::= <number>\n<z> ::= <number>\n<m> ::= <number>\n\n<linestring text> ::= \n    <empty set> | \n    <left paren> <point> { <comma> <point> }... <right paren>\n\n<circularstring text> ::= \n    <empty set> | \n    <left paren> <point> { <comma> <point> }... <right paren>\n\n<compoundcurve text> ::= \n    <empty set> | \n    <left paren> <single curve text> { <comma> <single curve text> }... <right paren>\n\n<single curve text> ::= \n    <linestring text body> | \n    <circularstring text representation>\n\n<curve text> ::= \n    <linestring text body> | \n    <circularstring text representation> | \n    <compoundcurve text representation>\n\n<ring text> ::= \n    <linestring text body> | \n    <circularstring text representation> | \n    <compoundcurve text representation>\n\n<surface text> ::= \n    CURVEPOLYGON <curvepolygon text body> | \n    <polygon text body>\n\n<curvepolygon text> ::= \n    <empty set> | \n    <left paren> <ring text> { <comma> <ring text> }... <right paren>\n\n<polygon text> ::= \n    <empty set> | \n    <left paren> <linestring text> { <comma> <linestring text> }... <right paren>\n\n<triangle text> ::= \n    <empty set> | \n    <left paren> <linestring text> <right paren>\n\n<multipoint text> ::= \n    <empty set> | \n    <left paren> <point text> { <comma> <point text > }... <right paren>\n\n<multicurve text> ::= \n    <empty set> | \n    <left paren> <curve text> { <comma> <curve text> }... <right paren>\n\n<multilinestring text> ::= \n    <empty set> | \n    <left paren> <linestring text body> { <comma> <linestring text body> }... <right paren>\n\n<multisurface text> ::= \n    <empty set> | \n    <left paren> <surface text> { <comma> <surface text> }... <right paren>\n\n<multipolygon text> ::= \n    <empty set> | \n    <left paren> <polygon text body> { <comma> <polygon text body> }... <right paren>\n\n<polyhedralsurface text> ::= \n    <empty set> | \n    <left paren> <polygon text body> { <comma> <polygon text body> }... <right paren>\n\n<tin text> ::= \n    <empty set> | \n    <left paren> <triangle text body> { <comma> <triangle text body> }... <right paren>\n\n<geometrycollection text> ::= \n    <empty set> | \n    <left paren> <well-known text representation> { <comma> <well-known text representation> }... <right paren>\n\n<empty set> ::= EMPTY\n\n<z m> ::= ZM | Z | M\n<left paren> ::= (\n<right paren> ::= )\n```\n\n----------------------------------------\n\nTITLE: Geometric Functions Migration Reference\nDESCRIPTION: Comprehensive mapping of PostGIS geometric functions showing their migration paths from legacy versions to standardized ST_ prefixed versions. Includes function visibility (PUBLIC/PRIVATE) and migration actions (KEEP/DEPRECATE/DELETE/RENAME).\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/rfc/postgis_rfc_03_sheet.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nFUNCTION ST_Area(geometry) PUBLIC KEEP\nFUNCTION distance_spheroid(geometry,geometry,spheroid) PUBLIC DEPRECATE\nFUNCTION ST_Distance_WGS84(geometry,geometry) PUBLIC NEW\nFUNCTION ST_distance_spheroid(geometry,geometry,spheroid) PUBLIC KEEP\nFUNCTION distance_sphere(geometry,geometry) PUBLIC DEPRECATE\nFUNCTION ST_distance_sphere(geometry,geometry) PUBLIC KEEP\n```\n\n----------------------------------------\n\nTITLE: Defining GSERIALIZED Structure in C\nDESCRIPTION: Core structure definition for the GSERIALIZED type that includes size, SRID, flags and data members. The structure is designed to be compatible with PostgreSQL's VARLENA header format.\nSOURCE: https://github.com/postgis/postgis/blob/master/liblwgeom/gserialized.txt#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct\n{\n  uint32 size; /* Use LWSIZE_SET() and LWSIZE_GET() macros to manipulate. */\n  uchar srid[3]; /* 21 bits of SRID (and 3 spare bits) */\n  uchar flags; /* High priority information */\n  uchar data[1]; /* See gserialized.txt */\n} GSERIALIZED;\n```\n\n----------------------------------------\n\nTITLE: Inserting and Querying Geography Data\nDESCRIPTION: Examples of inserting valid and invalid geography data into a table, and querying the data using ST_AsText function.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/geography.txt#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO gtable1 VALUES (1, 'POINT(0 0)');\nSELECT id,ST_AsText(geog) FROM gtable2;\n```\n\n----------------------------------------\n\nTITLE: Creating Geography-Enabled Table in PostGIS\nDESCRIPTION: Creates a basic table with a geography column using CREATE TABLE statement. The table includes an integer primary key and a geography column.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/geography.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE gtable ( id integer primary key, geog geography );\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Geometry Types for WKB in C++\nDESCRIPTION: This enum defines extended geometry types to support Z, M, and SRID flags in the Well-Known Binary (WKB) format. It includes combinations for 2D, 3D (Z or M), 4D (ZM), and variants with SRID.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/ZMSgeoms.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nenum wkbGeometryTypeZ {\n\n\twkbPoint = 1,\n\twkbLineString = 2,\n\twkbPolygon = 3,\n\twkbMultiPoint = 4,\n\twkbMultiLineString = 5,\n\twkbMultiPolygon = 6,\n\twkbGeometryCollection = 7,\n\n\t// | 0x80000000\n\twkbPointZ = 0x80000001,\n\twkbLineStringZ = 0x80000002,\n\twkbPolygonZ = 0x80000003,\n\twkbMultiPointZ = 0x80000004,\n\twkbMultiLineStringZ = 0x80000005,\n\twkbMultiPolygonZ = 0x80000006,\n\twkbGeometryCollectionZ = 0x80000007,\n\n\t// | 0x40000000\n\twkbPointM = 0x40000001,\n\twkbLineStringM = 0x40000002,\n\twkbPolygonM = 0x40000003,\n\twkbMultiPointM = 0x40000004,\n\twkbMultiLineStringM = 0x40000005,\n\twkbMultiPolygonM = 0x40000006,\n\twkbGeometryCollectionM = 0x40000007,\n\n\t// | 0x40000000 | 0x80000000\n\twkbPointZM = 0xC0000001,\n\twkbLineStringZM = 0xC0000002,\n\twkbPolygonZM = 0xC0000003,\n\twkbMultiPointZM = 0xC0000004,\n\twkbMultiLineStringZM = 0xC0000005,\n\twkbMultiPolygonZM = 0xC0000006,\n\twkbGeometryCollectionZM = 0xC0000007,\n\n\t// | 0x20000000 \n\twkbPointS = 0x20000001,\n\twkbLineStringS = 0x20000002,\n\twkbPolygonS = 0x20000003,\n\twkbMultiPointS = 0x20000004,\n\twkbMultiLineStringS = 0x20000005,\n\twkbMultiPolygonS = 0x20000006,\n\twkbGeometryCollectionS = 0x20000007,\n\n\t// | 0x20000000 | 0x80000000\n\twkbPointZS = 0xA0000001,\n\twkbLineStringZS = 0xA0000002,\n\twkbPolygonZS = 0xA0000003,\n\twkbMultiPointZS = 0xA0000004,\n\twkbMultiLineStringZS = 0xA0000005,\n\twkbMultiPolygonZS = 0xA0000006,\n\twkbGeometryCollectionZS = 0xA0000007,\n\n\t// | 0x20000000 | 0x40000000\n\twkbPointMS = 0x60000001,\n\twkbLineStringMS = 0x60000002,\n\twkbPolygonMS = 0x60000003,\n\twkbMultiPointMS = 0x60000004,\n\twkbMultiLineStringMS = 0x60000005,\n\twkbMultiPolygonMS = 0x60000006,\n\twkbGeometryCollectionMS = 0x60000007,\n\n\t// | 0x20000000 | 0x40000000 | 0x80000000\n\twkbPointZMS = 0xE0000001,\n\twkbLineStringZMS = 0xE0000002,\n\twkbPolygonZMS = 0xE0000003,\n\twkbMultiPointZMS = 0xE0000004,\n\twkbMultiLineStringZMS = 0xE0000005,\n\twkbMultiPolygonZMS = 0xE0000006,\n\twkbGeometryCollectionZMS = 0xE0000007,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Representation for PostGIS WKB\nDESCRIPTION: This snippet details the binary representation syntax for encoding various geometric objects in PostGIS using WKB. It specifies how different geometry types such as points, lines, polygons, and more complex structures are represented in binary form, including byte order and component encoding. This is crucial for implementing binary parsing or generation for GIS applications interfacing with PostGIS.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/bnf-wkb.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<byte order> <wkbtin> <num> <triangle binary representation> \\n\\n<geometrycollectionzm binary representation> ::= \\n    <byte order> <wkbgeometrycollectionzm> <num> <well-knownzm binary representation>\\n\\n<geometrycollectionz binary representation> ::= \\n    <byte order> <wkbgeometrycollectionz> <num> <well-knownz binary representation>\\n\\n<geometrycollectionm binary representation> ::= \\n    <byte order> <wkbgeometrycollectionm> <num> <well-knownm binary representation>\\n\\n<geometrycollection binary representation> ::= \\n    <byte order> <wkbgeometrycollection> <num> <well-known binary representation>\\n\\n<wkbcurvezm binary> ::= \\n    <linestringzm binary representation> | \\n    <circularstringzm binary representation>\\n\\n<wkbcurvez binary> ::= \\n    <linestringz binary representation> | \\n    <circularstringz binary representation>\\n\\n<wkbcurvem binary> ::= \\n    <linestringm binary representation> | \\n    <circularstringm binary representation>\\n\\n<wkbcurve binary> ::= \\n    <linestring binary representation> | \\n    <circularstring binary representation>\\n\\n<wkbringzm binary> ::= \\n    <linestringzm binary representation> | \\n    <circularstringzm binary representation> | \\n    <compoundcurvezm binary representation>\\n\\n<wkbringz binary> ::= \\n    <linestringz binary representation> | \\n    <circularstringz binary representation> | \\n    <compoundcurvez binary representation>\\n\\n<wkbringm binary> ::= \\n    <linestringm binary representation> | \\n    <circularstringm binary representation> | \\n    <compoundcurvem binary representation>\\n\\n<wkbring binary> ::= \\n    <linestring binary representation> | \\n    <circularstring binary representation> | \\n    <compoundcurve binary representation>\\n\\n<wkbpointzm binary> ::= <wkbx> <wkby> <wkbz> <wkbm> \\n<wkbpointz binary> ::= <wkbx> <wkby> <wkbz> \\n<wkbpointm binary> ::= <wkbx> <wkby> <wkbm> \\n<wkbpoint binary> ::= <wkbx> <wkby>\\n<wkbx> ::= <double> \\n<wkby> ::= <double> \\n<wkbz> ::= <double> \\n<wkbm> ::= <double> \\n<num> ::= <uint32> \\n<wkblinearringzm> ::= <num> <wkbpointzm binary>... \\n<wkblinearringz> ::= <num> <wkbpointz binary>... \\n<wkblinearringm> ::= <num> <wkbpointm binary>... \\n<wkblinearring> ::= <num> <wkbpoint binary>... \\n\\n<wkbpointzm> ::= 3001\\n<wkbpointm> ::= 2001\\n<wkbpointz> ::= 1001\\n<wkbpoint> ::= 1\\n<wkblinestringzm> ::= 3002\\n<wkblinestringm> ::= 2002\\n<wkblinestringz> ::= 1002\\n<wkblinestring> ::= 2\\n<wkbpolygonzm> ::= 3003\\n<wkbpolygonm> ::= 2003\\n<wkbpolygonz> ::= 1003\\n<wkbpolygon> ::= 3\\n<wkbmultipointzm> ::= 3004\\n<wkbmultipointm> ::= 2004\\n<wkbmultipointz> ::= 1004\\n<wkbmultipoint> ::= 4\\n<wkbmultilinestringzm> ::= 3005\\n<wkbmultilinestringm> ::= 2005\\n<wkbmultilinestringz> ::= 1005\\n<wkbmultilinestring> ::= 5\\n<wkbmultipolygonzm> ::= 3006\\n<wkbmultipolygonm> ::= 2006\\n<wkbmultipolygonz> ::= 1006\\n<wkbmultipolygon> ::= 6\\n<wkbgeometrycollectionzm> ::= 3007\\n<wkbgeometrycollectionm> ::= 2007\\n<wkbgeometrycollectionz> ::= 1007\\n<wkbgeometrycollection> ::= 7\\n<wkbcircularstringzm> ::= 3008\\n<wkbcircularstringm> ::= 2008\\n<wkbcircularstringz> ::= 1008\\n<wkbcircularstring> ::= 8\\n<wkbcompoundcurvezm> ::= 3009\\n<wkbcompoundcurvem> ::= 2009\\n<wkbcompoundcurvez> ::= 1009\\n<wkbcompoundcurve> ::= 9\\n<wkbcurvepolygonzm> ::= 3010\\n<wkbcurvepolygonm> ::= 2010\\n<wkbcurvepolygonz> ::= 1010\\n<wkbcurvepolygon> ::= 10\\n<wkbmulticurvezm> ::= 3011\\n<wkbmulticurvem> ::= 2011\\n<wkbmulticurvez> ::= 1011\\n<wkbmulticurve> ::= 11\\n<wkbmultisurfacezm> ::= 3012\\n<wkbmultisurfacem> ::= 2012\\n<wkbmultisurfacez> ::= 1012\\n<wkbmultisurface> ::= 12\\n<wkbpolyhedralsurfacezm> ::= 3015\\n<wkbpolyhedralsurfacem> ::= 2015\\n<wkbpolyhedralsurfacez> ::= 1015\\n<wkbpolyhedralsurface> ::= 15\\n<wkbtinzm> ::= 3016\\n<wkbtinm> ::= 2016\\n<wkbtinz> ::= 1016\\n<wkbtin> ::= 16\\n<wkbtrianglezm> ::= 3017\\n<wkbtrianglem> ::= 2017\\n<wkbtrianglez> ::= 1017\\n<wkbtriangle> ::= 17\\n\\n<byte order> ::= <byte> !! 1 = little, 0 = big\\n<byte> ::= !! 8 bits byte\\n<uint32> ::= !! 32 bits unsigned integer\\n<double> ::= !! 64 bits ieee double\\n\n```\n\n----------------------------------------\n\nTITLE: Clipping Function for Geometries in PostGIS\nDESCRIPTION: Primary function to clip and validate polygons using Wagyu library. Works exclusively with POLYGON and MULTIPOLYGON geometries and supports clipping to a bounding box.\nSOURCE: https://github.com/postgis/postgis/blob/master/deps/wagyu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nlwgeom_wagyu_clip_by_box\n```\n\n----------------------------------------\n\nTITLE: PostGIS Type Casting Functions\nDESCRIPTION: Definition of PostGIS type casting functions for converting between different geometric types and representations. Includes both legacy and ST_ prefixed versions with their retention status.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/rfc/postgis_rfc_03_sheet.txt#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nFUNCTION box2d(geometry) PRIVATE KEEP\nFUNCTION ST_box2d(geometry) PRIVATE DEPRECATE\nFUNCTION box3d(geometry) PRIVATE KEEP\nFUNCTION ST_box3d(geometry) PRIVATE DEPRECATE\nFUNCTION box(geometry) PRIVATE KEEP\n```\n\n----------------------------------------\n\nTITLE: Creating SRID-Restricted Geography Table\nDESCRIPTION: Creates a table with a geography column restricted to Polygon type and SRID 4326, showing combined type and SRID constraints.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/geography.txt#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE gtable3 ( id integer, geog geography(polygon, 4326) );\n```\n\n----------------------------------------\n\nTITLE: Testing Geography Input/Output Functions\nDESCRIPTION: Demonstrates the bi-directional conversion between text and binary representations of geography data using PostGIS functions.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/geography.txt#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ST_AsText(ST_GeographyFromBinary(ST_AsBinary(ST_GeographyFromText('LINESTRING(0 0, 1 1)'))));\n```\n\n----------------------------------------\n\nTITLE: Defining WKB Structure for ZM Point with SRID in C++\nDESCRIPTION: This struct defines the Well-Known Binary (WKB) representation for a ZM Point geometry with SRID. It includes byte order, geometry type, SRID, and coordinate values (X, Y, Z, M).\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/ZMSgeoms.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nWKBPoint {\n\n\tbyte    byteOrder;      // wkbXDR or wkbNDR\n\n\tuint32  wkbType;        // (wkbPoint+wkbZ+wkbM+wkbSRID) =\n\t\t\t        // 0xE0000001\n\n\tuint32  SRID;           // 4326\n\n\tPoint {\n\t\tDouble    x;    // 10.0\n\t\tDouble    y;    // 20.0\n\t\tDouble    z;    // 30.0\n\t\tDouble    m;    // 40.0\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry to Geography\nDESCRIPTION: Shows how to cast geometry data to geography type using a table creation example with type casting.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/geography.txt#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE geomtable ( id integer, geom geometry );\nINSERT INTO geomtable VALUES ( 2, 'POINT(0 0)' );\nCREATE TABLE geogtable AS SELECT id, geom::geography AS geog FROM geomtable;\nSELECT ST_AsText(geog), id FROM geogtable;\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Restricted Geography Table\nDESCRIPTION: Creates a table with a geography column restricted to LineString type, demonstrating type constraints in PostGIS.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/geography.txt#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE gtable2 ( id integer, geog geography(linestring) );\n```\n\n----------------------------------------\n\nTITLE: Querying PostGIS Version\nDESCRIPTION: This SQL query retrieves the full version information of PostGIS. It's crucial for reporting security vulnerabilities to identify the specific version affected.\nSOURCE: https://github.com/postgis/postgis/blob/master/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT postgis_full_version();\"\n```\n\n----------------------------------------\n\nTITLE: Ryu Function Integration for PostGIS\nDESCRIPTION: Describes the main function interfaces used from the Ryu library for PostGIS integration. Uses d2sfixed_buffered_n for decimal notation and d2sexp_buffered_n for exponential notation, with modifications to support precision parameters and match existing output formats.\nSOURCE: https://github.com/postgis/postgis/blob/master/deps/ryu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Main interface functions\nd2sfixed_buffered_n  // Prints double in decimal notation\nd2sexp_buffered_n    // Prints double in exponential notation\n```\n\n----------------------------------------\n\nTITLE: Printf Format Specifications\nDESCRIPTION: Documents the supported printf-style format specifiers for floating point numbers, including %f for decimal notation, %e for scientific notation, and %g for automatic format selection based on length.\nSOURCE: https://github.com/postgis/postgis/blob/master/deps/ryu/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n%f  // Full decimal format\n%e  // Scientific notation\n%g  // Automatic format selection\n```\n\n----------------------------------------\n\nTITLE: PostGIS Utility Functions Reference\nDESCRIPTION: Documentation of PostGIS utility functions including versioning, projection, and configuration functions. Shows retention status and migration paths for system management functions.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/rfc/postgis_rfc_03_sheet.txt#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nFUNCTION postgis_version() RETURNS text PUBLIC KEEP\nFUNCTION postgis_proj_version() RETURNS text PUBLIC KEEP\nFUNCTION postgis_scripts_installed() RETURNS text PUBLIC KEEP\nFUNCTION postgis_lib_version() RETURNS text PUBLIC KEEP\nFUNCTION postgis_scripts_released() RETURNS text PUBLIC KEEP\n```\n\n----------------------------------------\n\nTITLE: Point2D Structure Layout - Fully Padded\nDESCRIPTION: Memory layout for a 2D point with full padding alignment. Shows structure growing from 25 to 32 bytes (28% larger).\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/rfc/postgis_rfc_02.txt#2025-04-21_snippet_0\n\nLANGUAGE: pseudo\nCODE:\n```\n<int> Pg VarSize\n<int> type\n<longlong> srid\n<double> X\n<double> Y\n```\n\n----------------------------------------\n\nTITLE: Compiling PostGIS Utilities\nDESCRIPTION: Basic command to compile the PostGIS loader/dumper utilities from source code. After compilation, the binary should be copied to the system's command search path.\nSOURCE: https://github.com/postgis/postgis/blob/master/loader/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Version\nDESCRIPTION: This SQL query retrieves the version information of PostgreSQL. It is included in the report to provide additional context for diagnosing security vulnerabilities.\nSOURCE: https://github.com/postgis/postgis/blob/master/SECURITY.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT version();\"\n```\n\n----------------------------------------\n\nTITLE: LineString2D Structure Layout - Fully Padded\nDESCRIPTION: Memory layout for a 2D linestring including bbox and srid with full padding. Structure grows from 61 to 72 bytes (18% larger).\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/rfc/postgis_rfc_02.txt#2025-04-21_snippet_1\n\nLANGUAGE: pseudo\nCODE:\n```\n<int> Pg VarSize\n<int> type\n<longlong> srid\n<float><float> bbox mins\n<float><float> bbox maxs\n<longlong> npoints\n<double> X0\n<double> Y0\n<double> X1\n<double> Y1\n```\n\n----------------------------------------\n\nTITLE: Point2D Structure Layout - Scrunched Header\nDESCRIPTION: Optimized memory layout for a 2D point using combined type/srid field. Results in 4% size reduction from 25 to 24 bytes.\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/rfc/postgis_rfc_02.txt#2025-04-21_snippet_2\n\nLANGUAGE: pseudo\nCODE:\n```\n<int> Pg VarSize\n<int> type / srid\n<double> X\n<double> Y\n```\n\n----------------------------------------\n\nTITLE: LineString2D Structure Layout - Scrunched Header\nDESCRIPTION: Optimized memory layout for a 2D linestring using combined type/srid field. Structure grows from 61 to 64 bytes (5% larger).\nSOURCE: https://github.com/postgis/postgis/blob/master/doc/rfc/postgis_rfc_02.txt#2025-04-21_snippet_3\n\nLANGUAGE: pseudo\nCODE:\n```\n<int> Pg VarSize\n<int> type / srid\n<float><float> bbox mins\n<float><float> bbox maxs\n<longlong> npoints\n<double> X0\n<double> Y0\n<double> X1\n<double> Y1\n```\n\n----------------------------------------\n\nTITLE: Wagyu Library Version Retrieval Function\nDESCRIPTION: Returns a static string containing the version of the Wagyu library, useful for compatibility and debugging purposes.\nSOURCE: https://github.com/postgis/postgis/blob/master/deps/wagyu/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nlibwagyu_version\n```\n\n----------------------------------------\n\nTITLE: Wagyu Library Interruption Request Function\nDESCRIPTION: Provides a mechanism to request interruption of ongoing Wagyu library operations, enabling cancellation of long-running clipping processes.\nSOURCE: https://github.com/postgis/postgis/blob/master/deps/wagyu/README.md#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nlwgeom_wagyu_interruptRequest\n```\n\n----------------------------------------\n\nTITLE: NY Location Data Mapping\nDESCRIPTION: Tab-separated data mapping showing NY state code paired with different representations of New York City and its boroughs, including variations in spacing and abbreviated forms.\nSOURCE: https://github.com/postgis/postgis/blob/master/extensions/address_standardizer/usps-st-city-adds.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNY\tNY\nNY\tN Y\nNY\tNYC\nNY\tN Y C\nNY\tNEW YORK\nNY\tNY\nNY\tNY\nNY\tNY\nNY\tMANHATTAN\nNY\tQUEENS\nNY\tTHE BRONX\n```\n\n----------------------------------------\n\nTITLE: State-City Tab Delimited List\nDESCRIPTION: A tab-separated list of state abbreviations and corresponding city names for Alaska and Alabama. Includes both full names and abbreviated versions of some city names.\nSOURCE: https://github.com/postgis/postgis/blob/master/extensions/address_standardizer/usps-st-city-orig.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAK\tADAK\nAK\tAKHIOK\nAK\tAKIACHAK\n[...]\nAL\tPHENIX CITY\nAL\tPHIL CAMPBELL\n```\n\n----------------------------------------\n\nTITLE: Minnesota Cities Tab-Separated Data\nDESCRIPTION: A tab-separated value (TSV) dataset containing Minnesota city names with state abbreviation. Each line contains MN followed by a tab character and then the city name.\nSOURCE: https://github.com/postgis/postgis/blob/master/extensions/address_standardizer/usps-st-city-orig.txt#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nMN\tASKOV\nMN\tATWATER\nMN\tAUDUBON\n[...additional entries...]\n```\n\n----------------------------------------\n\nTITLE: State-City Data List\nDESCRIPTION: Tab-delimited list of US cities organized by state abbreviation (NE, NH, NJ). Each line contains a state code and city name in uppercase.\nSOURCE: https://github.com/postgis/postgis/blob/master/extensions/address_standardizer/usps-st-city-orig.txt#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNE\tPOLK\nNE\tPONCA\nNE\tPOTTER\n[...additional entries...]\n```\n\n----------------------------------------\n\nTITLE: Pennsylvania Location Data\nDESCRIPTION: Two-column tabular data showing Pennsylvania locations with state abbreviation PA and corresponding city/town names. The data is sorted alphabetically by location name and includes both full names and abbreviated versions for some longer place names.\nSOURCE: https://github.com/postgis/postgis/blob/master/extensions/address_standardizer/usps-st-city-orig.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nPA\tBUSHKILL\nPA\tBUTLER\nPA\tBUTZTOWN\n[...additional entries...]\n```\n\n----------------------------------------\n\nTITLE: Row Length Test Cases\nDESCRIPTION: Sample text data containing three rows that demonstrate length validation test cases. Each row contains numeric sequences followed by 'toolong' and an index number.\nSOURCE: https://github.com/postgis/postgis/blob/master/loader/cunit/map.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0123456789toolong0 0123456780\n0123456789toolong1 0123456781\n0123456789toolong2 0123456782\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to PostGIS Code of Conduct\nDESCRIPTION: Markdown heading and link referencing the official PostGIS Code of Conduct document hosted on postgis.net.\nSOURCE: https://github.com/postgis/postgis/blob/master/CODE_OF_CONDUCT.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCode of Conduct\n===============\n\nSee [the PostGIS Code of Conduct](https://postgis.net/community/conduct/).\n```"
  }
]