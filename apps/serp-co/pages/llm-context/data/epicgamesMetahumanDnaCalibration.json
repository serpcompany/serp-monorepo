[
  {
    "owner": "epicgames",
    "repo": "metahuman-dna-calibration",
    "content": "TITLE: Complete Example of Mesh Building in Python\nDESCRIPTION: This complete example demonstrates the end-to-end process of building meshes from a DNA file using the dna_viewer library. It includes importing modules, defining file paths, creating a DNA object, building meshes with default settings, creating a Config object with custom settings, and building meshes with the configured settings. This example assumes that the environment has been set up correctly.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_api_build_meshes.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom dna_viewer import DNA, Config, build_meshes\n\n# if you use Maya, use absolute path\nROOT_DIR = f\"{ospath.dirname(ospath.abspath(__file__))}/..\".replace(\"\\\\\", \"/\")\n# Sets DNA file path\nDNA_PATH_ADA = f\"{ROOT_DIR}/data/dna_files/Ada.dna\"\ndna_ada = DNA(DNA_PATH_ADA)\n\n# Starts the mesh build process with all the default values\nbuild_meshes(dna=dna_ada)\n\n# Creates the options to be passed in `build_meshes`\nconfig = Config(\n    add_joints=True,\n    add_blend_shapes=True,\n    add_skin_cluster=True,\n    add_ctrl_attributes_on_root_joint=True,\n    add_animated_map_attributes_on_root_joint=True,\n    lod_filter=[0, 1],\n    mesh_filter=[\"head\"],\n)\n\n# Starts the mesh building process with the provided parameters\n# In this case it will create every mesh contained in LODs 0 and 1 with 'head` in it's name,\nbuild_meshes(\n    dna=dna_ada,\n    config=config,\n)\n```\n\n----------------------------------------\n\nTITLE: Reading/Modifying Blend Shape Target Deltas in Python\nDESCRIPTION: This code demonstrates how to read, modify, and write blend shape target deltas for a specific expression within a MetaHuman DNA file. It defines a function to read the deltas and vertex indices and then modifies the delta values by adding 1.0 to each component. It finally creates a JSON writer to output the modified DNA data. It depends on the `FileStream`, `JSONStreamWriter`, and methods for reading blend shape target information from the DNA object.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef read_blend_shape_target_deltas(reader, mesh_index, blend_shape_target_index):\n    \"\"\"\n    Read blend shape target deltas and corresponding vertex indices.\n    \"\"\"\n\n    vertex_indices = reader.getBlendShapeTargetVertexIndices(\n        mesh_index, blend_shape_target_index\n    )\n    blend_shape_target_delta_count = reader.getBlendShapeTargetDeltaCount(\n        mesh_index, blend_shape_target_index\n    )\n    deltas = []\n    for delta_index in range(blend_shape_target_delta_count):\n        x, y, z = reader.getBlendShapeTargetDelta(\n            mesh_index, blend_shape_target_index, delta_index\n        )\n        deltas.append([x, y, z])\n    return vertex_indices, deltas\n\n# Read and then change blend shape target deltas for expression \"jaw_open\", mesh \"head_lod0_mesh\"\ninput_dna = load_dna(input_path)\n\nmesh_name = \"head_lod0_mesh\"\nmesh_count = input_dna.getMeshCount()\nhead_mesh_index = 0\nfor mesh_index in range(mesh_count):\n    if input_dna.getMeshName(mesh_index) == mesh_name:\n        head_mesh_index = mesh_index\n        break\n\nbs_target_count = input_dna.getBlendShapeTargetCount(head_mesh_index)\nexpr_name = \"jaw_open\"\n\n# Get the blend shape target index for the specified expression\nfor i in range(bs_target_count):\n    bs_channel_index = input_dna.getBlendShapeChannelIndex(head_mesh_index, i)\n    bs_name = input_dna.getBlendShapeChannelName(bs_channel_index)\n    if bs_name == expr_name:\n        bs_target_index = i\n        break\n\nvertex_indices, deltas = read_blend_shape_target_deltas(input_dna, head_mesh_index, bs_target_index)\n\n# Modify deltas (in this case, just add 1.0 to each delta)\nfor i in range(len(deltas)):\n    deltas[i][0] += 1.0\n    deltas[i][1] += 1.0\n    deltas[i][2] += 1.0\n\n# Create a writer DNA from input DNA\noutput_stream = dna.FileStream(outputPath, dna.FileStream.AccessMode_Write, dna.FileStream.OpenMode_Binary)\n\n# In this example, for debugging purposes, write a DNA in JSON format, to quickly see if blend shape deltas have been changed\noutput_dna = dna.JSONStreamWriter(output_stream)\noutput_dna.setFrom(input_dna)\n\n# Write new blend shape delta values for expression\noutput_dna.setBlendShapeTargetDeltas(mesh_index, bs_target_index, deltas)\n```\n\n----------------------------------------\n\nTITLE: Reading Binary DNA from File in Python\nDESCRIPTION: This code snippet demonstrates how to load a MetaHuman DNA file from a binary file using the `FileStream` and `BinaryStreamReader` classes. It opens the file in binary read mode, creates a reader for all data layers, reads the data, and checks for errors. It requires the `FileStream` and `BinaryStreamReader` classes from the DNA library.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef load_dna(path):\n    stream = FileStream(path, FileStream.AccessMode_Read, FileStream.OpenMode_Binary)\n    reader = BinaryStreamReader(stream, DataLayer_All)\n    reader.read()\n    if not Status.isOk():\n        status = Status.get()\n        raise RuntimeError(f\"Error loading DNA: {status.message}\")\n    return reader\n```\n\n----------------------------------------\n\nTITLE: Environment Setup for dna_viewer in Python\nDESCRIPTION: Sets up the environment to import from dna_viewer by adding necessary paths to syspath and setting the MAYA_PLUG_IN_PATH environment variable. It determines the correct library directory based on the operating system (Windows or Linux).\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_API.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sys import path as syspath, platform\nfrom os import environ, path as ospath\n\nROOT_DIR = fr\"{ospath.dirname(ospath.abspath(__file__))}/..\".replace(\"\\\\\", \"/\") # if you use Maya, use an absolute path instead\nROOT_LIB_DIR = fr\"{ROOT_DIR}/lib\"\nif platform == \"win32\":\n    LIB_DIR = f\"{ROOT_LIB_DIR}/windows\"\nelif platform == \"linux\":\n    LIB_DIR = f\"{ROOT_LIB_DIR}/linux\"\nelse:\n    raise OSError(\"OS not supported, please compile dependencies and add value to LIB_DIR\")\n\n\nif \"MAYA_PLUG_IN_PATH\" in environ:\n    separator = \":\" if platform == \"linux\" else \";\"\n    environ[\"MAYA_PLUG_IN_PATH\"] = separator.join([environ[\"MAYA_PLUG_IN_PATH\"], LIB_DIR])    \nelse:\n    environ[\"MAYA_PLUG_IN_PATH\"] = LIB_DIR\n\nsyspath.append(ROOT_DIR)\nsyspath.append(LIB_DIR)\n```\n\n----------------------------------------\n\nTITLE: Reading Neutral Joint Coordinates/Orientations in Python\nDESCRIPTION: This code snippet demonstrates how to read neutral joint coordinates and joint orient values from a MetaHuman DNA object. It uses methods like `getNeutralJointTranslationXs`, `getNeutralJointTranslationYs`, `getNeutralJointTranslationZs` for coordinates, and `getNeutralJointRotationXs`, `getNeutralJointRotationYs`, `getNeutralJointRotationZs` for orientations. It assumes that the `load_dna` function is available and has been used to load the DNA.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndna = load_dna(input_path)\n\n# Read joint coordinates\nneutral_joint_translation_xs = dna.getNeutralJointTranslationXs()\nneutral_joint_translation_ys = dna.getNeutralJointTranslationYs()\nneutral_joint_translation_zs = dna.getNeutralJointTranslationZs()\n\n# Read joint orientations\nneutral_joint_orient_xs = dna.getNeutralJointRotationXs()\nneutral_joint_orient_ys = dna.getNeutralJointRotationYs()\nneutral_joint_orient_zs = dna.getNeutralJointRotationZs()\n```\n\n----------------------------------------\n\nTITLE: Building Meshes with Default Configuration in Python\nDESCRIPTION: This snippet demonstrates the usage of the `build_meshes` function with only the `dna` parameter.  This utilizes the default configuration settings for building the meshes, effectively including all meshes found in the DNA file.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_api_build_meshes.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmesh_names = build_meshes(dna=dna_ada)\n```\n\n----------------------------------------\n\nTITLE: Loading DNA Files with DNA Class in Python\nDESCRIPTION: Loads DNA files using the DNA class from the dna_viewer library. It takes the path to the DNA file as input and optionally a list of layers to load specific parts of the DNA.  The example loads two DNA files, 'ada' and 'taro', using DNA_PATH_ADA and DNA_PATH_TARO respectively.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_API.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dna_viewer import DNA\n\ndna_ada = DNA(DNA_PATH_ADA)\ndna_taro = DNA(DNA_PATH_TARO)\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment for DNA Calibration\nDESCRIPTION: This code snippet prepares the Python environment by adding necessary directories to the system path. This is required when running scripts outside of Maya's environment, ensuring that the required libraries are accessible. It includes platform-specific handling for Windows and Linux.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom os import path as ospath\nfrom sys import path as syspath\nfrom sys import platform\n\nROOT_DIR = f\"{ospath.dirname(ospath.abspath(__file__))}/..\".replace(\"\\\\\", \"/\")\nMAYA_VERSION = \"2022\"  # or 2023\nROOT_LIB_DIR = f\"{ROOT_DIR}/lib/Maya{MAYA_VERSION}\"\nif platform == \"win32\":\n    LIB_DIR = f\"{ROOT_LIB_DIR}/windows\"\nelif platform == \"linux\":\n    LIB_DIR = f\"{ROOT_LIB_DIR}/linux\"\nelse:\n    raise OSError(\n        \"OS not supported, please compile dependencies and add value to LIB_DIR\"\n    )\n\n# Adds directories to path\nsyspath.insert(0, ROOT_DIR)\nsyspath.insert(0, LIB_DIR)\n```\n\n----------------------------------------\n\nTITLE: Build Character Rig using DNA and RigConfig - Python\nDESCRIPTION: This example demonstrates how to use the `DNA`, `RigConfig`, and `build_rig` functions from the `dna_viewer` module to create a character rig. It sets up file paths, creates `DNA` and `RigConfig` instances, and then calls `build_rig` to generate the rig in Maya. The `ROOT_DIR` is defined relative to the current file location. Requires the `dna_viewer` library and Maya to be properly configured.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_api_build_rig.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dna_viewer import DNA, RigConfig, build_rig\n\n# if you use Maya, use absolute path\nROOT_DIR = f\"{ospath.dirname(ospath.abspath(__file__))}/..\".replace(\"\\\\\", \"/\")\n\n# Sets the values that will used\nDNA_PATH_ADA = f\"{ROOT_DIR}/data/dna_files/Ada.dna\"\ndna_ada = DNA(DNA_PATH_ADA)\n\nconfig = RigConfig(\n    gui_path=f\"{ROOT_DIR}/data/gui.ma\",\n    analog_gui_path=f\"{ROOT_DIR}/data/analog_gui.ma\",\n    aas_path=f\"{ROOT_DIR}/data/additional_assemble_script.py\",\n)\n\n# Creates the rig\nbuild_rig(dna=dna_ada, config=config)\n```\n\n----------------------------------------\n\nTITLE: Reading Binary DNA with Specific Layers in Python\nDESCRIPTION: This code snippet demonstrates loading specific data layers from a MetaHuman DNA file, limiting the amount of data loaded. It creates a `BinaryStreamReader` instance, specifying `DataLayer_Behavior` to only include the Descriptor, Definition, and Behavior layers. Dependencies: Requires `FileStream` and `BinaryStreamReader` from the DNA library.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nstream = FileStream(path, FileStream.AccessMode_Read, FileStream.OpenMode_Binary)\nreader = BinaryStreamReader(stream, DataLayer_Behavior)\nreader.read()\nif not Status.isOk():\n    status = Status.get()\n    raise RuntimeError(f\"Error loading DNA: {status.message}\")\n```\n\n----------------------------------------\n\nTITLE: Building Meshes with Configuration in Python\nDESCRIPTION: This snippet demonstrates how to use the build_meshes function with a Config object. It first creates a Config instance with specific settings for joints, blend shapes, skin clusters, LOD filtering, and mesh filtering. It then calls build_meshes with the DNA data and the configuration object to generate meshes based on these settings.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_api_build_meshes.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfig = Config(\n    add_joints=True,\n    add_blend_shapes=True,\n    add_skin_cluster=True,\n    add_ctrl_attributes_on_root_joint=True,\n    add_animated_map_attributes_on_root_joint=True,\n    lod_filter=[0, 1],\n    mesh_filter=[\"head\"],\n)\nmesh_names = build_meshes(\n    dna=dna_ada,\n    config=config\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Modified DNA to File Python\nDESCRIPTION: This snippet demonstrates how to write the modified DNA data to a file. It includes error handling to check the status of the write operation.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\noutput_dna.write()\n\nif not dna.Status.isOk():\n    status = dna.Status.get()\n    raise RuntimeError(\"Error saving DNA: {}\".format(status.message))\n```\n\n----------------------------------------\n\nTITLE: Modifying Neutral Joint Rotations in C++\nDESCRIPTION: This C++ code snippet demonstrates how to read a DNA file, modify the rotation values of all neutral joints to {1, 2, 3}, and then overwrite the DNA file with these new values. It utilizes the DNACalib library for DNA manipulation. It requires the DNACalib library and includes operations like file reading, DNA editing, and writing back to the file.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dnacalib.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Create DNA reader\nauto inOutStream = dnac::makeScoped<dnac::FileStream>(\"example.dna\",\n                                                      dnac::FileStream::AccessMode::ReadWrite,\n                                                      dnac::FileStream::OpenMode::Binary);\nauto reader = dnac::makeScoped<dnac::BinaryStreamReader>(inOutStream.get());\nreader->read();\n\n// Check if an error occurred while reading DNA file\nif (!dnac::Status::isOk()) {\n    // handle reader error\n}\n\n// Create DNACalib reader in order to edit DNA\nauto dnaReader = dnac::makeScoped<dnac::DNACalibDNAReader>(reader.get());\n\nstd::vector<dnac::Vector3> rotations{dnaReader->getJointCount(), {1.0f, 2.0f, 3.0f}};\n\n// Create command instance\ndnac::SetNeutralJointRotationsCommand cmd{dnac::ConstArrayView<dnac::Vector3>{rotations}};\n\n// Execute command\ncmd.run(dnaReader.get());\n\n// Write DNA file\nauto writer = dnac::makeScoped<dnac::BinaryStreamWriter>(inOutStream.get());\nwriter->setFrom(dnaReader.get());\nwriter->write();\n\n// Check if an error occurred while writing DNA file\nif (!dnac::Status::isOk()) {\n    // handle writer error\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Neutral Vertex Positions for a Mesh in Python\nDESCRIPTION: This code snippet demonstrates how to read the neutral vertex positions for a specified mesh from a loaded MetaHuman DNA object. It retrieves X, Y, and Z coordinates using the `getVertexPositionXs`, `getVertexPositionYs`, and `getVertexPositionZs` methods, respectively. It assumes a DNA object has been loaded using the `load_dna` function. It retrieves the mesh count and returns if there are no meshes found.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndna = load_dna(input_path)\n\nif dna.getMeshCount() == 0:\n    print(\"No meshes found in DNA.\")\n    return\n\nmesh_index = 0\nxs = dna.getVertexPositionXs(mesh_index)\nys = dna.getVertexPositionYs(mesh_index)\nzs = dna.getVertexPositionZs(mesh_index)\n```\n\n----------------------------------------\n\nTITLE: Creating a Config Instance in Python\nDESCRIPTION: This snippet creates an instance of the Config class from the dna_viewer library. It sets various parameters that control how meshes are built, such as whether to add joints, blend shapes, skin clusters, control attributes, and animated map attributes.  It also sets filters for Level of Detail (LOD) and mesh names.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_api_build_meshes.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfig = Config(\n    add_joints=True,\n    add_blend_shapes=True,\n    add_skin_cluster=True,\n    add_ctrl_attributes_on_root_joint=True,\n    add_animated_map_attributes_on_root_joint=True,\n    lod_filter=[0, 1],\n    mesh_filter=[\"head\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Loading and Checking DNA Rig Definition\nDESCRIPTION: This code snippet loads a DNA file and checks its rig definition to determine whether it's using the MH.4 or DHI rig.  It utilizes the `BinaryStreamReader` to parse the DNA file and raises an exception if loading fails. It prints which folder should be used based on rig definition.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom dna import (\n    BinaryStreamReader,\n    DataLayer_All,\n    FileStream,\n    Status,\n)\n\ndef load_dna_reader(dna_file):\n    stream = FileStream(\n        dna_file, FileStream.AccessMode_Read, FileStream.OpenMode_Binary\n    )\n    reader = BinaryStreamReader(stream, DataLayer_All)\n    reader.read()\n    if not Status.isOk():\n        status = Status.get()\n        raise RuntimeError(f\"Error loading DNA: {status.message}\")\n    return reader\n\ncharacter_dna = \"path_to/character.dna\"\nreader = load_dna_reader(character_dna)\nif reader.getDBName() == \"MH.4\":\n  print(\"Use mh4 folder\")\nelif reader.getDBName() == \"DHI\":\n  print(\"Use data folder\")\nelse:\n  print(\"Unsupported rig definition!\")\n```\n\n----------------------------------------\n\nTITLE: Importing DNA Viewer Modules in Python\nDESCRIPTION: This snippet imports the necessary modules from the dna_viewer library: DNA, Config, and build_meshes. These modules are used to load DNA files, configure the mesh building process, and generate the meshes respectively.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_api_build_meshes.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dna_viewer import DNA, Config, build_meshes\n```\n\n----------------------------------------\n\nTITLE: Creating BinaryStreamReader C++\nDESCRIPTION: Factory method for creating a BinaryStreamReader instance. It allows filtering data based on LODs and data layers. The user is responsible for releasing the returned pointer by calling destroy.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ncreate(stream, layer = DataLayer::All, maxLOD = 0u, memRes = nullptr)\nParameters:\n    stream - Source stream from which data is going to be read.\n    layer - Specify the layer up to which the data needs to be loaded.\n    maxLOD - The maximum level of details to be loaded. A value of zero indicates to load all LODs.\n    memRes - Memory resource to be used for allocations. If a memory resource is not given, a default allocation mechanism will be used.\n\ncreate(stream, layer, maxLOD, minLOD, memRes = nullptr)\nParameters:\n    stream - Source stream from which data is going to be read.\n    layer - Specify the layer up to which the data needs to be loaded.\n    maxLOD - The maximum level of details to be loaded.\n    minLOD - The minimum level of details to be loaded. A range of [0, LOD count - 1] for maxLOD / minLOD respectively indicates to load all LODs.\n    memRes - Memory resource to be used for allocations. If a memory resource is not given, a default allocation mechanism will be used.\n\ncreate(stream, layer, lods, lodCount, memRes = nullptr)\nParameters:\n    stream - Source stream from which data is going to be read.\n    layer - Specify the layer up to which the data needs to be loaded.\n    lods - An array specifying which exact lods to load.\n    lodCount - The number of elements in the lods array.\n    memRes - Memory resource to be used for allocations. If a memory resource is not given, a default allocation mechanism will be used.\n```\n\n----------------------------------------\n\nTITLE: Writing Binary DNA to File in Python\nDESCRIPTION: This code snippet demonstrates writing MetaHuman DNA data to a binary file. It creates a `FileStream` in write mode, initializes a `BinaryStreamWriter`, and sets the writer's data from a `BinaryStreamReader`. It then writes the data to the file and checks for errors. Requires `FileStream`, `BinaryStreamWriter`, and a pre-existing `BinaryStreamReader` object.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef save_dna(reader, path):\n    stream = FileStream(path, FileStream.AccessMode_Write, FileStream.OpenMode_Binary)\n    writer = BinaryStreamWriter(stream)\n    # Create a writer based on the reader using all data layers (if no argument is passed to setFrom(), DataLayer_All is the default value)\n    writer.setFrom(reader)\n    # For example, to create a writer with only Geometry layer (including Definition and Descriptor), use:\n    # writer.setFrom(reader, DataLayer_Geometry)\n\n    writer.write()\n\n    if not Status.isOk():\n        status = Status.get()\n        raise RuntimeError(f\"Error saving DNA: {status.message}\")\n```\n\n----------------------------------------\n\nTITLE: DescriptorReader Methods C++\nDESCRIPTION: The DescriptorReader contains read-only accessors for various metadata about the character and rig. These include the character's name, archetype, gender, age, translation unit, rotation unit, coordinate system, LOD count, DBMaxLOD, DBComplexity, and DBName.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\ngetName()\nCharacter name.\ngetArchetype()\nCharacter archetype.\ngetGender()\nCharacter gender.\ngetAge()\nCharacter age.\ngetTranslationUnit()\nThe translation unit that is used (cm or m).\ngetRotationUnit()\nThe rotation unit that is used (degrees or radians).\ngetCoordinateSystem()\nCoordinate system that is used (directions of x, y and z axes).\ngetLODCount()\nAvailable levels of detail (e.g. 6 which means the following levels are available: [0,1,2,3,4,5], where 0 is the LOD with the highest details, and 5 is the LOD with lowest details).\ngetDBMaxLOD()\nThe maximum level of detail stored in the DNA data for this character. The value is relative to LOD-0 from the database.\ngetDBComplexity()\nName of the input control interface used to drive this character rig. This parameter denotes the character's input control complexity.\ngetDBName()\nName of the database from which the character originates. All characters from the same database must have the same Definition, but may have different complexity or LOD.\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet defines a variable named `SOURCES` that lists the C++ source files to be compiled.  These source files will be part of the example executables. It uses the `set` command to assign the list of files to the variable.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/examples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES\n    CommandSequence.cpp\n    SingleCommand.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories\nDESCRIPTION: Sets the include directories for the DNAC library target.  It specifies both public and private include directories.  These directories are used by the compiler to find header files during compilation.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${DNAC}\n    PUBLIC\n        ${DNAC_PUBLIC_INCLUDE_DIRS}\n    PRIVATE\n        ${CMAKE_CURRENT_SOURCE_DIR}/src)\n```\n\n----------------------------------------\n\nTITLE: Creating Executables from Source Files in CMake\nDESCRIPTION: This `foreach` loop iterates through the source files, creating an executable for each. It converts the filename to lowercase, adds an executable with the given name, links the executable to the `DNAC` library, sets compiler properties for C++11 support, and places the executables in an 'examples' folder. Finally, it appends the target name to the `EXAMPLE_TARGETS` list.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/examples/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(example IN LISTS SOURCES)\n    get_filename_component(filename ${example} NAME_WE)\n    string(TOLOWER ${filename} example_target_name)\n    add_executable(${example_target_name} ${example})\n    target_link_libraries(${example_target_name} PRIVATE ${DNAC})\n    set_target_properties(${example_target_name} PROPERTIES\n                          CXX_STANDARD 11\n                          CXX_STANDARD_REQUIRED NO\n                          CXX_EXTENSIONS NO\n                          FOLDER examples)\n    list(APPEND EXAMPLE_TARGETS ${example_target_name})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding DNAC Library\nDESCRIPTION: Adds the DNAC library target. It uses the `add_library` command to create the library target with the specified name and type.  The alias allows referencing the library with a namespace.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${DNAC} ${DNAC_LIBRARY_TYPE})\nadd_library(DNACalib::dnacalib ALIAS ${DNAC})\n```\n\n----------------------------------------\n\nTITLE: Finding Python 3 Package using CMake\nDESCRIPTION: This snippet uses the `find_package` command to locate the Python 3 installation and its components, specifically Development and Interpreter. It utilizes extra arguments for finding a specific version if provided.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNA/python3/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Python3 ${find_python3_extra_args} COMPONENTS Development Interpreter)\n```\n\n----------------------------------------\n\nTITLE: Installing the Python Extension and Examples (CMake)\nDESCRIPTION: This snippet handles the installation of the generated Python extension and example scripts. It defines the destination directory, component name, and install rules for runtime, library, and archive targets.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNACalib/python3/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(component_name \"${PROJECT_NAME}-${py_version}\")\nget_property(wrapper_files TARGET py3dnacalib PROPERTY SWIG_SUPPORT_FILES)\ninstall(FILES ${wrapper_files} DESTINATION ${output_dir} COMPONENT ${component_name})\ninstall(TARGETS py3dnacalib\n    RUNTIME\n        DESTINATION ${output_dir}\n        COMPONENT ${component_name}\n    LIBRARY\n        DESTINATION ${output_dir}\n        COMPONENT ${component_name}\n        NAMELINK_COMPONENT ${component_name}\n    ARCHIVE\n        DESTINATION ${output_dir}\n        COMPONENT ${component_name})\ninstall(FILES ${CMAKE_CURRENT_LIST_DIR}/examples/clear_blend_shapes.py DESTINATION ${output_dir}/examples RENAME dnacalib_clear_blend_shapes.py COMPONENT ${component_name})\ninstall(FILES ${CMAKE_CURRENT_LIST_DIR}/examples/demo.py DESTINATION ${output_dir}/examples RENAME dnacalib_demo.py COMPONENT ${component_name})\ninstall(FILES ${CMAKE_CURRENT_LIST_DIR}/examples/remove_joint.py DESTINATION ${output_dir}/examples RENAME dnacalib_remove_joint.py COMPONENT ${component_name})\nset(CPACK_COMPONENTS_ALL \"${CPACK_COMPONENTS_ALL};${component_name}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating BinaryStreamWriter C++\nDESCRIPTION: Factory method for creating a BinaryStreamWriter instance. The user is responsible for releasing the returned pointer by calling destroy.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ncreate(stream, memRes = nullptr)\nParameters:\n    stream - Stream into which the data is going to be written.\n    memRes - Memory resource to be used for allocations. If a memory resource is not given, a default allocation mechanism will be used.\n```\n\n----------------------------------------\n\nTITLE: Setting Adaptable Headers\nDESCRIPTION: Sets up adaptable headers.  It iterates through the list of headers and creates generator expressions for build and install interfaces. This allows CMake to install the headers to an appropriate location.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset(ADAPTABLE_HEADERS)\nforeach(hdr IN LISTS HEADERS)\n    list(APPEND ADAPTABLE_HEADERS $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${hdr}> $<INSTALL_INTERFACE:${hdr}>)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Treat Warnings as Errors Option\nDESCRIPTION: Defines an option to treat warnings as errors. It also includes different warning flags depending on the compiler being used (MSVC or others) and appends /WX (for MSVC) or -Werror to CXX_FLAGS if TREAT_WARNINGS_AS_ERRORS is enabled.  The flags set various warning levels and also disable certain warnings.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\noption(TREAT_WARNINGS_AS_ERRORS \"Treat warnings as errors\" OFF)\nif(MSVC)\n    set(CXX_FLAGS /W4 /w14061 /w14062 /w14121 /w14242 /w14245\n                /w14254 /w14263 /w14265 /w14266 /w14287 /w14289 /w14296\n                /w14302 /w14311 /w14365 /w14388 /w14545 /w14546 /w14547\n                /w14549 /w14555 /w14619 /w14640 /w14826 /w14905 /w14906\n                /w14928 /w14987 /w14946)\n    if(TREAT_WARNINGS_AS_ERRORS)\n        list(APPEND CXX_FLAGS /WX)\n    endif()\n    set(CXX_EXTRA_FLAGS /permissive-)\nelse()\n    set(CXX_FLAGS -Wall -Wextra -Wpedantic)\n    if(TREAT_WARNINGS_AS_ERRORS)\n        list(APPEND CXX_FLAGS -Werror)\n    endif()\n    set(CXX_EXTRA_FLAGS -Wcast-align -Wconversion -Wduplicated-branches\n                -Wduplicated-cond -Wexit-time-destructors\n                -Wglobal-constructors -Wlogical-op -Wmissing-noreturn\n                -Wnon-virtual-dtor -Wnull-dereference -Wold-style-cast\n                -Woverloaded-virtual -Wshadow -Wsign-conversion -Wunreachable-code\n                -Wunused -Wuseless-cast -Wweak-vtables -Wno-unknown-pragmas)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Joint Hierarchy Example\nDESCRIPTION: This example demonstrates how to use the `setJointHierarchy` method to define the parent-child relationships between joints in a character rig. It shows how an array of indices can represent a hierarchical structure.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nJoint names: [A, B, C, D, E, F, G, H]\nHierarchy:   [0, 0, 0, 1, 1, 4, 2, 2]\nDescribes the following hierarchy:\nA\n├── B\n│   ├── D\n│   └── E\n│       └── F\n└── C\n    ├── G\n    └── H\n```\n\n----------------------------------------\n\nTITLE: Checking for Module Existence\nDESCRIPTION: Defines a function to check if a specified CMake module exists. This function attempts to include the specified module and sets a variable indicating whether the module was found. The `PARENT_SCOPE` option ensures that the variable is available in the calling scope.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\nfunction(module_exists module_name)\n    include(${module_name} OPTIONAL RESULT_VARIABLE found)\n    set(\"${module_name}_FOUND\" ${found} PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Compile Options\nDESCRIPTION: Sets the compile options for the DNAC library target. It uses the `target_compile_options` command to add the specified compile options.  The `PRIVATE` keyword means that these options are only used when compiling the DNAC library itself, and not when compiling other projects that depend on it. Includes and uses `SupportedCompileOptions.cmake` to check for compiler support.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(${DNAC} PRIVATE \"${CXX_FLAGS}\")\ninclude(SupportedCompileOptions)\ntarget_supported_compile_options(${DNAC} PRIVATE \"${CXX_EXTRA_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules\nDESCRIPTION: Includes CMake modules if they exist.  This example first checks for `CMakeModulesExtra` and then includes it, if it exists. It then appends additional directories to the module path. The `if(NOT CMakeModulesExtra_FOUND)` block ensures that CMakeModulesExtraLoader is only included if `CMakeModulesExtra` is not found.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Make custom cmake modules available\nmodule_exists(CMakeModulesExtra)\nif(NOT CMakeModulesExtra_FOUND)\n    include(CMakeModulesExtraLoader)\nendif()\n\ninclude(CMakeModulesExtra)\nlist(APPEND CMAKE_MODULE_PATH ${CMakeModulesExtra_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Configuring SWIG Interface (CMake)\nDESCRIPTION: This snippet configures the SWIG interface file (DNACalib.i) by setting properties such as the C++ language, module name, and SWIG flags. It also handles an optional debugging flag for typemaps.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNACalib/python3/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(py_version \"py${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}\")\nset(output_dir \"${py_version}\")\nset_property(SOURCE DNACalib.i PROPERTY CPLUSPLUS ON)\nset_property(SOURCE DNACalib.i PROPERTY SWIG_MODULE_NAME dnacalib)\nset_property(SOURCE DNACalib.i PROPERTY SWIG_FLAGS \"-doxygen\")\n\noption(TYPEMAP_DEBUG \"Debug deducing of typemaps\" OFF)\nif(TYPEMAP_DEBUG)\n    set_property(SOURCE DNACalib.i PROPERTY SWIG_FLAGS \"-debug-tmsearch\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copying Library to Examples Directory in CMake\nDESCRIPTION: This snippet optionally copies the `DNAC` library to the directory of the first example executable after the build process. It uses a custom command triggered after the first example's build to copy the library, ensuring it's available for running the example.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/examples/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(COPY_LIB_TO_EXAMPLES)\n    list(GET EXAMPLE_TARGETS 0 EXAMPLE_TARGET)\n    add_custom_command(TARGET ${EXAMPLE_TARGET} POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:${DNAC}> $<TARGET_FILE_DIR:${EXAMPLE_TARGET}>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions\nDESCRIPTION: Sets compile definitions for the DNAC library based on the library type. If the library type is `SHARED`, it defines the `DNAC_SHARED` and `DNAC_BUILD_SHARED` preprocessor definitions.  This allows conditional compilation based on whether the library is being built as a shared library.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif (DNAC_LIBRARY_TYPE STREQUAL SHARED)\n    target_compile_definitions(${DNAC} PUBLIC DNAC_SHARED PRIVATE DNAC_BUILD_SHARED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: Sets properties for the DNAC library target.  This configures the C++ standard, visibility, position independent code, source root, and version information. The `set_target_properties` command is used to set various properties, such as the C++ standard and visibility preset.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${DNAC} PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED NO\n    CXX_EXTENSIONS NO\n    CXX_VISIBILITY_PRESET hidden\n    POSITION_INDEPENDENT_CODE ${DNAC_BUILD_PIC}\n    SOURCE_ROOT \"${CMAKE_CURRENT_SOURCE_DIR}/src\"\n    SOVERSION ${PROJECT_VERSION_MAJOR}\n    VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options\nDESCRIPTION: Configures build options such as shared library creation. It defines an option to build shared libraries and sets the default library type. If `BUILD_SHARED_LIBS` is enabled, the `DNAC_DEFAULT_LIBRARY_TYPE` is set to `SHARED`.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Add target and build options\noption(BUILD_SHARED_LIBS \"Build shared libraries\" OFF)\n\nset(DNAC_DEFAULT_LIBRARY_TYPE STATIC)\n\nif(BUILD_SHARED_LIBS)\n    set(DNAC_DEFAULT_LIBRARY_TYPE SHARED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Public Include Directories\nDESCRIPTION: Sets the public include directories for the DNAC library.  It uses generator expressions to specify different include directories for build and install interfaces.  These directories are used by other projects that depend on the DNAC library.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(DNAC_PUBLIC_INCLUDE_DIRS\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n```\n\n----------------------------------------\n\nTITLE: Defining DNAC Library Type\nDESCRIPTION: Defines the library type for DNACalib, allowing the user to choose between static, shared, or module. It uses the `CACHE STRING` option to make the setting persistent across CMake runs. `set_property` restricts the possible string values for the cache entry.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(DNAC_LIBRARY_TYPE ${DNAC_DEFAULT_LIBRARY_TYPE} CACHE STRING \"Build DNACalib as a library of type\")\nset_property(CACHE DNAC_LIBRARY_TYPE PROPERTY STRINGS STATIC SHARED MODULE)\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Scope Variable in CMake\nDESCRIPTION: This snippet sets the `DNAC_EXAMPLES` variable in the parent scope to the value of `EXAMPLE_TARGETS`. This makes the list of example targets available to other CMake files that include this one.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/examples/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(DNAC_EXAMPLES ${EXAMPLE_TARGETS} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Generating Export Definitions Header\nDESCRIPTION: Generates an export definitions header if the `READ_ONLY_SOURCE_TREE` option is not enabled. It includes the Symbols module and uses the `generate_export_definitions` function to create the header file. The function takes parameters for the output file, export attribute name, and build/use shared names.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Generate export definitions header\nif (NOT READ_ONLY_SOURCE_TREE)\n    include(Symbols)\n    generate_export_definitions(\n        OUTPUT_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/include/dnacalib/Defs.h\"\n        EXPORT_ATTR_NAME DNACAPI\n        BUILD_SHARED_NAME DNAC_BUILD_SHARED\n        USE_SHARED_NAME DNAC_SHARED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Grouping Source Files\nDESCRIPTION: Groups the source files in the IDE. It also includes the headers and sources in the compilation process by attaching to the target. The use of ADAPTABLE_HEADERS makes the headers available.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${HEADERS} ${SOURCES})\ntarget_sources(${DNAC} PRIVATE ${SOURCES} ${OBJECT_SOURCES} PUBLIC ${ADAPTABLE_HEADERS})\ntarget_link_libraries(${DNAC} PUBLIC ${DNAC_PUBLIC_DEPENDENCIES} PRIVATE ${DNAC_PRIVATE_DEPENDENCIES})\n```\n\n----------------------------------------\n\nTITLE: Version Info Generation (Windows)\nDESCRIPTION: This snippet generates version information for the DNAC library on Windows if the library type is SHARED or MODULE. It includes the VersionInfo module and uses add_version_info to create a version information file for the DLL.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND (DNAC_LIBRARY_TYPE STREQUAL SHARED OR DNAC_LIBRARY_TYPE STREQUAL MODULE))\n    include(VersionInfo)\n    add_version_info(${DNAC}\n                     NAME ${PROJECT_NAME}\n                     FILENAME \"${DNAC}.dll\"\n                     MAJOR_VERSION ${PROJECT_VERSION_MAJOR}\n                     MINOR_VERSION ${PROJECT_VERSION_MINOR}\n                     PATCH_VERSION ${PROJECT_VERSION_PATCH}\n                     COMPANY_NAME \"Epic Games\"\n                     COPYRIGHT \"Copyright Epic Games, Inc. All Rights Reserved.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Tests for the Python Extension (CMake)\nDESCRIPTION: This snippet configures tests to verify the functionality of the installed Python extension. It sets up environment variables, executes example Python scripts, and checks for a specific output message to confirm successful execution.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNACalib/python3/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    set(extra_env \"PATH=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\")\nendif()\nset(DNACALIB_TEST_NAMES dnacalib_clear_blend_shapes\n                        dnacalib_demo\n                        dnacalib_lod_demo\n                        dnacalib_neutral_mesh_subtract\n                        dnacalib_remove_joint\n                        dnacalib_rename_joint_demo)\nforeach(test_name ${DNACALIB_TEST_NAMES})\n    add_test(NAME ${test_name}\n            COMMAND ${CMAKE_COMMAND} -E env ${extra_env} LD_LIBRARY_PATH=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR} PYTHONPATH=. ${Python3_EXECUTABLE} \"${CMAKE_CURRENT_LIST_DIR}/../../../examples/${test_name}.py\"\n            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/${output_dir})\n    set_property(TEST ${test_name} PROPERTY PASS_REGULAR_EXPRESSION \"Done\\.\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking the Python Extension (CMake)\nDESCRIPTION: This snippet creates the py3dnacalib shared library using swig_add_library, specifying the output directory and source files. It then links the library to other required libraries, including PyDNA, Spyus, DNACalib, and Python3.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNACalib/python3/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nswig_add_library(py3dnacalib\n    TYPE\n        SHARED\n    LANGUAGE\n        python\n    OUTPUT_DIR\n        ${CMAKE_BINARY_DIR}/${output_dir}\n    OUTFILE_DIR\n        ${CMAKE_BINARY_DIR}/python3\n    SOURCES\n        DNACalib.i)\nadd_library(PyDNACalib::py3dnacalib ALIAS py3dnacalib)\n\nset_target_properties(py3dnacalib PROPERTIES SWIG_USE_TARGET_INCLUDE_DIRECTORIES ON)\ntarget_link_libraries(py3dnacalib\n    PUBLIC\n        PyDNA::py3dna\n    PRIVATE\n        Spyus::spyus\n        DNACalib::dnacalib\n        Python3::Python)\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Tests with CMake\nDESCRIPTION: This code defines test cases for the DNA calibration module, including setting environment variables, specifying the Python executable, and defining a regular expression to check for successful test completion. It sets different environments for Windows and other platforms.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNA/python3/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    set(extra_env \"PATH=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\")\nendif()\nset(DNA_TEST_NAMES dna_binary_to_json_demo dna_demo)\nforeach(test_name ${DNA_TEST_NAMES})\n    add_test(NAME ${test_name}\n            COMMAND ${CMAKE_COMMAND} -E env ${extra_env} LD_LIBRARY_PATH=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR} PYTHONPATH=. ${Python3_EXECUTABLE} \"${CMAKE_CURRENT_LIST_DIR}/../../../examples/${test_name}.py\"\n            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/${output_dir})\n    set_property(TEST ${test_name} PROPERTY PASS_REGULAR_EXPRESSION \"Done\\.\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Installing Python 3 Module with CMake\nDESCRIPTION: This snippet defines the installation rules for the generated Python 3 module, including wrapper files, runtime components, libraries, and archives. It also installs an example Python script and sets the component name for CPack.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNA/python3/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(component_name \"${PROJECT_NAME}-${py_version}\")\nget_property(wrapper_files TARGET py3dna PROPERTY SWIG_SUPPORT_FILES)\ninstall(FILES ${wrapper_files} DESTINATION ${output_dir} COMPONENT ${component_name})\ninstall(TARGETS py3dna\n    RUNTIME\n        DESTINATION ${output_dir}\n        COMPONENT ${component_name}\n    LIBRARY\n        DESTINATION ${output_dir}\n        COMPONENT ${component_name}\n        NAMELINK_COMPONENT ${component_name}\n    ARCHIVE\n        DESTINATION ${output_dir}\n        COMPONENT ${component_name})\ninstall(FILES ${CMAKE_CURRENT_LIST_DIR}/examples/demo.py DESTINATION ${output_dir} RENAME dna_demo.py COMPONENT ${component_name})\n\nset(CPACK_COMPONENTS_ALL \"${CPACK_COMPONENTS_ALL};${component_name}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Install Library\nDESCRIPTION: This snippet includes the InstallLibrary module and uses the install_library function to handle the installation of the DNAC library.  It encapsulates the logic for copying and installing the library files.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(InstallLibrary)\ninstall_library(${DNAC})\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring the Spyus Library Target\nDESCRIPTION: This snippet adds the Spyus library as an interface library and sets up an alias for it. It includes GNUInstallDirs for standard directory variables and sets the public include directories for the library, both for build and install interfaces.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/SPyUS/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Add target and build options\nadd_library(${SPYUS} INTERFACE)\nadd_library(Spyus::spyus ALIAS ${SPYUS})\n\ninclude(GNUInstallDirs)\n\nset(SPYUS_PUBLIC_INCLUDE_DIRS\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n\ntarget_include_directories(${SPYUS} INTERFACE ${SPYUS_PUBLIC_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for the Python 3 Library in CMake\nDESCRIPTION: This code sets target properties for `py3dna`, enabling the use of target include directories, defining compile definitions, and linking against other libraries. Specifically, it compiles with JSON support and links to DNACalib, Spyus, and Python3 libraries.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNA/python3/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(py3dna PROPERTIES\n    SWIG_USE_TARGET_INCLUDE_DIRECTORIES ON\n    SWIG_COMPILE_DEFINITIONS DNA_BUILD_WITH_JSON_SUPPORT=ON)\ntarget_compile_definitions(py3dna PRIVATE DNA_BUILD_WITH_JSON_SUPPORT=ON)\ntarget_include_directories(py3dna PUBLIC ${CMAKE_CURRENT_LIST_DIR})\ntarget_link_libraries(py3dna\n    PUBLIC\n        DNACalib::dnacalib\n        Spyus::spyus\n    PRIVATE\n        Python3::Python)\n```\n\n----------------------------------------\n\nTITLE: Build Examples\nDESCRIPTION: This snippet conditionally builds examples if the DNAC_BUILD_EXAMPLES option is enabled. It sets a flag to copy the library to the examples directory if building shared libraries, and then adds the 'examples' subdirectory to the build.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\noption(DNAC_BUILD_EXAMPLES \"Build examples\" ON)\nif(DNAC_BUILD_EXAMPLES)\n    set(COPY_LIB_TO_EXAMPLES OFF)\n    if(BUILD_SHARED_LIBS)\n        set(COPY_LIB_TO_EXAMPLES ON)\n    endif()\n    add_subdirectory(examples)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Version Header\nDESCRIPTION: Generates a version header file if the `READ_ONLY_SOURCE_TREE` option is not enabled. It includes the VersionHeader module and uses the `generate_version_header` function to create the header file. The function takes parameters for the output file, prefix, and version components.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Generate version information header\nif (NOT READ_ONLY_SOURCE_TREE)\n    include(VersionHeader)\n    generate_version_header(\n        OUTPUT_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/include/dnacalib/version/Version.h\"\n        PREFIX \"DNAC\"\n        MAJOR ${PROJECT_VERSION_MAJOR}\n        MINOR ${PROJECT_VERSION_MINOR}\n        PATCH ${PROJECT_VERSION_PATCH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for SWIG and DNA Interface File in CMake\nDESCRIPTION: This code sets up properties for the SWIG interface file `DNA.i`.  It specifies C++ usage, the SWIG module name as `dna`, and adds a Doxygen flag. It also configures debug flags based on the `TYPEMAP_DEBUG` option.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNA/python3/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(py_version \"py${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}\")\nset(output_dir \"${py_version}\")\nset_property(SOURCE DNA.i PROPERTY CPLUSPLUS ON)\nset_property(SOURCE DNA.i PROPERTY SWIG_MODULE_NAME dna)\nset_property(SOURCE DNA.i PROPERTY SWIG_FLAGS \"-doxygen\")\n\noption(TYPEMAP_DEBUG \"Debug deducing of typemaps\" OFF)\nif(TYPEMAP_DEBUG)\n    set_property(SOURCE DNA.i PROPERTY SWIG_FLAGS \"-debug-tmsearch\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding SWIG Library for Python 3 in CMake\nDESCRIPTION: This snippet uses `swig_add_library` to create a shared library named `py3dna`. It specifies the language as Python, defines output directories, and sets the source file to `DNA.i`.  An alias is also created for easier referencing.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNA/python3/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nswig_add_library(py3dna\n    TYPE\n        SHARED\n    LANGUAGE\n        python\n    OUTPUT_DIR\n        ${CMAKE_BINARY_DIR}/${output_dir}\n    OUTFILE_DIR\n        ${CMAKE_BINARY_DIR}/python3\n    SOURCES\n        DNA.i)\nadd_library(PyDNA::py3dna ALIAS py3dna)\n```\n\n----------------------------------------\n\nTITLE: DNA Modification Command Execution\nDESCRIPTION: This code demonstrates the execution of a DNA modification command. Each command implements the `run(DNACalibDNAReader* output)` method, which modifies the DNA specified through the `output` argument. The configuration of the modification is done through the command's constructor or setter methods.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dnacalib_api.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass SomeCommand {\npublic:\n  void run(DNACalibDNAReader* output) {\n    // Modify DNA using the output object\n  }\n};\n\nSomeCommand command;\nDNACalibDNAReader* dna_data = GetDNAData(); //Assumed function to get the DNA data\ncommand.run(dna_data);\n```\n\n----------------------------------------\n\nTITLE: Setting up Source Files\nDESCRIPTION: Defines the source and header files to be included in the project. These variables are used later when defining the target and linking the source code with its dependencies.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Source code\nset(HEADERS\n    include/dnacalib/DNACalib.h\n    include/dnacalib/Command.h\n    include/dnacalib/Defs.h\n\n    include/dnacalib/commands/CalculateMeshLowerLODsCommand.h\n    include/dnacalib/commands/ClearBlendShapesCommand.h\n    include/dnacalib/commands/CommandSequence.h\n    include/dnacalib/commands/ConditionalCommand.h\n    include/dnacalib/commands/PruneBlendShapeTargetsCommand.h\n    include/dnacalib/commands/RemoveAnimatedMapCommand.h\n    include/dnacalib/commands/RemoveBlendShapeCommand.h\n    include/dnacalib/commands/RemoveJointAnimationCommand.h\n    include/dnacalib/commands/RemoveJointCommand.h\n    include/dnacalib/commands/RemoveMeshCommand.h\n    include/dnacalib/commands/RenameAnimatedMapCommand.h\n    include/dnacalib/commands/RenameBlendShapeCommand.h\n    include/dnacalib/commands/RenameJointCommand.h\n    include/dnacalib/commands/RenameMeshCommand.h\n    include/dnacalib/commands/RotateCommand.h\n    include/dnacalib/commands/ScaleCommand.h\n    include/dnacalib/commands/SetBlendShapeTargetDeltasCommand.h\n    include/dnacalib/commands/SetLODsCommand.h\n    include/dnacalib/commands/SetNeutralJointRotationsCommand.h\n    include/dnacalib/commands/SetNeutralJointTranslationsCommand.h\n    include/dnacalib/commands/SetSkinWeightsCommand.h\n    include/dnacalib/commands/SetVertexPositionsCommand.h\n    include/dnacalib/commands/TranslateCommand.h\n    include/dnacalib/commands/VectorOperations.h\n\n    include/dnacalib/dna/DNACalibDNAReader.h\n\n    include/dnacalib/types/Aliases.h\n\n    include/dnacalib/version/Version.h\n    include/dnacalib/version/VersionInfo.h)\nset(SOURCES\n    src/dnacalib/Command.cpp\n    src/dnacalib/CommandImplBase.h\n    src/dnacalib/TypeDefs.h\n\n    src/dnacalib/commands/CalculateMeshLowerLODsCommand.cpp\n    src/dnacalib/commands/CalculateMeshLowerLODsCommandImpl.cpp\n    src/dnacalib/commands/CalculateMeshLowerLODsCommandImpl.h\n    src/dnacalib/commands/ClearBlendShapesCommand.cpp\n    src/dnacalib/commands/CommandSequence.cpp\n    src/dnacalib/commands/PruneBlendShapeTargetsCommand.cpp\n    src/dnacalib/commands/RemoveAnimatedMapCommand.cpp\n    src/dnacalib/commands/RemoveBlendShapeCommand.cpp\n    src/dnacalib/commands/RemoveJointAnimationCommand.cpp\n    src/dnacalib/commands/RemoveJointCommand.cpp\n    src/dnacalib/commands/RemoveMeshCommand.cpp\n    src/dnacalib/commands/RenameAnimatedMapCommand.cpp\n    src/dnacalib/commands/RenameBlendShapeCommand.cpp\n    src/dnacalib/commands/RenameJointCommand.cpp\n    src/dnacalib/commands/RenameMeshCommand.cpp\n    src/dnacalib/commands/RenameResourceCommand.h\n    src/dnacalib/commands/RotateCommand.cpp\n    src/dnacalib/commands/ScaleCommand.cpp\n    src/dnacalib/commands/SetBlendShapeTargetDeltasCommand.cpp\n    src/dnacalib/commands/SetLODsCommand.cpp\n    src/dnacalib/commands/SetNeutralJointRotationsCommand.cpp\n    src/dnacalib/commands/SetNeutralJointTranslationsCommand.cpp\n    src/dnacalib/commands/SetSkinWeightsCommand.cpp\n    src/dnacalib/commands/SetVertexPositionsCommand.cpp\n    src/dnacalib/commands/TranslateCommand.cpp\n    src/dnacalib/commands/SupportFactories.h\n\n    src/dnacalib/dna/DNACalibDNAReaderImpl.cpp\n    src/dnacalib/dna/DNACalibDNAReaderImpl.h\n    src/dnacalib/dna/BaseImpl.h\n    src/dnacalib/dna/DenormalizedData.h\n    src/dnacalib/dna/DNA.h\n    src/dnacalib/dna/LODConstraint.cpp\n    src/dnacalib/dna/LODConstraint.h\n    src/dnacalib/dna/LODMapping.cpp\n    src/dnacalib/dna/LODMapping.h\n    src/dnacalib/dna/ReaderImpl.h\n    src/dnacalib/dna/SurjectiveMapping.h\n    src/dnacalib/dna/WriterImpl.h\n    src/dnacalib/dna/filters/AnimatedMapFilter.cpp\n    src/dnacalib/dna/filters/AnimatedMapFilter.h\n    src/dnacalib/dna/filters/BlendShapeFilter.cpp\n    src/dnacalib/dna/filters/BlendShapeFilter.h\n    src/dnacalib/dna/filters/JointFilter.cpp\n    src/dnacalib/dna/filters/JointFilter.h\n    src/dnacalib/dna/filters/MeshFilter.cpp\n    src/dnacalib/dna/filters/MeshFilter.h\n    src/dnacalib/dna/filters/Remap.h\n\n    src/dnacalib/types/BoundingBox.h\n    src/dnacalib/types/Triangle.cpp\n    src/dnacalib/types/Triangle.h\n    src/dnacalib/types/UVBarycentricMapping.cpp\n    src/dnacalib/types/UVBarycentricMapping.h\n\n    src/dnacalib/utils/Algorithm.h\n    src/dnacalib/utils/Extd.h\n    src/dnacalib/utils/ScopedEnumEx.h\n\n    src/dnacalib/version/VersionInfo.cpp)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet initializes a CMake project named PyDNACalib, sets the minimum required CMake version to 3.14, and enforces the C++11 standard. It also uses SWIG (version 4.0.0 or greater) for language bindings, and includes the 'python3' subdirectory as part of the build process.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNACalib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(PyDNACalib)\n\nset(CMAKE_CXX_STANDARD 11)\n\nfind_package(SWIG 4.0.0)\ninclude(UseSWIG)\n\nadd_subdirectory(python3)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required version, project name, and adds a custom module path. It enables testing and adds subdirectories for different components.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(dnacalib)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/CMakeModulesExtra\")\n\nenable_testing()\n\nadd_subdirectory(DNACalib)\nadd_subdirectory(SPyUS)\nadd_subdirectory(PyDNA)\nadd_subdirectory(PyDNACalib)\n```\n\n----------------------------------------\n\nTITLE: Including DNAC Dependencies\nDESCRIPTION: Includes the DNACDependencies module, which manages the project's dependencies.  This module is responsible for finding and configuring the necessary dependencies for the project to build successfully.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Dependencies\ninclude(DNACDependencies)\n```\n\n----------------------------------------\n\nTITLE: CMake Start Build Process\nDESCRIPTION: Starts the build process using the generated build scripts.  This command compiles the source code and creates the executable or library.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/README.md#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build .\n```\n\n----------------------------------------\n\nTITLE: Installing the Spyus Library\nDESCRIPTION: This snippet includes the InstallLibrary module and calls the install_library function to handle the installation of the Spyus library, exporting and installing the target.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/SPyUS/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Export and install target\ninclude(InstallLibrary)\ninstall_library(${SPYUS})\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, defines project properties, disables in-source builds, enables compilation database generation, and sets the project name, version, and supported languages.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/SPyUS/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\n################################################\n# Project setup\nset(SPYUS spyus)\nset(SPYUS_VERSION 1.2.1)\n\n# Prevent in-source-tree builds\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\n# Create compilation database\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE BOOL \"\" FORCE)\n\nproject(Spyus VERSION ${SPYUS_VERSION} LANGUAGES CXX)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nset(CMAKE_MODULES_ROOT_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_MODULES_ROOT_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Python Version and Finding Package (CMake)\nDESCRIPTION: This snippet sets the Python version to be used for the extension and finds the Python3 package with required components. It allows specifying an exact Python version and stores it in a variable for later use.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNACalib/python3/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PYTHON3_EXACT_VERSION \"\" CACHE STRING \"Specify exact python3 version against which the extension should be built\")\nif(PYTHON3_EXACT_VERSION)\n    set(find_python3_extra_args ${PYTHON3_EXACT_VERSION} EXACT)\nendif()\nfind_package(Python3 ${find_python3_extra_args} COMPONENTS Development Interpreter)\n```\n\n----------------------------------------\n\nTITLE: CMake Change Directory to Build\nDESCRIPTION: Changes the current directory to the 'build' directory. Subsequent CMake commands will be executed from this directory.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/README.md#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncd build\n```\n\n----------------------------------------\n\nTITLE: Setting Joint Group LODs\nDESCRIPTION: This function sets the number of rows per each level of detail (LOD) for a specified joint group. The position of each element in the array represents the LOD level, and the value represents the number of rows within the joint group belonging to that level. The jointGroupIndex parameter identifies the target joint group, lods is an array of LOD row counts, and count is the number of elements in the lods array.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[12, 9, 3]\n │   │  └── LOD-2 contains first 3 rows\n │   └── LOD-1 contains first 9 rows\n └── LOD-0 contains first 12 rows\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Path\nDESCRIPTION: Configures the CMake module path to include custom modules. This ensures that CMake can find the custom modules defined within the project. It uses list(APPEND) to add the custom module directory to the CMAKE_MODULE_PATH.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_MODULES_ROOT_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_MODULES_ROOT_DIR})\n```\n\n----------------------------------------\n\nTITLE: CMake Generate Build Scripts\nDESCRIPTION: Uses CMake to generate the build scripts required for building the DNACalib project.  The '..' argument specifies that the CMakeLists.txt file is located in the parent directory.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/README.md#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncmake ..\n```\n\n----------------------------------------\n\nTITLE: Finding and Including CMake Modules\nDESCRIPTION: This snippet defines a function to check for the existence of a CMake module and includes it if found. It also includes the CMakeModulesExtra module and appends its directories to the CMAKE_MODULE_PATH.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/SPyUS/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\nfunction(module_exists module_name)\n    include(${module_name} OPTIONAL RESULT_VARIABLE found)\n    set(\"${module_name}_FOUND\" ${found} PARENT_SCOPE)\nendfunction()\n\n# Make custom cmake modules available\nmodule_exists(CMakeModulesExtra)\nif(NOT CMakeModulesExtra_FOUND)\n    include(CMakeModulesExtraLoader)\nendif()\n\ninclude(CMakeModulesExtra)\nlist(APPEND CMAKE_MODULE_PATH ${CMakeModulesExtra_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Destroying BinaryStreamWriter C++\nDESCRIPTION: Method for freeing a BinaryStreamWriter instance. This is important for memory management to prevent memory leaks.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ndestroy(BinaryStreamWriter* instance)\nParameters:\n    instance - Instance of BinaryStreamWriter to be freed.\n```\n\n----------------------------------------\n\nTITLE: Setting Position Independent Code Option\nDESCRIPTION: Defines an option to build with position-independent code (PIC).  This option is often required when building shared libraries, especially for use with Python wrappers.  The `option` command allows users to control whether PIC is enabled or disabled.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Python wrapper builds a shared object (e.g. .pyd, .so), so DNACalib library has to be built with -fPIC flag.\noption(DNAC_BUILD_PIC \"Build with position independent code\" ON)\n```\n\n----------------------------------------\n\nTITLE: Creating JSONStreamReader C++\nDESCRIPTION: Factory method for creating a JSONStreamReader instance. The user is responsible for releasing the returned pointer by calling destroy.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ncreate(stream, memRes = nullptr)\nParameters:\n    stream - Source stream from which data is going to be read.\n    memRes - Memory resource to be used for allocations. If a memory resource is not given, a default allocation mechanism will be used.\n```\n\n----------------------------------------\n\nTITLE: Destroying JSONStreamReader C++\nDESCRIPTION: Method for freeing a JSONStreamReader instance. It is essential to release the memory allocated for the reader.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ndestroy(instance)\nParameters:\n    instance - Instance of JSONStreamReader to be freed.\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Source Tree Option\nDESCRIPTION: Defines an option to prevent autogeneration of files in the source tree.  This prevents the CMake build process from modifying files within the source directory. The `option` command allows users to enable or disable this behavior.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\noption(READ_ONLY_SOURCE_TREE \"Prevent autogeneration of files in source tree\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Creating JSONStreamWriter C++\nDESCRIPTION: Factory method for creating a JSONStreamWriter instance. The user is responsible for releasing the returned pointer by calling destroy.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ncreate(stream, indentWidth = 4u, memRes = nullptr)\nParameters:\n    stream - Stream into which the data is going to be written.\n    indentWidth - Number of spaces to use for indentation.\n    memRes - Memory resource to be used for allocations. If a memory resource is not given, a default allocation mechanism will be used.\n```\n\n----------------------------------------\n\nTITLE: Defining Project Properties\nDESCRIPTION: Sets up the project name, version, and other important properties.  It also disables in-source builds and enables compilation database generation. The project function defines the project's name and version, while set commands define variables such as DNAC and DNAC_VERSION.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Project setup\nset(DNAC dnacalib)\nset(DNAC_VERSION 6.8.0)\n# Prevent in-source-tree builds\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\n# Create compilation database\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE BOOL \"\" FORCE)\n\nproject(DNACalib VERSION ${DNAC_VERSION} LANGUAGES CXX)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n```\n\n----------------------------------------\n\nTITLE: Destroying JSONStreamWriter C++\nDESCRIPTION: Method for freeing a JSONStreamWriter instance. Releasing the memory associated with the writer is crucial.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\ndestroy(instance)\nParameters:\n    instance - Instance of JSONStreamWriter to be freed.\n```\n\n----------------------------------------\n\nTITLE: CMake Build Directory Creation\nDESCRIPTION: Creates a 'build' directory within the project root. This directory will hold the generated build scripts and build output.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/README.md#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmkdir build\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines a list of header files and assigns them to a source group within the project, organizing the file structure in the IDE.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/SPyUS/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Source code\nset(HEADERS\n    include/spyus/ArrayView.i\n    include/spyus/Caster.i\n    include/spyus/ExceptionHandling.i\n    include/spyus/TDM.i\n    include/spyus/Vector3.i)\n\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer with Reader Data C++\nDESCRIPTION: The `setFrom` method initializes a writer with data from a reader. This function copies data from the reader to the writer, allowing for filtering by data layers. This inherited from the `Writer` class.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nsetFrom(source, layer = DataLayer::All, memRes = nullptr)\nThis function copies all the data from the given Reader into the Writer instance, by calling each getter function of the Reader, and passing the return values to the matching setter functions in the Writer.\nParameters:\n    source - The source DNA Reader from which the data needs to be copied.\n    layer - Limit which layers should be taken over from the given source reader.\n    memRes - Optional memory resource to use for temporary allocations during copying.\n```\n\n----------------------------------------\n\nTITLE: Grouping Source Files in CMake\nDESCRIPTION: This snippet groups the source files defined in the `SOURCES` variable within the CMake project's source tree. The `source_group` command organizes the files in the IDE for better readability.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/examples/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Destroying BinaryStreamReader C++\nDESCRIPTION: Method for freeing a BinaryStreamReader instance. It is crucial to release the memory allocated for the reader to prevent memory leaks.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_api.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ndestroy(instance)\nParameters:\n   instance - Instance of BinaryStreamReader to be freed.\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Links for DNACalib on Linux (Shell)\nDESCRIPTION: This snippet shows how to create symbolic links for the DNACalib library and Maya plugins in a Linux environment. It requires root privileges to create the links in `/usr/lib`.  The user should replace `~/MetaHuman-DNA-Calibration` with the actual installation path.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/repository_organization.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo ln -s ~/MetaHuman-DNA-Calibration/lib/Maya2022/linux/_py3dna.so /usr/lib/_py3dna.so\n\nsudo ln -s ~/MetaHuman-DNA-Calibration/lib/Maya2022/linux/libdnacalib.so /usr/lib/libdnacalib.so\n\nsudo ln -s ~/MetaHuman-DNA-Calibration/lib/Maya2022/linux/libdnacalib.so.6 /usr/lib/libdnacalib.so.6\n\nsudo ln -s ~/MetaHuman-DNA-Calibration/lib/Maya2022/linux/libembeddedRL4.so /usr/lib/embeddedRL4.mll\n\nsudo ln -s ~/MetaHuman-DNA-Calibration/lib/Maya2022/linux/MayaUERBFPlugin.mll /usr/lib/MayaUERBFPlugin.mll\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project.  This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file. This is a standard practice for ensuring portability and compatibility of CMake projects.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n```\n\n----------------------------------------\n\nTITLE: CMake Package Configuration\nDESCRIPTION: This snippet configures the packaging process using CPack. It sets the generator to ZIP, enables component-based installation, disables the top-level directory in the archive, and defines the naming scheme for the package file.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n################################################\n# Package build artifacts\nset(CPACK_GENERATOR \"ZIP\")\nset(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\nset(CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY OFF)\nset(CPACK_COMPONENTS_GROUPING ALL_COMPONENTS_IN_ONE)\nstring(CONCAT CPACK_PACKAGE_FILE_NAME \"${CMAKE_PROJECT_NAME}\"\n                                      \"-${CMAKE_PROJECT_VERSION}\"\n                                      \"-${CMAKE_SYSTEM_NAME}\"\n                                      \"-${CMAKE_SYSTEM_PROCESSOR}\"\n                                      \"-${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}\"\n                                      \"-${CMAKE_BUILD_TYPE}\"\n                                      \"-${PYTHON3_EXACT_VERSION}\"\n                                      \"-SHARED\")\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets up the CMake project for PyDNA. It specifies the minimum required CMake version, the C++ standard to use, and includes SWIG for language bindings. It also adds the python3 subdirectory to the project.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNA/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nproject(PyDNA)\n\nset(CMAKE_CXX_STANDARD 11)\n\nfind_package(SWIG 4.0.0)\ninclude(UseSWIG)\n\nadd_subdirectory(python3)\n```\n\n----------------------------------------\n\nTITLE: CMake Build Instructions\nDESCRIPTION: This snippet provides instructions on how to use CMake to generate build scripts for building the DNACalib library. The commands should be executed from the MetaHuman-DNA-Calibration/dnacalib directory. It involves creating a build directory, navigating into it, and then running cmake to generate the necessary build files, followed by using cmake to build the project.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dnacalib.md#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmkdir build\ncd build\ncmake ..\n```\n\n----------------------------------------\n\nTITLE: CMake Build Execution\nDESCRIPTION: This command starts the build process after the CMake build scripts have been generated.  It relies on the prior execution of the 'cmake ..' command in the build directory to properly generate the build environment.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dnacalib.md#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build\n```\n\n----------------------------------------\n\nTITLE: Setting Blend Shape Vertex Indices Python\nDESCRIPTION: This snippet illustrates how to set new vertex indices for a specific blend shape target within a mesh. It requires `mesh_index`, `bs_target_index`, and `new_vertex_indices` as inputs.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# output_dna.setBlendShapeTargetVertexIndices(mesh_index, bs_target_index, new_vertex_indices)\n```\n\n----------------------------------------\n\nTITLE: Setting paths for MH4 rig\nDESCRIPTION: This code snippet sets the paths for the GUI scene and additional assemble script when using the MH4 rig definition.  It's used to update the paths in scripts when switching to the new rig version.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nGUI = f\"{DATA_DIR}/mh4/gui.ma\"\nADDITIONAL_ASSEMBLE_SCRIPT = f\"{DATA_DIR}/mh4/additional_assemble_script.py\"\n```\n\n----------------------------------------\n\nTITLE: Import RigConfig Class - Python\nDESCRIPTION: Imports the `RigConfig` class from the `dna_viewer` module. This class is used to create a configuration object that will be used in the mesh building process.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_api_build_rig.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dna_viewer import RigConfig\n```\n\n----------------------------------------\n\nTITLE: Defining DNA File Paths in Python\nDESCRIPTION: This snippet defines the paths to two DNA files, Ada.dna and Taro.dna, using an f-string. It assumes that ROOT_DIR is defined elsewhere, pointing to the root directory of the project or data files. These paths are used to load DNA data for mesh building.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/docs/dna_viewer_api_build_meshes.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDNA_PATH_ADA = f\"{ROOT_DIR}/data/dna_files/Ada.dna\"\nDNA_PATH_TARO = f\"{ROOT_DIR}/data/dna_files/Taro.dna\"\n```\n\n----------------------------------------\n\nTITLE: Assemble Face Rig with Textures in Maya\nDESCRIPTION: This example script, `dna_viewer_build_rig_with_textures.py`, is used to assemble a face rig in Maya, incorporating textures for enhanced visual fidelity. It automates the process of setting up a functional rig from DNA data, leveraging the DNAViewer API.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndna_viewer_build_rig_with_textures.py\n```\n\n----------------------------------------\n\nTITLE: Setting Python Version Variable in CMake\nDESCRIPTION: This snippet sets a variable for specifying the exact Python 3 version against which the extension should be built. If the variable is set, it configures extra arguments for the `find_package` command.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/PyDNA/python3/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PYTHON3_EXACT_VERSION \"\" CACHE STRING \"Specify exact python3 version against which the extension should be built\")\nif(PYTHON3_EXACT_VERSION)\n    set(find_python3_extra_args ${PYTHON3_EXACT_VERSION} EXACT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including GNUInstallDirs\nDESCRIPTION: Includes the GNUInstallDirs module, which defines standard installation directories. This module is used to set the installation directories for different types of files, such as include files and libraries.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/dnacalib/DNACalib/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: Initializing Maya in Python\nDESCRIPTION: This snippet initializes Maya's standalone environment when running a script using Maya's Python interpreter (mayapy). It's necessary for accessing Maya functionality outside of the Maya GUI.\nSOURCE: https://github.com/epicgames/metahuman-dna-calibration/blob/main/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport maya.standalone \nmaya.standalone.initialize()\n```"
  }
]