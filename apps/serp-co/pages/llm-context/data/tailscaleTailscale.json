[
  {
    "owner": "tailscale",
    "repo": "tailscale",
    "content": "TITLE: Visualizing ProxyGroup Egress Configuration in Kubernetes with Mermaid\nDESCRIPTION: This diagram illustrates the ProxyGroup custom resource for managing egress traffic in a Kubernetes cluster. It shows the relationships between Pods, Services, and external Tailscale devices, demonstrating how traffic is routed through the ProxyGroup for high availability and coalescing multiple ExternalName Services.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/operator-architecture.md#2025-04-17_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'theme':'neutral' } }%%\n\nflowchart LR\n    classDef tsnode color:#fff,fill:#000;\n    classDef pod fill:#fff;\n\n    subgraph Key\n        ts[Tailscale device]:::tsnode\n        pod((Pod)):::pod\n        blank[\" \"]-->|WireGuard traffic| blank2[\" \"]\n        blank3[\" \"]-->|Other network traffic| blank4[\" \"]\n    end\n\n    subgraph k8s[Kubernetes cluster]\n        subgraph tailscale-ns[namespace=tailscale]\n            operator((operator)):::tsnode\n            pg-sts[StatefulSet]\n            pg-0((\"pg-0 (src)\")):::tsnode\n            pg-1((\"pg-1 (src)\")):::tsnode\n            db-cluster-ip[db ClusterIP Service]\n            api-cluster-ip[api ClusterIP Service]\n            egress-cm[\"egress ConfigMap\"]\n        end\n\n        subgraph cluster-scope[\"Cluster scoped resources\"]\n            pg[\"ProxyGroup 'pg'\"]\n        end\n\n        subgraph defaultns[namespace=default]\n            db-svc[db ExternalName Service]\n            api-svc[api ExternalName Service]\n            pod1((pod1)) --> db-svc\n            pod2((pod2)) --> db-svc\n            pod1((pod1)) --> api-svc\n            pod2((pod2)) --> api-svc\n        end\n    end\n\n    db[\"db.tails-scales.ts.net (dst)\"]:::tsnode\n    api[\"api.tails-scales.ts.net (dst)\"]:::tsnode\n\n    db-svc -->|DNS points to| db-cluster-ip\n    api-svc -->|DNS points to| api-cluster-ip\n    db-cluster-ip -->|maps to ephemeral db ports| pg-0\n    db-cluster-ip -->|maps to ephemeral db ports| pg-1\n    api-cluster-ip -->|maps to ephemeral api ports| pg-0\n    api-cluster-ip -->|maps to ephemeral api ports| pg-1\n    pg-0 -->|forwards db port traffic| db\n    pg-0 -->|forwards api port traffic| api\n    pg-1 -->|forwards db port traffic| db\n    pg-1 -->|forwards api port traffic| api\n    operator -.->|creates & populates endpointslice| db-cluster-ip\n    operator -.->|creates & populates endpointslice| api-cluster-ip\n    operator -.->|stores port mapping| egress-cm\n    egress-cm -.->|mounted| pg-0\n    egress-cm -.->|mounted| pg-1\n    operator -.->|watches| pg\n    operator -.->|creates| pg-sts\n    pg-sts -.->|manages| pg-0\n    pg-sts -.->|manages| pg-1\n    operator -.->|watches| db-svc\n    operator -.->|watches| api-svc\n\n    linkStyle 0 stroke:red;\n    linkStyle 12 stroke:red;\n    linkStyle 13 stroke:red;\n    linkStyle 14 stroke:red;\n    linkStyle 15 stroke:red;\n\n    linkStyle 1 stroke:blue;\n    linkStyle 2 stroke:blue;\n    linkStyle 3 stroke:blue;\n    linkStyle 4 stroke:blue;\n    linkStyle 5 stroke:blue;\n    linkStyle 6 stroke:blue;\n    linkStyle 7 stroke:blue;\n    linkStyle 8 stroke:blue;\n    linkStyle 9 stroke:blue;\n    linkStyle 10 stroke:blue;\n    linkStyle 11 stroke:blue;\n```\n\n----------------------------------------\n\nTITLE: Visualizing ProxyGroup Ingress Configuration in Kubernetes with Mermaid\nDESCRIPTION: This diagram shows how a ProxyGroup can be used for highly available ingress in a Kubernetes cluster. It illustrates the process of certificate issuance, traffic routing, and the interaction between the Tailscale control plane and the Kubernetes components for managing ingress traffic.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/operator-architecture.md#2025-04-17_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'theme':'neutral' } }%%\nflowchart LR\n    classDef tsnode color:#fff,fill:#000;\n    classDef pod fill:#fff;\n\n    subgraph Key\n        ts[Tailscale device]:::tsnode\n        pod((Pod)):::pod\n        blank[\" \"]-->|WireGuard traffic| blank2[\" \"]\n        blank3[\" \"]-->|Other network traffic| blank4[\" \"]\n    end\n\n    subgraph k8s[Kubernetes cluster]\n        subgraph tailscale-ns[namespace=tailscale]\n            operator((operator)):::tsnode\n            ingress-sts[\"StatefulSet\"]\n            serve-cm[serve config ConfigMap]\n            ingress-0((\"pg-0 (dst)\")):::tsnode\n            ingress-1((\"pg-1 (dst)\")):::tsnode\n            tls-secret[myapp.tails.ts.net Secret]\n        end\n\n        subgraph defaultns[namespace=default]\n            ingress[myapp.tails.ts.net Ingress]\n            svc[\"myapp Service\"]\n            svc --> pod1((pod1))\n            svc --> pod2((pod2))\n        end\n\n        subgraph cluster[Cluster scoped resources]\n            ingress-class[Tailscale IngressClass]\n            pg[ProxyGroup 'pg']\n        end\n    end\n\n    control[\"Tailscale control plane\"]\n    ts-svc[\"myapp Tailscale Service\"]\n\n    client[\"client (src)\"]:::tsnode -->|dials https\\://myapp.tails.ts.net/api| ingress-1\n    ingress-0 -->|forwards traffic| svc\n    ingress-1 -->|forwards traffic| svc\n    control -.->|creates| ts-svc\n    operator -.->|creates myapp Tailscale Service| control\n    control -.->|netmap points myapp Tailscale Service to pg-1| client\n    operator -.->|creates| ingress-sts\n    ingress-sts -.->|manages| ingress-0\n    ingress-sts -.->|manages| ingress-1\n    ingress-0 -.->|issues myapp.tails.ts.net cert| le[Let's Encrypt]\n    ingress-0 -.->|stores cert| tls-secret\n    ingress-1 -.->|reads cert| tls-secret\n    operator -.->|watches| ingress\n    operator -.->|watches| pg\n    operator -.->|creates| serve-cm\n    serve-cm -.->|mounted| ingress-0\n    serve-cm -.->|mounted| ingress-1\n    ingress -.->|/api prefix| svc\n\n    linkStyle 0 stroke:red;\n    linkStyle 4 stroke:red;\n\n    linkStyle 1 stroke:blue;\n    linkStyle 2 stroke:blue;\n    linkStyle 3 stroke:blue;\n    linkStyle 5 stroke:blue;\n    linkStyle 6 stroke:blue;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Connector Configuration in Kubernetes with Mermaid\nDESCRIPTION: This diagram illustrates the Connector custom resource in a Kubernetes cluster, which can be configured as a subnet router, exit node, or app connector. It shows the relationships between the operator, Connector resource, and the deployed Tailscale pod, as well as the traffic flow for different connector types.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/operator-architecture.md#2025-04-17_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'theme':'neutral' } }%%\n\nflowchart TD\n    classDef tsnode color:#fff,fill:#000;\n    classDef pod fill:#fff;\n    classDef hidden display:none;\n\n    subgraph Key\n        ts[Tailscale device]:::tsnode\n        pod((Pod)):::pod\n        blank[\" \"]-->|WireGuard traffic| blank2[\" \"]\n        blank3[\" \"]-->|Other network traffic| blank4[\" \"]\n    end\n\n    subgraph grouping[\" \"]\n        subgraph k8s[Kubernetes cluster]\n            subgraph tailscale-ns[namespace=tailscale]\n                operator((operator)):::tsnode\n                cn-sts[StatefulSet]\n                cn-pod((\"tailscale (dst)\")):::tsnode\n                cfg-secret[\"config Secret\"]\n                state-secret[\"state Secret\"]\n            end\n\n            subgraph cluster-scope[\"Cluster scoped resources\"]\n                cn[\"Connector\"]\n            end\n\n            subgraph defaultns[\"namespace=default\"]\n                pod1\n            end\n        end\n\n        client[\"client (src)\"]:::tsnode\n        Internet\n    end\n\n    client --> cn-pod\n    cn-pod -->|app connector or exit node routes| Internet\n    cn-pod -->|subnet route| pod1\n    operator -.->|watches| cn\n    operator -.->|creates| cn-sts\n    cn-sts -.->|manages| cn-pod\n    operator -.->|creates| cfg-secret\n    cfg-secret -.->|mounted| cn-pod\n    cn-pod -.->|stores state| state-secret\n\n    class grouping hidden\n\n    linkStyle 0 stroke:red;\n    linkStyle 2 stroke:red;\n\n    linkStyle 1 stroke:blue;\n    linkStyle 3 stroke:blue;\n    linkStyle 4 stroke:blue;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Kubernetes Service or Pod IP over Tailscale\nDESCRIPTION: This Bash snippet demonstrates how to connect to a Kubernetes Service or Pod IP over Tailscale after setting up a subnet router.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Get the Service IP\nINTERNAL_IP=\"$(kubectl get svc <SVC_NAME> -o=jsonpath='{.spec.clusterIP}')\"\n# or, the Pod IP\n# INTERNAL_IP=\"$(kubectl get po <POD_NAME> -o=jsonpath='{.status.podIP}')\"\nINTERNAL_PORT=8080\ncurl http://$INTERNAL_IP:$INTERNAL_PORT\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tailscale Proxy for Kubernetes Service\nDESCRIPTION: These Bash snippets demonstrate how to set up a Tailscale proxy for a Kubernetes Service, either by creating a new deployment or using an existing service.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create deployment nginx --image nginx\nkubectl expose deployment nginx --port 80\nexport TS_DEST_IP=\"$(kubectl get svc nginx -o=jsonpath='{.spec.clusterIP}')\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport TS_DEST_IP=\"$(kubectl get svc <SVC_NAME> -o=jsonpath='{.spec.clusterIP}')\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Tailscale ACL Management\nDESCRIPTION: GitHub Actions workflow configuration that sets up automated ACL policy management for Tailscale. The workflow handles both push events (applying changes) and pull requests (testing changes). It requires Tailscale API key and tailnet name as secrets.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/gitops-pusher/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Tailscale ACL syncing\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  acls:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Go environment\n        uses: actions/setup-go@v3.2.0\n        \n      - name: Install gitops-pusher\n        run: go install tailscale.com/cmd/gitops-pusher@latest\n              \n      - name: Deploy ACL\n        if: github.event_name == 'push'\n        env:\n          TS_API_KEY: ${{ secrets.TS_API_KEY }}\n          TS_TAILNET: ${{ secrets.TS_TAILNET }}\n        run: |\n          ~/go/bin/gitops-pusher --policy-file ./policy.hujson apply\n\n      - name: ACL tests\n        if: github.event_name == 'pull_request'\n        env:\n          TS_API_KEY: ${{ secrets.TS_API_KEY }}\n          TS_TAILNET: ${{ secrets.TS_TAILNET }}\n        run: |\n          ~/go/bin/gitops-pusher --policy-file ./policy.hujson test\n```\n\n----------------------------------------\n\nTITLE: L7 Ingress Architecture Diagram\nDESCRIPTION: Mermaid flowchart showing the Tailscale L7 ingress implementation, which uses tailscaled's local API to configure HTTP-based traffic routing through an ingress proxy to internal services.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/operator-architecture.md#2025-04-17_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'theme':'neutral' } }%%\nflowchart TD\n    classDef tsnode color:#fff,fill:#000;\n    classDef pod fill:#fff;\n\n    subgraph Key\n        ts[Tailscale device]:::tsnode\n        pod((Pod)):::pod\n        blank[\" \"]-->|WireGuard traffic| blank2[\" \"]\n        blank3[\" \"]-->|Other network traffic| blank4[\" \"]\n    end\n\n    subgraph k8s[Kubernetes cluster]\n        subgraph tailscale-ns[namespace=tailscale]\n            operator((operator)):::tsnode\n            ingress-sts[\"StatefulSet\"]\n            ingress-pod((\"ingress proxy (dst)\")):::tsnode\n            config-secret[\"config Secret\"]\n            state-secret[\"state Secret\"]\n        end\n\n        subgraph cluster-scope[Cluster scoped resources]\n            ingress-class[Tailscale IngressClass]\n        end\n\n        subgraph defaultns[namespace=default]\n            ingress[tailscale Ingress]\n            svc[\"Service\"]\n            svc --> pod1((pod1))\n            svc --> pod2((pod2))\n        end\n    end\n\n    client[\"client (src)\"]:::tsnode --> ingress-pod\n    ingress-pod -->|forwards /api prefix traffic| svc\n    operator -.->|creates| ingress-sts\n    ingress-sts -.->|manages| ingress-pod\n    operator -.->|reads| ingress\n    operator -.->|creates| config-secret\n    config-secret -.->|mounted| ingress-pod\n    ingress-pod -.->|stores state| state-secret\n    ingress -.->|/api prefix| svc\n\n    linkStyle 0 stroke:red;\n    linkStyle 4 stroke:red;\n\n    linkStyle 1 stroke:blue;\n    linkStyle 2 stroke:blue;\n    linkStyle 3 stroke:blue;\n    linkStyle 5 stroke:blue;\n```\n\n----------------------------------------\n\nTITLE: Creating Tailscale Authentication Secret in Kubernetes\nDESCRIPTION: This YAML snippet creates a Kubernetes Secret to store the Tailscale authentication key, which automates the login process for Tailscale pods.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: tailscale-auth\nstringData:\n  TS_AUTHKEY: tskey-...\n```\n\n----------------------------------------\n\nTITLE: L3 Ingress Architecture Diagram\nDESCRIPTION: Mermaid flowchart illustrating how the Tailscale operator implements L3 ingress, showing how traffic flows from external clients through an ingress proxy to internal services using iptables/nftables for DNAT.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/operator-architecture.md#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'theme':'neutral' } }%%\nflowchart TD\n    classDef tsnode color:#fff,fill:#000;\n    classDef pod fill:#fff;\n\n    subgraph Key\n        ts[Tailscale device]:::tsnode\n        pod((Pod)):::pod\n        blank[\" \"]-->|WireGuard traffic| blank2[\" \"]\n        blank3[\" \"]-->|Other network traffic| blank4[\" \"]\n    end\n\n    subgraph k8s[Kubernetes cluster]\n        subgraph tailscale-ns[namespace=tailscale]\n            operator((operator)):::tsnode\n            ingress-sts[\"StatefulSet\"]\n            ingress((\"ingress proxy (dst)\")):::tsnode\n            config-secret[\"config Secret\"]\n            state-secret[\"state Secret\"]\n        end\n\n        subgraph defaultns[namespace=default]\n            svc[annotated Service]\n            svc --> pod1((pod1))\n            svc --> pod2((pod2))\n        end\n    end\n\n    client[\"client (src)\"]:::tsnode --> ingress\n    ingress -->|forwards traffic| svc\n    operator -.->|creates| ingress-sts\n    ingress-sts -.->|manages| ingress\n    operator -.->|reads| svc\n    operator -.->|creates| config-secret\n    config-secret -.->|mounted| ingress\n    ingress -.->|stores state| state-secret\n\n    linkStyle 0 stroke:red;\n    linkStyle 4 stroke:red;\n\n    linkStyle 1 stroke:blue;\n    linkStyle 2 stroke:blue;\n    linkStyle 3 stroke:blue;\n    linkStyle 5 stroke:blue;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nginx over Tailscale in Kubernetes\nDESCRIPTION: These Bash snippets demonstrate how to connect to the nginx service over Tailscale, with and without MagicDNS enabled.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://nginx\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://$(tailscale ip -4 nginx)\"\n```\n\n----------------------------------------\n\nTITLE: L3 Egress Architecture Diagram\nDESCRIPTION: Mermaid flowchart illustrating how the Tailscale operator implements L3 egress, showing traffic flow from internal pods through an egress proxy to external Tailscale devices using ExternalName services.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/operator-architecture.md#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'theme':'neutral' } }%%\n\nflowchart TD\n    classDef tsnode color:#fff,fill:#000;\n    classDef pod fill:#fff;\n\n    subgraph Key\n        ts[Tailscale device]:::tsnode\n        pod((Pod)):::pod\n        blank[\" \"]-->|WireGuard traffic| blank2[\" \"]\n        blank3[\" \"]-->|Other network traffic| blank4[\" \"]\n    end\n\n    subgraph k8s[Kubernetes cluster]\n        subgraph tailscale-ns[namespace=tailscale]\n            operator((operator)):::tsnode\n            egress((\"egress proxy (src)\")):::tsnode\n            egress-sts[\"StatefulSet\"]\n            headless-svc[headless Service]\n            cfg-secret[\"config Secret\"]\n            state-secret[\"state Secret\"]\n        end\n\n        subgraph defaultns[namespace=default]\n            svc[ExternalName Service]\n            pod1((pod1)) --> svc\n            pod2((pod2)) --> svc\n        end\n    end\n\n    node[\"db.tails-scales.ts.net (dst)\"]:::tsnode\n\n    svc -->|DNS points to| headless-svc\n    headless-svc -->|selects egress Pod| egress\n    egress -->|forwards traffic| node\n    operator -.->|creates| egress-sts\n    egress-sts -.->|manages| egress\n    operator -.->|creates| headless-svc\n    operator -.->|creates| cfg-secret\n    operator -.->|watches & updates| svc\n    cfg-secret -.->|mounted| egress\n    egress -.->|stores state| state-secret\n\n    linkStyle 0 stroke:red;\n    linkStyle 6 stroke:red;\n\n    linkStyle 1 stroke:blue;\n    linkStyle 2 stroke:blue;\n    linkStyle 3 stroke:blue;\n    linkStyle 4 stroke:blue;\n    linkStyle 5 stroke:blue;\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectorSpec in YAML\nDESCRIPTION: YAML definition for the ConnectorSpec, which describes a Tailscale node to be deployed in the cluster. It includes fields for tags, hostname, proxyClass, subnetRouter, appConnector, and exitNode.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  type: Tags\n  description: Tags that the Tailscale node will be tagged with.\n  validation:\n    pattern: ^tag:[a-zA-Z][a-zA-Z0-9-]*$\n    type: string\nhostname:\n  type: Hostname\n  description: Hostname is the tailnet hostname that should be assigned to the Connector node.\n  validation:\n    pattern: ^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$\n    type: string\nproxyClass:\n  type: string\n  description: ProxyClass is the name of the ProxyClass custom resource.\nsubnetRouter:\n  type: SubnetRouter\n  description: SubnetRouter defines subnet routes that the Connector device should expose to tailnet.\nappConnector:\n  type: AppConnector\n  description: AppConnector defines whether the Connector device should act as a Tailscale app connector.\nexitNode:\n  type: boolean\n  description: ExitNode defines whether the Connector device should act as a Tailscale exit node.\n```\n\n----------------------------------------\n\nTITLE: Defining AppConnector Resource in YAML\nDESCRIPTION: YAML definition for the AppConnector resource, which configures a Tailscale app connector node. It includes fields for routes and their validation requirements.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  type: Routes\n  description: Routes are optional preconfigured routes for the domains routed via the app connector.\n  validation:\n    format: cidr\n    minItems: 1\n    type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Authentication Location Block\nDESCRIPTION: This NGINX configuration snippet creates an authentication location block with the internal flag set. It proxies requests to a UNIX socket and sets various headers for authentication.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/nginx-auth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /auth {\n  internal;\n\n  proxy_pass http://unix:/run/tailscale.nginx-auth.sock;\n  proxy_pass_request_body off;\n\n  proxy_set_header Host $http_host;\n  proxy_set_header Remote-Addr $remote_addr;\n  proxy_set_header Remote-Port $remote_port;\n  proxy_set_header Original-URI $request_uri;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectorStatus in YAML\nDESCRIPTION: YAML definition for the ConnectorStatus, which defines the observed state of the Connector. It includes fields for conditions, subnetRoutes, isExitNode, isAppConnector, tailnetIPs, and hostname.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconditions:\n  type: array\n  items:\n    $ref: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.3/#condition-v1-meta'\n  description: List of status conditions to indicate the status of the Connector.\nsubnetRoutes:\n  type: string\n  description: SubnetRoutes are the routes currently exposed to tailnet via this Connector instance.\nisExitNode:\n  type: boolean\n  description: IsExitNode is set to true if the Connector acts as an exit node.\nisAppConnector:\n  type: boolean\n  description: IsAppConnector is set to true if the Connector acts as an app connector.\ntailnetIPs:\n  type: array\n  items:\n    type: string\n  description: TailnetIPs is the set of tailnet IP addresses assigned to the Connector node.\nhostname:\n  type: string\n  description: Hostname is the fully qualified domain name of the Connector node.\n```\n\n----------------------------------------\n\nTITLE: Installing DERP Server Binary with Go\nDESCRIPTION: This command installs the latest version of the DERP server binary using Go. It's recommended to update this binary regularly, in line with Tailscale node updates.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/derper/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install tailscale.com/cmd/derper@latest\n```\n\n----------------------------------------\n\nTITLE: Defining RecorderContainer Schema in Kubernetes YAML\nDESCRIPTION: This snippet defines the schema for a RecorderContainer, which is used to configure the container running Tailscale in a Recorder pod. It includes fields for environment variables, image configuration, resource requirements, and security context.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - name: string\n    value: string\nimage: string\nimagePullPolicy: string\nresources:\n  limits:\n    cpu: string\n    memory: string\n  requests:\n    cpu: string\n    memory: string\nsecurityContext:\n  runAsUser: integer\n  runAsGroup: integer\n  fsGroup: integer\n```\n\n----------------------------------------\n\nTITLE: Building Tailscale for Distribution\nDESCRIPTION: Commands to build Tailscale components for distribution using build_dist.sh script. This approach burns commit IDs and version info into the binaries for better tracking and bug reporting.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n./build_dist.sh tailscale.com/cmd/tailscale\n./build_dist.sh tailscale.com/cmd/tailscaled\n```\n\n----------------------------------------\n\nTITLE: Defining RecorderSpec Schema in Kubernetes YAML\nDESCRIPTION: This snippet outlines the schema for RecorderSpec, which is used to configure a Tailscale Recorder resource. It includes fields for StatefulSet configuration, tags, UI enablement, and storage options.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstatefulSet:\n  labels:\n    key: value\n  annotations:\n    key: value\n  pod:\n    # Pod configuration\ntags:\n  - tag:example\nenableUI: boolean\nstorage:\n  # Storage configuration\n```\n\n----------------------------------------\n\nTITLE: Running tsidp Docker Container in Bash\nDESCRIPTION: Docker command to run the tsidp container, exposing port 443, setting environment variables, and mounting a volume for persistent data.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tsidp/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name `tsidp` \\\n  -p 443:443 \\\n  -e TS_AUTHKEY=YOUR_TAILSCALE_AUTHKEY \\\n  -e TS_HOSTNAME=idp \\\n  -v tsidp-data:/var/lib/tsidp \\\n  tsidp:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Tailscale Pod in Kubernetes\nDESCRIPTION: This Bash snippet sets up RBAC permissions for the Tailscale pod to read and write the 'tailscale' secret in Kubernetes.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SA_NAME=tailscale\nexport TS_KUBE_SECRET=tailscale-auth\nmake rbac | kubectl apply -f-\n```\n\n----------------------------------------\n\nTITLE: API Server Proxy Architecture Diagram\nDESCRIPTION: Mermaid flowchart showing how the Tailscale operator proxies requests to the Kubernetes API server, including the flow of WireGuard traffic and potential impersonation headers.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/operator-architecture.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'theme':'neutral' } }%%\nflowchart LR\n    classDef tsnode color:#fff,fill:#000;\n    classDef pod fill:#fff;\n\n    subgraph Key\n        ts[Tailscale device]:::tsnode\n        pod((Pod)):::pod\n        blank[\" \"]-->|WireGuard traffic| blank2[\" \"]\n        blank3[\" \"]-->|Other network traffic| blank4[\" \"]\n    end\n\n    subgraph k8s[Kubernetes cluster]\n        subgraph tailscale-ns[namespace=tailscale]\n            operator((\"operator (dst)\")):::tsnode\n        end\n\n        subgraph controlplane[\"Control plane\"]\n            api[kube-apiserver]\n        end\n    end\n\n    client[\"client (src)\"]:::tsnode --> operator\n    operator -->|\"proxy (maybe with impersonation headers)\"| api\n\n    linkStyle 0 stroke:red;\n    linkStyle 2 stroke:red;\n\n    linkStyle 1 stroke:blue;\n    linkStyle 3 stroke:blue;\n```\n\n----------------------------------------\n\nTITLE: Deploying Tailscale Sidecar in Kubernetes\nDESCRIPTION: This Bash snippet creates and logs into a sample nginx pod with a Tailscale sidecar in Kubernetes.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake sidecar | kubectl apply -f-\n# If not using an auth key, authenticate by grabbing the Login URL here:\nkubectl logs nginx ts-sidecar\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tailscale Subnet Router for Kubernetes\nDESCRIPTION: These Bash snippets demonstrate how to set up a Tailscale subnet router for accessing the entire Kubernetes cluster network over Tailscale.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSERVICE_CIDR=10.20.0.0/16\nPOD_CIDR=10.42.0.0/15\nexport TS_ROUTES=$SERVICE_CIDR,$POD_CIDR\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake subnet-router | kubectl apply -f-\n# If not using an auth key, authenticate by grabbing the Login URL here:\nkubectl logs subnet-router\n```\n\n----------------------------------------\n\nTITLE: Deploying Userspace Tailscale Sidecar in Kubernetes\nDESCRIPTION: This Bash snippet creates and logs into a sample nginx pod with a Tailscale sidecar running in userspace mode in Kubernetes.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake userspace-sidecar | kubectl apply -f-\n# If not using an auth key, authenticate by grabbing the Login URL here:\nkubectl logs nginx ts-sidecar\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Format for API Server Proxy with Impersonation\nDESCRIPTION: Example of an HTTP request sent by the Tailscale API server proxy when running in 'auth' mode, showing how impersonation headers are added to the request before forwarding to the Kubernetes API server.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/operator-architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/v1/namespaces/default/pods HTTP/1.1\nHost: k8s-api.example.com\nAuthorization: Bearer <operator-service-account-token>\nImpersonate-Group: tailnet-readers\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Installing Tailscale Components with Go\nDESCRIPTION: Command to install the tailscale CLI tool and tailscaled daemon using Go's package manager. Requires the latest Go release (currently Go 1.23).\nSOURCE: https://github.com/tailscale/tailscale/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngo install tailscale.com/cmd/tailscale{,d}\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Location Block for Authentication\nDESCRIPTION: This NGINX configuration snippet adds authentication requests and sets various headers for the authenticated user's information. It should be added to the location / block.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/nginx-auth/README.md#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nauth_request /auth;\nauth_request_set $auth_user $upstream_http_tailscale_user;\nauth_request_set $auth_name $upstream_http_tailscale_name;\nauth_request_set $auth_login $upstream_http_tailscale_login;\nauth_request_set $auth_tailnet $upstream_http_tailscale_tailnet;\nauth_request_set $auth_profile_picture $upstream_http_tailscale_profile_picture;\n\nproxy_set_header X-Webauth-User \"$auth_user\";\nproxy_set_header X-Webauth-Name \"$auth_name\";\nproxy_set_header X-Webauth-Login \"$auth_login\";\nproxy_set_header X-Webauth-Tailnet \"$auth_tailnet\";\nproxy_set_header X-Webauth-Profile-Picture \"$auth_profile_picture\";\n```\n\n----------------------------------------\n\nTITLE: Example Git Commit Message Structure\nDESCRIPTION: Demonstrates the basic structure of a Tailscale commit message with a subject line, body, and issue reference.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/commit-messages.md#2025-04-17_snippet_0\n\nLANGUAGE: git\nCODE:\n```\nnet/http: handle foo when bar\n\n[longer description here in the body]\n\nFixes #nnnn\n```\n\n----------------------------------------\n\nTITLE: Deploying Tailscale Proxy Pod in Kubernetes\nDESCRIPTION: This Bash snippet deploys a Tailscale proxy pod in Kubernetes and provides instructions for authentication if not using an auth key.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake proxy | kubectl apply -f-\n# If not using an auth key, authenticate by grabbing the Login URL here:\nkubectl logs proxy\n```\n\n----------------------------------------\n\nTITLE: Example Issue Update Commit Message\nDESCRIPTION: Shows how to format a commit message that updates but doesn't completely fix an issue, including proper structure and issue reference.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/commit-messages.md#2025-04-17_snippet_1\n\nLANGUAGE: git\nCODE:\n```\nsome/dir: refactor func Foo\n\nThis will make the handling of <corner case>\nshorter and easier to test.\n\nUpdates #nnnn\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Resource in YAML\nDESCRIPTION: YAML definition for the Connector resource, which represents a Tailscale node deployed in the cluster. It includes fields for API version, kind, metadata, spec, and status.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tailscale.com/v1alpha1\nkind: Connector\nmetadata:\n  # Refer to Kubernetes API documentation for fields of `metadata`.\nspec:\n  # ConnectorSpec describes the desired Tailscale component.\nstatus:\n  # ConnectorStatus describes the status of the Connector.\n```\n\n----------------------------------------\n\nTITLE: Cross-Repository Issue Reference\nDESCRIPTION: Demonstrates how to reference issues from different repositories in commit messages using the GitHub org/repo syntax.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/commit-messages.md#2025-04-17_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ncipher/rot13: add new super secure cipher\n\nFixes tailscale/corp#1234\n```\n\n----------------------------------------\n\nTITLE: Building and Launching Tailscale Gokrazy in QEMU\nDESCRIPTION: Command to build and launch the Tailscale Gokrazy image in QEMU emulator\nSOURCE: https://github.com/tailscale/tailscale/blob/main/gokrazy/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make qemu\n```\n\n----------------------------------------\n\nTITLE: Authenticating with the Tailscale Logs API using curl\nDESCRIPTION: Example of how to authenticate with the Tailscale Logs Service API using curl with HTTP basic authentication. The API key is passed as the username with an empty password.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/logtail/api.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u <log_api_key>: https://log.tailscale.com/collections\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tailscale Recorder Node Architecture with Mermaid Diagram\nDESCRIPTION: This mermaid flowchart illustrates the architecture and communication flow of a tsrecorder deployment in a Kubernetes cluster. It shows how the Tailscale operator manages the recorder, how client connections are recorded, and how recordings are stored in S3-compatible storage.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/operator-architecture.md#2025-04-17_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'theme':'neutral' } }%%\n\nflowchart TD\n    classDef tsnode color:#fff,fill:#000;\n    classDef pod fill:#fff;\n    classDef hidden display:none;\n\n    subgraph Key\n        ts[Tailscale device]:::tsnode\n        pod((Pod)):::pod\n        blank[\" \"]-->|WireGuard traffic| blank2[\" \"]\n        blank3[\" \"]-->|Other network traffic| blank4[\" \"]\n    end\n\n    subgraph grouping[\" \"]\n        subgraph k8s[Kubernetes cluster]\n            api[\"kube-apiserver\"]\n\n            subgraph tailscale-ns[namespace=tailscale]\n                operator((\"operator (dst)\")):::tsnode\n                rec-sts[StatefulSet]\n                rec-0((\"tsrecorder\")):::tsnode\n                cfg-secret-0[\"config Secret\"]\n                state-secret-0[\"state Secret\"]\n            end\n\n            subgraph cluster-scope[\"Cluster scoped resources\"]\n                rec[\"Recorder\"]\n            end\n        end\n\n        client[\"client (src)\"]:::tsnode\n        kubectl-exec[\"kubectl exec (src)\"]:::tsnode\n        server[\"server (dst)\"]:::tsnode\n        s3[\"S3-compatible storage\"]\n    end\n\n    kubectl-exec -->|exec session| operator\n    operator -->|exec session recording| rec-0\n    operator -->|exec session| api\n    client -->|ssh session| server\n    server -->|ssh session recording| rec-0\n    rec-0 -->|session recordings| s3\n    operator -.->|watches| rec\n    operator -.->|creates| rec-sts\n    rec-sts -.->|manages| rec-0\n    operator -.->|creates| cfg-secret-0\n    cfg-secret-0 -.->|mounted| rec-0\n    rec-0 -.->|stores state| state-secret-0\n\n    class grouping hidden\n\n    linkStyle 0 stroke:red;\n    linkStyle 2 stroke:red;\n    linkStyle 3 stroke:red;\n    linkStyle 5 stroke:red;\n    linkStyle 6 stroke:red;\n\n    linkStyle 1 stroke:blue;\n    linkStyle 4 stroke:blue;\n    linkStyle 7 stroke:blue;\n```\n\n----------------------------------------\n\nTITLE: Building Static Assets for Tailscale Connect\nDESCRIPTION: Command to build the static assets necessary for serving the Tailscale Connect client. Output is placed in the dist/ directory by default.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tsconnect/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./tool/go run ./cmd/tsconnect build\n```\n\n----------------------------------------\n\nTITLE: ProxyClass Resource Type Definition\nDESCRIPTION: Defines the ProxyClass custom resource that specifies configuration parameters for proxy resources. Used to configure Tailscale Ingress, Service, and Connector resources through labels or direct references.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tailscale.com/v1alpha1\nkind: ProxyClass\nmetadata:\n  name: example\nspec:\n  # ProxyClass specification fields\nstatus:\n  # ProxyClass status fields\n```\n\n----------------------------------------\n\nTITLE: Building NPM Package for Tailscale Connect\nDESCRIPTION: Command to build the NPM package version of the client. Output is placed in the pkg/ directory for registry upload or direct installation.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tsconnect/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./tool/go run ./cmd/tsconnect build-pkg\n```\n\n----------------------------------------\n\nTITLE: Defining Route and Routes Schemas in Kubernetes YAML\nDESCRIPTION: This snippet defines the schemas for Route and Routes, which are used to specify network routes for AppConnectors and SubnetRouters. Routes are represented as CIDR notation strings.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nroute: 192.168.1.0/24\nroutes:\n  - 10.0.0.0/8\n  - 172.16.0.0/12\n  - 192.168.0.0/16\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom VM with Tailmac in Bash\nDESCRIPTION: Demonstrates creating a VM with custom parameters including image, MAC address, memory, and socket configurations.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntailmac create --id my_custom_vm_id --image \"/images/macos_ventura.ipsw\" --mac 52:cc:cc:cc:cc:07 --mem 8000000000 --sock \"/temp/custom.sock\" --port 52345\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration for Tailnet Restriction\nDESCRIPTION: This NGINX configuration snippet demonstrates how to restrict access to a specific tailnet by adding the Expected-Tailnet header to the auth request. This prevents users from other tailnets from accessing the service.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/nginx-auth/README.md#2025-04-17_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /auth {\n  # ...\n  proxy_set_header Expected-Tailnet \"tailnet012345.ts.net\";\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a VM with Tailmac in Bash\nDESCRIPTION: Shows the command to delete a VM using the tailmac utility.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntailmac delete --id my_stale_vm\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Tailscale Connect\nDESCRIPTION: Command to start the development server that serves the site at http://localhost:9090/. Changes to JavaScript, CSS and Go wasm packages can be picked up with browser reload.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tsconnect/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./tool/go run ./cmd/tsconnect dev\n```\n\n----------------------------------------\n\nTITLE: Refreshing Restore Image with Tailmac in Bash\nDESCRIPTION: Demonstrates how to refresh an existing restore image for VMs using tailmac.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntailmac refresh\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Unique Secret Names for Tailscale in Kubernetes\nDESCRIPTION: This YAML snippet shows how to dynamically generate unique Secret names for Tailscale state storage in a Kubernetes StatefulSet.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkind: StatefulSet\nmetadata:\n  name: subnetrouter\nspec:\n  replicas: 2\n  ...\n  template:\n    ...\n    spec:\n      ...\n       containers:\n      - name: tailscale\n        env:\n        - name: TS_KUBE_SECRET\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.name\n```\n\n----------------------------------------\n\nTITLE: Cloning a VM with Tailmac in Bash\nDESCRIPTION: Shows the command to clone an existing VM, including its MAC address and port configuration.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntailmac clone --id old_vm_id --target-id new_vm_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailscale State Storage in Kubernetes StatefulSet\nDESCRIPTION: This YAML snippet demonstrates how to configure Tailscale state storage using an emptyDir volume in a Kubernetes StatefulSet for multi-replica setups.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/docs/k8s/README.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nkind: StatefulSet\nmetadata:\n  name: subnetrouter\nspec:\n  replicas: 2\n  ...\n  template:\n    ...\n    spec:\n      ...\n      volumes:\n      - name: tsstate\n        emptyDir: {}\n      containers:\n      - name: tailscale\n        env:\n        - name: TS_STATE_DIR\n          value: /tsstate\n        - name: TS_KUBE_SECRET\n          value: \"\"\n        volumeMounts:\n        - name: tsstate\n          mountPath: /tsstate\n```\n\n----------------------------------------\n\nTITLE: Configuring an Existing VM with Tailmac in Bash\nDESCRIPTION: Demonstrates how to reconfigure an existing VM, including MAC address, port, and socket settings.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntailmac configure --id vm_id --mac 11:22:33:44:55:66 --port 12345  --ethermac 22:33:44:55:66:77 -sock \"/tmp/my.sock\"\n```\n\n----------------------------------------\n\nTITLE: Running Tailscale VM Tests with Nix\nDESCRIPTION: Command for executing VM-based integration tests using Nix to provide all required dependencies. This command runs the tests with a 30-minute timeout and disables S3 downloads.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/integration/vms/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell -p nixos-generators -p openssh -p go -p qemu -p cdrkit --run \"go test . --run-vm-tests --v --timeout 30m --no-s3\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available VMs with Tailmac in Bash\nDESCRIPTION: Shows the command to list all available VM images using tailmac.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntailmac ls\n```\n\n----------------------------------------\n\nTITLE: Building Tailmac Components in Bash\nDESCRIPTION: Demonstrates the command to build both the tailmac command-line utility and Host.app components of the VM management tool.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n% make all\n```\n\n----------------------------------------\n\nTITLE: Launching a VM with Tailmac in Bash\nDESCRIPTION: Demonstrates how to launch a specific VM using the tailmac utility.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntailmac run --id machine_1\n```\n\n----------------------------------------\n\nTITLE: Go HTTP Handler for Displaying Request Headers\nDESCRIPTION: This Go code snippet creates an HTTP handler that encodes and displays the request headers as JSON. It's useful for debugging and verifying the authentication headers set by NGINX.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/nginx-auth/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandlerFunc(func (w http.ResponseWriter, r *http.Request) {\n\te := json.NewEncoder(w)\n\te.SetIndent(\"\", \"  \")\n\te.Encode(r.Header)\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning Tailscale Repository in Bash\nDESCRIPTION: Commands to clone the Tailscale repository and change to its directory. This is a prerequisite for building the Docker image.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tsidp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the Tailscale repository\ngit clone https://github.com/tailscale/tailscale.git\ncd tailscale\n```\n\n----------------------------------------\n\nTITLE: Defining FuncUint64 Struct in Go\nDESCRIPTION: Implements the FuncUint64 type, a mutable uint64 variable that behaves like expvar.Int but wraps a function. It supports atomic operations for thread-safe access and modification.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/header.txt#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// FuncUint64 is a mutable uint64 that behaves like an expvar.Int,\n// but its value is derived from an underlying function.\ntype FuncUint64 func() uint64\n```\n\n----------------------------------------\n\nTITLE: Building tsidp Docker Image in Bash\nDESCRIPTION: Command to build the Docker image for tsidp using the Dockerfile in the cmd/tsidp directory.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tsidp/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Docker image\ndocker build -t tsidp:latest -f cmd/tsidp/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Running Tailscale VM Tests on Debian and Ubuntu\nDESCRIPTION: Command for limiting the integration tests to only run on Debian and Ubuntu distributions by using a regular expression pattern with the distro-regex flag.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/integration/vms/README.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ go test -run-vm-tests -distro-regex '(debian|ubuntu)'\n```\n\n----------------------------------------\n\nTITLE: Verifying tsidp Installation in Bash\nDESCRIPTION: Command to check the logs of the tsidp Docker container for verification of successful installation and running.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tsidp/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs tsidp\n```\n\n----------------------------------------\n\nTITLE: Creating a New VM with Tailmac in Bash\nDESCRIPTION: Shows how to create a new VM using the tailmac command-line utility with default settings.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntailmac create --id my_vm_id\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Tailscale Gokrazy Build\nDESCRIPTION: Command to install required dependencies (qemu and e2fsprogs) using Homebrew package manager\nSOURCE: https://github.com/tailscale/tailscale/blob/main/gokrazy/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install qemu e2fsprogs\n```\n\n----------------------------------------\n\nTITLE: Implementing String Method for FuncUint64 in Go\nDESCRIPTION: Defines the String method for FuncUint64 type which converts the current uint64 value to a string representation. This method is required for implementing the expvar.Var interface.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/header.txt#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// String returns the current value as a string.\nfunc (f FuncUint64) String() string {\n\treturn strconv.FormatUint(f(), 10)\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Serial Console Connection Setup\nDESCRIPTION: Commands to set up and connect to AWS EC2 instance serial console using SSH key authentication\nSOURCE: https://github.com/tailscale/tailscale/blob/main/gokrazy/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ aws ec2-instance-connect send-serial-console-ssh-public-key --instance-id i-0b4a0eabc43629f13 --serial-port 0 --ssh-public-key file:///your/home/.ssh/id_ed25519.pub --region us-west-2\n{\n    \"RequestId\": \"a93b0ea3-9ff9-45d5-b8ed-b1e70ccc0410\",\n    \"Success\": true\n}\n$ ssh i-0b4a0eabc43629f13.port0@serial-console.ec2-instance-connect.us-west-2.aws\n```\n\n----------------------------------------\n\nTITLE: Running Tailscale VM Tests on CentOS Only\nDESCRIPTION: Command for executing the integration tests specifically on CentOS distributions by using the distro-regex flag to filter test targets.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/integration/vms/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ go test -run-vm-tests -distro-regex centos\n```\n\n----------------------------------------\n\nTITLE: Converting and Updating Tsapp Image for UTM\nDESCRIPTION: Commands to convert the raw tsapp image to qcow2 format and update it in the UTM container directory. This process needs to be done when the VM is stopped to update the disk image.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/gokrazy/UTM.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqemu-img convert -f raw -O qcow2 tsapp.img tsapp.qcow2 && \\\n  mv tsapp.qcow2 $HOME/Library/Containers/com.utmapp.UTM/Data/Documents/Tsapp.utm/Data/tsapp.qcow2\n```\n\n----------------------------------------\n\nTITLE: Serving Static Assets for Tailscale Connect\nDESCRIPTION: Command to serve the built static assets. The interface and port can be controlled using the -addr flag.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tsconnect/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./tool/go run ./cmd/tsconnect serve\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DERP Client ClosePeer Method Reference in Markdown\nDESCRIPTION: This code snippet shows the reference to a DERP client method called ClosePeer, which is used by Tailscale's internal maintenance tool derpprune to force close TCP connections of specific clients and make them reconnect to their primary node.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/derp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(*derphttp.Client).ClosePeer\n```\n\n----------------------------------------\n\nTITLE: Running Two-sided Development Server for NPM Package\nDESCRIPTION: Command to start a development server for both NPM package and dependent code development. Serves module at http://localhost:9090/pkg/pkg.js and wasm at http://localhost:9090/pkg/main.wasm.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tsconnect/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./tool/go run ./cmd/tsconnect dev-pkg\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tailscale Log Reprocessing Example Path\nDESCRIPTION: A reference to a shell script example for log reprocessing in the Tailscale logs service. This path points to a demonstration script that showcases core features of the logs service API.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/logtail/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n./example/logreprocess/demo.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring RAM Limits for Tailscale VM Tests\nDESCRIPTION: Commands demonstrating how to adjust the RAM limit for integration tests. The first example sets a lower limit of 2GB, while the second sets a much higher limit of 64GB.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/integration/vms/README.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ go test --run-vm-tests --ram-limit 2048\n$ go test --run-vm-tests --ram-limit 65536\n```\n\n----------------------------------------\n\nTITLE: Package Installation Comment - Markdown\nDESCRIPTION: Documentation header and description of the systray package functionality and platform support\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/systray/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# systray\n\nThe systray command is a minimal Tailscale systray application for Linux.\nIt is designed to provide quick access to common operations like profile switching\nand exit node selection.\n\n## Supported platforms\n\nThe `fyne.io/systray` package we use supports Windows, macOS, Linux, and many BSDs,\nso the systray application will likely work for the most part on those platforms.\nNotifications currently only work on Linux, as that is the main target.\n```\n\n----------------------------------------\n\nTITLE: Gracefully Stopping a VM with Tailmac in Bash\nDESCRIPTION: Shows how to gracefully stop a running VM and save its state using tailmac.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntailmac stop --id machine_1\n```\n\n----------------------------------------\n\nTITLE: Implementing FuncUint64 Package in Go\nDESCRIPTION: Defines a package named expvar_func for implementing mutable integer variables with atomic operations. This package is similar to expvar.Int but provides more flexibility with function wrapping capability.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/header.txt#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright (c) Tailscale Inc & AUTHORS\n// SPDX-License-Identifier: BSD-3-Clause\n\npackage expvar_func\n```\n\n----------------------------------------\n\nTITLE: Halting a VM without Saving State with Tailmac in Bash\nDESCRIPTION: Demonstrates how to halt a running VM without saving its state using tailmac.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntailmac halt --id machine_1\n```\n\n----------------------------------------\n\nTITLE: S3 Storage Configuration Schema\nDESCRIPTION: Kubernetes resource definition for S3-compatible storage configuration. Specifies endpoint, bucket, and credential settings for managing recorded data.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nendpoint: string\nbucket: string\ncredentials:\n  secret:\n    name: string\n```\n\n----------------------------------------\n\nTITLE: Hostname Validation Pattern\nDESCRIPTION: Defines the validation pattern for Hostname fields used in ConnectorSpec. Requires lowercase alphanumeric characters with optional hyphens, length between 2-63 characters.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_5\n\nLANGUAGE: regex\nCODE:\n```\n^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$\n```\n\n----------------------------------------\n\nTITLE: StatefulSet Configuration Schema\nDESCRIPTION: Schema for StatefulSet resource configuration including labels, annotations, and pod settings for proxy deployment.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nlabels: Labels\nannotations:\n  key: string\npod: Pod\n```\n\n----------------------------------------\n\nTITLE: Label Value Validation Pattern\nDESCRIPTION: Specifies the validation pattern for Kubernetes label values. Allows alphanumeric characters with dots, dashes and underscores, maximum length of 63 characters.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_6\n\nLANGUAGE: regex\nCODE:\n```\n^(([a-zA-Z0-9][-._a-zA-Z0-9]*)?[a-zA-Z0-9])?$\n```\n\n----------------------------------------\n\nTITLE: SubnetRouter Configuration Schema\nDESCRIPTION: Definition for subnet routing configuration that exposes routes to the tailnet via Connector nodes.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nadvertiseRoutes:\n  - cidr_range_string\n```\n\n----------------------------------------\n\nTITLE: Attaching to UTM VM Serial Console\nDESCRIPTION: Series of commands to list running UTM VMs, obtain the serial connection details, and attach to the VM's serial console using screen.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/gokrazy/UTM.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n% /Applications/UTM.app/Contents/MacOS/utmctl list\nUUID                                 Status   Name\nC0DE927B-F426-4ABA-A6E7-E30AA429371F started  Tsapp\n\n% % /Applications/UTM.app/Contents/MacOS/utmctl attach C0DE927B-F426-4ABA-A6E7-E30AA429371F\nWARNING: attach command is not implemented yet!\nPTTY: /dev/ttys017\n\n% screen /dev/ttys017\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Package Import Dependencies\nDESCRIPTION: A listing of Kubernetes package dependencies showing where each package is imported from. The file shows the relationship between various k8s.io packages, particularly focused on API, extensions, and core functionality packages.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/k8s-operator/depaware.txt#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nk8s.io/api/extensions/v1beta1                                from k8s.io/client-go/applyconfigurations/extensions/v1beta1+\nk8s.io/api/flowcontrol/v1                                    from k8s.io/client-go/applyconfigurations/flowcontrol/v1+\nk8s.io/api/flowcontrol/v1beta1                               from k8s.io/client-go/applyconfigurations/flowcontrol/v1beta1+\n[...additional dependencies...]\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output of Request Headers\nDESCRIPTION: This JSON snippet shows an example of the output produced by the Go HTTP handler when displaying the request headers. It includes the authentication headers set by NGINX.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/nginx-auth/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Accept\": [\n    \"*/*\"\n  ],\n  \"Connection\": [\n    \"upgrade\"\n  ],\n  \"User-Agent\": [\n    \"curl/7.82.0\"\n  ],\n  \"X-Webauth-Login\": [\n    \"Xe\"\n  ],\n  \"X-Webauth-Name\": [\n    \"Xe Iaso\"\n  ],\n  \"X-Webauth-Profile-Picture\": [\n    \"https://avatars.githubusercontent.com/u/529003?v=4\"\n  ],\n  \"X-Webauth-Tailnet\": [\n    \"cetacean.org.github\"\n  ],\n  \"X-Webauth-User\": [\n    \"Xe@github\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Client-Go Import Dependencies\nDESCRIPTION: Comprehensive listing of k8s.io/client-go package imports showing the relationships between different Kubernetes API packages and their sources. Includes imports for informers, typed clients, and core functionality across multiple API versions.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/k8s-operator/depaware.txt#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nk8s.io/client-go/informers/core/v1                           from k8s.io/client-go/informers/core\nk8s.io/client-go/informers/discovery                         from k8s.io/client-go/informers\nk8s.io/client-go/informers/discovery/v1                      from k8s.io/client-go/informers/discovery\n// ... additional imports omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: TailscaleConfig Schema\nDESCRIPTION: Configuration schema for Tailscale proxy settings including route acceptance options.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nacceptRoutes: boolean\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies List\nDESCRIPTION: A listing of Tailscale package dependencies showing package paths and their importing packages. Special markers indicate implementation status: 💣 (potentially unstable/dangerous), L (likely Linux-specific), W (warning).\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/k8s-operator/depaware.txt#2025-04-17_snippet_3\n\nLANGUAGE: plain text\nCODE:\n```\ntailscale.com/control/controlhttp/controlhttpcommon          from tailscale.com/control/controlhttp\ntailscale.com/control/controlknobs                           from tailscale.com/control/controlclient+\ntailscale.com/derp                                           from tailscale.com/derp/derphttp+\n[...additional lines omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Displaying Tailmac Help in Bash\nDESCRIPTION: Shows how to display the help information for the tailmac command-line utility, which provides options for managing macOS VMs.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tstest/tailmac/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntailmac -h\n```\n\n----------------------------------------\n\nTITLE: Analyzing Go Package Imports for Tailscale Project\nDESCRIPTION: This snippet shows a comprehensive list of Go package imports used in the Tailscale project. It includes standard library packages and custom packages, along with their sources or related packages.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/tailscaled/depaware.txt#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nsort                                                         from compress/flate+\nstrconv                                                      from archive/tar+\nstrings                                                      from archive/tar+\nsync                                                         from archive/tar+\nsync/atomic                                                  from context+\nsyscall                                                      from archive/tar+\ntext/tabwriter                                               from runtime/pprof\ntext/template                                                from html/template\ntext/template/parse                                          from html/template+\ntime                                                         from archive/tar+\nunicode                                                      from bytes+\nunicode/utf16                                                from crypto/x509+\nunicode/utf8                                                 from bufio+\nunique                                                       from net/netip\nunsafe                                                       from bytes+\nweak                                                         from unique\n```\n\n----------------------------------------\n\nTITLE: ServiceMonitor Configuration Schema\nDESCRIPTION: Definition for Prometheus ServiceMonitor configuration including enable flag and label settings.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/k8s-operator/api.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nenable: boolean\nlabels: Labels\n```\n\n----------------------------------------\n\nTITLE: Go Package Import Dependencies\nDESCRIPTION: List of Go package dependencies showing import paths and their relationships. The format shows the package path followed by what imports it. Platform-specific packages are marked with W (Windows), L (Linux), and D (Darwin).\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/derper/depaware.txt#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngolang.org/x/crypto/chacha20poly1305                         from crypto/tls+\ngolang.org/x/crypto/cryptobyte                               from crypto/ecdsa+\ngolang.org/x/crypto/cryptobyte/asn1                          from crypto/ecdsa+\ngolang.org/x/crypto/curve25519                               from golang.org/x/crypto/nacl/box+\ngolang.org/x/crypto/internal/alias                           from golang.org/x/crypto/chacha20+\ngolang.org/x/crypto/internal/poly1305                        from golang.org/x/crypto/chacha20poly1305+\ngolang.org/x/crypto/nacl/box                                 from tailscale.com/types/key\ngolang.org/x/crypto/nacl/secretbox                           from golang.org/x/crypto/nacl/box\ngolang.org/x/crypto/salsa20/salsa                            from golang.org/x/crypto/nacl/box+\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Listing with Licenses\nDESCRIPTION: A markdown-formatted list of Go package dependencies showing package import paths and their corresponding licenses with links to both package documentation and license files.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/licenses/android.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n - [filippo.io/edwards25519](https://pkg.go.dev/filippo.io/edwards25519) ([BSD-3-Clause](https://github.com/FiloSottile/edwards25519/blob/v1.1.0/LICENSE))\n - [github.com/aws/aws-sdk-go-v2](https://pkg.go.dev/github.com/aws/aws-sdk-go-v2) ([Apache-2.0](https://github.com/aws/aws-sdk-go-v2/blob/v1.36.0/LICENSE.txt))\n```\n\n----------------------------------------\n\nTITLE: Converting License Markdown to CSV Format\nDESCRIPTION: Shell command to transform the license markdown file into CSV format by extracting license name, type, and URL information using regex patterns.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/licenses/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncat apple.md | grep \"^ -\" | sed -E \"s/- \\[(.*)]\\(.*?\\) \\(\\[(.*)]\\((.*\\))\\)/\\1,\\2,\\3/\"\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies List in Markdown\nDESCRIPTION: A markdown-formatted list of Go package dependencies including their import paths and license information. Each entry includes a link to the package documentation and its license type with corresponding license file location.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/licenses/tailscale.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n - [filippo.io/edwards25519](https://pkg.go.dev/filippo.io/edwards25519) ([BSD-3-Clause](https://github.com/FiloSottile/edwards25519/blob/v1.1.0/LICENSE))\n - [github.com/akutz/memconn](https://pkg.go.dev/github.com/akutz/memconn) ([Apache-2.0](https://github.com/akutz/memconn/blob/v0.1.0/LICENSE))\n - [github.com/alexbrainman/sspi](https://pkg.go.dev/github.com/alexbrainman/sspi) ([BSD-3-Clause](https://github.com/alexbrainman/sspi/blob/1a75b4708caa/LICENSE))\n```\n\n----------------------------------------\n\nTITLE: ESTAB Connection to HTTPS Service (34.210.105.16)\nDESCRIPTION: TCP connection metrics showing an established connection to an HTTPS service with cubic congestion control, including throughput, RTT, and window statistics\nSOURCE: https://github.com/tailscale/tailscale/blob/main/derp/testdata/example_ss.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nESTAB 0      0       10.255.1.11:35238  34.210.105.16:https\n         cubic wscale:7,7 rto:236 rtt:34.14/3.432 ato:40 mss:1448 pmtu:1500 rcvmss:1448 advmss:1448 cwnd:8 ssthresh:6 bytes_sent:38056577 bytes_retrans:2918 bytes_acked:38053660 bytes_received:6973211 segs_out:165090 segs_in:124227 data_segs_out:78018 data_segs_in:71645 send 2.71Mbps lastsnd:1156 lastrcv:1120 lastack:1120 pacing_rate 3.26Mbps delivery_rate 2.35Mbps delivered:78017 app_limited busy:2586132ms retrans:0/6 dsack_dups:4 reordering:5 reord_seen:15 rcv_rtt:126355 rcv_space:65780 rcv_ssthresh:541928 minrtt:26.632\n```\n\n----------------------------------------\n\nTITLE: Describing Cobra Shell Script Integration for Tab Completion\nDESCRIPTION: This markdown snippet explains the purpose and usage of the included shell scripts from the Cobra package. It details the license, supported shells, and modifications made to the original scripts.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tempfork/spf13/cobra/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# github.com/spf13/cobra\n\nThis package contains a copy of the Apache 2.0-licensed shell scripts that Cobra\nuses to integrate tab-completion into bash, zsh, fish and powershell, and the\nconstants that interface with them. We are re-using these scripts to implement\nsimilar tab-completion for ffcli and the standard library flag package.\n\nThe shell scripts were Go constants in the Cobra code, but we have extracted\nthem into separate files to facilitate gzipping them, and have removed the\nactiveHelp functionality from them.\n```\n\n----------------------------------------\n\nTITLE: Go Package Import Map\nDESCRIPTION: Detailed mapping of Go package imports showing dependency relationships. Each line shows a package and its importing source, with '+' indicating multiple import locations.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/k8s-operator/depaware.txt#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngoogle.golang.org/protobuf/reflect/protodesc                 from github.com/golang/protobuf/proto\ngoogle.golang.org/protobuf/reflect/protoreflect              from github.com/golang/protobuf/proto+\ngoogle.golang.org/protobuf/reflect/protoregistry             from github.com/golang/protobuf/proto+\n// ... additional imports omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Pointer Analysis Constants in Go\nDESCRIPTION: Defines named boolean constants representing different pointer patterns used in static analysis. These constants help specify the relationships between pointers and their reference patterns.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/cmd/derper/depaware.txt#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n        weak                                                         from unique\n```\n\n----------------------------------------\n\nTITLE: ESTAB SSH Connection Between Internal Hosts\nDESCRIPTION: TCP connection metrics for an SSH connection between internal hosts (100.x.x.x addresses) showing cubic congestion control and connection performance statistics\nSOURCE: https://github.com/tailscale/tailscale/blob/main/derp/testdata/example_ss.txt#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nESTAB 0      80     100.79.58.14:ssh    100.95.73.104:58145\n         cubic wscale:6,7 rto:224 rtt:23.051/2.03 ato:172 mss:1228 pmtu:1280 rcvmss:1228 advmss:1228 cwnd:10 ssthresh:94 bytes_sent:1591815 bytes_retrans:944 bytes_acked:1590791 bytes_received:158925 segs_out:8070 segs_in:8858 data_segs_out:7452 data_segs_in:3789 send 4.26Mbps lastsnd:4 lastrcv:4 lastack:4 pacing_rate 8.52Mbps delivery_rate 10.9Mbps delivered:7451 app_limited busy:61656ms unacked:2 retrans:0/10 dsack_dups:10 rcv_rtt:174712 rcv_space:65025 rcv_ssthresh:64296 minrtt:16.186\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic SSH Server using Gliderlabs SSH Package in Go\nDESCRIPTION: A simple example of implementing an SSH server using the Gliderlabs SSH package. The server handles connections with a function that writes \"Hello world\" to each connected session. This demonstrates the simplicity of the API, which is designed to be similar to Go's net/http package.\nSOURCE: https://github.com/tailscale/tailscale/blob/main/tempfork/gliderlabs/ssh/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"tailscale.com/tempfork/gliderlabs/ssh\"\n    \"io\"\n    \"log\"\n)\n\nfunc main() {\n    ssh.Handle(func(s ssh.Session) {\n        io.WriteString(s, \"Hello world\\n\")\n    })  \n\n    log.Fatal(ssh.ListenAndServe(\":2222\", nil))\n}\n```\n\n----------------------------------------\n\nTITLE: ESTAB Connection to HTTPS Service (167.172.206.31)\nDESCRIPTION: TCP connection metrics showing an established connection to an HTTPS service with detailed transmission and reception statistics\nSOURCE: https://github.com/tailscale/tailscale/blob/main/derp/testdata/example_ss.txt#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nESTAB 0      374     10.255.1.11:43254 167.172.206.31:https\n         cubic wscale:7,7 rto:224 rtt:22.55/1.941 ato:40 mss:1448 pmtu:1500 rcvmss:1448 advmss:1448 cwnd:6 ssthresh:4 bytes_sent:14594668 bytes_retrans:173314 bytes_acked:14420981 bytes_received:4207111 segs_out:80566 segs_in:70310 data_segs_out:24317 data_segs_in:20365 send 3.08Mbps lastsnd:4 lastrcv:4 lastack:4 pacing_rate 3.7Mbps delivery_rate 3.05Mbps delivered:24111 app_limited busy:184820ms unacked:2 retrans:0/185 dsack_dups:1 reord_seen:3 rcv_rtt:651.262 rcv_space:226657 rcv_ssthresh:1557136 minrtt:10.18\n```\n\n----------------------------------------\n\nTITLE: ESTAB Connection to HTTPS Service (3.121.18.47)\nDESCRIPTION: TCP connection metrics showing an established connection to an HTTPS service with cubic congestion control and relatively high RTT values\nSOURCE: https://github.com/tailscale/tailscale/blob/main/derp/testdata/example_ss.txt#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nESTAB 0      0       10.255.1.11:33036    3.121.18.47:https\n         cubic wscale:7,7 rto:372 rtt:168.408/2.044 ato:40 mss:1448 pmtu:1500 rcvmss:1448 advmss:1448 cwnd:10 bytes_sent:27500 bytes_acked:27501 bytes_received:1386524 segs_out:10990 segs_in:11037 data_segs_out:303 data_segs_in:3414 send 688kbps lastsnd:125776 lastrcv:9640 lastack:22760 pacing_rate 1.38Mbps delivery_rate 482kbps delivered:304 app_limited busy:43024ms rcv_rtt:3345.12 rcv_space:62431 rcv_ssthresh:760472 minrtt:168.867\n```"
  }
]