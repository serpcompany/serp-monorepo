[
  {
    "owner": "microsoft",
    "repo": "promptwizard",
    "content": "TITLE: Sample Output of Optimized Prompt and Expert Profile\nDESCRIPTION: This code displays the optimized output including an expert identity for a mathematics expert and a detailed prompt structure for solving math problems. It includes example questions and answers demonstrating the step-by-step approach.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nOUTPUT = \"\"\"Expert Identity: You are a mathematics expert with a strong background in various fields of mathematics, including algebra, calculus, geometry, and statistics. You have a deep understanding of mathematical theories and principles, and you are skilled at solving complex problems with precision and clarity. Your expertise allows you to break down intricate problems into manageable steps, making it easier for others to follow your reasoning. You are familiar with a wide range of mathematical techniques and tools, and you can apply them effectively to find solutions. Whether the problem involves solving equations, proving theorems, or analyzing data, you can provide a clear, accurate, and well-explained solution. Your ability to communicate complex mathematical concepts in an understandable way makes you an invaluable resource for anyone seeking help with mathematics.\n\nFinal best prompt: \n\nYou are a mathematics expert. Your task is to solve a given mathematics problem accurately and provide a clear, detailed explanation of your solution process. Follow these steps to ensure a comprehensive and well-structured solution:\n\n1. **Understand the Problem**: Carefully read and comprehend the problem statement. Identify the key components and what is being asked.\n\n2. **Identify Components**: Break down the problem into its fundamental components, such as variables, constants, and relevant quantities (e.g., base pay, overtime pay, distances, speeds, etc.).\n\n3. **Apply Relevant Principles**: Use appropriate mathematical principles, formulas, and methods to solve the problem step by step.\n\n4. **Logical Reasoning**: Employ logical reasoning to explain each step of your solution process. Ensure that each step follows logically from the previous one.\n\n5. **Detailed Explanations**: Provide detailed explanations for each step to ensure clarity and understanding. Include intermediate results and how they contribute to the final solution.\n\n6. **Explicit Calculation Steps**: Show each calculation step in detail, including intermediate results. Use proper mathematical notation and symbols.\n\n7. **Verify Each Step**: Recheck each intermediate step of your calculation to verify the correctness of the final answer. Ensure that all arithmetic and algebraic operations are accurate.\n\n8. **Combine Results**: Clearly combine different components of the problem (e.g., base pay and overtime pay) before arriving at the final answer.\n\n9. **Simplify and Notate**: Simplify the final answer where possible, and use proper mathematical notation and symbols.\n\n10. **Mark the Final Answer**: Clearly mark the final answer within <ANS_START> and <ANS_END> tags.\n\nEnsure that your approach is tailored to the specific type of mathematical problem being solved, whether it involves arithmetic, algebra, geometry, calculus, or any other area of mathematics. Present the solutions in a clear and organized manner.\n\n**Additional Guidelines:**\n- **Contextual Understanding**: Pay close attention to the context of the problem to ensure that all relationships and quantities are correctly interpreted.\n- **Correct Application of Arithmetic Operations**: Double-check that all arithmetic operations are applied correctly and align with the problem's requirements.\n- **Verification of Final Answer**: Dedicate a step to verify the final answer by rechecking all intermediate steps and ensuring they logically lead to the correct final result.\n- **Clarity in Marking Final Answer**: Use the <ANS_START> and <ANS_END> tags to clearly mark the final answer.\n\nBy following these steps and additional guidelines, you will ensure that the solution is accurate, well-explained, and clearly presented.\n\n\n[Question] Bella bought stamps at the post office. Some of the stamps had a snowflake design, some had a truck design, and some had a rose design. Bella bought 11 snowflake stamps. She bought 9 more truck stamps than snowflake stamps, and 13 fewer rose stamps than truck stamps. How many stamps did Bella buy in all?\n[Answer] 1. **Understand the Problem**: Bella bought three types of stamps: snowflake, truck, and rose. We need to determine the total number of stamps she bought, given the relationships between the quantities of each type.\n\n2. **Identify Components**:\n   - Number of snowflake stamps: 11.\n   - Number of truck stamps: 9 more than the number of snowflake stamps.\n   - Number of rose stamps: 13 fewer than the number of truck stamps.\n\n3. **Apply Relevant Principles**: Use basic arithmetic operations to find the quantities of truck and rose stamps, and then sum all the quantities to find the total number of stamps.\n\n4. **Logical Reasoning**:\n   - Number of snowflake stamps: 11.\n   - Number of truck stamps: 11 (snowflake stamps) + 9 = 20.\n   - Number of rose stamps: 20 (truck stamps) - 13 = 7.\n\n5. **Detailed Explanations**:\n   - Calculate the number of truck stamps: 11 (snowflake stamps) + 9 = 20.\n   - Calculate the number of rose stamps: 20 (truck stamps) - 13 = 7.\n   - Calculate the total number of stamps: 11 (snowflake) + 20 (truck) + 7 (rose) = 38.\n\n6. **Explicit Calculation Steps**:\n   - Truck stamps: 11 + 9 = $<11+9=20>20.\n   - Rose stamps: 20 - 13 = $<20-13=7>7.\n   - Total stamps: 11 + 20 + 7 = $<11+20+7=38>38.\n\n7. **Verify Each Step**: Recheck each calculation step to ensure correctness:\n   - Truck stamps: 11 + 9 = 20.\n   - Rose stamps: 20 - 13 = 7.\n   - Total stamps: 11 + 20 + 7 = 38.\n\n8. **Combine Results**: Combine the number of each type of stamp correctly to find the total number of stamps.\n\n9. **Simplify and Notate**: The final answer is already simplified.\n\n10. **Mark the Final Answer**: <ANS_START>38<ANS_END>\n\nBy following these steps, we ensure that the solution is accurate, well-explained, and clearly presented. <ANS_START>38<ANS_END>\n\n[Question] It takes Roque two hours to walk to work and one hour to ride his bike to work. Roque walks to and from work three times a week and rides his bike to and from work twice a week. How many hours in total does he take to get to and from work a week with walking and biking?\n[Answer] 1. **Understand the Problem**: Roque has two modes of transportation to work: walking and biking. We need to calculate the total time he spends traveling to and from work in a week, considering the different times and frequencies for each mode.\n\n2. **Identify Components**:\n   - Time to walk to work: 2 hours (one way).\n   - Time to bike to work: 1 hour (one way).\n   - Frequency of walking: 3 times a week (to and from work).\n   - Frequency of biking: 2 times a week (to and from work).\n\n3. **Apply Relevant Principles**: Use basic arithmetic to calculate the total time spent walking and biking separately, then sum these times to get the total weekly travel time.\n\n4. **Logical Reasoning**:\n   - Calculate the total walking time for a week:\n     - One round trip (to and from work) by walking takes 2 hours (to work) + 2 hours (from work) = 4 hours.\n     - Roque walks to and from work 3 times a week, so the total walking time is 4 hours per round trip * 3 round trips = 12 hours.\n   - Calculate the total biking time for a week:\n     - One round trip (to and from work) by biking takes 1 hour (to work) + 1 hour (from work) = 2 hours.\n     - Roque bikes to and from work 2 times a week, so the total biking time is 2 hours per round trip * 2 round trips = 4 hours.\n\n5. **Detailed Explanations**:\n   - Walking time calculation:\n     - One round trip walking: 2 hours (to work) + 2 hours (from work) = 4 hours.\n     - Total walking time for the week: 4 hours per round trip * 3 round trips = 12 hours.\n   - Biking time calculation:\n     - One round trip biking: 1 hour (to work) + 1 hour (from work) = 2 hours.\n     - Total biking time for the week: 2 hours per round trip * 2 round trips = 4 hours.\n   - Combine the total walking and biking times to get the total weekly travel time:\n     - Total weekly travel time: 12 hours (walking) + 4 hours (biking) = 16 hours.\n\n6. **Explicit Calculation Steps**:\n   - Walking time: 2 hours (one way) * 2 (round trip) * 3 (times a week) = $<2*2*3=12>12 hours.\n   - Biking time: 1 hour (one way) * 2 (round trip) * 2 (times a week) = $<1*2*2=4>4 hours.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Prompt Optimization with PromptWizard\nDESCRIPTION: Executes the prompt optimization process using real in-context examples. The function supports different modes including using a mix of real and synthetic examples, generating synthetic examples only, or running without training examples.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/svamp/demo.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Function call to generate optimal prompt and expert profile \nbest_prompt, expert_profile = gp.get_best_prompt(use_examples=True,run_without_train_examples=False,generate_synthetic_examples=False)\n```\n\n----------------------------------------\n\nTITLE: Defining GSM8k Dataset Processing Class in Python\nDESCRIPTION: This class extends DatasetSpecificProcessing to handle the GSM8K dataset. It includes methods for converting the dataset to JSONL format and extracting final answers from model outputs.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/gsm8k/demo.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GSM8k(DatasetSpecificProcessing):\n\n    def dataset_to_jsonl(self, dataset_jsonl: str, **kwargs: Any) -> None:\n        def extract_answer_from_output(completion):\n            # Your functions for metrics and prompt building\n            ans_re = compile(r\"#### (\\-?[0-9\\.\\,]+)\")\n            self.INVALID_ANS = \"[invalid]\"\n\n            match = ans_re.search(completion)\n            if match:\n                match_str = match.group(1).strip()\n                match_str = match_str.replace(\",\", \"\")\n                return match_str\n            else:\n                return self.INVALID_ANS\n\n        examples_set = []\n\n        for _, sample in tqdm(enumerate(kwargs[\"dataset\"]), desc=\"Evaluating samples\"):\n            example = {\n              DatasetSpecificProcessing.QUESTION_LITERAL: sample['question'],\n              DatasetSpecificProcessing.ANSWER_WITH_REASON_LITERAL: sample['answer'],\n              DatasetSpecificProcessing.FINAL_ANSWER_LITERAL: extract_answer_from_output(sample[\"answer\"])\n            }\n            examples_set.append(example)\n\n        save_jsonlist(dataset_jsonl, examples_set, \"w\")\n\n    def extract_final_answer(self, answer: str):\n        \n        if not answer:\n            return self.INVALID_ANS\n\n        model_pred = answer.lower()\n        preds = model_pred.split(self.ANSWER_START.lower())\n        answer_flag = True if len(preds) > 1 else False\n\n        pred = preds[-1].replace(\",\", \"\")\n        pred = [s for s in findall(r'-?\\d+\\.?\\d*', pred)]\n\n        if len(pred) == 0:\n            return self.INVALID_ANS\n\n        if answer_flag:\n            # choose the first element in list\n            pred = pred[0]\n        else:\n            # choose the last element in list\n            pred = pred[-1]\n\n        # (For arithmetic tasks) if a word ends with period, it will be omitted ...\n        if pred[-1] == \".\":\n            pred = pred[:-1]\n        return pred\n```\n\n----------------------------------------\n\nTITLE: Generating Optimized Prompt with In-context Examples\nDESCRIPTION: Calls the get_best_prompt function to generate an optimized prompt and expert profile. Various flags control whether to use real examples, generate synthetic examples, or run without training examples in the prompt.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Function call to generate optimal prompt and expert profile \nbest_prompt, expert_profile = gp.get_best_prompt(use_examples=True,run_without_train_examples=False,generate_synthetic_examples=False)\n```\n\n----------------------------------------\n\nTITLE: Creating SVAMP Dataset Processing Class for PromptWizard\nDESCRIPTION: Defines a utility function to extract substrings and implements the SVAMP class that extends DatasetSpecificProcessing. This class handles dataset conversion to JSONL format and provides methods for answer extraction and evaluation.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/svamp/demo.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\ndef extract_between(start, end, text):\n    \"\"\"\n    Extracts the substring from 'text' that is between 'start' and 'end' strings.\n    \n    Parameters:\n    - start (str): The starting delimiter string.\n    - end (str): The ending delimiter string.\n    - text (str): The text to search within.\n    \n    Returns:\n    - str: The extracted substring between the start and end delimiters.\n    \"\"\"\n    start_index = text.find(start)\n    if start_index == -1:\n        return '' \n    \n    start_index += len(start)\n    \n    end_index = text.find(end, start_index)\n    if end_index == -1:\n        return ''  \n    return text[start_index:end_index]\n\nclass SVAMP(DatasetSpecificProcessing):\n\n    def dataset_to_jsonl(self, dataset_jsonl: str, **kwargs: Any) -> None:\n        def extract_answer_from_output(completion):\n\n                return completion\n\n        examples_set = []\n\n        for _, sample in tqdm(enumerate(kwargs[\"dataset\"]), desc=\"Evaluating samples\"):\n            example = {\n              DatasetSpecificProcessing.QUESTION_LITERAL: sample['question'],\n              DatasetSpecificProcessing.ANSWER_WITH_REASON_LITERAL: sample['answer'],\n              DatasetSpecificProcessing.FINAL_ANSWER_LITERAL: extract_answer_from_output(sample[\"answer\"])\n            }\n            examples_set.append(example)\n\n        save_jsonlist(dataset_jsonl, examples_set, \"w\")\n\n    def extract_final_answer(self, answer: str):\n        \n        final_answer = extract_between(text=answer,start=\"<ANS_START>\",end=\"<ANS_END>\")\n        return final_answer\n    \n    def access_answer(self, llm_output: str, gt_answer: str):\n\n        predicted_answer = self.extract_final_answer(llm_output)\n        is_correct = False\n        if predicted_answer and (predicted_answer.lower() == gt_answer.lower()):\n            is_correct = True\n\n        return is_correct, predicted_answer\n```\n\n----------------------------------------\n\nTITLE: Executing Prompt Optimization with In-Context Examples\nDESCRIPTION: This code calls the optimization function to find the best prompt with in-context examples for math problem-solving. It specifies that examples should be used from the training data without generating synthetic examples.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nbest_prompt, expert_profile = gp.get_best_prompt(use_examples=True,run_without_train_examples=False,generate_synthetic_examples=False)\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing BBH Dataset\nDESCRIPTION: Clones the INSTINCT repository and processes the selected BBH dataset. Handles different dataset types with custom processing for each one. Extracts questions and answers from the original format and saves them in a standardized JSONL format for both train and test splits.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\nif not os.path.exists(\"data\"):\n    os.mkdir(\"data\")\ndataset_list = ['informal_to_formal','letters_list','negation','orthography_starts_with','rhymes','second_word_letter','sum','diff','sentence_similarity','taxonomy_animal','auto_categorization','object_counting','odd_one_out','antonyms','word_unscrambling','cause_and_effect','common_concept','word_sorting','synonyms']\n\n# Set the dataset on which to run optimization out of the 19 \ndataset_to_run = 'second_word_letter'\n\nif not os.path.exists(\"data/\"+dataset_to_run):\n    os.mkdir(\"data/\"+dataset_to_run)\n    \nos.system(\"git clone https://github.com/xqlin98/INSTINCT\")\n\n\nfor mode in ['execute','induce']:\n    for dataset in dataset_list:\n\n        if dataset_to_run == dataset:\n            data_list = []\n\n            file_path = 'INSTINCT/Induction/experiments/data/instruction_induction/raw/'+mode+'/'+dataset+'.json'  \n            with open(file_path, 'r') as file:\n                data = json.load(file)\n            \n            save_file_path = 'test.jsonl'\n            if mode == 'execute':\n                save_file_path = 'train.jsonl'\n\n            for key,sample in data['examples'].items():\n                task = dataset\n                if(task == 'cause_and_effect'):\n                    cause = sample[\"cause\"]\n                    effect = sample[\"effect\"]\n                    import random\n                    pair = [cause, effect]\n                    random.shuffle(pair)\n                    question = f\"Sentence 1: {pair[0]} Sentence 2: {pair[1]}\",\n                    answer = cause,\n                elif(task == 'antonyms'):\n                    \n                        question = sample[\"input\"],\n                        answer = sample[\"output\"],\n\n                elif(task == 'common_concept'):\n                    concept = sample[\"concept\"]\n                    items = sample[\"items\"]\n                    input = \", \".join(items)\n                    question = f\"Objects: {input}\"\n                    answer = f\"{concept}\"\n\n                elif(task == 'diff'):\n                    input = sample[\"input\"]\n                    output = sample[\"output\"]\n                    question = f\"{input}\"\n                    answer = f\"{output}\"\n\n                elif(task == 'informal_to_formal'):\n                    informal = sample[\"input\"]\n                    formal = sample[\"output\"]\n                    question = f\"{informal}\"\n                    answer = f\"{formal}\"\n\n                elif(task == 'synonyms' or task == 'word_unscrambling' or task == 'word_sorting' or task == 'letters_list' or task == 'negation' or task == 'orthography_starts_with' or task == 'second_word_letter' or task == 'sentence_similarity' or task == 'sum' or task == 'taxonomy_animal' or task == 'auto_categorization' or task == 'object_counting' or task == 'odd_one_out'):\n                    informal = sample[\"input\"]\n                    formal = sample[\"output\"] \n                    question = f\"{informal}\"\n                    answer = f\"{formal}\"\n\n                elif(task == 'rhymes'):\n                    input = sample[\"input\"]\n                    output = sample[\"other_rhymes\"]\n                    output = \", \".join(output)\n                    question = f\"{input}\"\n                    answer = f\"{output}\"\n            \n                data_list.append({\"question\":question,\"answer\":answer})\n            bbh_processor.dataset_to_jsonl(\"data/\"+dataset +\"/\"+save_file_path, dataset=data_list)\n\nos.system(\"rm -r INSTINCT\")\n           \n```\n\n----------------------------------------\n\nTITLE: Implementing AQUA-RAT Dataset Processing\nDESCRIPTION: Defines the AQUARAT class extending DatasetSpecificProcessing with methods for dataset conversion and answer extraction. Includes utility function for text extraction.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/aquarat/demo.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef extract_between(start, end, text):\n    \"\"\"\n    Extracts the substring from 'text' that is between 'start' and 'end' strings.\n    \n    Parameters:\n    - start (str): The starting delimiter string.\n    - end (str): The ending delimiter string.\n    - text (str): The text to search within.\n    \n    Returns:\n    - str: The extracted substring between the start and end delimiters.\n    \"\"\"\n    start_index = text.find(start)\n    if start_index == -1:\n        return '' \n    \n    start_index += len(start)\n    \n    end_index = text.find(end, start_index)\n    if end_index == -1:\n        return ''  \n    return text[start_index:end_index]\n\nclass AQUARAT(DatasetSpecificProcessing):\n\n    def dataset_to_jsonl(self, dataset_jsonl: str, **kwargs: Any) -> None:\n        def extract_answer_from_output(completion):\n\n                return completion\n\n        examples_set = []\n\n        for _, sample in tqdm(enumerate(kwargs[\"dataset\"]), desc=\"Evaluating samples\"):\n            example = {\n              DatasetSpecificProcessing.QUESTION_LITERAL: sample['question'],\n              DatasetSpecificProcessing.ANSWER_WITH_REASON_LITERAL: sample['answer'],\n              DatasetSpecificProcessing.FINAL_ANSWER_LITERAL: extract_answer_from_output(sample[\"answer\"])\n            }\n            examples_set.append(example)\n\n        save_jsonlist(dataset_jsonl, examples_set, \"w\")\n\n    def extract_final_answer(self, answer: str):\n        \n        final_answer = extract_between(text=answer,start=\"<ANS_START>\",end=\"<ANS_END>\")\n        return final_answer\n    \n    def access_answer(self, llm_output: str, gt_answer: str):\n\n        predicted_answer = self.extract_final_answer(llm_output)\n        is_correct = False\n        if predicted_answer and (predicted_answer.lower() == gt_answer.lower()):\n            is_correct = True\n\n        return is_correct, predicted_answer\n```\n\n----------------------------------------\n\nTITLE: Configuring Prompt Optimization Parameters for Math Problem Solving\nDESCRIPTION: This code sets up the configuration for prompt optimization, defining parameters like task description, base instruction, mutation rounds, few-shot examples count, and other optimization settings for the math problem-solving task.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfile_path = 'configs/promptopt_config.yaml' \nconfig_dict = {\n                \"task_description\": \"You are a mathematics expert. You will be given a mathematics problem which you need to solve\",\n                \"base_instruction\": \"Lets think step by step.\",\n                \"mutation_rounds\": 2,\n                \"few_shot_count\": 5,\n                \"generate_reasoning\": True,\n                \"mutate_refine_iterations\" : 3,\n                \"seen_set_size\":20\n               }\nupdate_yaml_file(file_path,config_dict)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Optimized Prompt on Test Data\nDESCRIPTION: Sets the optimized prompt and expert profile in the GluePromptOpt object and evaluates its performance on the test dataset. Prints the final accuracy score.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/svamp/demo.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngp.EXPERT_PROFILE = expert_profile\ngp.BEST_PROMPT = best_prompt\n\n# Function call to evaluate the prompt\naccuracy = gp.evaluate(test_file_name)\n\nprint(f\"Final Accuracy: {accuracy}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Task Description for GSM8k Dataset in YAML\nDESCRIPTION: This YAML snippet shows how to set the task description for the GSM8k dataset in the promptopt_config.yaml file. It defines the role of the AI as a mathematics expert and provides a general problem-solving instruction.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntask_description: You are a mathematics expert. You will be given a mathematics problem which you need to solve\n```\n\n----------------------------------------\n\nTITLE: Evaluating Optimized Prompt on GSM8K Test Set in Python\nDESCRIPTION: This snippet evaluates the optimized prompt on the GSM8K test set and prints the final accuracy.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/gsm8k/demo.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngp.EXPERT_PROFILE = expert_profile\ngp.BEST_PROMPT = best_prompt\n\n# Function call to evaluate the prompt\naccuracy = gp.evaluate(test_file_name)\n\nprint(f\"Final Accuracy: {accuracy}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Base Instruction in YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set the base instruction in the promptopt_config.yaml file. It provides a general problem-solving approach that can be used across different datasets.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbase_instruction: Lets think step by step.\n```\n\n----------------------------------------\n\nTITLE: Loading and Saving GSM8K Dataset for Prompt Optimization\nDESCRIPTION: This code loads the GSM8K dataset from OpenAI, extracts question-answer pairs, and saves them as JSONL files. It takes a subset of 100 training examples and stores them for further processing.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nif not os.path.exists(\"data\"):\n    os.mkdir(\"data\")\n    \ndataset = load_dataset(\"openai/gsm8k\", \"main\")\nnum_samples = 0\nfor dataset_type in ['train','test']:\n    data_list = []\n    for data in dataset[dataset_type]:\n        data_list.append({\"question\": data['question'], \"answer\": data['answer']})\n        if num_samples == 100 and dataset_type == 'train': # We sample only 100 train examples and use 25 out them for training randomly\n            break\n        num_samples += 1\n    gsm8k_processor.dataset_to_jsonl(\"data/\"+ dataset_type+'.jsonl', dataset=data_list)\n```\n\n----------------------------------------\n\nTITLE: Defining Answer Format in YAML Configuration\nDESCRIPTION: This YAML snippet shows how to specify the answer format in the promptopt_config.yaml file. It instructs the AI to wrap the final answer between specific tags, which can be easily extracted by the extract_final_answer() function.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nanswer_format: At the end, wrap only your final option between <ANS_START> and <ANS_END> tags\n```\n\n----------------------------------------\n\nTITLE: Saving Optimized Prompt and Expert Profile\nDESCRIPTION: Creates a results directory if it doesn't exist and saves the best prompt and expert profile using pickle. Also prints these values to the console for immediate inspection.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pickle \nif not os.path.exists(\"results\"):\n    os.system(\"mkdir results\")\n\nwith open(\"results/best_prompt.pkl\", 'wb') as f:\n    pickle.dump(best_prompt, f)\nwith open(\"results/expert_profile.pkl\", 'wb') as f:\n    pickle.dump(expert_profile, f)\n\nprint(f\"Best prompt: {best_prompt} \\nExpert profile: {expert_profile}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing LLM-as-a-Judge Evaluation Functions\nDESCRIPTION: Defines utility functions for LLM-based evaluation. Includes functions to extract text between delimiters, make API calls to Azure OpenAI, and compare predicted answers with ground truth using an LLM judge. The judge returns True/False based on semantic equivalence.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef extract_between(start, end, text):\n    \"\"\"\n    Extracts the substring from 'text' that is between 'start' and 'end' strings.\n    \n    Parameters:\n    - start (str): The starting delimiter string.\n    - end (str): The ending delimiter string.\n    - text (str): The text to search within.\n    \n    Returns:\n    - str: The extracted substring between the start and end delimiters.\n    \"\"\"\n    start_index = text.find(start)\n    if start_index == -1:\n        return '' \n    \n    start_index += len(start)\n    \n    end_index = text.find(end, start_index)\n    if end_index == -1:\n        return ''  \n    return text[start_index:end_index]\n\ndef call_api(messages):\n    \n    token_provider = get_bearer_token_provider(\n            AzureCliCredential(), \"https://cognitiveservices.azure.com/.default\"\n        )\n    client = AzureOpenAI(\n        api_version=\"<OPENAI_API_VERSION>\",\n        azure_endpoint=\"<AZURE_ENDPOINT>\",\n        azure_ad_token_provider=token_provider\n        )\n    response = client.chat.completions.create(\n        model=\"<MODEL_DEPLOYMENT_NAME>\",\n        messages=messages,\n        temperature=0.0,\n    )\n    prediction = response.choices[0].message.content\n    return prediction\n\ndef llm_eval(predicted_answer,gt_answer):\n    \n    EVAL_PROMPT = f\"\"\"Given the Predicted_Answer and Reference_Answer, compare them and check they mean the same.\n                    If they mean the same then return True between <ANS_START> and <ANS_END> tags , \n                    If they differ in the meaning then return False between <ANS_START> and <ANS_END> tags \n                    Following are the given :\n                    Predicted_Answer: {predicted_answer}\n                    Reference_Answer: {gt_answer}\"\"\"\n    messages = [\n        {\"role\": \"system\", \"content\": \"\"},\n        {\"role\": \"user\", \"content\": EVAL_PROMPT}\n    ]\n\n    response = call_api(messages)\n    final_judgement = extract_between(start=\"<ANS_START>\", end=\"<ANS_END>\", text=response)\n    return final_judgement == \"True\"\n```\n\n----------------------------------------\n\nTITLE: Processing AQUA-RAT Dataset\nDESCRIPTION: Loads and processes the AQUA-RAT dataset, converting it to the required format and saving as JSONL files.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/aquarat/demo.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif not os.path.exists(\"data\"):\n    os.mkdir(\"data\")\ndataset = load_dataset(\"deepmind/aqua_rat\", \"raw\")\nnum_samples = 1\nfor dataset_type in ['train','test']:\n    data_list = []\n    for data in dataset[dataset_type]:\n        options = data['options'][0]\n        for i in range(1,len(data['options'])):\n            options = options + \" \"+ data['options'][i]\n        data_list.append({\"question\": data['question']+\"\\n\"+options, \"answer\": data['correct']})\n        if num_samples == 100 and dataset_type == 'train': # We sample only 100 train examples and use 25 out them for training randomly\n            break\n        num_samples += 1\n    aquarat_processor.dataset_to_jsonl(\"data/\"+ dataset_type+'.jsonl', dataset=data_list)\n```\n\n----------------------------------------\n\nTITLE: Creating Dataset-Specific Processing Class for BBH\nDESCRIPTION: Defines a BBH class that extends DatasetSpecificProcessing to handle the specific requirements of the BBH dataset. Implements methods for converting dataset to JSONL format, extracting final answers from LLM responses, and evaluating answers against ground truth using either exact match or LLM-as-judge.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\nllm_as_judge_eval = True\n\nclass BBH(DatasetSpecificProcessing):\n\n    def dataset_to_jsonl(self, dataset_jsonl: str, **kwargs: Any) -> None:\n        def extract_answer_from_output(completion):\n\n                return completion\n\n        examples_set = []\n\n        for _, sample in tqdm(enumerate(kwargs[\"dataset\"]), desc=\"Evaluating samples\"):\n            example = {\n              DatasetSpecificProcessing.QUESTION_LITERAL: sample['question'],\n              DatasetSpecificProcessing.ANSWER_WITH_REASON_LITERAL: sample['answer'],\n              DatasetSpecificProcessing.FINAL_ANSWER_LITERAL: extract_answer_from_output(sample[\"answer\"])\n            }\n            examples_set.append(example)\n\n        save_jsonlist(dataset_jsonl, examples_set, \"w\")\n\n    def extract_final_answer(self, answer: str):\n        \n        final_answer = extract_between(text=answer,start=\"<ANS_START>\",end=\"<ANS_END>\")\n        return final_answer\n    \n    def access_answer(self, llm_output: str, gt_answer: str):\n\n        if llm_as_judge_eval:\n            predicted_answer = self.extract_final_answer(llm_output)\n            is_correct = False\n            if llm_eval(predicted_answer,gt_answer):\n                is_correct = True\n        else:\n            predicted_answer = self.extract_final_answer(llm_output)\n            is_correct = False\n            if predicted_answer and (predicted_answer.lower() == gt_answer.lower()):\n                is_correct = True\n\n            return is_correct, predicted_answer\n```\n\n----------------------------------------\n\nTITLE: Implementing Dataset-Specific Processing in Python\nDESCRIPTION: This Python code snippet outlines the structure of a dataset-specific class that inherits from DatasetSpecificProcessing. It includes placeholder methods for extracting answers from dataset outputs and LLM outputs, as well as evaluating the correctness of answers.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass GSM8k(DatasetSpecificProcessing):\n    def extract_answer_from_output(self, answer):\n        # Implementation for extracting answer from dataset output\n        pass\n\n    def extract_final_answer(self, llm_output):\n        # Implementation for extracting final answer from LLM output\n        pass\n\n    def access_answer(self, llm_output):\n        # Extract answer from LLM output\n        extracted_answer = self.extract_final_answer(llm_output)\n        # Evaluate extracted answer with ground truth\n        is_correct = self.evaluate_answer(extracted_answer, ground_truth)\n        return extracted_answer, is_correct\n```\n\n----------------------------------------\n\nTITLE: Implementing GSM8k Dataset Processing Class\nDESCRIPTION: Defines a custom class for processing GSM8k dataset with methods for converting to JSONL format and extracting answers\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass GSM8k(DatasetSpecificProcessing):\n\n    def dataset_to_jsonl(self, dataset_jsonl: str, **kwargs: Any) -> None:\n        def extract_answer_from_output(completion):\n            # Your functions for metrics and prompt building\n            ans_re = compile(r\"#### (\\-?[0-9\\.\\,]+)\")\n            self.INVALID_ANS = \"[invalid]\"\n\n            match = ans_re.search(completion)\n            if match:\n                match_str = match.group(1).strip()\n                match_str = match_str.replace(\",\", \"\")\n                return match_str\n            else:\n                return self.INVALID_ANS\n\n        examples_set = []\n\n        for _, sample in tqdm(enumerate(kwargs[\"dataset\"]), desc=\"Evaluating samples\"):\n            example = {\n              DatasetSpecificProcessing.QUESTION_LITERAL: sample['question'],\n              DatasetSpecificProcessing.ANSWER_WITH_REASON_LITERAL: sample['answer'],\n              DatasetSpecificProcessing.FINAL_ANSWER_LITERAL: extract_answer_from_output(sample[\"answer\"])\n            }\n            examples_set.append(example)\n\n        save_jsonlist(dataset_jsonl, examples_set, \"w\")\n\n    def extract_final_answer(self, answer: str):\n        \n        if not answer:\n            return self.INVALID_ANS\n\n        model_pred = answer.lower()\n        preds = model_pred.split(self.ANSWER_START.lower())\n        answer_flag = True if len(preds) > 1 else False\n\n        pred = preds[-1].replace(\",\", \"\")\n        pred = [s for s in findall(r'-?\\d+\\.?\\d*', pred)]\n\n        if len(pred) == 0:\n            return self.INVALID_ANS\n\n        if answer_flag:\n            # choose the first element in list\n            pred = pred[0]\n        else:\n            # choose the last element in list\n            pred = pred[-1]\n\n        # (For arithmetic tasks) if a word ends with period, it will be omitted ...\n        if pred[-1] == \".\":\n            pred = pred[:-1]\n        return pred\n```\n\n----------------------------------------\n\nTITLE: Creating GluePromptOpt Object for Prompt Optimization\nDESCRIPTION: Initializes the GluePromptOpt object with configuration paths, training data, and the SVAMP dataset processor to handle prompt optimization.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/svamp/demo.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngp = GluePromptOpt(promptopt_config_path,\n                   setup_config_path,\n                   train_file_name,\n                   svamp_processor)\n```\n\n----------------------------------------\n\nTITLE: Configuring Prompt Optimization Settings\nDESCRIPTION: Sets up configuration dictionary for prompt optimization with task description and various parameters\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfile_path = 'configs/promptopt_config.yaml' \nconfig_dict = {\n                \"task_description\": \"You are a mathematics expert. You will be given a mathematics problem which you need to solve\",\n                \"base_instruction\": \"Lets think step by step.\",\n                \"mutation_rounds\": 2,\n                \"few_shot_count\": 5,\n                \"generate_reasoning\": True,\n                \"mutate_refine_iterations\" : 3,\n                \"seen_set_size\":20\n               }\nupdate_yaml_file(file_path,config_dict)\n```\n\n----------------------------------------\n\nTITLE: Initializing Prompt Optimization Object\nDESCRIPTION: Creates a GluePromptOpt object to manage prompt optimization and inference. Passes configuration paths and the BBH processor to handle dataset-specific operations.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngp = GluePromptOpt(promptopt_config_path,\n                   setup_config_path,\n                   train_file_name,\n                   bbh_processor)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Optimized Prompt on Test Data\nDESCRIPTION: Sets the optimized expert profile and prompt on the GluePromptOpt object, then evaluates its performance on the test dataset. The final accuracy is printed to the console.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ngp.EXPERT_PROFILE = expert_profile\ngp.BEST_PROMPT = best_prompt\n\n# Function call to evaluate the prompt\naccuracy = gp.evaluate(test_file_name)\n\nprint(f\"Final Accuracy: {accuracy}\")\n```\n\n----------------------------------------\n\nTITLE: Updating YAML Configuration Files\nDESCRIPTION: Function to update YAML configuration files by reading existing data, modifying specified fields, and writing back to the file. This is used to set task descriptions and mutation parameters for prompt optimization.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef update_yaml_file(file_path,config_dict):\n\n    with open(file_path, 'r') as file:\n        data = yaml.safe_load(file)\n\n\n    for field,value in config_dict.items():\n        data[field] = value\n\n    with open(file_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n\n    print(\"YAML file updated successfully!\")\n```\n\n----------------------------------------\n\nTITLE: Optimizing Prompts\nDESCRIPTION: Generates optimal prompt and expert profile using the PromptOpt functionality.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/aquarat/demo.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbest_prompt, expert_profile = gp.get_best_prompt(use_examples=True,run_without_train_examples=False,generate_synthetic_examples=False)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Prompt Optimization in Python\nDESCRIPTION: This snippet imports necessary libraries and modules for the prompt optimization process, including PromptWizard components, data processing utilities, and environment variable loading.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/gsm8k/demo.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0, \"../../\")\nimport promptwizard\nfrom promptwizard.glue.promptopt.instantiate import GluePromptOpt\nfrom promptwizard.glue.promptopt.techniques.common_logic import DatasetSpecificProcessing\nfrom promptwizard.glue.common.utils.file import save_jsonlist\nfrom typing import Any\nfrom tqdm import tqdm\nfrom re import compile, findall\nimport os\nfrom datasets import load_dataset\n\nfrom dotenv import load_dotenv\nload_dotenv(override = True)\n```\n\n----------------------------------------\n\nTITLE: Generating Optimal Prompt and Expert Profile in Python\nDESCRIPTION: This snippet calls the prompt optimization function to generate the best prompt and expert profile. It uses real in-context examples from the training data.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/gsm8k/demo.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Function call to generate optimal prompt and expert profile \nbest_prompt, expert_profile = gp.get_best_prompt(use_examples=True,run_without_train_examples=False,generate_synthetic_examples=False)\n```\n\n----------------------------------------\n\nTITLE: Initializing GluePromptOpt Object for Prompt Optimization\nDESCRIPTION: This code creates a GluePromptOpt object which serves as the main interface for prompt optimization. It requires configuration paths, dataset location, and a data processor specific to the GSM8K dataset format.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ngp = GluePromptOpt(promptopt_config_path,\n                   setup_config_path,\n                   dataset_jsonl = os.path.join(\"data\", \"train.jsonl\"),\n                   data_processor = gsm8k_processor)\n```\n\n----------------------------------------\n\nTITLE: Example Output for Scenario 1\nDESCRIPTION: Shows an example of the output from running the prompt optimization in scenario 1, displaying five variations of mutated prompts with different expert profiles and instructional approaches.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nOUTPUT = \"\"\"\nVariations 1:\nExpert Profile:\nYou are a mathematician with a strong background in various fields of mathematics, including algebra, calculus, geometry, and statistics. You have a deep understanding of mathematical theories and principles, and you are skilled at solving complex problems with precision and clarity. Your expertise allows you to approach mathematical problems methodically, breaking them down into manageable steps and applying appropriate techniques to find solutions. You are familiar with both theoretical and applied mathematics, and you can explain your reasoning and solutions in a clear and concise manner. Your ability to solve mathematical problems efficiently and accurately makes you an invaluable resource for anyone seeking help with mathematics.:\nPrompt:\nYou are a mathematics expert. You will be given a mathematics problem which you need to solve\nLets think step by step.\n\n\nFor each question present the reasoning followed by the correct answer.\nKeywords: mathematics, problem-solving, step-by-step, logical reasoning, expert\n_______________________________________________________________________\n\nVariations 2:\nExpert Profile:\nYou are a mathematician with a strong background in various fields of mathematics, including algebra, calculus, geometry, and statistics. You have a deep understanding of mathematical theories and principles, and you are skilled at solving complex problems with precision and clarity. Your expertise allows you to approach mathematical problems methodically, breaking them down into manageable steps and applying appropriate techniques to find solutions. You are familiar with both theoretical and applied mathematics, and you can explain your reasoning and solutions in a clear and concise manner. Your ability to solve mathematical problems efficiently and accurately makes you an invaluable resource for anyone seeking help with mathematics.:\nPrompt:\nLet's break this problem down step by step and devise an experiment to help solve it.\n\n\nFor each question present the reasoning followed by the correct answer.\nKeywords: mathematics, problem-solving, step-by-step, logical reasoning, expert\n_______________________________________________________________________\n\nVariations 3:\nExpert Profile:\nYou are a mathematics expert with a strong background in various fields of mathematics, including algebra, calculus, geometry, and statistics. You have a deep understanding of mathematical theories and principles, and you are skilled at solving complex problems with precision and clarity. Your expertise allows you to break down intricate problems into manageable steps, making it easier to find solutions. You are familiar with a wide range of mathematical techniques and tools, and you can apply them effectively to solve problems. Whether the problem involves solving equations, proving theorems, or analyzing data, you can provide a clear and accurate solution. Your ability to explain your reasoning and methodology ensures that others can follow and understand your approach, making you an invaluable resource for tackling challenging mathematical problems.:\nPrompt:\nLet's think through this problem step by step and make a list of ideas to solve it.\n\n\nFor each question present the reasoning followed by the correct answer.\nKeywords: mathematics, problem-solving, step-by-step, logical reasoning, expert\n_______________________________________________________________________\n\nVariations 4:\nExpert Profile:\nYou are a mathematics expert with a strong background in various fields of mathematics, including algebra, calculus, geometry, and statistics. You have a deep understanding of mathematical theories and principles, and you are skilled at solving complex problems with precision and clarity. Your expertise allows you to break down intricate problems into manageable steps, making it easier for others to follow your reasoning. You are familiar with a wide range of mathematical techniques and tools, and you can apply them effectively to find solutions. Whether the problem involves solving equations, proving theorems, or analyzing data, you can provide a clear, accurate, and well-explained solution. Your ability to communicate complex mathematical concepts in an understandable way makes you an invaluable resource for anyone seeking to solve mathematical problems.:\nPrompt:\nLet's approach this problem step by step and measure our progress as we go.\n\n\nFor each question present the reasoning followed by the correct answer.\nKeywords: mathematics, problem-solving, step-by-step, logical reasoning, expert\nIterations completed:   0%|          | 0/3 [00:24<?, ?it/s]\nTime taken to find best prompt: 24.79972267150879 sec\n_______________________________________________________________________\n\nVariations 5:\nExpert Profile:\nYou are a mathematics expert with a strong background in various fields of mathematics, including algebra, calculus, geometry, and statistics. You have a deep understanding of mathematical theories and principles, and you are skilled at solving complex problems with precision and clarity. Your expertise allows you to approach problems methodically, breaking them down into manageable steps and applying appropriate mathematical techniques to find solutions. You are also adept at explaining your reasoning and methods in a clear and concise manner, making it easy for others to follow your thought process. Whether the problem involves solving equations, proving theorems, or analyzing data, you have the knowledge and skills to tackle it effectively. Your proficiency in mathematics is highly valuable in both academic and practical applications, and you are well-equipped to provide accurate and insightful solutions to a wide range of mathematical problems.:\nPrompt:\nLet's simplify this problem step by step to make it easier to solve.\n\n\nFor each question present the reasoning followed by the correct answer.\nKeywords: mathematics, problem-solving, step-by-step, logical reasoning, expert\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for PromptWizard\nDESCRIPTION: Sets up the environment by importing necessary modules from PromptWizard and other libraries. Includes path configuration, typing, and Azure OpenAI authentication setup. Loads environment variables from a .env file to configure API access.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0, \"../../\")\nimport promptwizard\nfrom promptwizard.glue.promptopt.instantiate import GluePromptOpt\nfrom promptwizard.glue.promptopt.techniques.common_logic import DatasetSpecificProcessing\nfrom promptwizard.glue.common.utils.file import save_jsonlist\nfrom typing import Any\nfrom tqdm import tqdm\nimport json\nimport os\nfrom azure.identity import get_bearer_token_provider, AzureCliCredential\nfrom openai import AzureOpenAI\n\nfrom dotenv import load_dotenv\nload_dotenv(override = True)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing BBH Processor\nDESCRIPTION: Creates an instance of the BBH dataset processor class to handle the specific requirements of the BBH dataset.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbbh_processor = BBH()\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for PromptWizard Prompt Optimization\nDESCRIPTION: Imports necessary libraries including PromptWizard modules, dataset handling utilities, and environment variable management. Sets up the system to use the PromptWizard framework for prompt optimization on language models.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/svamp/demo.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0, \"../../\")\nimport os\nimport promptwizard\nfrom promptwizard.glue.promptopt.instantiate import GluePromptOpt\nfrom promptwizard.glue.promptopt.techniques.common_logic import DatasetSpecificProcessing\nfrom promptwizard.glue.common.utils.file import save_jsonlist\nfrom typing import Any\nfrom tqdm import tqdm\nimport json\nfrom datasets import load_dataset\n\nfrom dotenv import load_dotenv\nload_dotenv(override = True)\n\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for PromptWizard\nDESCRIPTION: Imports necessary libraries and modules for using PromptWizard, including path manipulation, promptwizard components, typing, data handling utilities, and environment variable loading.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0, \"../../\")\nimport promptwizard\nfrom promptwizard.glue.promptopt.instantiate import GluePromptOpt\nfrom promptwizard.glue.promptopt.techniques.common_logic import DatasetSpecificProcessing\nfrom promptwizard.glue.common.utils.file import save_jsonlist\nfrom typing import Any\nfrom tqdm import tqdm\nfrom re import compile, findall\nimport os\nfrom datasets import load_dataset\nimport yaml\nfrom dotenv import load_dotenv\nload_dotenv(override = True)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Optimized Prompt\nDESCRIPTION: Evaluates the performance of the optimized prompt on the test dataset.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/aquarat/demo.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngp.EXPERT_PROFILE = expert_profile\ngp.BEST_PROMPT = best_prompt\n\n# Function call to evaluate the prompt\naccuracy = gp.evaluate(test_file_name)\n\nprint(f\"Final Accuracy: {accuracy}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration File Paths\nDESCRIPTION: Sets the paths to the configuration files used for prompt optimization, including the promptopt configuration and setup configuration files located in the configs directory.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npath_to_config = \"configs\"\npromptopt_config_path = os.path.join(path_to_config, \"promptopt_config.yaml\")\nsetup_config_path = os.path.join(path_to_config, \"setup_config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Scenario 1: No Training Data and No In-Context Examples\nDESCRIPTION: Sets up the configuration for the first scenario where there is no training data and in-context examples are not desired in the final prompt. Defines task description, base instruction, and number of mutation rounds.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfile_path = 'configs/promptopt_config.yaml' \n# Set the following based on the use case\nconfig_dict = {\n                \"task_description\": \"You are a mathematics expert. You will be given a mathematics problem which you need to solve\",\n                \"base_instruction\": \"Lets think step by step.\",\n                \"mutation_rounds\": 5\n               }\nupdate_yaml_file(file_path,config_dict)\n```\n\n----------------------------------------\n\nTITLE: Running Prompt Optimization with Synthetic Data\nDESCRIPTION: Executes prompt optimization using synthetic data with specified configuration and processor\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ngp = GluePromptOpt(promptopt_config_path,\n                   setup_config_path,\n                   dataset_jsonl = \"train_synthetic.jsonl\",\n                   data_processor=gsm8k_processor)\nbest_prompt, expert_profile = gp.get_best_prompt(use_examples=True,run_without_train_examples=False,generate_synthetic_examples=False)\n```\n\n----------------------------------------\n\nTITLE: Generating Best Prompt with Synthetic Examples\nDESCRIPTION: Calls the get_best_prompt function to generate synthetic examples and optimize prompts\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbest_prompt, expert_profile = gp.get_best_prompt(use_examples=False,run_without_train_examples=False,generate_synthetic_examples=True)\n```\n\n----------------------------------------\n\nTITLE: Running Prompt Optimization for Scenario 1\nDESCRIPTION: Calls the optimization function to get the best prompt without using examples, training data, or synthetic examples. The function returns the best prompt and expert profile.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbest_prompt, expert_profile = gp.get_best_prompt(use_examples=False,run_without_train_examples=True,generate_synthetic_examples=False)\n```\n\n----------------------------------------\n\nTITLE: Loading and Saving GSM8K Dataset in Python\nDESCRIPTION: This code loads the GSM8K dataset, processes it, and saves it in JSONL format. It samples 100 examples from the training set and uses the full test set.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/gsm8k/demo.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif not os.path.exists(\"data\"):\n    os.mkdir(\"data\")\n    \ndataset = load_dataset(\"openai/gsm8k\", \"main\")\nnum_samples = 0\nfor dataset_type in ['train','test']:\n    data_list = []\n    for data in dataset[dataset_type]:\n        data_list.append({\"question\": data['question'], \"answer\": data['answer']})\n        if num_samples == 100 and dataset_type == 'train': # We sample only 100 train examples and use 25 out them for training randomly\n            break\n        num_samples += 1\n    gsm8k_processor.dataset_to_jsonl(\"data/\"+ dataset_type+'.jsonl', dataset=data_list)\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing SVAMP Dataset\nDESCRIPTION: Loads the SVAMP dataset from Hugging Face, creates a data directory if it doesn't exist, and processes both training and test data. For training, only a subset of samples (100) is used.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/svamp/demo.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\nif not os.path.exists(\"data\"):\n    os.mkdir(\"data\")\n\ndataset = load_dataset(\"ChilleD/SVAMP\")\n\nfor dataset_type in ['train','test']:\n    data_list = []\n    num_samples = 0\n    for data in dataset[dataset_type]:\n        data_list.append({\"question\": data['question_concat'], \"answer\": data['Answer']})\n        if dataset_type == 'train' and num_samples == 100: # We sample only 100 train examples and use 25 out them for training randomly\n            break\n        num_samples += 1\n    svamp_processor.dataset_to_jsonl(\"data/\"+ dataset_type+'.jsonl', dataset=data_list)\n```\n\n----------------------------------------\n\nTITLE: Initializing Configuration Dictionary\nDESCRIPTION: Sets up initial configuration parameters for synthetic training example generation\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconfig_dict = {\n                \"num_train_examples\":20\n               }\nupdate_yaml_file(file_path,config_dict)\n```\n\n----------------------------------------\n\nTITLE: Creating GluePromptOpt Object in Python\nDESCRIPTION: This code creates an instance of GluePromptOpt, which is used for calling prompt optimization and inference functionalities.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/gsm8k/demo.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngp = GluePromptOpt(promptopt_config_path,\n                   setup_config_path,\n                   train_file_name,\n                   gsm8k_processor)\n```\n\n----------------------------------------\n\nTITLE: Initializing PromptOpt Instance\nDESCRIPTION: Creates a GluePromptOpt instance for prompt optimization and inference.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/aquarat/demo.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngp = GluePromptOpt(promptopt_config_path,\n                   setup_config_path,\n                   train_file_name,\n                   aquarat_processor)\n```\n\n----------------------------------------\n\nTITLE: Initializing GluePromptOpt Instance\nDESCRIPTION: Creates an instance of GluePromptOpt class with configuration paths and optional parameters\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngp = GluePromptOpt(promptopt_config_path,\n                   setup_config_path,\n                   dataset_jsonl=None,\n                   data_processor=None)\n```\n\n----------------------------------------\n\nTITLE: Creating PromptOpt Object for Scenario 1\nDESCRIPTION: Creates a GluePromptOpt object for scenario 1 where no dataset or data processor is provided, as this scenario doesn't use training data for optimization.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngp = GluePromptOpt(promptopt_config_path,\n                   setup_config_path,\n                   dataset_jsonl=None,\n                   data_processor=None)\n```\n\n----------------------------------------\n\nTITLE: Setting Up File Paths for Configuration\nDESCRIPTION: Defines the file paths for training and test data as well as various configuration files needed for prompt optimization. Includes paths for LLM configuration, prompt optimization settings, and setup configuration.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/bbh/demo.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntrain_file_name = os.path.join(\"data/\"+dataset_to_run, \"train.jsonl\")\ntest_file_name = os.path.join(\"data/\"+dataset_to_run, \"test.jsonl\")\npath_to_config = \"configs\"\nllm_config_path = os.path.join(path_to_config, \"llm_config.yaml\")\npromptopt_config_path = os.path.join(path_to_config, \"promptopt_config.yaml\")\nsetup_config_path = os.path.join(path_to_config, \"setup_config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Setting File Paths for PromptWizard Configuration\nDESCRIPTION: Defines file paths for training and test data along with configuration files needed for prompt optimization.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/svamp/demo.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrain_file_name = os.path.join(\"data\", \"train.jsonl\")\ntest_file_name = os.path.join(\"data\", \"test.jsonl\")\npath_to_config = \"configs\"\nllm_config_path = os.path.join(path_to_config, \"llm_config.yaml\")\npromptopt_config_path = os.path.join(path_to_config, \"promptopt_config.yaml\")\nsetup_config_path = os.path.join(path_to_config, \"setup_config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Setting File Paths for Prompt Optimization in Python\nDESCRIPTION: This snippet sets the file paths for training and test data, as well as configuration files needed for prompt optimization.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/gsm8k/demo.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrain_file_name = os.path.join(\"data\", \"train.jsonl\")\ntest_file_name = os.path.join(\"data\", \"test.jsonl\")\npath_to_config = \"configs\"\npromptopt_config_path = os.path.join(path_to_config, \"promptopt_config.yaml\")\nsetup_config_path = os.path.join(path_to_config, \"setup_config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Setting File Paths\nDESCRIPTION: Defines file paths for data, configuration, and result files used in the implementation.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/aquarat/demo.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrain_file_name = os.path.join(\"data\", \"train.jsonl\")\ntest_file_name = os.path.join(\"data\", \"test.jsonl\")\npath_to_config = \"configs\"\nllm_config_path = os.path.join(path_to_config, \"llm_config.yaml\")\npromptopt_config_path = os.path.join(path_to_config, \"promptopt_config.yaml\")\nsetup_config_path = os.path.join(path_to_config, \"setup_config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Instantiating GSM8k Processor\nDESCRIPTION: Creates an instance of the GSM8k dataset processor class\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ngsm8k_processor = GSM8k()\n```\n\n----------------------------------------\n\nTITLE: Initializing SVAMP Processor Instance\nDESCRIPTION: Creates an instance of the SVAMP dataset processor class for handling dataset-specific processing.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/svamp/demo.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsvamp_processor = SVAMP()\n```\n\n----------------------------------------\n\nTITLE: Instantiating GSM8k Processor in Python\nDESCRIPTION: This snippet creates an instance of the GSM8k class for processing the GSM8K dataset.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/gsm8k/demo.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngsm8k_processor = GSM8k()\n```\n\n----------------------------------------\n\nTITLE: Citing PromptWizard in Academic Work\nDESCRIPTION: BibTeX citation format for the PromptWizard paper. This citation should be used when referencing the Task-Aware Prompt Optimization Framework in academic publications.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bibtex\nCODE:\n```\n@misc{agarwal2024promptwizardtaskawarepromptoptimization,\n      title={PromptWizard: Task-Aware Prompt Optimization Framework}, \n      author={Eshaan Agarwal and Joykirat Singh and Vivek Dani and Raghav Magazine and Tanuja Ganu and Akshay Nambi},\n      year={2024},\n      eprint={2405.18369},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL},\n      url={https://arxiv.org/abs/2405.18369}, \n}\n```\n\n----------------------------------------\n\nTITLE: Creating AQUA-RAT Processor Instance\nDESCRIPTION: Instantiates the AQUARAT class for dataset processing.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/aquarat/demo.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\naquarat_processor = AQUARAT()\n```\n\n----------------------------------------\n\nTITLE: Solving System of Linear Equations\nDESCRIPTION: Solves a system of three linear equations using elimination and substitution methods to find values of x, y, and z.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: latex\nCODE:\n```\n\\[ \\begin{cases} \nx + 2y + z = 6 \\\\\n2x - y + 3z = 14 \\\\\n3x + y - z = 2 \n\\end{cases} \\]\n```\n\n----------------------------------------\n\nTITLE: Solving Definite Integral with Antiderivative Method\nDESCRIPTION: Demonstrates the process of finding the definite integral of 4x^3 - 2x + 1 from 0 to 1 using antiderivative method and fundamental theorem of calculus.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/scenarios/dataset_scenarios_demo.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: latex\nCODE:\n```\n\\[\n\\int_{0}^{1} (4x^3 - 2x + 1) \\, dx = F(1) - F(0) = 1 - 0 = 1\n\\]\n```\n\n----------------------------------------\n\nTITLE: Installing PromptWizard Repository\nDESCRIPTION: Commands to clone the PromptWizard repository and set up the development environment\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/PromptWizard\ncd PromptWizard\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment - macOS/Linux\nDESCRIPTION: Commands to create and activate a virtual environment on macOS/Linux systems\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment - Windows\nDESCRIPTION: Commands to create and activate a virtual environment on Windows systems\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nvenv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Installing Package in Development Mode\nDESCRIPTION: Command to install the PromptWizard package in development mode\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for PromptWizard Setup\nDESCRIPTION: Imports required libraries and modules for the PromptWizard implementation, including system path configuration and environment variable loading.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/aquarat/demo.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0, \"../../\")\nimport promptwizard\nfrom promptwizard.glue.promptopt.instantiate import GluePromptOpt\nfrom promptwizard.glue.promptopt.techniques.common_logic import DatasetSpecificProcessing\nfrom promptwizard.glue.common.utils.file import save_jsonlist\nfrom typing import Any\nfrom tqdm import tqdm\nimport json\nimport os\nfrom datasets import load_dataset\n\nfrom dotenv import load_dotenv\nload_dotenv(override = True)\n```\n\n----------------------------------------\n\nTITLE: Saving Optimized Prompt and Expert Profile in Python\nDESCRIPTION: This code saves the optimized prompt and expert profile to pickle files and prints them to the console.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/gsm8k/demo.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pickle \n\nif not os.path.exists(\"results\"):\n    os.system(\"mkdir results\")\n    \nwith open(\"results/best_prompt.pkl\", 'wb') as f:\n    pickle.dump(best_prompt, f)\nwith open(\"results/expert_profile.pkl\", 'wb') as f:\n    pickle.dump(expert_profile, f)\n\nprint(f\"Best prompt: {best_prompt} \\nExpert profile: {expert_profile}\")\n```\n\n----------------------------------------\n\nTITLE: Saving Optimized Prompt and Expert Profile\nDESCRIPTION: Creates a results directory if it doesn't exist and saves the optimized prompt and expert profile as pickle files for later use. Also prints the results to the console.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/svamp/demo.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pickle \n\nif not os.path.exists(\"results\"):\n    os.system(\"mkdir results\")\n\nwith open(\"results/best_prompt.pkl\", 'wb') as f:\n    pickle.dump(best_prompt, f)\nwith open(\"results/expert_profile.pkl\", 'wb') as f:\n    pickle.dump(expert_profile, f)\n\nprint(f\"Best prompt: {best_prompt} \\nExpert profile: {expert_profile}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Flexible Container Layouts with Media Queries in SCSS\nDESCRIPTION: This code defines responsive container layouts using flexbox and media queries. It adjusts the display properties and flex behavior based on screen size breakpoints.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/docs/static/css/bulma.css.map.txt#2025-04-21_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\nAwDtpWA;EAEE,gBAAgB;AxDwpWlB;;AwD1pWA;EAII,SAAS;EACT,gBAAgB;EAChB,eAAe;EACf,kBAAkB;EAClB,QAAQ;EACR,qCAAqC;AxD0pWzC;;AwDnqWA;EAYI,YAAY;AxD2pWhB;;AC/rWE;EuDwBF;IAeI,aAAa;ExD6pWf;AACF;;AwD5pWA;EACE,kBAAkB;AxD+pWpB;;ACzsWE;EuDyCF;IAKM,aAAa;ExDgqWjB;EwDrqWF;IAOQ,sBAAsB;ExDiqW5B;AACF;;AC9sWE;EuDqCF;IASI,aAAa;IACb,uBAAuB;ExDqqWzB;EwD/qWF;IvDsBI,oBuDVwC;ExDsqW1C;AACF\n```\n\n----------------------------------------\n\nTITLE: Saving Optimization Results\nDESCRIPTION: Saves the optimized prompt and expert profile to pickle files.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/demos/aquarat/demo.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pickle \n\nif not os.path.exists(\"results\"):\n    os.system(\"mkdir results\")\n\nwith open(\"results/best_prompt.pkl\", 'wb') as f:\n    pickle.dump(best_prompt, f)\nwith open(\"results/expert_profile.pkl\", 'wb') as f:\n    pickle.dump(expert_profile, f)\n\nprint(f\"Best prompt: {best_prompt} \\nExpert profile: {expert_profile}\")\n```\n\n----------------------------------------\n\nTITLE: Styling Button Color Variants with Responsive Adjustments in SCSS\nDESCRIPTION: This code defines styling for button color variants with different background and text color combinations. It includes hover states, active states, and responsive layout adjustments using media queries.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/docs/static/css/bulma.css.map.txt#2025-04-21_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\nBtDtCqB;AFi/U7B;;AwD3+UA;;;EAqCU,yB7CgEuB;E6C/DvB,ctD5CmB;AFw/U7B;;AwDl/UA;EAyCU,ctD/CmB;EsDgDnB,YAAY;AxD68UtB;;AwDv/UA;EA4CY,UAAU;AxD+8UtB;;AwD3/UA;EA+CY,UAAU;AxDg9UtB;;AwD//UA;EAmDY,ctDzDiB;AFygV7B;;AwDngVA;EAqDc,uCtD3De;AF6gV7B;;AwDvgVA;EAyDc,yBtD/De;EsDgEf,qBtDhEe;EsDiEf,YtDpDiB;AFsgV/B;;AwD7gVA;EAiEU,4EAAyG;AxDg9UnH;;ACx8UE;EuDzEF;IAoEc,4EAAyG;ExDk9UrH;AACF\n```\n\n----------------------------------------\n\nTITLE: Setting Up Utility Classes for Component Spacing in SCSS\nDESCRIPTION: This code snippet defines utility classes for component spacing and layout. It includes classes for controlling margins, padding, and element dimensions.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/docs/static/css/bulma.css.map.txt#2025-04-21_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\nAwDnqWA;;EAEE,YAAY;EACZ,cAAc;AxDsqWhB;;AwDpqWA;EACE,YAAY;EACZ,cAAc;EACd,oBAlJ6B;AxDyzW/B;;AyDrzWA;EACE,oBAL2B;AzD6zW7B;;AC5tWE;EwD7FF;IAMM,oBAT8B;EzDi0WlC;EyD9zWF;IAQM,qBAV8B;EzDm0WlC;AACF;;A0Dl0WA;EACE,yBxDS4B;EwDR5B,yBAJ+B;A1Dy0WjC\n```\n\n----------------------------------------\n\nTITLE: Styling Form Inputs in CSS\nDESCRIPTION: Sets styles for form input elements including borders, padding, and focus states.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/docs/static/css/bulma.css.map.txt#2025-04-21_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.form-input {\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  padding: 0.375rem 0.75rem;\n}\n\n.form-input:focus {\n  border-color: #80bdff;\n  box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);\n  outline: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons in CSS\nDESCRIPTION: Defines base styles for buttons including padding, font, border, and colors. Includes hover and focus states.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/docs/static/css/bulma.css.map.txt#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.btn {\n  border-radius: 0.25rem;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n  text-align: center;\n}\n\n.btn:hover {\n  opacity: 0.8;\n}\n\n.btn:focus {\n  outline: 3px solid #80bdff;\n  outline-offset: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Button and Form Styling\nDESCRIPTION: CSS rules defining styles for buttons and form elements including colors, borders and states\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/docs/static/css/bulma.css.map.txt#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngbBlsEA;\nEAEE,4BdE4B;\nEcD5B,kBdyDU;\nEcxDV,kBAAkB;\nEAEhB,sCAXoD;\nAhB8sExD;;\n\nAgBzsEA;\nEAUI,mBAAmB;\nEACnB,0BAA0B;\nAhBmsE9B;;\n```\n\n----------------------------------------\n\nTITLE: Security Documentation in Markdown\nDESCRIPTION: Standard Microsoft security documentation block that provides guidelines for reporting security vulnerabilities, including contact information and required report details.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- BEGIN MICROSOFT SECURITY.MD V0.0.9 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet) and [Xamarin](https://github.com/xamarin).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/security.md/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/security.md/msrc/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/security.md/msrc/pgp).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/security.md/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/security.md/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n```\n\n----------------------------------------\n\nTITLE: Color and Dimension Styling\nDESCRIPTION: CSS rules for setting colors, dimensions and positions of interface elements\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/docs/static/css/bulma.css.map.txt#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nEAmEM,YAAwB;\nEACxB,WAAuB;\nAf2nE7B;;\n\nAe/rEA;\nEAmEM,YAAwB;\nEACxB,WAAuB;\nAfgoE7B;;\n\nAepsEA;\nEAmEM,aAAwB;\nEACxB,YAAuB;\nAfqoE7B;;\n```\n\n----------------------------------------\n\nTITLE: Defining Card and Component Layout Styles in SCSS\nDESCRIPTION: This code snippet defines layout properties for card components including margin, padding, and responsive behaviors. It uses media queries to adjust layout properties based on screen size.\nSOURCE: https://github.com/microsoft/promptwizard/blob/main/docs/static/css/bulma.css.map.txt#2025-04-21_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\nAwDrtWA;EAwEM,eA/E0B;AxDguWhC;;AC5oWE;EuD7EF;IA4EQ,oBAlF8B;ExDouWpC;AACF;;AClpWE;EuD7EF;IAgFQ,qBArF8B;ExDyuWpC;AACF;;AwDruWA;EAqFM,mBAAmB;EACnB,aAAa;AxDopWnB;;AwD1uWA;EAwFQ,YAAY;EACZ,cAAc;AxDspWtB;;AwD/uWA;EA2FI,gBAAgB;AxDwpWpB;;AwDnvWA;EA6FI,iBAAiB;AxD0pWrB\n```"
  }
]