[
  {
    "owner": "autodesk",
    "repo": "arnold-usd",
    "content": "TITLE: Generating Arnold Schema with Custom Command (CMake)\nDESCRIPTION: This snippet defines a custom command that generates the Arnold schema using a Python script. It sets the PYTHONPATH, LD_LIBRARY_PATH, and PATH environment variables before executing the Python script. The output is the schema.usda file, and the command depends on the createSchemaFile.py script.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Custom command for generating an arnold schema from the arnold api\nadd_custom_command(OUTPUT ${SCHEMAS_USDA}\n    COMMAND\n    ${CMAKE_COMMAND} -E env\n    \"PYTHONPATH=${PYTHONPATHS}\"\n    \"LD_LIBRARY_PATH=${LIBRARY_PATHS}\"\n    \"PATH=${LIBRARY_PATHS}\"\n    ${PYTHON_EXECUTABLE} \"${CREATE_SCHEMA_PY}\" \"${SCHEMAS_OUT}\"\n    DEPENDS \"${CREATE_SCHEMA_PY}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Generated Schema Files (CMake)\nDESCRIPTION: This snippet installs the generated schema files (generatedSchema.usda and schema.usda) and the updated plugInfo.json to the specified destination directories. It handles both the standard schema install location and, conditionally, the location within the procedural's directory when certain options are enabled.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${SCHEMAS_SOURCE_OUT}/generatedSchema.usda\"\n    DESTINATION \"${PREFIX_SCHEMA}/usdArnold/resources\")\n\ninstall(FILES \"${SCHEMAS_SOURCE_OUT}/generatedSchema.usda\"\n    DESTINATION \"${PREFIX_SCHEMA}/usdArnold/resources/usdArnold\")\n\ninstall(FILES \"${SCHEMAS_USDA}\"\n    DESTINATION \"${PREFIX_SCHEMA}/usdArnold/resources/usdArnold\")\n\ninstall(FILES \"${SCHEMAS_PLUGINFO}\"\n    DESTINATION \"${PREFIX_SCHEMA}/usdArnold/resources\")\n\nif (ENABLE_HYDRA_IN_USD_PROCEDURAL AND BUILD_PROCEDURAL AND BUILD_WITH_USD_STATIC)\n    install(FILES \"${SCHEMAS_PLUGINFO}\"\n        DESTINATION \"${PREFIX_PROCEDURAL}/usd/usdArnold/resources\")\n    install(FILES \"${SCHEMAS_SOURCE_OUT}/generatedSchema.usda\"\n        DESTINATION \"${PREFIX_PROCEDURAL}/usd/usdArnold/resources\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Common Dependencies for hdArnold\nDESCRIPTION: This snippet defines USD dependencies based on the USD version and adds them to the hdArnold target. It then includes necessary directories and sets compile definitions.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/render_delegate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n    set(_usd_deps arch plug trace tf vt gf work sdf hf hd usdImaging usdLux pxOsd cameraUtil)\n    if (${USD_VERSION} VERSION_LESS \"0.20.5\")\n        set(_usd_deps ${_usd_deps} hdx)\n    endif ()\n    add_common_dependencies(\n        TARGET_NAME hdArnold\n        USD_DEPENDENCIES ${_usd_deps})\n    target_include_directories(hdArnold PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/../../libs/render_delegate\")\n    target_compile_definitions(hdArnold PRIVATE \"HDARNOLD_EXPORTS=1\")\n    target_link_libraries(hdArnold PRIVATE render_delegate)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Doxygen Execution\nDESCRIPTION: This snippet adds a custom command to execute Doxygen. It specifies the output file (`${DOXYGEN_INDEX}`), dependencies (README.md, building.md, Doxyfile, conventions.md, documenting.md, naming_conventions.md, header files), the Doxygen executable, and the Doxyfile to use. The working directory is set to the parent directory of the current source directory.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ${DOXYGEN_INDEX}\n    DEPENDS\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../README.md\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/building.md\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/conventions.md\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/documenting.md\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/naming_conventions.md\"\n    ${DELEGATE_HDRS}\n    ${NDR_HDRS}\n    ${TRANSLATOR_HDRS}\n    COMMAND ${DOXYGEN_EXECUTABLE} \"${DOXYGEN_OUT}\"\n    WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/..\"\n    COMMENT \"Generating API documentation with Doxygen\"\n    VERBATIM)\n```\n\n----------------------------------------\n\nTITLE: Adding Common Includes with CMake\nDESCRIPTION: This snippet adds common include directories to the `translator` target.  It uses a function `add_common_includes` to set the include paths, and specifies that the `translator` target depends on the `common` target.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_common_includes(TARGET_NAME translator DEPENDENCIES common)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Paths\nDESCRIPTION: Appends to the `CMAKE_MODULE_PATH` variable to specify the directories where CMake should search for modules. This includes custom modules in the project's `cmake/modules` and `cmake/utils` directories, as well as the USD CMake modules.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake/modules\" 0)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake/utils\" 0)\nlist(APPEND CMAKE_MODULE_PATH \"${USD_LOCATION}/lib/cmake/\" 0)\n```\n\n----------------------------------------\n\nTITLE: Installing the Target in CMake\nDESCRIPTION: Installs the target library to the specified destination. The destination path is determined by the `PREFIX_PROCEDURAL` variable.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${PROC_NAME}\n    DESTINATION \"${PREFIX_PROCEDURAL}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Doxygen Documentation\nDESCRIPTION: This snippet installs the generated Doxygen HTML documentation to the `docs` directory within the installation prefix. It copies the entire `html` directory to the specified destination during the installation process (e.g., when running `make install`).\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/out/html\"\n    DESTINATION docs)\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions for the Target in CMake\nDESCRIPTION: Defines compiler definitions for the target library. It sets the `USD_PROCEDURAL_NAME` and potentially `ARNOLD_HAS_SCENE_FORMAT_API` based on the existence of `ai_scene_format.h` and the `BUILD_PROC_SCENE_FORMAT` flag.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${PROC_NAME} PRIVATE USD_PROCEDURAL_NAME=${USD_PROCEDURAL_NAME})\n\nif (EXISTS \"${ARNOLD_INCLUDE_DIR}/ai_scene_format.h\" AND BUILD_PROC_SCENE_FORMAT)\n    target_compile_definitions(${PROC_NAME} PRIVATE ARNOLD_HAS_SCENE_FORMAT_API)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Generated Schema (CMake)\nDESCRIPTION: This snippet defines a custom target named 'generatedSchema' that depends on the generatedSchema.usda file. This target ensures that the schema is generated by usdGenSchema before any other targets that depend on it.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(generatedSchema\n    DEPENDS \"${SCHEMAS_SOURCE_OUT}/generatedSchema.usda\"\n)\n```\n\n----------------------------------------\n\nTITLE: Add Shared Library and Dependencies (imagingArnold)\nDESCRIPTION: Creates the imagingArnold shared library and configures its dependencies and compile definitions. It uses the `add_library` command to create the library, specifies the source files, and sets the compile definitions for exporting symbols.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/scene_delegate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT BUILD_WITH_USD_STATIC)\n    add_library(imagingArnold SHARED ${COMMON_SRC} ${SRC})\n    if (BUILD_HEADERS_AS_SOURCES)\n        target_sources(imagingArnold PRIVATE ${COMMON_HDR} ${HDR})\n    endif ()\n    add_common_dependencies(\n        TARGET_NAME imagingArnold\n        USD_DEPENDENCIES arch js plug tf trace vt gf work sdf hf hd)\n    target_compile_definitions(imagingArnold PRIVATE \"IMAGINGARNOLD_EXPORTS=1\")\n    target_link_libraries(imagingArnold PRIVATE common)\n\n    set_target_properties(imagingArnold PROPERTIES PREFIX \"\")\n\n    source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SRC} ${HDR})\n    source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/../common PREFIX common FILES ${COMMON_SRC} ${COMMON_HDR})\n\n    set(PLUGINFO_OUT \"${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\")\n    \n    set(LIB_EXTENSION ${CMAKE_SHARED_LIBRARY_SUFFIX})\n    configure_file(\n        plugInfo.json.in\n        \"${PLUGINFO_OUT}\"\n    )\n\n    install(TARGETS imagingArnold\n        DESTINATION \"${PREFIX_PLUGINS}\")\n\n    install(FILES ${PLUGINFO_OUT}\n        DESTINATION \"${PREFIX_PLUGINS}/imagingArnold/resources\")\n\n    #install(FILES ${HDR}\n    #    DESTINATION \"${PREFIX_HEADERS}/arnold_usd/scene_delegate\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries with CMake (Interface)\nDESCRIPTION: This snippet links the `translator` library with other libraries using the `INTERFACE` keyword.  This means that any target that links against `translator` will also automatically link against the specified libraries. The Arnold library (`ARNOLD_LIBRARY`) and the `common` library are linked.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(translator INTERFACE common)\ntarget_link_libraries(translator INTERFACE \"${ARNOLD_LIBRARY}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling testing and adding testsuite\nDESCRIPTION: Enables testing and adds the testsuite subdirectory if both `BUILD_TESTSUITE` and `BUILD_PROCEDURAL` are enabled.  `enable_testing()` is a CMake command that enables testing support using CTest.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_TESTSUITE AND BUILD_PROCEDURAL)\n    enable_testing()\n    add_subdirectory(testsuite)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Common Includes CMake\nDESCRIPTION: This command adds common include paths to the specified target ('common'). It also specifies dependencies ('vt', 'arch', 'usd', 'usdShade', 'tf'), ensuring that these libraries are built before 'common'.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/common/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_common_includes(TARGET_NAME common DEPENDENCIES vt;arch;usd;usdShade;tf)\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectories for components\nDESCRIPTION: Adds subdirectories for libraries, plugins, schemas, documentation, and potentially a usdGenSchema tool. This organizes the build process by separating different components into their own directories.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(libs)\nadd_subdirectory(plugins)\n\n\nif (BUILD_USDGENSCHEMA_ARNOLD)\n    message(STATUS \"Building custom usdGenSchema\")\n    add_subdirectory(tools/usdgenschema)\nendif()\n\n# Building the schemas\nif (BUILD_SCHEMAS)\n    add_subdirectory(schemas)\n    install(FILES plugInfo.json\n        DESTINATION \"${PREFIX_SCHEMA}\")\nendif ()\n\nif (BUILD_DOCS)\n    add_subdirectory(docs)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Link Libraries CMake\nDESCRIPTION: This snippet links the `render_delegate` target with the `common` library as an interface dependency. This ensures that the render delegate has access to the necessary common functionality.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(render_delegate INTERFACE common)\n```\n\n----------------------------------------\n\nTITLE: Linking Transitive Shared Libraries with CMake\nDESCRIPTION: This snippet links transitive shared libraries that USD depends on.  These libraries are added as interface dependencies, meaning that targets linking to `translator` will also link to these transitive dependencies.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(translator INTERFACE \"${USD_TRANSITIVE_SHARED_LIBS}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Variables with CMake\nDESCRIPTION: This snippet sets several CMake variables that define the output directories and file paths for the generated Arnold USD schemas. These variables are used throughout the CMake file to specify where the generated files should be placed.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SCHEMAS_OUT \"${CMAKE_CURRENT_BINARY_DIR}/${ARNOLD_VERSION}/${USD_VERSION}\")\nset(SCHEMAS_SOURCE_OUT \"${SCHEMAS_OUT}/source\")\n\nset(SCHEMAS_TOKENS \"${SCHEMAS_SOURCE_OUT}/tokens.cpp\")\nset(SCHEMAS_PLUGINFO \"${SCHEMAS_SOURCE_OUT}/plugInfo.json\")\nset(SCHEMAS_WRAP_MODULE \"${SCHEMAS_OUT}/wrapModule.cpp\")\nset(SCHEMAS_USDA \"${SCHEMAS_OUT}/schema.usda\")\nset(CREATE_SCHEMA_PY \"${CMAKE_CURRENT_SOURCE_DIR}/createSchemaFile.py\")\n```\n\n----------------------------------------\n\nTITLE: Finding USD and Arnold packages\nDESCRIPTION: Uses the `find_package` command to locate the USD and Arnold libraries. The `REQUIRED` keyword ensures that the build will fail if either package is not found.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(USD REQUIRED)\nfind_package(Arnold REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for the Target in CMake\nDESCRIPTION: Links the target library with the necessary libraries, including `translator`, `common`, and Hydra-related libraries if Hydra integration is enabled.  Also links with `dl` on Apple/Linux and TBB libraries.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# LINK\ntarget_link_libraries(${PROC_NAME} PRIVATE translator common)\nif (ENABLE_HYDRA_IN_USD_PROCEDURAL)\n    target_link_libraries(${PROC_NAME} PRIVATE render_delegate ndrObjects usdImaging usdImagingArnoldObjects)\nendif()\n\nif (APPLE OR LINUX)\n    target_link_libraries(${PROC_NAME} PRIVATE dl)\nendif ()\n\n# TODO: Normally TBB should have already been added by add_common_dependencies on the dependent libraries,\n# we need to investigate why this is not the case.\ntarget_link_libraries(${PROC_NAME} PRIVATE ${TBB_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Installing USD Plugins in CMake (Static Linking)\nDESCRIPTION: Installs the USD plugins when building with static USD. It installs the `plugInfo.json` files for the included USD plugins, including the ndr arnold and usd imaging arnold plugins, and the render delegate plugInfo.json. It uses custom functions `install_ndr_arnold_pluginfo` and `install_usdimaging_arnold_pluginfo` and configures the render delegate plugInfo.json.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_WITH_USD_STATIC)\n    # When linking statically we need to install the plugInfos for the included usd plugins.\n    install(DIRECTORY \"${USD_LIBRARY_DIR}/usd\"\n            DESTINATION \"${PREFIX_PROCEDURAL}\")\n\n    if (ENABLE_HYDRA_IN_USD_PROCEDURAL)\n        # Install the ndr arnold pluginfo\n        install_ndr_arnold_pluginfo(\n            ../../usd_proc \n            \"${CMAKE_CURRENT_BINARY_DIR}/usd/ndrArnold/resources/plugInfo.json\"\n            \"${PREFIX_PROCEDURAL}/usd\")\n\n        # install the usd imaging arnold pluginfo\n        install_usdimaging_arnold_pluginfo(\n            ../../usd_proc\n            \"${CMAKE_CURRENT_BINARY_DIR}/usd/usdImagingArnold/resources/plugInfo.json\"\n            \"${PREFIX_PROCEDURAL}/usd\")\n\n        # Install the render delegate plugInfo.json\n        set(HDARNOLD_PLUGINFO \"${CMAKE_CURRENT_BINARY_DIR}/usd/hdArnold/resources/plugInfo.json\")\n        configure_file(\n            \"${HDARNOLD_PLUGINFO_SRC}\"\n            \"${HDARNOLD_PLUGINFO}\"\n        )\n        install(FILES \"${HDARNOLD_PLUGINFO}\"\n                DESTINATION \"${PREFIX_PROCEDURAL}/usd/hdArnold/resources\")\n    endif()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Globbing Header Files for Doxygen\nDESCRIPTION: These snippets use `file(GLOB_RECURSE)` to find all header files within specified directories (render_delegate, ndr, and translator). The `CONFIGURE_DEPENDS` flag ensures that the CMake configuration is rerun if any of these header files are added, removed, or modified.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB_RECURSE DELEGATE_HDRS CONFIGURE_DEPENDS\n    \"${CMAKE_SOURCE_DIR}/render_delegate/*.h\")\n\nfile(GLOB_RECURSE NDR_HDRS CONFIGURE_DEPENDS\n    \"${CMAKE_SOURCE_DIR}/ndr/*.h\")\n\nfile(GLOB_RECURSE TRANSLATOR_HDRS CONFIGURE_DEPENDS\n    \"${CMAKE_SOURCE_DIR}/translator/*.h\")\n```\n\n----------------------------------------\n\nTITLE: Generating USD Schema with usdGenSchema (CMake)\nDESCRIPTION: This snippet defines a custom command that generates the USD schema using either a custom Arnold-specific usdGenSchema or the standard USD usdGenSchema tool.  It sets the PYTHONPATH, LD_LIBRARY_PATH, and PATH environment variables before executing the tool. The output is the generatedSchema.usda file in the source directory, and the command depends on the schemaSourceOut and schemaUsda targets.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_USDGENSCHEMA_ARNOLD)\n    # Running our custom usdGenSchemaArnold on the schema file\n    add_custom_command(OUTPUT \"${SCHEMAS_SOURCE_OUT}/generatedSchema.usda\"\n        COMMAND\n            ${CMAKE_COMMAND} -E env \"$<TARGET_FILE:usdGenSchemaArnold>\" \"${SCHEMAS_USDA}\" \"${SCHEMAS_SOURCE_OUT}\"\n        WORKING_DIRECTORY ${SCHEMAS_SOURCE_OUT}\n        DEPENDS schemaSourceOut schemaUsda usdGenSchemaArnold $<$<TARGET_EXISTS:usd_proc>:usd_proc>\n    )\nelse()\n    # Running usdGenSchema on the schema file\n    add_custom_command(OUTPUT \"${SCHEMAS_SOURCE_OUT}/generatedSchema.usda\"\n        COMMAND\n            ${CMAKE_COMMAND} -E env\n            \"PYTHONPATH=${PYTHONPATHS}\"\n            \"LD_LIBRARY_PATH=${LIBRARY_PATHS}\"\n            \"PATH=${LIBRARY_PATHS}\"\n            \"${PYTHON_EXECUTABLE}\" \"${USD_GENSCHEMA}\" \"${SCHEMAS_USDA}\"\n        WORKING_DIRECTORY ${SCHEMAS_SOURCE_OUT}\n        DEPENDS schemaSourceOut schemaUsda $<$<TARGET_EXISTS:usd_proc>:usd_proc>\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for the Target in CMake\nDESCRIPTION: Sets the include directories for the target library. These directories contain the header files required for the translator reader and writer components.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${PROC_NAME} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../../libs/translator/reader\")\ntarget_include_directories(${PROC_NAME} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../../libs/translator/writer\")\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library CMake\nDESCRIPTION: This command creates a static library named 'common' from the source files defined in the COMMON_SRC variable. The EXCLUDE_FROM_ALL option indicates that this library should not be built by default when building the entire project.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/common/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(common STATIC EXCLUDE_FROM_ALL ${COMMON_SRC})\n```\n\n----------------------------------------\n\nTITLE: Configuring and Generating PlugInfo for Test Suite\nDESCRIPTION: This snippet configures the `plugInfo.json` file using `configure_file` and generates plug info for the test suite using `generate_plug_info_for_testsuite`. It sets the library extension and creates the plugInfo file in the binary directory.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/render_delegate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n    set(HDARNOLD_PLUGINFO \"${CMAKE_CURRENT_BINARY_DIR}/plug/plugInfo.json\")\n    set(LIB_EXTENSION ${CMAKE_SHARED_LIBRARY_SUFFIX})\n    configure_file(\n        plugInfo.json.in\n        \"${HDARNOLD_PLUGINFO}\"\n    )\n    generate_plug_info_for_testsuite(TARGET_NAME render_delegate TARGET_PLUGINFO \"${HDARNOLD_PLUGINFO}\")\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating Shape Adapters (C++)\nDESCRIPTION: This CMake code iterates through a list of ARNOLD_USDIMAGING_CLASSES to generate adapter classes. It dynamically creates source code for these adapters by expanding macros and configuring an input template file.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/usd_imaging/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Create the shape adapter file\nset(CREATE_ADAPTER_CLASSES \"\")\nset(REGISTER_ADAPTER_CLASSES \"\")\nset(REGISTER_ARNOLD_TYPES \"\")\nforeach (each ${ARNOLD_USDIMAGING_CLASSES})\n    set(CREATE_ADAPTER_CLASSES \"${CREATE_ADAPTER_CLASSES}\\nCREATE_ADAPTER_CLASS(${each});\")\n    set(REGISTER_ADAPTER_CLASSES \"${REGISTER_ADAPTER_CLASSES}\\nREGISTER_ADAPTER_CLASS(${each})\")\nendforeach ()\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/shape_adapters.cpp.in\" \"${CMAKE_CURRENT_BINARY_DIR}/shape_adapters.cpp\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion CMake\nDESCRIPTION: This snippet conditionally includes subdirectories in the build process based on the values of CMake build flags.  For example, if BUILD_NDR_PLUGIN or ENABLE_HYDRA_IN_USD_PROCEDURAL is enabled, the 'ndr' subdirectory is added.  Each subdirectory represents a distinct component of the Arnold USD integration.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_NDR_PLUGIN OR ENABLE_HYDRA_IN_USD_PROCEDURAL)\n    add_subdirectory(ndr)\nendif ()\n\nif (BUILD_USD_IMAGING_PLUGIN OR ENABLE_HYDRA_IN_USD_PROCEDURAL)\n    add_subdirectory(usd_imaging)\nendif ()\n\nif (BUILD_SCENE_DELEGATE)\n    add_subdirectory(scene_delegate)\nendif ()\n\nif (BUILD_RENDER_DELEGATE)\n    add_subdirectory(render_delegate)\nendif ()\n\nif (BUILD_PROCEDURAL)\n    add_subdirectory(procedural)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Add Executable Target\nDESCRIPTION: This command creates an executable target named `usdGenSchemaArnold` using the source files defined in the `SRC` variable.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/tools/usdgenschema/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(usdGenSchemaArnold ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Linking Shared Libraries for USD with CMake\nDESCRIPTION: This snippet links shared libraries when USD is built as a shared library. It handles the case where USD is built monolithically or as separate libraries. It also links to platform-specific libraries like `dl` and `pthread` on Linux.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nelse () # USD shared lib build\n    if (USD_MONOLITHIC_BUILD)\n        target_link_libraries(translator INTERFACE usd_ms)\n    else ()\n        if (LINUX)\n            target_link_libraries(translator INTERFACE dl pthread)\n        endif ()\n        target_link_libraries(translator INTERFACE gf sdf tf usd ar arch pcp vt work)\n        target_link_libraries(translator INTERFACE usdGeom usdShade usdUtils usdLux usdVol usdSkel usdRender)\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Source and Adding Library\nDESCRIPTION: This snippet sets the source file for the hdArnold library and adds the library as a shared object. It includes a check to determine whether to build with a static USD.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/render_delegate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n    renderer_plugin.cpp)\nif (NOT BUILD_WITH_USD_STATIC)\n    add_library(hdArnold SHARED ${COMMON_SRC} ${SRC})\n    if (BUILD_HEADERS_AS_SOURCES)\n        target_sources(hdArnold PRIVATE ${COMMON_HDR} ${HDR})\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Set Compile Definitions CMake\nDESCRIPTION: This snippet conditionally sets compile definitions for the `render_delegate` target based on the values of `USD_HAS_UPDATED_COMPOSITOR` and `USD_HAS_FULLSCREEN_SHADER`. These definitions are used to enable or disable certain features based on the USD version.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (${USD_HAS_UPDATED_COMPOSITOR})\n    target_compile_definitions(render_delegate PUBLIC \"USD_HAS_UPDATED_COMPOSITOR=1\")\nendif ()\n\nif (${USD_HAS_FULLSCREEN_SHADER})\n    target_compile_definitions(render_delegate PUBLIC \"USD_HAS_FULLSCREEN_SHADER=1\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options for Hiding Symbols in CMake\nDESCRIPTION: Sets compile options for hiding exported symbols.  On Linux, it uses `-fvisibility=hidden`. On macOS, if building with static USD and Arnold version is >= 6.0.3.0, it appends linker flags to use an exported symbols list.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Hiding exported symbols\nif (LINUX)\n    target_compile_options(${PROC_NAME} PRIVATE -fvisibility=hidden)\nelif (APPLE)\n    if (BUILD_WITH_USD_STATIC)\n        if (${ARNOLD_VERSION} VERSION_GREATER_EQUAL \"6.0.3.0\")\n            string(APPEND CMAKE_SHARED_LINKER_FLAGS \" -Xlinker -S -Xlinker -x -Xlinker -exported_symbols_list -Xlinker ${CMAKE_CURRENT_SOURCE_DIR}/macos_export_list\")\n        endif ()\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building Arnold-USD on Windows with CMake\nDESCRIPTION: This CMake command configures the Arnold-USD project on Windows using Visual Studio 2019, specifying the locations of Arnold, USD, and Google Test. It sets the C++ standard to 14, disables building schemas, enables unit tests, and defines the installation prefix. It assumes a stock build of USD 20.08.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ..\n -G \"Visual Studio 16 2019\"\n -DCMAKE_INSTALL_PREFIX=C:\\arnold-usd\n -DCMAKE_CXX_STANDARD=14\n -DARNOLD_LOCATION=C:\\arnold\n -DUSD_LOCATION=C:\\USD\n -DBUILD_SCHEMAS=OFF\n -DBUILD_UNIT_TESTS=ON\n -DGOOGLETEST_LOCATION=C:\\googletest\n```\n\n----------------------------------------\n\nTITLE: Linking Static Libraries for USD with CMake\nDESCRIPTION: This snippet handles linking static libraries when USD is built statically. It iterates through the static libraries and links them using `-WHOLEARCHIVE` on Windows, and appropriate linker flags on Linux and macOS to ensure all symbols are included. If not on windows, it uses lists to collect the static libs to pass to the linker.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_WITH_USD_STATIC)\n    set(_staticlibs ${USD_usd_m_LIBRARY})\n    list(APPEND _staticlibs ${USD_TRANSITIVE_STATIC_LIBS})\n    list(REMOVE_DUPLICATES _staticlibs)\n    if (WIN32)\n        foreach(USD_M_LIB ${_staticlibs})\n            if(EXISTS ${USD_M_LIB})\n                target_link_options(translator INTERFACE \"-WHOLEARCHIVE:${USD_M_LIB}\")\n            else()\n                target_link_libraries(translator INTERFACE ${USD_M_LIB})\n            endif()\n        endforeach()\n    else ()\n        list(JOIN _staticlibs \",\" _staticlibs)\n        if (LINUX)\n            target_link_libraries(translator INTERFACE dl pthread)\n            target_link_options(translator INTERFACE \"-Wl,--whole-archive,${_staticlibs},--no-whole-archive\")\n        else () # APPLE\n            target_link_options(translator INTERFACE \"-Wl,-all_load,${_staticlibs}\")\n        endif ()\n    endif ()\nelse () # USD shared lib build\n    if (USD_MONOLITHIC_BUILD)\n        target_link_libraries(translator INTERFACE usd_ms)\n    else ()\n        if (LINUX)\n            target_link_libraries(translator INTERFACE dl pthread)\n        endif ()\n        target_link_libraries(translator INTERFACE gf sdf tf usd ar arch pcp vt work)\n        target_link_libraries(translator INTERFACE usdGeom usdShade usdUtils usdLux usdVol usdSkel usdRender)\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Define HDARNOLD Exports CMake\nDESCRIPTION: This snippet defines the `HDARNOLD_EXPORTS` compile definition for the `render_delegate` target, marking it as a target that exports symbols. This is typically used when building a shared library.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(render_delegate PRIVATE \"HDARNOLD_EXPORTS=1\")\n```\n\n----------------------------------------\n\nTITLE: Installing hdArnold Plugin and PlugInfo\nDESCRIPTION: This snippet installs the hdArnold target and the generated plugInfo.json file to the specified destinations (`PREFIX_PLUGINS` and `PREFIX_PLUGINS/hdArnold/resources`, respectively).\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/render_delegate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n    install(TARGETS hdArnold\n        DESTINATION \"${PREFIX_PLUGINS}\")\n\n    install(FILES \"${HDARNOLD_PLUGINFO}\"\n        DESTINATION \"${PREFIX_PLUGINS}/hdArnold/resources\")\n```\n\n----------------------------------------\n\nTITLE: Installing plugInfo.json\nDESCRIPTION: Installs the plugInfo.json file to the plugins directory if not building with USD static libraries, and if at least one of the following options are enabled: `BUILD_RENDER_DELEGATE`, `BUILD_NDR_PLUGIN`, `BUILD_USD_IMAGING_PLUGIN`, or `BUILD_SCENE_DELEGATE`.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT BUILD_WITH_USD_STATIC)\n    if (BUILD_RENDER_DELEGATE OR BUILD_NDR_PLUGIN OR BUILD_USD_IMAGING_PLUGIN OR BUILD_SCENE_DELEGATE)\n        install(FILES plugInfo.json\n            DESTINATION \"${PREFIX_PLUGINS}\")\n    endif ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including build helper functions\nDESCRIPTION: Includes a file named 'build', which likely contains custom CMake functions to assist in the build process, such as adding libraries or setting compiler flags.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(build)\n```\n\n----------------------------------------\n\nTITLE: Defining the Schemas Target (CMake)\nDESCRIPTION: This snippet defines the 'schemas' custom target which depends on both 'generatedSchema' and 'updatedPlugInfo' custom targets, ensuring that the schema is generated and plugInfo file is updated.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# The final target is named schemas, it has the plugInfo updated and the generated schemas\n# It is always built if this file was included.\nadd_custom_target(schemas ALL\n    DEPENDS generatedSchema updatedPlugInfo\n)\n```\n\n----------------------------------------\n\nTITLE: Linux Build Configuration (custom.py)\nDESCRIPTION: This sample `custom.py` file configures the build for Linux with system Python libraries and a monolithic USD build. It defines paths for Arnold, USD, Boost, Python, and the installation prefix.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nARNOLD_PATH='/opt/autodesk/arnold-5.4.0.0'\nUSD_PATH='/opt/pixar/USD'\nUSD_BUILD_MODE='monolithic'\nBOOST_INCLUDE='/usr/include'\nPYTHON_INCLUDE='/usr/include/python2.7'\nPYTHON_LIB='/usr/lib'\nPYTHON_LIB_NAME='python2.7'\nPREFIX='/opt/autodesk/arnold-usd'\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files and Target Name in CMake\nDESCRIPTION: Defines the source files for the procedural plugin and sets the name of the target library. It uses the `USD_PROCEDURAL_NAME` variable to construct the library name.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n    main.cpp)\n\nset(PROC_NAME \"${USD_PROCEDURAL_NAME}_proc\")\n\nadd_library(${PROC_NAME} SHARED ${SRC})\nset_target_properties(${PROC_NAME} PROPERTIES PREFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Python for Houdini on Linux\nDESCRIPTION: This Python script configures the environment for building Arnold-USD with Houdini on Linux, specifying paths for Arnold, USD, Boost, and Python. It also defines build flags such as C++ standard, ABI compatibility, and whether to build schemas, render delegate, NDR plugin, procedural, test suite, and documentation. This is for Houdini 18 using GCC 6.3.1 and C++ 14.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nARNOLD_PATH='/opt/solidAngle/arnold'\n\nUSD_PATH='./'\nUSD_BIN='./'\nUSD_INCLUDE='/opt/hfs18.0/toolkit/include'\nUSD_LIB='/opt/hfs18.0/dsolib'\nUSD_LIB_PREFIX='libpxr_'\n\nPREFIX='/opt/solidAngle/arnold-usd'\n\nBOOST_INCLUDE='/opt/hfs18.0/toolkit/include/hboost'\nBOOST_LIB='/opt/hfs18.0/dsolib'\nBOOST_LIB_NAME='hboost_%s'\n\nPYTHON_INCLUDE='/usr/include/python2.7'\nPYTHON_LIB='/usr/lib'\nPYTHON_LIB_NAME='python2.7'\n\nUSD_BUILD_MODE='shared_libs'\n\nSHCXX='/opt/rh/devtoolset-6/root/usr/bin/g++'\nCXX_STANDARD='14'\nDISABLE_CXX11_ABI=True\n\nBUILD_SCHEMAS=False\nBUILD_RENDER_DELEGATE=True\nBUILD_NDR_PLUGIN=True\nBUILD_PROCEDURAL=True\nBUILD_TESTSUITE=True\nBUILD_DOCS=True\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library (C++)\nDESCRIPTION: Creates a shared library named usdImagingArnold if BUILD_WITH_USD_STATIC is not enabled. It includes the source files defined in SRC and the dynamically generated shape adapter file. It also handles header inclusion and dependencies with other USD and common libraries. Includes installation step.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/usd_imaging/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# If we want a usdImagingArnold shared plugin\nif (NOT BUILD_WITH_USD_STATIC)\n\n    add_library(usdImagingArnold SHARED ${SRC} \"${CMAKE_CURRENT_BINARY_DIR}/shape_adapters.cpp\")\n\n    if (BUILD_HEADERS_AS_SOURCES)\n        target_sources(usdImagingArnold PRIVATE ${HDR})\n    endif ()\n    add_common_dependencies(\n        TARGET_NAME usdImagingArnold\n        USD_DEPENDENCIES ar arch plug tf trace vt gf work ndr sdf sdr\n                        hf hd usd usdGeom usdImaging usdLux usdShade)\n\n    target_link_libraries(usdImagingArnold PRIVATE common)\n    target_compile_definitions(usdImagingArnold PRIVATE \"USDIMAGINGARNOLD_EXPORTS=1\")\n    # For the generated shape adapters to find headers here.\n    target_include_directories(usdImagingArnold PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}\")\n    \n    install(TARGETS usdImagingArnold\n        DESTINATION \"${PREFIX_PLUGINS}\")\n    set(PLUGINFO \"${CMAKE_CURRENT_BINARY_DIR}/plug/plugInfo.json\")\n    install_usdimaging_arnold_pluginfo(\n            ../usdImagingArnold\n            \"${PLUGINFO}\"\n            ${PREFIX_PLUGINS})\n\n    # We replicate the layout of the plugin installation inside the build dir for running the testsuite without installing.\n    generate_plug_info_for_testsuite(TARGET_NAME usdImagingArnold TARGET_PLUGINFO \"${PLUGINFO}\")\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags for Linux in CMake\nDESCRIPTION: Appends linker flags for Linux to the `CMAKE_SHARED_LINKER_FLAGS` variable. This includes specifying a version script and excluding all libraries.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (LINUX)\n    string(APPEND CMAKE_SHARED_LINKER_FLAGS \" -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/plugin.map -Wl,--exclude-libs=ALL\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Houdini Build Configuration (Windows custom.py)\nDESCRIPTION: This `custom.py` file configures the build for Houdini 18.0.287 on Windows. It defines paths for Arnold, USD, Boost, and Python libraries within the Houdini installation, and disables building schemas. It also specifies library name prefixes and suffixes specific to Houdini's Boost libraries on Windows.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nARNOLD_PATH=r'C:\\solidAngle\\arnold'\n\nUSD_PATH='./'\nUSD_BIN='./'\nUSD_INCLUDE=r'C:\\Program Files\\Side Effects Software\\Houdini 18.0.287\\toolkit\\include'\nUSD_LIB=r'C:\\Program Files\\Side Effects Software\\Houdini 18.0.287\\custom\\houdini\\dsolib'\nUSD_LIB_PREFIX='libpxr_'\n\nBOOST_INCLUDE=r'C:\\Program Files\\Side Effects Software\\Houdini 18.0.287\\toolkit\\include\\hboost'\nBOOST_LIB=r'C:\\Program Files\\Side Effects Software\\Houdini 18.0.287\\custom\\houdini\\dsolib'\nBOOST_LIB_NAME='hboost_%s-mt'\n\nPYTHON_INCLUDE=r'C:\\Program Files\\Side Effects Software\\Houdini 18.0.287\\toolkit\\include\\python2.7'\nPYTHON_LIB=r'c:\\Program Files\\Side Effects Software\\Houdini 18.0.287\\python27\\libs'\nPYTHON_LIB_NAME='python27'\n\nUSD_BUILD_MODE='shared_libs'\n\nBUILD_SCHEMAS=False\nBUILD_RENDER_DELEGATE=True\nBUILD_PROCEDURAL=True\nBUILD_TESTSUITE=True\nBUILD_DOCS=False\n\nPREFIX=r'C:\\solidAngle\\arnold-usd'\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files with CMake\nDESCRIPTION: This snippet sets the source files to be compiled into the Arnold USD translator library. It defines a CMake variable `SRC` containing a list of `.cpp` files that make up the reader and writer components of the translator.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n    reader/prim_reader.cpp\n    reader/read_arnold_type.cpp\n    reader/read_camera.cpp\n    reader/read_geometry.cpp\n    reader/read_light.cpp\n    reader/read_shader.cpp\n    reader/read_skinning.cpp\n    reader/read_options.cpp\n    reader/reader.cpp\n    reader/registry.cpp\n    reader/utils.cpp\n\n    writer/prim_writer.cpp\n    writer/registry.cpp\n    writer/write_arnold_type.cpp\n    writer/write_camera.cpp\n    writer/write_geometry.cpp\n    writer/write_light.cpp\n    writer/write_options.cpp\n    writer/write_shader.cpp\n    writer/writer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Linux Build Configuration (abuild)\nDESCRIPTION: This command-line example demonstrates how to configure the Arnold USD build on Linux using the `abuild` script. It specifies the same configurations as the `custom.py` file, including paths for Arnold, USD, Boost, Python, and the installation prefix, using command-line arguments.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nabuild ARNOLD_PATH='/opt/autodesk/arnold-5.4.0.0' USD_PATH='/opt/pixar/USD' USD_BUILD_MODE='monolithic' BOOST_INCLUDE='/usr/include' PYTHON_INCLUDE='/usr/include/python2.7' PYTHON_LIB='/usr/lib' PYTHON_LIB_NAME='python2.7' PREFIX='/opt/autodesk/arnold-usd'\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library CMake\nDESCRIPTION: Creates a shared library named `ndrArnold` if `BUILD_WITH_USD_STATIC` is not enabled.  It sets dependencies on USD libraries, links against `ndrObjects` and `common`, and configures plugInfo.json for plugin discovery.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/ndr/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT BUILD_WITH_USD_STATIC)\n    # Create an USD plugin as shared library\n    add_library(ndrArnold SHARED)\n    if (BUILD_HEADERS_AS_SOURCES)\n        target_sources(ndrArnold PRIVATE ${HDR})\n    endif ()\n    add_common_dependencies(\n        TARGET_NAME ndrArnold\n        USD_DEPENDENCIES arch tf gf vt ndr sdr sdf usd)\n\n    target_link_libraries(ndrArnold PRIVATE ndrObjects common)\n    target_compile_definitions(ndrArnold PRIVATE \"NDRARNOLD_EXPORTS=1\")\n\n    # Configure plugInfo.json, it only need the library extension\n    set(NDR_PLUGINFO \"${CMAKE_CURRENT_BINARY_DIR}/plug/plugInfo.json\")\n    install_ndr_arnold_pluginfo(../ndrArnold \"${NDR_PLUGINFO}\" \"${PREFIX_PLUGINS}\")\n\n    # We replicate the layout of the plugin installation inside the build dir for running the testsuite without installing.\n    generate_plug_info_for_testsuite(TARGET_NAME ndrArnold TARGET_PLUGINFO \"${NDR_PLUGINFO}\")\n\n    install(TARGETS ndrArnold\n        DESTINATION \"${PREFIX_PLUGINS}\")\n\n    # Why do we intall the headers ??\n    #install(FILES ${HDR}\n    #    DESTINATION \"${PREFIX_HEADERS}/arnold_usd/ndr\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Arnold-USD with Houdini on Linux with CMake\nDESCRIPTION: This CMake command configures the Arnold-USD project for Houdini on Linux, specifying the locations of Arnold and Houdini. It disables building schemas, enables disabling the C++11 ABI, sets the C++ standard to 14, and defines the installation prefix.  It assumes a standard, symlinked, installation of Houdini 18 on Centos.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ..\n -DCMAKE_BUILD_TYPE=Release\n -DARNOLD_LOCATION=/opt/arnold\n -DHOUDINI_LOCATION=/opt/hfs18.0\n -DBUILD_SCHEMAS=OFF\n -DBUILD_DISABLE_CXX11_ABI=ON\n -DCMAKE_CXX_STANDARD=14\n -DCMAKE_INSTALL_PREFIX=/opt/arnold-usd\n```\n\n----------------------------------------\n\nTITLE: Configure Linker Options for Shared USD\nDESCRIPTION: This block configures linker options when USD is built as a shared library (`USD_MONOLITHIC_BUILD`). It links against either the monolithic USD library or individual USD libraries and handles platform-specific linking (e.g., requiring `dl` and `pthread` on Linux).\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/tools/usdgenschema/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nelse () # USD shared lib build\n    if (USD_MONOLITHIC_BUILD)\n        target_link_libraries(usdGenSchemaArnold PRIVATE usd_ms)\n    else ()\n        if (LINUX)\n            target_link_libraries(usdGenSchemaArnold PRIVATE dl pthread)\n        endif ()\n        target_link_libraries(usdGenSchemaArnold PRIVATE vt;arch;usd;usdShade;tf)\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target and Dependencies\nDESCRIPTION: This command defines a custom target named `usdGenSchemaConfigs` that depends on the custom command that copies the USD configuration. It then adds a dependency from `usdGenSchemaArnold` to `usdGenSchemaConfigs`, ensuring that the USD configuration is copied before the executable is built.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/tools/usdgenschema/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(usdGenSchemaConfigs\n    DEPENDS \"${CMAKE_CURRENT_BINARY_DIR}/usd\"\n)\nadd_dependencies(usdGenSchemaArnold usdGenSchemaConfigs)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This CMake code snippet adds three subdirectories: common, translator, and render_delegate. These subdirectories likely contain source code and CMakeLists.txt files for their respective modules, allowing for modular project management and build process.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(common)\nadd_subdirectory(translator)\nadd_subdirectory(render_delegate)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files with CMake\nDESCRIPTION: This snippet sets the header files used in the Arnold USD translator. It defines a CMake variable `HDR` containing a list of `.h` files for both the reader and writer components, along with utility headers.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HDR\n    reader/prim_reader.h\n    reader/read_arnold_type.h\n    reader/read_camera.h\n    reader/read_geometry.h\n    reader/read_light.h\n    reader/read_shader.h\n    reader/read_skinning.h\n    reader/read_options.h\n    reader/reader.h\n    reader/registry.h\n    reader/utils.h\n\n    utils/utils.h\n\n    writer/prim_writer.h\n    writer/registry.h\n    writer/write_arnold_type.h\n    writer/write_camera.h\n    writer/write_geometry.h\n    writer/write_light.h\n\twriter/write_options.h\n    writer/write_shader.h\n    writer/writer.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: This command adds the current source directory to the include directories, making header files in that directory available for inclusion in other source files.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/common/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\"${CMAKE_CURRENT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting PlugInfo Source File Variables CMake\nDESCRIPTION: This snippet defines CMake variables pointing to the source files of plugInfo.json templates for different Arnold USD components. These plugInfo.json files are essential for configuring and installing the respective USD plugins.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(NDR_PLUGINFO_SRC ${CMAKE_CURRENT_SOURCE_DIR}/ndr/plugInfo.json.in)\nset(HDARNOLD_PLUGINFO_SRC ${CMAKE_CURRENT_SOURCE_DIR}/render_delegate/plugInfo.json.in)\nset(IMAGINGARNOLD_PLUGINFO_SRC ${CMAKE_CURRENT_SOURCE_DIR}/scene_delegate/plugInfo.json.in)\nset(USDIMAGINGARNOLD_PLUGINFO_SRC ${CMAKE_CURRENT_SOURCE_DIR}/usd_imaging/plugInfo.json.in)\n```\n\n----------------------------------------\n\nTITLE: Configure Linker Options for Static USD\nDESCRIPTION: This block configures linker options when USD is built as a static library (`BUILD_WITH_USD_STATIC`). It handles different linking strategies for Windows, Linux, and macOS (APPLE).\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/tools/usdgenschema/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_WITH_USD_STATIC)\n    set(_staticlibs ${USD_usd_m_LIBRARY})\n    list(APPEND _staticlibs ${USD_TRANSITIVE_STATIC_LIBS})\n    list(REMOVE_DUPLICATES _staticlibs)\n    if (WIN32)\n        foreach(USD_M_LIB ${_staticlibs})\n            if(EXISTS ${USD_M_LIB})\n                target_link_options(usdGenSchemaArnold PRIVATE \"-WHOLEARCHIVE:${USD_M_LIB}\")\n            else()\n                target_link_libraries(usdGenSchemaArnold PRIVATE ${USD_M_LIB})\n            endif()\n        endforeach()\n    else ()\n        list(JOIN _staticlibs \",\" _staticlibs)\n        if (LINUX)\n            target_link_libraries(usdGenSchemaArnold PRIVATE dl pthread)\n            target_link_options(usdGenSchemaArnold PRIVATE \"-Wl,--whole-archive,${_staticlibs},--no-whole-archive\")\n        else () # APPLE\n            target_link_options(usdGenSchemaArnold PRIVATE \"-Wl,-all_load,${_staticlibs}\")\n        endif ()\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files CMake\nDESCRIPTION: This command defines a list of source files for the 'common' library.  CMAKE_CURRENT_SOURCE_DIR is used to specify the location of the source files. These .cpp files contain the implementation of the common utilities.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/common/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(COMMON_SRC\n    \"${CMAKE_CURRENT_SOURCE_DIR}/common_utils.cpp\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/constant_strings.cpp\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/materials_utils.cpp\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/parameters_utils.cpp\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/rendersettings_utils.cpp\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/procedural_reader.cpp\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/shape_utils.cpp\")\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files CMake\nDESCRIPTION: This command defines a list of header files for the 'common' library. CMAKE_CURRENT_SOURCE_DIR is used to specify the location of the header files. These .h files declare the interfaces used in the source files.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/common/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(COMMON_HDR\n    \"${CMAKE_CURRENT_SOURCE_DIR}/api_adapter.h\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/common_bits.h\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/common_utils.h\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/constant_strings.h\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/materials_utils.h\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/parameters_utils.h\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/procedural_reader.h\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/rendersettings_utils.h\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/shape_utils.h\")\n```\n\n----------------------------------------\n\nTITLE: Set Source Files CMake\nDESCRIPTION: This snippet defines a CMake variable `SRC` that lists all the source files (.cpp) required for building the render delegate. These files contain the implementation of various render delegate components, such as drivers, nodes, shapes, cameras, and volumes.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n    nodes/driver_aov.cpp\n    nodes/driver_main.cpp\n    nodes/nodes.cpp\n\n    basis_curves.cpp\n    camera.cpp\n    config.cpp\n    debug_codes.cpp\n    instancer.cpp\n    light.cpp\n    mesh.cpp\n    native_rprim.cpp\n    node_graph.cpp\n    openvdb_asset.cpp\n    options.cpp\n    points.cpp\n    procedural_custom.cpp\n    reader.cpp\n    render_buffer.cpp\n    render_delegate.cpp\n    render_param.cpp\n    render_pass.cpp\n    shape.cpp\n    utils.cpp\n    volume.cpp\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Position Independent Code with CMake\nDESCRIPTION: This snippet sets the `POSITION_INDEPENDENT_CODE` property for the `translator` target on non-Windows platforms. This is required for building shared libraries.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT WIN32)\n    set_target_properties(translator PROPERTIES POSITION_INDEPENDENT_CODE ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Set Header Files for Arnold USD Adapter\nDESCRIPTION: Defines the header files associated with the Arnold USD adapter. These headers declare the interfaces and data structures used by the source files.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/scene_delegate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HDR\n    adapter_registry.h\n    api.h\n    delegate.h\n    delegate_proxy.h\n    persp_camera_adapter.h\n    polymesh_adapter.h\n    prim_adapter.h\n    rprim_adapter.h)\n```\n\n----------------------------------------\n\nTITLE: Add Common Includes CMake\nDESCRIPTION: This snippet adds common include directories to the `render_delegate` target, with a dependency on the `common` target.  It relies on a custom CMake function `add_common_includes` which is not provided.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_common_includes(TARGET_NAME render_delegate DEPENDENCIES common)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Testsuite\nDESCRIPTION: This CMake code adds a custom target named 'testsuite' that depends on the output of the 'add_custom_command' defined above.  It ensures the testsuite command is executed before the target is considered built. It also adds a dependency to 'usd_proc'.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/testsuite/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(testsuite\n    DEPENDS \"${CMAKE_CURRENT_BINARY_DIR}/testsuite\"\n)\nadd_dependencies(testsuite usd_proc)\n```\n\n----------------------------------------\n\nTITLE: Including project options\nDESCRIPTION: Includes the 'options' file, which likely defines various build options and variables that can be configured by the user or the build system.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(options)\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library Target with CMake\nDESCRIPTION: This snippet creates a static library named `translator` from the source files defined in `SRC`. The `EXCLUDE_FROM_ALL` option prevents the library from being built by default when building the entire project.  It also conditionally includes header files as sources, based on `BUILD_HEADERS_AS_SOURCES`.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(translator STATIC EXCLUDE_FROM_ALL ${SRC})\nif (BUILD_HEADERS_AS_SOURCES)\n    target_sources(translator PRIVATE ${HDR})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the features and syntax used in the CMakeLists.txt file.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions for Hydra Integration in CMake\nDESCRIPTION: Defines the `ENABLE_HYDRA_IN_USD_PROCEDURAL` compiler definition if Hydra integration is enabled. This allows conditional compilation of Hydra-specific code.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_HYDRA_IN_USD_PROCEDURAL)\n    target_compile_definitions(${PROC_NAME} PUBLIC ENABLE_HYDRA_IN_USD_PROCEDURAL=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Macro and Enum Naming\nDESCRIPTION: This snippet illustrates the naming convention for macros and enums, which should be all uppercase.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n#define UPDATE_UNDEFINED   0\n#define UPDATE_CAMERA      1\n\nenum PartitionType\n{\n    POINTS = 0,\n    PRIMITIVES,\n    DETAIL\n};\n```\n\n----------------------------------------\n\nTITLE: Including default compiler options\nDESCRIPTION: Includes a file named 'defaults', which likely contains default compiler options and settings that are applied to the project.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(defaults)\n```\n\n----------------------------------------\n\nTITLE: Function Naming Convention\nDESCRIPTION: This snippet demonstrates the function naming convention using CamelCase. Private and protected class functions must be prefixed with an underscore (_).\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Header file\nvoid MyFunction(); // OK\nvoid myFunction(); // WRONG\nvoid my_function(); // WRONG\n\nclass HdArnoldRenderDelegate {\npublic:\n    void MyFunction(); // OK\nprivate:\n    void MyOtherFunction(); // WRONG\n    void _MyFunction(); // OK\n};\n```\n\n----------------------------------------\n\nTITLE: Add Headers as Sources CMake\nDESCRIPTION: This snippet conditionally adds the header files (defined in `COMMON_HDR` and `HDR`) as private sources to the `render_delegate` target. This is done only if the `BUILD_HEADERS_AS_SOURCES` CMake option is enabled.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_HEADERS_AS_SOURCES)\n    target_sources(render_delegate PRIVATE ${COMMON_HDR} ${HDR})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Add Common Includes\nDESCRIPTION: This command adds common include directories to the `usdGenSchemaArnold` target and specifies its dependencies on `vt`, `arch`, `usd`, `usdShade`, and `tf` libraries.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/tools/usdgenschema/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_common_includes(TARGET_NAME usdGenSchemaArnold DEPENDENCIES vt;arch;usd;usdShade;tf)\n```\n\n----------------------------------------\n\nTITLE: C++ Style Casting\nDESCRIPTION: This snippet illustrates the use of C++ style casting (e.g., `static_cast`) instead of C-style casting.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n\nconstexpr int a = 5;\nconstexpr float b = (int) a; // WRONG\nconstexpr float c = static_cast<int>(a); // OK\n\n```\n\n----------------------------------------\n\nTITLE: Enable Shared Arrays CMake\nDESCRIPTION: This snippet conditionally defines the `ENABLE_SHARED_ARRAYS` compile definition for the `render_delegate` target, depending on the value of the `ENABLE_SHARED_ARRAYS` variable.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_SHARED_ARRAYS)\n    target_compile_definitions(render_delegate PUBLIC ENABLE_SHARED_ARRAYS=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Const and Constexpr Usage\nDESCRIPTION: This snippet demonstrates the use of `const` and `constexpr` wherever possible to ensure immutability and compile-time evaluation where appropriate.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nfloat a = 5.0f; // WRONG if a does not change.\nconst std::vector<float> vec { 5.0f, 3.0f }; // OK\nconst float b = 5.0f; // OK\nconstexpr float b = 5.0f; // OK\n```\n\n----------------------------------------\n\nTITLE: Set Source Files for Arnold USD Adapter\nDESCRIPTION: Defines the source files used to build the Arnold USD adapter. These files implement the core logic for translating USD primitives to Arnold primitives.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/scene_delegate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n    adapter_registry.cpp\n    delegate.cpp\n    delegate_proxy.cpp\n    persp_camera_adapter.cpp\n    polymesh_adapter.cpp\n    prim_adapter.cpp\n    rprim_adapter.cpp\n    )\n```\n\n----------------------------------------\n\nTITLE: Class Naming Convention\nDESCRIPTION: This snippet demonstrates the class naming convention using CamelCase with a module-specific prefix. It also shows how structs should be named when storing related data, and the cases where they should or shouldn't have a module specific prefix.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Base library\nclass HdArnoldLight; // OK\nclass MyClass; // WRONG\nclass myClass; // WRONG\n\nstruct MyStruct : public HdRenderDelegate {\n    // ... \n}; // WRONG\n\nstruct MyOtherStruct {\n    float a;\n    int b;\n    double c;\n} // OK\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Arnold Schema (CMake)\nDESCRIPTION: This snippet defines a custom target named 'schemaUsda' that depends on the generated schema.usda file. This target is used to ensure that the schema is generated before any other targets that depend on it.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Custom target for generating an arnold schema from the arnold api\nadd_custom_target(schemaUsda\n    DEPENDS ${SCHEMAS_USDA}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files CMake\nDESCRIPTION: Defines a list of C++ source files used to build the NDR Arnold plugin. These source files contain the implementation logic for the plugin's functionality.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/ndr/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n    discovery.cpp\n    parser.cpp\n    tokens.cpp\n    utils.cpp\n    )\n```\n\n----------------------------------------\n\nTITLE: Function Parenthesis Spacing\nDESCRIPTION: This snippet shows the correct spacing for function calls. There should be no spaces between the function name and the parenthesis, or between the parenthesis and the arguments.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nmyFunction(a, b);    // OK\nmyFunction (a, b);   // wrong\nmyFunction( a, b );  // wrong\n```\n\n----------------------------------------\n\nTITLE: Building Arnold-USD with Houdini on Windows with CMake\nDESCRIPTION: This CMake command configures the Arnold-USD project for Houdini on Windows using Visual Studio 2017, specifying the locations of Arnold and Houdini. It disables building schemas and defines the installation prefix.  It accounts for the absence of usdgenschema in Houdini 18.0.499.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ..\n -G \"Visual Studio 15 2017 Win64\"\n -DCMAKE_INSTALL_PREFIX=\"C:\\\\dist\\\\arnold-usd\"\n -DARNOLD_LOCATION=\"C:\\\\arnold\"\n -DHOUDINI_LOCATION=\"C:\\\\Program Files\\\\Side Effects Software\\\\Houdini 18.0.499\\\\\"\n -DBUILD_SCHEMAS=OFF\n```\n\n----------------------------------------\n\nTITLE: Null Pointer Usage\nDESCRIPTION: This snippet illustrates the correct way to initialize pointers using `nullptr` instead of `NULL` or `0`.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nA* a = nullptr; // OK\nB* b = 0; // WRONG\nC* c = NULL; // WRONG\n```\n\n----------------------------------------\n\nTITLE: Building Arnold-USD on Linux with CMake\nDESCRIPTION: This CMake command configures the Arnold-USD project on Linux, specifying the locations of Arnold, USD, and Google Test. It also sets the build type to Release, enables unit tests, sets the C++ standard to 14, and defines the installation prefix.  It assumes USD is built with official build scripts.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ..\n -DCMAKE_BUILD_TYPE=Release\n -DARNOLD_LOCATION=/opt/arnold\n -DUSD_LOCATION=/opt/USD\n -DBUILD_UNIT_TESTS=ON\n -DGOOGLETEST_LOCATION=/opt/googletest\n -DCMAKE_CXX_STANDARD=14\n -DCMAKE_INSTALL_PREFIX=/opt/arnold-usd\n```\n\n----------------------------------------\n\nTITLE: Variable Naming Convention\nDESCRIPTION: This snippet showcases the variable naming convention using camelCase. Class variables should be prefixed with an underscore (_), while struct variables should not.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nint myVariable; // OK\nint my_variable; // WRONG\n\nclass HdArnoldRenderDelegate {\nprivate:\n    int myVariable; // WRONG\n    int _myVariable; // OK\n};\n\nstruct MyStruct {\n    int _myVariable; // WRONG\n    int myVariable; // OK\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library (C++)\nDESCRIPTION: Creates an object library named usdImagingArnoldObjects. This library contains the source files defined in SRC and the dynamically generated shape adapter file. It defines a compile definition for exporting symbols.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/usd_imaging/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Add objects for the hydra procedural\nadd_library(usdImagingArnoldObjects OBJECT ${SRC} \"${CMAKE_CURRENT_BINARY_DIR}/shape_adapters.cpp\")\ntarget_compile_definitions(usdImagingArnoldObjects PRIVATE \"USDIMAGINGARNOLD_EXPORTS=1\")\nadd_common_includes(TARGET_NAME usdImagingArnoldObjects DEPENDENCIES common)\n```\n\n----------------------------------------\n\nTITLE: Add Render Delegate Library CMake\nDESCRIPTION: This snippet creates a static library named `render_delegate` using the source files defined in `SRC` and `COMMON_SRC`. The `EXCLUDE_FROM_ALL` option prevents this library from being built by default.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(render_delegate STATIC EXCLUDE_FROM_ALL ${COMMON_SRC} ${SRC} )\n```\n\n----------------------------------------\n\nTITLE: Installing LICENSE.md\nDESCRIPTION: Installs the LICENSE.md file to the root installation directory. This ensures that the license file is included with the installed project.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES LICENSE.md DESTINATION .)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files CMake\nDESCRIPTION: Defines a list of header files that expose the API and data structures used by the NDR Arnold plugin. These headers provide the interface for other modules to interact with the plugin.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/ndr/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HDR\n    api.h\n    discovery.h\n    ndrarnold.h\n    parser.h\n    tokens.h\n    utils.h)\n```\n\n----------------------------------------\n\nTITLE: Grouping Source Files in CMake\nDESCRIPTION: Groups the source files in the IDE for better organization. It creates a tree structure based on the `CMAKE_CURRENT_SOURCE_DIR`.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/procedural/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SRC} ${HDR})\n```\n\n----------------------------------------\n\nTITLE: Setting Doxygen Input and Output Files\nDESCRIPTION: This snippet defines variables for the input and output Doxyfile paths. `${CMAKE_CURRENT_SOURCE_DIR}` represents the directory of the current CMakeLists.txt file, and `${CMAKE_CURRENT_BINARY_DIR}` is the build directory. It also sets the output directory for the generated documentation.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(DOXYGEN_IN \"${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile\")\nset(DOXYGEN_OUT \"${CMAKE_CURRENT_BINARY_DIR}/Doxyfile\")\n\nset(OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/out\")\nconfigure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Source Grouping CMake\nDESCRIPTION: Groups the source and header files in the IDE for better organization. This is a purely organizational command and does not affect the build process.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/ndr/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SRC} ${HDR})\n```\n\n----------------------------------------\n\nTITLE: Finding Doxygen Package with CMake\nDESCRIPTION: This snippet utilizes CMake's `find_package` command to locate the Doxygen package and its dependency, dot. It is required to proceed with the Doxygen documentation generation process. The `REQUIRED` keyword ensures that the configuration will fail if Doxygen is not found.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Doxygen REQUIRED dot)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files Variable (C++)\nDESCRIPTION: Defines the source files for the usdImagingArnold library. This includes various adapter implementations for Arnold options, materials, node graphs, light filters, procedurals, and shapes.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/usd_imaging/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n    arnold_options_adapter.cpp\n    material_param_utils.cpp\n    node_graph_adapter.cpp\n    usd_lux_light_filter_adapter.cpp\n    procedural_custom_adapter.cpp\n    shape_adapter.cpp\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library CMake\nDESCRIPTION: Creates an object library named `ndrObjects` from the source files defined in the SRC variable. It also sets a compile definition to export symbols and adds common include directories.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/ndr/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# We are building a new \"object\" target as we need ndr in the procedural as well\nadd_library(ndrObjects OBJECT ${SRC})\ntarget_compile_definitions(ndrObjects PRIVATE \"NDRARNOLD_EXPORTS=1\")\nadd_common_includes(TARGET_NAME ndrObjects DEPENDENCIES common)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Testsuite\nDESCRIPTION: This CMake code adds a custom command to generate the testsuite. It installs the CMake build, copies necessary schemas from usdArnold to the procedural folder, sets environment variables, and runs the 'abuild' script to execute the testsuite. The command depends on CMake, USD, and Arnold.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/testsuite/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/testsuite\"\n    # First we install our cmake build as we want to test the install. We use the scons build folder as it should be there.\n    COMMAND \n        ${CMAKE_COMMAND} --install ${CMAKE_BINARY_DIR} --prefix=\"${CMAKE_SOURCE_DIR}/build/cmake_build\"\n    # We copy the schemas in the procedural \n    # TODO: the install should do that ? shouldn't it ?\n    COMMAND\n        ${CMAKE_COMMAND} -E copy_directory \"${CMAKE_SOURCE_DIR}/build/cmake_build/schema/usdArnold\" \"${CMAKE_SOURCE_DIR}/build/cmake_build/procedural/usd\"\n    # Run the scons testsuite pointing to our install. \n    # TODO: make it multiplatform to launch on windows as well\n    #       add a way to run a set of tests instead of the whole testsuite\n    COMMAND\n        ${CMAKE_COMMAND} -E env\n            \"TESTSUITE_ARNOLD_PLUGIN_PATH=${CMAKE_SOURCE_DIR}/build/cmake_build/procedural\"\n            \"TESTSUITE_PXR_PLUGINPATH_NAME=${CMAKE_SOURCE_DIR}/build/cmake_build/schema:${CMAKE_SOURCE_DIR}/build/cmake_build/plugin\"\n            \"DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:${USD_LOCATION}/lib\"\n            ./abuild USD_PATH=${USD_LOCATION} BOOST_INCLUDE=${USD_LOCATION}/include ARNOLD_PATH=${ARNOLD_LOCATION} BUILD_SCHEMAS=0 BUILD_DOCS=0 BUILD_TESTSUITE=1 testsuite\n\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Renderer Plugin Base Variable\nDESCRIPTION: This snippet sets the `RENDERER_PLUGIN_BASE` variable based on the USD version. If the USD version is greater than 0.19.7, it sets the variable to `HdRendererPlugin`; otherwise, it sets it to `HdxRendererPlugin`.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/render_delegate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n    if (${USD_VERSION} VERSION_GREATER \"0.19.7\")\n        set(RENDERER_PLUGIN_BASE \"HdRendererPlugin\")\n    else ()\n        set(RENDERER_PLUGIN_BASE \"HdxRendererPlugin\")\n    endif ()\n```\n\n----------------------------------------\n\nTITLE: Updating PlugInfo.json with Python (CMake)\nDESCRIPTION: This snippet defines a custom target named 'updatedPlugInfo' that updates the plugInfo.json file using a Python script.  The updatePlugInfo.py script likely fixes inconsistencies caused by usdGenSchema. The target depends on the generatedSchema target and runs the python script in the project's tools directory.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Fixing the plugInfo.json.in file in post.\nadd_custom_target(updatedPlugInfo\n    BYPRODUCTS \"${SCHEMAS_PLUGINFO}\"\n    # UsdGenSchema doesn't setup the library name properly in the file and it's not compatible with\n    # configure_file (in older USD versions), so we are manually editing the file using a simple python command.\n    COMMAND\n        ${PYTHON_EXECUTABLE} \"${CMAKE_CURRENT_SOURCE_DIR}/updatePlugInfo.py\" \"${SCHEMAS_PLUGINFO}\"\n    WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}/tools\"\n    DEPENDS generatedSchema\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Python and Library Paths with CMake\nDESCRIPTION: This snippet defines the Python and library paths required for running the schema generation scripts. It appends Arnold's Python and binary directories, as well as USD's library and binary directories, to the relevant path variables. The environment variables PYTHONPATH, LD_LIBRARY_PATH, and PATH are also used.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(_PYTHONPATHS \"${ARNOLD_PYTHON_DIR}\")\nset(_LIBRARY_PATHS \"${ARNOLD_BINARY_DIR}\")\nlist(APPEND _PYTHONPATHS \"$ENV{PYTHONPATH}\")\nif (USD_LIBRARY_DIR)\n    if (EXISTS ${USD_LIBRARY_DIR}/python)\n        list(APPEND _PYTHONPATHS \"${USD_LIBRARY_DIR}/python\")\n    endif ()\n    list(APPEND _LIBRARY_PATHS \"${USD_LIBRARY_DIR}\")\nendif ()\nif (USD_BINARY_DIR)\n    list(APPEND _LIBRARY_PATHS \"${USD_BINARY_DIR}\")\nendif ()\n\nif (WIN32)\n    list(APPEND _LIBRARY_PATHS \"$ENV{PATH}\")\n    string(JOIN \"\\;\" LIBRARY_PATHS ${_LIBRARY_PATHS})\n    string(JOIN \"\\;\" PYTHONPATHS ${_PYTHONPATHS})\nelse ()\n    list(APPEND _LIBRARY_PATHS \"$ENV{LD_LIBRARY_PATH}:$ENV{PATH}\")\n    string(JOIN \":\" LIBRARY_PATHS ${_LIBRARY_PATHS})\n    string(JOIN \":\" PYTHONPATHS ${_PYTHONPATHS})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command to Copy USD Configuration\nDESCRIPTION: This command defines a custom command to copy the USD configuration directory (`usd`) from the USD library directory to the directory of the `usdGenSchemaArnold` executable. This ensures that the executable has the necessary configuration files at runtime.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/tools/usdgenschema/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/usd\"\n    COMMAND\n    ${CMAKE_COMMAND} -E copy_directory \"${USD_LIBRARY_DIR}/usd\" \"$<TARGET_FILE_DIR:usdGenSchemaArnold>/usd\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files Variable (C++)\nDESCRIPTION: Defines the header files associated with the source files for the usdImagingArnold library, providing the interface declarations for the corresponding adapter implementations.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/usd_imaging/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HDR\n    api.h\n    arnold_options_adapter.h\n    material_param_utils.h\n    node_graph_adapter.h\n    usd_lux_light_filter_adapter.h\n    shape_adapter.h\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Arnold Shaders as UsdShade Shader Prims\nDESCRIPTION: This snippet demonstrates how to define Arnold shaders as UsdShade Shader prims. The `info:id` attribute is set to the Arnold shader name, prefixed by the `arnold` namespace, and shader parameters are placed within the `inputs` scope.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/naming_conventions.md#_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\ndef Shader \"my_shader\"\n{\n uniform token info:id = \"arnold:standard_surface\"\n color3f inputs:base_color = (0,0,1)\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Source Files in IDE (C++)\nDESCRIPTION: Organizes the source files, header files and shape adapters within the IDE's source tree, improving project navigation and organization. Groups common files under 'common' prefix.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/plugins/usd_imaging/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SRC} ${HDR} shape_adapters.cpp.in)\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/../common PREFIX common FILES ${COMMON_SRC} ${COMMON_HDR})\n```\n\n----------------------------------------\n\nTITLE: Set Header Files CMake\nDESCRIPTION: This snippet defines a CMake variable `HDR` that lists all the header files (.h) associated with the source files. These headers define the interfaces and data structures used by the render delegate components.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HDR\n    api.h\n    basis_curves.h\n    camera.h\n    config.h\n    debug_codes.h\n    rprim.h\n    hdarnold.h\n    instancer.h\n    light.h\n    mesh.h\n    native_rprim.h\n    node_graph.h\n    openvdb_asset.h\n    options.h\n    points.h\n    procedural_custom.h\n    render_buffer.h\n    render_delegate.h\n    render_param.h\n    render_pass.h\n    shape.h\n    utils.h\n    volume.h\n    )\n```\n\n----------------------------------------\n\nTITLE: Source Grouping CMake\nDESCRIPTION: This snippet uses the `source_group` command to organize the source files in the IDE. It groups the files in `SRC` and `HDR` based on their location within the source directory.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/render_delegate/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SRC} ${HDR})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Doxygen\nDESCRIPTION: This snippet adds a custom target named `docs_doxygen` that depends on the Doxygen index file. This ensures that the Doxygen documentation is generated as part of the `ALL` target (e.g., when running `make` or building the project).\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(docs_doxygen ALL\n    DEPENDS\n    ${DOXYGEN_INDEX})\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Source Directory with CMake\nDESCRIPTION: This snippet defines a custom target named 'schemaSourceOut' that creates the directory where the generated schema source files will be placed. It uses the CMake command 'make_directory' to create the directory.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/schemas/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(schemaSourceOut\n    BYPRODUCTS \"${SCHEMAS_SOURCE_OUT}\"\n    COMMAND ${CMAKE_COMMAND} -E make_directory \"${SCHEMAS_SOURCE_OUT}\"\n)\n```\n\n----------------------------------------\n\nTITLE: USD 20.05+ Build Configuration (custom.py)\nDESCRIPTION: This snippet configures the build for USD 20.05 and later on Linux, which requires GCC 6.3.1 and C++-14. It sets the compiler path, C++ standard, and disables the C++11 ABI.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSHCXX='/opt/rh/devtoolset-6/root/usr/bin/g++'\nCXX_STANDARD='14'\nDISABLE_CXX11_ABI=True\n```\n\n----------------------------------------\n\nTITLE: Set Source File Variable\nDESCRIPTION: This snippet sets the source file variable `SRC` to `main.cpp`. This variable is later used to define the source files for the executable.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/tools/usdgenschema/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC main.cpp)\n```\n\n----------------------------------------\n\nTITLE: File Naming Convention\nDESCRIPTION: This snippet illustrates the file naming conventions for source and header files. It emphasizes the use of snake_case and the correct file extensions (.h for headers and .cpp for source files).\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ncontrib // OK\nrenderDelegate.h // WRONG\nrender_delegate.cpp // OK\nrender_delegate.cxx // WRONG\n```\n\n----------------------------------------\n\nTITLE: Houdini Build Configuration (macOS custom.py)\nDESCRIPTION: This `custom.py` file configures the build for Houdini 18.0.287 on macOS. It defines paths for Arnold, USD, Boost, and Python libraries within the Houdini installation, and disables building schemas.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/building.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nARNOLD_PATH='/opt/solidAngle/arnold'\n\nWARN_LEVEL='warn-only'\n\nUSD_PATH='./'\nUSD_LIB='/Applications/Houdini/Houdini18.0.287/Frameworks/Houdini.framework/Versions/Current/Libraries'\nUSD_INCLUDE='/Applications/Houdini/Houdini18.0.287/Frameworks/Houdini.framework/Versions/Current/Resources/toolkit/include'\nUSD_BIN='/Applications/Houdini/Houdini18.0.287/Frameworks/Houdini.framework/Versions/Current/Resources/bin'\nUSD_BUILD_MODE='shared_libs'\nUSD_LIB_PREFIX='libpxr_'\n\nBOOST_INCLUDE='/Applications/Houdini/Houdini18.0.287/Frameworks/Houdini.framework/Versions/Current/Resources/toolkit/include/hboost'\nBOOST_LIB='/Applications/Houdini/Houdini18.0.287/Frameworks/Houdini.framework/Versions/Current/Libraries'\nBOOST_LIB_NAME='hboost_%s'\n\nPYTHON_INCLUDE='/Applications/Houdini/Houdini18.0.287/Frameworks/Python.framework/Versions/2.7/include/python2.7'\nPYTHON_LIB='/Applications/Houdini/Houdini18.0.287/Frameworks/Python.framework/Versions/2.7/lib'\nPYTHON_LIB_NAME='python2.7'\n\nBUILD_SCHEMAS=False\nBUILD_RENDER_DELEGATE=True\nBUILD_PROCEDURAL=True\nBUILD_TESTSUITE=True\nBUILD_DOCS=True\n\nPREFIX='/opt/solidAngle/arnold-usd'\n```\n\n----------------------------------------\n\nTITLE: Documenting a C++ function with Doxygen\nDESCRIPTION: This example demonstrates how to document a C++ function using Doxygen-style comments. It includes a short description, a detailed description, parameter descriptions with the @param tag, and a return value description with the @return tag. This style ensures that Doxygen can automatically generate documentation for the function.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/documenting.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n/// Short description in one phrase (in this case: Add two numbers together).\n///\n/// Optionally, here goes a much more detailed description of the function.\n/// This longer description can spawn multiple lines, include code samples, etc.\n///\n/// @param a This is the first floating point number to be added\n/// @param b And this is the second number\n/// @return  The sum a + b\nfloat myAddFunction(float a, float b)\n{\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: pxr Namespace Usage\nDESCRIPTION: This snippet demonstrates how to properly use the `pxr` namespace with the `PXR_NAMESPACE_OPEN_SCOPE`, `PXR_NAMESPACE_CLOSE_SCOPE`, and `PXR_NAMESPACE_USING_DIRECTIVE` macros, rather than explicitly using `pxr::`.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\npxr::TfToken myToken; // Not OK\n\nPXR_NAMESPACE_OPEN_SCOPE\n\nTfToken mySecondToken; // OK\n\nPXR_NAMESPACE_CLOSE_SCOPE\n\n\nPXR_NAMESPACE_USING_DIRECTIVE\n\nTfToken myThirdToken; // OK\n```\n\n----------------------------------------\n\nTITLE: Override Usage\nDESCRIPTION: This snippet demonstrates the correct usage of the `override` keyword for class functions to ensure proper virtual function overriding.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n\nclass Parent {\npublic:\n    virtual void MyFunc() = 0;\n    virtual void MyOtherFunc() = 0;\n};\n\nclass Child : public Parent {\npublic:\n    void MyFunc() override; // OK\n    void MyOtherFunc(); // WRONG\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting Arnold Attributes on USD Prims in Arnold Namespace\nDESCRIPTION: This snippet shows how to set additional Arnold attributes on native USD prims using primvars in the `arnold` namespace. Primvars within this namespace are translated as built-in attributes on Arnold nodes.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/naming_conventions.md#_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\ndef DomeLight \"my_light\"\n{\n float intensity=2\n int primvars:arnold:max_bounces=99\n}\n```\n\n----------------------------------------\n\nTITLE: Include File Notation\nDESCRIPTION: This snippet shows the correct C++ notation for including header files, using the `<c...>` format for C standard library headers.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n#include <cstring>   // OK\n#include <string.h>  // WRONG\n```\n\n----------------------------------------\n\nTITLE: Setting Doxygen Index File Variable\nDESCRIPTION: This snippet defines a variable that points to the main index.html file within the generated Doxygen output directory. This is used as a dependency for the custom command, ensuring that the documentation generation is triggered if this file is missing or outdated.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(DOXYGEN_INDEX \"${CMAKE_CURRENT_BINARY_DIR}/out/html/index.html\")\n```\n\n----------------------------------------\n\nTITLE: C++ Comment Style\nDESCRIPTION: This snippet demonstrates the preferred C++ comment style using `//` with a space after the slashes.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// I am a nice comment.\n//But I am not.\n/* I'm ugly too. */\n```\n\n----------------------------------------\n\nTITLE: Brackets for Code Blocks\nDESCRIPTION: This snippet emphasizes the requirement for brackets (`{}`) for every block of code, even single-line blocks.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nif (statement)\n    OneLineFunction(); // WRONG\n\nif (statement) {\n    OneLineFunction(); // OK\n}\n\n#define MY_SILLY_MACRO() \\\nDoSomething(); \\\nDoSomething2();\n\nif (statement)\n    MY_SILLY_MACRO(); // WRONG, DoSomething2 will always run\n\nif (statement) {\n    MY_SILLY_MACRO(); // OK, both functions only run when statement is true.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Arnold Nodes in USD\nDESCRIPTION: This demonstrates defining generic Arnold nodes within USD using a camel-cased node type prefixed with \"Arnold\". Attribute names directly correspond to Arnold parameter names without any namespacing.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/naming_conventions.md#_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\ndef ArnoldStandardSurface \"my_shader\" {}\ndef ArnoldSetOperator \"my_operator\" {}\ndef ArnoldPolymesh \"my_mesh\" {}\ndef ArnoldSkydomeLight \"my_light\" {}\n```\n\n----------------------------------------\n\nTITLE: Grouping Source Files with CMake\nDESCRIPTION: This snippet groups the source and header files in the IDE, making it easier to navigate the project. It uses the `source_group` command to organize files in the project explorer.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/libs/translator/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SRC} ${HDR})\n```\n\n----------------------------------------\n\nTITLE: Source Only Function Naming\nDESCRIPTION: This snippet describes how source-only functions and structs should be placed in an anonymous namespace to limit symbols to compilation units. It shows the correct way to prefix source-only functions with an underscore (_).\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/docs/conventions.md#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Source file\n\nnamespace {\n\nvoid MyFunction()\n{\n    // ...\n} // WRONG\n\nvoid _MyFunction()\n{\n    // ...\n} // OK\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Arnold-USD project\nDESCRIPTION: Defines the project name as 'arnold-usd'. This sets the project's name in CMake and affects how targets and variables are named.\nSOURCE: https://github.com/autodesk/arnold-usd/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(arnold-usd)\n```"
  }
]