[
  {
    "owner": "vkcom",
    "repo": "vkui",
    "content": "TITLE: Building a basic VKUI application with React\nDESCRIPTION: This code snippet shows how to construct a basic VKUI application using React. It imports necessary VKUI components, defines a functional component that renders a simple UI structure with AdaptivityProvider, ConfigProvider, and AppRoot, including a Panel with a PanelHeader and a Group containing SimpleCell components.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/quick-start.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"import {\n  AdaptivityProvider,\n  ConfigProvider,\n  AppRoot,\n  SplitLayout,\n  SplitCol,\n  View,\n  Panel,\n  PanelHeader,\n  Header,\n  Group,\n  SimpleCell,\n  usePlatform,\n} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nexport default function App() {\n  const platform = usePlatform();\n\n  return (\n    <ConfigProvider>\n      <AdaptivityProvider>\n        <AppRoot>\n          <SplitLayout header={platform !== 'vkcom' && <PanelHeader delimiter=\"none\" />}>\n            <SplitCol autoSpaced>\n              <View activePanel=\"main\">\n                <Panel id=\"main\">\n                  <PanelHeader>VKUI</PanelHeader>\n                  <Group header={<Header mode=\"secondary\">Items</Header>}>\n                    <SimpleCell>Hello</SimpleCell>\n                    <SimpleCell>World</SimpleCell>\n                  </Group>\n                </Panel>\n              </View>\n            </SplitCol>\n          </SplitLayout>\n        </AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  );\n}\"\n```\n\n----------------------------------------\n\nTITLE: Basic VKUI React Application Example\nDESCRIPTION: A complete example showing how to set up a basic VKUI application with React. Demonstrates the usage of core components like ConfigProvider, AdaptivityProvider, AppRoot, and layout components.\nSOURCE: https://github.com/vkcom/vkui/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport {\n  AdaptivityProvider,\n  ConfigProvider,\n  AppRoot,\n  SplitLayout,\n  SplitCol,\n  View,\n  Panel,\n  PanelHeader,\n  Header,\n  Group,\n  SimpleCell,\n} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nconst Example = () => {\n  const platform = usePlatform();\n\n  return (\n    <AppRoot>\n      <SplitLayout header={platform !== 'vkcom' && <PanelHeader delimiter=\"none\" />}>\n        <SplitCol autoSpaced>\n          <View activePanel=\"main\">\n            <Panel id=\"main\">\n              <PanelHeader>VKUI</PanelHeader>\n              <Group header={<Header size=\"s\">Items</Header>}>\n                <SimpleCell>Hello</SimpleCell>\n                <SimpleCell>World</SimpleCell>\n              </Group>\n            </Panel>\n          </View>\n        </SplitCol>\n      </SplitLayout>\n    </AppRoot>\n  );\n};\n\nconst container = document.getElementById('root');\nconst root = createRoot(container); // createRoot(container!) if you use TypeScript\nroot.render(\n  <ConfigProvider>\n    <AdaptivityProvider>\n      <Example />\n    </AdaptivityProvider>\n  </ConfigProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Panel Navigation with Panel Component in VKUI\nDESCRIPTION: This example demonstrates how to create a multi-panel navigation interface using the Panel component from VKUI. It shows three interconnected panels with navigation controls, displaying different content types including lists with icons, search functionality, and centered content with a spinner. The implementation uses React state to manage active panel switching.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Panel/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [activePanel, setActivePanel] = React.useState('panel1');\n\n  return (\n    <View activePanel={activePanel}>\n      <Panel id=\"panel1\">\n        <PanelHeader>More</PanelHeader>\n        <Group>\n          <Cell\n            chevron=\"auto\"\n            before={<Icon28UserOutline />}\n            onClick={() => setActivePanel('panel2')}\n          >\n            Friends\n          </Cell>\n          <Cell\n            chevron=\"auto\"\n            before={<Icon28UsersOutline />}\n            onClick={() => setActivePanel('panel2')}\n          >\n            Communities\n          </Cell>\n          <Cell\n            chevron=\"auto\"\n            before={<Icon28MusicOutline />}\n            onClick={() => setActivePanel('panel2')}\n          >\n            Music\n          </Cell>\n        </Group>\n      </Panel>\n      <Panel id=\"panel2\">\n        <PanelHeader\n          delimiter=\"spacing\"\n          before={<PanelHeaderBack onClick={() => setActivePanel('panel1')} />}\n        >\n          Communities\n        </PanelHeader>\n        <Group>\n          <Search />\n          <Cell subtitle=\"Humor\" before={<Avatar />} onClick={() => setActivePanel('panel3')}>\n            Swipe Right\n          </Cell>\n          <Cell\n            subtitle=\"Cultural Center\"\n            before={<Avatar />}\n            onClick={() => setActivePanel('panel3')}\n          >\n            Out Cinema\n          </Cell>\n          <Cell subtitle=\"Movies\" before={<Avatar />} onClick={() => setActivePanel('panel3')}>\n            #ARTPOKAZ\n          </Cell>\n        </Group>\n      </Panel>\n      <Panel id=\"panel3\" centered>\n        <PanelHeader before={<PanelHeaderBack onClick={() => setActivePanel('panel2')} />}>\n          Out Cinema\n        </PanelHeader>\n        <Spinner />\n        <div style={{ marginTop: 10 }}>Centered Content</div>\n      </Panel>\n    </View>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Complex Navigation State Management Example\nDESCRIPTION: Demonstrates management of navigation state across multiple Views and Panels, including swipe back functionality\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/View/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [activeView, setActiveView] = useState('view1');\n  const [activePanel, setActivePanel] = useState(1);\n\n  const [swipeViewHistory, setSwipeViewHistory] = useState([`swipeView.${activePanel}`]);\n  const pushSwipeViewHistory = React.useCallback((panel) => {\n    setSwipeViewHistory((prevHistory) => [...prevHistory, `swipeView.${panel}`]);\n  }, []);\n  const onSwipeBack = React.useCallback(() => {\n    const newHistory = swipeViewHistory.slice(0, -1);\n    setSwipeViewHistory(newHistory);\n\n    const newActiveSwipeViewPanel = newHistory[newHistory.length - 1];\n    const swipeViewPanel = +newActiveSwipeViewPanel.split('swipeView.')[1];\n    setActivePanel(swipeViewPanel);\n  }, [swipeViewHistory]);\n\n  // Rest of the component implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering the React component\nDESCRIPTION: This snippet shows how to render the React application component into the DOM. It imports React and createRoot from react-dom/client, retrieves the root element from the document, and then renders the application within that root element, enabling the VKUI React component to be displayed in the browser.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/quick-start.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"// добавить в блок с импортами\nimport * as React from 'react';\nimport { createRoot } from 'react-dom/client';\n\n// добавить в конце файла\nconst container = document.getElementById('root');\nconst root = createRoot(container); // createRoot(container!) if you use TypeScript\nroot.render(<App />);\"\n```\n\n----------------------------------------\n\nTITLE: Minimal VKUI Application Screen Structure\nDESCRIPTION: Demonstrates the simplest possible screen structure for VKUI applications using Root and View components\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/structure.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, View, Panel } from '@vkontakte/vkui';\n\n<Root activeView=\"view\">\n  <View id=\"view\" activePanel=\"panel\">\n    <Panel id=\"panel\" />\n  </View>\n</Root>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Panel } from '@vkontakte/vkui';\n\n<View id=\"view\" activePanel=\"panel\">\n  <Panel id=\"panel\" />\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Implementing ChipsInput Component with Controlled and Uncontrolled Examples in React\nDESCRIPTION: This code demonstrates the ChipsInput component for multiple value selection with support for customizable data models. It shows both controlled and uncontrolled components, custom rendering of chips with avatars, and clear button functionality. The example includes predefined values, state management, and different configuration options.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ChipsInput/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst DEFAULT_VALUE = [\n  {\n    value: '1',\n    label: 'Arctic Monkeys',\n    src: getAvatarUrl('audio_arctic_monkeys'),\n  },\n  {\n    value: '2',\n    label: 'Звери',\n    src: getAvatarUrl('audio_leto_zveri'),\n  },\n  { value: '4', label: 'FACE', src: getAvatarUrl('audio_face') },\n  {\n    value: '3',\n    label: 'Depeche Mode',\n    src: getAvatarUrl('audio_depeche_mode'),\n  },\n  {\n    value: '5',\n    label: 'Linkin Park',\n    src: getAvatarUrl('audio_linkin_park'),\n  },\n];\n\nconst ClearButton = ({ onClick, ...restProps }) => {\n  return (\n    <IconButton hoverMode=\"opacity\" label=\"Очистить поле\" onClick={onClick} {...restProps}>\n      <Icon16Clear />\n    </IconButton>\n  );\n};\n\nconst Example = () => {\n  const [colors, setColors] = React.useState([\n    {\n      value: 'navarin',\n      label: 'Наваринского пламени с дымом',\n    },\n    {\n      value: 'red',\n      label: 'Красный',\n    },\n    {\n      value: 'blue',\n      label: 'Синий',\n    },\n  ]);\n\n  const onChange = (event) => {\n    setColors(event);\n  };\n\n  return (\n    <View activePanel=\"panel\">\n      <Panel id=\"panel\">\n        <PanelHeader>ChipsInput</PanelHeader>\n        <Group>\n          <FormItem htmlFor=\"color\" top=\"Цвет (контролируемый компонент)\">\n            <ChipsInput\n              id=\"color\"\n              placeholder=\"Введите цвета\"\n              ClearButton={ClearButton}\n              allowClearButton\n              value={colors}\n              onChange={onChange}\n            />\n          </FormItem>\n          <FormItem htmlFor=\"list\" top=\"Список\">\n            <ChipsInput\n              id=\"list\"\n              placeholder=\"Введите название и нажмите Enter\"\n              allowClearButton={true}\n            />\n          </FormItem>\n          <FormItem htmlFor=\"favoriteGroups\" top=\"Любимые группы (неконтролируемый компонент)\">\n            <ChipsInput\n              id=\"favoriteGroups\"\n              readOnly\n              defaultValue={DEFAULT_VALUE}\n              renderChip={({ value, label, ...rest }, { src }) => (\n                <Chip\n                  value={value}\n                  removable={false}\n                  before={<Avatar size={20} src={src} aria-hidden />}\n                  {...rest}\n                >\n                  {label}\n                </Chip>\n              )}\n            />\n          </FormItem>\n        </Group>\n      </Panel>\n    </View>\n  );\n};\n\nreturn <Example />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Customizable VKUI Button Demo in React\nDESCRIPTION: A React component that demonstrates the various configuration options of VKUI Button component. Shows how to customize button appearance, size, alignment, and add additional elements like icons and counters. Includes a control panel for live property updates.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Button/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [align, setAlign] = useState('center');\n  const [appearance, setAppearance] = useState('accent');\n  const [sizeY, setSizeY] = useState('compact');\n  const [rounded, setRounded] = useState(false);\n  const [stretched, setStretched] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [size, setSize] = useState('s');\n  const [loading, setLoading] = useState(false);\n  const [addBefore, setAddBefore] = useState(false);\n  const [addAfter, setAddAfter] = useState(false);\n  const [addText, setAddText] = useState(true);\n  const [hasLink, setHasLink] = useState(false);\n  const platform = usePlatform();\n\n  React.useEffect(() => {\n    if (platform === 'vkcom') {\n      setSizeY('compact');\n    }\n  }, [platform]);\n\n  const buttonBefore =\n    addBefore && (size === 's' ? <Icon12Add /> : size === 'm' ? <Icon16Add /> : <Icon24Add />);\n  const buttonAfter =\n    addAfter &&\n    (size === 's' ? (\n      <Icon12Tag />\n    ) : size === 'm' ? (\n      <Icon24ChevronCompactRight />\n    ) : (\n      <Counter>16</Counter>\n    ));\n  const buttonLink = hasLink ? '#' : undefined;\n  const buttonText = addText ? 'Button' : undefined;\n\n  return (\n    <Flex justify=\"end\" reverse>\n      <AdaptivityProvider sizeY={sizeY}>\n        <Flex\n          direction=\"column\"\n          justify=\"center\"\n          style={{\n            // For docs purpose only\n            background: appearance === 'overlay' ? '#232323' : 'unset',\n          }}\n        >\n          {['primary', 'secondary', 'tertiary', 'outline', 'link'].map((mode) => (\n            <Div key={mode}>\n              <Button\n                align={align}\n                href={buttonLink}\n                before={buttonBefore}\n                after={buttonAfter}\n                appearance={appearance}\n                stretched={stretched}\n                rounded={rounded}\n                mode={mode}\n                disabled={disabled}\n                size={size}\n                loading={loading}\n                onClick={() => {}}\n              >\n                {buttonText}\n              </Button>\n            </Div>\n          ))}\n        </Flex>\n      </AdaptivityProvider>\n      <Flex.Item flexBasis={200}>\n        <FormItem top=\"appearance\">\n          <Select\n            value={appearance}\n            onChange={(_, newValue) => setAppearance(newValue)}\n            options={[\n              { label: 'accent', value: 'accent' },\n              { label: 'positive', value: 'positive' },\n              { label: 'negative', value: 'negative' },\n              { label: 'neutral', value: 'neutral' },\n              { label: 'overlay', value: 'overlay' },\n              { label: 'accent-invariable', value: 'accent-invariable' },\n            ]}\n          />\n        </FormItem>\n        <FormItem top=\"size\">\n          <Select\n            value={size}\n            onChange={(_, newValue) => setSize(newValue)}\n            options={[\n              { label: 's', value: 's' },\n              { label: 'm', value: 'm' },\n              { label: 'l', value: 'l' },\n            ]}\n          />\n        </FormItem>\n        <FormItem top=\"align\">\n          <Select\n            value={align}\n            onChange={(_, newValue) => setAlign(newValue)}\n            options={[\n              { label: 'left', value: 'left' },\n              { label: 'center', value: 'center' },\n              { label: 'right', value: 'right' },\n            ]}\n          />\n        </FormItem>\n        <FormItem top=\"sizeY\">\n          <Select\n            value={sizeY}\n            onChange={(_, newValue) => setSizeY(newValue)}\n            options={[\n              { label: 'compact', value: 'compact' },\n              {\n                label: 'regular',\n                value: 'regular',\n                disabled: platform === 'vkcom',\n              },\n            ]}\n          />\n        </FormItem>\n        <FormItem top=\"props\">\n          <Checkbox onChange={(e) => setRounded(e.target.checked)}>rounded</Checkbox>\n          <Checkbox onChange={(e) => setStretched(e.target.checked)}>stretched</Checkbox>\n          <Checkbox onChange={(e) => setLoading(e.target.checked)}>loading</Checkbox>\n          <Checkbox onChange={(e) => setDisabled(e.target.checked)}>disabled</Checkbox>\n          <Checkbox\n            disabled={!(addBefore || addAfter)}\n            onChange={(e) => setAddText(e.target.checked)}\n            checked={addText}\n          >\n            add text\n          </Checkbox>\n          <Checkbox\n            disabled={!(addText || addAfter)}\n            onChange={(e) => setAddBefore(e.target.checked)}\n            checked={addBefore}\n          >\n            add before\n          </Checkbox>\n          <Checkbox\n            disabled={!(addText || addBefore)}\n            onChange={(e) => setAddAfter(e.target.checked)}\n            checked={addAfter}\n          >\n            add after\n          </Checkbox>\n          <Checkbox onChange={(e) => setHasLink(e.target.checked)}>add href</Checkbox>\n        </FormItem>\n      </Flex.Item>\n    </Flex>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: CSS Design Tokens Example\nDESCRIPTION: Demonstrates the usage of VKUI design tokens as CSS variables for component styling\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/platforms-and-themes.mdx#2025-04-20_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.SomeComponent {\n  color: var(--vkui--color_text_primary);\n  background: var(--vkui--color_background_content);\n}\n```\n\n----------------------------------------\n\nTITLE: usePopover Hook Example in React\nDESCRIPTION: This example demonstrates the usage of the `usePopover` hook. It sets up the popover with a click trigger and a simple content. The hook returns the anchorRef and anchorProps which are applied to the trigger button to properly position and control the Popover. The popover element itself, returned by the hook, needs to be rendered.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Popover/Readme.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const { anchorRef, anchorProps, popover } = usePopover({\n    'trigger': 'click',\n    'role': 'dialog',\n    'id': 'menupopup',\n    'aria-labelledby': 'menubutton',\n    'content': ({ onClose }) => (\n      <Div>\n        <Text>Привет</Text>\n      </Div>\n    ),\n  });\n\n  return (\n    <View activePanel=\"popover\">\n      <Panel id=\"popover\">\n        <PanelHeader>usePopover</PanelHeader>\n        <Group>\n          {popover}\n          <FormItem>\n            <Button\n              getRootRef={anchorRef}\n              id=\"menubutton\"\n              aria-controls=\"menupopup\"\n              {...anchorProps}\n            >\n              Нажми на меня\n            </Button>\n          </FormItem>\n        </Group>\n      </Panel>\n    </View>\n  );\n};\n\n<Example />;\n\n```\n\n----------------------------------------\n\nTITLE: Using ChipsSelect Component with Uncontrolled and Controlled Examples in React\nDESCRIPTION: A comprehensive demonstration of the ChipsSelect component showcasing three implementations: an uncontrolled component with custom rendering, a controlled component with value creation capability, and a controlled component with implicit value creation. The component allows for multiple selection with custom visual representation through renderChip and renderOption props.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ChipsSelect/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Uncontrolled = () => {\n  const groups = React.useMemo(\n    () => [\n      { value: 'download', label: 'Скачать все и вся!', icon: <Icon12Download /> },\n      {\n        value: '1',\n        label: 'Arctic Monkeys',\n        src: getAvatarUrl('audio_arctic_monkeys'),\n      },\n      { value: '2', label: 'Звери', disabled: true, src: getAvatarUrl('audio_leto_zveri') },\n      { value: '4', label: 'FACE', src: getAvatarUrl('audio_face') },\n      {\n        value: '3',\n        label: 'Depeche Mode',\n        src: getAvatarUrl('audio_depeche_mode'),\n      },\n      { value: '5', label: 'Linkin Park', src: getAvatarUrl('audio_linkin_park') },\n    ],\n    [],\n  );\n\n  return (\n    <FormItem htmlFor=\"groups\" top=\"Выберите группы\">\n      <ChipsSelect\n        id=\"groups\"\n        options={groups}\n        placeholder=\"Не выбраны\"\n        emptyText=\"Совсем ничего не найдено\"\n        selectedBehavior=\"hide\"\n        closeAfterSelect={false}\n        allowClearButton={true}\n        onChangeStart={(event, option) => {\n          if (option.value === 'download') {\n            event.preventDefault();\n            alert('download!');\n          }\n        }}\n        renderChip={({ value, label, ...rest }, { src, icon }) => (\n          <Chip value={value} before={<Avatar size={20} src={src} aria-hidden />} {...rest}>\n            {label}\n          </Chip>\n        )}\n        renderOption={(props, { src, value, icon }) => {\n          return (\n            <CustomSelectOption\n              before={\n                <Avatar size={20} aria-hidden src={src}>\n                  {icon}\n                </Avatar>\n              }\n              {...props}\n            />\n          );\n        }}\n      />\n    </FormItem>\n  );\n};\n\nconst ControlledCreatable = () => {\n  const colors = React.useMemo(\n    () => [\n      { value: 'red', label: 'Красный' },\n      { value: 'blue', label: 'Синий' },\n      { value: 'navarin', label: 'Наваринского пламени с дымом' },\n    ],\n    [],\n  );\n  const [selectedColors, setSelectedColors] = React.useState(() => colors.slice(0, 2));\n\n  return (\n    <FormItem htmlFor=\"colors\" top=\"Выберите или добавьте цвета\">\n      <ChipsSelect\n        id=\"colors\"\n        value={selectedColors}\n        onChange={setSelectedColors}\n        options={colors}\n        placeholder=\"Не выбраны\"\n        creatable=\"Добавить цвет\"\n        allowClearButton={true}\n      />\n    </FormItem>\n  );\n};\n\nconst ControlledCreatableWithoutCreateButton = () => {\n  const colors = React.useMemo(\n    () => [\n      { value: 'red', label: 'Красный' },\n      { value: 'blue', label: 'Синий' },\n      { value: 'navarin', label: 'Наваринского пламени с дымом' },\n    ],\n    [],\n  );\n  const [selectedColorsCopy, setSelectedColorsCopy] = React.useState([]);\n\n  return (\n    <FormItem\n      htmlFor=\"colorsWithoutButton\"\n      top=\"Выберите или добавьте цвета (creatable без кнопки создания)\"\n    >\n      <ChipsSelect\n        id=\"colorsWithoutButton\"\n        value={selectedColorsCopy}\n        onChange={setSelectedColorsCopy}\n        options={colors}\n        creatable={true}\n        placeholder=\"Не выбраны\"\n      />\n    </FormItem>\n  );\n};\n\nconst Example = () => {\n  return (\n    <Group separator=\"hide\">\n      <Uncontrolled />\n      <ControlledCreatable />\n      <ControlledCreatableWithoutCreateButton />\n    </Group>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal Pages with User Data and Form Elements in React\nDESCRIPTION: This snippet demonstrates rendering several modal pages within a ModalRoot component, including pages for user info, story feedback, and country selection. The pages use components like ModalPage, ModalPageHeader, Group, Cell, InfoRow, and Radio to display content and form elements.  Event handlers like changeActiveModal and modalBack are used to control modal visibility.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ModalRoot/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n\"<ModalRoot activeModal={activeModal}>\n      <ModalPage\n        id={MODAL_PAGE_FILTERS}\n        onClose={modalBack}\n        header={\n          <ModalPageHeader before={<PanelHeaderBack label=\\\"Назад\\\" onClick={modalBack} />}>\n            Фильтры\n          </ModalPageHeader>\n        }\n        settlingHeight={80}\n      >\n        <Group>\n          <CellButton onClick={() => changeActiveModal(MODAL_PAGE_USER_INFO)}>\n            Информация о пользователе\n          </CellButton>\n\n          <FormLayoutGroup>\n            {importantCountries.map(({ id, title }) => {\n              return (\n                <Radio key={id} name=\\\"country\\\" value={id}>\n                  {title}\n                </Radio>\n              );\n            })}\n          </FormLayoutGroup>\n        </Group>\n      </ModalPage>\n\n      <ModalPage\n        id={MODAL_PAGE_STORY_FEEDBACK}\n        onClose={modalBack}\n        header={\n          <ModalPageHeader before={<PanelHeaderBack label=\\\"Назад\\\" onClick={modalBack} />}>\n            Просмотры истории\n          </ModalPageHeader>\n        }\n        settlingHeight={80}\n      >\n        <Group>\n          {users.map((user) => {\n            return (\n              <SimpleCell before={<Avatar src={user.photo_100} />} key={user.id}>\n                {user.name}\n              </SimpleCell>\n            );\n          })}\n        </Group>\n      </ModalPage>\n\n      <ModalPage\n        id={MODAL_PAGE_USER_INFO}\n        onClose={modalBack}\n        header={\n          <ModalPageHeader before={<PanelHeaderBack label=\\\"Назад\\\" onClick={modalBack} />}>\n            Информация о пользователе\n          </ModalPageHeader>\n        }\n      >\n        <Group>\n          <Cell>\n            <InfoRow header=\\\"Дата рождения\\\">30 января 1993</InfoRow>\n          </Cell>\n          <Cell>\n            <InfoRow header=\\\"Родной город\\\">Ереван</InfoRow>\n          </Cell>\n          <Cell>\n            <InfoRow header=\\\"Место работы\\\">Команда ВКонтакте</InfoRow>\n          </Cell>\n        </Group>\n      </ModalPage>\n\n      <ModalCard\n        id={MODAL_CARD_MONEY_SEND}\n        onClose={() => changeActiveModal(null)}\n        icon={<Icon56MoneyTransferOutline />}\n        title=\\\"Отправляйте деньги друзьям, используя банковскую карту\\\"\n        description=\\\"Номер карты получателя не нужен — он сам решит, куда зачислить средства.\\\"\n        actions={\n          <React.Fragment>\n            <Spacing size={16} />\n            <Button\n              size=\\\"l\\\"\n              mode=\\\"primary\\\"\n              stretched\n              onClick={() => changeActiveModal(MODAL_CARD_APP_TO_MENU)}\n            >\n              Попробовать\n            </Button>\n          </React.Fragment>\n        }\n      />\n\n      <ModalCard\n        id={MODAL_CARD_APP_TO_MENU}\n        onClose={() => changeActiveModal(null)}\n        icon={<Image borderRadius=\\\"l\\\" src={getAvatarUrl('app_zagadki', 200)} size={72} />}\n        title=\\\"Добавить игру «Загадки детства» в меню?\\\"\n        description=\\\"Игра появится под списком разделов на экране меню и будет всегда под рукой.\\\"\n        actions={\n          <React.Fragment>\n            <Spacing size={16} />\n            <Button\n              size=\\\"l\\\"\n              mode=\\\"primary\\\"\n              stretched\n              onClick={() => changeActiveModal(MODAL_CARD_ABOUT)}\n            >\n              Добавить в меню\n            </Button>\n          </React.Fragment>\n        }\n      />\n\n      <ModalCard\n        id={MODAL_CARD_ABOUT}\n        onClose={() => changeActiveModal(null)}\n        title=\\\"Расскажите о себе\\\"\n        actions={\n          <Button\n            size=\\\"l\\\"\n            mode=\\\"primary\\\"\n            stretched\n            onClick={() => changeActiveModal(MODAL_CARD_NOTIFICATIONS)}\n          >\n            Сохранить\n          </Button>\n        }\n      >\n        <Spacing size={16} />\n        <Textarea defaultValue=\\\"В Грузии\\\" />\n      </ModalCard>\n\n      <ModalCard\n        id={MODAL_CARD_NOTIFICATIONS}\n        onClose={() => changeActiveModal(null)}\n        icon={<Icon56NotificationOutline />}\n        title=\\\"Приложение запрашивает разрешение на отправку Вам уведомлений\\\"\n        actions={\n          <React.Fragment>\n            <Spacing size={16} />\n            <ButtonGroup gap=\\\"m\\\" stretched>\n              <Button\n                key=\\\"deny\\\"\n                size=\\\"l\\\"\n                mode=\\\"secondary\\\"\n                stretched\n                onClick={() => changeActiveModal(MODAL_CARD_CHAT_INVITE)}\n              >\n                Запретить\n              </Button>\n              <Button\n                key=\\\"allow\\\"\n                size=\\\"l\\\"\n                mode=\\\"primary\\\"\n                stretched\n                onClick={() => changeActiveModal(MODAL_CARD_CHAT_INVITE)}\n              >\n                Разрешить\n              </Button>\n            </ButtonGroup>\n          </React.Fragment>\n        }\n      />\n\n      <ModalCard\n        id={MODAL_CARD_CHAT_INVITE}\n        onClose={() => changeActiveModal(null)}\n        icon={<Avatar src={getAvatarUrl('chat_basketball', 200)} size={72} />}\n        title=\\\"Баскетбол на выходных\\\"\n        description=\\\"Приглашение в беседу\\\"\n        actions={\n          <React.Fragment>\n            <Spacing size={8} />\n            <ButtonGroup gap=\\\"m\\\" mode=\\\"vertical\\\" stretched>\n              <Button\n                key=\\\"join\\\"\n                size=\\\"l\\\"\n                mode=\\\"primary\\\"\n                stretched\n                onClick={() => changeActiveModal(null)}\n              >\n                Присоединиться\n              </Button>\n              <Button\n                key=\\\"copy\\\"\n                size=\\\"l\\\"\n                mode=\\\"secondary\\\"\n                stretched\n                onClick={() => changeActiveModal(null)}\n              >\n                Скопировать приглашение\n              </Button>\n            </ButtonGroup>\n          </React.Fragment>\n        }\n      >\n        <Spacing size={20} />\n        <UsersStack\n          photos={[\n            getAvatarUrl('user_mm'),\n            getAvatarUrl('user_ilyagrshn'),\n            getAvatarUrl('user_lihachyov'),\n            getAvatarUrl('user_wayshev'),\n            getAvatarUrl('user_arthurstam'),\n            getAvatarUrl('user_xyz'),\n          ]}\n          size=\\\"l\\\"\n          visibleCount={3}\n          avatarsPosition=\\\"block-start\\\"\n        >\n          Алексей, Илья, Михаил\n          <br />и ещё 3 человека\n        </UsersStack>\n      </ModalCard>\n    </ModalRoot>\"\n```\n\n----------------------------------------\n\nTITLE: Configure Global Theme with Existing Tokens in VKUI\nDESCRIPTION: This code snippet shows how to configure a global theme in VKUI using existing themes from `@vkontakte/vkui-tokens`. It imports the necessary components and CSS files, and then uses the `ConfigProvider` component to specify the class names for the light and dark themes. The `tokensClassNames` prop of `ConfigProvider` is used to map the `light` and `dark` keys to their respective CSS class names.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/customize.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n \"import { ConfigProvider, AppRoot, Button } from '@vkontakte/vkui';\\nimport '@vkontakte/vkui/dist/components.css';\\nimport '@vkontakte/vkui-tokens/themes/paradigmBase/cssVars/declarations/onlyVariables.css';\\nimport '@vkontakte/vkui-tokens/themes/paradigmBaseDark/cssVars/declarations/onlyVariablesLocal.css';\\n\\nReactDOM.render(\\n  <ConfigProvider\\n    tokensClassNames={{\\n      light: 'vkui--paradigmBase--light',\\n      dark: 'vkui--paradigmBase--dark',\\n    }}\\n  >\\n    <AppRoot>\\n      <Button />\\n    </AppRoot>\\n  </ConfigProvider>,\\n  root,\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Initializing AdaptivityProvider in VKUI with React\nDESCRIPTION: This snippet demonstrates how to wrap your application with `ConfigProvider`, `AdaptivityProvider`, and `AppRoot` from VKUI to enable adaptivity features.  It imports necessary components from `@vkontakte/vkui` and initializes a basic React application.  This is a fundamental step for making your VKUI application responsive.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/adaptivity.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { ConfigProvider, AdaptivityProvider, AppRoot } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nfunction App() {\n  return (\n    <ConfigProvider>\n      <AdaptivityProvider>\n        <AppRoot>...</AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  );\n}\n\nconst container = document.getElementById('root');\nconst root = createRoot(container); // createRoot(container!) if you use TypeScript\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Complex OnboardingTooltip Example with State Management\nDESCRIPTION: A comprehensive example demonstrating how to implement multiple OnboardingTooltips with state management across different panels. Shows sequential tooltip display and navigation between panels.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/OnboardingTooltip/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [tooltip, setTooltip] = React.useState(true);\n  const [tooltip2, setTooltip2] = React.useState(true);\n  const [tooltip3, setTooltip3] = React.useState(false);\n  const [activePanel, setActivePanel] = React.useState('tooltip');\n\n  return (\n    <View activePanel={activePanel}>\n      <Panel id=\"tooltip\">\n        <PanelHeader>OnboardingTooltip</PanelHeader>\n        <Group>\n          <List>\n            <SimpleCell>Музыка</SimpleCell>\n            <SimpleCell>Видео</SimpleCell>\n            <SimpleCell>Игры</SimpleCell>\n            <SimpleCell>Закладки</SimpleCell>\n            <SimpleCell>Документы</SimpleCell>\n            <SimpleCell>Денежные переводы</SimpleCell>\n          </List>\n        </Group>\n        <Group>\n          <OnboardingTooltip\n            description=\"У нас тут brand new функционал подвезли. Зацените!\"\n            shown={tooltip}\n            onClose={() => setTooltip(false)}\n            offsetByMainAxis={8}\n            offsetByCrossAxis={10}\n          >\n            <SimpleCell onClick={() => setActivePanel('tooltip2')}>VK Pay</SimpleCell>\n          </OnboardingTooltip>\n        </Group>\n      </Panel>\n\n      <Panel id=\"tooltip2\">\n        <PanelHeader\n          before={\n            <OnboardingTooltip\n              shown={tooltip2}\n              onClose={() => {\n                setTooltip2(false);\n                setTooltip3(true);\n              }}\n              description=\"Нажмите на кнопку, если хотите вернуться\"\n              title=\"Назад\"\n            >\n              <PanelHeaderBack onClick={() => setActivePanel('tooltip')} />\n            </OnboardingTooltip>\n          }\n        >\n          OnboardingTooltip\n        </PanelHeader>\n        <Group>\n          <List>\n            <SimpleCell\n              before={\n                <OnboardingTooltip\n                  description=\"Теперь у нас появились аватарки в списках. Правда круто?\"\n                  shown={tooltip3}\n                  onClose={() => setTooltip3(false)}\n                  arrowOffset={-6}\n                >\n                  <Avatar />\n                </OnboardingTooltip>\n              }\n              subtitle=\"Веб-сайт\"\n            >\n              Команда ВКонтакте\n            </SimpleCell>\n            <SimpleCell before={<Avatar />} subtitle=\"Музыкант\">\n              Robbie Williams\n            </SimpleCell>\n            <SimpleCell before={<Avatar />} subtitle=\"Издательский дом\">\n              ПостНаука\n            </SimpleCell>\n            <SimpleCell before={<Avatar />} subtitle=\"Издательский дом\">\n              ПостНаука\n            </SimpleCell>\n            <SimpleCell before={<Avatar />} subtitle=\"Издательский дом\">\n              ПостНаука\n            </SimpleCell>\n            <SimpleCell before={<Avatar />} subtitle=\"Издательский дом\">\n              ПостНаука\n            </SimpleCell>\n            <SimpleCell before={<Avatar />} subtitle=\"Издательский дом\">\n              ПостНаука\n            </SimpleCell>\n          </List>\n        </Group>\n      </Panel>\n    </View>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Color Scheme in React\nDESCRIPTION: Shows how to configure dark mode using ConfigProvider with manual color scheme selection\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/platforms-and-themes.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <ConfigProvider colorScheme=\"dark\">\n    <AdaptivityProvider>\n      <AppRoot>\n        <SimpleCell>Темным-темно</SimpleCell>\n      </AppRoot>\n    </AdaptivityProvider>\n  </ConfigProvider>,\n  root,\n);\n```\n\n----------------------------------------\n\nTITLE: Configure Platform-Specific Theme with Existing Tokens in VKUI\nDESCRIPTION: This code snippet demonstrates how to configure a theme for a specific platform (Android) in VKUI using existing themes from `@vkontakte/vkui-tokens`. It imports components, base CSS, and platform-specific CSS token files.  It utilizes `ConfigProvider` to define `tokensClassNames` specific to Android, while also importing default iOS theme styles to maintain consistency for platforms not explicitly themed.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/customize.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n \"import { ConfigProvider, AppRoot, Button } from '@vkontakte/vkui';\\nimport '@vkontakte/vkui/dist/components.css';\\nimport '@vkontakte/vkui-tokens/themes/paradigmBase/cssVars/declarations/onlyVariables.css'; // базовая тема должна подключаться через `:root`, поэтому здесь импортируется `onlyVariables.css`, где токены навешиваются через псевдокласс `:root`\\n// @see https://unpkg.com/@vkontakte/vkui-tokens@4.48.0/themes/paradigmBase/cssVars/declarations/onlyVariables.css\\nimport '@vkontakte/vkui-tokens/themes/paradigmBaseDark/cssVars/declarations/onlyVariablesLocal.css'; // остальные должны быть завязаны на CSS класс, поэтому здесь импортируется `onlyVariablesLocal.css` где токены навешиваются через класс темы `.vkui--paradigmBase--dark`.\\n// @see https://unpkg.com/@vkontakte/vkui-tokens@4.48.0/themes/paradigmBaseDark/cssVars/declarations/onlyVariablesLocal.css\\n\\n// раз iOS мы не затрагиваем, то необходимо подключить стили по умолчанию\\nimport '@vkontakte/vkui-tokens/themes/vkIOS/cssVars/declarations/onlyVariablesLocal.css';\\nimport '@vkontakte/vkui-tokens/themes/vkIOSDark/cssVars/declarations/onlyVariablesLocal.css';\\n\\nReactDOM.render(\\n  <ConfigProvider\\n    tokensClassNames={{\\n      android: {\\n        light: 'vkui--paradigmBase--light',\\n        dark: 'vkui--paradigmBase--dark',\\n      },\\n    }}\\n  >\\n    <AppRoot>\\n      <Button />\\n    </AppRoot>\\n  </ConfigProvider>,\\n  root,\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Logic with VK Bridge in React\nDESCRIPTION: This React component manages navigation history and panel transitions for a VK Mini App. It handles swipe settings with VK Bridge based on the current panel, ensuring seamless navigation through the app using a stack-like history.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/integrations_vk_mini_apps.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport vkBridge from '@vkontakte/vk-bridge';\n\nconst SomeViews = () => {\n  const [history, setHistory] = useState(['main']);\n  const activePanel = history[history.length - 1];\n  const isFirst = history.length === 1;\n\n  const go = React.useCallback((panel) => setHistory((prevHistory) => [...prevHistory, panel]), []);\n  const goBack = React.useCallback(() => setHistory((prevHistory) => prevHistory.slice(0, -1)), []);\n  const handleProfileClick = () => go('profile');\n  const handleMainClick = () => go('main');\n\n  React.useEffect(() => {\n    // Для стандартных мини-приложений делайте так:\n    vkBridge.send('VKWebAppSetSwipeSettings', { history: isFirst });\n    // Для внутренних мини-приложений делайте так:\n    vkBridge.send(isFirst ? 'VKWebAppEnableSwipeBack' : 'VKWebAppDisableSwipeBack');\n  }, [isFirst]);\n\n  return (\n    <View history={history} activePanel={activePanel} onSwipeBack={goBack}>\n      <Panel id=\"main\">\n        <div onClick={handleProfileClick}>Main</div>\n      </Panel>\n      <Panel id=\"profile\">\n        <div onClick={handleMainClick}>Profile</div>\n      </Panel>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: SegmentedControl as Tabs with Accessibility\nDESCRIPTION: This example demonstrates how to use SegmentedControl as a tab navigation component with proper accessibility. It includes setting the appropriate roles and aria attributes for screen readers, ensuring the component is accessible to all users.  Each tab controls the visibility of a corresponding content panel.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/SegmentedControl/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [selected, setSelected] = React.useState('news');\n\n  return (\n    <View activePanel=\"panel\">\n      <Panel id=\"panel\">\n        <PanelHeader>SegmentedControl</PanelHeader>\n\n        <SegmentedControl\n          role=\"tablist\"\n          value={selected}\n          onChange={(value) => setSelected(value)}\n          options=[\n            {\n              'label': 'Новости',\n              'value': 'news',\n              'aria-controls': 'tab-content-news',\n              'id': 'tab-news',\n            },\n            {\n              'label': 'Интересное',\n              'value': 'recommendations',\n              'aria-controls': 'tab-content-recommendations',\n              'id': 'tab-recommendations',\n            },\n          ]\n        />\n\n        {selected === 'news' && (\n          <Group id=\"tab-content-news\" aria-labelledby=\"tab-news\" role=\"tabpanel\" tabIndex={0}>\n            <Div>Контент новостей</Div>\n          </Group>\n        )}\n        {selected === 'recommendations' && (\n          <Group\n            id=\"tab-content-recommendations\"\n            aria-labelledby=\"tab-recommendations\"\n            role=\"tabpanel\"\n            tabIndex={0}\n          >\n            <Div>Контент рекомендаций</Div>\n          </Group>\n        )}\n      </Panel>\n    </View>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Rendering with VKUI\nDESCRIPTION: Sets up an Express server to render VKUI components with server-side platform detection using SSRWrapper and useragent\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/ssr.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderToString } from 'react-dom/server';\nimport { Button, SSRWrapper } from '@vkontakte/vkui';\nimport express from 'express';\nimport useragent from 'express-useragent';\n\nconst server = express();\nserver.use(useragent.express());\n\nserver.get('/', function (req, res) {\n  res.send(\n    renderToString(\n      <SSRWrapper userAgent={req.useragent.source}>\n        <Button>Hello</Button>\n      </SSRWrapper>,\n    ),\n  );\n});\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Complex Select Example in View/Panel\nDESCRIPTION: This example presents a more complex usage scenario of the Select component within a View, Panel, and FormItem structure. It includes dynamically generated options with avatars and custom rendering using CustomSelectOption.  It shows how to pass properties down and correctly use avatar components.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Select/Readme.md#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n\"<View activePanel=\\\"select\\\">\\n  <Panel id=\\\"select\\\">\\n    <PanelHeader>Select</PanelHeader>\\n    <Group>\\n      <FormItem\\n        top=\\\"Администратор\\\"\\n        htmlFor=\\\"select-id\\\"\\n        bottom=\\\"Пример использования Select для выбора администратора из списка\\\"\\n      >\\n        <Select\\n          id=\\\"select-id\\\"\\n          placeholder=\\\"Не выбран\\\"\\n          options={getRandomUsers(10).map((user) => ({\\n            label: user.name,\\n            value: user.id,\\n            avatar: user.photo_100,\\n          }))}\\n          renderOption={({ option, ...restProps }) => (\\n            <CustomSelectOption\\n              {...restProps}\\n              key={option.value}\\n              before={<Avatar size={24} src={option.avatar} />}\\n            />\\n          )}\\n        />\\n      </FormItem>\\n    </Group>\\n  </Panel>\\n</View>\"\n```\n\n----------------------------------------\n\nTITLE: Configure Platform-Specific Theme with Custom Tokens in VKUI\nDESCRIPTION: This code snippet shows how to configure a theme for a specific platform (Android) in VKUI using a custom theme CSS file. It imports the components, core CSS, and the custom theme file. The `ConfigProvider` component's `tokensClassNames` prop is used to apply custom theme class names based on the appearance (light/dark) to the Android platform. Default iOS themes are included to maintain styling consistency across platforms if not customized.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/customize.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n \"import { ConfigProvider, AppRoot, Button } from '@vkontakte/vkui';\\nimport '@vkontakte/vkui/dist/components.css';\\n// тут предполагается, что светлый и тёмный режимы определены в одном файле\\nimport './myCustomThemeTokens.css';\\n\\n// раз iOS мы не затрагиваем, то необходимо подключить стили по умолчанию\\nimport '@vkontakte/vkui-tokens/themes/vkIOS/cssVars/declarations/onlyVariablesLocal.css';\\nimport '@vkontakte/vkui-tokens/themes/vkIOSDark/cssVars/declarations/onlyVariablesLocal.css';\\n\\nReactDOM.render(\\n  <ConfigProvider\\n    tokensClassNames={{\\n      android: {\\n        light: 'myCustomThemeTokens--appearance-light',\\n        dark: 'myCustomThemeTokens--appearance-dark',\\n      },\\n    }}\\n  >\\n    <AppRoot>\\n      <Button />\\n    </AppRoot>\\n  </ConfigProvider>,\\n  root,\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Basic Snackbar Component with Button\nDESCRIPTION: This snippet presents a basic implementation of the Snackbar component without additional positioning or logic. It demonstrates how to include an icon and a button within the Snackbar, showcasing a simple message that can be displayed to the user.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Snackbar/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<div style={{ display: 'grid', padding: 32, gap: 32 }}>\n  <Snackbar.Basic\n    before={<Icon28CheckCircleOutline fill=\"var(--vkui--color_icon_positive)\" />}\n    after={\n      <Button mode=\"link\" appearance=\"accent\" size=\"s\">\n        Поделиться\n      </Button>\n    }\n  >\n    Ссылка скопирована\n  </Snackbar.Basic>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Select with VisuallyHidden and aria-labelledby\nDESCRIPTION: This example demonstrates using the Select component with a VisuallyHidden component containing a span and using `aria-labelledby`. The VisuallyHidden makes the span content only available to screen readers and the `aria-labelledby` links the span to the Select component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Select/Readme.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n\"<VisuallyHidden Component=\\\"span\\\" id=\\\"select-label-id\\\">Администратор</VisuallyHidden>\\n<Select\\n  aria-labelledby=\\\"select-label-id\\\"\\n  placeholder=\\\"Не выбран\\\"\\n  options={users}\\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Modal Window Navigation with Root Component\nDESCRIPTION: Shows advanced navigation structure using Root, View, and Panel components for managing different application scenarios and modal windows\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/structure.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Root, View } from '@vkontakte/vkui';\n\n<Root activeView=\"main\">\n  <View id=\"main\" activePanel=\"general\">\n    <Panel id=\"general\">\n      {* general *}\n    </Panel>\n    <Panel id=\"education\">\n      {* education *}\n    </Panel>\n  </View>\n  <View id=\"users-search\" activePanel=\"users-search\">\n    <Panel id=\"users-search\">\n      {* modal window for users search *}\n    </Panel>\n  </View>\n  <View id=\"check-user-actions\" activePanel=\"check-user-actions\">\n    <Panel id=\"check-user-actions\">\n      {* modal window for check user actions *}\n    </Panel>\n  </View>\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Creating an FAQ Accordion with Controlled State for VKID in React JSX\nDESCRIPTION: This snippet implements a controlled Accordion component for a VKID FAQ section where only one accordion can be open at a time. It uses React state to track which accordion is expanded and renders multiple accordion items from an array of data.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Accordion/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst infoStyle = { color: 'var(--vkui--color_text_subhead)' };\n\nconst AccordionVKID = () => {\n  const data = [\n    {\n      id: 1,\n      title: 'Как сменить номер телефона?',\n      detail:\n        'Зайдите в раздел Безопасность и вход. Укажите новый номер телефона и подтвердите его.',\n    },\n    {\n      id: 2,\n      title: 'Как изменить пароль?',\n      detail:\n        'Для входа во многие сервисы экосистемы VK используется один пароль. Если вы беспокоитесь по поводу безопасности, этот пароль можно изменить.',\n    },\n    {\n      id: 3,\n      title: 'Как усилить защиту аккаунта?',\n      detail:\n        'Используйте сложный пароль и регулярно меняйте его. Обновить пароль можно в разделе Пароль.',\n    },\n  ];\n\n  const [openId, setOpenId] = React.useState(2);\n\n  return data.map(({ id, title, detail }) => (\n    <Accordion\n      key={id}\n      expanded={openId === id}\n      onChange={(e) => (e ? setOpenId(id) : setOpenId(null))}\n    >\n      <Accordion.Summary>{title}</Accordion.Summary>\n      <Accordion.Content>\n        <Div style={infoStyle}>{detail}</Div>\n      </Accordion.Content>\n    </Accordion>\n  ));\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with useAdaptivityConditionalRender in VKUI\nDESCRIPTION: This snippet demonstrates how to use the `useAdaptivityConditionalRender` hook to conditionally render a side column based on screen size. It utilizes the hook to access adaptivity parameters and renders the `SplitCol` containing the side navigation only on tablet and larger screens.  This allows for responsive behavior where the side navigation is hidden on smaller screens.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/adaptivity.md#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nfunction App() {\n  const platform = usePlatform();\n  const isVKCOM = platform === 'vkcom';\n  const { viewWidth } = useAdaptivityConditionalRender();\n\n  // ...\n\n  <SplitLayout header={!isVKCOM && <PanelHeader delimiter=\"none\" />}>\n    {viewWidth.tabletPlus && (\n      <SplitCol width={280} className={viewWidth.tabletPlus.className}>\n        <Panel id=\"nav\">Navigation</Panel>\n      </SplitCol>\n    )}\n    <SplitCol autoSpaced>\n      <View activePanel=\"profile\">\n        <Panel id=\"profile\">Profile</Panel>\n      </View>\n    </SplitCol>\n  </SplitLayout>;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Comprehensive Gallery Component Example with Various Configurations\nDESCRIPTION: Implements a complete example of the Gallery component with multiple configurations, including different alignment options, slide widths, navigation controls, and controlled behavior. The example demonstrates how to handle state and implement various interactive features.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Gallery/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [dragDisabled, setDragDisabled] = useState(false);\n  const [showArrows, setShowArrows] = useState(true);\n  const [looped, setLooped] = useState(false);\n\n  return (\n    <View activePanel=\"gallery\">\n      <Panel nav=\"gallery\">\n        <PanelHeader>Gallery</PanelHeader>\n        <Group header={<Header size=\"s\">Sticks right</Header>}>\n          <Gallery slideWidth=\"90%\" bullets=\"dark\">\n            <div style={{ backgroundColor: 'var(--vkui--color_background_negative)' }} />\n            <img src=\"https://placebear.com/1024/640\" style={{ display: 'block' }} />\n            <div style={{ backgroundColor: 'var(--vkui--color_background_accent)' }} />\n          </Gallery>\n        </Group>\n        <Group header={<Header size=\"s\">Sticks left</Header>}>\n          <Gallery slideWidth=\"90%\" align=\"right\">\n            <div\n              style={{\n                height: 150,\n                backgroundColor: 'var(--vkui--color_background_negative)',\n              }}\n            />\n            <div style={{ backgroundColor: 'var(--vkui--color_background_positive)' }} />\n            <div style={{ backgroundColor: 'var(--vkui--color_background_accent)' }} />\n          </Gallery>\n        </Group>\n        <Group header={<Header size=\"s\">Centered</Header>}>\n          <Gallery slideWidth=\"90%\" align=\"center\">\n            <div style={{ backgroundColor: 'var(--vkui--color_background_negative)' }} />\n            <div style={{ backgroundColor: 'var(--vkui--color_background_positive)' }} />\n            <div style={{ backgroundColor: 'var(--vkui--color_background_accent)' }} />\n          </Gallery>\n        </Group>\n        <Group header={<Header size=\"s\">Custom width</Header>}>\n          <Gallery slideWidth=\"custom\" style={{ height: 150 }}>\n            <div\n              style={{\n                width: 200,\n                backgroundColor: 'var(--vkui--color_background_negative)',\n              }}\n            />\n            <div\n              style={{\n                width: 120,\n                backgroundColor: 'var(--vkui--color_background_positive)',\n              }}\n            />\n            <div\n              style={{\n                width: 70,\n                backgroundColor: 'var(--vkui--color_background_accent)',\n              }}\n            />\n            <div\n              style={{\n                width: 220,\n                backgroundColor: 'var(--vkui--color_icon_secondary)',\n              }}\n            />\n          </Gallery>\n        </Group>\n        <Group header={<Header size=\"s\">Arrows</Header>}>\n          <Gallery slideWidth=\"90%\" style={{ height: 150 }} bullets=\"dark\" showArrows>\n            <div style={{ backgroundColor: 'var(--vkui--color_background_negative)' }} />\n            <div style={{ backgroundColor: 'var(--vkui--color_background_positive)' }} />\n            <div style={{ backgroundColor: 'var(--vkui--color_background_accent)' }} />\n          </Gallery>\n        </Group>\n        <Group header={<Header size=\"s\">Controlled</Header>}>\n          <Gallery\n            slideWidth=\"90%\"\n            align=\"center\"\n            style={{ height: 150 }}\n            slideIndex={slideIndex}\n            onChange={setSlideIndex}\n            dragDisabled={dragDisabled}\n            showArrows={showArrows}\n            looped={looped}\n          >\n            <div style={{ backgroundColor: 'var(--vkui--color_background_negative)' }} />\n            <div style={{ backgroundColor: 'var(--vkui--color_background_positive)' }} />\n            <div style={{ backgroundColor: 'var(--vkui--color_background_accent)' }} />\n          </Gallery>\n\n          <FormItem>\n            <Checkbox checked={dragDisabled} onChange={(e) => setDragDisabled(e.target.checked)}>\n              dragDisabled\n            </Checkbox>\n            <Checkbox checked={showArrows} onChange={(e) => setShowArrows(e.target.checked)}>\n              showArrows\n            </Checkbox>\n            <Checkbox checked={looped} onChange={(e) => setLooped(e.target.checked)}>\n              looped\n            </Checkbox>\n          </FormItem>\n          <FormItem>\n            <Button size=\"l\" stretched onClick={() => setSlideIndex((slideIndex + 1) % 3)}>\n              Next slide\n            </Button>\n          </FormItem>\n          <FormItem>\n            <Button size=\"l\" stretched onClick={() => setSlideIndex((slideIndex + 2) % 3)}>\n              Prev slide\n            </Button>\n          </FormItem>\n        </Group>\n        <Group header={<Header size=\"s\">With looped prop</Header>}>\n          <Gallery slideWidth=\"90%\" style={{ height: 150 }} bullets=\"dark\" showArrows looped>\n            <Slide backgroundColor=\"var(--vkui--color_background_negative)\">1</Slide>\n            <Slide backgroundColor=\"var(--vkui--color_background_positive)\">2</Slide>\n            <Slide backgroundColor=\"var(--vkui--color_background_accent)\">3</Slide>\n            <Slide backgroundColor=\"var(--vkui--color_background_negative)\">4</Slide>\n            <Slide backgroundColor=\"var(--vkui--color_background_positive)\">5</Slide>\n          </Gallery>\n        </Group>\n      </Panel>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: VK Bridge Adaptivity Transformer\nDESCRIPTION: Utility function to convert VK Bridge adaptivity data to VKUI AdaptivityProvider props\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/integrations/vk-mini-apps.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type AdaptivityProps,\n  getViewWidthByViewportWidth,\n  getViewHeightByViewportHeight,\n  ViewWidth,\n} from '@vkontakte/vkui';\nimport type { UseAdaptivity } from '@vkontakte/vk-bridge-react';\n\n/**\n * Требуется конвертировать данные из VK Bridge в те, что принимает AdaptivityProvider из VKUI.\n */\nexport const transformVKBridgeAdaptivity = ({\n  type,\n  viewportWidth,\n  viewportHeight,\n}: UseAdaptivity): AdaptivityProps => {\n  switch (type) {\n    case 'adaptive':\n      return {\n        viewWidth: getViewWidthByViewportWidth(viewportWidth),\n        viewHeight: getViewHeightByViewportHeight(viewportHeight),\n      };\n    case 'force_mobile':\n    case 'force_mobile_compact':\n      return {\n        viewWidth: ViewWidth.MOBILE,\n        sizeX: 'compact',\n        sizeY: type === 'force_mobile_compact' ? 'compact' : 'regular',\n      };\n    default:\n      return {};\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Snackbar Notifications in React\nDESCRIPTION: This snippet demonstrates how to create a Snackbar notification component using React and the VKUI library. It handles various actions, including displaying different types of messages, and contains a mechanism to automatically close notifications or dismiss them manually. The state for Snackbar visibility is managed using React hooks.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Snackbar/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SnackBarExample = () => {\n  const [text, setText] = React.useState('');\n  const [snackbar, setSnackbar] = React.useState(null);\n\n  const openBaseWithAction = () => {\n    if (snackbar) return;\n    setSnackbar(\n      <Snackbar\n        onClose={() => setSnackbar(null)}\n        action=\"Поделиться\"\n        onActionClick={() => setText('Добавляем метку.')}\n        before={\n          <Avatar size={24} style={{ background: 'var(--vkui--color_background_accent)' }}>\n            <Icon16Done fill=\"#fff\" width={14} height={14} />\n          </Avatar>\n        }\n      >\n        Ссылка скопирована\n      </Snackbar>,\n    );\n  };\n\n  const openVertical = () => {\n    if (snackbar) return;\n    setSnackbar(\n      <Snackbar\n        layout=\"vertical\"\n        onClose={() => setSnackbar(null)}\n        action=\"Перейти в раздел «Понравилось»\"\n        onActionClick={() => setText('Открыта подробная информация.')}\n        before={\n          <Avatar size={24} style={{ background: 'var(--vkui--color_background_accent)' }}>\n            <Icon16Done fill=\"#fff\" width={14} height={14} />\n          </Avatar>\n        }\n      >\n        Ссылка сохранена в закладки\n      </Snackbar>,\n    );\n  };\n\n  const openWithAvatar = () => {\n    if (snackbar) return;\n    setSnackbar(\n      <Snackbar\n        onClose={() => setSnackbar(null)}\n        onActionClick={() => setText('Сообщение Ивану было отменено.')}\n        before={<Avatar src={getAvatarUrl('user_wayshev')} size={32} />}\n      >\n        Отправлено Ивану Барышеву\n      </Snackbar>,\n    );\n  };\n\n  const openWithSibtitle = () => {\n    if (snackbar) return;\n    setSnackbar(\n      <Snackbar\n        onClose={() => setSnackbar(null)}\n        subtitle=\"Вы можете порекомендовать сервис в дополнительном меню\"\n        before={<Icon24ThumbsUpOutline fill=\"var(--vkui--color_icon_accent)\" />}\n      >\n        Этот сервис рекомендует один друг\n      </Snackbar>,\n    );\n  };\n\n  const openDark = () => {\n    if (snackbar) return;\n    setSnackbar(\n      <Snackbar\n        mode=\"dark\"\n        onClose={() => setSnackbar(null)}\n        action=\"Поделиться\"\n        onActionClick={() => setText('Добавляем метку.')}\n        before={\n          <Avatar size={24} style={{ background: 'var(--vkui--color_background_accent)' }}>\n            <Icon16Done fill=\"#fff\" width={14} height={14} />\n          </Avatar>\n        }\n      >\n        Ссылка скопирована\n      </Snackbar>,\n    );\n  };\n\n  const openSuccess = () => {\n    if (snackbar) return;\n    setSnackbar(\n      <Snackbar\n        onClose={() => setSnackbar(null)}\n        before={<Icon28CheckCircleOutline fill=\"var(--vkui--color_icon_positive)\" />}\n      >\n        Аватар успешно изменен\n      </Snackbar>,\n    );\n  };\n\n  const openError = () => {\n    if (snackbar) return;\n    setSnackbar(\n      <Snackbar\n        onClose={() => setSnackbar(null)}\n        before={<Icon28ErrorCircleOutline fill=\"var(--vkui--color_icon_negative)\" />}\n      >\n        Не удалось применить изменения\n      </Snackbar>,\n    );\n  };\n\n  React.useEffect(() => {\n    openBaseWithAction();\n  }, []);\n\n  return (\n    <View activePanel=\"example\">\n      <Panel id=\"example\">\n        <PanelHeader>Snackbar</PanelHeader>\n        <Group>\n          <CellButton onClick={openBaseWithAction}>Уведомление с иконкой и кнопкой</CellButton>\n          <CellButton onClick={openVertical}>Вертикальное расположение</CellButton>\n          <CellButton onClick={openWithAvatar}>Уведомление с аватаркой</CellButton>\n          <CellButton onClick={openWithSibtitle}>Уведомление с дополнительным текстом</CellButton>\n          <CellButton onClick={openDark}>Уведомление с темной темой</CellButton>\n          <CellButton onClick={openSuccess}>Успешное уведомление</CellButton>\n          <CellButton onClick={openError}>Уведомление с ошибкой</CellButton>\n        </Group>\n\n        {text && (\n          <Group>\n            <Div>{text}</Div>\n          </Group>\n        )}\n\n        {snackbar}\n      </Panel>\n    </View>\n  );\n};\n\n<SnackBarExample />;\n```\n\n----------------------------------------\n\nTITLE: React Navigation and Placeholder Rendering\nDESCRIPTION: Demonstrates a multi-panel view with interactive placeholders showing different use cases like notifications, friend discovery, and message states\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Placeholder/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [activePanel, setActivePanel] = React.useState('example-1');\n\nconst onNavClick = (e) => {\n  const activePanel = e.currentTarget.dataset.to;\n  setActivePanel(activePanel);\n};\n\n<View activePanel={activePanel}>\n  <Panel id=\"example-1\">\n    <PanelHeader>Плейсхолдеры</PanelHeader>\n    <Group>\n      <Placeholder\n        icon={<Icon56UsersOutline />}\n        title=\"Уведомления от сообществ\"\n        action={<Button size=\"m\">Подключить сообщества</Button>}\n      >\n        Подключите сообщества, от которых Вы хотите получать уведомления\n      </Placeholder>\n      <Separator />\n      <Placeholder icon={<Icon56MentionOutline />}>\n        Введите адрес страницы в поле поиска\n      </Placeholder>\n    </Group>\n    <Group>\n      <CellButton onClick={onNavClick} data-to=\"example-2\">\n        Ещё примеры\n      </CellButton>\n    </Group>\n  </Panel>\n\n  <Panel id=\"example-2\">\n    <PanelHeader before={<PanelHeaderBack onClick={onNavClick} data-to=\"example-1\" />}>\n      Плейсхолдеры\n    </PanelHeader>\n    <Group>\n      <Placeholder>Доступ запрещён</Placeholder>\n      <Separator />\n      <Placeholder\n        title=\"Находите друзей\"\n        action={\n          <ButtonGroup mode=\"vertical\" align=\"center\">\n            <Button size=\"m\">Найти друзей</Button>\n            <Button size=\"m\" mode=\"tertiary\">\n              Подробнее\n            </Button>\n          </ButtonGroup>\n        }\n      >\n        Здесь будут отображаться люди, которых вы добавите в друзья\n      </Placeholder>\n    </Group>\n    <Group>\n      <CellButton onClick={onNavClick} data-to=\"example-3\">\n        Полноэкранный плейсхолдер\n      </CellButton>\n    </Group>\n  </Panel>\n\n  <Panel id=\"example-3\">\n    <PanelHeader before={<PanelHeaderBack onClick={onNavClick} data-to=\"example-1\" />}>\n      Плейсхолдеры\n    </PanelHeader>\n\n    <Placeholder\n      icon={<Icon56MessageReadOutline />}\n      action={\n        <Button size=\"m\" mode=\"tertiary\">\n          Показать все сообщения\n        </Button>\n      }\n      stretched\n    >\n      Нет непрочитанных\n      <br />\n      сообщений\n    </Placeholder>\n  </Panel>\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Адаптивный React компонент с использованием viewWidth\nDESCRIPTION: Пример компонента, использующего AdaptivityProvider для адаптации к ширине вьюпорта. Демонстрирует применение хука useAdaptivity и функции viewWidthToClassName для условного применения классов.\nSOURCE: https://github.com/vkcom/vkui/blob/master/docs/ADAPTIVITY_GUIDE.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { classNames } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { ViewWidth, viewWidthToClassName } from '../../../lib/adaptivity';\nimport styles from './Component.module.css';\n\nconst viewWidthClassNames = {\n  none: styles.viewWidthNone, // означает, что viewWidth не определён в AdaptivityProvider – используем `@media`\n  smallTabletMinus: styles.viewWidthSmallTabletMinus,\n  smallTabletPlus: styles.viewWidthSmallTabletPlus,\n};\n\nconst Component = () => {\n  const { viewWidth } = useAdaptivity();\n\n  return (\n    <div\n      className={classNames(styles.Component, viewWidthToClassName(viewWidthClassNames, viewWidth))}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Touch Component Example\nDESCRIPTION: This React component demonstrates the usage of the `Touch` component. It initializes state variables for X and Y shifts and limits and uses React's `useRef` hook to manage the circle's reference and starting positions. The `onMove` and `onEnd` functions update the circle's position based on touch events, constrained by the calculated limits.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Touch/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [shiftX, setShiftX] = React.useState(0);\n  const [shiftY, setShiftY] = React.useState(0);\n  const [limitX, setLimitX] = React.useState(0);\n  const [limitY, setLimitY] = React.useState(0);\n\n  const circleRef = React.useRef(null);\n  const startX = React.useRef(0);\n  const startY = React.useRef(0);\n\n  React.useLayoutEffect(() => {\n    setLimitX(circleRef.current.offsetLeft);\n    setLimitY(circleRef.current.offsetTop);\n  });\n\n  const getValueWithLimit = (value, limit) => {\n    return value > limit ? limit : value < -limit ? -limit : value;\n  };\n\n  const onMove = (e) => {\n    const shiftX = startX.current + e.shiftX;\n    const shiftY = startY.current + e.shiftY;\n\n    setShiftX(getValueWithLimit(shiftX, limitX));\n    setShiftY(getValueWithLimit(shiftY, limitY));\n  };\n\n  const onEnd = (e) => {\n    const shiftX = startX.current + e.shiftX;\n    const shiftY = startY.current + e.shiftY;\n\n    startX.current = getValueWithLimit(shiftX, limitX);\n    startY.current = getValueWithLimit(shiftY, limitY);\n  };\n\n  const limitExceeded = Math.abs(shiftX) >= limitX || Math.abs(shiftY) >= limitY;\n\n  return (\n    <View activePanel=\"gallery\">\n      <Panel id=\"gallery\">\n        <PanelHeader>Touch</PanelHeader>\n        <Group header={<Header size=\"s\">Перетащите кружок</Header>}>\n          <div\n            style={{\n              ...containerStyle,\n              borderColor: limitExceeded\n                ? 'var(--vkui--color_icon_negative)'\n                : 'var(--vkui--color_icon_secondary)',\n            }}\n          >\n            <Touch\n              getRootRef={circleRef}\n              onMove={onMove}\n              onEnd={onEnd}\n              style={{\n                ...circleStyle,\n                transform: `translate(${shiftX}px, ${shiftY}px)`,\n              }}\n            />\n          </div>\n        </Group>\n      </Panel>\n    </View>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Initializing Panel Navigation with View Component\nDESCRIPTION: Demonstrates basic screen navigation using View and Panel components, with multiple panels and an active panel selector\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/structure.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Panel } from '@vkontakte/vkui';\n\n<View activePanel=\"greetings\">\n  <Panel id=\"greetings\">\n    {* panel content *}\n  </Panel>\n  <Panel id=\"form\">\n    {* panel content *}\n  </Panel>\n  <Panel id=\"finish\">\n    {* panel content *}\n  </Panel>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CustomSelectOption Usage with Various Props in React\nDESCRIPTION: This code example demonstrates the CustomSelectOption component with different props configurations. It shows how to use description, before/after elements with Avatar components, selected and hovered states, and hierarchical structure. The component is displayed with a dashed outline for visual clarity.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/CustomSelectOption/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst frameStyles = { outline: '1px dashed tomato' };\n\nconst Example = () => {\n  return (\n    <div style={{ margin: 50, width: 320 }}>\n      <CustomSelectOption style={frameStyles}>Дмитрий Безуглый</CustomSelectOption>\n      <Header>description</Header>\n      <CustomSelectOption style={frameStyles} description=\"Россия, Санкт-Петербург\">\n        Вадим Дорохов\n      </CustomSelectOption>\n      <Header>before</Header>\n      <CustomSelectOption style={frameStyles} before={<Avatar size={20} />}>\n        Иван Барышев\n      </CustomSelectOption>\n      <Header>after</Header>\n      <CustomSelectOption style={frameStyles} after={<Avatar size={20} />}>\n        Иван Барышев\n      </CustomSelectOption>\n      <Header>selected</Header>\n      <CustomSelectOption style={frameStyles} selected>\n        Владимир Клепов\n      </CustomSelectOption>\n      <Header>hovered</Header>\n      <CustomSelectOption style={frameStyles} hovered>\n        Игорь Федоров\n      </CustomSelectOption>\n      <Header>hierarchy</Header>\n      <CustomSelectOption style={frameStyles}>Диск</CustomSelectOption>\n      <CustomSelectOption hierarchy={1} style={frameStyles}>\n        Папка\n      </CustomSelectOption>\n      <CustomSelectOption hierarchy={2} style={frameStyles}>\n        Файл 1\n      </CustomSelectOption>\n      <CustomSelectOption hierarchy={2} style={frameStyles}>\n        Файл 2\n      </CustomSelectOption>\n    </div>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Implementing MiniInfoCell with Modal Dialog in VKUI React Application\nDESCRIPTION: A complete example showing MiniInfoCell usage with various configurations and a modal dialog. The component displays different types of user information with icons, links, and avatars. It also includes an interactive element that opens a modal with extended information when clicked.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/MiniInfoCell/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MiniInfoCellExample() {\n  const platform = usePlatform();\n  const [activeModal, setActiveModal] = React.useState(null);\n\n  const handleExtendedInfoClick = () => {\n    setActiveModal('extended_info');\n  };\n\n  const closeModal = () => {\n    setActiveModal(null);\n  };\n\n  const modal = (\n    <ModalRoot activeModal={activeModal} onClose={closeModal}>\n      <ModalPage\n        header={\n          <ModalPageHeader\n            before={\n              (platform === 'android' || platform === 'vkcom') && (\n                <PanelHeaderButton onClick={closeModal}>\n                  <Icon24Cancel />\n                </PanelHeaderButton>\n              )\n            }\n            after={\n              platform === 'ios' && (\n                <PanelHeaderButton onClick={closeModal}>\n                  <Icon24Dismiss />\n                </PanelHeaderButton>\n              )\n            }\n          >\n            Подробнее\n          </ModalPageHeader>\n        }\n        id=\"extended_info\"\n      >\n        <Spacing size={12} />\n        <MiniInfoCell before={<Icon20CommunityName />} textWrap=\"full\">\n          Команда вконтакте\n        </MiniInfoCell>\n\n        <MiniInfoCell before={<Icon20MessageOutline />} textWrap=\"full\">\n          Официальная страница Команды ВКонтакте.\n        </MiniInfoCell>\n\n        <MiniInfoCell before={<Icon20ArticleOutline />} textWrap=\"full\">\n          ВКонтакте начинался как сайт для выпускников вузов, а сейчас это огромная экосистема с\n          безграничными возможностями и миллионами пользователей.\n        </MiniInfoCell>\n\n        <Spacing size={24}>\n          <Separator />\n        </Spacing>\n\n        <MiniInfoCell before={<Icon20PlaceOutline />}>Санкт-Петербург, Россия</MiniInfoCell>\n\n        <MiniInfoCell before={<Icon20MentionOutline />}>team</MiniInfoCell>\n        <Spacing size={12} />\n      </ModalPage>\n    </ModalRoot>\n  );\n\n  return (\n    <View activePanel=\"information_cell\">\n      <Panel id=\"information_cell\">\n        <PanelHeader>Ячейка информации</PanelHeader>\n\n        <Group>\n          <MiniInfoCell before={<Icon20ArticleOutline />} textWrap=\"short\">\n            ВКонтакте начинался как сайт для выпускников вузов, а сейчас это огромная экосистема с\n            безграничными возможностями и миллионами пользователей.\n          </MiniInfoCell>\n\n          <MiniInfoCell\n            before={<Icon20FollowersOutline />}\n            after={\n              <UsersStack\n                photos={[\n                  getAvatarUrl('user_mm'),\n                  getAvatarUrl('user_arthurstam'),\n                  getAvatarUrl('user_xyz'),\n                ]}\n              />\n            }\n          >\n            514,7K подписчиков · 77 друзей\n          </MiniInfoCell>\n\n          <MiniInfoCell before={<Icon20GlobeOutline />}>\n            <Link href=\"https://vk.com/team\">vk.com/team</Link>\n          </MiniInfoCell>\n\n          <MiniInfoCell\n            mode=\"accent\"\n            before={<Icon20WorkOutline />}\n            after={\n              <Avatar\n                size={24}\n                src=\"https://sun9-29.userapi.com/c623616/v623616034/1c184/MnbEYczHxSY.jpg?ava=1\"\n              />\n            }\n          >\n            Место работы: Команда ВКонтакте\n          </MiniInfoCell>\n\n          <MiniInfoCell\n            before={<Icon20WorkOutline />}\n            mode=\"add\"\n            onClick={() => console.log('Указать место учёбы')}\n            textWrap=\"short\"\n            chevron\n          >\n            Укажите место учёбы\n          </MiniInfoCell>\n\n          <MiniInfoCell\n            before={<Icon20Info />}\n            mode=\"more\"\n            onClick={handleExtendedInfoClick}\n            chevron\n          >\n            Подробная информация\n          </MiniInfoCell>\n        </Group>\n        {modal}\n      </Panel>\n    </View>\n  );\n}\n\n<MiniInfoCellExample />;\n```\n\n----------------------------------------\n\nTITLE: Popover with Hover Trigger in React\nDESCRIPTION: This example shows a Popover component triggered by hovering over a button. It sets the role to 'tooltip' and provides an aria-describedby attribute for accessibility. The content displays a simple \"Привет\" message.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Popover/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst PopoverWithTriggerHover = () => {\n  return (\n    <Popover\n      trigger=\"hover\"\n      placement=\"bottom\"\n      role=\"tooltip\"\n      aria-describedby=\"tooltip-1\"\n      content={\n        <Div>\n          <Text>Привет</Text>\n        </Div>\n      }\n      restoreFocus=\"anchor-element\"\n    >\n      <Button id=\"tooltip-1\" mode=\"outline\">\n        Наведи на меня\n      </Button>\n    </Popover>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Использование AdaptivityProvider с CSS Media Queries в React компоненте\nDESCRIPTION: Пример компонента, использующего AdaptivityProvider для адаптивности через CSS. Демонстрирует применение хука useAdaptivity и условное применение классов в зависимости от размера экрана.\nSOURCE: https://github.com/vkcom/vkui/blob/master/docs/ADAPTIVITY_GUIDE.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { classNames } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport styles from './Component.module.css';\n\nconst sizeXClassNames = {\n  none: styles.hostSizeXNone, // означает, что sizeX не определён в AdaptivityProvider – используем `@media`\n  compact: styles.hostSizeXCompact,\n};\n\nconst Component = () => {\n  const { sizeX = 'none' } = useAdaptivity();\n\n  return (\n    <div\n      className={classNames(\n        styles.host,\n        // компонент слушает только compact\n        sizeX !== 'regular' && sizeXClassNames[sizeX],\n      )}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing VK Mini App and Setting Up Context with VKUI\nDESCRIPTION: This React component initializes the VK Mini App, sets up the context using VKUI components, handles color schemes and layout adaptivity based on VK Bridge parameters, and facilitates rendering of the main application component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/integrations_vk_mini_apps.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport vkBridge, { parseURLSearchParamsForGetLaunchParams } from '@vkontakte/vk-bridge';\nimport { useAppearance, useInsets, useAdaptivity } from '@vkontakte/vk-bridge-react';\nimport { Platform, ConfigProvider, AdaptivityProvider, AppRoot } from '@vkontakte/vkui';\nimport { transformVKBridgeAdaptivity } from './transformers/transformVKBridgeAdaptivity';\nimport { App } from './App';\n\n// Инициализируем VK  Mini App\nvkBridge.send('VKWebAppInit');\n\nconst Root = () => {\n  const vkBridgeColorScheme = useAppearance() || undefined; // Вместо undefined можно задать значение по умолчанию\n  const vkBridgeInsets = useInsets() || undefined; // Вместо undefined можно задать значение по умолчанию\n  const vkBridgeAdaptivityProps = transformVKBridgeAdaptivity(useAdaptivity()); // Конвертируем значения из VK Bridge в параметры AdaptivityProvider\n  const { vk_platform } = parseURLSearchParamsForGetLaunchParams(window.location.search); // [опционально] Платформа может передаваться через URL (см. https://dev.vk.com/mini-apps/development/launch-params#vk_platform)\n\n  return (\n    <ConfigProvider\n      colorScheme={vkBridgeColorScheme}\n      platform={vk_platform === 'desktop_web' ? 'vkcom' : undefined}\n      isWebView={vkBridge.isWebView()}\n      hasCustomPanelHeaderAfter={true} // Резервируем правую часть PanelHeader под кнопки управления VK Mini Apps. Через параметр customPanelHeaderAfterMinWidth можно регулировать ширину этой области (по умолчанию, используется 90)\n    >\n      <AdaptivityProvider {...vkBridgeAdaptivityProps}>\n        {/* Для VK Mini Apps рекомендуем использовать mode=\"full\" (выставлен по умолчанию, для примера указан явно) */}\n        <AppRoot mode=\"full\" safeAreaInsets={vkBridgeInsets}>\n          <App />\n        </AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  );\n};\n\nconst container = document.getElementById('root');\nconst root = createRoot(container); // createRoot(container!) if you use TypeScript\nroot.render(<Root />);\n```\n\n----------------------------------------\n\nTITLE: Wrapping ModalPage with Asynchronous Effect in React\nDESCRIPTION: This snippet demonstrates how to wrap a ModalPage component with a custom component that fetches data asynchronously. It also shows how to trigger side effects based on the active modal. The SomeAsyncEffect component fetches data, and the ModalPageWrapper conditionally enables an effect based on whether the modal is active.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ModalRoot/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n\"const SomeAsyncEffect = () => {\n  const [data, setData] = useState({});\n  useEffect(function fetchData() {\n    fetch('...')\n      .then((r) => r.json())\n      .then(setData);\n  }, []);\n  return <div>{data}</div>;\n};\n\nconst ModalPageWrapper = ({ id, ...restProps }) => {\n  const { activeModal } = useModalRootContext();\n\n  useEffect(\n    function enableSomeEffect() {\n      if (id === activeModal) {\n        /* ... */\n      }\n    },\n    [id, activeModal],\n  );\n\n  return (\n    <ModalPage id={id} {...restProps}>\n      <SomeAsyncEffect />\n    </ModalPage>\n  );\n};\n\nconst App = () => {\n  return (\n    <ModalRoot activeModal=\\\"example-1\\\">\n      <ModalPageWrapper id=\\\"example-1\\\" />\n      {/* или */}\n      <ModalPage id=\\\"example-2\\\">\n        <SomeAsyncEffect />\n      </ModalPage>\n    </ModalRoot>\n  );\n};\"\n```\n\n----------------------------------------\n\nTITLE: Implementing CellButton Examples with VKUI Framework in JSX\nDESCRIPTION: This code demonstrates various implementations of the CellButton component from the VKUI framework. It shows basic usage, appearance variants, buttons with icons, avatars of different sizes, and centered alignment. Each example is organized in separate groups with descriptive headers.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/CellButton/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View activePanel=\"button\">\n  <Panel id=\"button\">\n    <PanelHeader>CellButton</PanelHeader>\n    <Group header={<Header size=\"s\">Базовый пример</Header>}>\n      <CellButton onClick={() => {}}>Добавить новую школу</CellButton>\n      <CellButton onClick={() => {}} appearance=\"negative\">\n        Удалить беседу\n      </CellButton>\n    </Group>\n    <Group header={<Header size=\"s\">Иконки</Header>}>\n      <CellButton onClick={() => {}} before={<Icon28AddOutline />}>\n        Добавить родственника\n      </CellButton>\n      <CellButton onClick={() => {}} before={<Icon28DeleteOutline />} appearance=\"negative\">\n        Удалить беседу\n      </CellButton>\n    </Group>\n    <Group header={<Header size=\"s\">Аватарки</Header>}>\n      <CellButton\n        onClick={() => {}}\n        before={\n          <Avatar noBorder size={40}>\n            <Icon24Add />\n          </Avatar>\n        }\n      >\n        Добавить участников\n      </CellButton>\n      <CellButton\n        onClick={() => {}}\n        before={\n          <Avatar noBorder size={48}>\n            <Icon28AddOutline />\n          </Avatar>\n        }\n      >\n        Создать беседу\n      </CellButton>\n      <CellButton\n        onClick={() => {}}\n        before={\n          <Image noBorder size={72}>\n            <Icon28AddOutline />\n          </Image>\n        }\n      >\n        Создать плейлист\n      </CellButton>\n    </Group>\n    <Group header={<Header size=\"s\">Центрирование</Header>}>\n      <CellButton onClick={() => {}} centered before={<Icon24Add />}>\n        Создать беседу\n      </CellButton>\n    </Group>\n  </Panel>\n</View>\n```\n\n----------------------------------------\n\nTITLE: CSS стили для адаптивного компонента с использованием Media Queries\nDESCRIPTION: CSS модуль, демонстрирующий использование кастомных медиа-запросов для создания адаптивных стилей. Включает базовые стили и модификации для разных размеров экрана.\nSOURCE: https://github.com/vkcom/vkui/blob/master/docs/ADAPTIVITY_GUIDE.md#2025-04-20_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Равносильно модификатору `sizeXRegular` */\n.host {\n  color: red;\n  padding: 20px;\n}\n\n.sizeXCompact {\n  padding: 10px;\n}\n\n@media (--sizeX-compact) {\n  .sizeXNone {\n    padding: 10px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox Component with Various Props in VKUI\nDESCRIPTION: Example showing how to use the Checkbox component within a View/Panel structure. It demonstrates checkboxes with different states including default checked, with description, and disabled with an icon.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Checkbox/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View activePanel=\"panel\">\n  <Panel id=\"panel\">\n    <PanelHeader>Checkbox</PanelHeader>\n    <Group>\n      <FormItem>\n        <Checkbox defaultChecked>Я участвую в сборе</Checkbox>\n        <Checkbox description=\"Все пользователи получат уведомление\">Закрепить сообщение</Checkbox>\n        <Checkbox checked disabled titleAfter={<Icon12Lock />}>\n          Автоматически зачислять на карту\n        </Checkbox>\n      </FormItem>\n    </Group>\n  </Panel>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Rendering with VKUI and Express\nDESCRIPTION: An example of server-side rendering setup using Express, react-dom/server, and VKUI components with SSRWrapper for platform detection\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/ssr.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderToString } from 'react-dom/server';\nimport { Button, SSRWrapper } from '@vkontakte/vkui';\nimport express from 'express';\nimport useragent from 'express-useragent';\n\nconst server = express();\nserver.use(useragent.express());\n\nserver.get('/', function (req, res) {\n  res.send(\n    renderToString(\n      <SSRWrapper userAgent={req.useragent.source}>\n        <Button>Hello</Button>\n      </SSRWrapper>,\n    ),\n  );\n});\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonGroup Basic Example in React JSX\nDESCRIPTION: This component demonstrates basic usage of ButtonGroup with various button configurations. It shows how the 'stretched' property affects both the ButtonGroup and individual Button components.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ButtonGroup/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst buttonText = 'Button';\nconst stretchedButtonText = 'Button (stretched)';\nconst buttonWithIconLabel = 'Кнопка с иконкой';\n\nconst buttonGroupHighlightStyles = {\n  border: '2px dotted tomato',\n  boxSizing: 'border-box',\n};\n\nconst ExampleBase = () => {\n  const [props, setProps] = useState({\n    mode: 'horizontal',\n    gap: 's',\n    align: 'left',\n    stretched: false,\n  });\n\n  return (\n    <React.Fragment>\n      <Div>\n        <Title level=\"3\">Пример без вложенного ButtonGroup</Title>\n      </Div>\n      <ButtonGroupPropsForm defaultProps={props} onChange={setProps} />\n      <Div>\n        <ButtonGroup {...props} style={buttonGroupHighlightStyles}>\n          <Button size=\"l\" appearance=\"accent\">\n            {buttonText}\n          </Button>\n          <Button size=\"l\" appearance=\"accent\" stretched>\n            {stretchedButtonText}\n          </Button>\n          <Button\n            size=\"l\"\n            appearance=\"accent\"\n            before={<Icon24Add />}\n            aria-label={buttonWithIconLabel}\n          />\n          <Button\n            size=\"l\"\n            appearance=\"accent\"\n            before={<Icon24Add />}\n            aria-label={buttonWithIconLabel}\n            stretched\n          />\n        </ButtonGroup>\n      </Div>\n      <FormItem>\n        <Footnote>(stretched ButtonGroup)</Footnote>\n      </FormItem>\n      <Div>\n        <ButtonGroup {...props} style={buttonGroupHighlightStyles} stretched>\n          <Button size=\"l\" appearance=\"accent\">\n            {buttonText}\n          </Button>\n          <Button size=\"l\" appearance=\"accent\">\n            {buttonText}\n          </Button>\n        </ButtonGroup>\n      </Div>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Avatar Gradient Color\nDESCRIPTION: A utility function that calculates a consistent gradient color for avatars based on an object's unique identifier, used for generating visually appealing avatar backgrounds\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/helpers.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { calcInitialsAvatarColor } from '@vkontakte/vkui';\n\nconst conversation = { peer: { id: 480 }, name: 'Библиотека компонентов VKUI' };\n\n<Avatar size={48} gradientColor={calcInitialsAvatarColor(conversation.peer.id)}>\n  {conversation.name[0]}\n</Avatar>;\n```\n\n----------------------------------------\n\nTITLE: View Navigation with VK Bridge Swipe Settings\nDESCRIPTION: Implementation of view navigation with VK Bridge swipe back settings for standard and internal mini apps\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/integrations/vk-mini-apps.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport vkBridge from '@vkontakte/vk-bridge';\n\nconst SomeViews = () => {\n  const [history, setHistory] = useState(['main']);\n  const activePanel = history[history.length - 1];\n  const isFirst = history.length === 1;\n\n  const go = React.useCallback((panel) => setHistory((prevHistory) => [...prevHistory, panel]), []);\n  const goBack = React.useCallback(() => setHistory((prevHistory) => prevHistory.slice(0, -1)), []);\n  const handleProfileClick = () => go('profile');\n  const handleMainClick = () => go('main');\n\n  React.useEffect(() => {\n    // Для стандартных мини-приложений делайте так:\n    vkBridge.send('VKWebAppSetSwipeSettings', { history: isFirst });\n    // Для внутренних мини-приложений делайте так:\n    vkBridge.send(isFirst ? 'VKWebAppEnableSwipeBack' : 'VKWebAppDisableSwipeBack');\n  }, [isFirst]);\n\n  return (\n    <View history={history} activePanel={activePanel} onSwipeBack={goBack}>\n      <Panel id=\"main\">\n        <div onClick={handleProfileClick}>Main</div>\n      </Panel>\n      <Panel id=\"profile\">\n        <div onClick={handleMainClick}>Profile</div>\n      </Panel>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing React App with VK Bridge and VKUI Providers\nDESCRIPTION: Comprehensive React application setup using VK Bridge hooks, ConfigProvider, and AdaptivityProvider for VK Mini Apps\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/integrations/vk-mini-apps.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport vkBridge, { parseURLSearchParamsForGetLaunchParams } from '@vkontakte/vk-bridge';\nimport { useAppearance, useInsets, useAdaptivity } from '@vkontakte/vk-bridge-react';\nimport { Platform, ConfigProvider, AdaptivityProvider, AppRoot } from '@vkontakte/vkui';\nimport { transformVKBridgeAdaptivity } from './transformers/transformVKBridgeAdaptivity';\nimport { App } from './App';\n\n// Инициализируем VK  Mini App\nvkBridge.send('VKWebAppInit');\n\nconst Root = () => {\n  const vkBridgeColorScheme = useAppearance() || undefined;\n  const vkBridgeInsets = useInsets() || undefined;\n  const vkBridgeAdaptivityProps = transformVKBridgeAdaptivity(useAdaptivity());\n  const { vk_platform } = parseURLSearchParamsForGetLaunchParams(window.location.search);\n\n  return (\n    <ConfigProvider\n      colorScheme={vkBridgeColorScheme}\n      platform={vk_platform === 'desktop_web' ? 'vkcom' : undefined}\n      isWebView={vkBridge.isWebView()}\n      hasCustomPanelHeaderAfter={true}\n    >\n      <AdaptivityProvider {...vkBridgeAdaptivityProps}>\n        <AppRoot mode=\"full\" safeAreaInsets={vkBridgeInsets}>\n          <App />\n        </AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  );\n};\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<Root />);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Split Layout with Columns in VKUI\nDESCRIPTION: This example showcases the use of `SplitLayout` and `SplitCol` components from VKUI to create a multi-column layout.  It renders a side column (`SideCol`) and a main content area (`MainScreens`).  The `SplitLayout` acts as a wrapper, while `SplitCol` defines the individual columns within the layout.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/adaptivity.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n// ...\n\nfunction App() {\n  return (\n    <ConfigProvider>\n      <AdaptivityProvider>\n        <AppRoot>\n          <SplitLayout>\n            <SplitCol width={280}>\n              <SideCol />\n            </SplitCol>\n            <SplitCol>\n              <MainScreens />\n            </SplitCol>\n          </SplitLayout>\n        </AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  );\n}\n\nconst MainScreens = () => {\n  return (\n    <View activePanel=\"profile\">\n      <Panel id=\"profile\">Profile</Panel>\n    </View>\n  );\n};\n\nconst SideCol = () => {\n  return <Panel id=\"nav\">Navigation</Panel>;\n};\n```\n\n----------------------------------------\n\nTITLE: SegmentedControl Basic Usage in React\nDESCRIPTION: This snippet demonstrates the basic implementation of the SegmentedControl component within a VKUI View and Panel. It shows how to use it both for navigation (using icons) and as a form element (controlled and uncontrolled).\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/SegmentedControl/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [reportType, changeReportType] = React.useState('idea');\nconst [selectedSex, changeSelectedSex] = React.useState();\n\n<View activePanel=\"progress\">\n  <Panel id=\"progress\">\n    <PanelHeader>SegmentedControl</PanelHeader>\n    <Group header={<Header subtitle=\"Режим просмотра\">Навигация</Header>}>\n      <Div>\n        <SegmentedControl\n          options=[\n            {\n              'label': <Icon24List />,\n              'value': 'list',\n              'aria-label': 'Список',\n            },\n            {\n              'label': <Icon16GridOfFour />,\n              'value': 'grid',\n              'aria-label': 'Плитки',\n            },\n          ]\n        />\n      </Div>\n    </Group>\n    <Group header={<Header>Форма</Header>}>\n      <FormItem top=\"Тип репорта\" bottom={`Controlled; name=\"report-type\", size=\"m\"`}>\n        <SegmentedControl\n          size=\"m\"\n          name=\"report-type\"\n          value={reportType}\n          onChange={(value) => changeReportType(value)}\n          options=[\n            {\n              label: 'Баг',\n              value: 'bug',\n            },\n            {\n              label: 'Идея',\n              'value': 'idea',\n            },\n            {\n              label: 'Другое',\n              'value': 'other',\n            },\n          ]\n        />\n      </FormItem>\n      <FormItem\n        top={<React.Fragment>Пол{selectedSex && <span>: {selectedSex}</span>}</React.Fragment>}\n        bottom={`Uncontrolled; name=\"sex\", defaultValue=\"none\", size=\"l\"`}\n      >\n        <SegmentedControl\n          name=\"sex\"\n          defaultValue=\"none\"\n          onChange={(value) => changeSelectedSex(value)}\n          options=[\n            {\n              label: 'Женский',\n              value: 'female',\n            },\n            {\n              label: 'Мужской',\n              value: 'male',\n            },\n            {\n              label: 'Любой',\n              'value': 'none',\n            },\n          ]\n        />\n      </FormItem>\n    </Group>\n  </Panel>\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Implementing VKUI Header Component with Various Configurations in JSX\nDESCRIPTION: This code demonstrates a complete example of VKUI's Header component with different configurations. It shows headers with links, indicators, counters, icons, and multiline text. The component uses the platform context to conditionally render certain elements based on whether it's running on VK's platform.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Header/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const platform = usePlatform();\n\n  return (\n    <View activePanel=\"header\">\n      <Panel id=\"header\">\n        <PanelHeader>Header</PanelHeader>\n        <Group>\n          <Header\n            after={\n              <Link after={platform === 'vkcom' && <Icon12ChevronOutline />}>Показать все</Link>\n            }\n          >\n            Плейлисты\n          </Header>\n          <Header\n            after={\n              <Link after={platform === 'vkcom' && <Icon12ChevronOutline />}>Показать все</Link>\n            }\n            subtitle=\"SOHN — Conrad\"\n            subtitleComponent=\"h3\"\n          >\n            Плейлисты\n          </Header>\n          <Header\n            after={\n              <Link after={platform === 'vkcom' && <Icon12ChevronOutline />}>Показать все</Link>\n            }\n            indicator=\"12\"\n          >\n            Плейлисты\n          </Header>\n          <Header\n            after={\n              <Link after={platform === 'vkcom' && <Icon12ChevronOutline />}>Показать все</Link>\n            }\n            indicator={\n              <Counter size=\"s\" mode=\"primary\" appearance=\"accent-red\">\n                3\n              </Counter>\n            }\n          >\n            Заявки в друзья\n          </Header>\n        </Group>\n        <Group>\n          <Header\n            size=\"s\"\n            after={\n              <Link after={platform === 'vkcom' && <Icon12ChevronOutline />}>Показать все</Link>\n            }\n          >\n            Приглашения\n          </Header>\n          <Header\n            size=\"s\"\n            after={\n              <Link after={platform === 'vkcom' && <Icon12ChevronOutline />}>Показать все</Link>\n            }\n            indicator=\"667\"\n          >\n            Фотографии\n          </Header>\n          <Header\n            size=\"s\"\n            after={\n              <Link after={platform === 'vkcom' && <Icon12ChevronOutline />}>Показать все</Link>\n            }\n            indicator={\n              <Counter size=\"s\" mode=\"primary\" appearance=\"accent-red\">\n                3\n              </Counter>\n            }\n          >\n            Приглашения\n          </Header>\n        </Group>\n        <Group>\n          <Header>Важные</Header>\n        </Group>\n        <Group>\n          <Header multiline>Кто может писать мне личные сообщения</Header>\n          <Header multiline>Кто может комментировать мои записи</Header>\n          <Header size=\"s\" multiline>\n            Кто может оставлять записи на моей странице\n          </Header>\n        </Group>\n        <Group>\n          <Header size=\"xl\">Большой заголовок</Header>\n        </Group>\n        <Group>\n          <Header\n            before={<Icon28UserCircleFillBlue />}\n            beforeTitle={<Icon16LockOutline />}\n            afterTitle={<Icon16UnlockOutline />}\n            beforeSubtitle={<Icon12Tag />}\n            afterSubtitle={<Icon12Fire />}\n            subtitle=\"SOHN — Conrad\"\n            subtitleComponent=\"h3\"\n            indicator={\n              <Counter size=\"s\" mode=\"primary\" appearance=\"accent-red\">\n                3\n              </Counter>\n            }\n            after={\n              <Link after={platform === 'vkcom' && <Icon12ChevronOutline />}>Показать все</Link>\n            }\n          >\n            Плейлисты\n          </Header>\n          <Header\n            before={<Icon28UserCircleFillBlue />}\n            beforeTitle={<Icon16LockOutline />}\n            afterTitle={<Icon16UnlockOutline />}\n            beforeSubtitle={<Icon12Tag />}\n            afterSubtitle={<Icon12Fire />}\n            subtitle=\"SOHN — Conrad\"\n            subtitleComponent=\"h3\"\n            multiline\n            indicator={\n              <Counter size=\"s\" mode=\"primary\" appearance=\"accent-red\">\n                3\n              </Counter>\n            }\n            after={\n              <Link after={platform === 'vkcom' && <Icon12ChevronOutline />}>Показать все</Link>\n            }\n          >\n            Плейлисты\n          </Header>\n        </Group>\n      </Panel>\n    </View>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Transforming VK Bridge Adaptivity Props for VKUI\nDESCRIPTION: This TypeScript function converts adaptivity data from VK Bridge into the format expected by the AdaptivityProvider from VKUI, allowing for responsive design based on the current viewport settings.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/integrations_vk_mini_apps.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  type AdaptivityProps,\n  getViewWidthByViewportWidth,\n  getViewHeightByViewportHeight,\n  ViewWidth,\n} from '@vkontakte/vkui';\nimport type { UseAdaptivity } from '@vkontakte/vk-bridge-react';\n\n/**\n * Требуется конвертировать данные из VK Bridge в те, что принимает AdaptivityProvider из VKUI.\n */\nexport const transformVKBridgeAdaptivity = ({\n  type,\n  viewportWidth,\n  viewportHeight,\n}: UseAdaptivity): AdaptivityProps => {\n  switch (type) {\n    case 'adaptive':\n      return {\n        viewWidth: getViewWidthByViewportWidth(viewportWidth),\n        viewHeight: getViewHeightByViewportHeight(viewportHeight),\n      };\n    case 'force_mobile':\n    case 'force_mobile_compact':\n      return {\n        viewWidth: ViewWidth.MOBILE,\n        sizeX: 'compact',\n        sizeY: type === 'force_mobile_compact' ? 'compact' : 'regular',\n      };\n    default:\n      return {};\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: OnboardingTooltipContainer Implementation for Various Layout Scenarios\nDESCRIPTION: Example showing how to use OnboardingTooltipContainer in different layout contexts, including scrolling containers, fixed positioning, and various alignment options.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/OnboardingTooltip/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <OnboardingTooltipContainer style={{ minHeight: '120vh' }}>\n    <OnboardingTooltip description=\"Я скроллюсь\">\n      <div style={{ display: 'inline-block' }}>\n        <Avatar />\n      </div>\n    </OnboardingTooltip>\n    <OnboardingTooltip description=\"Двигаем стрелочку\" arrowOffset={20}>\n      <div style={{ display: 'inline-block', marginLeft: 100 }}>\n        <Avatar />\n      </div>\n    </OnboardingTooltip>\n  </OnboardingTooltipContainer>\n  <OnboardingTooltipContainer\n    fixed\n    style={{\n      minHeight: '30px',\n      border: '1px solid',\n      margin: '100px 100px 0',\n      position: 'relative',\n      background: 'var(--vkui--color_background_content)',\n      zIndex: 1,\n    }}\n  >\n    <OnboardingTooltip description=\"Я вылезаю (fixed)\">\n      <div style={{ display: 'inline-block' }}>\n        <Avatar />\n      </div>\n    </OnboardingTooltip>\n  </OnboardingTooltipContainer>\n  <OnboardingTooltipContainer\n    style={{\n      minHeight: '100vh',\n      border: '1px solid',\n      margin: '64px 100px 100px',\n      position: 'relative',\n      background: 'var(--vkui--color_background_content)',\n      zIndex: 1,\n    }}\n  >\n    <OnboardingTooltip description=\"Я прилип слева\">\n      <div style={{ display: 'inline-block', position: 'absolute', right: 0 }}>\n        <Avatar />\n      </div>\n    </OnboardingTooltip>\n    <OnboardingTooltip description=\"Я прилип справа\">\n      <div style={{ display: 'inline-block' }}>\n        <Avatar />\n      </div>\n    </OnboardingTooltip>\n    <OnboardingTooltip description=\"Я прилип слева\">\n      <div\n        style={{\n          display: 'inline-block',\n          position: 'absolute',\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <Avatar />\n      </div>\n    </OnboardingTooltip>\n    <OnboardingTooltip description=\"Я прилип справа\">\n      <div\n        style={{\n          display: 'inline-block',\n          position: 'absolute',\n          right: 0,\n          bottom: 0,\n        }}\n      >\n        <Avatar />\n      </div>\n    </OnboardingTooltip>\n    <OnboardingTooltip description=\"Я по центру 😎\">\n      <div\n        style={{\n          display: 'inline-block',\n          position: 'absolute',\n          left: '50%',\n          top: '50%',\n          transform: 'translate(50%, 50%)',\n        }}\n      >\n        <Avatar />\n      </div>\n    </OnboardingTooltip>\n  </OnboardingTooltipContainer>\n  <div style={{ height: '100vh' }}></div>\n  <OnboardingTooltipContainer fixed style={{ position: 'fixed', bottom: 0, width: '100%' }}>\n    <OnboardingTooltip description=\"Я прибит к низу\">\n      <div style={{ display: 'inline-block' }}>\n        <Avatar />\n      </div>\n    </OnboardingTooltip>\n  </OnboardingTooltipContainer>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested ButtonGroup Example in React JSX\nDESCRIPTION: This component demonstrates how to work with nested ButtonGroup components, showing the relationship between parent and child ButtonGroups and how properties like 'stretched' affect the layout at different levels.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ButtonGroup/Readme.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst ExampleNested = () => {\n  const [props, setProps] = useState({\n    mode: 'vertical',\n    gap: 's',\n    align: 'left',\n    stretched: false,\n  });\n\n  const [horizontalProps, setHorizontalProps] = useState({\n    mode: 'horizontal',\n    gap: 's',\n    align: 'left',\n    stretched: false,\n  });\n\n  return (\n    <React.Fragment>\n      <Div>\n        <Title level=\"3\">Пример с вложенным ButtonGroup</Title>\n      </Div>\n      <Div>\n        <Headline level=\"1\" weight=\"1\">\n          Mode: Vertical\n        </Headline>\n      </Div>\n      <ButtonGroupPropsForm\n        caption=\"параметры передаются корневому элементу\"\n        defaultProps={props}\n        onChange={setProps}\n        showMode={false}\n      />\n      <Div>\n        <ButtonGroup {...props} mode=\"vertical\">\n          <ButtonGroup mode=\"horizontal\" gap=\"m\" stretched style={buttonGroupHighlightStyles}>\n            <Button size=\"l\" appearance=\"accent\" stretched>\n              {stretchedButtonText}\n            </Button>\n            <Button\n              size=\"l\"\n              appearance=\"accent\"\n              before={<Icon24Add />}\n              aria-label={buttonWithIconLabel}\n            />\n          </ButtonGroup>\n\n          <ButtonGroup mode=\"horizontal\" gap=\"m\" stretched style={buttonGroupHighlightStyles}>\n            <Button size=\"l\" appearance=\"accent\">\n              {buttonText}\n            </Button>\n            <Button\n              size=\"l\"\n              appearance=\"accent\"\n              before={<Icon24Add />}\n              aria-label={buttonWithIconLabel}\n            />\n          </ButtonGroup>\n\n          <ButtonGroup\n            mode=\"horizontal\"\n            gap=\"m\"\n            stretched={false}\n            style={buttonGroupHighlightStyles}\n          >\n            <Button size=\"l\" appearance=\"accent\">\n              {buttonText}\n            </Button>\n            <Button\n              size=\"l\"\n              appearance=\"accent\"\n              before={<Icon24Add />}\n              aria-label={buttonWithIconLabel}\n            />\n          </ButtonGroup>\n\n          <ButtonGroup mode=\"horizontal\" gap=\"m\" stretched style={buttonGroupHighlightStyles}>\n            <Button size=\"l\" appearance=\"accent\">\n              {buttonText}\n            </Button>\n            <Button size=\"l\" appearance=\"accent\" stretched>\n              {stretchedButtonText}\n            </Button>\n            <Button size=\"l\" appearance=\"accent\">\n              {buttonText}\n            </Button>\n          </ButtonGroup>\n          <ButtonGroup mode=\"vertical\" gap=\"m\" stretched={false} style={buttonGroupHighlightStyles}>\n            <Button size=\"l\" appearance=\"accent\" stretched>\n              {stretchedButtonText}\n            </Button>\n            <Button\n              size=\"l\"\n              appearance=\"accent\"\n              before={<Icon24Add />}\n              aria-label={buttonWithIconLabel}\n              stretched\n            />\n            <ButtonGroup mode=\"horizontal\" stretched style={buttonGroupHighlightStyles}>\n              <Button\n                size=\"l\"\n                appearance=\"accent\"\n                before={<Icon24Add />}\n                aria-label={buttonWithIconLabel}\n              />\n              <Button size=\"l\" appearance=\"accent\" stretched>\n                {stretchedButtonText}\n              </Button>\n            </ButtonGroup>\n          </ButtonGroup>\n        </ButtonGroup>\n      </Div>\n      <Div>\n        <Headline level=\"1\" weight=\"1\">\n          Mode: Horizontal\n        </Headline>\n      </Div>\n      <ButtonGroupPropsForm\n        caption=\"параметры передаются корневому элементу\"\n        defaultProps={horizontalProps}\n        onChange={setHorizontalProps}\n        showMode={false}\n        showStretched={false}\n      />\n      <Div>\n        <ButtonGroup\n          {...horizontalProps}\n          mode=\"horizontal\"\n\n```\n\n----------------------------------------\n\nTITLE: Configure Global Theme with Custom Tokens in VKUI\nDESCRIPTION: This code snippet shows how to configure a global theme in VKUI using a custom theme file. It imports the necessary components and CSS files, including the custom theme CSS file. The `ConfigProvider` component is used to specify the class names for the light and dark themes from the custom file. The `tokensClassNames` prop maps the `light` and `dark` keys to the respective CSS class names defined in `myCustomThemeTokens.css`.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/customize.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n \"import { ConfigProvider, AppRoot, Button } from '@vkontakte/vkui';\\nimport '@vkontakte/vkui/dist/components.css';\\n// тут предполагается, что светлый и тёмный режимы определены в одном файле\\nimport './myCustomThemeTokens.css';\\n\\nReactDOM.render(\\n  <ConfigProvider\\n    tokensClassNames={{\\n      light: 'myCustomThemeTokens--light',\\n      dark: 'myCustomThemeTokens--dark',\\n    }}\\n  >\\n    <AppRoot>\\n      <Button />\\n    </AppRoot>\\n  </ConfigProvider>,\\n  root,\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Rendering ContentBadge Components in React\nDESCRIPTION: This snippet defines a Stand component that renders ContentBadge components with various configurations based on the size prop. It demonstrates different layouts for small, medium, and large sizes, including versions with icons and capsule shapes.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ContentBadge/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst appearance = 'accent'; // 'accent' | 'neutral' | 'accent-green' | 'accent-red' | 'overlay'\nconst mode = 'primary'; // 'primary' | 'secondary' | 'outline'\nconst capsule = false;\n\nconst Stand = ({ size }) =>\n  size === 's' ? (\n    <ContentBadge size={size} appearance={appearance} mode={mode} capsule={capsule}>\n      Badge\n    </ContentBadge>\n  ) : (\n    <>\n      <ContentBadge size={size} appearance={appearance} mode={mode} capsule={capsule}>\n        Badge\n      </ContentBadge>\n\n      <ContentBadge size={size} appearance={appearance} mode={mode} capsule={capsule}>\n        <ContentBadge.SlotIcon>\n          {size === 'l' ? <Icon16Services /> : <Icon12Services />}\n        </ContentBadge.SlotIcon>\n        Badge\n      </ContentBadge>\n\n      <ContentBadge size={size} appearance={appearance} mode={mode} capsule={capsule}>\n        Badge\n        <ContentBadge.SlotIcon>\n          {size === 'l' ? <Icon16Services /> : <Icon12Services />}\n        </ContentBadge.SlotIcon>\n      </ContentBadge>\n\n      <ContentBadge size={size} appearance={appearance} mode={mode} capsule={capsule}>\n        <ContentBadge.SlotIcon>\n          {size === 'l' ? <Icon16Services /> : <Icon12Services />}\n        </ContentBadge.SlotIcon>\n        Badge\n        <ContentBadge.SlotIcon>\n          {size === 'l' ? <Icon16Services /> : <Icon12Services />}\n        </ContentBadge.SlotIcon>\n      </ContentBadge>\n\n      <ContentBadge size={size} appearance={appearance} mode={mode} capsule>\n        <ContentBadge.SlotIcon>\n          {size === 'l' ? <Icon20ServicesFilled /> : <Icon16Services />}\n        </ContentBadge.SlotIcon>\n      </ContentBadge>\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Detecting Color Scheme with useColorScheme Hook\nDESCRIPTION: A hook that returns the current color scheme of the application, allowing developers to implement dark or light mode specific rendering or styling\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/helpers.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useColorScheme, Platform } from '@vkontakte/vkui';\n\nconst MyComponent = () => {\n  const colorScheme = useColorScheme(); // dark или light\n  return '...';\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex Button Group Layouts in React\nDESCRIPTION: Demonstrates nested button groups with various configurations including horizontal, vertical, and stretched modes with different button appearances and sizes\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ButtonGroup/Readme.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [sizeY, setSizeY] = useState('compact');\n\n  return (\n    <Flex reverse justify=\"end\">\n      <AdaptivityProvider sizeY={sizeY}>\n        <Flex direction=\"column\">\n          <ExampleUseCases />\n          <ExampleBase />\n          <ExampleNested />\n        </Flex>\n      </AdaptivityProvider>\n      <Flex.Item flexBasis={200}>\n        <FormItem top=\"sizeY\">\n          <Select\n            value={sizeY}\n            onChange={(_, newValue) => setSizeY(newValue)}\n            options={[\n              { label: 'compact', value: 'compact' },\n              { label: 'regular', value: 'regular' },\n            ]}\n          />\n        </FormItem>\n      </Flex.Item>\n    </Flex>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: SSR-Safe Modal Component with useAdaptivityWithJSMediaQueries in VKUI\nDESCRIPTION: This snippet demonstrates how to conditionally render a modal component in a way that is safe for server-side rendering (SSR). The first example is incorrect for SSR because the Modal is always rendered. The second example uses `React.useState` and `React.useEffect` to ensure that the modal is only rendered after the component has mounted on the client-side, making it suitable for SSR when using `useAdaptivityWithJSMediaQueries` within the modal components.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/adaptivity.md#2025-04-20_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n// ❌ bad for SSR\nconst App = () => {\n  return (\n    <ModalRoot activeModal=\"main\">\n      <ModalPage id=\"main\">Hello World!</ModalPage>\n    </ModalRoot>\n  ); \n};\n\n// ✅ good for SSR\nconst App = () => {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return mounted ? (\n    <ModalRoot activeModal=\"main\">\n      <ModalPage id=\"main\">Hello World!</ModalPage>\n    </ModalRoot>\n  ) : null;\n};\n```\n\n----------------------------------------\n\nTITLE: ToolButton Example with State Management\nDESCRIPTION: This React component demonstrates the usage of the `ToolButton` component from VKUI, showcasing various configurable properties. It uses `useState` to manage the ToolButton's `mode`, `appearance`, `direction`, `sizeY`, `rounded`, `disabled`, text and link. The `usePlatform` hook is used to conditionally set the `sizeY` based on the platform.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ToolButton/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [mode, setMode] = useState('primary');\n  const [appearance, setAppearance] = useState('accent');\n  const [direction, setDirection] = useState('column');\n  const [sizeY, setSizeY] = useState('compact');\n  const [rounded, setRounded] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [addText, setAddText] = useState(true);\n  const [hasLink, setHasLink] = useState(false);\n  const platform = usePlatform();\n\n  React.useEffect(() => {\n    if (platform === 'vkcom') {\n      setSizeY('compact');\n    }\n  }, [platform]);\n\n  const buttonLink = hasLink ? '#' : undefined;\n  const buttonText = addText ? 'Button' : undefined;\n\n  return (\n    <Flex reverse noWrap>\n      <AdaptivityProvider sizeY={sizeY}>\n        <Flex align=\"center\" justify=\"center\" style={{ width: '100%' }}>\n          <Div>\n            <ToolButton\n              IconCompact={Icon20Add}\n              IconRegular={Icon24Add}\n              mode={mode}\n              direction={direction}\n              appearance={appearance}\n              rounded={rounded}\n              disabled={disabled}\n              href={buttonLink}\n              onClick={() => {}}\n            >\n              {buttonText}\n            </ToolButton>\n          </Div>\n        </Flex>\n      </AdaptivityProvider>\n      <Flex.Item flexBasis={200} flex=\"fixed\">\n        <FormItem top=\"direction\">\n          <Select\n            value={direction}\n            onChange={(_, newValue) => setDirection(newValue)}\n            options={[\n              { label: 'row', value: 'row' },\n              { label: 'column', value: 'column' },\n            ]}\n          />\n        </FormItem>\n        <FormItem top=\"mode\">\n          <Select\n            value={mode}\n            onChange={(_, newValue) => setMode(newValue)}\n            options={[\n              { label: 'primary', value: 'primary' },\n              { label: 'secondary', value: 'secondary' },\n              { label: 'tertiary', value: 'tertiary' },\n              { label: 'outline', value: 'outline' },\n            ]}\n          />\n        </FormItem>\n        <FormItem top=\"appearance\">\n          <Select\n            value={appearance}\n            onChange={(_, newValue) => setAppearance(newValue)}\n            options={[\n              { label: 'accent', value: 'accent' },\n              { label: 'neutral', value: 'neutral' },\n            ]}\n          />\n        </FormItem>\n        <FormItem top=\"sizeY\">\n          <Select\n            value={sizeY}\n            onChange={(_, newValue) => setSizeY(newValue)}\n            options={[\n              { label: 'compact', value: 'compact' },\n              {\n                label: 'regular',\n                value: 'regular',\n                disabled: platform === 'vkcom',\n              },\n            ]}\n          />\n        </FormItem>\n        <FormItem top=\"props\">\n          <Checkbox onChange={(e) => setRounded(e.target.checked)}>rounded</Checkbox>\n          <Checkbox onChange={(e) => setDisabled(e.target.checked)}>disabled</Checkbox>\n          <Checkbox onChange={(e) => setAddText(e.target.checked)} checked={addText}>\n            add text\n          </Checkbox>\n          <Checkbox onChange={(e) => setHasLink(e.target.checked)}>add href</Checkbox>\n        </FormItem>\n      </Flex.Item>\n    </Flex>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with useColorScheme Hook\nDESCRIPTION: Example of using useColorScheme hook to conditionally render content based on current color scheme\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/platforms-and-themes.mdx#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst colorScheme = useColorScheme();\n<Div>{colorScheme === 'light' ? 'Out of the blue' : 'And into the black'}</Div>;\n```\n\n----------------------------------------\n\nTITLE: Popover with Multiple Triggers in React\nDESCRIPTION: This example demonstrates a Popover component triggered by a combination of click, hover, and focus events. It sets the role to 'tooltip' and provides aria-describedby for accessibility. The content displays an Avatar component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Popover/Readme.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst PopoverWithAllTriggers = () => {\n  return (\n    <Popover\n      trigger={['click', 'hover', 'focus']}\n      placement=\"right\"\n      role=\"tooltip\"\n      aria-describedby=\"tooltip-3\"\n      content={\n        <Div>\n          <Avatar src={getAvatarUrl('app_promokot')} alt=\"Cat\" />\n        </Div>\n      }\n    >\n      <Button id=\"tooltip-3\" mode=\"outline\">\n        Нажми или наведи или сфокусируйся на меня\n      </Button>\n    </Popover>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Group with Modal in React\nDESCRIPTION: This snippet demonstrates how to use the Group component within a React component, including a modal implementation. It showcases the usage of Group, ModalRoot, View, and various other VKUI components.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Group/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst MODAL_NAME = 'modal';\n\nconst Example = () => {\n  const [isModalOpened, setModalOpened] = React.useState(false);\n\n  const modal = (\n    <ModalRoot\n      activeModal={isModalOpened ? MODAL_NAME : null}\n      onClose={() => setModalOpened(false)}\n    >\n      <ModalPage\n        id={MODAL_NAME}\n        onClose={() => setModalOpened(false)}\n        header={\n          <ModalPageHeader\n            before={\n              platform !== 'ios' && <PanelHeaderClose onClick={() => setModalOpened(false)} />\n            }\n            after={\n              platform === 'ios' && (\n                <PanelHeaderButton onClick={() => setModalOpened(false)}>\n                  <Icon24Dismiss />\n                </PanelHeaderButton>\n              )\n            }\n          >\n            Group в модальном окне\n          </ModalPageHeader>\n        }\n      >\n        <SharedContent />\n      </ModalPage>\n    </ModalRoot>\n  );\n\n  return (\n    <View activePanel=\"group\">\n      <Panel id=\"group\">\n        <PanelHeader>Group</PanelHeader>\n\n        <SharedContent />\n\n        <Group header={<Header size=\"s\">Модальное окно с Group</Header>}>\n          <SimpleCell onClick={() => setModalOpened(true)}>\n            Открыть Group в модальном окне\n          </SimpleCell>\n          {modal}\n        </Group>\n      </Panel>\n    </View>\n  );\n};\n\nconst SharedContent = () => {\n  const platform = usePlatform();\n\n  return (\n    <>\n      <Group>\n        <Group mode=\"plain\">\n          <SimpleCell indicator=\"+7 ••• •• •• 96\" before={<Icon28PhoneOutline />}>\n            Номер телефона\n          </SimpleCell>\n          <SimpleCell indicator=\"g•••@gmail.com\" before={<Icon28MailOutline />}>\n            Email\n          </SimpleCell>\n        </Group>\n        <Group mode=\"plain\">\n          <SimpleCell indicator=\"Обновлён 3 года назад\" before={<Icon28KeyOutline />}>\n            Пароль\n          </SimpleCell>\n          <SimpleCell indicator=\"Вкл.\" before={<Icon28CheckShieldDeviceOutline />}>\n            Подтверждение входа\n          </SimpleCell>\n          <SimpleCell indicator=\"2\" before={<Icon28DevicesOutline />}>\n            Привязанные устройства\n          </SimpleCell>\n        </Group>\n      </Group>\n\n      <Group header={<Header>Последняя активность</Header>}>\n        <SimpleCell\n          after={\n            platform === 'ios' ? (\n              <IconButton label=\"Подробнее\" onClick={noop}>\n                <Icon16MoreHorizontal />\n              </IconButton>\n            ) : (\n              <IconButton label=\"Подробнее\" onClick={noop}>\n                <Icon16MoreVertical />\n              </IconButton>\n            )\n          }\n          subtitle=\"Санкт-Петербург, Россия\"\n          before={<Avatar size={32} mode=\"app\" />}\n          onClick={noop}\n        >\n          VK · Приложение для iPhone\n        </SimpleCell>\n        <SimpleCell\n          after={\n            platform === 'ios' ? (\n              <IconButton label=\"Подробнее\" onClick={noop}>\n                <Icon16MoreHorizontal />\n              </IconButton>\n            ) : (\n              <IconButton label=\"Подробнее\" onClick={noop}>\n                <Icon16MoreVertical />\n              </IconButton>\n            )\n          }\n          subtitle=\"Санкт-Петербург, Россия\"\n          before={<Avatar size={32} mode=\"app\" />}\n          onClick={noop}\n        >\n          VK · Браузер Chrome для macOS\n        </SimpleCell>\n        <CellButton onClick={noop}>Показать историю активности</CellButton>\n        <CellButton onClick={noop} appearance=\"negative\">\n          Завершить все остальные сеансы\n        </CellButton>\n      </Group>\n\n      <Group\n        header={<Header>Адреса</Header>}\n        description=\"Для использования в мини-приложениях, Delivery Club, VK Taxi и других сервисах ВКонтакте. Эти адреса видны только Вам.\"\n      >\n        <CellButton onClick={noop}>Добавить домашний адрес</CellButton>\n        <CellButton onClick={noop}>Добавить рабочий адрес</CellButton>\n      </Group>\n    </>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Spinner with Multiple Sizes\nDESCRIPTION: Demonstrates how to create a flexible spinner component with different sizes and screen reader support using aria attributes and custom loading text\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Spinner/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex aria-busy={true} aria-live=\"polite\" direction=\"column\" gap={32} margin=\"auto\">\n  <Spinner size=\"xl\" />\n  <Spinner size=\"l\" />\n  <Spinner size=\"m\" />\n  <Spinner size=\"s\">Кастомный текст вместо \"Загружается...\", который озвучит скринридер</Spinner>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible IconButton Component in VKUI with React\nDESCRIPTION: This example demonstrates various approaches to make IconButton components accessible for screen readers using different techniques: the 'label' prop, VisuallyHidden component, aria-label, aria-labelledby, and title attributes. The example shows different icon sizes (16, 24, 28, and 36) with proper accessibility implementations.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/IconButton/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  return (\n    <Flex justify=\"center\" gap=\"2xl\" margin=\"auto\">\n      <div>\n        <IconButton label=\"Удалить\" onClick={noop}>\n          <Icon16Delete />\n        </IconButton>\n        <Footnote style={captionStyles}>16</Footnote>\n      </div>\n\n      <div>\n        <IconButton onClick={noop}>\n          <VisuallyHidden>Меню</VisuallyHidden>\n          <Icon16MoreVertical />\n        </IconButton>\n        <Footnote style={captionStyles}>8x16</Footnote>\n      </div>\n\n      <div>\n        <IconButton aria-label=\"Удалить 24\" onClick={noop}>\n          <Icon24Delete />\n        </IconButton>\n        <Footnote style={captionStyles}>24</Footnote>\n      </div>\n\n      <div>\n        <IconButton aria-labelledby=\"icon-28-label\" onClick={noop}>\n          <Icon28Delete />\n        </IconButton>\n        <Footnote id=\"icon-28-label\" style={captionStyles}>\n          <VisuallyHidden>Удалить</VisuallyHidden>\n          28\n        </Footnote>\n      </div>\n\n      <div>\n        <IconButton title=\"Удалить 36\" onClick={noop}>\n          <Icon36Delete />\n        </IconButton>\n        <Footnote style={captionStyles}>36</Footnote>\n      </div>\n    </Flex>\n  );\n};\n\nconst captionStyles = {\n  marginTop: 8,\n  textAlign: 'center',\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for VKUI CSS Modules (JavaScript)\nDESCRIPTION: This JavaScript code configures Vite to use VKUI CSS Modules by setting up an alias in `vite.config.js`. The alias maps `@vkontakte/vkui` to `@vkontakte/vkui/dist/cssm`, which enables Vite to resolve the CSS Modules version of VKUI.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/css_modules.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nexport default defineConfig({\n  // ...\n  resolve: {\n    alias: [{ find: /^@vkontakte\\/vkui$/, replacement: '@vkontakte/vkui/dist/cssm' }],\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Popover with Manual Trigger in React\nDESCRIPTION: This example shows a Popover component controlled programmatically using React's useState hook.  The `shown` prop determines the visibility of the Popover. The `onShownChange` handler updates the `shown` state based on the reason for the Popover closing (callback, escape key, click outside).\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Popover/Readme.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst PopoverWithTriggerManual = () => {\n  const [shown, setShown] = React.useState(false);\n\n  // Если вы используете TypeScript, то можете импортировать тип функции:\n  //\n  // ```ts\n  // import type { PopoverOnShownChange } from '@vkontakte/vkui';\n  //\n  // const handleShownChange: PopoverOnShownChange = React.useCallback(() => {}, []);\n  // ```\n  const handleShownChange = React.useCallback((value, reason) => {\n    if (!value) {\n      switch (reason) {\n        case 'callback':\n        case 'escape-key':\n        case 'click-outside':\n          setShown(false);\n          break;\n        default:\n          break;\n      }\n    }\n  }, []);\n\n  return (\n    <Popover\n      trigger=\"manual\"\n      shown={shown}\n      role=\"dialog\"\n      aria-describedby=\"dialog-3\"\n      content={({ onClose }) => (\n        <Flex style={{ position: 'relative', width: 180, height: 100 }}>\n          <div style={{ position: 'absolute', top: 0, right: 0 }}>\n            <IconButton label=\"Закрыть\" onClick={onClose}>\n              <Icon16Clear />\n            </IconButton>\n          </div>\n          <div style={{ margin: 'auto', textAlign: 'center' }}>\n            The cake\n            <br />\n            is\n            <br />a lie\n          </div>\n        </Flex>\n      )}\n      onShownChange={handleShownChange}\n    >\n      <Button id=\"dialog-3\" onClick={() => setShown((prev) => !prev)}>\n        Я переключаю состояние через useState\n      </Button>\n    </Popover>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Использование JS Media Queries в React компоненте с учетом SSR\nDESCRIPTION: Пример использования JS Media Queries в компоненте ModalRoot с учетом серверного рендеринга. Демонстрирует правильный подход к отложенному рендерингу компонентов, использующих клиентские API.\nSOURCE: https://github.com/vkcom/vkui/blob/master/docs/ADAPTIVITY_GUIDE.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// ✅ good for SSR\nconst App = () => {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return mounted ? (\n    <ModalRoot activeModal=\"main\">\n      <ModalPage id=\"main\">Hello World!</ModalPage>\n    </ModalRoot>\n  ) : null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomSelect Component with Various Configurations in React\nDESCRIPTION: Demonstrates multiple implementations of the CustomSelect component with different features including basic usage, custom styling, searchable options, custom search behavior, and asynchronous loading of options. The example includes helper components for specialized functionality.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/CustomSelect/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst getUsers = (usersArray) =>\n  usersArray.map((user) => ({\n    label: user.name,\n    value: `${user.id}`,\n    avatar: user.photo_100,\n    description: user.screen_name,\n  }));\n\nconst users = [...getUsers(getRandomUsers(10))];\n\nconst Example = () => {\n  const selectTypes = [\n    {\n      label: 'default',\n      value: 'default',\n    },\n    {\n      label: 'plain',\n      value: 'plain',\n    },\n    {\n      label: 'accent',\n      value: 'accent',\n    },\n  ];\n\n  const [selectType, setSelectType] = React.useState(null);\n\n  return (\n    <Div>\n      <Header>Базовые примеры использования</Header>\n\n      <FormLayoutGroup mode=\"horizontal\">\n        <FormItem\n          top=\"Администратор\"\n          htmlFor=\"administrator-select-id\"\n          style={{ flexGrow: 1, flexShrink: 1 }}\n        >\n          <CustomSelect\n            id=\"administrator-select-id\"\n            placeholder=\"Не выбран\"\n            options={users}\n            selectType={selectType || 'default'}\n            allowClearButton\n          />\n        </FormItem>\n\n        <FormItem\n          top=\"Вид выпадающего списка\"\n          htmlFor=\"select-type-select-id\"\n          style={{ flexBasis: '200px', flexGrow: 0 }}\n        >\n          <CustomSelect\n            id=\"select-type-select-id\"\n            value={selectType}\n            placeholder=\"Не задан\"\n            options={selectTypes}\n            allowClearButton\n            onChange={(_, newType) => setSelectType(newType)}\n            renderOption={({ option, ...restProps }) => (\n              <CustomSelectOption {...restProps} description={`\"${option.value}\"`} />\n            )}\n          />\n        </FormItem>\n      </FormLayoutGroup>\n\n      <FormItem\n        top=\"Администратор\"\n        bottom=\"Кастомный дизайн элементов списка\"\n        htmlFor=\"administrator-select-id-2\"\n      >\n        <CustomSelect\n          id=\"administrator-select-id-2\"\n          placeholder=\"Не выбран\"\n          options={users}\n          renderOption={({ option, ...restProps }) => (\n            <CustomSelectOption\n              {...restProps}\n              before={<Avatar size={24} src={option.avatar} />}\n              description={option.description}\n            />\n          )}\n        />\n      </FormItem>\n\n      <FormItem\n        top=\"Администратор\"\n        htmlFor=\"administrator-select-id-3\"\n        bottom=\"Ползунок скроллбара по умолчанию скрыт\"\n      >\n        <CustomSelect\n          id=\"administrator-select-id-3\"\n          placeholder=\"Не выбран\"\n          options={users}\n          selectType={selectType || 'default'}\n        />\n      </FormItem>\n\n      <Header>Поиск</Header>\n      <FormItem\n        top=\"Администратор\"\n        htmlFor=\"administrator-select-searchable-id-3\"\n        bottom=\"Поиск по списку\"\n      >\n        <CustomSelect\n          before={<Icon24User />}\n          placeholder=\"Введите имя пользователя\"\n          searchable\n          id=\"administrator-select-searchable-id-3\"\n          options={users}\n          allowClearButton\n        />\n      </FormItem>\n\n      <FormItem\n        top=\"Администратор\"\n        bottom=\"Кастомное поведение при поиске\"\n        htmlFor=\"custom-search-logic-select-id\"\n      >\n        <CustomSearchLogicSelect id=\"custom-search-logic-select-id\" />\n      </FormItem>\n\n      <FormItem\n        top=\"Город\"\n        bottom=\"Кастомный алгоритм поиска\"\n        htmlFor=\"custom-search-algo-select-id\"\n      >\n        <CustomSearchAlgoSelect id=\"custom-search-algo-select-id\" />\n      </FormItem>\n\n      <Header>Асинхронная загрузка списка</Header>\n      <AsyncCustomSelect />\n    </Div>\n  );\n};\n\n// **\n// * Кастомное поведение при поиске\n// **\nconst CustomSearchLogicSelect = ({ id }) => {\n  const [value, setValue] = React.useState('');\n  const [query, setQuery] = React.useState('');\n  const [newUsers, setNewUsers] = React.useState([...getUsers(getRandomUsers(10))]);\n\n  const customSearchOptions = () => {\n    const options = [...newUsers];\n    if (query.length > 0 && !options.find((user) => user.value === query || user.label === query)) {\n      options.unshift({\n        label: `Добавить пользователя ${query}`,\n        value: '0',\n      });\n    }\n    return options;\n  };\n\n  const onCustomSearchChange = (_, newValue) => {\n    if (newValue === '0') {\n      setNewUsers([...newUsers, { label: query, value: query }]);\n      setValue(query);\n    } else {\n      setValue(newValue);\n    }\n    setQuery('');\n  };\n\n  const onCustomSearchInputChange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  return (\n    <CustomSelect\n      id={id}\n      value={value}\n      placeholder=\"Введите имя пользователя\"\n      searchable\n      options={customSearchOptions()}\n      onInputChange={onCustomSearchInputChange}\n      renderOption={({ option, ...restProps }) => (\n        <CustomSelectOption\n          style={option.value === '0' ? { color: 'var(--vkui--color_text_accent)' } : {}}\n          {...restProps}\n        >\n          {option.label}\n        </CustomSelectOption>\n      )}\n      onChange={onCustomSearchChange}\n    />\n  );\n};\n\n// **\n// * Кастомный алгоритм поиска\n// **\nconst CustomSearchAlgoSelect = ({ id }) => {\n  const cities = [\n    {\n      label: 'Санкт-Петербург',\n      description: 'Россия',\n      value: '0',\n    },\n    {\n      label: 'Москва',\n      description: 'Россия',\n      value: '1',\n    },\n    {\n      label: 'Новосибирск',\n      description: 'Россия',\n      disabled: true,\n      value: '2',\n    },\n    {\n      label: 'Нью-Йорк',\n      description: 'США',\n      value: '3',\n    },\n    {\n      label: 'Чикаго',\n      description: 'США',\n      value: '4',\n    },\n  ];\n\n  const customSearchFilter = (value, option) =>\n    option.label.toLowerCase().includes(value.toLowerCase()) ||\n    option.description.toLowerCase().includes(value.toLowerCase());\n\n  return (\n    <CustomSelect\n      id=\"custom-search-algo-select-id\"\n      placeholder=\"Введите название города или страны\"\n      searchable\n      filterFn={customSearchFilter}\n      renderOption={({ option, ...restProps }) => (\n        <CustomSelectOption {...restProps} description={option.description} />\n      )}\n      options={cities}\n    />\n  );\n};\n\n// **\n// * Асинхронная загрузка списка\n// **\nconst AsyncCustomSelect = () => {\n  const [searchable, setSearchable] = React.useState(false);\n  const [remoteQuery, setRemoteQuery] = React.useState('');\n  const [fetching, setFetching] = React.useState(false);\n  const [remoteUsers, setRemoteUsers] = React.useState([]);\n\n  let timeout;\n\n  const cleanFetchingTimeout = () => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n  };\n\n  const fetchRemoteUsers = () => {\n    setFetching(true);\n    timeout = setTimeout(() => {\n      setRemoteUsers([...getUsers(getAllUsers())]);\n      setFetching(false);\n      cleanFetchingTimeout();\n    }, 1500);\n  };\n\n  const searchRemoteUsers = (e) => {\n    const _remoteQuery = e.target.value;\n    cleanFetchingTimeout();\n    setRemoteQuery(_remoteQuery);\n\n    if (_remoteQuery.length < 3) {\n      setRemoteUsers([]);\n      setFetching(false);\n    } else {\n      fetchRemoteUsers();\n    }\n  };\n\n  const clearRemoteUsers = () => {\n    setRemoteUsers([]);\n    setRemoteQuery('');\n    cleanFetchingTimeout();\n  };\n\n  const renderDropdown = ({ defaultDropdownContent }) => {\n    if (remoteQuery.length < 3) {\n      return (\n        <Text style={{ padding: 12, color: 'var(--vkui--color_text_secondary)' }}>\n          Нужно ввести хотя бы три символа\n        </Text>\n      );\n    }\n    return defaultDropdownContent;\n  };\n\n  React.useEffect(() => {\n    return () => cleanFetchingTimeout();\n  }, []);\n\n  return (\n    <FormLayoutGroup mode=\"horizontal\">\n      <FormItem style={{ flexGrow: 1, flexShrink: 1 }}>\n        <CustomSelect\n          aria-label=\"Пользователь\"\n          options={remoteUsers}\n          searchable={searchable}\n          placeholder={searchable ? 'Введите имя пользователя' : 'Не выбран'}\n          disabled={searchable && fetching}\n          onInputChange={searchable ? searchRemoteUsers : undefined}\n          onOpen={searchable ? undefined : remoteUsers.length === 0 && fetchRemoteUsers}\n          onClose={() => {\n            console.log('CLOSED [async CustomSelect]');\n          }}\n          fetching={fetching}\n          renderDropdown={searchable && !fetching && renderDropdown}\n        />\n      </FormItem>\n\n      <FormItem style={{ flexBasis: '200px', flexGrow: 0 }}>\n        <Checkbox\n          onChange={(e) => {\n            setSearchable(e.target.checked);\n            clearRemoteUsers();\n          }}\n        >\n          Использовать поиск\n        </Checkbox>\n      </FormItem>\n    </FormLayoutGroup>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Taptic Impact with VK Bridge React\nDESCRIPTION: Example of using taptic impact in a pull-to-refresh component with VK Bridge React\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/integrations/vk-mini-apps.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { runTapticImpactOccurred } from '@vkontakte/vk-bridge-react';\n\nconst Users = () => {\n  const [users, setUsers] = React.useState([\n    { id: 1, name: 'Placeholder', avatarUrl: 'https://placehold.co/100' },\n  ]);\n  const [fetching, setFetching] = React.useState(false);\n\n  const onRefresh = React.useCallback(() => {\n    setFetching(true);\n    // Вызываем виброотклик\n    runTapticImpactOccurred('light');\n  }, []);\n\n  return (\n    <View activePanel=\"users\">\n      <Panel id=\"users\">\n        <PanelHeader>Пользователи</PanelHeader>\n\n        <PullToRefresh onRefresh={onRefresh} isFetching={fetching}>\n          <Group>\n            <List>\n              {users.map(({ id, name, avatarUrl }, i) => {\n                return (\n                  <Cell key={i} before={<Avatar src={avatarUrl} />}>\n                    {name}\n                  </Cell>\n                );\n              })}\n            </List>\n          </Group>\n        </PullToRefresh>\n      </Panel>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties for Modifiers in React Components\nDESCRIPTION: Example showing how to use CSS custom properties (variables) to pass CSS-property-like modifiers to components, providing flexibility while maintaining clean component structure.\nSOURCE: https://github.com/vkcom/vkui/blob/master/docs/CSS_GUIDE.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { classNames } from '@vkontakte/vkjs';\nimport styles from './Component.module.css';\n\nconst Component = ({ objectFit, children }) => {\n  return (\n    <div\n      className={classNames(className, styles.host)}\n      style={objectFit ? { '--vkui_internal_Component_object-fit': objectFit } : undefined}\n    >\n      {children}\n    </div>\n  );\n};\n```\n\nLANGUAGE: css\nCODE:\n```\n.host {\n  --vkui_internal_Component_object-fit: initial;\n\n  object-fit: var(--vkui_internal_Component_object-fit);\n}\n```\n\n----------------------------------------\n\nTITLE: Tabbar Accessibility Example with VisuallyHidden\nDESCRIPTION: This snippet demonstrates how to make TabbarItems accessible to screen readers by using the VisuallyHidden component to provide text labels associated with icons. The example uses the Icon28NewsfeedOutline and Icon28UserCircleOutline components as icons within TabbarItems.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/TabbarItem/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [simple, setSimple] = useState('one');\nconst [text, setText] = useState('one');\nconst [horizontalText, setHorizontalText] = useState('one');\nconst [indicator, setIndicator] = useState('one');\n\n<div\n  style={{\n    background: 'var(--vkui--color_background)',\n    padding: '10px 0',\n  }}\n>\n  <div style={{ maxWidth: 768, margin: 'auto' }}>\n    <Tabbar style={{ position: 'static', margin: '0 0 10px' }}>\n      <TabbarItem selected={simple === 'one'} onClick={() => setSimple('one')}>\n        <VisuallyHidden>Новости</VisuallyHidden>\n        <Icon28NewsfeedOutline />\n      </TabbarItem>\n      <TabbarItem selected={simple === 'two'} onClick={() => setSimple('two')}>\n        <VisuallyHidden>Профиль</VisuallyHidden>\n        <Icon28UserCircleOutline />\n      </TabbarItem>\n    </Tabbar>\n\n    <Tabbar style={{ position: 'static', margin: '10px 0' }}>\n      <TabbarItem selected={text === 'one'} onClick={() => setText('one')} label=\"Новости\">\n        <Icon28NewsfeedOutline />\n      </TabbarItem>\n      <TabbarItem selected={text === 'two'} onClick={() => setText('two')} label=\"Профиль\">\n        <Icon28UserCircleOutline />\n      </TabbarItem>\n      <TabbarItem selected={text === 'three'} onClick={() => setText('three')} label=\"Мессенджер\">\n        <Icon28MessageOutline />\n      </TabbarItem>\n    </Tabbar>\n\n    <Tabbar mode=\"horizontal\" style={{ position: 'static', margin: '10px 0' }}>\n      <TabbarItem\n        selected={horizontalText === 'one'}\n        onClick={() => setHorizontalText('one')}\n        label=\"Новости\"\n      >\n        <Icon28NewsfeedOutline />\n      </TabbarItem>\n      <TabbarItem\n        selected={horizontalText === 'two'}\n        onClick={() => setHorizontalText('two')}\n        label=\"Профиль\"\n      >\n        <Icon28UserCircleOutline />\n      </TabbarItem>\n      <TabbarItem\n        selected={horizontalText === 'three'}\n        onClick={() => setHorizontalText('three')}\n        label=\"Мессенджер\"\n      >\n        <Icon28MessageOutline />\n      </TabbarItem>\n    </Tabbar>\n\n    <Tabbar style={{ position: 'static', margin: '10px 0 0' }}>\n      <TabbarItem\n        selected={indicator === 'one'}\n        onClick={() => setIndicator('one')}\n        indicator={<Badge mode=\"prominent\">Есть обновления</Badge>}\n        label=\"Новости\"\n      >\n        <Icon28NewsfeedOutline />\n      </TabbarItem>\n      <TabbarItem\n        selected={indicator === 'two'}\n        onClick={() => setIndicator('two')}\n        label=\"Профиль\"\n      >\n        <Icon28UserCircleOutline />\n      </TabbarItem>\n      <TabbarItem\n        selected={indicator === 'three'}\n        onClick={() => setIndicator('three')}\n        label=\"Мессенджер\"\n        indicator={\n          <Counter size=\"s\" mode=\"primary\" appearance=\"accent-red\">\n            3\n          </Counter>\n        }\n      >\n        <Icon28MessageOutline />\n      </TabbarItem>\n    </Tabbar>\n  </div>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Using Taptic Engine for User Interaction Feedback in VK Mini Apps\nDESCRIPTION: This React component utilizes the Taptic Engine feature from VK Bridge to provide haptic feedback during user interactions, specifically when refreshing a list. It invokes the appropriate method to trigger vibration feedback upon the refresh action.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/integrations_vk_mini_apps.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { runTapticImpactOccurred } from '@vkontakte/vk-bridge-react';\n\nconst Users = () => {\n  const [users, setUsers] = React.useState([\n    { id: 1, name: 'Placeholder', avatarUrl: 'https://placehold.co/100' },\n  ]);\n  const [fetching, setFetching] = React.useState(false);\n\n  const onRefresh = React.useCallback(() => {\n    setFetching(true);\n    // Вызываем виброотклик\n    runTapticImpactOccurred('light');\n  }, []);\n\n  return (\n    <View activePanel=\"users\">\n      <Panel id=\"users\">\n        <PanelHeader>Пользователи</PanelHeader>\n\n        <PullToRefresh onRefresh={onRefresh} isFetching={fetching}>\n          <Group>\n            <List>\n              {users.map(({ id, name, avatarUrl }, i) => {\n                return (\n                  <Cell key={i} before={<Avatar src={avatarUrl} />}>\n                    {name}\n                  </Cell>\n                );\n              })}\n            </List>\n          </Group>\n        </PullToRefresh>\n      </Panel>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Use Cases for ButtonGroup in React JSX\nDESCRIPTION: This component demonstrates practical use cases for ButtonGroup, showcasing different configurations including vertical and horizontal layouts, nested ButtonGroups, and various button styles.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ButtonGroup/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ExampleUseCases = () => {\n  return (\n    <React.Fragment>\n      <Div>\n        <Title level=\"3\">Примеры использования</Title>\n      </Div>\n      <Div>\n        <ButtonGroup mode=\"vertical\" gap=\"m\" style={{ minWidth: 328 }}>\n          <Button onClick={() => {}} size=\"l\" appearance=\"accent\" stretched>\n            Разрешить\n          </Button>\n          <Button onClick={() => {}} size=\"l\" appearance=\"accent\" stretched>\n            Завершить\n          </Button>\n          <ButtonGroup mode=\"horizontal\" gap=\"m\" stretched>\n            <Button onClick={() => {}} size=\"l\" appearance=\"negative\" stretched>\n              Не сейчас\n            </Button>\n            <Button onClick={() => {}} size=\"l\" appearance=\"positive\" stretched>\n              Продолжить\n            </Button>\n          </ButtonGroup>\n        </ButtonGroup>\n      </Div>\n      <br />\n      <Div>\n        <ButtonGroup mode=\"vertical\" gap=\"m\" style={{ minWidth: 328 }}>\n          <Button onClick={() => {}} size=\"l\" appearance=\"accent\" stretched>\n            Разрешить\n          </Button>\n          <Button onClick={() => {}} size=\"l\" appearance=\"accent\" mode=\"secondary\" stretched>\n            Завершить\n          </Button>\n          <Button onClick={() => {}} size=\"l\" appearance=\"accent\" mode=\"tertiary\" stretched>\n            Не сейчас\n          </Button>\n        </ButtonGroup>\n      </Div>\n      <br />\n      <Div>\n        <ButtonGroup mode=\"horizontal\" gap=\"space\" stretched>\n          <Button\n            onClick={() => {}}\n            size=\"l\"\n            appearance=\"accent\"\n            mode=\"tertiary\"\n            before={<Icon24Attach />}\n          >\n            Прикрепить файл\n          </Button>\n          <Button\n            size=\"l\"\n            appearance=\"accent\"\n            mode=\"tertiary\"\n            before={<Icon20AddCircle />}\n            after={<Icon16ArrowTriangleDown />}\n          >\n            Создать\n          </Button>\n          <Button\n            onClick={() => {}}\n            size=\"l\"\n            appearance=\"accent\"\n            mode=\"tertiary\"\n            before={<Icon24Send />}\n          >\n            Отправить\n          </Button>\n        </ButtonGroup>\n      </Div>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering View and Panel with Modal Triggers in React\nDESCRIPTION: This snippet renders a View with a Panel that contains CellButton components. These buttons trigger the display of different modals by calling the changeActiveModal function. This setup is a common pattern for navigating between different modal views within a React application.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ModalRoot/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n\"  return (\n    <React.Fragment>\n      {modal}\n      <View activePanel=\\\"modals\\\">\n        <Panel id=\\\"modals\\\">\n          <PanelHeader>Модальные окна</PanelHeader>\n          <Group>\n            <CellButton onClick={() => changeActiveModal(MODAL_PAGE_FILTERS)}>\n              Открыть модальную страницу\n            </CellButton>\n            <CellButton multiline onClick={() => changeActiveModal(MODAL_PAGE_FULLSCREEN)}>\n              Открыть полноэкранную модальную страницу\n            </CellButton>\n            <CellButton multiline onClick={() => changeActiveModal(MODAL_PAGE_WITH_FIXED_HEIGHT)}>\n              Открыть модальную страницу c фиксированной высотой\n            </CellButton>\n            <CellButton multiline onClick={() => changeActiveModal(MODAL_PAGE_DYNAMIC)}>\n              Открыть модальную страницу с динамической высотой\n            </CellButton>\n            <CellButton onClick={() => changeActiveModal(MODAL_CARD_MONEY_SEND)}>\n              Открыть модальные карточки\n            </CellButton>\n          </Group>\n        </Panel>\n      </View>\n    </React.Fragment>\n  );\"\n```\n\n----------------------------------------\n\nTITLE: Working with Component Modifiers in React/JSX\nDESCRIPTION: Implementation example showing how to organize and apply multiple modifier classes using collections based on animation states and platform types. Uses the classNames utility for conditional class application.\nSOURCE: https://github.com/vkcom/vkui/blob/master/docs/CSS_GUIDE.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { classNames } from '@vkontakte/vkjs';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { useCSSKeyframesAnimationController } from '../../lib/animation';\nimport styles from './Component.module.css';\n\nconst animationStateClassNames = {\n  enter: styles.hostEnter,\n  entering: styles.hostEnter,\n  entered: styles.hostEntered,\n  exit: styles.hostExit,\n  exiting: styles.hostExit,\n  exited: styles.hostExited,\n};\n\nconst platformClassNames = {\n  android: styles.hostAndroid,\n  vkcom: styles.hostVKCOM,\n};\n\nconst Component = ({ className, children }) => {\n  const [animationState, animationHandlers] = useCSSKeyframesAnimationController('enter');\n  const platform = usePlatform();\n  return (\n    <div\n      className={classNames(\n        className,\n        styles.host,\n        animationStateClassNames[animationState],\n        platform !== 'ios' && platformClassNames[platform],\n      )}\n      {...animationHandlers}\n    >\n      {children}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Select with Label\nDESCRIPTION: This example shows how to use the Select component with a label element. The `htmlFor` attribute of the label is used to associate it with the Select component via its `id`. This allows screen readers to correctly associate the label with the input field and clicking the label focuses the select.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Select/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<label htmlFor=\\\"select-id\\\">Администратор</label>\\n<Select\\n  id=\\\"select-id\\\"\\n  placeholder=\\\"Не выбран\\\"\\n  options={users}\\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Using usePlatform Hook in VKUI\nDESCRIPTION: This snippet demonstrates how to use the `usePlatform` hook from `@vkontakte/vkui` to determine the current platform (Android or iOS) within a functional component.  The hook returns the platform type, which can then be used to conditionally render different UI elements or apply platform-specific styling.  Requires `@vkontakte/vkui` as a dependency.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/utils.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePlatform, Platform } from '@vkontakte/vkui';\n\nconst MyComponent = () => {\n  const platform = usePlatform(); // android или ios\n  return '...';\n};\n```\n\n----------------------------------------\n\nTITLE: Button Group Configuration with Multiple Modes\nDESCRIPTION: Implementation of button groups using different modes (horizontal and vertical) with configurable styling, size, and appearance settings\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ButtonGroup/Readme.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup\n  mode=\"horizontal\"\n  gap=\"m\"\n  stretched={false}\n  style={buttonGroupHighlightStyles}\n>\n  <Button size=\"l\" appearance=\"accent\">\n    {buttonText}\n  </Button>\n  <Button\n    size=\"l\"\n    appearance=\"accent\"\n    before={<Icon24Add />}\n    aria-label={buttonWithIconLabel}\n  />\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Using UsersStack Component in VKUI with Various Configurations\nDESCRIPTION: This React component `App` demonstrates various usages of the `UsersStack` component from VKUI. It showcases different avatar sizes, layouts (inline and vertical), and integrations within a `Panel` and `View`. It uses utility function `getAvatarUrl` to fetch the avatar URLs. Also it uses `AvatarWrapper` component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/UsersStack/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  return (\n    <View activePanel=\"usersstack\">\n      <Panel id=\"usersstack\">\n        <PanelHeader>Аватарки пользователей</PanelHeader>\n\n        <Group>\n          <Div>\n            <UsersStack photos={[getAvatarUrl('user_lihachyov')]}>\n              Понравилось Муртолу Левзачеву\n            </UsersStack>\n          </Div>\n          <Div>\n            <UsersStack avatarsPosition=\"inline-end\" photos={[getAvatarUrl('user_lihachyov')]}>\n              Понравилось Муртолу Левзачеву\n            </UsersStack>\n          </Div>\n        </Group>\n\n        <Group>\n          <Div>\n            <UsersStack photos={[getAvatarUrl('user_manzuk'), getAvatarUrl('user_ji')]} size=\"l\">\n              Настя и Jean пойдут на это мероприятие\n            </UsersStack>\n          </Div>\n        </Group>\n\n        <Group>\n          <Div>\n            <UsersStack\n              photos={[\n                getAvatarUrl('user_ox'),\n                getAvatarUrl('user_vitalyavolyn'),\n                getAvatarUrl('user_eee'),\n              ]}\n              size=\"s\"\n            >\n              Иван и ещё 2 ваших друга подписаны\n            </UsersStack>\n          </Div>\n        </Group>\n\n        <Group header={<Header size=\"s\">Вертикальный режим</Header>}>\n          <Div>\n            <UsersStack\n              photos={[\n                getAvatarUrl('user_mm'),\n                getAvatarUrl('user_ilyagrshn'),\n                getAvatarUrl('user_lihachyov'),\n                getAvatarUrl('user_wayshev'),\n                getAvatarUrl('user_arthurstam'),\n                getAvatarUrl('user_xyz'),\n              ]}\n              size=\"l\"\n              avatarsPosition=\"block-start\"\n            >\n              Алексей, Илья, Михаил\n              <br />и ещё 3 человека\n            </UsersStack>\n          </Div>\n        </Group>\n\n        <Group>\n          <Flex\n            align=\"end\"\n            justify=\"center\"\n            margin=\"auto\"\n            style={{\n              backgroundImage: 'linear-gradient(135deg, #f24973 0%, #3948e6 100%)',\n              height: 200,\n              borderRadius: 'inherit',\n            }}\n          >\n            <UsersStack\n              photos={[getAvatarUrl('user_xyz'), getAvatarUrl('user_va'), getAvatarUrl('user_tc')]}\n              style={{ color: 'var(--vkui--color_text_contrast)', padding: '8px 16px 16px 16px' }}\n            >\n              Проголосовали 2 176 человек\n            </UsersStack>\n          </Flex>\n        </Group>\n\n        <Group header={<Header size=\"s\">Кликабельные с тултипом</Header>}>\n          <Div>\n            <UsersStack\n              photos={[\n                { src: getAvatarUrl('user_ox'), renderWrapper: AvatarWrapper },\n                { src: getAvatarUrl('user_vitalyavolyn'), renderWrapper: AvatarWrapper },\n                { src: getAvatarUrl('user_eee'), renderWrapper: AvatarWrapper },\n                { src: getAvatarUrl('user_wayshev'), renderWrapper: AvatarWrapper },\n                { src: getAvatarUrl('user_arthurstam'), renderWrapper: AvatarWrapper },\n                { src: getAvatarUrl('user_xyz'), renderWrapper: AvatarWrapper },\n              ]}\n              size=\"l\"\n              avatarsPosition=\"block-start\"\n            >\n              Иван и ещё 2 ваших друга подписаны\n            </UsersStack>\n          </Div>\n        </Group>\n      </Panel>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: OnboardingTooltip Appearance Variants\nDESCRIPTION: Examples of different color variants available for OnboardingTooltip including accent, neutral, white, black, and inversion appearance options.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/OnboardingTooltip/Readme.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<OnboardingTooltipContainer>\n  <OnboardingTooltip placement=\"right\" description={`appearance=\"accent\"`} appearance=\"accent\">\n    <div style={{ width: 50, margin: 10 }}>\n      <Avatar />\n    </div>\n  </OnboardingTooltip>\n  <OnboardingTooltip placement=\"right\" description={`appearance=\"neutral\"`} appearance=\"neutral\">\n    <div style={{ width: 50, margin: 10 }}>\n      <Avatar />\n    </div>\n  </OnboardingTooltip>\n  <OnboardingTooltip placement=\"right\" description={`appearance=\"white`} appearance=\"white\">\n    <div style={{ width: 50, margin: 10 }}>\n      <Avatar />\n    </div>\n  </OnboardingTooltip>\n  <OnboardingTooltip placement=\"right\" description={`appearance=\"black\"`} appearance=\"black\">\n    <div style={{ width: 50, margin: 10 }}>\n      <Avatar />\n    </div>\n  </OnboardingTooltip>\n  <OnboardingTooltip\n    placement=\"right\"\n    description={`appearance=\"inversion\"`}\n    appearance=\"inversion\"\n  >\n    <div style={{ width: 50, margin: 10 }}>\n      <Avatar />\n    </div>\n  </OnboardingTooltip>\n</OnboardingTooltipContainer>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Avatar with Tooltip and Click Handler in React\nDESCRIPTION: This React component `AvatarWrapper` wraps a child component (avatar) with a Tooltip component and adds a click handler. On click, it opens a new browser tab to the URL specified in the `data-src` prop.  It relies on `getRandomUser` and `Tooltip` from the VKUI library.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/UsersStack/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst AvatarWrapper = (props) => {\n  const user = getRandomUser();\n\n  return (\n    <Tooltip description={`${user.first_name} ${user.last_name}`}>\n      <div\n        style={{\n          cursor: 'pointer',\n        }}\n        onClick={() => window.open(props['data-src'], '_blank')}\n      >\n        {props.children}\n      </div>\n    </Tooltip>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Search with Thematics and User Filtering\nDESCRIPTION: A comprehensive search component that allows filtering through thematics and users with dynamic panel switching and modal interactions\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Search/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst SearchExample = () => {\n  const platform = usePlatform();\n\n  const [activePanel, setActivePanel] = React.useState('search');\n  const [activeModal, setActiveModal] = React.useState(null);\n\n  const goHeaderSearch = () => setActivePanel('header-search');\n\n  const goSearch = () => setActivePanel('search');\n\n  const openFilters = () => setActiveModal('filters');\n\n  const hideModal = () => setActiveModal(null);\n\n  const isVKCOM = platform === 'vkcom';\n\n  return (\n    <React.Fragment>\n      <SplitLayout header={!isVKCOM && <PanelHeader delimiter=\"none\" />}>\n        <SplitCol autoSpaced={!isVKCOM}>\n          <View activePanel={activePanel}>\n            <Panel id=\"search\">\n              <SimpleSearch goHeaderSearch={goHeaderSearch} />\n            </Panel>\n            <Panel id=\"header-search\">\n              <HeaderSearch onFiltersClick={openFilters} goSearch={goSearch} />\n            </Panel>\n          </View>\n        </SplitCol>\n      </SplitLayout>\n      <ModalRoot activeModal={activeModal}>\n        <ModalPage\n          id=\"filters\"\n          onClose={hideModal}\n          header={...}\n        >\n          <Group>...</Group>\n        </ModalPage>\n      </ModalRoot>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing VKUI Gradient Component with Various Configurations in JSX\nDESCRIPTION: This React component demonstrates different ways to use the Gradient component from VKUI. It shows gradient implementations with different modes ('default' and 'tint'), directions ('top' and 'bottom'), and combined with various other VKUI components like Button, Placeholder, SimpleCell and CellButton.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Gradient/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  return (\n    <View activePanel=\"gradient\">\n      <Panel id=\"gradient\">\n        <PanelHeader>Gradient</PanelHeader>\n        <FixedLayout vertical=\"bottom\">\n          <Gradient to=\"top\">\n            <Flex justify=\"center\" style={{ padding: 32 }}>\n              <Button>mode=\"default\"</Button>\n            </Flex>\n          </Gradient>\n        </FixedLayout>\n        <Group>\n          <Gradient mode=\"tint\" to=\"top\">\n            <Placeholder\n              icon={<Avatar size={96} />}\n              title=\"Алексей Мазелюк\"\n              action={\n                <Button size=\"m\" mode=\"secondary\">\n                  Редактировать\n                </Button>\n              }\n            >\n              Учащийся\n            </Placeholder>\n          </Gradient>\n          <Group mode=\"plain\" header={<Header>Учебные заведения и классы</Header>}>\n            <SimpleCell before={<Icon28SchoolOutline />} subtitle=\"Екатеринбург\">\n              Школа №180\n            </SimpleCell>\n            <CellButton onClick={noop} before={<Icon28AddOutline />}>\n              Добавить учебное заведение\n            </CellButton>\n          </Group>\n        </Group>\n        <Group mode=\"plain\" header={<Header size=\"s\">Направление to=\"bottom\"</Header>}>\n          <Gradient mode=\"tint\" to=\"bottom\">\n            <Div>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed a sollicitudin lectus, a\n              commodo sapien. Vivamus a urna leo. Integer iaculis dignissim urna, sit amet\n              vestibulum diam bibendum a. Donec eu arcu ut augue porttitor faucibus. Vestibulum nec\n              pretium tortor, sit amet congue nunc. Aenean ullamcorper ex sem, sed interdum quam\n              consequat et. Vestibulum a ex non diam fringilla feugiat. Nunc eu tellus sed leo\n              elementum cursus. Mauris blandit porta egestas. Curabitur eget justo elementum,\n              malesuada lacus ut, congue mauris. Integer orci nisi, convallis vitae dapibus sit\n              amet, molestie a risus. Aenean ultricies lacus eros, sit amet condimentum urna\n              malesuada et. Sed quis dolor tempus orci fringilla volutpat in sed velit. Aenean\n              aliquet bibendum pretium.\n            </Div>\n          </Gradient>\n        </Group>\n      </Panel>\n    </View>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Popover with Click Trigger in React\nDESCRIPTION: This example demonstrates a Popover component triggered by clicking a button. It sets the role to 'dialog' and provides aria-labelledby for accessibility. The content includes menu items (CellButton) with icons and click handlers to close the Popover.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Popover/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst PopoverWithTriggerClick = () => {\n  return (\n    <Popover\n      noStyling\n      trigger=\"click\"\n      id=\"menupopup\"\n      role=\"dialog\"\n      aria-labelledby=\"menubutton\"\n      content={({ onClose }) => (\n        <div\n          style={{\n            backgroundColor: 'var(--vkui--color_background_modal_inverse)',\n            borderRadius: 8,\n            boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n          }}\n        >\n          <CellButton role=\"menuitem\" before={<Icon28AddOutline />} onClick={onClose}>\n            Добавить\n          </CellButton>\n          <CellButton\n            role=\"menuitem\"\n            before={<Icon28DeleteOutline />}\n            appearance=\"negative\"\n            onClick={onClose}\n          >\n            Удалить\n          </CellButton>\n        </div>\n      )}\n    >\n      <Button id=\"menubutton\" aria-controls=\"menupopup\" mode=\"outline\">\n        Нажми на меня\n      </Button>\n    </Popover>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Accordion Components in VKUI Panel Layout in React JSX\nDESCRIPTION: This snippet demonstrates the complete implementation of a VKUI Panel with multiple accordion groups. It includes the two previously defined accordion components and adds individual accordions with custom configurations like icon position and initial open state.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Accordion/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<View activePanel=\"div\">\n  <Panel id=\"div\">\n    <PanelHeader>Accordion</PanelHeader>\n    <Group>\n      <AccordionVKID />\n    </Group>\n    <Group>\n      <AccordionCombo />\n    </Group>\n    <Group>\n      <Accordion open>\n        <Accordion.Summary iconPosition=\"before\">Новый дизайн профиля</Accordion.Summary>\n        <Accordion.Content>\n          <Div style={infoStyle}>\n            Внешний вид профиля ВКонтакте действительно обновился. К прежнему варианту вернуться уже\n            не получится. В центре внимания нового дизайна — личность человека и его увлечения.\n            Новый формат профиля особенно удобен для авторов контента и станет для них цифровой\n            визиткой.\n          </Div>\n        </Accordion.Content>\n      </Accordion>\n      <Accordion>\n        <Accordion.Summary iconPosition=\"before\">Что такое VK Pay?</Accordion.Summary>\n        <Accordion.Content>\n          <Div style={infoStyle}>\n            VK Pay — это онлайн-сервис для оплаты товаров и услуг. Храните все банковские карты под\n            рукой, покупайте в онлайн-магазинах, получайте персональные скидки и спецпредложения,\n            оплачивайте ежедневные услуги и переводите деньги друзьям.\n          </Div>\n        </Accordion.Content>\n      </Accordion>\n    </Group>\n  </Panel>\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Search with Find Button and Modal Interaction\nDESCRIPTION: A search component demonstrating compact version search with popover menu, find button, and modal activation for VKUI platform\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Search/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const platform = usePlatform();\n\n  const isVKCOM = platform === Platform.VKCOM;\n\n  const [activeModal, setActiveModal] = React.useState(null);\n\n  const onFindButtonClick = () => {\n    setActiveModal('findModal');\n  };\n  return (\n    <React.Fragment>\n      <SplitLayout header={!isVKCOM && <PanelHeader delimiter=\"none\" />}>\n        <SplitCol>\n          <View activePanel=\"find\">\n            <Panel id=\"find\">\n              <PanelHeader>Только для Compact-версии</PanelHeader>\n              <Group>\n                <Search\n                  defaultValue=\"value\"\n                  icon={(renderButton) => (...popover configuration...)}\n                  after={<Icon24User />}\n                  onFindButtonClick={onFindButtonClick}\n                />\n              </Group>\n            </Panel>\n          </View>\n        </SplitCol>\n      </SplitLayout>\n      <ModalRoot activeModal={activeModal}>\n        <ModalCard\n          id=\"findModal\"\n          onClose={() => setActiveModal(null)}\n          icon={<Icon56MoneyTransferOutline />}\n          title=\"Здесь ничего нет\"\n          actions={...}\n        ></ModalCard>\n      </ModalRoot>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing React Panel Navigation Component\nDESCRIPTION: A React functional component that manages panel state and renders a complex user interface with multiple panels, navigation, and interactive elements\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/SimpleCell/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [activePanel, setActivePanel] = React.useState('list');\n\n  return (\n    <View activePanel={activePanel}>\n      <Panel id=\"list\">\n        {/* Panel content */}\n      </Panel>\n      <Panel id=\"nothing\">\n        {/* Empty panel */}\n      </Panel>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform with ConfigProvider in React\nDESCRIPTION: Demonstrates how to manually set the platform for VKUI components, forcing iOS platform styling and behavior\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/platforms-and-themes.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigProvider platform=\"ios\">\n  <AdaptivityProvider>\n    <AppRoot>\n      <SimpleCell>Эта ячейка будет иметь поведение и стилизацию как в iOS</SimpleCell>\n    </AppRoot>\n  </AdaptivityProvider>\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Overriding Platform for Specific Components\nDESCRIPTION: Shows how to use PlatformProvider to change platform context for nested components\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/platforms-and-themes.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PlatformProvider value=\"ios\">\n  <Snackbar action=\"Поделиться\">Поделиться</Snackbar>\n</PlatformProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing VKUI Banner Components with Various Configurations in JSX\nDESCRIPTION: Demonstrates multiple implementations of the Banner component from VKUI, showcasing different sizes, content types (tint and image), and styling options. Includes examples with images, avatars, custom gradients, and various action buttons.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Banner/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<View activePanel=\"banner\">\n  <Panel id=\"banner\">\n    <PanelHeader>Banner</PanelHeader>\n    <Group header={<Header>Content: tint, size: regular</Header>}>\n      <Div>\n        <Banner\n          before={\n            <Image\n              size={96}\n              src=\"https://sun9-63.userapi.com/yOEQYPHrNHjZEoanbqPb65HPl5iojmiLgLzfGA/W3geVMMt8TI.jpg\"\n            />\n          }\n          title=\"Баста в Ледовом\"\n          subtitle=\"Большой концерт\"\n          after=\"dismiss\"\n          onDismiss={noop}\n          actions={<Button>Подробнее</Button>}\n        />\n      </Div>\n\n      <Div>\n        <Banner\n          before={\n            <Image\n              size={96}\n              src=\"https://sun9-32.userapi.com/uFzLOK55iY7pC0DHjneEdP9G6gXcXi2Mxj9wVA/wnTmzh_blNM.jpg\"\n            />\n          }\n          title=\"Для Вас\"\n          subtitle=\"Обновлено сегодня\"\n          actions={<Button before={<Icon24Play />}>Слушать</Button>}\n        />\n      </Div>\n\n      <Div>\n        <Banner\n          before={\n            <Image style={{ backgroundImage: musicGradient }}>\n              <Icon28MusicOutline fill=\"#fff\" />\n            </Image>\n          }\n          title=\"Подписка за рубль!\"\n          subtitle=\"Предложение действует только до конца февраля\"\n          after=\"dismiss\"\n          onDismiss={noop}\n          actions={\n            <ButtonGroup mode=\"vertical\" gap=\"m\">\n              <Button mode=\"primary\">Попробовать сейчас</Button>\n              <Button mode=\"link\">Напомнить позже</Button>\n            </ButtonGroup>\n          }\n        />\n      </Div>\n\n      <Div>\n        <Banner\n          before={<Avatar size={48} src={getAvatarUrl('user_lihachyov')} />}\n          title=\"Сегодня день рождения Михаила Лихачёва\"\n          subtitle=\"Подарите подарок\"\n          after=\"dismiss\"\n          onDismiss={noop}\n          actions={<Button mode=\"primary\">Подарить</Button>}\n        />\n      </Div>\n\n      <Div>\n        <Banner\n          before={\n            <Avatar size={28} style={{ backgroundImage: warningGradient }}>\n              <span style={{ color: '#fff' }}>!</span>\n            </Avatar>\n          }\n          title=\"Телефон ожидает подтверждения\"\n          subtitle={\n            <React.Fragment>\n              Новый номер +7 ••• ••• •• 96 будет сохранён через семь дней.\n              <br />\n              <Link>Ускорьте процесс</Link>, если у Вас есть\n              <br />\n              доступ к старому номеру.\n            </React.Fragment>\n          }\n          actions={<Button mode=\"link\">Отменить заявку</Button>}\n        />\n      </Div>\n\n      <Div>\n        <Banner\n          before={\n            <Avatar src=\"https://sun9-7.userapi.com/q9qBUh4kGND1pTUytY4LwljtRLWoCXaIzN7C2A/52lM85R5kus.jpg\" />\n          }\n          extraSubtitle=\"Хотите, чтобы вам меньше мешали? Включите режим «невидимка»!\"\n          actions={\n            <ButtonGroup mode=\"horizontal\" gap=\"m\">\n              <Button>Включить</Button>\n              <Button mode=\"link\">Подробнее</Button>\n            </ButtonGroup>\n          }\n        />\n      </Div>\n\n      <Div>\n        <Banner\n          title=\"Больше интересных подкастов в каталоге\"\n          subtitle=\"Найдите интересующие именно Вас подкасты!\"\n          after=\"chevron\"\n          onClick={() => console.log('[Podcast banner] onClick')}\n        />\n      </Div>\n    </Group>\n\n    <Group title={<Header>Mode: image, size: regular</Header>}>\n      <Div>\n        <Banner\n          mode=\"image\"\n          title=\"Мои достижения\"\n          subtitle=\"Разблокировано 9 из 36\"\n          background={\n            <div\n              style={{\n                backgroundColor: '#65c063',\n                backgroundImage:\n                  'url(https://sun9-59.userapi.com/7J6qHkTa_P8VKRTO5gkh6MizcCEefz04Y0gDmA/y6dSjdtPU4U.jpg)',\n                backgroundPosition: 'right bottom',\n                backgroundSize: 320,\n                backgroundRepeat: 'no-repeat',\n              }}\n            />\n          }\n          actions={<Button appearance=\"overlay\">Подробнее</Button>}\n        />\n      </Div>\n    </Group>\n    <Group title={<Header>Content: tint, size: medium</Header>}>\n      <Div>\n        <Banner\n          size=\"m\"\n          title=\"Реклама сообщества\"\n          subtitle={\n            <span>\n              Привлекайте больше людей\n              <br />в Ваше сообщество\n            </span>\n          }\n          after=\"dismiss\"\n          onDismiss={noop}\n          actions={\n            <Button mode=\"primary\" size=\"m\">\n              Подробнее\n            </Button>\n          }\n        />\n      </Div>\n    </Group>\n\n    <Group header={<Header>Content: image, size: medium</Header>}>\n      <Div>\n        <Banner\n          mode=\"image\"\n          size=\"m\"\n          title=\"Реклама в сообществе\"\n          subtitle={\n            <span>\n              Привлекайте больше людей\n              <br />в Ваше сообщество\n            </span>\n          }\n          background={\n            <div\n              style={{\n                backgroundColor: '#5b9be6',\n                backgroundImage:\n                  'url(https://sun9-31.userapi.com/PQ4UCzqE_jue9hAINefBMorYCdfGXvcuV5nSjA/eYugcFYzdW8.jpg)',\n                backgroundPosition: 'right bottom',\n                backgroundSize: '102%',\n                backgroundRepeat: 'no-repeat',\n              }}\n            />\n          }\n          after=\"dismiss\"\n          onDismiss={noop}\n          actions={\n            <Button appearance=\"overlay\" size=\"m\">\n              Подробнее\n            </Button>\n          }\n        />\n      </Div>\n\n      <Div>\n        <Banner\n          mode=\"image\"\n          size=\"m\"\n          title={\n            <span>\n              Баста в Ледовом,\n              <br />\n              большой концерт\n            </span>\n          }\n          subtitle=\"Москва · 12 декабря\"\n          background={\n            <div\n              style={{\n                backgroundColor: '#000',\n                backgroundImage:\n                  'url(https://sun9-53.userapi.com/m-ygfKiLKLkEMAQVTToO2l9LyC6GgqWoGXpw8A/-zm6_XLECTU.jpg)',\n                backgroundPosition: 'right bottom',\n                backgroundSize: 340,\n                backgroundRepeat: 'no-repeat',\n              }}\n            />\n          }\n          after=\"dismiss\"\n          onDismiss={noop}\n          actions={\n            <Button appearance=\"overlay\" size=\"m\">\n              Подробнее\n            </Button>\n          }\n        />\n      </Div>\n    </Group>\n  </Panel>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Creating Skeleton Cells in Group Component\nDESCRIPTION: This snippet showcases the rendering of multiple Skeleton components within a Group, particularly in a SimpleCell structure, indicating loading states for various elements like profile pictures and subtitles. Dependencies include React, along with any UI libraries used to create the Group and SimpleCell components.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Skeleton/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Group>\n  <SimpleCell\n    before={<Skeleton width={36} height={36} borderRadius=\"50%\" />}\n    subtitle={<Skeleton width={90} />}\n  >\n    <Skeleton width=\"120\" />\n  </SimpleCell>\n  <Div>\n    <Skeleton width=\"100%\" />\n    <Skeleton width=\"100%\" />\n    <Skeleton width=\"75%\" />\n  </Div>\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for VKUI CSS Modules (JavaScript)\nDESCRIPTION: This JavaScript code shows how to configure webpack to handle VKUI CSS Modules. It includes settings for transpilation with babel-loader, processing CSS Modules with css-loader, and transforming imports using resolve alias in `webpack.config.js`.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/css_modules.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  //...\n\n  module: {\n    rules: [\n      // Включаем транспиляцию\n      {\n        test: /\\.js$/,\n        include: /node_modules\\/@vkontakte\\/vkui/,\n        use: ['babel-loader'],\n      },\n\n      // Обрабатываем css modules\n      {\n        test: /\\.css$/,\n        include: /node_modules\\/@vkontakte\\/vkui/,\n        use: [{\n          loader: 'css-loader',\n          /* Используем следующие опции в случае использования `css-loader >= 7.0.0` (см. https://github.com/webpack-contrib/css-loader/blob/v7.1.0/CHANGELOG.md) */\n          // options: {\n          //   namedExport: false,\n          //   exportLocalsConvention: 'as-is',\n          // }\n        }],\n      },\n    ],\n  },\n\n  // Трансформируем импорты\n  resolve: {\n    alias: {\n      '@vkontakte/vkui$': '@vkontakte/vkui/dist/cssm',\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuration for Webpack - JavaScript\nDESCRIPTION: This snippet provides the necessary Webpack configuration for using VKUI with CSS Modules. It covers setting up loaders for JavaScript and CSS files, specifically for the VKUI package. Users need to ensure Webpack is configured including the specified rules for loaders.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/css-modules.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  //...\n\n  module: {\n    rules: [\n      // Включаем транспиляцию\n      {\n        test: \\.js$,\n        include: /node_modules\\/@vkontakte\\/vkui/,\n        use: ['babel-loader'],\n      },\n\n      // Обрабатываем css modules\n      {\n        test: \\.css$,\n        include: /node_modules\\/@vkontakte\\/vkui/,\n        use: [\n          {\n            loader: 'css-loader',\n            /* Используем следующие опции в случае использования `css-loader >= 7.0.0` (см. https://github.com/webpack-contrib/css-loader/blob/v7.1.0/CHANGELOG.md) */\n            // options: {\n            //   namedExport: false,\n            //   exportLocalsConvention: 'as-is',\n            // }\n          },\n        ],\n      },\n    ],\n  },\n\n  // Трансформируем импорты\n  resolve: {\n    alias: {\n      '@vkontakte/vkui$': '@vkontakte/vkui/dist/cssm',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Gradients for VKUI Banners in JSX\nDESCRIPTION: Defines two custom gradient styles for use in Banner components. The musicGradient creates a colorful blend suitable for music-related content, while warningGradient creates an orange gradient for warning messages.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Banner/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst musicGradient =\n  'linear-gradient(135deg, #ADE6FF 0%, #ABE3FF 1%, #A7DCFF 3%, #A0CFFF 7%, #97BCFF 12%, #8DA4FF 19%, #8285FF 26%, #8B76FF 34%, #9C6AFF 43%, #B05FFF 52%, #C655FF 62%, #DB4CFF 71%, #EE45FF 81%, #FA41FF 91%, #FF3FFF 100%)';\nconst warningGradient = 'linear-gradient(90deg, #ffb73d 0%, #ffa000 100%)';\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonGroupPropsForm Component in React JSX\nDESCRIPTION: This component creates a form for configuring ButtonGroup properties like mode, gap, align, and stretched. It manages its state and provides callbacks for updating the parent component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ButtonGroup/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst ButtonGroupPropsForm = ({\n  caption,\n  defaultProps,\n  onChange,\n  showMode = true,\n  showStretched = true,\n}) => {\n  const [{ mode, gap, align }, setProps] = React.useState(() => defaultProps);\n\n  const handleChange = React.useCallback(\n    (key, value) => {\n      setProps((prevState) => {\n        const newState = { ...prevState, [key]: value };\n        onChange(newState);\n        return newState;\n      });\n    },\n    [onChange],\n  );\n\n  return (\n    <React.Fragment>\n      {showMode && (\n        <FormItem top=\"mode\">\n          <Select\n            value={mode}\n            onChange={(_, newValue) => handleChange('mode', newValue)}\n            options={[\n              { label: 'vertical', value: 'vertical' },\n              { label: 'horizontal', value: 'horizontal' },\n            ]}\n          />\n        </FormItem>\n      )}\n      <FormItem top=\"gap\">\n        <Select\n          value={gap}\n          onChange={(_, newValue) => handleChange('gap', newValue)}\n          options={[\n            { label: 'none', value: 'none' },\n            { label: 'space', value: 'space' },\n            { label: 's', value: 's' },\n            { label: 'm', value: 'm' },\n          ]}\n        />\n      </FormItem>\n      <FormItem top=\"align\">\n        <Select\n          value={align}\n          onChange={(_, newValue) => handleChange('align', newValue)}\n          options={[\n            { label: 'left', value: 'left' },\n            { label: 'center', value: 'center' },\n            { label: 'right', value: 'right' },\n          ]}\n        />\n      </FormItem>\n      {showStretched && (\n        <Checkbox onChange={(e) => handleChange('stretched', e.target.checked)}>stretched</Checkbox>\n      )}\n      {caption && (\n        <FormItem>\n          <Footnote>({caption})</Footnote>\n        </FormItem>\n      )}\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Detecting Platform with usePlatform Hook\nDESCRIPTION: A hook that returns the current platform (Android or iOS) for conditional rendering or platform-specific logic in VKUI applications\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/helpers.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePlatform, Platform } from '@vkontakte/vkui';\n\nconst MyComponent = () => {\n  const platform = usePlatform(); // android или ios\n  return '...';\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Navigation Direction Hook in React Component\nDESCRIPTION: Uses useNavDirection() to determine navigation transition type and simulate data loading based on transition direction\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/View/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Content = () => {\n  const direction = useNavDirection();\n\n  const [spinner, setSpinner] = useState(null);\n\n  React.useEffect(\n    function simulateDataLoadingWhenMovingForwards() {\n      let timerId = null;\n      const loadData = () => {\n        setSpinner(<Spinner size=\"xl\" style={{ margin: '20px 0' }} />);\n        timerId = setTimeout(() => setSpinner(null), 1000);\n      };\n\n      if (direction !== 'backwards') {\n        loadData();\n      }\n\n      return () => clearTimeout(timerId);\n    },\n    [direction],\n  );\n\n  return (\n    <Div>\n      <Headline level=\"1\" style={{ marginBottom: 16 }}>\n        Направление перехода:{' '}\n        {direction === 'forwards'\n          ? 'вперёд'\n          : direction === 'backwards'\n            ? 'назад'\n            : 'не определено'}\n      </Headline>\n      {spinner}\n    </Div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using PanelHeaderContent with Avatar and Subtitle in VKUI Panel\nDESCRIPTION: This example demonstrates how to implement PanelHeaderContent within a PanelHeader component. It shows configuration with a back button, an avatar, subtitle text, and a message button in the header. The component supports customizing the right part of the header through ConfigProvider.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/PanelHeaderContent/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const platform = usePlatform();\n  return (\n    <View activePanel=\"brand\">\n      <Panel id=\"brand\">\n        <PanelHeader\n          before={<PanelHeaderBack label=\"Назад\" onClick={noop} />}\n          after={\n            <PanelHeaderButton onClick={noop}>\n              <AdaptiveIconRenderer\n                IconCompact={Icon24MessageOutline}\n                IconRegular={Icon28MessageOutline}\n              />\n            </PanelHeaderButton>\n          }\n        >\n          <PanelHeaderContent\n            subtitle=\"был в сети сегодня, в 18:46\"\n            before={<Avatar size={36} src={getAvatarUrl('user_va')} />}\n          >\n            Влад Анесов\n          </PanelHeaderContent>\n        </PanelHeader>\n      </Panel>\n    </View>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Jest Resolver Workaround for VKUI\nDESCRIPTION: This JavaScript code provides a workaround for Jest versions <= 29 that don't properly handle the \"exports\" field in package.json. It modifies the Jest resolver to use the \"module\" field as the \"main\" field for VKUI, allowing Jest to correctly resolve VKUI modules.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DEPENDENCIES_WITH_NO_MAIN_FIELD = ['@vkontakte/vkui'];\n\nmodule.exports = (path, options) =>\n  options.defaultResolver(path, {\n    ...options,\n    packageFilter: (pkg) =>\n      DEPENDENCIES_WITH_NO_MAIN_FIELD.includes(pkg.name) ? { ...pkg, main: pkg.module } : pkg,\n  });\n```\n\n----------------------------------------\n\nTITLE: Basic OnboardingTooltip Implementation in JSX\nDESCRIPTION: A simple example showing how to wrap a UI element with an OnboardingTooltip to provide a hint about new functionality.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/OnboardingTooltip/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OnboardingTooltip, Button } from '@vkontakte/vkui';\n\n<OnboardingTooltip description=\"Обновлённый раздел поможет найти друзей\">\n  <Button>Друзья</Button>\n</OnboardingTooltip>;\n```\n\n----------------------------------------\n\nTITLE: Configuration for Vite - JavaScript\nDESCRIPTION: This snippet outlines the Vite configuration necessary for integrating VKUI with CSS Modules. It includes setting up an alias for the VKUI package to point to its CSS Modules version. Users need to ensure Vite is properly set up in their project.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/css-modules.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  resolve: {\n    alias: [{ find: /^@vkontakte\\/vkui$/, replacement: '@vkontakte/vkui/dist/cssm' }],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PanelHeaderContext with Selection in VKUI using React\nDESCRIPTION: This React component demonstrates how to implement a dropdown context menu from a panel header in VKUI. It manages state for the context menu visibility and selected mode, handles toggle and selection actions, and renders a responsive layout with platform-specific adaptations.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/PanelHeaderContext/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [contextOpened, setContextOpened] = React.useState(true);\n  const [mode, setMode] = React.useState('all');\n  const platform = usePlatform();\n\n  const toggleContext = () => {\n    setContextOpened((prev) => !prev);\n  };\n  const select = (e) => {\n    const mode = e.currentTarget.dataset.mode;\n    setMode(mode);\n    requestAnimationFrame(toggleContext);\n  };\n\n  const hasHeader = platform !== 'vkcom';\n\n  return (\n    <SplitLayout center header={hasHeader && <PanelHeader delimiter=\"none\" />}>\n      <SplitCol width=\"100%\" maxWidth=\"560px\" stretchedOnMobile autoSpaced>\n        <View activePanel=\"context2\">\n          <Panel id=\"context2\">\n            <PanelHeader\n              before={<PanelHeaderBack onClick={noop} />}\n              after={\n                <PanelHeaderButton onClick={noop}>\n                  <Icon28AddOutline />\n                </PanelHeaderButton>\n              }\n            >\n              <PanelHeaderContent\n                aside={\n                  <Icon16Dropdown\n                    style={{\n                      transform: `rotate(${contextOpened ? '180deg' : '0'})`,\n                    }}\n                  />\n                }\n                onClick={toggleContext}\n              >\n                Communities\n              </PanelHeaderContent>\n            </PanelHeader>\n            <PanelHeaderContext opened={contextOpened} onClose={toggleContext}>\n              <SimpleCell\n                before={<Icon28UsersOutline />}\n                after={mode === 'all' ? <Icon24Done fill=\"var(--vkui--color_icon_accent)\" /> : null}\n                onClick={select}\n                data-mode=\"all\"\n              >\n                Communities\n              </SimpleCell>\n              <SimpleCell\n                before={<Icon28SettingsOutline />}\n                after={\n                  mode === 'managed' ? <Icon24Done fill=\"var(--vkui--color_icon_accent)\" /> : null\n                }\n                onClick={select}\n                data-mode=\"managed\"\n              >\n                Managed Communities\n              </SimpleCell>\n            </PanelHeaderContext>\n            <Group>\n              <div style={{ height: 300 }} />\n            </Group>\n          </Panel>\n        </View>\n      </SplitCol>\n    </SplitLayout>\n  );\n};\n\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Vitest Configuration Update for VKUI\nDESCRIPTION: This JavaScript code demonstrates how to update the Vitest configuration to resolve issues with VKUI's CommonJS modules. By adding `@vkontakte/vkui` to the `test.server.deps.inline` parameter, Vitest can correctly handle named exports from VKUI.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nexport default defineConfig(({ mode }) => {\n  return {\n    resolve: {},\n    test: { server: { deps: { inline: [/@vkontakte\\/vkui/] } } },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Appearance to ColorScheme Migration (Types)\nDESCRIPTION: This code snippet demonstrates the migration of the `AppearanceType` type to `ColorSchemeType` in VKUI. This change is part of the broader renaming of appearance-related terms to color scheme.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- const appearance: ApperanceType = Appearance.DARK;\n+ const colorScheme: ColorSchemeType = ColorScheme.DARK;\n```\n\n----------------------------------------\n\nTITLE: Removing Default CSS Import for Themes - JavaScript\nDESCRIPTION: This snippet shows how to remove the default CSS import for the VKUI framework and replace it with theme styles for CSS Modules. The required context includes the removal of `@vkontakte/vkui/dist/vkui.css` and the addition of theme styles from `themes.css`.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/css-modules.mdx#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import \"@vkontakte/vkui/dist/vkui.css\";\n+ import \"@vkontakte/vkui/dist/cssm/styles/themes.css\";\n```\n\n----------------------------------------\n\nTITLE: Creating an FAQ Accordion with Custom Icons for VK Combo in React JSX\nDESCRIPTION: This snippet creates an uncontrolled Accordion component for VK Combo FAQ items with custom expand and collapse icons. It maps through an array of data to generate multiple accordion items with consistent styling.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Accordion/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst AccordionCombo = () => {\n  const data = [\n    {\n      id: 1,\n      title: 'Как оформить подписку?',\n      detail:\n        'Зарегистрируйтесь на сайте vkcombo.ru и привяжите карту. Когда оплатите подписку VK Combo, в личном кабинете станут доступны все скидки и бонусы.',\n    },\n    {\n      id: 2,\n      title: 'Что такое VK Combo?',\n      detail:\n        'VK Combo — это подписка, которая позволяет слушать VK Музыку без рекламы, а также смотреть кино онлайн и  получать скидки на товары и услуги партнёров: образование, игры в облаке и многое другое.',\n    },\n    {\n      id: 3,\n      title: 'Остались вопросы?',\n      detail:\n        'Чтобы задать вопрос, заполните форму обратной связи в личном кабинете VK Combo или напишите нам на почту combo@vk.com.',\n    },\n  ];\n\n  return data.map(({ id, title, detail }) => (\n    <Accordion key={id}>\n      <Accordion.Summary ExpandIcon={Icon24AddOutline} CollapseIcon={Icon24MinusOutline}>\n        {title}\n      </Accordion.Summary>\n      <Accordion.Content>\n        <Div style={infoStyle}>{detail}</Div>\n      </Accordion.Content>\n    </Accordion>\n  ));\n};\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider Appearance to ColorScheme Migration\nDESCRIPTION: This code snippet demonstrates the migration of the `appearance` property to `colorScheme` within the `ConfigProvider` and `ConfigProviderProps`. This change ensures consistency with the new naming convention for theme-related properties.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n<ConfigProvider\n  platform=\"vkcom\"\n- appearance=\"light\"\n+ colorScheme=\"light\"\n>\n  <AdaptivityProvider viewWidth={ViewWidth.DESKTOP} hasPointer>\n    <Div>Content</Div>\n  </AdaptivityProvider>\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Select with aria-label\nDESCRIPTION: This example shows using the `aria-label` attribute directly on the Select component to provide an accessible name for screen readers. This is a fallback when other labeling options are not feasible.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Select/Readme.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n\"<Select aria-label=\\\"Администратор\\\" placeholder=\\\"Не выбран\\\" options={users} />\"\n```\n\n----------------------------------------\n\nTITLE: CSS стили для адаптивного компонента с использованием viewWidth\nDESCRIPTION: CSS модуль, демонстрирующий использование кастомных медиа-запросов для создания адаптивных стилей в зависимости от ширины вьюпорта. Включает стили для разных размеров экрана.\nSOURCE: https://github.com/vkcom/vkui/blob/master/docs/ADAPTIVITY_GUIDE.md#2025-04-20_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.host {\n  color: red;\n}\n\n.viewWidthSmallTabletPlus {\n  color: blue;\n}\n\n@media (--viewWidth-smallTabletPlus) {\n  .viewWidthNone {\n    color: blue;\n  }\n}\n\n.viewWidthSmallTabletMinus {\n  color: green;\n}\n\n@media (--viewWidth-smallTabletMinus) {\n  .viewWidthNone {\n    color: green;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slide Component for Gallery in React JSX\nDESCRIPTION: Defines a reusable Slide component that creates flex-based slides with customizable width and background color. This component is used in gallery examples to create consistent slide elements.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Gallery/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Slide = ({ children, width, backgroundColor }) => (\n  <Flex justify=\"center\" align=\"center\" style={{ fontSize: '72px', width, backgroundColor }}>\n    {children}\n  </Flex>\n);\n```\n\n----------------------------------------\n\nTITLE: ConfigProviderContext Appearance to ColorScheme Migration\nDESCRIPTION: This code snippet illustrates the migration of the `appearance` property to `colorScheme` within the `ConfigProviderContext`. This ensures that the context also reflects the new naming convention for theme-related properties.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n<ConfigProviderContext.Provider value={{\n  ...configContext,\n- appearance: 'light',\n+ colorScheme: 'light'\n}}>\n  {children}\n</ConfigProviderContext.Provider>\n```\n\nLANGUAGE: diff\nCODE:\n```\nconst {\n  ...args,\n- appearance,\n+ colorScheme\n} = useConfigProvider();\n```\n\n----------------------------------------\n\nTITLE: Panel Navigation Interactions\nDESCRIPTION: Implements panel navigation through onClick event handlers that use setActivePanel to switch between different views\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/SimpleCell/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nonClick={() => setActivePanel('nothing')}\n```\n\n----------------------------------------\n\nTITLE: Styling Circle and Container\nDESCRIPTION: These styles define the appearance and layout of the draggable circle and its container. `circleStyle` sets the circle's size, color, border-radius, absolute positioning, and prevents default touch actions. `containerStyle` defines the container's height, border, and relative positioning.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Touch/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst circleStyle = {\n  width: 40,\n  height: 40,\n  borderRadius: '50%',\n  background: 'var(--vkui--color_background_accent)',\n  position: 'absolute',\n  left: '50%',\n  top: '50%',\n  marginLeft: -20,\n  marginTop: -20,\n  touchAction: 'none',\n};\n\nconst containerStyle = {\n  height: 200,\n  border: '8px solid var(--vkui--color_icon_secondary)',\n  position: 'relative',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Group.ExpandedContent in React\nDESCRIPTION: This snippet demonstrates the usage of Group.ExpandedContent to compensate for Group's internal padding. It shows how to use it with HorizontalScroll to create a scrollable list of recent friends.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Group/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst recentFriends = getRandomUsers(20);\n\n<Group header={<Header size=\"s\">Недавние</Header>}>\n  <Header>HorizontalScroll не учитывает отступы Group по горизонтали</Header>\n\n  <Group.ExpandedContent direction=\"inline\">\n    <HorizontalScroll showArrows>\n      {recentFriends.map((item) => {\n        return (\n          <HorizontalCell onClick={() => {}} key={item.id} header={item.first_name}>\n            <Avatar size={56} src={item.photo_200} />\n          </HorizontalCell>\n        );\n      })}\n    </HorizontalScroll>\n  </Group.ExpandedContent>\n\n  <Header>Здесь контент учитывает отступы Group по горизонтали</Header>\n  <HorizontalScroll showArrows>\n    {recentFriends.map((item) => {\n      return (\n        <HorizontalCell onClick={() => {}} key={item.id} header={item.first_name}>\n          <Avatar size={56} src={item.photo_200} />\n        </HorizontalCell>\n      );\n    })}\n  </HorizontalScroll>\n</Group>;\n```\n\n----------------------------------------\n\nTITLE: ActionSheet Header/Text to Title/Description Migration\nDESCRIPTION: This code demonstrates the migration of the `header` and `text` properties to `title` and `description` respectively in the `ActionSheet` component.  This improves semantic clarity and consistency across components.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n<ActionSheet\n  onClose={() => {}}\n- header=\"Вы действительно хотите удалить это видео из Ваших видео?\"\n+ title=\"Вы действительно хотите удалить это видео из Ваших видео?\"\n- text=\"Данное действие реально удалит видео, подумайте!\"\n+ description=\"Данное действие реально удалит видео, подумайте!\"\n>\n  <ActionSheetItem mode=\"destructive\">Удалить видео</ActionSheetItem>\n</ActionSheet>\n```\n\n----------------------------------------\n\nTITLE: useAppearance to useColorScheme Migration\nDESCRIPTION: This code snippet showcases the renaming of the `useAppearance` hook to `useColorScheme`. This change is consistent with the overall migration from \"Appearance\" to \"ColorScheme\" for theme-related functionality.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- const appearance = useAppearance();\n+ const colorScheme = useColorScheme();\n```\n\n----------------------------------------\n\nTITLE: Removing components.css Import (diff)\nDESCRIPTION: This code snippet shows how to remove the `components.css` import when using custom themes with VKUI. It ensures proper loading of custom theme styles when integrating with CSS Modules.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/css_modules.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import '@vkontakte/vkui/dist/components.css';\nimport '@vkontakte/vkui-tokens/themes/vkCom/cssVars/declarations/onlyVariables.css';\nimport '@vkontakte/vkui-tokens/themes/vkComDark/cssVars/declarations/onlyVariablesLocal.css';\n\n```\n\n----------------------------------------\n\nTITLE: Using Group Subcomponents in React\nDESCRIPTION: This snippet shows how to use Group subcomponents like Group.Container, Group.Header, and Group.Description. It demonstrates the structure for creating a group with a header, content, and description.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Group/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Group.Container>\n  <Group.Header>\n    <Header>Адреса</Header>\n  </Group.Header>\n  <CellButton onClick={noop}>Добавить домашний адрес</CellButton>\n  <CellButton onClick={noop}>Добавить рабочий адрес</CellButton>\n  <Group.Description>\n    Для использования в мини-приложениях, Delivery Club, VK Taxi и других сервисах ВКонтакте.\n    Эти адреса видны только Вам.\n  </Group.Description>\n</Group.Container>\n```\n\n----------------------------------------\n\nTITLE: Updating Button Appearance in React\nDESCRIPTION: This snippet updates the Button component's appearance to use mode='secondary' when appearance='neutral'. It showcases a migration example demonstrating the changed props.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n<Button\n    appearance=\"neutral\"\n  + mode=\"secondary\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Select with aria-labelledby\nDESCRIPTION: This example shows how to use the Select component with the `aria-labelledby` attribute.  A `span` element provides the textual description, and its `id` is referenced by `aria-labelledby` on the Select component. This provides an accessible label for screen readers.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Select/Readme.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n\"<span id=\\\"select-label-id\\\">Администратор</span>\\n<Select\\n  aria-labelledby=\\\"select-label-id\\\"\\n  placeholder=\\\"Не выбран\\\"\\n  options={users}\\n/>\"\n```\n\n----------------------------------------\n\nTITLE: AppearanceProvider to ColorSchemeProvider Migration\nDESCRIPTION: This code snippet illustrates the migration of `AppearanceProvider` and `AppearanceProviderProps` to `ColorSchemeProvider` and `ColorSchemeProviderProps` respectively. This renaming aligns with the shift from using \"Appearance\" to \"ColorScheme\" for theme-related contexts.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- const props: AppearanceProviderProps = {\n+ const props: ColorSchemeProviderProps = {\n  value: 'dark'\n}\n```\n\nLANGUAGE: diff\nCODE:\n```\n- <AppearanceProvider value={colorScheme}>\n+ <ColorSchemeProvider value={colorScheme}>\n  <AdaptivityProvider sizeY=\"regular\">\n    <Div style={{ padding: 10 }}>\n      <Textarea id=\"textarea\" />\n    </Div>\n  </AdaptivityProvider>\n- </AppearanceProvider>\n+ </ColorSchemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Displaying Checkbox States with Flex Layout in VKUI\nDESCRIPTION: Example showing different states of the Checkbox component arranged in a Flex container. Demonstrates default checked, unchecked, indeterminate, and default indeterminate states.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Checkbox/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"2xl\" margin=\"auto\">\n  <Checkbox defaultChecked />\n  <Checkbox />\n  <Checkbox defaultChecked />\n  <Checkbox indeterminate />\n  <Checkbox defaultIndeterminate />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Changing CardGrid Property from spaced to padding\nDESCRIPTION: This code snippet reflects the migration of the CardGrid component, replacing the 'spaced' property with 'padding'. It maintains styling consistency while updating parameter names.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n<CardGrid\n  size=\"s\"\n- spaced\n+ padding\n>\n  <Card>\n    <div style={{ paddingBottom: '66%' }} />\n  </Card>\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Color Scheme Provider for Component-Level Theming\nDESCRIPTION: Demonstrates using ColorSchemeProvider to override color scheme for specific components\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/platforms-and-themes.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorSchemeProvider value=\"dark\">\n  <Snackbar action=\"Поделиться\">Поделиться</Snackbar>\n</ColorSchemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Alert Header/Text to Title/Description Migration\nDESCRIPTION: This code demonstrates the migration of the `header` and `text` properties to `title` and `description` respectively in the `Alert` component. This change provides clearer naming for the properties.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n<Alert\n- header=\"Подтвердите действие\"\n+ title=\"Подтвердите действие\"\n- text=\"Вы уверены, что хотите лишить пользователя права на модерацию контента?\"\n+ description=\"Вы уверены, что хотите лишить пользователя права на модерацию контента?\"\n  actionsAlign=\"left\"\n  actionsLayout=\"horizontal\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Select with FormItem\nDESCRIPTION: This example demonstrates using the Select component within a FormItem component. The `top` prop of FormItem serves as the label, and `htmlFor` connects the label to the Select component. This ensures proper association between the label and the Select for accessibility purposes, following FormItem accessibility guidelines.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Select/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"<FormItem top=\\\"Администратор\\\" htmlFor=\\\"select-id\\\">\\n  <Select id=\\\"select-id\\\" placeholder=\\\"Не выбран\\\" options={users} />\\n</FormItem>\"\n```\n\n----------------------------------------\n\nTITLE: Migrating subhead to overTitle in CellButton Component\nDESCRIPTION: This snippet demonstrates the change from 'subhead' to 'overTitle' in the CellButton component, aligning it with the updated naming convention used across components.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n<CellButton\n    onClick={() => {}}\n- subhead=\"Subhead\"\n+ overTitle=\"Subhead\"\n    indicator=\"При использовании\"\n  >\n    Геолокация\n  </CellButton>\n```\n\n----------------------------------------\n\nTITLE: Installing VKUI using npm, yarn, or pnpm\nDESCRIPTION: This snippet demonstrates how to install the VKUI library using either npm, yarn, or pnpm package managers. Choose the command that corresponds to your preferred package manager.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/quick-start.mdx#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"# npm\nnpm i --save @vkontakte/vkui\n# yarn\nyarn add @vkontakte/vkui\n# or pnpm\npnpm add @vkontakte/vkui\"\n```\n\n----------------------------------------\n\nTITLE: Updating CardScroll Property from noSpaces to padding\nDESCRIPTION: The migration snippet for CardScroll demonstrates the replacement of 'noSpaces' with 'padding', ensuring alignment with updated prop naming conventions.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n<CardScroll\n  size=\"s\"\n- noSpaces\n+ padding={false}\n>\n  <Card>\n    <div style={{ paddingBottom: '66%' }} />\n  </Card>\n</CardScroll>\n```\n\n----------------------------------------\n\nTITLE: Popper with Virtual Element Positioning in React\nDESCRIPTION: This example shows how to use Popper with a virtual element defined by coordinates instead of a DOM reference. It implements click positioning using DOMRect.fromRect to create a virtual element at the click location.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Popper/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [virtualElement, setVirtualElement] = React.useState(() =>\n  DOMRect.fromRect({\n    x: -200,\n    y: -200,\n    width: 10,\n    height: 10,\n  }),\n);\n\nconst handleClick = (event) => {\n  setVirtualElement(({ width, height }) =>\n    DOMRect.fromRect({\n      x: event.clientX,\n      y: event.clientY,\n      width,\n      height,\n    }),\n  );\n};\n\nreturn (\n  <div style={{ position: 'relative', width: '100vw', height: '100vh' }} onClick={handleClick}>\n    <Div>Нажми в любое место в этом окне</Div>\n    <Popper\n      arrow\n      arrowProps={{ iconStyle: { color: 'green' } }}\n      placement=\"bottom\"\n      usePortal={false}\n      style={{ padding: '9px 12px', backgroundColor: 'green', color: '#fff' }}\n      targetRef={{\n        getBoundingClientRect() {\n          return virtualElement;\n        },\n      }}\n    >\n      Привет\n    </Popper>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Changing expandable to chevron in CellButton Component\nDESCRIPTION: This snippet updates the CellButton component, reflecting the change in property name from 'expandable' to 'chevron'. This change is part of the migration strategy.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n<CellButton\n    onClick={() => {}}\n- expandable=\"auto\"\n+ chevron=\"auto\"\n    indicator=\"При использовании\"\n  >\n    Геолокация\n  </CellButton>\n```\n\n----------------------------------------\n\nTITLE: Removing HorizontalScroll `arrowSize=\"m\"` and `arrowSize=\"l\"` prop in React\nDESCRIPTION: The `arrowSize=\"m\"` and `arrowSize=\"l\"` values for `HorizontalScroll` has been removed and should be replaced with `arrowSize=\"s\"` and `arrowSize=\"m\"` respectively.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n\"- <HorizontalScroll arrowSize=\\\"m\\\">\n+ <HorizontalScroll arrowSize=\\\"s\\\">\n\n- <HorizontalScroll arrowSize=\\\"l\\\">\n+ <HorizontalScroll arrowSize=\\\"m\\\">\"\n```\n\n----------------------------------------\n\nTITLE: Updating Header `size` prop in React\nDESCRIPTION: The `size` prop of the `Header` component has been changed from `'regular' | 'large'` to `'m' | 'l'`. This snippet shows the required change in the code.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n\"<Header\n  mode=\\\"primary\\\"\n- size=\\\"large\\\"\n+ size=\\\"l\\\"\n>\n  Большой заголовок\n</Header>\"\n```\n\n----------------------------------------\n\nTITLE: Basic Popper Implementation with Button Target in React\nDESCRIPTION: This snippet demonstrates how to implement a basic Popper component that positions itself relative to a button element. It uses useState to toggle visibility and useRef to create a reference to the target button element.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Popper/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [shown, setShown] = React.useState(false);\nconst buttonRef = React.useRef(null);\n\nreturn (\n  <React.Fragment>\n    <Button getRootRef={buttonRef} onClick={() => setShown(!shown)} style={{ margin: 50 }}>\n      {shown ? 'Закрыть' : 'Открыть'}\n    </Button>\n    {shown && (\n      <Popper\n        usePortal={false}\n        style={{ padding: '9px 12px', backgroundColor: 'green', color: '#fff' }}\n        targetRef={buttonRef}\n      >\n        Привет\n      </Popper>\n    )}\n  </React.Fragment>\n);\n```\n\n----------------------------------------\n\nTITLE: Changing mode to appearance in CellButton Component\nDESCRIPTION: This migration snippet illustrates how the CellButton's property 'mode' has been replaced with 'appearance', enabling clearer theme setting.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n<CellButton\n- mode=\"danger\"\n+ appearance=\"negative\"\n  >\n    Создать что-нибудь\n  </CellButton>\n\n<CellButton\n- mode=\"primary\"\n+ appearance=\"accent\"\n  >\n    Создать что-нибудь\n  </CellButton>\n```\n\n----------------------------------------\n\nTITLE: Passing `settlingHeight` / `dynamicContentHeight` as props in ModalRoot React\nDESCRIPTION: Instead of passing `settlingHeight` or `dynamicContentHeight` directly, pass them as props.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n\"- const SomeWrapper = ({ id }) => (\\n+ const SomeWrapper = (props) => (\\n  <ModalPage\\n-   id={id}\\n+   {...props}\\n  />\\n);\\n\\n<ModalRoot activeModal=\\\"m\\\">\\n  <SomeWrapper\\n    id=\\\"m\\\"\\n    settlingHeight={100} // или dynamicContentHeight\\n  />\\n</ModalRoot>\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Header `aside` prop to `after` in React\nDESCRIPTION: The `aside` prop of the `Header` component has been renamed to `after`. This snippet shows the required change in the code.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n\"<Header\n  mode=\\\"primary\\\"\n  subtitle=\\\"SOHN — Conrad\\\"\n  subtitleComponent=\\\"h3\\\"\n- aside={\n+ after={<Link>Показать все</Link>}\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Navigation Buttons Component\nDESCRIPTION: Renders dynamic navigation buttons for switching between Views and Panels\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/View/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction NavigationButtons({ activePanel, activeView, setActiveView, setActivePanel }) {\n  return (\n    <>\n      <Spacing size={12} />\n      {activeView === 'view1' ? (\n        <>\n          <CellButton disabled>Перейти на View 1</CellButton>\n          <CellButton onClick={() => setActiveView('view2')}>Перейти на View 2</CellButton>\n          <CellButton onClick={() => setActiveView('swipeView')}>\n            Перейти на пример с iOS Swipe Back\n          </CellButton>\n        </>\n      ) : activeView === 'view2' ? (\n        // Additional view navigation logic\n      ) : (\n        // Swipe view navigation logic\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ContentCard Property Updates\nDESCRIPTION: In the ContentCard component, several properties have been renamed for clarity. This snippet reflects those changes in a migration example.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n<ContentCard\n- subtitle=\"VKUI\"\n+ overTitle=\"VKUI\"\n- header=\"ContentCard example\"\n+ title=\"ContentCard example\"\n- headerComponent=\"h4\"\n+ titleComponent=\"h4\"\n  caption=\"VKUI Styleguide > Blocks > ContentCard\"\n- text=\"Badlands is the story about dreams and cruel reality...\"\n+ description=\"Badlands is the story about dreams and cruel reality...\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Moving `settlingHeight` and `dynamicContentHeight` in ModalRoot in React\nDESCRIPTION: The `settlingHeight` and `dynamicContentHeight` props no longer need to be passed to wrappers within `ModalRoot`, they can now be set directly on the `ModalPage`.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n\"const SomeWrapper = ({ id }) => (\n  <ModalPage\n    id={id}\n+   settlingHeight={100} // или dynamicContentHeight\n  />\n);\n\n<ModalRoot activeModal=\\\"m\\\">\n  <SomeWrapper\n    id=\\\"m\\\"\n-   settlingHeight={100} // или dynamicContentHeight\n  />\n</ModalRoot>\"\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Storybook in JavaScript\nDESCRIPTION: This snippet imports necessary components from the Storybook library and the UnstyledTextField component. It initializes metadata for documentation and visualization in the Storybook UI.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/UnstyledTextField/UnstyledTextField.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Title, ArgTypes, Description } from '@storybook/blocks';\nimport { UnstyledTextField } from './UnstyledTextField';\n\n<Meta title=\"Service/UnstyledTextField\" />\n\n<Title>UnstyledTextField</Title>\n\n<Description of={UnstyledTextField} />\n\n<ArgTypes of={UnstyledTextField} />\n```\n\n----------------------------------------\n\nTITLE: Using withPlatform HOC in VKUI\nDESCRIPTION: This snippet illustrates how to use the `withPlatform` higher-order component (HOC) from `@vkontakte/vkui` to inject the platform type as a prop into a class component. The `platform` prop will be either 'android' or 'ios'.  Requires `@vkontakte/vkui` and React.Component as dependencies.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/utils.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withPlatform, Platform } from '@vkontakte/vkui';\n\nclass MyComponent extends React.Component {\n  render() {\n    const { platform } = this.props; // android или ios\n    return '...';\n  }\n}\n\nwithPlatform(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Migrating Properties in CustomScrollView\nDESCRIPTION: This snippet shows how to update the CustomScrollView component by replacing the 'boxRef' with 'getRootRef'. It also removes unnecessary properties like 'windowResize' and 'autoHideScrollbar'.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n<CustomScrollView\n    className=\"className\"\n- boxRef={ref}\n+ getRootRef={ref}\n    enableHorizontalScroll\n  >\n  ...\n</CustomScrollView>\n```\n\n----------------------------------------\n\nTITLE: Renaming PanelHeaderContent `status` prop to `subtitle` in React\nDESCRIPTION: The `status` prop of the `PanelHeaderContent` component has been renamed to `subtitle`. This snippet demonstrates the migration.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n\"<PanelHeaderContent\n- status=\\\"был в сети сегодня, в 18:46\\\"\n+ subtitle=\\\"был в сети сегодня, в 18:46\\\"\n  before={<Avatar size={36} src={'user_va'} />}\n>\n  Влад Анесов\n</PanelHeaderContent>\"\n```\n\n----------------------------------------\n\nTITLE: Renaming MiniInfoCell `expandable` prop to `chevron` in React\nDESCRIPTION: The `expandable` prop of the `MiniInfoCell` component has been renamed to `chevron`. This snippet demonstrates the migration.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n\"<MiniInfoCell\n  before={<Icon20WorkOutline />}\n  mode=\\\"add\\\"\n  onClick={() => console.log('Указать место учёбы')}\n  textWrap=\\\"short\\\"\n- expandable\n+ chevron\n>\n  Укажите место учёбы\n</MiniInfoCell>\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Avatar Color with calcInitialsAvatarColor in VKUI\nDESCRIPTION: This snippet demonstrates how to use the `calcInitialsAvatarColor` function from `@vkontakte/vkui` to determine the color for an avatar based on an object's identifier (in this case, `conversation.peer.id`).  The color is used for the `gradientColor` prop of the `Avatar` component. Requires `@vkontakte/vkui` as a dependency.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/utils.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { calcInitialsAvatarColor } from '@vkontakte/vkui';\n\nconst conversation = { peer: { id: 480 }, name: 'Библиотека компонентов VKUI' };\n\n<Avatar size={48} gradientColor={calcInitialsAvatarColor(conversation.peer.id)}>\n  {conversation.name[0]}\n</Avatar>;\n```\n\n----------------------------------------\n\nTITLE: Removing Properties from CustomScrollView\nDESCRIPTION: This snippet demonstrates the removal of properties 'windowResize' and 'autoHideScrollbar' from CustomScrollView, aligning with the updated usage criteria for this component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n<CustomScrollView\n    className=\"className\"\n- windowResize\n- autoHideScrollbar\n- autoHideScrollbarDelay={1000}\n    enableHorizontalScroll\n  >\n  ...\n</CustomScrollView>\n```\n\n----------------------------------------\n\nTITLE: Updating PanelSpinner `size` prop in React\nDESCRIPTION: The `size` prop of the `PanelSpinner` component has been changed from `'small' | 'regular' | 'medium' | 'large'` to `'s' | 'm' | 'l' | 'xl'`. This snippet shows the required change in the code.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n\"- <PanelSpinner size=\\\"large\\\" />\n+ <PanelSpinner size=\\\"xl\\\" />\n\n- <PanelSpinner size=\\\"medium\\\" />\n+ <PanelSpinner size=\\\"l\\\" />\n\n- <PanelSpinner size=\\\"regular\\\" />\n+ <PanelSpinner size=\\\"m\\\" />\n\n- <PanelSpinner size=\\\"small\\\" />\n+ <PanelSpinner size=\\\"s\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Renaming ModalCard props in React\nDESCRIPTION: The `header`, `subheader`, `headerComponent`, and `subheaderComponent` props of the `ModalCard` component have been renamed to `title`, `description`, `titleComponent`, and `descriptionComponent` respectively. This snippet demonstrates the changes.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n\"<ModalCard\n  dismissButtonMode=\\\"inside\\\"\n  dismissLabel=\\\"Закрыть\\\"\n- header=\\\"Десктопная и планшетная версии с крестиком внутри\\\"\n+ title=\\\"Десктопная и планшетная версии с крестиком внутри\\\"\n- headerComponent=\\\"h1\\\"\n+ titleComponent=\\\"h1\\\"\n- subheader=\\\"Сверху будет безопасный отступ до иконки\\\"\n+ description=\\\"Сверху будет безопасный отступ до иконки\\\"\n- subheaderComponent=\\\"span\\\"\n+ descriptionComponent=\\\"span\\\"\n  actions={\n    <React.Fragment>\n      <Button size=\\\"l\\\" mode=\\\"primary\\\" stretched>\n        Некая кнопка\n      </Button>\n    </React.Fragment>\n  }\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Global Classes Usage Example in VKUI Components\nDESCRIPTION: Example showing the implementation of global classes in the VKUI library using Cell and Avatar components. Demonstrates how to properly scope global classes within CSS modules.\nSOURCE: https://github.com/vkcom/vkui/blob/master/docs/CSS_GUIDE.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Cell.tsx\n<div className={classNames(styles.host, 'vkuiInternalCell')}>{before}</div>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* Avatar.module.css */\n:global(.vkuiInternalCell) .host {\n  margin-inline-end: 8px;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n/* Cell.module.css */\n.host :global(.vkuiIcon) {\n  margin-inline-end: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Flex Component Gap Property Migration\nDESCRIPTION: This snippet updates the Flex component's gap property to change the order of row and column values. This adjustment enhances layout control in the new version.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n<Flex\n  direction=\"column\"\n- gap={[20, 10]}\n+ gap={[10, 20]}\n  align=\"center\"\n>\n  <div/>\n  <div/>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Renaming Placeholder `header` prop to `title` in React\nDESCRIPTION: The `header` prop of the `Placeholder` component has been renamed to `title`. This snippet demonstrates the migration.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n\"<Placeholder\n  icon={<Icon56UsersOutline />}\n- header={<Button size=\\\"m\\\">Подключить сообщества</Button>}\n+ title={<Button size=\\\"m\\\">Подключить сообщества</Button>}\n>\n  Подключите сообщества, от которых Вы хотите получать уведомления\n</Placeholder>\"\n```\n\n----------------------------------------\n\nTITLE: Counter Mode Value Changes\nDESCRIPTION: This migration table shows how different mode values for the Counter component have changed between version 6 and version 7, providing clarity on necessary updates.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| **v6**             | **v7**                                   |\n| ------------------ | ---------------------------------------- |\n| `mode=\"inherit\"`   | _без изменений_                          |\n| `mode=\"primary\"`   | `mode=\"primary\" appearance=\"accent\"`     |\n| `mode=\"secondary\"` | `mode=\"primary\" appearance=\"neutral\"`    |\n| `mode=\"prominent\"` | `mode=\"primary\" appearance=\"accent-red\"` |\n| `mode=\"contrast\"`  | `mode=\"contrast\" appearance=\"accent\"`    |\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Cartesian Addon in TypeScript\nDESCRIPTION: Demonstrates how to set up the Storybook Cartesian addon by importing the withCartesian decorator and configuring story metadata. Enables generation of multiple component states by applying prop combinations.\nSOURCE: https://github.com/vkcom/vkui/blob/master/tools/storybook-addon-cartesian/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { Story, Meta } from '@storybook/react';\nimport { withCartesian } from '@project-tools/storybook-addon-cartesian';\nimport { Component, ComponentProps } from './Component.path';\n\nexport default {\n  title: 'Blocks/Placeholder',\n  component: Component,\n  decorators: [withCartesian],\n} as Meta<Component>;\n\nconst Template: Story<ComponentProps> = (args) => <Component {...args} />;\n\nexport const Playground = Template.bind({});\nPlayground.args = {};\n```\n\n----------------------------------------\n\nTITLE: Removing Header `mode` prop in React\nDESCRIPTION: The `mode` prop of the `Header` component has been removed.  This logic will remove the `mode` property.  The table migration values explain how to refactor the code.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n| **v6**                    | **v7**      |\n| ------------------------- | ----------- |\n| `size=\"l\" mode=\"primary\"` | `size=\"xl\"` |\n| `size=\"m\" mode=\"primary\"` | `size=\"m\"`  |\n| `mode=\"tertiary\"`         | `size=\"m\"`  |\n| `mode=\"secondary\"`        | `size=\"s\"`  |\n```\n\n----------------------------------------\n\nTITLE: Renaming onClose to onDoneButtonClick in Calendar Component\nDESCRIPTION: This snippet demonstrates the migration from onClose to onDoneButtonClick for the Calendar component, which affects event handling in the component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n<Calendar\n- onClose={() => void 0}\n+ onDoneButtonClick={() => void 0}\n/>\n```\n\n----------------------------------------\n\nTITLE: Renaming header to title in FormStatus Component\nDESCRIPTION: This migration snippet for the FormStatus component shows the change from 'header' to 'title', improving naming consistency.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n<FormStatus\n- header=\"Некорректный мобильный номер\"\n+ title=\"Некорректный мобильный номер\"\n  mode=\"error\"\n>\n  Необходимо корректно ввести номер в международном формате\n</FormStatus>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Storybook Components Overview Page\nDESCRIPTION: This code imports necessary Storybook components and a custom ComponentsOverviewPage component, then configures a Meta title and renders the overview page component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/docs/components.overview.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\nimport { ComponentsOverviewPage } from './components-overview/ComponentsOverview';\n\n<Meta title=\"Components overview\" />\n\n<ComponentsOverviewPage />\n```\n\n----------------------------------------\n\nTITLE: Renaming HorizontalCell `header` prop to `title` in React\nDESCRIPTION: The `header` prop of the `HorizontalCell` component has been renamed to `title`. This snippet demonstrates the migration.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n\"<HorizontalCell\n- header=\\\"Header\\\"\n+ title=\\\"Header\\\"\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Renaming subhead to overTitle in Cell Component\nDESCRIPTION: This snippet illustrates the migration of the Cell component, changing 'subhead' to 'overTitle' for better clarity in prop naming.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n<Cell\n    onClick={() => {}}\n- subhead=\"Subhead\"\n+ overTitle=\"Subhead\"\n    indicator=\"При использовании\"\n  >\n    Геолокация\n  </Cell>\n```\n\n----------------------------------------\n\nTITLE: Define ArgTypes for AppRoot component\nDESCRIPTION: Uses the ArgTypes component to automatically generate controls and documentation for the AppRoot component's props. This allows users to interact with and understand the component's API directly within Storybook.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/AppRoot/AppRoot.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of={AppRoot} />\n```\n\n----------------------------------------\n\nTITLE: Configuration for Next.js - JavaScript\nDESCRIPTION: This snippet provides a configuration for using VKUI with CSS Modules in a Next.js application. It shows how to enable transpilation and how to transform imports for VKUI's components. The necessary packages must be installed to utilize this configuration effectively.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/css-modules.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n\n  // Включаем транспиляцию\n  transpilePackages: ['@vkontakte/vkui'],\n\n  // Трансформируем импорты\n  modularizeImports: {\n    '@vkontakte/vkui': {\n      transform: '@vkontakte/vkui/dist/cssm',\n      skipDefaultConversion: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming OnboardingTooltip props in React\nDESCRIPTION: The `text` and `header` props on the `OnboardingTooltip` have been renamed to `description` and `title`.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n\"<OnboardingTooltip\n  placement=\\\"right\\\"\n- header=\\\"Header\\\"\n+ title=\\\"Header\\\"\n- text=\\\"Привет\\\"\n+ description=\\\"Привет\\\"\n>\n  <Button style={{ margin: 20 }}>Наведи</Button>\n</OnboardingTooltip>\"\n```\n\n----------------------------------------\n\nTITLE: Removing topNode Property from FormItem\nDESCRIPTION: This code snippet reflects the removal of the 'topNode' property from FormItem in favor of the 'top' property for better clarity and functionality.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n<FormItem\n- topNode={\n+ top={\n      <FormItem.Top>\n        <FormItem.TopLabel htmlFor=\"about\">Дополнительная информация</FormItem.TopLabel>\n        <FormItem.TopAside>0/100</FormItem.TopAside>\n      </FormItem.Top>\n    }\n  >\n  <Textarea id=\"about\" name=\"about\" />\n</FormItem>\n```\n\n----------------------------------------\n\nTITLE: Set the title of the AppRoot story\nDESCRIPTION: Defines the display title for the Storybook story using the Title component. This title is displayed prominently in the Storybook UI for the AppRoot component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/AppRoot/AppRoot.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Title>AppRoot</Title>\n```\n\n----------------------------------------\n\nTITLE: Removing Default VKUI CSS Import (diff)\nDESCRIPTION: This snippet demonstrates how to remove the default VKUI CSS import and replace it with the CSS Modules theme import. This is the first step in enabling CSS Modules for VKUI, optimizing for smaller application sizes.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/css_modules.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\n- import \"@vkontakte/vkui/dist/vkui.css\";\n+ import \"@vkontakte/vkui/dist/cssm/styles/themes.css\";\n\n```\n\n----------------------------------------\n\nTITLE: Import Storybook components and AppRoot\nDESCRIPTION: Imports necessary components from the @storybook/blocks library (Meta, Title, ArgTypes, Description) and the AppRoot component from a local file. This sets up the environment for defining the component's documentation.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/AppRoot/AppRoot.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Title, ArgTypes, Description } from '@storybook/blocks';\nimport { AppRoot } from './AppRoot';\n```\n\n----------------------------------------\n\nTITLE: Updating FormItem TopLabel Properties\nDESCRIPTION: In the migration for FormItem, the 'multiline' property of the FormItem.TopLabel subcomponent was removed, allowing 'topMultiline' to be set directly on the FormItem.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n<FormItem\n+ topMultiline\n    top={\n      <FormItem.Top>\n  -     <FormItem.TopLabel htmlFor=\"about\" multiline>Дополнительная информация</FormItem.TopLabel>\n  +     <FormItem.TopLabel htmlFor=\"about\">Дополнительная информация</FormItem.TopLabel>\n        <FormItem.TopAside>0/100</FormItem.TopAside>\n      </FormItem.Top>\n    }\n  >\n    <div/>\n</FormItem>\n```\n\n----------------------------------------\n\nTITLE: Removing HorizontalCellShowMore `size=\"l\"` prop in React\nDESCRIPTION: The `size=\"l\"` value for `HorizontalCellShowMore` has been removed and should be replaced with `size=\"m\"`.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n\"- <HorizontalCellShowMore size=\\\"l\\\">\n+ <HorizontalCellShowMore size=\\\"m\\\">\"\n```\n\n----------------------------------------\n\nTITLE: Updating Arrow Sizes in Gallery Component\nDESCRIPTION: This snippet demonstrates how the Gallery component's arrow size values have been modified to streamline their usage.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n- <Gallery arrowSize=\"m\">\n+ <Gallery arrowSize=\"s\">\n- <Gallery arrowSize=\"l\">\n+ <Gallery arrowSize=\"m\">\n```\n\n----------------------------------------\n\nTITLE: Define Storybook metadata for AppRoot\nDESCRIPTION: Sets the title for the Storybook story to \"Service/AppRoot\". This controls how the component is categorized and displayed within the Storybook interface.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/AppRoot/AppRoot.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Service/AppRoot\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring meta-tag for viewport\nDESCRIPTION: This meta tag configuration is crucial for ensuring proper interface display on bezel-less smartphones. It sets the viewport properties for optimal scaling and user experience, disabling user scaling and fitting the viewport to the device's screen.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/quick-start.mdx#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\"<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no, viewport-fit=cover\"\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Refactoring business logic within wrappers in ModalRoot React\nDESCRIPTION: It is best practice to create new `FetchData` const to store the state and side effect.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n\"+ const FetchData = () => {\\n+   const [data, setData] = useState({});\\n+   useEffect(() => {\\n+     fetch('...').then((r) => r.json()).then(setData);\\n+   }, []);\\n+   return <div>{data}</div>;\\n+ };\\n\\nconst SomeWrapper = ({ id, ...restProps }) => {\\n-  const [data, setData] = useState({});\\n-  useEffect(() => {\\n-    fetch('...').then((r) => r.json()).then(setData);\\n-  }, []);\\n\\n+  const { activeModal } = useModalRootContext();\\n  useEffect(function enableSomeEffect() {\\n+    if (id === activeModal) {\\n      /* ... */\\n+    }\\n  }, [id, activeModal];\\n\\n  return (\\n    <ModalPage id={id} {...restProps}>\\n-     <div>{data}</div>\\n+     <FetchData>\\n    </ModalPage>\\n  );\\n};\\n\\n<ModalRoot activeModal=\\\"m\\\">\\n  <SomeWrapper\\n    id=\\\"m\\\"\\n    settlingHeight={100} // или dynamicContentHeight\\n  />\\n</ModalRoot>\"\n```\n\n----------------------------------------\n\nTITLE: Banner Subheader/Text/Header/AsideMode Migration\nDESCRIPTION: This code demonstrates the migration of various properties in the `Banner` component: `subheader` to `subtitle`, `text` to `extraSubtitle`, `header` to `title`, and `asideMode` to `after`. This aims to provide more descriptive and consistent naming for these properties.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n<Banner\n  before={<Avatar size={48} src={'user_lihachyov'} />}\n- header=\"Сегодня день рождения Михаила Лихачёва\"\n+ title=\"Сегодня день рождения Михаила Лихачёва\"\n- subheader=\"Подарите подарок\"\n+ subtitle=\"Подарите подарок\"\n- text=\"Дополнительный текст\"\n+ extraSubtitle=\"Дополнительный текст\"\n- asideMode=\"dismiss\"\n+ after=\"dismiss\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Container Component for ContentBadge Display\nDESCRIPTION: This snippet defines a Container component that wraps ContentBadge components in a Group with specific styling. It provides a consistent layout for displaying the badges with proper spacing and outline.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ContentBadge/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Container = ({ children }) => (\n  <Group\n    style={{\n      display: 'flex',\n      alignItems: 'center',\n      gap: 24,\n      flexWrap: 'wrap',\n      outline: '1px dashed',\n      padding: 24,\n    }}\n  >\n    {children}\n  </Group>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Skeleton in PanelHeader using React\nDESCRIPTION: This snippet renders a Skeleton component within a PanelHeader, providing a loading state with full width. The key functionality is to indicate loading while content is being fetched. Dependencies include React and any related libraries for UI component rendering.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Skeleton/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PanelHeader>\n  <Skeleton width=\"100%\" />\n</PanelHeader>\n```\n\n----------------------------------------\n\nTITLE: Updating Link component for Icon Usage in React\nDESCRIPTION: The `Link` component's icon usage has changed to utilize `before` and `after` props instead of including the icon as a child. CSS styles applied to icons as children have been removed.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n\"<Link\n  href=\\\"#\\\"\n+ after={<Icon12Example />}\n>\n  Текст ссылки\n- <Icon12Example />\n</Link>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Playground Component for ContentBadge\nDESCRIPTION: This snippet creates a Playground component that renders multiple Container components, each containing a Stand component with different sizes. It demonstrates how to showcase various ContentBadge configurations in a structured layout.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ContentBadge/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Playground = () => {\n  return (\n    <div style={{ padding: 16 }}>\n      <Container>\n        <Stand size=\"s\" />\n      </Container>\n\n      <Container>\n        <Stand size=\"m\" />\n      </Container>\n\n      <Container>\n        <Stand size=\"l\" />\n      </Container>\n    </div>\n  );\n};\n\n<Playground />;\n```\n\n----------------------------------------\n\nTITLE: Select with VisuallyHidden Label\nDESCRIPTION: This example demonstrates using the Select component with a VisuallyHidden component wrapping a label. The label is visually hidden but still accessible to screen readers.  The `htmlFor` attribute of the label ensures the association with the Select through the `id`.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Select/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n\"<VisuallyHidden Component=\\\"label\\\" htmlFor=\\\"select-id\\\">Администратор</VisuallyHidden>\\n<Select\\n  id=\\\"select-id\\\"\\n  placeholder=\\\"Не выбран\\\"\\n  options={users}\\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Placeholder subcomponents in React\nDESCRIPTION: The `Header` and `Text` subcomponents of `Placeholder` have been renamed to `Title` and `Description`, respectively.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n\"<Placeholder.Container>\n- <Placeholder.Header>\n+ <Placeholder.Title>\n    Find friends\n-  </Placeholder.Header>\n+  </Placeholder.Title>\n-  <Placeholder.Text>\n+  <Placeholder.Description>\n    The people you add as your friends will be displayed here\n-  </Placeholder.Text>\n+  </Placeholder.Description>\n</Placeholder.Container>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering the Gallery Example Component\nDESCRIPTION: Renders the example component that demonstrates the Gallery functionality. This is a simple self-contained JSX expression that mounts the Example component.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Gallery/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example />;\n```\n\n----------------------------------------\n\nTITLE: Theme Background Styling Example\nDESCRIPTION: Demonstrates setting background color for components across different color schemes\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/platforms-and-themes.mdx#2025-04-20_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Group header={<Header>Настройка тем</Header>}>\n  <SimpleCell before={<Icon20PalleteOutline />}>Системная тема</SimpleCell>\n  <ColorSchemeProvider value=\"dark\">\n    <SimpleCell\n      before={<Icon20MoonOutline />}\n      style={{ backgroundColor: 'var(--vkui--color_background_content)' }}\n    >\n      Тёмная тема\n    </SimpleCell>\n  </ColorSchemeProvider>\n  <ColorSchemeProvider value=\"light\">\n    <SimpleCell\n      before={<Icon20SunOutline />}\n      style={{ backgroundColor: 'var(--vkui--color_background_content)' }}\n    >\n      Светлая тема\n    </SimpleCell>\n  </ColorSchemeProvider>\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Changing expandable to chevron in Cell Component\nDESCRIPTION: This code showcases how the 'expandable' property has been renamed to 'chevron' in the Cell component, which modifies its indication properties.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n<Cell\n    onClick={() => {}}\n- expandable=\"auto\"\n+ chevron=\"auto\"\n    indicator=\"При использовании\"\n  >\n    Геолокация\n  </Cell>\n```\n\n----------------------------------------\n\nTITLE: Implementing ModalOutsideButton with ModalCard in React\nDESCRIPTION: Example of using ModalOutsideButton with an icon inside a ModalCard component. The button includes an aria-label for accessibility and uses the Icon20More component. The button is passed to the outsideButtons property of ModalCard.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ModalOutsideButton/Readme.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ModalCard\n  open\n  outsideButtons={\n    <ModalOutsideButton aria-label=\"Больше\" onClick={() => {}}>\n      <Icon20More />\n    </ModalOutsideButton>\n  }\n>\n  <div style={{ width: '100%', height: 100 }} />\n</ModalCard>\n```\n\n----------------------------------------\n\nTITLE: Modify CSS Import for VKUI Theme Customization\nDESCRIPTION: This code snippet demonstrates how to switch from importing the default VKUI CSS to importing the components CSS. This is necessary when customizing the theme to prevent conflicts with the default themes from `@vkontakte/vkui-tokens`. The `diff` format highlights the change in the import statement.\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/advanced/customize.mdx#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\"- import '@vkontakte/vkui/dist/vkui.css';\\n+ import '@vkontakte/vkui/dist/components.css';\"\n```\n\n----------------------------------------\n\nTITLE: Running VKUI Codemods\nDESCRIPTION: This command executes VKUI codemods to automatically migrate TypeScript files in your project. It helps update components according to the new version requirements, pointing out more complex updates in the console.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @vkontakte/vkui-codemods --help\n```\n\n----------------------------------------\n\nTITLE: Placeholder Subcomponents Composition\nDESCRIPTION: Shows the usage of Placeholder subcomponents to create a more flexible and customizable placeholder with icon, title, description, and actions\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Placeholder/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Placeholder.Container>\n  <Placeholder.Icon>\n    <Icon56UserAddOutline />\n  </Placeholder.Icon>\n  <Placeholder.Title>Find friends</Placeholder.Title>\n  <Placeholder.Description>\n    The people you add as your friends will be displayed here\n  </Placeholder.Description>\n  <Placeholder.Actions>\n    <ButtonGroup mode=\"vertical\" align=\"center\">\n      <Button size=\"m\">Button</Button>\n      <Button size=\"m\" mode=\"tertiary\">\n        Button\n      </Button>\n    </ButtonGroup>\n  </Placeholder.Actions>\n</Placeholder.Container>\n```\n\n----------------------------------------\n\nTITLE: Browser Version Support Configuration\nDESCRIPTION: Minimum browser versions updated to enable modern ECMAScript features without polyfills\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/blog/vkui-v7-release.mdx#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nChromeAndroid >= 63\niOS >= 12\nChrome >= 63\nFirefox >= 55\nEdge >= 79\nOpera >= 50\nSafari >= 12\nSamsung >= 8.2\n```\n\n----------------------------------------\n\nTITLE: Appearance to ColorScheme Migration (Constants)\nDESCRIPTION: This code snippet shows the migration of the `Appearance` constant to `ColorScheme` in VKUI. The `Appearance` constant, which defined the light and dark themes, has been renamed to `ColorScheme` to avoid naming conflicts.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/migration_v7.md#2025-04-20_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- export const Appearance = {\n+ export const ColorScheme = {\n  DARK: 'dark',\n  LIGHT: 'light',\n} as const;\n\n- const apperance = Appearance.DARK\n+ const colorScheme = ColorScheme.DARK\n```\n\n----------------------------------------\n\nTITLE: Popover Examples Playground in React\nDESCRIPTION: This example renders all the Popover examples within a Flex container. It is used to showcase the different Popover configurations.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Popover/Readme.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Playground = () => {\n  return (\n    <Flex margin=\"auto\" direction=\"column\" align=\"start\" gap=\"2xl\">\n      <PopoverWithTriggerHover />\n      <PopoverWithTriggerClick />\n      <PopoverWithTriggerFocus />\n      <PopoverWithAllTriggers />\n      <PopoverWithTriggerManual />\n    </Flex>\n  );\n};\n\n<Playground />;\n\n```\n\n----------------------------------------\n\nTITLE: Installing VK Mini Apps Libraries\nDESCRIPTION: Command to install required VK Bridge libraries using yarn package manager\nSOURCE: https://github.com/vkcom/vkui/blob/master/website/content/overview/integrations/vk-mini-apps.mdx#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @vkontakte/vk-bridge @vkontakte/vk-bridge-react\n```\n\n----------------------------------------\n\nTITLE: Panel Navigation State Management\nDESCRIPTION: Demonstrates state management using React's useState hook to control panel navigation between 'list' and 'nothing' panels\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/SimpleCell/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [activePanel, setActivePanel] = React.useState('list');\n```\n\n----------------------------------------\n\nTITLE: Popover with Focus Trigger in React\nDESCRIPTION: This example illustrates a Popover component triggered by focusing on a button (via Tab or click). It sets the role to 'dialog' and provides aria-describedby and aria-label for accessibility.  The content contains a form with input fields and a submit button that closes the Popover.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/Popover/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst PopoverWithTriggerFocus = () => {\n  return (\n    <Popover\n      trigger=\"focus\"\n      role=\"dialog\"\n      aria-describedby=\"dialog-2\"\n      aria-label=\"Форма отправки сообщения\"\n      content={({ onClose }) => (\n        <FormLayoutGroup>\n          <FormItem top=\"Имя\">\n            <Input />\n          </FormItem>\n          <FormItem top=\"Фамилия\">\n            <Input />\n          </FormItem>\n          <FormItem top=\"Соглашение\">\n            <Checkbox name=\"agreement\">Согласен</Checkbox>\n          </FormItem>\n          <FormItem>\n            <Button onClick={onClose}>Отправить</Button>\n          </FormItem>\n        </FormLayoutGroup>\n      )}\n    >\n      <Button id=\"dialog-2\" mode=\"outline\">\n        Сфокусируйся на меня через Tab (или клик)\n      </Button>\n    </Popover>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: CSS Modifier Class Example in VKUI\nDESCRIPTION: Example showing the recommended naming pattern for CSS modifiers, where each modifier has a prefix matching its parent element name for better organization and readability.\nSOURCE: https://github.com/vkcom/vkui/blob/master/docs/CSS_GUIDE.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.container {\n}\n.containerPrimary {\n}\n.containerSecondary {\n}\n\n.text {\n}\n.textWithShadow {\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering App Component\nDESCRIPTION: This snippet renders the `<App />` component to the DOM. This assumes that App component is already defined.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/UsersStack/Readme.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<App />;\n```\n\n----------------------------------------\n\nTITLE: Installing VK Bridge and React Dependencies for VK Mini Apps\nDESCRIPTION: This snippet demonstrates how to install the necessary packages for integrating VKUI with VK Mini Apps using the Yarn package manager. It includes libraries `@vkontakte/vk-bridge` and `@vkontakte/vk-bridge-react` which are essential for VK Mini Apps development.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/integrations_vk_mini_apps.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# для примера используется пакетный менеджер yarn\nyarn add @vkontakte/vk-bridge @vkontakte/vk-bridge-react\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for VKUI CSS Modules (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to configure Next.js to transpile and transform imports for VKUI to use CSS Modules. It involves setting up `transpilePackages` and `modularizeImports` within `next.config.js` to correctly handle VKUI's CSS Modules.\nSOURCE: https://github.com/vkcom/vkui/blob/master/styleguide/pages/css_modules.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\n\nmodule.exports = {\n  // ...\n\n  // Включаем транспиляцию\n  transpilePackages: ['@vkontakte/vkui'],\n\n  // Трансформируем импорты\n  modularizeImports: {\n    '@vkontakte/vkui': {\n      transform: '@vkontakte/vkui/dist/cssm',\n      skipDefaultConversion: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing VKUI with Package Managers\nDESCRIPTION: Instructions for installing the VKUI library using different package managers (npm, yarn, pnpm). Requires React and ReactDOM version ^18.2.0 as peer dependencies.\nSOURCE: https://github.com/vkcom/vkui/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @vkontakte/vkui\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @vkontakte/vkui\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @vkontakte/vkui\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up Icons Overview in Storybook\nDESCRIPTION: This code imports necessary components from Storybook and a custom IconsOverviewPage component, then sets up a Meta component to define the Storybook page title and renders the icons overview page.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/docs/icons.overview.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\nimport { IconsOverviewPage } from './icons-overview/IconsOverview';\n\n<Meta title=\"Icons overview\" />\n\n<IconsOverviewPage />\n```\n\n----------------------------------------\n\nTITLE: Rendering the Example Component\nDESCRIPTION: This snippet renders the `Example` component, making it visible within the application. This initiates the component's lifecycle, including state initialization, rendering, and event handling.\nSOURCE: https://github.com/vkcom/vkui/blob/master/packages/vkui/src/components/ToolButton/Readme.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example />;\n```"
  }
]