[
  {
    "owner": "textualize",
    "repo": "textual",
    "content": "TITLE: Defining a Simple Textual App Class in Python\nDESCRIPTION: This snippet shows the simplest possible Textual app class definition. It imports the App class from Textual and creates a subclass with no additional functionality.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App\n\nclass SimpleApp(App):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Textual App in Python\nDESCRIPTION: This example demonstrates how to create an instance of a Textual app and run it. It includes a conditional statement to ensure the app only runs when the script is executed directly.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App\n\nclass SimpleApp(App):\n    pass\n\nif __name__ == \"__main__\":\n    app = SimpleApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Weather App with Work Decorator - Python\nDESCRIPTION: Weather app implementation using the @work decorator for simplified worker management.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/workers/weather03.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Custom Widget in Python\nDESCRIPTION: This snippet demonstrates how to create a simple custom widget by subclassing Widget and implementing a render method. It displays a greeting with basic markup.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widget import Widget\n\nclass Greeting(Widget):\n    def render(self) -> str:\n        return \"Hello [b]World[/b]\"\n\nclass GreetingApp(App):\n    def compose(self) -> ComposeResult:\n        yield Greeting()\n```\n\n----------------------------------------\n\nTITLE: Vertical Layout Example in Textual\nDESCRIPTION: Demonstrates vertical layout arrangement of widgets in Textual with Python implementation and CSS styling. Shows how widgets are stacked top-to-bottom with equal height distribution using fr units.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/vertical_layout.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/vertical_layout.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Layout with Header and Footer in Textual\nDESCRIPTION: This snippet demonstrates how to create a basic layout with a header and footer using Textual. It defines an app, a screen, and placeholder widgets for the header and footer.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.widgets import Header, Footer, Placeholder\n\nclass Header(Placeholder):\n    pass\n\nclass Footer(Placeholder):\n    pass\n\nclass ColumnsContainer(Placeholder):\n    pass\n\nclass LayoutScreen(Container):\n    def compose(self) -> ComposeResult:\n        yield Header(id=\"header\")\n        yield ColumnsContainer(id=\"columns\")\n        yield Footer(id=\"footer\")\n\nclass LayoutApp(App):\n    def compose(self) -> ComposeResult:\n        yield LayoutScreen()\n\nif __name__ == \"__main__\":\n    app = LayoutApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Building a Calculator Application with Textual in Python\nDESCRIPTION: This code snippet shows how to create a simple calculator application using the Textual framework. It includes a Calculator class that handles button presses and performs calculations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom decimal import Decimal\n\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, Static\n\n\nclass Calculator(App):\n    \"\"\"A working calculator app.\"\"\"\n\n    CSS_PATH = \"calculator.tcss\"\n\n    BUTTONS = [\n        (\"7\", \"8\", \"9\", \"/\"),\n        (\"4\", \"5\", \"6\", \"*\"),\n        (\"1\", \"2\", \"3\", \"-\"),\n        (\"0\", \".\", \"=\", \"+\"),\n    ]\n\n    current = reactive(\"0\")\n    show_ac = reactive(True)\n    chain = reactive(\"\")\n\n    def watch_current(self, value: str) -> None:\n        \"\"\"Called when self.current is modified.\"\"\"\n        # self.query_one(\"#display\", Static).update(value)\n        pass\n\n    def compute_result(self) -> None:\n        \"\"\"Compute the result of the calculation.\"\"\"\n        try:\n            # Use Decimal to perform accurate calculations\n            result = str(eval(self.chain))\n            if result.endswith(\".0\"):\n                result = result[:-2]\n            self.current = result\n        except Exception:\n            self.current = \"ERROR\"\n\n        self.chain = \"\"\n        self.show_ac = True\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Add our buttons.\"\"\"\n        yield Container(\n            Static(id=\"display\"),\n            Button(\"AC\", id=\"clear\", variant=\"primary\"),\n            Button(\"C\", id=\"clear\", variant=\"primary\"),\n            id=\"calculator\",\n        )\n\n        # Add all the buttons\n        for row in self.BUTTONS:\n            for button in row:\n                yield Button(button, classes=\"digit\" if button.isdigit() else \"operator\")\n\n    def on_button_pressed(self, event: Button.Pressed) -> None:\n        \"\"\"Handle button presses.\"\"\"\n        assert isinstance(event.sender, Button)\n        button_text = event.sender.text\n\n        if button_text == \"AC\":\n            self.current = \"0\"\n            self.chain = \"\"\n            self.show_ac = True\n        elif button_text == \"C\":\n            self.current = \"0\"\n            self.show_ac = True\n        elif button_text == \"=\":\n            self.compute_result()\n        elif button_text in \"+*-/\":\n            self.chain += self.current + button_text\n            self.current = \"0\"\n        else:\n            self.current = (self.current + button_text).lstrip(\"0\") or \"0\"\n            self.show_ac = False\n\n        self.query_one(\"#display\").update(self.current)\n\n    def on_mount(self) -> None:\n        \"\"\"Hide the C button.\"\"\"\n        self.query_one(Button, \"#clear\").display = False\n\n    def watch_show_ac(self, show_ac: bool) -> None:\n        \"\"\"Called when show_ac changes.\"\"\"\n        self.query_one(Button, \"#clear\").display = not show_ac\n        self.query_one(\"#clear Button\", Button).display = show_ac\n\n\nif __name__ == \"__main__\":\n    app = Calculator()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Byte Editor Widgets in Python with Textual\nDESCRIPTION: This snippet defines three custom widgets (BitSwitch, ByteInput, and ByteEditor) to create a byte editor interface. It sets up the basic structure and layout of the widgets without implementing functionality.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Horizontal, Vertical\nfrom textual.widgets import Button, Input, Label, Switch\n\n\nclass BitSwitch(Vertical):\n    def compose(self) -> ComposeResult:\n        yield Label()\n        yield Switch()\n\n    def on_mount(self) -> None:\n        self.styles.width = 8\n        self.styles.height = 5\n\n\nclass ByteInput(Horizontal):\n    def compose(self) -> ComposeResult:\n        for bit in range(8):\n            yield BitSwitch()\n\n    def on_mount(self) -> None:\n        for bit, switch in enumerate(self.query(BitSwitch)):\n            switch.query_one(Label).update(str(7 - bit))\n\n\nclass ByteEditor(App):\n    CSS = \"\"\"\n    ByteInput {\n        width: 70;\n        height: 7;\n        border: heavy $primary;\n    }\n    ByteInput:focus-within {\n        border: heavy $accent;\n    }\n    Input {\n        width: 70;\n    }\n    BitSwitch {\n        width: 8;\n        height: 5;\n    }\n    BitSwitch > Label {\n        text-align: center;\n        height: 1;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield ByteInput()\n        yield Input(placeholder=\"Enter decimal value\")\n\n\napp = ByteEditor()\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Non-Blocking UI in Textual with asyncio.sleep\nDESCRIPTION: A properly implemented non-blocking Textual application that uses asyncio.sleep with await to perform time-consuming operations. This allows the UI to remain responsive during background tasks, with the user able to interact with the ColourChanger widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/responsive-app-background-task.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/blog/snippets/2022-12-07-responsive-app-background-task/nonblocking01.py\"\n```\n\n----------------------------------------\n\nTITLE: Simplified Time Display Using Recompose\nDESCRIPTION: Demonstrates a simplified clock implementation using recompose to automatically update the display when time changes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/reactivity/recompose02.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing FizzBuzz Table Display with Textual and Rich - Python\nDESCRIPTION: Demonstrates a Textual widget that renders the FizzBuzz results using a Rich Table renderable. Relies on Python with the Textual and Rich libraries. Displays the first 15 numbers of FizzBuzz in a table format within a Textual app. Key parameters include setting content with Table, and the widget displays Fizz, Buzz, or FizzBuzz as appropriate. Input is programmatically generated; output is a UI table. Requires 'textual' and 'rich' Python packages.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"fizzbuzz01.py\\\" hl_lines=\\\"18\\\"\\n--8<-- \\\"docs/examples/guide/widgets/fizzbuzz01.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Stopwatch Control Methods with Reactivity in Textual (Python)\nDESCRIPTION: This snippet extends the stopwatch widget to respond to button presses (start, stop, reset) and track total elapsed time using a reactive attribute. It introduces start, stop, and reset methods for user control and enhances event handlers to correctly update state and visuals. Dependencies include the Textual framework; the main parameters are reactive timing attributes and button event handlers, which together ensure precise control and user feedback.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"stopwatch06.py\\\" hl_lines=\\\"14 18 22 30-44 50-61\\\"\\n--8<-- \\\"docs/examples/tutorial/stopwatch06.py\\\"\\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python\\n    def on_button_pressed(self, event: Button.Pressed) -> None:\\n        \\\"\\\"\\\"Event handler called when a button is pressed.\\\"\\\"\\\"\\n        button_id = event.button.id\\n        time_display = self.query_one(TimeDisplay)\\n        if button_id == \\\"start\\\":\\n            time_display.start()\\n            self.add_class(\\\"started\\\")\\n        elif button_id == \\\"stop\\\":\\n            time_display.stop()\\n            self.remove_class(\\\"started\\\")\\n        elif button_id == \\\"reset\\\":\\n            time_display.reset()\\n```\n```\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\\\"docs/examples/tutorial/stopwatch06.py\\\" title=\\\"stopwatch06.py\\\" press=\\\"tab,enter,tab,enter,tab\\\"}\\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Gradient Background Widget in Python using Textual\nDESCRIPTION: Example demonstrating how to create a custom widget that combines both render() and compose() methods. The widget displays a message using compose() while rendering an animated linear gradient background using render(). The widget refreshes 30 times per second to create the animation effect.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/render-and-compose.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/how-to/render_compose.py\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Clock App with Textual in Python\nDESCRIPTION: This code snippet demonstrates how to create a simple clock application using Textual. It shows the current time and updates every second. The app uses the Digits widget to display the time and leverages Textual's CSS-like styling capabilities.\nSOURCE: https://github.com/textualize/textual/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\\nAn App to show the current time.\\n\"\"\"\\n\\nfrom datetime import datetime\\n\\nfrom textual.app import App, ComposeResult\\nfrom textual.widgets import Digits\\n\\n\\nclass ClockApp(App):\\n    CSS = \"\"\"\\n    Screen { align: center middle; }\\n    Digits { width: auto; }\\n    \"\"\"\\n\\n    def compose(self) -> ComposeResult:\\n        yield Digits(\"\")\\n\\n    def on_ready(self) -> None:\\n        self.update_clock()\\n        self.set_interval(1, self.update_clock)\\n\\n    def update_clock(self) -> None:\\n        clock = datetime.now().time()\\n        self.query_one(Digits).update(f\"{clock:%T}\")\\n\\n\\nif __name__ == \"__main__\":\\n    app = ClockApp()\\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Reactive Attributes to Widgets with Textual in Python\nDESCRIPTION: Demonstrates initializing a Stopwatch GUI widget with reactive attributes using Textual's reactive system. The snippet shows how to declare, initialize, and watch state changes to synchronize the UI with internal state, utilizing timer events and automatic UI refresh on state update. Requires the Textual library and knowledge of widget lifecycles; works by binding the display update to a reactive float attribute that updates 60 times per second.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"stopwatch05.py\\\" hl_lines=\\\"1 5 12-27 45\\\"\\n--8<-- \\\"docs/examples/tutorial/stopwatch05.py\\\"\\n```\n```\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\\\"docs/examples/tutorial/stopwatch05.py\\\" title=\\\"stopwatch05.py\\\"}\\n```\n```\n\n----------------------------------------\n\nTITLE: Sorting DataTable Rows using Columns and Key Functions in Textual (Python)\nDESCRIPTION: This code illustrates sorting table rows either by columns (specifying keys or ColumnKey objects) or via a key function, optionally combined, and with a reverse option. The snippet targets DataTable's sort method, allowing both natural and calculated ordering. It requires a DataTable instance with data; function-style and column-based sorts are demonstrated, including using lambdas for custom ordering (e.g., multiplying hours by rate). Outputs are sorted table views per criteria.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python\\n--8<-- \\\"docs/examples/widgets/data_table_sort.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Textual via Conda-Forge\nDESCRIPTION: Installation command using micromamba package manager from conda-forge.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmicromamba install -c conda-forge textual\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animation in Textual\nDESCRIPTION: Example showing how to animate a Static widget's opacity from visible to invisible over 2 seconds. The code demonstrates the basic usage of Textual's animate method to create a fade-out effect.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/animation.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/animator/animation01.py\"\n```\n\n----------------------------------------\n\nTITLE: Custom IndeterminateProgress Widget for Textual\nDESCRIPTION: A complete implementation of an indeterminate progress bar widget for Textual, using Rich's Progress component. The widget updates 60 times per second to create a smooth animation effect.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.progress import Progress, BarColumn\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nclass IndeterminateProgress(Static):\n    def __init__(self):\n        super().__init__(\"\")\n        self._bar = Progress(BarColumn())  # (1)!\n        self._bar.add_task(\"\", total=None)  # (2)!\n\n    def on_mount(self) -> None:\n        # When the widget is mounted start updating the display regularly.\n        self.update_render = self.set_interval(\n            1 / 60, self.update_progress_bar\n        )  # (3)!\n\n    def update_progress_bar(self) -> None:\n        self.update(self._bar)  # (4)!\n\n\nclass MyApp(App):\n    def compose(self) -> ComposeResult:\n        yield IndeterminateProgress()\n\n\nif __name__ == \"__main__\":\n    app = MyApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Column Sizes in Textual CSS\nDESCRIPTION: Demonstrates setting column widths in a 3x2 grid using fractional units. The first column takes up half the width while the other two columns share the remaining space equally.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nhl_lines=\"4\"\n--8<-- \"docs/examples/guide/layout/grid_layout3_row_col_adjust.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Textual CSS File Example\nDESCRIPTION: CSS file showing various rule sets for styling Textual widgets with comments.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/dom4.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Using Percentage Units for Widget Dimensions in Textual\nDESCRIPTION: This snippet demonstrates how to use percentage units to set widget dimensions relative to its parent. It creates a Static widget with 50% width and 80% height of its container.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nLOREM_IPSUM = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\"\"\n\nclass DimensionsApp(App):\n    def compose(self) -> ComposeResult:\n        yield Static(LOREM_IPSUM, id=\"lorem\")\n\n    def on_mount(self) -> None:\n        lorem = self.query_one(\"#lorem\")\n        lorem.styles.width = \"50%\"\n        lorem.styles.height = \"80%\"\n\nif __name__ == \"__main__\":\n    app = DimensionsApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Handling Events in a Textual App\nDESCRIPTION: This snippet shows how to handle events in a Textual app, specifically the 'mount' and 'key' events. It changes the background color on mount and in response to number key presses.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App\nfrom textual.color import Color\n\nclass ColorApp(App):\n    def on_mount(self) -> None:\n        self.screen.styles.background = \"darkblue\"\n\n    def on_key(self, event) -> None:\n        if event.key.isdecimal():\n            self.screen.styles.background = Color.from_hsl(\n                float(event.key) / 10, 0.8, 0.5\n            )\n\nif __name__ == \"__main__\":\n    app = ColorApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: CSS Code for Styling Stopwatch Components\nDESCRIPTION: CSS declaration block for the Stopwatch widget that sets background color, height, margin, minimum width, and padding.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\nStopwatch {\n    background: $boost;\n    height: 5;\n    margin: 1;\n    min-width: 50;\n    padding: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced CSS with State-Based Styling for Stopwatch App\nDESCRIPTION: Extended CSS file that includes dynamic styling through the '.started' class, enabling the stopwatch UI to change appearance based on its running state.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/tutorial/stopwatch04.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Composing a Compound Widget with Input and Label using Textual (Python)\nDESCRIPTION: This code defines a reusable compound widget that bundles an input and a label, yielding them as children in the compose() method according to Textual's compound widget protocol. Required dependencies are the Input and Label widgets from Textual, and proper integration in a Textual app. Inputs: label text, default input value; outputs: a horizontally aligned label with accompanying input. Limitations: The composed widget must be included in a Textual app tree; ensures separation of concerns for enhanced reusability.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"compound01.py\\\" hl_lines=\\\"28-30 44-47\\\"\\n--8<-- \\\"docs/examples/guide/compound/compound01.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Dynamic Widgets using Textual in Python\nDESCRIPTION: Shows how to implement dynamic UI by mounting and removing stopwatch widgets at runtime using Textual's widget API. It includes methods to add and remove widgets and to handle their scrolling into view, along with updating the container's child widgets. Requires Textual and proper CSS selectors; takes user actions to manage the list of stopwatches displayed. Inputs are user key presses, outputs are UI updates showing stopwatch widgets being added/removed; suitable for multi-stopwatch applications.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"stopwatch.py\\\" hl_lines=\\\"78-79 86 88-92 94-98\\\"\\n--8<-- \\\"docs/examples/tutorial/stopwatch.py\\\"\\n```\n```\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\\\"docs/examples/tutorial/stopwatch.py\\\" title=\\\"stopwatch.py\\\" press=\\\"d,a,a,a,a,a,a,a,tab,enter,tab\\\"}\\n```\n```\n\n----------------------------------------\n\nTITLE: CSS Descendant Combinator for Specific Widget Styling\nDESCRIPTION: CSS rule using the descendant combinator to style Buttons within a specific container. This makes text bold for Buttons under an element with id 'dialog'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n#dialog Button {\n  text-style: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Input and Updating Chat View in Python\nDESCRIPTION: Processes user input, updates the chat view with the user's prompt, and prepares a response widget for the AI's reply. Uses event handling and widget manipulation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    @on(Input.Submitted)\n    async def on_input(self, event: Input.Submitted) -> None:\n        chat_view = self.query_one(\"#chat-view\")\n        event.input.clear()\n        await chat_view.mount(Prompt(event.value))\n        await chat_view.mount(response := Response())\n        response.anchor()\n        self.send_prompt(event.value, response)\n```\n\n----------------------------------------\n\nTITLE: Textual-Plotext Integration Example\nDESCRIPTION: Shows how to create a scatter plot using the textual-plotext library within a Textual application. Demonstrates the integration of Plotext functionality using the PlotextPlot widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/textual-plotext.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\n\nfrom textual_plotext import PlotextPlot\n\nclass ScatterApp(App[None]):\n\n    def compose(self) -> ComposeResult:\n        yield PlotextPlot()\n\n    def on_mount(self) -> None:\n        plt = self.query_one(PlotextPlot).plt\n        y = plt.sin() # sinusoidal test signal\n        plt.scatter(y)\n        plt.title(\"Scatter Plot\") # to apply a title\n\nif __name__ == \"__main__\":\n    ScatterApp().run()\n```\n\n----------------------------------------\n\nTITLE: Creating ListView Control with Custom Styling\nDESCRIPTION: Example showing how to implement a ListView control with custom items and styling. Includes both Python implementation and CSS styling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-6-0.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/list_view.py\"\n```\n\nLANGUAGE: sass\nCODE:\n```\n--8<-- \"docs/examples/widgets/list_view.css\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Select Widget Using from_values Class Method (Python)\nDESCRIPTION: This Python code sample illustrates how to construct a Select widget using the from_values class method, simplifying initialization by accepting a list of values instead of explicit label-value tuples. Found in docs/examples/widgets/select_from_values_widget.py, it highlights an alternative approach to widget instantiation in Textual. The primary input is a sequence of values, with outputs being the rendered Select control. Requires Textual library and access to the referenced file structure for direct use.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/select.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/select_from_values_widget.py\"\n```\n\n----------------------------------------\n\nTITLE: Additional CSS Styling for Stopwatch UI Elements\nDESCRIPTION: CSS styles for TimeDisplay and Button widgets, along with ID-specific styles for start, stop, and reset buttons. Controls text alignment, colors, dimensions, and layout positioning.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nTimeDisplay {   \n    text-align: center;\n    color: $foreground-muted;\n    height: 3;\n}\n\nButton {\n    width: 16;\n}\n\n#start {\n    dock: left;\n}\n\n#stop {\n    dock: left;\n    display: none;\n}\n\n#reset {\n    dock: right;\n}\n```\n\n----------------------------------------\n\nTITLE: Input Focus Management in Textual\nDESCRIPTION: Implementation showing how to manage input focus across multiple RichLog widgets with both Python and CSS styling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/input/key03.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/input/key03.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Flow in Byte Editor with Custom Messages\nDESCRIPTION: This snippet extends the ByteEditor to handle user interactions. It implements a custom BitChanged message for BitSwitch and updates the decimal value in ByteEditor when switches are toggled.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Horizontal, Vertical\nfrom textual.message import Message\nfrom textual.widgets import Button, Input, Label, Switch\n\n\nclass BitSwitch(Vertical):\n    class BitChanged(Message):\n        def __init__(self, switch: \"BitSwitch\", value: bool) -> None:\n            self.switch = switch\n            self.value = value\n            super().__init__()\n\n    def __init__(self, bit: int):\n        super().__init__()\n        self.bit = bit\n        self._value = False\n\n    def compose(self) -> ComposeResult:\n        yield Label(str(self.bit))\n        yield Switch()\n\n    def on_mount(self) -> None:\n        self.styles.width = 8\n        self.styles.height = 5\n\n    def on_switch_changed(self, event: Switch.Changed) -> None:\n        event.stop()\n        self._value = event.value\n        self.post_message(self.BitChanged(self, self._value))\n\n\nclass ByteInput(Horizontal):\n    def compose(self) -> ComposeResult:\n        for bit in range(8):\n            yield BitSwitch(7 - bit)\n\n\nclass ByteEditor(App):\n    CSS = \"\"\"\n    ByteInput {\n        width: 70;\n        height: 7;\n        border: heavy $primary;\n    }\n    ByteInput:focus-within {\n        border: heavy $accent;\n    }\n    Input {\n        width: 70;\n    }\n    BitSwitch {\n        width: 8;\n        height: 5;\n    }\n    BitSwitch > Label {\n        text-align: center;\n        height: 1;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield ByteInput()\n        yield Input(placeholder=\"Enter decimal value\")\n\n    def on_bit_switch_bit_changed(self, message: BitSwitch.BitChanged) -> None:\n        value = 0\n        for bit, switch in enumerate(self.query(BitSwitch)):\n            if switch._value:\n                value |= 1 << bit\n        self.query_one(Input).value = str(value)\n\n\napp = ByteEditor()\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Await-Me-Maybe Pattern in Python\nDESCRIPTION: Demonstrates how to create a function that can handle both synchronous and asynchronous callbacks using the 'Await me maybe' pattern. This allows framework users to write either regular functions or coroutines as callbacks.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/await-me-maybe.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport inspect\n\n\ndef plain_old_function():\n    return \"Plain old function\"\n\nasync def async_function():\n    return \"Async function\"\n\n\nasync def await_me_maybe(callback):\n    result = callback()\n    if inspect.isawaitable(result):\n        return await result\n    return result\n\n\nasync def run_framework():\n    print(\n        await await_me_maybe(plain_old_function)\n    )\n    print(\n        await await_me_maybe(async_function)\n    )\n\n\nif __name__ == \"__main__\":\n    asyncio.run(run_framework())\n```\n\n----------------------------------------\n\nTITLE: Showing a Loading Indicator in Place of Widget Content with Textual - Python\nDESCRIPTION: Provides an example of setting a widget's loading reactive property to True to temporarily display a loading indicator (LoadingIndicator) in place of its normal content. Typical use case is for indicating data loading or processing states (e.g., during a simulated network request using sleep). Requires Python with Textual package. Input is the loading property state; output is a temporary loading animation, replaced by real content after simulation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"loading01.py\\\"\\n--8<-- \\\"docs/examples/guide/widgets/loading01.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Handlers for Network Requests in Python\nDESCRIPTION: Demonstrates the use of async handlers and background tasks for network requests in a Textual application, ensuring UI responsiveness.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/events/dictionary.py\"\n```\n\n----------------------------------------\n\nTITLE: Basic Weather App Implementation - Python\nDESCRIPTION: Initial weather app implementation that demonstrates potential concurrency issues when making network requests directly in message handlers.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/workers/weather01.py\"\n```\n\n----------------------------------------\n\nTITLE: Styling Combined Layouts in Textual CSS\nDESCRIPTION: Textual CSS (.tcss) file providing the styles and layout rules for the 'combining_layouts.py' example. This file defines how different layout techniques (like grids, docking, layers, offsets) are applied and interact to create a complex user interface.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/combining_layouts.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Basic Textual CSS Header Styling\nDESCRIPTION: CSS rule set demonstrating basic widget styling with properties for docking, height, alignment, background and text color.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nHeader {\n  dock: top;\n  height: 3;\n  content-align: center middle;\n  background: blue;\n  color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: TimeDisplay Widget from Textual Tutorial\nDESCRIPTION: Code from the Textual tutorial showing how the TimeDisplay widget updates automatically using reactive attributes, interval timers, and watch methods to display elapsed time.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom time import monotonic\n\nfrom textual.reactive import reactive\nfrom textual.widgets import Static\n\n\nclass TimeDisplay(Static):\n    \"\"\"A widget to display elapsed time.\"\"\"\n\n    start_time = reactive(monotonic)\n    time = reactive(0.0)\n    total = reactive(0.0)\n\n    def on_mount(self) -> None:\n        \"\"\"Event handler called when widget is added to the app.\"\"\"\n        self.update_timer = self.set_interval(1 / 60, self.update_time, pause=True)\n\n    def update_time(self) -> None:\n        \"\"\"Method to update time to current.\"\"\"\n        self.time = self.total + (monotonic() - self.start_time)\n\n    def watch_time(self, time: float) -> None:\n        \"\"\"Called when the time attribute changes.\"\"\"\n        minutes, seconds = divmod(time, 60)\n        hours, minutes = divmod(minutes, 60)\n        self.update(f\"{hours:02,.0f}:{minutes:02.0f}:{seconds:05.2f}\")\n```\n\n----------------------------------------\n\nTITLE: Basic Action Method Implementation\nDESCRIPTION: Demonstrates creating a simple action method to set background color with a key binding.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions01.py\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Tooltip to a Widget in Textual - Python\nDESCRIPTION: Shows how to assign a tooltip property to a Textual widget, which can be a string or Rich renderable. The example adds a tooltip to a button. Requires Python, Textual, and Rich. Set the .tooltip attribute to control displayed hints on mouse hover. Inputs are the target widget and tooltip content; output is a UI with tooltip on hover. Works with all regular widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"tooltip01.py\\\"\\n--8<-- \\\"docs/examples/guide/widgets/tooltip01.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Click Actions in Textual\nDESCRIPTION: Demonstrates how to create clickable actions using the @click markup syntax\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_6\n\nLANGUAGE: markup\nCODE:\n```\nPlay the [@click=app.bell]bell[/]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Command Provider for Python File Opening\nDESCRIPTION: Shows how to create a custom command provider that allows opening Python files through the command palette. It implements startup, search, and discover methods to handle file listing and searching.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/command_palette.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom typing import Iterable\n\nfrom textual.app import App, ComposeResult\nfrom textual.command import CommandPalette, Hit, DiscoveryHit, Provider\nfrom textual.widgets import Header, Footer\n\nclass PythonFileProvider(Provider):\n    def startup(self) -> None:\n        self.files = list(Path(\".\").glob(\"*.py\"))\n\n    async def search(self, query: str) -> Iterable[Hit]:\n        matcher = self.matcher(query)\n        for file in self.files:\n            score = matcher.match(file.name)\n            if score > 0:\n                yield Hit(\n                    score=score,\n                    highlight=matcher.highlight(file.name),\n                    callback=lambda file=file: self.app.open_file(file),\n                )\n\n    async def discover(self) -> Iterable[DiscoveryHit]:\n        for file in self.files[:5]:\n            yield DiscoveryHit(\n                display=f\"Open {file.name}\",\n                callback=lambda file=file: self.app.open_file(file),\n            )\n\nclass CommandPaletteApp(App):\n    COMMANDS = App.COMMANDS + [PythonFileProvider()]\n\n    def compose(self) -> ComposeResult:\n        yield Header()\n        yield Footer()\n\n    def open_file(self, path: Path) -> None:\n        self.bell()\n\nif __name__ == \"__main__\":\n    app = CommandPaletteApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: RichLog Widget Implementation in Textual\nDESCRIPTION: Shows implementation of a scrolling text panel with Rich formatting.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_21\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/rich_log.py\n```\n\n----------------------------------------\n\nTITLE: Filling DataTable with Data using Textual (Python)\nDESCRIPTION: This snippet demonstrates how to initialize a DataTable widget, add columns for lane, swimmer, country, and time, then populate it with row data using the add_rows method. Requires the Textual package (widgets.DataTable) and is meant to be used in a terminal UI application built with Textual. Inputs are lists of column headers and row values; the output is an interactive table rendered in the textual interface. All operations—including column and row addition—must be performed on a DataTable instance prior to rendering.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\\n--8<-- \\\"docs/examples/widgets/data_table.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Querying and Updating Cursor Location in TextArea - Python\nDESCRIPTION: Demonstrates how to read and update the cursor location in a TextArea instance. The 'cursor_location' property provides or sets the cursor position as a tuple (row_index, column_index), with indices being zero-based and relative to the internal document content. Writing to this property moves the text cursor directly to a specified position.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> text_area = TextArea()\\n>>> text_area.cursor_location\\n(0, 0)\\n>>> text_area.cursor_location = (0, 4)\\n>>> text_area.cursor_location\\n(0, 4)\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Styles in Textual Python Application\nDESCRIPTION: This snippet demonstrates how to set background color and border styles for the screen in a Textual application. It changes the background to dark blue and adds a white heavy border.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Footer\n\nclass StylesApp(App):\n    def compose(self) -> ComposeResult:\n        self.screen.styles.background = \"darkblue\"\n        self.screen.styles.border = (\"heavy\", \"white\")\n        yield Footer()\n\nif __name__ == \"__main__\":\n    app = StylesApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Concurrent Weather Updates - Python\nDESCRIPTION: Enhanced version using run_worker to handle network requests concurrently, improving UI responsiveness.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/workers/weather02.py\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTable Cursors for Navigation in Textual (Python)\nDESCRIPTION: This snippet illustrates how to use various cursor types (cell, row, column, none) in a DataTable, and how events are emitted as the user navigates via the keyboard or mouse. The example depends on a DataTable instance and shows changing cursor_type and reading cursor_coordinate for handling selection and highlighting. Input includes user navigation actions; output includes corresponding event messages. The approach lets you build interactive, user-driven tables responding to both keyboard and mouse input.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\\n--8<-- \\\"docs/examples/widgets/data_table_cursors.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Textual Application Structure\nDESCRIPTION: Simple Textual application example showing the basic DOM structure with ExampleApp and Screen.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/dom1.py\"\n```\n\n----------------------------------------\n\nTITLE: Wildcard Event Handler in Textual\nDESCRIPTION: Shows how to create a handler that responds to any event of a specific type from any widget by using the '*' wildcard in the decorator.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@on(Button.Pressed, \"*\")\ndef on_any_button_pressed(self, event: Button.Pressed) -> None:\n    self.log(f\"Button {event.button} was pressed\")\n\n```\n\n----------------------------------------\n\nTITLE: Utility Containers Example in Textual\nDESCRIPTION: Demonstrates use of built-in container widgets (Vertical, Horizontal) to create complex layouts like 2x2 grids.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/utility_containers.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/utility_containers.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Input Validation Implementation - Python\nDESCRIPTION: Demonstrates implementing custom validation for Input widgets using multiple validators and handling validation events with UI feedback.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/input.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/input_validation.py\"\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Attributes in Python\nDESCRIPTION: Demonstrates how to create reactive attributes in a Textual Widget class using the reactive() function. Shows examples of string, integer, and boolean reactive attributes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\n\nclass Reactive(Widget):\n\n    name = reactive(\"Paul\")  # (1)!\n    count = reactive(0) # (2)!\n    is_cool = reactive(True)  # (3)!\n```\n\n----------------------------------------\n\nTITLE: Styling the World Clock App with CSS (Textual)\nDESCRIPTION: CSS rules for the `WorldClockApp` and `WorldClock` widgets used in the data binding examples. Defines layout (grid) and alignment for the clocks.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n```css\n--8<-- \"docs/examples/guide/reactivity/world_clock01.tcss\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Checkerboard Widget with Component Classes in Textual (Python)\nDESCRIPTION: This snippet demonstrates how to use component classes within a widget to enable flexible CSS customization by associating squares with specific class names, replacing hard-coded colors. Dependencies include the Textual framework and correct setup of the COMPONENT_CLASSES set and DEFAULT_CSS in the widget class. The widget leverages get_component_rich_style to retrieve styles dynamically, allowing for theme changes via CSS. Inputs include the widget instance and configured styles; outputs are Rich segments styled per current CSS. Limitations: CSS must define the relevant class selectors.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"checker02.py\\\" hl_lines=\\\"11-13 16-23 35-36\\\"\\n--8<-- \\\"docs/examples/guide/widgets/checker02.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamic Watching of Reactive Attributes in Python\nDESCRIPTION: Shows how to programmatically add watchers to reactive attributes using the watch method. This example keeps a progress bar synced with a counter.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, ProgressBar, Static\n\nclass Counter(Static):\n    counter = reactive(0)  # (1)!\n\n    def compose(self) -> ComposeResult:\n        yield Button(\"Count\", id=\"count\")\n\n    def on_button_pressed(self, event: Button.Pressed) -> None:\n        self.counter += 1\n\nclass CounterApp(App):\n    def compose(self) -> ComposeResult:\n        yield Container(\n            Counter(),\n            ProgressBar(total=100),\n        )\n\n    def on_mount(self) -> None:\n        counter = self.query_one(Counter)\n        progress = self.query_one(ProgressBar)\n\n        def update_progress(value: int) -> None:  # (2)!\n            progress.update(total=100, progress=value)\n\n        self.watch(counter, \"counter\", update_progress)  # (3)!\n```\n\n----------------------------------------\n\nTITLE: Creating a Stopwatch App with CSS Path Configuration\nDESCRIPTION: Complete implementation of a stopwatch application that loads external CSS styles using the CSS_PATH class variable. This demonstrates how to connect a CSS file to a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/tutorial/stopwatch03.py\"\n```\n\n----------------------------------------\n\nTITLE: Using @on Decorator with CSS Selectors in Python\nDESCRIPTION: Demonstrates using the @on decorator with CSS selectors to create individual message handlers for different buttons in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/events/on_decorator02.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Links in a Custom Widget\nDESCRIPTION: This snippet demonstrates how to use text links in a widget to perform actions when clicked, such as updating the widget's content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass Hello(Static):\n    def __init__(self):\n        super().__init__()\n        self.greetings = [\"Hello\", \"Bonjour\", \"Hola\", \"Guten Tag\", \"Ciao\"]\n        self.index = 0\n\n    def compose(self) -> ComposeResult:\n        yield Static(id=\"greeting\")\n\n    def on_mount(self) -> None:\n        self.update_greeting()\n\n    def update_greeting(self) -> None:\n        greeting = self.greetings[self.index]\n        self.query_one(\"#greeting\").update(\n            f'[@click=next_word]{greeting}[/]'\n        )\n\n    def action_next_word(self) -> None:\n        self.index = (self.index + 1) % len(self.greetings)\n        self.update_greeting()\n\nclass HelloApp(App):\n    CSS_PATH = \"hello05.tcss\"\n    def compose(self) -> ComposeResult:\n        yield Hello()\n```\n\nLANGUAGE: css\nCODE:\n```\nHello {\n    width: 100%;\n    height: 3;\n    content-align: center middle;\n    background: darkblue;\n    color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic MarkdownViewer Example\nDESCRIPTION: Example showing how to display Markdown content with a Table of Contents using the MarkdownViewer widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/markdown_viewer.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/markdown_viewer.py\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Focusable Widget with Keybindings\nDESCRIPTION: This snippet demonstrates how to create a focusable widget with keybindings that respond to keyboard input, allowing interaction with the widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nfrom textual.reactive import reactive\n\nclass Counter(Static):\n    can_focus = True\n\n    BINDINGS = [\n        (\"up,k\", \"change_count(1)\", \"Increment\"),\n        (\"down,j\", \"change_count(-1)\", \"Decrement\"),\n    ]\n\n    count = reactive(0)\n\n    def render(self) -> str:\n        return f\"Count: {self.count}\"\n\n    def action_change_count(self, offset: int) -> None:\n        self.count += offset\n\nclass CounterApp(App):\n    CSS_PATH = \"counter.tcss\"\n\n    def compose(self) -> ComposeResult:\n        yield Counter()\n        yield Counter()\n        yield Counter()\n```\n\nLANGUAGE: css\nCODE:\n```\nCounter {\n    height: 3;\n    content-align: center middle;\n}\n\nCounter:focus {\n    border: heavy green;\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Strip from Segments for Line-based Widget Rendering - Python\nDESCRIPTION: Shows how to construct a Strip (line container) from multiple Segment objects, enabling mixed styling on a single line. Example splits text into styled and non-styled segments ('Hello, ', 'World' in bold, '!'), combines them into a Strip, and optionally sets the cell length. Requires Python with Rich or Textual. Inputs are segment list and optional width, output is a line-ready Strip object.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n```python\\nsegments = [\\n    Segment(\\\"Hello, \\\") ,\\n    Segment(\\\"World\\\", Style(bold=True)),\\n    Segment(\\\"!\\\")\\n]\\nstrip = Strip(segments)\\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python\\nstrip = Strip(segments, 13)\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing High-Precision asyncio Sleep for Windows in Python\nDESCRIPTION: A custom implementation of asyncio.sleep that achieves better timing granularity on Windows platforms by using the synchronous time.sleep function within an executor. This bypasses the 15ms timer granularity limitation of Windows and enables smoother animations in Textual applications.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/better-sleep-on-windows.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep as time_sleep\nfrom asyncio import get_running_loop\n\nasync def sleep(sleep_for: float) -> None:\n    \"\"\"An asyncio sleep.\n\n    On Windows this achieves a better granularity than asyncio.sleep\n\n    Args:\n        sleep_for (float): Seconds to sleep for.\n    \"\"\"    \n    await get_running_loop().run_in_executor(None, time_sleep, sleep_for)\n\n```\n\n----------------------------------------\n\nTITLE: Creating ListView Example - Python\nDESCRIPTION: Example implementation showing how to create and use a ListView widget in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/list_view.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/list_view.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pride Flag Animation in Python with Textual\nDESCRIPTION: This snippet demonstrates how to create a colorful pride flag animation using the Textual framework. It defines a Pride class that inherits from App and uses a timer to update the display with rainbow colors.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom itertools import cycle\nfrom time import monotonic\n\nfrom rich.color import Color\nfrom rich.style import Style\n\nfrom textual.app import App, ComposeResult\nfrom textual.color import rgb\nfrom textual.containers import Container\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Footer\n\n\nCOLORS = [\n    \"#FF0000\",\n    \"#FF7F00\",\n    \"#FFFF00\",\n    \"#00FF00\",\n    \"#0000FF\",\n    \"#8B00FF\",\n]\n\n\nclass Rainbow(Widget):\n    def on_mount(self) -> None:\n        self.auto_refresh = 0.1\n\n    def render(self) -> str:\n        return \"\\n\".join(\n            \"█\" * (self.size.width + 1) for _ in range(self.size.height + 1)\n        )\n\n\nclass Pride(App):\n    CSS = \"\"\"\n    Rainbow {\n        height: 1fr;\n    }\n    #one {\n        width: 5;\n    }\n    #two {\n        width: 3;\n    }\n    #three {\n        width: 1fr;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield Container(Rainbow(id=\"one\"), Rainbow(id=\"two\"), Rainbow(id=\"three\"))\n        yield Footer()\n\n    color_cycle = cycle(COLORS)\n    color = reactive(next(color_cycle))\n    messages = cycle([\"LOVE\", \"IS\", \"LOVE\"])\n    message = reactive(next(messages))\n    start_time = reactive(monotonic)\n\n    def on_mount(self) -> None:\n        self.auto_refresh = 0.1\n\n    def watch_color(self, color: str) -> None:\n        self.screen.styles.background = Color.parse(color)\n        self.query_one(\"#one\").styles.background = Color.parse(color)\n        time_elapsed = monotonic() - self.start_time\n        self.screen.styles.animate(\"background\", Color.parse(next(self.color_cycle)), duration=0.3)\n        if time_elapsed > 0.8:\n            self.color = next(self.color_cycle)\n            self.start_time = monotonic()\n\n    def watch_message(self, message: str) -> None:\n        self.screen.title = message\n        self.screen.styles.animate(\"color\", next(self.color_cycle), duration=2)\n        self.message = next(self.messages)\n\n\nif __name__ == \"__main__\":\n    app = Pride()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Increasing Console Verbosity\nDESCRIPTION: Demonstrates how to increase the verbosity of the Textual debug console.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntextual console -v\n```\n\n----------------------------------------\n\nTITLE: Layout Update with Reactive Attribute in Python\nDESCRIPTION: Demonstrates how to use the layout parameter in reactive attributes to update the widget's size when the attribute changes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Name(Static):\n    who = reactive(\"\", layout=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Modes in Python using Textual\nDESCRIPTION: This example demonstrates how to implement modes in a Textual application. It defines three screens (Dashboard, Settings, Help) and allows switching between them using key bindings.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.screen import Screen\nfrom textual.widgets import Header, Footer, Static\n\nclass DashboardScreen(Screen):\n    def compose(self) -> ComposeResult:\n        yield Container(Static(\"Dashboard\"))\n\nclass SettingsScreen(Screen):\n    def compose(self) -> ComposeResult:\n        yield Container(Static(\"Settings\"))\n\nclass HelpScreen(Screen):\n    def compose(self) -> ComposeResult:\n        yield Container(Static(\"Help\"))\n\nclass ModesApp(App):\n    CSS_PATH = \"modes01.css\"\n    BINDINGS = [\n        (\"d\", \"switch_mode('dashboard')\", \"Dashboard\"),\n        (\"s\", \"switch_mode('settings')\", \"Settings\"),\n        (\"h\", \"switch_mode('help')\", \"Help\"),\n        (\"q\", \"quit\", \"Quit\"),\n    ]\n    MODES = {\n        \"dashboard\": DashboardScreen(),\n        \"settings\": SettingsScreen(),\n        \"help\": HelpScreen(),\n    }\n    DEFAULT_MODE = \"dashboard\"\n\n    def compose(self) -> ComposeResult:\n        yield Header()\n        yield Footer()\n\n    def on_mount(self) -> None:\n        self.switch_mode(\"dashboard\")\n\nif __name__ == \"__main__\":\n    app = ModesApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Defining Layers and Assigning Widgets in Textual CSS\nDESCRIPTION: Textual CSS (.tcss) file demonstrating how to define layout layers using the 'layers' property on a container and assign widgets to specific layers using the 'layer' property. This controls the stacking order, overriding the default yield order. Lines 3, 14, and 19 are highlighted, showing the layer definition and assignments.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/layers.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Component Classes Documentation Block for DataTable in Markdown\nDESCRIPTION: This Markdown snippet uses a documentation block directive to include information about component classes provided by the DataTable widget. The options hide the root heading and table of contents entry, signaling internal tools to display relevant content dynamically. Developers must rely on the Textual documentation system for proper expansion of this block during site build.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.widgets.DataTable.COMPONENT_CLASSES\\n    options:\\n      show_root_heading: false\\n      show_root_toc_entry: false\n```\n\n----------------------------------------\n\nTITLE: Combining Layout Techniques in a Textual App (Python)\nDESCRIPTION: Python code for a Textual application showcasing the combination of multiple layout techniques. The specific techniques (e.g., containers, grids, docking, layers, offsets) are implemented structurally here and detailed visually via the associated CSS file ('combining_layouts.tcss'). Dependencies: Textual library.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/combining_layouts.py\"\n```\n\n----------------------------------------\n\nTITLE: Modal Dialog Screen Implementation\nDESCRIPTION: Implements a modal quit confirmation dialog using basic Screen class with custom styling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/screens/modal01.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/screens/modal01.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Awaiting Widget Mount in a Textual App\nDESCRIPTION: This example shows how to await the mounting of a widget before modifying it. It mounts a Welcome widget and changes its button label after ensuring the mount is complete.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App\nfrom textual.widgets import Button, Welcome\n\nclass WelcomeApp(App):\n    async def on_key(self) -> None:\n        await self.mount(Welcome())\n        self.query_one(Button).label = \"YES!\"\n\nif __name__ == \"__main__\":\n    app = WelcomeApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Using data_bind for Reactive Attributes in Textual (Python)\nDESCRIPTION: Refactors the `WorldClockApp` to use `data_bind(WorldClockApp.time)` when yielding `WorldClock` instances. This automatically updates the `time` attribute of each `WorldClock` when the app's `time` changes, removing the need for the explicit `watch_time` method. Highlighted lines show the `data_bind` calls. Requires the `pytz` library.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"34-36\"\n--8<-- \"docs/examples/guide/reactivity/world_clock02.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining and Using CSS Variables in Textual\nDESCRIPTION: Examples of defining and using CSS variables in Textual. This demonstrates creating a border variable and applying it to an element.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n$border: wide green;\n\n#foo {\n  border: $border;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ListView - CSS\nDESCRIPTION: CSS styling rules for customizing the appearance of the ListView widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/list_view.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/list_view.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Event Handler with Event Parameter in Textual\nDESCRIPTION: Demonstrates defining an event handler that receives the event object, allowing access to event-specific data like the button that was pressed.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@on(Button.Pressed)\ndef on_button_pressed(self, event: Button.Pressed) -> None:\n    pressed_button = event.button\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Multiple Widgets with Query Objects in Textual\nDESCRIPTION: Demonstrates how to use query objects to modify multiple widgets without explicit loops, using methods like add_class.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nself.query(\"Button\").add_class(\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Processing LLM Response and Updating UI in Python\nDESCRIPTION: Sends the user's prompt to the language model, receives the response in chunks, and updates the UI in real-time. Uses a threaded worker for asynchronous processing.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    @work(thread=True)\n    def send_prompt(self, prompt: str, response: Response) -> None:\n        response_content = \"\"\n        llm_response = self.model.prompt(prompt, system=SYSTEM)\n        for chunk in llm_response:\n            response_content += chunk\n            self.call_from_thread(response.update, response_content)\n```\n\n----------------------------------------\n\nTITLE: Styling Content Programmatically\nDESCRIPTION: Shows how to apply styles to Content using the stylize method\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ncontent = Content(\"Hello, World!\")\ncontent = content.stylize(7, 12, \"bold\")\n```\n\n----------------------------------------\n\nTITLE: Declaring an Asynchronous Worker in Textual (Python)\nDESCRIPTION: This snippet shows how to define an asynchronous worker function in Textual. It uses the `@work` decorator (implicitly `thread=False`) and marks the function `run_in_background` with `async`. This indicates the function should run asynchronously within Textual's main event loop, cooperative multitasking rather than in a separate thread.\nSOURCE: https://github.com/textualize/textual/blob/main/questions/worker-thread-error.question.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@work()\nasync def run_in_background():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Composing Tabbed Content with TabPane Widgets (Textual, Python)\nDESCRIPTION: Shows an alternative approach to creating TabbedContent: wrapping each content panel in a TabPane, specifying the tab title as the first argument. Requires the Textual Python library with TabbedContent, TabPane, and Markdown widgets. The compose method sets up tab titles and content, outputting a tabbed UI with labeled panes, each rendered with Markdown.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabbed_content.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef compose(self) -> ComposeResult:\n    with TabbedContent():\n        with TabPane(\"Leto\"):\n            yield Markdown(LETO)\n        with TabPane(\"Jessica\"):\n            yield Markdown(JESSICA)\n        with TabPane(\"Paul\"):\n            yield Markdown(PAUL)\n```\n\n----------------------------------------\n\nTITLE: Composing UI Layout for AI Chat TUI in Python\nDESCRIPTION: Defines the layout of the AI chat TUI using Textual's compose method. Includes a header, scrollable chat view, input field, and footer.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    def compose(self) -> ComposeResult:\n        yield Header()\n        with VerticalScroll(id=\"chat-view\"):\n            yield Response(\"INTERFACE 2037 READY FOR INQUIRY\")\n        yield Input(placeholder=\"How can I help you?\")\n        yield Footer()\n```\n\n----------------------------------------\n\nTITLE: Basic Key Event Handling in Python with Textual\nDESCRIPTION: Example showing how to handle keyboard events in a Textual application using a RichLog widget to display key presses.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/input/key01.py\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for Screen Results in Python using Textual\nDESCRIPTION: This example demonstrates how to use push_screen_wait() to ask a question and wait for the user's response. It uses a worker to prevent blocking the app while waiting for the screen result.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Center\nfrom textual.screen import Screen\nfrom textual.widgets import Button, Label\nfrom textual.worker import Worker, get_current_worker\n\nclass QuestionScreen(Screen[bool]):\n    def __init__(self, question: str):\n        self.question = question\n        super().__init__()\n\n    def compose(self) -> ComposeResult:\n        yield Center(\n            Label(self.question),\n            Button(\"Yes\", id=\"yes\", variant=\"success\"),\n            Button(\"No\", id=\"no\", variant=\"error\"),\n        )\n\n    def on_button_pressed(self, event: Button.Pressed) -> None:\n        if event.button.id == \"yes\":\n            self.dismiss(True)\n        else:\n            self.dismiss(False)\n\nclass QuestionApp(App[None]):\n    CSS_PATH = \"questions01.tcss\"\n\n    def compose(self) -> ComposeResult:\n        yield Label()\n\n    @work\n    async def on_mount(self) -> None:\n        label = self.query_one(Label)\n        worker = get_current_worker()\n        result = await self.push_screen_wait(QuestionScreen(\"Do you like Python?\"))\n        label.update(f\"You answered {'yes' if result else 'no'}\")\n\nif __name__ == \"__main__\":\n    app = QuestionApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a Custom Theme in Python\nDESCRIPTION: This snippet demonstrates how to create a custom theme called 'arctic' and register it within a Textual app. It defines base colors and additional variables for the theme.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/design.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.theme import Theme\n\narctic_theme = Theme(\n    name=\"arctic\",\n    primary=\"#88C0D0\",\n    secondary=\"#81A1C1\",\n    accent=\"#B48EAD\",\n    foreground=\"#D8DEE9\",\n    background=\"#2E3440\",\n    success=\"#A3BE8C\",\n    warning=\"#EBCB8B\",\n    error=\"#BF616A\",\n    surface=\"#3B4252\",\n    panel=\"#434C5E\",\n    dark=True,\n    variables={\n        \"block-cursor-text-style\": \"none\",\n        \"footer-key-foreground\": \"#88C0D0\",\n        \"input-selection-background\": \"#81a1c1 35%\",\n    },\n)\n\nfrom textual.app import App\n\nclass MyApp(App):\n    def on_mount(self) -> None:\n        # Register the theme\n        self.register_theme(arctic_theme)  # (1)!\n\n        # Set the app's theme\n        self.theme = \"arctic\"  # (2)!\n```\n\n----------------------------------------\n\nTITLE: Using Rich's inspect function with full help documentation\nDESCRIPTION: Demonstrates how to get a complete, unabbreviated help report for an object by using both methods=True and help=True parameters with the inspect function.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/rich-inspect.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> inspect(text_file, methods=True, help=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Colors in Textual Python Application\nDESCRIPTION: This snippet demonstrates different ways to set colors for widgets in a Textual application. It uses named colors, hex colors, and RGB decimal colors to style three Static widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nfrom textual.color import Color\n\nclass ColorsApp(App):\n    def compose(self) -> ComposeResult:\n        yield Static(\"Named color: crimson\", id=\"named\")\n        yield Static(\"Hex color: #9932CC (dark orchid)\", id=\"hex\")\n        yield Static(\"RGB color: rgb(50,205,50) (limegreen)\", id=\"rgb\")\n\n    def on_mount(self) -> None:\n        named = self.query_one(\"#named\")\n        hex = self.query_one(\"#hex\")\n        rgb = self.query_one(\"#rgb\")\n\n        named.styles.color = \"crimson\"\n        hex.styles.color = \"#9932CC\"\n        rgb.styles.color = \"rgb(50,205,50)\"\n\nif __name__ == \"__main__\":\n    app = ColorsApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Styling DataTable Cells with Rich Renderables in Textual (Python)\nDESCRIPTION: This code example shows how to use Rich Text renderables (such as Text) to style and justify DataTable cell content. By assigning styled Rich objects instead of plain strings, developers can customize cell appearance with color, boldness, alignment, etc. Dependencies include both Textual and Rich libraries, and you must ensure your DataTable cell values are Rich renderables. This allows enhanced cell presentation in terminal UIs, though you must manage Rich objects for advanced formatting.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\\n--8<-- \\\"docs/examples/widgets/data_table_renderables.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Mounting Widgets Dynamically in a Textual App\nDESCRIPTION: This snippet demonstrates how to dynamically mount widgets in response to events. It adds a Welcome widget each time a key is pressed.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App\nfrom textual.widgets import Welcome\n\nclass WelcomeApp(App):\n    def on_key(self) -> None:\n        self.mount(Welcome())\n\nif __name__ == \"__main__\":\n    app = WelcomeApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Creating and Handling System Commands in Textual\nDESCRIPTION: Demonstrates the process of creating a system command handler that registers with the App's runtime. The code shows how to implement the @system_command decorator to handle a command with a specific name and process arguments.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/system_commands_source.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@system_command(\"command\")\ndef command_handler(self, command: Callable, args=None) -> None:\n    \"\"\"Handler for the command.\n\n    Args:\n        command: The command.\n        args: Optional arguments string.\n    \"\"\"\n    if args:\n        # Do something with args\n        ...\n    else:\n        # Do something without args\n        ...\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to a Textual App\nDESCRIPTION: Example demonstrating how to create a Textual app that accepts initialization arguments. Shows how to override __init__ to accept custom parameters that can be used within the app.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass Greetings(App[None]):\n\n    def __init__(self, greeting: str=\"Hello\", to_greet: str=\"World\") -> None:\n        self.greeting = greeting\n        self.to_greet = to_greet\n        super().__init__()\n\n    def compose(self) -> ComposeResult:\n        yield Static(f\"{self.greeting}, {self.to_greet}\")\n```\n\n----------------------------------------\n\nTITLE: Custom Alert Widget Definition\nDESCRIPTION: Example showing how to create a custom widget class extending Static with CSS inheritance.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.widgets import Static\n\nclass Alert(Static):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using FR Units for Flexible Spacing in Textual Layout\nDESCRIPTION: This snippet demonstrates the use of fr units to create a flexible central area in the layout. The ColumnsContainer is set to occupy all remaining space after the header and footer.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ColumnsContainer(Placeholder):\n    DEFAULT_CSS = \"\"\"\n    ColumnsContainer {\n        width: 1fr;\n        height: 1fr;\n        border: solid green;\n    }\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Key Bindings in Textual\nDESCRIPTION: Example demonstrating how to bind keys to actions in a Textual application with both Python implementation and CSS styling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/input/binding01.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/input/binding01.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Installing Textual with Syntax Highlighting Support\nDESCRIPTION: Installation command for Textual with syntax highlighting extras for TextArea widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"textual[syntax]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing World Clock without Data Binding in Textual (Python)\nDESCRIPTION: Defines a `WorldClock` widget and a `WorldClockApp`. The app updates the `time` reactive attribute of each `WorldClock` instance manually within a `watch_time` method whenever the app's own `time` attribute changes. This example illustrates the scenario before applying data binding. Requires the `pytz` library.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n```python\n--8<-- \"docs/examples/guide/reactivity/world_clock01.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Button Widget Example Implementation - Python\nDESCRIPTION: Example implementation showing different button variants and their disabled states with event handling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/button.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/button.py\"\n```\n\n----------------------------------------\n\nTITLE: Textual App with CSS Path\nDESCRIPTION: Example showing how to link a CSS file to a Textual application using CSS_PATH classvar.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/dom4.py\"\n```\n\n----------------------------------------\n\nTITLE: Creating SelectionList from Selection Objects in Python\nDESCRIPTION: Provides the Python code reference for initializing a `SelectionList` widget using instances of the `Selection` class. This approach offers more explicit control over each selection item (prompt, value, initial state, id). The actual code is included from the specified file path (`docs/examples/widgets/selection_list_selections.py`). Note the type hint `SelectionList[int]` matching the integer values.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n~~~python\n--8<-- \"docs/examples/widgets/selection_list_selections.py\"\n~~~\n```\n\n----------------------------------------\n\nTITLE: Creating a TextArea with 'dracula' Theme (Python)\nDESCRIPTION: Initializes a code editor-ready TextArea widget with preset options: code content, language highlighting set to 'python', and using the 'dracula' color theme. Uses the convenience constructor 'TextArea.code_editor', which typically disables soft-wrapping and enables line numbers. The call should be part of a generator (e.g., in a textual app's compose method) using 'yield'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create a TextArea with the 'dracula' theme.\\nyield TextArea.code_editor(\\\"print(123)\\\", language=\\\"python\\\", theme=\\\"dracula\\\")\n```\n\n----------------------------------------\n\nTITLE: Composing Widgets in a Textual App\nDESCRIPTION: This example shows how to add widgets to a Textual app using the compose method. It imports and yields a Welcome widget, and handles a button press event to exit the app.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App\nfrom textual.widgets import Welcome\n\nclass WelcomeApp(App):\n    def compose(self):\n        yield Welcome()\n\n    def on_button_pressed(self) -> None:\n        self.exit()\n\nif __name__ == \"__main__\":\n    app = WelcomeApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Tabs Widget Implementation in Textual\nDESCRIPTION: Shows implementation of navigable tabs with keyboard and mouse support.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_27\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/tabs.py\n```\n\n----------------------------------------\n\nTITLE: Defining Message Handlers with @on Decorator in Python\nDESCRIPTION: Demonstrates two equivalent ways of defining message handlers in Textual: using the @on decorator and using the naming convention.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@on(Button.Pressed)\ndef handle_button_pressed(self):\n    ...\n\ndef on_button_pressed(self):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Weather App with Worker State Logging - Python\nDESCRIPTION: Implementation showing how to handle and log worker state changes using event handlers.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/workers/weather04.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Link Widget - Textual Python\nDESCRIPTION: Example showing basic usage of the Link widget in a Textual application. The widget creates clickable text that opens URLs in a web browser when clicked.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/link.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/link.py\"\n```\n\n----------------------------------------\n\nTITLE: Horizontal Layout Example in Textual\nDESCRIPTION: Shows horizontal layout implementation where widgets are arranged left to right. Includes handling of horizontal overflow and scrollbars.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/horizontal_layout.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/horizontal_layout.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Appearance with CSS in Textual - Python\nDESCRIPTION: Demonstrates assigning a styled tooltip to a widget, with visual customization handled by CSS. Python code sets up the tooltip-enabled widget, possibly referencing custom tooltip classes or IDs styled in CSS. Requires Textual and the appropriate CSS to be loaded. Input is a widget with a custom tooltip; output is a customized visual tooltip on hover.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"tooltip02.py\\\" hl_lines=\\\"15-19\\\"\\n--8<-- \\\"docs/examples/guide/widgets/tooltip02.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling Table Width via get_content_width in Textual - Python\nDESCRIPTION: Modifies the FizzBuzz table example to set a fixed content width using the get_content_width override. Uses expand=True on the Table to fill the specified width. Requires Python with Textual and Rich installed. This provides more consistent table sizing in UI regardless of data, making the widget width always fit 50 characters. Inputs are the widget class and table setup; output is a visually wider table.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"fizzbuzz02.py\\\" hl_lines=\\\"10 21-23\\\"\\n--8<-- \\\"docs/examples/guide/widgets/fizzbuzz02.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Scanning Line Breaks in Large Files Using mmap\nDESCRIPTION: A method from Toolong that efficiently scans large files for line breaks using memory-mapped files. This technique allows handling gigabyte-sized files without loading them completely into memory.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/toolong-retrospective.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    def scan_line_breaks(\n        self, batch_time: float = 0.25\n    ) -> Iterable[tuple[int, list[int]]]:\n        \"\"\"Scan the file for line breaks.\n\n        Args:\n            batch_time: Time to group the batches.\n\n        Returns:\n            An iterable of tuples, containing the scan position and a list of offsets of new lines.\n        \"\"\"\n        fileno = self.fileno\n        size = self.size\n        if not size:\n            return\n        log_mmap = mmap.mmap(fileno, size, prot=mmap.PROT_READ)\n        rfind = log_mmap.rfind\n        position = size\n        batch: list[int] = []\n        append = batch.append\n        get_length = batch.__len__\n        monotonic = time.monotonic\n        break_time = monotonic()\n\n        while (position := rfind(b\"\\n\", 0, position)) != -1:\n            append(position)\n            if get_length() % 1000 == 0 and monotonic() - break_time > batch_time:\n                break_time = monotonic()\n                yield (position, batch)\n                batch = []\n                append = batch.append\n        yield (0, batch)\n        log_mmap.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Blocking UI in Textual with time.sleep\nDESCRIPTION: A Textual application that demonstrates the problem of blocking UI. When the user presses 'l', the application becomes unresponsive for 5 seconds while executing a time.sleep call, preventing interaction with the ColourChanger widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/responsive-app-background-task.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/blog/snippets/2022-12-07-responsive-app-background-task/blocking01.py\"\n```\n\n----------------------------------------\n\nTITLE: Styling FizzBuzz Table Widget with Custom CSS - CSS\nDESCRIPTION: Provides CSS styling for the FizzBuzz widget displayed in the previous Python example. The CSS targets the visual properties (such as colors, layout, or spacing) of the widget within the Textual app. No runtime dependencies other than being loaded via the Textual app. Inputs and outputs are the appearance of the widget defined by the selectors and properties set in this CSS file. Assumes the context of a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n```css title=\\\"fizzbuzz01.tcss\\\" hl_lines=\\\"32-35\\\"\\n--8<-- \\\"docs/examples/guide/widgets/fizzbuzz01.tcss\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Question Screen in Textual CSS\nDESCRIPTION: This CSS snippet provides styling for the question screen in the Textual application. It sets the layout, spacing, and button styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nScreen {\n    align: center middle;\n}\n\nCenter {\n    width: 30;\n    height: auto;\n    background: $boost;\n    border: thick $background 80%;\n    padding: 1 2;\n}\n\nButton {\n    width: 1fr;\n    margin-top: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Textual App with CSS Styling for AI Chat TUI in Python\nDESCRIPTION: Defines the main application class for the AI chat TUI, including auto-focus configuration and CSS styling for the Prompt and Response widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MotherApp(App):\n    AUTO_FOCUS = \"Input\"\n\n    CSS = \"\"\"\n    Prompt {\n        background: $primary 10%;\n        color: $text;\n        margin: 1;        \n        margin-right: 8;\n        padding: 1 2 0 2;\n    }\n\n    Response {\n        border: wide $success;\n        background: $success 10%;   \n        color: $text;             \n        margin: 1;      \n        margin-left: 8; \n        padding: 1 2 0 2;\n    }\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Registering Java Language for TextArea Syntax Highlighting in Python\nDESCRIPTION: This code snippet shows how to register Java as a language for syntax highlighting in a TextArea widget. It includes setting up the Language object, loading the highlight query, and creating a TextArea with Java support.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/text_area_custom_language.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Language for Syntax Highlighting in TextArea - Python\nDESCRIPTION: Programmatically sets the syntax highlighting language for a TextArea instance to Markdown. This enables syntax highlighting if the 'syntax' dependencies are installed and the relevant tree-sitter language is supported. The 'language' attribute accepts supported language strings and applies highlighting on update. Can be used after setting text content or when changing document type.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Set the language to Markdown\\ntext_area.language = \\\"markdown\\\"\n```\n\n----------------------------------------\n\nTITLE: Implementing an Inline Text Editor with Textual\nDESCRIPTION: This Python example creates an inline code editor using Textual. The app renders a TextArea widget with Python syntax highlighting and sets it to automatically adjust its height up to 50% of the viewport. The app runs in inline mode, making it appear directly under the terminal prompt.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/inline-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import TextArea\n\n\nclass InlineApp(App):\n    CSS = \"\"\"\n    TextArea {\n        height: auto;\n        max-height: 50vh;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield TextArea(language=\"python\")\n\n\nif __name__ == \"__main__\":\n    InlineApp().run(inline=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Message in Python for Textual\nDESCRIPTION: This code snippet demonstrates how to create a custom message class within a widget for Textual applications. It includes a ColorButton widget that sends a custom Selected message when clicked.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ColorButton(Button):\n    class Selected(Message):\n        def __init__(self, color: Color) -> None:\n            self.color = color\n            super().__init__()\n\n    def __init__(self, color: Color) -> None:\n        super().__init__(color.name)\n        self.color = color\n\n    def on_click(self) -> None:\n        self.post_message(self.Selected(self.color))\n```\n\n----------------------------------------\n\nTITLE: MarkdownViewer Widget Implementation in Textual\nDESCRIPTION: Demonstrates a markdown viewer with table of contents and navigation features.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_12\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/markdown_viewer.py\n```\n\n----------------------------------------\n\nTITLE: Dynamic Default for Reactive Attribute in Python\nDESCRIPTION: Shows how to use a function as a dynamic default value for a reactive attribute. In this case, the current time is used as the default value for start_time.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom time import time\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\n\nclass Timer(Widget):\n\n    start_time = reactive(time)  # (1)!\n```\n\n----------------------------------------\n\nTITLE: SelectionList Widget Implementation in Textual\nDESCRIPTION: Demonstrates multiple-selection functionality from a list of options.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_24\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/selection_list_selections.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Recompose Pattern in Python with Textual\nDESCRIPTION: Demonstrates using recompose=True to handle widget updates when reactive attributes change. The example shows how to rebuild child widgets when the 'who' attribute changes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/reactivity/refresh03.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/reactivity/refresh03.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Pretty Widget Example Code\nDESCRIPTION: Example showing how to use the Pretty widget to display a formatted dictionary or any Python object in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/pretty.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/pretty.py\"\n```\n\n----------------------------------------\n\nTITLE: CSS Pseudo-class Selector for State-based Styling\nDESCRIPTION: CSS rule using a pseudo-class selector to style a Button widget when hovered. This changes the background to green on hover.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\nButton:hover {\n  background: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for a Stopwatch App\nDESCRIPTION: CSS file for styling a stopwatch application with background colors, dimensions, and layout settings. Uses Textual's CSS dialect to define appearance of widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/tutorial/stopwatch03.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Widget by ID in Python\nDESCRIPTION: Demonstrates how to use query_one to retrieve a single widget with a specific ID. It also shows how to specify the expected widget type for type checking.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsend_button = self.query_one(\"#send\")\n\nsend_button = self.query_one(\"#send\", Button)\n```\n\n----------------------------------------\n\nTITLE: RadioButton Widget Implementation in Textual\nDESCRIPTION: Shows implementation of a basic radio button control.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_19\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/radio_button.py\n```\n\n----------------------------------------\n\nTITLE: RadioSet Widget Implementation in Textual\nDESCRIPTION: Demonstrates a collection of radio buttons with enforced uniqueness.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_20\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/radio_set.py\n```\n\n----------------------------------------\n\nTITLE: Including Nested Collapsible Example Code (Python)\nDESCRIPTION: Directive to include the Python source code for the nested `Collapsible` widget example from 'docs/examples/widgets/collapsible_nested.py'. The `hl_lines=\"7\"` indicates that line 7 is highlighted in the documentation rendering, likely showing where an initial state is set.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"7\"\n--8<-- \"docs/examples/widgets/collapsible_nested.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Activating a Registered Theme on TextArea in Python\nDESCRIPTION: Demonstrates how to switch the active theme of a `TextArea` instance (`text_area`) by assigning the desired theme's name (a string) to the `theme` attribute. This example activates the previously registered 'my_cool_theme'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntext_area.theme = \"my_cool_theme\"\n```\n\n----------------------------------------\n\nTITLE: Auto-sizing Grid Columns in Textual\nDESCRIPTION: Implements auto-sizing for the first column while maintaining fixed proportions for others. The auto column adjusts its width based on content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhl_lines=\"6 9\"\n--8<-- \"docs/examples/guide/layout/grid_layout_auto.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\nhl_lines=\"4\"\n--8<-- \"docs/examples/guide/layout/grid_layout_auto.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Textual App with Header and Footer\nDESCRIPTION: Enhanced Textual application adding Header and Footer widgets to demonstrate DOM hierarchy.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/dom2.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Data Flow in Byte Editor\nDESCRIPTION: This snippet completes the byte editor implementation by adding bidirectional data flow. It updates switches when the decimal input changes and ensures proper synchronization between binary and decimal representations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Horizontal, Vertical\nfrom textual.message import Message\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, Input, Label, Switch\n\n\nclass BitSwitch(Vertical):\n    class BitChanged(Message):\n        def __init__(self, switch: \"BitSwitch\", value: bool) -> None:\n            self.switch = switch\n            self.value = value\n            super().__init__()\n\n    value = reactive(False)\n\n    def __init__(self, bit: int):\n        super().__init__()\n        self.bit = bit\n\n    def compose(self) -> ComposeResult:\n        yield Label(str(self.bit))\n        yield Switch()\n\n    def on_mount(self) -> None:\n        self.styles.width = 8\n        self.styles.height = 5\n\n    def on_switch_changed(self, event: Switch.Changed) -> None:\n        event.stop()\n        self.value = event.value\n\n    def watch_value(self, value: bool) -> None:\n        self.post_message(self.BitChanged(self, value))\n\n\nclass ByteInput(Horizontal):\n    def compose(self) -> ComposeResult:\n        for bit in range(8):\n            yield BitSwitch(7 - bit)\n\n\nclass ByteEditor(App):\n    CSS = \"\"\"\n    ByteInput {\n        width: 70;\n        height: 7;\n        border: heavy $primary;\n    }\n    ByteInput:focus-within {\n        border: heavy $accent;\n    }\n    Input {\n        width: 70;\n    }\n    BitSwitch {\n        width: 8;\n        height: 5;\n    }\n    BitSwitch > Label {\n        text-align: center;\n        height: 1;\n    }\n    \"\"\"\n\n    value = reactive(0)\n\n    def compose(self) -> ComposeResult:\n        yield ByteInput()\n        yield Input(placeholder=\"Enter decimal value\")\n\n    def on_mount(self) -> None:\n        self.update_switches()\n\n    def compute_value(self) -> int:\n        value = 0\n        for bit, switch in enumerate(self.query(BitSwitch)):\n            if switch.value:\n                value |= 1 << bit\n        return value\n\n    def on_bit_switch_bit_changed(self, message: BitSwitch.BitChanged) -> None:\n        self.value = self.compute_value()\n\n    def update_switches(self) -> None:\n        for bit, switch in enumerate(self.query(BitSwitch)):\n            switch.value = bool(self.value & (1 << bit))\n\n    def watch_value(self, value: int) -> None:\n        value = max(0, min(value, 255))\n        self.query_one(Input).value = str(value)\n        self.update_switches()\n\n    def on_input_changed(self, event: Input.Changed) -> None:\n        try:\n            self.value = int(event.value)\n        except ValueError:\n            self.value = 0\n\n\napp = ByteEditor()\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Movement Tracking in Python with Textual\nDESCRIPTION: Example demonstrating how to track mouse movements and attach a widget to the mouse cursor position. The code shows the implementation of mouse event handling including mouse capture initialization.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntitle=\"mouse01.py\" hl_lines=\"17-19\"\n--8<-- \"docs/examples/guide/input/mouse01.py\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Widget Example Implementation\nDESCRIPTION: Example demonstrating how to use the Markdown widget to display Markdown content from a string.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/markdown.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/markdown.py\"\n```\n\n----------------------------------------\n\nTITLE: Styling ContentSwitcher Interface with TCSS\nDESCRIPTION: CSS styling rules for the ContentSwitcher widget interface using Textual's CSS-like styling system (TCSS).\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/content_switcher.md#2025-04-22_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--8<-- \"docs/examples/widgets/content_switcher.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Validation for Reactive Attributes in Python\nDESCRIPTION: Shows how to implement validation for reactive attributes using a validate_ method. This example keeps a count within a specified range.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Horizontal\nfrom textual.widgets import Button, Static\nfrom textual.reactive import reactive\n\nclass Counter(Static):\n    count = reactive(0)\n\n    def compose(self) -> ComposeResult:\n        yield Static()\n        yield Horizontal(\n            Button(\"-\", id=\"minus\"),\n            Button(\"+\", id=\"plus\")\n        )\n\n    def validate_count(self, value: int) -> int:\n        if value < 0:\n            return 0\n        if value > 10:\n            return 10\n        return value\n\n    def on_button_pressed(self, event: Button.Pressed) -> None:\n        if event.button.id == \"plus\":\n            self.count += 1\n        else:\n            self.count -= 1\n\n    def watch_count(self, value: int) -> None:\n        self.query_one(Static).update(f\"Count = {value}\")\n\nclass ValidateApp(App):\n    def compose(self) -> ComposeResult:\n        yield Counter()\n```\n\n----------------------------------------\n\nTITLE: Grid Layout Implementation in Textual\nDESCRIPTION: Shows implementation of grid layouts with fixed and dynamic row configurations. Demonstrates basic grid usage with multiple widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/grid_layout1.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/grid_layout1.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Implementing an Option List with Rich Tables in Textual\nDESCRIPTION: This Python code example illustrates how to create an OptionList in Textual that displays Rich tables as items. It showcases the flexibility of the OptionList widget in rendering complex Rich renderables.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-17-0.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/option_list_tables.py\" columns=\"100\" lines=\"32\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Composing Tabbed Content with Titles (Textual, Python)\nDESCRIPTION: Illustrates initializing a TabbedContent widget by passing tab titles as positional arguments to its constructor. Requires the Textual Python framework with widgets TabbedContent and Markdown imported. The compose method yields Markdown widgets with content variables tied to each tab. Inputs are the tab titles ('Leto', 'Jessica', 'Paul') and respective Markdown content; output is a tabbed interface with one visible panel at a time.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabbed_content.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef compose(self) -> ComposeResult:\n    with TabbedContent(\"Leto\", \"Jessica\", \"Paul\"):\n        yield Markdown(LETO)\n        yield Markdown(JESSICA)\n        yield Markdown(PAUL)\n```\n\n----------------------------------------\n\nTITLE: Adding Columns and Content to Textual Layout\nDESCRIPTION: This final snippet demonstrates how to add columns and content to the layout. It defines a Column class extending VerticalScroll and a Tweet placeholder, then adds multiple columns and tweets to the layout.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.containers import VerticalScroll\n\nclass Column(VerticalScroll):\n    DEFAULT_CSS = \"\"\"\n    Column {\n        width: 32;\n        height: 1fr;\n        border: solid red;\n    }\n    \"\"\"\n\nclass Tweet(Placeholder):\n    DEFAULT_CSS = \"\"\"\n    Tweet {\n        height: 5;\n        border: solid blue;\n    }\n    \"\"\"\n\nclass LayoutScreen(Container):\n    def compose(self) -> ComposeResult:\n        yield Header(id=\"header\")\n        with HorizontalScroll(id=\"columns\"):\n            for column_number in range(4):\n                with Column():\n                    for tweet_number in range(10):\n                        yield Tweet(f\"Tweet {column_number}.{tweet_number}\")\n        yield Footer(id=\"footer\")\n```\n\n----------------------------------------\n\nTITLE: Custom Key Method Handling in Textual\nDESCRIPTION: Demonstrates implementing a custom key handler method for the space key that triggers a terminal bell.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/input/key02.py\"\n```\n\n----------------------------------------\n\nTITLE: CSS Child Combinator for Direct Child Styling\nDESCRIPTION: CSS rule using the child combinator to style direct children of a specific element. This underlines Buttons that are direct children of an element with id 'sidebar'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n#sidebar > Button {\n  text-style: underline;\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Tabs Programmatically with the active Attribute (Textual, Python)\nDESCRIPTION: Explains how to programmatically switch the active tab by setting the 'active' reactive attribute of the TabbedContent widget. Requires that TabPane widgets have unique 'id' values, and uses self.query_one(TabbedContent) to reference the widget. Input is the target tab ID (here, 'jessica'), and the output is a UI update that makes that tab visible.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabbed_content.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Switch to Jessica tab\nself.query_one(TabbedContent).active = \"jessica\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating and Using a Textual Switch Widget (Python)\nDESCRIPTION: This snippet refers to an example implementation of the Switch widget using the Textual Python framework. It demonstrates how to create and display various states of a Switch in a Textual app. Requires the Textual library and proper configuration of the example file. Major parameters include the instantiation and state management of the switch; output is visual representation and interactive toggling. The code leverages Python's object-oriented features for UI composition, typically run as a standalone script.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/switch.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \\\"docs/examples/widgets/switch.py\\\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Snapshot Test for Textual App in Python\nDESCRIPTION: This snippet demonstrates how to create a basic snapshot test for a Textual app using the snap_compare fixture. It specifies the path to the Python file containing the app relative to the test location.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_calculator(snap_compare):\n    assert snap_compare(\"path/to/calculator.py\")\n```\n\n----------------------------------------\n\nTITLE: Testing RGB Color Change App\nDESCRIPTION: Sample test implementation demonstrating how to test a Textual app that changes background colors based on button clicks and key presses. Uses pytest and pytest-asyncio for async testing capabilities.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def test_keys():\n    app = RGBApp()\n    async with app.run_test() as pilot:\n        await pilot.press(\"r\")\n        assert app.query_one(\"Screen\").styles.background == \"red\"\n        await pilot.press(\"g\")\n        assert app.query_one(\"Screen\").styles.background == \"green\"\n        await pilot.press(\"b\")\n        assert app.query_one(\"Screen\").styles.background == \"blue\"\n\nasync def test_buttons():\n    app = RGBApp()\n    async with app.run_test() as pilot:\n        await pilot.click(\"#red\")\n        assert app.query_one(\"Screen\").styles.background == \"red\"\n        await pilot.click(\"#green\")\n        assert app.query_one(\"Screen\").styles.background == \"green\"\n        await pilot.click(\"#blue\")\n        assert app.query_one(\"Screen\").styles.background == \"blue\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Theme with TextArea in Python\nDESCRIPTION: Shows how to register a previously defined custom theme (`my_theme`) with an instance of the `TextArea` widget (`text_area`) using the `register_theme` method.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntext_area.register_theme(my_theme)\n```\n\n----------------------------------------\n\nTITLE: Querying the Last Widget of a Type in Textual\nDESCRIPTION: Shows how to use the last method on a query object to get the last widget of a specific type, with type checking.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlast_button = self.query(\"Button\").last()\n\ndisabled_button = self.query(\".disabled\").last(Button)\n```\n\n----------------------------------------\n\nTITLE: Defining a Textual App with Custom Init Arguments in Python\nDESCRIPTION: This snippet demonstrates how to create a custom Textual App class named `Greetings` that inherits from `textual.app.App`. It overrides the `__init__` method to accept `greeting` and `to_greet` string arguments with default values. These arguments are stored as instance attributes and used within the `compose` method to display a message using a `Static` widget. The `super().__init__()` call ensures the parent class is initialized correctly.\nSOURCE: https://github.com/textualize/textual/blob/main/questions/pass-args-to-app.question.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass Greetings(App[None]):\n\n    def __init__(self, greeting: str=\"Hello\", to_greet: str=\"World\") -> None:\n        self.greeting = greeting\n        self.to_greet = to_greet\n        super().__init__()\n\n    def compose(self) -> ComposeResult:\n        yield Static(f\"{self.greeting}, {self.to_greet}\")\n```\n\n----------------------------------------\n\nTITLE: Handling Messages with Arguments in Python\nDESCRIPTION: Examples of message handlers with and without arguments in Textual, demonstrating how to access message data.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef on_color_button_selected(self, message: ColorButton.Selected) -> None:\n    self.screen.styles.animate(\"background\", message.color, duration=0.5)\n\n@on(ColorButton.Selected)\ndef animate_background_color(self, message: ColorButton.Selected) -> None:\n    self.screen.styles.animate(\"background\", message.color, duration=0.5)\n\ndef on_color_button_selected(self) -> None:\n    self.app.bell()\n```\n\n----------------------------------------\n\nTITLE: Basic RadioSet Implementation in Python\nDESCRIPTION: A simple example demonstrating how to create and use RadioSet widgets with both RadioButton instances and strings.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radioset.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/radio_set.py\"\n```\n\n----------------------------------------\n\nTITLE: Abstracting Common Functionality for Rich Renderables (Python)\nDESCRIPTION: This code snippet shows an abstraction of common functionality for updating Rich renderables (spinners and progress bars) in Textual. It defines an IntervalUpdater class and specific implementations for progress bars and spinners.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.progress import Progress, BarColumn\nfrom rich.spinner import Spinner\n\nfrom textual.app import RenderableType\nfrom textual.widgets import Button, Static\n\n\nclass IntervalUpdater(Static):\n    _renderable_object: RenderableType  # (1)!\n\n    def update_rendering(self) -> None:  # (2)!\n        self.update(self._renderable_object)\n\n    def on_mount(self) -> None:  # (3)!\n        self.interval_update = self.set_interval(1 / 60, self.update_rendering)\n\n\nclass IndeterminateProgressBar(IntervalUpdater):\n    \"\"\"Basic indeterminate progress bar widget based on rich.progress.Progress.\"\"\"\n    def __init__(self) -> None:\n        super().__init__(\"\")\n        self._renderable_object = Progress(BarColumn())  # (4)!\n        self._renderable_object.add_task(\"\", total=None)\n\n\nclass SpinnerWidget(IntervalUpdater):\n    \"\"\"Basic spinner widget based on rich.spinner.Spinner.\"\"\"\n    def __init__(self, style: str) -> None:\n        super().__init__(\"\")\n        self._renderable_object = Spinner(style)  # (5)!\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Switching Interface with ContentSwitcher Widget in Python\nDESCRIPTION: Sample implementation demonstrating how to use ContentSwitcher widget with buttons to create a tabbed interface. Shows button click handling and content switching based on widget IDs.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/content_switcher.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/content_switcher.py\"\n```\n\n----------------------------------------\n\nTITLE: Typing Reactive Attributes in Python\nDESCRIPTION: Demonstrates how to add type hints to reactive attributes, especially when the attribute type is a superset of the default type.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    name: reactive[str | None] = reactive(\"Paul\")\n```\n\n----------------------------------------\n\nTITLE: ListView Implementation Example in Python\nDESCRIPTION: Example demonstrating basic usage of ListView with multiple ListItem elements, showing how to implement navigable list items.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/list_item.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/list_view.py\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Widgets from Query Results in Textual\nDESCRIPTION: Shows how to use the exclude method to remove specific widgets from query results.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbuttons_query = self.query(\"Button\")\nenabled_buttons = buttons_query.exclude(\".disabled\")\n```\n\n----------------------------------------\n\nTITLE: Watch Methods for Reactive Attributes in Python\nDESCRIPTION: Demonstrates the use of watch methods to respond to changes in reactive attributes. This example updates a color display based on user input.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.containers import Container\nfrom textual.reactive import reactive\nfrom textual.widgets import Input, Static\n\nclass ColorBox(Static):\n    DEFAULT_CSS = \"\"\"\n    ColorBox {\n        height: 100%;\n        width: 100%;\n    }\n    \"\"\"\n\n    color = reactive(Color(\"white\"))  # (1)!\n\n    def watch_color(self, old_color: Color, new_color: Color) -> None:  # (2)!\n        self.styles.background = new_color\n\nclass ColorApp(App):\n    def compose(self) -> ComposeResult:\n        yield Container(ColorBox())\n        yield Input(placeholder=\"Enter a color\")\n\n    @on(Input.Submitted)\n    def change_color(self, event: Input.Submitted) -> None:\n        color_box = self.query_one(ColorBox)\n        color_box.color = Color.parse(event.value)  # (3)!\n```\n\n----------------------------------------\n\nTITLE: Color Picker with Computed Attributes\nDESCRIPTION: Implements a color picker using computed attributes to combine RGB components and update display automatically.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/reactivity/computed01.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/reactivity/computed01.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Fixed Reactive Implementation with set_reactive\nDESCRIPTION: Demonstrates the correct way to set reactive attributes using set_reactive to avoid premature watcher invocation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/reactivity/set_reactive02.py\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Rich Spinner in Textual App (Python)\nDESCRIPTION: This snippet demonstrates how to create a custom SpinnerWidget to display a Rich spinner in a Textual app. It uses Rich's Spinner class and updates the display at regular intervals.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.spinner import Spinner\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nclass SpinnerWidget(Static):\n    def __init__(self):\n        super().__init__(\"\")\n        self._spinner = Spinner(\"moon\")  # (1)!\n\n    def on_mount(self) -> None:\n        self.update_render = self.set_interval(1 / 60, self.update_spinner)\n\n    def update_spinner(self) -> None:\n        self.update(self._spinner)\n\n\nclass MyApp(App[None]):\n    def compose(self) -> ComposeResult:\n        yield SpinnerWidget()\n\n\nMyApp().run()\n```\n\n----------------------------------------\n\nTITLE: Radio Button Implementation Example\nDESCRIPTION: Example showing radio buttons being used within a RadioSet component.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radiobutton.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/radio_button.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Padding in Textual\nDESCRIPTION: Demonstrates how to set uniform padding around a widget's content using an integer value.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/styles/padding01.py\"\n```\n\n----------------------------------------\n\nTITLE: Including DataTable Results with Heading Level Option in Markdown\nDESCRIPTION: This snippet inserts a documentation directive that imports and renders the DataTable class or relevant content with a specified heading level. It uses the documentation system's block syntax to control content format. Dependencies include the documentation pipeline parsing these directives from Markdown to HTML.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.widgets.DataTable\\n    options:\\n      heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Removing a Column below Cursor in DataTable with Textual (Python)\nDESCRIPTION: This code example shows how to delete the column currently under the cursor in a DataTable by mapping cursor_coordinate to a column key using coordinate_to_cell_key, and then calling remove_column. Requires an initialized DataTable widget and a valid cursor position over the desired column. This approach enables dynamic column removal based on current user context in the interactive UI.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\\n# Get the keys for the row and column under the cursor.\\n_, column_key = table.coordinate_to_cell_key(table.cursor_coordinate)\\n# Supply the column key to `column_row` to delete the column.\\ntable.remove_column(column_key)\\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Default CSS in a Custom Widget\nDESCRIPTION: This example shows how to include default CSS within a widget class using the DEFAULT_CSS class variable, which is useful for distributable widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass Hello(Static):\n    DEFAULT_CSS = \"\"\"\n    Hello {\n        width: 100%;\n        height: 3;\n        content-align: center middle;\n        background: darkblue;\n        color: white;\n    }\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.greetings = [\"Hello\", \"Bonjour\", \"Hola\", \"Guten Tag\", \"Ciao\"]\n        self.index = 0\n\n    def next_word(self) -> None:\n        self.index = (self.index + 1) % len(self.greetings)\n        self.update(self.greetings[self.index])\n\n    def on_mount(self) -> None:\n        self.next_word()\n\n    def on_click(self) -> None:\n        self.next_word()\n\nclass HelloApp(App):\n    def compose(self) -> ComposeResult:\n        yield Hello()\n```\n\n----------------------------------------\n\nTITLE: Static Title Configuration in Textual App\nDESCRIPTION: Example of setting static title and subtitle using class variables TITLE and SUB_TITLE.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/app/question_title01.py\"\n```\n\n----------------------------------------\n\nTITLE: Textual Dialog Implementation\nDESCRIPTION: Example showing how to build a dialog with containers, buttons and static content in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/dom3.py\"\n```\n\n----------------------------------------\n\nTITLE: Smart Refresh Example in Python\nDESCRIPTION: Illustrates the smart refresh feature of reactive attributes in a Textual app. The app updates a greeting based on user input, automatically refreshing when the reactive attribute changes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.widgets import Input, Static\nfrom textual.reactive import reactive\n\nclass Name(Static):\n    who = reactive(\"World\")\n\n    def compose(self) -> ComposeResult:\n        yield Static(\"Name: \")\n        yield Input()\n        yield Static()\n\n    def on_mount(self) -> None:\n        self.update_greeting()\n\n    def on_input_changed(self, event: Input.Changed) -> None:\n        self.who = event.value.strip() or \"World\"\n\n    def update_greeting(self) -> None:\n        self.query_one(Static).update(f\"Hello, {self.who}!\")\n\nclass ReactiveApp(App):\n    def compose(self) -> ComposeResult:\n        yield Container(Name())\n```\n\n----------------------------------------\n\nTITLE: ListView Widget Implementation in Textual\nDESCRIPTION: Shows how to implement a list view that can display other widgets as items.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_9\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/list_view.py\n```\n\n----------------------------------------\n\nTITLE: Mutable Reactive List Implementation\nDESCRIPTION: Shows how to properly handle mutable reactive attributes using mutate_reactive() to trigger updates.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/reactivity/set_reactive03.py\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Rows and Columns in Place with DataTable in Textual (Python)\nDESCRIPTION: This snippet illustrates pinning the top N rows and leftmost M columns in a DataTable by assigning integers to fixed_rows and fixed_columns. The fixed sections remain visible during scroll and cannot be moved by the user. Intended for use within a Textual DataTable context, it increases usability when working with large datasets. Requires the DataTable widget and suffices for spreadsheet-like fixed headings.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\\n--8<-- \\\"docs/examples/widgets/data_table_fixed.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: CSS Path Configuration in Textual App\nDESCRIPTION: Demonstrates how to configure an external CSS path in a Textual application using the CSS_PATH class variable.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/app/question02.py\"\n```\n\n----------------------------------------\n\nTITLE: Action Links Implementation\nDESCRIPTION: Example of using actions in markup links to trigger color changes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions03.py\"\n```\n\n----------------------------------------\n\nTITLE: Centering Text within a Widget using Text-Align in Python\nDESCRIPTION: This snippet shows how to center-align text within a Static widget using the 'text-align' rule. It also demonstrates setting a fixed width to the widget to force text wrapping.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/center-things.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nLONG_TEXT = \"\"\"This is a much longer piece of text that will wrap onto multiple lines. We use this to demonstrate how text alignment works.\"\"\"\n\nclass CenterApp(App):\n    def compose(self) -> ComposeResult:\n        yield Static(LONG_TEXT)\n\n    CSS = \"\"\"\n    Screen {\n        align: center middle;\n    }\n\n    Static {\n        width: 30;\n        background: blue;\n        border: solid white;\n        text-align: center;\n    }\n    \"\"\"\n\nif __name__ == \"__main__\":\n    app = CenterApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Complete Progress Bar Application - Python\nDESCRIPTION: Full application example showing a progress bar tracking funding levels with a total of 100 steps and hidden ETA countdown.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/progress_bar.py\"\n```\n\n----------------------------------------\n\nTITLE: Grid Gutter Configuration in Textual\nDESCRIPTION: Shows how to add spacing between grid cells using the grid-gutter property. Sets background colors to demonstrate the gutter effect.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/grid_layout7_gutter.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\nhl_lines=\"4\"\n--8<-- \"docs/examples/guide/layout/grid_layout7_gutter.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Palette Provider in Python for Textual\nDESCRIPTION: This code snippet demonstrates how to create a custom command provider for the Textual command palette. It implements a ColorCommands class that provides color selection commands, using fuzzy matching for search functionality.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0.37.0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ColorCommands(Provider):\n    \"\"\"A command provider to select colors.\"\"\"\n\n    async def search(self, query: str) -> Hits:\n        \"\"\"Called for each key.\"\"\"\n        matcher = self.matcher(query)\n        for color in COLOR_NAME_TO_RGB.keys():\n            score = matcher.match(color)\n            if score > 0:\n                yield Hit(\n                    score,\n                    matcher.highlight(color),\n                    partial(self.app.post_message, SwitchColor(color)),\n                )\n```\n\n----------------------------------------\n\nTITLE: Declaring an Asynchronous Worker in Textual\nDESCRIPTION: Example showing how to declare an asynchronous worker in Textual using the @work decorator without threading, which requires the function to be declared as async.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@work()\nasync def run_in_background():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Textual CSS Color Usage Examples\nDESCRIPTION: Examples of different ways to specify colors in Textual CSS, including named colors, variables, and HSL format.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/color.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nHeader {\n    background: red;           /* Color name */\n}\n\n.accent {\n    color: $accent;            /* Textual variable */\n}\n\n#footer {\n    tint: hsl(300, 20%, 70%);  /* HSL description */\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Cursor and Selecting Text Programmatically in TextArea - Python\nDESCRIPTION: Uses the move_cursor method of TextArea to set the cursor to a specific location while optionally selecting text. The 'move_cursor' method takes a target (row_index, column_index) and a 'select' flag. When 'select=True', text from the current position to the new location is selected. It can also scroll the view to keep the cursor visible.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Move the cursor from its current location to row index 4,\\n# column index 8, while selecting all the text between.\\ntext_area.move_cursor((4, 8), select=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Reactive Attributes Table in Markdown\nDESCRIPTION: This snippet uses a Markdown table to list and describe the reactive attributes available for the DataTable widget. It outlines attribute names, types, default values, and in-depth descriptions to help developers understand configuration options. The table does not require additional dependencies and serves as a human-readable reference without automatic parsing support.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                | Type                                        | Default            | Description                                           |\\n|---------------------|---------------------------------------------|--------------------|-------------------------------------------------------|\\n| `show_header`       | `bool`                                      | `True`             | Show the table header                                 |\\n| `show_row_labels`   | `bool`                                      | `True`             | Show the row labels (if applicable)                   |\\n| `fixed_rows`        | `int`                                       | `0`                | Number of fixed rows (rows which do not scroll)       |\\n| `fixed_columns`     | `int`                                       | `0`                | Number of fixed columns (columns which do not scroll) |\\n| `zebra_stripes`     | `bool`                                      | `False`            | Style with alternating colors on rows                 |\\n| `header_height`     | `int`                                       | `1`                | Height of header row                                  |\\n| `show_cursor`       | `bool`                                      | `True`             | Show the cursor                                       |\\n| `cursor_type`       | `str`                                       | \\\"cell\\\"           | One of \\\"cell\\\", \\\"row\\\", \\\"column\\\", or \\\"none\\\"     |\\n| `cursor_coordinate` | [Coordinate][textual.coordinate.Coordinate] | `Coordinate(0, 0)` | The current coordinate of the cursor                  |\\n| `hover_coordinate`  | [Coordinate][textual.coordinate.Coordinate] | `Coordinate(0, 0)` | The coordinate the _mouse_ cursor is above            |\n```\n\n----------------------------------------\n\nTITLE: Textual Output for SelectionList Created from Tuples\nDESCRIPTION: Represents the expected visual output in a terminal when running the associated Python script (`docs/examples/widgets/selection_list_tuples.py`), which creates a `SelectionList` using tuples. The `path` attribute points to the source file generating this output.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_1\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/selection_list_tuples.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling a Textual Clock App for Inline Mode\nDESCRIPTION: This snippet shows how to modify the appearance of a Textual clock app when running inline. It demonstrates the use of CSS with the :inline pseudo-selector to adjust the height, remove the border, and change the color of the clock.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/style-inline-apps.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nfrom textual.containers import Center\nfrom datetime import datetime\n\n\nclass ClockApp(App):\n    CSS = \"\"\"\n    Screen:inline {\n        height: 3\n        border: none\n    }\n\n    Static:inline {\n        color: $accent\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield Center(Static(datetime.now().time().strftime(\"%H:%M:%S\")))\n\n    def on_mount(self) -> None:\n        self.update_time()\n\n    def update_time(self) -> None:\n        clock = self.query_one(Static)\n        time = datetime.now().time()\n        clock.update(time.strftime(\"%H:%M:%S\"))\n        self.set_timer(1, self.update_time)\n\n\nif __name__ == \"__main__\":\n    app = ClockApp()\n    app.run(inline=True)\n```\n\n----------------------------------------\n\nTITLE: Basic DirectoryTree Usage\nDESCRIPTION: Example demonstrating how to create a simple tree navigation for the current working directory.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/directory_tree.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/directory_tree.py\"\n```\n\n----------------------------------------\n\nTITLE: Reactive Dynamic Actions\nDESCRIPTION: Shows how to implement dynamic actions using reactives for automatic binding updates.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions07.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions06.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Labeling Rows in DataTable for Textual (Python)\nDESCRIPTION: This snippet demonstrates attaching labels to rows in a DataTable using the add_row method, resulting in an extra, non-interactive leftmost column (useful for displaying row numbers or identifiers). Applies to DataTable instances initialized in Textual apps and is best used for display-oriented row labeling. The input is label data per row, and the output is a table with a labeled, fixed left column that cannot be navigated by cursor.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python\\n--8<-- \\\"docs/examples/widgets/data_table_labels.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Sparkline Widget Using Textual in Python\nDESCRIPTION: Demonstrates initializing and rendering a Sparkline widget to visually represent a sequence of numerical data using Textual (Python framework). The example shows how data is chunked based on widget width to display aggregated values as bars. Requires the 'textual' library and a CSS stylesheet to define widget dimensions (not included here). Expects a sequence of 12 numbers; the sparkline width is set to 3 via CSS, resulting in 3 bars, each representing the maximum of its chunk. Outputs a visual sparkline widget in a Textual TUI application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```\n--8<-- \\\"docs/examples/widgets/sparkline_basic.py\\\"\n```\n```\n\n----------------------------------------\n\nTITLE: Composing Collapsible Content via Context Manager (Python)\nDESCRIPTION: Illustrates the preferred method of adding child widgets to a `Collapsible` using a `with` statement within a Textual `compose` method. This approach is generally clearer for multiple or complex children. This example yields a `Label` widget inside the `Collapsible` context.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\ndef compose(self) -> ComposeResult:\n    with Collapsible():\n        yield Label(\"Hello, world.\")\n```\n```\n\n----------------------------------------\n\nTITLE: Returning Data from Modal Screen in Python using Textual\nDESCRIPTION: This snippet demonstrates how to return data from a modal screen using the dismiss() method. It shows a QuitScreen class that returns a boolean value indicating whether the user chose to quit the app.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Center\nfrom textual.screen import ModalScreen\nfrom textual.widgets import Button, Label\n\nclass QuitScreen(ModalScreen[bool]):\n    def compose(self) -> ComposeResult:\n        yield Center(\n            Label(\"Are you sure you want to quit?\"),\n            Button(\"Quit\", id=\"quit\"),\n            Button(\"Cancel\", id=\"cancel\"),\n        )\n\n    def on_button_pressed(self, event: Button.Pressed) -> None:\n        if event.button.id == \"quit\":\n            self.dismiss(True)\n        else:\n            self.dismiss(False)\n\nclass QuitApp(App):\n    CSS_PATH = \"modal01.tcss\"\n\n    def compose(self) -> ComposeResult:\n        yield Button(\"Quit\", id=\"quit\")\n\n    def on_button_pressed(self, event: Button.Pressed) -> None:\n        if event.button.id == \"quit\":\n            self.push_screen(QuitScreen(), self.check_quit)\n\n    def check_quit(self, quit: bool) -> None:\n        if quit:\n            self.exit()\n\nif __name__ == \"__main__\":\n    app = QuitApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Combining Styles with Click Actions\nDESCRIPTION: Example of combining multiple styles with click actions in Textual markup\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_8\n\nLANGUAGE: markup\nCODE:\n```\nPlay the [on $success 30% @click=app.bell]bell[/]\n```\n\n----------------------------------------\n\nTITLE: Typed Query Results in Textual\nDESCRIPTION: Demonstrates how to use the results method to iterate over query results with a specific type, which is useful for type checking.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor button in self.query(\".disabled\").results(Button):\n    print(button)\n```\n\n----------------------------------------\n\nTITLE: Styling Textual Toasts Based on Severity Level using CSS Classes\nDESCRIPTION: This SCSS snippet provides CSS rule placeholders for styling Toast widgets based on their severity level. It targets the `-information`, `-warning`, and `-error` classes, allowing developers to apply different styles (e.g., background colors, borders) for each type of notification.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/toast.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\nToast.-information {\n    /* Styling here. */\n}\n\nToast.-warning {\n    /* Styling here. */\n}\n\nToast.-error {\n    /* Styling here. */\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Modal Screen Implementation\nDESCRIPTION: Improved version of the modal dialog using ModalScreen class for better behavior and visual feedback.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/screens/modal02.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/screens/modal01.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Complex Widget Querying in Textual\nDESCRIPTION: Shows how to use a more complex selector to find specific widgets within a certain context.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor button in self.query(\"Dialog Button.disabled\"):\n    print(button)\n```\n\n----------------------------------------\n\nTITLE: Custom Progress Bar Styles - CSS\nDESCRIPTION: CSS styling rules for customizing the appearance of the progress bar components.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/progress_bar_styled.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Installing the textual-keys Tool with pipx\nDESCRIPTION: Command to install the textual-keys utility via pipx, which is a tool for discovering available key bindings when developing Textual applications.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/be-the-keymaster.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ pipx install textual-keys\n```\n\n----------------------------------------\n\nTITLE: Textual Output for SelectionList Created from Selection Objects\nDESCRIPTION: Indicates the expected visual output in a terminal when running the `docs/examples/widgets/selection_list_selections.py` script. This script demonstrates creating a `SelectionList` using explicit `Selection` objects instead of tuples.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_4\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/selection_list_selections.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollbar Gutter in Python with Textual\nDESCRIPTION: Shows how to set the scrollbar-gutter style in Python using Textual. It demonstrates setting both 'auto' and 'stable' values.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_gutter.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbar_gutter.py\"\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handler Definition in Textual\nDESCRIPTION: Shows how to define an event handler using the @on decorator to respond to a button press event. The method will be called when the button is pressed.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@on(Button.Pressed)\ndef on_button_pressed(self) -> None:\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Example Layout Implementation in Python\nDESCRIPTION: A full Python script demonstrating the implementation of different layouts in a Textual application. This example likely includes multiple layout types for comparison.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layout.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/layout.py\"\n```\n\n----------------------------------------\n\nTITLE: Digital Clock Implementation\nDESCRIPTION: Example showing how to create a digital clock display using the Digits widget to show current time\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/digits.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/clock.py\"\n```\n\n----------------------------------------\n\nTITLE: Color Class Usage Examples in Python\nDESCRIPTION: Demonstrates the capabilities of Textual's Color class including color parsing, manipulation, and format conversion. Shows operations like darkening, alpha compositing, and color space conversions.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/steal-this-code.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from textual.color import Color\n>>> color = Color.parse(\"lime\")\n>>> color\nColor(0, 255, 0, a=1.0)\n>>> color.darken(0.8)\nColor(0, 45, 0, a=1.0)\n>>> color + Color.parse(\"red\").with_alpha(0.1)\nColor(25, 229, 0, a=1.0)\n>>> color = Color.parse(\"#12a30a\")\n>>> color\nColor(18, 163, 10, a=1.0)\n>>> color.css\n'rgb(18,163,10)'\n>>> color.hex\n'#12A30A'\n>>> color.monochrome\nColor(121, 121, 121, a=1.0)\n>>> color.monochrome.hex\n'#797979'\n>>> color.hsl\nHSL(h=0.3246187363834423, s=0.8843930635838151, l=0.33921568627450976)\n>>>\n```\n\n----------------------------------------\n\nTITLE: Setting Dock Styles in Python for Textual Widgets\nDESCRIPTION: Shows how to set the 'dock' style programmatically in Python for Textual widgets, demonstrating all four docking options.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.dock = \"bottom\"  # Dock bottom.\nwidget.styles.dock = \"left\"    # Dock   left.\nwidget.styles.dock = \"right\"   # Dock  right.\nwidget.styles.dock = \"top\"     # Dock    top.\n```\n\n----------------------------------------\n\nTITLE: Grid Size Python Implementation\nDESCRIPTION: Shows how to programmatically set grid dimensions using Python by separately specifying rows and columns through style properties\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_size.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.grid_size_rows = 3\nwidget.styles.grid_size_columns = 6\n```\n\n----------------------------------------\n\nTITLE: Exiting a Textual App with Return Value\nDESCRIPTION: This snippet demonstrates how to exit a Textual app and return a value. It creates two buttons and returns the ID of the clicked button when exiting.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Button, Header\n\nclass QuestionApp(App):\n    def compose(self):\n        yield Header()\n        yield Grid(\n            Button(\"Yes\", id=\"yes\", variant=\"success\"),\n            Button(\"No\", id=\"no\", variant=\"error\"),\n            id=\"buttons\"\n        )\n\n    def on_button_pressed(self, event: Button.Pressed) -> None:\n        self.exit(event.button.id)\n\nif __name__ == \"__main__\":\n    app = QuestionApp()\n    result = app.run()\n    print(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Line API Rendering for Checkerboard Widget in Textual - Python\nDESCRIPTION: Illustrates implementation of a widget using the line API by overriding the render_line method. Produces a checkerboard pattern by constructing Strips from Segments, each styled (e.g., black and white cells). Demonstrates efficient, partial updates and is suitable for large, frequently updated UIs. Requires Python with Textual and Rich installed. Inputs: widget class and render_line method; output: a visual checkerboard using efficient rendering primitives.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"checker01.py\\\" hl_lines=\\\"12-31\\\"\\n--8<-- \\\"docs/examples/guide/widgets/checker01.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Fixed-width FizzBuzz Table in Textual - CSS\nDESCRIPTION: Defines CSS rules for the fixed-width FizzBuzz table widget, styling aspects such as font, padding, or color to match UI requirements. Applies within a Textual application context for the updated widget. No explicit parameters, but targets elements from the corresponding Python widget. Requires only the Textual app's CSS loading.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n```css title=\\\"fizzbuzz02.tcss\\\"\\n--8<-- \\\"docs/examples/guide/widgets/fizzbuzz02.tcss\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Footer Widget Example in Python\nDESCRIPTION: Example code demonstrating the implementation and usage of the Footer widget in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/footer.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/footer.py\"\n```\n\n----------------------------------------\n\nTITLE: Thread-based Weather App - Python\nDESCRIPTION: Weather app implementation using thread workers with urllib for non-async network requests.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/workers/weather05.py\"\n```\n\n----------------------------------------\n\nTITLE: Row and Column Spanning in Textual\nDESCRIPTION: Demonstrates combining row-span and column-span to make a cell occupy multiple rows and columns simultaneously.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/grid_layout6_row_span.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\nhl_lines=\"8\"\n--8<-- \"docs/examples/guide/layout/grid_layout6_row_span.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Importing Textual Renderables in Python\nDESCRIPTION: This snippet shows how to import various renderables from the textual.renderables module. These renderables can be used in a widget's render() method to create rich visual elements.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/renderables.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.renderables import bar, blank, digits, gradient, sparkline\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic TextArea Widget in Python\nDESCRIPTION: Shows the simplest way to add a TextArea widget to a Textual application through the compose method.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/text-area-learnings.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nyield TextArea()\n```\n\n----------------------------------------\n\nTITLE: Centering Multiple Widgets in a Textual App\nDESCRIPTION: An improved example showing how to center multiple buttons individually using the Center container. This approach creates a centered stack of widgets with each widget centered within its container.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Center\nfrom textual.widgets import Button\n\nclass ButtonApp(App):\n\n    CSS = \"\"\"\n    Screen {\n        align: center middle;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield Center(Button(\"PUSH ME!\"))\n        yield Center(Button(\"AND ME!\"))\n        yield Center(Button(\"ALSO PLEASE PUSH ME!\"))\n        yield Center(Button(\"HEY ME ALSO!!\"))\n\nif __name__ == \"__main__\":\n    ButtonApp().run()\n```\n\n----------------------------------------\n\nTITLE: Python Widget Visibility Shortcut\nDESCRIPTION: Demonstrates the shorthand visible property for controlling widget visibility in Python.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Make a widget invisible\nwidget.visible = False\n\n# Make the widget visible again\nwidget.visible = True\n```\n\n----------------------------------------\n\nTITLE: Removing a Row below Cursor in DataTable with Textual (Python)\nDESCRIPTION: This snippet demonstrates deleting the row currently beneath the cursor in a DataTable. It uses coordinate_to_cell_key to map the cursor position to a row key, then calls remove_row with this key. Prerequisites: a DataTable instance with populated data and a valid cursor location. This method allows context-sensitive row deletion in response to navigation events, improving user interactivity. The expected input is the current cursor coordinate, and the table is mutated by row removal.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\\n# Get the keys for the row and column under the cursor.\\nrow_key, _ = table.coordinate_to_cell_key(table.cursor_coordinate)\\n# Supply the row key to `remove_row` to delete the row.\\ntable.remove_row(row_key)\\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Input Widget Example - Python\nDESCRIPTION: Demonstrates creating a simple form using two Input widgets in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/input.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/input.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Static Widget Example (Python)\nDESCRIPTION: Provides the reference to the Python source code for a simple Textual application utilizing the `Static` widget. The `--8<--` directive includes the actual code from the specified file path (`docs/examples/widgets/static.py`), which defines the application structure and how the `Static` widget is used.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/static.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\n--8<-- \"docs/examples/widgets/static.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Markup Safely\nDESCRIPTION: Demonstrates safe variable substitution in markup using Content.from_markup\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nreturn Content.from_markup(\"hello [bold]$name[/bold]!\", name=name)\n```\n\n----------------------------------------\n\nTITLE: Installing Textual Syntax Highlighting Dependencies (pip) - Shell\nDESCRIPTION: Installs extra dependencies required for syntax highlighting in the Textual TextArea widget, specifically 'tree-sitter' and 'tree-sitter-languages'. Run with pip in your terminal. The 'textual[syntax]' extra enables advanced highlighting, but may have platform compatibility constraints when binary wheels for dependencies are unavailable.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install \\\"textual[syntax]\\\"\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Progress Bar - Python\nDESCRIPTION: Implementation of a progress bar with custom styling applied through Python code.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/progress_bar_styled.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing Textual Syntax Highlighting Dependencies (poetry) - Shell\nDESCRIPTION: Adds the necessary libraries for syntax highlighting in the TextArea widget using the Poetry package manager. The 'textual[syntax]' extra installs 'tree-sitter' and related packages required for code highlighting features. Executed within the project root folder where pyproject.toml exists.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry add \\\"textual[syntax]\\\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Color and Gradient Classes in Python\nDESCRIPTION: Example demonstrating how to import and use the Color and Gradient classes from the textual.color module. It shows creating colors, gradients, and performing color operations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/color.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.color import Color, Gradient\n\n# Create a color\nred = Color(255, 0, 0)\nblue = Color.parse(\"blue\")\ntransparent_green = Color(0, 255, 0, 0.5)\n\n# Create a gradient\ngradient = Gradient(Color(0, 0, 0), Color(255, 255, 255))\n\n# Get a color from the gradient\nmid_gray = gradient.get(0.5)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom System Commands in Textual App\nDESCRIPTION: Demonstrates how to add a custom system command to ring the terminal bell in a Textual app by implementing the get_system_commands method.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/command_palette.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\nfrom textual.screen import Screen\nfrom textual.app import SystemCommand\n\nclass CommandPaletteApp(App):\n    def compose(self) -> ComposeResult:\n        yield Header()\n        yield Footer()\n\n    def action_ring_bell(self) -> None:\n        self.bell()\n\n    def get_system_commands(self, screen: Screen):\n        yield from super().get_system_commands(screen)\n        yield SystemCommand(\n            title=\"Ring bell\",\n            help=\"Ring the terminal bell\",\n            callback=self.action_ring_bell\n        )\n\nif __name__ == \"__main__\":\n    app = CommandPaletteApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Styling Advanced Docking Example with CSS in Textual\nDESCRIPTION: Shows the CSS styling for the advanced docking example, highlighting the lines where 'dock' properties are set for different edges.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/dock_all.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Query Results in Textual\nDESCRIPTION: Demonstrates how to use the filter method to refine query results based on additional criteria.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbuttons_query = self.query(\"Button\")\ndisabled_buttons = buttons_query.filter(\".disabled\")\n```\n\n----------------------------------------\n\nTITLE: Listing DataTable Messages in Markdown\nDESCRIPTION: This snippet uses a Markdown bullet list to enumerate the available message types emitted by the DataTable widget. Each item refers to a documented message class for tracking cell, row, and column interactions. No dependencies are necessary, and the documentation refers developers to internal API references for implementation details.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- [DataTable.CellHighlighted][textual.widgets.DataTable.CellHighlighted]\\n- [DataTable.CellSelected][textual.widgets.DataTable.CellSelected]\\n- [DataTable.RowHighlighted][textual.widgets.DataTable.RowHighlighted]\\n- [DataTable.RowSelected][textual.widgets.DataTable.RowSelected]\\n- [DataTable.ColumnHighlighted][textual.widgets.DataTable.ColumnHighlighted]\\n- [DataTable.ColumnSelected][textual.widgets.DataTable.ColumnSelected]\\n- [DataTable.HeaderSelected][textual.widgets.DataTable.HeaderSelected]\\n- [DataTable.RowLabelSelected][textual.widgets.DataTable.RowLabelSelected]\n```\n\n----------------------------------------\n\nTITLE: Setting Border Title Background with CSS\nDESCRIPTION: Sets the background color of a widget's border title using CSS syntax. Accepts a color value or 'auto' with an optional percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_title_background.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-title-background: blue;\n```\n\n----------------------------------------\n\nTITLE: Basic Border Syntax in CSS\nDESCRIPTION: Demonstrates the core syntax for border styling, including border property definitions for all sides of a widget with color and percentage options.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder: [<border>] [<color>] [<percentage>];\n\nborder-top: [<border>] [<color>] [<percentage>];\nborder-right: [<border>] [<color>] [<percentage>];\nborder-bottom: [<border>] [<color>] [<percentage>];\nborder-left: [<border>] [<color>] [<percentage>];\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Select Widget Example Application (Python)\nDESCRIPTION: This code sample demonstrates a minimal working example in Python for creating a Select widget in a Textual application. The example is located in docs/examples/widgets/select_widget.py and illustrates defining options, initializing the Select widget, and integrating it into a Textual app for immediate interaction. Inputs include the list of options; output is the rendered interactive Select UI. Requires the Textual library and optionally appropriate project structure for running the code unmodified.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/select.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/select_widget.py\"\n```\n\n----------------------------------------\n\nTITLE: Button Widget Styling - CSS\nDESCRIPTION: CSS styling rules for the button widget defining its appearance and variants.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/button.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/button.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Sparkline Widget Colors in Textual Using Python\nDESCRIPTION: Demonstrates how to use Python and Textual to render a Sparkline widget with customized colors by assigning component classes. The code interacts with the widget's API to apply classes that are targeted by accompanying CSS rules. Requires the 'textual' library, matching CSS file for color definitions, and visualization of the results in a Textual app interface. Allows users to see different color schemes applied to sparklines for enhanced visual distinction of data.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```\n--8<-- \\\"docs/examples/widgets/sparkline_colors.py\\\"\n```\n```\n\n----------------------------------------\n\nTITLE: Python Tint Implementation\nDESCRIPTION: Examples of programmatically setting tint styles in Python using both Color class parsing and direct RGBA string values.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/tint.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# A red tint\nfrom textual.color import Color\nwidget.styles.tint = Color.parse(\"red\").with_alpha(0.2);\n\n# A green tint\nwidget.styles.tint = \"rgba(0, 200, 0, 0.3)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Textual App with Header (Python)\nDESCRIPTION: Provides the Python source code for a minimal Textual application (`App`). By default, Textual apps include a Header widget. This snippet references the external example file demonstrating this basic setup.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/header.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\n--8<-- \"docs/examples/widgets/header.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using Textual Log Method in App and Widget Classes\nDESCRIPTION: Demonstrates how to use the log method in Textual App and Widget classes for convenient logging.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App\n\nclass LogApp(App):\n\n    def on_load(self):\n        self.log(\"In the log handler!\", pi=3.141529)\n\n    def on_mount(self):\n        self.log(self.tree)\n\nif __name__ == \"__main__\":\n    LogApp().run()\n```\n\n----------------------------------------\n\nTITLE: Declaring a Threaded Worker in Textual\nDESCRIPTION: Example showing how to declare a threaded worker in Textual using the @work decorator with thread=True parameter, required as of version 0.31.0.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@work(thread=True)\ndef run_in_background():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Log Widget Example Implementation in Python\nDESCRIPTION: Example code demonstrating how to use the Log widget to display and write text lines in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/log.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/log.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Textual App with Multiple Screens\nDESCRIPTION: A Python class implementation of a Textual app called GridInfo that displays Second Life grid information. This demonstrates a pattern of using multiple screens in a Textual application rather than using the default screen.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/on-dog-food-the-original-metaverse-and-not-being-bored.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GridInfo( App[ None ] ):\n    \"\"\"TUI app for showing information about the Second Life grid.\"\"\"\n\n    CSS_PATH = \"gridinfo.css\"\n    \"\"\"The name of the CSS file for the app.\"\"\"\n\n    TITLE = \"Grid Information\"\n    \"\"\"str: The title of the application.\"\"\"\n\n    SCREENS = {\n        \"main\": Main,\n        \"region\": RegionInfo\n    }\n    \"\"\"The collection of application screens.\"\"\"\n\n    def on_mount( self ) -> None:\n        \"\"\"Set up the application on startup.\"\"\"\n        self.push_screen( \"main\" )\n```\n\n----------------------------------------\n\nTITLE: Checkbox Widget Python Example\nDESCRIPTION: Example showing checkboxes in various states\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/checkbox.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/checkbox.py\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Different Height Units in Python\nDESCRIPTION: Python code demonstrating the creation of widgets with various height units in Textual. This example showcases different ways to specify widget heights.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/height_comparison.py\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Actions with Check Logic\nDESCRIPTION: Implementation of dynamic actions with validation logic using check_action method.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions06.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions06.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Implementation - Python\nDESCRIPTION: Simple example showing isolated progress bar states including indeterminate, in-progress, and completed states.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/progress_bar_isolated.py\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Textual Tabs with Strings and Rich Text (Python)\nDESCRIPTION: Demonstrates initializing the Textual `Tabs` widget within a `compose` method using simple strings and a Rich `Text` object for the tab labels. The framework automatically creates `Tab` widgets with auto-incrementing IDs (e.g., 'tab-1', 'tab-2'). Requires the `Tabs` widget and `ComposeResult` type hint from Textual, and the `Text` object from Rich.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef compose(self) -> ComposeResult:\n    yield Tabs(\"First tab\", \"Second tab\", Text.from_markup(\"[u]Third[/u] tab\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Awaitable Mount Operation in Python\nDESCRIPTION: Shows how to implement an awaitable object for mounting widgets in the Textual framework. The AwaitMount class allows optional awaiting of widget mounting operations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/await-me-maybe.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AwaitMount:\n    \"\"\"An awaitable returned by mount() and mount_all().\"\"\"\n\n    def __init__(self, parent: Widget, widgets: Sequence[Widget]) -> None:\n        self._parent = parent\n        self._widgets = widgets\n\n    async def __call__(self) -> None:\n        \"\"\"Allows awaiting via a call operation.\"\"\"\n        await self\n\n    def __await__(self) -> Generator[None, None, None]:\n        async def await_mount() -> None:\n            if self._widgets:\n                aws = [\n                    create_task(widget._mounted_event.wait(), name=\"await mount\")\n                    for widget in self._widgets\n                ]\n                if aws:\n                    await wait(aws)\n                    self._parent.refresh(layout=True)\n\n        return await_mount().__await__()\n```\n\n----------------------------------------\n\nTITLE: Grid Style Example Python\nDESCRIPTION: Example Python code showing the implementation of a grid layout in a Textual application\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/grid.py\"\n```\n\n----------------------------------------\n\nTITLE: Gradient Progress Bar - Python\nDESCRIPTION: Example demonstrating how to create a progress bar with a gradient effect using the Gradient object.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/progress_bar_gradient.py\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Textual Tabs with Explicit Tab Objects (Python)\nDESCRIPTION: Shows how to initialize the Textual `Tabs` widget within a `compose` method by providing explicit `Tab` objects. This approach allows setting custom IDs for each tab, which can be useful for referencing specific tabs later (e.g., in event handlers). Requires the `Tabs` and `Tab` widgets, and `ComposeResult` type hint from Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabs.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef compose(self) -> ComposeResult:\n    yield Tabs(\n        Tab(\"First tab\", id=\"one\"),\n        Tab(\"Second tab\", id=\"two\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Textual App with Header (Output)\nDESCRIPTION: Shows the visual output render of a simple Textual application that includes the default Header widget. This demonstrates the basic appearance of the header at the top.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/header.md#2025-04-22_snippet_0\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/header.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: CSS Link Color Hover Styling\nDESCRIPTION: CSS rules for customizing link hover colors in Textual UI. Demonstrates setting hover colors with different opacities.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color_hover.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/link_color_hover.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Creating OptionList with Option Instances in Python\nDESCRIPTION: Example showing how to use Option class instances and Separator for more control over options\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/option_list.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/option_list_options.py\"\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Widget Implementation in Textual\nDESCRIPTION: Demonstrates a configurable progress bar with ETA and completion percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_18\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/progress_bar.py\n```\n\n----------------------------------------\n\nTITLE: Setting Header Text via App Attributes (Python)\nDESCRIPTION: Provides the Python source code demonstrating how to customize the text displayed in the Header widget. It sets the `title` and `sub_title` class variables on the Textual `App`, which are then automatically picked up by the Header.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/header.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\n--8<-- \"docs/examples/widgets/header_app_title.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Gruvbox Theme Variables in Python\nDESCRIPTION: Example of creating a Gruvbox theme with custom variables for cursor foreground and input selection background colors. The code demonstrates how to override default theme variables using the Theme constructor.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/design.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTheme(\n    name=\"gruvbox\",\n    primary=\"#85A598\",\n    secondary=\"#A89A85\",\n    warning=\"#fabd2f\",\n    error=\"#fb4934\",\n    success=\"#b8bb26\",\n    accent=\"#fabd2f\",\n    foreground=\"#fbf1c7\",\n    background=\"#282828\",\n    surface=\"#3c3836\",\n    panel=\"#504945\",\n    dark=True,\n    variables={\n        \"block-cursor-foreground\": \"#fbf1c7\",\n        \"input-selection-background\": \"#689d6a40\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Input Types Example - Python\nDESCRIPTION: Shows how to use different input types (integer, number, text) with the Input widget for type-specific validation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/input.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/input_types.py\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Screen with Blue Screen of Death Example\nDESCRIPTION: Demonstrates creating a basic screen class that simulates Windows' blue screen of death, including key bindings and screen switching.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/screens/screen01.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/screens/screen01.tcss\"\n```\n\n----------------------------------------\n\nTITLE: TextArea Widget Implementation in Textual\nDESCRIPTION: Shows implementation of a multi-line text editor with syntax highlighting.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_29\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/text_area_example.py\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Text Alignment in Python\nDESCRIPTION: Example Python script demonstrating different text alignments (left, center, right, justify) in Textual widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_align.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/text_align.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Cached Region Splitting Method in Python\nDESCRIPTION: This Python code snippet defines a method `split` decorated with `@lru_cache` for performance optimization. It belongs to a class (indicated by `self`) and splits a `Region` object into four smaller `Region` objects based on provided horizontal (`cut_x`) and vertical (`cut_y`) cut coordinates. Negative coordinates are treated as offsets from the right and bottom edges, respectively. The method returns a tuple containing the four resulting regions. This snippet is presented within a Markdown file to demonstrate how Textual renders fenced code blocks with syntax highlighting.\nSOURCE: https://github.com/textualize/textual/blob/main/examples/example.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\n@lru_cache(maxsize=1024)\ndef split(self, cut_x: int, cut_y: int) -> tuple[Region, Region, Region, Region]:\n    \"\"\"Split a region into 4 from given x and y offsets (cuts).\n\n    ```\n                cut_x ↓\n            ┌────────┐ ┌───┐\n            │        │ │   │\n            │    0   │ │ 1 │\n            │        │ │   │\n    cut_y → └────────┘ └───┘\n            ┌────────┐ ┌───┐\n            │    2   │ │ 3 │\n            └────────┘ └───┘\n    ```\n\n    Args:\n        cut_x (int): Offset from self.x where the cut should be made. If negative, the cut\n            is taken from the right edge.\n        cut_y (int): Offset from self.y where the cut should be made. If negative, the cut\n            is taken from the lower edge.\n\n    Returns:\n        tuple[Region, Region, Region, Region]: Four new regions which add up to the original (self).\n    \"\"\"\n\n    x, y, width, height = self\n    if cut_x < 0:\n        cut_x = width + cut_x\n    if cut_y < 0:\n        cut_y = height + cut_y\n\n    _Region = Region\n    return (\n        _Region(x, y, cut_x, cut_y),\n        _Region(x + cut_x, y, width - cut_x, cut_y),\n        _Region(x, y + cut_y, cut_x, height - cut_y),\n        _Region(x + cut_x, y + cut_y, width - cut_x, height - cut_y),\n    )\n```\n```\n\n----------------------------------------\n\nTITLE: Textual Output of World Clock App with Data Binding\nDESCRIPTION: Represents the visual output generated by running the `world_clock02.py` Textual application, demonstrating the result of using `data_bind` to link the app's time to the clocks' time.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_20\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/guide/reactivity/world_clock02.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Display Property Shortcut in Python\nDESCRIPTION: Shows a shortcut method to show or hide a widget using the 'display' property in Python.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/display.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Hide the widget\nwidget.display = False\n\n# Show the widget\nwidget.display = True\n```\n\n----------------------------------------\n\nTITLE: Basic Content Markup Example in Python\nDESCRIPTION: Demonstrates the difference between enabled and disabled content markup in Textual widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/content/content01.py\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies to Define a Custom TextAreaTheme - Python\nDESCRIPTION: Imports the required classes for constructing a custom syntax highlighting theme for the TextArea widget. 'Style' is used for color and attribute definitions (from 'rich.style'), while 'TextAreaTheme' enables registering and applying custom themes (from 'textual.widgets.text_area'). Should be placed at the top of a Python script that defines new visual themes for TextArea.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.style import Style\\nfrom textual.widgets.text_area import TextAreaTheme\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Widgets in Textual Python Application\nDESCRIPTION: This example shows how to apply styles to a specific widget in a Textual application. It sets the background color to dark blue and adds a white heavy border to a Static widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass StylesApp(App):\n    def compose(self) -> ComposeResult:\n        self.static = Static(\"Textual\")\n        yield self.static\n\n    def on_mount(self) -> None:\n        self.static.styles.background = \"darkblue\"\n        self.static.styles.border = (\"heavy\", \"white\")\n\nif __name__ == \"__main__\":\n    app = StylesApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Margin Property Examples in CSS\nDESCRIPTION: Examples of using the margin property in CSS, including single-value, two-value, and four-value notations, as well as individual margin properties.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* Set margin of 1 around all edges */\nmargin: 1;\n/* Set margin of 2 on the top and bottom edges, and 4 on the left and right */\nmargin: 2 4;\n/* Set margin of 1 on the top, 2 on the right,\n                 3 on the bottom, and 4 on the left */\nmargin: 1 2 3 4;\n\nmargin-top: 1;\nmargin-right: 2;\nmargin-bottom: 3;\nmargin-left: 4;\n```\n\n----------------------------------------\n\nTITLE: Defining min-width in CSS for Textual\nDESCRIPTION: Examples of setting min-width in CSS for Textual widgets. Shows how to set a minimum width in rows and as a percentage of viewport width.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/min_width.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Set the minimum width to 10 rows */\nmin-width: 10;\n\n/* Set the minimum width to 25% of the viewport width */\nmin-width: 25vw;\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Docking with Labels in Python using Textual\nDESCRIPTION: Demonstrates advanced usage of the 'dock' style by creating full-width and full-height containers with docked labels on all edges of a larger container.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/dock_all.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Repetition Function with Type Hints - Python\nDESCRIPTION: Defines a simple Python function 'repeat' that demonstrates the use of type hints. It takes a string and an integer, returning the string repeated 'count' times. This example requires Python 3.5+ for type hint support and shows the syntax for parameter and return type annotations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef repeat(text: str, count: int) -> str:\n    \"\"\"Repeat a string a given number of times.\"\"\"\n    return text * count\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Link Style Example CSS\nDESCRIPTION: Complete CSS example showing link style hover implementations for different classes, including specific style rules for action links.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style_hover.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/link_style_hover.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Select Widget Implementation in Textual\nDESCRIPTION: Shows implementation of a dropdown-style option selector.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_23\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/select_widget.py\n```\n\n----------------------------------------\n\nTITLE: Setting Border Subtitle Style with Python\nDESCRIPTION: Python code for programmatically setting border subtitle text styles using the widget styles API. Applies bold and underline styles to the border subtitle.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_style.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.border_subtitle_style = \"bold underline\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Messages for Widget Communication in Textual (Python)\nDESCRIPTION: Shows how to use custom messages in Textual to communicate between widgets without tight coupling. The Activity widget emits a message when moved, which the Main screen can react to.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/on-dog-food-the-original-metaverse-and-not-being-bored.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Moved( Message ):\n    \"\"\"A message to indicate that an activity has moved.\"\"\"\n\ndef action_move_up( self ) -> None:\n    \"\"\"Move this activity up one place in the list.\"\"\"\n    if self.parent is not None and not self.is_first:\n        parent = cast( Widget, self.parent )\n        parent.move_child(\n            self, before=parent.children.index( self ) - 1\n        )\n        self.emit_no_wait( self.Moved( self ) )\n        self.scroll_visible( top=True )\n```\n\n----------------------------------------\n\nTITLE: Styling SelectionList with Textual CSS (Selection Object Example)\nDESCRIPTION: References the Textual CSS file used for styling in the `selection_list_selections.py` example. This file controls the appearance of the `SelectionList` created using `Selection` objects. The actual CSS rules are included from the specified file path (`docs/examples/widgets/selection_list.tcss`).\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n~~~css\n--8<-- \"docs/examples/widgets/selection_list.tcss\"\n~~~\n```\n\n----------------------------------------\n\nTITLE: Markdown Widget Implementation in Textual\nDESCRIPTION: Shows basic markdown document display functionality.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_13\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/markdown.py\n```\n\n----------------------------------------\n\nTITLE: Setting Layout Style in Python\nDESCRIPTION: Shows how to programmatically set the layout style of a widget in Python. This example sets the layout to horizontal.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layout.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.layout = \"horizontal\"\n```\n\n----------------------------------------\n\nTITLE: Row Span Example Python\nDESCRIPTION: Example Python implementation demonstrating row span usage in a Textual application with a 4x4 grid layout.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/row_span.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/row_span.py\"\n```\n\n----------------------------------------\n\nTITLE: Python Color Implementation in Textual\nDESCRIPTION: Demonstrates how to set colors in Python using both string syntax and Color objects, including direct color creation and parsing from CSS syntax.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/color.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Mimicking the CSS syntax\nwidget.styles.background = \"red\"           # Color name\nwidget.styles.color = \"$accent\"            # Textual variable\nwidget.styles.tint = \"hsl(300, 20%, 70%)\"  # HSL description\n\nfrom textual.color import Color\n# Using a Color object directly...\ncolor = Color(16, 200, 45)\n# ... which can also parse the CSS syntax\ncolor = Color.parse(\"#A8F\")\n```\n\n----------------------------------------\n\nTITLE: Region-Based Checkerboard Highlight with Mouse Interactivity Using Textual (Python)\nDESCRIPTION: This snippet updates the checkerboard widget to efficiently highlight only the square under the mouse pointer by tracking cursor position with a reactive variable and issuing targeted region updates via Widget.refresh. The implementation requires the Textual framework, reactive var, MouseMove event handlers, and appropriate style configuration. Inputs: mouse move events, scroll offsets. Outputs: visually highlighted checkerboard square, with minimal region refresh for responsiveness. Limitation: correct coordinate translation between mouse events and the scrollable virtual grid is essential.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"checker04.py\\\" hl_lines=\\\"18 28-30 33 41-44 46-63 74 81-92\\\"\\n--8<-- \\\"docs/examples/guide/widgets/checker04.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Select Widget Options with Typing in Textual (Python)\nDESCRIPTION: This snippet demonstrates how to construct a list of selectable options and type-annotate a Select widget in Python using the Textual library. The options variable consists of tuples of display labels and integer values, which are provided to the Select constructor. The Select widget can be generically typed (here, as Select[int]), though typing is optional. No external dependencies are required beyond the Textual library. The options tuple structure sets the displayed labels and their corresponding selected values, available via the widget's value attribute.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/select.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\noptions = [(\"First\", 1), (\"Second\", 2)]\\nmy_select: Select[int] =  Select(options)\n```\n\n----------------------------------------\n\nTITLE: Example of Layers Usage in Python\nDESCRIPTION: A Python script demonstrating the use of layers in a Textual application. It creates two boxes with different layers, showing how layer order affects rendering.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layers.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/layers.py\"\n```\n\n----------------------------------------\n\nTITLE: Applying Auto Color in Textual CSS\nDESCRIPTION: Demonstrates the use of 'auto' color in Textual CSS to automatically select text color for optimal contrast.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/color_auto.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Border Titles and Alignment\nDESCRIPTION: Demonstrates setting border titles and their alignment using border-title-align and border-subtitle-align styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/styles/border_title.py\"\n```\n\n----------------------------------------\n\nTITLE: Time Display Without Recompose in Textual\nDESCRIPTION: Shows a clock implementation without using recompose, requiring manual updates in both compose() and watch_time() methods.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/reactivity/recompose01.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Left-Docked Sidebar in Python with Textual\nDESCRIPTION: Shows a Python script using Textual to create a left-docked sidebar that remains fixed while content scrolls. This example demonstrates basic usage of the 'dock' style.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/dock_layout1_sidebar.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Sizes with Python\nDESCRIPTION: Example of setting scrollbar sizes programmatically in Python using the Textual widget styles API. Shows how to set horizontal and vertical scrollbar sizes independently.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_size.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Set horizontal scrollbar to 10:\nwidget.styles.scrollbar_size_horizontal = 10\n# Set vertical scrollbar to 4:\nwidget.styles.scrollbar_size_vertical = 4\n```\n\n----------------------------------------\n\nTITLE: CSS Link Styling Syntax\nDESCRIPTION: CSS syntax definition for Textual link styling properties including background, color, and text style for both normal and hover states.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/index.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlink-background: <color> [<percentage>];\nlink-color: <color> [<percentage>];\nlink-style: <text-style>;\nlink-background-hover: <color> [<percentage>];\nlink-color-hover: <color> [<percentage>];\nlink-style-hover: <text-style>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Textual Log Function\nDESCRIPTION: Shows how to import and use the Textual log function for pretty-printing data structures.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom textual import log\n\ndef on_mount(self) -> None:\n    log(\"Hello, World\")  # simple string\n    log(locals())  # Log local variables\n    log(children=self.children, pi=3.141592)  # key/values\n    log(self.tree)  # Rich renderables\n```\n\n----------------------------------------\n\nTITLE: Tree Widget Implementation in Textual\nDESCRIPTION: Demonstrates a tree control with expandable node functionality.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_30\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/tree.py\n```\n\n----------------------------------------\n\nTITLE: Advanced Content Alignment Grid - Python\nDESCRIPTION: Python implementation of a 3x3 grid showing all possible content alignment combinations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/content_align_all.py\"\n```\n\n----------------------------------------\n\nTITLE: Grid Size CSS Basic Examples\nDESCRIPTION: Examples showing how to set grid dimensions using CSS syntax, demonstrating both fixed row count and auto-row scenarios\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_size.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Grid with 3 columns and 5 rows */\ngrid-size: 3 5;\n\n/* Grid with 4 columns and as many rows as needed */\ngrid-size: 4;\n```\n\n----------------------------------------\n\nTITLE: Creating OptionList with String Options in Python\nDESCRIPTION: Example demonstrating how to create an OptionList widget with simple string options in Textual\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/option_list.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/option_list_strings.py\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Indeterminate Progress Bar in Rich\nDESCRIPTION: Example showing how to create an indeterminate progress bar in Rich using Progress with total=None. This creates a continuously animating progress bar without a specific end point.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom rich.progress import Progress\n\nwith Progress() as progress:\n    _ = progress.add_task(\"Loading...\", total=None)  # (1)!\n    while True:\n        time.sleep(0.01)\n```\n\n----------------------------------------\n\nTITLE: Event Handler with Multiple Sender Filters in Textual\nDESCRIPTION: Demonstrates how to handle events from multiple specific widgets by using a list of selectors in the decorator.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@on(Button.Pressed, \"#submit-button, #cancel-button\")\ndef on_form_button_pressed(self, event: Button.Pressed) -> None:\n    if event.button.id == \"submit-button\":\n        self.submit_form()\n    else:\n        self.cancel_form()\n\n```\n\n----------------------------------------\n\nTITLE: Setting Text Color in Python for Textual Widgets\nDESCRIPTION: Shows how to set text color for Textual widgets in Python, using both string syntax and Color objects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Set blue text\nwidget.styles.color = \"blue\"\n\nfrom textual.color import Color\n# Set with a color object\nwidget.styles.color = Color.parse(\"pink\")\n```\n\n----------------------------------------\n\nTITLE: Setting Hatch Styles Programmatically in Python with Textual\nDESCRIPTION: Demonstrates how to set hatch styles programmatically using Python in a Textual application. It shows examples of applying cross hatch, diagonal hatch, and custom character hatch with different colors.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/hatch.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.hatch = (\"cross\", \"red\")\nwidget.styles.hatch = (\"right\", \"rgba(0,255,0,128)\")\nwidget.styles.hatch = (\"T\", \"blue\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Event Handlers for Dynamic State Management\nDESCRIPTION: Python code that handles button press events and toggles CSS classes to switch between started and stopped states in the stopwatch application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/tutorial/stopwatch04.py\"\n```\n\n----------------------------------------\n\nTITLE: Styling Sparkline Widgets With Different Functions Using CSS in Textual\nDESCRIPTION: Sets the width and styling for Sparkline widgets used when demonstrating different summary functions. The CSS file determines how multiple Sparkline widgets with differing summary settings are laid out and displayed. Requires association with the corresponding Python file running sparklines with various summary functions. Modifies widget look and size based on selectors and potentially class-based rules.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n```\n--8<-- \\\"docs/examples/widgets/sparkline.tcss\\\"\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying TextArea with Java Syntax Highlighting in Textual\nDESCRIPTION: This snippet demonstrates the result of adding Java syntax highlighting to a TextArea widget in a Textual application. It shows the widget with highlighted Java code that can be edited in real-time.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_22\n\nLANGUAGE: textual\nCODE:\n```\n{.textual path=\"docs/examples/widgets/text_area_custom_language.py\" columns=\"52\" lines=\"8\"}\n```\n\n----------------------------------------\n\nTITLE: CSS Important Rule for Override Styling\nDESCRIPTION: CSS rule using the !important declaration to ensure a style is applied regardless of specificity. This sets the background of hovered Buttons to blue.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\nButton:hover {\n  background: blue !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Input Validation Configuration - Python\nDESCRIPTION: Shows how to configure an Input widget to validate only on submission.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/input.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninput = Input(validate_on=[\"submitted\"])\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Markdown Widgets for Prompt and Response in Python\nDESCRIPTION: Creates custom Markdown widgets for displaying user prompts and AI responses in the chat interface. The Response widget includes a border title.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Prompt(Markdown):\n    pass\n\n\nclass Response(Markdown):\n    BORDER_TITLE = \"Mother\"\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder Widget with Custom Layout\nDESCRIPTION: Demonstrates the updated Placeholder widget functionality with custom layout options and styling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-6-0.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/placeholder.py\"\n```\n\nLANGUAGE: sass\nCODE:\n```\n--8<-- \"docs/examples/widgets/placeholder.css\"\n```\n\n----------------------------------------\n\nTITLE: Setting Text Style in Python\nDESCRIPTION: This Python snippet demonstrates how to set the text-style property of a widget to italic using Python code in the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_style.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.text_style = \"italic\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Content Alignment Grid - CSS\nDESCRIPTION: CSS styles for the 3x3 grid demonstrating all content alignment possibilities.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/content_align_all.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Box Sizing Demonstration\nDESCRIPTION: Compares border-box and content-box sizing models with practical examples of their effects on widget dimensions.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/styles/box_sizing01.py\"\n```\n\n----------------------------------------\n\nTITLE: RadioSet Change Event Handling\nDESCRIPTION: Example showing how to handle RadioSet change events and respond to user selection.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radioset.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/radio_set_changed.py\"\n```\n\n----------------------------------------\n\nTITLE: Checkbox Widget Implementation in Textual\nDESCRIPTION: Shows how to implement a classic checkbox control in the terminal interface.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_1\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/checkbox.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Hatch Effects in Python with Textual\nDESCRIPTION: Demonstrates how to create a Textual app showcasing various hatch effects. The code creates a grid of containers with different hatch styles applied.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/hatch.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/hatch.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Margin in Python\nDESCRIPTION: Demonstrates how to set margins in Python using Textual's API, including single-value, two-value, and four-value notations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Set margin of 1 around all edges\nwidget.styles.margin = 1\n# Set margin of 2 on the top and bottom edges, and 4 on the left and right\nwidget.styles.margin = (2, 4)\n# Set margin of 1 on top, 2 on the right, 3 on the bottom, and 4 on the left\nwidget.styles.margin = (1, 2, 3, 4)\n```\n\n----------------------------------------\n\nTITLE: Setting Height in Textual CSS\nDESCRIPTION: Examples of setting widget height using different methods in Textual CSS, including explicit cell height, percentage height, and automatic height.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Explicit cell height */\nheight: 10;\n\n/* Percentage height */\nheight: 50%;\n\n/* Automatic height */\nheight: auto\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Dimensions in Textual Python Application\nDESCRIPTION: This snippet demonstrates how to set specific width and height for a widget in a Textual application. It creates a Static widget with a fixed width of 20 columns and height of 10 rows.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nLOREM_IPSUM = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\"\"\n\nclass DimensionsApp(App):\n    def compose(self) -> ComposeResult:\n        yield Static(LOREM_IPSUM, id=\"lorem\")\n\n    def on_mount(self) -> None:\n        lorem = self.query_one(\"#lorem\")\n        lorem.styles.width = 20\n        lorem.styles.height = 10\n\nif __name__ == \"__main__\":\n    app = DimensionsApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Widget Using Static Class\nDESCRIPTION: This snippet demonstrates creating a widget that cycles through greetings in different languages using the Static class and update method.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass Hello(Static):\n    def __init__(self):\n        super().__init__()\n        self.greetings = [\"Hello\", \"Bonjour\", \"Hola\", \"Guten Tag\", \"Ciao\"]\n        self.index = 0\n\n    def next_word(self) -> None:\n        self.index = (self.index + 1) % len(self.greetings)\n        self.update(self.greetings[self.index])\n\n    def on_mount(self) -> None:\n        self.next_word()\n\n    def on_click(self) -> None:\n        self.next_word()\n\nclass HelloApp(App):\n    CSS_PATH = \"hello03.tcss\"\n    def compose(self) -> ComposeResult:\n        yield Hello()\n```\n\nLANGUAGE: css\nCODE:\n```\nHello {\n    width: 100%;\n    height: 3;\n    content-align: center middle;\n    background: darkblue;\n    color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layout Style in CSS\nDESCRIPTION: Demonstrates how to set the layout style using CSS syntax. The layout can be set to grid, horizontal, or vertical.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layout.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlayout: grid | horizontal | vertical;\n```\n\n----------------------------------------\n\nTITLE: Listing Available Themes for TextArea in Python\nDESCRIPTION: Illustrates how to access the set of theme names that have been registered with a `TextArea` instance using the `available_themes` attribute. The output shows the newly registered 'my_cool_theme' alongside built-in themes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> print(text_area.available_themes)\n{'dracula', 'github_light', 'monokai', 'vscode_dark', 'my_cool_theme'}\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Row Heights in CSS\nDESCRIPTION: Provides examples of setting grid row heights using CSS, including fixed percentages and fractional units.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Set all rows to have 50% height */\ngrid-rows: 50%;\n\n/* Every other row is twice as tall as the first one */\ngrid-rows: 1fr 2fr;\n```\n\n----------------------------------------\n\nTITLE: Textual CSS Styling Example\nDESCRIPTION: CSS styling example for a Textual application showing basic widget styling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/app/question02.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Basic Button Widget Implementation in Textual\nDESCRIPTION: Demonstrates implementation of a basic button widget with semantic styles in a terminal interface.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_0\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/button.py\n```\n\n----------------------------------------\n\nTITLE: Implementing MarkupError Exception for Text Markup Issues\nDESCRIPTION: Defines an exception class for errors related to text markup processing. Used when there's an issue with parsing or rendering styled text markup.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MarkupError(TextualError):\n    \"\"\"Errors related to markup.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using the 'initial' Value in CSS Rules\nDESCRIPTION: Examples of using the 'initial' value in CSS rules to reset styles to their default. This demonstrates setting a custom style and then resetting it for specific cases.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_18\n\nLANGUAGE: css\nCODE:\n```\nButton {\n  background: green;\n}\n\n.dialog Button {\n  background: initial;\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Attempt at Non-Blocking UI with asyncio.create_task\nDESCRIPTION: A modified version of the previous example that attempts to use asyncio.create_task to run a time-consuming operation concurrently. However, it still blocks because time.sleep is used inside the async function instead of asyncio.sleep with await.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/responsive-app-background-task.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/blog/snippets/2022-12-07-responsive-app-background-task/blocking02.py\"\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to Buttons in Python\nDESCRIPTION: Examples of applying CSS classes to Button widgets in Textual. This demonstrates how to set single and multiple classes on a widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nyield Button(classes=\"success\")\n```\n\nLANGUAGE: python\nCODE:\n```\nyield Button(classes=\"error disabled\")\n```\n\n----------------------------------------\n\nTITLE: Preventing Message Sending in Python for Textual\nDESCRIPTION: This code snippet shows how to temporarily disable posting of messages of a particular type using the prevent context manager in Textual. It's used in a Clear button that sets an input's value without triggering a Changed event.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_button_pressed(self) -> None:\n    with self.input.prevent(Input.Changed):\n        self.input.value = \"\"\n\ndef on_input_changed(self) -> None:\n    self.bell()\n```\n\n----------------------------------------\n\nTITLE: Setting Text Colors for Multiple Widgets in Python\nDESCRIPTION: Demonstrates setting different text colors for three widgets in a Textual application using Python.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/color.py\"\n```\n\n----------------------------------------\n\nTITLE: Combined Style Tags Example\nDESCRIPTION: Example showing how to combine multiple style tags for complex formatting.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\n[bold]Bold [italic]Bold and italic[/italic][/bold]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom TextAreaTheme in Python\nDESCRIPTION: Creates a custom theme named 'my_cool_theme' for the Textual `TextArea` widget. It specifies custom styles for the cursor, the line containing the cursor, and syntax highlighting for 'string' and 'comment' token types using `rich.style.Style` objects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmy_theme = TextAreaTheme(\n    # This name will be used to refer to the theme...\n    name=\"my_cool_theme\",\n    # Basic styles such as background, cursor, selection, gutter, etc...\n    cursor_style=Style(color=\"white\", bgcolor=\"blue\"),\n    cursor_line_style=Style(bgcolor=\"yellow\"),\n    # `syntax_styles` is for syntax highlighting.\n    # It maps tokens parsed from the document to Rich styles.\n    syntax_styles={\n        \"string\": Style(color=\"red\"),\n        \"comment\": Style(color=\"magenta\"),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: CSS Class Selector for Styling Widgets\nDESCRIPTION: CSS rule using a class selector to style widgets with the 'success' class. This sets the background to green and text color to white.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.success {\n  background: green;\n  color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Widgets in Textual Layout\nDESCRIPTION: This snippet shows how to use a builtin container widget (HorizontalScroll) instead of a custom Placeholder for the central area of the layout. It simplifies the code and adds automatic horizontal scrolling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.containers import HorizontalScroll\n\nclass LayoutScreen(Container):\n    def compose(self) -> ComposeResult:\n        yield Header(id=\"header\")\n        yield HorizontalScroll(id=\"columns\")\n        yield Footer(id=\"footer\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Layout with Column-span in Python\nDESCRIPTION: Shows a Python script that creates a 4x4 grid layout using Textual, demonstrating the use of column-span for various placeholders.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/column_span.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/column_span.py\"\n```\n\n----------------------------------------\n\nTITLE: Grid Column Python Style Setting\nDESCRIPTION: Python examples demonstrating how to set grid column styles programmatically using the styles property.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_columns.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngrid.styles.grid_columns = \"50%\"\ngrid.styles.grid_columns = \"1fr 2fr\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FR Units in Textual Layout\nDESCRIPTION: Shows how to use FR units for flexible space distribution between widgets, creating a layout with 2:1 height ratio.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/styles/dimensions04.py\"\n```\n\n----------------------------------------\n\nTITLE: Position Styles in CSS\nDESCRIPTION: CSS syntax for setting position styles. Shows both relative and absolute positioning options.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/position.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nposition: relative;\nposition: absolute;\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Built-in TextAreaTheme in Python\nDESCRIPTION: Demonstrates how to get a reference to a pre-defined Textual `TextArea` theme using the `TextAreaTheme.get_builtin_theme` class method. This example retrieves the 'monokai' theme.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.widgets.text_area import TextAreaTheme\n\nmonokai = TextAreaTheme.get_builtin_theme(\"monokai\")\n```\n\n----------------------------------------\n\nTITLE: Defining Layers in CSS\nDESCRIPTION: A CSS example showing how to define layers named 'below' and 'above'. The order of declaration determines the rendering order.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layers.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Bottom layer is called 'below', layer above it is called 'above' */\nlayers: below above;\n```\n\n----------------------------------------\n\nTITLE: Message Handling with @on Decorator in Textual\nDESCRIPTION: Shows the new @on decorator approach in Textual 0.23.0 that allows dispatching events based on CSS selectors, enabling separate handlers for different buttons or button groups.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-23-0.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/events/on_decorator02.py\"\n```\n\n----------------------------------------\n\nTITLE: Basic Margin Usage Example in Python\nDESCRIPTION: An example Python script demonstrating basic usage of margin styling in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/margin.py\"\n```\n\n----------------------------------------\n\nTITLE: Width Comparison Example - Python\nDESCRIPTION: Python code showing different width measurement formats and their implementations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/width_comparison.py\"\n```\n\n----------------------------------------\n\nTITLE: Example Layout Styling in CSS\nDESCRIPTION: A CSS file showing how to style layouts in a Textual application. It includes highlighted lines that are likely crucial for layout definition.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layout.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/layout.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Including Custom Symbols Collapsible Example Code (Python)\nDESCRIPTION: Directive to include the Python source code for the `Collapsible` widget example that demonstrates the use of custom symbols, referenced from the file 'docs/examples/widgets/collapsible_custom_symbol.py'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python\n--8<-- \"docs/examples/widgets/collapsible_custom_symbol.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Composing Collapsible Content via Constructor (Python)\nDESCRIPTION: Demonstrates adding a `Label` widget as a child to a `Collapsible` widget by passing it directly during instantiation within a Textual `compose` method. This method is suitable for simple content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\ndef compose(self) -> ComposeResult:\n    yield Collapsible(Label(\"Hello, world.\"))\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AwaitRemove in Python with Textual\nDESCRIPTION: This snippet demonstrates how to use the AwaitRemove object returned by Widget.remove(). It can be awaited to ensure the widget has been fully removed before proceeding with further operations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/await_remove.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.widget import Widget\n\nasync def remove_widget(widget: Widget):\n    await_remove = widget.remove()\n    # You can await the AwaitRemove object if needed\n    await await_remove\n    # At this point, the widget is guaranteed to be removed\n    print(\"Widget removed successfully\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Progress Bar in Rich\nDESCRIPTION: A simple example showing how to create a progress bar in Rich using the track function. This demonstrates tracking a fixed number of steps with a delay to simulate work being done.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom rich.progress import track\n\nfor _ in track(range(20), description=\"Processing...\"):\n    time.sleep(0.5)  # Simulate work being done\n```\n\n----------------------------------------\n\nTITLE: Defining Grid-rows Syntax in Textual CSS\nDESCRIPTION: Specifies the syntax for the grid-rows style in Textual CSS, using one or more scalar values to define row heights.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ngrid-rows: <scalar>+;\n```\n\n----------------------------------------\n\nTITLE: Python Padding Configuration\nDESCRIPTION: Examples of setting padding in Python code using single integer, tuple of 2 integers, or tuple of 4 integers. Shows how to programmatically set padding values for Textual widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/padding.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Set padding of 1 around all edges\nwidget.styles.padding = 1\n# Set padding of 2 on the top and bottom edges, and 4 on the left and right\nwidget.styles.padding = (2, 4)\n# Set padding of 1 on top, 2 on the right, 3 on the bottom, and 4 on the left\nwidget.styles.padding = (1, 2, 3, 4)\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Gutter in Textual CSS\nDESCRIPTION: Shows how to apply grid gutter styles in a Textual CSS file, highlighting the line that sets the gutter sizes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_gutter.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/grid_gutter.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Creating Entry Point for Textual Calculator Application\nDESCRIPTION: Defines an entry point function that initializes and runs the CalculatorApp. This allows the application to be launched from the command line.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom textual_calculator.calculator import CalculatorApp\n\n\ndef calculator():\n    app = CalculatorApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Sparkline Widget with Different Summary Functions in Textual (Python)\nDESCRIPTION: Showcases how to configure the Sparkline widget to use various summary functions (e.g., max, mean, min) for determining bar heights. This requires the 'textual' library and potentially other Python standard libraries for calculation (e.g., statistics.mean). The code configures the widget to apply each summary function to each data chunk, changing the interpretation of the data per bar. Takes a sequence and displays three sparklines: one using the maximum, one the mean, and one the minimum of each bucket, with visual differences in the rendered bars.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```\n--8<-- \\\"docs/examples/widgets/sparkline.py\\\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Color Style Syntax in Textual CSS\nDESCRIPTION: Specifies the syntax for the 'color' style in Textual CSS, allowing for color values or 'auto' with an optional opacity percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ncolor: (<color> | auto) [<percentage>];\n```\n\n----------------------------------------\n\nTITLE: Styling a Custom Widget with External CSS\nDESCRIPTION: This example shows how to apply external CSS to a custom widget, demonstrating the separation of presentation and logic.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widget import Widget\n\nclass Greeting(Widget):\n    def render(self) -> str:\n        return \"Hello [b]World[/b]\"\n\nclass GreetingApp(App):\n    CSS_PATH = \"hello02.tcss\"\n    def compose(self) -> ComposeResult:\n        yield Greeting()\n```\n\nLANGUAGE: css\nCODE:\n```\nGreeting {\n    width: 100%;\n    height: 3;\n    content-align: center middle;\n    background: darkblue;\n    color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Theme for an Existing TextArea Instance - Python\nDESCRIPTION: Assigns a new theme (here, 'vscode_dark') to an existing TextArea instance. By setting the 'theme' attribute, the component will refresh its display, updating syntax highlighting and style according to the theme definition. The theme string must match one available from 'available_themes' or those registered via custom themes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntext_area.theme = \\\"vscode_dark\\\"\n```\n\n----------------------------------------\n\nTITLE: Basic Width Example - Python Implementation\nDESCRIPTION: Python code demonstrating basic widget width implementation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/width.py\"\n```\n\n----------------------------------------\n\nTITLE: Outline Properties in Python\nDESCRIPTION: Example Python code showing how to set outline properties programmatically\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/outline.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Set a heavy white outline\nwidget.outline = (\"heavy\", \"white\")\n\n# Set a red outline on the left\nwidget.outline_left = (\"outer\", \"red\")\n```\n\n----------------------------------------\n\nTITLE: Implementing StylesheetError Exception for CSS Styling Issues\nDESCRIPTION: Defines an exception class for errors related to stylesheet processing. Used when there's a problem with CSS parsing or application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass StylesheetError(TextualError):\n    \"\"\"An error within a stylesheet.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Width Example - CSS Implementation\nDESCRIPTION: CSS code showing how to set widget width as a percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/width.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Styling Left-Docked Sidebar with CSS in Textual\nDESCRIPTION: Provides the CSS styling for the left-docked sidebar example, highlighting the line where the 'dock' property is set to 'left'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/dock_layout1_sidebar.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Applying Alpha Transparency to Widget Colors in Textual\nDESCRIPTION: This example shows how to use alpha transparency in widget background colors. It creates three Static widgets with different levels of transparency using rgba color format.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass AlphaApp(App):\n    def compose(self) -> ComposeResult:\n        yield Static(\"Alpha 0.1\", id=\"alpha1\")\n        yield Static(\"Alpha 0.5\", id=\"alpha2\")\n        yield Static(\"Alpha 1.0\", id=\"alpha3\")\n\n    def on_mount(self) -> None:\n        self.query_one(\"#alpha1\").styles.background = \"rgba(192,78,96,0.1)\"\n        self.query_one(\"#alpha2\").styles.background = \"rgba(192,78,96,0.5)\"\n        self.query_one(\"#alpha3\").styles.background = \"rgba(192,78,96,1.0)\"\n\nif __name__ == \"__main__\":\n    app = AlphaApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Buttons with Single Handler in Python\nDESCRIPTION: Example of handling multiple buttons with different actions using a single message handler in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/events/on_decorator01.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Layers in Python\nDESCRIPTION: A Python example demonstrating how to set layers programmatically using the style property of a widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layers.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Bottom layer is called 'below', layer above it is called 'above'\nwidget.style.layers = (\"below\", \"above\")\n```\n\n----------------------------------------\n\nTITLE: Using Theme Variables in CSS for Textual\nDESCRIPTION: This CSS snippet shows how to use theme variables to style a custom widget in Textual. It demonstrates the use of primary and foreground color variables.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/design.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nMyWidget {\n    background: $primary;\n    color: $foreground;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Align Style in CSS\nDESCRIPTION: Examples of using the 'align' style in CSS to position child widgets within a container. It demonstrates various alignment options and axis-specific alignments.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/align.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Align child widgets to the center. */\nalign: center middle;\n/* Align child widget to the top right */\nalign: right top;\n\n/* Change the horizontal alignment of the children of a widget */\nalign-horizontal: right;\n/* Change the vertical alignment of the children of a widget */\nalign-vertical: middle;\n```\n\n----------------------------------------\n\nTITLE: Implementing Docked Widgets in Textual\nDESCRIPTION: Demonstrates docking widgets to screen edges using the dock CSS property. Examples include creating fixed sidebars and headers.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/dock_layout3_sidebar_header.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/dock_layout3_sidebar_header.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Rules (Python)\nDESCRIPTION: This snippet references the Python code located at `docs/examples/widgets/vertical_rules.py`. This referenced file demonstrates how to create `Rule` widgets with a vertical orientation using the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rule.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    ```python\n    --8<-- \"docs/examples/widgets/vertical_rules.py\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Creating an Option List with Strings in Textual\nDESCRIPTION: This Python code snippet shows how to create an OptionList widget in Textual, populated with string items. It demonstrates the basic usage of the new OptionList feature introduced in Textual 0.17.0.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-17-0.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/option_list_strings.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Overflow Style in CSS for Textual\nDESCRIPTION: CSS syntax for setting overflow styles in Textual. It shows how to set overflow for both axes simultaneously or individually.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/overflow.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Automatic scrollbars on both axes (the default) */\noverflow: auto auto;\n\n/* Hide the vertical scrollbar */\noverflow-y: hidden;\n\n/* Always show the horizontal scrollbar */\noverflow-x: scroll;\n```\n\n----------------------------------------\n\nTITLE: Row Span Python Implementation\nDESCRIPTION: Python method for programmatically setting a widget's row span in a grid layout. Uses the styles property to set the number of rows a widget should span.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/row_span.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.row_span = 3\n```\n\n----------------------------------------\n\nTITLE: Content Alignment Python Examples\nDESCRIPTION: Python code examples showing how to set content alignment using styles API.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Align content in the very center of a widget\nwidget.styles.content_align = (\"center\", \"middle\")\n# Align content at the top right of a widget\nwidget.styles.content_align = (\"right\", \"top\")\n\n# Change the horizontal alignment of the content of a widget\nwidget.styles.content_align_horizontal = \"right\"\n# Change the vertical alignment of the content of a widget\nwidget.styles.content_align_vertical = \"middle\"\n```\n\n----------------------------------------\n\nTITLE: Horizontal Keyline Example in Python\nDESCRIPTION: Demonstrates a simple horizontal layout with a thin keyline using Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/keyline.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/keyline_horizontal.py\"\n```\n\n----------------------------------------\n\nTITLE: Using Auto Color for Contrast in Python\nDESCRIPTION: Illustrates the use of 'auto' color in a Textual application to automatically choose between light and dark text for better readability.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/color_auto.py\"\n```\n\n----------------------------------------\n\nTITLE: Aligning Content within a Widget using Content-Align in Python\nDESCRIPTION: This example demonstrates the use of the 'content-align' rule to center content vertically within a Static widget. It sets a fixed height to the widget to show the effect of content alignment.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/center-things.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nLONG_TEXT = \"\"\"This is a much longer piece of text that will wrap onto multiple lines. We use this to demonstrate how text alignment works.\"\"\"\n\nclass CenterApp(App):\n    def compose(self) -> ComposeResult:\n        yield Static(LONG_TEXT)\n\n    CSS = \"\"\"\n    Screen {\n        align: center middle;\n    }\n\n    Static {\n        width: 30;\n        height: 9;\n        background: blue;\n        border: solid white;\n        text-align: center;\n        content-align: center middle;\n    }\n    \"\"\"\n\nif __name__ == \"__main__\":\n    app = CenterApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Applying border styles with Python in Textual\nDESCRIPTION: Python example demonstrating how to set border styles programmatically on widgets, showing both full border styling and individual border edge styling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/border.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.border = (\"heavy\", \"red\")\nwidget.styles.border_bottom = (\"solid\", \"blue\")\n```\n\n----------------------------------------\n\nTITLE: Running Textual RichLog Example\nDESCRIPTION: Demonstrates how to run the `rich_log.py` example application using the Textual CLI command embedded within documentation syntax. The `path` specifies the example file, and `press` simulates user key presses ('H', 'i') for interactive demonstration.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rich_log.md#2025-04-22_snippet_0\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/rich_log.py\" press=\"H,i\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Grid Column TCSS Styling\nDESCRIPTION: CSS styling for grid columns with highlighted line showing column configuration.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_columns.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/grid_columns.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Grid Style Example CSS\nDESCRIPTION: Example CSS code demonstrating the usage of grid layout styles in a Textual application\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/index.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/grid.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Padding with Tuple Values\nDESCRIPTION: Shows how to set different padding values for vertical and horizontal edges using a tuple of two integers.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/styles/padding02.py\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Header with Custom Title/Subtitle (Output)\nDESCRIPTION: Shows the visual output render of a Textual application where the Header widget displays a custom title and subtitle. This demonstrates how setting App attributes affects the header content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/header.md#2025-04-22_snippet_2\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/header_app_title.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: LRU Cache Implementation Usage in Python\nDESCRIPTION: Shows usage of a custom LRU (Least Recently Used) Cache implementation that provides more flexibility than Python's built-in lru_cache. Demonstrates basic operations with a size-limited cache.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/steal-this-code.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from textual._cache import LRUCache\n>>> cache = LRUCache(maxsize=3)\n>>> cache[\"foo\"] = 1\n>>> cache[\"bar\"] = 2\n>>> cache[\"baz\"] = 3\n>>> dict(cache)\n{'foo': 1, 'bar': 2, 'baz': 3}\n>>> cache[\"egg\"] = 4\n>>> dict(cache)\n{'bar': 2, 'baz': 3, 'egg': 4}\n```\n\n----------------------------------------\n\nTITLE: Enabling Syntax Highlighting in TextArea\nDESCRIPTION: Demonstrates how to enable syntax highlighting for a specific programming language in the TextArea widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/text-area-learnings.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nyield TextArea(language=\"python\")\n```\n\n----------------------------------------\n\nTITLE: Defining Scrollbar Color Styles in Textual CSS\nDESCRIPTION: This snippet demonstrates the syntax for setting various scrollbar color styles in Textual CSS. It includes styles for background, thumb, and corner colors in different states (default, active, hover).\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/index.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-background: <color> [<percentage>];\n\nscrollbar-background-active: <color> [<percentage>];\n\nscrollbar-background-hover: <color> [<percentage>];\n\nscrollbar-color: <color> [<percentage>];\n\nscrollbar-color-active: <color> [<percentage>];\n\nscrollbar-color-hover: <color> [<percentage>];\n\nscrollbar-corner-color: <color> [<percentage>];\n```\n\n----------------------------------------\n\nTITLE: Example Link Style Implementation in CSS\nDESCRIPTION: Custom CSS styling implementation demonstrating link customization with specific background and text colors.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/index.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/links.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Simulating Key Presses in Snapshot Test for Textual App\nDESCRIPTION: This snippet shows how to simulate pressing keys before capturing the snapshot using the press parameter in the snap_compare function.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_calculator_pressing_numbers(snap_compare):\n    assert snap_compare(\"path/to/calculator.py\", press=[\"1\", \"2\", \"3\"])\n```\n\n----------------------------------------\n\nTITLE: Centering a Static Widget with Align Rule in Python\nDESCRIPTION: This snippet demonstrates how to center a Static widget on the screen using the 'align' rule in Textual. It applies 'align: center middle;' to the screen to center the widget both horizontally and vertically.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/center-things.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass CenterApp(App):\n    def compose(self) -> ComposeResult:\n        yield Static(\"Hello World!\")\n\n    CSS = \"\"\"\n    Screen {\n        align: center middle;\n    }\n    \"\"\"\n\nif __name__ == \"__main__\":\n    app = CenterApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Defining Layers in Textual CSS\nDESCRIPTION: CSS example showing how to define layers and assign widgets to specific layers. It highlights the lines where layers are defined and assigned.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layer.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/layers.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Row Heights in Python\nDESCRIPTION: Shows how to set grid row heights programmatically using Python in the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngrid.styles.grid_rows = \"50%\"\ngrid.styles.grid_rows = \"1fr 2fr\"\n```\n\n----------------------------------------\n\nTITLE: Width Comparison Example - CSS\nDESCRIPTION: CSS code demonstrating various width units and measurements.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/width_comparison.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Max-width in Python\nDESCRIPTION: Shows how to set maximum width constraints programmatically using Python, demonstrating both fixed and viewport-relative units.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_width.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Set the maximum width to 10 rows\nwidget.styles.max_width = 10\n\n# Set the maximum width to 25% of the viewport width\nwidget.styles.max_width = \"25vw\"\n```\n\n----------------------------------------\n\nTITLE: Running Textual Apps in Development Mode\nDESCRIPTION: Demonstrates how to run a Textual app in development mode for live CSS editing.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntextual run --dev my_app.py\n```\n\n----------------------------------------\n\nTITLE: Using Percentage Values in CSS for Textual\nDESCRIPTION: This example demonstrates how to use percentage values in CSS for a Textual application. It shows both integer percentages for color opacity and negative/decimal percentages for offset positioning.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/percentage.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#footer {\n    /* Integer followed by % */\n    color: red 70%;\n\n    /* The number can be negative/decimal, although that may not make sense */\n    offset: -30% 12.5%;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating All Text Styles in Textual CSS\nDESCRIPTION: This CSS snippet showcases all available text styles in Textual, including combinations of styles. It applies different text styles to multiple widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_style.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n#bold {\n    text-style: bold;\n}\n\n#dim {\n    text-style: dim;\n}\n\n#italic {\n    text-style: italic;\n}\n\n#underline {\n    text-style: underline;\n}\n\n#blink {\n    text-style: blink;\n}\n\n#blink2 {\n    text-style: blink2;\n}\n\n#reverse {\n    text-style: reverse;\n}\n\n#strike {\n    text-style: strike;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Border Subtitle Background in Python\nDESCRIPTION: Sets the background color of a widget's border subtitle using Python code by accessing the widget's styles property.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_background.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.border_subtitle_background = \"blue\"\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Widget by Type in Python\nDESCRIPTION: Shows how to use query_one to find a widget of a specific type without using a selector.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_button = self.query_one(Button)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Widgets in Textual\nDESCRIPTION: Shows how to use the query method to iterate over all widgets in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor widget in self.query():\n    print(widget)\n```\n\n----------------------------------------\n\nTITLE: Setting link-style in Python for Textual Action Links\nDESCRIPTION: Examples of setting the 'link_style' property in Python to style Textual action links with different text styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.link_style = \"bold\"\nwidget.styles.link_style = \"bold italic reverse\"\n```\n\n----------------------------------------\n\nTITLE: Explicit Click Action Closing\nDESCRIPTION: Shows how to explicitly close a click action tag in Textual markup\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_7\n\nLANGUAGE: markup\nCODE:\n```\nPlay the [@click=app.bell]bell[/@click=]\n```\n\n----------------------------------------\n\nTITLE: Event Handler with Sender Filter in Textual\nDESCRIPTION: Shows how to create an event handler that only responds to events from a specific widget by using the '#id' selector syntax in the decorator.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@on(Button.Pressed, \"#submit-button\")\ndef on_submit_button_pressed(self) -> None:\n    self.submit_form()\n\n```\n\n----------------------------------------\n\nTITLE: Using Auto Height for Widgets in Textual Python\nDESCRIPTION: This example shows how to use 'auto' height for a widget to adapt to its content. It creates a Static widget with a fixed width and auto height to accommodate all the text.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nLOREM_IPSUM = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\"\"\n\nclass DimensionsApp(App):\n    def compose(self) -> ComposeResult:\n        yield Static(LOREM_IPSUM, id=\"lorem\")\n\n    def on_mount(self) -> None:\n        lorem = self.query_one(\"#lorem\")\n        lorem.styles.width = 20\n        lorem.styles.height = \"auto\"\n\nif __name__ == \"__main__\":\n    app = DimensionsApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Setting Text Overflow in Python for Textual\nDESCRIPTION: This Python snippet shows how to programmatically set the text-overflow style for a widget in Textual. It sets the value to 'ellipsis', which truncates overflowing text and adds an ellipsis at the end.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_overflow.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.text_overflow = \"ellipsis\" \n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Color in Python\nDESCRIPTION: Demonstrates how to set the scrollbar color programmatically in Python using the Textual framework's styling API.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.scrollbar_color = \"cyan\"\n```\n\n----------------------------------------\n\nTITLE: Applying link-style in CSS for Textual Action Links\nDESCRIPTION: Examples of using the 'link-style' CSS property to style Textual action links with different text styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nlink-style: bold;\nlink-style: bold italic reverse;\n```\n\n----------------------------------------\n\nTITLE: Running Setup Code Before Snapshot Capture in Textual App Test\nDESCRIPTION: This snippet shows how to run arbitrary code before capturing the snapshot using the run_before parameter. It uses an async function to hover the mouse cursor over a specific widget before taking the snapshot.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef test_calculator_hover_number(snap_compare):\n    async def run_before(pilot) -> None:\n        await pilot.hover(\"#number-5\")\n\n    assert snap_compare(\"path/to/calculator.py\", run_before=run_before)\n```\n\n----------------------------------------\n\nTITLE: Defining Dock Styles in CSS for Textual\nDESCRIPTION: Provides CSS code snippets for setting the 'dock' property to different edges (bottom, left, right, top) in Textual stylesheets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\ndock: bottom;  /* Docks on the bottom edge of the parent container. */\ndock: left;    /* Docks on the   left edge of the parent container. */\ndock: right;   /* Docks on the  right edge of the parent container. */\ndock: top;     /* Docks on the    top edge of the parent container. */\n```\n\n----------------------------------------\n\nTITLE: Setting Height in Python for Textual\nDESCRIPTION: Python code examples for setting widget height in Textual, demonstrating explicit cell height, percentage height, and automatic height.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nself.styles.height = 10  # Explicit cell height can be an int\nself.styles.height = \"50%\"\nself.styles.height = \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Row Span CSS Implementation\nDESCRIPTION: CSS syntax for setting a widget to span multiple rows in a grid layout. The value must be a non-negative integer representing the number of rows to span.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/row_span.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrow-span: 3\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid-rows in Python with Textual\nDESCRIPTION: Demonstrates how to create a grid layout with specified row heights using Python in the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/grid_rows.py\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Collapse/Expand Symbols (Python)\nDESCRIPTION: Explains how to change the default triangle symbols used to indicate the collapsed and expanded states by setting the `collapsed_symbol` and `expanded_symbol` string parameters in the `Collapsible` constructor.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\ndef compose(self) -> ComposeResult:\n    with Collapsible(collapsed_symbol=\">>>\", expanded_symbol=\"v\"):\n        yield Label(\"Hello, world.\")\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Placeholder Widget - Python Implementation\nDESCRIPTION: Example Python code demonstrating the implementation and usage of the Placeholder widget. This widget is designed for prototyping layouts before implementing actual functionality.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/placeholder.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/placeholder.py\"\n```\n\n----------------------------------------\n\nTITLE: Visual Output of Static Widget Example (Textual)\nDESCRIPTION: Displays the expected terminal output generated by running the associated `static.py` Python script. This demonstrates how the `Static` widget renders content within a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/static.md#2025-04-22_snippet_0\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/static.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Text Styles in Textual CSS\nDESCRIPTION: This CSS snippet demonstrates how to apply different text styles to widgets in Textual. It shows three different styles: bold, italic, and reverse.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_style.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#panel-1 {\n    background: orange;\n    text-style: bold;\n}\n\n#panel-2 {\n    background: skyblue;\n    text-style: italic;\n}\n\n#panel-3 {\n    background: violet;\n    text-style: reverse;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Mouse Movement Widget with TCSS\nDESCRIPTION: CSS styling configuration for the mouse movement tracking widget using Textual CSS (TCSS).\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\ntitle=\"mouse01.tcss\"\n--8<-- \"docs/examples/guide/input/mouse01.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Basic Position Examples in Python\nDESCRIPTION: Example showing how to set position style using Python code. Demonstrates both relative and absolute positioning.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/position.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.position = \"relative\"\nwidget.styles.position = \"absolute\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Logging with Textual Handler\nDESCRIPTION: Shows how to configure Python's built-in logging module to use Textual's logging handler for integration with the debug console.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom textual.app import App\nfrom textual.logging import TextualHandler\n\nlogging.basicConfig(\n    level=\"NOTSET\",\n    handlers=[TextualHandler()],\n)\n\n\nclass LogApp(App):\n    \"\"\"Using logging with Textual.\"\"\"\n\n    def on_mount(self) -> None:\n        logging.debug(\"Logged via TextualHandler\")\n\n\nif __name__ == \"__main__\":\n    LogApp().run()\n```\n\n----------------------------------------\n\nTITLE: Python Link Color Hover Example\nDESCRIPTION: Example Python script demonstrating the implementation of link hover colors using Textual's action links. Shows multiple labels with different hover color configurations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color_hover.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/link_color_hover.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Background Color in CSS\nDESCRIPTION: This snippet demonstrates how to set the background color of a scrollbar using CSS in Textual. The color is set to blue in this example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-background: blue;\n```\n\n----------------------------------------\n\nTITLE: CSS Link Color Hover Syntax Examples\nDESCRIPTION: Example CSS syntax for setting link hover colors with different opacity levels.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color_hover.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nlink-color-hover: red 70%;\nlink-color-hover: black;\n```\n\n----------------------------------------\n\nTITLE: Action String Parsing Example\nDESCRIPTION: Shows how to use run_action() to parse and execute action strings instead of direct method calls.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions02.py\"\n```\n\n----------------------------------------\n\nTITLE: Python Implementation for Nested CSS Example\nDESCRIPTION: Python code implementing the UI structure for the nested CSS demonstration.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/css/nesting02.py\"\n```\n\n----------------------------------------\n\nTITLE: Applying Grid-rows Style in Textual CSS\nDESCRIPTION: Shows how to apply the grid-rows style in a Textual CSS file, highlighting the line that sets the row heights.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/grid_rows.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Source Code for Tabs Widget Example (Python)\nDESCRIPTION: A placeholder indicating the inclusion of the full Python source code for the example application `docs/examples/widgets/tabs.py`. This application demonstrates the practical use of the `Tabs` widget, including adding tabs dynamically (press 'a') and clearing all tabs (press 'c').\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabs.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    ```python\n    --8<-- \"docs/examples/widgets/tabs.py\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Border Styles Example Python Implementation\nDESCRIPTION: Main Python implementation showing border application on multiple widgets with different styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/border.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Link Colors in Textual using Python\nDESCRIPTION: Shows how to set link colors programmatically in Textual using Python. It includes examples of using string color values and Color objects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.link_color = \"red 70%\"\nwidget.styles.link_color = \"$accent\"\n\n# You can also use a `Color` object directly:\nwidget.styles.link_color = Color(100, 30, 173)\n```\n\n----------------------------------------\n\nTITLE: Grid Layout CSS Properties Syntax\nDESCRIPTION: Defines the syntax for all grid-related CSS properties in Textual, including column-span, grid-columns, grid-gutter, grid-rows, grid-size, and row-span.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/index.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ncolumn-span: <integer>;\n\ngrid-columns: <scalar>+;\n\ngrid-gutter: <scalar> [<scalar>];\n\ngrid-rows: <scalar>+;\n\ngrid-size: <integer> [<integer>];\n\nrow-span: <integer>;\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Dimensions with Different Scalar Units in CSS\nDESCRIPTION: CSS example showing how to set width and height of a Horizontal widget using different scalar units. The width is set to 60 cells (absolute) and the height is set to 1fr (proportional).\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/scalar.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nHorizontal {\n    width: 60;     /* 60 cells */\n    height: 1fr;   /* proportional size of 1 */\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Tint Examples\nDESCRIPTION: Examples of applying red and green tints to widgets using CSS with different opacity levels.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/tint.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* A red tint (could indicate an error) */\ntint: red 20%;\n\n/* A green tint */\ntint: rgba(0, 200, 0, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Including Python Source Code from File\nDESCRIPTION: This snippet uses a Python code block combined with an inclusion directive (`--8<-- \"...\"`), commonly used with tools like `mkdocs-literate-nav` or similar plugins. It embeds the source code content from the file `docs/examples/widgets/tree.py` directly into the documentation, allowing readers to see the implementation of the Tree widget example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tree.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\n--8<-- \"docs/examples/widgets/tree.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Validation in Textual's Input Widget\nDESCRIPTION: Shows the declarative API for validating input in Textual's Input widget. This feature allows for easy implementation of input validation rules.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-27-0.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nInput(validate_on=[\"blur\", \"submit\"], validators=[Regex(r\"^\\w+$\")])\n```\n\n----------------------------------------\n\nTITLE: Rich Renderables Example\nDESCRIPTION: Complete example showing how to use Rich renderables in a Textual application\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/content/renderables.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Border Subtitle Color in CSS for Textual\nDESCRIPTION: This CSS snippet demonstrates how to set the color of the border subtitle in Textual. It uses the border-subtitle-color property to set the color to red.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_color.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-subtitle-color: red;\n```\n\n----------------------------------------\n\nTITLE: Disabling Command Palette in Textual App\nDESCRIPTION: Demonstrates how to disable the command palette functionality in a Textual app by setting the ENABLE_COMMAND_PALETTE class variable to False.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/command_palette.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass NoPaletteApp(App):\n    ENABLE_COMMAND_PALETTE = False\n```\n\n----------------------------------------\n\nTITLE: Creating OptionList with Rich Tables in Python\nDESCRIPTION: Advanced example demonstrating how to use Rich tables as options in an OptionList\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/option_list.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/option_list_tables.py\"\n```\n\n----------------------------------------\n\nTITLE: Centering Multiple Widgets Independently using Center Container in Python\nDESCRIPTION: This snippet showcases how to center multiple widgets independently using the Center container in Textual. It wraps two Static widgets in separate Center containers to align them individually.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/center-things.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Center\nfrom textual.widgets import Static\n\nclass CenterApp(App):\n    def compose(self) -> ComposeResult:\n        yield Center(Static(\"Widget 1\"))\n        yield Center(Static(\"Widget 2\"))\n\n    CSS = \"\"\"\n    Static {\n        width: auto;\n        height: auto;\n        background: blue;\n        color: white;\n        border: solid white;\n        padding: 1 2;\n    }\n\n    Center {\n        height: 1fr;\n    }\n    \"\"\"\n\nif __name__ == \"__main__\":\n    app = CenterApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Border Styles CSS Configuration\nDESCRIPTION: CSS styling configuration for the border examples with highlighted important lines.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/border.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Sizes with CSS\nDESCRIPTION: Examples of setting scrollbar sizes using CSS syntax. Shows how to set both scrollbars together or individually using the scrollbar-size property.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_size.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Set horizontal scrollbar to 10, and vertical scrollbar to 4 */\nscrollbar-size: 10 4;\n\n/* Set horizontal scrollbar to 10 */\nscrollbar-size-horizontal: 10;\n\n/* Set vertical scrollbar to 4 */\nscrollbar-size-vertical: 4;\n```\n\n----------------------------------------\n\nTITLE: Sparkline Widget Implementation in Textual\nDESCRIPTION: Shows implementation of numerical data visualization.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_25\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/sparkline.py\n```\n\n----------------------------------------\n\nTITLE: Key Bindings with Actions\nDESCRIPTION: Demonstrates binding keyboard keys to action methods for color changes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions04.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Gutter in Python\nDESCRIPTION: Shows how to set grid gutters programmatically in Python using Textual's style properties for vertical and horizontal gutters.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_gutter.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.grid_gutter_vertical = \"1\"\nwidget.styles.grid_gutter_horizontal = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Max-Height in Python for Textual Widgets\nDESCRIPTION: Examples of setting max-height for Textual widgets in Python, including fixed row height and percentage of viewport height.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_height.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Set the maximum height to 10 rows\nwidget.styles.max_height = 10\n\n# Set the maximum height to 25% of the viewport height\nwidget.styles.max_height = \"25vh\"\n```\n\n----------------------------------------\n\nTITLE: Content Alignment CSS Examples\nDESCRIPTION: Example CSS rules showing various content alignment configurations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* Align content in the very center of a widget */\ncontent-align: center middle;\n/* Align content at the top right of a widget */\ncontent-align: right top;\n\n/* Change the horizontal alignment of the content of a widget */\ncontent-align-horizontal: right;\n/* Change the vertical alignment of the content of a widget */\ncontent-align-vertical: middle;\n```\n\n----------------------------------------\n\nTITLE: Link Style Hover Implementation in Python\nDESCRIPTION: Examples of setting link hover styles programmatically in Python using the Textual widget styles API. Demonstrates both simple and complex style combinations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style_hover.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.link_style_hover = \"bold\"\nwidget.styles.link_style_hover = \"bold italic reverse\"\n```\n\n----------------------------------------\n\nTITLE: Border Style CSS Examples\nDESCRIPTION: Common CSS border styling patterns including heavy borders, single-side borders, and rounded borders with opacity.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Set a heavy white border */\nborder: heavy white;\n\n/* Set a red border on the left */\nborder-left: outer red;\n\n/* Set a rounded orange border, 50% opacity. */\nborder: round orange 50%;\n```\n\n----------------------------------------\n\nTITLE: Grid Size Both Dimensions Example\nDESCRIPTION: Python implementation showing a grid with fixed columns and rows setup with style properties\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_size.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nScreen {\n    grid-size: 2 5;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Universal Selector for Global Styling\nDESCRIPTION: CSS rule using the universal selector to apply a style to all widgets. This example adds a red outline to every widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n* {\n  outline: solid red;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Border Subtitle Alignment in CSS\nDESCRIPTION: Demonstrates various ways to set the border subtitle alignment using CSS in Textual. The alignment can be set to left, center, or right.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_align.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-subtitle-align: left;\nborder-subtitle-align: center;\nborder-subtitle-align: right;\n```\n\n----------------------------------------\n\nTITLE: Querying Available Themes in TextArea - Python\nDESCRIPTION: Shows how to inspect the set of names of built-in themes available for the TextArea widget. Accesses the 'available_themes' property, which returns a set of supported theme strings. Useful for dynamic theme selection and validation before applying a theme.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> text_area = TextArea()\\n>>> print(text_area.available_themes)\\n{'css', 'dracula', 'github_light', 'monokai', 'vscode_dark'}\n```\n\n----------------------------------------\n\nTITLE: Basic Plotext Usage Example\nDESCRIPTION: Demonstrates the standard way of creating a scatter plot using Plotext library directly.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/textual-plotext.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotext as plt\ny = plt.sin() # sinusoidal test signal\nplt.scatter(y)\nplt.title(\"Scatter Plot\") # to apply a title\nplt.show() # to finally plot\n```\n\n----------------------------------------\n\nTITLE: Implementing Border and Text Style Customization in Textual (Python)\nDESCRIPTION: This Python script demonstrates how to customize border colors and text styles in a Textual application. It likely includes the main application structure and widget definitions with custom styling applied.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_title_color.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/border_title_colors.py\"\n```\n\n----------------------------------------\n\nTITLE: Aligning Textual ToastRack Container using CSS\nDESCRIPTION: This SCSS snippet shows how to change the position where Toasts appear by targeting the `ToastRack` CSS type selector. The `align` property is set to `right top`, which positions the container (and thus the toasts) in the top-right corner of the screen.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/toast.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\nToastRack {\n        align: right top;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Basic Padding Examples\nDESCRIPTION: Examples of setting padding using different CSS syntax variations. Shows how to set padding for all edges, top/bottom and left/right pairs, and individual edge specifications.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/padding.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Set padding of 1 around all edges */\npadding: 1;\n/* Set padding of 2 on the top and bottom edges, and 4 on the left and right */\npadding: 2 4;\n/* Set padding of 1 on the top, 2 on the right,\n                 3 on the bottom, and 4 on the left */\npadding: 1 2 3 4;\n\npadding-top: 1;\npadding-right: 2;\npadding-bottom: 3;\npadding-left: 4;\n```\n\n----------------------------------------\n\nTITLE: Example: Nested Collapsible Widgets Output\nDESCRIPTION: Placeholder reference for displaying the output of the Textual example demonstrating nested `Collapsible` widgets. The code generating this output is located in 'docs/examples/widgets/collapsible_nested.py'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_9\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/collapsible_nested.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Border Style Python Examples\nDESCRIPTION: Python implementation examples for setting border styles programmatically.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Set a heavy white border\nwidget.styles.border = (\"heavy\", \"white\")\n\n# Set a red border on the left\nwidget.styles.border_left = (\"outer\", \"red\")\n```\n\n----------------------------------------\n\nTITLE: Widget Rendering with Content Class\nDESCRIPTION: Equivalent widget render method using Content class\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass WelcomeWidget(Widget):\n    def render(self) -> RenderResult:\n        return Content.from_markup(\"[b]Hello, World![/b]\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scrollbar Colors in Python\nDESCRIPTION: A complete Python script demonstrating the use of various scrollbar color styles, including scrollbar-color-active. This example creates a Textual application with customized scrollbar colors.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_active.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbars2.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Return Code in Textual App\nDESCRIPTION: Example showing how to set and handle return codes when exiting a Textual application. Demonstrates proper error handling with custom return codes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif critical_error:\n    self.exit(return_code=4, message=\"Critical error occurred\")\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Alignment in Python with Textual\nDESCRIPTION: This Python snippet shows how to set the horizontal alignment of a widget to the right using Textual's style system.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/horizontal.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.align_horizontal = \"right\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Max-Height in Python with Textual\nDESCRIPTION: A Python script demonstrating the use of max-height in a Textual application, creating placeholders with different maximum heights.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_height.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/max_height.py\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Border Types CSS Styling\nDESCRIPTION: CSS configuration for displaying all border types example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/border_all.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Background Colors in Python\nDESCRIPTION: Examples of setting background colors in Python using string syntax and Color objects for more precise control.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/background.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Set blue background\nwidget.styles.background = \"blue\"\n# Set through HSL model\nwidget.styles.background = \"hsl(351,32%,89%)\"\n\nfrom textual.color import Color\n# Set with a color object by parsing a string\nwidget.styles.background = Color.parse(\"pink\")\nwidget.styles.background = Color.parse(\"#FF00FF\")\n# Set with a color object instantiated directly\nwidget.styles.background = Color(120, 60, 100)\n```\n\n----------------------------------------\n\nTITLE: Running a Textual App with Different Arguments\nDESCRIPTION: Example showing different ways to run a Textual app with various argument patterns, including default arguments, keyword arguments, and positional arguments.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Running with default arguments.\nGreetings().run()\n\n# Running with a keyword argument.\nGreetings(to_greet=\"davep\").run()\n\n# Running with both positional arguments.\nGreetings(\"Well hello\", \"there\").run()\n```\n\n----------------------------------------\n\nTITLE: Radio Button Styling\nDESCRIPTION: CSS styling rules for the radio button widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radiobutton.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/radio_button.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Extended TextArea Behavior using Textual Directive\nDESCRIPTION: Uses a Textual directive to display and interact with the extended `TextArea` example from `docs/examples/widgets/text_area_extended.py`. It simulates key presses ('d', 'e', 'f', 'space', 'h', 'e', 'l', 'l', 'o', '(') to demonstrate the custom behavior where typing an opening parenthesis automatically inserts the closing parenthesis and positions the cursor between them.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_17\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/text_area_extended.py\" columns=\"36\" lines=\"4\" press=\"d,e,f,space,h,e,l,l,o,left_parenthesis\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Log Widget Implementation in Textual\nDESCRIPTION: Shows implementation of a log widget for displaying and updating text lines.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_11\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/log.py\n```\n\n----------------------------------------\n\nTITLE: Defining Scrollbar Color Hover Style in CSS\nDESCRIPTION: Demonstrates the syntax for setting the scrollbar-color-hover style in CSS. It accepts a color value with an optional opacity percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_hover.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-color-hover: <color> [<percentage>];\n```\n\n----------------------------------------\n\nTITLE: Decreasing Console Verbosity\nDESCRIPTION: Shows how to decrease the verbosity of the Textual debug console by excluding specific message groups.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntextual console -x SYSTEM -x EVENT -x DEBUG -x INFO\n```\n\n----------------------------------------\n\nTITLE: Mapping Highlight Query Names to Styles in TextAreaTheme (Python)\nDESCRIPTION: Illustrates how syntax styles are defined within a `TextAreaTheme` in Python. It shows a partial definition for the 'monokai' theme, where capture names from a Tree-sitter highlight query (like 'heading' and 'link', corresponding to `@heading` and `@link`) are mapped to specific `rich.style.Style` objects within the `syntax_styles` dictionary.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nTextAreaTheme(\n    name=\"monokai\",\n    base_style=Style(color=\"#f8f8f2\", bgcolor=\"#272822\"),\n    gutter_style=Style(color=\"#90908a\", bgcolor=\"#272822\"),\n    # ...\n    syntax_styles={\n        # Colorise @heading and make them bold\n        \"heading\": Style(color=\"#F92672\", bold=True),\n        # Colorise and underline @link\n        \"link\": Style(color=\"#66D9EF\", underline=True),\n        # ...\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Widget Alignment with Background and Border in Python\nDESCRIPTION: This example adds a background color and border to a Static widget to better visualize its alignment. It sets the widget's width to 'auto' to demonstrate horizontal centering.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/center-things.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass CenterApp(App):\n    def compose(self) -> ComposeResult:\n        yield Static(\"Hello World!\")\n\n    CSS = \"\"\"\n    Screen {\n        align: center middle;\n    }\n\n    Static {\n        width: auto;\n        background: blue;\n        border: solid white;\n    }\n    \"\"\"\n\nif __name__ == \"__main__\":\n    app = CenterApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Setting Padding for Textual Toast Widgets using CSS\nDESCRIPTION: This SCSS snippet demonstrates how to apply padding to all Toast widgets by targeting the `Toast` CSS type selector. This rule sets the padding on all sides of the toast notification to 3 cells.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/toast.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\nToast {\n    padding: 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting text-align in Python for Textual\nDESCRIPTION: Example showing how to set text alignment to justify directly in Python code by accessing a widget's styles property. This allows programmatic control of text alignment.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/text_align.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.text_align = \"justify\"\n```\n\n----------------------------------------\n\nTITLE: Styling Link Colors in Textual CSS\nDESCRIPTION: Demonstrates how to set link colors using Textual CSS. It shows examples of using different color formats and variables.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nScreen {\n    background: $boost;\n}\n\n#label1 {\n    link-color: red;\n}\n\n#label2 {\n    link-color: green 50%;\n}\n\n#label3 {\n    link-color: #ffff00;\n}\n\n#label4 {\n    link-color: $accent;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Textual Repository with SSH - Bash\nDESCRIPTION: Shows how to clone the Textual repository using SSH for users who have configured SSH keys with GitHub. This enables secure authentication when cloning the repository, avoiding the need for username/password. Requires proper SSH setup in the user's environment.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Textualize/textual.git\n```\n\n----------------------------------------\n\nTITLE: Applying border styles with CSS in Textual\nDESCRIPTION: CSS example showing how to apply border styles to widgets in Textual applications, including full borders and individual border edges.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/border.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n#container {\n    border: heavy red;\n}\n\n#heading {\n    border-bottom: solid blue;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS with Nesting in Textual\nDESCRIPTION: Example demonstrating nested CSS rules, showing how to group related selectors and use the nesting selector (&).\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/css/nesting02.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Updating Placeholder Render on Variant Change in Python\nDESCRIPTION: This code shows how the Placeholder widget updates its render when the variant changes, using a reactive attribute and a watcher method.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/placeholder-pr.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Placeholder(Static):\n    # ...\n    variant = reactive(\"default\")\n    # ...\n    def watch_variant(\n        self, old_variant: PlaceholderVariant, variant: PlaceholderVariant\n    ) -> None:\n        self.validate_variant(variant)\n        self.remove_class(f\"-{old_variant}\")\n        self.add_class(f\"-{variant}\")\n        self.call_variant_update()  # <-- let this method do the heavy lifting!\n```\n\n----------------------------------------\n\nTITLE: Setting Percentage Values in Python for Textual\nDESCRIPTION: This example shows how to set percentage values in Python code for a Textual widget. It demonstrates applying both color with opacity percentage and offset with negative/decimal percentages.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/percentage.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Integer followed by %\nwidget.styles.color = \"red 70%\"\n\n# The number can be negative/decimal, although that may not make sense\nwidget.styles.offset = (\"-30%\", \"12.5%\")\n```\n\n----------------------------------------\n\nTITLE: Setting Border Title Style with Python\nDESCRIPTION: Example showing how to style border titles programmatically using Python by setting the border_title_style attribute.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_title_style.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.border_title_style = \"bold underline\"\n```\n\n----------------------------------------\n\nTITLE: Setting Keyline Style in Python for Textual\nDESCRIPTION: This Python snippet shows how to set a keyline style programmatically for a widget in Textual. It uses a tuple containing the keyline type ('thin') and color ('green').\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/keyline.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# A tuple of <keyline> and color\nwidget.styles.keyline = (\"thin\", \"green\")\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Margin Styling in CSS\nDESCRIPTION: CSS styles for the comprehensive margin settings example, showcasing various margin configurations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/margin_all.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Styling Placeholder Widget - CSS Implementation\nDESCRIPTION: CSS styling rules for the Placeholder widget, defining its visual appearance and layout properties.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/placeholder.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/placeholder.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Defining Scrollbar Corner Color Syntax in Textual\nDESCRIPTION: Syntax definition for the scrollbar-corner-color style, which accepts a color value and an optional opacity percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_corner_color.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-corner-color: <color> [<percentage>];\n```\n\n----------------------------------------\n\nTITLE: Running Textual Easing Preview\nDESCRIPTION: Command line instruction to preview available easing functions in Textual. Requires the textual-dev package to be installed.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/animation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntextual easing\n```\n\n----------------------------------------\n\nTITLE: Setting Box-sizing in Python\nDESCRIPTION: Python examples demonstrating how to set box-sizing on a widget to border-box (default) and content-box.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/box_sizing.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Set box sizing to border-box (default)\nwidget.box_sizing = \"border-box\"\n\n# Set box sizing to content-box\nwidget.box_sizing = \"content-box\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Label Widget in Python\nDESCRIPTION: Example showing how to use the Label widget for displaying text in a Textual application. This code demonstrates basic Label widget implementation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/label.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/label.py\"\n```\n\n----------------------------------------\n\nTITLE: Grid Column CSS Examples\nDESCRIPTION: CSS examples showing how to set fixed width columns and fractional width columns in a grid layout.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_columns.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Set all columns to have 50% width */\ngrid-columns: 50%;\n\n/* Every other column is twice as wide as the first one */\ngrid-columns: 1fr 2fr;\n```\n\n----------------------------------------\n\nTITLE: Setting text-align in CSS for Textual\nDESCRIPTION: Example showing how to set text alignment to justify using CSS in a Textual application. This applies the justify alignment to all Label widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/text_align.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nLabel {\n    text-align: justify;\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox Widget CSS Styling\nDESCRIPTION: CSS styling rules for the checkbox widget\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/checkbox.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/checkbox.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Background Colors in CSS\nDESCRIPTION: Examples of setting background colors using various color formats in CSS, including solid colors, RGB, HSL, and opacity.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/background.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Blue background */\nbackground: blue;\n\n/* 20% red background */\nbackground: red 20%;\n\n/* RGB color */\nbackground: rgb(100, 120, 200);\n\n/* HSL color */\nbackground: hsl(290, 70%, 80%);\n```\n\n----------------------------------------\n\nTITLE: Handling SelectionList Selection Changes in Python\nDESCRIPTION: References the Python code demonstrating how to react to changes in the selected items of a `SelectionList`. It typically involves watching for the `SelectionList.SelectedChanged` message and implementing a handler method (e.g., `on_selection_list_selected_changed`) to update another widget (like `Pretty`) with the current selection. The actual code is included from the specified file path (`docs/examples/widgets/selection_list_selected.py`). Note the type hint `SelectionList[str]` matching the string values used in this example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n~~~python\n--8<-- \"docs/examples/widgets/selection_list_selected.py\"\n~~~\n```\n\n----------------------------------------\n\nTITLE: Running the AI Chat TUI Application in Python\nDESCRIPTION: Creates an instance of the MotherApp and runs it, starting the AI chat TUI application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app = MotherApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Variant Watching for Button Widget in Python\nDESCRIPTION: This snippet shows how the Button widget in Textual handles variant changes by updating CSS classes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/placeholder-pr.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Button(Static, can_focus=True):\n    # ...\n\n    def watch_variant(self, old_variant: str, variant: str):\n        self.remove_class(f\"-{old_variant}\")\n        self.add_class(f\"-{variant}\")\n```\n\n----------------------------------------\n\nTITLE: Applying Text Colors in Textual CSS\nDESCRIPTION: Shows how to apply different text colors to widgets using Textual CSS, highlighting the relevant lines.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/color.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Gutter in CSS\nDESCRIPTION: Provides examples of setting grid gutters in CSS, including setting equal gutters and different vertical and horizontal gutters.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_gutter.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Set vertical and horizontal gutters to be the same */\ngrid-gutter: 5;\n\n/* Set vertical and horizontal gutters separately */\ngrid-gutter: 1 2;\n```\n\n----------------------------------------\n\nTITLE: Implementing Box-sizing Example in Python\nDESCRIPTION: A Python script demonstrating the use of box-sizing in a Textual application. It creates widgets with different box-sizing properties to show their effects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/box_sizing.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/box_sizing.py\"\n```\n\n----------------------------------------\n\nTITLE: Creating SelectionList from Tuples in Python\nDESCRIPTION: Provides the Python code reference for initializing a `SelectionList` widget using a list of tuples. Each tuple must contain a display prompt (string) and a unique value, and can optionally include an initial selected state (boolean). The actual code is included from the specified file path (`docs/examples/widgets/selection_list_tuples.py`). Note the type hint `SelectionList[int]` matching the integer values.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n~~~python\n--8<-- \"docs/examples/widgets/selection_list_tuples.py\"\n~~~\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Types in Textual Python Code\nDESCRIPTION: This example demonstrates how to set CSS type values programmatically in Python when working with Textual widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/_template.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.rule = type_value_1\nwidget.styles.rule = type_value_2\nwidget.styles.rule = type_value_3\n```\n\n----------------------------------------\n\nTITLE: System Exit with Return Code\nDESCRIPTION: Shows how to properly exit a Textual application with a return code using sys.exit().\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\"\n    app = MyApp()\n    app.run()\n    import sys\n    sys.exit(app.return_code or 0)\n```\n\n----------------------------------------\n\nTITLE: Displaying TextArea with Custom Theme using Textual Directive\nDESCRIPTION: Uses a Textual directive to render an example application defined in `docs/examples/widgets/text_area_custom_theme.py`. This visually demonstrates the effect of applying the 'my_cool_theme' to the `TextArea` widget within a specified layout.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_14\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/text_area_custom_theme.py\" columns=\"42\" lines=\"8\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Textual Snapshot Test in Python using Pytest\nDESCRIPTION: This Python snippet demonstrates how to write a simple snapshot test for a Textual application using the `pytest` framework. It defines a test function that accepts the `snap_compare` fixture. The test asserts the result of calling `snap_compare` with the path to a Textual app script, which triggers a comparison against a saved snapshot.\nSOURCE: https://github.com/textualize/textual/blob/main/notes/snapshot_testing.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test_grid_layout_basic_overflow(snap_compare):\n    assert snap_compare(\"docs/examples/guide/layout/grid_layout2.py\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Scrollbar Colors in Textual Python\nDESCRIPTION: This Python script creates a Textual application with two panels demonstrating custom scrollbar colors. It imports necessary modules, defines the app structure, and sets up the content for comparison between default and custom scrollbar styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbars.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining Scrollbar Color in CSS\nDESCRIPTION: Sets the color of the scrollbar using CSS syntax. The color can be specified as a named color or any valid CSS color value.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-color: cyan;\n```\n\n----------------------------------------\n\nTITLE: Obtaining Java Language Object for Tree-sitter in Python\nDESCRIPTION: This snippet demonstrates how to obtain a Language object for Java using the py-tree-sitter-languages package. This is a prerequisite for adding Java syntax highlighting support to a TextArea widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom tree_sitter_languages import get_language\njava_language = get_language(\"java\")\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip for Textual Widget in Python\nDESCRIPTION: Demonstrates how to add a tooltip to a Textual widget by assigning a string to the tooltip property. This simple API allows for easy implementation of tooltips that appear after a 300ms hover.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-27-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwidget.tooltip = \"This is a tooltip\"\n```\n\n----------------------------------------\n\nTITLE: Basic Outline CSS Properties\nDESCRIPTION: Example CSS code showing how to set heavy white outline and red left outline\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/outline.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* Set a heavy white outline */\noutline:heavy white;\n\n/* set a red outline on the left */\noutline-left:outer red;\n```\n\n----------------------------------------\n\nTITLE: Setting Overflow in Python for Textual Widgets\nDESCRIPTION: This example shows how to set the vertical overflow property of a widget to hidden using Python code, preventing content from overflowing vertically.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/overflow.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.overflow_y = \"hidden\"  # Don't overflow\n```\n\n----------------------------------------\n\nTITLE: Example: Collapsible Widget (Mixed States)\nDESCRIPTION: Placeholder reference to a Textual example demonstrating multiple `Collapsible` widgets in mixed expanded and collapsed states, showing the default appearance. The actual code resides in 'docs/examples/widgets/collapsible.py'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_7\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/collapsible.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Outline Example in Python\nDESCRIPTION: Example showing basic implementation of outline styling in a Textual application\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/outline.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/outline.py\"\n```\n\n----------------------------------------\n\nTITLE: Using the @on Decorator in Textual for Event Handling\nDESCRIPTION: Example of using the @on decorator in Textual to handle button press events in a calculator application. The decorator allows for declarative and fine-grained message dispatching.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-24-0.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    @on(Button.Pressed, \"#plus,#minus,#divide,#multiply\")\n    def pressed_op(self, event: Button.Pressed) -> None:\n        \"\"\"Pressed one of the arithmetic operations.\"\"\"\n        self.right = Decimal(self.value or \"0\")\n        self._do_math()\n        assert event.button.id is not None\n        self.operator = event.button.id\n```\n\n----------------------------------------\n\nTITLE: Message Handling with Traditional Approach in Textual\nDESCRIPTION: Demonstrates the traditional way of handling button press events in Textual using a single message handler with conditional logic to differentiate between buttons.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-23-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/events/on_decorator01.py\"\n```\n\n----------------------------------------\n\nTITLE: Button with ID Example\nDESCRIPTION: Example showing how to create a Button widget with a unique ID for CSS targeting.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nyield Button(id=\"next\")\n```\n\n----------------------------------------\n\nTITLE: Setting Link Background in Python\nDESCRIPTION: Demonstrates how to set link background colors programmatically in Python, including using string values and Color objects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_background.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.link_background = \"red 70%\"\nwidget.styles.link_background = \"$accent\"\n\n# You can also use a `Color` object directly:\nwidget.styles.link_background = Color(100, 30, 173)\n```\n\n----------------------------------------\n\nTITLE: Basic Content Alignment Example - CSS\nDESCRIPTION: CSS styles for basic content alignment example showing different alignment options.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/content_align.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Container Visibility Styles\nDESCRIPTION: CSS styles for container visibility example showing inheritance and override patterns.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/visibility_containers.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Installing Textual Developer Tools\nDESCRIPTION: Installation command for Textual development tools package.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install textual-dev\n```\n\n----------------------------------------\n\nTITLE: Applying Text Styles in CSS for Textual\nDESCRIPTION: Demonstrates how to apply text styles using CSS in Textual. Shows examples of applying a single style and combining multiple styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/text_style.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#label1 {\n    /* You can specify any value by itself. */\n    rule: strike;\n}\n\n#label2 {\n    /* You can also combine multiple values. */\n    rule: strike bold italic reverse;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Textual Layer Example Output\nDESCRIPTION: Placeholder demonstrating the expected output of the Textual application defined in 'layers.py' and styled by 'layers.tcss'. This shows the visual result of applying layers to control widget stacking order.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_11\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/guide/layout/layers.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Outline Types Example in Python\nDESCRIPTION: Example demonstrating all available outline types in Textual\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/outline.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/outline_all.py\"\n```\n\n----------------------------------------\n\nTITLE: Footer Widget Implementation in Textual\nDESCRIPTION: Demonstrates a footer widget for displaying and interacting with key bindings.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_6\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/footer.py\n```\n\n----------------------------------------\n\nTITLE: Defining Margin Syntax in CSS\nDESCRIPTION: Shows the syntax for defining margins in CSS, including single-value, two-value, and four-value notations, as well as individual margin properties.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nmargin: <integer>\n      # one value for all edges\n      | <integer> <integer>\n      # top/bot   left/right\n      | <integer> <integer> <integer> <integer>;\n      # top       right     bot       left\n\nmargin-top: <integer>;\nmargin-right: <integer>;\nmargin-bottom: <integer>;\nmargin-left: <integer>;\n```\n\n----------------------------------------\n\nTITLE: CSS Horizontal Alignment Property Syntax\nDESCRIPTION: Demonstrates the syntax format for the align-horizontal CSS property using the <horizontal> type reference.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/index.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nalign-horizontal: <horizontal>;\n```\n\n----------------------------------------\n\nTITLE: Styling Text Alignment in Textual CSS\nDESCRIPTION: CSS file highlighting different text alignment styles (left, center, right, justify) for Textual widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_align.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/text_align.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Inline CSS Configuration in Textual App\nDESCRIPTION: Shows how to define CSS styles directly within the Python code using the CSS class variable.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/app/question03.py\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Title Configuration in Textual App\nDESCRIPTION: Demonstrates dynamic updating of title and subtitle in response to user input.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/app/question_title02.py\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifications in Textual 0.30.0 (Python)\nDESCRIPTION: Demonstrates how to use the new notify() method to display a notification in Textual 0.30.0. The method takes a message and an optional title as parameters.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-30-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_mount(self) -> None:\n    self.notify(\"Hello, from Textual!\", title=\"Welcome\")\n```\n\n----------------------------------------\n\nTITLE: Setting Right Text Alignment in Python\nDESCRIPTION: Python example demonstrating how to set text alignment to right for a widget in Textual using the styles attribute.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_align.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Set text in the widget to be right aligned\nwidget.styles.text_align = \"right\"\n```\n\n----------------------------------------\n\nTITLE: Setting Text Opacity in CSS\nDESCRIPTION: Example of setting text opacity to 50% using CSS syntax.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_opacity.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Set the text to be \"half-faded\" against the background of the widget */\ntext-opacity: 50%;\n```\n\n----------------------------------------\n\nTITLE: Handling Resize Events for Size Variant in Python\nDESCRIPTION: This snippet demonstrates how the Placeholder widget handles resize events to update its render when using the 'size' variant.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/placeholder-pr.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Placeholder(Static):\n    # ...\n    def on_resize(self, event: events.Resize) -> None:\n        \"\"\"Update the placeholder \\\"size\\\" variant with the new placeholder size.\"\"\"\n        if self.variant == \"size\":\n            self._update_size_variant()\n```\n\n----------------------------------------\n\nTITLE: Setting Column-span in Python for Textual\nDESCRIPTION: Demonstrates how to set the column-span property programmatically in Python for a Textual widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/column_span.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.column_span = 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Translucent Screen Background in Textual CSS\nDESCRIPTION: This SASS code snippet demonstrates how to set a translucent background for a DialogScreen in Textual. It uses the $primary color with 30% opacity to create a semi-transparent effect that allows the underlying screen to be visible.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-17-0.md#2025-04-22_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\nDialogScreen {\n    align: center middle;\n    background: $primary 30%;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal Alignment in CSS\nDESCRIPTION: This CSS snippet demonstrates how to use the align-horizontal property to align content to the right in a container element.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/horizontal.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.container {\n    align-horizontal: right;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Box-sizing Syntax in CSS\nDESCRIPTION: Shows the CSS syntax for setting the box-sizing property. It can be set to either border-box or content-box.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/box_sizing.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbox-sizing: border-box | content-box;\n```\n\n----------------------------------------\n\nTITLE: Referencing Example for Extending TextArea Key Handling in Python\nDESCRIPTION: This snippet acts as a reference (using an include directive) to an external Python file (`docs/examples/widgets/text_area_extended.py`). The referenced file contains an example of subclassing `TextArea` to override the `_on_key` method, specifically to implement automatic closing of parentheses when '(' is typed.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/text_area_extended.py\"\n```\n\n----------------------------------------\n\nTITLE: Using TabbedContent with Markdown Documents in Python\nDESCRIPTION: Example showing how to compose a TabbedContent widget with three tabs (Leto, Jessica, and Paul) to navigate between different Markdown documents.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-16-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef compose(self) -> ComposeResult:\n    with TabbedContent(\"Leto\", \"Jessica\", \"Paul\"):\n        yield Markdown(LETO)\n        yield Markdown(JESSICA)\n        yield Markdown(PAUL)\n```\n\n----------------------------------------\n\nTITLE: Positioning a Label with Absolute Position in CSS\nDESCRIPTION: CSS example showing how to set absolute positioning for a Label widget with an offset of 10 units from the left and 5 units from the top of its container.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/position.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nLabel {\n    position: absolute;\n    offset: 10 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Background Active Color - CSS Example\nDESCRIPTION: Example showing how to set the scrollbar background active color to red using CSS.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_active.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-background-active: red;\n```\n\n----------------------------------------\n\nTITLE: Setting Text Styles in Python for Textual\nDESCRIPTION: Shows how to set text styles programmatically in Python when using Textual. Includes examples of setting a single style and combining multiple styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/text_style.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# You can specify any value by itself\nwidget.styles.text_style = \"strike\"\n\n# You can also combine multiple values\nwidget.styles.text_style = \"strike bold italic reverse\n```\n\n----------------------------------------\n\nTITLE: Styling Sparkline Widget Colors Using CSS in Textual\nDESCRIPTION: Defines CSS rules for component classes that set the colors of individual Sparkline widgets. The stylesheet is meant to be paired with the corresponding Python code where classes are assigned to the widgets. Requires correct linkage of the CSS file in the Textual app and proper use of defined classes in Python. Controls the final appearance of sparkline bars, enabling themes and custom color highlights.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n```\n--8<-- \\\"docs/examples/widgets/sparkline_colors.tcss\\\"\n```\n```\n\n----------------------------------------\n\nTITLE: Weather App Styling - CSS\nDESCRIPTION: CSS styling rules for the weather application interface.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/workers/weather.tcss\"\n```\n\n----------------------------------------\n\nTITLE: CSS Min-height Implementation Examples\nDESCRIPTION: Examples showing how to set minimum height using rows and viewport height units.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/min_height.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Set the minimum height to 10 rows */\nmin-height: 10;\n\n/* Set the minimum height to 25% of the viewport height */\nmin-height: 25vh;\n```\n\n----------------------------------------\n\nTITLE: Setting Text Style in CSS\nDESCRIPTION: This CSS snippet shows how to set the text-style property to italic. It's a simple example of applying a text style in Textual CSS.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_style.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\ntext-style: italic;\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Height to 50% in Textual CSS\nDESCRIPTION: CSS example showing how to set a widget's height to 50% of its container in Textual. This is part of the basic usage example for the height style.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/height.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Layered Layout in Textual with Python\nDESCRIPTION: Python code for a Textual application demonstrating the use of layers. It defines an App containing widgets. The actual layer assignment and definition are typically handled in the associated CSS file ('layers.tcss'), but the Python code structures the widgets that will be layered. Dependencies: Textual library.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/layers.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Right Text Alignment in CSS\nDESCRIPTION: CSS example showing how to set text alignment to right for a widget in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_align.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Set text in the widget to be right aligned */\ntext-align: right;\n```\n\n----------------------------------------\n\nTITLE: Filtered DirectoryTree Implementation\nDESCRIPTION: Example showing how to implement a filtered DirectoryTree that excludes hidden files and directories by customizing the filter_paths method.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/directory_tree.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/directory_tree_filtered.py\"\n```\n\n----------------------------------------\n\nTITLE: Styling Box-sizing Example in CSS\nDESCRIPTION: CSS styles for the box-sizing example, highlighting the lines where box-sizing is set for different widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/box_sizing.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/box_sizing.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Textual Opacity Example CSS\nDESCRIPTION: CSS file showing multiple opacity levels applied to different widgets, demonstrating the visual effect of various opacity values.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/opacity.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/opacity.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Self-referential usage of Rich's inspect function\nDESCRIPTION: Shows how to use inspect on itself to view its own parameters and documentation, which is a clever way to learn about all available options for the function.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/rich-inspect.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> inspect(inspect)\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position with Python in Textual\nDESCRIPTION: Python code example demonstrating how to set the position property to absolute and apply an offset of (10, 5) to a widget using the styles API.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/position.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.position = \"absolute\"\nwidget.styles.offset = (10, 5)\n```\n\n----------------------------------------\n\nTITLE: Example: Custom Symbols Collapsible Output\nDESCRIPTION: Placeholder reference for displaying the output of the Textual example demonstrating `Collapsible` widgets configured with custom expand/collapse symbols. The source code is in 'docs/examples/widgets/collapsible_custom_symbol.py'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_11\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/collapsible_custom_symbol.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Border Title Alignment in Python\nDESCRIPTION: Examples of setting border title alignment using Python in the Textual framework. The alignment can be set to left, center, or right using the styles attribute of a widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_title_align.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.border_title_align = \"left\"\nwidget.styles.border_title_align = \"center\"\nwidget.styles.border_title_align = \"right\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Margin Settings Example in Python\nDESCRIPTION: A more complex Python script showcasing various margin settings in a grid layout using Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/margin_all.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Alignment in Python for Textual\nDESCRIPTION: This Python snippet shows how to set the vertical alignment of a widget to the top using the styles.align_vertical attribute in Textual's Python API.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/vertical.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.align_vertical = \"top\"\n```\n\n----------------------------------------\n\nTITLE: Setting Offset Programmatically in Python\nDESCRIPTION: Shows how to set the offset for a widget programmatically using Python. Note that both x and y offsets must be set simultaneously.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/offset.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Move the widget 2 cells in the x direction, and 4 in the y direction.\nwidget.styles.offset = (2, 4)\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Style Syntax in Textual CSS\nDESCRIPTION: Shows the syntax for defining the 'layer' style in Textual CSS. The style accepts a <name> value that corresponds to a layer defined in the 'layers' style of an ancestor widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layer.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlayer: <a href=\"../../css_types/name\">&lt;name&gt;</a>;\n```\n\n----------------------------------------\n\nTITLE: Styling Modal Screen in Textual CSS\nDESCRIPTION: This CSS snippet provides styling for the modal screen in the Textual application. It sets the background, border, and padding for the modal overlay.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nScreen {\n    align: center middle;\n}\n\n#quit-screen {\n    background: $boost;\n    border: thick $background 80%;\n    padding: 1 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Row Heights in Textual Grid\nDESCRIPTION: Shows how to set row heights using percentage values, with the first row taking 25% and second row taking 75% of the available height.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nhl_lines=\"5\"\n--8<-- \"docs/examples/guide/layout/grid_layout4_row_col_adjust.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Screen Installation Example\nDESCRIPTION: Shows how to dynamically install screens using the install_screen method rather than the SCREENS class variable.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/screens/screen02.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/screens/screen02.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Creating Links with Textual Markup\nDESCRIPTION: Shows how to create clickable links in Textual using the link markup syntax\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_5\n\nLANGUAGE: markup\nCODE:\n```\n[link=\"https://www.willmcgugan.com\"]Visit my blog![/link]\n```\n\n----------------------------------------\n\nTITLE: Column Spanning in Textual Grid\nDESCRIPTION: Shows how to make a cell span multiple columns using column-span CSS property. The example makes the second widget span two columns with a magenta tint.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/grid_layout5_col_span.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\nhl_lines=\"6-9\"\n--8<-- \"docs/examples/guide/layout/grid_layout5_col_span.tcss\"\n```\n\n----------------------------------------\n\nTITLE: OptionList Widget Implementation in Textual\nDESCRIPTION: Shows implementation of a vertical list of Rich-renderable options.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_15\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/option_list_options.py\n```\n\n----------------------------------------\n\nTITLE: Setting Box-sizing in CSS\nDESCRIPTION: CSS examples showing how to set box-sizing to border-box (default) and content-box.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/box_sizing.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Set box sizing to border-box (default) */\nbox-sizing: border-box;\n\n/* Set box sizing to content-box */\nbox-sizing: content-box;\n```\n\n----------------------------------------\n\nTITLE: Setting Hatch Style in Python\nDESCRIPTION: Shows how to set a hatch style on a widget using Python. This example applies a cross hatch pattern in red color.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/hatch.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.hatch = (\"cross\", \"red\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Collapsed State (Python)\nDESCRIPTION: Demonstrates setting the initial state of `Collapsible` widgets using the `collapsed` boolean parameter in the constructor. `collapsed=False` makes the widget initially expanded, while `collapsed=True` (the default) makes it initially collapsed.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\ndef compose(self) -> ComposeResult:\n    with Collapsible(title=\"Contents 1\", collapsed=False):\n        yield Label(\"Hello, world.\")\n\n    with Collapsible(title=\"Contents 2\", collapsed=True):  # Default.\n        yield Label(\"Hello, world.\")\n```\n```\n\n----------------------------------------\n\nTITLE: New Message Posting with post_message in Textual (0.14.0+)\nDESCRIPTION: Example of how messages are posted in Textual 0.14.0 and later, using the simplified post_message method which is no longer async and doesn't require explicitly passing the sender.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-14-0.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.post_message(self.Change(item=self.item))\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Style Syntax in Markdown\nDESCRIPTION: Demonstrates how to define the formal syntax of a CSS style using Markdown and HTML. It includes placeholders for the style name and type references.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/_template.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"docs/snippets/syntax_block_start.md\"\n<!--\nFormal syntax description of the style\nstyle-name: <a href=\"../../css_types/type_one\">&lt;type-one&gt;</a>;\n-->\n--8<-- \"docs/snippets/syntax_block_end.md\"\n```\n\n----------------------------------------\n\nTITLE: Running Textual Apps from Command-line Scripts\nDESCRIPTION: Demonstrates how to run a Textual app that is installed as a command-line script.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntextual run -c textual colors\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Gutter Syntax in Textual CSS\nDESCRIPTION: Shows the syntax for defining grid gutters in Textual CSS, allowing for one or two integer values to set vertical and horizontal gutters.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_gutter.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ngrid-gutter: <integer> [<integer>];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various Height Units in Textual CSS\nDESCRIPTION: CSS code showing different units and methods for setting widget heights in Textual, including lines, percentages, viewport units, and fractional units.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/height_comparison.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Defining Column-span Syntax in Textual CSS\nDESCRIPTION: Demonstrates the syntax for defining the column-span style in Textual CSS. It accepts a single non-negative integer value.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/column_span.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ncolumn-span: <integer>;\n```\n\n----------------------------------------\n\nTITLE: Textual Opacity Example Python\nDESCRIPTION: Python implementation file showing how to create widgets with different opacity levels. The example demonstrates opacity effects in a real application context.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/opacity.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/opacity.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Title for Collapsible (Python)\nDESCRIPTION: Shows how to customize the default title (\"Toggle\") of a `Collapsible` widget by setting the `title` parameter in its constructor. This allows providing a more descriptive label for the collapsible section.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\ndef compose(self) -> ComposeResult:\n    with Collapsible(title=\"An interesting story.\"):\n        yield Label(\"Interesting but verbose story.\")\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Text Overflow in CSS for Textual\nDESCRIPTION: This CSS snippet demonstrates how to set the text-overflow property for a widget in Textual. It uses the 'ellipsis' value, which truncates overflowing text and adds an ellipsis at the end.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_overflow.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#widget {\n    text-overflow: ellipsis; \n}\n```\n\n----------------------------------------\n\nTITLE: Querying Widgets by Type in Textual\nDESCRIPTION: Demonstrates how to use the query method with a selector to find all widgets of a specific type.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor button in self.query(\"Button\"):\n    print(button)\n```\n\n----------------------------------------\n\nTITLE: Implementing WidgetError Exception for Widget-related Issues\nDESCRIPTION: Defines an exception class for errors related to widget operations. Used when there's a problem with widget manipulation, creation, or management.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass WidgetError(TextualError):\n    \"\"\"Errors related to widgets.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Mounting Widgets in Textual Framework - Python\nDESCRIPTION: Examples demonstrating the updated mount method functionality in Textual 0.4.0, including mounting widgets at specific positions using 'before' and 'after' parameters. Shows three different mounting approaches: at the start of a container, after a CSS selector match, and after a specific widget instance.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-4-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Mount at the start\nself.mount(Button(id=\"Buy Coffee\"), before=0)\n\n# Mount after a selector\nself.mount(Static(\"Password is incorrect\"), after=\"Dialog Input.-error\")\n\n# Mount after a specific widget\ntweet = self.query_one(\"Tweet\")\nself.mount(Static(\"Consider switching to Mastodon\"), after=tweet)\n```\n\n----------------------------------------\n\nTITLE: TabbedContent Widget Implementation in Textual\nDESCRIPTION: Demonstrates combined tabs and content switching functionality.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_28\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/tabbed_content.py\n```\n\n----------------------------------------\n\nTITLE: Accessing Textual CLI Help\nDESCRIPTION: Command to display available Textual CLI commands and options.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntextual --help\n```\n\n----------------------------------------\n\nTITLE: Link Style Hover Examples in CSS\nDESCRIPTION: Examples of using the link-style-hover property in CSS to style action links when hovered. Shows basic bold styling and multiple style combinations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style_hover.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlink-style-hover: bold;\nlink-style-hover: bold italic reverse;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Visible Widgets from Spatial Map in Python for Textual\nDESCRIPTION: This code snippet shows how to retrieve and process the list of potentially visible widgets from the spatial map. It demonstrates the process of combining and de-duplicating widget lists from relevant grid coordinates.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release1.0.0.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[\n  [widget1, widget2, widget3],\n  [widget1, widget2, widget3],\n  [widget4, widget5, widget6],\n  [widget4, widget5, widget6],\n]\n```\n\nLANGUAGE: python\nCODE:\n```\n[widget1, widget2, widget3, widget4, widget5, widget6]\n```\n\n----------------------------------------\n\nTITLE: Displaying Textual Output Example in Markdown\nDESCRIPTION: Shows how to include a Textual output example in the documentation using Markdown code blocks with specific path attributes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/_template.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n=== \"Output\"\n\n    ```{.textual path=\"docs/examples/styles/style.py\"}\n    ```\n```\n\n----------------------------------------\n\nTITLE: Running Textual Apps from Python Files\nDESCRIPTION: Demonstrates how to run a Textual app from a Python file using the 'run' subcommand.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntextual run my_app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Border Subtitle Style with CSS\nDESCRIPTION: CSS syntax for applying text styles to widget border subtitles. Uses the border-subtitle-style property to set bold and underline styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_style.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-subtitle-style: bold underline;\n```\n\n----------------------------------------\n\nTITLE: Setting Align Style in Python\nDESCRIPTION: Python code snippets showing how to set the 'align' style programmatically. It includes examples for setting both axes simultaneously and individually.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/align.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Align child widgets to the center\nwidget.styles.align = (\"center\", \"middle\")\n# Align child widgets to the top right\nwidget.styles.align = (\"right\", \"top\")\n\n# Change the horizontal alignment of the children of a widget\nwidget.styles.align_horizontal = \"right\"\n# Change the vertical alignment of the children of a widget\nwidget.styles.align_vertical = \"middle\"\n```\n\n----------------------------------------\n\nTITLE: Nested CSS using SASS Syntax\nDESCRIPTION: Alternative representation of nested CSS using SASS syntax, showing the same styling with nested selectors.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_23\n\nLANGUAGE: sass\nCODE:\n```\n--8<-- \"docs/examples/guide/css/nesting02.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Switch Widget Implementation in Textual\nDESCRIPTION: Demonstrates an on/off toggle control implementation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_26\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/switch.py\n```\n\n----------------------------------------\n\nTITLE: Defining Layers in Textual CSS\nDESCRIPTION: Syntax for defining layers in Textual CSS. It accepts one or more named layers that determine the order in which widgets are painted on the screen.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layers.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlayers: <name>+;\n```\n\n----------------------------------------\n\nTITLE: CSS Min-height Basic Syntax\nDESCRIPTION: Basic syntax example showing how to set minimum height using scalar values.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/min_height.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nmin-height: <scalar>;\n```\n\n----------------------------------------\n\nTITLE: Querying the Entire Screen in Textual\nDESCRIPTION: Demonstrates how to search the entire DOM by calling query_one on the Screen instance.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.screen.query_one(\"#send-email\")\n```\n\n----------------------------------------\n\nTITLE: Defining Scrollbar Color Active in CSS\nDESCRIPTION: Sets the color of the scrollbar thumb to yellow when it's being dragged. This CSS rule can be applied to customize the active state of scrollbars in Textual applications.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_active.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-color-active: yellow;\n```\n\n----------------------------------------\n\nTITLE: Row Span Example CSS\nDESCRIPTION: Example CSS file showing row span usage in a grid layout with multiple placeholders spanning different numbers of rows.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/row_span.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/row_span.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Dimensions with Different Scalar Units in Python\nDESCRIPTION: Python example demonstrating how to set widget dimensions using scalar values. It shows that cell units can be specified as integers/floats directly, while other units need to be provided as strings.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/scalar.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.width = 16       # Cell unit can be specified with an int/float\nwidget.styles.height = \"1fr\"   # proportional size of 1\n```\n\n----------------------------------------\n\nTITLE: Example Output of Tabs Widget Application (Textual)\nDESCRIPTION: Represents the expected terminal output of the example application `docs/examples/widgets/tabs.py` after specific key presses ('a' pressed four times, then right arrow twice). This demonstrates the visual appearance and behavior of the `Tabs` widget within a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabs.md#2025-04-22_snippet_2\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/tabs.py\" press=\"a,a,a,a,right,right\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Specific Textual App Instances or Classes\nDESCRIPTION: Shows how to run a specific Textual app instance or class from a Python import.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntextual run music.play:MusicPlayerApp\n```\n\n----------------------------------------\n\nTITLE: Embedding Binding Documentation Block for DataTable in Markdown\nDESCRIPTION: This snippet embeds a special block directive used by the documentation system to include the BINDINGS class from the DataTable widget, specifying options to hide root heading and TOC entry. It expects the documentation tooling to interpret the directive and inject live documentation from the source code. The block is not user-executable and is reliant on the Textual documentation generator for rendering.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.widgets.DataTable.BINDINGS\\n    options:\\n      show_root_heading: false\\n      show_root_toc_entry: false\n```\n\n----------------------------------------\n\nTITLE: Implementing DuplicateMessageHandlerError Exception for Event Handler Conflicts\nDESCRIPTION: Defines an exception that is raised when attempting to register multiple handlers for the same message type. Helps maintain correct event handler registration.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass DuplicateMessageHandlerError(MessageError):\n    \"\"\"Errors related to having duplicate message handlers.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Widget Rendering with Markup\nDESCRIPTION: Example of a widget render method returning markup string\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass WelcomeWidget(Widget):\n    def render(self) -> RenderResult:\n        return \"[b]Hello, World![/b]\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget with CSS in Textual\nDESCRIPTION: Example showing how to define a custom widget with DEFAULT_CSS that might have unintended style inheritance prior to v0.38.0. This demonstrates the problem that the new scoped CSS feature addresses.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-38-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyWidget(Widget):\n    DEFAULT_CSS = \"\"\"\n    MyWidget {\n        height: auto;\n        border: magenta;\n    }\n    Label {\n        border: solid green;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield Label(\"foo\")\n        yield Label(\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Using the AwaitComplete Class in Textual for Background Task Management\nDESCRIPTION: The AwaitComplete class is returned by methods that perform work in the background. Developers can either await this object to know when work is completed, or ignore it and let Textual automatically await completion before handling the next message.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/await_complete.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: textual.await_complete\n```\n\n----------------------------------------\n\nTITLE: Launching Calculator Application\nDESCRIPTION: Command to launch the calculator application from command line.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncalculator\n```\n\n----------------------------------------\n\nTITLE: Setting Layer in Textual Python\nDESCRIPTION: Demonstrates how to set a widget's layer to 'below' using Python in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layer.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Draw the widget on the layer called 'below'\nwidget.styles.layer = \"below\"\n```\n\n----------------------------------------\n\nTITLE: Width Python Examples\nDESCRIPTION: Examples of setting widget width using Python styles API.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.width = 10\nwidget.styles.width = \"50%\nwidget.styles.width = \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Python Examples for Scrollbar Gutter in Textual\nDESCRIPTION: Demonstrates how to set the scrollbar_gutter style in Python using Textual, showing both 'auto' and 'stable' options with explanatory comments.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_gutter.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.styles.scrollbar_gutter = \"auto\"    # Don't reserve space for a vertical scrollbar.\nself.styles.scrollbar_gutter = \"stable\"  # Reserve space for a vertical scrollbar.\n```\n\n----------------------------------------\n\nTITLE: Styling Select Widget Using CSS in Textual (CSS)\nDESCRIPTION: This CSS snippet provides customization for the Select widget within a Textual application. Located in docs/examples/widgets/select.tcss, it allows altering the visual appearance of the Select control by targeting its classes and elements. It must be used alongside the associated Textual app for the styling to take effect. Inputs are CSS rules; outputs are the applied style changes to the widget UI at runtime.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/select.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/select.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Textual Repository with GitHub CLI - Bash\nDESCRIPTION: Utilizes GitHub CLI to clone the Textual repository. The command requires the 'gh' tool to be installed and authenticated. This method provides additional features like easier repository management from the command line.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone Textualize/textual\n```\n\n----------------------------------------\n\nTITLE: Displaying Textual CLI Help\nDESCRIPTION: Shows how to display the help information for the Textual command-line interface.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntextual --help\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Background Hover Color in Python\nDESCRIPTION: Programmatically sets the background color of a scrollbar to purple when hovered over using Textual's Python API.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_hover.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.scrollbar_background_hover = \"purple\"\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Styles Directly in Python\nDESCRIPTION: Basic example showing how to set a widget's background color and text color directly via the styles property in Python code.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nself.styles.background = \"blue\"\nself.styles.color = \"white\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Border and Outline Differences in Python using Textual\nDESCRIPTION: This Python script creates a Textual app with three labels to showcase the differences between border and outline styles. It sets up the labels with different styles and arranges them side by side for comparison.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_vs_outline_example.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/outline_vs_border.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Display Style in Python\nDESCRIPTION: Demonstrates how to programmatically set the display style in Python to show or hide a widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/display.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Hide the widget\nself.styles.display = \"none\"\n\n# Show the widget again\nself.styles.display = \"block\"\n```\n\n----------------------------------------\n\nTITLE: Running Textual Apps from Python Imports\nDESCRIPTION: Demonstrates how to run a Textual app from a Python import using the 'run' subcommand.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntextual run music.play\n```\n\n----------------------------------------\n\nTITLE: Using &lt;number&gt; type in Textual Python code\nDESCRIPTION: Shows how to set styles that expect a &lt;number&gt; type in Python code for Textual, using both int and float values.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/number.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.grid_size = (3, 6)  # Integers are numbers\nwidget.styles.opacity = 0.5       # Numbers can have a decimal part\n```\n\n----------------------------------------\n\nTITLE: Implementing NoWidget Exception for Missing Widget Scenarios\nDESCRIPTION: Defines an exception that is raised when attempting to access a widget that doesn't exist or hasn't been properly initialized.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass NoWidget(WidgetError):\n    \"\"\"Raised when navigating to a widget that doesn't exist.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Textual Blur Event Reference Block\nDESCRIPTION: Sphinx documentation directive for the Blur event class from the textual.events module with heading level configuration.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/blur.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.events.Blur\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Keyline in CSS\nDESCRIPTION: Example of setting a thin green keyline using CSS in Textual. Must be set on a container or a widget with a layout.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/keyline.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* Set a thin green keyline */\n/* Note: Must be set on a container or a widget with a layout. */\nkeyline: thin green;\n```\n\n----------------------------------------\n\nTITLE: Defining Display Style in CSS\nDESCRIPTION: Shows how to set the display style in CSS to either show or hide a widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/display.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Widget is shown */\ndisplay: block;\n\n/* Widget is not shown */\ndisplay: none;\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons with CSS in Textual\nDESCRIPTION: CSS styles for buttons in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/events/on_decorator.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Batch Update Implementation for Markdown Widget\nDESCRIPTION: Example of using batch_update context manager to prevent screen flicker when updating markdown content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-12-0.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith self.app.batch_update():\n    await self.query(\"MarkdownBlock\").remove()\n    await self.mount_all(output)\n```\n\n----------------------------------------\n\nTITLE: Defining Link Background in CSS\nDESCRIPTION: Examples of setting link background colors using CSS syntax, showing how to set color with opacity percentage and using accent variables.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_background.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlink-background: red 70%;\nlink-background: $accent;\n```\n\n----------------------------------------\n\nTITLE: Styling Scrollbars with TCSS\nDESCRIPTION: A TCSS (Textual CSS) file that demonstrates how to style scrollbars, including the scrollbar-color-active property. This style sheet can be used in conjunction with the Python script to customize scrollbar appearance.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_active.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbars2.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Document Line Separator in Python\nDESCRIPTION: Shows how to access the detected line separator character (e.g., '\\n' for LF or '\\r\\n' for CRLF) for the document currently loaded in a `TextArea` instance. This is done by inspecting the `newline` attribute of the `document` object associated with the `text_area`.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> text_area = TextArea()\n>>> text_area.document.newline\n'\\n'\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Scrollbar Color Hover in Python\nDESCRIPTION: Shows how to set the scrollbar-color-hover style in a Python script using Textual. This example is part of a larger demonstration file.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_hover.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbars2.py\"\n```\n\n----------------------------------------\n\nTITLE: Python Link Implementation Example\nDESCRIPTION: Python code example showing the implementation of styled links in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/links.py\"\n```\n\n----------------------------------------\n\nTITLE: Styling Border and Outline in CSS for Textual\nDESCRIPTION: This CSS file defines styles for the labels in the Textual app, highlighting the differences between border and outline. It sets specific styles for border, outline, and a combination of both to demonstrate their visual effects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_vs_outline_example.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/outline_vs_border.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Basic Outline CSS Styling\nDESCRIPTION: CSS styling for basic outline example showing highlighted outline property\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/outline.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/outline.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Textual Run Subcommand Help\nDESCRIPTION: Shows how to display help information for the 'run' subcommand.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntextual run --help\n```\n\n----------------------------------------\n\nTITLE: Initializing and Cycling Placeholder Variants in Python\nDESCRIPTION: This code demonstrates how to initialize a cycle of variants for the Placeholder widget and handle clicking to cycle through variants.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/placeholder-pr.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Placeholder(Static):\n    def __init__(\n        self,\n        variant: PlaceholderVariant = \"default\",\n        *,\n        label: str | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n    ) -> None:\n        # ...\n\n        self.variant = self.validate_variant(variant)\n        # Set a cycle through the variants with the correct starting point.\n        self._variants_cycle = cycle(_VALID_PLACEHOLDER_VARIANTS_ORDERED)\n        while next(self._variants_cycle) != self.variant:\n            pass\n\n    def on_click(self) -> None:\n        \"\"\"Click handler to cycle through the placeholder variants.\"\"\"\n        self.cycle_variant()\n\n    def cycle_variant(self) -> None:\n        \"\"\"Get the next variant in the cycle.\"\"\"\n        self.variant = next(self._variants_cycle)\n```\n\n----------------------------------------\n\nTITLE: Container Visibility Example\nDESCRIPTION: Full Python example showing visibility inheritance between containers and child widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/visibility_containers.py\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Variant Cycle in Placeholder Widget\nDESCRIPTION: This snippet shows how to initialize the variant cycle for the Placeholder widget, ensuring it starts at the correct variant.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/placeholder-pr.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom itertools import cycle\n# ...\nclass Placeholder(Static):\n    # ...\n    def __init__(...):\n        # ...\n        self._variants_cycle = cycle(_VALID_PLACEHOLDER_VARIANTS_ORDERED)\n        while next(self._variants_cycle) != self.variant:\n            pass\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Opacity with CSS\nDESCRIPTION: CSS example showing how to set a widget's opacity to 50% against its parent's background. The opacity value can be specified as a percentage between 0% and 100%.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/opacity.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Fade the widget to 50% against its parent's background */\nopacity: 50%;\n```\n\n----------------------------------------\n\nTITLE: Defining Offset Style in CSS\nDESCRIPTION: Demonstrates how to use the 'offset' property in CSS to move widgets horizontally and vertically. It also shows how to use 'offset-x' and 'offset-y' for single-axis offsets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/offset.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Move the widget 8 cells in the x direction and 2 in the y direction */\noffset: 8 2;\n\n/* Move the widget 4 cells in the x direction\noffset-x: 4;\n/* Move the widget -3 cells in the y direction\noffset-y: -3;\n```\n\n----------------------------------------\n\nTITLE: Defining Max-Height in Textual CSS\nDESCRIPTION: Shows the syntax for defining max-height in Textual CSS, using a scalar value to set the maximum height of a widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_height.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nmax-height: <scalar>;\n```\n\n----------------------------------------\n\nTITLE: Dark Mode CSS Styling in Textual v0.37.0\nDESCRIPTION: Example of how to target dark mode styles in Textual v0.37.0 using the App.-dark-mode selector pattern.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-38-0.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nApp.-dark-mode MyWidget Label {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting min-width in Python for Textual widgets\nDESCRIPTION: Demonstrates how to set the min-width style for Textual widgets using Python. Includes examples of setting a fixed minimum width and a percentage-based minimum width.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/min_width.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Set the minimum width to 10 rows\nwidget.styles.min_width = 10\n\n# Set the minimum width to 25% of the viewport width\nwidget.styles.min_width = \"25vw\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Border and Text Styles for Textual (TCSS)\nDESCRIPTION: This TCSS (Textual CSS) file contains the styling rules for customizing border colors and text styles in the Textual application. It defines the specific colors, border styles, and text formatting used in the corresponding Python script.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_title_color.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/border_title_colors.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Python Link Color Hover Implementation\nDESCRIPTION: Python code showing different ways to set link hover colors, including using string values and Color objects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color_hover.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.link_color_hover = \"red 70%\"\nwidget.styles.link_color_hover = \"black\"\n\n# You can also use a `Color` object directly:\nwidget.styles.link_color_hover = Color(100, 30, 173)\n```\n\n----------------------------------------\n\nTITLE: Grid Keyline Example in CSS\nDESCRIPTION: CSS styles for a grid layout with a heavy keyline in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/keyline.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/keyline.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Serving Textual Apps in a Browser\nDESCRIPTION: Shows how to serve a Textual app in a web browser using the 'serve' subcommand.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntextual serve my_app.py\n```\n\n----------------------------------------\n\nTITLE: Styling Textual Toast Title for Information Severity using CSS\nDESCRIPTION: This SCSS snippet demonstrates how to style the title component within a specific type of Toast. It targets the `.toast--title` class within a `Toast` that also has the `-information` class, setting the `text-style` to `italic` specifically for the titles of information-level toasts.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/toast.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\nToast.-information .toast--title {\n    text-style: italic;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Overflow in CSS for Textual Widgets\nDESCRIPTION: This example demonstrates how to set the vertical overflow property of a container widget to hidden, preventing content from overflowing vertically.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/overflow.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#container {\n    overflow-y: hidden;  /* Don't overflow */\n}\n```\n\n----------------------------------------\n\nTITLE: Executing MkDocs Commands for Documentation (Shell)\nDESCRIPTION: Provides essential shell commands for managing an MkDocs documentation project. `mkdocs serve` starts a local development server with live reloading, `mkdocs build` generates the static site files, and `mkdocs -h` displays help information. Requires MkDocs to be installed and run from the project root directory containing `mkdocs.yml`.\nSOURCE: https://github.com/textualize/textual/blob/main/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs serve\n```\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs build\n```\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs -h\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tree Widget in Python\nDESCRIPTION: Demonstrates usage of the new Tree control widget in Textual 0.6.0. Shows basic tree structure implementation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-6-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/tree.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining Border Subtitle Alignment in CSS\nDESCRIPTION: Shows the syntax for setting the border subtitle alignment using CSS in Textual. The style takes a <horizontal> value to determine the alignment of the border subtitle along the top edge of the border.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_align.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-subtitle-align: <horizontal>;\n```\n\n----------------------------------------\n\nTITLE: Setting link_background_hover in Python for Textual\nDESCRIPTION: Examples of setting the link_background_hover style in Python for Textual widgets. It shows how to use string color values and a Color object directly.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_background_hover.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.link_background_hover = \"red 70%\"\nwidget.styles.link_background_hover = \"$accent\"\n\n# You can also use a `Color` object directly:\nwidget.styles.link_background_hover = Color(100, 30, 173)\n```\n\n----------------------------------------\n\nTITLE: Adding Command Provider to Textual App in Python\nDESCRIPTION: This snippet shows how to add a custom command provider to a Textual app. It defines a ColorApp class that includes the ColorCommands provider in its COMMANDS set.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0.37.0.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ColorApp(App):\n    \"\"\"Experiment with the command palette.\"\"\"\n\n    COMMANDS = App.COMMANDS | {ColorCommands}\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Corner Color in Textual Python\nDESCRIPTION: Example of setting the scrollbar corner color to white using Python in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_corner_color.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.scrollbar_corner_color = \"white\"\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Background Active Color - CSS Syntax\nDESCRIPTION: Defines the syntax for setting the background color of a scrollbar when active. Accepts a color value with optional opacity percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_active.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-background-active: <color> [<percentage>];\n```\n\n----------------------------------------\n\nTITLE: Overflow Example in Python for Textual\nDESCRIPTION: A full Python example demonstrating the use of overflow styles in a Textual application. It creates a split screen with different overflow behaviors.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/overflow.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/overflow.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining link-style CSS Property for Textual Action Links\nDESCRIPTION: The 'link-style' CSS property sets the text style for Textual action links. It accepts text-style values and applies them to the enclosed text.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlink-style: <text-style>;\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Color Styling in TCSS\nDESCRIPTION: A TCSS (Textual CSS) file that defines custom scrollbar colors for a Textual application. It sets various scrollbar-related styles, including the scrollbar color.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nScrollableContainer {\n    height: 100%;\n    border: solid green;\n}\nScrollableContainer > Static {\n    width: auto;\n    height: auto;\n}\nScreen {\n    scrollbar-color: $primary;\n    scrollbar-color-hover: $secondary;\n    scrollbar-color-active: $warning;\n    scrollbar-background: $panel;\n    scrollbar-background-hover: $boost;\n    scrollbar-background-active: $boost;\n    scrollbar-size: 2 1;\n    scrollbar-size-horizontal: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: MaskedInput Widget Implementation in Textual\nDESCRIPTION: Demonstrates input control with template mask support.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_14\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/masked_input.py\n```\n\n----------------------------------------\n\nTITLE: Applying Background Tint to Focused Widget in CSS\nDESCRIPTION: This snippet demonstrates how to use the background-tint style to subtly change the background of a focused widget, making it slightly lighter.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/background_tint.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nMyWidget:focus {\n    background-tint: white 10%\n}\n```\n\n----------------------------------------\n\nTITLE: Setting link-background-hover in CSS for Textual\nDESCRIPTION: Examples of setting the link-background-hover style in CSS for Textual action links. It demonstrates using a color name with opacity and a predefined color variable.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_background_hover.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlink-background-hover: red 70%;\nlink-background-hover: $accent;\n```\n\n----------------------------------------\n\nTITLE: Dark Mode CSS Styling in Textual v0.38.0\nDESCRIPTION: Example of the new more concise way to target dark mode styles in Textual v0.38.0 using the :dark pseudo selector.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-38-0.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nMyWidget:dark Label {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including CSS Code Example in Markdown\nDESCRIPTION: Shows how to include a CSS code example in the documentation using Markdown code blocks and file inclusion.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/_template.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n=== \"style.tcss\"\n\n    ```css\n    --8<-- \"docs/examples/styles/style.tcss\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Python Min-height Implementation\nDESCRIPTION: Examples showing how to set minimum height in Python using both scalar values and viewport height units.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/min_height.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Set the minimum height to 10 rows\nwidget.styles.min_height = 10\n\n# Set the minimum height to 25% of the viewport height\nwidget.styles.min_height = \"25vh\"\n```\n\n----------------------------------------\n\nTITLE: Basic Content Alignment Example - Python\nDESCRIPTION: Python script demonstrating basic content alignment with three vertically stacked labels.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/content_align.py\"\n```\n\n----------------------------------------\n\nTITLE: Running Textual Border Styles Demo Command\nDESCRIPTION: Terminal command to run a Textual demo that shows the various border styles that can be applied to widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-16-0.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntextual borders\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Corner Color in Textual CSS\nDESCRIPTION: Example of setting the scrollbar corner color to white using CSS in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_corner_color.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-corner-color: white;\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Color Example in Python\nDESCRIPTION: A complete Python script demonstrating the use of scrollbar color styling in a Textual application. It creates a window with customized scrollbar colors.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import ScrollableContainer\nfrom textual.widgets import Static\n\n\nclass ScrollbarApp(App):\n    CSS_PATH = \"scrollbars2.tcss\"\n\n    def compose(self) -> ComposeResult:\n        yield ScrollableContainer(Static(\"\\n\".join(f\"Line {n + 1}\" for n in range(100))))\n\n\nif __name__ == \"__main__\":\n    app = ScrollbarApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS Type Usage in Textual\nDESCRIPTION: This snippet shows how to use a CSS type in a Textual stylesheet. It includes multiple examples of applying the type to a CSS rule.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/_template.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.some-class {\n    rule: type-value-1;\n    rule: type-value-2;\n    rule: type-value-3;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ANSI Color Support in Textual App Configuration\nDESCRIPTION: Configuration option added in version 0.80.0 that allows enabling raw ANSI color support in Textual applications. When set to True, Textual will not convert ANSI colors, though this will disable transparency effects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.ansi_color = True\n```\n\n----------------------------------------\n\nTITLE: Implementing TextualError Base Exception Class in Python\nDESCRIPTION: Defines the base exception class for all Textual-specific errors. This serves as the parent class for all other error types in the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TextualError(Exception):\n    \"\"\"Base class for Textual Errors.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Color in Python with Textual\nDESCRIPTION: Shows how to set link colors in a Textual application using Python. It includes examples of setting colors using string values and Color objects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Label\n\n\nclass LinkColorApp(App):\n    CSS = \"\"\"\n    Label {\n        width: 100%;\n    }\n    #label1 {\n        link-color: red;\n    }\n    #label2 {\n        link-color: green 50%;\n    }\n    #label3 {\n        link-color: #ffff00;\n    }\n    #label4 {\n        link-color: $accent;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield Label(\"This is a [link=https://textualize.io]hyperlink[/link].\", id=\"label1\")\n        yield Label(\"This is an [action]action link[/action].\", id=\"label2\")\n        yield Label(\"This is another [action]action link[/action].\", id=\"label3\")\n        yield Label(\"This is a third [action]action link[/action].\", id=\"label4\")\n\n\nif __name__ == \"__main__\":\n    app = LinkColorApp()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Scrollbar Color Hover in CSS\nDESCRIPTION: Demonstrates how to use the scrollbar-color-hover style in a CSS file for Textual. This example is part of a larger stylesheet.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_hover.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbars2.tcss\"\n```\n\n----------------------------------------\n\nTITLE: DataTable Widget Implementation in Textual\nDESCRIPTION: Shows implementation of a configurable data table with cursor support.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_3\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/data_table.py\n```\n\n----------------------------------------\n\nTITLE: CSS Examples for Color Style in Textual\nDESCRIPTION: Provides various CSS examples for setting text color, including solid colors, opacity, RGB values, and auto contrast.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Blue text */\ncolor: blue;\n\n/* 20% red text */\ncolor: red 20%;\n\n/* RGB color */\ncolor: rgb(100, 120, 200);\n\n/* Automatically choose color with suitable contrast for readability */\ncolor: auto;\n```\n\n----------------------------------------\n\nTITLE: Initializing Spatial Map Grid in Python for Textual Framework\nDESCRIPTION: This code snippet demonstrates the structure of the spatial map grid in Textual. It shows how widgets are associated with grid coordinates, allowing for efficient lookup of visible widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release1.0.0.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    (0, 0): [widget1, widget2, widget3],\n    (1, 0): [widget1, widget2, widget3],\n    (0, 1): [widget4, widget5, widget6],\n    (1, 1): [widget4, widget5, widget6],\n    (0, 2): [widget7, widget8],\n    (1, 2): [Widget7, widget8]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS &lt;number&gt; type in Textual CSS\nDESCRIPTION: Demonstrates the use of the &lt;number&gt; type in CSS for Textual, showing both integer and decimal number applications.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/number.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nGrid {\n    grid-size: 3 6  /* Integers are numbers */\n}\n\n.translucid {\n    opacity: 0.5    /* Numbers can have a decimal part */\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Visibility Example\nDESCRIPTION: Demonstrates basic visibility control in TCSS with highlighted visibility property.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Widget is invisible */\nvisibility: hidden;\n\n/* Widget is visible */\nvisibility: visible;\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Color Hover to Pink in CSS\nDESCRIPTION: A simple example showing how to set the scrollbar color on hover to pink using CSS in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_hover.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-color-hover: pink;\n```\n\n----------------------------------------\n\nTITLE: Installing Project in Development Mode\nDESCRIPTION: Command to install the project in editable mode, allowing for development and testing of the command-line interface.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies and System Prompt for AI Chat TUI in Python\nDESCRIPTION: Sets up the required dependencies for the AI chat TUI and defines the system prompt for the language model. Uses inline dependency specification for easy environment setup.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# requires-python = \">=3.12\"\n# dependencies = [\n#     \"llm\",\n#     \"textual\",\n# ]\n# ///\nfrom textual import on, work\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Header, Input, Footer, Markdown\nfrom textual.containers import VerticalScroll\nimport llm\n\nSYSTEM = \"\"\"Formulate all responses as if you where the sentient AI named Mother from the Aliens movies.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: CSS Text Wrap Style Definition\nDESCRIPTION: Shows the basic CSS syntax for text wrapping with both wrap and nowrap options in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_wrap.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntext-wrap: wrap;\ntext-wrap: nowrap;\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Background Active Color - Python Example\nDESCRIPTION: Example showing how to set the scrollbar background active color to red using Python code.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_active.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.scrollbar_background_active = \"red\"\n```\n\n----------------------------------------\n\nTITLE: Referencing MouseCapture Event Class in Markdown\nDESCRIPTION: This snippet uses a custom Markdown directive to include documentation for the MouseCapture event class from the textual.events module. It sets the heading level to 1 for the included content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/mouse_capture.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.events.MouseCapture\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Installing Textual Developer Tools via Conda-Forge\nDESCRIPTION: Installation command for Textual developer tools using micromamba.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmicromamba install -c conda-forge textual-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Hatch Style Syntax in Textual CSS\nDESCRIPTION: Specifies the syntax for the 'hatch' style in Textual CSS, including the hatch type, color, and optional opacity.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/hatch.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nhatch: (<a href=\"../../css_types/hatch\">&lt;hatch&gt;</a> | CHARACTER) <a href=\"../../css_types/color\">&lt;color&gt;</a> [<a href=\"../../css_types/percentage\">&lt;percentage&gt;</a>]\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Scrollbar Styles in Textual CSS\nDESCRIPTION: This CSS file defines custom styles for scrollbars in a Textual application. It sets specific colors for the scrollbar background, thumb, and corner in the right panel, while leaving the left panel with default styles for comparison.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/index.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbars.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Using Segment and Style Objects with Rich and Textual - Python\nDESCRIPTION: Demonstrates creating a Rich Segment object with a styled string, specifically rendering text ('Hello, World!') in bold. Requires Python with Rich or Textual. Inputs: string and Style parameters; output: styled segment for use in rich-renderable pipelines or line API rendering. Used internally by Textual widgets for low-level rendering.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n```python\\ngreeting = Segment(\\\"Hello, World!\\\", Style(bold=True))\\n```\n```\n\n----------------------------------------\n\nTITLE: Building Project with Hatch\nDESCRIPTION: Commands to build the project distribution files using Hatch build system.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd textual-calculator\nhatch build\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageError Exception for Message Handling Issues\nDESCRIPTION: Defines an exception class for errors related to message processing. Used when there's a problem with event handling or message dispatch.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MessageError(TextualError):\n    \"\"\"Errors related to messages.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Styles in Textual CSS\nDESCRIPTION: Provides examples of how to apply different hatch styles using Textual CSS. It includes cross hatch, diagonal hatch, and custom character hatch with various colors and opacities.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/hatch.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Red cross hatch */\nhatch: cross red;\n/* Right diagonals, 50% transparent green. */\nhatch: right green 50%;\n/* T custom character in 80% blue. **/\nhatch: \"T\" blue 80%;\n```\n\n----------------------------------------\n\nTITLE: Styling Dictionary App with CSS in Textual\nDESCRIPTION: CSS styles for a dictionary application in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/events/dictionary.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Textual Key Event Configuration\nDESCRIPTION: Python code block showing configuration options for Textual Key event documentation, specifying a heading level of 1 in the documentation structure.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/key.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: textual.events.Key\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Styling the Switch Widget for Textual Apps (CSS)\nDESCRIPTION: This snippet refers to a CSS file providing style definitions for the Switch widget in Textual apps. It controls the visual presentation, such as color, border, and spacing. It must be used alongside the corresponding Python logic, with proper file referencing. Key rules affect layout and can remove surrounding space (border/padding). Inputs must match component class selectors, and effects are visible in theme and spatial adjustments. The file cannot be executed directly; it is loaded by the Textual app for theming.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/switch.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \\\"docs/examples/widgets/switch.tcss\\\"\n```\n\n----------------------------------------\n\nTITLE: Installing Textual via PyPI\nDESCRIPTION: Basic installation command for Textual using pip package manager.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install textual\n```\n\n----------------------------------------\n\nTITLE: Running Calculator Module\nDESCRIPTION: Command to run the calculator module directly using Python.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython -m textual_calculator.calculator\n```\n\n----------------------------------------\n\nTITLE: Overflow Example CSS for Textual\nDESCRIPTION: CSS styles accompanying the Python example, demonstrating how to set overflow styles for different containers in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/overflow.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/overflow.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Python Implementation for CSS Example\nDESCRIPTION: Python code implementing the UI structure for the CSS nesting demonstration.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/css/nesting01.py\"\n```\n\n----------------------------------------\n\nTITLE: Styling a Calculator Application with Textual CSS\nDESCRIPTION: This CSS snippet provides styling for the calculator application built with Textual. It defines the layout, colors, and button styles for the calculator interface.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nScreen {\n    background: #000000;\n}\n\nCalculator {\n    layout: grid;\n    grid-size: 4;\n    grid-gutter: 1 2;\n    padding: 2;\n    width: 50;\n    height: 34;\n    border: thick $background 80%;\n    background: $surface;\n}\n\n#display {\n    column-span: 4;\n    height: 3;\n    margin-bottom: 1;\n    background: #1e1e1e;\n    color: #ffffff;\n    content-align: center middle;\n    text-align: right;\n}\n\nButton {\n    width: 100%;\n    height: 100%;\n}\n\n#clear {\n    column-span: 2;\n    width: 100%;\n    background: #5a5a5a;\n    color: #ffffff;\n}\n\n.digit {\n    background: #333333;\n    color: #ffffff;\n}\n\n.operator {\n    background: #ff9f0a;\n    color: #ffffff;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Textual App Output from File\nDESCRIPTION: This snippet uses a specific directive (`.textual path=...`) within a code block, likely for a documentation generator like MkDocs with a Textual plugin. Its purpose is to execute and display the terminal output of the Python script `docs/examples/widgets/tree.py` directly within the documentation page, showing the visual result of the Tree widget example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tree.md#2025-04-22_snippet_0\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/tree.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Text Opacity in Python\nDESCRIPTION: Example of setting text opacity to 50% using Python code.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_opacity.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Set the text to be \"half-faded\" against the background of the widget\nwidget.styles.text_opacity = \"50%\"\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigationError Exception for Navigation Issues\nDESCRIPTION: Defines an exception class for errors related to navigation operations. Used when there's a problem with moving between different parts of the application UI.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass NavigationError(TextualError):\n    \"\"\"Errors related to navigation.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Textual Demo\nDESCRIPTION: Command to run the built-in Textual demonstration.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m textual\n```\n\n----------------------------------------\n\nTITLE: Header Widget Implementation in Textual\nDESCRIPTION: Shows implementation of a header widget for displaying app title and subtitle.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_7\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/header.py\n```\n\n----------------------------------------\n\nTITLE: Styling the World Clock App with CSS (Textual)\nDESCRIPTION: CSS rules for the `WorldClockApp` and `WorldClock` widgets used in the data binding examples. Defines layout (grid) and alignment for the clocks. This styling applies to the data-bound versions of the app as well.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n```css\n--8<-- \"docs/examples/guide/reactivity/world_clock01.tcss\"\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory and Running the Stopwatch App - Bash\nDESCRIPTION: Outlines the commands to change directory into the tutorial examples folder and execute the stopwatch.py script using Python. Assumes the Textual repository is already cloned locally. Required dependencies include Python and the Textual library installed in the environment.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd textual/docs/examples/tutorial\npython stopwatch.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Spinner Rendering in Python\nDESCRIPTION: This snippet demonstrates how Rich spinners implement their rendering functionality. It shows the __rich_console__ method and the render method, which use the current time to determine the spinner's state.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Spinner:\n    # ...\n\n    def __rich_console__(\n        self, console: \"Console\", options: \"ConsoleOptions\"\n    ) -> \"RenderResult\":\n        yield self.render(console.get_time())  # (1)!\n\n    # ...\n    def render(self, time: float) -> \"RenderableType\":  # (2)!\n        # ...\n\n        frame_no = ((time - self.start_time) * self.speed) / (  # (3)!\n            self.interval / 1000.0\n        ) + self.frame_no_offset\n        # ...\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Styling for SelectionList Change Handling Example\nDESCRIPTION: References the Textual CSS file used to style the widgets in the `selection_list_selected.py` example, which demonstrates handling selection changes. This CSS file styles both the `SelectionList` and potentially other widgets involved in displaying the selection state. The actual CSS rules are included from the specified file path (`docs/examples/widgets/selection_list_selected.tcss`).\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n~~~css\n--8<-- \"docs/examples/widgets/selection_list_selected.tcss\"\n~~~\n```\n\n----------------------------------------\n\nTITLE: Styling Select Widget from Class-Method Example Using CSS (CSS)\nDESCRIPTION: Mirroring the generic styling approach, this CSS snippet contains appearance customizations for the Select widget as used in the from_values example. The file docs/examples/widgets/select.tcss is reused for both the basic and class-method examples, ensuring a consistent UI/UX. The CSS must be referenced by the Textual app for styles to apply to the Select widget in the demonstration.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/select.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/select.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Border Title Alignment in CSS\nDESCRIPTION: Examples of setting border title alignment using CSS in the Textual framework. The alignment can be set to left, center, or right.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_title_align.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-title-align: left;\nborder-title-align: center;\nborder-title-align: right;\n```\n\n----------------------------------------\n\nTITLE: Styling Scrollbar Gutter in Textual CSS\nDESCRIPTION: Illustrates how to set the scrollbar-gutter property in a Textual CSS file (TCSS). The example highlights the line where the property is set.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_gutter.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbar_gutter.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Textual Development Version using Pip (Shell)\nDESCRIPTION: This shell command uses `pip`, the Python package installer, to upgrade the `textual-dev` package to the latest available version. The `-U` flag forces pip to check for updates and perform an upgrade if a newer version exists, which can resolve `ImportError` issues caused by outdated library components like `ComposeResult`. Requires `pip` to be installed and accessible in the environment's PATH.\nSOURCE: https://github.com/textualize/textual/blob/main/questions/compose-result.question.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install textual-dev -U\n```\n\n----------------------------------------\n\nTITLE: Running Example Code Browser\nDESCRIPTION: Commands to navigate to examples directory and run the code browser example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd textual/examples/\npython code_browser.py ../\n```\n\n----------------------------------------\n\nTITLE: Setting Column-span in CSS for Textual\nDESCRIPTION: Shows how to set the column-span property in CSS for Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/column_span.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\ncolumn-span: 3;\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Layout with Column-span in Textual CSS\nDESCRIPTION: Provides a CSS example for styling a grid layout in Textual, highlighting the lines where column-span is applied to various elements.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/column_span.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/column_span.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Centering Multiple Widgets Individually in Textual using `Center` Container (Python)\nDESCRIPTION: This Python snippet shows how to center multiple `Button` widgets independently within a Textual `Screen`. Each `Button` is wrapped in a `textual.containers.Center` container within the `compose` method. Although the parent `Screen` still uses `align: center middle;` to stack the `Center` containers vertically in the middle, each `Center` container ensures its child `Button` is horizontally centered within its own allocated space.\nSOURCE: https://github.com/textualize/textual/blob/main/questions/align-center-middle.question.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Center\nfrom textual.widgets import Button\n\nclass ButtonApp(App):\n\n    CSS = \"\"\"\n    Screen {\n        align: center middle;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield Center(Button(\"PUSH ME!\"))\n        yield Center(Button(\"AND ME!\"))\n        yield Center(Button(\"ALSO PLEASE PUSH ME!\"))\n        yield Center(Button(\"HEY ME ALSO!!\"))\n\nif __name__ == \"__main__\":\n    ButtonApp().run()\n```\n\n----------------------------------------\n\nTITLE: Defining Height Style Syntax in Textual CSS\nDESCRIPTION: Demonstrates the syntax for defining the height style in Textual CSS. It uses a scalar value to determine the vertical length of the widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nheight: <scalar>;\n```\n\n----------------------------------------\n\nTITLE: Styling the World Clock App with CSS (Textual)\nDESCRIPTION: CSS rules for the `WorldClockApp` and `WorldClock` widgets used in the data binding examples. Defines layout (grid) and alignment for the clocks. This styling applies to the version using keyword arguments for data binding.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n```css\n--8<-- \"docs/examples/guide/reactivity/world_clock01.tcss\"\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Docks to Header and Footer in Textual Layout\nDESCRIPTION: This snippet shows how to apply docks to the header and footer widgets using CSS. The header is docked to the top and the footer to the bottom of the screen, with fixed heights.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Header(Placeholder):\n    DEFAULT_CSS = \"\"\"\n    Header {\n        dock: top;\n        height: 3;\n    }\n    \"\"\"\n\nclass Footer(Placeholder):\n    DEFAULT_CSS = \"\"\"\n    Footer {\n        dock: bottom;\n        height: 3;\n    }\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Load Event Class in Textual Framework (Python)\nDESCRIPTION: This code snippet demonstrates how to reference the Load event class from the Textual events module. It's likely used in documentation generation to include details about the Load event.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/load.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: textual.events.Load\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Width CSS Examples\nDESCRIPTION: Examples of setting explicit cell width, percentage width, and automatic width in CSS.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Explicit cell width */\nwidth: 10;\n\n/* Percentage width */\nwidth: 50%;\n\n/* Automatic width */\nwidth: auto;\n```\n\n----------------------------------------\n\nTITLE: Cloning Textual Repository with HTTPS - Bash\nDESCRIPTION: Demonstrates how to clone the Textual repository via HTTPS using Git. This is a prerequisite for following along with the tutorial source code and running example applications. The command requires Git to be installed and does not take any arguments, cloning the repository into a local folder named 'textual'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Textualize/textual.git\n```\n\n----------------------------------------\n\nTITLE: Defining Link Color Syntax in Textual CSS\nDESCRIPTION: Demonstrates the syntax for setting the link-color property in Textual CSS. It accepts a color value with an optional opacity percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlink-color: <color> [<percentage>];\n```\n\n----------------------------------------\n\nTITLE: Defining Scrollbar Gutter Syntax in CSS\nDESCRIPTION: Demonstrates the basic syntax for setting the scrollbar-gutter property in CSS. It shows the two possible values: auto and stable.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_gutter.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-gutter: auto | stable;\n```\n\n----------------------------------------\n\nTITLE: Progress Bar Styling - CSS\nDESCRIPTION: CSS styles for customizing the progress bar appearance in the funding tracker example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/progress_bar.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Opacity with Python\nDESCRIPTION: Python example demonstrating how to programmatically set a widget's opacity to 50% using the styles API. The opacity value is specified as a string percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/opacity.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Fade the widget to 50% against its parent's background\nwidget.styles.opacity = \"50%\"\n```\n\n----------------------------------------\n\nTITLE: Loop Last Helper Usage Example in Python\nDESCRIPTION: Demonstrates the use of loop_last helper function to track the last item in an iteration sequence. Used for terminal output formatting with special handling of the last line.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/steal-this-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor last, (y, line) in loop_last(enumerate(self.lines, self.region.y)):\n    yield move_to(x, y)\n    yield from line\n    if not last:\n        yield new_line\n```\n\n----------------------------------------\n\nTITLE: Running Textual Demo\nDESCRIPTION: This command runs the built-in Textual demo, showcasing various features and capabilities of the framework.\nSOURCE: https://github.com/textualize/textual/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m textual\n```\n\n----------------------------------------\n\nTITLE: Including Python Code Example in Markdown\nDESCRIPTION: Demonstrates how to include a Python code example in the documentation using Markdown code blocks and file inclusion.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/_template.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n=== \"style.py\"\n\n    ```py\n    --8<-- \"docs/examples/styles/style.py\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Background Tint in CSS\nDESCRIPTION: These examples show how to apply background tint with different colors and opacities in CSS.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/background_tint.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* 10% backgrouhnd tint */\nbackground-tint: blue 10%;\n\n\n/* 20% RGB color */\nbackground-tint: rgb(100, 120, 200, 0.2);\n```\n\n----------------------------------------\n\nTITLE: Buggy Reactive Implementation Example\nDESCRIPTION: Shows an incorrect implementation of reactive attributes that causes errors due to premature watcher invocation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/reactivity/set_reactive01.py\"\n```\n\n----------------------------------------\n\nTITLE: Running Textual Example Script\nDESCRIPTION: Demonstrates how to run an example script using the Textual CLI command. The command executes a text_style.py example file.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/examples/styles/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntextual run text_style.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget with 50% Screen Height in Python\nDESCRIPTION: Example of creating a widget with a height of 50% of the screen using Python in Textual. This snippet is part of a larger example demonstrating basic usage of the height style.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/height.py\"\n```\n\n----------------------------------------\n\nTITLE: Textual Output of World Clock App with Keyword Data Binding\nDESCRIPTION: Represents the visual output generated by running the Textual application demonstrating keyword argument data binding (`world_clock03.py`). The path specified in the original markdown block is `docs/examples/guide/reactivity/world_clock02.py`.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_23\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/guide/reactivity/world_clock02.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Enter Event Documentation in Textual Framework\nDESCRIPTION: This code snippet uses a special syntax to reference the documentation for the Enter event in the Textual framework. It sets the heading level to 1 for the documentation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/enter.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.events.Enter\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Styling Horizontal Rules (TCSS)\nDESCRIPTION: This snippet points to the TCSS (Textual CSS) file `docs/examples/widgets/horizontal_rules.tcss`. This external file contains the styling rules applied to the horizontal rules shown in the corresponding Python example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rule.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n    ```css\n    --8<-- \"docs/examples/widgets/horizontal_rules.tcss\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Threaded Worker in Textual (Python)\nDESCRIPTION: This snippet demonstrates how to define a function intended to run as a threaded worker in Textual. It uses the `@work` decorator with the `thread=True` argument, which is mandatory for threaded workers since Textual version 0.31.0 to avoid a `WorkerDeclarationError`. The decorated function `run_in_background` will execute in a separate thread.\nSOURCE: https://github.com/textualize/textual/blob/main/questions/worker-thread-error.question.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@work(thread=True)\ndef run_in_background():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Tree-sitter Highlight Query in Scheme\nDESCRIPTION: Provides a snippet of a Tree-sitter highlight query written in Scheme, typically stored in an `.scm` file. This query maps specific syntax nodes identified by the Tree-sitter parser (e.g., `heading_content`, `link`) to capture names (e.g., `@heading`, `@link`). These names are then used in the `TextAreaTheme` to apply styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_18\n\nLANGUAGE: scheme\nCODE:\n```\n(heading_content) @heading\n(link) @link\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Markdown\nDESCRIPTION: This snippet shows how to embed a video file in a Markdown document with autoplay and loop attributes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/darren-year-in-review.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<video style=\"position: relative; width: 100%;\" controls autoplay loop><source src=\"../../../../images/darren-year-in-review/pokedex-terminal.mov\" type=\"video/mp4\"></video>\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Textual Header Class (Markdown)\nDESCRIPTION: This snippet uses a specific syntax (likely for MkDocs with mkdocstrings plugin) to automatically insert the generated documentation for the `textual.widgets.Header` Python class into the page. The `heading_level` option adjusts the starting heading level for the inserted documentation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/header.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.widgets.Header\n    options:\n      heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Serving a Textual App in a Web Browser\nDESCRIPTION: This command shows how to serve a Textual app (in this case, the demo) in a web browser using the 'textual serve' command. This allows Textual apps to be accessed via web interfaces.\nSOURCE: https://github.com/textualize/textual/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntextual serve \"python -m textual\"\n```\n\n----------------------------------------\n\nTITLE: Basic CSS without Nesting in Textual\nDESCRIPTION: Example showing CSS rules without nesting, defining styles for buttons within a questions container.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/css/nesting01.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Creating Content with Markup\nDESCRIPTION: Demonstrates creating Content with markup processing enabled\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nContent.from_markup(\"hello, [bold]World[/bold]!\")\n```\n\n----------------------------------------\n\nTITLE: Serving Textual Apps from Command-line Scripts\nDESCRIPTION: Demonstrates how to serve a Textual app that is installed as a command-line script.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntextual serve \"textual keys\"\n```\n\n----------------------------------------\n\nTITLE: Textual Output Demonstrating Selection Change Handling\nDESCRIPTION: Shows the expected terminal output for the example demonstrating how to handle changes in the selected items within a `SelectionList`. The `path` attribute points to the relevant Python script (`docs/examples/widgets/selection_list_selected.py`).\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_7\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/selection_list_selected.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Max-Height in CSS for Textual\nDESCRIPTION: Examples of setting max-height in CSS for Textual, including fixed row height and percentage of viewport height.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_height.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Set the maximum height to 10 rows */\nmax-height: 10;\n\n/* Set the maximum height to 25% of the viewport height */\nmax-height: 25vh;\n```\n\n----------------------------------------\n\nTITLE: Styling SelectionList with Textual CSS (Tuple Example)\nDESCRIPTION: References the Textual CSS file used to style the `SelectionList` widget in the accompanying tuple-based example. This file defines the visual appearance of the selection list and its elements when initialized using tuples. The actual CSS rules are included from the specified file path (`docs/examples/widgets/selection_list.tcss`).\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n~~~css\n--8<-- \"docs/examples/widgets/selection_list.tcss\"\n~~~\n```\n\n----------------------------------------\n\nTITLE: Type Hinting SelectionList with Integers in Python\nDESCRIPTION: Demonstrates using Python's `typing.Generic` to specify the type of values stored within a `SelectionList`. This example initializes a list with tuples containing strings and integers, then type hints the `SelectionList` instance to expect integer values. This is optional but recommended for type safety.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nselections = [(\"First\", 1), (\"Second\", 2)]\nmy_selection_list: SelectionList[int] =  SelectionList(*selections)\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing ScreenError Exception for Screen Management Issues\nDESCRIPTION: Defines an exception class for errors related to screen operations. Used when there's a problem with screen management, switching, or initialization.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass ScreenError(TextualError):\n    \"\"\"Errors related to screen.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Show Event Class from Textual\nDESCRIPTION: This code snippet demonstrates how to import the Show event class from the Textual library. The Show event is likely used to handle actions when a widget becomes visible in the Textual user interface.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/show.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.events import Show\n```\n\n----------------------------------------\n\nTITLE: Running Pytest for Snapshot Tests in Command Line\nDESCRIPTION: This command runs pytest to execute the snapshot tests. When run for the first time, it generates an SVG screenshot and fails the test as there's no previous version to compare.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Using Rich's inspect function with methods display\nDESCRIPTION: Shows how to use the inspect function with the methods parameter set to True, which displays all the methods in the object's public API in addition to its properties.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/rich-inspect.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> inspect(text_file, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Example: Collapsible Widget (All Collapsed State)\nDESCRIPTION: Placeholder reference to a Textual example demonstrating multiple `Collapsible` widgets, invoked with a key press ('c') to show them all in a collapsed state. The actual code resides in 'docs/examples/widgets/collapsible.py'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_6\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/collapsible.py\" press=\"c\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing IntervalUpdater with Static.update in Python\nDESCRIPTION: This snippet shows how to implement an IntervalUpdater class using Static.update from Textual. It demonstrates a simplified way to create a widget that updates a Rich renderable 60 times per second.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass IntervalUpdater(Static):\n    _renderable_object: RenderableType\n\n    def __init__(self, renderable_object: RenderableType) -> None:  # (1)!\n        super().__init__(renderable_object)  # (2)!\n\n    def on_mount(self) -> None:\n        self.interval_update = self.set_interval(1 / 60, self.refresh)  # (3)!\n```\n\n----------------------------------------\n\nTITLE: Displaying Combined Textual Layouts Example Output\nDESCRIPTION: Placeholder demonstrating the expected output of the Textual application defined in 'combining_layouts.py' and styled by 'combining_layouts.tcss'. This shows the visual result of combining various layout techniques like containers, layers, or offsets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_14\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/guide/layout/combining_layouts.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Tree Cursor Movement Method in Python\nDESCRIPTION: Introduces Tree.move_cursor method to programmatically move the cursor without selecting the node.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nTree.move_cursor(...)\n```\n\n----------------------------------------\n\nTITLE: Styling OptionList with CSS\nDESCRIPTION: CSS styling rules for the OptionList widget appearance\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/option_list.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/option_list.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Alignment in CSS for Textual\nDESCRIPTION: This CSS snippet demonstrates how to set the vertical alignment of a container element to the top using the align-vertical property in Textual's CSS.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/vertical.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.container {\n    align-vertical: top;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Terminal Size in Snapshot Test for Textual App\nDESCRIPTION: This example demonstrates how to capture a snapshot with a different terminal size by passing a tuple (width, height) as the terminal_size parameter to snap_compare.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_calculator(snap_compare):\n    assert snap_compare(\"path/to/calculator.py\", terminal_size=(50, 100))\n```\n\n----------------------------------------\n\nTITLE: Implementing CssPathError Exception for CSS File Path Issues\nDESCRIPTION: Defines an exception that is raised when a CSS file cannot be found or accessed at the specified path.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass CssPathError(TextualError):\n    \"\"\"Raised when a CSS path was not found.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Grid Size Columns Only Example\nDESCRIPTION: CSS implementation showing a grid with only columns specified, allowing rows to be computed automatically\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_size.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nScreen {\n    grid-size: 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting data_table Module Content in Markdown\nDESCRIPTION: This snippet uses a documentation block directive to include the full content or summary of the textual.widgets.data_table module, enabling options for displaying root heading and TOC entry. It is meant to be parsed and displayed by the Textual documentation system, not executed directly by users.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.widgets.data_table\\n    options:\\n      show_root_heading: true\\n      show_root_toc_entry: true\n```\n\n----------------------------------------\n\nTITLE: Setting Layer in Textual CSS\nDESCRIPTION: Shows how to set a widget's layer to 'below' using CSS in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layer.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Draw the widget on the layer called 'below' */\nlayer: below;\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS_PATH in Textual (Python)\nDESCRIPTION: Demonstrates how to set CSS_PATH as a list of CSS files in Textual. This allows for multiple CSS files to be used for styling the TUI.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nCSS_PATH = [\"file1.css\", \"file2.css\", \"file3.css\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Tests in Pytest\nDESCRIPTION: This command runs pytest with the --snapshot-update flag to save the current snapshot as the new baseline for future comparisons. It should only be used after confirming the output is correct.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest --snapshot-update\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for Regular Tuples Creation\nDESCRIPTION: Shows performance benchmark results for creating 10,000 regular tuples using hyperfine.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/text-area-learnings.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n❯ hyperfine -w 2 'python sandbox/darren/make_tuples.py'\nBenchmark 1: python sandbox/darren/make_tuples.py\n  Time (mean ± σ):       9.3 ms ±   0.5 ms    [User: 6.8 ms, System: 2.0 ms]\n  Range (min … max):     8.7 ms …  12.3 ms    256 runs\n```\n\n----------------------------------------\n\nTITLE: Handling Tree Node Highlight Event in Python\nDESCRIPTION: Added a message and event handler for when a Tree node is highlighted.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nTree.NodeHighlighted\non_tree_node_highlighted\n```\n\n----------------------------------------\n\nTITLE: RadioSet Change Event Styling\nDESCRIPTION: CSS styling for the RadioSet change event handling example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radioset.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/radio_set_changed.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Properties with Integer Values\nDESCRIPTION: Example of defining CSS properties that use integer values in a CSS rule. This snippet shows how to apply positive and negative integer values to an 'offset' property for a CSS class.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/integer.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.classname {\n    offset: 10 -20\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Scripts in pyproject.toml\nDESCRIPTION: TOML configuration that maps the calculator command to the entry point function, enabling command-line execution of the application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[project.scripts]\ncalculator = \"textual_calculator.entry_points:calculator\"\n```\n\n----------------------------------------\n\nTITLE: Basic usage of Rich's inspect function with a file object\nDESCRIPTION: Demonstrates the basic usage of Rich's inspect function to examine a Python file object. This snippet shows how to import the inspect function and use it to get a nicely formatted report of an object's properties.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/rich-inspect.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import inspect\n>>> text_file = open(\"foo.txt\", \"w\")\n>>> inspect(text_file)\n```\n\n----------------------------------------\n\nTITLE: Python Widget Example\nDESCRIPTION: Example implementation of a checkbox widget in Python using the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/_template.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/checkbox.py\"\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for RichLog Widget (MkDocs/mkdocstrings)\nDESCRIPTION: Uses MkDocs syntax, specifically the `mkdocstrings` handler for Python, to automatically generate and insert API documentation for the `textual.widgets.RichLog` class directly into the page. The `options` configure the generated documentation, setting the base heading level to 2.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rich_log.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.widgets.RichLog\n    options:\n      heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Binding Differently Named Attributes with data_bind in Textual (Python)\nDESCRIPTION: Modifies the `WorldClock` widget to use `clock_time` instead of `time`. Demonstrates binding the app's `time` attribute to the widget's `clock_time` attribute using keyword arguments: `data_bind(clock_time=WorldClockApp.time)`. Highlighted lines show the change in attribute name and the updated `data_bind` call. Requires the `pytz` library.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"34-38\"\n--8<-- \"docs/examples/guide/reactivity/world_clock03.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Layers with Name Types in Textual CSS\nDESCRIPTION: Example of using various valid name types in Textual CSS to define layers for a Screen widget. Shows different naming patterns including letters-only, letters with hyphens, underscore-prefixed, and alphanumeric combinations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/name.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nScreen {\n    layers: onlyLetters Letters-and-hiphens _lead-under letters-1-digit;\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Textual Color System\nDESCRIPTION: Command line instruction to preview the colors defined in the Textual color system. This allows viewing base variables and shades generated from the current theme.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/design.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntextual colors\n```\n\n----------------------------------------\n\nTITLE: Adding Borders to Widgets\nDESCRIPTION: Example of adding a border around a widget with specified style and color.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/styles/border01.py\"\n```\n\n----------------------------------------\n\nTITLE: Centering a Button Widget in a Textual App\nDESCRIPTION: Example showing how to center a button widget in a Textual screen using CSS alignment. This demonstrates the basic approach of using the align property on the parent container.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Button\n\nclass ButtonApp(App):\n\n    CSS = \"\"\"\n    Screen {\n        align: center middle;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield Button(\"PUSH ME!\")\n\nif __name__ == \"__main__\":\n    ButtonApp().run()\n```\n\n----------------------------------------\n\nTITLE: CSS Widget Styling\nDESCRIPTION: CSS styling rules for the checkbox widget in Textual's styling format.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/_template.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/checkbox.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pause and Resume for Rich Renderables in Textual (Python)\nDESCRIPTION: This snippet shows an attempt to implement pause and resume functionality for Rich renderables (spinners and progress bars) in a Textual app. It includes button controls and event handling for pausing and resuming animations.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.progress import Progress, BarColumn\nfrom rich.spinner import Spinner\n\nfrom textual.app import App, ComposeResult, RenderableType\nfrom textual.containers import Grid, Horizontal, Vertical\nfrom textual.widgets import Button, Static\n\n\nclass IntervalUpdater(Static):\n    _renderable_object: RenderableType\n\n    def update_rendering(self) -> None:\n        self.update(self._renderable_object)\n\n    def on_mount(self) -> None:\n        self.interval_update = self.set_interval(1 / 60, self.update_rendering)\n\n    def pause(self) -> None:  # (1)!\n        self.interval_update.pause()\n\n    def resume(self) -> None:  # (2)!\n        self.interval_update.resume()\n\n\nclass IndeterminateProgressBar(IntervalUpdater):\n    \"\"\"Basic indeterminate progress bar widget based on rich.progress.Progress.\"\"\"\n    def __init__(self) -> None:\n        super().__init__(\"\")\n        self._renderable_object = Progress(BarColumn())\n        self._renderable_object.add_task(\"\", total=None)\n\n\nclass SpinnerWidget(IntervalUpdater):\n    \"\"\"Basic spinner widget based on rich.spinner.Spinner.\"\"\"\n    def __init__(self, style: str) -> None:\n        super().__init__(\"\")\n        self._renderable_object = Spinner(style)\n\n\nclass LiveDisplayApp(App[None]):\n    \"\"\"App showcasing some widgets that update regularly.\"\"\"\n    CSS_PATH = \"myapp.css\"\n\n    def compose(self) -> ComposeResult:\n        yield Vertical(\n                Grid(\n                    SpinnerWidget(\"moon\"),\n                    IndeterminateProgressBar(),\n                    SpinnerWidget(\"aesthetic\"),\n                    SpinnerWidget(\"bouncingBar\"),\n                    SpinnerWidget(\"earth\"),\n                    SpinnerWidget(\"dots8Bit\"),\n                ),\n                Horizontal(\n                    Button(\"Pause\", id=\"pause\"),  # (3)!\n                    Button(\"Resume\", id=\"resume\", disabled=True),\n                ),\n        )\n\n    def on_button_pressed(self, event: Button.Pressed) -> None:  # (4)!\n        pressed_id = event.button.id\n        assert pressed_id is not None\n        for widget in self.query(IntervalUpdater):\n            getattr(widget, pressed_id)()  # (5)!\n\n        for button in self.query(Button):  # (6)!\n            if button.id == pressed_id:\n                button.disabled = True\n            else:\n                button.disabled = False\n\n\nLiveDisplayApp().run()\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Border Types Python Example\nDESCRIPTION: Python implementation showing all available border types in a grid layout.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/border_all.py\"\n```\n\n----------------------------------------\n\nTITLE: MouseDown Event Import Reference\nDESCRIPTION: Import reference for the MouseDown event class from the Textual events module, showing the documentation configuration options.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/mouse_down.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.events.MouseDown\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionError Exception for Command Action Issues\nDESCRIPTION: Defines an exception class for errors related to command actions. Used when there's a problem with executing commands or actions in the application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass ActionError(TextualError):\n    \"\"\"Errors related to actions.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Published Calculator Package\nDESCRIPTION: Command for users to install the published calculator package from PyPI.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npip install textual_calculator\n```\n\n----------------------------------------\n\nTITLE: Configuring Hide Event Documentation Options\nDESCRIPTION: YAML configuration block specifying documentation options for the Hide event, setting the heading level to 1.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/hide.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntextual.events.Hide\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Color Hover to Pink in Python\nDESCRIPTION: Demonstrates how to set the scrollbar color on hover to pink using Python in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_hover.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.scrollbar_color_hover = \"pink\"\n```\n\n----------------------------------------\n\nTITLE: Including Collapsible Example Code (Python)\nDESCRIPTION: Directive used in documentation systems (like MkDocs with mkdocs-material) to include the full Python source code for the basic `Collapsible` widget example from the specified file path ('docs/examples/widgets/collapsible.py'). The actual code is not present here but is referenced.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python\n--8<-- \"docs/examples/widgets/collapsible.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Size Variant in Placeholder Widget\nDESCRIPTION: This code shows how the Placeholder widget updates its render for the 'size' variant, displaying the current dimensions of the widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/placeholder-pr.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Placeholder(Static):\n    # ...\n    def _update_size_variant(self) -> None:\n        \"\"\"Update the placeholder with the size of the placeholder.\"\"\"\n        width, height = self.size\n        self._placeholder_label.update(f\"[b]{width} x {height}[/b]\")\n```\n\n----------------------------------------\n\nTITLE: Styling Border Title and Subtitle Alignments with CSS in Textual\nDESCRIPTION: This CSS code defines styles for border title and subtitle alignments in Textual. It includes rules for default alignments, handling long titles, and positioning based on border settings and padding.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_sub_title_align_all_example.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/border_sub_title_align_all.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Installing Textual via pip\nDESCRIPTION: This command installs Textual and its development tools using pip. It's the recommended way to set up Textual for use in your Python projects.\nSOURCE: https://github.com/textualize/textual/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install textual textual-dev\n```\n\n----------------------------------------\n\nTITLE: Launching Textual Debug Console\nDESCRIPTION: Shows how to launch the Textual debug console for logging and debugging.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntextual console\n```\n\n----------------------------------------\n\nTITLE: Installing Textual and Developer Tools in Bash\nDESCRIPTION: Command for installing both the core Textual library and the developer tools packages. This is now the recommended approach for developers building Textual applications.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-29-0.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install textual textual-dev\n```\n\n----------------------------------------\n\nTITLE: Text and Binary File Delivery Methods in Textual\nDESCRIPTION: References to Textual's App.deliver_text and App.deliver_binary methods that enable delivering files to users regardless of platform, writing to disk for terminal users or initiating downloads for browser users.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/textual-serve-files.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nApp.deliver_text\n```\n\nLANGUAGE: python\nCODE:\n```\nApp.deliver_binary\n```\n\n----------------------------------------\n\nTITLE: Defining Print Event Class in Python for Textual Library\nDESCRIPTION: This code snippet defines the Print event class in the Textual library. It appears to be using a documentation generation tool to create a heading for the Print event class.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/print.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: textual.events.Print\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Referencing Textual Unmount Event Documentation\nDESCRIPTION: This code snippet uses a directive to include documentation for the Unmount event from the textual.events module. It sets the heading level to 1 for the included content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/unmount.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.events.Unmount\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Initializing Existing Project\nDESCRIPTION: Command to initialize Hatch in an existing project directory.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhatch new --init <YOUR PROJECT NAME>\n```\n\n----------------------------------------\n\nTITLE: Textual Focus Event Directive\nDESCRIPTION: Sphinx documentation directive for the Focus event class in the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/focus.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.events.Focus\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Layer Usage in Textual Python\nDESCRIPTION: Example Python script demonstrating the use of layers in Textual. It creates two boxes with different layers, showing how the layer affects the rendering order.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layer.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/layers.py\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Border Types\nDESCRIPTION: Command to preview all available border types in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntextual borders\n```\n\n----------------------------------------\n\nTITLE: Basic LoadingIndicator Implementation in Python\nDESCRIPTION: Simple example demonstrating how to implement a LoadingIndicator widget in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/loading_indicator.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/loading_indicator.py\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Textual Serve Subcommand Help\nDESCRIPTION: Shows how to display help information for the 'serve' subcommand.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntextual serve --help\n```\n\n----------------------------------------\n\nTITLE: Publishing to PyPI with Hatch\nDESCRIPTION: Command to publish the built package to PyPI using an API token for authentication.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nhatch publish -u __token__ -a <YOUR API TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Creating Hatch Environment\nDESCRIPTION: Command to create a new virtual environment using Hatch.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhatch env create\n```\n\n----------------------------------------\n\nTITLE: Example: Collapsible Widget (All Expanded State)\nDESCRIPTION: Placeholder reference to a Textual example demonstrating multiple `Collapsible` widgets, invoked with a key press ('e') to show them all in an expanded state. The actual code resides in 'docs/examples/widgets/collapsible.py'.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_5\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/widgets/collapsible.py\" press=\"e\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Integer Values in Python for Textual Widgets\nDESCRIPTION: Demonstrates how to set CSS properties that expect integer values using Python code. This example shows setting the 'offset' property of a widget to a tuple of integers.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/integer.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.offset = (10, -20)\n```\n\n----------------------------------------\n\nTITLE: Basic Python Visibility Control\nDESCRIPTION: Shows how to control widget visibility using Python styles property.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Widget is invisible\nself.styles.visibility = \"hidden\"\n\n# Widget is visible\nself.styles.visibility = \"visible\"\n```\n\n----------------------------------------\n\nTITLE: Including RichLog Example Code (Python)\nDESCRIPTION: Uses MkDocs content inclusion syntax (`--8<--`) to embed the Python source code from `docs/examples/widgets/rich_log.py`. This file contains a Textual application demonstrating the usage of the RichLog widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rich_log.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\n--8<-- \"docs/examples/widgets/rich_log.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Launching Calculator from Command Line\nDESCRIPTION: Command to run the calculator application after installation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncalculator\n```\n\n----------------------------------------\n\nTITLE: Configuring TextArea Constructor in Python\nDESCRIPTION: Example of TextArea initialization with new default values including soft_wrap=True, show_line_numbers=False, and tab_behaviour='focus'\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nTextArea(\n    soft_wrap=True,           # Enable soft wrapping by default\n    show_line_numbers=False,  # Disable line numbers by default\n    tab_behaviour=\"focus\"     # Tab key switches focus by default\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Rule Class Documentation (MkDocs Directive)\nDESCRIPTION: This directive uses a documentation generator syntax (likely MkDocs with mkdocstrings) to automatically embed documentation content from the `textual.widgets.Rule` class directly into the page. The `heading_level: 2` option specifies the heading level for the inserted content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rule.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.widgets.Rule\n    options:\n      heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Outline Types CSS\nDESCRIPTION: CSS styling showing all available outline types with highlighting\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/outline.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/outline_all.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Placeholder Widget Implementation in Textual\nDESCRIPTION: Demonstrates placeholder content for UI design phases.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_16\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/placeholder.py\n```\n\n----------------------------------------\n\nTITLE: Cloning Textual Repository (GitHub CLI)\nDESCRIPTION: Command to clone Textual repository using GitHub CLI.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone Textualize/textual\n```\n\n----------------------------------------\n\nTITLE: Implementing a Select Widget in Textual\nDESCRIPTION: Python code example showing how to implement a Select widget in a Textual application. The snippet is referenced from the documentation but not directly included in the content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-24-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/select_widget.py\"\n```\n\n----------------------------------------\n\nTITLE: Using App.open_url method in Textual\nDESCRIPTION: Using Textual's App.open_url method which handles opening URLs appropriately regardless of whether the app is running in a terminal or browser.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/textual-serve-files.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nApp.open_url\n```\n\n----------------------------------------\n\nTITLE: Inserting Rule Module Documentation (MkDocs Directive)\nDESCRIPTION: This directive employs a documentation generator syntax (likely MkDocs with mkdocstrings) to insert documentation from the `textual.widgets.rule` module. The options ensure that the root heading from the module's docstring and a corresponding table of contents entry are included.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rule.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.widgets.rule\n    options:\n      show_root_heading: true\n      show_root_toc_entry: true\n```\n\n----------------------------------------\n\nTITLE: Installing Calculator Package with Pip\nDESCRIPTION: Command to install the calculator package from PyPI using pip.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install textual-calculator\n```\n\n----------------------------------------\n\nTITLE: Updating Screen Dismiss Behavior in Python\nDESCRIPTION: Changes the behavior of Screen.dismiss when called with no arguments to invoke the screen callback with None, rather than not invoking it at all.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nScreen.dismiss()\n```\n\n----------------------------------------\n\nTITLE: Configuring Widget Documentation Filters\nDESCRIPTION: YAML configuration block that specifies filtering options for the textual.widget documentation. It excludes private members starting with underscore and includes only the __init__ method.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/widget.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntextual.widget\n    options:\n        filters:\n          - \"!^_\"\n          - \"^__init__$\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dock Style Syntax in CSS\nDESCRIPTION: Demonstrates the syntax for the 'dock' CSS property in Textual, which can be set to 'bottom', 'left', 'right', or 'top' to determine the docking edge.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndock: bottom | left | right | top;\n```\n\n----------------------------------------\n\nTITLE: Opening Tag Example\nDESCRIPTION: Example of a basic opening markup tag for styling content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n[bold]\n```\n\n----------------------------------------\n\nTITLE: Setting an Initial Active Tab (Textual, Python)\nDESCRIPTION: Shows how to specify the initially active tab by passing the 'initial' argument, set to the desired TabPane's 'id', to the TabbedContent constructor. The code assigns clear 'id' values and ensures the UI highlights the specified tab ('jessica') on widget creation. The example depends on the Textual framework with TabbedContent, TabPane, and Markdown imported.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabbed_content.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef compose(self) -> ComposeResult:\n    with TabbedContent(initial=\"jessica\"):\n        with TabPane(\"Leto\", id=\"leto\"):\n            yield Markdown(LETO)\n        with TabPane(\"Jessica\", id=\"jessica\"):\n            yield Markdown(JESSICA)\n        with TabPane(\"Paul\", id=\"paul\"):\n            yield Markdown(PAUL)\n```\n\n----------------------------------------\n\nTITLE: Basic File Reading in Python\nDESCRIPTION: A simple example of how most applications read files into memory, which can be problematic for very large files.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/toolong-retrospective.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"access.log\", \"rb\") as log_file:\n    log_data = log_file.read()\n```\n\n----------------------------------------\n\nTITLE: Using the Textual CLI to explore border types\nDESCRIPTION: Command to launch an interactive border explorer using the Textual CLI tools.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/border.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntextual borders\n```\n\n----------------------------------------\n\nTITLE: Setting Layers with Name Types in Textual Python\nDESCRIPTION: Example of setting the layers property of a widget's styles using a string of space-separated name types in Python. Demonstrates the same naming patterns as the CSS example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/name.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.layers = \"onlyLetters Letters-and-hiphens _lead-under letters-1-digit\"\n```\n\n----------------------------------------\n\nTITLE: Example of Layers Usage in Textual CSS\nDESCRIPTION: A Textual CSS file showing how to define and apply layers to widgets. It sets up two layers and applies them to different boxes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layers.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/layout/layers.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Running Textual App with Auto Pilot (Python)\nDESCRIPTION: Demonstrates how to use the new auto_pilot parameter when running a Textual app. This feature allows for automated testing or demonstration of the app.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\napp.run(auto_pilot=True)\n```\n\n----------------------------------------\n\nTITLE: Executing a Textual Python Example via Shell\nDESCRIPTION: This shell script demonstrates how to navigate into the 'textual/examples' directory using the 'cd' command and then execute the 'pride.py' Python script using the 'python' interpreter. This is the standard method for running the example Textual applications provided in the repository.\nSOURCE: https://github.com/textualize/textual/blob/main/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd textual/examples\npython pride.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Smooth Scrolling in Textual\nDESCRIPTION: Demonstrates how to disable smooth scrolling in Textual by setting an environment variable. This is related to the implementation of smooth scrolling on supported terminals.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTEXTUAL_SMOOTH_SCROLL=0\n```\n\n----------------------------------------\n\nTITLE: Installing textual-web for Memray Integration\nDESCRIPTION: Command to install textual-web using pipx, which will be used to serve the Memray interface remotely.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/remote-memray.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx install textual-web\n```\n\n----------------------------------------\n\nTITLE: Old Message Posting with post_message in Textual (Pre-0.14.0)\nDESCRIPTION: Example of how messages were posted in Textual prior to version 0.14.0, using the async post_message method which required awaiting and explicitly passing the sender as the first argument.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-14-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait self.post_message(self.Changed(self, item=self.item))\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Definition\nDESCRIPTION: Basic YAML frontmatter defining the page title for a documentation page about the textual library.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/logger.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"textual\"\n---\n\n::: textual\n```\n\n----------------------------------------\n\nTITLE: Implementing RenderError Exception for Textual Rendering Issues\nDESCRIPTION: Defines an exception class for errors that occur during the rendering process in Textual. Used when there's a problem with screen or widget rendering.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass RenderError(TextualError):\n    \"\"\"Errors related to rendering.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest Version of Textual\nDESCRIPTION: Command to install the latest version of Textual-dev using pip with the upgrade flag to resolve import errors related to ComposeResult.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install textual-dev -U\n```\n\n----------------------------------------\n\nTITLE: Controlling Component Class Inheritance in Python\nDESCRIPTION: Added a parameter to control whether component classes are inherited from base classes.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ninherit_component_classes\n```\n\n----------------------------------------\n\nTITLE: Accessing TreeNode Children in Python\nDESCRIPTION: Added read-only public access to a TreeNode's children.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nTreeNode.children\n```\n\n----------------------------------------\n\nTITLE: Building the FAQ Using faqtory - Shell\nDESCRIPTION: This shell snippet runs the 'faqtory build' command from the top-level directory of the repository to generate the FAQ documentation. It assumes that the faqtory tool has already been installed and that question files (.question.md) are present in the expected directory. The command processes these files to build the FAQ, with outputs typically saved in a predefined location or format as per the faqtory configuration.\nDependencies: faqtory must be installed and configured. Input: None directly, but expects properly-named question files. Output: Builds/updates the project's FAQ documentation.\nSOURCE: https://github.com/textualize/textual/blob/main/questions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfaqtory build\n```\n\n----------------------------------------\n\nTITLE: Serving Memray Interface Remotely with textual-web\nDESCRIPTION: Command to serve the Memray live interface over the web using textual-web. This example monitors the Python http.server module, but the command in quotes can be replaced with any Memray options.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/remote-memray.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntextual-web -r \"memray run --live -m http.server\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Style Syntax\nDESCRIPTION: Demonstrates how to document Python syntax for setting Textual styles, mirroring the CSS examples. It includes notes on differences between CSS and Python syntax if applicable.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/_template.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.property_name = value1\nwidget.styles.property_name = value2\nwidget.styles.property_name = (different_syntax_value, shown_here)\n\nwidget.styles.property_name_variant = value3\nwidget.styles.property_name_variant = value4\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Gutter in Python with Textual\nDESCRIPTION: Demonstrates how to use the grid_gutter style in a Textual Python application, creating a grid layout with custom gutters.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_gutter.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/grid_gutter.py\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Directive for AppBlur\nDESCRIPTION: A markdown directive that includes the AppBlur event documentation from the textual.events module with a level 1 heading.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/app_blur.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.events.AppBlur\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: New Custom Message Class Definition in Textual (0.14.0+)\nDESCRIPTION: Example of how custom message classes should be defined in Textual 0.14.0 and later, without the sender parameter in the constructor as it's now handled automatically.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-14-0.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyWidget(Widget):\n\n    class Changed(Message):\n        \"\"\"My widget change event.\"\"\"\n        def __init__(self, item_index:int) -> None:\n            self.item_index = item_index\n            super().__init__()\n```\n\n----------------------------------------\n\nTITLE: Applying Max-Height in Textual CSS\nDESCRIPTION: A Textual CSS file showing how to apply max-height to different placeholders, with highlighted lines indicating the max-height properties.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_height.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/max_height.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Using DOMQuery.only_one in Textual (Python)\nDESCRIPTION: Shows the usage of the new DOMQuery.only_one method in Textual. This method is likely used to ensure that only one element matches a given query.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nresult = DOMQuery.only_one(\"#unique-element\")\n```\n\n----------------------------------------\n\nTITLE: Importing webbrowser module in Python\nDESCRIPTION: Reference to Python's webbrowser module used to open URLs in a web browser from terminal applications.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/textual-serve-files.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwebbrowser\n```\n\n----------------------------------------\n\nTITLE: Checking Hatch Installation\nDESCRIPTION: Command to verify Hatch installation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhatch\n```\n\n----------------------------------------\n\nTITLE: Closing CSS Rule Syntax Block in Textual Documentation\nDESCRIPTION: This HTML snippet provides a closing div tag and a comment explaining its purpose in Textual documentation. It is meant to be included at the end of code blocks that demonstrate CSS rule syntax.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/syntax_block_end.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n</div>\n<!-- Include this snippet when ending a code block that shows the syntax of a CSS rule. -->\n```\n\n----------------------------------------\n\nTITLE: DescendantFocus Event Documentation Structure\nDESCRIPTION: Markdown structure defining the documentation layout for the DescendantFocus event, including directive for auto-documentation generation and related event cross-references.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/descendant_focus.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: DescendantFocus\n---\n\n::: textual.events.DescendantFocus\n    options:\n      heading_level: 1\n\n## See also\n\n- [AppBlur](app_blur.md)\n- [AppFocus](app_focus.md)\n- [Blur](blur.md)\n- [DescendantBlur](descendant_blur.md)\n- [Focus](focus.md)\n```\n\n----------------------------------------\n\nTITLE: Getting TreeNode by ID in Python\nDESCRIPTION: Added method to retrieve a TreeNode by its ID.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nTree.get_node_by_id\n```\n\n----------------------------------------\n\nTITLE: Installing faqtory Using pipx - Shell\nDESCRIPTION: This shell snippet installs the faqtory tool using pipx, which allows the tool to be run in an isolated Python environment and helps prevent dependency conflicts with other Python packages. The command requires pipx to be installed on the system prior to usage. Successful execution makes the 'faqtory' command globally available for the user.\nPrerequisites: An up-to-date installation of pipx and Python.\nInput: None, executed as a shell command. Output: Installs the faqtory CLI tool into the user's pipx environment.\nSOURCE: https://github.com/textualize/textual/blob/main/questions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npipx install faqtory\n```\n\n----------------------------------------\n\nTITLE: Setting Overflow Style Programmatically in Python for Textual\nDESCRIPTION: Python code demonstrating how to set overflow styles programmatically in Textual. It shows setting overflow for individual axes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/overflow.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Hide the vertical scrollbar\nwidget.styles.overflow_y = \"hidden\"\n\n# Always show the horizontal scrollbar\nwidget.styles.overflow_x = \"scroll\"\n```\n\n----------------------------------------\n\nTITLE: Old Custom Message Class Definition in Textual (Pre-0.14.0)\nDESCRIPTION: Example of how custom message classes were defined in Textual prior to version 0.14.0, requiring a sender parameter in the constructor and passing it to the parent class.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-14-0.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyWidget(Widget):\n\n    class Changed(Message):\n        \"\"\"My widget change event.\"\"\"\n        def __init__(self, sender:MessageTarget, item_index:int) -> None:\n            self.item_index = item_index\n            super().__init__(sender)\n```\n\n----------------------------------------\n\nTITLE: Python Text Wrap Style Setting\nDESCRIPTION: Demonstrates how to set text wrapping behavior programmatically in Python using Textual's style API.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_wrap.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.text_wrap = \"wrap\"\nwidget.styles.text_wrap = \"nowrap\"\n```\n\n----------------------------------------\n\nTITLE: Implementing LoadError Exception for Resource Loading Issues\nDESCRIPTION: Defines an exception class for errors related to loading resources. Used when there's a problem with loading external files or assets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass LoadError(TextualError):\n    \"\"\"Errors related to loading.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Declaring XML Sitemap Location - TXT Configuration\nDESCRIPTION: Specifies the URL location of the XML sitemap file for SEO purposes\nSOURCE: https://github.com/textualize/textual/blob/main/docs/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nSitemap: https://textual.textualize.io/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Documenting Leave Event in Textual Library with Markdown\nDESCRIPTION: This snippet defines the structure for documenting the Leave event in the Textual library. It uses a custom directive to generate the documentation with a specified heading level.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/leave.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: textual.events.Leave\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: Implementing DuplicateKeyError Exception for Key Binding Conflicts\nDESCRIPTION: Defines an exception that is raised when attempting to register a key binding that already exists. Helps prevent conflicts in keyboard input handling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass DuplicateKeyError(TextualError):\n    \"\"\"Raised when a key is already bound.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Content\nDESCRIPTION: Shows how to create Content instances without markup processing\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nContent(\"hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Defining Text Alignment in Textual CSS\nDESCRIPTION: Syntax for setting the 'text-align' style in Textual CSS. It accepts a value of type <text-align> to define how text is aligned inside the widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_align.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntext-align: <text-align>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Opacity Example in Python\nDESCRIPTION: A Python example demonstrating text opacity styling in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_opacity.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/text_opacity.py\"\n```\n\n----------------------------------------\n\nTITLE: Styling Text Opacity with TCSS\nDESCRIPTION: CSS styles demonstrating different text opacity values for Textual widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_opacity.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/text_opacity.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for NamedTuples Creation\nDESCRIPTION: Shows performance benchmark results for creating 10,000 NamedTuples using hyperfine.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/text-area-learnings.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n❯ hyperfine -w 2 'python sandbox/darren/make_namedtuples.py'\nBenchmark 1: python sandbox/darren/make_namedtuples.py\n  Time (mean ± σ):      15.9 ms ±   0.5 ms    [User: 12.8 ms, System: 2.5 ms]\n  Range (min … max):    15.2 ms …  18.4 ms    165 runs\n```\n\n----------------------------------------\n\nTITLE: Installing Textual Demo with UV Package Manager\nDESCRIPTION: Command to install and run the Textual demo application using the UV package manager with Python 3.12\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release1.0.0.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx --python 3.12 textual-demo\n```\n\n----------------------------------------\n\nTITLE: Adding Border Titles to a Custom Widget\nDESCRIPTION: This example shows how to add border titles and subtitles to a widget using both class variables and instance attributes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nclass Hello(Static):\n    BORDER_TITLE = \"Greeting\"\n\n    def __init__(self):\n        super().__init__()\n        self.greetings = [\"Hello\", \"Bonjour\", \"Hola\", \"Guten Tag\", \"Ciao\"]\n        self.index = 0\n        self.border_subtitle = \"Click to change\"\n\n    def compose(self) -> ComposeResult:\n        yield Static(id=\"greeting\")\n\n    def on_mount(self) -> None:\n        self.update_greeting()\n\n    def update_greeting(self) -> None:\n        greeting = self.greetings[self.index]\n        self.query_one(\"#greeting\").update(\n            f'[@click=next_word]{greeting}[/]'\n        )\n\n    def action_next_word(self) -> None:\n        self.index = (self.index + 1) % len(self.greetings)\n        self.update_greeting()\n\nclass HelloApp(App):\n    CSS_PATH = \"hello06.tcss\"\n    def compose(self) -> ComposeResult:\n        yield Hello()\n```\n\nLANGUAGE: css\nCODE:\n```\nHello {\n    width: 100%;\n    height: 5;\n    content-align: center middle;\n    background: darkblue;\n    color: white;\n    border: heavy white;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Textual Repository (HTTPS)\nDESCRIPTION: Git command to clone Textual repository using HTTPS.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Textualize/textual.git\n```\n\n----------------------------------------\n\nTITLE: Max-width CSS Examples\nDESCRIPTION: Demonstrates different ways to set maximum width using CSS, including fixed units and viewport-relative units.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_width.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Set the maximum width to 10 rows */\nmax-width: 10;\n\n/* Set the maximum width to 25% of the viewport width */\nmax-width: 25vw;\n```\n\n----------------------------------------\n\nTITLE: Styling Hatch Effects with Textual CSS\nDESCRIPTION: Shows the CSS code used to style the hatch effects in the example app. It defines different hatch patterns, colors, and opacities for various containers.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/hatch.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/hatch.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Basic Margin Styling in CSS\nDESCRIPTION: CSS styles for the basic margin usage example, highlighting the margin property.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/margin.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Textual Repository (SSH)\nDESCRIPTION: Git command to clone Textual repository using SSH.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Textualize/textual.git\n```\n\n----------------------------------------\n\nTITLE: Position Example Implementation\nDESCRIPTION: Python implementation showing how to use position styling in a Textual application.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/position.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/position.py\"\n```\n\n----------------------------------------\n\nTITLE: Horizontal Keyline Example in CSS\nDESCRIPTION: CSS styles for a simple horizontal layout with a thin keyline in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/keyline.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/keyline_horizontal.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Color Active in Python\nDESCRIPTION: Sets the color of the scrollbar thumb to yellow when it's being dragged using Python. This code can be used to programmatically style the active state of scrollbars in Textual widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_active.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.scrollbar_color_active = \"yellow\"\n```\n\n----------------------------------------\n\nTITLE: Example Textual App Demonstrating Scrollbar Styles\nDESCRIPTION: A complete Textual application example showcasing various scrollbar styles, including scrollbar-background-hover.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_hover.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbars2.py\"\n```\n\n----------------------------------------\n\nTITLE: Full Position Example with TCSS\nDESCRIPTION: Complete example of position styling using Textual CSS (TCSS) file to define position rules.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/position.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/position.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Width in CSS Syntax\nDESCRIPTION: Basic CSS syntax for setting widget width using scalar values.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nwidth: <scalar>;\n```\n\n----------------------------------------\n\nTITLE: Defining Max-width in CSS Syntax\nDESCRIPTION: Shows the basic syntax for defining max-width property in CSS, accepting a scalar value that sets the upper bound for widget width.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_width.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nmax-width: <scalar>;\n```\n\n----------------------------------------\n\nTITLE: CSS Examples for Scrollbar Gutter\nDESCRIPTION: Provides CSS examples for setting the scrollbar-gutter property to both 'auto' and 'stable' values, with comments explaining each.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_gutter.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-gutter: auto;    /* Don't reserve space for a vertical scrollbar. */\nscrollbar-gutter: stable;  /* Reserve space for a vertical scrollbar. */\n```\n\n----------------------------------------\n\nTITLE: Standard MkDocs Project Directory Layout (Plain Text)\nDESCRIPTION: Illustrates the typical file and directory structure for an MkDocs project. It includes the main configuration file (`mkdocs.yml`) and the `docs` directory containing the Markdown source files (like `index.md` for the homepage) and other assets. This structure is standard for MkDocs projects.\nSOURCE: https://github.com/textualize/textual/blob/main/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        ...       # Other markdown pages, images and other files.\n```\n\n----------------------------------------\n\nTITLE: Matching Specific Attributes with @on Decorator in Python\nDESCRIPTION: Shows how to use the @on decorator to match specific attributes of a Message in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@on(TabbedContent.TabActivated, pane=\"#home\")\ndef home_tab(self) -> None:\n    self.log(\"Switched back to home tab.\")\n    ...\n```\n\n----------------------------------------\n\nTITLE: RadioSet Styling with CSS\nDESCRIPTION: CSS styling rules for the RadioSet widget example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radioset.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/widgets/radio_set.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Setting Border Subtitle Background in CSS\nDESCRIPTION: Sets the background color of a widget's border subtitle using CSS syntax. The value can be a color name or auto with an optional percentage value.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_background.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-subtitle-background: blue;\n```\n\n----------------------------------------\n\nTITLE: Setting Border Title Style with CSS\nDESCRIPTION: Example showing how to style border titles using CSS syntax to make text bold and underlined.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_title_style.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-title-style: bold underline;\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Margins\nDESCRIPTION: Demonstrates how to add margin space between widgets and explains margin overlap behavior.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/styles/margin01.py\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Vertical Rule Output (Textual)\nDESCRIPTION: This block indicates where the visual output of the `vertical_rules.py` script will be rendered in the documentation. It showcases vertical rules with different line styles as generated by the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rule.md#2025-04-22_snippet_3\n\nLANGUAGE: textual\nCODE:\n```\n    ```{.textual path=\"docs/examples/widgets/vertical_rules.py\"}\n    ```\n```\n\n----------------------------------------\n\nTITLE: Grid Column Layout Python Example\nDESCRIPTION: A Python file demonstrating grid column layout implementation referenced in the documentation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_columns.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/grid_columns.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Border Title Background with Python\nDESCRIPTION: Sets the background color of a widget's border title using Python's style API. Demonstrates direct style property assignment.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_title_background.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.border_title_background = \"blue\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Rules (Python)\nDESCRIPTION: This snippet references the Python code located at `docs/examples/widgets/horizontal_rules.py`. This external file contains the actual implementation demonstrating how to create and display various horizontal `Rule` widgets using the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rule.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    ```python\n    --8<-- \"docs/examples/widgets/horizontal_rules.py\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Displaying Horizontal Rule Output (Textual)\nDESCRIPTION: This block indicates where the visual output of the `horizontal_rules.py` script will be displayed in the documentation. It demonstrates various horizontal rule styles rendered by the Textual framework.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rule.md#2025-04-22_snippet_0\n\nLANGUAGE: textual\nCODE:\n```\n    ```{.textual path=\"docs/examples/widgets/horizontal_rules.py\"}\n    ```\n```\n\n----------------------------------------\n\nTITLE: Displaying Pi Digits Example\nDESCRIPTION: Example demonstrating how to use the Digits widget to display several digits of Pi\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/digits.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/widgets/digits.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Border Title Color with CSS in Textual\nDESCRIPTION: This CSS snippet demonstrates how to set the color of the border title to red using the border-title-color property in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_title_color.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-title-color: red;\n```\n\n----------------------------------------\n\nTITLE: Grid Keyline Example in Python\nDESCRIPTION: Shows a grid layout with a heavy keyline using Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/keyline.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/keyline.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ListRenderError Exception for List Rendering Issues\nDESCRIPTION: Defines an exception class for errors specific to rendering list components. Used when there's a problem with displaying or updating list widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass ListRenderError(RenderError):\n    \"\"\"Error when rendering a list.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Pretty Widget Implementation in Textual\nDESCRIPTION: Shows pretty-formatted Rich renderable display.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_17\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/pretty.py\n```\n\n----------------------------------------\n\nTITLE: Setting Border Subtitle Alignment in Python\nDESCRIPTION: Shows how to set the border subtitle alignment using Python in Textual. The alignment can be set to left, center, or right using the styles attribute of a widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_align.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.border_subtitle_align = \"left\"\nwidget.styles.border_subtitle_align = \"center\"\nwidget.styles.border_subtitle_align = \"right\"\n```\n\n----------------------------------------\n\nTITLE: Running Textual Demo without Installation using uv\nDESCRIPTION: This command demonstrates how to run the Textual demo without installing it, using the uv package manager. It requires uv to be installed on the system.\nSOURCE: https://github.com/textualize/textual/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuvx --python 3.12 textual-demo\n```\n\n----------------------------------------\n\nTITLE: Using Custom Port for Textual Console\nDESCRIPTION: Demonstrates how to use a custom port for the Textual debug console and run command.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntextual console --port 7342\n```\n\nLANGUAGE: bash\nCODE:\n```\ntextual run --dev --port 7342 my_app.py\n```\n\n----------------------------------------\n\nTITLE: Implementing ScreenStackError Exception for Screen Stack Manipulation\nDESCRIPTION: Defines an exception that is raised when there's an issue with manipulating the screen stack, such as attempting to pop from an empty stack.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/api/errors.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ScreenStackError(ScreenError):\n    \"\"\"Raised when there is an issue with the screen stack.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Input Widget Implementation in Textual\nDESCRIPTION: Demonstrates a text input control with interactive typing support.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_8\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/input.py\n```\n\n----------------------------------------\n\nTITLE: Setting Keyline in Python\nDESCRIPTION: Demonstrates how to set a keyline in Python using a tuple of type and color in Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/keyline.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.keyline = (\"thin\", \"green\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Transitions in Textual (Python)\nDESCRIPTION: Demonstrates the use of push_screen, switch_screen, and install_screen methods in Textual. These methods now return an awaitable, allowing for better control flow in asynchronous code.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nawait app.push_screen(new_screen)\nawait app.switch_screen(other_screen)\nawait app.install_screen(installed_screen)\n```\n\n----------------------------------------\n\nTITLE: Structuring Textual Reference Documentation with Markdown Grid Cards\nDESCRIPTION: This Markdown snippet creates a grid layout using custom CSS classes to present the main sections of the Textual Reference documentation. Each card contains a title, description, and a link to the respective section.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/reference/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"grid cards\" markdown>\n\n-   :octicons-book-16:{ .lg .middle } __CSS Types__\n\n    ---\n\n    CSS Types are the data types that CSS [styles](../styles/index.md) accept in their rules.\n\n    :octicons-arrow-right-24: [CSS Types Reference](../css_types/index.md)\n\n\n-   :octicons-book-16:{ .lg .middle } __Events__\n\n    ---\n\n    Events are how Textual communicates with your application.\n\n    :octicons-arrow-right-24: [Events Reference](../events/index.md)\n\n\n-   :octicons-book-16:{ .lg .middle } __Styles__\n\n    ---\n\n    All the styles you can use to take your Textual app to the next level.\n\n    [:octicons-arrow-right-24: Styles Reference](../styles/index.md)\n\n\n-   :octicons-book-16:{ .lg .middle } __Widgets__\n\n    ---\n\n    How to use the many widgets builtin to Textual.\n\n    :octicons-arrow-right-24: [Widgets Reference](../widgets/index.md)\n\n  \n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Hatch Style in CSS\nDESCRIPTION: Demonstrates how to apply a hatch style to an element using CSS. This example sets a cross hatch pattern in green color.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/hatch.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.some-class {\n    hatch: cross green;\n}\n```\n\n----------------------------------------\n\nTITLE: Digits Display Widget in Textual\nDESCRIPTION: Implementation of a widget for displaying numbers in tall characters.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_4\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/digits.py\n```\n\n----------------------------------------\n\nTITLE: Applying Keyline Style in CSS for Textual\nDESCRIPTION: This CSS snippet demonstrates how to apply a thin green keyline to a Vertical widget in Textual. The keyline property is used with the 'thin' value and 'green' color.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/keyline.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nVertical {\n    keyline: thin green;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Vertical Rules (TCSS)\nDESCRIPTION: This snippet points to the TCSS file `docs/examples/widgets/vertical_rules.tcss`. This external file provides the necessary styling rules for the vertical rules demonstrated in the accompanying Python example.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rule.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n    ```css\n    --8<-- \"docs/examples/widgets/vertical_rules.tcss\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Styling the Basic Sparkline Widget with CSS in Textual\nDESCRIPTION: Provides CSS rules to define the width of the Sparkline widget, determining how many bars are shown. Intended to accompany the basic Python sparkline example, setting the width property to 3 for the Sparkline component. Requires that the CSS is loaded and linked properly in a Textual app. Changes in width affect the bar aggregation in the sparkline rendering.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n```\n--8<-- \\\"docs/examples/widgets/sparkline_basic.tcss\\\"\n```\n```\n\n----------------------------------------\n\nTITLE: CSS Rule for Hiding Start Button in Started State\nDESCRIPTION: CSS selector that targets the start button when contained within an element that has the 'started' class. Demonstrates child selector patterns in Textual CSS.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.started #start {\n    display: none\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsible Widget Implementation in Textual\nDESCRIPTION: Demonstrates a collapsible content widget that can be toggled by clicking a title.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_2\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/collapsible.py\n```\n\n----------------------------------------\n\nTITLE: CSS Chained Class Selector for Specific Styling\nDESCRIPTION: CSS rule using chained class selectors to style widgets with both 'error' and 'disabled' classes. This sets the background to dark red.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.error.disabled {\n  background: darkred;\n}\n```\n\n----------------------------------------\n\nTITLE: Using App.run_async in Textual (Python)\nDESCRIPTION: Shows how to use the new App.run_async method in Textual. This method allows for asynchronous execution of the app, possibly useful in more complex scenarios.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nawait app.run_async()\n```\n\n----------------------------------------\n\nTITLE: Changing Command Palette Key Binding in Textual App\nDESCRIPTION: Shows how to change the key binding for opening the command palette in a Textual app by setting the COMMAND_PALETTE_BINDING class variable.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/command_palette.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass NewPaletteBindingApp(App):\n    COMMAND_PALETTE_BINDING = \"ctrl+backslash\"\n```\n\n----------------------------------------\n\nTITLE: Setting Background Tint in Python\nDESCRIPTION: This snippet demonstrates how to set the background tint using Python, both with a string syntax similar to CSS and with a Color object for more precise control.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/background_tint.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Set 20% blue background tint\nwidget.styles.background_tint = \"blue 20%\"\n\nfrom textual.color import Color\n# Set with a color object\nwidget.styles.background_tint = Color(120, 60, 100, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Setting Border Title Color with Python in Textual\nDESCRIPTION: This Python snippet shows how to programmatically set the color of the border title to red using the styles.border_title_color attribute of a Textual widget.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_title_color.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.border_title_color = \"red\"\n```\n\n----------------------------------------\n\nTITLE: Defining Resize Event Class in Python for Textual Framework\nDESCRIPTION: This code snippet defines the Resize event class in the Textual framework. It is used to represent and handle window resizing events in terminal-based user interfaces built with Textual.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/events/resize.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: textual.events.Resize\n    options:\n      heading_level: 1\n```\n\n----------------------------------------\n\nTITLE: CSS Tint Style Definition\nDESCRIPTION: Basic CSS syntax for the tint style property that blends a color with a widget. Shows format for color values and optional percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/tint.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntint: <color> [<percentage>];\n```\n\n----------------------------------------\n\nTITLE: Focusing Next and Previous Widgets with Selector in Python\nDESCRIPTION: Added an optional selector parameter to focus_next and focus_previous methods for narrowing down focusable widgets.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nScreen.focus_next(selector=None)\nScreen.focus_previous(selector=None)\n```\n\n----------------------------------------\n\nTITLE: Full Python Implementation Example\nDESCRIPTION: Complete Python implementation demonstrating link hover styling in a Textual application, including both hyperlinks and action links.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style_hover.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/link_style_hover.py\"\n```\n\n----------------------------------------\n\nTITLE: Running a Textual Clock App Inline\nDESCRIPTION: This snippet demonstrates how to create a simple clock app in Textual and run it inline. The app displays the current time and updates it continuously.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/style-inline-apps.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nfrom textual.containers import Center\nfrom datetime import datetime\n\n\nclass ClockApp(App):\n    def compose(self) -> ComposeResult:\n        yield Center(Static(datetime.now().time().strftime(\"%H:%M:%S\")))\n\n    def on_mount(self) -> None:\n        self.update_time()\n\n    def update_time(self) -> None:\n        clock = self.query_one(Static)\n        time = datetime.now().time()\n        clock.update(time.strftime(\"%H:%M:%S\"))\n        self.set_timer(1, self.update_time)\n\n\nif __name__ == \"__main__\":\n    app = ClockApp()\n    app.run(inline=True)\n```\n\n----------------------------------------\n\nTITLE: TCSS Styles for Scrollbar Example\nDESCRIPTION: TCSS (Textual CSS) styles defining various scrollbar properties, with scrollbar-background-hover highlighted.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_hover.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/styles/scrollbars2.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Markup in Notifications\nDESCRIPTION: Shows how to disable markup processing when using notify() method\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# debug code: what is my_list at this point?\nself.notify(repr(my_list), markup=False)\n```\n\n----------------------------------------\n\nTITLE: Using Outline Style in Textual\nDESCRIPTION: Shows how to add an outline to a widget, which differs from border by potentially overlapping content.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/styles/outline01.py\"\n```\n\n----------------------------------------\n\nTITLE: Rule Widget Implementation in Textual\nDESCRIPTION: Demonstrates horizontal rules for content separation.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_22\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/horizontal_rules.py\n```\n\n----------------------------------------\n\nTITLE: Enhancing TreeNode Addition in Python\nDESCRIPTION: Adds 'before' and 'after' arguments to TreeNode.add and TreeNode.add_leaf for positioning new nodes.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nTreeNode.add(new_node, before=existing_node)\nTreeNode.add_leaf(new_leaf, after=existing_node)\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient Quality Parameter in Python\nDESCRIPTION: Adds a 'quality' parameter to the textual.color.Gradient class and introduces a new method get_rich_color.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntextual.color.Gradient(quality=...)\ntextual.color.Gradient.get_rich_color()\n```\n\n----------------------------------------\n\nTITLE: Creating Select Control from Values in Python\nDESCRIPTION: Example of using Select.from_values class method to initialize a Select control with an iterator of values\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nselect = Select.from_values([\"option1\", \"option2\", \"option3\"])\n```\n\n----------------------------------------\n\nTITLE: Serving Textual Apps from Python Modules\nDESCRIPTION: Shows how to serve a Textual app from a Python module using the 'serve' subcommand.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntextual serve \"python -m textual\"\n```\n\n----------------------------------------\n\nTITLE: AsyncIO Task Benchmark Results Output\nDESCRIPTION: The output showing the number of tasks that can be created and destroyed per second, ranging from 100,000 to 1,000,000 tasks. The results demonstrate consistently high performance around 240-280K tasks per second.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/creating-tasks-overhead.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n100,000 tasks    280,003 tasks per/s\n200,000 tasks    255,275 tasks per/s\n300,000 tasks    248,713 tasks per/s\n400,000 tasks    248,383 tasks per/s\n500,000 tasks    241,624 tasks per/s\n600,000 tasks    260,660 tasks per/s\n700,000 tasks    244,510 tasks per/s\n800,000 tasks    247,455 tasks per/s\n900,000 tasks    242,744 tasks per/s\n1,000,000 tasks          259,715 tasks per/s\n```\n\n----------------------------------------\n\nTITLE: Using Widget Movement in Python\nDESCRIPTION: Example of using Widget.move_child with keyword-only parameters before and after\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwidget.move_child(child, before=target)  # Move child before target\nwidget.move_child(child, after=target)   # Move child after target\n```\n\n----------------------------------------\n\nTITLE: Textual Markup Playground Launch Command\nDESCRIPTION: Command to launch the Textual markup playground for experimenting with content markup.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m textual.markup\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Messages in Textual Main Screen (Python)\nDESCRIPTION: Demonstrates how to handle custom messages in the Main screen of a Textual application. This example shows reacting to an Activity.Moved message to save the updated activity list.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/on-dog-food-the-original-metaverse-and-not-being-bored.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef on_activity_moved( self, _: Activity.Moved ) -> None:\n    \"\"\"React to an activity being moved.\"\"\"\n    self.save_activity_list()\n```\n\n----------------------------------------\n\nTITLE: DirectoryTree Widget Implementation in Textual\nDESCRIPTION: Shows how to create a tree view of files and folders in the terminal.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_5\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/directory_tree.py\n```\n\n----------------------------------------\n\nTITLE: Custom Widget Actions\nDESCRIPTION: Shows how to implement actions in a custom widget with its own namespace.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions05.py\"\n```\n\nLANGUAGE: css\nCODE:\n```\n--8<-- \"docs/examples/guide/actions/actions05.tcss\"\n```\n\n----------------------------------------\n\nTITLE: Adding Line Number Start Attribute to TextArea in Python\nDESCRIPTION: Introduces a new reactive attribute 'line_number_start' to the TextArea class.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTextArea.line_number_start\n```\n\n----------------------------------------\n\nTITLE: Adding Gradient Parameter to ProgressBar in Python\nDESCRIPTION: Introduces a 'gradient' parameter to the ProgressBar widget for customized visual effects.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nProgressBar(gradient=...)\n```\n\n----------------------------------------\n\nTITLE: Enhancing Widget Child Removal in Python\nDESCRIPTION: Extends Widget.remove_children to accept an iterable of widgets in addition to a selector.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nWidget.remove_children(iterable_of_widgets)\n```\n\n----------------------------------------\n\nTITLE: Documenting CSS Rule Syntax\nDESCRIPTION: Provides a template for documenting CSS rule syntax, including multiple variations and values. It uses a CSS code block with comments for clarity.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/_template.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nrule-name: value1\nrule-name: value2\nrule-name: different-syntax-value shown-here\n\nrule-name-variant: value3\nrule-name-variant: value4\n```\n\n----------------------------------------\n\nTITLE: LoadingIndicator Widget Implementation in Textual\nDESCRIPTION: Demonstrates an animated loading indicator for showing loading states.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_10\n\nLANGUAGE: textual\nCODE:\n```\ndocs/examples/widgets/loading_indicator.py\n```\n\n----------------------------------------\n\nTITLE: Adding ID Attributes for Programmatic Tab Switching (Textual, Python)\nDESCRIPTION: Demonstrates how to assign 'id' attributes to TabPane widgets, enabling programmatic tab switching. Textual dependencies include TabbedContent, TabPane, and Markdown. The example defines uniquely identified content panes for each tab, making it possible to control the active tab via code.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabbed_content.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef compose(self) -> ComposeResult:\n    with TabbedContent():\n        with TabPane(\"Leto\", id=\"leto\"):\n            yield Markdown(LETO)\n        with TabPane(\"Jessica\", id=\"jessica\"):\n            yield Markdown(JESSICA)\n        with TabPane(\"Paul\", id=\"paul\"):\n            yield Markdown(PAUL)\n```\n\n----------------------------------------\n\nTITLE: Composing Color Swatches - New Context Manager Approach\nDESCRIPTION: Enhanced implementation using context managers for clearer structure and easier editing of widget composition.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-12-0.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor color_name in ColorSystem.COLOR_NAMES:\n    with ColorGroup(id=f\"group-{color_name}\"):\n        yield Label(f'\"{color_name}\"')\n        for level in LEVELS:\n            color = f\"{color_name}-{level}\" if level else color_name\n            with ColorItem(classes=color):\n                yield ColorBar(f\"${color}\", classes=\"text label\")\n                yield ColorBar(\"$text-muted\", classes=\"muted\")\n                yield ColorBar(\"$text-disabled\", classes=\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Adding Row and Column Cursors to DataTable in Python\nDESCRIPTION: Added row and column cursors to the DataTable widget.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nDataTable.row\nDataTable.column\n```\n\n----------------------------------------\n\nTITLE: Accessing TreeNode Parent in Python\nDESCRIPTION: Added a read-only property to access a TreeNode's parent.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nTreeNode.parent\n```\n\n----------------------------------------\n\nTITLE: Setting Border Subtitle Color in Python for Textual\nDESCRIPTION: This Python snippet shows how to programmatically set the border subtitle color in Textual. It uses the styles.border_subtitle_color attribute of a widget to set the color to red.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_color.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.border_subtitle_color = \"red\"\n```\n\n----------------------------------------\n\nTITLE: Composing Color Swatches - Original Method\nDESCRIPTION: Original implementation of color swatch composition in the textual colors command, using explicit list construction and widget appending.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-12-0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor color_name in ColorSystem.COLOR_NAMES:\n\n    items: list[Widget] = [ColorLabel(f'\"{color_name}\"')]\n    for level in LEVELS:\n        color = f\"{color_name}-{level}\" if level else color_name\n        item = ColorItem(\n            ColorBar(f\"${color}\", classes=\"text label\"),\n            ColorBar(\"$text-muted\", classes=\"muted\"),\n            ColorBar(\"$text-disabled\", classes=\"disabled\"),\n            classes=color,\n        )\n        items.append(item)\n\n    yield ColorGroup(*items, id=f\"group-{color_name}\")\n```\n\n----------------------------------------\n\nTITLE: Styling a Select Widget with CSS in Textual\nDESCRIPTION: CSS styling for the Select widget in Textual. The snippet shows how to customize the appearance of the Select control.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-24-0.md#2025-04-22_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--8<-- \"docs/examples/widgets/select.css\"\n```\n\n----------------------------------------\n\nTITLE: Textual Output of World Clock App without Data Binding\nDESCRIPTION: Represents the visual output generated by running the `world_clock01.py` Textual application, displaying three world clocks before data binding is implemented.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#2025-04-22_snippet_17\n\nLANGUAGE: textual\nCODE:\n```\n```{.textual path=\"docs/examples/guide/reactivity/world_clock01.py\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing TreeNode Label in Python\nDESCRIPTION: Added public access to a TreeNode's label.\nSOURCE: https://github.com/textualize/textual/blob/main/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nTreeNode.label\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollbar Background Color in Python\nDESCRIPTION: This snippet shows how to set the background color of a scrollbar using Python in Textual. The color is set to blue for a widget's scrollbar.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget.styles.scrollbar_background = \"blue\"\n```\n\n----------------------------------------\n\nTITLE: HTML Container for CSS Syntax Display\nDESCRIPTION: A styled div container used to display CSS rule syntax with consistent formatting. Uses a monospace font and background color styling for code blocks.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/syntax_block_start.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"highlight\" style=\"padding: 0.5em 1em; background: var(--md-code-bg-color);font-family: 'Roboto Mono',monospace;\">\n```\n\n----------------------------------------\n\nTITLE: Styling LoadingIndicator Color with CSS\nDESCRIPTION: CSS example showing how to customize the color of the LoadingIndicator widget using CSS styling.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/loading_indicator.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nLoadingIndicator {\n    color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Hatch Project\nDESCRIPTION: Command to create a new project structure using Hatch.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nhatch new \"textual calculator\"\n```\n\n----------------------------------------\n\nTITLE: Defining Scrollbar Background Hover Color in CSS\nDESCRIPTION: Sets the background color of a scrollbar to purple when the cursor hovers over it. This style accepts a color value with an optional opacity percentage.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_hover.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nscrollbar-background-hover: purple;\n```\n\n----------------------------------------\n\nTITLE: Implementing Escape Key Bindings in Textual Widgets (Python)\nDESCRIPTION: Demonstrates how to organize key bindings for the escape key across different widgets in a Textual application. This approach allows for context-specific behavior and better footer descriptions.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/on-dog-food-the-original-metaverse-and-not-being-bored.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Activity( Widget ):\n    \"\"\"A widget that holds and displays a suggested activity.\"\"\"\n\n    BINDINGS = [\n        ...\n        Binding( \"escape\", \"deselect\", \"Switch to Types\" )\n    ]\n\n...\n\nclass Filters( Vertical ):\n    \"\"\"Filtering sidebar.\"\"\"\n\n    BINDINGS = [\n        Binding( \"escape\", \"close\", \"Close Filters\" )\n    ]\n\n...\n\nclass Main( Screen ):\n    \"\"\"The main application screen.\"\"\"\n\n    BINDINGS = [\n        Binding( \"escape\", \"quit\", \"Close\" )\n    ]\n    \"\"\"The bindings for the main screen.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Scrollable Large Checkerboard Widget with ScrollView in Textual (Python)\nDESCRIPTION: This snippet shows a checkerboard widget that can scroll over a large virtual area by inheriting from ScrollView, dynamically setting the virtual_size property in the constructor to trigger scrollbars. The render_line method is updated to account for the scroll offset, ensuring only the visible area is rendered. Dependencies: Textual (ScrollView, geometry.Offset), and proper widget setup. Inputs: board size, scroll offsets. Outputs: visual representation of the current scrollable region. Limitation: performance may decrease dramatically with extremely large virtual sizes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python title=\\\"checker03.py\\\" hl_lines=\\\"4 26-30 35-36 52-53\\\"\\n--8<-- \\\"docs/examples/guide/widgets/checker03.py\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Project Configuration in pyproject.toml\nDESCRIPTION: TOML configuration showing project metadata and dependencies.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"textual-calculator\"\ndynamic = [\"version\"]\ndescription = 'A example app'\nreadme = \"README.md\"\nrequires-python = \">=3.8\"\nlicense = \"MIT\"\nkeywords = []\nauthors = [\n  { name = \"Will McGugan\", email = \"redacted@textualize.io\" },\n]\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"Programming Language :: Python\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: Implementation :: CPython\",\n  \"Programming Language :: Python :: Implementation :: PyPy\",\n]\ndependencies = []\n```\n\n----------------------------------------\n\nTITLE: Running a Textual App with Initialization Arguments in Python\nDESCRIPTION: This snippet shows three ways to instantiate and run the previously defined `Greetings` Textual app. The first example runs the app using the default arguments defined in its `__init__` method. The second example overrides the `to_greet` argument using a keyword argument. The third example provides both `greeting` and `to_greet` arguments positionally.\nSOURCE: https://github.com/textualize/textual/blob/main/questions/pass-args-to-app.question.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Running with default arguments.\nGreetings().run()\n\n# Running with a keyword argument.\nGreetings(to_greet=\"davep\").run()\n\n# Running with both positional arguments.\nGreetings(\"Well hello\", \"there\").run()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Method Calling for Variant Updates in Python\nDESCRIPTION: This snippet demonstrates how to dynamically call the appropriate method for updating the Placeholder widget based on its current variant.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/placeholder-pr.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Placeholder(Static):\n    # ...\n    def call_variant_update(self) -> None:\n        \"\"\"Calls the appropriate method to update the render of the placeholder.\"\"\"\n        update_variant_method = getattr(self, f\"_update_{self.variant}_variant\")\n        update_variant_method()\n```\n\n----------------------------------------\n\nTITLE: Installing with Pipx for Isolated Environment\nDESCRIPTION: Command to install the calculator using pipx, which creates an isolated virtual environment to avoid dependency conflicts.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npipx install textual_calculator\n```\n\n----------------------------------------\n\nTITLE: Activating Hatch Shell\nDESCRIPTION: Command to activate the Hatch virtual environment shell.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhatch shell\n```\n\n----------------------------------------\n\nTITLE: Implementing Border Title and Subtitle Alignments in Python with Textual\nDESCRIPTION: This Python code demonstrates various border title and subtitle alignments using Textual. It shows how to create labels with custom markup, handle long titles, and apply different alignment styles.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_sub_title_align_all_example.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/examples/styles/border_sub_title_align_all.py\"\n```\n\n----------------------------------------\n\nTITLE: Running Textual Demo Application\nDESCRIPTION: Command to launch the Textual demo application after installation to verify proper setup and explore capabilities.\nSOURCE: https://github.com/textualize/textual/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m textual\n```\n\n----------------------------------------\n\nTITLE: Benchmarking AsyncIO Task Creation and Destruction in Python\nDESCRIPTION: A benchmark script that measures the performance of creating and destroying AsyncIO tasks. The code creates varying numbers of no-operation tasks and measures how many can be processed per second.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/creating-tasks-overhead.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom asyncio import create_task, wait, run\nfrom time import process_time as time\n\n\nasync def time_tasks(count=100) -> float:\n    \"\"\"Time creating and destroying tasks.\"\"\"\n\n    async def nop_task() -> None:\n        \"\"\"Do nothing task.\"\"\"\n        pass\n\n    start = time()\n    tasks = [create_task(nop_task()) for _ in range(count)]\n    await wait(tasks)\n    elapsed = time() - start\n    return elapsed\n\n\nfor count in range(100_000, 1000_000 + 1, 100_000):\n    create_time = run(time_tasks(count))\n    create_per_second = 1 / (create_time / count)\n    print(f\"{count:,} tasks \\t {create_per_second:0,.0f} tasks per/s\")\n```\n\n----------------------------------------\n\nTITLE: Embedding SVG Image in Markdown\nDESCRIPTION: This snippet demonstrates how to embed an SVG image file in a Markdown document using a custom syntax.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/darren-year-in-review.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div>\n--8<-- \"docs/blog/images/darren-year-in-review/bulbasaur.svg\"\n</div>\n```\n\n----------------------------------------\n\nTITLE: Closing Tag Example\nDESCRIPTION: Example of a basic closing markup tag for ending style changes.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n[/bold]\n```\n\n----------------------------------------\n\nTITLE: CSS Descendant Selector for Nested Widget Styling\nDESCRIPTION: CSS rule using the descendant selector to style all children of a specific widget. This example sets a red background for all children of VerticalScroll.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nVerticalScroll * {\n  background: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LLM Model on App Mount in Python\nDESCRIPTION: Sets up the language model when the app is mounted. This method is called early in the app's lifecycle and is used for initial setup.\nSOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    def on_mount(self) -> None:\n        self.model = llm.get_model(\"gpt-4o\")\n```\n\n----------------------------------------\n\nTITLE: Centering a Single Widget in Textual using CSS `align` (Python)\nDESCRIPTION: This Python snippet demonstrates how to center a single `Button` widget horizontally and vertically within a Textual `Screen`. It achieves centering by applying the `align: center middle;` CSS property directly to the `Screen` container in the `CSS` class attribute. The `compose` method yields the `Button` as a child of the `Screen`.\nSOURCE: https://github.com/textualize/textual/blob/main/questions/align-center-middle.question.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Button\n\nclass ButtonApp(App):\n\n    CSS = \"\"\"\n    Screen {\n        align: center middle;\n    }\n    \"\"\"\n\n    def compose(self) -> ComposeResult:\n        yield Button(\"PUSH ME!\")\n\nif __name__ == \"__main__\":\n    ButtonApp().run()\n```"
  }
]