[
  {
    "owner": "floris-xlx",
    "repo": "supabase_rs",
    "content": "TITLE: Initializing the Supabase Client in Rust\nDESCRIPTION: Code to initialize a Supabase client by loading environment variables from a .env file and creating a new SupabaseClient instance with the Supabase URL and key.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse supabase_rs::SupabaseClient;\n\nuse dotenv::dotenv;\nuse std::env::var;\n\nasync fn initialize_supabase_client() -> SupabaseClient {\n    dotenv().ok(); // Load the .env file\n\n    let supabase_client: SupabaseClient = SupabaseClient::new(\n        var(\"SUPABASE_URL\").unwrap(),\n        var(\"SUPABASE_KEY\").unwrap()\n        ).unwrap();\n\n        supabase_client\n   }\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row into a Supabase Table\nDESCRIPTION: Example of how to insert a new row into a Supabase database table using the insert method with JSON data.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// i know the imports are self explanatory but it makes it easier for beginners:)\nuse serde_json::json;\nuse supabase_rs::SupabaseClient;\n\n// always pass an initialized SupabaseClient to the method\nlet client = SupabaseClient::new(\n    \"your_supabase_url\", \"your_supabase_key\"\n);\n\nasync fn insert_example(\n   client: SupabaseClient\n) -> Result<(), String> {\n    let insert_result = client\n        .insert(\n            \"test\",\n            json!({\n                \"dog\": \"value_test\"\n            }),\n       ).await;\n```\n\n----------------------------------------\n\nTITLE: Updating a Row in a Supabase Table\nDESCRIPTION: Example of how to update an existing row in a Supabase table by filtering on a specific column and value, then providing the new data as JSON.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse serde_json::json;\nuse supabase_rs::SupabaseClient;\n\nlet client = SupabaseClient::new(\n   \"your_supabase_url\", \"your_supabase_key\"\n);\n\nasync fn update_example(\n  client: SupabaseClient\n) -> Result<(), String> {\n   let update_result = client\n      .update_with_column_name(\n         \"table_name\", // the table name\n         \"column_name\",    // the column name to filter by\n         \"id\", // the value to filter by (can be any value to use as key)\n         json!({\n           \"dog\": \"value_test\"  // the new value\n         }),\n     ).await;\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in Supabase with Rust\nDESCRIPTION: Demonstrates how to delete a row from a Supabase table by its ID. This example initializes a SupabaseClient and performs a delete operation on the 'test' table for a record with ID '1'.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// i know the imports are self explanatory but it makes it easier for beginners:)\nuse supabase_rs::SupabaseClient;\n\n// always pass an initialized SupabaseClient to the method\nlet client = SupabaseClient::new(\n  \"your_supabase_url\", \"your_supabase_key\"\n);\n\nasync fn delete_example(\n client: SupabaseClient\n) -> Result<(), String> {\nlet delete_result = client\n    .delete(\"test\", \"1\")\n    .await;\n```\n\n----------------------------------------\n\nTITLE: Selecting Rows with an Equality Filter in Supabase\nDESCRIPTION: Example of how to select rows from a Supabase table where a column equals a specific value, returning all matching records.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse supabase_rs::SupabaseClient;\n\n// always pass an initialized SupabaseClient to the method\nlet client = SupabaseClient::new(\n   \"your_supabase_url\", \"your_supabase_key\"\n);\n\nasync fn select_scooby(\n   supabase_client: SupabaseClient\n) -> Result<(), String> {\n\nlet data: Result<Vec<Value>, String> = supabase_client\n   .select(\"animals\")\n   .eq(\"dog\", \"scooby\")\n   .execute()\n   .await;\n```\n\n----------------------------------------\n\nTITLE: Inserting a Unique Row into a Supabase Table\nDESCRIPTION: Example of how to insert a new row only if it's unique, without relying on database constraints, using the insert_if_unique method.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse serde_json::json;\nuse supabase_rs::SupabaseClient;\n\n// always pass an initialized SupabaseClient to the method\nlet client = SupabaseClient::new(\n    \"your_supabase_url\", \"your_supabase_key\"\n);\n\nasync fn insert_example(\n   client: SupabaseClient\n) -> Result<(), String> {\n    let insert_result = client\n        .insert_if_unique(\n            \"test\",\n            json!({\n                \"dog\": \"value_test\"\n            }),\n       ).await;\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns with Filtering in Supabase\nDESCRIPTION: Example of how to select specific columns from rows that match a filter condition in a Supabase table, limiting the returned data.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse supabase_rs::SupabaseClient;\n\n// always pass an initialized SupabaseClient to the method\nlet client = SupabaseClient::new(\n   \"your_supabase_url\", \"your_supabase_key\"\n);\n\nasync fn select_scooby(\n   supabase_client: SupabaseClient\n) -> Result<(), String> {\n\nlet data: Result<Vec<Value>, String> = supabase_client\n   .select(\"animals\")\n   .columns([\"dog\"].to_vec())\n   .eq(\"dog\", \"scooby\")\n   .execute()\n   .await;\n```\n\n----------------------------------------\n\nTITLE: Retrieving ID by Column Value in Supabase with Rust\nDESCRIPTION: Shows how to retrieve a row's ID from a Supabase table by matching a specific column value. This example looks up a user ID based on an email address in the 'users' table.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() {\n    // Initialize the Supabase Client\n    let supabase_client = SupabaseClient::new(\"your_supabase_url\", \"your_supabase_key\");\n\n    let email = \"example@email.com\".to_string();\n    let table_name = \"users\".to_string();\n    let column_name = \"email\".to_string();\n    match supabase_client.get_id(email, table_name, column_name).await {\n        Ok(id) => println!(\"Found ID: {}\", id),\n        Err(e) => println!(\"Error: {}\", e),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Rows with Filtering in Supabase\nDESCRIPTION: Example of how to select rows from a Supabase table with a specific filter condition to retrieve only matching records.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse supabase_rs::SupabaseClient;\n\n// always pass an initialized SupabaseClient to the method\nlet client = SupabaseClient::new(\n  \"your_supabase_url\", \"your_supabase_key\"\n);\n\nasync fn select_scooby_with_filter(\n supabase_client: SupabaseClient\n) -> Result<(), String> {\nlet data: Result<Vec<Value>, String> = supabase_client\n    .select(\"animals\")\n    .eq(\"dog\", \"scooby\")\n    .execute()\n    .await;\n```\n\n----------------------------------------\n\nTITLE: Selecting Rows with Count in Supabase\nDESCRIPTION: Example of how to select rows from a Supabase table while also counting the total number of matching records, which is a more expensive operation.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse supabase_rs::SupabaseClient;\n\n// always pass an initialized SupabaseClient to the method\nlet client = SupabaseClient::new(\n  \"your_supabase_url\", \"your_supabase_key\"\n);\n\nasync fn select_scooby_with_count(\n  supabase_client: SupabaseClient\n) -> Result<(), String> {\n let data: Result<Vec<Value>, String> = supabase_client\n   .select(\"animals\")\n   .count()\n   .execute()\n   .await;\n```\n\n----------------------------------------\n\nTITLE: Selecting Rows with Filtering and Count in Supabase\nDESCRIPTION: Example of how to select rows from a Supabase table with a filter condition while also counting the total number of matching records, which is computationally expensive.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse supabase_rs::SupabaseClient;\n\n// always pass an initialized SupabaseClient to the method\nlet client = SupabaseClient::new(\n \"your_supabase_url\", \"your_supabase_key\"\n);\n\nasync fn select_scooby_with_filter_and_count(\nsupabase_client: SupabaseClient\n) -> Result<(), String> {\nlet data: Result<Vec<Value>, String> = supabase_client\n    .select(\"animals\")\n    .eq(\"dog\", \"scooby\")\n    .count()\n    .execute()\n    .await;\n```\n\n----------------------------------------\n\nTITLE: Implementing Google OAuth Login Flow with Supabase in Rust\nDESCRIPTION: Demonstrates the complete OAuth login flow using the Supabase client. It creates the OAuth URL with specific parameters, handles the authentication after redirect, and processes the session data.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/src/tests/methods/EACH_TEST_GOES_HERE.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet result = await supabase.auth.signInWithOAuth({\n    provider: \"google\",\n    options: {\n        redirect_to: \"<YOUR_REDIRECT_URL>\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Google OAuth in Rust\nDESCRIPTION: Sets up a basic Supabase client configuration for Google OAuth authentication. The code initializes the client with project URL and API key, and performs the login flow with Google OAuth.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/src/tests/methods/EACH_TEST_GOES_HERE.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet supabase = supabase_client::Client {\n    url: \"SUPABASE_URL\".to_string(),\n    key: \"SUPABASE_KEY\".to_string(),\n    auth_client: Default::default(),\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Session and Token in Supabase Rust\nDESCRIPTION: Shows how to access the user session and authentication token after successful login. This is essential for authenticated API calls and maintaining user state in the application.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/src/tests/methods/EACH_TEST_GOES_HERE.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet session = result.session;\nlet user = session.user;\nlet access_token = session.access_token;\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase Configuration\nDESCRIPTION: Environment variables used to configure Supabase and disable nightly warning messages. These variables should be set in a .env file.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nSUPABASE_RS_NO_NIGHTLY_MSG=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase-rs in Cargo.toml\nDESCRIPTION: Example of how to add the supabase-rs dependency in a Cargo.toml file, with optional features like storage.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nsupabase-rs = \"...\"\n\n// With the [storage] feature\nsupabase-rs = { version = \"...\", features = [\"storage\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Rust SDK in Cargo.toml\nDESCRIPTION: Shows how to include the supabase_rs crate in a Rust project's Cargo.toml file. Provides examples for both basic usage and with the storage feature enabled.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/README.md#2025-04-20_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nsupabase_rs = \"0.4.2\"\n\n// With the [storage] feature\nsupabase_rs = { version = \"0.4.2\", features = [\"storage\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding Tests Workflow for Supabase Rust Client\nDESCRIPTION: Step-by-step instructions for adding new test methods to the Supabase Rust client testing framework. The process involves creating a new file for the test method, registering it in mod.rs, importing it in base.rs, and running it using the tokio test runtime.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/src/tests/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# adding tests\n\nbase.rs will contain a call to each test in the /methods dir\n\nto add a new test:\n- add a new `METHOD_NAME.rs` in /methods\n- add the `.rs` file to `mod.rs` \n- import the test in `base.rs` \n- run the test in the `methods` mod under a `#[tokio::test]` macro\n- ?? success\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.4.0 in Markdown\nDESCRIPTION: Documents the changes made in version 0.4.0 of supabase_rs, including the addition of a new upsert method and a bug fix for its return type.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.4.0](https://github.com/floris-xlx/supabase_rs/compare/v0.3.5...v0.4.0) (2024-09-26)\n\n\n### Features\n\n* add upsert_without_defined_key method ([e632844](https://github.com/floris-xlx/supabase_rs/commit/e6328443168f0c427d03bb5c57c0a01d778a0c84))\n\n\n### Bug Fixes\n\n* return type of upsert_without_defined_key should be Result<(), String> ([eaee89b](https://github.com/floris-xlx/supabase_rs/commit/eaee89b43740f2b4bf5a8ae693669e9489de5ead))\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.1.0 in Markdown\nDESCRIPTION: Lists the initial features and bug fixes implemented in version 0.1.0 of supabase_rs, including new methods, query improvements, and code refinements.\nSOURCE: https://github.com/floris-xlx/supabase_rs/blob/main/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 (2024-07-10)\n\n\n### Features\n\n* add `bulk_insert` function ([33f30e3](https://github.com/floris-xlx/supabase_rs/commit/33f30e36d3e62e2884912b615b0140c2bf3542df))\n* Add error message for table name not ending with Collection ([27dd186](https://github.com/floris-xlx/supabase_rs/commit/27dd1869d879663cb97f96f309c24f1d4440e1fe))\n* add insert_without_defined_key method ([dc8e0ed](https://github.com/floris-xlx/supabase_rs/commit/dc8e0ed002ddc535e3d1f9bc0d851fb67336d38a))\n* Add support for selecting specific columns in the select query ([309d8dc](https://github.com/floris-xlx/supabase_rs/commit/309d8dcb9c63259f48b801cb9400a84c7c6bfffe))\n* allow users to select column names to reference when updating ([b2de629](https://github.com/floris-xlx/supabase_rs/commit/b2de62944a8f682b6a9d2664bcf2926617420919))\n* implement missing Query methods ([4d0b9ba](https://github.com/floris-xlx/supabase_rs/commit/4d0b9ba13571063a0412d86030ea650fbaea2bf1))\n* Query::build() takes filters and sort ([766592d](https://github.com/floris-xlx/supabase_rs/commit/766592dfd8097441dfdd3711f90d1bf62dfcc888))\n\n\n### Bug Fixes\n\n* abstracted all tests into seperate methods with files ([d2c60b8](https://github.com/floris-xlx/supabase_rs/commit/d2c60b8e24a37c11f3199f9358b813fe357b20f6))\n* derive Default instead of manually implementing it ([77299ad](https://github.com/floris-xlx/supabase_rs/commit/77299ad9816917013c799b1aaac0c958a8149818))\n* ignore or modify some doctests ([e6a2e03](https://github.com/floris-xlx/supabase_rs/commit/e6a2e0361e7e5001b57e57cf6158c3080a0492ab))\n* implement std::fmt::Display for Filter instead of creating to_string() ([0bce354](https://github.com/floris-xlx/supabase_rs/commit/0bce35484e303c51404fe60bf597aeb7a46a295a))\n* use `assert!()` instead of `assert_eq!()` for bool literal comparison ([efd10df](https://github.com/floris-xlx/supabase_rs/commit/efd10df39eb58b88d38f3966dcf8e2112a5ab1a8))\n```"
  }
]