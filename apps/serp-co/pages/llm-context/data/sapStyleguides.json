[
  {
    "owner": "sap",
    "repo": "styleguides",
    "content": "TITLE: Modern ABAP Functional Constructs\nDESCRIPTION: Demonstrates modern functional programming constructs in ABAP compared to older procedural approaches. Shows variable declarations, string operations, loops, and table operations.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_11\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(variable) = 'A'.\nDATA(uppercase) = to_upper( lowercase ).\nindex += 1.         \" >= NW 7.54\nindex = index + 1.  \" < NW 7.54\nDATA(object) = NEW /clean/my_class( ).\nresult = VALUE #( FOR row IN input ( row-text ) ).\nDATA(line) = value_pairs[ name = 'A' ].\nDATA(line) = VALUE #( value_pairs[ name = 'A' ] OPTIONAL ).\nDATA(exists) = xsdbool( line_exists( value_pairs[ name = 'A' ] ) ).\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Implementation in ABAP Constructor\nDESCRIPTION: Shows proper dependency injection through constructor parameters rather than setter methods. This ensures dependencies are properly initialized and cannot be changed after object creation.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_145\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS constructor\n  IMPORTING\n    customizing_reader TYPE REF TO if_fra_cust_obj_model_reader.\n\nMETHOD constructor.\n  me->customizing_reader = customizing_reader.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: ABAP Descriptive Naming Examples\nDESCRIPTION: Demonstrates good practices for naming constants, data tables, methods and classes in ABAP using descriptive names that convey meaning.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS max_wait_time_in_seconds TYPE i ...\nDATA customizing_entries TYPE STANDARD TABLE ...\nMETHODS read_user_preferences ...\nCLASS /clean/user_preference_reader ...\n```\n\n----------------------------------------\n\nTITLE: Modern vs Obsolete SQL Host Variables\nDESCRIPTION: Compares modern @-escaped host variables with obsolete unescaped form in ABAP SQL statements. The modern syntax provides better clarity between program variables and database columns.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_12\n\nLANGUAGE: ABAP\nCODE:\n```\nSELECT *\n  FROM spfli\n  WHERE carrid = @carrid AND\n        connid = @connid\n  INTO TABLE @itab.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nSELECT *\n  FROM spfli\n  WHERE carrid = carrid AND\n        connid = connid\n  INTO TABLE itab.\n```\n\n----------------------------------------\n\nTITLE: Using Class-Based Exceptions in ABAP\nDESCRIPTION: Shows the proper way to use modern class-based exceptions in ABAP instead of outdated non-class-based exceptions.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_112\n\nLANGUAGE: ABAP\nCODE:\n```\nTRY.\n    get_component_types( ).\n  CATCH cx_has_deep_components_error.\nENDTRY.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nget_component_types(\n  EXCEPTIONS\n    has_deep_components = 1\n    OTHERS              = 2 ).\n```\n\n----------------------------------------\n\nTITLE: Using ABAP Test Double Framework\nDESCRIPTION: Demonstrates the usage of ABAP's test double framework for creating mock objects. Shows how to configure return values and verify method calls.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_146\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(customizing_reader) = CAST /clean/customizing_reader( cl_abap_testdouble=>create( '/clean/default_custom_reader' ) ).\ncl_abap_testdouble=>configure_call( customizing_reader )->returning( sub_claim_customizing ).\ncustomizing_reader->read( 'SOME_ID' ).\n```\n\n----------------------------------------\n\nTITLE: Using Simple Methods Instead of Regular Expressions in ABAP\nDESCRIPTION: Demonstrates how to use built-in methods instead of regular expressions for simple string operations. This approach is often more readable and efficient.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_56\n\nLANGUAGE: ABAP\nCODE:\n```\nIF input IS NOT INITIAL.\n\" IF matches( val = input  regex = '.+' ).\n\nWHILE contains( val = input  sub = 'abc' ).\n\" WHILE contains( val = input  regex = 'abc' ).\n```\n\n----------------------------------------\n\nTITLE: Efficient Table Reading with Exception Handling in ABAP\nDESCRIPTION: Demonstrates the recommended pattern for reading from tables when a row is expected to exist. Uses exception handling to handle missing records instead of performing unnecessary checks.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_22\n\nLANGUAGE: ABAP\nCODE:\n```\nTRY.\n    DATA(row) = my_table[ key = input ].\n  CATCH cx_sy_itab_line_not_found.\n    RAISE EXCEPTION NEW /clean/my_data_not_found( ).\nENDTRY.\n```\n\n----------------------------------------\n\nTITLE: Using NEW Operator for Object Creation in ABAP\nDESCRIPTION: Demonstrates various ways to use the NEW operator for cleaner object instantiation compared to CREATE OBJECT. This approach is more concise and modern.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_65\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA object TYPE REF TO /clean/some_number_range.\nobject = NEW #( '/CLEAN/CXTGEN' )\n...\nDATA(object) = NEW /clean/some_number_range( '/CLEAN/CXTGEN' ).\n...\nDATA(object) = CAST /clean/number_range( NEW /clean/some_number_range( '/CLEAN/CXTGEN' ) ).\n```\n\n----------------------------------------\n\nTITLE: Table Filtering in ABAP using FILTER\nDESCRIPTION: Shows how to filter tables using the modern FILTER operator compared to traditional loop-based filtering approach.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_8\n\nLANGUAGE: ABAP\nCODE:\n```\nbank_accounts = FILTER #( accounts\n                          WHERE account_type = 'B' ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA bank_account TYPE bank_account.\nLOOP AT accounts INTO bank_account WHERE account_type = 'B'.\n  INSERT bank_account INTO TABLE bank_accounts.\nENDLOOP.\n```\n\n----------------------------------------\n\nTITLE: Object Construction in ABAP using NEW Operator\nDESCRIPTION: Shows modern object construction using NEW operator compared to legacy CREATE OBJECT syntax. Includes examples for both direct instantiation and casting.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(account) = NEW cl_account( ).\n\nDATA(dref) = NEW struct_type( component_1 = 10\n                              component_2 = 'a' ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(account) = CAST if_account( NEW cl_account( ) ).\n\nDATA data_structure TYPE REF TO struct_type.\nCREATE DATA data_structure.\ndata_reference->component_1 = 10.\ndata_reference->component_2 = 'a'.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA account TYPE REF TO cl_account.\nCREATE OBJECT account.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA account TYPE REF TO if_account.\nCREATE OBJECT account TYPE cl_account.\n```\n\n----------------------------------------\n\nTITLE: Decomposing Complex Conditions in ABAP\nDESCRIPTION: Shows how to decompose complex conditions into named variables, making the code more readable and the logic clearer.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_46\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(example_provided) = xsdbool( example_a IS NOT INITIAL OR\n                                  example_b IS NOT INITIAL ).\n\nDATA(one_example_fits) = xsdbool( applies( example_a ) = abap_true OR\n                                  applies( example_b ) = abap_true OR\n                                  fits( example_b ) = abap_true ).\n\nIF example_provided = abap_true AND\n   one_example_fits = abap_true.\n```\n\n----------------------------------------\n\nTITLE: Expressing Intent Through Code Structure in ABAP\nDESCRIPTION: This example demonstrates how to express intent through well-structured and named methods rather than relying on comments. It breaks down a date correction algorithm into clearly named methods that explain their purpose.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD correct_day_to_last_in_month.\n  WHILE is_invalid( date ).\n    reduce_day_by_one( CHANGING date = date ).\n  ENDWHILE.\nENDMETHOD.\n\nMETHOD is_invalid.\n  DATA zero_if_invalid TYPE i.\n  zero_if_invalid = date.\n  result = xsdbool( zero_if_invalid = 0 ).\nENDMETHOD.\n\nMETHOD reduce_day_by_one.\n  date+6(2) = date+6(2) - 1.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic in ABAP\nDESCRIPTION: Demonstrates modern conditional expressions using COND and SWITCH operators for cleaner control flow.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(value) = COND #( WHEN status = open THEN 1\n                      WHEN status = blocked THEN 3\n                      ELSE 7 ).\n\nDATA(status) = SWITCH #( scrum_status\n    WHEN scrum_status_open THEN status_waiting\n    WHEN scrum_status_in_process THEN status_busy\n    WHEN scrum_status_blocked THEN status_alarm\n    WHEN scrum_status_done THEN status_ok ).\n```\n\n----------------------------------------\n\nTITLE: ABAP Enum Implementation\nDESCRIPTION: Demonstrates the preferred way to implement enumerations using ABAP's native ENUM type compared to constant interfaces.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_14\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/message_severity DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    TYPES: BEGIN OF ENUM type,\n             warning,\n             error,\n           END OF ENUM type.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: LOCAL FRIENDS Usage for Test Access in ABAP\nDESCRIPTION: Shows how to use LOCAL FRIENDS to access dependency-inverting constructors in test classes while maintaining encapsulation in production code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_147\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/unit_tests DEFINITION.\n  PRIVATE SECTION.\n    DATA cut TYPE REF TO /clean/interface_under_test.\n    METHODS setup.\nENDCLASS.\n\nCLASS /clean/class_under_test DEFINITION LOCAL FRIENDS unit_tests.\n\nCLASS unit_tests IMPLEMENTATION.\n  METHOD setup.\n    DATA(mock) = cl_abap_testdouble=>create( '/clean/some_mock' ).\n    cut = NEW /clean/class_under_test( mock ).\n  ENDMETHOD.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Functional Method Call Style in ABAP\nDESCRIPTION: Demonstrates preferred functional method call style over procedural style for better readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_75\n\nLANGUAGE: ABAP\nCODE:\n```\nmodify->update( node           = /clean/my_bo_c=>node-item\n                key            = item->key\n                data           = item\n                changed_fields = changed_fields ).\n```\n\n----------------------------------------\n\nTITLE: Using Exceptions Instead of Return Codes in ABAP\nDESCRIPTION: Shows how to use exceptions instead of return codes for error handling, which keeps method signatures clean and provides more detailed error information.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_109\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD try_this_and_that.\n  RAISE EXCEPTION NEW cx_failed( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Initializing Class Under Test with Minimal Mocks\nDESCRIPTION: Demonstrates how to properly initialize a test class with only necessary mock objects. Avoids setting up unused test doubles that could distract from the test's purpose.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_148\n\nLANGUAGE: ABAP\nCODE:\n```\ncut = NEW /clean/class_under_test( db_reader = db_reader\n                                   config    = VALUE #( )\n                                   writer    = VALUE #( ) ).\n```\n\n----------------------------------------\n\nTITLE: Using Methods Instead of Section Comments in ABAP\nDESCRIPTION: This example demonstrates structuring code into well-named methods rather than using comment sections to separate functionality, which improves readability and prevents variable scope issues.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_45\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(statement) = build_statement( ).\nDATA(data) = execute_statement( statement ).\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Assertions in ABAP\nDESCRIPTION: Demonstrates how to create custom assertion methods to avoid code duplication and improve readability. This example creates a helper method to check if a table contains an entry with a specific key.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_160\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS assert_contains\n  IMPORTING\n    actual_entries TYPE STANDARD TABLE OF entries_tab\n    expected_key   TYPE key_structure.\n\nMETHOD assert_contains.\n  TRY.\n      actual_entries[ key = expected_key ].\n    CATCH cx_sy_itab_line_not_found.\n      cl_abap_unit_assert=>fail( |Couldn't find the key { expected_key }| ).\n  ENDTRY.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using RETURNING Parameter in ABAP Method\nDESCRIPTION: Demonstrates the clean use of RETURNING parameter for returning a method result. This approach enables concise method calls and method chaining, making the code more readable.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_83\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS square\n  IMPORTING\n    number        TYPE i\n  RETURNING\n    VALUE(result) TYPE i.\n\nDATA(result) = square( 42 ).\n```\n\n----------------------------------------\n\nTITLE: Implementing Small Methods in ABAP\nDESCRIPTION: Demonstrates how to keep methods small and focused on a single task. The example shows a method with 3-5 statements that reads and parses version filters.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_101\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD read_and_parse_version_filters.\n  DATA(active_model_version) = read_random_version_under( model_guid ).\n  DATA(filter_json) = read_model_version_filters( active_model_version-guid ).\n  result = parse_model_version_filters( filter_json ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Complex Condition Handling with CASE\nDESCRIPTION: Shows how to handle multiple alternatives using CASE statement instead of ELSE IF chains for better readability and performance.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_33\n\nLANGUAGE: ABAP\nCODE:\n```\nCASE type.\n  WHEN type-some_type.\n    \" ...\n  WHEN type-some_other_type.\n    \" ...\n  WHEN OTHERS.\n    RAISE EXCEPTION NEW /clean/unknown_type_failure( ).\nENDCASE.\n```\n\n----------------------------------------\n\nTITLE: Using String Templates for Text Assembly in ABAP\nDESCRIPTION: Demonstrates the best practice of using string templates (pipe syntax) to assemble text with variables, which clearly distinguishes between literal and variable content.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_27\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(message) = |Received HTTP code { status_code } with message { text }|.\n```\n\n----------------------------------------\n\nTITLE: Utility Class Implementation in ABAP\nDESCRIPTION: An example of a well-designed utility class that provides stateless string manipulation functions. This is one of the few acceptable use cases for static methods in ABAP.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_60\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/string_utils DEFINITION [...].\n  CLASS-METHODS trim\n   IMPORTING\n     string        TYPE string\n   RETURNING\n     VALUE(result) TYPE string.\nENDCLASS.\n\nMETHOD retrieve.\n  DATA(trimmed_name) = /clean/string_utils=>trim( name ).\n  result = read( trimmed_name ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Enumerations in ABAP\nDESCRIPTION: Demonstrates how to define a native enumeration type using ABAP's ENUM syntax (available since release 7.51). The example creates a message severity enumeration in a dedicated class with warning and error values.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/message_severity DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    TYPES: BEGIN OF ENUM type,\n             warning,\n             error,\n           END OF ENUM type.\nENDCLASS.\n\nCLASS /clean/message_severity IMPLEMENTATION.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Inline Variable Declaration in ABAP\nDESCRIPTION: Demonstrates various ways to use inline variable declaration with DATA and FIELD-SYMBOL operators, combining declaration and initial value assignment.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(text) = `This is a string`.\n\n\" old style\nDATA text TYPE string.\ntext = `This is a string`.\n```\n\n----------------------------------------\n\nTITLE: Handling Regular Cases Without Exceptions in ABAP\nDESCRIPTION: Demonstrates proper usage of return parameters instead of exceptions for regular cases. Shows converting an exception-based method to use a boolean return value.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_111\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS entry_exists_in_db\n  IMPORTING\n    key TYPE char10\n  RAISING\n    cx_not_found_exception.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS entry_exists_in_db\n  IMPORTING\n    key           TYPE char10\n  RETURNING\n    VALUE(result) TYPE abap_bool.\n```\n\n----------------------------------------\n\nTITLE: Using READ TABLE for Single Entry Access in ABAP\nDESCRIPTION: Shows the preferred READ TABLE syntax for accessing a single table entry, which is clearer and more efficient than using LOOP AT with EXIT.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_16\n\nLANGUAGE: ABAP\nCODE:\n```\nREAD TABLE my_table REFERENCE INTO DATA(line) WITH KEY key = 'A'.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exception Super Classes in ABAP\nDESCRIPTION: Demonstrates creating abstract super classes for exceptions to enable catching all application-specific exceptions and adding common functionality.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_113\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS cx_fra_static_check DEFINITION ABSTRACT INHERITING FROM cx_static_check.\nCLASS cx_fra_no_check DEFINITION ABSTRACT INHERITING FROM cx_no_check.\n```\n\n----------------------------------------\n\nTITLE: Split Methods Instead of Using OPTIONAL Parameters in ABAP\nDESCRIPTION: Demonstrates how to split functionality into separate, focused methods rather than using OPTIONAL parameters. This approach avoids confusion about parameter combinations and provides clearer semantic intent.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_78\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS do_one_thing IMPORTING what_i_need TYPE string.\nMETHODS do_another_thing IMPORTING something_else TYPE i.\n```\n\n----------------------------------------\n\nTITLE: Implementing Enumeration Using ABAP Class\nDESCRIPTION: Demonstrates the recommended pattern for implementing enumerations using an abstract final class with constants. This approach allows adding supportive methods and provides a natural place for unit tests.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_16\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/message_severity DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    CONSTANTS:\n      warning TYPE symsgty VALUE 'W',\n      error   TYPE symsgty VALUE 'E'.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Internal Table Operations in ABAP\nDESCRIPTION: Shows modern syntax for table operations including counting lines, checking existence, and accessing elements.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(number_of_lines) = lines( accounts ).\n\nIF line_exists( accounts[ id = 4711 ] ).\n  \"line has been found\nENDIF.\n\nDATA(account) = VALUE #( accounts[ id = '4711' ] OPTIONAL ).\n\nDATA(id_of_account_5) = accounts[ 5 ]-id.\n```\n\n----------------------------------------\n\nTITLE: Descriptive Creation Method Names in ABAP\nDESCRIPTION: Demonstrates good naming patterns for multiple creation methods using descriptive prefixes like new_, create_, and construct_.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_71\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS-METHODS new_describe_by_data IMPORTING p_data TYPE any [...]\nCLASS-METHODS new_describe_by_name IMPORTING p_name TYPE any [...]\nCLASS-METHODS new_describe_by_object_ref IMPORTING p_object_ref TYPE REF TO object [...]\nCLASS-METHODS new_describe_by_data_ref IMPORTING p_data_ref TYPE REF TO data [...]\n```\n\n----------------------------------------\n\nTITLE: Using LOOP AT with WHERE Clause in ABAP\nDESCRIPTION: Demonstrates the preferred approach of using LOOP AT with a WHERE clause to filter table entries, which is clearer and more efficient than nested IF statements.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_19\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT my_table REFERENCE INTO DATA(line) WHERE key = 'A'.\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Variables with ABAP_BOOL in ABAP\nDESCRIPTION: Shows the recommended practice of using the ABAP_BOOL type for Boolean variables instead of generic types like CHAR1.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_32\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA has_entries TYPE abap_bool.\n```\n\n----------------------------------------\n\nTITLE: Using Single Parameter Type in ABAP Method\nDESCRIPTION: Demonstrates a clean method with only one type of output parameter (RETURNING), which indicates the method does one thing clearly. The method also uses proper exception handling instead of error flags.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_87\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS copy_class\n  IMPORTING\n    old_name      TYPE seoclsname\n    new name      TYPE secolsname\n  RETURNING\n    VALUE(result) TYPE copy_result\n  RAISING\n    /clean/class_copy_failure.\n```\n\n----------------------------------------\n\nTITLE: Exception Wrapping - Good Practice\nDESCRIPTION: Shows how to properly wrap foreign exceptions to maintain decoupling according to the Law of Demeter.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_118\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS generate RAISING cx_generation_failure.\n\nMETHOD generate.\n  TRY.\n      generator->generate( ).\n    CATCH cx_amdp_generation_failure INTO DATA(exception).\n      RAISE EXCEPTION NEW cx_generation_failure( previous = exception ).\n  ENDTRY.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Exception Subclasses for Error Distinction in ABAP\nDESCRIPTION: Shows how to use exception subclasses and error codes to allow callers to distinguish between different error situations while maintaining a single exception type.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_114\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS cx_bad_generation_variable DEFINITION INHERITING FROM cx_generation_error.\nCLASS cx_bad_code_composer_template DEFINITION INHERITING FROM cx_generation_error.\n\nMETHODS generate RAISING cx_generation_error.\n\nTRY.\n    generator->generate( ).\n  CATCH cx_bad_generation_variable.\n    log_failure( ).\n  CATCH cx_bad_code_composer_template INTO DATA(bad_template_exception).\n    show_error_to_user( bad_template_exception ).\n  CATCH cx_generation_error INTO DATA(other_exception).\n    RAISE EXCEPTION NEW cx_application_error( previous =  other_exception ).\nENDTRY.\n```\n\n----------------------------------------\n\nTITLE: Using CASE Statement for Multiple Conditions in ABAP\nDESCRIPTION: A recommended pattern for handling multiple mutually exclusive conditions using CASE statements instead of IF-ELSEIF chains. This approach is more readable and potentially more efficient.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_51\n\nLANGUAGE: ABAP\nCODE:\n```\nCASE type.\n  WHEN type-some_type.\n    \" ...\n  WHEN type-some_other_type.\n    \" ...\n  WHEN OTHERS.\n    RAISE EXCEPTION NEW /clean/unknown_type_failure( ).\nENDCASE.\n```\n\n----------------------------------------\n\nTITLE: RETURNING Large Tables in ABAP Methods\nDESCRIPTION: Demonstrates how to return large tables using RETURNING parameter, which is generally acceptable for performance in modern ABAP. This approach is cleaner and more concise than alternatives.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_85\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS get_large_table\n  RETURNING\n    VALUE(result) TYPE /clean/some_table_type.\n\nMETHOD get_large_table.\n  result = large_table.\nENDMETHOD.\n\nDATA(my_table) = get_large_table( ).\n```\n\n----------------------------------------\n\nTITLE: Using String Templates for Text Concatenation in ABAP\nDESCRIPTION: Demonstrates the preferred approach of using string templates with pipe characters for text concatenation, especially when embedding multiple variables in text.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_25\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(message) = |Received HTTP code { status_code } with message { text }|.\n```\n\n----------------------------------------\n\nTITLE: Splitting Methods by Call Patterns in ABAP\nDESCRIPTION: Shows how to split a method into multiple methods based on different usage patterns instead of using optional parameters. Each method has a clear purpose and parameter structure.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_82\n\nLANGUAGE: ABAP\nCODE:\n```\nTYPES:\n  BEGIN OF check_result,\n    result      TYPE result_type,\n    failed_keys TYPE /bobf/t_frw_key,\n    messages    TYPE /bobf/t_frw_message,\n  END OF check_result.\n\nMETHODS check\n  IMPORTING\n    business_partners TYPE business_partners\n  RETURNING\n    VALUE(result)     TYPE result_type.\n\nMETHODS check_and_report\n  IMPORTING\n    business_partners TYPE business_partners\n  RETURNING\n    VALUE(result)     TYPE check_result.\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern: Using Single Blank Lines in ABAP\nDESCRIPTION: This example demonstrates proper use of a single blank line to separate logically different statements, providing visual separation without excessive whitespace.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_132\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(result) = do_something( ).\n\nDATA(else) = calculate_this( result ).\n```\n\n----------------------------------------\n\nTITLE: Using Structured RETURNING Parameter in ABAP Method\nDESCRIPTION: Demonstrates how to return multiple logically related values as a single structure. This approach is cleaner than using multiple EXPORTING parameters and enables functional call style.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_80\n\nLANGUAGE: ABAP\nCODE:\n```\nTYPES:\n  BEGIN OF check_result,\n    result      TYPE result_type,\n    failed_keys TYPE /bobf/t_frw_key,\n    messages    TYPE /bobf/t_frw_message,\n  END OF check_result.\n\nMETHODS check_business_partners\n  IMPORTING\n    business_partners TYPE business_partners\n  RETURNING\n    VALUE(result)     TYPE check_result.\n```\n\n----------------------------------------\n\nTITLE: Copying Fields with CORRESPONDING in ABAP\nDESCRIPTION: Demonstrates the modern CORRESPONDING operator and legacy MOVE-CORRESPONDING for copying matching fields between structures. Notes important behavioral differences in field initialization.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\ntarget_structure = CORRESPONDING #( source_structure ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nMOVE-CORRESPONDING source_structure TO target_structure.\n```\n\n----------------------------------------\n\nTITLE: Clean Code Example - Date Correction\nDESCRIPTION: Demonstrates clean code practices with clear method names and logical separation of concerns.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_119\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD correct_day_to_last_in_month.\n  WHILE is_invalid( date ).\n    reduce_day_by_one( CHANGING date = date ).\n  ENDWHILE.\nENDMETHOD.\n\nMETHOD is_invalid.\n  DATA zero_if_invalid TYPE i.\n  zero_if_invalid = date.\n  result = xsdbool( zero_if_invalid = 0 ).\nENDMETHOD.\n\nMETHOD reduce_day_by_one.\n  date+6(2) = date+6(2) - 1.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using XSDBOOL for Boolean Assignment\nDESCRIPTION: Demonstrates efficient boolean value assignment using XSDBOOL function instead of IF-THEN-ELSE blocks.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_32\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(has_entries) = xsdbool( line IS NOT INITIAL ).\n```\n\n----------------------------------------\n\nTITLE: Method Naming in ABAP - Using Verbs\nDESCRIPTION: Examples of using verbs and verb phrases to name methods in ABAP, including Boolean methods with is_ prefix for better readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS withdraw\nMETHODS add_message\nMETHODS read_entries\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection through Constructor in ABAP\nDESCRIPTION: Shows the recommended way to implement dependency injection in ABAP using constructor injection, following the dependency inversion principle.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_79\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS constructor\n  IMPORTING\n    customizing_reader TYPE REF TO if_fra_cust_obj_model_reader.\n\nMETHOD constructor.\n  me->customizing_reader = customizing_reader.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Clear Positive Conditions in ABAP IF Statements\nDESCRIPTION: A recommended approach for writing IF statements with direct condition checking rather than using empty branches. This pattern leads to more readable and concise code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_49\n\nLANGUAGE: ABAP\nCODE:\n```\nIF has_entries = abap_false.\n  \" do some magic\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with FAIL in ABAP\nDESCRIPTION: Demonstrates how to test that a method properly throws an exception when given invalid input. The test fails if no exception is thrown, verifying the error handling behavior.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_157\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD throws_on_empty_input.\n  TRY.\n      \" when\n      cut->do_something( '' ).\n      cl_abap_unit_assert=>fail( ).\n    CATCH /clean/some_exception.\n      \" then\n  ENDTRY.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Implementing Immutable Data Container in ABAP\nDESCRIPTION: Demonstrates how to create an immutable data container using public read-only attributes instead of getter methods. This pattern is appropriate for objects that don't change after construction.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_63\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/some_data_container DEFINITION.\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING\n        a TYPE i\n        b TYPE c\n        c TYPE d.\n    DATA a TYPE i READ-ONLY.\n    DATA b TYPE c READ-ONLY.\n    DATA c TYPE d READ-ONLY.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration in ABAP - Proper Style\nDESCRIPTION: Demonstrates the recommended way to declare variables in ABAP without chaining. This approach makes code more maintainable and easier to refactor.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_16\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA name TYPE seoclsname.\nDATA reader TYPE REF TO reader.\n```\n\n----------------------------------------\n\nTITLE: Splitting Methods Instead of Using Boolean Input Parameters in ABAP\nDESCRIPTION: Demonstrates how to split methods into more specific ones instead of using boolean input parameters in ABAP.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_13\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS update\n  IMPORTING\n    do_save TYPE abap_bool.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nupdate_without_saving( ).\nupdate_and_save( ).\n```\n\n----------------------------------------\n\nTITLE: Optimizing Control Flow with VALUE in ABAP\nDESCRIPTION: Demonstrates a more concise way to implement the same logic as the previous CASE statement using the VALUE operator.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_104\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD decide_what_to_do.\n  result = VALUE #( spare_time_activities[ temperature = temperature ] OPTIONAL ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Forwarding Exceptions in ABAP Test Methods\nDESCRIPTION: Shows how to declare test methods that allow exceptions to propagate instead of catching them. This keeps the test code focused on the happy path and improves readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_158\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS reads_entry FOR TESTING RAISING /clean/some_exception.\n\nMETHOD reads_entry.\n  \"when\n  DATA(entry) = cut->read_something( ).\n  \"then\n  cl_abap_unit_assert=>assert_not_initial( entry ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Asserting Specific Content in ABAP Test Cases\nDESCRIPTION: Demonstrates how to assert the exact content of a table instead of just checking the number of entries. This approach verifies both the quantity and the actual values, making tests more robust.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_153\n\nLANGUAGE: ABAP\nCODE:\n```\nassert_contains_exactly( actual   = table\n                         expected = VALUE string_table( ( `ABC` ) ( `DEF` ) ( `GHI` ) ) ).\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection via Constructor in ABAP\nDESCRIPTION: Shows the recommended approach for dependency injection in ABAP using constructor injection. This pattern allows for effective test mock injection and follows clean code principles.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_24\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS constructor\n  IMPORTING\n    customizing_reader TYPE REF TO if_fra_cust_obj_model_reader.\n\nMETHOD constructor.\n  me->customizing_reader = customizing_reader.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Combined Logical Conditions in ABAP\nDESCRIPTION: A recommended approach for combining logical conditions using AND instead of nesting IF statements. This creates more readable and maintainable code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_54\n\nLANGUAGE: ABAP\nCODE:\n```\nIF <this> AND <that>.\n```\n\n----------------------------------------\n\nTITLE: Using Enumerations Instead of Booleans in ABAP\nDESCRIPTION: Shows how using an enumeration provides more flexibility than a Boolean when representing states that might not be strictly binary in the future.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_30\n\nLANGUAGE: ABAP\nCODE:\n```\narchiving_status = /clean/archivation_status=>archiving_in_process.\n```\n\n----------------------------------------\n\nTITLE: Using Single Output Parameter Type in ABAP Methods\nDESCRIPTION: Demonstrates the best practice of using only one type of output parameter (RETURNING, EXPORTING, or CHANGING) in ABAP methods.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_11\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS copy_class\n  IMPORTING\n    old_name      TYPE seoclsname\n    new name      TYPE secolsname\n  RETURNING\n    VALUE(result) TYPE copy_result\n  RAISING\n    /clean/class_copy_failure.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS copy_class\n  ...\n  RETURNING\n    VALUE(result)      TYPE vseoclass\n  EXPORTING\n    error_occurred     TYPE abap_bool\n  CHANGING\n    correction_request TYPE trkorr\n    package            TYPE devclass.\n```\n\n----------------------------------------\n\nTITLE: Using Meaningful Variable and Constants Names in ABAP\nDESCRIPTION: Examples showing how to create meaningful names for ABAP constants, data objects, methods, and classes that convey content and meaning rather than focusing on technical details.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_de.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS max_wait_time_in_seconds TYPE i ...\nDATA customizing_entries TYPE STANDARD TABLE ...\nMETHODS read_user_preferences ...\nCLASS /clean/user_preference_reader ...\n```\n\n----------------------------------------\n\nTITLE: Exception Handling - Using RAISE EXCEPTION NEW\nDESCRIPTION: Demonstrates the preferred shorter syntax for raising exceptions using RAISE EXCEPTION NEW, available from NetWeaver 7.52 onwards.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_115\n\nLANGUAGE: ABAP\nCODE:\n```\nRAISE EXCEPTION NEW cx_generation_error( previous = exception ).\n```\n\n----------------------------------------\n\nTITLE: Builder Pattern with CHANGING and RETURNING in ABAP\nDESCRIPTION: Demonstrates an acceptable exception to the single output parameter rule in a builder pattern where input is consumed while creating output. The CHANGING parameter is used appropriately here.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_89\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS build_tree\n  CHANGING\n    tokens        TYPE tokens\n  RETURNING\n    VALUE(result) TYPE REF TO tree.\n```\n\n----------------------------------------\n\nTITLE: Implementing Enumerations using the Object Pattern\nDESCRIPTION: Implements enumerations as objects with read-only class attributes, offering more type safety than the constant pattern. Each enumeration value is an instance of the enumeration class.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/message_severity DEFINITION PUBLIC CREATE PRIVATE FINAL.\n\n  PUBLIC SECTION.\n\n    CLASS-DATA warning TYPE REF TO /clean/message_severity READ-ONLY,\n    CLASS-DATA error   TYPE REF TO /clean/message_severity READ-ONLY.\n\n    DATA value TYPE symsgty READ-ONLY.\n\n    CLASS-METHODS class_constructor.\n    METHODS constructor IMPORTING value TYPE symsgty.\n\nENDCLASS.\n\nCLASS /clean/message_severity IMPLEMENTATION.\n\n  METHOD class_constructor.\n    warning = NEW /clean/message_severity( 'W' ).\n    error = NEW /clean/message_severity( 'E' ).\n  ENDMETHOD.\n\n  METHOD constructor.\n    me->value = value.\n  ENDMETHOD.\n\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Using Positive Conditions in ABAP\nDESCRIPTION: Demonstrates the best practice of formulating conditions positively, which improves readability and comprehension.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_39\n\nLANGUAGE: ABAP\nCODE:\n```\nIF has_entries = abap_true.\n```\n\n----------------------------------------\n\nTITLE: Combining Interface and Abstract Class in ABAP\nDESCRIPTION: Shows how to combine interfaces and abstract classes to create a flexible and reusable design pattern.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/InterfacesVsAbstractClasses.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nINTERFACE /clean/blog_post.\n  METHODS publish.\nENDINTERFACE.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/formatted_blog_post DEFINITION PUBLIC ABSTRACT CREATE PROTECTED.\n  PUBLIC SECTION.\n    INTERFACES /clean/blog_post.\nENDCLASS.\n\nCLASS /clean/formatted_blog_post IMPLEMENTATION.\n\n  METHOD /clean/blog_post~publish.\n    \" default implementation\n    \" sub-classes can use it\n    \" or override the method with something else\n  ENDMETHOD.\n  \nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Class Naming in ABAP - Using Nouns\nDESCRIPTION: Examples of using nouns and noun phrases to name classes and interfaces in ABAP. Demonstrates the proper naming convention for clean code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/account\nCLASS /clean/user_preferences\nINTERFACE /clean/customizing_reader\n```\n\n----------------------------------------\n\nTITLE: Following the One Development Object Per Enumeration Guideline\nDESCRIPTION: Demonstrates the recommended approach of using separate classes for different enumerations to improve searchability and adherence to the single responsibility principle.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_14\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/message_severity DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    CONSTANTS:\n      warning TYPE symsgty VALUE 'W',\n      error   TYPE symsgty VALUE 'E'.\nENDCLASS.\n\nCLASS /clean/document_type DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    CONSTANTS:\n      sales_order    TYPE char02 VALUE '01',\n      purchase_order TYPE char02 VALUE '02'.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Using Functional Language Constructs in ABAP\nDESCRIPTION: Shows examples of using modern, functional language constructs in ABAP instead of procedural ones. Includes variable assignment, string manipulation, and table operations.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_ja.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(variable) = 'A'.\n\" MOVE 'A' TO variable.\n\nDATA(uppercase) = to_upper( lowercase ).\n\" TRANSLATE lowercase TO UPPER CASE.\n\nindex += 1.         \" >= NW 7.54\nindex = index + 1.  \" < NW 7.54\n\" ADD 1 TO index.\n\nDATA(object) = NEW /clean/my_class( ).\n\" CREATE OBJECT object TYPE /dirty/my_class.\n\nresult = VALUE #( FOR row IN input ( row-text ) ).\n\" LOOP AT input INTO DATA(row).\n\"  INSERT row-text INTO TABLE result.\n\" ENDLOOP.\n\nDATA(line) = value_pairs[ name = 'A' ]. \" entry must exist\nDATA(line) = VALUE #( value_pairs[ name = 'A' ] OPTIONAL ). \" entry can be missing\n\" READ TABLE value_pairs INTO DATA(line) WITH KEY name = 'A'.\n\nDATA(exists) = xsdbool( line_exists( value_pairs[ name = 'A' ] ) ).\nIF line_exists( value_pairs[ name = 'A' ] ).\n\" READ TABLE value_pairs TRANSPORTING NO FIELDS WITH KEY name = 'A'.\n\" DATA(exists) = xsdbool( sy-subrc = 0 ).\n```\n\n----------------------------------------\n\nTITLE: Using RAISE EXCEPTION NEW Instead of RAISE EXCEPTION TYPE in ABAP\nDESCRIPTION: This example demonstrates the preferred syntax for raising exceptions using NEW constructor instead of TYPE keyword, which is more concise and available from NetWeaver 7.52.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_36\n\nLANGUAGE: ABAP\nCODE:\n```\nRAISE EXCEPTION NEW cx_generation_error( previous = exception ).\n```\n\n----------------------------------------\n\nTITLE: Stateless XML Converter Class in ABAP\nDESCRIPTION: An example of a stateless class design where methods receive input and produce output without side effects. This approach provides consistent results regardless of when methods are called.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_61\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/xml_converter DEFINITION PUBLIC FINAL CREATE PUBLIC.\n  PUBLIC SECTION.\n    METHODS convert\n      IMPORTING\n        file_content  TYPE xstring\n      RETURNING\n        VALUE(result) TYPE /clean/some_inbound_message.\nENDCLASS.\n\nCLASS /clean/xml_converter IMPLEMENTATION.\n  METHOD convert.\n    cl_proxy_xml_transform=>xml_xstring_to_abap(\n      EXPORTING\n        xml       = file_content\n        ext_xml   = abap_true\n        svar_name = 'ROOT_NODE'\n      IMPORTING\n        abap_data = result ).\n   ENDMETHOD.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: ABAP Method Abstraction Levels\nDESCRIPTION: Demonstrates proper abstraction levels within method implementation.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_100\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD create_and_publish.\n  post = create_post( user_input ).\n  post->publish( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: ABAP Method Design - Happy Path vs Error Handling\nDESCRIPTION: Examples of separating happy path logic from error handling in method implementation.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_99\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD append_xs.\n  validate( input ).\n  DATA(remainder) = input.\n  WHILE remainder > 0.\n    result = result && `X`.\n    remainder = remainder - 1.\n  ENDWHILE.\nENDMETHOD.\n\nMETHOD validate.\n  IF input = 0.\n    RAISE EXCEPTION /dirty/sorry_cant_do( ).\n  ELSEIF input < 0.\n    RAISE EXCEPTION cx_sy_illegal_argument( ).\n  ENDIF.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Implementing ABAP Abstract Class\nDESCRIPTION: Demonstrates how to create a concrete class that inherits from an abstract class, including constructor and method implementation.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/InterfacesVsAbstractClasses.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/markdown_blog_post DEFINITION\n    PUBLIC CREATE PUBLIC\n    INHERITING FROM /clean/blog_post.\n  PUBLIC SECTION.\n    METHODS constructor.\n    METHODS publish REDEFINITION.\nENDCLASS.\n\nCLASS /clean/markdown_blog_post IMPLEMENTATION.\n\n  METHOD constructor.\n    super->constructor( ).\n  ENDMETHOD.\n  \n  METHOD publish.\n  ENDMETHOD.\n  \nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Data Structure Construction in ABAP using VALUE\nDESCRIPTION: Demonstrates modern structure and table construction using VALUE operator compared to traditional field-by-field assignment methods.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(account) = VALUE account_structure( id = 5\n                                         name = 'SAP' ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA account TYPE account_structure.\naccount-id = 5.\naccount-name = 'SAP'.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(accounts) = VALUE accounts_table( ( id = 5  name = 'SAP' )\n                                       ( id = 6  name = 'ABCDE' ) ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA accounts TYPE accounts_table.\nDATA account TYPE account_structure.\naccount-id = 5.\naccount-name = 'SAP'.\nINSERT account INTO TABLE accounts.\naccount-id = 6.\naccount-name = 'ABCDE'.\nINSERT ACCOUNT INTO TABLE accounts.\n```\n\n----------------------------------------\n\nTITLE: Using LINE_EXISTS for Table Entry Checking in ABAP\nDESCRIPTION: Shows the concise and clear LINE_EXISTS syntax for checking if a table entry exists, which is preferred over using READ TABLE with sy-subrc checks.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_13\n\nLANGUAGE: ABAP\nCODE:\n```\nIF line_exists( my_table[ key = 'A' ] ).\n```\n\n----------------------------------------\n\nTITLE: Using LINE_EXISTS to check record existence in ABAP\nDESCRIPTION: Shows the preferred method to check if a record exists in a table using LINE_EXISTS, which is clearer and more concise than alternatives.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\nIF line_exists( my_table[ key = 'A' ] ).\n```\n\n----------------------------------------\n\nTITLE: Using RAISE EXCEPTION TYPE with MESSAGE in ABAP\nDESCRIPTION: This example shows how to raise an exception with TYPE keyword when specifying a MESSAGE parameter, which can be useful for providing detailed error information.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_38\n\nLANGUAGE: ABAP\nCODE:\n```\nRAISE EXCEPTION TYPE cx_generation_error\n  EXPORTING\n    previous = exception\n  MESSAGE e136(messages).\n```\n\n----------------------------------------\n\nTITLE: Objectifying Input in ABAP Builder Pattern\nDESCRIPTION: Shows an improved version of the builder pattern by objectifying the input, which eliminates the need for a CHANGING parameter and makes the method clearer and more functional in style.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_90\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS build_tree\n  IMPORTING\n    tokens        TYPE REF TO token_stack\n  RETURNING\n    VALUE(result) TYPE REF TO tree.\n```\n\n----------------------------------------\n\nTITLE: Proper Exception Handling to Prevent External Code Dependencies in ABAP\nDESCRIPTION: This example demonstrates how to handle exceptions from external components by wrapping them in your own exception types, which helps maintain decoupling and enforce the Law of Demeter.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_39\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS generate RAISING cx_generation_failure.\n\nMETHOD generate.\n  TRY.\n      generator->generate( ).\n    CATCH cx_amdp_generation_failure INTO DATA(exception).\n      RAISE EXCEPTION NEW cx_generation_failure( previous = exception ).\n  ENDTRY.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using REF TO in Loop Statements in ABAP\nDESCRIPTION: Demonstrates the preferred approach of using REF TO instead of FIELD-SYMBOL for accessing internal table entries in loops, which is more consistent with object-oriented ABAP.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT components REFERENCE INTO DATA(component).\n```\n\n----------------------------------------\n\nTITLE: Wrapping External Exceptions in ABAP\nDESCRIPTION: This code demonstrates the recommended pattern for wrapping external exceptions in custom exceptions to maintain independence from external code. It shows a method declaration and implementation that catches a specific exception type and wraps it in a custom exception.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS generate RAISING cx_generation_failure.\n\nMETHOD generate.\n  TRY.\n      generator->generate( ).\n    CATCH cx_amdp_generation_failure INTO DATA(exception).\n      RAISE EXCEPTION NEW cx_generation_failure( previous = exception ).\n  ENDTRY.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Declaring and Raising Exceptions in ABAP\nDESCRIPTION: Demonstrates how to declare a method that raises an exception and how to raise that exception within the method. This is the ideal way to handle exceptions at the lower level.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Exceptions.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS lower_method\n  RAISING\n    /clean/flexible_exception.\n\nMETHOD lower_method.\n  RAISE EXCEPTION NEW /clean/flexible_exception( ).\nENDMETHOD:\n```\n\n----------------------------------------\n\nTITLE: Table declaration with explicit key components in ABAP\nDESCRIPTION: Demonstrates the proper way to declare an internal table with explicitly specified key components for better clarity and performance.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA itab2 TYPE STANDARD TABLE OF row_type WITH NON-UNIQUE KEY comp1 comp2.\n```\n\n----------------------------------------\n\nTITLE: Catching Exceptions in ABAP Upper Methods\nDESCRIPTION: Illustrates how to catch and handle exceptions in upper-level methods. This allows for centralized exception handling.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Exceptions.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS upper_method.\n\nMETHOD upper_method.\n  TRY.\n      middle_method( ).\n    CATCH /clean/flexible_exception.\n      \" ...\n  ENDTRY.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Better Practice: Extracting Messages to Methods in ABAP\nDESCRIPTION: This code shows a better approach by extracting the message to a dedicated method with a descriptive name, making the code more self-documenting than using comments.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_124\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD create_alert_not_found_message.\n  MESSAGE e003 INTO dummy.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Proper Message Handling in ABAP\nDESCRIPTION: Demonstrates the recommended way to handle messages in ABAP, making them easy to find through where-used search in transaction SE91.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_108\n\nLANGUAGE: ABAP\nCODE:\n```\nMESSAGE e001(ad) INTO DATA(message).\n```\n\n----------------------------------------\n\nTITLE: Using Descriptive Names Instead of Comments in ABAP\nDESCRIPTION: This example shows how to use descriptive variable names that self-document code, eliminating the need for explanatory comments. The variable name clearly communicates its purpose.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(input_has_entries) = has_entries( input ).\n```\n\n----------------------------------------\n\nTITLE: Handling Return Codes from Legacy ABAP Functions\nDESCRIPTION: Demonstrates how to properly handle return codes when calling legacy functions, ensuring that failures are not ignored and are converted to exceptions.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_110\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA:\n  current_date TYPE string,\n  response     TYPE bapiret2.\n\nCALL FUNCTION 'BAPI_GET_CURRENT_DATE'\n  IMPORTING\n    current_date = current_date\n  CHANGING\n    response     = response.\n\nIF response-type = 'E'.\n  RAISE EXCEPTION NEW /clean/some_error( ).\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Implementing Early Validation in ABAP Methods\nDESCRIPTION: Shows how to implement the 'fail fast' principle by validating input early in the method and raising an exception if invalid.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_105\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n  IF input IS INITIAL.\n    RAISE EXCEPTION cx_sy_illegal_argument( ).\n  ENDIF.\n  DATA(massive_object) = build_expensive_object_from( input ).\n  result = massive_object->do_some_fancy_calculation( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using ABAP_TRUE and ABAP_FALSE for Boolean Comparisons in ABAP\nDESCRIPTION: Demonstrates the best practice of using ABAP_TRUE and ABAP_FALSE constants for Boolean comparisons, which improves readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_33\n\nLANGUAGE: ABAP\nCODE:\n```\nhas_entries = abap_true.\nIF has_entries = abap_false.\n```\n\n----------------------------------------\n\nTITLE: ABAP Help Class Implementation with Inheritance\nDESCRIPTION: Demonstrates how to structure help methods in a separate abstract class that can be inherited by test classes. Includes method definition and implementation structure.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_143\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS lth_unit_tests DEFINITION ABSTRACT.\n\n  PROTECTED SECTION.\n    CLASS-METHODS assert_activity_entity\n      IMPORTING\n        actual_activity_entity TYPE REF TO zcl_activity_entity\n        expected_activity_entity TYPE REF TO zcl_activity_entity.\n    ...\nENDCLASS.\n\nCLASS lth_unit_tests IMPLEMENTATION.\n\n  METHOD assert_activity_entity.\n    ...\n  ENDMETHOD.\n\nENDCLASS.\n\nCLASS ltc_unit_tests DEFINITION INHERITING FROM lth_unit_tests FINAL FOR TESTING\n  DURATION SHORT\n  RISK LEVEL HARMLESS.\n  ...\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Method for XML to Internal Table Mapping in ABAP\nDESCRIPTION: Demonstrates how to extract complex method calls into helper methods that default uninteresting parameters. This improves test readability by hiding irrelevant details.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_144\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS map_xml_to_itab\n  IMPORTING\n    xml_string TYPE string\n    config     TYPE /clean/xml2itab_config DEFAULT default_config\n    format     TYPE /clean/xml2itab_format DEFAULT default_format.\n\nMETHOD map_xml_to_itab.\n  result = cut->map_xml_to_itab( xml_string = xml_string\n                                 config     = config\n                                 format     = format ).\nENDMETHOD.\n\nDATA(itab) = map_xml_to_itab( '<xml></xml>' ).\n```\n\n----------------------------------------\n\nTITLE: ABAP Split Method Pattern\nDESCRIPTION: Demonstrates the preferred approach of splitting methods instead of using boolean flags.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_94\n\nLANGUAGE: ABAP\nCODE:\n```\nupdate_without_saving( ).\nupdate_and_save( ).\n```\n\n----------------------------------------\n\nTITLE: Defining String Literals with Backticks in ABAP\nDESCRIPTION: Shows the recommended way to define string literals using backticks, which clearly indicates the STRING type without unnecessary type conversions.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_24\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS some_constant TYPE string VALUE `ABC`.\nDATA(some_string) = `ABC`.  \" --> TYPE string\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables Close to Usage in ABAP\nDESCRIPTION: Demonstrates the preferred approach of declaring variables inline close to where they are used in a method, rather than in a separate DATA section at the beginning.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n  DATA(name) = 'something'.\n  DATA(reader) = /clean/reader=>get_instance_for( name ).\n  result = reader->read_it( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages to Dedicated Methods in ABAP\nDESCRIPTION: This example demonstrates a better approach for handling messages by extracting them into well-named methods that make the purpose clear without redundant comments.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_57\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD create_alert_not_found_message.\n  MESSAGE e003 INTO dummy.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Constructor for CREATE PRIVATE Global Class in ABAP\nDESCRIPTION: Shows the recommended pattern for constructor visibility in a CREATE PRIVATE global class. Despite the seeming contradiction, the constructor should be in the public section.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_68\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/some_api DEFINITION PUBLIC FINAL CREATE PRIVATE.\n  PUBLIC SECTION.\n    METHODS constructor.\n```\n\n----------------------------------------\n\nTITLE: Efficient Exception Handling for Table Access in ABAP\nDESCRIPTION: Shows the efficient pattern of using a try-catch block for table access when expecting a single entry, which avoids redundant table reads.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_20\n\nLANGUAGE: ABAP\nCODE:\n```\nTRY.\n    DATA(row) = my_table[ key = input ].\n  CATCH cx_sy_itab_line_not_found.\n    RAISE EXCEPTION NEW /clean/my_data_not_found( ).\nTRY.\n```\n\n----------------------------------------\n\nTITLE: Asserting Quality Attributes in ABAP Tests\nDESCRIPTION: Shows how to assert a quality attribute (line length) of the result rather than specific content. This approach is more resilient to changes in implementation details while still ensuring important constraints are met.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_155\n\nLANGUAGE: ABAP\nCODE:\n```\nassert_all_lines_shorter_than( actual_lines        = table\n                               expected_max_length = 80 ).\n```\n\n----------------------------------------\n\nTITLE: Using ABAP_BOOL Data Type\nDESCRIPTION: Demonstrates proper boolean type declaration using ABAP_BOOL instead of char1 or other boolean types to avoid ambiguity and unexpected behavior.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_30\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA has_entries TYPE abap_bool.\n```\n\n----------------------------------------\n\nTITLE: Using Backticks for String Literals in ABAP\nDESCRIPTION: Shows the preferred approach of using backticks for string literals, which clearly indicates the TYPE string intention and avoids confusion.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_22\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS some_constant TYPE string VALUE `ABC`.\nDATA(some_string) = `ABC`.  \" --> TYPE string\n```\n\n----------------------------------------\n\nTITLE: Multiple Static Creation Methods in ABAP\nDESCRIPTION: Demonstrates using multiple well-named static creation methods instead of a single constructor with optional parameters. This approach provides better semantics and clarity.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_69\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS-METHODS describe_by_data IMPORTING data TYPE any [...]\nCLASS-METHODS describe_by_name IMPORTING name TYPE any [...]\nCLASS-METHODS describe_by_object_ref IMPORTING object_ref TYPE REF TO object [...]\nCLASS-METHODS describe_by_data_ref IMPORTING data_ref TYPE REF TO data [...]\n```\n\n----------------------------------------\n\nTITLE: Extracting Complex Conditions in ABAP\nDESCRIPTION: A pattern demonstrating how to extract complex conditions into dedicated methods for improved readability and maintainability. The example shows a condition extraction with nested boolean operations.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_48\n\nLANGUAGE: ABAP\nCODE:\n```\nIF is_provided( example ).\n\nMETHOD is_provided.\n  DATA(is_filled) = xsdbool( example IS NOT INITIAL ).\n  DATA(is_working) = xsdbool( applies( example ) = abap_true OR\n                              fits( example ) = abap_true ).\n  result = xsdbool( is_filled = abap_true AND\n                    is_working = abap_true ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration Patterns\nDESCRIPTION: Shows preferred inline variable declaration patterns versus traditional up-front declarations in ABAP methods.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_15\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n  DATA(name) = 'something'.\n  DATA(reader) = /clean/reader=>get_instance_for( name ).\n  result = reader->read_it( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Constant Pattern Enumerations\nDESCRIPTION: Demonstrates accessing enumeration values implemented with the constant pattern through the class name.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nIF log_contains( /clean/message_severity=>warning ).\n```\n\n----------------------------------------\n\nTITLE: Implementing a Method Without Prefixes in ABAP\nDESCRIPTION: Demonstrates the preferred clean approach to method implementation without using Hungarian notation or prefixes for parameter and result variables.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/AvoidEncodings.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD add_two_numbers.\n  result = a + b.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Enumerations with Base Type for Compatibility\nDESCRIPTION: Demonstrates how to create an enumeration with specific base type values for backward compatibility with legacy code using the BASE TYPE addition.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /compatbl/message_severity DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    TYPES: BEGIN OF ENUM type BASE TYPE symsgty,\n            info      VALUE 'I',\n            exit      VALUE 'X',\n            undefined VALUE IS INITIAL,\n          END OF ENUM type.\n```\n\n----------------------------------------\n\nTITLE: RFC Function Implementation\nDESCRIPTION: Example of implementing a clean RFC function that delegates to a proper object-oriented implementation.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_10\n\nLANGUAGE: ABAP\nCODE:\n```\nFUNCTION check_business_partner [...].\n  DATA(validator) = NEW /clean/biz_partner_validator( ).\n  result = validator->validate( business_partners ).\nENDFUNCTION.\n```\n\n----------------------------------------\n\nTITLE: Using backtick for string literals in ABAP\nDESCRIPTION: Demonstrates the preferred way to define string literals using backticks, which makes the type clear and avoids unnecessary type conversions.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_16\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS some_constant TYPE string VALUE `ABC`.\nDATA(some_string) = `ABC`.  \" --> TYPE string\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern: One Statement Per Line in ABAP\nDESCRIPTION: This example demonstrates the recommended practice of using one statement per line, enhancing code readability and making debugging easier.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_128\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA do_this TYPE i.\ndo_this = input + 3.\n```\n\n----------------------------------------\n\nTITLE: Using Object-Oriented Approach in ABAP Function\nDESCRIPTION: Demonstrates how to use object-oriented programming within an ABAP function by instantiating a class and calling its method.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_ja.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nFUNCTION check_business_partner [...].\n  DATA(validator) = NEW /clean/biz_partner_validator( ).\n  result = validator->validate( business_partners ).\nENDFUNCTION.\n```\n\n----------------------------------------\n\nTITLE: Predicative Method Calls for Boolean Methods in ABAP\nDESCRIPTION: Shows how predicative method calls can make boolean conditions more natural and concise by directly using the method in the condition.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_44\n\nLANGUAGE: ABAP\nCODE:\n```\nIF [ NOT ] condition_is_fulfilled( ).\n```\n\n----------------------------------------\n\nTITLE: Expressing Intent Through Code Rather Than Comments in ABAP\nDESCRIPTION: This example demonstrates how to express intent through well-named methods and clean code structure instead of relying on comments to explain what the code does.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_41\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD correct_day_to_last_in_month.\n  WHILE is_invalid( date ).\n    reduce_day_by_one( CHANGING date = date ).\n  ENDWHILE.\nENDMETHOD.\n\nMETHOD is_invalid.\n  DATA zero_if_invalid TYPE i.\n  zero_if_invalid = date.\n  result = xsdbool( zero_if_invalid = 0 ).\nENDMETHOD.\n\nMETHOD reduce_day_by_one.\n  date+6(2) = date+6(2) - 1.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern: Condensed Code Formatting in ABAP\nDESCRIPTION: This example shows the preferred clean and condensed code style without unnecessary spaces, enhancing readability while keeping the code compact.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_130\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(result) = calculate( items ).\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Helper Classes with Inheritance in ABAP\nDESCRIPTION: Shows how to create abstract helper classes for test methods used by multiple test classes. The example demonstrates the inheritance approach for sharing test utility methods.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_22\n\nLANGUAGE: ABAP\nCODE:\n```\n\" inheritance example\n\nCLASS lth_unit_tests DEFINITION ABSTRACT FOR TESTING\n  DURATION SHORT\n  RISK LEVEL HARMLESS.\n\n  PROTECTED SECTION.\n    CLASS-METHODS assert_activity_entity\n      IMPORTING\n        actual_activity_entity TYPE REF TO zcl_activity_entity\n        expected_activity_entity TYPE REF TO zcl_activity_entity.\n    ...\nENDCLASS.\n\nCLASS lth_unit_tests IMPLEMENTATION.\n\n  METHOD assert_activity_entity.\n    ...\n  ENDMETHOD.\n\nENDCLASS.\n\nCLASS ltc_unit_tests DEFINITION INHERITING FROM lth_unit_tests FINAL FOR TESTING\n  DURATION SHORT\n  RISK LEVEL HARMLESS.\n  ...\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Using IF and RETURN for Early Method Exit in ABAP\nDESCRIPTION: Shows an alternative to CHECK using IF and RETURN for early method exit. This is more explicit about the control flow.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_107\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD read_customizing.\n  IF keys IS INITIAL.\n    RETURN.\n  ENDIF.\n  \" do whatever needs doing\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables Individually in ABAP\nDESCRIPTION: Demonstrates the recommended way to declare variables individually instead of chaining declarations. This improves readability and makes refactoring easier.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_de.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA name TYPE seoclsname.\nDATA reader TYPE REF TO /dirty/reader.\n```\n\n----------------------------------------\n\nTITLE: Valid cases for using FIELD-SYMBOL in ABAP\nDESCRIPTION: Shows legitimate use cases for FIELD-SYMBOL in ABAP, including dynamic component access, component access by name, and static member access.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nASSIGN generic->* TO FIELD-SYMBOL(<generic>).\nASSIGN COMPONENT name OF STRUCTURE structure TO FIELD-SYMBOL(<component>).\nASSIGN (class_name)=>(static_member) TO FIELD-SYMBOL(<member>).\n```\n\n----------------------------------------\n\nTITLE: Properly Indented Comment Using Quotation Marks in ABAP\nDESCRIPTION: This example shows the preferred way to write comments using quotation marks, which ensures proper indentation with the code they describe and maintains readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_49\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_it.\n  IF input IS NOT INITIAL.\n    \" delegate pattern\n    output = calculate_result( input ).\n  ENDIF.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Clear Variable Names Instead of Explanatory Comments in ABAP\nDESCRIPTION: This example shows how to use descriptive variable names that make the code self-explanatory, eliminating the need for comments that merely restate what the code does.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_43\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(input_has_entries) = has_entries( input ).\n```\n\n----------------------------------------\n\nTITLE: Aligning Related Items in ABAP\nDESCRIPTION: Shows how to align related items for better readability when they belong to the same structure or object. Unrelated items should be left unaligned to avoid suggesting a false relationship.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_63\n\nLANGUAGE: ABAP\nCODE:\n```\nstructure-type = 'A'.\nstructure-id   = '4711'.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nstructure = VALUE #( type = 'A'\n                     id   = '4711' ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\ncustomizing_reader = fra_cust_obj_model_reader=>s_get_instance( ).\nhdb_access = fra_hdbr_access=>s_get_instance( ).\n```\n\n----------------------------------------\n\nTITLE: Reducing IMPORTING Parameters in ABAP Function Module\nDESCRIPTION: Demonstrates how to reduce the number of IMPORTING parameters in an ABAP function module by using a configuration structure instead of multiple individual parameters.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\nFUNCTION seo_class_copy\n  IMPORTING\n    clskey      TYPE seoclskey\n    new_clskey  TYPE seoclskey\n    config      TYPE class_copy_config\n  EXPORTING\n    ...\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nFUNCTION seo_class_copy\n  IMPORTING\n    clskey                 TYPE seoclskey\n    new_clskey             TYPE seoclskey\n    access_permission      TYPE seox_boolean DEFAULT seox_true\n    VALUE(save)            TYPE seox_boolean DEFAULT seox_true\n    VALUE(suppress_corr)   TYPE seox_boolean DEFAULT seox_false\n    VALUE(suppress_dialog) TYPE seox_boolean DEFAULT seox_false\n    VALUE(authority_check) TYPE seox_boolean DEFAULT seox_true\n    lifecycle_manager      TYPE REF TO if_adt_lifecycle_manager OPTIONAL\n    lock_handle            TYPE REF TO if_adt_lock_handle OPTIONAL\n    VALUE(suppress_commit) TYPE seox_boolean DEFAULT seox_false\n  EXPORTING\n    ...\n```\n\n----------------------------------------\n\nTITLE: Type Declaration Formatting in ABAP\nDESCRIPTION: Shows the recommended way to format type declarations without alignment, keeping variables and their types visually grouped together to emphasize their relationship.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_73\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA name TYPE seoclsname.\nDATA reader TYPE REF TO /clean/reader.\n```\n\n----------------------------------------\n\nTITLE: Using READ TABLE for Single Entry Retrieval in ABAP\nDESCRIPTION: Demonstrates the use of READ TABLE for efficient single entry retrieval in ABAP tables, which is clearer and more concise than using LOOP AT.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_de.md#2025-04-22_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\nREAD TABLE my_table REFERENCE INTO DATA(line) WITH KEY key = 'A'.\n```\n\n----------------------------------------\n\nTITLE: Using FIXME/TODO/XXX with Developer Identification in ABAP\nDESCRIPTION: This example demonstrates the proper use of markers like XXX with developer initials to indicate code that works but could be improved, making it clear who to contact for questions.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_53\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n  \" XXX FH delete this method - it does nothing\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using LINE_EXISTS for Efficient Table Checks in ABAP\nDESCRIPTION: Shows how to use LINE_EXISTS for more efficient and clearer table entry checks in ABAP, compared to READ TABLE or LOOP AT.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_de.md#2025-04-22_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nIF line_exists( my_table[ key = 'A' ] ).\n```\n\n----------------------------------------\n\nTITLE: Commenting Why Instead of What in ABAP\nDESCRIPTION: This example shows a proper comment that explains the reasoning behind the code (why it works) rather than restating what the code does, which adds valuable context.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_47\n\nLANGUAGE: ABAP\nCODE:\n```\n\" can't fail, existence of >= 1 row asserted above\nDATA(first_line) = table[ 1 ].\n```\n\n----------------------------------------\n\nTITLE: Using Singular and Plural for Table and Structure Names in ABAP\nDESCRIPTION: Demonstrates a naming convention that uses singular form for a structure type and plural form for a table type, providing clear distinction without using prefixes.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/AvoidEncodings.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nTYPES: BEGIN OF coordinate,\n         x TYPE i,\n         y TYPE i,\n       END OF coordinate.\nTYPE coordinates TYPE STANDARD TABLE OF coordinate WITH DEFAULT KEY.\n```\n\n----------------------------------------\n\nTITLE: Naming Conventions for ABAP Test Classes\nDESCRIPTION: Exemples de conventions de nommage recommandées pour les classes de test locales en ABAP, basées sur leur objectif, pour distinguer clairement les différents types et niveaux de tests.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_19\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS ltc_unit_tests DEFINITION FOR TESTING ... .\nCLASS ltc_integration_tests DEFINITION FOR TESTING ... .\nCLASS ltc_unit_tests_with_mocks DEFINITION FOR TESTING ... .\n```\n\n----------------------------------------\n\nTITLE: Using RETURNING Instead of EXPORTING in ABAP Methods\nDESCRIPTION: Demonstrates the preference for using RETURNING parameters over EXPORTING parameters in ABAP methods for cleaner and more concise code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_9\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS square\n  IMPORTING\n    number        TYPE i\n  RETURNING\n    VALUE(result) TYPE i.\n\nDATA(result) = square( 42 ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS square\n  IMPORTING\n    number TYPE i\n  EXPORTING\n    result TYPE i.\n\nsquare(\n  EXPORTING\n    number = 42\n  IMPORTING\n    result = DATA(result) ).\n```\n\n----------------------------------------\n\nTITLE: Using INSERT INTO TABLE in ABAP\nDESCRIPTION: Demonstrates the preferred INSERT INTO TABLE syntax that works with all table types and keys, making refactoring easier if performance requirements change.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_12\n\nLANGUAGE: ABAP\nCODE:\n```\nINSERT VALUE #( ... ) INTO TABLE itab.\n```\n\n----------------------------------------\n\nTITLE: Constants Usage Examples\nDESCRIPTION: Shows proper and improper ways to declare and use constants in ABAP. Includes examples of descriptive naming and constant grouping.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_13\n\nLANGUAGE: ABAP\nCODE:\n```\nIF abap_type = cl_abap_typedescr=>typekind_date.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS status_inactive TYPE mmsta VALUE '90'.\nCONSTANTS status_cancelled TYPE sww_wistat value 'CANCELLED'.\n```\n\n----------------------------------------\n\nTITLE: ABAP Traditional Style Declaration\nDESCRIPTION: Demonstrates the traditional ABAP style with uppercase keywords and lowercase snake case identifiers, which became a de facto standard.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/UpperVsLowerCase.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA max_wait_time_in_seconds TYPE i.\n```\n\n----------------------------------------\n\nTITLE: Preferred Negative Comparison Syntax in ABAP\nDESCRIPTION: Shows the recommended syntax for negative comparisons using IS NOT, NP, and <> operators, which are more readable than using NOT.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_42\n\nLANGUAGE: ABAP\nCODE:\n```\nIF variable IS NOT INITIAL.\nIF variable NP 'TODO*'.\nIF variable <> 42.\n```\n\n----------------------------------------\n\nTITLE: Proper Variable Declaration Formatting in ABAP\nDESCRIPTION: Shows the correct way to format multiple variable declarations using the DATA statement. The recommended approach places the commas at the end of each line for better readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_59\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA:\n  a TYPE b,\n  c TYPE d,\n  e TYPE f.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA:\n  a TYPE b\n  ,c TYPE d\n  ,e TYPE f.\n```\n\n----------------------------------------\n\nTITLE: Test Relationship Documentation in ABAP\nDESCRIPTION: Shows how to document test relationships using ABAP Doc annotations to indicate which classes are being tested by a test class, enabling IDE shortcuts to run related tests.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_75\n\nLANGUAGE: ABAP\nCODE:\n```\n\"! @testing recruting\n\"! @testing candidate\nclass hiring_test definition\n  for testing risk level dangerous duration medium\n  abstract.\n  ...\nendclass.\n```\n\n----------------------------------------\n\nTITLE: Using INSERT INTO TABLE for adding records in ABAP\nDESCRIPTION: Demonstrates the preferred way to add records to internal tables using INSERT INTO TABLE, which works with all table types and key configurations.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nINSERT VALUE #( ... ) INTO TABLE itab.\n```\n\n----------------------------------------\n\nTITLE: Using Pragmas Instead of Pseudo Comments in ABAP\nDESCRIPTION: Demonstrates the preferred approach of using pragmas instead of pseudo comments to suppress ATC warnings. The pragma (##NEEDED) is the modern replacement for the deprecated pseudo comment (#EC NEEDED).\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_58\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 패턴\nMESSAGE e001(ad) INTO DATA(message) ##NEEDED.\n\n\" 잘못된 패턴\nMESSAGE e001(ad) INTO DATA(message). \"#EC NEEDED\n```\n\n----------------------------------------\n\nTITLE: Assembling Complex Regular Expressions in ABAP\nDESCRIPTION: A pattern for building complex regular expressions from smaller, more understandable components. This approach makes regular expressions more maintainable.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_59\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS class_name TYPE string VALUE `CL\\_.*`.\nCONSTANTS interface_name TYPE string VALUE `IF\\_.*`.\nDATA(object_name) = |{ class_name }\\|{ interface_name }|.\n```\n\n----------------------------------------\n\nTITLE: Documenting Test Relations using Annotations in ABAP\nDESCRIPTION: Demonstrates how to use ABAP annotations to document test relationships between classes. This allows test execution across related objects via keyboard shortcuts even when tests are in separate classes.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_21\n\nLANGUAGE: ABAP\nCODE:\n```\n\"! @testing recruting\n\"! @testing candidate\nclass hiring_test definition\n  for testing risk level dangerous duration medium\n  abstract.\n  ...\nendclass.\n```\n\n----------------------------------------\n\nTITLE: Formatting Method with Minimal Blank Lines in ABAP\nDESCRIPTION: Demonstrates the proper use of blank lines in ABAP methods, avoiding unnecessary separation between lines of code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_134\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n  do_this( ).\n  then_that( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Interface Method Implementation Behavior in ABAP\nDESCRIPTION: Demonstrates interface method implementation behavior configuration using DEFAULT IGNORE and DEFAULT FAIL directives.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_11\n\nLANGUAGE: ABAP\nCODE:\n```\nINTERFACE account.\n  METHODS new_method DEFAULT IGNORE.\nENDINTERFACE.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nINTERFACE account.\n  METHODS new_method DEFAULT FAIL.\nENDINTERFACE.\n```\n\n----------------------------------------\n\nTITLE: Using Native ABAP Enumerations\nDESCRIPTION: Shows how to use a native enumeration type by referencing the enumeration values through the class name.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nIF log_contains( /clean/message_severity=>warning ).\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern: Declaration Formatting in ABAP\nDESCRIPTION: This example demonstrates the preferred formatting for data declarations, optimizing for readability. Each variable is declared on a new line with the comma at the end.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_126\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA:\n  a TYPE b,\n  c TYPE d,\n  e TYPE f.\n```\n\n----------------------------------------\n\nTITLE: Using enumeration classes instead of constant interfaces in ABAP\nDESCRIPTION: Shows how to use an enumeration class to define related constants, rather than mixing unrelated constants in an interface.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/message_severity DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    CONSTANTS:\n      warning TYPE symsgty VALUE 'W',\n      error   TYPE symsgty VALUE 'E'.\nENDCLASS.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/message_severity DEFINITION PUBLIC CREATE PRIVATE FINAL.\n  PUBLIC SECTION.\n    CLASS-DATA:\n      warning TYPE REF TO /clean/message_severity READ-ONLY,\n      error   TYPE REF TO /clean/message_severity READ-ONLY.\n  \" ...\nENDCLASS.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nINTERFACE /dirty/common_constants.\n  CONSTANTS:\n    warning      TYPE symsgty VALUE 'W',\n    transitional TYPE i       VALUE 1,\n    error        TYPE symsgty VALUE 'E',\n    persisted    TYPE i       VALUE 2.\nENDINTERFACE.\n```\n\n----------------------------------------\n\nTITLE: Static Method Call Best Practices in ABAP\nDESCRIPTION: Demonstrates the correct way to call static methods using class qualification instead of instance variables.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_73\n\nLANGUAGE: ABAP\nCODE:\n```\ncl_my_class=>static_method( ).\n```\n\n----------------------------------------\n\nTITLE: Indenting Parameters Under Method Call in ABAP\nDESCRIPTION: Illustrates the correct way to indent parameters under the method call when breaking lines for readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_138\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(sum) = add_two_numbers(\n                value_1 = 5\n                value_2 = 6 ).\n```\n\n----------------------------------------\n\nTITLE: Partial Interface Implementation in ABAP Tests\nDESCRIPTION: Shows how to implement only required interface methods in test classes using PARTIALLY IMPLEMENTED extension.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_12\n\nLANGUAGE: ABAP\nCODE:\n```\nINTERFACE account.\n  METHODS add_account IMPORTING account TYPE account.\n  METHODS delete_account IMPORTING account_id TYPE account_id.\n  METHODS get_account IMPORTING account_id TYPE account_id\n                      RETURNING VALUE(result) TYPE account.\nENDINTERFACE.\n\nCLASS test_double DEFINITION FOR TESTING.\n  PUBLIC SECTION.\n  INTERFACES account PARTIALLY IMPLEMENTED.\n  DATA account_stub TYPE account.\nENDCLASS.\n\nCLASS test_double IMPLEMENTATION.\n  METHOD productive~get.\n    result = account_stub.\n  ENDMETHOD.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Indenting Inline Declarations in ABAP\nDESCRIPTION: Demonstrates how to indent inline declarations using VALUE or NEW constructors, treating them like method calls for consistent formatting and readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_72\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(result) = merge_structures( a = VALUE #( field_1 = 'X'\n                                              field_2 = 'A' )\n                                 b = NEW /clean/structure_type( field_3 = 'C'\n                                                                field_4 = 'D' ) ).\n```\n\n----------------------------------------\n\nTITLE: Grouping Constants in ABAP\nDESCRIPTION: Demonstrates how to group related constants together for better organization and easier access.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_ja.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS:\n  BEGIN OF message_severity,\n    warning TYPE symsgty VALUE 'W',\n    error   TYPE symsgty VALUE 'E',\n  END OF message_severity,\n  BEGIN OF message_lifespan,\n    transitional TYPE i VALUE 1,\n    persisted    TYPE i VALUE 2,\n  END OF message_lifespan.\n```\n\n----------------------------------------\n\nTITLE: Defining Basic ABAP Interface\nDESCRIPTION: Shows how to define a simple interface for a blog post with a publish method. Demonstrates the basic interface syntax in ABAP.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/InterfacesVsAbstractClasses.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nINTERFACE /clean/blog_post.\n  METHODS publish.\nENDINTERFACE.\n```\n\n----------------------------------------\n\nTITLE: Using CREATE OBJECT with Dynamic Types in ABAP\nDESCRIPTION: Demonstrates the appropriate use case for CREATE OBJECT when working with dynamic types in ABAP, where the NEW operator cannot be used.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_67\n\nLANGUAGE: ABAP\nCODE:\n```\nCREATE OBJECT number_range TYPE (dynamic_type)\n  EXPORTING\n    number_range = '/CLEAN/CXTGEN'.\n```\n\n----------------------------------------\n\nTITLE: Character Case Conversion in ABAP\nDESCRIPTION: Demonstrates modern case conversion functions to_upper() and to_lower() compared to legacy TRANSLATE statement.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_9\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(uppercase) = to_upper( lowercase ).\nDATA(lowercase) = to_lower( uppercase ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nTRANSLATE lowercase TO UPPER CASE.\n```\n\n----------------------------------------\n\nTITLE: Proper Placement of Closing Parentheses in ABAP\nDESCRIPTION: Demonstrates the correct placement of closing parentheses at the end of the line rather than on a new line, which helps to conserve vertical space and maintain readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_64\n\nLANGUAGE: ABAP\nCODE:\n```\nmodify->update( node           = if_fra_alert_c=>node-item\n                key            = item->key\n                data           = item\n                changed_fields = changed_fields ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nmodify->update( node           = if_fra_alert_c=>node-item\n                key            = item->key\n                data           = item\n                changed_fields = changed_fields\n).\n```\n\n----------------------------------------\n\nTITLE: Using Enumerations Instead of Booleans in ABAP\nDESCRIPTION: Shows the preferred approach of using enumerations instead of booleans, which provides more flexibility for future state additions.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_28\n\nLANGUAGE: ABAP\nCODE:\n```\narchiving_status = /clean/archivation_status=>archiving_in_process.\n```\n\n----------------------------------------\n\nTITLE: Proper Declaration Before Branch Points in ABAP\nDESCRIPTION: Shows the preferred approach of declaring variables before branch points to avoid confusion, especially in longer methods where inline declarations might not be immediately visible.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA value TYPE i.\nIF has_entries = abap_true.\n  value = 1.\nELSE.\n  value = 2.\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Propagating Exceptions in ABAP Middle Methods\nDESCRIPTION: Shows how a middle method should ideally allow exceptions to bubble up without redeclaration. This avoids refactoring cascades when exceptions change.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Exceptions.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS middle_method.\n\nMETHOD middle_method.\n  lower_method( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Object Pattern Enumerations with Type-Safety\nDESCRIPTION: Shows how to use object pattern enumeration values in a type-safe manner with modern method signatures that accept enumeration objects.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_8\n\nLANGUAGE: ABAP\nCODE:\n```\n\" modern signature: ... IMPORTING severity TYPE REF TO /clean/message_severity ...\nIF log_contains( /clean/message_severity=>warning ).\n```\n\n----------------------------------------\n\nTITLE: Modern Dynamic Data Access in ABAP\nDESCRIPTION: Shows the recommended modern approach for dynamic data access without field symbols.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_19\n\nLANGUAGE: ABAP\nCODE:\n```\nresult = dref->*.\n```\n\n----------------------------------------\n\nTITLE: ABAP Snake Case Variable Naming\nDESCRIPTION: Shows the recommended snake_case naming convention for variables in ABAP with proper use of underscores.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA max_response_time_in_millisec TYPE i.\n```\n\n----------------------------------------\n\nTITLE: Using REFERENCE INTO for loop iterations in ABAP\nDESCRIPTION: Demonstrates the preferred way to iterate over components using REFERENCE INTO instead of FIELD-SYMBOL for better consistency in object-oriented ABAP programs.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT components REFERENCE INTO DATA(component).\n```\n\n----------------------------------------\n\nTITLE: Using EMPTY KEY for Internal Tables in ABAP\nDESCRIPTION: Demonstrates using EMPTY KEY when no key is needed for an internal table, which is preferred over the default key that may include unwanted columns.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_10\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA itab1 TYPE STANDARD TABLE OF row_type WITH EMPTY KEY.\n```\n\n----------------------------------------\n\nTITLE: Well-Named Test Methods Examples\nDESCRIPTION: Demonstrates good practices for naming test methods that clearly reflect the given and expected outcomes of the test.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_150\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD reads_existing_entry.\nMETHOD throws_on_invalid_key.\nMETHOD detects_invalid_input.\n```\n\n----------------------------------------\n\nTITLE: Boolean Comparison with Constants\nDESCRIPTION: Shows correct boolean comparison using ABAP_TRUE and ABAP_FALSE constants instead of 'X' or space characters.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_31\n\nLANGUAGE: ABAP\nCODE:\n```\nhas_entries = abap_true.\nIF has_entries = abap_false.\n```\n\n----------------------------------------\n\nTITLE: Using XSDBOOL for Setting Boolean Variables in ABAP\nDESCRIPTION: Shows the efficient way to set Boolean variables using XSDBOOL, which directly produces a compatible CHAR1 value based on a condition.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_36\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(has_entries) = xsdbool( line IS NOT INITIAL ).\n```\n\n----------------------------------------\n\nTITLE: Function Naming in ABAP\nDESCRIPTION: Example of naming functions using verb phrases, following the same convention as methods.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_8\n\nLANGUAGE: ABAP\nCODE:\n```\nFUNCTION /clean/read_alerts\n```\n\n----------------------------------------\n\nTITLE: Type Access Pattern in ABAP\nDESCRIPTION: Shows proper access of type definitions through class/interface rather than instances.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_74\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS lcl DEFINITION.\n  PUBLIC SECTION.\n    TYPES foo TYPE i.\nENDCLASS.\nCLASS lcl IMPLEMENTATION.\nENDCLASS.\n\nINTERFACE lif.\n  TYPES blah TYPE lcl=>foo.  \nENDINTERFACE.\n```\n\n----------------------------------------\n\nTITLE: Using SAP Basis Checks Instead of Custom Regular Expressions in ABAP\nDESCRIPTION: A pattern showing how to use existing SAP basis functions for validation instead of implementing custom regular expressions. This reduces duplication and maintenance effort.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_57\n\nLANGUAGE: ABAP\nCODE:\n```\nCALL FUNCTION 'SEO_CLIF_CHECK_NAME'\n  EXPORTING\n    cls_name = class_name\n  EXCEPTIONS\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Local Test Class Names in ABAP\nDESCRIPTION: Demonstrates proper naming conventions for local test classes based on either the 'when' part (public method name) or 'given' part (setup semantics) of the test story.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_141\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS ltc_<public method name> DEFINITION FOR TESTING ... .\"\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS ltc_<common setup semantics> DEFINITION FOR TESTING ... .\n```\n\n----------------------------------------\n\nTITLE: Using Compatible Enumerations with Legacy Methods\nDESCRIPTION: Demonstrates how to use enumeration values with legacy method signatures that expect primitive types by using the CONV operator.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nIF log_contains( CONV #( /compatbl/message_severity=>warning ) ).\n```\n\n----------------------------------------\n\nTITLE: ABAP Reference Parameter Initialization\nDESCRIPTION: Shows proper initialization of EXPORTING reference parameters.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_97\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS square\n  EXPORTING\n    result TYPE i.\n\n\" clear\nMETHOD square.\n  CLEAR result.\n  \" ...\nENDMETHOD.\n\n\" overwrite\nMETHOD square.\n  result = cl_abap_math=>square( 2 ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Placing Comments Above the Code They Describe in ABAP\nDESCRIPTION: This example demonstrates the preferred placement of comments directly above the code they describe, making it clear which line the comment refers to.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_51\n\nLANGUAGE: ABAP\nCODE:\n```\n\" delegate pattern\noutput = calculate_result( input ).\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Double Return Values\nDESCRIPTION: Shows the correct way to configure test doubles to return specific values in unit tests without building complex test frameworks.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_149\n\nLANGUAGE: ABAP\nCODE:\n```\ncl_abap_testdouble=>configure_call( test_double )->returning( data ).\n```\n\n----------------------------------------\n\nTITLE: Implementing ABAP Interface\nDESCRIPTION: Demonstrates how to implement an interface in an ABAP class. Shows the class definition and implementation structure.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/InterfacesVsAbstractClasses.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/markdown_blog_post DEFINITION PUBLIC CREATE PUBLIC.\n  PUBLIC SECTION.\n    INTERFACES /clean/blog_post.\nENDCLASS.\n\nCLASS /clean/markdown_blog_post IMPLEMENTATION.\n  \n  METHOD publish.\n  ENDMETHOD.\n  \nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Test Data Constants Example\nDESCRIPTION: Demonstrates using constants to make test data's purpose clear and handling of invalid entry scenarios.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_152\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS some_nonsense_key TYPE char8 VALUE 'ABCDEFGH'.\n\nMETHOD throws_on_invalid_entry.\n  TRY.\n      \" when\n      cut->read_entry( some_nonsense_key ).\n      cl_abap_unit_assert=>fail( ).\n    CATCH /clean/customizing_reader_error.\n      \" then\n  ENDTRY.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Loop Implementation with Field Symbols\nDESCRIPTION: Example of using field symbols in loops for direct data access and manipulation.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_20\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT table ASSIGNING FIELD-SYMBOL(<line>).\n  obj->do_something( <line> ).\nENDLOOP.\n```\n\n----------------------------------------\n\nTITLE: Using LOOP AT WHERE for Filtered Table Iteration in ABAP\nDESCRIPTION: Shows how to use LOOP AT WHERE for more efficient and clearer filtered iteration over ABAP tables, avoiding nested IF statements.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_de.md#2025-04-22_snippet_8\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT my_table REFERENCE INTO DATA(line) WHERE key = 'A'.\n```\n\n----------------------------------------\n\nTITLE: Formatting Single Parameter Calls in ABAP\nDESCRIPTION: Shows how to keep single parameter method calls on one line for better readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_137\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(unique_list) = remove_duplicates( list ).\nremove_duplicates( CHANGING list = list ).\n```\n\n----------------------------------------\n\nTITLE: Using Few IMPORTING Parameters in ABAP Function Module\nDESCRIPTION: Demonstrates how to keep IMPORTING parameters concise and organized in a function module. By using fewer, well-structured parameters, the function remains clear and manageable compared to having many individual parameters.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_76\n\nLANGUAGE: ABAP\nCODE:\n```\nFUNCTION seo_class_copy\n  IMPORTING\n    clskey      TYPE seoclskey\n    new_clskey  TYPE seoclskey\n    config      TYPE class_copy_config\n  EXPORTING\n    ...\n```\n\n----------------------------------------\n\nTITLE: Appropriate Line Breaks in ABAP Methods\nDESCRIPTION: Demonstrates the proper use of line breaks in ABAP methods. The example shows that unnecessary empty lines should be avoided, with line breaks only used to separate logical blocks of code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_62\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n  do_this( ).\n  then_that( ).\nENDMETHOD.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nMETHOD do_something.\n\n  do_this( ).\n\n  then_that( ).\n\nENDMETHOD.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n\n  do_this( ).\n\n  then_that(\n    EXPORTING\n      variable = 'A'\n    IMPORTING\n      result   = result ).\n\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Methods to Structure Code in ABAP\nDESCRIPTION: This example shows how to use methods to structure code into logical units instead of using comment blocks. The code is broken down into separate method calls that clearly indicate the processing stages.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(statement) = build_statement( ).\nDATA(data) = execute_statement( statement ).\n```\n\n----------------------------------------\n\nTITLE: Loop Implementation with References\nDESCRIPTION: Alternative approach using references in loops, which is more consistent with object-oriented ABAP.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_21\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT table REFERENCE INTO DATA(line).\n  obj->do_something( line->* ).\nENDLOOP.\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings with && Operator in ABAP\nDESCRIPTION: Shows the less preferred approach of concatenating strings using the && operator, which is less readable especially with multiple embedded variables.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_26\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA(message) = `Received an unexpected HTTP ` && status_code && ` with message ` && text.\n```\n\n----------------------------------------\n\nTITLE: Naming RETURNING Parameters as RESULT in ABAP\nDESCRIPTION: Shows the convention of naming RETURNING parameters as RESULT when the method name already implies the return value's meaning.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_14\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS get_name\n  RETURNING\n    VALUE(name) TYPE string.\n\nMETHOD get_name.\n  name = me->name.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Defining Constants Using Enumeration Class in ABAP\nDESCRIPTION: Shows how to define constants using an enumeration class instead of a constant interface, which provides better organization and type safety.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_ja.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/message_severity DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    CONSTANTS:\n      warning TYPE symsgty VALUE 'W',\n      error   TYPE symsgty VALUE 'E'.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Using REF TO instead of FIELD-SYMBOL in ABAP\nDESCRIPTION: Demonstrates when to use REF TO instead of FIELD-SYMBOL for improved consistency in object-oriented ABAP code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT components REFERENCE INTO DATA(component).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nLOOP AT components ASSIGNING FIELD-SYMBOL(<component>).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nASSIGN generic->* TO FIELD-SYMBOL(<generic>).\nASSIGN COMPONENT name OF STRUCTURE structure TO FIELD-SYMBOL(<component>).\nASSIGN (class_name)=>(static_member) TO FIELD-SYMBOL(<member>).\n```\n\n----------------------------------------\n\nTITLE: Appropriate FIELD-SYMBOL Usage Examples in ABAP\nDESCRIPTION: Demonstrates situations where FIELD-SYMBOL is appropriate, such as dynamic assignments to generic objects, structure components, or static members.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_8\n\nLANGUAGE: ABAP\nCODE:\n```\nASSIGN generic->* TO FIELD-SYMBOL(<generic>).\nASSIGN COMPONENT name OF STRUCTURE structure TO FIELD-SYMBOL(<component>).\nASSIGN (class_name)=>(static_member) TO FIELD-SYMBOL(<member>).\n```\n\n----------------------------------------\n\nTITLE: Proper Parameter Indentation in ABAP Method Calls\nDESCRIPTION: Shows how to indent parameters in method calls when they appear on separate lines. The recommended approach is to align parameters with the method call for better readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_67\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(sum) = add_two_numbers(\n                value_1 = 5\n                value_2 = 6 ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(sum) = add_two_numbers(\n    value_1 = 5\n    value_2 = 6 ).\n```\n\n----------------------------------------\n\nTITLE: Using CHECK for Early Method Exit in ABAP\nDESCRIPTION: Demonstrates the use of CHECK statement for early method exit when input doesn't meet expectations. This is concise but may be less clear than explicit IF and RETURN.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_106\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD read_customizing.\n  CHECK keys IS NOT INITIAL.\n  \" do whatever needs doing\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Interface Pattern Enumerations\nDESCRIPTION: Demonstrates accessing enumeration values implemented using the interface pattern.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_11\n\nLANGUAGE: ABAP\nCODE:\n```\nIF log_contains( /dirty/message_severity=>warning ).\n```\n\n----------------------------------------\n\nTITLE: Stateful Log Class in ABAP\nDESCRIPTION: An example of a stateful class design where methods manipulate the internal state of the object. This approach is appropriate for objects that need to maintain state across multiple operations.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_62\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/log DEFINITION PUBLIC CREATE PUBLIC.\n  PUBLIC SECTION.\n    METHODS add_message IMPORTING message TYPE /clean/message.\n  PRIVATE SECTION.\n    DATA messages TYPE /clean/message_table.\nENDCLASS.\n\nCLASS /clean/log IMPLEMENTATION.\n  METHOD add_message.\n    INSERT message INTO TABLE messages.\n  ENDMETHOD.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Table declaration with EMPTY KEY in ABAP\nDESCRIPTION: Shows how to declare an internal table with EMPTY KEY when no key functionality is needed, avoiding the overhead of DEFAULT KEY.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA itab1 TYPE STANDARD TABLE OF row_type WITH EMPTY KEY.\n```\n\n----------------------------------------\n\nTITLE: Boolean Conditions in ABAP\nDESCRIPTION: Shows simplified boolean condition checking using IS INITIAL omission for cleaner code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nIF is_valid( ).\n  \" method returned abap_true\nELSE.\n  \" method returned abap_false\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Indentation Guidelines for ABAP Code\nDESCRIPTION: Shows the recommended indentation for ABAP code with parameter keywords indented by 2 spaces and parameters by 4 spaces. For calls without parameter keywords, parameters should be indented by 4 spaces.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_71\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(sum) = add_two_numbers(\n              EXPORTING\n                value_1 = 5\n                value_2 = 6\n              CHANGING\n                errors  = errors ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(sum) = add_two_numbers(\n                value_1 = 5\n                value_2 = 6 ).\n```\n\n----------------------------------------\n\nTITLE: Complex Boolean Logic Issue in ABAP\nDESCRIPTION: Illustrates how Boolean logic can become complex and confusing when the states being represented aren't truly binary, suggesting an enumeration would be clearer.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_31\n\nLANGUAGE: ABAP\nCODE:\n```\nassert_true( xsdbool( document->is_archived( ) = abap_true AND\n                      document->is_partially_archived( ) = abap_true ) ).\n```\n\n----------------------------------------\n\nTITLE: Using Collection Pattern Enumerations\nDESCRIPTION: Demonstrates accessing enumeration values implemented using the collection pattern, requiring a more verbose syntax with additional qualification.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_13\n\nLANGUAGE: ABAP\nCODE:\n```\nIF log_contains( /dirty/message_constants=>message_severity-warning ).\n```\n\n----------------------------------------\n\nTITLE: Aligning Parameters in Method Calls in ABAP\nDESCRIPTION: Demonstrates how to align parameters in method calls for better readability and to highlight the parameter-value relationship.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_139\n\nLANGUAGE: ABAP\nCODE:\n```\nmodify->update( node           = if_fra_alert_c=>node-item\n                key            = item->key\n                data           = item\n                changed_fields = changed_fields ).\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Method Definition Examples\nDESCRIPTION: Demonstrates different approaches to method definitions with varying degrees of type safety, including native enumeration types and object pattern implementations.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_19\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS log_contains\n  IMPORTING\n    minimum_severity TYPE /clean/message_severity=>type.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS log_contains\n  IMPORTING\n    minimum_severity TYPE REF TO /clean/message_severity.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS log_contains\n  IMPORTING\n    minimum_severity TYPE symsgty.\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Keys in Internal Tables in ABAP\nDESCRIPTION: Shows how to specify explicit key components for an internal table, which is preferred over using the default key.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_9\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA itab2 TYPE STANDARD TABLE OF row_type WITH NON-UNIQUE KEY comp1 comp2.\n```\n\n----------------------------------------\n\nTITLE: Grouping constants in ABAP\nDESCRIPTION: Demonstrates how to group related constants together for improved organization and clarity.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS:\n  BEGIN OF message_severity,\n    warning TYPE symsgty VALUE 'W',\n    error   TYPE symsgty VALUE 'E',\n  END OF message_severity,\n  BEGIN OF message_lifespan,\n    transitional TYPE i VALUE 1,\n    persisted    TYPE i VALUE 2,\n  END OF message_lifespan.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" Anti-pattern\nCONSTANTS:\n  warning      TYPE symsgty VALUE 'W',\n  transitional TYPE i       VALUE 1,\n  error        TYPE symsgty VALUE 'E',\n  persisted    TYPE i       VALUE 2,\n```\n\n----------------------------------------\n\nTITLE: Extracting Test Method Calls with Default Parameters in ABAP\nDESCRIPTION: Demonstrates how to extract a test method call into a dedicated helper method that sets default parameters. This improves test readability by hiding irrelevant implementation details.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_23\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS map_xml_to_itab\n  IMPORTING\n    xml_string TYPE string\n    config     TYPE /clean/xml2itab_config DEFAULT default_config\n    format     TYPE /clean/xml2itab_format DEFAULT default_format.\n\nMETHOD map_xml_to_itab.\n  result = cut->map_xml_to_itab( xml_string = xml_string\n                                 config     = config\n                                 format     = format ).\nENDMETHOD.\n\nDATA(itab) = map_xml_to_itab( '<xml></xml>' ).\n```\n\n----------------------------------------\n\nTITLE: Incorrect Default Key Usage in Internal Tables in ABAP\nDESCRIPTION: Shows the discouraged pattern of using DEFAULT KEY for internal tables, which can waste resources and lead to unexpected behavior, especially with numeric fields.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_11\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA itab TYPE STANDARD TABLE OF row_type WITH DEFAULT KEY.\n```\n\n----------------------------------------\n\nTITLE: ABAP Test Class With Testing Relations\nDESCRIPTION: Shows how to define a test class with test relations to document which objects are being tested. The class is marked as abstract and for testing.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_142\n\nLANGUAGE: ABAP\nCODE:\n```\n\"! @testing recruting\n\"! @testing candidate\nclass hiring_test definition\n  for testing risk level dangerous duration medium\n  abstract.\n  ...\nendclass.\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Exceptions in Controlled Situations in ABAP\nDESCRIPTION: This example demonstrates proper usage of CX_DYNAMIC_CHECK exceptions when the caller has complete control over whether an exception can occur, such as when working with decimal floating point numbers.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_34\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA value TYPE decfloat.\nvalue = '7.13'.\ncl_abap_math=>get_db_length_decs(\n  EXPORTING\n    in     = value\n  IMPORTING\n    length = DATA(length) ).\n```\n\n----------------------------------------\n\nTITLE: Using REF TO Instead of FIELD-SYMBOL in ABAP Loops\nDESCRIPTION: Shows the preferred use of REF TO over FIELD-SYMBOL in ABAP loops for better consistency with object-oriented programming, unless field symbols are specifically required.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_de.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT components REFERENCE INTO DATA(component).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Too Many IMPORTING Parameters in ABAP Function Module\nDESCRIPTION: Shows an anti-pattern with excessive IMPORTING parameters that increase complexity and make the function difficult to use and maintain. Each additional parameter creates exponential combinations to handle.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_77\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nFUNCTION seo_class_copy\n  IMPORTING\n    clskey                 TYPE seoclskey\n    new_clskey             TYPE seoclskey\n    access_permission      TYPE seox_boolean DEFAULT seox_true\n    VALUE(save)            TYPE seox_boolean DEFAULT seox_true\n    VALUE(suppress_corr)   TYPE seox_boolean DEFAULT seox_false\n    VALUE(suppress_dialog) TYPE seox_boolean DEFAULT seox_false\n    VALUE(authority_check) TYPE seox_boolean DEFAULT seox_true\n    lifecycle_manager      TYPE REF TO if_adt_lifecycle_manager OPTIONAL\n    lock_handle            TYPE REF TO if_adt_lock_handle OPTIONAL\n    VALUE(suppress_commit) TYPE seox_boolean DEFAULT seox_false\n  EXPORTING\n    ...\n```\n\n----------------------------------------\n\nTITLE: Explicit Boolean Comparison Anti-pattern in ABAP\nDESCRIPTION: Demonstrates the anti-pattern of explicitly comparing boolean method results with ABAP_TRUE/ABAP_FALSE when predicative calls would be cleaner.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_45\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF condition_is_fulfilled( ) = abap_true / abap_false.\n```\n\n----------------------------------------\n\nTITLE: Incorrect LOOP AT Pattern for Single Entry Access in ABAP\nDESCRIPTION: Demonstrates a discouraged pattern of using LOOP AT with EXIT to access a single table entry, which is less clear and efficient than using READ TABLE.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_17\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nLOOP AT my_table REFERENCE INTO DATA(line) WHERE key = 'A'.\n  EXIT.\nENDLOOP.\n```\n\n----------------------------------------\n\nTITLE: Aligning Assignments to Same Object in ABAP\nDESCRIPTION: Shows how to align assignments to the same object to highlight their relationship, using both direct assignment and VALUE operator.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_135\n\nLANGUAGE: ABAP\nCODE:\n```\nstructure-type = 'A'.\nstructure-id   = '4711'.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nstructure = VALUE #( type = 'A'\n                     id   = '4711' ).\n```\n\n----------------------------------------\n\nTITLE: Separate Variable Declarations in ABAP\nDESCRIPTION: Demonstrates the recommended approach of declaring variables separately without chaining, which makes code easier to refactor and modify.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA name TYPE seoclsname.\nDATA reader TYPE REF TO reader.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using IF-ELSEIF for Multiple Conditions in ABAP\nDESCRIPTION: An anti-pattern showing the less preferred way of handling multiple exclusive conditions with IF-ELSEIF chains, which is more verbose and error-prone than using CASE.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_52\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF type = type-some_type.\n  \" ...\nELSEIF type = type-some_other_type.\n  \" ...\nELSE.\n  RAISE EXCEPTION NEW /dirty/unknown_type_failure( ).\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Boolean Usage Anti-pattern in ABAP\nDESCRIPTION: Demonstrates a case where using a Boolean might seem natural but can lead to limitations as requirements evolve, showing a case where an enumeration would be more appropriate.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_29\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nis_archived = abap_true.\n```\n\n----------------------------------------\n\nTITLE: Inefficient Double Table Read Anti-pattern in ABAP\nDESCRIPTION: Shows the anti-pattern of checking for existence and then reading the row in two separate operations, which is less efficient and clutters the control flow.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_23\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF NOT line_exists( my_table[ key = input ] ).\n  RAISE EXCEPTION NEW /clean/my_data_not_found( ).\nENDIF.\nDATA(row) = my_table[ key = input ].\n```\n\n----------------------------------------\n\nTITLE: Input Validation Test Example\nDESCRIPTION: Shows a focused test method following the given-when-then pattern with a single assertion testing input validation.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_151\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD rejects_invalid_input.\n  \" when\n  DATA(is_valid) = cut->is_valid_input( 'SOME_RANDOM_ENTRY' ).\n  \" then\n  cl_abap_unit_assert=>assert_false( is_valid ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Writing Explanatory 'Why' Comments in ABAP\nDESCRIPTION: This example demonstrates writing a comment that explains why a particular approach is used rather than what the code does. The comment explains that the indexed access won't fail because an assertion was made earlier.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_8\n\nLANGUAGE: ABAP\nCODE:\n```\n\" can't fail, existence of >= 1 row asserted above\nDATA(first_line) = table[ 1 ].\n```\n\n----------------------------------------\n\nTITLE: Converting Between Enumeration and Legacy Types\nDESCRIPTION: Shows type conversion between native enumeration types and their underlying base types using the CONV operator for compatibility with legacy code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\n\"yields 'I'\nDATA(severity_as_char) = CONV symsgty( /compatbl/message_severity=>info ). \n\n\"yields /compatbl/message_severity=>exit\nDATA(severity) = CONV /compatbl/message_severity=>type( 'X' ). \n```\n\n----------------------------------------\n\nTITLE: Negative Condition Anti-pattern in ABAP\nDESCRIPTION: Shows how negative conditions can make code harder to understand by requiring a mental reversal to comprehend.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_40\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF has_no_entries = abap_false.\n```\n\n----------------------------------------\n\nTITLE: ABAP Boolean Parameter Anti-Pattern\nDESCRIPTION: Demonstrates why boolean input parameters should be avoided as they often indicate a method doing multiple things.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_92\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS update\n  IMPORTING\n    do_save TYPE abap_bool.\n```\n\n----------------------------------------\n\nTITLE: INITIAL Comparison Anti-pattern for Booleans in ABAP\nDESCRIPTION: Demonstrates the anti-pattern of comparing Boolean variables to INITIAL, which requires readers to remember the default value of ABAP_BOOL.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_35\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF has_entries IS NOT INITIAL.\n```\n\n----------------------------------------\n\nTITLE: Avoiding chained up-front declarations in ABAP\nDESCRIPTION: Shows why chained up-front declarations should be avoided and how to declare variables individually instead.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA name TYPE seoclsname.\nDATA reader TYPE REF TO /dirty/reader.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA:\n  name   TYPE seoclsname,\n  reader TYPE REF TO /dirty/reader.\n```\n\n----------------------------------------\n\nTITLE: Extracting Test Method Calls in ABAP\nDESCRIPTION: Shows how to extract complex method calls into helper methods with default parameters to make tests more readable by hiding irrelevant details.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_77\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS map_xml_to_itab\n  IMPORTING\n    xml_string TYPE string\n    config     TYPE /clean/xml2itab_config DEFAULT default_config\n    format     TYPE /clean/xml2itab_format DEFAULT default_format.\n\nMETHOD map_xml_to_itab.\n  result = cut->map_xml_to_itab( xml_string = xml_string\n                                 config     = config\n                                 format     = format ).\nENDMETHOD.\n\nDATA(itab) = map_xml_to_itab( '<xml></xml>' ).\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Flow with CASE in ABAP\nDESCRIPTION: Shows a method using a CASE statement to decide an action based on temperature. While larger, it remains focused on a single task.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_103\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD decide_what_to_do.\n  CASE temperature.\n    WHEN burning.\n      result = air_conditioning.\n    WHEN hot.\n      result = ice_cream.\n    WHEN moderate.\n      result = chill.\n    WHEN cold.\n      result = skiing.\n    WHEN freezing.\n      result = hot_cocoa.\n  ENDCASE.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Handling CX_SY_NO_HANDLER in ABAP\nDESCRIPTION: Demonstrates a workaround using CX_SY_NO_HANDLER to catch exceptions, but notes its limitations in handling multiple exception types and the verbosity of identifying the actual exception.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Exceptions.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD upper_method.\n  TRY.\n      middle_method( ).\n    CATCH cx_sy_no_handler INTO DATA(outer).\n      DATA(inner) = outer->previous.\n      \" identify and branch on inner's type\n  ENDTRY.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: ABAP Parameter Naming Anti-Pattern\nDESCRIPTION: Demonstrates why repeating member names in RETURNING parameters should be avoided.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_96\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS get_name\n  RETURNING\n    VALUE(name) TYPE string.\n\nMETHOD get_name.\n  name = me->name.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration in ABAP - Anti-pattern\nDESCRIPTION: Shows the discouraged practice of chaining variable declarations, which complicates code maintenance and refactoring.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_17\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA:\n  name   TYPE seoclsname,\n  reader TYPE REF TO reader.\n```\n\n----------------------------------------\n\nTITLE: Using Modern SQL Syntax in ABAP\nDESCRIPTION: Demonstrates the use of modern SQL syntax in ABAP with '@' escaped host variables for clarity between program variables and database columns.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_ja.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nSELECT *\n  FROM spfli\n  WHERE carrid = @carrid AND\n        connid = @connid\n  INTO TABLE @itab.\n```\n\n----------------------------------------\n\nTITLE: Raising SHORTDUMPs for Unrecoverable Situations in ABAP\nDESCRIPTION: This example shows how to properly handle situations where recovery is impossible by raising a shortdump instead of an exception, with two different approaches depending on the NetWeaver version.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_35\n\nLANGUAGE: ABAP\nCODE:\n```\nRAISE SHORTDUMP TYPE cx_sy_create_object_error.  \" >= NW 7.53\nMESSAGE x666(general).                           \" < NW 7.53\n```\n\n----------------------------------------\n\nTITLE: Handling Same Input and Output Variables in ABAP Methods\nDESCRIPTION: Shows the potential issues when using the same variable for input and output in ABAP methods and how to avoid them.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_16\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA value TYPE i.\n\nsquare_dirty(\n  EXPORTING\n    number = value\n  IMPORTING\n    result = value ).\n\nMETHOD square_dirty.\n  CLEAR result.\n  result = number * number.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Problematic Boolean Usage in ABAP\nDESCRIPTION: Demonstrates a simplistic use of booleans that may become problematic when requirements change or additional states are needed.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_27\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nis_archived = abap_true.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Excessive DATA Declarations in ABAP\nDESCRIPTION: Shows an anti-pattern where a method has too many DATA declarations, indicating it's doing more than one thing and should be refactored.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_102\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA:\n  class           TYPE vseoclass,\n  attributes      TYPE seoo_attributes_r,\n  methods         TYPE seoo_methods_r,\n  events          TYPE seoo_events_r,\n  types           TYPE seoo_types_r,\n  aliases         TYPE seoo_aliases_r,\n  implementings   TYPE seor_implementings_r,\n  inheritance     TYPE vseoextend,\n  friendships     TYPE seof_friendships_r,\n  typepusages     TYPE seot_typepusages_r,\n  clsdeferrds     TYPE seot_clsdeferrds_r,\n  intdeferrds     TYPE seot_intdeferrds_r,\n  attribute       TYPE vseoattrib,\n  method          TYPE vseomethod,\n  event           TYPE vseoevent,\n  type            TYPE vseotype,\n  alias           TYPE seoaliases,\n  implementing    TYPE vseoimplem,\n  friendship      TYPE seofriends,\n  typepusage      TYPE vseotypep,\n  clsdeferrd      TYPE vseocdefer,\n  intdeferrd      TYPE vseoidefer,\n  new_clskey_save TYPE seoclskey.\n```\n\n----------------------------------------\n\nTITLE: Field Symbol Usage - Anti-pattern\nDESCRIPTION: Demonstrates discouraged usage of field symbols for dynamic data access in modern ABAP.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_18\n\nLANGUAGE: ABAP\nCODE:\n```\nASSIGN dref->* TO <fs>.\nresult = <fs>.\n```\n\n----------------------------------------\n\nTITLE: ABAP Camel Case Variable Declaration\nDESCRIPTION: Example showing variable declaration using camel case styling, which is common in modern programming languages but may get lost in ABAP due to case insensitivity.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/UpperVsLowerCase.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\ndata maxWaitTimeInSeconds type i.\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Spaces in ABAP\nDESCRIPTION: Shows how to write clean ABAP code by avoiding excessive spaces between operators, parameters, and parentheses. The clean version improves readability by using just the necessary spacing.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_61\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(result) = calculate( items ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA(result)        =      calculate(    items =   items )   .\n```\n\n----------------------------------------\n\nTITLE: Exception Handling - TYPE with MESSAGE\nDESCRIPTION: Demonstrates exception raising with MESSAGE parameter, showing a case where the TYPE variant might be preferred.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_117\n\nLANGUAGE: ABAP\nCODE:\n```\nRAISE EXCEPTION TYPE cx_generation_error\n  MESSAGE e136(messages)\n  EXPORTING\n    previous = exception.\n```\n\n----------------------------------------\n\nTITLE: Statement Separation in ABAP\nDESCRIPTION: Demonstrates the proper way to write statements in ABAP by placing each statement on its own line for better readability and maintainability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_60\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA do_this TYPE i.\ndo_this = input + 3.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA do_this TYPE i. do_this = input + 3.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using Getters for Immutable Data in ABAP\nDESCRIPTION: Shows the less efficient approach of using getter methods for immutable data instead of read-only attributes. This approach requires more code and is less straightforward.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_64\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /dirty/some_data_container DEFINITION.\n  PUBLIC SECTION.\n    METHODS get_a ...\n    METHODS get_b ...\n    METHODS get_c ...\n  PRIVATE SECTION.\n    DATA a TYPE i.\n    DATA b TYPE c.\n    DATA c TYPE d.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Verbose Method Call in ABAP Tests (Anti-pattern)\nDESCRIPTION: Demonstrates a cluttered test with direct method calls containing many parameters, making the test harder to read and maintain.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_78\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA(itab) = cut->map_xml_to_itab( xml_string = '<xml></xml>'\n                                   config     = VALUE #( 'some meaningless stuff' )\n                                   format     = VALUE #( 'more meaningless stuff' ) ).\n```\n\n----------------------------------------\n\nTITLE: Control Break Processing in ABAP\nDESCRIPTION: Shows modern group processing using LOOP GROUP BY compared to traditional control break logic implementation.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_10\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT accounts INTO DATA(account) GROUP BY grouping_id.\n  \" once per group before group ...\n  LOOP AT GROUP account INTO DATA(account_group).\n    \" for each group member ...\n  ENDLOOP.\n  \" once per group after group ...\nENDLOOP.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA previous_grouping_id TYPE i.\nDATA last_account TYPE account.\nLOOP AT accounts INTO data(account).\n  IF account-grouping_id <> previous_grouping_id.\n    previous_grouping_id = account-grouping_id\n    \" once per group before group ...\n    IF last_account IS NOT INITIAL.\n      \" once per group after group ...\n    ENDIF.\n  ENDIF.\n  \" for each group member ...\n  last_account = account.\nENDLOOP.\nIF last_account IS NOT INITIAL.\n  \" once per group after group\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Using Object Pattern Enumerations with Legacy Methods\nDESCRIPTION: Demonstrates accessing the underlying value of an object pattern enumeration for compatibility with legacy method signatures.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_9\n\nLANGUAGE: ABAP\nCODE:\n```\n\" legacy signature: ... IMPORTING severity TYPE symsgty ...\nIF log_contains( /clean/message_severity=>warning->value ).\n```\n\n----------------------------------------\n\nTITLE: Using Section Comments Instead of Methods in ABAP\nDESCRIPTION: This anti-pattern example shows code that uses comment sections instead of methods to separate functionality, which can lead to scope issues and makes the code harder to maintain.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_46\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\n\" -----------------\n\" Build statement\n\" -----------------\nDATA statement TYPE string.\nstatement = |SELECT * FROM d_document_roots|.\n\n\" -----------------\n\" Execute statement\n\" -----------------\nDATA(result_set) = adbc->execute_sql_query( statement ).\nresult_set->next_package( IMPORTING data = data ).\n```\n\n----------------------------------------\n\nTITLE: Setter Injection in ABAP (Anti-pattern)\nDESCRIPTION: Demonstrates the discouraged practice of using setter methods for dependency injection, which can lead to unexpected usage patterns in production code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_80\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nMETHODS set_customizing_reader\n  IMPORTING\n    customizing_reader TYPE REF TO if_fra_cust_obj_model_reader.\n\nMETHOD do_something.\n  object->set_customizing_reader( a ).\n  object->set_customizing_reader( b ). \" would you expect that somebody does this?\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: External Form Routine Access\nDESCRIPTION: Illustrates how form routines in function groups can be accessed from outside programs, showing lack of proper method encapsulation compared to classes.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/FunctionGroupsVsClasses.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nPERFORM set_buffer_true\n  IN PROGRAM <some_program>.\n```\n\n----------------------------------------\n\nTITLE: Visualizing abaplint Pipeline Flow\nDESCRIPTION: Mermaid flowchart showing the integration flow between ABAP, Git, and CI pipeline with abaplint\nSOURCE: https://github.com/sap/styleguides/blob/main/abap-code-review/ABAPCodeReview.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n %%{ init: { 'flowchart': { 'curve': 'natural' } } }%%\n flowchart LR \n    A(abap) -->|1: push| B([git])\n    B -->|2: trigger| C([pipeline])\n    B -->|3: pull| C\n    C --> |4: abaplint| C\n```\n\n----------------------------------------\n\nTITLE: Using Quote Comments with Proper Indentation in ABAP\nDESCRIPTION: This example demonstrates using quote comments (\") which align properly with the code they comment. The comments are placed above the code they describe and maintain consistent indentation with the surrounding code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_11\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_it.\n  IF input IS NOT INITIAL.\n    \" delegate pattern\n    output = calculate_result( input ).\n  ENDIF.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using exception handling for table access in ABAP\nDESCRIPTION: Demonstrates the preferred approach to handle the case when a record might not exist, using exception handling instead of double-checking, which is more efficient.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_14\n\nLANGUAGE: ABAP\nCODE:\n```\nTRY.\n    DATA(row) = my_table[ key = input ].\n  CATCH cx_sy_itab_line_not_found.\n    RAISE EXCEPTION NEW /clean/my_data_not_found( ).\nENDTRY.\n```\n\n----------------------------------------\n\nTITLE: Handling Large Tables with RETURNING in ABAP\nDESCRIPTION: Shows that using RETURNING for large tables in ABAP is generally acceptable and often more convenient than using EXPORTING.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_10\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS get_large_table\n  RETURNING\n    VALUE(result) TYPE /clean/some_table_type.\n\nMETHOD get_large_table.\n  result = me->large_table.\nENDMETHOD.\n\nDATA(my_table) = get_large_table( ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS get_large_table\n  EXPORTING\n    result TYPE /dirty/some_table_type.\n\nMETHOD get_large_table.\n  result = me->large_table.\nENDMETHOD.\n\nget_large_table( IMPORTING result = DATA(my_table) ).\n```\n\n----------------------------------------\n\nTITLE: Incorrect LOOP AT Pattern for Entry Checking in ABAP\nDESCRIPTION: Demonstrates a discouraged pattern of using LOOP AT with EXIT to check if a table entry exists, which is less efficient and clear than using LINE_EXISTS.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_15\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nLOOP AT my_table REFERENCE INTO DATA(line) WHERE key = 'A'.\n  line_exists = abap_true.\n  EXIT.\nENDLOOP.\n```\n\n----------------------------------------\n\nTITLE: Formatting Inline Declarations with VALUE and NEW in ABAP\nDESCRIPTION: Exemple d'indentation des déclarations en ligne avec VALUE et NEW en ABAP, en les alignant comme des appels de méthode pour améliorer la lisibilité du code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_16\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(result) = merge_structures( a = VALUE #( field_1 = 'X'\n                                              field_2 = 'A' )\n                                 b = NEW /clean/structure_type( field_3 = 'C'\n                                                                field_4 = 'D' ) ).\n```\n\n----------------------------------------\n\nTITLE: Splitting Methods Instead of Using OPTIONAL Parameters in ABAP\nDESCRIPTION: Shows how to split methods into separate, more specific methods instead of using OPTIONAL parameters to achieve method overloading in ABAP.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_8\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS do_one_thing IMPORTING what_i_need TYPE string.\nMETHODS do_another_thing IMPORTING something_else TYPE i.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS do_one_or_the_other\n  IMPORTING\n    what_i_need    TYPE string OPTIONAL\n    something_else TYPE i OPTIONAL.\n```\n\n----------------------------------------\n\nTITLE: Using LOOP AT WHERE for filtering records in ABAP\nDESCRIPTION: Shows the preferred method to filter records in a loop using the WHERE clause, which is more concise and expressive than using a nested IF.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_13\n\nLANGUAGE: ABAP\nCODE:\n```\nLOOP AT my_table REFERENCE INTO DATA(line) WHERE key = 'A'.\n```\n\n----------------------------------------\n\nTITLE: Inefficient Double Read Pattern for Table Access in ABAP\nDESCRIPTION: Demonstrates an inefficient pattern that performs two table reads - first checking if an entry exists and then reading it again, which should be avoided.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_21\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nIF NOT line_exists( my_table[ key = input ] ).\n  RAISE EXCEPTION NEW /clean/my_data_not_found( ).\nENDIF.\nDATA(row) = my_table[ key = input ].\n```\n\n----------------------------------------\n\nTITLE: Using Poor Variable Names with Redundant Comments in ABAP\nDESCRIPTION: This anti-pattern example shows how using a poor variable name ('result') requires an additional comment to explain its purpose, which could be avoided with a better name.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_44\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\n\" checks whether the table input contains entries\nDATA(result) = check_table( input ).\n```\n\n----------------------------------------\n\nTITLE: NOT Operator Anti-pattern in ABAP\nDESCRIPTION: Demonstrates the anti-pattern of using NOT with comparison operators, which requires additional mental processing to understand.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_43\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF NOT variable IS INITIAL.\nIF NOT variable CP 'TODO*'.\nIF NOT variable = 42.\n```\n\n----------------------------------------\n\nTITLE: Implementing Enumerations using the Constant Pattern\nDESCRIPTION: Shows how to implement an enumeration using class constants, which is a common pattern for pre-7.51 ABAP code. This approach uses a dedicated class with public constants.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/message_severity DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    CONSTANTS:\n      warning TYPE symsgty VALUE 'W',\n      error   TYPE symsgty VALUE 'E'.\nENDCLASS.\n\nCLASS /clean/message_severity IMPLEMENTATION.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Using COND for Boolean Assignments in ABAP\nDESCRIPTION: Shows an alternative to XSDBOOL using the COND ternary operator, which is intuitive but slightly more verbose.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_38\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(has_entries) = COND abap_bool( WHEN line IS NOT INITIAL THEN abap_true ).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Empty IF Branch in ABAP\nDESCRIPTION: An anti-pattern showing how not to structure IF statements with empty branches. This approach is less clear and requires more code than the preferred alternative.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_50\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF has_entries = abap_true.\nELSE.\n  \" do some magic\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Overly Commented Code with Poor Structure in ABAP\nDESCRIPTION: This anti-pattern example shows code that relies on excessive comments instead of clear structure, making it harder to understand and maintain despite the verbose explanations.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_42\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\n\" correct e.g. 29.02. in non-leap years as well as result of a date calculation would be\n\" something like e.g. the 31.06. that example has to be corrected to 30.06.\nMETHOD fix_day_overflow.\n  DO 3 TIMES.\n    \" 31 - 28 = 3 => this correction is required not more than 3 times\n    lv_dummy = cv_date.\n    \" lv_dummy is 0 if the date value is a not existing date - ABAP specific implementation\n    IF ( lv_dummy EQ 0 ).\n      cv_date+6(2) = cv_date+6(2) - 1. \" subtract 1 day from the given date\n    ELSE.\n      \" date exists => no correction required\n      EXIT.\n    ENDIF.\n  ENDDO.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Singleton Pattern Implementation in ABAP\nDESCRIPTION: Shows the proper implementation of a singleton pattern where multiple instances don't make sense.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_72\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD new.\n  IF singleton IS NOT BOUND.\n    singleton = NEW /clean/my_class( ).\n  ENDIF.\n  result = singleton.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Exposing External Exceptions in ABAP\nDESCRIPTION: This code shows an anti-pattern that violates the Law of Demeter by allowing external exceptions to propagate through the code, creating coupling with external components.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS generate RAISING cx_sy_gateway_failure.\n\nMETHOD generate.\n  generator->generate( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Implementing Enumerations using the Interface Pattern\nDESCRIPTION: Shows the interface pattern for implementing enumerations, which is common but considered slightly inferior to class-based approaches.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_10\n\nLANGUAGE: ABAP\nCODE:\n```\n\" inferior pattern\nINTERFACE /dirty/message_severity.\n  CONSTANTS:\n    warning TYPE symsgty VALUE 'W',\n    error   TYPE symsgty VALUE 'E'.\nENDINTERFACE.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Chained Variable Declarations in ABAP\nDESCRIPTION: Shows the discouraged approach of chaining variable declarations, which can complicate refactoring and makes changes more difficult.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA:\n  name   TYPE seoclsname,\n  reader TYPE REF TO reader.\n```\n\n----------------------------------------\n\nTITLE: Redundant Comment Describing What the Code Does in ABAP\nDESCRIPTION: This anti-pattern example shows a comment that simply restates what the code does, adding no value and potentially becoming outdated if the code changes but the comment doesn't.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_48\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\n\" select alert root from database by key\nSELECT * FROM d_alert_root WHERE key = key.\n```\n\n----------------------------------------\n\nTITLE: Complex Boolean Logic Leading to Confusion in ABAP\nDESCRIPTION: Demonstrates how boolean logic can become complex and confusing when handling multiple states or conditions, suggesting enumerations might be better.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_29\n\nLANGUAGE: ABAP\nCODE:\n```\nassert_true( xsdbool( document->is_archived( ) = abap_true AND\n                      document->is_partially_archived( ) = abap_true ) ).\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Multiple Statements Per Line in ABAP\nDESCRIPTION: This example shows the anti-pattern of placing multiple statements on a single line, which reduces readability and can make debugging more difficult.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_129\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA do_this TYPE i. do_this = input + 3.\n```\n\n----------------------------------------\n\nTITLE: Clearing or Overwriting EXPORTING Reference Parameters in ABAP\nDESCRIPTION: Demonstrates the importance of clearing or overwriting EXPORTING reference parameters in ABAP methods to provide reliable data.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_15\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS square\n  EXPORTING\n    result TYPE i.\n\n\" clear\nMETHOD square.\n  CLEAR result.\n  \" ...\nENDMETHOD.\n\n\" overwrite\nMETHOD square.\n  result = cl_abap_math=>square( 2 ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using single quotes for string literals in ABAP\nDESCRIPTION: Shows an anti-pattern of using single quotes for string literals, which requires an explicit type declaration and can cause confusion about the data type.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_17\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA some_string TYPE string.\nsome_string = 'ABC'.\n```\n\n----------------------------------------\n\nTITLE: Closing Brackets at Line End in ABAP\nDESCRIPTION: Demonstrates the preferred way of closing brackets at the end of the line for method calls with multiple parameters.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_136\n\nLANGUAGE: ABAP\nCODE:\n```\nmodify->update( node           = if_fra_alert_c=>node-item\n                key            = item->key\n                data           = item\n                changed_fields = changed_fields ).\n```\n\n----------------------------------------\n\nTITLE: Duplicating Message Texts in Comments in ABAP\nDESCRIPTION: This anti-pattern example shows duplicating message texts in comments, which is problematic because the message texts can change independently of the comments, causing them to become outdated.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_56\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\n\" alert category not filled\nMESSAGE e003 INTO dummy.\n```\n\n----------------------------------------\n\nTITLE: ABAP Boolean Setter Example\nDESCRIPTION: Shows an acceptable use case for boolean parameters in setter methods.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_95\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS set_is_deleted\n  IMPORTING\n    new_value TYPE abap_bool.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Constructor with Optional Parameters in ABAP\nDESCRIPTION: Shows the anti-pattern of using multiple optional parameters in a constructor, which creates ambiguity and reduces code clarity. This approach should be avoided.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_70\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS constructor\n  IMPORTING\n    data       TYPE any OPTIONAL\n    name       TYPE any OPTIONAL\n    object_ref TYPE REF TO object OPTIONAL\n    data_ref   TYPE REF TO data OPTIONAL\n  [...]\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using CREATE OBJECT in ABAP\nDESCRIPTION: Shows the more verbose CREATE OBJECT syntax that should be avoided when the NEW operator can be used instead. This older syntax is unnecessarily lengthy.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_66\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA object TYPE REF TO /dirty/some_number_range.\nCREATE OBJECT object\n  EXPORTING\n    number_range = '/DIRTY/CXTGEN'.\n```\n\n----------------------------------------\n\nTITLE: ABAP Poor Naming Anti-patterns\nDESCRIPTION: Shows examples of poor naming practices to avoid, focusing on technical encodings rather than meaningful descriptions.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nCONSTANTS sysubrc_04 TYPE sysubrc ...\nDATA iso3166tab TYPE STANDARD TABLE ...\nMETHODS read_t005 ...\nCLASS /dirty/t005_reader ...\n```\n\n----------------------------------------\n\nTITLE: Recommended Type Declaration Format in ABAP\nDESCRIPTION: Exemple de la façon recommandée de déclarer des variables avec leurs types en ABAP, sans aligner les clauses TYPE pour maintenir la cohésion entre chaque variable et son type.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_17\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA name TYPE seoclsname.\nDATA reader TYPE REF TO /clean/reader.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Including Design Documentation in ABAP Code Comments\nDESCRIPTION: This anti-pattern shows excessive design documentation embedded in code comments. Such lengthy explanations of design concepts are better suited for separate design documents rather than code comments.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_10\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\n\" This class serves a double purpose. First, it does one thing. Then, it does another thing.\n\" It does so by executing a lot of code that is distributed over the local helper classes.\n\" To understand what's going on, let us at first ponder the nature of the universe as such.\n\" Have a look at this and that to get the details.\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Grouping Multiple Enumerations in One Class\nDESCRIPTION: Shows an anti-pattern where multiple unrelated enumerations are combined in a single class, making code harder to search and creating unnecessary dependencies.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_15\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nCLASS /dirty/common_constants DEFINITION PUBLIC ABSTRACT FINAL.\n  PUBLIC SECTION.\n    CONSTANTS:\n      BEGIN OF message_severity,\n        warning TYPE symsgty VALUE 'W',\n        error   TYPE symsgty VALUE 'E',\n      END OF message_severity,\n      BEGIN OF document_type,\n        sales_order    TYPE char02 VALUE '01',\n        purchase_order TYPE char02 VALUE '02',\n      END OF document_type.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Exception Handling that Exposes External Dependencies in ABAP\nDESCRIPTION: This anti-pattern example shows how not to handle exceptions, as it directly exposes external exception types to callers, violating the Law of Demeter and creating tight coupling.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_40\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nMETHODS generate RAISING cx_sy_gateway_failure.\n\nMETHOD generate.\n  generator->generate( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Parameter Alignment in ABAP Method Calls\nDESCRIPTION: Shows how to align parameters in method calls for better readability. The recommended approach is to align parameter names and values consistently.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_69\n\nLANGUAGE: ABAP\nCODE:\n```\nmodify->update( node           = if_fra_alert_c=>node-item\n                key            = item->key\n                data           = item\n                changed_fields = changed_fields ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nmodify->update( node = if_fra_alert_c=>node-item\n                key = item->key\n                data = item\n                changed_fields = changed_fields ).\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Poor Naming Conventions in ABAP\nDESCRIPTION: Examples of poor naming practices in ABAP that focus too much on technical details or system tables rather than on purpose and meaning.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_de.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\n\" Anti-Pattern\nCONSTANTS sysubrc_04 TYPE sysubrc ...\nDATA iso3166tab TYPE STANDARD TABLE ...\nMETHODS read_t005 ...\nCLASS /dirty/t005_reader ...\n```\n\n----------------------------------------\n\nTITLE: Anti-patterns for ABAP Test Class Naming\nDESCRIPTION: Exemples de mauvaises pratiques dans le nommage des classes de test ABAP, comme la répétition d'informations redondantes ou l'utilisation de noms génériques qui n'apportent pas de valeur informative.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_20\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-patterns\nCLASS ltc_fra_online_detection_api DEFINITION FOR TESTING ... . \" We know that's the class under test - why repeat it?\nCLASS ltc_test DEFINITION FOR TESTING ....                      \" Of course it's a test, what else should it be?\n```\n\n----------------------------------------\n\nTITLE: Interface-Based Enumeration (Anti-Pattern)\nDESCRIPTION: Shows the discouraged pattern of implementing enumerations using interfaces. While this approach provides shorter syntax, it violates object-oriented principles.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_18\n\nLANGUAGE: ABAP\nCODE:\n```\nINTERFACE /dirty/message_severity.\n  CONSTANTS:\n    warning TYPE symsgty VALUE 'W',\n    error   TYPE symsgty VALUE 'E'.\nENDINTERFACE.\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern: Using Pragmas in ABAP\nDESCRIPTION: This example shows the recommended use of pragmas instead of pseudo comments to suppress ATC warnings. Pragmas are the modern approach preferred over the obsolete pseudo comments.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_125\n\nLANGUAGE: ABAP\nCODE:\n```\n\" pattern\nMESSAGE e001(ad) INTO DATA(message) ##NEEDED.\n\n\" anti-pattern\nMESSAGE e001(ad) INTO DATA(message). \"#EC NEEDED\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Declaration Formatting with Leading Commas in ABAP\nDESCRIPTION: This example shows a discouraged formatting style with leading commas. This style optimization for writing rather than reading, making the code less readable.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_127\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA:\n  a TYPE b\n  ,c TYPE d\n  ,e TYPE f.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using nested IF in LOOP AT for filtering in ABAP\nDESCRIPTION: Demonstrates an anti-pattern of filtering records using a nested IF inside a LOOP AT, which is less efficient and clear than using the WHERE clause.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_12\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nLOOP AT my_table REFERENCE INTO DATA(line).\n  IF line->key = 'A'.\n    EXIT.\n  ENDIF.\nENDLOOP.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern for Type Declaration Format in ABAP\nDESCRIPTION: Exemple de format déconseillé pour les déclarations de type, où les clauses TYPE sont alignées, ce qui suggère un groupement vertical inapproprié et cause une charge de maintenance inutile.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_18\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA name   TYPE seoclsname.\nDATA reader TYPE REF TO /clean/reader.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Table declaration with DEFAULT KEY in ABAP\nDESCRIPTION: Shows an anti-pattern of declaring an internal table with DEFAULT KEY, which can waste resources and lead to hard-to-detect errors with numeric data types.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA itab TYPE STANDARD TABLE OF row_type WITH DEFAULT KEY.\n```\n\n----------------------------------------\n\nTITLE: ABAP Flat Case Anti-pattern\nDESCRIPTION: Demonstrates the anti-pattern of using flat case naming which reduces readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA maxresponsetimeinmilliseconds TYPE i.\n```\n\n----------------------------------------\n\nTITLE: ABAP Boolean Parameter Call Anti-Pattern\nDESCRIPTION: Shows how boolean parameters can make method calls unclear and ambiguous.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_93\n\nLANGUAGE: ABAP\nCODE:\n```\nupdate( abap_true ).  \" what does 'true' mean? synchronous? simulate? commit?\n```\n\n----------------------------------------\n\nTITLE: Avoiding inline declaration in optional branches in ABAP\nDESCRIPTION: Demonstrates why inline variable declarations should not be used in optional branches, and how to declare variables at the beginning of the method instead.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF has_entries = abap_true.\n  DATA(value) = 1.\nELSE.\n  value = 2.\nENDIF.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA value TYPE i.\nIF has_entries = abap_true.\n  value = 1.\nELSE.\n  value = 2.\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Mixing Parameter Types in ABAP Method\nDESCRIPTION: Shows an anti-pattern with mixed RETURNING, EXPORTING, and CHANGING parameters, making the method confusing and suggesting it does multiple unrelated things. This approach complicates method calls.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_88\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS copy_class\n  ...\n  RETURNING\n    VALUE(result)      TYPE vseoclass\n  EXPORTING\n    error_occurred     TYPE abap_bool\n  CHANGING\n    correction_request TYPE trkorr\n    package            TYPE devclass.\n```\n\n----------------------------------------\n\nTITLE: Formatting Single Parameter Method Calls in ABAP\nDESCRIPTION: Shows how to format method calls with a single parameter. The recommendation is to keep single parameter calls on one line for better readability and space efficiency.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_65\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(unique_list) = remove_duplicates( list ).\nremove_duplicates( CHANGING list = list ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA(unique_list) = remove_duplicates(\n                           list ).\nDATA(unique_list) = remove_duplicates(\n                         CHANGING\n                           list = list ).\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Excessive Blank Lines in ABAP\nDESCRIPTION: This example shows the anti-pattern of using excessive blank lines between statements, which wastes vertical space and doesn't improve readability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_133\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA(result) = do_something( ).\n\n\n\nDATA(else) = calculate_this( result ).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Function Call in ABAP\nDESCRIPTION: Demonstrates how to dynamically call functions in ABAP using variable function names, showing weak substitution capabilities of function groups.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/FunctionGroupsVsClasses.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA function_name TYPE char30.\nCALL FUNCTION function_name [...]\n```\n\n----------------------------------------\n\nTITLE: Task Release Workflow\nDESCRIPTION: Mermaid flowchart detailing the workflow steps for releasing tasks in abapGit\nSOURCE: https://github.com/sap/styleguides/blob/main/abap-code-review/ABAPCodeReview.md#2025-04-22_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'flowchart': { 'curve': 'basis' } } }%%\nflowchart TB\nA((\" \")):::startClass --> B([Determine repository])\nB --> S{{\"Does branch exist?\"}}\nS -->|no| C([Create Branch])\nC --> D{\" \"}\nS --> |yes|D\nD --> E([push change to branch])\nE --> F{{Does PR exist?}}\nF -->|no| G([Create PR])\nF -->|yes|K{\" \"}\nG --> K\nK --> H(((\" \"))):::endClass\nclassDef startClass fill:black,stroke:#333,stroke-width:4px;\nclassDef endClass fill:black,stroke:#333,stroke-width:4px;\n```\n\n----------------------------------------\n\nTITLE: Defining ABAP Abstract Class\nDESCRIPTION: Shows how to define an abstract class with an abstract method. Includes both definition and implementation sections.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/InterfacesVsAbstractClasses.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS /clean/blog_post DEFINITION PUBLIC ABSTRACT CREATE PROTECTED.\n  PUBLIC SECTION.\n    METHODS publish ABSTRACT.\nENDCLASS.\n\nCLASS /clean/blog_post IMPLEMENTATION.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: ABAP Uppercase Variable Name\nDESCRIPTION: Demonstrates how camel case gets lost when code is formatted and stored in the database due to ABAP's case insensitivity.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/UpperVsLowerCase.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nMAXWAITTIMEINSECONDS\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: End-of Comments in ABAP\nDESCRIPTION: This snippet demonstrates the unnecessary use of end-of comments that indicate which statement a closing keyword belongs to. In modern ABAP with shorter methods, these comments add noise rather than value.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_122\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHOD get_kpi_calc.\n  IF has_entries = abap_false.\n    result = 42.\n  ENDIF.  \" IF has_entries = abap_false\nENDMETHOD.   \" get_kpi_calc\n```\n\n----------------------------------------\n\nTITLE: ABAP Snake Case Examples\nDESCRIPTION: Shows snake case formatting in both lower and upper case, which preserves word boundaries better than camel case in ABAP.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/UpperVsLowerCase.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nmax_wait_time_in_seconds\nMAX_WAIT_TIME_IN_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Accessing Private Variables in Function Groups\nDESCRIPTION: Shows how function group variables can be accessed from outside using field symbols, demonstrating weak encapsulation of function groups compared to classes.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/FunctionGroupsVsClasses.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nASSIGN ('(<report_name>)gv_global_variable')\n  TO <field_symbol>`.\n```\n\n----------------------------------------\n\nTITLE: Two-Way Synchronization Flow\nDESCRIPTION: Mermaid flowchart showing bidirectional synchronization between a single developer and Git\nSOURCE: https://github.com/sap/styleguides/blob/main/abap-code-review/ABAPCodeReview.md#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'flowchart': { 'curve': 'cardinal' } } }%%\n graph LR\n    A(fa:fa-user One Developer) --> B(abap)\n    B --->|push| C([git])\n    C -->|pull| B\n```\n\n----------------------------------------\n\nTITLE: FRIENDS Injection in ABAP (Anti-pattern)\nDESCRIPTION: Shows the problematic approach of using FRIENDS injection to replace dependencies after initialization, which can lead to unexpected behaviors and is fragile during refactoring.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_81\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nMETHOD setup.\n  cut = NEW fra_my_class( ). \" <- builds a productive customizing_reader first - what will it break with that?\n  cut->customizing_reader ?= cl_abap_testdouble=>create( 'if_fra_cust_obj_model_reader' ).\nENDMETHOD.\n\nMETHOD constructor.\n  customizing_reader = fra_cust_obj_model_reader=>s_get_instance( ).\n  customizing_reader->fill_buffer( ). \" <- won't be called on your test double, so no chance to test this\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Poorly Indented Comment Using Asterisks in ABAP\nDESCRIPTION: This anti-pattern example shows how comments using asterisks (*) can lead to improper indentation, reducing code readability compared to using quotation marks.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_50\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nMETHOD do_it.\n  IF input IS NOT INITIAL.\n* delegate pattern\n    output = calculate_result( input ).\n  ENDIF.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Inline Variable Declaration in ABAP Methods\nDESCRIPTION: Shows how to use inline variable declaration in short ABAP methods for better readability and conciseness.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_ja.md#2025-04-22_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n  DATA(name) = 'something'.\n  DATA(reader) = /clean/reader=>get_instance_for( name ).\n  result = reader->read_it( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using Self-Reference to Avoid Name Clashes in ABAP\nDESCRIPTION: Shows how to use the 'me->' self-reference to distinguish between class attributes and method parameters with the same name, eliminating the need for prefixes.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/AvoidEncodings.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS game_board_as_list DEFINITION.\n  PUBLIC SECTION.\n    METHODS constructor\n      IMPORTING x_dimension TYPE i\n                y_dimension TYPE i.\n  PRIVATE SECTION.\n    DATA x_dimension TYPE i.\n    DATA y_dimension TYPE i.\nENDCLASS.\n\nCLASS game_board_as_list IMPLEMENTATION.\n  METHOD constructor.\n    me->x_dimension = x_dimension.\n    me->y_dimension = y_dimension.\n  ENDMETHOD.\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Using named constants instead of magic numbers in ABAP\nDESCRIPTION: Demonstrates using a named constant (cl_abap_typedescr=>typekind_date) instead of a magic string value ('D') for improved clarity.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nIF abap_type = cl_abap_typedescr=>typekind_date.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF abap_type = 'D'.\n```\n\n----------------------------------------\n\nTITLE: One-Way Synchronization Flow\nDESCRIPTION: Mermaid flowchart illustrating one-way synchronization pattern from multiple developers to Git\nSOURCE: https://github.com/sap/styleguides/blob/main/abap-code-review/ABAPCodeReview.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'flowchart': { 'curve': 'basis' } } }%%\ngraph TD\n    A(fa:fa-user Developer 1) --> B(abap)\n    C(fa:fa-user Developer 2) --> B\n    D(fa:fa-user Developer 3) --> B\n    B -->|push| E([git])\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Parameters in ABAP Method Calls\nDESCRIPTION: Demonstrates how to format method calls with multiple parameters. The recommendation is to place each parameter on a separate line for better readability and to clearly distinguish between parameters.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_68\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(sum) = add_two_numbers( value_1 = 5\n                             value_2 = 6 ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA(sum) = add_two_numbers( value_1 = 5 value_2 = 6 ).\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Method Signature Comments in ABAP\nDESCRIPTION: This anti-pattern example shows redundant method signature comments that add no value in modern IDEs, which can already display this information in a more accessible way.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_54\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\n* <SIGNATURE>---------------------------------------------------------------------------------------+\n* | Static Public Method CALIBRATION_KPIS=>CALCULATE_KPI\n* +-------------------------------------------------------------------------------------------------+\n* | [--->] STRATEGY_ID                 TYPE        STRATEGY_ID\n* | [--->] THRESHOLD                   TYPE        STRATEGY_THRESHOLD\n* | [--->] DETECTION_OBJECT_SCORE      TYPE        T_HIT_RESULT\n* | [<---] KPI                         TYPE        T_SIMULATED_KPI\n* +--------------------------------------------------------------------------------------</SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Code Review Workflow with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the standard code review process in CI/CD environments. It shows the flow from request creation through automated checks and peer review to either submission or rework.\nSOURCE: https://github.com/sap/styleguides/blob/main/abap-code-review/ABAPCodeReview.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'flowchart': { 'curve': 'basis' } } }%%\nflowchart TB\n\nA((\" \")):::startClass --> B([Request])\nB --> S{\" \"}\nS --> C([Automated Checks])\nC --> D([Peer Review])\nD --> E{{OK?}}\nE -->|Yes| F([\"Submit (merge)\"])\nE -->|No | G([Rework])\nG -->S\nF --> H(((\" \"))):::endClass\nclassDef startClass fill:black,stroke:#333,stroke-width:4px;\nclassDef endClass fill:black,stroke:#333,stroke-width:4px;\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatting for External Link\nDESCRIPTION: Shows how to format an external link in Markdown, specifically referencing the source of inspiration for the Clean ABAP guide.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[Robert C. Martin's _Clean Code_]: https://www.oreilly.com/library/view/clean-code/9780136083238/\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Deeply Nested IF Statements in ABAP\nDESCRIPTION: An anti-pattern demonstrating excessive nesting of IF statements, which reduces code readability and makes testing more complex. Such nesting should be avoided.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_53\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF <this>.\n  IF <that>.\n  ENDIF.\nELSE.\n  IF <other>.\n  ELSE.\n    IF <something>.\n    ENDIF.\n  ENDIF.\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Unnecessary End-of-Block Comments in ABAP\nDESCRIPTION: This anti-pattern example shows redundant comments at the end of conditional blocks and methods, which are unnecessary in modern coding styles with shorter, focused methods.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_55\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nMETHOD get_kpi_calc.\n  IF has_entries = abap_false.\n    result = 42.\n  ENDIF.  \" IF has_entries = abap_false\nENDMETHOD.   \" get_kpi_calc\n```\n\n----------------------------------------\n\nTITLE: Using READ TABLE to access a single record in ABAP\nDESCRIPTION: Demonstrates the preferred way to access a single record from a table using READ TABLE, which is clearer and more efficient than using LOOP AT.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_10\n\nLANGUAGE: ABAP\nCODE:\n```\nREAD TABLE my_table REFERENCE INTO DATA(line) WITH KEY key = 'A'.\n```\n\n----------------------------------------\n\nTITLE: Placing Comments Before Referenced Statements in ABAP\nDESCRIPTION: This example demonstrates the recommended practice of placing comments above the code they describe. This makes the comments more visible and clearly associates them with the following statement.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_13\n\nLANGUAGE: ABAP\nCODE:\n```\n\" delegate pattern\noutput = calculate_result( input ).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Multiple EXPORTING Parameters in ABAP Method\nDESCRIPTION: Shows an anti-pattern with multiple EXPORTING parameters that makes the method call verbose and error-prone. This approach is less clear than returning a single structured result.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_81\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS check_business_partners\n  IMPORTING\n    business_partners TYPE business_partners\n  EXPORTING\n    result            TYPE result_type\n    failed_keys       TYPE /bobf/t_frw_key\n    messages          TYPE /bobf/t_frw_message.\n```\n\n----------------------------------------\n\nTITLE: Creating Issue-Closing Pull Request References in Markdown\nDESCRIPTION: This snippet demonstrates how to reference and automatically close a GitHub issue when creating a pull request by using a special syntax in the commit or PR description.\nSOURCE: https://github.com/sap/styleguides/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFixes https://github.com/SAP/styleguides/issues/(issueNumber)\n```\n\n----------------------------------------\n\nTITLE: Appropriate Use of CHANGING Parameters in ABAP\nDESCRIPTION: Shows the appropriate use of CHANGING parameters in ABAP methods for updating existing local variables.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_12\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS update_references\n  IMPORTING\n    new_reference TYPE /bobf/conf_key\n  CHANGING\n    bo_nodes      TYPE root_nodes.\n\nMETHOD update_references.\n  LOOP AT bo_nodes REFERENCE INTO DATA(bo_node).\n    bo_node->reference = new_reference.\n  ENDLOOP.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Using FIXME, TODO, and XXX Tags in ABAP Comments\nDESCRIPTION: This example demonstrates using special comment tags (FIXME, TODO, XXX) with author identification to mark code that needs attention. These tags help identify areas that need improvement or future work.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_15\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n  \" XXX FH delete this method - it does nothing\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Inline variable declaration in ABAP\nDESCRIPTION: Shows how to use inline variable declaration for improved readability in short methods.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_zh.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD do_something.\n  DATA(name) = 'something'.\n  DATA(reader) = /clean/reader=>get_instance_for( name ).\n  result = reader->read_it( ).\nENDMETHOD.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHOD do_something.\n  DATA:\n    name   TYPE seoclsname,\n    reader TYPE REF TO /dirty/reader.\n  name = 'something'.\n  reader = /dirty/reader=>get_instance_for( name ).\n  result = reader->read_it( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Indenting In-line Declarations in ABAP\nDESCRIPTION: Shows how to properly indent in-line declarations using VALUE or NEW operators, treating them like method calls.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_140\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(result) = merge_structures( a = VALUE #( field_1 = 'X'\n                                              field_2 = 'A' )\n                                 b = NEW /clean/structure_type( field_3 = 'C'\n                                                                field_4 = 'D' ) ).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Double-checking table entries in ABAP\nDESCRIPTION: Shows an anti-pattern of checking if a record exists before accessing it, which leads to double table access and clutters the main control flow.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_15\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF NOT line_exists( my_table[ key = input ] ).\n  RAISE EXCEPTION NEW /clean/my_data_not_found( ).\nENDIF.\nDATA(row) = my_table[ key = input ].\n```\n\n----------------------------------------\n\nTITLE: Using INSERT INTO TABLE Instead of APPEND TO in ABAP\nDESCRIPTION: Illustrates the preference for using INSERT INTO TABLE over APPEND TO in ABAP, as it works with all table types and key definitions, making refactoring easier.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_de.md#2025-04-22_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\nINSERT VALUE #( ... ) INTO TABLE itab.\n```\n\n----------------------------------------\n\nTITLE: Consistent Method Naming Pattern\nDESCRIPTION: Example of using consistent verb naming across related methods to maintain clarity and searchability.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_9\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS read_this.\nMETHODS read_that.\nMETHODS read_those.\n```\n\n----------------------------------------\n\nTITLE: Character-Based Boolean Anti-pattern in ABAP\nDESCRIPTION: Shows the anti-pattern of using 'X' and space for Boolean values, which makes it difficult to recognize Boolean expressions.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_34\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nhas_entries = 'X'.\nIF has_entries = space.\n```\n\n----------------------------------------\n\nTITLE: ABAP Enumerations\nDESCRIPTION: Demonstrates modern enumeration definition compared to old-style constants approach.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/ModernABAPLanguageElements.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nTYPES:\n  BEGIN OF ENUM scrum_status_type,\n    open,\n    in_progress,\n    blocked,\n    done,\n  END OF ENUM scrum_status_type.\n\nDATA(scrum_status) = open.\n```\n\n----------------------------------------\n\nTITLE: Interface and Implementing Classes Without Prefixes in ABAP\nDESCRIPTION: Demonstrates how to name interfaces and implementing classes without prefixes by using more specific and descriptive names to avoid naming conflicts.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/AvoidEncodings.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nINTERFACE game_board.\n  ...\nENDINTERFACE.\n\nCLASS game_board_as_list DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES game_board.\n  ...\nENDCLASS.\n\nCLASS game_board_as_array DEFINITION.\n  PUBLIC SECTION.\n    INTERFACES game_board.\n  ...\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Anti-pattern in ABAP\nDESCRIPTION: Shows the anti-pattern of concatenating strings with &&, which is less readable than using string templates, especially with multiple variables.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_28\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA(message) = `Received an unexpected HTTP ` && status_code && ` with message ` && text.\n```\n\n----------------------------------------\n\nTITLE: Avoiding DEFAULT KEY in ABAP Table Declarations\nDESCRIPTION: Demonstrates how to avoid using DEFAULT KEY when declaring internal tables in ABAP, which can waste resources and lead to unexpected errors.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_de.md#2025-04-22_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA itab1 TYPE STANDARD TABLE OF row_type WITH EMPTY KEY.\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA itab2 TYPE STANDARD TABLE OF row_type WITH NON-UNIQUE KEY comp1 comp2.\n```\n\n----------------------------------------\n\nTITLE: Test Helper Class Implementation in ABAP\nDESCRIPTION: Demonstrates how to create abstract helper classes for unit tests with shared assertion methods that can be inherited by specific test classes.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_76\n\nLANGUAGE: ABAP\nCODE:\n```\n\" inheritance example\n\nCLASS lth_unit_tests DEFINITION ABSTRACT.\n\n  PROTECTED SECTION.\n    CLASS-METHODS assert_activity_entity\n      IMPORTING\n        actual_activity_entity TYPE REF TO zcl_activity_entity\n        expected_activity_entity TYPE REF TO zcl_activity_entity.\n    ...\nENDCLASS.\n\nCLASS lth_unit_tests IMPLEMENTATION.\n\n  METHOD assert_activity_entity.\n    ...\n  ENDMETHOD.\n\nENDCLASS.\n\nCLASS ltc_unit_tests DEFINITION INHERITING FROM lth_unit_tests FINAL FOR TESTING\n  DURATION SHORT\n  RISK LEVEL HARMLESS.\n  ...\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nested IF in LOOP AT Pattern in ABAP\nDESCRIPTION: Shows a discouraged pattern of using a nested IF statement within LOOP AT to filter entries, which is less clear and efficient than using the WHERE clause.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_18\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nLOOP AT my_table REFERENCE INTO DATA(line).\n  IF line->key = 'A'.\n    EXIT.\n  ENDIF.\nENDLOOP.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Reinventing Validation with Regular Expressions in ABAP\nDESCRIPTION: An anti-pattern showing the unnecessary implementation of custom validation logic with regular expressions when standard SAP functions already exist for this purpose.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_58\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA(is_valid) = matches( val     = class_name\n                          pattern = '[A-Z][A-Z0-9_]{0,29}' ).\n```\n\n----------------------------------------\n\nTITLE: Exception Handling - Traditional TYPE Syntax\nDESCRIPTION: Shows the longer traditional syntax for raising exceptions, which may be preferred when using the MESSAGE addition.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_116\n\nLANGUAGE: ABAP\nCODE:\n```\nRAISE EXCEPTION TYPE cx_generation_error\n  EXPORTING\n    previous = exception.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Declaration Formatting in ABAP\nDESCRIPTION: Demonstrates the discouraged practice of aligning TYPE declarations, which creates unnecessary maintenance overhead and visually separates variables from their types.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_74\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA name   TYPE seoclsname.\nDATA reader TYPE REF TO /clean/reader.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using OPTIONAL Parameters in ABAP Methods\nDESCRIPTION: Shows an anti-pattern where OPTIONAL parameters create confusion about which parameters are required and which combinations are valid. This makes the method harder to use correctly.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_79\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS do_one_or_the_other\n  IMPORTING\n    what_i_need    TYPE string OPTIONAL\n    something_else TYPE i OPTIONAL.\n```\n\n----------------------------------------\n\nTITLE: Unit Test Implementation for Enumeration Constants\nDESCRIPTION: Comprehensive test class implementation that validates the enumeration constants against domain fixed values. Includes setup method and two test methods to ensure bidirectional consistency.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_17\n\nLANGUAGE: ABAP\nCODE:\n```\nCLASS ltcl_constant_pattern DEFINITION CREATE PRIVATE\n FOR TESTING\n RISK LEVEL HARMLESS\n DURATION SHORT.\n\n  PUBLIC SECTION.\n  PROTECTED SECTION.\n  PRIVATE SECTION.\n    CONSTANTS class_name TYPE classname VALUE '/CLEAN/MESSAGE_SEVERITY'.\n    CONSTANTS domain_name TYPE domname  VALUE 'DOM_MSG_SEVERITY'.\n    DATA domain_values TYPE STANDARD TABLE OF dd07v.\n    DATA constants_of_enum_class TYPE abap_attrdescr_tab.\n\n    METHODS setup.\n    METHODS all_values_as_constant FOR TESTING.\n    METHODS all_constants_in_domain FOR TESTING.\nENDCLASS.\n\nCLASS ltcl_constant_pattern IMPLEMENTATION.\n  METHOD setup.\n    CALL FUNCTION 'DD_DOMVALUES_GET'\n      EXPORTING\n        domname   = domain_name\n      TABLES\n        dd07v_tab = domain_values\n      EXCEPTIONS\n        OTHERS    = 1.\n    ASSERT sy-subrc = 0.\n\n    DATA class_descr TYPE REF TO cl_abap_classdescr.\n    class_descr ?= cl_abap_typedescr=>describe_by_name( class_name ).\n\n    constants_of_enum_class = class_descr->attributes.\n  ENDMETHOD.\n\n  METHOD all_constants_in_domain.\n    LOOP AT constants_of_enum_class INTO DATA(component).\n    \n      ASSIGN (class_name)=>(component-name) TO FIELD-SYMBOL(<value>).\n      ASSERT sy-subrc = 0.\n      \n      IF NOT line_exists( domain_values[ domvalue_l = <value> ] ).\n        cl_abap_unit_assert=>fail( |Component { component-name } not found in domain fix values| ).\n      ENDIF.\n    ENDLOOP.\n\n  ENDMETHOD.\n\n  METHOD all_values_as_constant.\n    DATA value_found TYPE abap_bool.\n\n    LOOP AT domain_values INTO DATA(domain_value).\n\n      CLEAR value_found.\n      LOOP AT constants_of_enum_class INTO DATA(component).\n\n        ASSIGN (class_name)=>(component-name) TO FIELD-SYMBOL(<value>).\n        ASSERT sy-subrc = 0.\n\n        IF  domain_value-domvalue_l = <value>.\n          value_found = abap_true.\n          EXIT.\n        ENDIF.\n      ENDLOOP.\n      IF value_found = abap_false.\n        cl_abap_unit_assert=>fail( |Domainvalue { domain_value-domvalue_l } not available as constant| ).\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\nENDCLASS.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using LOOP AT to check existence in ABAP\nDESCRIPTION: Shows an anti-pattern of using LOOP AT to check if a record exists, which is verbose and less efficient than using LINE_EXISTS.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_9\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nLOOP AT my_table REFERENCE INTO DATA(line) WHERE key = 'A'.\n  line_exists = abap_true.\n  EXIT.\nENDLOOP.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Nested IF Instead of Combined Condition in ABAP\nDESCRIPTION: An anti-pattern showing unnecessary nesting of IF statements that could be simplified with a combined logical condition. This approach creates harder-to-read code.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_55\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF <this>.\n  IF <that>.\n```\n\n----------------------------------------\n\nTITLE: Complex Inline Conditions Anti-pattern in ABAP\nDESCRIPTION: Shows the anti-pattern of leaving complex conditions inline, which makes the code harder to read and maintain compared to decomposed conditions.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_47\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF ( example_a IS NOT INITIAL OR\n     example_b IS NOT INITIAL ) AND\n   ( applies( example_a ) = abap_true OR\n     applies( example_b ) = abap_true OR\n     fits( example_b ) = abap_true ).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using LOOP AT with EXIT for single record access in ABAP\nDESCRIPTION: Shows an anti-pattern of using LOOP AT with EXIT to access a single record, which is less expressive and potentially less efficient than READ TABLE.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_11\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nLOOP AT my_table REFERENCE INTO DATA(line) WHERE key = 'A'.\n  EXIT.\nENDLOOP.\n```\n\n----------------------------------------\n\nTITLE: Incorrect READ TABLE Pattern for Entry Checking in ABAP\nDESCRIPTION: Shows a discouraged pattern using READ TABLE with sy-subrc checks to determine if a table entry exists, which is less clear than using LINE_EXISTS.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_14\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nREAD TABLE my_table TRANSPORTING NO FIELDS WITH KEY key = 'A'.\nIF sy-subrc = 0.\n```\n\n----------------------------------------\n\nTITLE: Traditional Exception Raising with TYPE Keyword in ABAP\nDESCRIPTION: This example shows the traditional, more verbose way of raising exceptions with the TYPE keyword, which may still be preferred when using additional MESSAGE parameters.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_37\n\nLANGUAGE: ABAP\nCODE:\n```\nRAISE EXCEPTION TYPE cx_generation_error\n  EXPORTING\n    previous = exception.\n```\n\n----------------------------------------\n\nTITLE: Breaking Long Method Calls in ABAP\nDESCRIPTION: Demonstrates how to format long method calls by breaking the call itself onto a new line when necessary. This improves readability when dealing with long method or parameter names.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_70\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(some_super_long_param_name) =\n  if_some_annoying_interface~add_two_numbers_in_a_long_name(\n      value_1 = 5\n      value_2 = 6 ).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern - Poorly Commented Code\nDESCRIPTION: Shows an example of poorly written code with excessive comments instead of clear method names.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_120\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHOD fix_day_overflow.\n  DO 3 TIMES.\n    lv_dummy = cv_date.\n    IF ( lv_dummy EQ 0 ).\n      cv_date+6(2) = cv_date+6(2) - 1.\n    ELSE.\n      EXIT.\n    ENDIF.\n  ENDDO.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Parameter Positioning in Method Calls in ABAP\nDESCRIPTION: Demonstrates the proper positioning of parameters in method calls, with parameters placed on the same line as the call when possible, and on subsequent lines when needed due to length constraints.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_66\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(sum) = add_two_numbers( value_1 = 5\n                             value_2 = 6 ).\n```\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA(sum) = add_two_numbers(\n                value_1 = round_up( input DIV 7 ) * 42 + round_down( 19 * step_size )\n                value_2 = VALUE #( ( `Calculation failed with a very weird result` ) ) ).\n```\n\n----------------------------------------\n\nTITLE: Unnecessary String Template Usage in ABAP\nDESCRIPTION: Shows an unnecessary use of string templates for fixed values, which adds overhead and cannot be used with CONSTANTS.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_24\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA(some_string) = |ABC|.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Overly Specific Content Assertions in ABAP\nDESCRIPTION: Illustrates an anti-pattern where test cases are too specific about content, making them brittle during refactoring. Tests that are too specific can break even when the behavior remains correct.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_156\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nassert_equals( act = table\n               exp = VALUE string_table( ( `ABC` ) ( `DEF` ) ( `GHI` ) ) ).\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Method Signature Comments in ABAP\nDESCRIPTION: This example shows deprecated method signature comments that add unnecessary verbosity to the code. Modern ABAP IDEs make these comments redundant as they can display method signatures on demand.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_121\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\n* <SIGNATURE>---------------------------------------------------------------------------------------+\n* | Static Public Method CALIBRATION_KPIS=>CALCULATE_KPI\n* +-------------------------------------------------------------------------------------------------+\n* | [--->] STRATEGY_ID                 TYPE        STRATEGY_ID\n* | [--->] THRESHOLD                   TYPE        STRATEGY_THRESHOLD\n* | [--->] DETECTION_OBJECT_SCORE      TYPE        T_HIT_RESULT\n* | [<---] KPI                         TYPE        T_SIMULATED_KPI\n* +--------------------------------------------------------------------------------------</SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Appropriate Use of CHANGING Parameter in ABAP\nDESCRIPTION: Demonstrates proper use of CHANGING parameter to update an existing local variable that is already filled. This is one of the few appropriate use cases for CHANGING.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_91\n\nLANGUAGE: ABAP\nCODE:\n```\nMETHODS update_references\n  IMPORTING\n    new_reference TYPE /bobf/conf_key\n  CHANGING\n    bo_nodes      TYPE root_nodes.\n\nMETHOD update_references.\n  LOOP AT bo_nodes REFERENCE INTO DATA(bo_node).\n    bo_node->reference = new_reference.\n  ENDLOOP.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using string templates for simple literals in ABAP\nDESCRIPTION: Demonstrates an anti-pattern of using string templates (|) for simple string literals, which adds unnecessary overhead and cannot be used for CONSTANTS.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_18\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA(some_string) = |ABC|.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using EXPORTING instead of RETURNING in ABAP\nDESCRIPTION: Shows an anti-pattern where EXPORTING is used instead of RETURNING, resulting in more verbose and less flexible code. This approach prevents method chaining and makes calls longer.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_84\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS square\n  IMPORTING\n    number TYPE i\n  EXPORTING\n    result TYPE i.\n\nsquare(\n  EXPORTING\n    number = 42\n  IMPORTING\n    result = DATA(result) ).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Overcommenting Complex ABAP Code\nDESCRIPTION: This anti-pattern shows how excessive commenting is used to explain complex code rather than simplifying the code structure. The method uses comments to explain its purpose instead of creating well-named helper methods.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\n\" correct e.g. 29.02. in non-leap years as well as result of a date calculation would be\n\" something like e.g. the 31.06. that example has to be corrected to 30.06.\nMETHOD fix_day_overflow.\n  DO 3 TIMES.\n    \" 31 - 28 = 3 => this correction is required not more than 3 times\n    lv_dummy = cv_date.\n    \" lv_dummy is 0 if the date value is a not existing date - ABAP specific implementation\n    IF ( lv_dummy EQ 0 ).\n      cv_date+6(2) = cv_date+6(2) - 1. \" subtract 1 day from the given date\n    ELSE.\n      \" date exists => no correction required\n      EXIT.\n    ENDIF.\n  ENDDO.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: IF-THEN-ELSE Boolean Assignment Anti-pattern in ABAP\nDESCRIPTION: Shows the anti-pattern of using verbose IF-THEN-ELSE constructs for Boolean assignments when XSDBOOL would be more concise.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_37\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF line IS INITIAL.\n  has_entries = abap_false.\nELSE.\n  has_entries = abap_true.\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: EXPORTING Large Tables in ABAP\nDESCRIPTION: Shows a more cumbersome approach of EXPORTING large tables that should only be used when proven performance issues exist with RETURNING. This pattern is generally unnecessary in modern ABAP.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_86\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHODS get_large_table\n  EXPORTING\n    result TYPE /dirty/some_table_type.\n\nMETHOD get_large_table.\n  result = large_table.\nENDMETHOD.\n\nget_large_table( IMPORTING result = DATA(my_table) ).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Writing Redundant 'What' Comments in ABAP\nDESCRIPTION: This anti-pattern shows a comment that simply repeats what is already evident from the code itself. The comment adds no value as it just describes the SELECT statement which is already self-explanatory.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_9\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\n\" select alert root from database by key\nSELECT * FROM d_alert_root WHERE key = key.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Asserting Only Quantity in ABAP Tests\nDESCRIPTION: Demonstrates an anti-pattern where only the number of entries is checked without verifying the actual content. This approach can lead to false positives if the content is incorrect but the count matches.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_154\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nassert_equals( act = lines( log_messages )\n               exp = 3 ).\n```\n\n----------------------------------------\n\nTITLE: Using FIELD-SYMBOL in Loop Statements in ABAP\nDESCRIPTION: Shows the less preferred approach of using FIELD-SYMBOL in loop statements, which is generally only necessary for specific dynamic access scenarios.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nLOOP AT components ASSIGNING FIELD-SYMBOL(<component>).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using Asterisk Comments with Inconsistent Indentation in ABAP\nDESCRIPTION: This anti-pattern shows using asterisk comments (*) which can lead to inconsistent indentation. Unlike quote comments, asterisk comments may not align properly with the code they describe.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_12\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHOD do_it.\n  IF input IS NOT INITIAL.\n* delegate pattern\n    output = calculate_result( input ).\n  ENDIF.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Duplicating Message Texts as Comments in ABAP\nDESCRIPTION: This example shows the anti-pattern of duplicating message texts in comments. These comments become outdated when message texts change, making them misleading.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_123\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\n\" alert category not filled\nMESSAGE e003 INTO dummy.\n```\n\n----------------------------------------\n\nTITLE: Empty IF Branch Anti-pattern in ABAP\nDESCRIPTION: Demonstrates an anti-pattern where making a condition positive results in an empty IF branch, which should be avoided.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_41\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nIF has_entries = abap_true.\nELSE.\n  \" only do something in the ELSE block, IF remains empty\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Catching Unexpected Exceptions in ABAP Tests\nDESCRIPTION: Illustrates an anti-pattern where the test method catches and handles exceptions unnecessarily, making the code more complex and harder to follow than simply allowing the exception to propagate.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_159\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHOD reads_entry.\n  TRY.\n      DATA(entry) = cut->read_something( ).\n    CATCH /clean/some_exception INTO DATA(unexpected_exception).\n      cl_abap_unit_assert=>fail( unexpected_exception->get_text( ) ).\n  ENDTRY.\n  cl_abap_unit_assert=>assert_not_initial( entry ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: ABAP Parameter Initialization Anti-Pattern\nDESCRIPTION: Demonstrates potential issues when input and output parameters reference the same variable.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_98\n\nLANGUAGE: ABAP\nCODE:\n```\nDATA value TYPE i.\n\nsquare_dirty(\n  EXPORTING\n    number = value\n  IMPORTING\n    result = value ).\n\nMETHOD square_dirty.\n  CLEAR result.\n  result = number * number.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Single Quotes for String Literals in ABAP\nDESCRIPTION: Demonstrates the discouraged approach of using single quotes for strings, which can create confusion about whether CHAR or STRING type is intended.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_23\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nDATA some_string TYPE string.\nsome_string = 'ABC'.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using FIELD-SYMBOL for loop iterations in ABAP\nDESCRIPTION: Demonstrates the less preferred approach of using FIELD-SYMBOL for looping through components, which should only be used when field-symbols are specifically required.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nLOOP AT components ASSIGNING FIELD-SYMBOL(<component>).\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using Comments to Explain Poorly Named Variables in ABAP\nDESCRIPTION: This anti-pattern demonstrates using comments to explain the purpose of a variable instead of giving it a descriptive name. The generic variable name 'result' requires a comment to explain what it contains.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\n\" checks whether the table input contains entries\nDATA(result) = check_table( input ).\n```\n\n----------------------------------------\n\nTITLE: String Definition Anti-pattern with Single Quotes in ABAP\nDESCRIPTION: Demonstrates the anti-pattern of using single quotes for string literals, which adds unnecessary type conversion and creates ambiguity about the data type.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_25\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA some_string TYPE string.\nsome_string = 'ABC'.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using Comments to Structure Code in ABAP\nDESCRIPTION: This anti-pattern demonstrates using comment blocks to segment code instead of extracting methods. This approach is less clear and more prone to errors, especially when temporary variables need to be reset between sections.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\n\" -----------------\n\" Build statement\n\" -----------------\nDATA statement TYPE string.\nstatement = |SELECT * FROM d_document_roots|.\n\n\" -----------------\n\" Execute statement\n\" -----------------\nDATA(result_set) = adbc->execute_sql_query( statement ).\nresult_set->next_package( IMPORTING data = data ).\n```\n\n----------------------------------------\n\nTITLE: Incorrect Inline Declaration at Branch Points in ABAP\nDESCRIPTION: Demonstrates a problematic pattern where variables are declared inline within IF branches, which can be confusing as ABAP processes these declarations as if they were at the method start.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nIF has_entries = abap_true.\n  DATA(value) = 1.\nELSE.\n  value = 2.\nENDIF.\n```\n\n----------------------------------------\n\nTITLE: String Template Anti-pattern in ABAP\nDESCRIPTION: Shows the anti-pattern of using string templates for fixed string values, which adds needless overhead and cannot be used for CONSTANTS.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_26\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA(some_string) = |ABC|.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Declaration Pattern in ABAP\nDESCRIPTION: Shows the discouraged approach of declaring variables in a separate DATA section at the beginning of a method, away from where they are used.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\nMETHOD do_something.\n  DATA:\n    name   TYPE seoclsname,\n    reader TYPE REF TO /dirty/reader.\n  name = 'something'.\n  reader = /dirty/reader=>get_instance_for( name ).\n  result = reader->read_it( ).\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: Commented-Out Code That Should Be Deleted in ABAP\nDESCRIPTION: This anti-pattern example shows commented-out code that should be deleted rather than left in the codebase, as it creates confusion and provides no value since version control can recover it if needed.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_kr.md#2025-04-22_snippet_52\n\nLANGUAGE: ABAP\nCODE:\n```\n\" 잘못된 패턴\n* output = calculate_result( input ).\n```\n\n----------------------------------------\n\nTITLE: Implementing Enumerations using the Collection Pattern\nDESCRIPTION: Shows the collection pattern which groups multiple enumerations in a single interface or class. This approach is considered inferior and should be avoided when possible.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/Enumerations.md#2025-04-22_snippet_12\n\nLANGUAGE: ABAP\nCODE:\n```\n\" inferior pattern\nINTERFACE /dirty/message_constants.\n  CONSTANTS:\n    BEGIN OF message_severity,\n      warning TYPE symsgty VALUE 'W',\n      error   TYPE symsgty VALUE 'E',\n    END OF message_severity,\n    BEGIN OF message_lifecycle,\n      transitional TYPE i VALUE 1,\n      persisted    TYPE i VALUE 2,\n    END OF message_lifecycle.\nENDINTERFACE.\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using READ TABLE with SY-SUBRC to check existence in ABAP\nDESCRIPTION: Demonstrates an anti-pattern of checking record existence by using READ TABLE and checking SY-SUBRC, which is less expressive than LINE_EXISTS.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_es.md#2025-04-22_snippet_8\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nREAD TABLE my_table TRANSPORTING NO FIELDS WITH KEY key = 'A'.\nIF sy-subrc = 0.\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Method Implementation with Prefixes in ABAP\nDESCRIPTION: Shows the discouraged approach using Hungarian notation where parameters and return values have prefixes that indicate their direction (iv_ for input, rv_ for return value).\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/sub-sections/AvoidEncodings.md#2025-04-22_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nMETHOD add_two_numbers.\n  rv_result = iv_a + iv_b.\nENDMETHOD.\n```\n\n----------------------------------------\n\nTITLE: ABAP Development Pipeline Flow Diagram\nDESCRIPTION: Mermaid flowchart showing the integration flow between ABAP systems, Git, and CI pipeline including code push, pull, and ATC check steps.\nSOURCE: https://github.com/sap/styleguides/blob/main/abap-code-review/ABAPCodeReview.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init: { 'flowchart': { 'curve': 'bumpX' } } }%%\n flowchart LR \n    A(abap1) -->|1: push| B([git])\n    B -->|2: trigger| C[pipeline]\n    C -->|3: REST| D(abap2)\n    D --> |5: ATC| D\n    B -->|4: pull| D\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Commented-out Code in ABAP\nDESCRIPTION: This anti-pattern shows code that has been commented out rather than deleted. Commented-out code creates confusion and should be removed since version control systems can recover previous versions if needed.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP_fr.md#2025-04-22_snippet_14\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\n* output = calculate_result( input ).\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Excessive Spacing in ABAP\nDESCRIPTION: This example demonstrates excessive spacing that reduces code readability by adding unnecessary whitespace around operators, parentheses, and method calls.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_131\n\nLANGUAGE: ABAP\nCODE:\n```\n\" anti-pattern\nDATA(result)        =      calculate(    items =   items )   .\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Formatting for Language Versions\nDESCRIPTION: Demonstrates how to format Markdown links for different language versions of the Clean ABAP guide. This snippet shows the structure for creating a navigation menu with language options.\nSOURCE: https://github.com/sap/styleguides/blob/main/clean-abap/CleanABAP.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n> [**English**](CleanABAP.md)\n> &nbsp;·&nbsp;\n> [中文](CleanABAP_zh.md)\n> &nbsp;·&nbsp;\n> [Français](CleanABAP_fr.md)\n> &nbsp;·&nbsp;\n> [Deutsch](CleanABAP_de.md)\n> &nbsp;·&nbsp;\n> [日本語](CleanABAP_ja.md)\n> &nbsp;·&nbsp;\n> [Español](CleanABAP_es.md)\n```"
  }
]