[
  {
    "owner": "oai",
    "repo": "openapi-specification",
    "content": "TITLE: Paths Object Example in JSON\nDESCRIPTION: Example showing path definition with GET operation returning pets list, including response schema and content type specifications.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"/pets\\\": {\\n    \\\"get\\\": {\\n      \\\"description\\\": \\\"Returns all pets from the system that the user has access to\\\",\\n      \\\"responses\\\": {\\n        \\\"200\\\": {\\n          \\\"description\\\": \\\"A list of pets.\\\",\\n          \\\"content\\\": {\\n            \\\"application/json\\\": {\\n              \\\"schema\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/pet\\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body for File Upload in YAML for OpenAPI 3.0\nDESCRIPTION: This snippet shows how to define a request body for file uploads in OpenAPI 3.0 using YAML. It includes examples for both generic binary files and specific image types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/octet-stream:\n      schema:\n        # a binary file of any type\n        type: string\n        format: binary\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# multiple, specific media types may be specified:\nrequestBody:\n  content:\n    # a binary file of type png or jpeg\n    'image/jpeg':\n      schema:\n        type: string\n        format: binary\n    'image/png':\n      schema:\n        type: string\n        format: binary\n```\n\n----------------------------------------\n\nTITLE: Implementing Info Object in OpenAPI Specification\nDESCRIPTION: Example implementation of the Info Object that provides metadata about the API including title, description, terms of service, contact information, license details and version\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Example Pet Store App\",\n  \"description\": \"This is an example server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Example Pet Store App\ndescription: This is an example server for a pet store.\ntermsOfService: https://example.com/terms/\ncontact:\n  name: API Support\n  url: https://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Components Object Example in JSON\nDESCRIPTION: Comprehensive example of a Components Object showing schemas, parameters, responses, and security schemes definitions in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"schemas\": {\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"http://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Object in OpenAPI Specification using JSON\nDESCRIPTION: This snippet demonstrates how to define an Operation Object in OpenAPI Specification using JSON format. It includes tags, summary, operationId, parameters, requestBody, responses, and security definitions for updating a pet in a store.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n           \"properties\": {\n              \"name\": {\n                \"description\": \"Updated name of the pet\",\n                \"type\": \"string\"\n              },\n              \"status\": {\n                \"description\": \"Updated status of the pet\",\n                \"type\": \"string\"\n             }\n           },\n        \"required\": [\"status\"]\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Invalid input\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Composition with allOf\nDESCRIPTION: Demonstrates schema composition and inheritance using allOf. Defines an ErrorModel schema and an ExtendedErrorModel that inherits all properties from ErrorModel while adding its own required rootCause property.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\"message\", \"code\"],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\"rootCause\"],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n        - message\n        - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n        - $ref: '#/components/schemas/ErrorModel'\n        - type: object\n          required:\n            - rootCause\n          properties:\n            rootCause:\n              type: string\n```\n\n----------------------------------------\n\nTITLE: Info Object Example in OpenAPI Specification\nDESCRIPTION: Example showing the structure of an Info Object that provides metadata about the API including title, description, terms of service, contact information, license details and version\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Sample Pet Store App\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"http://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"http://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Sample Pet Store App\ndescription: This is a sample server for a pet store.\ntermsOfService: http://example.com/terms/\ncontact:\n  name: API Support\n  url: http://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Components Object Example in YAML\nDESCRIPTION: Comprehensive example of a Components Object showing schemas, parameters, responses, and security schemes definitions in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Object in JSON for OpenAPI Specification\nDESCRIPTION: This JSON snippet demonstrates how to define an Operation Object in the OpenAPI Specification. It includes tags, summary, operationId, parameters, requestBody, responses, and security fields for updating a pet in a store using form data.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"pet\"],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"]\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\"write:pets\", \"read:pets\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Map/Dictionary Properties with Complex Values\nDESCRIPTION: Shows how to define a schema for objects with dynamic property names where values reference another complex schema. This pattern is useful for key-value stores with structured values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n```\n\n----------------------------------------\n\nTITLE: Defining Info Object in YAML\nDESCRIPTION: Example of an Info Object in YAML format, including title, description, terms of service, contact information, license details, and version.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Sample Pet Store App\ndescription: This is a sample server for a pet store.\ntermsOfService: http://example.com/terms/\ncontact:\n  name: API Support\n  url: http://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining a Path Item Object with GET operation in JSON\nDESCRIPTION: This snippet demonstrates how to define a Path Item Object with a GET operation, including parameters and responses. It shows the structure for describing an API endpoint that returns pets based on ID.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Components Object Example\nDESCRIPTION: Comprehensive example of Components Object showing schemas, parameters, responses, and security schemes definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"https://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional OAuth2 Security in JSON\nDESCRIPTION: Example of defining optional OAuth2 security in an OpenAPI or Operation Object. The empty object ({}) indicates requests with no security are allowed, while the second option requires the 'petstore_auth' scheme with specific scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_87\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Path Item Object in OpenAPI Specification (JSON)\nDESCRIPTION: Example of a Path Item Object in JSON format, defining a GET operation with parameters, responses, and error handling for retrieving pets by ID.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Object Examples in OpenAPI\nDESCRIPTION: Examples of Reference Objects showing different ways to reference components including internal references, relative schema documents, and embedded schemas.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"#/components/schemas/Pet\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: '#/components/schemas/Pet'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"Pet.json\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: Pet.yaml\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: definitions.yaml#/Pet\n```\n\n----------------------------------------\n\nTITLE: Components Object Configuration\nDESCRIPTION: Comprehensive example of Components Object including schemas, parameters, responses, and security schemes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api-key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"https://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api-key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Examples in JSON for OpenAPI 3.0\nDESCRIPTION: This snippet demonstrates how to define media type examples for a Pet schema in JSON format. It includes examples for cat, dog, and frog, showing different ways to provide example data.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"application/json\": {\n    \"schema\": {\n      \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\": {\n        \"summary\": \"An example of a cat\",\n        \"value\": {\n          \"name\": \"Fluffy\",\n          \"petType\": \"Cat\",\n          \"color\": \"White\",\n          \"gender\": \"male\",\n          \"breed\": \"Persian\"\n        }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\": {\n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        }\n      },\n      \"frog\": {\n        \"$ref\": \"#/components/examples/frog-example\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Responses in OpenAPI JSON\nDESCRIPTION: Example of a Responses Object in JSON format that defines a 200 success response returning a pet object and a default error response. Each response specifies the content type and references schema components.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Components Object in OpenAPI Specification\nDESCRIPTION: Demonstrates the structure of a Components Object, including schemas, parameters, responses, and security schemes. It shows both JSON and YAML formats with various reusable objects.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api-key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"https://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api-key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Request Body with Referenced Schema and Multiple Media Types in JSON\nDESCRIPTION: Example of a request body object with a referenced User schema supporting multiple content types (JSON, XML, plain text) with different examples.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.json\"\n          }\n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.txt\"\n        }\n      }\n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Paths Object in OpenAPI Specification (YAML)\nDESCRIPTION: Example of a Paths Object in YAML format, defining a GET operation for the /pets endpoint with a 200 response returning a list of pets.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Object in YAML for OpenAPI Specification\nDESCRIPTION: This YAML snippet shows how to define an Operation Object in the OpenAPI Specification. It includes the same fields as the JSON example, demonstrating the structure for updating a pet in a store using form data.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  - pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n  - name: petId\n    in: path\n    description: ID of pet that needs to be updated\n    required: true\n    schema:\n      type: string\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          name:\n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n        required:\n          - status\nresponses:\n  '200':\n    description: Pet updated.\n    content:\n      application/json: {}\n      application/xml: {}\n  '405':\n    description: Method Not Allowed\n    content:\n      application/json: {}\n      application/xml: {}\nsecurity:\n  - petstore_auth:\n      - write:pets\n      - read:pets\n```\n\n----------------------------------------\n\nTITLE: Operation Object Example - JSON Implementation\nDESCRIPTION: Example showing an Operation Object for updating a pet store entry with form data. Includes tags, parameters, request body schema, response definitions and security requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"]\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Models in OpenAPI Specification (JSON)\nDESCRIPTION: This snippet demonstrates how to define polymorphic models using a discriminator in OpenAPI Specification. It shows the structure for a base 'Pet' model and its subclasses 'Cat' and 'Dog'.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\"name\", \"petType\"]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminating value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\"clueless\", \"lazy\", \"adventurous\", \"aggressive\"]\n              }\n            },\n            \"required\": [\"huntingSkill\"]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminating value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\"packSize\"]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Paths Object Example in JSON\nDESCRIPTION: Example of a Paths Object showing endpoint definition with GET operation in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {         \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Components Object Example in JSON\nDESCRIPTION: Complete example of a Components Object showing schemas, parameters, responses, and security schemes definitions in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"schemas\": {\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"http://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Form with Encoding Objects in OpenAPI\nDESCRIPTION: Example showing how to use encoding objects to define specific content types and headers for different parts of a multipart/form-data request. Demonstrates customization of encoding for XML data and restricting image types to specific formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is `text/plain`\n            type: string\n            format: uuid\n          addresses:\n            # default based on the `items` subschema would be\n            # `application/json`, but we want these address objects\n            # serialized as `application/xml` instead\n            description: addresses in XML format\n            type: array\n            items:\n              $ref: '#/components/schemas/Address'\n          profileImage:\n            # default is application/octet-stream, but we can declare\n            # a more specific image type or types\n            type: string\n            format: binary\n      encoding:\n        addresses:\n          # require XML Content-Type in utf-8 encoding\n          # This is applied to each address part corresponding\n          # to each address in he array\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png or jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Examples in JSON Format for OpenAPI\nDESCRIPTION: Example showing how to define media types with multiple examples for a Pet schema in JSON format. Includes references to schemas and demonstrates how to provide multiple examples (cat, dog, frog) with the last one being a reference to an external example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\":\n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  {\n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Paths Object Example in YAML\nDESCRIPTION: Example of a Paths Object showing endpoint definition with GET operation in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n```\n\n----------------------------------------\n\nTITLE: Components Object Example in YAML\nDESCRIPTION: Complete example of a Components Object showing schemas, parameters, responses, and security schemes definitions in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Defining a Multipart Form with Custom Encoding in OpenAPI\nDESCRIPTION: Example showing how to customize multipart form encoding using Encoding Objects to specify content types, character sets, and headers for individual form parts.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is `text/plain`\n            type: string\n            format: uuid\n          addresses:\n            # default based on the `items` subschema would be\n            # `application/json`, but we want these address objects\n            # serialized as `application/xml` instead\n            description: addresses in XML format\n            type: array\n            items:\n              $ref: '#/components/schemas/Address'\n          profileImage:\n            # default is application/octet-stream, but we can declare\n            # a more specific image type or types\n            type: string\n            format: binary\n      encoding:\n        addresses:\n          # require XML Content-Type in utf-8 encoding\n          # This is applied to each address part corresponding\n          # to each address in he array\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png or jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n```\n\n----------------------------------------\n\nTITLE: Request Body with Referenced Schema and Multiple Media Types in YAML\nDESCRIPTION: YAML representation of a request body with a referenced User schema that supports multiple content types and provides different examples for each format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\ncontent:\n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'http://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example in XML\n        externalValue: 'http://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in text plain format\n        externalValue: 'http://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user:\n        summary: User example in other format\n        externalValue: 'http://foo.bar/examples/user-example.whatever'\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Models with Discriminator in YAML\nDESCRIPTION: This snippet shows how to define polymorphic models using a discriminator in YAML format. It includes a base 'Pet' schema and derived 'Cat' and 'Dog' schemas.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_79\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n```\n\n----------------------------------------\n\nTITLE: Operation Object Example - YAML Implementation\nDESCRIPTION: YAML version of the Operation Object example showing pet store update functionality with form data, including tags, parameters, request body schema, responses and security requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       type: object\n       properties:\n          name:\n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content:\n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content:\n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Schema Model\nDESCRIPTION: Complex schema example demonstrating polymorphism with discriminator and inheritance for Pet, Cat, and Dog models\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\"name\", \"petType\"]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminating value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\"clueless\", \"lazy\", \"adventurous\", \"aggressive\"]\n              }\n            },\n            \"required\": [\"huntingSkill\"]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminating value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\"packSize\"]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n        - name\n        - petType\n    Cat: # \"Cat\" will be used as the discriminating value\n      description: A representation of a cat\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            huntingSkill:\n              type: string\n              description: The measured skill for hunting\n              enum:\n                - clueless\n                - lazy\n                - adventurous\n                - aggressive\n          required:\n            - huntingSkill\n    Dog: # \"Dog\" will be used as the discriminating value\n      description: A representation of a dog\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            packSize:\n              type: integer\n              format: int32\n              description: the size of the pack the dog is from\n              default: 0\n              minimum: 0\n          required:\n            - packSize\n```\n\n----------------------------------------\n\nTITLE: Path Item Object Example in JSON\nDESCRIPTION: Complex example of a Path Item Object with GET operation, parameters, and response definitions including error handling.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"get\\\": {\\n    \\\"description\\\": \\\"Returns pets based on ID\\\",\\n    \\\"summary\\\": \\\"Find pets by ID\\\",\\n    \\\"operationId\\\": \\\"getPetsById\\\",\\n    \\\"responses\\\": {\\n      \\\"200\\\": {\\n        \\\"description\\\": \\\"pet response\\\",\\n        \\\"content\\\": {\\n          \\\"*/*\\\": {\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"array\\\",\\n              \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/Pet\\\"\\n              }\\n            }\\n          }\\n        }\\n      },\\n      \\\"default\\\": {\\n        \\\"description\\\": \\\"error payload\\\",\\n        \\\"content\\\": {\\n          \\\"text/html\\\": {\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"#/components/schemas/ErrorModel\\\"\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"parameters\\\": [\\n    {\\n      \\\"name\\\": \\\"id\\\",\\n      \\\"in\\\": \\\"path\\\",\\n      \\\"description\\\": \\\"ID of pet to use\\\",\\n      \\\"required\\\": true,\\n      \\\"schema\\\": {\\n        \\\"type\\\": \\\"array\\\",\\n        \\\"items\\\": {\\n          \\\"type\\\": \\\"string\\\"\\n        }\\n      },\\n      \\\"style\\\": \\\"simple\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Server Configuration Examples\nDESCRIPTION: Examples of single and multiple server configurations in OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://development.gigantic-server.com/v1\ndescription: Development server\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Composition in JSON and YAML\nDESCRIPTION: Example of defining models with composition using allOf to extend an error model in both JSON and YAML formats for OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Objects in OpenAPI Request Body\nDESCRIPTION: Demonstrates how to define examples for different content types in a request body including JSON, XML, and plain text. Examples can be provided directly as values or referenced from external sources.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples:\n        foo:\n          summary: A foo example\n          value: {\"foo\": \"bar\"}\n        bar:\n          summary: A bar example\n          value: {\"bar\": \"baz\"}\n    'application/xml':\n      examples:\n        xmlExample:\n          summary: This is an example in XML\n          externalValue: 'http://example.org/examples/address-example.xml'\n    'text/plain':\n      examples:\n        textExample:\n          summary: This is a text example\n          externalValue: 'http://foo.bar/examples/address-example.txt'\n```\n\n----------------------------------------\n\nTITLE: Info Object Example - OpenAPI/Swagger\nDESCRIPTION: Example showing the structure of an Info object containing API metadata including title, description, terms of service, contact information, license details and version.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Swagger Sample App\",\n  \"description\": \"This is a sample server Petstore server.\",\n  \"termsOfService\": \"http://swagger.io/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"http://www.swagger.io/support\",\n    \"email\": \"support@swagger.io\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Swagger Sample App\ndescription: This is a sample server Petstore server.\ntermsOfService: http://swagger.io/terms/\ncontact:\n  name: API Support\n  url: http://www.swagger.io/support\n  email: support@swagger.io\nlicense:\n  name: Apache 2.0\n  url: http://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Paths Object Example in JSON\nDESCRIPTION: Example of a Paths Object defining a GET endpoint for retrieving pets with response schemas and content types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"/pets\\\": {\\n    \\\"get\\\": {\\n      \\\"description\\\": \\\"Returns all pets from the system that the user has access to\\\",\\n      \\\"responses\\\": {\\n        \\\"200\\\": {\\n          \\\"description\\\": \\\"A list of pets.\\\",\\n          \\\"content\\\": {\\n            \\\"application/json\\\": {\\n              \\\"schema\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/pet\\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Webhook Callback in OpenAPI YAML\nDESCRIPTION: Demonstrates how to define a webhook callback that uses runtime expressions to extract values from the request body. The callback is triggered at a URL determined by request body properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nmyWebhook:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: webhook successfully processed and no retries will be performed\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Examples in JSON and YAML\nDESCRIPTION: Example of defining an object model with properties, required fields, and an example instance in both JSON and YAML formats for OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n```\n\n----------------------------------------\n\nTITLE: Complex Array Response Object in JSON\nDESCRIPTION: An example Response Object in JSON format that defines a response containing an array of complex objects. The schema references a VeryComplexType defined elsewhere in the components section.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth2 Flows in OpenAPI JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure multiple OAuth2 flows in OpenAPI. It defines both implicit and authorization code flows with their respective URLs and scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Composition and Inheritance in JSON and YAML\nDESCRIPTION: Example demonstrating schema composition using allOf. This example defines an ErrorModel with message and code properties, and an ExtendedErrorModel that inherits all properties from ErrorModel while adding a rootCause property.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Info Object Example in JSON and YAML\nDESCRIPTION: Example of an Info Object that provides metadata about the API, including title, description, terms of service, contact information, license, and version.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Sample Pet Store App\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"http://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"http://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Sample Pet Store App\ndescription: This is a sample server for a pet store.\ntermsOfService: http://example.com/terms/\ncontact:\n  name: API Support\n  url: http://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: http://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Multiple OAuth2 Flows in OpenAPI Security Scheme\nDESCRIPTION: This comprehensive example defines an OAuth2 security scheme with both implicit and authorization code flows, including all required URLs and scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Using Examples in OpenAPI Components\nDESCRIPTION: Comprehensive example demonstrating how to use examples in various contexts including schemas, request bodies, parameters, and responses, with both inline and external references.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_65\n\nLANGUAGE: yaml\nCODE:\n```\n# in a model\nschemas:\n  properties:\n    name:\n      type: string\n      example:\n        $ref: http://foo.bar#/examples/name-example\n\n# in a request body, note the plural `examples`\n  requestBody:\n    content:\n      'application/json':\n        schema:\n          $ref: '#/components/schemas/Address'\n        examples:\n          foo:\n            value: {\"foo\": \"bar\"}\n          bar:\n            value: {\"bar\": \"baz\"}\n      'application/xml':\n        examples:\n          xml:\n            externalValue: 'http://foo.bar/examples/address-example.xml'\n      'text/plain':\n        examples:\n          text:\n            externalValue: 'http://foo.bar/examples/address-example.txt'\n       \n# in a parameter\n  parameters:\n    - name: 'zipCode'\n      in: 'query'\n      schema:\n        type: 'string'\n        format: 'zip-code'\n        example:\n          $ref: 'http://foo.bar#/examples/zip-example'\n\n# in a response, note the singular `example`:\n  responses:\n    '200':\n      description: your car appointment has been booked\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SuccessResponse'\n          example:\n            $ref: http://foo.bar#/examples/address-example.json\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body with Referenced Model and Multiple Media Types in OpenAPI\nDESCRIPTION: This example demonstrates how to define a request body with a referenced model definition and multiple media types in OpenAPI Specification. It includes a description, content with different media types, schemas, and examples.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.json\"\n          }\n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.txt\"\n        }\n      }\n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\ncontent:\n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'http://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example in XML\n        externalValue: 'http://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in text plain format\n        externalValue: 'http://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user:\n        summary: User example in other format\n        externalValue: 'http://foo.bar/examples/user-example.whatever'\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Form Data RequestBody in OpenAPI YAML\nDESCRIPTION: This snippet demonstrates how to define a requestBody for multipart/form-data, including various data types and their default Content-Types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # Content-Type for application-level encoded resource is `text/plain`\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n          children:\n            # default Content-Type for arrays is based on the _inner_ type (`text/plain` here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the _inner_ type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: object\n              $ref: '#/components/schemas/Address'\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Composition with allOf\nDESCRIPTION: Shows how to create composite schemas using allOf to extend an error model with additional properties while inheriting all properties from the base model.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Object Model in JSON and YAML\nDESCRIPTION: Example of defining a simple object model with properties, required fields, and references to other schemas in both JSON and YAML formats for OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n```\n\n----------------------------------------\n\nTITLE: Multiple OAuth2 Flows Configuration in OpenAPI\nDESCRIPTION: Defines a comprehensive OAuth2 security scheme with multiple flow types. This example configures both Implicit and Authorization Code flows with their respective URLs and scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_96\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: API Key Security Scheme\nDESCRIPTION: Configuration example for API key authentication using a header parameter.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: apiKey\nname: api_key\nin: header\n```\n\n----------------------------------------\n\nTITLE: Defining Map/Dictionary Properties with String Values\nDESCRIPTION: Example showing how to define an object with dynamic string-to-string mappings using additionalProperties. This schema allows arbitrary property names with string values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Response Objects in YAML Format in OpenAPI\nDESCRIPTION: Example of a Responses Object in YAML format, showing a 200 response for a successful operation and a default response for handling errors.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\n'200':\n  description: a pet to be returned\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n```\n\n----------------------------------------\n\nTITLE: Defining Info Object in JSON\nDESCRIPTION: Example of an Info Object in JSON format, including title, description, terms of service, contact information, license details, and version.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Sample Pet Store App\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"http://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"http://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Encoding Object in YAML for OpenAPI Specification\nDESCRIPTION: This example demonstrates how to define an Encoding Object in YAML format for a multipart/mixed request body. It includes various content types and encoding specifications for different parts of the request.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/mixed:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage:\n            # default is application/octet-stream, need to declare an image type only!\n            type: string\n            format: binary\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n```\n\n----------------------------------------\n\nTITLE: Defining Response Type with oneOf and Discriminator in YAML\nDESCRIPTION: This example demonstrates how to define a response type using oneOf with a discriminator to efficiently select the matching schema during deserialization.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_79\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n    - $ref: '#/components/schemas/Cat'\n    - $ref: '#/components/schemas/Dog'\n    - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: petType\n```\n\n----------------------------------------\n\nTITLE: Defining Map/Dictionary Properties in JSON and YAML\nDESCRIPTION: Illustrates how to create schemas for objects with additional properties, including string-to-string and string-to-model mappings.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Security Requirement in YAML\nDESCRIPTION: YAML representation of a Security Requirement Object for an OAuth2 security scheme named 'petstore_auth' with the required scopes 'write:pets' and 'read:pets'.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_86\n\nLANGUAGE: yaml\nCODE:\n```\npetstore_auth:\n- write:pets\n- read:pets\n```\n\n----------------------------------------\n\nTITLE: Path Item Object Example in JSON\nDESCRIPTION: Detailed example of a path item object showing GET operation with parameters, responses, and error handling.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"get\\\": {\\n    \\\"description\\\": \\\"Returns pets based on ID\\\",\\n    \\\"summary\\\": \\\"Find pets by ID\\\",\\n    \\\"operationId\\\": \\\"getPetsById\\\",\\n    \\\"responses\\\": {\\n      \\\"200\\\": {\\n        \\\"description\\\": \\\"pet response\\\",\\n        \\\"content\\\": {\\n          \\\"*/*\\\": {\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"array\\\",\\n              \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/Pet\\\"\\n              }\\n            }\\n          }\\n        }\\n      },\\n      \\\"default\\\": {\\n        \\\"description\\\": \\\"error payload\\\",\\n        \\\"content\\\": {\\n          \\\"text/html\\\": {\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"#/components/schemas/ErrorModel\\\"\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"parameters\\\": [\\n    {\\n      \\\"name\\\": \\\"id\\\",\\n      \\\"in\\\": \\\"path\\\",\\n      \\\"description\\\": \\\"ID of pet to use\\\",\\n      \\\"required\\\": true,\\n      \\\"schema\\\": {\\n        \\\"type\\\": \\\"array\\\",\\n        \\\"items\\\": {\\n          \\\"type\\\": \\\"string\\\"\\n        }\\n      },\\n      \\\"style\\\": \\\"simple\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Components Object Configuration in OpenAPI\nDESCRIPTION: Comprehensive example of Components Object configuration including schemas, parameters, responses, and security schemes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"http://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Server with Variables Example in JSON and YAML\nDESCRIPTION: Example showing how to use variables in server URL templates for dynamic configuration, including defaults and enumerations for variable values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      # note! no enum here means it is an open value\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n      default: v2\n```\n\n----------------------------------------\n\nTITLE: Complete Pet Schema Definition\nDESCRIPTION: Comprehensive schema showing inheritance with allOf and discriminator usage.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_68\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n      - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          name:\n            type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          bark:\n            type: string\n    Lizard:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          lovesRocks:\n            type: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body with Referenced Model in JSON\nDESCRIPTION: This snippet shows how to define a request body with a referenced model definition, including multiple content types and examples, using JSON format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.json\"\n          }\n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.txt\"\n        }\n      }\n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON String Example in URL-Encoded Form (JSON)\nDESCRIPTION: This example demonstrates how to define a JSON string example encoded in a URL-style form body. It includes schema definition, encoding specification, and an example of the encoded form value.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n\"application/x-www-form-urlencoded\": {\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"jsonValue\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"encoding\": {\n    \"jsonValue\": {\n      \"contentType\": \"application/json\"\n    }\n  },\n  \"examples\": {\n    \"jsonFormValue\": {\n      \"description\": \"The JSON string \\\"json\\\" as a form value\",\n      \"value\": \"jsonValue=%22json%22\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Configuration with Variables\nDESCRIPTION: Example demonstrating server configuration using variables for username, port, and base path.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      default: v2\n```\n\n----------------------------------------\n\nTITLE: Complex Array Response Object in YAML\nDESCRIPTION: A YAML representation of a Response Object for an array of complex types. The response specifies application/json content type with a schema defining an array of referenced complex objects.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A complex object array response\ncontent:\n  application/json:\n    schema:\n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Map/Dictionary Properties in JSON and YAML\nDESCRIPTION: Examples of defining models with additionalProperties for string-to-string and string-to-model mappings in both JSON and YAML formats for OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n```\n\n----------------------------------------\n\nTITLE: Complex XML Configuration with Attributes and Namespaces in JSON\nDESCRIPTION: Shows a complete example of XML configuration using attribute, namespace, and prefix properties in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_95\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"https://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication in OpenAPI\nDESCRIPTION: This snippet demonstrates how to set up an API key authentication scheme in OpenAPI, specifying the key name and location.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_84\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: apiKey\nname: api_key\nin: header\n```\n\n----------------------------------------\n\nTITLE: Defining Path Item Object in OpenAPI Specification (YAML)\nDESCRIPTION: Example of a Path Item Object in YAML format, defining a GET operation with parameters, responses, and error handling for retrieving pets by ID.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nget:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    items:\n      type: string \n  style: simple\n```\n\n----------------------------------------\n\nTITLE: Paths Object Example in YAML\nDESCRIPTION: YAML representation of the Paths Object example showing pet retrieval endpoint configuration.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n/pets:\\n  get:\\n    description: Returns all pets from the system that the user has access to\\n    responses:\\n      '200':\\n        description: A list of pets.\\n        content:\\n          application/json:\\n            schema:\\n              type: array\\n              items:\\n                $ref: '#/components/schemas/pet'\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Server Configuration\nDESCRIPTION: Illustrates how to use variables in a server configuration, including username, port, and basePath. It shows both JSON and YAML formats with variable definitions and default values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"A user-specific subdomain. Use `demo` for a free sandbox environment.\"\n        },\n        \"port\": {\n          \"enum\": [\"8443\", \"443\"],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - url: https://{username}.gigantic-server.com:{port}/{basePath}\n    description: The production API server\n    variables:\n      username:\n        # note! no enum here means it is an open value\n        default: demo\n        description: A user-specific subdomain. Use `demo` for a free sandbox environment.\n      port:\n        enum:\n          - '8443'\n          - '443'\n        default: '8443'\n      basePath:\n        # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n        default: v2\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Object Model in JSON/YAML\nDESCRIPTION: Defines an object schema with required fields, property definitions including references to other schemas, and validation constraints. The model includes string and integer properties with minimum value validation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"name\"],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nrequired:\n  - name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Form with Multiple File Uploads in OpenAPI\nDESCRIPTION: Example showing how to define a multipart/form-data request that accepts multiple file uploads using the same field name according to RFC7578 standards. Uses an array type with empty schema to indicate application/octet-stream content type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Form Data Request Body in YAML\nDESCRIPTION: This snippet demonstrates how to define a request body using multipart/form-data content type with various property types in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # default Content-Type for string/binary is `application/octet-stream`\n            type: string\n            format: binary\n          children:\n            # default Content-Type for arrays is based on the `inner` type (text/plain here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: '#/components/schemas/Address'\n```\n\n----------------------------------------\n\nTITLE: Schema Composition with allOf\nDESCRIPTION: Example of schema composition using allOf to extend an ErrorModel with additional properties\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\"message\", \"code\"],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\"rootCause\"],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n        - message\n        - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n        - $ref: '#/components/schemas/ErrorModel'\n        - type: object\n          required:\n            - rootCause\n          properties:\n            rootCause:\n              type: string\n```\n\n----------------------------------------\n\nTITLE: JWT Bearer Security Scheme Definition\nDESCRIPTION: Defines an HTTP Bearer Authentication scheme that uses JWT tokens. The 'bearerFormat' field provides a hint to clients about the token format, but is primarily for documentation purposes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_106\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: bearer\nbearerFormat: JWT\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphism with Discriminator\nDESCRIPTION: Demonstrates how to create a polymorphic model hierarchy using discriminator to identify concrete implementations of a base Pet schema with specific Cat and Dog schemas.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n```\n\n----------------------------------------\n\nTITLE: Defining a Multipart Form with Multiple Files in OpenAPI\nDESCRIPTION: Example demonstrating how to define a multipart form that accepts multiple files using the same field name, following RFC7578 specifications.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items:\n              type: string\n              format: binary\n```\n\n----------------------------------------\n\nTITLE: Basic String Property Definition in JSON\nDESCRIPTION: Shows a basic string property definition in JSON format with the corresponding XML representation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Path Item Object Example in YAML\nDESCRIPTION: YAML representation of a Path Item Object with GET operation and parameters\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nget:\\n  description: Returns pets based on ID\\n  summary: Find pets by ID\\n  operationId: getPetsById\\n  responses:\\n    '200':\\n      description: pet response\\n      content:\\n        '*/*' :\\n          schema:\\n            type: array\\n            items:\\n              $ref: '#/components/schemas/Pet'\\n    default:\\n      description: error payload\\n      content:\\n        'text/html':\\n          schema:\\n            $ref: '#/components/schemas/ErrorModel'\\nparameters:\\n- name: id\\n  in: path\\n  description: ID of pet to use\\n  required: true\\n  schema:\\n    type: array\\n    items:\\n      type: string \\n  style: simple\n```\n\n----------------------------------------\n\nTITLE: Map/Dictionary Property Schemas\nDESCRIPTION: Examples of object schemas with additional properties for string-to-string and string-to-model mappings\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n```\n\n----------------------------------------\n\nTITLE: Complex Query Parameter Using Content in JSON\nDESCRIPTION: Defines a query parameter 'coordinates' that uses the content field to specify complex serialization with application/json media type. Contains lat/long coordinates as required properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\"lat\", \"long\"],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Encoding Object for Multipart Form Data in OpenAPI YAML\nDESCRIPTION: This snippet shows how to use the Encoding Object to control serialization of parts in a multipart/form-data request body.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage: {}\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n```\n\n----------------------------------------\n\nTITLE: Defining WebHook Callback using Callback Object in YAML\nDESCRIPTION: This example demonstrates how to use a Callback Object to describe a WebHook callback for a subscription operation. It uses a user-provided query string parameter to define the callback URL.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nmyCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload with Discriminator for Schema Selection\nDESCRIPTION: Shows a JSON payload that includes a discriminator property (petType) to indicate which schema should be used for validation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 12345,\n  \"petType\": \"Cat\"\n}\n```\n\n----------------------------------------\n\nTITLE: Path Item Object Example - OpenAPI/Swagger\nDESCRIPTION: Example showing the structure of a Path Item object defining a GET operation for retrieving pets by ID with parameters and responses.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"produces\": [\n      \"application/json\",\n      \"text/html\"\n    ],\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"schema\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Pet\"\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"schema\": {\n          \"$ref\": \"#/definitions/ErrorModel\"\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"collectionFormat\": \"csv\"\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nget:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  produces:\n  - application/json\n  - text/html\n  responses:\n    '200':\n      description: pet response\n      schema:\n        type: array\n        items:\n          $ref: '#/definitions/Pet'\n    default:\n      description: error payload\n      schema:\n        $ref: '#/definitions/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  type: array\n  items:\n    type: string\n  collectionFormat: csv\n```\n\n----------------------------------------\n\nTITLE: Defining Examples in Request Body with YAML\nDESCRIPTION: Demonstrates how to define examples for different content types in a request body using YAML. Includes examples for application/json, application/xml, and text/plain.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples:\n        foo:\n          summary: A foo example\n          value:\n            foo: bar\n        bar:\n          summary: A bar example\n          value:\n            bar: baz\n    application/xml:\n      examples:\n        xmlExample:\n          summary: This is an example in XML\n          externalValue: https://example.org/examples/address-example.xml\n    text/plain:\n      examples:\n        textExample:\n          summary: This is a text example\n          externalValue: https://foo.bar/examples/address-example.txt\n```\n\n----------------------------------------\n\nTITLE: Media Type Examples in OpenAPI 3.1.0\nDESCRIPTION: Examples of media type definitions that should comply with RFC6838. These examples show different variations of media types, including plain text, JSON, and vendor-specific formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Object Model in JSON and YAML\nDESCRIPTION: Example of a simple object schema with required fields and properties. This schema defines an object with a required name property, an optional address property referencing another schema, and an optional age property with validation constraints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n```\n\n----------------------------------------\n\nTITLE: Advanced Discriminator Mapping\nDESCRIPTION: Example of discriminator with explicit mapping to handle complex schema references.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Implicit Flow in YAML\nDESCRIPTION: Demonstrates the YAML equivalent of configuring the OAuth2 Implicit flow using the Security Scheme Object and OAuth Flows Object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_91\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Polymorphism in OpenAPI\nDESCRIPTION: Schema definitions demonstrating polymorphic inheritance using discriminator property for Pet, Cat, and Dog models.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"definitions\": {\n    \"Pet\": {\n      \"type\": \"object\",\n      \"discriminator\": \"petType\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"petType\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"petType\"\n      ]\n    },\n    \"Cat\": {\n      \"description\": \"A representation of a cat\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/definitions/Pet\"\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"huntingSkill\": {\n              \"type\": \"string\",\n              \"description\": \"The measured skill for hunting\",\n              \"default\": \"lazy\",\n              \"enum\": [\n                \"clueless\",\n                \"lazy\",\n                \"adventurous\",\n                \"aggressive\"\n              ]\n            }\n          },\n          \"required\": [\n            \"huntingSkill\"\n          ]\n        }\n      ]\n    },\n    \"Dog\": {\n      \"description\": \"A representation of a dog\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/definitions/Pet\"\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"packSize\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\",\n              \"description\": \"the size of the pack the dog is from\",\n              \"default\": 0,\n              \"minimum\": 0\n            }\n          },\n          \"required\": [\n            \"packSize\"\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  Pet:\n    type: object\n    discriminator: petType\n    properties:\n      name:\n        type: string\n      petType:\n        type: string\n    required:\n    - name\n    - petType\n  Cat:\n    description: A representation of a cat\n    allOf:\n    - $ref: '#/definitions/Pet'\n    - type: object\n      properties:\n        huntingSkill:\n          type: string\n          description: The measured skill for hunting\n          default: lazy\n          enum:\n          - clueless\n          - lazy\n          - adventurous\n          - aggressive\n      required:\n      - huntingSkill\n  Dog:\n    description: A representation of a dog\n    allOf:\n    - $ref: '#/definitions/Pet'\n    - type: object\n      properties:\n        packSize:\n          type: integer\n          format: int32\n          description: the size of the pack the dog is from\n          default: 0\n          minimum: 0\n      required:\n      - packSize\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with String in JSON for OpenAPI Specification\nDESCRIPTION: This example shows how to define a Response Object in JSON format for a simple string response. It includes a description and content schema for a plain text response.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File Upload RequestBody in OpenAPI YAML\nDESCRIPTION: This snippet demonstrates how to define a requestBody for file uploads, including single and multiple file uploads with specific media types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/octet-stream: {}\n\nrequestBody:\n  content:\n    # a binary file of type png or jpeg\n    image/jpeg: {}\n    image/png: {}\n\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items: {}\n```\n\n----------------------------------------\n\nTITLE: Defining oneOf Schema Selection with Discriminator in YAML\nDESCRIPTION: Demonstrates how to define a response type with multiple possible schemas using oneOf and a discriminator to efficiently determine which schema to use for validation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_80\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n    - $ref: '#/components/schemas/Cat'\n    - $ref: '#/components/schemas/Dog'\n    - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: petType\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Implicit Flow in OpenAPI JSON\nDESCRIPTION: This JSON snippet demonstrates how to define an OAuth2 implicit flow security scheme in OpenAPI. It specifies the authorization URL and available scopes for the implicit flow.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Object with Examples in JSON\nDESCRIPTION: This snippet demonstrates how to define a Media Type Object with multiple examples for a Pet schema in JSON format. It includes references to schemas and examples, showcasing different pet types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"application/json\": {\n    \"schema\": {\n      \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\": {\n        \"summary\": \"An example of a cat\",\n        \"value\": {\n          \"name\": \"Fluffy\",\n          \"petType\": \"Cat\",\n          \"color\": \"White\",\n          \"gender\": \"male\",\n          \"breed\": \"Persian\"\n        }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\": {\n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        }\n      },\n      \"frog\": {\n        \"$ref\": \"#/components/examples/frog-example\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Servers in OpenAPI Specification\nDESCRIPTION: Demonstrates how to define multiple servers using the Server Object in both JSON and YAML formats. It includes development, staging, and production server configurations.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - url: https://development.gigantic-server.com/v1\n    description: Development server\n  - url: https://staging.gigantic-server.com/v1\n    description: Staging server\n  - url: https://api.gigantic-server.com/v1\n    description: Production server\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Multipart Form in OpenAPI\nDESCRIPTION: Example showing how to define a multipart/form-data request body without explicit encoding specifications. Demonstrates how default encodings are determined based on data types including text, binary, and array properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default for primitives without a special format is text/plain\n            type: string\n            format: uuid\n          profileImage:\n            # default for string with binary format is `application/octet-stream`\n            type: string\n            format: binary\n          addresses:\n            # default for arrays is based on the type in the `items`\n            # subschema, which is an object, so `application/json`\n            type: array\n            items:\n              $ref: '#/components/schemas/Address'\n```\n\n----------------------------------------\n\nTITLE: Complex Schema with AllOf\nDESCRIPTION: Comprehensive example showing schema inheritance using allOf with discriminator\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n      - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          name:\n            type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          bark:\n            type: string\n    Lizard:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          lovesRocks:\n            type: boolean\n```\n\n----------------------------------------\n\nTITLE: Example Operation Object in JSON\nDESCRIPTION: Demonstrates an OpenAPI Operation Object for updating a pet with form data, including tags, parameters, request body, responses and security requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"]\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Path Item Object Example in JSON\nDESCRIPTION: Detailed example of a Path Item Object with GET operation and parameters\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"get\": {\\n    \"description\": \"Returns pets based on ID\",\\n    \"summary\": \"Find pets by ID\",\\n    \"operationId\": \"getPetsById\",\\n    \"responses\": {\\n      \"200\": {\\n        \"description\": \"pet response\",\\n        \"content\": {\\n          \"*/*\": {\\n            \"schema\": {\\n              \"type\": \"array\",\\n              \"items\": {\\n                \"$ref\": \"#/components/schemas/Pet\"\\n              }\\n            }\\n          }\\n        }\\n      },\\n      \"default\": {\\n        \"description\": \"error payload\",\\n        \"content\": {\\n          \"text/html\": {\\n            \"schema\": {\\n              \"$ref\": \"#/components/schemas/ErrorModel\"\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \"parameters\": [\\n    {\\n      \"name\": \"id\",\\n      \"in\": \"path\",\\n      \"description\": \"ID of pet to use\",\\n      \"required\": true,\\n      \"schema\": {\\n        \"type\": \"array\",\\n        \"items\": {\\n          \"type\": \"string\"\\n        }\\n      },\\n      \"style\": \"simple\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Object Definition in OpenAPI YAML\nDESCRIPTION: Shows how to define examples in various contexts including models, request bodies, parameters, and responses. The examples demonstrate both inline values and external references.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\n# in a model\nschemas:\n  properties:\n    name:\n      type: string\n      examples:\n        name:\n          $ref: http://example.org/petapi-examples/openapi.json#/components/examples/name-example\n\n# in a request body:\n  requestBody:\n    content:\n      'application/json':\n        schema:\n          $ref: '#/components/schemas/Address'\n        examples:\n          foo:\n            summary: A foo example\n            value: {\"foo\": \"bar\"}\n          bar:\n            summary: A bar example\n            value: {\"bar\": \"baz\"}\n      'application/xml':\n        examples:\n          xmlExample:\n            summary: This is an example in XML\n            externalValue: 'http://example.org/examples/address-example.xml'\n      'text/plain':\n        examples:\n          textExample:\n            summary: This is a text example\n            externalValue: 'http://foo.bar/examples/address-example.txt'\n\n\n# in a parameter\n  parameters:\n    - name: 'zipCode'\n      in: 'query'\n      schema:\n        type: 'string'\n        format: 'zip-code'\n        examples:\n          zip-example:\n            $ref: '#/components/examples/zip-example'\n\n# in a response\n  responses:\n    '200':\n      description: your car appointment has been booked\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SuccessResponse'\n          examples:\n            confirmation-success:\n              $ref: '#/components/examples/confirmation-success'\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Data Structures in OpenAPI Specification (JSON)\nDESCRIPTION: This snippet demonstrates how to implement generic data structures using dynamic references in OpenAPI Specification. It includes examples of generic arrays and objects with typed arrays.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"genericArrayComponent\": {\n        \"$id\": \"fully_generic_array\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$dynamicRef\": \"#generic-array\"\n        },\n        \"$defs\": {\n          \"allowAll\": {\n            \"$dynamicAnchor\": \"generic-array\"\n          }\n        }\n      },\n      \"numberArray\": {\n        \"$id\": \"array_of_numbers\",\n        \"$ref\": \"fully_generic_array\",\n        \"$defs\": {\n          \"numbersOnly\": {\n            \"$dynamicAnchor\": \"generic-array\",\n            \"type\": \"number\"\n          }\n        }\n      },\n      \"stringArray\": {\n        \"$id\": \"array_of_strings\",\n        \"$ref\": \"fully_generic_array\",\n        \"$defs\": {\n          \"stringsOnly\": {\n            \"$dynamicAnchor\": \"generic-array\",\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"objWithTypedArray\": {\n        \"$id\": \"obj_with_typed_array\",\n        \"type\": \"object\",\n        \"required\": [\"dataType\", \"data\"],\n        \"properties\": {\n          \"dataType\": {\n            \"enum\": [\"string\", \"number\"]\n          }\n        },\n        \"oneOf\": [{\n          \"properties\": {\n            \"dataType\": {\"const\": \"string\"},\n            \"data\": {\"$ref\": \"array_of_strings\"}\n          }\n        }, {\n          \"properties\": {\n            \"dataType\": {\"const\": \"number\"},\n            \"data\": {\"$ref\": \"array_of_numbers\"}\n          }\n        }]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pet Inheritance Schema with Discriminator in YAML\nDESCRIPTION: Shows how to use discriminator with allOf to create an inheritance-like schema structure where child schemas extend a base schema.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_83\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Cat`\n          properties:\n            name:\n              type: string\n    Dog:\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Dog`\n          properties:\n            bark:\n              type: string\n    Lizard:\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Lizard`\n          properties:\n            lovesRocks:\n              type: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Encoding Object for Multipart Request in OpenAPI YAML\nDESCRIPTION: This snippet demonstrates how to use the Encoding Object to control serialization of parts in a multipart request body. It specifies content types, headers, and other encoding properties for different parts of the request.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/mixed:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage:\n            # default is application/octet-stream, need to declare an image type only!\n            type: string\n            format: binary\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Example for Callback Expression Evaluation\nDESCRIPTION: An HTTP request example demonstrating how runtime expressions can be evaluated in the context of a callback. The example includes request headers, body with nested JSON structure, and the corresponding response.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_42\n\nLANGUAGE: http\nCODE:\n```\nPOST /subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"https://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"https://clientdomain.com/fast\",\n    \"https://clientdomain.com/medium\",\n    \"https://clientdomain.com/slow\"\n  ]\n}\n\n201 Created\nLocation: https://example.org/subscription/1\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Implicit Flow in OpenAPI YAML\nDESCRIPTION: This YAML snippet is equivalent to the JSON definition for OAuth2 implicit flow. It defines the same security scheme with authorization URL and scopes in OpenAPI YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_80\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Defining a Responses Object with Default Response in YAML\nDESCRIPTION: A YAML representation of a Responses Object with a 200 success response and default error response. Each references a schema from the components section using the $ref syntax.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n'200':\n  description: a pet to be returned\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n```\n\n----------------------------------------\n\nTITLE: Defining a Map/Dictionary Model with String Values\nDESCRIPTION: Shows how to define an object with arbitrary property names that map to string values using additionalProperties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Example Operation Object in YAML\nDESCRIPTION: YAML representation of the same Operation Object for updating a pet, showing equivalent structure and fields as the JSON example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       properties:\n          name:\n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content:\n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content:\n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in OpenAPI Specification (JSON)\nDESCRIPTION: Example of a License Object in JSON format, providing license information for the exposed API including name and SPDX identifier.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apache 2.0\",\n  \"identifier\": \"Apache-2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Implicit Flow in JSON\nDESCRIPTION: Shows how to configure the OAuth2 Implicit flow using the Security Scheme Object and OAuth Flows Object in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Object with Path Parameter\nDESCRIPTION: Demonstrates creating links between operations using path parameters. This example shows how to use $request.path.id to pass a user identifier from the request path to a linked operation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n```\n\n----------------------------------------\n\nTITLE: Defining a Responses Object with Default Response in JSON\nDESCRIPTION: An example of a Responses Object in JSON format that includes a 200 response for a successful operation and a default response for unexpected errors. Both reference schema definitions from the components section.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Security Requirement in YAML\nDESCRIPTION: YAML representation of a Security Requirement Object using OAuth2 with specific required scopes. This defines that the 'petstore_auth' security scheme requires both write and read permissions for pets.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_100\n\nLANGUAGE: yaml\nCODE:\n```\npetstore_auth:\n  - write:pets\n  - read:pets\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Security Requirement in JSON\nDESCRIPTION: Example of a Security Requirement Object using OAuth2 with specific required scopes. This defines that the 'petstore_auth' security scheme requires both write and read permissions for pets.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petstore_auth\": [\"write:pets\", \"read:pets\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Security Requirement in OpenAPI\nDESCRIPTION: Example of defining an OAuth2 security requirement with specific scopes in OpenAPI. This demonstrates how to specify required OAuth2 scopes (write:pets and read:pets) for the petstore_auth security scheme.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_93\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\npetstore_auth:\n- write:pets\n- read:pets\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Data Structures in OpenAPI Specification (YAML)\nDESCRIPTION: This snippet shows the YAML equivalent of the generic data structures defined in the previous JSON snippet. It includes examples of generic arrays and objects with typed arrays.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_78\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    genericArrayComponent:\n      $id: fully_generic_array\n      type: array\n      items:\n        $dynamicRef: '#generic-array'\n      $defs:\n        allowAll:\n          $dynamicAnchor: generic-array\n    numberArray:\n      $id: array_of_numbers\n      $ref: fully_generic_array\n      $defs:\n        numbersOnly:\n          $dynamicAnchor: generic-array\n          type: number\n    stringArray:\n      $id: array_of_strings\n      $ref: fully_generic_array\n      $defs:\n        stringsOnly:\n          $dynamicAnchor: generic-array\n          type: string\n    objWithTypedArray:\n      $id: obj_with_typed_array\n      type: object\n      required:\n      - dataType\n      - data\n      properties:\n        dataType:\n          enum:\n          - string\n          - number\n      oneOf:\n      - properties:\n          dataType:\n            const: string\n          data:\n            $ref: array_of_strings\n      - properties:\n          dataType:\n            const: number\n          data:\n            $ref: array_of_numbers\n```\n\n----------------------------------------\n\nTITLE: Defining File Upload in POST Request Body\nDESCRIPTION: This YAML snippet shows how to define a requestBody for submitting a file in a POST operation, demonstrating both a generic binary file upload and specific image types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/octet-stream: {}\n\n# multiple, specific media types may be specified:\nrequestBody:\n  content:\n    # a binary file of type png or jpeg\n    image/jpeg: {}\n    image/png: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Link Objects in YAML\nDESCRIPTION: Examples of Link Object usage in YAML, demonstrating how to define links between operations using parameters from the request and response.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n```\n\n----------------------------------------\n\nTITLE: Path Parameter of String Type in YAML\nDESCRIPTION: YAML representation of a required path parameter named 'username' with a string schema type, equivalent to the JSON example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nname: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Handling XML Arrays in OpenAPI\nDESCRIPTION: This snippet shows various ways to configure XML array representations in OpenAPI, including element naming and wrapping.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Defining Media Types in OpenAPI Specification\nDESCRIPTION: Examples of possible media type definitions in compliance with RFC6838. These definitions are used to specify the format of request and response payloads in API operations.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n```\n\n----------------------------------------\n\nTITLE: Simple Object Model Schema\nDESCRIPTION: Schema definition for an object with required name field, optional address reference and age integer\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"name\"],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nrequired:\n  - name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n```\n\n----------------------------------------\n\nTITLE: Implicit OAuth2 Security Scheme in OpenAPI\nDESCRIPTION: This example configures an OAuth2 security scheme with the implicit flow, defining authorization URL and available scopes for pet operations.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Security Requirement in YAML\nDESCRIPTION: YAML representation of a Security Requirement Object for OAuth2 authentication with required scopes for writing to and reading pets resources.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_112\n\nLANGUAGE: yaml\nCODE:\n```\npetstore_auth:\n  - write:pets\n  - read:pets\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Multiple Servers Example in JSON and YAML\nDESCRIPTION: Example showing how to specify multiple servers in the OpenAPI Object, with each server having a URL and description to represent different environments.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n```\n\n----------------------------------------\n\nTITLE: Multiple Servers Configuration in OpenAPI\nDESCRIPTION: Example showing how to configure multiple servers including development, staging, and production environments.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-OAuth2 Security Requirement in JSON\nDESCRIPTION: Example of a Security Requirement Object for a non-OAuth2 security scheme using the 'api_key' security scheme. The empty array indicates no specific scopes are required.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_key\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Objects in YAML Format for OpenAPI\nDESCRIPTION: Example of a Responses Object in YAML format, defining both a successful 200 response returning a Pet object and a default response for unexpected errors. Shows the structure with description and content fields.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\n'200':\n  description: a pet to be returned\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n```\n\n----------------------------------------\n\nTITLE: API Key Security Scheme in OpenAPI\nDESCRIPTION: Defines a security scheme using an API key passed in the request header. This requires clients to include an 'api-key' header with their API key value in each request.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_92\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api-key\",\n  \"in\": \"header\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: apiKey\nname: api-key\nin: header\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional OAuth2 Security in JSON\nDESCRIPTION: Example of how to define optional OAuth2 security in an OpenAPI or Operation Object. This configuration allows either anonymous access (empty object) or access via OAuth2 with specific scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\"write:pets\", \"read:pets\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Object with Examples in JSON\nDESCRIPTION: This snippet demonstrates how to define a Media Type Object with examples for different pet types in JSON format. It includes a schema reference and multiple examples.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\":\n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  {\n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Operation Object Example - OpenAPI Pet Store Operation Definition\nDESCRIPTION: Example showing an OpenAPI Operation Object for updating a pet with form data. Includes tags, parameters, request body schema, response definitions, and security requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"pet\"],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"]\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\"write:pets\", \"read:pets\"]\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  - pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n  - name: petId\n    in: path\n    description: ID of pet that needs to be updated\n    required: true\n    schema:\n      type: string\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          name:\n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n        required:\n          - status\nresponses:\n  '200':\n    description: Pet updated.\n    content:\n      application/json: {}\n      application/xml: {}\n  '405':\n    description: Method Not Allowed\n    content:\n      application/json: {}\n      application/xml: {}\nsecurity:\n  - petstore_auth:\n      - write:pets\n      - read:pets\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Models in OpenAPI Specification (YAML)\nDESCRIPTION: This snippet shows the YAML equivalent of the polymorphic models defined in the previous JSON snippet. It includes the base 'Pet' model and its subclasses 'Cat' and 'Dog'.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_76\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n        - name\n        - petType\n    Cat: # \"Cat\" will be used as the discriminating value\n      description: A representation of a cat\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            huntingSkill:\n              type: string\n              description: The measured skill for hunting\n              enum:\n                - clueless\n                - lazy\n                - adventurous\n                - aggressive\n          required:\n            - huntingSkill\n    Dog: # \"Dog\" will be used as the discriminating value\n      description: A representation of a dog\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            packSize:\n              type: integer\n              format: int32\n              description: the size of the pack the dog is from\n              default: 0\n              minimum: 0\n          required:\n            - packSize\n```\n\n----------------------------------------\n\nTITLE: Defining API Responses in OpenAPI YAML\nDESCRIPTION: YAML version of the Responses Object that defines a 200 success response returning a pet object and a default error response. Each response references schema components with different content types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\n'200':\n  description: a pet to be returned\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Authentication in OpenAPI JSON\nDESCRIPTION: This JSON snippet demonstrates how to define a basic authentication security scheme in OpenAPI. It specifies the type and scheme for HTTP basic authentication.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Callback Example in OpenAPI\nDESCRIPTION: Shows how to define a callback with hardcoded server URL and dynamic query parameters from request body.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\ntransactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Creating a Model with Example in JSON and YAML\nDESCRIPTION: Demonstrates how to define a schema with an example, including required properties and example values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Enumeration Using oneOf\nDESCRIPTION: Demonstrates how to create an enumeration with additional metadata like titles and descriptions for each value. Uses oneOf with const to define the possible values and their annotations.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"oneOf\": [\n    {\n      \"const\": \"RGB\",\n      \"title\": \"Red, Green, Blue\",\n      \"description\": \"Specify colors with the red, green, and blue additive color model\"\n    },\n    {\n      \"const\": \"CMYK\",\n      \"title\": \"Cyan, Magenta, Yellow, Black\",\n      \"description\": \"Specify colors with the cyan, magenta, yellow, and black subtractive color model\"\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\noneOf:\n  - const: RGB\n    title: Red, Green, Blue\n    description: Specify colors with the red, green, and blue additive color model\n  - const: CMYK\n    title: Cyan, Magenta, Yellow, Black\n    description: Specify colors with the cyan, magenta, yellow, and black subtractive color model\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter with Multiple String Values in OpenAPI\nDESCRIPTION: This example shows how to define an optional query parameter that allows multiple string values by repeating the parameter in OpenAPI Specification. It includes the parameter name, location, description, required status, schema, style, and explode properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Security Requirement with Scopes in JSON and YAML\nDESCRIPTION: Examples of OAuth2 security requirement definition with required scopes. The 'petstore_auth' scheme must be defined in the Security Schemes section, and the array contains the OAuth2 scopes needed for authorization.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_84\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\npetstore_auth:\n- write:pets\n- read:pets\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-OAuth2 Security Requirement in YAML\nDESCRIPTION: YAML representation of a Security Requirement Object for a non-OAuth2 security scheme like an API key. The empty array indicates that no scopes are required.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_110\n\nLANGUAGE: yaml\nCODE:\n```\napi_key: []\n```\n\n----------------------------------------\n\nTITLE: Defining Info Object in OpenAPI Specification (JSON)\nDESCRIPTION: Example of an Info Object in JSON format, providing metadata about the API including title, summary, description, terms of service, contact information, license, and version.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Example Pet Store App\",\n  \"summary\": \"A pet store manager.\",\n  \"description\": \"This is an example server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Object in OpenAPI Specification\nDESCRIPTION: Example implementation of the Contact Object that provides contact information for the exposed API including name, URL and email\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication in OpenAPI YAML\nDESCRIPTION: This YAML snippet is the equivalent of the JSON configuration for API key authentication. It defines the same settings for API key type, name, and location in OpenAPI YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_78\n\nLANGUAGE: yaml\nCODE:\n```\ntype: apiKey\nname: api_key\nin: header\n```\n\n----------------------------------------\n\nTITLE: Defining Response Objects in JSON Format in OpenAPI\nDESCRIPTION: Example of a Responses Object in JSON format, showing a 200 response for a successful operation and a default response for handling errors.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Binary File Upload in YAML\nDESCRIPTION: These YAML snippets demonstrate how to define content for binary file uploads, including specific media types like PNG images and arbitrary binary files.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n# a PNG image as a binary file:\ncontent:\n  image/png: {}\n\n# an arbitrary binary file:\ncontent:\n  application/octet-stream: {}\n\n# arbitrary JSON without constraints beyond being syntactically valid:\ncontent:\n  application/json: {}\n```\n\n----------------------------------------\n\nTITLE: Complex Query Parameter with Content in JSON\nDESCRIPTION: Definition of a complex query parameter using the content field to define JSON serialization for coordinates with latitude and longitude.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Array Response in OpenAPI YAML\nDESCRIPTION: YAML version of a Response Object that returns an array of complex objects. This demonstrates how to structure array responses and reference component schemas.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A complex object array response\ncontent:\n  application/json:\n    schema:\n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n```\n\n----------------------------------------\n\nTITLE: Defining Free-Form Query Parameter with Integer Values in OpenAPI\nDESCRIPTION: This example demonstrates how to define a free-form query parameter that allows undefined parameters of integer type in OpenAPI Specification. It includes the parameter location, name, schema with additional properties, and style.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n```\n\n----------------------------------------\n\nTITLE: Defining Example Objects in YAML\nDESCRIPTION: Multiple examples of using the Example Object in different contexts within an OpenAPI document, including in schemas, request bodies, parameters, and responses.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\n# in a model\nschemas:\n  properties:\n    name:\n      type: string\n      examples:\n        name:\n          $ref: http://example.org/petapi-examples/openapi.json#/components/examples/name-example\n\n# in a request body:\n  requestBody:\n    content:\n      'application/json':\n        schema:\n          $ref: '#/components/schemas/Address'\n        examples:\n          foo:\n            summary: A foo example\n            value: {\"foo\": \"bar\"}\n          bar:\n            summary: A bar example\n            value: {\"bar\": \"baz\"}\n      'application/xml':\n        examples:\n          xmlExample:\n            summary: This is an example in XML\n            externalValue: 'http://example.org/examples/address-example.xml'\n      'text/plain':\n        examples:\n          textExample:\n            summary: This is a text example\n            externalValue: 'http://foo.bar/examples/address-example.txt'\n\n\n# in a parameter\n  parameters:\n    - name: 'zipCode'\n      in: 'query'\n      schema:\n        type: 'string'\n        format: 'zip-code'\n        examples:\n          zip-example:\n            $ref: '#/components/examples/zip-example'\n\n# in a response\n  responses:\n    '200':\n      description: your car appointment has been booked\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SuccessResponse'\n          examples:\n            confirmation-success:\n              $ref: '#/components/examples/confirmation-success'\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in YAML for OpenAPI Specification\nDESCRIPTION: Example of a License Object in YAML format, specifying the license information for the exposed API using the SPDX identifier.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: Apache 2.0\nidentifier: Apache-2.0\n```\n\n----------------------------------------\n\nTITLE: Link Operation Example with Request Path Parameter\nDESCRIPTION: YAML example demonstrating how to define a link operation that uses request path parameters to connect related API endpoints. Shows link definition between user and address endpoints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_70\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: the user identifier, as userId\n        schema:\n          type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userid: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n      - name: userid\n        in: path\n        required: true\n        description: the user identifier, as userId\n        schema:\n          type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body for File Upload in YAML\nDESCRIPTION: This snippet demonstrates how to define a request body for submitting a file in a POST operation using YAML. It accepts any media type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/octet-stream:\n      # any media type is accepted, functionally equivalent to `*/*`\n      schema:\n        # a binary file of any type\n        type: string\n        format: binary\n```\n\n----------------------------------------\n\nTITLE: Link Object Path Parameter Example in OpenAPI YAML\nDESCRIPTION: Demonstrates how to define a link between operations where a path parameter from the request is passed to the linked operation. The example shows a user resource linking to a user address resource.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n        links:\n          address:\n            # the target link operationId\n            operationId: getUserAddress\n            parameters:\n              # get the `id` field from the request path parameter named `id`\n              userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n      # linked operation\n      get:\n        operationId: getUserAddress\n        responses:\n          '200':\n            description: the user's address\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Security Requirement in JSON\nDESCRIPTION: Example of a Security Requirement Object for an OAuth2 security scheme named 'petstore_auth' that requires 'write:pets' and 'read:pets' scopes for execution.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Security Scheme Definition\nDESCRIPTION: Defines an HTTP Basic Authentication security scheme in OpenAPI. This uses the 'http' type with 'basic' scheme to indicate that API consumers should use Basic Auth headers for authentication.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_104\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: basic\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-OAuth2 Security Requirement in JSON\nDESCRIPTION: Example of a security requirement object for a non-OAuth2 security scheme in JSON format. The empty array indicates no additional scopes are required for this API key-based security scheme.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_key\": []\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Bearer Authentication in OpenAPI\nDESCRIPTION: Defines a security scheme using JWT bearer tokens with HTTP Authorization header. This specifies that clients must provide a JWT format token in the Authorization header.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_93\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: bearer\nbearerFormat: JWT\n```\n\n----------------------------------------\n\nTITLE: Object Schema with Example\nDESCRIPTION: Schema definition including an example object with id and name properties\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"name\"],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n  - name\nexample:\n  name: Puma\n  id: 1\n```\n\n----------------------------------------\n\nTITLE: Defining a Map/Dictionary Model with Complex Values\nDESCRIPTION: Shows how to define an object with arbitrary property names that map to complex model references using additionalProperties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Multipart Form Data Request Body in YAML\nDESCRIPTION: Example showing how to define a detailed multipart/form-data request body with various types of data including primitive values, objects, binary data, and arrays with different default Content-Types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # default Content-Type for string/binary is `application/octet-stream`\n            type: string\n            format: binary\n          children:\n            # default Content-Type for arrays is based on the `inner` type (text/plain here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: '#/components/schemas/Address'\n```\n\n----------------------------------------\n\nTITLE: Defining Response with Headers in OpenAPI JSON\nDESCRIPTION: Example of a Response Object in JSON format that returns a string with custom headers. This demonstrates how to define rate limit headers with descriptions and schemas.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Array Response Object Example in YAML\nDESCRIPTION: YAML representation of a Response Object that returns an array of complex type objects. It includes the same components as the JSON example but in YAML syntax.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A complex object array response\ncontent:\n  application/json:\n    schema:\n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n```\n\n----------------------------------------\n\nTITLE: Defining a Callback Object in YAML\nDESCRIPTION: An example of a Callback Object definition in YAML, showing how to specify a webhook URL using runtime expressions and define the expected request body and responses.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nmyWebhook:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: webhook successfully processed and no retries will be performed\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Object in OpenAPI Specification using YAML\nDESCRIPTION: This snippet shows how to define an Operation Object in OpenAPI Specification using YAML format. It includes the same elements as the JSON example: tags, summary, operationId, parameters, requestBody, responses, and security definitions for updating a pet in a store.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       properties:\n          name:\n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content:\n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Invalid input\n    content:\n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n```\n\n----------------------------------------\n\nTITLE: Mutual TLS Security Scheme in OpenAPI\nDESCRIPTION: Defines a security scheme using Mutual TLS authentication. This requires clients to present a valid client certificate during the TLS handshake, with the certificate signed by a specific CA.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_94\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"mutualTLS\",\n  \"description\": \"Cert must be signed by example.com CA\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: mutualTLS\ndescription: Cert must be signed by example.com CA\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Implicit Flow in OpenAPI\nDESCRIPTION: Defines a security scheme using OAuth2 Implicit flow. This configuration specifies the authorization URL and available scopes for client applications to request access tokens.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_95\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Defining Link Object with Absolute OperationRef in YAML\nDESCRIPTION: This example demonstrates how to use a Link Object with an absolute operationRef to reference an operation in an external OpenAPI document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: Paths Object Example in JSON\nDESCRIPTION: Example of a Paths Object showing a GET endpoint definition for retrieving pets in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {         \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Object with Examples in YAML\nDESCRIPTION: This snippet shows how to define a Media Type Object with examples for different pet types in YAML format. It includes a schema reference and multiple examples.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\napplication/json:\n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n```\n\n----------------------------------------\n\nTITLE: Using Response Body in Link Objects\nDESCRIPTION: An example of how to use values from the response body to drive a linked operation in a Link Object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n```\n\n----------------------------------------\n\nTITLE: OperationRef Examples with Relative and URI References\nDESCRIPTION: YAML examples demonstrating both relative and URI-based operationRef usage for linking operations.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_72\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1%7Busername%7D/get'\n    parameters:\n      username: $response.body#/username\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1%7Busername%7D/get\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Polymorphism and Discriminators in JSON and YAML\nDESCRIPTION: Example of defining models with polymorphism using discriminators to differentiate between Pet types (Cat and Dog) in both JSON and YAML formats for OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-OAuth2 Security Requirement in OpenAPI\nDESCRIPTION: Example of defining an API key security requirement in OpenAPI. This shows the syntax for specifying a non-OAuth2 security mechanism with an empty array indicating no specific scopes are required.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_92\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_key\": []\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\napi_key: []\n```\n\n----------------------------------------\n\nTITLE: Defining Non-OAuth2 Security Requirement in JSON and YAML\nDESCRIPTION: Examples showing how to define a non-OAuth2 security requirement using an API key. The security scheme must be defined elsewhere in the Security Schemes section of the Components Object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_key\": []\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\napi_key: []\n```\n\n----------------------------------------\n\nTITLE: Defining Link Object with Response Body Value in YAML\nDESCRIPTION: This example demonstrates how to use a Link Object to create a link between operations, using a value from the response body to drive the linked operation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Implicit Flow in OpenAPI\nDESCRIPTION: This example shows how to configure an OAuth2 implicit flow security scheme in OpenAPI, including authorization URL and scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Multipart Form Data in OpenAPI YAML\nDESCRIPTION: This snippet shows a complex multipart form data request body definition in OpenAPI. It includes various data types such as UUID, object, binary string, and arrays of primitives and objects.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # default Content-Type for string/binary is `application/octet-stream`\n            type: string\n            format: binary\n          children:\n            # default Content-Type for arrays is based on the `inner` type (text/plain here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: '#/components/schemas/Address'\n```\n\n----------------------------------------\n\nTITLE: Using operationRef with JSON Pointer in OpenAPI Links\nDESCRIPTION: Demonstrates how to reference operations using operationRef with both relative and absolute URIs in OpenAPI link objects.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    operationRef: '#/paths/~12.0~1repositories~1%7Busername%7D/get'\n    parameters:\n      username: $response.body#/username\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    operationRef: https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1%7Busername%7D/get\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: Defining Response Types with oneOf in OpenAPI 3.0 YAML\nDESCRIPTION: This snippet demonstrates how to define a response payload that must match exactly one of multiple schemas using the oneOf keyword.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_74\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional OAuth2 Security in JSON\nDESCRIPTION: Example of setting up optional OAuth2 security at the OpenAPI Object or Operation Object level. This provides both anonymous access (empty object) and OAuth2 access with specific scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_113\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\"write:pets\", \"read:pets\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body with String Array in YAML\nDESCRIPTION: This example shows how to define a request body parameter that is an array of string values using YAML format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Defining a Path Item Object with GET operation in YAML\nDESCRIPTION: This snippet shows the YAML representation of a Path Item Object with a GET operation. It includes the same structure as the JSON example, defining an API endpoint for retrieving pets by ID.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nget:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    style: simple\n    items:\n      type: string \n```\n\n----------------------------------------\n\nTITLE: Paths Object Example in YAML\nDESCRIPTION: YAML representation of the paths object example, showing equivalent path definition with GET operation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n/pets:\\n  get:\\n    description: Returns all pets from the system that the user has access to\\n    responses:\\n      '200':\\n        description: A list of pets.\\n        content:\\n          application/json:\\n            schema:\\n              type: array\\n              items:\\n                $ref: '#/components/schemas/pet'\n```\n\n----------------------------------------\n\nTITLE: Request Body with Multiple Content Types\nDESCRIPTION: Example of a request body definition supporting multiple content types with external examples.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n        \"user\": {\n          \"summary\": \"User Example\",\n          \"externalValue\": \"https://foo.bar/examples/user-example.json\"\n        }\n      }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n        \"user\": {\n          \"summary\": \"User example in XML\",\n          \"externalValue\": \"https://foo.bar/examples/user-example.xml\"\n        }\n      }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\": {\n          \"summary\": \"User example in Plain text\",\n          \"externalValue\": \"https://foo.bar/examples/user-example.txt\"\n        }\n      }\n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\": {\n          \"summary\": \"User example in other format\",\n          \"externalValue\": \"https://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\ncontent:\n  application/json:\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example\n        externalValue: https://foo.bar/examples/user-example.json\n  application/xml:\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example in XML\n        externalValue: https://foo.bar/examples/user-example.xml\n  text/plain:\n    examples:\n      user:\n        summary: User example in plain text\n        externalValue: https://foo.bar/examples/user-example.txt\n  '*/*':\n    examples:\n      user:\n        summary: User example in other format\n        externalValue: https://foo.bar/examples/user-example.whatever\n```\n\n----------------------------------------\n\nTITLE: Defining Form URL Encoded RequestBody in OpenAPI YAML\nDESCRIPTION: This snippet shows how to define a requestBody for form-urlencoded data, including complex object stringification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Models with Discriminator in JSON\nDESCRIPTION: This snippet demonstrates how to define polymorphic models using a discriminator in JSON format. It includes a base 'Pet' schema and derived 'Cat' and 'Dog' schemas.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Array Definition in YAML\nDESCRIPTION: YAML representation of an optional query parameter for an array of strings, using form style with exploded values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-OAuth2 Security Requirement in JSON\nDESCRIPTION: Example of a Security Requirement Object for a non-OAuth2 security scheme like an API key. The empty array indicates that no scopes are required for this security scheme.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_109\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_key\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Single Server in OpenAPI Specification\nDESCRIPTION: Shows how to define a single server using the Server Object in both JSON and YAML formats. It includes the server URL and a description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://development.gigantic-server.com/v1\ndescription: Development server\n```\n\n----------------------------------------\n\nTITLE: Discriminator with Explicit Mapping in OpenAPI 3.0 YAML\nDESCRIPTION: This snippet illustrates how to use the discriminator with an explicit mapping when the discriminator value doesn't match the schema name or implicit mapping is not possible.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_76\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'\n  discriminator:\n    propertyName: pet_type\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with Headers in YAML for OpenAPI Specification\nDESCRIPTION: This example demonstrates how to define a Response Object in YAML format with headers. It includes a description, content schema with an example, and headers with rate limit information.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n```\n\n----------------------------------------\n\nTITLE: Multiple Servers Configuration\nDESCRIPTION: Example showing configuration of multiple servers including development, staging, and production environments.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n```\n\n----------------------------------------\n\nTITLE: Defining Examples for Request Body Content Types in YAML\nDESCRIPTION: This example demonstrates how to provide examples for different content types (JSON, XML, plain text) in a request body using the Example Object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples:\n        foo:\n          summary: A foo example\n          value: {\"foo\": \"bar\"}\n        bar:\n          summary: A bar example\n          value: {\"bar\": \"baz\"}\n    'application/xml':\n      examples:\n        xmlExample:\n          summary: This is an example in XML\n          externalValue: 'https://example.org/examples/address-example.xml'\n    'text/plain':\n      examples:\n        textExample:\n          summary: This is a text example\n          externalValue: 'https://foo.bar/examples/address-example.txt'\n```\n\n----------------------------------------\n\nTITLE: Defining Query URL Callback in OpenAPI\nDESCRIPTION: A Callback Object example that uses the queryUrl parameter from the request to define a dynamic webhook callback endpoint.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nmyCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Implementing Map/Dictionary Properties with String Values\nDESCRIPTION: Demonstrates how to define a schema for objects with dynamic property names (dictionary/map pattern) where all values are strings. Uses additionalProperties to specify the value type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Multipart Form in OpenAPI\nDESCRIPTION: Example of a basic multipart/form-data request body definition in OpenAPI, showing default encoding behavior for different property types including string, binary, and array properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default for primitives without a special format is text/plain\n            type: string\n            format: uuid\n          profileImage:\n            # default for string with binary format is `application/octet-stream`\n            type: string\n            format: binary\n          addresses:\n            # default for arrays is based on the type in the `items`\n            # subschema, which is an object, so `application/json`\n            type: array\n            items:\n              $ref: '#/components/schemas/Address'\n```\n\n----------------------------------------\n\nTITLE: Defining Info Object in OpenAPI Specification (YAML)\nDESCRIPTION: Example of an Info Object in YAML format, providing metadata about the API including title, summary, description, terms of service, contact information, license, and version.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Example Pet Store App\nsummary: A pet store manager.\ndescription: This is an example server for a pet store.\ntermsOfService: https://example.com/terms/\ncontact:\n  name: API Support\n  url: https://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter with String Array in JSON\nDESCRIPTION: This snippet demonstrates how to define an optional query parameter with a string array, allowing multiple values by repeating the query parameter, using JSON format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Paths Object in OpenAPI Specification (JSON)\nDESCRIPTION: Example of a Paths Object in JSON format, defining a GET operation for the /pets endpoint with a 200 response returning a list of pets.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {         \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Array Response Example in OpenAPI\nDESCRIPTION: Demonstrates how to define a response containing an array of complex objects using both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A complex object array response\ncontent:\n  application/json:\n    schema:\n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple File Upload with Multipart Form Data in YAML\nDESCRIPTION: Example showing how to define a request body for uploading multiple files using multipart/form-data content type, with an array of binary strings.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items:\n              type: string\n              format: binary\n```\n\n----------------------------------------\n\nTITLE: Reference Object Examples in OpenAPI\nDESCRIPTION: Multiple examples showing different ways to reference components using the Reference Object, including internal, schema, and relative references.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$ref\": \"#/components/schemas/Pet\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: '#/components/schemas/Pet'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"Pet.json\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: Pet.yaml\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: definitions.yaml#/Pet\n```\n\n----------------------------------------\n\nTITLE: Server Configuration with Variables\nDESCRIPTION: Example demonstrating server configuration using variables for username, port, and base path.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"A user-specific subdomain. Use `demo` for a free sandbox environment.\"\n        },\n        \"port\": {\n          \"enum\": [\"8443\", \"443\"],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - url: https://{username}.gigantic-server.com:{port}/{basePath}\n    description: The production API server\n    variables:\n      username:\n        default: demo\n        description: A user-specific subdomain. Use `demo` for a free sandbox environment.\n      port:\n        enum:\n          - '8443'\n          - '443'\n        default: '8443'\n      basePath:\n        default: v2\n```\n\n----------------------------------------\n\nTITLE: Header Parameter with Array in JSON\nDESCRIPTION: Defines a header parameter that contains an array of 64-bit integers. The parameter is named 'token', is required, and uses the 'simple' serialization style.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Body Parameter with Referenced Schema in JavaScript\nDESCRIPTION: Example of a body parameter that references a schema definition, typically used for model definitions. It includes the parameter name, location, description, required flag, and a schema reference.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"user\",\n  \"in\": \"body\",\n  \"description\": \"user to add to the system\",\n  \"required\": true,\n  \"schema\": {\n    \"$ref\": \"#/definitions/User\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Single Server Object in JSON\nDESCRIPTION: Example of a single Server Object in JSON format, including URL and description for a development server.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with Headers in JSON for OpenAPI Specification\nDESCRIPTION: This example shows how to define a Response Object in JSON format with headers. It includes a description, content schema, and headers with rate limit information.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Configuration with Variables in OpenAPI\nDESCRIPTION: Example demonstrating server configuration using variables for dynamic values like username, port, and base path.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      default: v2\n```\n\n----------------------------------------\n\nTITLE: Defining Example in Response with YAML\nDESCRIPTION: Illustrates how to define an example for a response using YAML. The example references a component example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_65\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  '200':\n    description: your car appointment has been booked\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body for File Upload in YAML\nDESCRIPTION: Example showing how to define a request body for submitting any file type in a POST operation using application/octet-stream media type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/octet-stream:\n      # any media type is accepted, functionally equivalent to `*/*`\n      schema:\n        # a binary file of any type\n        type: string\n        format: binary\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Composition in OpenAPI\nDESCRIPTION: Schema definitions showing model composition using allOf to extend error models with additional properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"definitions\": {\n    \"ErrorModel\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"message\",\n        \"code\"\n      ],\n      \"properties\": {\n        \"message\": {\n          \"type\": \"string\"\n        },\n        \"code\": {\n          \"type\": \"integer\",\n          \"minimum\": 100,\n          \"maximum\": 600\n        }\n      }\n    },\n    \"ExtendedErrorModel\": {\n      \"allOf\": [\n        {\n          \"$ref\": \"#/definitions/ErrorModel\"\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"rootCause\"\n          ],\n          \"properties\": {\n            \"rootCause\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  ErrorModel:\n    type: object\n    required:\n    - message\n    - code\n    properties:\n      message:\n        type: string\n      code:\n        type: integer\n        minimum: 100\n        maximum: 600\n  ExtendedErrorModel:\n    allOf:\n    - $ref: '#/definitions/ErrorModel'\n    - type: object\n      required:\n      - rootCause\n      properties:\n        rootCause:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Form URL Encoded Request Body in YAML\nDESCRIPTION: Example showing how to define a request body for form URL encoded data (application/x-www-form-urlencoded) with simple and complex data types according to RFC1866.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Body Parameter with Referenced Schema in YAML\nDESCRIPTION: YAML representation of a body parameter referencing a schema definition. It includes the same properties as the JavaScript version: name, location, description, required flag, and schema reference.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nname: user\nin: body\ndescription: user to add to the system\nrequired: true\nschema:\n  $ref: '#/definitions/User'\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Object in OpenAPI Specification (YAML)\nDESCRIPTION: Example of a Contact Object in YAML format, providing contact information for the exposed API including name, URL, and email address.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nname: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Status Responses in OpenAPI Specification\nDESCRIPTION: Example of a Responses Object that defines a 200 status code response for successful operations and a default response for errors, both referencing schema components.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n'200':\n  description: a pet to be returned\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with Headers in YAML\nDESCRIPTION: This snippet shows the YAML representation of a Response Object with a string schema and custom headers.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\nschema:\n  type: string\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    type: integer\n```\n\n----------------------------------------\n\nTITLE: WebHook Callback Example in YAML\nDESCRIPTION: YAML example of a Callback Object for a WebHook that uses a query string parameter from the request to define the callback URL. It includes a POST operation with a request body and response definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nmyCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body with String Array in JSON\nDESCRIPTION: This snippet illustrates how to define a request body parameter that is an array of string values using JSON format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Operation Object in JSON\nDESCRIPTION: This snippet demonstrates how to define an Operation Object in JSON format. It includes various fields such as tags, summary, operationId, consumes, produces, parameters, responses, and security requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"description\": \"\",\n  \"operationId\": \"updatePetWithForm\",\n  \"consumes\": [\n    \"application/x-www-form-urlencoded\"\n  ],\n  \"produces\": [\n    \"application/json\",\n    \"application/xml\"\n  ],\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"name\",\n      \"in\": \"formData\",\n      \"description\": \"Updated name of the pet\",\n      \"required\": false,\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"status\",\n      \"in\": \"formData\",\n      \"description\": \"Updated status of the pet\",\n      \"required\": false,\n      \"type\": \"string\"\n    }\n  ],\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\"\n    },\n    \"405\": {\n      \"description\": \"Invalid input\"\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Free-Form Query Parameter with Object Schema in YAML\nDESCRIPTION: YAML representation of a query parameter that accepts an object with arbitrary integer properties, equivalent to the JSON example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n```\n\n----------------------------------------\n\nTITLE: Complex Parameter with Content Definition\nDESCRIPTION: Definition of a complex query parameter using content to define serialization with JSON schema.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\"lat\", \"long\"],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n```\n\n----------------------------------------\n\nTITLE: Defining XML Array Element Names in OpenAPI JSON\nDESCRIPTION: This snippet demonstrates how to change element names for XML arrays in OpenAPI JSON format. It shows the configuration for naming individual array items.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Query Parameter with Content\nDESCRIPTION: Defines a query parameter using content field to specify complex JSON serialization with required latitude and longitude properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n```\n\n----------------------------------------\n\nTITLE: Defining OperationRef in YAML - OpenAPI Specification\nDESCRIPTION: Examples of using operationRef for relative and absolute references to operations in OpenAPI. Shows how to link operations using path references and parameter mapping.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Example Objects in Request Body (YAML)\nDESCRIPTION: This snippet shows how to use Example Objects in a request body for different content types (JSON, XML, plain text). It demonstrates the use of inline examples and external references.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples:\n        foo:\n          summary: A foo example\n          value:\n            foo: bar\n        bar:\n          summary: A bar example\n          value:\n            bar: baz\n    application/xml:\n      examples:\n        xmlExample:\n          summary: This is an example in XML\n          externalValue: https://example.org/examples/address-example.xml\n    text/plain:\n      examples:\n        textExample:\n          summary: This is a text example\n          externalValue: https://foo.bar/examples/address-example.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Binary File Upload Schema in YAML for OpenAPI 3.0\nDESCRIPTION: This snippet demonstrates how to define a schema for binary file uploads in OpenAPI 3.0 using YAML. It shows the structure for both generic binary files and specific image types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n# content transferred in binary (octet-stream):\nschema:\n  type: string\n  format: binary\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication in JSON\nDESCRIPTION: Demonstrates how to configure API key authentication using the Security Scheme Object in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple OAuth2 Flows Security Scheme Definition\nDESCRIPTION: Defines an OAuth2 security scheme supporting multiple flow types. This example includes both Implicit and Authorization Code flows, with their respective URLs and available scopes defined for each flow type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_108\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Model Schema in JSON and YAML\nDESCRIPTION: Shows how to define a schema for an object with required properties, references to other schemas, and property constraints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Link Object Using Response Body Values\nDESCRIPTION: Shows how to create links that use values from the response body to drive the linked operation. This example extracts the UUID from the response to use as a parameter.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n```\n\n----------------------------------------\n\nTITLE: Optional Query Parameter with Array in JSON\nDESCRIPTION: Defines an optional query parameter 'id' that accepts multiple string values. Uses 'form' style with explode=true, allowing the parameter to be repeated in the query string.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Text Response with Headers in OpenAPI\nDESCRIPTION: A Response Object that includes both a string content response and custom rate-limiting headers with their schemas and descriptions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"example\": \"whoa!\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n```\n\n----------------------------------------\n\nTITLE: API Key Security Scheme in OpenAPI\nDESCRIPTION: This example configures an API Key security scheme where the key is sent in the header with the name 'api_key'.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: apiKey\nname: api_key\nin: header\n```\n\n----------------------------------------\n\nTITLE: Security Definitions Object Example in OpenAPI\nDESCRIPTION: Example of a Security Definitions Object in OpenAPI Specification, showing JavaScript and YAML representations of API key and OAuth2 security schemes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"api_key\": {\n    \"type\": \"apiKey\",\n    \"name\": \"api_key\",\n    \"in\": \"header\"\n  },\n  \"petstore_auth\": {\n    \"type\": \"oauth2\",\n    \"authorizationUrl\": \"http://swagger.io/api/oauth/dialog\",\n    \"flow\": \"implicit\",\n    \"scopes\": {\n      \"write:pets\": \"modify pets in your account\",\n      \"read:pets\": \"read your pets\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\napi_key:\n  type: apiKey\n  name: api_key\n  in: header\npetstore_auth:\n  type: oauth2\n  authorizationUrl: http://swagger.io/api/oauth/dialog\n  flow: implicit\n  scopes:\n    write:pets: modify pets in your account\n    read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Request Body with Referenced Schema in JSON\nDESCRIPTION: Defines a request body that references a User schema and provides examples in multiple formats (JSON, XML, plain text). Each media type specifies external examples via URLs.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n        \"user\": {\n          \"summary\": \"User Example\",\n          \"externalValue\": \"https://foo.bar/examples/user-example.json\"\n        }\n      }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n        \"user\": {\n          \"summary\": \"User example in XML\",\n          \"externalValue\": \"https://foo.bar/examples/user-example.xml\"\n        }\n      }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\": {\n          \"summary\": \"User example in Plain text\",\n          \"externalValue\": \"https://foo.bar/examples/user-example.txt\"\n        }\n      }\n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\": {\n          \"summary\": \"User example in other format\",\n          \"externalValue\": \"https://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for RFC6570 Expansion in YAML\nDESCRIPTION: This YAML snippet defines two parameters for use in a query string. The 'formulas' parameter is an object with exploded properties, while the 'words' parameter is a non-exploded array of strings.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_103\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n- name: formulas\n  in: query\n  schema:\n    type: object\n    additionalProperties:\n      type: string\n  explode: true\n- name: words\n  in: query\n  schema:\n    type: array\n    items:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Path Parameter String Definition in JSON\nDESCRIPTION: Example of a path parameter definition with a string value in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base64 Encoded Content Schema in YAML\nDESCRIPTION: This snippet demonstrates how to define a schema for content transferred with base64 encoding in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n# content transferred with base64 encoding\nschema:\n  type: string\n  format: base64\n```\n\n----------------------------------------\n\nTITLE: Free-Form Query Parameter in YAML\nDESCRIPTION: YAML representation of a free-form query parameter allowing undefined integer parameters with form style.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n```\n\n----------------------------------------\n\nTITLE: Path Parameter of String Type in JSON\nDESCRIPTION: Defines a required path parameter named 'username' with a string schema type. This parameter would typically be used in a URL path like /users/{username}.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional OAuth2 Security in OpenAPI Object\nDESCRIPTION: Example showing how to make OAuth2 security optional by providing multiple security options. An empty object means no security is required, while other objects define specific security requirements with their scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  - {}\n  - petstore_auth:\n    - write:pets\n    - read:pets\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphism Support in JSON and YAML\nDESCRIPTION: Demonstrates how to use the discriminator property to support polymorphism in schemas, defining a base Pet schema and extending it with Cat and Dog schemas.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body for Specific Image Type Uploads in YAML\nDESCRIPTION: Example showing how to define a request body for uploading only specific image types (JPEG and PNG) using multiple media type specifications.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n# multiple, specific media types may be specified:\nrequestBody:\n  content:\n      # a binary file of type png or jpeg\n    'image/jpeg':\n      schema:\n        type: string\n        format: binary\n    'image/png':\n      schema:\n        type: string\n        format: binary       \n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Media Types for Request Body in OpenAPI YAML\nDESCRIPTION: This snippet demonstrates how to specify multiple media types (image/jpeg and image/png) for a request body in OpenAPI. It defines the schema for binary file uploads of type png or jpeg.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n      # a binary file of type png or jpeg\n    'image/jpeg':\n      schema:\n        type: string\n        format: binary\n    'image/png':\n      schema:\n        type: string\n        format: binary\n```\n\n----------------------------------------\n\nTITLE: Defining Response with Headers in OpenAPI YAML\nDESCRIPTION: YAML version of a Response Object that returns a string with custom headers. This shows how to include an example value and define multiple rate limit headers.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n```\n\n----------------------------------------\n\nTITLE: Defining Reference Object in JSON\nDESCRIPTION: Example of a Reference Object in JSON format that references a schema component within the same OpenAPI document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$ref\": \"#/components/schemas/Pet\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body with Array of Strings in OpenAPI\nDESCRIPTION: This example shows how to define a request body with an array of string values in OpenAPI Specification. It includes a description and content with a schema defining an array of strings.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Examples in YAML Format for OpenAPI\nDESCRIPTION: Example showing how to define media types with multiple examples for a Pet schema in YAML format. Includes references to schemas and demonstrates how to provide multiple examples (cat, dog, frog) with the last one being a reference.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\napplication/json:\n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Security Scheme in OpenAPI\nDESCRIPTION: This snippet defines a Basic Authentication security scheme using the HTTP authentication type with 'basic' scheme.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: basic\n```\n\n----------------------------------------\n\nTITLE: Discriminator with Explicit Mapping in YAML\nDESCRIPTION: Demonstrates how to use a discriminator with explicit mapping when the value doesn't match the schema name or when using external schemas.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_82\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n    - $ref: '#/components/schemas/Cat'\n    - $ref: '#/components/schemas/Dog'\n    - $ref: '#/components/schemas/Lizard'\n    - $ref: https://gigantic-server.com/schemas/Monster/schema.json\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: https://gigantic-server.com/schemas/Monster/schema.json\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body with Referenced Model in YAML\nDESCRIPTION: This example demonstrates how to define a request body with a referenced model definition, including multiple content types and examples, using YAML format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\ncontent:\n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'http://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example in XML\n        externalValue: 'http://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in text plain format\n        externalValue: 'http://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user:\n        summary: User example in other format\n        externalValue: 'http://foo.bar/examples/user-example.whatever'\n```\n\n----------------------------------------\n\nTITLE: Adding Examples to OpenAPI Response Objects\nDESCRIPTION: Illustrates how to reference predefined examples in API response definitions. This example shows a success response with a reference to a component example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  '200':\n    description: your car appointment has been booked\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n```\n\n----------------------------------------\n\nTITLE: Free-form Query Parameter Definition\nDESCRIPTION: Defines a query parameter that accepts arbitrary property names with integer values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n```\n\n----------------------------------------\n\nTITLE: Single Server Configuration Example\nDESCRIPTION: Basic example of configuring a single server with URL and description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://development.gigantic-server.com/v1\ndescription: Development server\n```\n\n----------------------------------------\n\nTITLE: Complex Array Response Object Example in JSON\nDESCRIPTION: Example of a Response Object in JSON format that returns an array of complex type objects. It includes a description and content with application/json media type referencing a schema component.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Request Encoding in OpenAPI YAML\nDESCRIPTION: Example showing how to configure encoding properties for a multipart/mixed request body. This demonstrates content type specifications, character encoding, and custom headers for different parts of the request.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/mixed:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage:\n            # default is application/octet-stream, need to declare an image type only!\n            type: string\n            format: binary\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional OAuth2 Security in YAML\nDESCRIPTION: YAML representation of optional OAuth2 security in an OpenAPI or Operation Object. This configuration allows either anonymous access (empty object) or access via OAuth2 with specific scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_102\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  - {}\n  - petstore_auth:\n      - write:pets\n      - read:pets\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Security Scheme in OpenAPI\nDESCRIPTION: Defines a security scheme using HTTP Basic Authentication. This scheme requires clients to provide username and password credentials in the HTTP Authorization header.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_91\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: basic\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Object with Schema and Examples in OpenAPI\nDESCRIPTION: This example demonstrates how to define a Media Type Object with a schema reference and multiple examples in OpenAPI Specification. It includes a schema reference and examples for different pet types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\":\n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  {\n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\napplication/json:\n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n```\n\n----------------------------------------\n\nTITLE: Using Discriminator with oneOf in OpenAPI 3.0 YAML\nDESCRIPTION: This example shows how to use a discriminator to hint at which schema to use for validation, based on a specific property in the response payload.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_75\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: pet_type\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter with Multiple Values in YAML\nDESCRIPTION: YAML representation of an optional query parameter allowing multiple string values. It includes the same properties as the JavaScript version: name, location, description, required flag, type, items type, and collection format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\ntype: array\nitems:\n  type: string\ncollectionFormat: multi\n```\n\n----------------------------------------\n\nTITLE: Header Object Example in YAML\nDESCRIPTION: Example of a Header Object definition in YAML format, showing a simple integer type header with description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: The number of allowed requests in the current period\nschema:\n  type: integer\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Definition for Username\nDESCRIPTION: Definition of a required path parameter that accepts a string value for username.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Media Type Examples for API Documentation\nDESCRIPTION: Examples of valid media type definitions that comply with RFC6838, showing various content types and versioning patterns.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameter with String Value in OpenAPI\nDESCRIPTION: This example demonstrates how to define a path parameter with a string value in OpenAPI Specification. It includes the parameter name, location, description, required status, and schema.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Contact Object Example in JSON and YAML\nDESCRIPTION: Example of a Contact Object that provides contact information for the exposed API, including name, URL, and email address.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"API Support\",\n  \"url\": \"http://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: API Support\nurl: http://www.example.com/support\nemail: support@example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Form Data for Multiple File Uploads in OpenAPI YAML\nDESCRIPTION: This snippet shows how to define a multipart form data request body for uploading multiple files in OpenAPI. It uses an array of binary strings to represent the files.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items:\n              type: string\n              format: binary\n```\n\n----------------------------------------\n\nTITLE: Response Body Link Operation Example\nDESCRIPTION: YAML example showing how to use response body values to create linked operations using the uuid field.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_71\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n```\n\n----------------------------------------\n\nTITLE: Defining Style Values for Parameter Serialization in OpenAPI\nDESCRIPTION: This table defines the supported 'style' values for parameter serialization in OpenAPI. It specifies the applicable data types, parameter locations, and corresponding RFC references for each style.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| `style` | [`type`](#data-types) | `in` | Comments |\n| ---- | ---- | ---- | ---- |\n| matrix | `primitive`, `array`, `object` | `path` | Path-style parameters defined by [RFC6570](https://tools.ietf.org/html/rfc6570#section-3.2.7) |\n| label | `primitive`, `array`, `object` | `path` | Label style parameters defined by [RFC6570](https://tools.ietf.org/html/rfc6570#section-3.2.5) |\n| simple | `primitive`, `array`, `object` | `path`, `header` | Simple style parameters defined by [RFC6570](https://tools.ietf.org/html/rfc6570#section-3.2.2). This option replaces `collectionFormat` with a `csv` value from OpenAPI 2.0. |\n| form | `primitive`, `array`, `object` | `query`, `cookie` | Form style parameters defined by [RFC6570](https://tools.ietf.org/html/rfc6570#section-3.2.8). This option replaces `collectionFormat` with a `csv` (when `explode` is false) or `multi` (when `explode` is true) value from OpenAPI 2.0. |\n| spaceDelimited | `array`, `object` | `query` | Space separated array values or object properties and values. This option replaces `collectionFormat` equal to `ssv` from OpenAPI 2.0. |\n| pipeDelimited | `array`, `object` | `query` | Pipe separated array values or object properties and values. This option replaces `collectionFormat` equal to `pipes` from OpenAPI 2.0. |\n| deepObject | `object` | `query` | Allows objects with scalar properties to be represented using form parameters. The representation of array or object properties is not defined. |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Media Type Definitions in OpenAPI\nDESCRIPTION: Examples of possible media type definitions that should comply with RFC6838. These show various formats including plain text, JSON, and vendor-specific GitHub API formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Array Response in OpenAPI JSON\nDESCRIPTION: Example of a Response Object in JSON format that returns an array of complex objects. This shows how to reference a component schema for array items and specify the content type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Objects in JSON Format for OpenAPI\nDESCRIPTION: Example of a Responses Object in JSON format, defining both a successful 200 response returning a Pet object and a default response for unexpected errors. Shows the structure with description and content fields.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Link Object for Response in YAML\nDESCRIPTION: This example shows how to use a Link Object to create a link between operations. It demonstrates passing a request parameter to the linked operation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Security Requirement in JSON\nDESCRIPTION: Example of a security requirement object for an OAuth2 security scheme in JSON format. It specifies two required scopes ('write:pets' and 'read:pets') needed for the execution of an operation protected by the 'petstore_auth' scheme.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Key Security Scheme Definition\nDESCRIPTION: Defines an API Key security scheme where the authentication key is passed in a request header. Requires the 'name' field to specify the header name and 'in' field to specify the location (header, query, or cookie).\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_105\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api-key\",\n  \"in\": \"header\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: apiKey\nname: api-key\nin: header\n```\n\n----------------------------------------\n\nTITLE: Linking Operations Using Response Body Values in OpenAPI\nDESCRIPTION: Example of using response body values to drive linked operations, showing how to reference fields from the response body in link parameters.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      userUuid: $response.body#/uuid\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Schema in JSON and YAML\nDESCRIPTION: Example of defining a primitive string schema with email format in both JSON and YAML formats for OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nformat: email\n```\n\n----------------------------------------\n\nTITLE: Free-Form Query Parameter in JSON\nDESCRIPTION: Definition of a free-form query parameter allowing undefined parameters of integer type in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Header Parameter with Array of Integers in OpenAPI\nDESCRIPTION: This example shows how to define a header parameter with an array of 64-bit integer numbers in OpenAPI Specification. It includes the parameter name, location, description, required status, schema, and style.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameter with String Value in YAML\nDESCRIPTION: This example shows how to define a path parameter of a string value using YAML format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nname: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Simple String Response in OpenAPI YAML\nDESCRIPTION: YAML version of a Response Object that returns a simple string. This demonstrates how to structure string responses with text/plain content type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\nrepresentations:\n  text/plain:\n    schema:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Reference Object Examples - OpenAPI Specification\nDESCRIPTION: Various examples of Reference Object usage showing internal, external, and relative references in both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$ref\": \"#/components/schemas/Pet\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: '#/components/schemas/Pet'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"Pet.json\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: Pet.yaml\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: definitions.yaml#/Pet\n```\n\n----------------------------------------\n\nTITLE: Defining Single Server Object in YAML\nDESCRIPTION: Example of a single Server Object in YAML format, including URL and description for a development server.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://development.gigantic-server.com/v1\ndescription: Development server\n```\n\n----------------------------------------\n\nTITLE: Defining Data Type Formats in OpenAPI Specification\nDESCRIPTION: This table shows the predefined formats for data types in OpenAPI Specification, including their JSON data types and comments.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| `format` | JSON Data Type | Comments |\n| ---- | ---- | ---- |\n| `int32` | number | signed 32 bits |\n| `int64` | number | signed 64 bits (a.k.a long) |\n| `float` | number | |\n| `double` | number | |\n| `password` | string | A hint to obscure the value. |\n```\n\n----------------------------------------\n\nTITLE: License Object Example in OpenAPI Specification\nDESCRIPTION: Example showing the structure of a License Object that specifies the license information for the API including name and URL\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apache 2.0\",\n  \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: Apache 2.0\nurl: https://www.apache.org/licenses/LICENSE-2.0.html\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Content in OpenAPI YAML\nDESCRIPTION: This snippet shows how to define binary content in OpenAPI, including octet-stream and base64 encoded image data.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    application/octet-stream: {}\n\ncontent:\n    image/png:\n        schema:\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n```\n\n----------------------------------------\n\nTITLE: Responses Definitions Object Example in OpenAPI\nDESCRIPTION: Example of a Responses Definitions Object in OpenAPI Specification, showing JavaScript and YAML representations of various response types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"NotFound\": {\n    \"description\": \"Entity not found.\"\n  },\n  \"IllegalInput\": {\n  \t\"description\": \"Illegal input for operation.\"\n  },\n  \"GeneralError\": {\n  \t\"description\": \"General Error\",\n  \t\"schema\": {\n  \t\t\"$ref\": \"#/definitions/GeneralError\"\n  \t}\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nNotFound:\n  description: Entity not found.\nIllegalInput:\n  description: Illegal input for operation.\nGeneralError:\n  description: General Error\n  schema:\n    $ref: '#/definitions/GeneralError'\n```\n\n----------------------------------------\n\nTITLE: Defining Link Object with Request Path Parameter in OpenAPI\nDESCRIPTION: Example showing how to define a link between operations where a request path parameter is passed to the linked operation. Demonstrates user ID parameter passing between endpoints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: the user identifier, as userId\n        schema:\n          type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid:\n                    type: string\n                    format: uuid\n          links:\n            address:\n              operationId: getUserAddress\n              parameters:\n                userid: $request.path.id\n  /users/{userid}/address:\n    parameters:\n      - name: userid\n        in: path\n        required: true\n        description: the user identifier, as userId\n        schema:\n          type: string\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n```\n\n----------------------------------------\n\nTITLE: Paths Object Example in JSON\nDESCRIPTION: Example of a Paths Object defining a GET endpoint for pets with response schemas\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"/pets\": {\\n    \"get\": {\\n      \"description\": \"Returns all pets from the system that the user has access to\",\\n      \"responses\": {\\n        \"200\": {         \\n          \"description\": \"A list of pets.\",\\n          \"content\": {\\n            \"application/json\": {\\n              \"schema\": {\\n                \"type\": \"array\",\\n                \"items\": {\\n                  \"$ref\": \"#/components/schemas/pet\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Security Requirements with HTTP and JSON in OpenAPI\nDESCRIPTION: Example of an HTTP request to retrieve an OpenAPI entry document in JSON format that defines a JWT-based security scheme and references a path item in another document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_129\n\nLANGUAGE: http\nCODE:\n```\nGET /api/description/openapi HTTP/1.1\nHost: www.example.com\nAccept: application/openapi+json\n```\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"securitySchemes\": {\n    \"MySecurity\": {\n      \"type\": \"http\",\n      \"scheme\": \"bearer\",\n      \"bearerFormat\": \"JWT\"\n    }\n  }\n},\n\"paths\": {\n  \"/foo\": {\n    \"$ref\": \"other#/components/pathItems/Foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Object with Examples in YAML\nDESCRIPTION: This snippet shows the same Media Type Object definition as the JSON example, but in YAML format. It demonstrates how to reference schemas and provide multiple examples for different pet types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\napplication/json:\n  schema:\n    $ref: '#/components/schemas/Pet'\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: '#/components/examples/frog-example'\n```\n\n----------------------------------------\n\nTITLE: Multiple Servers Configuration\nDESCRIPTION: Example showing how to configure multiple servers including development, staging, and production environments.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - url: https://development.gigantic-server.com/v1\n    description: Development server\n  - url: https://staging.gigantic-server.com/v1\n    description: Staging server\n  - url: https://api.gigantic-server.com/v1\n    description: Production server\n```\n\n----------------------------------------\n\nTITLE: Defining Server Object with Variables in JSON\nDESCRIPTION: Example of a Server Object with variables in JSON format, demonstrating URL templating and variable definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Header Parameter with Array of Integers in JavaScript\nDESCRIPTION: Example of a header parameter with an array of 64-bit integer numbers. It specifies the parameter name, location, description, required flag, type, items definition, and collection format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"integer\",\n    \"format\": \"int64\"\n  },\n  \"collectionFormat\": \"csv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Array Definition\nDESCRIPTION: Defines an optional query parameter that accepts multiple string values through form style with array explosion.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n```\n\n----------------------------------------\n\nTITLE: Simple String Response Object in YAML\nDESCRIPTION: A YAML representation of a Response Object for a simple string response. Specifies text/plain content type with a string schema type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Path Parameter String Definition\nDESCRIPTION: Defines a required path parameter that accepts a string value.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Defining a Primitive Schema Object in JSON and YAML\nDESCRIPTION: Demonstrates how to define a simple string schema with email format in both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nformat: email\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in OpenAPI Specification (YAML)\nDESCRIPTION: Example of a License Object in YAML format, providing license information for the exposed API including name and SPDX identifier.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nname: Apache 2.0\nidentifier: Apache-2.0\n```\n\n----------------------------------------\n\nTITLE: Resulting XML Output for Configured Array\nDESCRIPTION: Displays the XML output resulting from the JSON or YAML configuration for changing array element names.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_83\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Describing Binary Data in OpenAPI Specification\nDESCRIPTION: This table demonstrates how to use Schema Object keywords for describing raw and encoded binary data in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Keyword | Raw | Encoded | Comments |\n| ---- | ---- | ---- | ---- |\n| `type` | _omit_ | `string` | raw binary is [outside of `type`](https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00#section-4.2.3) |\n| `contentMediaType` | `image/png` | `image/png` | can sometimes be omitted if redundant (see below) |\n| `contentEncoding` | _omit_ | `base64`&nbsp;or&nbsp;`base64url` | other encodings are [allowed](https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-validation-00#section-8.3) |\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Implicit Flow Security Scheme\nDESCRIPTION: Example of OAuth2 implicit flow configuration with scope definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"authorizationUrl\": \"http://swagger.io/api/oauth/dialog\",\n  \"flow\": \"implicit\",\n  \"scopes\": {\n    \"write:pets\": \"modify pets in your account\",\n    \"read:pets\": \"read your pets\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nauthorizationUrl: http://swagger.io/api/oauth/dialog\nflow: implicit\nscopes:\n  write:pets: modify pets in your account\n  read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Attributes, Prefixes, and Namespaces in OpenAPI\nDESCRIPTION: This example demonstrates how to define XML attributes, prefixes, and namespaces for object properties in an OpenAPI schema.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"http://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nPerson:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: http://example.com/schema/sample\n        prefix: sample\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Person id=\"123\">\n    <sample:name xmlns:sample=\"http://example.com/schema/sample\">example</sample:name>\n</Person>\n```\n\n----------------------------------------\n\nTITLE: Path Item Object Example in YAML\nDESCRIPTION: YAML representation of the Path Item Object showing GET operation configuration with parameters and responses.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nget:\\n  description: Returns pets based on ID\\n  summary: Find pets by ID\\n  operationId: getPetsById\\n  responses:\\n    '200':\\n      description: pet response\\n      content:\\n        '*/*':\\n          schema:\\n            type: array\\n            items:\\n              $ref: '#/components/schemas/Pet'\\n    default:\\n      description: error payload\\n      content:\\n        text/html:\\n          schema:\\n            $ref: '#/components/schemas/ErrorModel'\\nparameters:\\n  - name: id\\n    in: path\\n    description: ID of pet to use\\n    required: true\\n    schema:\\n      type: array\\n      items:\\n        type: string\\n    style: simple\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters with Custom Serialization in YAML\nDESCRIPTION: OpenAPI parameter definitions showing custom serialization options for query parameters, including allowReserved and spaceDelimited style settings.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_106\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n- name: formulas\n  in: query\n  schema:\n    type: object\n    additionalProperties:\n      type: string\n  explode: true\n  allowReserved: true\n- name: words\n  in: query\n  style: spaceDelimited\n  explode: false\n  schema:\n    type: array\n    items:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Object Model in OpenAPI\nDESCRIPTION: Demonstrates a basic object schema with required fields, string properties, references to other components, and numeric constraints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n```\n\n----------------------------------------\n\nTITLE: HTTP Request and JSON Response for Security Scheme Definition in Entry Document\nDESCRIPTION: Demonstrates an HTTP request to fetch the OpenAPI entry document in JSON format, and the corresponding JSON response showing security scheme definition and path referencing another document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_111\n\nLANGUAGE: http\nCODE:\n```\nGET /api/description/openapi HTTP/1.1\nHost: www.example.com\nAccept: application/openapi+json\n```\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"securitySchemes\": {\n    \"MySecurity\": {\n      \"type\": \"http\",\n      \"scheme\": \"bearer\",\n      \"bearerFormat\": \"JWT\"\n    }\n  }\n},\n\"paths\": {\n  \"/foo\": {\n    \"$ref\": \"other#/components/pathItems/Foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Wrapped Array with Custom Item Names\nDESCRIPTION: Demonstrates proper XML array wrapping by setting the items' xml.name property, which preserves the wrapper name while giving the items their own element name.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animals>\n  <animal>value</animal>\n  <animal>value</animal>\n</animals>\n```\n\n----------------------------------------\n\nTITLE: Link Object Response Body Example in OpenAPI YAML\nDESCRIPTION: Shows how to define a link that extracts data from the response body using a JSON Pointer expression. The example passes a UUID from the response to the linked operation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `id` field from the request path parameter named `id`\n      userUuid: $response.body#/uuid\n```\n\n----------------------------------------\n\nTITLE: Optional Query Parameter with Array in YAML\nDESCRIPTION: YAML representation of an optional query parameter that accepts multiple string values, equivalent to the JSON example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n```\n\n----------------------------------------\n\nTITLE: Defining x-www-form-urlencoded Request Body in OpenAPI YAML\nDESCRIPTION: This snippet demonstrates how to define an x-www-form-urlencoded request body in OpenAPI. It includes a UUID and a complex object that will be stringified according to RFC1866.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Parameter Callback in OpenAPI\nDESCRIPTION: A Callback Object example with a hardcoded notification server URL but dynamic query parameters extracted from the request body using JSON Pointer expressions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ntransactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Empty Response Object Example in JSON\nDESCRIPTION: JSON example of a Response Object with no return value, only containing a description field to indicate an object was created.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"object created\"\n}\n```\n\n----------------------------------------\n\nTITLE: XML Object Example with No XML Element in OpenAPI 3.0 JSON\nDESCRIPTION: This snippet shows how to define a basic string property and a string array property without specific XML elements in OpenAPI 3.0 JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"animals\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request and YAML Response for Referenced Document with Security Requirements\nDESCRIPTION: Shows an HTTP request to fetch a referenced OpenAPI document in YAML format, and the corresponding YAML response with the same security scheme definition and path item with security requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_114\n\nLANGUAGE: http\nCODE:\n```\nGET /api/description/other HTTP/1.1\nHost: www.example.com\nAccept: application/openapi+yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  securitySchemes:\n    MySecurity:\n      type: http\n      scheme: basic\n  pathItems:\n    Foo:\n      get:\n        security:\n          - MySecurity: []\n```\n\n----------------------------------------\n\nTITLE: Text Response with Headers Example in YAML\nDESCRIPTION: YAML representation of a Response Object with a string response and custom rate-limiting headers. It includes the same components as the JSON example but in YAML syntax.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n```\n\n----------------------------------------\n\nTITLE: Path Templating Examples in OpenAPI\nDESCRIPTION: Examples of path templating matching rules showing concrete vs templated paths and potential ambiguous resolutions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n  /pets/{petId}\\n  /pets/mine\n```\n\nLANGUAGE: text\nCODE:\n```\n  /pets/{petId}\\n  /pets/{name}\n```\n\nLANGUAGE: text\nCODE:\n```\n  /{entity}/me\\n  /books/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with Array Schema in JavaScript\nDESCRIPTION: This example demonstrates how to define a Response Object with an array schema of complex types using JavaScript object notation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"description\": \"A complex object array response\",\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"$ref\": \"#/definitions/VeryComplexType\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Path Item Object Example in YAML\nDESCRIPTION: YAML representation of the path item object example with equivalent functionality.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nget:\\n  description: Returns pets based on ID\\n  summary: Find pets by ID\\n  operationId: getPetsById\\n  responses:\\n    '200':\\n      description: pet response\\n      content:\\n        '*/*':\\n          schema:\\n            type: array\\n            items:\\n              $ref: '#/components/schemas/Pet'\\n    default:\\n      description: error payload\\n      content:\\n        text/html:\\n          schema:\\n            $ref: '#/components/schemas/ErrorModel'\\nparameters:\\n  - name: id\\n    in: path\\n    description: ID of pet to use\\n    required: true\\n    schema:\\n      type: array\\n      items:\\n        type: string\\n    style: simple\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Example Data\nDESCRIPTION: Demonstrates how to include example data in an object schema definition to help API consumers understand the expected format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Operation Object\nDESCRIPTION: Example of an Operation Object that defines a pet update endpoint with form data. Includes tags, parameters, request body schema, responses, and security requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n           \"properties\": {\n              \"name\": {\n                \"description\": \"Updated name of the pet\",\n                \"type\": \"string\"\n              },\n              \"status\": {\n                \"description\": \"Updated status of the pet\",\n                \"type\": \"string\"\n             }\n           },\n        \"required\": [\"status\"]\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Invalid input\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       properties:\n          name:\n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content:\n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Invalid input\n    content:\n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n```\n\n----------------------------------------\n\nTITLE: XML Object Example: Attribute, Prefix, and Namespace in JSON and YAML\nDESCRIPTION: This example shows a full model definition with XML configurations for attribute, prefix, and namespace in both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_84\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"https://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nPerson:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: https://example.com/schema/sample\n        prefix: sample\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in JSON\nDESCRIPTION: Demonstrates how to configure basic authentication using the Security Scheme Object in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_87\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changing XML Element Names for Array Items in OpenAPI\nDESCRIPTION: Demonstrates how to customize XML element names for array items using the 'xml.name' property in array definitions. This snippet shows how to override the default element name for items within an array.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_98\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Request Body with String Array Schema in YAML\nDESCRIPTION: YAML representation of a required request body accepting an array of strings in plain text format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body for Specific Image Types in YAML\nDESCRIPTION: This snippet shows how to define a request body that accepts specific image types (JPEG and PNG) in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\n# multiple, specific media types may be specified:\nrequestBody:\n  content:\n      # a binary file of type png or jpeg\n    'image/jpeg':\n      schema:\n        type: string\n        format: binary\n    'image/png':\n      schema:\n        type: string\n        format: binary       \n```\n\n----------------------------------------\n\nTITLE: Defining x-www-form-urlencoded Request Body in YAML\nDESCRIPTION: This snippet shows how to define a request body for submitting content using form url encoding (x-www-form-urlencoded) in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Object in YAML\nDESCRIPTION: Example of a tag object in YAML format, equivalent to the JSON example, providing a name and description for a tag used in Operation Objects.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_64\n\nLANGUAGE: yaml\nCODE:\n```\nname: pet\ndescription: Pets operations\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Type Schema in JSON and YAML\nDESCRIPTION: A basic example showing how to define a string schema with email format. This simple schema defines a string field that should be formatted as an email address.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nformat: email\n```\n\n----------------------------------------\n\nTITLE: XML Array External Name Property Example\nDESCRIPTION: This example shows that the external xml.name property has no effect on array items when not using wrapped mode.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Defining a Primitive String Schema in JSON/YAML\nDESCRIPTION: A simple example of defining an email string schema using JSON Schema syntax. This demonstrates how to specify a primitive data type with format validation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nformat: email\n```\n\n----------------------------------------\n\nTITLE: Reference Object Examples in YAML\nDESCRIPTION: Various examples of Reference Objects in YAML format showing different ways to reference components.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: '#/components/schemas/Pet'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: Pet.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: definitions.yaml#/Pet\n```\n\n----------------------------------------\n\nTITLE: Path Template Matching Examples\nDESCRIPTION: Examples demonstrating path template matching rules and potential conflicts in path definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n  /pets/{petId}\n  /pets/mine\n```\n\n----------------------------------------\n\nTITLE: Response Object with Headers in YAML\nDESCRIPTION: A YAML representation of a Response Object with text content and multiple response headers. Includes rate limiting headers with their descriptions and schema types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Server Object Example - Single Server in JSON and YAML\nDESCRIPTION: Example of a single Server Object that provides connectivity information to a target server, including URL and description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://development.gigantic-server.com/v1\ndescription: Development server\n```\n\n----------------------------------------\n\nTITLE: Defining Responses Object in JSON for OpenAPI Specification\nDESCRIPTION: This example shows how to define a Responses Object in JSON format. It includes a 200 response for a successful operation and a default response for errors, both referencing schemas defined elsewhere.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Free-Form Query Parameter with Object Schema in JSON\nDESCRIPTION: Defines a query parameter 'freeForm' that accepts an object with arbitrary properties of integer type. Uses the 'form' serialization style.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"style\": \"form\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Authentication in OpenAPI YAML\nDESCRIPTION: This YAML snippet is equivalent to the JSON definition for basic authentication. It defines the same security scheme for HTTP basic authentication in OpenAPI YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_76\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: basic\n```\n\n----------------------------------------\n\nTITLE: XML Object Example: XML Name Replacement in JSON and YAML\nDESCRIPTION: This example demonstrates how to replace the XML element name for a property using the xml object in both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: string\n  xml:\n    name: animal\n```\n\n----------------------------------------\n\nTITLE: Header Parameter Definition with Array Type\nDESCRIPTION: Definition of a header parameter that accepts an array of 64-bit integers.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n```\n\n----------------------------------------\n\nTITLE: Defining Example for Parameter in YAML\nDESCRIPTION: This example shows how to provide an example for a query parameter using the Example Object and a reference to a component.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  - name: 'zipCode'\n    in: 'query'\n    schema:\n      type: 'string'\n      format: 'zip-code'\n    examples:\n      zip-example:\n        $ref: '#/components/examples/zip-example'\n```\n\n----------------------------------------\n\nTITLE: URL Encoded Form with Binary Values Configuration\nDESCRIPTION: YAML configuration for a form that includes binary data (image) using the byte format. The encoding object specifies the content types for the binary data.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          name:\n            type: string\n          icon:\n            # The default with \"format: byte\" is application/octet-stream,\n            # so we need to set image media type(s) in the Encoding Object.\n            type: string\n            format: byte\n  encoding:\n    icon:\n      contentType: image/png, image/jpeg\n```\n\n----------------------------------------\n\nTITLE: External Documentation Object Example in YAML\nDESCRIPTION: YAML representation of the External Documentation Object showing equivalent structure.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Find more info here\nurl: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Defining JSON String Example in Request/Response Body (JSON)\nDESCRIPTION: This example shows how to define a JSON string example for a request or response body. It demonstrates the use of the 'examples' field for a schema of type 'string'.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n\"application/json\": {\n  \"schema\": {\n    \"type\": \"string\"\n  },\n  \"examples\": {\n    \"jsonBody\": {\n      \"description\": \"A body of just the JSON string \\\"json\\\"\",\n      \"value\": \"json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an External Documentation Object in JSON\nDESCRIPTION: This snippet demonstrates how to define an External Documentation Object in JSON format. It includes a description and a URL for additional documentation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://swagger.io\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-OAuth2 Security Requirement in YAML\nDESCRIPTION: Example of a security requirement object for a non-OAuth2 security scheme in YAML format. The empty array indicates no additional scopes are required for this API key-based security scheme.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_87\n\nLANGUAGE: yaml\nCODE:\n```\napi_key: []\n```\n\n----------------------------------------\n\nTITLE: Request Body with Referenced Schema in YAML\nDESCRIPTION: YAML representation of a request body that references a User schema and provides examples in multiple formats, equivalent to the JSON example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\ncontent:\n  application/json:\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example\n        externalValue: https://foo.bar/examples/user-example.json\n  application/xml:\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example in XML\n        externalValue: https://foo.bar/examples/user-example.xml\n  text/plain:\n    examples:\n      user:\n        summary: User example in plain text\n        externalValue: https://foo.bar/examples/user-example.txt\n  '*/*':\n    examples:\n      user:\n        summary: User example in other format\n        externalValue: https://foo.bar/examples/user-example.whatever\n```\n\n----------------------------------------\n\nTITLE: Complex Query Parameter with Content in YAML\nDESCRIPTION: YAML representation of a complex query parameter defining JSON serialization for coordinate data with required latitude and longitude properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n```\n\n----------------------------------------\n\nTITLE: Defining Info Object in YAML for OpenAPI Specification\nDESCRIPTION: Example of an Info Object in YAML format, containing metadata about the API such as title, description, contact information, and license details.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Sample Pet Store App\nsummary: A pet store manager.\ndescription: This is a sample server for a pet store.\ntermsOfService: https://example.com/terms/\ncontact:\n  name: API Support\n  url: https://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with Array in JSON for OpenAPI Specification\nDESCRIPTION: This example shows how to define a Response Object in JSON format for an array of complex types. It includes a description and content schema referencing a complex type definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Encoded Form with JSON Values in OpenAPI\nDESCRIPTION: YAML configuration for a request body using application/x-www-form-urlencoded content type with string and object properties. When no encoding field is specified, serialization follows the Encoding Object's default values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Absolute OperationRef Links in YAML\nDESCRIPTION: Example of defining links using absolute operationRef in OpenAPI that references an external API endpoint while passing parameters from the response.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: String Response Object Example in JSON\nDESCRIPTION: JSON example of a Response Object returning a simple string response. It specifies text/plain as the media type and defines a string schema type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Structured Overlay in YAML\nDESCRIPTION: This snippet demonstrates how to create a structured overlay that updates multiple parts of the target document efficiently using a single Update Object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-12-24-Overlays.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverlay: 1.0.0\ninfo:\n  title: Structured Overlay\n  version: 1.0.0\nupdates:\n- target: \"@\"\n  merge:\n    info:\n      x-overlay-applied: structured-overlay\n    paths:\n      \"/\":\n        summary: \"The root resource\"\n        get:\n          summary: \"Retrieve the root resource\"\n          x-rate-limit: 100\n      \"/pets\":\n        get:\n          summary: \"Retrieve a list of pets\"\n          x-rate-limit: 100\n    components:\n    tags:\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication in OpenAPI JSON\nDESCRIPTION: This JSON snippet shows how to configure API key authentication in OpenAPI. It specifies the type, name, and location of the API key in the request.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n```\n\n----------------------------------------\n\nTITLE: External Documentation Object Example - OpenAPI Documentation Reference\nDESCRIPTION: Example of an External Documentation Object that provides a reference to additional documentation with a description and URL.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Find more info here\nurl: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Header Object Example in OpenAPI\nDESCRIPTION: Example of a Header Object defining an integer type schema with description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: The number of allowed requests in the current period\nschema:\n  type: integer\n```\n\n----------------------------------------\n\nTITLE: Transaction Callback Example in YAML\nDESCRIPTION: YAML example of a Callback Object with a hard-coded server URL but dynamic query parameters populated from the request body using runtime expressions. Shows how to extract and use values from the request payload.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\ntransactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with No Return Value in JSON for OpenAPI Specification\nDESCRIPTION: This example shows how to define a Response Object in JSON format for a response with no return value. It only includes a description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"object created\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Object in YAML\nDESCRIPTION: Example of a Contact Object in YAML format, including name, URL, and email address for API support.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: API Support\nurl: http://www.example.com/support\nemail: support@example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Responses Object with Success and Error Responses in YAML\nDESCRIPTION: This snippet shows the YAML representation of a Responses Object with a 200 success response and a default error response.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n'200':\n  description: a pet to be returned\n  schema:\n    $ref: '#/definitions/Pet'\ndefault:\n  description: Unexpected error\n  schema:\n    $ref: '#/definitions/ErrorModel'\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-OAuth2 Security Requirement in YAML\nDESCRIPTION: YAML representation of a Security Requirement Object for a non-OAuth2 security scheme. This uses 'api_key' with an empty array indicating no scopes are required.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_84\n\nLANGUAGE: yaml\nCODE:\n```\napi_key: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional OAuth2 Security in YAML\nDESCRIPTION: YAML representation of optional OAuth2 security configuration. The configuration allows either unauthenticated access (empty object) or access with 'petstore_auth' scheme having 'write:pets' and 'read:pets' scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_88\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  - {}\n  - petstore_auth:\n    - write:pets\n    - read:pets\n```\n\n----------------------------------------\n\nTITLE: Defining Fixed Fields for Schema-based Parameter Serialization in OpenAPI\nDESCRIPTION: This table specifies the fixed fields to be used with the 'schema' property in the Parameter Object. It includes fields for style, explode, allowReserved, schema, example, and examples, detailing how parameter values should be serialized and represented.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| Field Name | Type | Description |\n| ---- | :----: | ---- |\n| <a name=\"parameter-style\"></a>style | `string` | Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of `in`): for `\"query\"` - `\"form\"`; for `\"path\"` - `\"simple\"`; for `\"header\"` - `\"simple\"`; for `\"cookie\"` - `\"form\"`. |\n| <a name=\"parameter-explode\"></a>explode | `boolean` | When this is true, parameter values of type `array` or `object` generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this field has no effect. When [`style`](#parameter-style) is `\"form\"`, the default value is `true`. For all other styles, the default value is `false`. Note that despite `false` being the default for `deepObject`, the combination of `false` with `deepObject` is undefined. |\n| <a name=\"parameter-allow-reserved\"></a>allowReserved | `boolean` | When this is true, parameter values are serialized using reserved expansion, as defined by [RFC6570](https://datatracker.ietf.org/doc/html/rfc6570#section-3.2.3), which allows [RFC3986's reserved character set](https://datatracker.ietf.org/doc/html/rfc3986#section-2.2), as well as percent-encoded triples, to pass through unchanged, while still percent-encoding all other disallowed characters (including `%` outside of percent-encoded triples). Applications are still responsible for percent-encoding reserved characters that are [not allowed in the query string](https://datatracker.ietf.org/doc/html/rfc3986#section-3.4) (`[`, `]`, `#`), or have a special meaning in `application/x-www-form-urlencoded` (`-`, `&`, `+`); see Appendices [C](#appendix-c-using-rfc6570-based-serialization) and [E](#appendix-e-percent-encoding-and-form-media-types) for details. This field only applies to parameters with an `in` value of `query`. The default value is `false`. |\n| <a name=\"parameter-schema\"></a>schema | [Schema Object](#schema-object) \\| [Reference Object](#reference-object) | The schema defining the type used for the parameter. |\n| <a name=\"parameter-example\"></a>example | Any | Example of the parameter's potential value; see [Working With Examples](#working-with-examples). |\n| <a name=\"parameter-examples\"></a>examples | Map[ `string`, [Example Object](#example-object) \\| [Reference Object](#reference-object)] | Examples of the parameter's potential value; see [Working With Examples](#working-with-examples). |\n```\n\n----------------------------------------\n\nTITLE: Runtime Expression Syntax - OpenAPI Specification\nDESCRIPTION: ABNF syntax definition for runtime expressions used in Link Objects and Callback Objects. Defines the grammar for accessing request and response data.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_64\n\nLANGUAGE: abnf\nCODE:\n```\nexpression = ( \"$url\" | \"$method\" | \"$statusCode\" | \"$request.\" source | \"$response.\" source )\nsource = ( header-reference | query-reference | path-reference | body-reference ) \nheader-reference = \"header.\" token\nquery-reference = \"query.\" name \npath-reference = \"path.\" name\nbody-reference = \"body\" [\"#\" fragment]\nfragment = a JSON Pointer [RFC 6901]\nname = *( char )\nchar = as per RFC [7159]\ntoken = as per RFC [7230]\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Array Definition in JSON\nDESCRIPTION: Optional query parameter definition for an array of strings, using form style with exploded values to allow multiple instances of the parameter.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Link Object with Relative OperationRef in YAML\nDESCRIPTION: This example shows how to use a Link Object with a relative operationRef to reference another operation in the same OpenAPI document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: Adding Examples to an Object Schema\nDESCRIPTION: Shows how to include example data within a schema definition. The schema defines an object with id and name properties, with a required constraint and an example instance.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"name\"],\n  \"examples\": [\n    {\n      \"name\": \"Puma\",\n      \"id\": 1\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n  - name\nexamples:\n  - name: Puma\n    id: 1\n```\n\n----------------------------------------\n\nTITLE: Defining External Documentation Object in JSON for OpenAPI Specification\nDESCRIPTION: This JSON snippet demonstrates how to define an External Documentation Object in the OpenAPI Specification. It includes a description and a URL for additional documentation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Object in OpenAPI\nDESCRIPTION: Example of a Tag Object that adds metadata to operation tags, including name and description fields.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pet\",\n  \"description\": \"Pets operations\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: pet\ndescription: Pets operations\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameter with String Value in JSON\nDESCRIPTION: This example illustrates how to define a path parameter of a string value using JSON format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Query Parameter Using Content in OpenAPI\nDESCRIPTION: This example shows how to define a complex query parameter using the 'content' field to specify serialization in OpenAPI Specification. It includes the parameter location, name, and a JSON schema for latitude and longitude coordinates.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Object in JSON\nDESCRIPTION: Example of a Contact Object in JSON format, including name, URL, and email address for API support.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"API Support\",\n  \"url\": \"http://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic OneOf Schema Definition\nDESCRIPTION: Demonstrates basic schema definition using oneOf to specify response payload types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_65\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n```\n\n----------------------------------------\n\nTITLE: XML Attribute, Prefix and Namespace in OpenAPI\nDESCRIPTION: Example of XML attribute, prefix, and namespace usage in OpenAPI Specification, showing a full model definition in JavaScript, YAML, and resulting XML.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"http://swagger.io/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nPerson:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: http://swagger.io/schema/sample\n        prefix: sample\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Person id=\"123\">\n    <sample:name xmlns:sample=\"http://swagger.io/schema/sample\">example</sample:name>\n</Person>\n```\n\n----------------------------------------\n\nTITLE: Implementing License Object in OpenAPI Specification\nDESCRIPTION: Example implementation of the License Object that provides license information for the exposed API including license name and URL\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apache 2.0\",\n  \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: Apache 2.0\nurl: https://www.apache.org/licenses/LICENSE-2.0.html\n```\n\n----------------------------------------\n\nTITLE: Discriminator Usage Example\nDESCRIPTION: Shows how to implement a discriminator to identify schema types in responses.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 12345,\n  \"petType\": \"Cat\"\n}\n```\n\n----------------------------------------\n\nTITLE: Definitions Object Example in OpenAPI\nDESCRIPTION: Example of a Definitions Object in OpenAPI Specification, showing JavaScript and YAML representations of Category and Tag definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Category\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"Tag\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nCategory:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int64\n    name:\n      type: string\nTag:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int64\n    name:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Defining External Documentation Object in OpenAPI Specification\nDESCRIPTION: This snippet demonstrates how to define an External Documentation Object in OpenAPI Specification using both JSON and YAML formats. It includes a description and URL for referencing external documentation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Find more info here\nurl: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Paths Object Example - OpenAPI/Swagger\nDESCRIPTION: Example showing the structure of a Paths object defining an endpoint with GET operation that returns a list of pets.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"produces\": [\n        \"application/json\"\n      ],\n      \"responses\": {\n        \"200\": {\n          \"description\": \"A list of pets.\",\n          \"schema\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/definitions/pet\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    produces:\n    - application/json\n    responses:\n      '200':\n        description: A list of pets.\n        schema:\n          type: array\n          items:\n            $ref: '#/definitions/pet'\n```\n\n----------------------------------------\n\nTITLE: URL Encoded Form with JSON Values Example in YAML\nDESCRIPTION: Demonstrates how to define a request body using application/x-www-form-urlencoded media type in OpenAPI. This example shows the default serialization strategy when no explicit encoding field is provided, with both simple and complex object properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Callback with Hard-coded Server and Dynamic Parameters in YAML\nDESCRIPTION: This example shows a callback where the server URL is hard-coded, but the query string parameters are populated from the 'id' and 'email' properties in the request body.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\ntransactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Resulting URI Query String from Manual Template Expansion\nDESCRIPTION: This URI query string is the result of expanding the manual template with the restructured data, showing how special characters are handled.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_122\n\nLANGUAGE: uri\nCODE:\n```\n?a=x%2By&b=x/y&c=x%5Ey&words=math%20is%20fun\n```\n\n----------------------------------------\n\nTITLE: String Response Object Example in YAML\nDESCRIPTION: YAML representation of a Response Object returning a simple string. It includes the same components as the JSON example but in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Defining External Documentation Object in YAML for OpenAPI Specification\nDESCRIPTION: This YAML snippet shows how to define an External Documentation Object in the OpenAPI Specification. It includes the same fields as the JSON example, providing a description and URL for additional documentation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Find more info here\nurl: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Response Object with Headers in JSON\nDESCRIPTION: A JSON example of a Response Object that includes both content and headers. Defines a text/plain response with rate limiting headers that specify limit, remaining requests, and reset time information.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"example\": \"whoa!\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Header Object Definition - OpenAPI Specification\nDESCRIPTION: Example of a Header Object definition in both JSON and YAML formats. Demonstrates a simple integer-type header with description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: The number of allowed requests in the current period\nschema:\n  type: integer\n```\n\n----------------------------------------\n\nTITLE: Text Response with Headers Example in JSON\nDESCRIPTION: JSON example of a Response Object with a string response and custom rate-limiting headers. It includes text/plain content with an example value and three rate-limiting headers, each with their own schema definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      },\n      \"example\": \"whoa!\"\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Tag Object in OpenAPI Specification\nDESCRIPTION: This snippet shows how to define a Tag Object in the OpenAPI specification. It includes a name and description for the tag, which can be used to group operations in the API documentation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"name\": \"pet\",\n\t\"description\": \"Pets operations\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: pet\ndescription: Pets operations\n```\n\n----------------------------------------\n\nTITLE: XML Wrapped Array with Custom Wrapper and Item Names\nDESCRIPTION: Shows how to customize both the wrapper element name and the item element names in a wrapped XML array using the xml.name properties at both levels.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<aliens>\n  <animal>value</animal>\n  <animal>value</animal>\n</aliens>\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in JSON\nDESCRIPTION: Example of a License Object in JSON format, specifying the license name and URL for the API.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apache 2.0\",\n  \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Path Item Object in YAML for OpenAPI Specification\nDESCRIPTION: This YAML snippet shows the structure of a Path Item Object in OpenAPI Specification. It includes a GET operation with responses, and a parameter definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nget:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    style: simple\n    items:\n      type: string \n```\n\n----------------------------------------\n\nTITLE: String Array Property Definition in JSON\nDESCRIPTION: Shows how to define a string array property in JSON with its corresponding XML representation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Field in OpenAPI Schema Object\nDESCRIPTION: Proposed replacement for the 'nullable' definition in the OpenAPI Schema Object. It specifies how the 'nullable' field affects the allowed types in a schema.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-10-31-Clarify-Nullable.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nField Name | Type | Description\n---|:---:|---\n<a name=\"schemaNullable\"></a>nullable | `boolean` | A `true` value adds `\"null\"` to the allowed type specified by the `type` keyword, only if `type` is explicitly defined within the same Schema Object. Other Schema Object constraints retain their defined behavior, and therefore may disallow the use of `null` as a value. A `false` value leaves the specified or default `type` unmodified. The default value is `false`.\n```\n\n----------------------------------------\n\nTITLE: Defining Info Object in JSON for OpenAPI Specification\nDESCRIPTION: Example of an Info Object in JSON format, containing metadata about the API such as title, description, contact information, and license details.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Sample Pet Store App\",\n  \"summary\": \"A pet store manager.\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Query Parameter Using Content in YAML\nDESCRIPTION: YAML representation of a query parameter that uses content field for complex serialization, equivalent to the JSON example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n```\n\n----------------------------------------\n\nTITLE: Resulting XML Output for Wrapped Arrays with Named Elements\nDESCRIPTION: This XML snippet shows the result of applying the OpenAPI configuration for wrapped arrays with named elements. It demonstrates the structure of the wrapped array with custom internal and external names.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_74\n\nLANGUAGE: xml\nCODE:\n```\n<aliens>\n  <animal>value</animal>\n  <animal>value</animal>\n</aliens>\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body for Multiple File Uploads in YAML\nDESCRIPTION: This snippet demonstrates how to define a request body for uploading multiple files using multipart/form-data in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items:\n              type: string\n              format: binary\n```\n\n----------------------------------------\n\nTITLE: External Documentation Object Example in JSON\nDESCRIPTION: Shows the structure of an External Documentation Object with description and URL fields.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Contact Object Example in OpenAPI Specification\nDESCRIPTION: Example demonstrating the structure of a Contact Object that contains information about API support contact including name, URL and email\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"API Support\",\n  \"url\": \"http://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: API Support\nurl: http://www.example.com/support\nemail: support@example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Object in YAML for OpenAPI Specification\nDESCRIPTION: Example of a Contact Object in YAML format, providing contact information for the exposed API including name, URL, and email.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n```\n\n----------------------------------------\n\nTITLE: Header Object Example in JSON\nDESCRIPTION: Example of a Header Object definition in JSON format, showing a simple integer type header with description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Name Pattern Examples\nDESCRIPTION: Examples of valid field names that match the regular expression ^[a-zA-Z0-9\\.-_]+$ for Components Object fields.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nUser\nUser_1\nUser_Name\nuser-name\nmy.org.User\n```\n\n----------------------------------------\n\nTITLE: Defining Webhook Object in YAML for OpenAPI Specification\nDESCRIPTION: Example YAML snippet demonstrating how to define a webhook for an inbound SMS in the proposed 'webhooks' top-level element of an OpenAPI Specification document. It includes details like HTTP method, summary, description, request body schema, and expected responses.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-07-17-Webhooks.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwebhooks:\n  inbound-sms:\n    post:\n      summary: Inbound SMS to your Nexmo number\n      operationId: inbound-sms\n      description: |\n        If you rent one or more virtual numbers from Nexmo, inbound messages to that number are sent to your [webhook endpoint](https://developer.nexmo.com/concepts/guides/webhooks).\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - msisdn\n                - to\n                - messageid\n                - text\n                - type\n                - keyword\n                - message-timestamp\n              properties:\n                msisdn:\n                  type: string\n                  description: the phone number that this inbound message was sent from. numbers are specified in e.164 format.\n                  example: '447700900001'\n                to:\n                  type: string\n                  description: the phone number the message was sent to. **this is your virtual number**. numbers are specified in e.164 format.\n                  example: '447700900000'\n                messageid:\n                  type: string\n                  description: the id of the message\n                  example: 0a0000000123abcd1\n                text:\n                  type: string\n                  description: The message body for this inbound message.\n                  example: Hello world\n                type:\n                  type: string\n                  description: |\n                    Possible values are:\n\n                      - `text` - standard text.\n                      - `unicode` - URLencoded   unicode  . This is valid for standard GSM, Arabic, Chinese, double-encoded characters and so on.\n                      - `binary` - a binary message.\n                  example: 'text'\n                keyword:\n                  type: string\n                  description: The first word in the message body. This is typically used with short codes.\n                  example: Hello\n                message-timestamp:\n                  description: The time when Nexmo started to push this Delivery Receipt to your webhook endpoint.\n                  type: string\n                  example: 2020-01-01 12:00:00\n      responses:\n        '200':\n          description: |\n            Your server returns this code if it accepts the callback. Note that\n            Nexmo will retry messages that are not successfully acknowledged.\n```\n\n----------------------------------------\n\nTITLE: Simple String Response Object in JSON\nDESCRIPTION: An example of a Response Object in JSON format that defines a simple string response with text/plain content type. The schema specifies the response is a string type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Non-OAuth2 Security Requirement\nDESCRIPTION: Example of security requirement for non-OAuth2 scheme like API key.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"api_key\": []\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\napi_key: []\n```\n\n----------------------------------------\n\nTITLE: String Response Example in OpenAPI\nDESCRIPTION: Shows how to define a simple string response in both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Fixed Fields for Content-based Parameter Serialization in OpenAPI\nDESCRIPTION: This table defines the fixed fields to be used with the 'content' property in the Parameter Object. It specifies how to define the media type and schema of the parameter for more complex scenarios.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Field Name | Type | Description |\n| ---- | :----: | ---- |\n| <a name=\"parameter-content\"></a>content | Map[`string`, [Media Type Object](#media-type-object)] | A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional OAuth2 Security in YAML\nDESCRIPTION: YAML representation of optional OAuth2 security in an OpenAPI Object or Operation Object. It allows either anonymous access or OAuth2 authentication with specific scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_114\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  - {}\n  - petstore_auth:\n      - write:pets\n      - read:pets\n```\n\n----------------------------------------\n\nTITLE: Defining Path Item Object in JSON for OpenAPI Specification\nDESCRIPTION: This JSON snippet demonstrates the structure of a Path Item Object in OpenAPI Specification. It includes a GET operation with responses, and a parameter definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple String Response in OpenAPI\nDESCRIPTION: A Response Object example that defines a simple string response with text/plain content type and a string schema.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: External XML Element Name with No Effect\nDESCRIPTION: Demonstrates that the external 'xml.name' property has no effect on array elements when the array is not wrapped. The element names still come from the items' xml.name property.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Content Schema in YAML\nDESCRIPTION: This snippet shows how to define a schema for content transferred in binary (octet-stream) format in YAML.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n# content transferred in binary (octet-stream):\nschema:\n  type: string\n  format: binary\n```\n\n----------------------------------------\n\nTITLE: Tag Object Example in YAML\nDESCRIPTION: Example of a Tag Object in YAML format, demonstrating metadata for API operation grouping.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\nname: pet\ndescription: Pets operations\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Query Parameter with Content in YAML\nDESCRIPTION: This example illustrates how to define a complex query parameter using 'content' to define serialization in YAML format for OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n```\n\n----------------------------------------\n\nTITLE: Defining Basic String Array Property in OpenAPI\nDESCRIPTION: Example of a basic string array property definition in OpenAPI Specification, showing JavaScript, YAML, and resulting XML representations.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"animals\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animals>...</animals>\n<animals>...</animals>\n<animals>...</animals>\n```\n\n----------------------------------------\n\nTITLE: Defining Header Parameter with Integer Array in YAML\nDESCRIPTION: This snippet shows how to define a header parameter with an array of 64-bit integer numbers using YAML format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n```\n\n----------------------------------------\n\nTITLE: Defining Webhook Status Update in OpenAPI\nDESCRIPTION: Example of a webhook definition for status updates in OpenAPI specification. The webhook receives JSON payloads containing item_id and status fields, with a success response code of 200. The example shows the complete structure including schema definition, required fields, and response handling.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-07-17-Webhooks.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwebhooks:\n  statusUpdate:\n    requestBody:\n      description: Status updates on an item. You can set the URL for these updates in your example.com dashboard.\n      content: \n        'application/json':\n          schema:\n              type: object\n              required:\n                - item_id\n                - status\n              properties:\n                item_id:\n                  type: string\n                  description: The ID of the item\n                  example: 0a000000012345678\n                status:\n                  type: integer\n                  description: The status of this message, zero for success\n                  example: 14\n    responses:\n      '200':\n        description: webhook successfully processed and no retries will be performed\n```\n\n----------------------------------------\n\nTITLE: Implementing Experimental API Endpoint in OpenAPI\nDESCRIPTION: Example OpenAPI specification showing how to mark an endpoint as experimental using the proposed 'experimental' boolean field. The example demonstrates usage on a GET endpoint for asset constraints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2020-10-28-Experimental.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  /asset/constraints:\n    get:\n      tags:\n        - Asset\n        - Constraints\n      summary: Get a set of asset constraints\n      operationId: constraints\n      parameters:\n        - name: siteToken\n          in: query\n          description: Site token obtained from Site API\n          required: true\n          schema:\n            type: string\n      experimental: true\n```\n\n----------------------------------------\n\nTITLE: Empty Response Object in JSON\nDESCRIPTION: A minimal Response Object in JSON format for a response with no return value. Only contains the required description field to indicate an object was created.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"object created\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Absolute OperationRef in OpenAPI Link Objects\nDESCRIPTION: Shows how to reference operations using an absolute operationRef URL. This approach allows linking to operations defined in external OpenAPI documents.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: Operation Object Example in OpenAPI\nDESCRIPTION: Example showing the structure of an Operation Object for a GET request to find a pet by ID, including parameters and response messages.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n          \"method\": \"GET\",\n          \"summary\": \"Find pet by ID\",\n          \"notes\": \"Returns a pet based on ID\",\n          \"type\": \"Pet\",\n          \"nickname\": \"getPetById\",\n          \"authorizations\": {},\n          \"parameters\": [\n            {\n              \"name\": \"petId\",\n              \"description\": \"ID of pet that needs to be fetched\",\n              \"required\": true,\n              \"type\": \"integer\",\n              \"format\": \"int64\",\n              \"paramType\": \"path\",\n              \"minimum\": \"1.0\",\n              \"maximum\": \"100000.0\"\n            }\n          ],\n          \"responseMessages\": [\n            {\n              \"code\": 400,\n              \"message\": \"Invalid ID supplied\"\n            },\n            {\n              \"code\": 404,\n              \"message\": \"Pet not found\"\n            }\n          ]\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining Free-Form Query Parameter in YAML\nDESCRIPTION: This example shows how to define a free-form query parameter, allowing undefined parameters of a specific type, using YAML format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Array Response in OpenAPI\nDESCRIPTION: A Response Object example that specifies a response containing an array of complex objects, referencing a schema component.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A complex object array response\ncontent:\n  application/json:\n    schema:\n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n```\n\n----------------------------------------\n\nTITLE: Example of Properties Object in JavaScript\nDESCRIPTION: Provides an example of a Properties Object with two properties: 'id' and 'name'. The 'id' property is defined as an integer with int64 format, while 'name' is defined as a string.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_27\n\nLANGUAGE: js\nCODE:\n```\n      {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Migrating Binary Data Descriptions from OAS 3.0 to 3.1\nDESCRIPTION: This table shows how to migrate binary data descriptions from OpenAPI Specification 3.0 to 3.1, using image/png as an example media type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| OAS < 3.1 | OAS 3.1 | Comments |\n| ---- | ---- | ---- |\n| <code style=\"white-space:nowrap\">type: string</code><br /><code style=\"white-space:nowrap\">format: binary</code> | <code style=\"white-space:nowrap\">contentMediaType: image/png</code> | if redundant, can be omitted, often resulting in an empty [Schema Object](#schema-object) |\n| <code style=\"white-space:nowrap\">type: string</code><br /><code style=\"white-space:nowrap\">format: byte</code> | <code style=\"white-space:nowrap\">type: string</code><br /><code style=\"white-space:nowrap\">contentMediaType: image/png</code><br /><code style=\"white-space:nowrap\">contentEncoding: base64</code> | note that `base64url` can be used to avoid re-encoding the base64 string to be URL-safe |\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Objects in YAML for OpenAPI Specification\nDESCRIPTION: This snippet provides examples of the proposed Tag Object structure in YAML format. It showcases tags with new fields such as 'summary', 'kind', and 'parent' to illustrate different tag types and hierarchical relationships.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2024-09-01-Tags-Improvement.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: account-updates\n  summary: Account Updates\n  description: Account update operations\n  kind: nav\n\n- name: partner\n  summary: Partner\n  description: Operations available to the partners network\n  parent: external\n  kind: audience\n\n- name: external\n  summary: External\n  description: Operations available to external consumers\n  kind: audience\n```\n\n----------------------------------------\n\nTITLE: Request Body with String Array Schema in JSON\nDESCRIPTION: Example of a request body that accepts an array of strings in plain text format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON String Serialization Example\nDESCRIPTION: Shows how a UUID would be serialized if treated as application/json instead of text/plain, demonstrating the difference in encoding approaches when the content type changes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_39\n\nLANGUAGE: uri\nCODE:\n```\nid=%22f81d4fae-7dec-11d0-a765-00a0c91e6bf6%22\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Response in OpenAPI YAML\nDESCRIPTION: YAML version of a minimal Response Object for operations that don't return a value. This demonstrates the simplest valid response definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: object created\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter with String Array in YAML\nDESCRIPTION: This example shows how to define an optional query parameter with a string array, allowing multiple values by repeating the query parameter, using YAML format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n```\n\n----------------------------------------\n\nTITLE: JSON Object Example for Address Data\nDESCRIPTION: Shows a sample JSON object representing a US-style address with ZIP+4 code. This is used to demonstrate how complex objects are serialized in URL encoded forms.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"streetAddress\": \"123 Example Dr.\",\n  \"city\": \"Somewhere\",\n  \"state\": \"CA\",\n  \"zip\": \"99999+1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Object Definition - OpenAPI Specification\nDESCRIPTION: Example of a Tag Object that adds metadata to operation tags in both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"pet\",\n\t\"description\": \"Pets operations\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: pet\ndescription: Pets operations\n```\n\n----------------------------------------\n\nTITLE: Header Parameter Array Definition\nDESCRIPTION: Defines a required header parameter that accepts an array of 64-bit integers using simple style.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n```\n\n----------------------------------------\n\nTITLE: Tag Object Example in OpenAPI\nDESCRIPTION: Example of a Tag Object providing metadata for API operations, including name and description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"pet\",\n\t\"description\": \"Pets operations\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: pet\ndescription: Pets operations\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Query Parameter with Content in JSON\nDESCRIPTION: This snippet demonstrates how to define a complex query parameter using 'content' to define serialization in JSON format for OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contact Object Example - OpenAPI/Swagger\nDESCRIPTION: Example showing the structure of a Contact object containing name, URL and email of API support contact.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"API Support\",\n  \"url\": \"http://www.swagger.io/support\",\n  \"email\": \"support@swagger.io\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: API Support\nurl: http://www.swagger.io/support\nemail: support@swagger.io\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Security Requirement\nDESCRIPTION: Example of OAuth2 security requirement with required scopes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\npetstore_auth:\n- write:pets\n- read:pets\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Security Requirement in JSON\nDESCRIPTION: Example of a Security Requirement Object for OAuth2 authentication with specified required scopes. This shows how to define required access scopes for a protected operation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_111\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petstore_auth\": [\"write:pets\", \"read:pets\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with Array Schema in YAML\nDESCRIPTION: This example shows the YAML representation of a Response Object with an array schema of complex types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A complex object array response\nschema:\n  type: array\n  items:\n    $ref: '#/definitions/VeryComplexType'\n```\n\n----------------------------------------\n\nTITLE: Simplified URI Template for Undefined Values\nDESCRIPTION: This URI template is simplified to handle only the defined 'words' parameter, omitting the undefined 'formulas' object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_124\n\nLANGUAGE: uritemplate\nCODE:\n```\n?words={words.0} {words.1}\n```\n\n----------------------------------------\n\nTITLE: Resolving Security Requirements Example (JSON)\nDESCRIPTION: Illustrates the recommended approach for resolving security requirements in a referenced document within an OpenAPI Description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"openapi\": \"3.1.0\",\n  \"info\": { \"title\": \"API\", \"version\": \"1.0.0\" },\n  \"components\": {\n    \"securitySchemes\": {\n      \"myAuth\": { \"type\": \"http\", \"scheme\": \"bearer\" }\n    }\n  },\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"security\": [{ \"myAuth\": [] }],\n        \"responses\": { \"200\": { \"description\": \"OK\" } }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Media Types for OpenAPI in Plain Text\nDESCRIPTION: Examples of media type definitions that should comply with RFC6838. These definitions show various formats for content types, including plain text, JSON, and vendor-specific GitHub formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n```\n\n----------------------------------------\n\nTITLE: Defining JSON String Example in Request/Response Body (YAML)\nDESCRIPTION: This example is the YAML equivalent of the previous JSON example, showing how to define a JSON string example for a request or response body using the 'examples' field.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\napplication/json:\n  schema:\n    type: string\n  examples:\n    jsonBody:\n      description: 'A body of just the JSON string \"json\"'\n      value: json\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Content Schema in YAML\nDESCRIPTION: Demonstrates how to specify a schema for content that will be transferred in binary (octet-stream) format in OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n# content transferred in binary (octet-stream):\nschema:\n  type: string\n  format: binary\n```\n\n----------------------------------------\n\nTITLE: Path Templating Examples\nDESCRIPTION: Examples demonstrating path templating matching behavior in OpenAPI specifications, showing concrete vs templated path resolution.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n  /pets/{petId}\\n  /pets/mine\n```\n\nLANGUAGE: text\nCODE:\n```\n  /pets/{petId}\\n  /pets/{name}\n```\n\nLANGUAGE: text\nCODE:\n```\n  /{entity}/me\\n  /books/{id}\n```\n\n----------------------------------------\n\nTITLE: Parameter Values Example in OpenAPI Specification\nDESCRIPTION: Examples of different parameter values including string, array, and object that are used to demonstrate various serialization styles in the OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n   string -> \"blue\"\n   array -> [\"blue\",\"black\",\"brown\"]\n   object -> { \"R\": 100, \"G\": 200, \"B\": 150 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrapped XML Arrays in JSON\nDESCRIPTION: Demonstrates how to configure wrapped XML arrays using JSON. It shows the use of the 'wrapped' property in the 'xml' object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_84\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Data Type Declaration in Swagger Objects\nDESCRIPTION: Shows how data type information is included in Swagger objects. The example illustrates that fields like 'type' are added directly to the object being described rather than being nested in a separate structure.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"Foo\" : {\n   \"name\" : \"sample\",\n   \"type\" : \"string\",\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Header Parameter with Array of Integers in YAML\nDESCRIPTION: YAML representation of a header parameter with an array of 64-bit integer numbers. It includes the same properties as the JavaScript version: name, location, description, required flag, type, items definition, and collection format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\ntype: array\nitems:\n  type: integer\n  format: int64\ncollectionFormat: csv\n```\n\n----------------------------------------\n\nTITLE: Tag Object Example in JSON\nDESCRIPTION: Example of a Tag Object in JSON format, demonstrating metadata for API operation grouping.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"pet\",\n\t\"description\": \"Pets operations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dictionary/Map Properties in OpenAPI\nDESCRIPTION: Schema definitions for objects with additional properties, showing both string and complex model mappings.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/definitions/ComplexModel\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  $ref: '#/definitions/ComplexModel'\n```\n\n----------------------------------------\n\nTITLE: Defining JSON String Example in JSON\nDESCRIPTION: Demonstrates how to define an example of a JSON string body using JSON format. This example shows a request or response body that is just a JSON string.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n\"application/json\": {\n  \"schema\": {\n    \"type\": \"string\"\n  },\n  \"examples\": {\n    \"jsonBody\": {\n      \"description\": \"A body of just the JSON string \\\"json\\\"\",\n      \"value\": \"json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Inheritance Example in OpenAPI\nDESCRIPTION: Example demonstrating model inheritance between Animal and Cat models using discriminator and subTypes.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n\"Animal\": {\n  \"id\": \"Animal\",\n  \"required\": [\n    \"id\",\n    \"type\"\n  ],\n  \"properties\": {\n    \"id\": {\n      \"type\": \"long\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    }\n  },\n  \"subTypes\": [\"Cat\"],\n  \"discriminator\": \"type\"\n},\n\"Cat\": {\n  \"id\": \"Cat\",\n  \"required\": [\n    \"likesMilk\"\n  ],\n  \"properties\": {\n    \"likesMilk\": {\n      \"type\": \"boolean\"\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Model with Example in JSON and YAML\nDESCRIPTION: Example of a schema with integrated example data. This schema defines an object with id and name properties, requiring the name property, and includes a sample instance to demonstrate the expected format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Examples in YAML for OpenAPI 3.0\nDESCRIPTION: This snippet shows how to define media type examples for a Pet schema in YAML format. It includes the same examples as the JSON version, demonstrating the YAML syntax for OpenAPI 3.0.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\napplication/json:\n  schema:\n    $ref: '#/components/schemas/Pet'\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: '#/components/examples/frog-example'\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with No Return Value in YAML for OpenAPI Specification\nDESCRIPTION: This example demonstrates how to define a Response Object in YAML format for a response with no return value. It only includes a description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: object created\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoded Binary Data in URL Encoded Form\nDESCRIPTION: Shows the resulting URL-encoded request body with base64url-encoded binary data. Demonstrates how padding characters in base64 encoding need to be percent-encoded for proper transmission.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_41\n\nLANGUAGE: uri\nCODE:\n```\nname=example&icon=iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAABGdBTUEAALGPC_xhBQAAADhlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAAqACAAQAAAABAAAAAqADAAQAAAABAAAAAgAAAADO0J6QAAAAEElEQVQIHWP8zwACTGCSAQANHQEDqtPptQAAAABJRU5ErkJggg%3D%3D\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Object Model in OpenAPI\nDESCRIPTION: Schema definition for an object with required name property, referenced address, and age with validation constraints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/definitions/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/definitions/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Example for Callback Context\nDESCRIPTION: Example HTTP response corresponding to the previous request, showing a 201 Created status and a Location header that can be accessed in runtime expressions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_60\n\nLANGUAGE: http\nCODE:\n```\n201 Created\nLocation: https://example.org/subscription/1\n```\n\n----------------------------------------\n\nTITLE: XML Name Replacement in JSON\nDESCRIPTION: Shows how to replace the XML element name for a property using the XML object in JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_92\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing OpenAPI Repository Branch Management Flow with Mermaid\nDESCRIPTION: A Mermaid diagram illustrating the branching and merging patterns for OpenAPI Specification releases, including version branches, release branches, and automated synchronization processes. Shows the flow from version 3.1.1 through multiple releases up to 3.3.0.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  themeVariables:\n    git0: \"#5588bb\"\n    git1: \"#cc8899\"\n    git2: \"#eedd88\"\n    git3: \"#ccbb66\"\n    git4: \"#aa9944\"\n    git5: \"#887722\"\n    git6: \"#99ccff\"\n    git7: \"#77aadd\"\n    gitBranchLabel1: \"#000000\"\n    gitBranchLabel2: \"#000000\"\n    gitBranchLabel3: \"#000000\"\n    gitBranchLabel4: \"#000000\"\n    gitBranchLabel5: \"#ffffff\"\n    gitBranchLabel6: \"#000000\"\n    gitBranchLabel7: \"#000000\"\n---\ngitGraph TB:\n  commit id:\"merge 3.1.1.md to main\" tag:\"3.1.1\"\n  branch dev order:1\n  commit id:\"rename 3.1.1.md to src/oas.md\"\n  branch v3.1-dev order:2\n  commit id:\"update version in src/oas.md to 3.1.2\"\n  checkout dev\n  branch v3.2-dev order:6\n  commit id:\"update version in src/oas.md to 3.2.0\"\n  commit id:\"some 3.2.0 work\"\n  checkout v3.1-dev\n  commit id:\"a 3.1.x fix\"\n  checkout v3.2-dev\n  merge v3.1-dev id:\"merge 3.1.2 fixes\"\n  checkout v3.1-dev\n  branch v3.1.2-rel order:3\n  commit id:\"rename src/oas.md to versions/3.1.2.md\"\n\n  checkout main\n  merge v3.1.2-rel tag:\"3.1.2\"\n  checkout dev\n  merge main id:\"auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\"auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\"auto-sync from dev \"\n\n  commit id:\"more 3.2.0 work\"\n  checkout v3.1-dev\n  commit id:\"update version in src/oas.md to 3.1.3\"\n  commit id:\"another 3.1.x fix\"\n  checkout v3.2-dev\n  commit id:\"still more 3.2.0 work\"\n  merge v3.1-dev id:\"merge 3.1.3 fixes before releasing\"\n\n  checkout v3.1-dev\n  branch v3.1.3-rel order:4\n  commit id:\"rename src/oas.md to versions/3.1.3.md\"\n  checkout v3.2-dev\n  branch v3.2.0-rel order:7\n  commit id:\"rename src/oas.md to versions/3.2.0.md\"\n\n  checkout main\n  merge v3.1.3-rel tag:\"3.1.3\"\n  checkout dev\n  merge main id:\" auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\" auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\" auto-sync from dev \"\n\n  checkout main\n  merge v3.2.0-rel tag:\"3.2.0\"\n  checkout dev\n  merge main id:\"  auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\"  auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\"  auto-sync from dev \"\n\n  checkout v3.2-dev\n  branch v3.3-dev order:9\n  checkout v3.1-dev\n  commit id:\"update version in src/oas.md to 3.1.4\"\n  checkout v3.2-dev\n  commit id:\"update version in src/oas.md to 3.2.1\"\n  checkout v3.3-dev\n  commit id:\"update version in src/oas.md to 3.3.0\"\n\n  checkout v3.1-dev\n  commit id:\"a 3.1.4 fix\"\n  checkout v3.2-dev\n  commit id:\"a 3.2.1 fix\"\n  merge v3.1-dev id:\"merge 3.1.4 fixes before releasing\"\n  checkout v3.3-dev\n  merge v3.2-dev id:\"merge 3.1.4 / 3.2.1 fixes\"\n\n  checkout v3.1-dev\n  branch v3.1.4-rel order:5\n  commit id:\"rename src/oas.md to versions/3.1.4.md\"\n  checkout v3.2-dev\n  branch v3.2.1-rel order:8\n  commit id:\"rename src/oas.md to versions/3.2.1.md\"\n\n  checkout main\n  merge v3.1.4-rel tag:\"3.1.4\"\n  checkout dev\n  merge main id:\"   auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\"   auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\"   auto-sync from dev \"\n  checkout v3.3-dev\n  merge dev  id:\"   auto-sync from dev  \"\n\n  checkout main\n  merge v3.2.1-rel tag:\"3.2.1\"\n  checkout dev\n  merge main id:\"    auto-sync from main\"\n  checkout v3.1-dev\n  merge dev  id:\"    auto-sync from dev\"\n  checkout v3.2-dev\n  merge dev  id:\"    auto-sync from dev \"\n  checkout v3.3-dev\n  merge dev  id:\"    auto-sync from dev  \"\n\n  checkout v3.2-dev\n  commit id:\"update version in src/oas.md to 3.2.2\"\n  checkout v3.3-dev\n  commit id:\"3.3 work\"\n```\n\n----------------------------------------\n\nTITLE: Representing Array Values in JSON Format for OpenAPI\nDESCRIPTION: Example of how array values are represented in JSON format within an OpenAPI document. This format is used consistently throughout the specification for array fields.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"field\": [ 1, 2, 3 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Value Serialization in JavaScript\nDESCRIPTION: This example shows how various parameter types (string, array, object) are represented in JavaScript, which serves as a reference for understanding serialization examples.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n   string -> \"blue\"\n   array -> [\"blue\", \"black\", \"brown\"]\n   object -> { \"R\": 100, \"G\": 200, \"B\": 150 }\n```\n\n----------------------------------------\n\nTITLE: Incorporating Example Object in Response (YAML)\nDESCRIPTION: This snippet shows how to use an Example Object in a response definition. It defines a 200 response with a schema reference and an example reference for the application/json content type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  '200':\n    description: your car appointment has been booked\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n```\n\n----------------------------------------\n\nTITLE: XML Schema Examples\nDESCRIPTION: Various XML schema configurations including basic types and arrays.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"animals\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing External Schema Document in YAML\nDESCRIPTION: Example of a Reference Object in YAML format that references an external schema document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_69\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: Pet.yaml\n```\n\n----------------------------------------\n\nTITLE: Dog Payload Example with Discriminator in JSON\nDESCRIPTION: Example JSON payload that would match the Dog schema based on the discriminator value and mapping.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petType\": \"dog\",\n  \"bark\": \"soft\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Security Requirement in YAML\nDESCRIPTION: Example of a security requirement object for an OAuth2 security scheme in YAML format. It specifies two required scopes ('write:pets' and 'read:pets') needed for the execution of an operation protected by the 'petstore_auth' scheme.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_89\n\nLANGUAGE: yaml\nCODE:\n```\npetstore_auth:\n- write:pets\n- read:pets\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Server Objects in JSON\nDESCRIPTION: Example of multiple Server Objects in JSON format, describing development, staging, and production servers.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Object in JSON\nDESCRIPTION: Example of a tag object in JSON format that adds metadata to a tag used by Operation Objects, providing a name and description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"pet\",\n\t\"description\": \"Pets operations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON String Example in YAML\nDESCRIPTION: Shows how to define an example of a JSON string body using YAML format. This example demonstrates a request or response body that is just a JSON string.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\napplication/json:\n  schema:\n    type: string\n  examples:\n    jsonBody:\n      description: 'A body of just the JSON string \"json\"'\n      value: json\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Example for Callback Context\nDESCRIPTION: Example HTTP request used to illustrate runtime expression evaluation in the Callback Object. Shows a POST request with query parameters and a JSON body containing URLs.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_59\n\nLANGUAGE: http\nCODE:\n```\nPOST /subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 188\n\n{\n  \"failedUrl\": \"https://clientdomain.com/failed\",\n  \"successUrls\": [\n    \"https://clientdomain.com/fast\",\n    \"https://clientdomain.com/medium\",\n    \"https://clientdomain.com/slow\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Media Type Examples in OpenAPI\nDESCRIPTION: Examples of valid media type definitions that comply with RFC6838, showing various content types including plain text, JSON, and GitHub-specific vendor formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n```\n\n----------------------------------------\n\nTITLE: JWT Bearer Security Scheme in OpenAPI\nDESCRIPTION: This snippet demonstrates how to define a JWT Bearer token security scheme using the HTTP authentication type with bearer format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: bearer\nbearerFormat: JWT\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Array Element Names in OpenAPI\nDESCRIPTION: This snippet demonstrates how to change element names in XML array representation by setting the xml.name property in the array items definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Discriminator with Property Name\nDESCRIPTION: Demonstrates adding a discriminator with propertyName to identify schema selection\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: petType\n```\n\n----------------------------------------\n\nTITLE: Configuring Examples in OpenAPI Parameters\nDESCRIPTION: Shows how to reference examples in parameter definitions using the $ref syntax. This approach allows reuse of examples defined in the components section.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  - name: 'zipCode'\n    in: 'query'\n    schema:\n      type: 'string'\n      format: 'zip-code'\n    examples:\n      zip-example:\n        $ref: '#/components/examples/zip-example'\n```\n\n----------------------------------------\n\nTITLE: Empty Response Object in YAML\nDESCRIPTION: A YAML representation of a minimal Response Object with only a description field. Used for responses that do not return any content, such as a successful creation operation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: object created\n```\n\n----------------------------------------\n\nTITLE: Defining Header Object in JSON\nDESCRIPTION: Example of a simple integer-type header definition in JSON format, showing the required schema structure for OpenAPI header objects.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request and YAML Response for Security Scheme Definition in Entry Document\nDESCRIPTION: Shows an HTTP request to fetch the OpenAPI entry document in YAML format, and the corresponding YAML response with the same security scheme definition and path reference.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_112\n\nLANGUAGE: http\nCODE:\n```\nGET /api/description/openapi HTTP/1.1\nHost: www.example.com\nAccept: application/openapi+yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  securitySchemes:\n    MySecurity:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\npaths:\n  /foo:\n    $ref: 'other#/components/pathItems/Foo'\n```\n\n----------------------------------------\n\nTITLE: URL Encoded Form with Binary Values Example in YAML\nDESCRIPTION: Demonstrates how to handle binary data in URL encoded forms using base64 encoding. Shows the configuration needed for content encoding and specifying media types for binary data.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_40\n\nLANGUAGE: YAML\nCODE:\n```\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          name:\n            type: string\n          icon:\n            # The default with \"contentEncoding\" is application/octet-stream,\n            # so we need to set image media type(s) in the Encoding Object.\n            type: string\n            contentEncoding: base64url\n  encoding:\n    icon:\n      contentType: image/png, image/jpeg\n```\n\n----------------------------------------\n\nTITLE: JSON Array Representation Example in OpenAPI\nDESCRIPTION: Example showing how array values are represented in JSON format within an OpenAPI document. This demonstrates the standard JSON notation for field values that contain arrays.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"field\": [ 1, 2, 3 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Object Examples\nDESCRIPTION: Various examples of Reference Objects showing different ways to reference components within OpenAPI documents.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$ref\": \"#/components/schemas/Pet\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"Pet.json\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Example for Response in YAML\nDESCRIPTION: This example demonstrates how to provide an example for a response using the Example Object and a reference to a component.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  '200':\n    description: your car appointment has been booked\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in YAML\nDESCRIPTION: Shows the YAML equivalent of configuring basic authentication using the Security Scheme Object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_88\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: basic\n```\n\n----------------------------------------\n\nTITLE: Defining Base64 Encoded Content Schema in YAML\nDESCRIPTION: Demonstrates how to specify a schema for content that will be transferred with base64 encoding in OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n# content transferred with base64 encoding\nschema:\n  type: string\n  format: base64\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Authentication in OpenAPI\nDESCRIPTION: This example shows how to configure a basic HTTP authentication security scheme in OpenAPI.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: basic\n```\n\n----------------------------------------\n\nTITLE: XML Attribute, Prefix and Namespace in OpenAPI 3.0 JSON\nDESCRIPTION: This comprehensive example shows how to define XML attributes, prefixes, and namespaces for properties in a full model definition using OpenAPI 3.0 JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"http://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic XML String Property\nDESCRIPTION: Example of basic string property XML representation\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: string\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animals>...</animals>\n```\n\n----------------------------------------\n\nTITLE: Defining JSON String Example in URL-Encoded Form (YAML)\nDESCRIPTION: This is the YAML equivalent of the previous JSON example, showing how to define a JSON string example encoded in a URL-style form body, including schema, encoding, and example definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\napplication/x-www-form-urlencoded:\n  schema:\n    type: object\n    properties:\n      jsonValue:\n        type: string\n  encoding:\n    jsonValue:\n      contentType: application/json\n  examples:\n    jsonFormValue:\n      description: 'The JSON string \"json\" as a form value'\n      value: jsonValue=%22json%22\n```\n\n----------------------------------------\n\nTITLE: Defining URL-Encoded Form Example with JSON String in JSON\nDESCRIPTION: Illustrates how to define an example of a URL-encoded form containing a JSON string using JSON format. This example shows a JSON string encoded inside a URL-style form body.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n\"application/x-www-form-urlencoded\": {\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"jsonValue\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"encoding\": {\n    \"jsonValue\": {\n      \"contentType\": \"application/json\"\n    }\n  },\n  \"examples\": {\n    \"jsonFormValue\": {\n      \"description\": \"The JSON string \\\"json\\\" as a form value\",\n      \"value\": \"jsonValue=%22json%22\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Path Parameter String Definition in YAML\nDESCRIPTION: YAML representation of a path parameter with a string value.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nname: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters with Non-RFC6570 Options in YAML\nDESCRIPTION: This YAML snippet defines query parameters with non-standard options like 'allowReserved' and 'spaceDelimited' style, which are not supported by RFC6570.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_119\n\nLANGUAGE: YAML\nCODE:\n```\nparameters:\n- name: formulas\n  in: query\n  schema:\n    type: object\n    additionalProperties:\n      type: string\n  explode: true\n  allowReserved: true\n- name: words\n  in: query\n  style: spaceDelimited\n  explode: false\n  schema:\n    type: array\n    items:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Implicit OAuth2 Security Scheme Definition\nDESCRIPTION: Defines an OAuth2 security scheme using the Implicit flow. Requires 'authorizationUrl' and 'scopes' to specify where to obtain tokens and what permissions can be requested. Note that Implicit flow is being deprecated in favor of Authorization Code with PKCE.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_107\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: String Array Property Definition in YAML\nDESCRIPTION: Shows how to define a string array property in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_90\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Scopes Object Definition\nDESCRIPTION: Example of defining OAuth2 scopes with their descriptions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"write:pets\": \"modify pets in your account\",\n  \"read:pets\": \"read your pets\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nwrite:pets: modify pets in your account\nread:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Parameters Definitions Object Example in OpenAPI\nDESCRIPTION: Example of a Parameters Definitions Object in OpenAPI Specification, showing JavaScript and YAML representations of skip and limit parameters.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"skipParam\": {\n    \"name\": \"skip\",\n    \"in\": \"query\",\n    \"description\": \"number of items to skip\",\n    \"required\": true,\n    \"type\": \"integer\",\n    \"format\": \"int32\"\n  },\n  \"limitParam\": {\n    \"name\": \"limit\",\n    \"in\": \"query\",\n    \"description\": \"max records to return\",\n    \"required\": true,\n    \"type\": \"integer\",\n    \"format\": \"int32\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nskipParam:\n  name: skip\n  in: query\n  description: number of items to skip\n  required: true\n  type: integer\n  format: int32\nlimitParam:\n  name: limit\n  in: query\n  description: max records to return\n  required: true\n  type: integer\n  format: int32\n```\n\n----------------------------------------\n\nTITLE: Cat Payload Example with Discriminator in JSON\nDESCRIPTION: Example JSON payload that would match the Cat schema based on the discriminator value.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_84\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petType\": \"Cat\",\n  \"name\": \"Misty\"\n}\n```\n\n----------------------------------------\n\nTITLE: URL Encoded Form Request Body Example\nDESCRIPTION: Demonstrates the resulting URL-encoded request body after serialization of a complex object. Shows how spaces, plus signs, and JSON special characters are percent-encoded according to RFC1866.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_38\n\nLANGUAGE: uri\nCODE:\n```\nid=f81d4fae-7dec-11d0-a765-00a0c91e6bf6&address=%7B%22streetAddress%22:%22123+Example+Dr.%22,%22city%22:%22Somewhere%22,%22state%22:%22CA%22,%22zip%22:%2299999%2B1234%22%7D\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Values in Manual URI Templates\nDESCRIPTION: This example demonstrates how to handle undefined values when manually constructing URI templates, using a simplified data structure and template.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_123\n\nLANGUAGE: YAML\nCODE:\n```\nwords.0: hello\nwords.1: world\n```\n\n----------------------------------------\n\nTITLE: Complex XML Configuration\nDESCRIPTION: Full model definition with XML attributes, prefix, and namespace\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"http://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nPerson:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: http://example.com/schema/sample\n        prefix: sample\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Person id=\"123\">\n    <sample:name xmlns:sample=\"http://example.com/schema/sample\">example</sample:name>\n</Person>\n```\n\n----------------------------------------\n\nTITLE: Defining External Documentation Object\nDESCRIPTION: Example of an External Documentation Object that provides a reference to external documentation with a description and URL.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Find more info here\nurl: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Header Object in YAML\nDESCRIPTION: Example of a simple integer-type header definition in YAML format, equivalent to the JSON example, showing the required schema structure for OpenAPI header objects.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: The number of allowed requests in the current period\nschema:\n  type: integer\n```\n\n----------------------------------------\n\nTITLE: XML Name Replacement in YAML\nDESCRIPTION: Shows how to replace the XML element name for a property using the XML object in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_93\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: string\n  xml:\n    name: animal\n```\n\n----------------------------------------\n\nTITLE: XML Object Example: No XML Element in JSON and YAML\nDESCRIPTION: This example shows how to define a basic string property and a string array property without specific XML configurations in both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: string\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Example in Parameter with YAML\nDESCRIPTION: Shows how to define an example for a query parameter using YAML. The example references a component example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_64\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  - name: zipCode\n    in: query\n    schema:\n      type: string\n      format: zip-code\n    examples:\n      zip-example:\n        $ref: '#/components/examples/zip-example'\n```\n\n----------------------------------------\n\nTITLE: Single Server Configuration in OpenAPI\nDESCRIPTION: Basic example of defining a single server with URL and description in both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://development.gigantic-server.com/v1\ndescription: Development server\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Security Scheme\nDESCRIPTION: Example of basic authentication security scheme configuration in OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"basic\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: basic\n```\n\n----------------------------------------\n\nTITLE: Defining Simple String Response in OpenAPI JSON\nDESCRIPTION: Example of a Response Object in JSON format that returns a simple string. This shows how to specify the content type as text/plain and define a simple schema.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Server Objects in YAML\nDESCRIPTION: Example of multiple Server Objects in YAML format, describing development, staging, and production servers.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n```\n\n----------------------------------------\n\nTITLE: Resolving Security Requirements with HTTP and YAML in OpenAPI\nDESCRIPTION: Example of an HTTP request to retrieve an OpenAPI entry document in YAML format that defines a JWT-based security scheme and references a path item in another document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_130\n\nLANGUAGE: http\nCODE:\n```\nGET /api/description/openapi HTTP/1.1\nHost: www.example.com\nAccept: application/openapi+yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  securitySchemes:\n    MySecurity:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\npaths:\n  /foo:\n    $ref: 'other#/components/pathItems/Foo'\n```\n\n----------------------------------------\n\nTITLE: Discriminator with Explicit Mapping\nDESCRIPTION: Example showing discriminator with custom mapping values to schema references\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'\n```\n\n----------------------------------------\n\nTITLE: Complex XML Configuration with Attributes and Namespaces in YAML\nDESCRIPTION: Shows a complete example of XML configuration using attribute, namespace, and prefix properties in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_96\n\nLANGUAGE: yaml\nCODE:\n```\nPerson:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: https://example.com/schema/sample\n        prefix: sample\n```\n\n----------------------------------------\n\nTITLE: Defining Responses Object in YAML for OpenAPI Specification\nDESCRIPTION: This example demonstrates how to define a Responses Object in YAML format. It includes a 200 response for a successful operation and a default response for errors, both referencing schemas defined elsewhere.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\n'200':\n  description: a pet to be returned\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Object in OpenAPI Specification (JSON)\nDESCRIPTION: Example of a Contact Object in JSON format, providing contact information for the exposed API including name, URL, and email address.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Header Parameter with Integer Array in JSON\nDESCRIPTION: This snippet demonstrates how to define a header parameter with an array of 64-bit integer numbers using JSON format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Response in OpenAPI JSON\nDESCRIPTION: Example of a minimal Response Object in JSON format for operations that don't return a value. This only includes a description for a 204-like response.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"object created\"\n}\n```\n\n----------------------------------------\n\nTITLE: Free-form Query Parameter Definition\nDESCRIPTION: Definition of a query parameter that allows undefined parameters of integer type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    }\n  },\n  \"style\": \"form\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n```\n\n----------------------------------------\n\nTITLE: Using Discriminator with Explicit Mapping in YAML\nDESCRIPTION: This snippet shows how to use a discriminator with explicit mapping to handle cases where the discriminator value doesn't match the schema name or for external schema references.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_80\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n    - $ref: '#/components/schemas/Cat'\n    - $ref: '#/components/schemas/Dog'\n    - $ref: '#/components/schemas/Lizard'\n    - $ref: https://gigantic-server.com/schemas/Monster/schema.json\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: https://gigantic-server.com/schemas/Monster/schema.json\n```\n\n----------------------------------------\n\nTITLE: Handling Illegal Characters in Parameter Names\nDESCRIPTION: This example shows how to handle parameter names with illegal characters (like emoji) by pre-encoding them in both the data and template.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_126\n\nLANGUAGE: YAML\nCODE:\n```\n\"%E2%9D%A4%EF%B8%8F\": love!\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Expression ABNF Grammar\nDESCRIPTION: ABNF syntax definition for runtime expressions used in Link Objects and Callback Objects. Specifies the grammar for expressions that reference HTTP message information.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_52\n\nLANGUAGE: abnf\nCODE:\n```\n      expression = ( \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source )\n      source = ( header-reference / query-reference / path-reference / body-reference )\n      header-reference = \"header.\" token\n      query-reference = \"query.\" name \n      path-reference = \"path.\" name\n      body-reference = \"body\" [\"#\" json-pointer ]\n      json-pointer    = *( \"/\" reference-token )\n      reference-token = *( unescaped / escaped )\n      unescaped       = %x00-2E / %x30-7D / %x7F-10FFFF\n         ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\n      escaped         = \"~\" ( \"0\" / \"1\" )\n        ; representing '~' and '/', respectively\n      name = *( CHAR )\n      token = 1*tchar\n      tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /\n        \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n```\n\n----------------------------------------\n\nTITLE: Schema Object Primitive Example in OpenAPI\nDESCRIPTION: Example of a Schema Object defining a string property with email format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nformat: email\n```\n\n----------------------------------------\n\nTITLE: XML Name Configuration\nDESCRIPTION: Example of XML name customization in schema definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Referenced Document with HTTP and JSON in OpenAPI\nDESCRIPTION: Example of an HTTP request to retrieve a referenced OpenAPI document in JSON format that defines a basic security scheme and a path item with a security requirement.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_131\n\nLANGUAGE: http\nCODE:\n```\nGET /api/description/other HTTP/1.1\nHost: www.example.com\nAccept: application/openapi+json\n```\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"securitySchemes\": {\n    \"MySecurity\": {\n      \"type\": \"http\",\n      \"scheme\": \"basic\"\n    }\n  },\n  \"pathItems\": {\n    \"Foo\": {\n      \"get\": {\n        \"security\": [\n          \"MySecurity\": []\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex XML Output with Attributes and Namespaces\nDESCRIPTION: Shows the XML output when using attributes, namespaces, and prefixes in the XML configuration.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_97\n\nLANGUAGE: xml\nCODE:\n```\n<Person id=\"123\">\n    <sample:name xmlns:sample=\"https://example.com/schema/sample\">example</sample:name>\n</Person>\n```\n\n----------------------------------------\n\nTITLE: XML Arrays with Element Name Changes in OpenAPI\nDESCRIPTION: Example of XML arrays with element name changes in OpenAPI Specification, showing JavaScript, YAML, and resulting XML representations.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Header Parameter Array Definition in JSON\nDESCRIPTION: Example of a header parameter definition with an array of 64-bit integer values using the 'simple' style format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter String, Array, and Object Examples\nDESCRIPTION: Examples of different parameter values used to demonstrate various serialization styles in the OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_18\n\nLANGUAGE: none\nCODE:\n```\n   string -> \"blue\"\n   array -> [\"blue\",\"black\",\"brown\"]\n   object -> { \"R\": 100, \"G\": 200, \"B\": 150 }\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Array Element Names in JSON\nDESCRIPTION: Demonstrates how to change element names for XML arrays using JSON configuration. It shows the effect of the 'xml' property on array items.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Multiple Values\nDESCRIPTION: Definition of an optional query parameter that accepts multiple string values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n```\n\n----------------------------------------\n\nTITLE: Defining XML Name Replacement in OpenAPI\nDESCRIPTION: This snippet shows how to replace the default XML element name with a custom name using the 'xml' property in OpenAPI schema definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: string\n  xml:\n    name: animal\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>...</animal>\n```\n\n----------------------------------------\n\nTITLE: Referencing Another Model in Property Definition\nDESCRIPTION: Demonstrates how to reference another model (Category) in a property definition using the $ref keyword.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_29\n\nLANGUAGE: js\nCODE:\n```\n\"category\": {\n    \"$ref\": \"Category\"\n}\n```\n\n----------------------------------------\n\nTITLE: URL Encoded Form with Base64-Encoded Binary Data\nDESCRIPTION: The resulting URL encoded form with a base64-encoded binary image. The base64 encoding is necessary since application/x-www-form-urlencoded is a text format, and the encoded value is further percent-encoded.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_45\n\nLANGUAGE: uri\nCODE:\n```\nname=example&icon=iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAABGdBTUEAALGPC%2FxhBQAAADhlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAAqACAAQAAAABAAAAAqADAAQAAAABAAAAAgAAAADO0J6QAAAAEElEQVQIHWP8zwACTGCSAQANHQEDqtPptQAAAABJRU5ErkJggg%3D%3D\n```\n\n----------------------------------------\n\nTITLE: XML Wrapped Array with Custom Wrapper but Default Items\nDESCRIPTION: Demonstrates changing only the wrapper element name without specifying item names, resulting in the wrapper name being used for item elements as well.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<aliens>\n  <aliens>value</aliens>\n  <aliens>value</aliens>\n</aliens>\n```\n\n----------------------------------------\n\nTITLE: Referencing Schema in External Document in JSON\nDESCRIPTION: Example of a Reference Object in JSON format that references a specific schema within an external definitions document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n```\n\n----------------------------------------\n\nTITLE: XML Wrapped Array with Custom Item Names\nDESCRIPTION: This example shows how to properly name array items differently from the wrapper element by combining xml.wrapped with xml.name for items.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animals>\n  <animal>value</animal>\n  <animal>value</animal>\n</animals>\n```\n\n----------------------------------------\n\nTITLE: XML Name Replacement Representation\nDESCRIPTION: Shows the XML output when using the name property in the XML object to replace the element name.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_94\n\nLANGUAGE: xml\nCODE:\n```\n<animal>...</animal>\n```\n\n----------------------------------------\n\nTITLE: Referencing External Schema Document in JSON\nDESCRIPTION: Example of a Reference Object in JSON format that references an external schema document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"Pet.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Header Parameter with Array in YAML\nDESCRIPTION: YAML representation of a header parameter containing an array of 64-bit integers. Equivalent to the JSON example but using YAML syntax.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n```\n\n----------------------------------------\n\nTITLE: XML Name Replacement in OpenAPI\nDESCRIPTION: Example of XML name replacement in OpenAPI Specification, showing JavaScript, YAML, and resulting XML representations.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: string\n  xml:\n    name: animal\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>...</animal>\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Array Element Names in YAML\nDESCRIPTION: Shows the YAML equivalent of changing element names for XML arrays. It demonstrates the use of the 'xml' property for array items.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_82\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameter of String Type in JavaScript\nDESCRIPTION: Example of a path parameter with a string value. It specifies the parameter name, location, description, required flag, and type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Schema Definition with Discriminator in OpenAPI 3.0 YAML\nDESCRIPTION: This example demonstrates a more complex schema definition using allOf construct with a discriminator, showing how to avoid redundancy in schema definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_77\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n      - pet_type\n      properties:\n        pet_type:\n          type: string\n      discriminator:\n        propertyName: pet_type\n        mapping:\n          cachorro: Dog\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Cat`\n        properties:\n          name:\n            type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Dog`\n        properties:\n          bark:\n            type: string\n    Lizard:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Lizard`\n        properties:\n          lovesRocks:\n            type: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Free-Form Query Parameter in JSON\nDESCRIPTION: This snippet illustrates how to define a free-form query parameter, allowing undefined parameters of a specific type, using JSON format in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structured Data for Custom URI Template\nDESCRIPTION: YAML data structure with pre-encoded values for use with custom URI template, showing handling of special characters.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_108\n\nLANGUAGE: yaml\nCODE:\n```\na: x%2By\nb: x/y\nc: x^y\nwords.0: math\nwords.1: is\nwords.2: fun\n```\n\n----------------------------------------\n\nTITLE: XML Wrapped Array with Custom Wrapper Name Only\nDESCRIPTION: This example demonstrates what happens when you customize only the wrapper name without specifying item names - the wrapper name is used for items as well.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<aliens>\n  <aliens>value</aliens>\n  <aliens>value</aliens>\n</aliens>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrapped XML Arrays in OpenAPI JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure wrapped XML arrays in OpenAPI. It shows how to set both internal and external element names for wrapped arrays.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Wrapped Array with Custom Wrapper and Item Names\nDESCRIPTION: This snippet shows how to customize both the wrapper and item names in an XML array representation by setting xml.name properties at both levels.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<aliens>\n  <animal>value</animal>\n  <animal>value</animal>\n</aliens>\n```\n\n----------------------------------------\n\nTITLE: Defining Map/Dictionary Properties with Complex Values\nDESCRIPTION: Example showing how to define an object with dynamic string-to-object mappings. This schema allows arbitrary property names with values that conform to the ComplexModel schema.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Referenced Document with HTTP and YAML in OpenAPI\nDESCRIPTION: Example of an HTTP request to retrieve a referenced OpenAPI document in YAML format that defines a basic security scheme and a path item with a security requirement.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_132\n\nLANGUAGE: http\nCODE:\n```\nGET /api/description/other HTTP/1.1\nHost: www.example.com\nAccept: application/openapi+yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  securitySchemes:\n    MySecurity:\n      type: http\n      scheme: basic\n  pathItems:\n    Foo:\n      get:\n        security:\n          - MySecurity: []\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameter of String Type in YAML\nDESCRIPTION: YAML representation of a path parameter with a string value. It includes the same properties as the JavaScript version: name, location, description, required flag, and type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nname: username\nin: path\ndescription: username to fetch\nrequired: true\ntype: string\n```\n\n----------------------------------------\n\nTITLE: Parameter Value Examples in JavaScript\nDESCRIPTION: Examples of different parameter value types (string, array, object) for a parameter named 'color'.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n   string -> \"blue\"\n   array -> [\"blue\", \"black\", \"brown\"]\n   object -> { \"R\": 100, \"G\": 200, \"B\": 150 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth2 Flows in OpenAPI YAML\nDESCRIPTION: This YAML snippet is equivalent to the JSON configuration for multiple OAuth2 flows. It defines both implicit and authorization code flows with their URLs and scopes in OpenAPI YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_82\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Query Parameters YAML Configuration\nDESCRIPTION: Example YAML configuration showing parameter objects for form query string with exploded formulas and non-exploded words arrays.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_115\n\nLANGUAGE: yaml\nCODE:\n```\nformulas:\n  a: x+y\n  b: x/y\n  c: x^y\nwords:\n- math\n- is\n- fun\n```\n\n----------------------------------------\n\nTITLE: URI Template Expression\nDESCRIPTION: URI template showing the translation of the parameter objects configuration.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_117\n\nLANGUAGE: uritemplate\nCODE:\n```\n{?formulas*,words}\n```\n\n----------------------------------------\n\nTITLE: Resulting XML Output for Wrapped Array\nDESCRIPTION: Displays the XML output resulting from the JSON or YAML configuration for wrapped XML arrays.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_86\n\nLANGUAGE: xml\nCODE:\n```\n<animals>\n  <animal>value</animal>\n  <animal>value</animal>\n</animals>\n```\n\n----------------------------------------\n\nTITLE: External XML Name Field with No Effect on Array Items\nDESCRIPTION: Shows that applying an external 'xml.name' property to the array definition doesn't affect the element names of individual items. The item-level 'xml.name' property takes precedence for item naming.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Custom Naming for Both Internal and External XML Elements\nDESCRIPTION: Shows how to customize both the wrapper element name and the item element names in a wrapped array by setting 'xml.name' on both the array and its items definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_102\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<aliens>\n  <animal>value</animal>\n  <animal>value</animal>\n</aliens>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrapped XML Arrays in YAML\nDESCRIPTION: Shows the YAML equivalent of configuring wrapped XML arrays. It demonstrates the use of the 'wrapped' property in the 'xml' object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_85\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n```\n\n----------------------------------------\n\nTITLE: Mixed OAS Array Schema with Alternative Schema Items in YAML\nDESCRIPTION: Example demonstrating how to define an array in OAS with items that are defined using an alternative schema. The array type is specified using OAS syntax while the items are defined using an external JSON Schema.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/Alternative-Schema/examples.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n    type: array\n    items:\n        x-oas-draft-alternativeSchema:\n            type: jsonSchema\n            location: ./real-jsonschema.json\n```\n\n----------------------------------------\n\nTITLE: JSON-Serialized UUID in URL Encoded Form\nDESCRIPTION: Example of how a UUID would appear when serialized as application/json instead of text/plain in a URL encoded form. The quotation marks are percent-encoded.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_43\n\nLANGUAGE: uri\nCODE:\n```\nid=%22f81d4fae-7dec-11d0-a765-00a0c91e6bf6%22\n```\n\n----------------------------------------\n\nTITLE: Using Example Object in Parameter (YAML)\nDESCRIPTION: This example demonstrates how to reference an Example Object in a parameter definition. It shows a zipCode query parameter with a schema and an example reference.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  - name: zipCode\n    in: query\n    schema:\n      type: string\n      format: zip-code\n    examples:\n      zip-example:\n        $ref: '#/components/examples/zip-example'\n```\n\n----------------------------------------\n\nTITLE: JSON Array Field Example in OpenAPI\nDESCRIPTION: Demonstrates the JSON representation format for array values in OpenAPI documents, showing proper field syntax and array notation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"field\": [ 1, 2, 3 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Object with Variables in YAML\nDESCRIPTION: Example of a Server Object with variables in YAML format, demonstrating URL templating and variable definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      # note! no enum here means it is an open value\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n      default: v2\n```\n\n----------------------------------------\n\nTITLE: Defining Pet Schemas with allOf and Discriminator in YAML\nDESCRIPTION: This example demonstrates the use of allOf to create a hierarchy of pet schemas with a discriminator, avoiding the need to reference all child schemas in the parent.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_81\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Cat`\n          properties:\n            name:\n              type: string\n    Dog:\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Dog`\n          properties:\n            bark:\n              type: string\n    Lizard:\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Lizard`\n          properties:\n            lovesRocks:\n              type: boolean\n```\n\n----------------------------------------\n\nTITLE: Adding Array Elements in YAML Overlay\nDESCRIPTION: This example shows how to add a new parameter to all GET operations using an overlay.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-12-24-Overlays.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noverlay: 1.0.0\ninfo:\n  title: Add an array element\n  version: 1.0.0\nupdates:\n- target: paths.*.get.parameters\n  add:\n    name: newParam\n    in: query\n```\n\n----------------------------------------\n\nTITLE: Defining Array Property with Model References in JavaScript\nDESCRIPTION: Shows how to define an array property 'tags' where each item in the array is a reference to a Tag model.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_30\n\nLANGUAGE: js\nCODE:\n```\n\"tags\": {\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"Tag\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relative OperationRef in OpenAPI Link Objects\nDESCRIPTION: Demonstrates referencing operations using a relative operationRef path instead of operationId. This approach is useful when operationId may not be available.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: Wrapping XML Arrays with Default Naming\nDESCRIPTION: Shows how to wrap array items in a parent element using 'xml.wrapped' property. When no custom name is defined for items, the array property name is used for both the wrapper and item elements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_100\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animals>\n  <animals>value</animals>\n  <animals>value</animals>\n</animals>\n```\n\n----------------------------------------\n\nTITLE: License Object Example - OpenAPI/Swagger\nDESCRIPTION: Example showing the structure of a License object containing the license name and URL.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apache 2.0\",\n  \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: Apache 2.0\nurl: http://www.apache.org/licenses/LICENSE-2.0.html\n```\n\n----------------------------------------\n\nTITLE: External Documentation Object Example - JSON\nDESCRIPTION: Example of an External Documentation Object that provides a URL reference to additional documentation with a description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Paths Object Example in YAML\nDESCRIPTION: YAML representation of the Paths Object defining a GET endpoint for pets\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n/pets:\\n  get:\\n    description: Returns all pets from the system that the user has access to\\n    responses:\\n      '200':\\n        description: A list of pets.\\n        content:\\n          application/json:\\n            schema:\\n              type: array\\n              items:\\n                $ref: '#/components/schemas/pet'\n```\n\n----------------------------------------\n\nTITLE: XML Wrapped Array without Item Names\nDESCRIPTION: This snippet demonstrates that when using the xml.wrapped property without specifying item names, the same name is used for both the wrapper and the items.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animals>\n  <animals>value</animals>\n  <animals>value</animals>\n</animals>\n```\n\n----------------------------------------\n\nTITLE: URL Encoded Form with JSON Values Result\nDESCRIPTION: The resulting URL encoded form data after serializing a UUID and a JSON address object. Special characters are properly percent-encoded according to RFC1866 specifications.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_42\n\nLANGUAGE: uri\nCODE:\n```\nid=f81d4fae-7dec-11d0-a765-00a0c91e6bf6&address=%7B%22streetAddress%22:%22123+Example+Dr.%22,%22city%22:%22Somewhere%22,%22state%22:%22CA%22,%22zip%22:%2299999%2B1234%22%7D\n```\n\n----------------------------------------\n\nTITLE: Defining Body Parameter with Array of Strings in YAML\nDESCRIPTION: YAML representation of a body parameter that is an array of string values. It includes the same properties as the JavaScript version: name, location, description, required flag, and schema definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nname: user\nin: body\ndescription: user to add to the system\nrequired: true\nschema:\n  type: array\n  items:\n    type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrapped XML Arrays in OpenAPI YAML\nDESCRIPTION: This YAML snippet is equivalent to the JSON configuration for wrapped XML arrays. It defines both internal and external element names for wrapped arrays in OpenAPI YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_73\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-OAuth2 Security Requirement in JSON\nDESCRIPTION: Example of a Security Requirement Object definition for an API key security scheme that doesn't use OAuth2. The empty array indicates no specific scopes are required.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_97\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_key\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties Object Structure in JavaScript\nDESCRIPTION: Demonstrates the structure of a Properties Object, which holds field definitions for properties. Each property is defined as a separate object within the main object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_26\n\nLANGUAGE: js\nCODE:\n```\n{\n   \"Property1\" : {...},\n   \"Property2\" : {...},\n   ...,\n   \"PropertyN\" : {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array of Integers with Range in JavaScript\nDESCRIPTION: This example defines an Items Object for an array of integers, where each integer must be between 0 and 63 (inclusive) using JavaScript object notation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"array\",\n    \"items\": {\n        \"type\": \"integer\",\n        \"minimum\": 0,\n        \"maximum\": 63\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Header Parameter Array Definition in YAML\nDESCRIPTION: YAML representation of a header parameter with an array of 64-bit integer values using the 'simple' style format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n```\n\n----------------------------------------\n\nTITLE: Properly Named XML Wrapped Arrays\nDESCRIPTION: Demonstrates the proper way to define differently named wrapper and item elements in a wrapped array. By combining 'xml.wrapped' on the array with 'xml.name' on the items, we can have distinct element names.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animals>\n  <animal>value</animal>\n  <animal>value</animal>\n</animals>\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in YAML\nDESCRIPTION: Example of a License Object in YAML format, specifying the license name and URL for the API.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: Apache 2.0\nurl: https://www.apache.org/licenses/LICENSE-2.0.html\n```\n\n----------------------------------------\n\nTITLE: Referencing Schema in External Document in YAML\nDESCRIPTION: Example of a Reference Object in YAML format that references a specific schema within an external definitions document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_71\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: definitions.yaml#/Pet\n```\n\n----------------------------------------\n\nTITLE: Paths Object Example in YAML\nDESCRIPTION: Example of a Paths Object showing a GET endpoint definition for retrieving pets in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n```\n\n----------------------------------------\n\nTITLE: XML Wrapped Array with Default Names\nDESCRIPTION: Shows how wrapping an array without explicit naming causes the same element name to be used for both the wrapper and items, which can lead to confusion in the resulting XML structure.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_87\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animals>\n  <animals>value</animals>\n  <animals>value</animals>\n</animals>\n```\n\n----------------------------------------\n\nTITLE: Defining Items Object with String Type and Minimum Length in YAML\nDESCRIPTION: This snippet shows the YAML representation of an Items Object with a string type and a minimum length of 2 characters.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nminLength: 2\n```\n\n----------------------------------------\n\nTITLE: Models Object Example in OpenAPI\nDESCRIPTION: Example showing the structure of a Models Object containing a Category model definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"Category\": {\n      \"id\": \"Category\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Webhook Request Example for Callback Evaluation\nDESCRIPTION: An example HTTP request and response used to demonstrate how runtime expressions are evaluated in the context of a callback.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_39\n\nLANGUAGE: http\nCODE:\n```\nPOST /subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"http://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"http://clientdomain.com/fast\",\n    \"http://clientdomain.com/medium\",\n    \"http://clientdomain.com/slow\"\n  ]\n}\n\n201 Created\nLocation: http://example.org/subscription/1\n```\n\n----------------------------------------\n\nTITLE: Basic Schema with OneOf Discriminator\nDESCRIPTION: Shows how to define a response type using oneOf with multiple schema references\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n```\n\n----------------------------------------\n\nTITLE: Executing Adjust Release Branch Script in Bash\nDESCRIPTION: A reference to a bash script that automates the process of adjusting a release branch for OpenAPI specification publishing. The script moves the specification file, copies editor information, and removes schema-related files as part of the release preparation workflow.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscripts/adjust-release-branch.sh\n```\n\n----------------------------------------\n\nTITLE: Model Object Example in OpenAPI\nDESCRIPTION: Example of a Model Object for an Order entity with various property types and an enum.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"id\": \"Order\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"petId\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"quantity\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"OrderStatus\",\n      \"enum\": [\n        \"placed\",\n        \"approved\",\n        \"delivered\"\n      ]\n    },\n    \"shipDate\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Data Parameter for File Upload in JavaScript\nDESCRIPTION: Example of a form data parameter for file upload. It specifies the parameter name, location, description, required flag, and type as file.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"avatar\",\n  \"in\": \"formData\",\n  \"description\": \"The avatar of the user\",\n  \"required\": true,\n  \"type\": \"file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Example Response Object in OpenAPI Specification\nDESCRIPTION: This snippet shows how to define an example response object for a Pet data type with application/json MIME type. It includes properties such as name, type, color, gender, and breed.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"application/json\": {\n    \"name\": \"Puma\",\n    \"type\": \"Dog\",\n    \"color\": \"Black\",\n    \"gender\": \"Female\",\n    \"breed\": \"Mixed\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\napplication/json:\n  name: Puma\n  type: Dog\n  color: Black\n  gender: Female\n  breed: Mixed\n```\n\n----------------------------------------\n\nTITLE: Defining Valid Field Names in OpenAPI Components\nDESCRIPTION: Examples of valid field names that match the regular expression ^[a-zA-Z0-9\\.-_]+$ for use in Components Object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nUser\nUser_1\nUser_Name\nuser-name\nmy.org.User\n```\n\n----------------------------------------\n\nTITLE: Defining Reference Object in YAML\nDESCRIPTION: Example of a Reference Object in YAML format, equivalent to the JSON example, referencing a schema component within the same document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: '#/components/schemas/Pet'\n```\n\n----------------------------------------\n\nTITLE: JSON Array Example in OpenAPI Format\nDESCRIPTION: Example showing how array values are represented in the JSON format of OpenAPI documents. This illustrates the standard format for representing an array field in JSON.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"field\": [ 1, 2, 3 ]\n}\n```\n\n----------------------------------------\n\nTITLE: String Array XML Representation\nDESCRIPTION: Shows the XML representation of a string array property where wrapped is false by default.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_91\n\nLANGUAGE: xml\nCODE:\n```\n<animals>...</animals>\n<animals>...</animals>\n<animals>...</animals>\n```\n\n----------------------------------------\n\nTITLE: Defining an External Documentation Object in YAML\nDESCRIPTION: This snippet shows how to define an External Documentation Object using YAML format. It includes the same fields as the JSON example: description and URL.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Find more info here\nurl: https://swagger.io\n```\n\n----------------------------------------\n\nTITLE: Parameter Name Examples in OpenAPI\nDESCRIPTION: Examples of parameter naming for different paramTypes including path, query, and body parameters.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n\"name\": \"id\"\n\n\"name\": \"limit\"\n\n\"name\": \"body\"\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with Headers in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a Response Object with a string schema and custom headers using JavaScript object notation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"schema\": {\n    \"type\": \"string\"\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"type\": \"integer\"\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"type\": \"integer\"\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"type\": \"integer\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Types for OpenAPI Specification\nDESCRIPTION: Examples of possible MIME type definitions compliant with RFC 6838, used in OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n```\n\n----------------------------------------\n\nTITLE: Dog Implementation Example\nDESCRIPTION: Sample payload for Dog schema implementation\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petType\": \"dog\",\n  \"bark\": \"soft\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Data Parameter for File Upload in YAML\nDESCRIPTION: YAML representation of a form data parameter for file upload. It includes the same properties as the JavaScript version: name, location, description, required flag, and type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nname: avatar\nin: formData\ndescription: The avatar of the user\nrequired: true\ntype: file\n```\n\n----------------------------------------\n\nTITLE: Defining Model with Example in OpenAPI\nDESCRIPTION: Schema definition with example data showing id and name properties along with their constraints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n```\n\n----------------------------------------\n\nTITLE: API Declaration Object Example in OpenAPI 1.2\nDESCRIPTION: Example of an API Declaration object showing the complete structure including apiVersion, paths, operations, models and authorization. Demonstrates a pet store API with order management endpoints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"apiVersion\": \"1.0.0\",\n  \"swaggerVersion\": \"1.2\",\n  \"basePath\": \"http://petstore.swagger.wordnik.com/api\",\n  \"resourcePath\": \"/store\",\n  \"produces\": [\n    \"application/json\"\n  ],\n  \"authorizations\": {},\n  \"apis\": [\n    {\n      \"path\": \"/store/order/{orderId}\",\n      \"operations\": [\n        {\n          \"method\": \"GET\",\n          \"summary\": \"Find purchase order by ID\",\n          \"notes\": \"For valid response try integer IDs with value <= 5. Anything above 5 or nonintegers will generate API errors\",\n          \"type\": \"Order\",\n          \"nickname\": \"getOrderById\",\n          \"authorizations\": {},\n          \"parameters\": [\n            {\n              \"name\": \"orderId\",\n              \"description\": \"ID of pet that needs to be fetched\",\n              \"required\": true,\n              \"type\": \"string\",\n              \"paramType\": \"path\"\n            }\n          ],\n          \"responseMessages\": [\n            {\n              \"code\": 400,\n              \"message\": \"Invalid ID supplied\"\n            },\n            {\n              \"code\": 404,\n              \"message\": \"Order not found\"\n            }\n          ]\n        },\n        {\n          \"method\": \"DELETE\",\n          \"summary\": \"Delete purchase order by ID\",\n          \"notes\": \"For valid response try integer IDs with value < 1000.  Anything above 1000 or nonintegers will generate API errors\",\n          \"type\": \"void\",\n          \"nickname\": \"deleteOrder\",\n          \"authorizations\": {\n            \"oauth2\": [\n              {\n                \"scope\": \"test:anything\",\n                \"description\": \"anything\"\n              }\n            ]\n          },\n          \"parameters\": [\n            {\n              \"name\": \"orderId\",\n              \"description\": \"ID of the order that needs to be deleted\",\n              \"required\": true,\n              \"type\": \"string\",\n              \"paramType\": \"path\"\n            }\n          ],\n          \"responseMessages\": [\n            {\n              \"code\": 400,\n              \"message\": \"Invalid ID supplied\"\n            },\n            {\n              \"code\": 404,\n              \"message\": \"Order not found\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"path\": \"/store/order\",\n      \"operations\": [\n        {\n          \"method\": \"POST\",\n          \"summary\": \"Place an order for a pet\",\n          \"notes\": \"\",\n          \"type\": \"void\",\n          \"nickname\": \"placeOrder\",\n          \"authorizations\": {\n            \"oauth2\": [\n              {\n                \"scope\": \"test:anything\",\n                \"description\": \"anything\"\n              }\n            ]\n          },\n          \"parameters\": [\n            {\n              \"name\": \"body\",\n              \"description\": \"order placed for purchasing the pet\",\n              \"required\": true,\n              \"type\": \"Order\",\n              \"paramType\": \"body\"\n            }\n          ],\n          \"responseMessages\": [\n            {\n              \"code\": 400,\n              \"message\": \"Invalid order\"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"models\": {\n    \"Order\": {\n      \"id\": \"Order\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"petId\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"quantity\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"status\": {\n          \"type\": \"string\",\n          \"description\": \"Order Status\",\n          \"enum\": [\n            \"placed\",\n            \"approved\",\n            \"delivered\"\n          ]\n        },\n        \"shipDate\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Targeted Overlays in YAML\nDESCRIPTION: This example shows how to create targeted overlays for making small updates to specific parts of a large document using multiple Update Objects.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-12-24-Overlays.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverlay: 1.0.0\ninfo:\n  title: Targeted Overlays\n  version: 1.0.0\nupdates:\n- target: paths.\"/foo\".get\n  merge:\n    description: This is the new description\n- target: paths.\"/bar\".get\n  merge:\n    description: This is the updated description\n- target: paths.\"/bar\"\n  merge:\n      post:\n          description: This is an updated description of a child object\n          x-safe: false\n```\n\n----------------------------------------\n\nTITLE: Defining Optional and UTC Date Schemas in YAML\nDESCRIPTION: Example YAML schema definitions for OptionalDate and UTCDate, demonstrating the use of 'nullable' and inheritance through 'allOf'.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-10-31-Clarify-Nullable.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n\n  schemas:\n\n    OptionalDate:\n      type: string\n      format: date\n      nullable: true\n\n    UTCDate:\n      allOf:\n      - $ref: \"#/components/schemas/OptionalDate\"\n      not:\n        type: string\n        pattern: \"^.*Z.*$\"\n```\n\n----------------------------------------\n\nTITLE: Defining Email Schema in OpenAPI\nDESCRIPTION: Simple schema definition for an email string type with format specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"string\",\n    \"format\": \"email\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nformat: email\n```\n\n----------------------------------------\n\nTITLE: Defining Token Request Endpoint Object in Swagger 1.2\nDESCRIPTION: Example of a Token Request Endpoint object for the Authorization Code Grant flow in Swagger 1.2. It includes the authorization endpoint URL and optional alternative names for client_id and client_secret parameters.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"url\": \"http://petstore.swagger.wordnik.com/oauth/requestToken\",\n  \"clientIdName\": \"client_id\",\n  \"clientSecretName\": \"client_secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Grant Object in Swagger 1.2\nDESCRIPTION: Example of an Implicit Grant object for OAuth2 in Swagger 1.2. It specifies the login endpoint URL and an optional alternative name for the access token.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"loginEndpoint\": {\n    \"url\": \"http://petstore.swagger.wordnik.com/oauth/dialog\"\n  },\n  \"tokenName\": \"access_token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with String in YAML for OpenAPI Specification\nDESCRIPTION: This example demonstrates how to define a Response Object in YAML format for a simple string response. It includes a description and content schema for a plain text response.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Defining ETag Header with Content in OpenAPI\nDESCRIPTION: Example showing how to define an ETag header that requires a strong ETag value starting with a quote character, using content field instead of schema for proper encoding.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n\"ETag\": {\n  \"required\": true,\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"pattern\": \"^\\\"\"  \n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nETag:\n  required: true\n  content:\n    text/plain:\n      schema:\n        type: string\n        pattern: ^\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Schema Object Fields Definition Table\nDESCRIPTION: Markdown table defining the required fields for the Alternative Schema Object including type and location properties\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/Alternative-Schema/alternative_schema_object.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Field Name | Type | Description |\n|---|:---:|---|\n|type | string | **REQUIRED**. The value MUST match one of the values identified in the alternative Schema Registry. |\n|location | url | **REQUIRED**.  This is a absolute or relative reference to an external resource containing a schema of a known type.  This reference may contain a fragment identifier to reference only a subset of an external document. |\n```\n\n----------------------------------------\n\nTITLE: XML Attribute Format Example\nDESCRIPTION: Example showing how to format XML attributes and field names in YAML comments\nSOURCE: https://github.com/oai/openapi-specification/blob/main/style-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n`attribute` # XML context only\\n`field_name` # OpenAPI fixed fields\\n\"Dog\" # values in double quotes\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP Request and Response for Callback Key Expression\nDESCRIPTION: An example HTTP request and response illustrating how runtime expressions can be used to access different parts of the message for callback requests.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_58\n\nLANGUAGE: http\nCODE:\n```\nPOST /subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"http://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"http://clientdomain.com/fast\",\n    \"http://clientdomain.com/medium\",\n    \"http://clientdomain.com/slow\"\n  ]\n}\n\n201 Created\nLocation: http://example.org/subscription/1\n```\n\n----------------------------------------\n\nTITLE: Defining an Operation Object in YAML\nDESCRIPTION: This snippet shows how to define an Operation Object using YAML format. It includes the same fields as the JSON example, such as tags, summary, operationId, consumes, produces, parameters, responses, and security requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n- pet\nsummary: Updates a pet in the store with form data\ndescription: \"\"\noperationId: updatePetWithForm\nconsumes:\n- application/x-www-form-urlencoded\nproduces:\n- application/json\n- application/xml\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  type: string\n- name: name\n  in: formData\n  description: Updated name of the pet\n  required: false\n  type: string\n- name: status\n  in: formData\n  description: Updated status of the pet\n  required: false\n  type: string\nresponses:\n  '200':\n    description: Pet updated.\n  '405':\n    description: Invalid input\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n```\n\n----------------------------------------\n\nTITLE: Defining Token Endpoint Object in Swagger 1.2\nDESCRIPTION: Example of a Token Endpoint object for the OAuth2 Authentication Code Grant flow in Swagger 1.2. It specifies the token endpoint URL and an optional alternative name for the access token.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"url\": \"http://petstore.swagger.wordnik.com/oauth/token\",\n  \"tokenName\": \"access_code\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI with Traits in YAML\nDESCRIPTION: This example shows how to annotate an OpenAPI description with traits using the x-oai-traits extension.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-12-24-Overlays.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.1.0\ninfo:\n  title: Api with a paged collection\n  version: 1.0.0\npaths:\n  /items:\n    get:\n      x-oai-traits: [\"paged\"]\n      responses:\n        200:\n          description: OK\n```\n\n----------------------------------------\n\nTITLE: Authorization Object Example in Swagger\nDESCRIPTION: Example of an OAuth2 Authorization Object with scopes and grant types configuration.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n  \"oauth2\": {\n    \"type\": \"oauth2\",\n    \"scopes\": [\n      {\n        \"scope\": \"email\",\n        \"description\": \"Access to your email address\"\n      },\n      {\n        \"scope\": \"pets\",\n        \"description\": \"Access to your pets\"\n      }\n    ],\n    \"grantTypes\": {\n      \"implicit\": {\n        \"loginEndpoint\": {\n          \"url\": \"http://petstore.swagger.wordnik.com/oauth/dialog\"\n        },\n        \"tokenName\": \"access_token\"\n      },\n      \"authorization_code\": {\n        \"tokenRequestEndpoint\": {\n          \"url\": \"http://petstore.swagger.wordnik.com/oauth/requestToken\",\n          \"clientIdName\": \"client_id\",\n          \"clientSecretName\": \"client_secret\"\n        },\n        \"tokenEndpoint\": {\n          \"url\": \"http://petstore.swagger.wordnik.com/oauth/token\",\n          \"tokenName\": \"access_code\"\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Property with Constraints in JavaScript\nDESCRIPTION: Shows how to define a 64-bit integer property named 'id' with a description and minimum/maximum value constraints.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_28\n\nLANGUAGE: js\nCODE:\n```\n\"id\": {\n    \"type\": \"integer\",\n    \"format\": \"int64\",\n    \"description\": \"unique identifier for the pet\",\n    \"minimum\": \"0.0\",\n    \"maximum\": \"100.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of URL Structure for User Resources\nDESCRIPTION: Demonstrates two common URL patterns for organizing user resources in a RESTful API, showing HTTP methods supported at each endpoint. This helps illustrate the concept of resource organization in Swagger.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- /users      - GET\n                  POST\n  - /users/{id} - GET\n                  PATCH\n                  DELETE\n```\n\n----------------------------------------\n\nTITLE: Resulting XML Output for Named Array Elements\nDESCRIPTION: This XML snippet shows the result of applying the OpenAPI configuration for named array elements. It demonstrates how individual items are named in the XML output.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_71\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Resource Listing Object Example in Swagger\nDESCRIPTION: Example showing the complete structure of a Resource Listing object including API version, available endpoints, OAuth2 authorization, and API metadata.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"apiVersion\": \"1.0.0\",\n  \"swaggerVersion\": \"1.2\",\n  \"apis\": [\n    {\n      \"path\": \"/pet\",\n      \"description\": \"Operations about pets\"\n    },\n    {\n      \"path\": \"/user\",\n      \"description\": \"Operations about user\"\n    },\n    {\n      \"path\": \"/store\",\n      \"description\": \"Operations about store\"\n    }\n  ],\n  \"authorizations\": {\n    \"oauth2\": {\n      \"type\": \"oauth2\",\n      \"scopes\": [\n        {\n          \"scope\": \"email\",\n          \"description\": \"Access to your email address\"\n        },\n        {\n          \"scope\": \"pets\",\n          \"description\": \"Access to your pets\"\n        }\n      ],\n      \"grantTypes\": {\n        \"implicit\": {\n          \"loginEndpoint\": {\n            \"url\": \"http://petstore.swagger.wordnik.com/oauth/dialog\"\n          },\n          \"tokenName\": \"access_token\"\n        },\n        \"authorization_code\": {\n          \"tokenRequestEndpoint\": {\n            \"url\": \"http://petstore.swagger.wordnik.com/oauth/requestToken\",\n            \"clientIdName\": \"client_id\",\n            \"clientSecretName\": \"client_secret\"\n          },\n          \"tokenEndpoint\": {\n            \"url\": \"http://petstore.swagger.wordnik.com/oauth/token\",\n            \"tokenName\": \"access_code\"\n          }\n        }\n      }\n    }\n  },\n  \"info\": {\n    \"title\": \"Swagger Sample App\",\n    \"description\": \"This is a sample server Petstore server.  You can find out more about Swagger \\n    at <a href=\\\"http://swagger.wordnik.com\\\">http://swagger.wordnik.com</a> or on irc.freenode.net, #swagger.  For this sample,\\n    you can use the api key \\\"special-key\\\" to test the authorization filters\",\n    \"termsOfServiceUrl\": \"http://swagger.io/terms/\",\n    \"contact\": \"apiteam@wordnik.com\",\n    \"license\": \"Apache 2.0\",\n    \"licenseUrl\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-OAuth2 Security Requirement in YAML\nDESCRIPTION: YAML representation of a Security Requirement Object for an API key security scheme. The empty array indicates no specific scopes are required.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_98\n\nLANGUAGE: yaml\nCODE:\n```\napi_key: []\n```\n\n----------------------------------------\n\nTITLE: Field Name Examples\nDESCRIPTION: Examples of valid field names in OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nUser\nUser_1\nUser_Name\nuser-name\nmy.org.User\n```\n\n----------------------------------------\n\nTITLE: Sample Discriminator Response\nDESCRIPTION: Example of a response payload using the discriminator property\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 12345,\n  \"petType\": \"Cat\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Responses Object with Success and Error Responses in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a Responses Object with a 200 success response and a default error response using JavaScript object notation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"schema\": {\n      \"$ref\": \"#/definitions/Pet\"\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"schema\": {\n      \"$ref\": \"#/definitions/ErrorModel\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Name Replacement Example\nDESCRIPTION: Demonstrates XML name customization in schema definition\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: string\n  xml:\n    name: animal\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>...</animal>\n```\n\n----------------------------------------\n\nTITLE: Applying Traits with YAML Overlay\nDESCRIPTION: This snippet demonstrates how to use an overlay to apply updates based on traits defined in the OpenAPI description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-12-24-Overlays.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\noverlay: 1.0.0\ninfo:\n  title: Apply Traits\n  version: 1.0.0\nupdates:\n- target: $.paths[*].get[?contains(x-traits,'paged')]\n  merge:\n    parameters:\n      - name: top\n        in: query\n      - name: skip\n        in: query\n```\n\n----------------------------------------\n\nTITLE: Info Object Example in Swagger\nDESCRIPTION: Example of an Info Object containing API metadata including title, description, terms of service, contact information, and license details.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"title\": \"Swagger Sample App\",\n  \"description\": \"This is a sample server Petstore server.\",\n  \"termsOfServiceUrl\": \"http://swagger.io/terms/\",\n  \"contact\": \"apiteam@wordnik.com\",\n  \"license\": \"Apache 2.0\",\n  \"licenseUrl\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Message Object Example in OpenAPI\nDESCRIPTION: Example of a Response Message Object defining a 404 error response with an error model.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n    \"code\": 404,\n    \"message\": \"no project found\",\n    \"responseModel\": \"ErrorModel\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Invalid Path Templating Example\nDESCRIPTION: Shows invalid path templating where identical paths use different parameter names\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n  /pets/{petId}\\n  /pets/{name}\n```\n\n----------------------------------------\n\nTITLE: Changing External Element Name Only in XML Arrays\nDESCRIPTION: Demonstrates changing only the wrapper element name without specifying custom item element names, which results in the wrapper name being used for both the container and the items.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_103\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<aliens>\n  <aliens>value</aliens>\n  <aliens>value</aliens>\n</aliens>\n```\n\n----------------------------------------\n\nTITLE: Defining Array of Integers with Range in YAML\nDESCRIPTION: This example shows the YAML representation of an Items Object for an array of integers, where each integer must be between 0 and 63 (inclusive).\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntype: array\nitems:\n  type: integer\n  minimum: 0\n  maximum: 63\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Header Object in OpenAPI\nDESCRIPTION: Example of defining a simple integer header X-Rate-Limit-Limit with description and schema type specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n\"X-Rate-Limit-Limit\": {\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nX-Rate-Limit-Limit:\n  description: The number of allowed requests in the current period\n  schema:\n    type: integer\n```\n\n----------------------------------------\n\nTITLE: Defining Path Templating in OpenAPI Specification\nDESCRIPTION: Demonstrates how path templating works in the OpenAPI Specification, showing examples of valid and invalid path definitions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n  /pets/{petId}\n  /pets/mine\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n  /pets/{petId}\n  /pets/{name}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n  /{entity}/me\n  /books/{id}\n```\n\n----------------------------------------\n\nTITLE: URI Template Example\nDESCRIPTION: Example of a URI template with variable expansion.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/tests/md2html/fixtures/basic-new.md#2025-04-18_snippet_4\n\nLANGUAGE: uritemplate\nCODE:\n```\nhttps://foo.com/bar{?baz*,qux}\n```\n\n----------------------------------------\n\nTITLE: Runtime Expression ABNF Syntax Definition\nDESCRIPTION: ABNF syntax definition for runtime expressions used in Link Objects and Callback Objects.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_73\n\nLANGUAGE: abnf\nCODE:\n```\nexpression = \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source\nsource     = header-reference / query-reference / path-reference / body-reference\nheader-reference = \"header.\" token\nquery-reference  = \"query.\" name\npath-reference   = \"path.\" name\nbody-reference   = \"body\" [\"#\" json-pointer ]\njson-pointer    = *( \"/\" reference-token )\nreference-token = *( unescaped / escaped )\nunescaped       = %x00-2E / %x30-7D / %x7F-10FFFF\n                ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\nescaped         = \"~\" ( \"0\" / \"1\" )\n                ; representing '~' and '/', respectively\nname = *( CHAR )\ntoken = 1*tchar\ntchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\"\n      / \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter with Multiple Values in JavaScript\nDESCRIPTION: Example of an optional query parameter allowing multiple string values. It specifies the parameter name, location, description, required flag, type as array, items type, and collection format for multiple values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  },\n  \"collectionFormat\": \"multi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cat Implementation Example\nDESCRIPTION: Sample payload for Cat schema implementation\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petType\": \"Cat\",\n  \"name\": \"misty\"\n}\n```\n\n----------------------------------------\n\nTITLE: Combining OAS Schema with Alternative Schema in YAML\nDESCRIPTION: Example demonstrating how to combine native OpenAPI schema properties with an alternative schema reference. The schema is defined as a nullable object while also referencing an external JSON Schema file.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/Alternative-Schema/examples.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n    type: object\n    nullable: true\n    x-oas-draft-alternativeSchema:\n        type: jsonSchema\n        location: ./real-jsonschema.json\n```\n\n----------------------------------------\n\nTITLE: Parameter Object Example in OpenAPI\nDESCRIPTION: Example of a Parameter Object definition for a body parameter containing a Pet object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"body\",\n  \"description\": \"Pet object that needs to be updated in the store\",\n  \"required\": true,\n  \"type\": \"Pet\",\n  \"paramType\": \"body\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Primitive Type Definition in Items Object\nDESCRIPTION: Demonstrates how to define an Items Object with a primitive type. This is used within array data types to specify the type of elements contained in the array.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ambiguous Path Resolution Example\nDESCRIPTION: Demonstrates potentially ambiguous path resolution scenarios\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n  /{entity}/me\\n  /books/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining Items Object with String Type and Minimum Length in JavaScript\nDESCRIPTION: This snippet demonstrates how to define an Items Object with a string type and a minimum length of 2 characters using JavaScript object notation.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"string\",\n    \"minLength\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizations Object Example in Swagger\nDESCRIPTION: Example of an Authorizations Object showing OAuth2 configuration with multiple scopes and grant types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"oauth2\": {\n    \"type\": \"oauth2\",\n    \"scopes\": [\n      {\n        \"scope\": \"email\",\n        \"description\": \"Access to your email address\"\n      },\n      {\n        \"scope\": \"pets\",\n        \"description\": \"Access to your pets\"\n      }\n    ],\n    \"grantTypes\": {\n      \"implicit\": {\n        \"loginEndpoint\": {\n          \"url\": \"http://petstore.swagger.wordnik.com/oauth/dialog\"\n        },\n        \"tokenName\": \"access_token\"\n      },\n      \"authorization_code\": {\n        \"tokenRequestEndpoint\": {\n          \"url\": \"http://petstore.swagger.wordnik.com/oauth/requestToken\",\n          \"clientIdName\": \"client_id\",\n          \"clientSecretName\": \"client_secret\"\n        },\n        \"tokenEndpoint\": {\n          \"url\": \"http://petstore.swagger.wordnik.com/oauth/token\",\n          \"tokenName\": \"access_code\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illegal Character Parameter Definition\nDESCRIPTION: OpenAPI parameter definition example showing illegal character (emoji) in parameter name.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_110\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n- name: ❤️\n  in: query\n  schema:\n    type: string\n```\n\n----------------------------------------\n\nTITLE: URI Example\nDESCRIPTION: Example of a URI with query parameters and fragment.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/tests/md2html/fixtures/basic-new.md#2025-04-18_snippet_3\n\nLANGUAGE: uri\nCODE:\n```\nhttps://foo.com/bar?baz=qux&fred=waldo#fragment\n```\n\n----------------------------------------\n\nTITLE: URI Template for RFC6570 Expansion\nDESCRIPTION: This URI Template represents the YAML parameter definition for RFC6570 expansion. It uses the '?' operator for query string formatting and the '*' modifier for exploding the 'formulas' object.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_104\n\nLANGUAGE: uritemplate\nCODE:\n```\n{?formulas*,words}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Fixed Fields for OpenAPI Parameter Object\nDESCRIPTION: This table defines the common fixed fields that can be used with either 'content' or 'schema' in the Parameter Object. It includes required fields like 'name' and 'in', as well as optional fields for description, requirement, deprecation, and empty value handling.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Field Name | Type | Description |\n| ---- | :----: | ---- |\n| <a name=\"parameter-name\"></a>name | `string` | **REQUIRED**. The name of the parameter. Parameter names are _case sensitive_. <ul><li>If [`in`](#parameter-in) is `\"path\"`, the `name` field MUST correspond to a template expression occurring within the [path](#paths-path) field in the [Paths Object](#paths-object). See [Path Templating](#path-templating) for further information.<li>If [`in`](#parameter-in) is `\"header\"` and the `name` field is `\"Accept\"`, `\"Content-Type\"` or `\"Authorization\"`, the parameter definition SHALL be ignored.<li>For all other cases, the `name` corresponds to the parameter name used by the [`in`](#parameter-in) field.</ul> |\n| <a name=\"parameter-in\"></a>in | `string` | **REQUIRED**. The location of the parameter. Possible values are `\"query\"`, `\"header\"`, `\"path\"` or `\"cookie\"`. |\n| <a name=\"parameter-description\"></a>description | `string` | A brief description of the parameter. This could contain examples of use. [CommonMark syntax](https://spec.commonmark.org/) MAY be used for rich text representation. |\n| <a name=\"parameter-required\"></a>required | `boolean` | Determines whether this parameter is mandatory. If the [parameter location](#parameter-in) is `\"path\"`, this field is **REQUIRED** and its value MUST be `true`. Otherwise, the field MAY be included and its default value is `false`. |\n| <a name=\"parameter-deprecated\"></a> deprecated | `boolean` | Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is `false`. |\n| <a name=\"parameter-allow-empty-value\"></a> allowEmptyValue | `boolean` | If `true`, clients MAY pass a zero-length string value in place of parameters that would otherwise be omitted entirely, which the server SHOULD interpret as the parameter being unused. Default value is `false`. If [`style`](#parameter-style) is used, and if [behavior is _n/a_ (cannot be serialized)](#style-examples), the value of `allowEmptyValue` SHALL be ignored. Interactions between this field and the parameter's [Schema Object](#schema-object) are implementation-defined. This field is valid only for `query` parameters. Use of this field is NOT RECOMMENDED, and it is likely to be removed in a later revision. |\n```\n\n----------------------------------------\n\nTITLE: Expanded URI Result\nDESCRIPTION: Final expanded URI showing the result of applying the template with the given data.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_118\n\nLANGUAGE: uri\nCODE:\n```\n?a=x%2By&b=x%2Fy&c=x%5Ey&words=math,is,fun\n```\n\n----------------------------------------\n\nTITLE: Manually Constructed URI Template for Non-RFC6570 Options\nDESCRIPTION: This URI template is manually constructed to handle the non-RFC6570 options specified in the YAML. It uses a custom convention for array indexing.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_120\n\nLANGUAGE: uritemplate\nCODE:\n```\n?a={+a}&b={+b}&c={+c}&words={words.0} {words.1} {words.2}\n```\n\n----------------------------------------\n\nTITLE: API Object Example in OpenAPI 1.2\nDESCRIPTION: Example of an API Object showing operations for managing pets, including updating and adding new pets. Demonstrates path definition, operations array, and authentication requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      \"path\": \"/pet\",\n      \"operations\": [\n        {\n          \"method\": \"PUT\",\n          \"summary\": \"Update an existing pet\",\n          \"notes\": \"\",\n          \"type\": \"void\",\n          \"nickname\": \"updatePet\",\n          \"authorizations\": {},\n          \"parameters\": [\n            {\n              \"name\": \"body\",\n              \"description\": \"Pet object that needs to be updated in the store\",\n              \"required\": true,\n              \"type\": \"Pet\",\n              \"paramType\": \"body\"\n            }\n          ],\n          \"responseMessages\": [\n            {\n              \"code\": 400,\n              \"message\": \"Invalid ID supplied\"\n            },\n            {\n              \"code\": 404,\n              \"message\": \"Pet not found\"\n            },\n            {\n              \"code\": 405,\n              \"message\": \"Validation exception\"\n            }\n          ]\n        },\n        {\n          \"method\": \"POST\",\n          \"summary\": \"Add a new pet to the store\",\n          \"notes\": \"\",\n          \"type\": \"void\",\n          \"nickname\": \"addPet\",\n          \"consumes\": [\n            \"application/json\",\n            \"application/xml\"\n          ],\n          \"authorizations\": {\n            \"oauth2\": [\n              {\n                \"scope\": \"test:anything\",\n                \"description\": \"anything\"\n              }\n            ]\n          },\n          \"parameters\": [\n            {\n              \"name\": \"body\",\n              \"description\": \"Pet object that needs to be added to the store\",\n              \"required\": true,\n              \"type\": \"Pet\",\n              \"paramType\": \"body\"\n            }\n          ],\n          \"responseMessages\": [\n            {\n              \"code\": 405,\n              \"message\": \"Invalid input\"\n            }\n          ]\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: JSON Field Array Example in OpenAPI Documentation\nDESCRIPTION: Demonstrates the JSON representation of an array value in an OpenAPI document. This illustrates how array values should be formatted when defining OpenAPI documents.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": [1, 2, 3]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom URI Template for Special Character Handling\nDESCRIPTION: URI template pattern showing manual construction for handling special characters and custom word separators.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_107\n\nLANGUAGE: uritemplate\nCODE:\n```\n?a={+a}&b={+b}&c={+c}&words={words.0} {words.1} {words.2}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Customer Endpoints Definition with Tags\nDESCRIPTION: Example YAML configuration showing tag definition and endpoint paths for customer management in a separate file.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2025-03-20-URIs-for-Tags.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninfo:\n...\ntags:\n  - name: Customer\n    description: APIs to manage customers. A customer is a representation of ...\n  \npaths:\n  /customers/{id}/:\n    parameters:\n      - name: id\n        . . .\n    get:\n      . . .\n  /customers/:\n    . . .\n```\n\n----------------------------------------\n\nTITLE: Basic String Property XML Representation\nDESCRIPTION: Shows the XML representation of a basic string property.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_88\n\nLANGUAGE: xml\nCODE:\n```\n<animals>...</animals>\n```\n\n----------------------------------------\n\nTITLE: Defining OperationRef Links in YAML\nDESCRIPTION: Example of defining links using relative operationRef in OpenAPI. The link references an operation and passes parameters from the response.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration Example\nDESCRIPTION: Simple JSON configuration demonstrating a boolean property.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/tests/md2html/fixtures/basic-new.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": true\n}\n```\n\n----------------------------------------\n\nTITLE: URI Template with Pre-encoded Parameter Name\nDESCRIPTION: This URI template includes the pre-encoded parameter name to handle the illegal character (emoji).\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_127\n\nLANGUAGE: uritemplate\nCODE:\n```\n{?%E2%9D%A4%EF%B8%8F}\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Connections Table in Markdown\nDESCRIPTION: A markdown table listing the implicit connections in OpenAPI Descriptions, including their sources, targets, and alternative URI-based connections where available.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Source | Target | Alternative |\n| ---- | ---- | ---- |\n| [Security Requirement Object](#security-requirement-object) `{name}` | [Security Scheme Object](#security-scheme-object) name under the [Components Object](#components-object) | _n/a_ |\n| [Discriminator Object](#discriminator-object) `mapping` _(implicit, or explicit name syntax)_ | [Schema Object](#schema-object) name under the Components Object | `mapping` _(explicit URI syntax)_ |\n| [Operation Object](#operation-object) `tags` | [Tag Object](#tag-object) `name` (in the [OpenAPI Object](#openapi-object)'s `tags` array) | _n/a_ |\n| [Link Object](#link-object) `operationId` | [Path Item Object](#path-item-object) `operationId` | `operationRef` |\n```\n\n----------------------------------------\n\nTITLE: Expanded URI Query String\nDESCRIPTION: This is the result of expanding the URI Template with the given data. It shows how the 'formulas' object is exploded into separate key-value pairs and the 'words' array is serialized as a comma-separated list.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_105\n\nLANGUAGE: uri\nCODE:\n```\n?a=x%2By&b=x%2Fy&c=x%5Ey&words=math,is,fun\n```\n\n----------------------------------------\n\nTITLE: Resulting URI with Encoded Parameter Name\nDESCRIPTION: This URI shows the result of expanding the template with the pre-encoded parameter name and value.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_128\n\nLANGUAGE: uri\nCODE:\n```\n?%E2%9D%A4%EF%B8%8F=love%21\n```\n\n----------------------------------------\n\nTITLE: Event Stream Format Example\nDESCRIPTION: Example of Server-Sent Events (SSE) format with data fields, retry directive, and event type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/tests/md2html/fixtures/basic-new.md#2025-04-18_snippet_5\n\nLANGUAGE: eventstream\nCODE:\n```\ndata: This data is formatted\ndata: across two lines\nretry: 5\n\nevent: add\ndata: 1234.5678\nunknown-field: this is ignored\n```\n\n----------------------------------------\n\nTITLE: Combined Alternative Schemas with allOf in YAML\nDESCRIPTION: Example showing how to combine different schema types (XML Schema and Schematron) using the allOf construct. This demonstrates using alternative schemas of different formats together.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/Alternative-Schema/examples.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n    allOf:\n        - x-oas-draft-alternativeSchema:\n            type: xmlSchema\n            location: ./xmlSchema.xsd\n        - x-oas-draft-alternativeSchema:\n            type: schematron\n            location: ./schema.sch\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example\nDESCRIPTION: Simple YAML configuration demonstrating a boolean property.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/tests/md2html/fixtures/basic-new.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfoo: true\n```\n\n----------------------------------------\n\nTITLE: External Documentation Object Example - YAML\nDESCRIPTION: YAML version of the External Documentation Object example showing how to reference external documentation with a description and URL.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Find more info here\nurl: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Using Reference Objects in OpenAPI Specification\nDESCRIPTION: These snippets demonstrate how to use Reference Objects in the OpenAPI specification. They show different ways to reference other parts of the specification or external files, including relative schema files and embedded schemas.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"$ref\": \"#/definitions/Pet\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: '#/definitions/Pet'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"$ref\": \"Pet.json\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: 'Pet.yaml'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: 'definitions.yaml#/Pet'\n```\n\n----------------------------------------\n\nTITLE: Defining Login Endpoint Object in Swagger 1.2\nDESCRIPTION: Example of a Login Endpoint object for the Implicit Grant flow in Swagger 1.2. It specifies the URL of the authorization endpoint.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"url\": \"http://petstore.swagger.wordnik.com/oauth/dialog\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Code Grant Object in Swagger 1.2\nDESCRIPTION: Example of an Authorization Code Grant object for OAuth2 in Swagger 1.2. It includes token request endpoint and token endpoint definitions with their respective URLs and parameter names.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"tokenRequestEndpoint\": {\n    \"url\": \"http://petstore.swagger.wordnik.com/oauth/requestToken\",\n    \"clientIdName\": \"client_id\",\n    \"clientSecretName\": \"client_secret\"\n  },\n  \"tokenEndpoint\": {\n    \"url\": \"http://petstore.swagger.wordnik.com/oauth/token\",\n    \"tokenName\": \"access_code\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting URI for Simplified Template with Undefined Values\nDESCRIPTION: This URI shows the result of expanding the simplified template with the defined 'words' parameter values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_125\n\nLANGUAGE: uri\nCODE:\n```\n?words=hello%20world\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in JSON for OpenAPI Specification\nDESCRIPTION: Example of a License Object in JSON format, specifying the license information for the exposed API using the SPDX identifier.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apache 2.0\",\n  \"identifier\": \"Apache-2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Callback URL Example in OpenAPI\nDESCRIPTION: Demonstrates callback URL definition using query parameters in YAML format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nmyCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Primitive Email Schema Example\nDESCRIPTION: Basic schema definition for an email string type\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nformat: email\n```\n\n----------------------------------------\n\nTITLE: JSON Array Field Example\nDESCRIPTION: Demonstrates the JSON representation format for array values in OpenAPI Specification fields.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": [1, 2, 3]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Complex Type Reference in Items Object\nDESCRIPTION: Shows how to reference a complex type (model) in an Items Object. This approach is used when an array contains objects defined by a model rather than primitive values.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"$ref\": \"Pet\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Scope Object in JavaScript\nDESCRIPTION: Demonstrates the structure of a Scope Object, which describes an OAuth2 authorization scope. It includes the scope name and a description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_32\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"scope\": \"email\",\n  \"description\": \"Access to your email address\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Object in JSON for OpenAPI Specification\nDESCRIPTION: Example of a Contact Object in JSON format, providing contact information for the exposed API including name, URL, and email.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Value Examples in JSON\nDESCRIPTION: Example values showing different parameter data types including string, array, and object representations that demonstrate various parameter formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n   string -> \"blue\"\n   array -> [\"blue\",\"black\",\"brown\"]\n   object -> { \"R\": 100, \"G\": 200, \"B\": 150 }\n```\n\n----------------------------------------\n\nTITLE: Representing a Field with Array Value in Swagger JSON\nDESCRIPTION: An example of how fields with array values are represented in Swagger's JSON format. This shows the standard JSON array notation used throughout the specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n   \"field\" : [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying the self Field in OpenAPI Object Documentation (Markdown)\nDESCRIPTION: Markdown documentation for the proposed 'self' field in the OpenAPI Object, defining its type, description, and constraints. The field sets the URI of the document which also serves as its base URI.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2024-08-01-Self-Identification.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## OpenAPI Object\n\n### Fixed Fields\n\nField Name | Type | Description\n---|:---|:---\nself | `URI-reference` (without a fragment) | Sets the URI of this document, which also serves as its base URI in accordance with [RFC 3986 §5.1.1](https://www.rfc-editor.org/rfc/rfc3986#section-5.1.1); the value MUST NOT be the empty string and MUST NOT contain a fragment\n```\n\n----------------------------------------\n\nTITLE: OpenAPI License Object Example in JSON and YAML\nDESCRIPTION: Example of a License Object that provides license information for the exposed API, including the license name and URL to the license document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apache 2.0\",\n  \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: Apache 2.0\nurl: http://www.apache.org/licenses/LICENSE-2.0.html\n```\n\n----------------------------------------\n\nTITLE: HTTP Request-Response Example for Callback\nDESCRIPTION: Shows an example HTTP request and response for webhook callback registration.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_50\n\nLANGUAGE: http\nCODE:\n```\nPOST /subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 188\n\n{\n  \"failedUrl\": \"https://clientdomain.com/failed\",\n  \"successUrls\": [\n    \"https://clientdomain.com/fast\",\n    \"https://clientdomain.com/medium\",\n    \"https://clientdomain.com/slow\"\n  ]\n}\n```\n\nLANGUAGE: http\nCODE:\n```\n201 Created\nLocation: https://example.org/subscription/1\n```\n\n----------------------------------------\n\nTITLE: Setting Up ReSpec Environment for HTML Viewing (Shell)\nDESCRIPTION: This shell script creates a 'js' directory, copies the ReSpec JavaScript file from the node_modules folder, and sets up a gitignore file. This allows HTML files in the 'fixtures' folder to be viewed with ReSpec formatting in a local browser.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/tests/md2html/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir js\ncp ../../node_modules/respec/builds/respec-w3c.js js/\necho \"*\" > js/.gitignore\n```\n\n----------------------------------------\n\nTITLE: Empty Response Object Example in YAML\nDESCRIPTION: YAML representation of a Response Object with no return value, only containing a description field to indicate an object was created.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: object created\n```\n\n----------------------------------------\n\nTITLE: Defining Enhanced Tags in YAML for OpenAPI Specification\nDESCRIPTION: This snippet demonstrates the proposed enhanced tag structure using YAML format. It includes examples of tags with new fields like 'summary', 'kind', and 'parent' to illustrate hierarchical relationships and different tag types.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2024-09-01-Tags-Improvement.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n- name: deprecated\n  kind: internal\n  summary: Deprecated\n  description: This operation has been deprecated and will be removed in the future. Avoid using items with this tag.\n- name: shop\n  kind: nav\n  summary: Order Online\n  description: Operations relating to the retail operations behind the [online shopping site](https://example.com/shopping).\n- name: products\n  kind: nav\n  parent: shop\n  summary: Products\n  description: View and manage the product catalog.\n- name: orders\n  kind: nav\n  parent: shop\n  summary: Online Orders\n  description: Place, fulfil and invoice orders for the online shop.\n```\n\n----------------------------------------\n\nTITLE: Minimalist Alternative Schema Reference in YAML\nDESCRIPTION: A basic example showing how to reference an external JSON Schema file using the x-oas-draft-alternativeSchema extension.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/Alternative-Schema/examples.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n    x-oas-draft-alternativeSchema:\n      type: jsonSchema\n      location: ./real-jsonschema.json\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Response in OpenAPI\nDESCRIPTION: A minimal Response Object example with only a description field, suitable for responses that don't return any content.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"object created\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: object created\n```\n\n----------------------------------------\n\nTITLE: Defining XML Array Element Names in OpenAPI YAML\nDESCRIPTION: This snippet shows the YAML equivalent of changing element names for XML arrays in OpenAPI. It defines the same configuration as the JSON example for naming individual array items.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_70\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Main Document with Tag References\nDESCRIPTION: Example YAML configuration showing attempted tag references and path references from a main OpenAPI document to a subsidiary document.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2025-03-20-URIs-for-Tags.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninfo:\n...\ntags:\n  - $ref: \"./customers.yaml#/tags/0\"\n  \npaths:\n  /customers/{id}/:\n    $ref: \"./customers.yaml#/paths/~customers~1{id}~1\"\n  /customers/:\n    $ref: \"./customers.yaml#/paths/~customers~1\"\n```\n\n----------------------------------------\n\nTITLE: XML Name Replacement in OpenAPI 3.0 JSON\nDESCRIPTION: This example demonstrates how to replace the XML element name for a property using the xml object in OpenAPI 3.0 JSON format.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Building OpenAPI Specification Source Files\nDESCRIPTION: Instructions for setting up the local environment to preview specification HTML. This process involves installing Node.js, checking out the repository, installing dependencies, and building the markdown source files into HTML.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build-src\n```\n\n----------------------------------------\n\nTITLE: Parameter Objects Configuration\nDESCRIPTION: YAML configuration demonstrating regular style:\"form\" expansion with RFC6570 support, defining parameters for formulas object and words array.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_116\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n- name: formulas\n  in: query\n  schema:\n    type: object\n    additionalProperties:\n      type: string\n  explode: true\n- name: words\n  in: query\n  schema:\n    type: array\n    items:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Body Parameter with Array of Strings in JavaScript\nDESCRIPTION: Example of a body parameter that is an array of string values. It specifies the parameter name, location, description, required flag, and a schema defining an array of strings.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"user\",\n  \"in\": \"body\",\n  \"description\": \"user to add to the system\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Header Object in OpenAPI Specification\nDESCRIPTION: This snippet demonstrates how to define a simple header object with an integer type and a description. It's an example of how to specify headers in the OpenAPI specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"type\": \"integer\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: The number of allowed requests in the current period\ntype: integer\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP Request for Runtime Expression Evaluation\nDESCRIPTION: Shows an example HTTP request used to demonstrate how runtime expressions are evaluated in the context of callbacks. The request includes a JSON body with URLs that can be referenced using JSON Pointer expressions.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_53\n\nLANGUAGE: http\nCODE:\n```\nPOST /subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"http://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"http://clientdomain.com/fast\",\n    \"http://clientdomain.com/medium\",\n    \"http://clientdomain.com/slow\"\n  ]\n}\n\n201 Created\nLocation: http://example.org/subscription/1\n```\n\n----------------------------------------\n\nTITLE: Defining Basic String Property in OpenAPI\nDESCRIPTION: Example of a basic string property definition in OpenAPI Specification, showing JavaScript, YAML, and resulting XML representations.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: string\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animals>...</animals>\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Composition in JSON and YAML\nDESCRIPTION: Shows how to use the allOf keyword to create composite models, extending a base error model with additional properties.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Basic String Property Definition in YAML\nDESCRIPTION: Shows a basic string property definition in YAML format that corresponds to the JSON example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_87\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Grant Types Object in Swagger 1.2\nDESCRIPTION: Example of an OAuth2 Grant Types object specifying both Implicit and Authorization Code grant types. It includes login endpoints, token names, and token request/endpoint details.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"implicit\": {\n    \"loginEndpoint\": {\n      \"url\": \"http://petstore.swagger.wordnik.com/oauth/dialog\"\n    },\n    \"tokenName\": \"access_token\"\n  },\n  \"authorization_code\": {\n    \"tokenRequestEndpoint\": {\n      \"url\": \"http://petstore.swagger.wordnik.com/oauth/requestToken\",\n      \"clientIdName\": \"client_id\",\n      \"clientSecretName\": \"client_secret\"\n    },\n    \"tokenEndpoint\": {\n      \"url\": \"http://petstore.swagger.wordnik.com/oauth/token\",\n      \"tokenName\": \"access_code\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Path Templating Example in OpenAPI\nDESCRIPTION: Demonstrates path templating patterns with examples of valid and invalid path definitions\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.3.md#2025-04-18_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n  /pets/{petId}\\n  /pets/mine\n```\n\n----------------------------------------\n\nTITLE: Defining Rate-Limit Headers in OpenAPI Specification\nDESCRIPTION: This snippet demonstrates how to define rate-limit headers in the OpenAPI specification. It includes three headers: X-Rate-Limit-Limit, X-Rate-Limit-Remaining, and X-Rate-Limit-Reset, each with a description and type.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"X-Rate-Limit-Limit\": {\n        \"description\": \"The number of allowed requests in the current period\",\n        \"type\": \"integer\"\n    },\n    \"X-Rate-Limit-Remaining\": {\n        \"description\": \"The number of remaining requests in the current period\",\n        \"type\": \"integer\"\n    },\n    \"X-Rate-Limit-Reset\": {\n        \"description\": \"The number of seconds left in the current period\",\n        \"type\": \"integer\"\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nX-Rate-Limit-Limit:\n  description: The number of allowed requests in the current period\n  type: integer\nX-Rate-Limit-Remaining:\n  description: The number of remaining requests in the current period\n  type: integer\nX-Rate-Limit-Reset:\n  description: The number of seconds left in the current period\n  type: integer\n```\n\n----------------------------------------\n\nTITLE: Representing Array Values in JSON for OpenAPI Specification\nDESCRIPTION: Example of how array values are represented in JSON format within the OpenAPI Specification.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/2.0.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n   \"field\" : [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Overlays in YAML\nDESCRIPTION: This snippet demonstrates how to use JMESPath syntax with wildcards to apply updates to multiple nodes in the target document simultaneously.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-12-24-Overlays.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noverlay: 1.0.0\ninfo:\n  title: Update many objects at once\n  version: 1.0.0\nupdates:\n- target: paths.*.get\n  merge:\n    x-safe: true\n- target: paths.*.get.parameters[?name=='filter' && in=='query']\n  merge:\n    schema:\n      $ref: \"/components/schemas/filterSchema\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Data Types and Formats Table in Markdown\nDESCRIPTION: A markdown table listing the formats defined by the OpenAPI Specification, including their corresponding JSON data types and additional comments.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `format` | JSON Data Type | Comments |\n| ---- | ---- | ---- |\n| `int32` | number | signed 32 bits |\n| `int64` | number | signed 64 bits (a.k.a long) |\n| `float` | number | |\n| `double` | number | |\n| `byte` | string | base64 encoded characters - [RFC4648](https://www.rfc-editor.org/rfc/rfc4648#section-4) |\n| `binary` | string | any sequence of octets |\n| `date` | string | As defined by `full-date` - [RFC3339](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) |\n| `date-time` | string | As defined by `date-time` - [RFC3339](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) |\n| `password` | string | A hint to obscure the value. |\n```\n\n----------------------------------------\n\nTITLE: Example JSON Data for Form Encoding\nDESCRIPTION: Sample JSON data representing an address object with streetAddress, city, state, and zip properties. This demonstrates the complex object that will be stringified for form encoding.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"streetAddress\": \"123 Example Dr.\",\n  \"city\": \"Somewhere\",\n  \"state\": \"CA\",\n  \"zip\": \"99999+1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining URL-Encoded Form Example with JSON String in YAML\nDESCRIPTION: Shows how to define an example of a URL-encoded form containing a JSON string using YAML format. This example demonstrates a JSON string encoded inside a URL-style form body.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_69\n\nLANGUAGE: yaml\nCODE:\n```\napplication/x-www-form-urlencoded:\n  schema:\n    type: object\n    properties:\n      jsonValue:\n        type: string\n  encoding:\n    jsonValue:\n      contentType: application/json\n  examples:\n    jsonFormValue:\n      description: 'The JSON string \"json\" as a form value'\n      value: jsonValue=%22json%22\n```\n\n----------------------------------------\n\nTITLE: Text Response with Headers in OpenAPI\nDESCRIPTION: Illustrates a text response with rate limiting headers in both JSON and YAML formats.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      },\n      \"example\": \"whoa!\"\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object with Array in YAML for OpenAPI Specification\nDESCRIPTION: This example demonstrates how to define a Response Object in YAML format for an array of complex types. It includes a description and content schema referencing a complex type definition.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.1.md#2025-04-18_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A complex object array response\ncontent:\n  application/json:\n    schema:\n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n```\n\n----------------------------------------\n\nTITLE: HTTP Request and JSON Response for Referenced Document with Security Requirements\nDESCRIPTION: Demonstrates an HTTP request to fetch a referenced OpenAPI document in JSON format, and the corresponding JSON response showing a different security scheme definition and the referenced path item with security requirements.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_113\n\nLANGUAGE: http\nCODE:\n```\nGET /api/description/other HTTP/1.1\nHost: www.example.com\nAccept: application/openapi+json\n```\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"securitySchemes\": {\n    \"MySecurity\": {\n      \"type\": \"http\",\n      \"scheme\": \"basic\"\n    }\n  },\n  \"pathItems\": {\n    \"Foo\": {\n      \"get\": {\n        \"security\": [\n          \"MySecurity\": []\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Alternative Schema Versions with anyOf in YAML\nDESCRIPTION: An example showing how to provide multiple alternative schema versions using the anyOf construct. This allows referencing different versions of JSON Schema files as alternatives.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/Alternative-Schema/examples.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n    anyOf:\n        - x-oas-draft-alternativeSchema:\n            type: jsonSchema\n            location: ./real-jsonschema-08.json\n        - x-oas-draft-alternativeSchema:\n            type: jsonSchema\n            location: ./real-jsonschema-07.json\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Array Element Names in OpenAPI\nDESCRIPTION: Shows how to customize the element names in an array using the 'xml.name' property on the items. This affects how the array elements appear in XML output.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n```\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Removing Array Elements in YAML Overlay\nDESCRIPTION: This snippet demonstrates how to remove a specific parameter from all GET operations using an overlay.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2019-12-24-Overlays.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\noverlay: 1.0.0\ninfo:\n  title: Remove a array element\n  version: 1.0.0\nupdates:\n- target: paths[*].get.parameters[? name == 'dummy']\n  remove: true\n```\n\n----------------------------------------\n\nTITLE: Restructured YAML Data for Manual URI Template\nDESCRIPTION: This YAML structure is designed to work with the manually constructed URI template, including pre-encoded values for certain characters.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.4.md#2025-04-18_snippet_121\n\nLANGUAGE: YAML\nCODE:\n```\na: x%2By\nb: x/y\nc: x^y\nwords.0: math\nwords.1: is\nwords.2: fun\n```\n\n----------------------------------------\n\nTITLE: Complex XML Configuration\nDESCRIPTION: Complete example showing XML attributes, prefixes, and namespaces.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.0.md#2025-04-18_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"https://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Expression ABNF Syntax Definition\nDESCRIPTION: Formal ABNF syntax definition for runtime expressions used in Link Objects and Callback Objects, specifying the grammar for dynamic value references.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_63\n\nLANGUAGE: abnf\nCODE:\n```\nexpression = \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source\nsource     = header-reference / query-reference / path-reference / body-reference\nheader-reference = \"header.\" token\nquery-reference  = \"query.\" name\npath-reference   = \"path.\" name\nbody-reference   = \"body\" [\"#\" json-pointer ]\njson-pointer    = *( \"/\" reference-token )\nreference-token = *( unescaped / escaped )\nunescaped       = %x00-2E / %x30-7D / %x7F-10FFFF\n                ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\nescaped         = \"~\" ( \"0\" / \"1\" )\n                ; representing '~' and '/', respectively\nname = *( CHAR )\ntoken = 1*tchar\ntchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\"\n      / \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Expression Syntax in ABNF\nDESCRIPTION: The ABNF syntax definition for runtime expressions in OpenAPI, which are used in Link Objects and Callback Objects to access data from HTTP requests and responses.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.0.0.md#2025-04-18_snippet_60\n\nLANGUAGE: abnf\nCODE:\n```\n      expression = ( \"$url\" | \"$method\" | \"$statusCode\" | \"$request.\" source | \"$response.\" source )\n      source = ( header-reference | query-reference | path-reference | body-reference ) \n      header-reference = \"header.\" token\n      query-reference = \"query.\" name \n      path-reference = \"path.\" name\n      body-reference = \"body\" [\"#\" fragment]\n      fragment = a JSON Pointer [RFC 6901](https://tools.ietf.org/html/rfc6901) \n      name = *( char )\n      char = as per RFC [7159](https://tools.ietf.org/html/rfc7159#section-7)\n      token = as per RFC [7230](https://tools.ietf.org/html/rfc7230#section-3.2.6)\n```\n\n----------------------------------------\n\nTITLE: Example Undefined Values Data Structure\nDESCRIPTION: YAML example showing undefined values handling in URI templates.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/3.1.1.md#2025-04-18_snippet_109\n\nLANGUAGE: yaml\nCODE:\n```\nformulas: {}\nwords:\n- hello\n- world\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Objects in JSON for OpenAPI Specification\nDESCRIPTION: This snippet shows examples of the proposed Tag Object structure in JSON format. It includes tags with new fields like 'summary', 'kind', and 'parent' to demonstrate different use cases and hierarchical relationships.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/proposals/2024-09-01-Tags-Improvement.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"account-updates\",\n  \"summary\": \"Account Updates\",\n  \"description\": \"Account update operations\",\n  \"kind\": \"nav\"\n},\n{\n  \"name\": \"partner\",\n  \"summary\": \"Partner\",\n  \"description\": \"Operations available to the partners network\",\n  \"parent\": \"external\",\n  \"kind\": \"audience\"\n},\n{\n  \"name\": \"external\",\n  \"summary\": \"External\",\n  \"description\": \"Operations available to external consumers\",\n  \"kind\": \"audience\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Anchor Tag Format\nDESCRIPTION: Example showing the preferred format for HTML anchor tags in markdown documentation\nSOURCE: https://github.com/oai/openapi-specification/blob/main/style-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span id=\"thing\"></span>\n```\n\n----------------------------------------\n\nTITLE: JSON Field Value Format\nDESCRIPTION: Example showing the correct format for JSON field values in documentation\nSOURCE: https://github.com/oai/openapi-specification/blob/main/style-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"in\": \"header\"\n```\n\n----------------------------------------\n\nTITLE: Resource Object Example in Swagger\nDESCRIPTION: Example of a Resource Object that describes an API endpoint, showing path and description fields.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"path\": \"/pets\",\n    \"description\": \"Operations about pets.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Scope Object Example in Swagger\nDESCRIPTION: Example of a Scope Object defining an OAuth2 scope with name and description.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"scope\": \"email\",\n  \"description\": \"Access to your email address\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Authorizations Object in JavaScript\nDESCRIPTION: Provides an example of an Authorizations Object with OAuth2 scopes. It defines two scopes: one for writing pets and another for reading pets.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/versions/1.2.md#2025-04-18_snippet_31\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"oauth2\": [\n    {\n      \"scope\": \"write:pets\",\n      \"description\": \"modify pets in your account\"\n    },\n    {\n      \"scope\": \"read:pets\",\n      \"description\": \"read your pets\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Plain Text Example\nDESCRIPTION: Basic text/plain content example.\nSOURCE: https://github.com/oai/openapi-specification/blob/main/tests/md2html/fixtures/basic-new.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntext/plain\n```"
  }
]