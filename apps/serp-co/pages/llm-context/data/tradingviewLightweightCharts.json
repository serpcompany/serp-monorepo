[
  {
    "owner": "tradingview",
    "repo": "lightweight-charts",
    "content": "TITLE: Importing and Creating Charts in JavaScript\nDESCRIPTION: Example of importing the createChart function and using it to create multiple chart instances.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\n// ...\n\n// somewhere in your code\nconst firstChart = createChart(document.getElementById('firstContainer'));\nconst secondChart = createChart(document.getElementById('secondContainer'));\n```\n\n----------------------------------------\n\nTITLE: Creating Line Series Chart in TradingView Lightweight Charts\nDESCRIPTION: Demonstrates how to create and configure a line series chart with time-series data. The example shows initialization of chart options, creating a line series, setting data points, and fitting content to the time scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/series-types.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addSeries(LineSeries, { color: LINE_LINE_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nlineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Yield Curve Chart with Data\nDESCRIPTION: Complete example of implementing a yield curve chart with configuration options and sample yield curve data. The chart uses linearly spaced horizontal scale with customized base resolution and time ranges.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/chart-types.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = {\n    layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } },\n    yieldCurve: { baseResolution: 1, minimumTimeRange: 10, startTimeRange: 3 },\n    handleScroll: false, handleScale: false,\n};\n\nconst chart = createYieldCurveChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addSeries(LineSeries, { color: LINE_LINE_COLOR });\n\nconst curve = [{ time: 1, value: 5.378 }, { time: 2, value: 5.372 }, { time: 3, value: 5.271 }, { time: 6, value: 5.094 }, { time: 12, value: 4.739 }, { time: 24, value: 4.237 }, { time: 36, value: 4.036 }, { time: 60, value: 3.887 }, { time: 84, value: 3.921 }, { time: 120, value: 4.007 }, { time: 240, value: 4.366 }, { time: 360, value: 4.290 }];\n\nlineSeries.setData(curve);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Time-based Area Chart with Data\nDESCRIPTION: Complete example showing how to create a time-based chart with an area series, including chart configuration, data definition, and time scale adjustment.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/chart-types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addSeries(AreaSeries, { lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR, bottomColor: AREA_BOTTOM_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nareaSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Data with Options\nDESCRIPTION: Comprehensive example of creating a chart with custom options and setting data for area and candlestick series\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/intro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addSeries(AreaSeries, {\n    lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR,\n    bottomColor: AREA_BOTTOM_COLOR,\n});\nareaSeries.setData([\n    { time: '2018-12-22', value: 32.51 },\n    { time: '2018-12-23', value: 31.11 },\n    { time: '2018-12-24', value: 27.02 },\n    { time: '2018-12-25', value: 27.32 },\n    { time: '2018-12-26', value: 25.17 },\n    { time: '2018-12-27', value: 28.89 },\n    { time: '2018-12-28', value: 25.46 },\n    { time: '2018-12-29', value: 23.92 },\n    { time: '2018-12-30', value: 22.68 },\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addSeries(CandlestickSeries, {\n    upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false,\n    wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR,\n});\ncandlestickSeries.setData([\n    { time: '2018-12-22', open: 75.16, high: 82.84, low: 36.16, close: 45.72 },\n    { time: '2018-12-23', open: 45.12, high: 53.90, low: 45.12, close: 48.09 },\n    { time: '2018-12-24', open: 60.71, high: 60.71, low: 53.39, close: 59.29 },\n    { time: '2018-12-25', open: 68.26, high: 68.26, low: 59.04, close: 60.50 },\n    { time: '2018-12-26', open: 67.71, high: 105.85, low: 66.67, close: 91.04 },\n    { time: '2018-12-27', open: 91.04, high: 121.40, low: 82.70, close: 111.40 },\n    { time: '2018-12-28', open: 111.51, high: 142.83, low: 103.34, close: 131.25 },\n    { time: '2018-12-29', open: 131.33, high: 151.17, low: 77.68, close: 96.43 },\n    { time: '2018-12-30', open: 106.33, high: 110.20, low: 90.39, close: 98.10 },\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating Area Chart Series in TradingView Lightweight Charts\nDESCRIPTION: Demonstrates how to create and configure an area chart series with custom colors and time-based data points. The chart shows a filled area between the time scale and connecting line.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/series-types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addSeries(AreaSeries, { lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR, bottomColor: AREA_BOTTOM_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nareaSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Updates with Lightweight Charts in JavaScript\nDESCRIPTION: This code demonstrates how to create a candlestick chart with simulated real-time updates. It initializes a chart with historical data, then uses setInterval to periodically update the latest data point. A button is provided to scroll back to the most recent data using scrollToRealtime API method.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/demos/realtime-updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = {\n\tlayout: {\n\t\ttextColor: CHART_TEXT_COLOR,\n\t\tbackground: { color: CHART_BACKGROUND_COLOR },\n\t},\n\tgrid: {\n\t\tvertLines: { color: CHART_GRID_COLOR },\n\t\thorzLines: { color: CHART_GRID_COLOR },\n\t},\n\tcrosshair: {\n\t\tmode: CrosshairMode.Normal,\n\t},\n\twidth: chartElement.clientWidth,\n\theight: 300,\n};\n\nconst chart = createChart(chartElement, chartOptions);\nconst candlestickSeries = chart.addCandlestickSeries({\n\tupVolume: { color: PRIMARY_COLOR + '80' },\n\tdownVolume: { color: DANGER_COLOR + '80' },\n});\n\nconst containerElement = document.getElementById('container');\nconst btn = document.createElement('button');\nbtn.innerText = 'Go to realtime';\nbtn.className = 'go-to-realtime-button';\nbtn.addEventListener('click', () => {\n\tchart.timeScale().scrollToRealTime();\n});\ncontainerElement.appendChild(btn);\nwindow.addEventListener('resize', () => {\n\tchart.resize(chartElement.clientWidth, 300);\n});\n\n// Historical data\nconst currentBusinessDay = {\n\tday: 5,\n\tmonth: 1,\n\tyear: 2023,\n};\n\nfunction mergeTickToBar(price, lastBar) {\n\tconst newLog = lastBar && Number(lastBar.close) > Number(price);\n\tconst result = {\n\t\ttime: lastBar ? lastBar.time : businessDayToTimestamp(currentBusinessDay),\n\t\topen: lastBar ? lastBar.open : price,\n\t\thigh: lastBar ? Math.max(lastBar.high, price) : price,\n\t\tlow: lastBar ? Math.min(lastBar.low, price) : price,\n\t\tclose: price,\n\t};\n\treturn result;\n}\n\nfunction businessDayToTimestamp(x) {\n\treturn Date.UTC(x.year, x.month - 1, x.day) / 1000;\n}\n\nfunction getNextBusinessDay(time) {\n\tconst d = new Date();\n\td.setUTCFullYear(time.year);\n\td.setUTCMonth(time.month - 1);\n\td.setUTCDate(time.day + 1);\n\treturn {\n\t\tyear: d.getUTCFullYear(),\n\t\tmonth: d.getUTCMonth() + 1,\n\t\tday: d.getUTCDate(),\n\t};\n}\n\n// Data generator / randomizer\nfunction getRandomPrice() {\n\treturn 10 + Math.round(Math.random() * 10000) / 100;\n}\n\n// Set up initial data\nlet lastClose = getRandomPrice();\nfunction getBar() {\n\tconst open = lastClose;\n\tconst close = getRandomPrice();\n\tconst high = Math.max(open, close) + Math.random();\n\tconst low = Math.min(open, close) - Math.random();\n\tlastClose = close;\n\treturn {\n\t\ttime: businessDayToTimestamp(currentBusinessDay),\n\t\topen,\n\t\thigh,\n\t\tlow,\n\t\tclose,\n\t};\n}\n\n// Generate and set historical data\nlet data = [];\nfor (let i = 0; i < 32; i++) {\n\tdata.push(getBar());\n\tcurrentBusinessDay = getNextBusinessDay(currentBusinessDay);\n}\ncandlestickSeries.setData(data);\n\n// Reset the current business day to represent today's day\n// even though bars are timestamped according to a relative day\n// and not a real day/timestamp.\ncurrentBusinessDay = {\n\tday: new Date().getUTCDate(),\n\tmonth: new Date().getUTCMonth() + 1,\n\tyear: new Date().getUTCFullYear(),\n};\n\n// Setup a timer to update the chart every 6 seconds (6000 milliseconds)\nlet lastBar = data[data.length - 1];\nsetInterval(() => {\n\tconst price = getRandomPrice();\n\tconst merged = mergeTickToBar(price, lastBar);\n\tlastBar = merged;\n\tcandlestickSeries.update(merged);\n}, 6000);\n```\n\n----------------------------------------\n\nTITLE: Creating Volume Histogram Overlay Series in TradingView\nDESCRIPTION: Demonstrates how to add a volume histogram series as an overlay to the main chart. Sets up the volume series with appropriate price formatting and positioning using scale margins.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/price-and-volume.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst volumeSeries = chart.addSeries(HistogramSeries, {\n    priceFormat: {\n        type: 'volume',\n    },\n    priceScaleId: '', // set as an overlay by setting a blank priceScaleId\n});\nvolumesSeries.priceScale().applyOptions({\n    // set the positioning of the volume series\n    scaleMargins: {\n        top: 0.7, // highest point of the series will be 70% away from the top\n        bottom: 0,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Baseline Series in Lightweight Charts\nDESCRIPTION: Demonstrates how to create a chart with a baseline series, set custom colors for top and bottom areas, and populate it with data. The example includes setting a base value and customizing fill colors.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/series-types.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst baselineSeries = chart.addBaselineSeries({ baseValue: { type: 'price', price: 25 }, topLineColor: BASELINE_TOP_LINE_COLOR, topFillColor1: BASELINE_TOP_FILL_COLOR1, topFillColor2: BASELINE_TOP_FILL_COLOR2, bottomLineColor: BASELINE_BOTTOM_LINE_COLOR, bottomFillColor1: BASELINE_BOTTOM_FILL_COLOR1, bottomFillColor2: BASELINE_BOTTOM_FILL_COLOR2 });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nbaselineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Updating Series Options Dynamically in TradingView Charts\nDESCRIPTION: Demonstrates how to update series options dynamically using the applyOptions method. The example shows changing candlestick series colors after creation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/series-types.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncandlestickSeries.applyOptions({\n    upColor: 'red',\n    downColor: 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Candlestick Series Chart in JavaScript\nDESCRIPTION: This code example demonstrates how to create a Candlestick Series chart using Lightweight Charts. It configures the chart with custom colors for up and down candlesticks and adds OHLC (Open, High, Low, Close) data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/series-types.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst candlestickSeries = chart.addSeries(CandlestickSeries, { upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false, wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\ncandlestickSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing Whitespace Data with Lightweight Charts in JavaScript\nDESCRIPTION: This code shows how to create a candlestick chart with intentional gaps (whitespace) for periods without trading data. It demonstrates creating a chart, adding a candlestick series, and providing a mix of complete OHLC data points and whitespace-only data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/demos/whitespace.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\n\nconst chart = createChart(document.getElementById('container'), chartOptions);\n\nconst candlestickSeries = chart.addCandlestickSeries({\n\tupColor: '#26a69a',\n\tdownColor: '#ef5350',\n\tborderVisible: false,\n\twickUpColor: '#26a69a',\n\twickDownColor: '#ef5350',\n});\n\ncandlestickSeries.setData([\n\t{ time: { year: 2018, month: 9, day: 22 }, open: 27.1, high: 30.1, low: 26.0, close: 29.5 },\n\t// This doesn't generate a candle as there is no open, high, low, close values. Just a whitespace.\n\t{ time: { year: 2018, month: 9, day: 23 } },\n\t{ time: { year: 2018, month: 9, day: 24 } },\n\t{ time: { year: 2018, month: 9, day: 25 }, open: 31.1, high: 32.1, low: 30.0, close: 30.5 },\n\t{ time: { year: 2018, month: 9, day: 26 }, open: 30.1, high: 30.9, low: 29.9, close: 30.5 },\n\t{ time: { year: 2018, month: 9, day: 27 } },\n\t{ time: { year: 2018, month: 9, day: 28 }, open: 29.1, high: 31.0, low: 28.8, close: 30.8 },\n]);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite History with Lightweight Charts in JavaScript\nDESCRIPTION: This code demonstrates how to implement infinite history loading in Lightweight Charts. It initializes a chart, sets up a candlestick series, and uses subscribeVisibleLogicalRangeChange to detect when more historical data needs to be loaded. The example simulates data loading with a setTimeout delay.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/demos/infinite-history.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart(document.getElementById('container'), {\n\tautoSize: true,\n});\n\nconst candlestickSeries = chart.addCandlestickSeries();\n\n// Generate some random initial data\nconst initialData = generateData(100);\ncandlestickSeries.setData(initialData);\n\n// Set the visible range to show the most recent 50 candles\nchart.timeScale().setVisibleLogicalRange({\n\tfrom: initialData.length - 50,\n\tto: initialData.length - 1,\n});\n\n// Variable to keep track of the total data we have\nlet totalData = initialData.length;\n\n// Subscribe to visible range changes\nchart.timeScale().subscribeVisibleLogicalRangeChange((range) => {\n\t// If we're close to the left edge of the chart\n\tif (range.from < 10) {\n\t\t// Simulate loading more data with a delay\n\t\tsetTimeout(() => {\n\t\t\t// Generate 50 more data points\n\t\t\tconst newData = generateData(50, totalData);\n\t\t\t// Prepend the new data to the series\n\t\t\tcandlestickSeries.setData([...newData, ...candlestickSeries.data()]);\n\t\t\t// Update our total data count\n\t\t\ttotalData += newData.length;\n\t\t}, 500);\n\t}\n});\n\n// Helper function to generate random data\nfunction generateData(count, startIndex = 0) {\n\tconst data = [];\n\tlet time = new Date(2018, 0, 1);\n\ttime.setDate(time.getDate() + startIndex);\n\n\tfor (let i = 0; i < count; i++) {\n\t\tconst open = Math.random() * 100 + 100;\n\t\tconst close = Math.random() * 100 + 100;\n\t\tdata.push({\n\t\t\ttime: time.getTime() / 1000,\n\t\t\topen: Math.min(open, close),\n\t\t\thigh: Math.max(open, close) + Math.random() * 10,\n\t\t\tlow: Math.min(open, close) - Math.random() * 10,\n\t\t\tclose: Math.max(open, close),\n\t\t});\n\t\ttime.setDate(time.getDate() + 1);\n\t}\n\n\treturn data;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Time-based Chart in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a standard time-based chart using the createChart function from Lightweight Charts. It's suitable for displaying general-purpose financial and time series data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/chart-types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(document.getElementById('container'), options);\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Candlestick Series in Lightweight Charts\nDESCRIPTION: Shows how to create a chart with a candlestick series, set custom colors for up and down candlesticks, and populate it with OHLC data. The example includes customizing wick colors and disabling candlestick borders.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/series-types.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst candlestickSeries = chart.addCandlestickSeries({ upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false, wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\ncandlestickSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Updating Candlestick Series Options\nDESCRIPTION: Shows how to dynamically update candlestick series options using the applyOptions method.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/series-types.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncandlestickSeries.applyOptions({\n    upColor: 'red',\n    downColor: 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Area Chart with Data\nDESCRIPTION: Complete example of creating an area chart with custom styling and time series data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/series-types.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addAreaSeries({ lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR, bottomColor: AREA_BOTTOM_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nareaSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Adding a Candlestick Series to a Chart\nDESCRIPTION: This snippet shows how to add a candlestick series to the chart using the addSeries method with CandlestickSeries parameter, and then setting the data for the series. This creates the visual representation of the candlestick data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/creating-a-chart.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Generate sample data to use within a candlestick series\nconst candleStickData = generateCandlestickData();\n\n// highlight-start\n// Create the Main Series (Candlesticks)\nconst mainSeries = chart.addSeries(LightweightCharts.CandlestickSeries);\n// Set the data for the Main Series\nmainSeries.setData(candleStickData);\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Customizing Candlestick Colors Based on Close Values in JavaScript\nDESCRIPTION: Enhanced code that maps through the generated candlestick data and conditionally applies custom colors to specific data points. It sets orange color for candlesticks that close above 205, demonstrating how to override series-level styling with data point properties.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/data-points.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Generate sample data to use within a candlestick series\nconst candleStickData = generateCandlestickData().map(datapoint => {\n    // map function is changing the color for the individual\n    // candlestick points that close above 205\n    if (datapoint.close < 205) { return datapoint; }\n    // we are adding 'color' and 'wickColor' properties to the datapoint.\n    // Using spread syntax: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals\n    return { ...datapoint, color: 'orange', wickColor: 'orange' };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Baseline Series Chart in JavaScript\nDESCRIPTION: This snippet illustrates the creation of a Baseline Series chart using Lightweight Charts. It sets up the chart with custom colors for areas above and below the baseline, and adds data points to visualize the series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/series-types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst baselineSeries = chart.addSeries(BaselineSeries, { baseValue: { type: 'price', price: 25 }, topLineColor: BASELINE_TOP_LINE_COLOR, topFillColor1: BASELINE_TOP_FILL_COLOR1, topFillColor2: BASELINE_TOP_FILL_COLOR2, bottomLineColor: BASELINE_BOTTOM_LINE_COLOR, bottomFillColor1: BASELINE_BOTTOM_FILL_COLOR1, bottomFillColor2: BASELINE_BOTTOM_FILL_COLOR2 });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nbaselineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Charts\nDESCRIPTION: Basic example of importing the library and creating multiple chart instances\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/intro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\n// ...\nconst firstChart = createChart(document.getElementById('firstContainer'));\nconst secondChart = createChart(document.getElementById('secondContainer'));\n```\n\n----------------------------------------\n\nTITLE: Creating Line Chart with TradingView Lightweight Charts in JavaScript\nDESCRIPTION: Example shows how to create a line chart using TradingView's Lightweight Charts library. The code initializes a chart with custom styling, adds a line series, populates it with time-series data, and adjusts the time scale to fit the content.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/series-types.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addLineSeries({ color: LINE_LINE_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nlineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing Moving Average Indicator with Lightweight Charts\nDESCRIPTION: This code demonstrates how to create a candlestick chart with a 20-period moving average overlay. It includes functions for generating random price data, calculating the moving average, and rendering both series on a chart with appropriate styling.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/demos/moving-average.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This is a sample implementation of a simple moving average indicator.\n// Note that this indicator makes many compromises to keep the example compact.\n// The indicator should not be used as is in a production environment.\n\nconst chartOptions = {\n\tlayout: {\n\t\ttextColor: CHART_TEXT_COLOR,\n\t\tbackground: { type: 'solid', color: CHART_BACKGROUND_COLOR },\n\t},\n\tgrid: {\n\t\tvertLines: {\n\t\t\tcolor: CHART_GRID_COLOR,\n\t\t},\n\t\thorzLines: {\n\t\t\tcolor: CHART_GRID_COLOR,\n\t\t},\n\t},\n\n\twidth: 600,\n\theight: 300,\n};\n\nconst chart = LightweightCharts.createChart(\n\tdocument.getElementById('container'),\n\tchartOptions\n);\n\n// Creating a line series that will represent our moving average.\n// This series will be styled to a thin line.\nconst movingAverageSeries = chart.addLineSeries({\n\tcolor: 'rgba(255, 82, 82, 1)',\n\tlineWidth: 1,\n});\n\n// Creating a candlestick series that will represent the price on our chart.\nconst candlestickSeries = chart.addCandlestickSeries({\n\tupColor: '#26a69a',\n\tborderUpColor: '#26a69a',\n\twickUpColor: '#26a69a',\n\tdownColor: '#ef5350',\n\tborderDownColor: '#ef5350',\n\twickDownColor: '#ef5350',\n});\n\n// This function creates a candlestick data series simulating a price for the chart.\n// To keep the example clean, randomized data is used.\n// In a real-world scenario, it's more likely you would retrieve this data from an API.\nfunction generateCandlestickData() {\n\t// startDateTimestamp is the starting date of the chart.\n\t// Data is a day-by-day candlestick series.\n\tconst startDateTimestamp = new Date(\n\t\tDate.UTC(2018, 0, 1, 0, 0, 0, 0)\n\t).getTime() / 1000;\n\tconst dayLength = 60 * 60 * 24;\n\tlet candlestickData = [];\n\tlet currentTimestamp = startDateTimestamp;\n\tconst barCount = 100;\n\tlet currentPrice = 100;\n\n\tfor (let i = 0; i < barCount; i++) {\n\t\tconst openPrice = currentPrice;\n\t\tlet lowPrice = openPrice * (1 - (Math.random() * 25) / 1000);\n\t\tlet highPrice = openPrice * (1 + (Math.random() * 25) / 1000);\n\t\tconst closePrice =\n\t\t\topenPrice * (1 + ((Math.random() - 0.5) * 2 * 25) / 1000);\n\n\t\tcurrentPrice = closePrice;\n\n\t\tif (lowPrice > closePrice) {\n\t\t\tlowPrice = closePrice;\n\t\t}\n\n\t\tif (highPrice < closePrice) {\n\t\t\thighPrice = closePrice;\n\t\t}\n\n\t\tcandlestickData.push({\n\t\t\ttime: currentTimestamp,\n\t\t\topen: openPrice,\n\t\t\thigh: highPrice,\n\t\t\tlow: lowPrice,\n\t\t\tclose: closePrice,\n\t\t});\n\n\t\t// Advancing 1 day.\n\t\tcurrentTimestamp += dayLength;\n\t}\n\n\treturn candlestickData;\n}\n\n// This function calculates the 20-period Moving Average.\n// Note: for keeping the example simple, we ignore padding when less than 20 periods are available.\n// In a real-world implementation, we would handle this by passing the MA period as a parameter\n// and consider the number of periods required for calculations.\nfunction calculateMovingAverageSeriesData(candlestickSeries, maWindowSize) {\n\tconst maSeriesData = [];\n\n\tfor (let i = 0; i < candlestickSeries.length; i++) {\n\t\tif (i < maWindowSize - 1) {\n\t\t\t// No MA value for the first `maWindowSize - 1` points.\n\t\t\tmaSeriesData.push({\n\t\t\t\ttime: candlestickSeries[i].time,\n\t\t\t\tvalue: NaN,\n\t\t\t});\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet sum = 0;\n\t\tfor (let j = i + 1 - maWindowSize; j <= i; j++) {\n\t\t\tsum += candlestickSeries[j].close;\n\t\t}\n\n\t\tmaSeriesData.push({\n\t\t\ttime: candlestickSeries[i].time,\n\t\t\tvalue: sum / maWindowSize,\n\t\t});\n\t}\n\n\treturn maSeriesData;\n}\n\nconst candlestickData = generateCandlestickData();\n\ncandlestickSeries.setData(candlestickData);\n\n// Calculate our moving average data set.\n// We're using a 20-period MA here.\nconst movingAverageData = calculateMovingAverageSeriesData(candlestickData, 20);\n\nmovingAverageSeries.setData(movingAverageData);\n\n// Fitting the chart to the screen.\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Bar Series in Lightweight Charts\nDESCRIPTION: Shows how to create a chart with a bar series, set custom colors for up and down bars, and populate it with OHLC (Open, High, Low, Close) data. The example also demonstrates fitting the content to the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/series-types.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst barSeries = chart.addBarSeries({ upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\nbarSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Chart Resizing with Window Events\nDESCRIPTION: This code adds an event listener to automatically resize the chart when the browser window is resized. This is useful for making the chart responsive, but works best when the chart is intended to fill the entire window.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/creating-a-chart.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding a window resize event handler to resize the chart when\n// the window size changes.\n// Note: for more advanced examples (when the chart doesn't fill the entire window)\n// you may need to use ResizeObserver -> https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\nwindow.addEventListener('resize', () => {\n    chart.resize(window.innerWidth, window.innerHeight);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Chart Series in TradingView Lightweight Charts\nDESCRIPTION: Implements a histogram series with customizable colors for individual bars. The chart displays distribution of values using vertical columns with optional color overrides.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/series-types.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst histogramSeries = chart.addSeries(HistogramSeries, { color: HISTOGRAM_COLOR });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922, color: 'red' }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722, color: 'red' }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922, color: 'red' }];\n\nhistogramSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating Line Chart with Lightweight Charts API\nDESCRIPTION: Demonstrates how to create a basic line chart using the Lightweight Charts library. The example shows chart initialization, line series creation with styling, data formatting, and time scale adjustment. Uses sample time-series data with values and timestamps.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/series-types.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addLineSeries({ color: LINE_LINE_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nlineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram Series Chart in JavaScript\nDESCRIPTION: This snippet shows how to create a Histogram Series chart using Lightweight Charts. It sets up the chart with a custom color for the histogram bars and adds data points with some bars having specific colors.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/series-types.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst histogramSeries = chart.addSeries(HistogramSeries, { color: HISTOGRAM_COLOR });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922, color: 'red' }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722, color: 'red' }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922, color: 'red' }];\n\nhistogramSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Setting Data for Area and Candlestick Series in JavaScript\nDESCRIPTION: Demonstrates how to create a chart with Area and Candlestick series, and set initial data for each. This example includes chart options and series styling.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/intro.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addAreaSeries({\n    lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR,\n    bottomColor: AREA_BOTTOM_COLOR,\n});\nareaSeries.setData([\n    { time: '2018-12-22', value: 32.51 },\n    { time: '2018-12-23', value: 31.11 },\n    { time: '2018-12-24', value: 27.02 },\n    { time: '2018-12-25', value: 27.32 },\n    { time: '2018-12-26', value: 25.17 },\n    { time: '2018-12-27', value: 28.89 },\n    { time: '2018-12-28', value: 25.46 },\n    { time: '2018-12-29', value: 23.92 },\n    { time: '2018-12-30', value: 22.68 },\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addCandlestickSeries({\n    upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false,\n    wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR,\n});\ncandlestickSeries.setData([\n    { time: '2018-12-22', open: 75.16, high: 82.84, low: 36.16, close: 45.72 },\n    { time: '2018-12-23', open: 45.12, high: 53.90, low: 45.12, close: 48.09 },\n    { time: '2018-12-24', open: 60.71, high: 60.71, low: 53.39, close: 59.29 },\n    { time: '2018-12-25', open: 68.26, high: 68.26, low: 59.04, close: 60.50 },\n    { time: '2018-12-26', open: 67.71, high: 105.85, low: 66.67, close: 91.04 },\n    { time: '2018-12-27', open: 91.04, high: 121.40, low: 82.70, close: 111.40 },\n    { time: '2018-12-28', open: 111.51, high: 142.83, low: 103.34, close: 131.25 },\n    { time: '2018-12-29', open: 131.33, high: 151.17, low: 77.68, close: 96.43 },\n    { time: '2018-12-30', open: 106.33, high: 110.20, low: 90.39, close: 98.10 },\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating an Area Series Chart in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an Area Series chart using Lightweight Charts. It sets up the chart with custom colors and adds data points to visualize an area plot.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/series-types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addSeries(AreaSeries, { lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR, bottomColor: AREA_BOTTOM_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nareaSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating Candlestick Chart Series in TradingView Lightweight Charts\nDESCRIPTION: Shows how to create a candlestick chart with customizable colors for up and down movements. Each candlestick displays OHLC data with body and wicks.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/series-types.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst candlestickSeries = chart.addSeries(CandlestickSeries, { upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false, wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\ncandlestickSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Charts in JavaScript\nDESCRIPTION: Demonstrates how to import the createChart function and use it to create multiple chart instances. This is the basic setup for using Lightweight Charts in your JavaScript code.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\n// ...\n\n// somewhere in your code\nconst firstChart = createChart(document.getElementById('firstContainer'));\nconst secondChart = createChart(document.getElementById('secondContainer'));\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via NPM\nDESCRIPTION: Command to install the Lightweight Charts library using npm package manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save lightweight-charts\n```\n\n----------------------------------------\n\nTITLE: Implementing a Yield Curve Chart with Real-Time Update Markers in JavaScript\nDESCRIPTION: This code creates a yield curve chart with two series and implements real-time updates using the UpDownMarkersPrimitive plugin. It initializes the chart with historical data and then simulates live updates at regular intervals, automatically displaying markers to indicate price changes.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/demos/yield-curve-with-update-markers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction runYieldCurveWithUpdateMarkersExample(container) {\n\tconst chart = window.LightweightCharts.createChart(container, {\n\t\tlayout: {\n\t\t\tbackground: { color: CHART_BACKGROUND_COLOR },\n\t\t\ttextColor: CHART_TEXT_COLOR,\n\t\t},\n\t\tgrid: {\n\t\t\tvertLines: {\n\t\t\t\tcolor: CHART_GRID_COLOR,\n\t\t\t},\n\t\t\thorzLines: {\n\t\t\t\tcolor: CHART_GRID_COLOR,\n\t\t\t},\n\t\t},\n\t\trightPriceScale: {\n\t\t\tvisible: true,\n\t\t},\n\t\ttimeScale: {\n\t\t\tvisible: true,\n\t\t\tminBarSpacing: 20,\n\t\t\tfixLeftEdge: true,\n\t\t\tfixRightEdge: true,\n\t\t\tborderVisible: false,\n\t\t\tminVisibleBarCount: 0,\n\t\t},\n\t\tcrosshair: {\n\t\t\thorzLine: {\n\t\t\t\tvisible: false,\n\t\t\t},\n\t\t},\n\t});\n\n\t// Initial yield curve points\n\tconst curve1Points = [\n\t\t{ time: '1M', value: 4.456 },\n\t\t{ time: '3M', value: 4.744 },\n\t\t{ time: '6M', value: 4.675 },\n\t\t{ time: '1Y', value: 4.286 },\n\t\t{ time: '2Y', value: 3.906 },\n\t\t{ time: '3Y', value: 3.751 },\n\t\t{ time: '5Y', value: 3.711 },\n\t\t{ time: '7Y', value: 3.714 },\n\t\t{ time: '10Y', value: 3.646 },\n\t\t{ time: '20Y', value: 3.937 },\n\t\t{ time: '30Y', value: 3.841 },\n\t];\n\n\tconst curve2Points = [\n\t\t{ time: '1M', value: 4.256 },\n\t\t{ time: '3M', value: 4.544 },\n\t\t{ time: '6M', value: 4.445 },\n\t\t{ time: '1Y', value: 4.086 },\n\t\t{ time: '2Y', value: 3.706 },\n\t\t{ time: '3Y', value: 3.551 },\n\t\t{ time: '5Y', value: 3.511 },\n\t\t{ time: '7Y', value: 3.514 },\n\t\t{ time: '10Y', value: 3.446 },\n\t\t{ time: '20Y', value: 3.737 },\n\t\t{ time: '30Y', value: 3.641 },\n\t];\n\n\tconst series1 = chart.addYieldCurveSeries({\n\t\tcolor: '#FF6384',\n\t\tlineWidth: 2,\n\t\tfillGaps: true,\n\t});\n\n\tconst series2 = chart.addYieldCurveSeries({\n\t\tcolor: '#4BC0C0',\n\t\tlineWidth: 2,\n\t\tfillGaps: true,\n\t});\n\n\t// Create price change markers and attach to the first series\n\tconst priceChangeMarkers = window.LightweightCharts.createUpDownMarkers(series1);\n\t\n\t// Initial data setup with markers for first series\n\tpriceChangeMarkers.setData(curve1Points);\n\n\t// Set second series data\n\tseries2.setData(curve2Points);\n\n\t// Set the visible time range to ensure all points are visible\n\tchart.timeScale().setVisibleLogicalRange({\n\t\tfrom: -0.5,\n\t\tto: curve1Points.length - 0.5,\n\t});\n\n\t// Simulate updates every 2 seconds\n\tconst intervalId = setInterval(() => {\n\t\t// Only update the first curve\n\t\tconst pointToUpdate = Math.floor(Math.random() * curve1Points.length);\n\t\tconst newValue = curve1Points[pointToUpdate].value + (Math.random() - 0.5) * 0.2;\n\t\t\n\t\t// Update the marker using the primitive's update method\n\t\t// This will also update the series data and add a marker\n\t\tpriceChangeMarkers.update({\n\t\t\ttime: curve1Points[pointToUpdate].time,\n\t\t\tvalue: newValue,\n\t\t});\n\t\t\n\t\t// Update our reference data for future updates\n\t\tcurve1Points[pointToUpdate].value = newValue;\n\t}, 2000);\n\n\treturn () => {\n\t\tclearInterval(intervalId);\n\t\tchart.remove();\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Data for Area and Candlestick Series in Lightweight Charts\nDESCRIPTION: Demonstrates how to set initial data for Area and Candlestick series using the setData method. It also shows how to fit the content to the chart's time scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/intro.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart(container);\n\nconst areaSeries = chart.addAreaSeries();\nareaSeries.setData([\n    { time: '2018-12-22', value: 32.51 },\n    { time: '2018-12-23', value: 31.11 },\n    { time: '2018-12-24', value: 27.02 },\n    { time: '2018-12-25', value: 27.32 },\n    { time: '2018-12-26', value: 25.17 },\n    { time: '2018-12-27', value: 28.89 },\n    { time: '2018-12-28', value: 25.46 },\n    { time: '2018-12-29', value: 23.92 },\n    { time: '2018-12-30', value: 22.68 },\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addCandlestickSeries();\ncandlestickSeries.setData([\n    { time: '2018-12-22', open: 75.16, high: 82.84, low: 36.16, close: 45.72 },\n    { time: '2018-12-23', open: 45.12, high: 53.90, low: 45.12, close: 48.09 },\n    { time: '2018-12-24', open: 60.71, high: 60.71, low: 53.39, close: 59.29 },\n    { time: '2018-12-25', open: 68.26, high: 68.26, low: 59.04, close: 60.50 },\n    { time: '2018-12-26', open: 67.71, high: 105.85, low: 66.67, close: 91.04 },\n    { time: '2018-12-27', open: 91.04, high: 121.40, low: 82.70, close: 111.40 },\n    { time: '2018-12-28', open: 111.51, high: 142.83, low: 103.34, close: 131.25 },\n    { time: '2018-12-29', open: 131.33, high: 151.17, low: 77.68, close: 96.43 },\n    { time: '2018-12-30', open: 106.33, high: 110.20, low: 90.39, close: 98.10 },\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Setting Time Scale Options Individually in JavaScript\nDESCRIPTION: This snippet demonstrates how to set time scale options separately for border color and bar spacing. The barSpacing property adjusts the width of bars, effectively controlling the horizontal zoom level of the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/time-scale.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Setting the border color for the horizontal axis\nchart.timeScale().applyOptions({\n    borderColor: '#71649C',\n});\n\n// highlight-start\n// Adjust the starting bar width (essentially the horizontal zoom)\nchart.timeScale().applyOptions({\n    barSpacing: 10,\n});\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Series Comparison in LightweightCharts\nDESCRIPTION: Example showing how to add and configure multiple trading series on a single chart for comparison purposes. The code demonstrates the usage of the addSeries API to create different types of series with their respective data and styling configurations.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/demos/compare-multiple-series.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartProperties = {\n\theight: 400\n};\n\nconst chart = createChart(document.getElementById('container'), chartProperties);\nconst areaSeries = chart.addAreaSeries();\nconst lineSeries = chart.addLineSeries();\nconst candlestickSeries = chart.addCandlestickSeries();\n\nconst data = [\n\t{ time: '2019-04-11', value: 80.01 },\n\t{ time: '2019-04-12', value: 96.63 },\n\t{ time: '2019-04-13', value: 76.64 },\n\t{ time: '2019-04-14', value: 81.89 },\n\t{ time: '2019-04-15', value: 74.43 },\n\t{ time: '2019-04-16', value: 80.01 },\n\t{ time: '2019-04-17', value: 96.63 },\n\t{ time: '2019-04-18', value: 76.64 },\n\t{ time: '2019-04-19', value: 81.89 },\n\t{ time: '2019-04-20', value: 74.43 },\n];\n\nareaSeries.setData(data);\nlineSeries.setData(data);\ncandlestickSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing Candlestick Chart\nDESCRIPTION: Example of creating a candlestick chart with OHLC data and custom styling options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/series-types.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst candlestickSeries = chart.addCandlestickSeries({ upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false, wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\ncandlestickSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Bar Series in Lightweight Charts\nDESCRIPTION: This code creates a chart with a bar series, sets custom colors for up and down bars, and populates it with OHLC (Open, High, Low, Close) data. It also fits the content to the visible range.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/series-types.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst barSeries = chart.addBarSeries({ upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\nbarSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating Different Series Types\nDESCRIPTION: Example showing how to create different types of series (Area, Bar, Baseline) on a chart\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/intro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AreaSeries, BarSeries, BaselineSeries, createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addSeries(AreaSeries);\nconst barSeries = chart.addSeries(BarSeries);\nconst baselineSeries = chart.addSeries(BaselineSeries);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Series in Lightweight Charts\nDESCRIPTION: Demonstrates how to create and add a custom series to a chart using the addCustomSeries method. Shows initialization of the chart, creating a custom series instance, and setting data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomSeries {\n    /* Class implementing the ICustomSeriesPaneView interface */\n}\n\n// Create an instantiated custom series.\nconst customSeriesInstance = new MyCustomSeries();\n\nconst chart = createChart(document.getElementById('container'));\nconst myCustomSeries = chart.addCustomSeries(customSeriesInstance, {\n    // options for the MyCustomSeries\n    customOption: 10,\n});\n\nconst data = [\n    { time: 1642425322, value: 123, customValue: 456 },\n    /* ... more data */\n];\n\nmyCustomSeries.setData(data);\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Time-based Chart with Lightweight Charts\nDESCRIPTION: Code to create a standard time-based chart using the createChart function. This is the most common chart type for displaying financial and time series data with a time-based horizontal scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/chart-types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(document.getElementById('container'), options);\n```\n\n----------------------------------------\n\nTITLE: Creating Different Series Types in Lightweight Charts\nDESCRIPTION: Shows how to create various types of series (Area, Bar, Baseline, etc.) using the chart instance methods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addAreaSeries();\nconst barSeries = chart.addBarSeries();\nconst baselineSeries = chart.addBaselineSeries();\n// ... and so on\n```\n\n----------------------------------------\n\nTITLE: Setting Data for Area and Candlestick Series in JavaScript\nDESCRIPTION: Example of creating a chart with area and candlestick series, and setting initial data for both series types.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/intro.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addAreaSeries({\n    lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR,\n    bottomColor: AREA_BOTTOM_COLOR,\n});\nareaSeries.setData([\n    { time: '2018-12-22', value: 32.51 },\n    { time: '2018-12-23', value: 31.11 },\n    { time: '2018-12-24', value: 27.02 },\n    { time: '2018-12-25', value: 27.32 },\n    { time: '2018-12-26', value: 25.17 },\n    { time: '2018-12-27', value: 28.89 },\n    { time: '2018-12-28', value: 25.46 },\n    { time: '2018-12-29', value: 23.92 },\n    { time: '2018-12-30', value: 22.68 },\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addCandlestickSeries({\n    upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false,\n    wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR,\n});\ncandlestickSeries.setData([\n    { time: '2018-12-22', open: 75.16, high: 82.84, low: 36.16, close: 45.72 },\n    { time: '2018-12-23', open: 45.12, high: 53.90, low: 45.12, close: 48.09 },\n    { time: '2018-12-24', open: 60.71, high: 60.71, low: 53.39, close: 59.29 },\n    { time: '2018-12-25', open: 68.26, high: 68.26, low: 59.04, close: 60.50 },\n    { time: '2018-12-26', open: 67.71, high: 105.85, low: 66.67, close: 91.04 },\n    { time: '2018-12-27', open: 91.04, high: 121.40, low: 82.70, close: 111.40 },\n    { time: '2018-12-28', open: 111.51, high: 142.83, low: 103.34, close: 131.25 },\n    { time: '2018-12-29', open: 131.33, high: 151.17, low: 77.68, close: 96.43 },\n    { time: '2018-12-30', open: 106.33, high: 110.20, low: 90.39, close: 98.10 },\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Scale Options in TradingView Charts - JavaScript\nDESCRIPTION: Code demonstrates how to modify price scale behavior by accessing the price scale API through the series reference. Disables automatic scaling and sets custom margin proportions for the top and bottom of the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/price-scale.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmainSeries.priceScale().applyOptions({\n    autoScale: false, // disables auto scaling based on visible content\n    scaleMargins: {\n        top: 0.1,\n        bottom: 0.2,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Series Data in JavaScript\nDESCRIPTION: Demonstrates how to update existing data points and add new ones to area and candlestick series using the update method.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/intro.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addAreaSeries();\nareaSeries.setData([\n    // ... other data items\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addCandlestickSeries();\ncandlestickSeries.setData([\n    // ... other data items\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\n// sometime later\n\n// update the most recent bar\nareaSeries.update({ time: '2018-12-31', value: 25 });\ncandlestickSeries.update({ time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 112 });\n\n// creating the new bar\nareaSeries.update({ time: '2019-01-01', value: 20 });\ncandlestickSeries.update({ time: '2019-01-01', open: 112, high: 112, low: 100, close: 101 });\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Series Chart in JavaScript\nDESCRIPTION: This code example shows how to create a Bar Series chart using Lightweight Charts. It configures the chart with custom colors for up and down bars and adds OHLC (Open, High, Low, Close) data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/series-types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst barSeries = chart.addSeries(BarSeries, { upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR });\n\nconst data = [\n  { open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 },\n  { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 },\n  { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 },\n  { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 },\n  { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 },\n  { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 },\n  { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 },\n  { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 },\n  { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 },\n  { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 },\n  { open: 10.96, high: 11.90, low: 10.80, close: 11.50, time: 1643291876 },\n  { open: 11.50, high: 12.00, low: 11.30, close: 11.80, time: 1643378276 },\n  { open: 11.80, high: 12.20, low: 11.70, close: 12.00, time: 1643464676 },\n  { open: 12.00, high: 12.50, low: 11.90, close: 12.30, time: 1643551076 },\n  { open: 12.30, high: 12.80, low: 12.10, close: 12.60, time: 1643637476 },\n  { open: 12.60, high: 13.00, low: 12.50, close: 12.90, time: 1643723876 },\n  { open: 12.90, high: 13.50, low: 12.70, close: 13.20, time: 1643810276 },\n  { open: 13.20, high: 13.70, low: 13.00, close: 13.50, time: 1643896676 },\n  { open: 13.50, high: 14.00, low: 13.30, close: 13.80, time: 1643983076 },\n  { open: 13.80, high: 14.20, low: 13.60, close: 14.00, time: 1644069476 },\n];\n\nbarSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Histogram Series in Lightweight Charts\nDESCRIPTION: Demonstrates how to create a chart with a histogram series, set a custom color, and populate it with data. The example includes setting individual colors for specific data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/series-types.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst histogramSeries = chart.addHistogramSeries({ color: HISTOGRAM_COLOR });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922, color: 'red' }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722, color: 'red' }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922, color: 'red' }];\n\nhistogramSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Populating a Time-based Area Chart in JavaScript\nDESCRIPTION: This code creates a time-based area chart, sets chart options, adds an area series, and populates it with data. It demonstrates how to customize chart appearance and fit content to the visible range.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/chart-types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addSeries(AreaSeries, { lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR, bottomColor: AREA_BOTTOM_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nareaSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Updating Candlestick Series Options in Lightweight Charts\nDESCRIPTION: This code shows how to update the options of an existing candlestick series using the applyOptions method. It changes the up and down colors of the candlesticks.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/series-types.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncandlestickSeries.applyOptions({\n    upColor: 'red',\n    downColor: 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing a Bar Series in JavaScript\nDESCRIPTION: This snippet shows how to create a bar series chart using Lightweight Charts. It demonstrates setting chart options, creating the chart, adding a bar series with custom up and down colors, and setting OHLC (Open, High, Low, Close) data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/series-types.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst barSeries = chart.addBarSeries({ upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\nbarSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Area Series in Lightweight Charts\nDESCRIPTION: Demonstrates how to create a chart, add an area series, and populate it with data. The example includes customizing chart options, series colors, and fitting the content to the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/series-types.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addAreaSeries({ lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR, bottomColor: AREA_BOTTOM_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nareaSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Syncing Crosshair Positions Between Two Charts in JavaScript\nDESCRIPTION: This code demonstrates how to synchronize crosshair positions between two separate chart instances. It uses setCrosshairPosition and subscribeCrosshairMove to ensure both charts display the same crosshair position when a user interacts with either chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/set-crosshair-position.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsyncingCode\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart Instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a chart instance using the createChart method from the LightweightCharts global variable. It requires an HTML div element with id 'container' as the container for the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/creating-a-chart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the Lightweight Chart within the container element\nconst chart = LightweightCharts.createChart(\n    document.getElementById('container')\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Different Series Types in JavaScript\nDESCRIPTION: Demonstration of creating various types of series (Area, Bar, Baseline, etc.) using the chart instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addAreaSeries();\nconst barSeries = chart.addBarSeries();\nconst baselineSeries = chart.addBaselineSeries();\n// ... and so on\n```\n\n----------------------------------------\n\nTITLE: Updating Chart Data in Real-time\nDESCRIPTION: Shows how to update existing data points and add new data points to area and candlestick series in real-time.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/intro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AreaSeries, CandlestickSeries, createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addSeries(AreaSeries);\nareaSeries.setData([\n    // Other data items\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addSeries(CandlestickSeries);\ncandlestickSeries.setData([\n    // Other data items\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\n// ...\n\n// Update the most recent bar\nareaSeries.update({ time: '2018-12-31', value: 25 });\ncandlestickSeries.update({ time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 112 });\n\n// Creating the new bar\nareaSeries.update({ time: '2019-01-01', value: 20 });\ncandlestickSeries.update({ time: '2019-01-01', open: 112, high: 112, low: 100, close: 101 });\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing a Candlestick Series in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a candlestick series chart using Lightweight Charts. It shows how to set chart options, create the chart, add a candlestick series with custom colors, and set OHLC (Open, High, Low, Close) data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/series-types.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst candlestickSeries = chart.addCandlestickSeries({ upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false, wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\ncandlestickSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating a Price Line in Lightweight Charts\nDESCRIPTION: This snippet shows how to create a price line using the createPriceLine method on an ISeriesApi instance. It sets properties such as price, color, line width, style, axis label visibility, and title.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/price-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPriceLine = {\n    price: 1234,\n    color: '#3179F5',\n    lineWidth: 2,\n    lineStyle: 2, // LineStyle.Dashed\n    axisLabelVisible: true,\n    title: 'my label',\n};\n\nseries.createPriceLine(myPriceLine);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Populating a Yield Curve Chart in JavaScript\nDESCRIPTION: This code creates a yield curve chart, sets chart options, adds a line series, and populates it with yield curve data. It demonstrates how to customize the chart for yield curve visualization.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/chart-types.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = {\n    layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } },\n    yieldCurve: { baseResolution: 1, minimumTimeRange: 10, startTimeRange: 3 },\n    handleScroll: false, handleScale: false,\n};\n\nconst chart = createYieldCurveChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addSeries(LineSeries, { color: LINE_LINE_COLOR });\n\nconst curve = [{ time: 1, value: 5.378 }, { time: 2, value: 5.372 }, { time: 3, value: 5.271 }, { time: 6, value: 5.094 }, { time: 12, value: 4.739 }, { time: 24, value: 4.237 }, { time: 36, value: 4.036 }, { time: 60, value: 3.887 }, { time: 84, value: 3.921 }, { time: 120, value: 4.007 }, { time: 240, value: 4.366 }, { time: 360, value: 4.290 }];\n\nlineSeries.setData(curve);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Visible Logical Range\nDESCRIPTION: Shows how to modify the visible range by adjusting the logical range boundaries by half a bar-width on both sides\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/time-scale.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst vr = chart.timeScale().getVisibleLogicalRange();\nchart.timeScale().setVisibleLogicalRange({ from: vr.from + 0.5, to: vr.to - 0.5 });\n```\n\n----------------------------------------\n\nTITLE: Creating Line Chart with Time Series Data in JavaScript\nDESCRIPTION: Demonstrates how to create a line chart using Lightweight Charts library. The code shows initialization of chart options, creation of line series, setting data points with time and value coordinates, and fitting content to the time scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/series-types.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addLineSeries({ color: LINE_LINE_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nlineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Baseline Series in Lightweight Charts\nDESCRIPTION: This snippet shows how to create a chart with a baseline series, set a base value, customize colors for top and bottom areas, and populate it with data. It also fits the content to the visible range.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/series-types.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst baselineSeries = chart.addBaselineSeries({ baseValue: { type: 'price', price: 25 }, topLineColor: BASELINE_TOP_LINE_COLOR, topFillColor1: BASELINE_TOP_FILL_COLOR1, topFillColor2: BASELINE_TOP_FILL_COLOR2, bottomLineColor: BASELINE_BOTTOM_LINE_COLOR, bottomFillColor1: BASELINE_BOTTOM_FILL_COLOR1, bottomFillColor2: BASELINE_BOTTOM_FILL_COLOR2 });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nbaselineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Text Watermark in Lightweight Charts (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create and add a simple text watermark to a chart using the createTextWatermark function. It configures the watermark's alignment, text content, color, and font size.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/watermark.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTextWatermark } from 'lightweight-charts';\n\nconst firstPane = chart.panes()[0];\nconst textWatermark = createTextWatermark(firstPane, {\n    horzAlign: 'center',\n    vertAlign: 'center',\n    lines: [\n        {\n            text: 'Watermark Example',\n            color: 'rgba(171, 71, 188, 0.5)',\n            fontSize: 24,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Image Watermark in Lightweight Charts (JavaScript)\nDESCRIPTION: This snippet shows how to create and add an image watermark to a chart using the createImageWatermark function. It specifies the image source, opacity (alpha), and padding.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/watermark.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createImageWatermark } from 'lightweight-charts';\n\nconst firstPane = chart.panes()[0];\nconst imageWatermark = createImageWatermark(firstPane, '/images/my-image.png', {\n    alpha: 0.5,\n    padding: 20,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Options (Price-based) Chart in Lightweight Charts\nDESCRIPTION: Code to create an options chart using the createOptionsChart function. This specialized chart type uses price values on the horizontal scale instead of time, ideal for visualizing option chains or price distributions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/chart-types.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createOptionsChart } from 'lightweight-charts';\n\nconst chart = createOptionsChart(document.getElementById('container'), options);\n```\n\n----------------------------------------\n\nTITLE: Updating Chart Data in Real-time using JavaScript\nDESCRIPTION: Demonstration of updating existing data points and adding new data points to area and candlestick series in real-time.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/intro.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addAreaSeries();\nareaSeries.setData([\n    // ... other data items\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addCandlestickSeries();\ncandlestickSeries.setData([\n    // ... other data items\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\n// sometime later\n\n// update the most recent bar\nareaSeries.update({ time: '2018-12-31', value: 25 });\ncandlestickSeries.update({ time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 112 });\n\n// creating the new bar\nareaSeries.update({ time: '2019-01-01', value: 20 });\ncandlestickSeries.update({ time: '2019-01-01', open: 112, high: 112, low: 100, close: 101 });\n```\n\n----------------------------------------\n\nTITLE: Creating Different Series Types in JavaScript\nDESCRIPTION: Shows how to create various types of series (Area, Bar, Baseline, etc.) using the chart instance. Each series type is added using a specific method on the chart object.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addAreaSeries();\nconst barSeries = chart.addBarSeries();\nconst baselineSeries = chart.addBaselineSeries();\n// ... and so on\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Series Chart in Lightweight Charts\nDESCRIPTION: This code demonstrates how to create a Line series chart using Lightweight Charts. It initializes a chart with specific styling options, adds a Line series, provides time-value data points, and adjusts the time scale to fit the content.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/series-types.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addSeries(LineSeries, { color: LINE_LINE_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nlineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating Different Series Types\nDESCRIPTION: Demonstrates how to create different types of series (Area, Bar, Baseline) on a chart instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/intro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AreaSeries, BarSeries, BaselineSeries, createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addSeries(AreaSeries);\nconst barSeries = chart.addSeries(BarSeries);\nconst baselineSeries = chart.addSeries(BaselineSeries);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding Histogram Series to Chart in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to add a histogram series to the chart using the Lightweight Charts™ Android wrapper. It creates a series and stores a reference to it for later use.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/android.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nlateinit var histogramSeries: SeriesApi\ncharts_view.api.addHistogramSeries(\n    onSeriesCreated = { series ->\n        histogramSeries = series\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Yield Curve Chart in Lightweight Charts\nDESCRIPTION: Code to create a yield curve chart using the createYieldCurveChart function. This chart type is specifically designed for displaying yield curves with a linearly spaced horizontal scale defined in monthly time duration units.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/chart-types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createYieldCurveChart } from 'lightweight-charts';\n\nconst chart = createYieldCurveChart(document.getElementById('container'), options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Locale in Lightweight Charts (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to set up a chart with custom locale options in Lightweight Charts. It includes a function to change the locale dynamically and creates buttons for switching between different locales.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/demos/custom-locale.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart(document.getElementById('container'), {\n\twidth: 600,\n\theight: 300,\n});\n\nconst lineSeries = chart.addLineSeries();\nlineSeries.setData([\n\t{ time: '2018-12-22', value: 32.51 },\n\t{ time: '2018-12-23', value: 31.11 },\n\t{ time: '2018-12-24', value: 27.02 },\n\t{ time: '2018-12-25', value: 27.32 },\n\t{ time: '2018-12-26', value: 25.17 },\n\t{ time: '2018-12-27', value: 28.89 },\n\t{ time: '2018-12-28', value: 25.46 },\n\t{ time: '2018-12-29', value: 23.92 },\n\t{ time: '2018-12-30', value: 22.68 },\n\t{ time: '2018-12-31', value: 22.67 },\n]);\n\nfunction setLocale(locale) {\n\tchart.applyOptions({\n\t\tlocalization: {\n\t\t\tlocale,\n\t\t\tdateFormat:\n\t\t\t\tlocale === 'ja-JP'\n\t\t\t\t\t? 'yyyy/MM/dd'\n\t\t\t\t\t: locale === 'en-US'\n\t\t\t\t\t? 'MM/dd/yyyy'\n\t\t\t\t\t: 'dd/MM/yyyy',\n\t\t},\n\t});\n}\n\nconst locales = ['es-ES', 'en-US', 'ja-JP'];\nconst buttonContainer = document.createElement('div');\nbuttonContainer.style.cssText = `\n\tposition: absolute;\n\tleft: 0px;\n\ttop: 0px;\n\tz-index: 1;\n`;\ndocument.body.appendChild(buttonContainer);\n\nlocales.forEach(locale => {\n\tconst button = document.createElement('button');\n\tbutton.textContent = locale;\n\tbutton.addEventListener('click', () => setLocale(locale));\n\tbuttonContainer.appendChild(button);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Series Options Dynamically in Lightweight Charts\nDESCRIPTION: This code demonstrates how to update series options on the fly using the applyOptions method. The example shows changing the upColor and downColor of a candlestick series after it has been created.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/series-types.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Updating candlestick series options on the fly\ncandlestickSeries.applyOptions({\n    upColor: 'red',\n    downColor: 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing an Area Series in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an area series chart using Lightweight Charts. It shows how to set chart options, create the chart, add an area series with custom colors, and set data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/series-types.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addAreaSeries({ lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR, bottomColor: AREA_BOTTOM_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nareaSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing a Histogram Series in JavaScript\nDESCRIPTION: This snippet illustrates how to create a histogram series chart using Lightweight Charts. It shows how to set chart options, create the chart, add a histogram series with custom colors, and set data points including individual bar colors.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/series-types.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst histogramSeries = chart.addHistogramSeries({ color: HISTOGRAM_COLOR });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922, color: 'red' }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722, color: 'red' }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922, color: 'red' }];\n\nhistogramSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Customizing Crosshair Options in Lightweight Charts\nDESCRIPTION: This code snippet demonstrates how to customize the crosshair appearance and behavior by applying options to the chart instance. It shows how to change the crosshair mode from 'magnet' to 'normal' and how to style both vertical and horizontal lines with custom colors, width, and style properties.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/crosshair.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Customizing the Crosshair\nchart.applyOptions({\n    crosshair: {\n        // Change mode from default 'magnet' to 'normal'.\n        // Allows the crosshair to move freely without snapping to datapoints\n        mode: LightweightCharts.CrosshairMode.Normal,\n\n        // Vertical crosshair line (showing Date in Label)\n        vertLine: {\n            width: 8,\n            color: '#C3BCDB44',\n            style: LightweightCharts.LineStyle.Solid,\n            labelBackgroundColor: '#9B7DFF',\n        },\n\n        // Horizontal crosshair line (showing Price in Label)\n        horzLine: {\n            color: '#9B7DFF',\n            labelBackgroundColor: '#9B7DFF',\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Command to start the development server which makes the React application accessible on localhost:1234.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/react/01-simple.mdx#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating an Area Series in Lightweight Charts\nDESCRIPTION: This snippet demonstrates how to create a chart, add an area series, and populate it with data. It also shows how to customize the chart's appearance and fit the content to the visible range.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/series-types.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addAreaSeries({ lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR, bottomColor: AREA_BOTTOM_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nareaSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Series Scale Margins\nDESCRIPTION: Demonstrates how to position the main price series to prevent overlap with the volume series by setting appropriate scale margins.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/price-and-volume.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmainSeries.priceScale().applyOptions({\n    scaleMargins: {\n        top: 0.1, // highest point of the series will be 10% away from the top\n        bottom: 0.4, // lowest point will be 40% away from the bottom\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Layout and Localization in Kotlin\nDESCRIPTION: Shows how to configure the chart's layout options, including background color, text color, and localization settings such as locale and formatters.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/android.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncharts_view.api.applyOptions {\n    layout = layoutOptions {\n        background = SolidColor(Color.LTGRAY)\n        textColor = Color.BLACK.toIntColor()\n    }\n    localization = localizationOptions {\n        locale = \"ru-RU\"\n        priceFormatter = PriceFormatter(template = \"{price:#2:#3}$\")\n        timeFormatter = TimeFormatter(\n            locale = \"ru-RU\",\n            dateTimeFormat = DateTimeFormat.DATE_TIME\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Data for Area and Candlestick Series in JavaScript\nDESCRIPTION: Example of creating a chart with area and candlestick series, and setting initial data for both series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/intro.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addAreaSeries({\n    lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR,\n    bottomColor: AREA_BOTTOM_COLOR,\n});\nareaSeries.setData([\n    { time: '2018-12-22', value: 32.51 },\n    { time: '2018-12-23', value: 31.11 },\n    { time: '2018-12-24', value: 27.02 },\n    { time: '2018-12-25', value: 27.32 },\n    { time: '2018-12-26', value: 25.17 },\n    { time: '2018-12-27', value: 28.89 },\n    { time: '2018-12-28', value: 25.46 },\n    { time: '2018-12-29', value: 23.92 },\n    { time: '2018-12-30', value: 22.68 },\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addCandlestickSeries({\n    upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false,\n    wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR,\n});\ncandlestickSeries.setData([\n    { time: '2018-12-22', open: 75.16, high: 82.84, low: 36.16, close: 45.72 },\n    { time: '2018-12-23', open: 45.12, high: 53.90, low: 45.12, close: 48.09 },\n    { time: '2018-12-24', open: 60.71, high: 60.71, low: 53.39, close: 59.29 },\n    { time: '2018-12-25', open: 68.26, high: 68.26, low: 59.04, close: 60.50 },\n    { time: '2018-12-26', open: 67.71, high: 105.85, low: 66.67, close: 91.04 },\n    { time: '2018-12-27', open: 91.04, high: 121.40, low: 82.70, close: 111.40 },\n    { time: '2018-12-28', open: 111.51, high: 142.83, low: 103.34, close: 131.25 },\n    { time: '2018-12-29', open: 131.33, high: 151.17, low: 77.68, close: 96.43 },\n    { time: '2018-12-30', open: 106.33, high: 110.20, low: 90.39, close: 98.10 },\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Series Options in Lightweight Charts\nDESCRIPTION: This snippet shows how to specify default options for a series while creating it. In this example, it demonstrates changing the default top and bottom colors of an area series when the series is initialized.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/series-types.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Change default top & bottom colors of an area series in creating time\nconst series = chart.addSeries(AreaSeries, {\n    topColor: 'red',\n    bottomColor: 'green',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Series Options in TradingView Charts\nDESCRIPTION: Shows how to set default options when creating a new area series. The example demonstrates setting top and bottom colors during series creation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/series-types.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = chart.addSeries(AreaSeries, {\n    topColor: 'red',\n    bottomColor: 'green',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Custom Element for Lightweight Charts in JavaScript\nDESCRIPTION: This snippet shows the basic structure of a custom element class for wrapping Lightweight Charts. It includes the connectedCallback and disconnectedCallback lifecycle methods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n    class LightweightChartWC extends HTMLElement {\n        connectedCallback() {\n            this.attachShadow({ mode: 'open' });\n        }\n\n        disconnectedCallback() {}\n    }\n\n    // Register our custom element with a specific tag name.\n    window.customElements.define('lightweight-chart', LightweightChartWC);\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Data with Styling\nDESCRIPTION: Comprehensive example showing chart creation with styling options and setting data for area and candlestick series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/intro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst areaSeries = chart.addSeries(AreaSeries, {\n    lineColor: LINE_LINE_COLOR, topColor: AREA_TOP_COLOR,\n    bottomColor: AREA_BOTTOM_COLOR,\n});\nareaSeries.setData([\n    { time: '2018-12-22', value: 32.51 },\n    { time: '2018-12-23', value: 31.11 },\n    { time: '2018-12-24', value: 27.02 },\n    { time: '2018-12-25', value: 27.32 },\n    { time: '2018-12-26', value: 25.17 },\n    { time: '2018-12-27', value: 28.89 },\n    { time: '2018-12-28', value: 25.46 },\n    { time: '2018-12-29', value: 23.92 },\n    { time: '2018-12-30', value: 22.68 },\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addSeries(CandlestickSeries, {\n    upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false,\n    wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR,\n});\ncandlestickSeries.setData([\n    { time: '2018-12-22', open: 75.16, high: 82.84, low: 36.16, close: 45.72 },\n    { time: '2018-12-23', open: 45.12, high: 53.90, low: 45.12, close: 48.09 },\n    { time: '2018-12-24', open: 60.71, high: 60.71, low: 53.39, close: 59.29 },\n    { time: '2018-12-25', open: 68.26, high: 68.26, low: 59.04, close: 60.50 },\n    { time: '2018-12-26', open: 67.71, high: 105.85, low: 66.67, close: 91.04 },\n    { time: '2018-12-27', open: 91.04, high: 121.40, low: 82.70, close: 111.40 },\n    { time: '2018-12-28', open: 111.51, high: 142.83, low: 103.34, close: 131.25 },\n    { time: '2018-12-29', open: 131.33, high: 151.17, low: 77.68, close: 96.43 },\n    { time: '2018-12-30', open: 106.33, high: 110.20, low: 90.39, close: 98.10 },\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Histogram Series in Lightweight Charts\nDESCRIPTION: This snippet illustrates how to create a chart with a histogram series, set its color, and populate it with data. It also demonstrates how to set custom colors for individual data points and fit the content to the visible range.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/series-types.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst histogramSeries = chart.addHistogramSeries({ color: HISTOGRAM_COLOR });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922, color: 'red' }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722, color: 'red' }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922, color: 'red' }];\n\nhistogramSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Customizing Area Series in Lightweight Charts\nDESCRIPTION: Demonstrates how to create and customize an area series when adding it to a chart. The example shows setting custom top and bottom colors for the area series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/series-types.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// change default top & bottom colors of an area series in creating time\nconst series = chart.addAreaSeries({\n    topColor: 'red',\n    bottomColor: 'green',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tracking Mode Without Long-Press on Mobile in JavaScript\nDESCRIPTION: This example shows how to create a tracking mode that works without requiring long-press on mobile devices. It disables scrolling and scaling while using the setCrosshairPosition API to update the crosshair based on touch/mouse movements.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/set-crosshair-position.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntrackingCode\n```\n\n----------------------------------------\n\nTITLE: Defining Props for Vue.js Chart Component\nDESCRIPTION: This snippet demonstrates how to define properties for a Vue.js chart component, allowing customization of chart type, data, and various options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/vuejs/01-wrapper.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n    import { defineProps } from 'vue';\n\n    const props = defineProps({\n        type: {\n            type: String,\n            default: 'line',\n        },\n        data: {\n            type: Array,\n            required: true,\n        },\n        chartOptions: {\n            type: Object,\n        },\n        seriesOptions: {\n            type: Object,\n        },\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Area Series with Custom Options\nDESCRIPTION: Shows how to add an area series to the chart with specific styling options including gradient colors and visibility settings. The series is added before the candlestick series to ensure proper layering.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/second-series.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst areaSeries = chart.addSeries(AreaSeries, {\n    lastValueVisible: false,\n    crosshairMarkerVisible: false,\n    lineColor: 'transparent',\n    topColor: 'rgba(56, 33, 110,0.6)',\n    bottomColor: 'rgba(56, 33, 110, 0.1)',\n});\nareaSeries.setData(lineData);\n\nconst mainSeries = chart.addSeries(CandlestickSeries);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Options Chart with Price-based Data\nDESCRIPTION: Complete example of creating an options chart with a numeric horizontal scale representing price instead of time. The example generates synthetic sine wave data to demonstrate the price-based visualization.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/chart-types.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = {\n    layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } },\n};\n\nconst chart = createOptionsChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addSeries(LineSeries, { color: LINE_LINE_COLOR });\n\nconst data = [];\nfor (let i = 0; i < 1000; i++) {\n    data.push({\n        time: i * 0.25,\n        value: Math.sin(i / 100) + i / 500,\n    });\n}\n\nlineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating Different Series Types in JavaScript\nDESCRIPTION: Demonstrates how to create various types of series (Area, Bar, Baseline, etc.) using the chart instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/intro.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addAreaSeries();\nconst barSeries = chart.addBarSeries();\nconst baselineSeries = chart.addBaselineSeries();\n// ... and so on\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Specific Time Zone in JavaScript\nDESCRIPTION: This function converts a given timestamp to a specified time zone using the Date object and toLocaleString method. It's a simple approach for adjusting times to different time zones.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/time-zones.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = new Date(new Date(originalTime * 1000).toLocaleString('en-US', { timeZone }));\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Switcher with Lightweight Charts\nDESCRIPTION: Demonstrates how to create a range switcher functionality that allows users to switch between different time intervals (1D, 1W, 1M, 1Y) in a chart. The code handles data preparation, chart initialization, and interval switching through UI buttons.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/demos/range-switcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{code}\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Chart\nDESCRIPTION: Example showing how to create a histogram chart with custom colors and time series data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/series-types.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst histogramSeries = chart.addHistogramSeries({ color: HISTOGRAM_COLOR });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922, color: 'red' }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722, color: 'red' }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922, color: 'red' }];\n\nhistogramSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing Bar Chart with OHLC Data\nDESCRIPTION: Example of creating a bar chart with Open-High-Low-Close (OHLC) data and custom up/down colors.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/series-types.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst barSeries = chart.addBarSeries({ upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\nbarSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Resetting Time Scale in TradingView Chart\nDESCRIPTION: Example of how to reset the time scale using the chart's timeScale API method\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/time-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.timeScale().resetTimeScale();\n```\n\n----------------------------------------\n\nTITLE: Importing TradingView Chart Components in Vue.js\nDESCRIPTION: Code showing import statements for loading Vue components and assets using file-loader and raw-loader. Demonstrates module importing patterns for Vue.js components.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/vuejs/01-wrapper.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport CodeBlock from '@theme/CodeBlock';\nimport InstantDetails from '@site/src/components/InstantDetails';\nimport compositionCode from '!!raw-loader!./assets/composition-api.vue';\nimport optionsCode from '!!raw-loader!./assets/options-api.vue';\nimport appCode from '!!raw-loader!./assets/app.vue';\n```\n\n----------------------------------------\n\nTITLE: Creating Baseline Chart\nDESCRIPTION: Example showing how to create a baseline chart with custom colors and baseline value.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/series-types.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst baselineSeries = chart.addBaselineSeries({ baseValue: { type: 'price', price: 25 }, topLineColor: BASELINE_TOP_LINE_COLOR, topFillColor1: BASELINE_TOP_FILL_COLOR1, topFillColor2: BASELINE_TOP_FILL_COLOR2, bottomLineColor: BASELINE_BOTTOM_LINE_COLOR, bottomFillColor1: BASELINE_BOTTOM_FILL_COLOR1, bottomFillColor2: BASELINE_BOTTOM_FILL_COLOR2 });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nbaselineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Creating an Options Chart (Price-based) in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an options chart using the createOptionsChart function. It's designed for visualizing data with price as the primary x-axis metric, such as option chains or price distributions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/chart-types.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createOptionsChart } from 'lightweight-charts';\n\nconst chart = createOptionsChart(document.getElementById('container'), options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Lightweight Charts in Android\nDESCRIPTION: This snippet shows how to set up the Gradle configuration to include the Lightweight Charts library in an Android project. It includes repository setup and dependency declaration.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/android.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    //...\n    implementation 'com.tradingview:lightweightcharts:3.8.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ChartsView to Android Layout\nDESCRIPTION: This XML snippet demonstrates how to add the ChartsView component to an Android layout file. It uses ConstraintLayout to position the chart view to fill the parent container.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/android.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <com.tradingview.lightweightcharts.view.ChartsView\n            android:id=\"@+id/charts_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"0dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n----------------------------------------\n\nTITLE: Creating Area Series with Custom Colors\nDESCRIPTION: Demonstrates how to create and customize an area series chart with specified top and bottom colors during initialization.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/series-types.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = chart.addAreaSeries({\n    topColor: 'red',\n    bottomColor: 'green',\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Time using date-fns-tz Library\nDESCRIPTION: A function that converts UTC timestamps to a specified timezone using the date-fns-tz library. Requires the date-fns-tz package as a dependency.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/time-zones.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utcToZonedTime } from 'date-fns-tz';\n\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = utcToZonedTime(new Date(originalTime * 1000), timeZone);\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Times to a Specific Time Zone Using Date API\nDESCRIPTION: A JavaScript function that converts UTC timestamps to a specified time zone using the Date and toLocaleString APIs. This approach can be used to adjust the time of data points for display in any desired time zone.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/time-zones.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// you could use this function to convert all your times to required time zone\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = new Date(new Date(originalTime * 1000).toLocaleString('en-US', { timeZone }));\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart Series in TradingView Lightweight Charts\nDESCRIPTION: Shows implementation of a bar chart series with OHLC (Open, High, Low, Close) data. Each bar represents price movements with vertical bars and tick marks for open/close values.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/series-types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst barSeries = chart.addSeries(BarSeries, { upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR });\n\nconst data = [\n  { open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 },\n  { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 },\n  { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 },\n  { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 },\n  { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 },\n  { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 },\n  { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 },\n  { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 },\n  { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 },\n  { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 },\n  { open: 10.96, high: 11.90, low: 10.80, close: 11.50, time: 1643291876 },\n  { open: 11.50, high: 12.00, low: 11.30, close: 11.80, time: 1643378276 },\n  { open: 11.80, high: 12.20, low: 11.70, close: 12.00, time: 1643464676 },\n  { open: 12.00, high: 12.50, low: 11.90, close: 12.30, time: 1643551076 },\n  { open: 12.30, high: 12.80, low: 12.10, close: 12.60, time: 1643637476 },\n  { open: 12.60, high: 13.00, low: 12.50, close: 12.90, time: 1643723876 },\n  { open: 12.90, high: 13.50, low: 12.70, close: 13.20, time: 1643810276 },\n  { open: 13.20, high: 13.70, low: 13.00, close: 13.50, time: 1643896676 },\n  { open: 13.50, high: 14.00, low: 13.30, close: 13.80, time: 1643983076 },\n  { open: 13.80, high: 14.20, low: 13.60, close: 14.00, time: 1644069476 },\n];\n\nbarSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Updating Chart Data in Real-time\nDESCRIPTION: Example demonstrating how to update existing data points and add new data points to area and candlestick series\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/intro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AreaSeries, CandlestickSeries, createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addSeries(AreaSeries);\nareaSeries.setData([\n    // Other data items\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addSeries(CandlestickSeries);\ncandlestickSeries.setData([\n    // Other data items\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\n// ...\n\n// Update the most recent bar\nareaSeries.update({ time: '2018-12-31', value: 25 });\ncandlestickSeries.update({ time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 112 });\n\n// Creating the new bar\nareaSeries.update({ time: '2019-01-01', value: 20 });\ncandlestickSeries.update({ time: '2019-01-01', open: 112, high: 112, low: 100, close: 101 });\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Charts\nDESCRIPTION: Example showing how to import the library and create multiple chart instances using createChart function.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/intro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\n// ...\nconst firstChart = createChart(document.getElementById('firstContainer'));\nconst secondChart = createChart(document.getElementById('secondContainer'));\n```\n\n----------------------------------------\n\nTITLE: Converting Times Using date-fns-tz Library\nDESCRIPTION: A JavaScript function that uses the date-fns-tz library to convert UTC timestamps to a specified time zone. This approach is slightly faster than the pure Date API solution but requires an additional dependency.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/time-zones.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utcToZonedTime } from 'date-fns-tz';\n\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = utcToZonedTime(new Date(originalTime * 1000), timeZone);\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ICustomSeriesPaneView Interface for Custom Series in TypeScript\nDESCRIPTION: This code snippet outlines the structure of a custom series implementation using the ICustomSeriesPaneView interface. It includes placeholders for required methods and properties such as renderer, update, priceValueBuilder, isWhitespace, defaultOptions, and destroy.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/custom_series.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomSeries implements ICustomSeriesPaneView {\n  renderer(): ICustomSeriesPaneRenderer {\n    // Implementation for renderer\n  }\n\n  update(data: PaneRendererCustomData, seriesOptions: SeriesOptionsInternal): void {\n    // Implementation for update\n  }\n\n  priceValueBuilder(item: CustomData): number[] {\n    // Implementation for priceValueBuilder\n  }\n\n  isWhitespace(data: CustomData): boolean {\n    // Implementation for isWhitespace\n  }\n\n  defaultOptions(): SeriesOptionsMap {\n    // Implementation for defaultOptions\n  }\n\n  destroy(): void {\n    // Implementation for destroy\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with CDN/Standalone Version\nDESCRIPTION: Example of using the standalone version of lightweight-charts via CDN, which creates a global LightweightCharts object to create a basic line chart with time-series data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(document.body, { width: 400, height: 300 });\nconst lineSeries = chart.addSeries(LightweightCharts.LineSeries);\nlineSeries.setData([\n    { time: '2019-04-11', value: 80.01 },\n    { time: '2019-04-12', value: 96.63 },\n    { time: '2019-04-13', value: 76.64 },\n    { time: '2019-04-14', value: 81.89 },\n    { time: '2019-04-15', value: 74.43 },\n    { time: '2019-04-16', value: 80.01 },\n    { time: '2019-04-17', value: 96.63 },\n    { time: '2019-04-18', value: 76.64 },\n    { time: '2019-04-19', value: 81.89 },\n    { time: '2019-04-20', value: 74.43 },\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Horizontal Price Scale - JavaScript Example\nDESCRIPTION: Example demonstrating horizontal price scale customization using createChartEx function and implementing IHorzScaleBehavior interface. This allows displaying price values on the horizontal scale instead of time-based values.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/release-notes.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateChartEx({\n  // Implementation required for IHorzScaleBehavior interface\n  // This is referenced in the test case: horizontal-price-scale.js\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Options in Kotlin\nDESCRIPTION: Kotlin code for configuring chart layout options including background color, text color, and localization settings.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/android.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncharts_view.api.applyOptions {\n    layout = layoutOptions {\n        background = SolidColor(Color.LTGRAY)\n        textColor = Color.BLACK.toIntColor()\n    }\n    localization = localizationOptions {\n        locale = \"ru-RU\"\n        priceFormatter = PriceFormatter(template = \"{price:#2:#3}$\")\n        timeFormatter = TimeFormatter(\n            locale = \"ru-RU\",\n            dateTimeFormat = DateTimeFormat.DATE_TIME\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Populating an Options Chart in JavaScript\nDESCRIPTION: This code creates an options chart, sets chart options, adds a line series, and populates it with price-based data. It demonstrates how to customize and use a chart with a price-based horizontal scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/chart-types.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = {\n    layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } },\n};\n\nconst chart = createOptionsChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addSeries(LineSeries, { color: LINE_LINE_COLOR });\n\nconst data = [];\nfor (let i = 0; i < 1000; i++) {\n    data.push({\n        time: i * 0.25,\n        value: Math.sin(i / 100) + i / 500,\n    });\n}\n\nlineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts iOS with Swift Package Manager\nDESCRIPTION: Shows how to add the Lightweight Charts library as a dependency in your Swift Package's Package.swift file using Swift Package Manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/ios.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    .package(url: \"https://github.com/tradingview/LightweightChartsIOS\", .upToNextMajor(from: \"4.0.0\"))\n]\n```\n\n----------------------------------------\n\nTITLE: Hiding Default Price Scales in Lightweight Charts\nDESCRIPTION: This code reference shows how to hide the default left and right price scales by setting the visible option to false. It's noted that these default scales cannot be removed, only hidden.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/price-scale.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`visible`](/api/interfaces/PriceScaleOptions.md#visible)\n```\n\n----------------------------------------\n\nTITLE: Drawing with Bitmap Coordinate Space in Canvas Rendering Target\nDESCRIPTION: Example of using the useBitmapCoordinateSpace method to draw a filled rectangle that covers the entire canvas. This uses bitmap dimensions which represent the actual physical pixels on the device's screen, allowing for crisp, pixel-perfect drawing.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/canvas-rendering-target.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// target is an instance of CanvasRenderingTarget2D\ntarget.useBitmapCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.bitmapSize.width, scope.bitmapSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Candlestick Series in Lightweight Charts\nDESCRIPTION: This code demonstrates how to create a chart with a candlestick series, customize its appearance, and populate it with OHLC (Open, High, Low, Close) data. It also fits the content to the visible range.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/series-types.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst candlestickSeries = chart.addCandlestickSeries({ upColor: BAR_UP_COLOR, downColor: BAR_DOWN_COLOR, borderVisible: false, wickUpColor: BAR_UP_COLOR, wickDownColor: BAR_DOWN_COLOR });\n\nconst data = [{ open: 10, high: 10.63, low: 9.49, close: 9.55, time: 1642427876 }, { open: 9.55, high: 10.30, low: 9.42, close: 9.94, time: 1642514276 }, { open: 9.94, high: 10.17, low: 9.92, close: 9.78, time: 1642600676 }, { open: 9.78, high: 10.59, low: 9.18, close: 9.51, time: 1642687076 }, { open: 9.51, high: 10.46, low: 9.10, close: 10.17, time: 1642773476 }, { open: 10.17, high: 10.96, low: 10.16, close: 10.47, time: 1642859876 }, { open: 10.47, high: 11.39, low: 10.40, close: 10.81, time: 1642946276 }, { open: 10.81, high: 11.60, low: 10.30, close: 10.75, time: 1643032676 }, { open: 10.75, high: 11.60, low: 10.49, close: 10.93, time: 1643119076 }, { open: 10.93, high: 11.53, low: 10.76, close: 10.96, time: 1643205476 }];\n\ncandlestickSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Updating Data in Lightweight Charts Series\nDESCRIPTION: Shows how to update existing data points and add new ones using the update method for both Area and Candlestick series. This method is more efficient for real-time updates than setData.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/intro.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addAreaSeries();\nareaSeries.setData([\n    // ... other data items\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addCandlestickSeries();\ncandlestickSeries.setData([\n    // ... other data items\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\n// sometime later\n\n// update the most recent bar\nareaSeries.update({ time: '2018-12-31', value: 25 });\ncandlestickSeries.update({ time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 112 });\n\n// creating the new bar\nareaSeries.update({ time: '2019-01-01', value: 20 });\ncandlestickSeries.update({ time: '2019-01-01', open: 112, high: 112, low: 100, close: 101 });\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Instance in Vue.js Component\nDESCRIPTION: This snippet shows how to create a chart instance within a Vue.js component using the onMounted lifecycle hook. It also demonstrates proper cleanup in the onUnmounted hook.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/vuejs/01-wrapper.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n    import { onMounted, ref } from 'vue';\n    import { createChart } from 'lightweight-charts';\n\n    let chart;\n    const chartContainer = ref();\n\n    onMounted(() => {\n        // Create the Lightweight Charts Instance using the container ref.\n        chart = createChart(chartContainer.value);\n    });\n\n    onUnmounted(() => {\n        if (chart) {\n            chart.remove();\n            chart = null;\n        }\n    });\n</script>\n<template>\n    <div class=\"lw-chart\" ref=\"chartContainer\"></div>\n</template>\n<style scoped>\n    .lw-chart {\n        height: 100%;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Accessing Price Scale API in Lightweight Charts\nDESCRIPTION: These code snippets demonstrate how to access and modify price scales using the Lightweight Charts API. They show methods for changing left, right, and overlay price scales, as well as retrieving API objects for specific scales.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/price-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`leftPriceScale`](/api/interfaces/ChartOptions.md#leftpricescale)\n[`rightPriceScale`](/api/interfaces/ChartOptions.md#rightpricescale)\n[`overlayPriceScales`](/api/interfaces/ChartOptions.md#overlaypricescales)\n[`IChartApi.priceScale`](/api/interfaces/IChartApi.md#pricescale)\n[`ISeriesApi.priceScale`](/api/interfaces/ISeriesApi.md#pricescale)\n```\n\n----------------------------------------\n\nTITLE: Illustrating zOrder Layers in Lightweight Charts\nDESCRIPTION: This interactive demo illustrates where each zOrder is drawn relative to existing chart elements such as the grid, series, and crosshair. It helps visualize the stacking order of different primitive elements.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/series-primitives.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{layersExplainerCode}\n```\n\n----------------------------------------\n\nTITLE: Assigning Series to Left Price Scale\nDESCRIPTION: Configures a candlestick series to use the left price scale by setting the priceScaleId property. By default, series use the right scale if not specified.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/two-price-scales.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst leftSeries = chart.addSeries(CandlestickSeries, {\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lightweight Charts in Kotlin for Android\nDESCRIPTION: This Kotlin code configures the chart layout, including background color, text color, localization options, and formatting for price and time. It also demonstrates how to add a histogram series and set data for it.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/android.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncharts_view.api.applyOptions {\n    layout = layoutOptions {\n        background = SolidColor(Color.LTGRAY)\n        textColor = Color.BLACK.toIntColor()\n    }\n    localization = localizationOptions {\n        locale = \"ru-RU\"\n        priceFormatter = PriceFormatter(template = \"{price:#2:#3}$\")\n        timeFormatter = TimeFormatter(\n            locale = \"ru-RU\",\n            dateTimeFormat = DateTimeFormat.DATE_TIME\n        )\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlateinit var histogramSeries: SeriesApi\ncharts_view.api.addHistogramSeries(\n    onSeriesCreated = { series ->\n        histogramSeries = series\n    }\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = listOf(\n    HistogramData(Time.BusinessDay(2019, 6, 11), 40.01f),\n    HistogramData(Time.BusinessDay(2019, 6, 12), 52.38f),\n    HistogramData(Time.BusinessDay(2019, 6, 13), 36.30f),\n    HistogramData(Time.BusinessDay(2019, 6, 14), 34.48f),\n    WhitespaceData(Time.BusinessDay(2019, 6, 15)),\n    WhitespaceData(Time.BusinessDay(2019, 6, 16)),\n    HistogramData(Time.BusinessDay(2019, 6, 17), 41.50f),\n    HistogramData(Time.BusinessDay(2019, 6, 18), 34.82f)\n)\nhistogramSeries.setData(data)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Double Click Events in Lightweight Charts (JavaScript)\nDESCRIPTION: Example of subscribing to double click events on the main chart pane using the subscribeDblClick method in Lightweight Charts.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart.subscribeDblClick(handler);\n```\n\n----------------------------------------\n\nTITLE: Using ES Modules with Lightweight Charts v5\nDESCRIPTION: Demonstrates how to use ES Modules with Lightweight Charts v5, including importing specific series types and creating a chart with a line series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v4-to-v5.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart, LineSeries } from 'lightweight-charts';\n\nconst chart = createChart(container, {});\nconst lineSeries = chart.addSeries(LineSeries, { color: 'red' });\n```\n\n----------------------------------------\n\nTITLE: Handling Time Values in Lightweight Charts v4 Event Subscriptions\nDESCRIPTION: Shows how to handle time values in event subscriptions, which now return the exact input format for consistency across the API.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v3-to-v4.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nseries.setData([\n    { time: '2001-01-01', value: 1 },\n]);\n\nchart.applyOptions({\n    localization: {\n        timeFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n    timeScale: {\n        tickMarkFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n});\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.time); // will be '2001-01-01' if you hover the bar above\n});\n\nchart.subscribeClick(param => {\n    console.log(param.time); // will be '2001-01-01' if you click on the bar above\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Line Chart with Lightweight Charts API\nDESCRIPTION: Demonstrates how to create a basic line chart using the Lightweight Charts library. The example shows initialization of the chart with custom options, creating a line series, setting data points with time and value coordinates, and fitting the content to the time scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/series-types.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst lineSeries = chart.addLineSeries({ color: LINE_LINE_COLOR });\n\nconst data = [{ value: 0, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nlineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Updating Series Data in JavaScript\nDESCRIPTION: Shows how to update existing data points and add new ones to Area and Candlestick series. This method is more efficient for real-time updates compared to setting all data again.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/intro.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\nconst chart = createChart(container);\n\nconst areaSeries = chart.addAreaSeries();\nareaSeries.setData([\n    // ... other data items\n    { time: '2018-12-31', value: 22.67 },\n]);\n\nconst candlestickSeries = chart.addCandlestickSeries();\ncandlestickSeries.setData([\n    // ... other data items\n    { time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 111.26 },\n]);\n\n// sometime later\n\n// update the most recent bar\nareaSeries.update({ time: '2018-12-31', value: 25 });\ncandlestickSeries.update({ time: '2018-12-31', open: 109.87, high: 114.69, low: 85.66, close: 112 });\n\n// creating the new bar\nareaSeries.update({ time: '2019-01-01', value: 20 });\ncandlestickSeries.update({ time: '2019-01-01', open: 112, high: 112, low: 100, close: 101 });\n```\n\n----------------------------------------\n\nTITLE: Updating Candlestick Series Options in Lightweight Charts\nDESCRIPTION: Shows how to update the options of an existing candlestick series using the applyOptions method. The example updates the up and down colors of the candlesticks.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/series-types.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// updating candlestick series options on the fly\ncandlestickSeries.applyOptions({\n    upColor: 'red',\n    downColor: 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Drawing Primitives to Existing Series in Lightweight Charts\nDESCRIPTION: Shows how to create and attach a custom drawing primitive to an existing series in a Lightweight Charts instance. It demonstrates the process of implementing a custom primitive class and attaching it to a line series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomPrimitive {\n    /* Class implementing the ISeriesPrimitive interface */\n}\n\n// Create an instantiated series primitive.\nconst myCustomPrimitive = new MyCustomPrimitive();\n\nconst chart = createChart(document.getElementById('container'));\nconst lineSeries = chart.addLineSeries();\n\nconst data = [\n    { time: 1642425322, value: 123 },\n    /* ... more data */\n];\n\n// Attach the primitive to the series\nlineSeries.attachPrimitive(myCustomPrimitive);\n```\n\n----------------------------------------\n\nTITLE: Fitting Content in TradingView Charts Time Scale (JavaScript)\nDESCRIPTION: Demonstrates how to adjust the chart view to fit all data points within the visible area using the fitContent method.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/time-scale.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Fitting Content to Chart View\nDESCRIPTION: Demonstrates how to adjust the chart view to fit all data points within the visible area\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/time-scale.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Disabling Crosshair in Lightweight Charts (JavaScript)\nDESCRIPTION: Example of disabling the crosshair by setting the CrosshairMode to Hidden in Lightweight Charts.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart.applyOptions({\n  crosshair: {\n    mode: CrosshairMode.Hidden,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Inverted Price Scale in TradingView Charts\nDESCRIPTION: Shows how to invert a price scale by setting the invertScale property. This can be done either through the chart's rightPriceScale options or directly on a specific price scale instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/inverted-price-scale.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.applyOptions({\n    rightPriceScale: {\n        invertScale: true,\n    },\n});\n\n// or (for a specific price scale)\nconst priceScale = chart.priceScale();\npriceScale.applyOptions({\n    invertScale: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Solid Background Color in Lightweight Charts v4\nDESCRIPTION: Shows how to set a solid background color for a chart in Lightweight Charts v4, using the new background property instead of the deprecated backgroundColor option.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    layout: {\n        background: {\n            type: ColorType.Solid,\n            color: 'red',\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Time Values in Lightweight Charts v4 Events\nDESCRIPTION: Shows how to handle time values in event callbacks, which now return the exact input format (timestamp, business day object, or ISO string) in v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v3-to-v4.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nseries.setData([\n    { time: '2001-01-01', value: 1 },\n]);\n\nchart.applyOptions({\n    localization: {\n        timeFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n    timeScale: {\n        tickMarkFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n});\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.time); // will be '2001-01-01' if you hover the bar above\n});\n\nchart.subscribeClick(param => {\n    console.log(param.time); // will be '2001-01-01' if you click on the bar above\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with ES6 Imports\nDESCRIPTION: Example of importing and using the lightweight-charts library with ES6 modules to create a basic line chart with time-series data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart, LineSeries } from 'lightweight-charts';\n\nconst chart = createChart(document.body, { width: 400, height: 300 });\nconst lineSeries = chart.addSeries(LineSeries);\nlineSeries.setData([\n    { time: '2019-04-11', value: 80.01 },\n    { time: '2019-04-12', value: 96.63 },\n    { time: '2019-04-13', value: 76.64 },\n    { time: '2019-04-14', value: 81.89 },\n    { time: '2019-04-15', value: 74.43 },\n    { time: '2019-04-16', value: 80.01 },\n    { time: '2019-04-17', value: 96.63 },\n    { time: '2019-04-18', value: 76.64 },\n    { time: '2019-04-19', value: 81.89 },\n    { time: '2019-04-20', value: 74.43 },\n]);\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Specific Time Zone using date-fns-tz Library\nDESCRIPTION: This function uses the date-fns-tz library to convert a UTC timestamp to a specified time zone. It may offer better performance than the Date API solution but requires an additional dependency.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/time-zones.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utcToZonedTime } from 'date-fns-tz';\n\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = utcToZonedTime(new Date(originalTime * 1000), timeZone);\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Price Scale API in Lightweight Charts\nDESCRIPTION: These code snippets demonstrate how to access and modify price scales using the Lightweight Charts API. They show methods for getting price scale objects for both the chart and individual series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/price-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`leftPriceScale`](/api/interfaces/ChartOptionsBase.md#leftpricescale)\n[`rightPriceScale`](/api/interfaces/ChartOptionsBase.md#rightpricescale)\n[`overlayPriceScales`](/api/interfaces/ChartOptionsBase.md#overlaypricescales)\n[`IChartApi.priceScale`](/api/interfaces/IChartApi.md#pricescale)\n[`ISeriesApi.priceScale`](/api/interfaces/ISeriesApi.md#pricescale)\n```\n\n----------------------------------------\n\nTITLE: Customizing Area Series in Lightweight Charts\nDESCRIPTION: This snippet demonstrates how to create and customize an area series when adding it to a chart. It sets the top and bottom colors of the area.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/series-types.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = chart.addAreaSeries({\n    topColor: 'red',\n    bottomColor: 'green',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Horizontal Scale Chart in JavaScript\nDESCRIPTION: This snippet shows how to create a chart with custom horizontal scale behavior using the createChartEx function. It allows for advanced customization of the horizontal scale for specialized charting needs.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/chart-types.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChartEx, defaultHorzScaleBehavior } from 'lightweight-charts';\n\nconst customBehavior = new (defaultHorzScaleBehavior())();\n// Customize the behavior as needed\n\nconst chart = createChartEx(document.getElementById('container'), customBehavior, options);\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Price Scale in Lightweight Charts\nDESCRIPTION: This snippet shows how to create an overlay price scale by assigning a priceScaleId to a series. It explains that the chart will automatically create a new scale if the ID doesn't exist, or use an existing one if it does.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/price-scale.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`priceScaleId`](/api/interfaces/SeriesOptionsCommon.md#pricescaleid)\n```\n\n----------------------------------------\n\nTITLE: Getting Data Point Position\nDESCRIPTION: Shows how to convert a price value to its vertical position on the chart using priceToCoordinate method, useful for precise tooltip positioning.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/tooltips.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.subscribeCrosshairMove(param => {\n    const x = param.point.x;\n    const data = param.seriesData.get(series);\n    const price = data.value !== undefined ? data.value : data.close;\n    const y = series.priceToCoordinate(price);\n    console.log(`The data point is at position: ${x}, ${y}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Media Coordinate Space Usage in Canvas Rendering\nDESCRIPTION: Shows how to use useMediaCoordinateSpace to draw using media dimensions as coordinate sizing. Demonstrates drawing a filled rectangle that fills the entire canvas using media dimensions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/canvas-rendering-target.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// target is an instance of CanvasRenderingTarget2D\ntarget.useMediaCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Scale Visibility\nDESCRIPTION: Sets the visibility of both left and right price scales on the chart using chart options. Both scales are set to be visible through the rightPriceScale and leftPriceScale configuration options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/two-price-scales.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.applyOptions({\n    rightPriceScale: {\n        visible: true,\n    },\n    leftPriceScale: {\n        visible: true,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Drawing Primitives to Empty Chart Series\nDESCRIPTION: Demonstrates how to attach a drawing primitive to an empty series when you need the primitive to persist independently of other series data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n// Create an instantiated series primitive.\nconst myCustomPrimitive = new MyCustomPrimitive();\n\nconst chart = createChart(document.getElementById('container'));\n\n// an empty series which won't ever have data\nconst chartSeries = chart.addLineSeries();\nchartSeries.attachPrimitive(myCustomPrimitive);\n```\n\n----------------------------------------\n\nTITLE: Migrating scaleMargins from Series Options to PriceScale\nDESCRIPTION: Shows how to migrate from the removed scaleMargins option in series configuration to applying it directly to the price scale instead.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v3-to-v4.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = chart.addLineSeries({\n    scaleMargins: { /* options here */},\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = chart.addLineSeries();\n\nseries.priceScale().applyOptions({\n    scaleMargins: { /* options here */},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Lightweight Charts Instance\nDESCRIPTION: Code to initialize a Lightweight Charts instance and add it to the view hierarchy.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/ios.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar chart: LightweightCharts!\n\n// ...\nchart = LightweightCharts()\nview.addSubview(chart)\n// ... setup layout\n```\n\n----------------------------------------\n\nTITLE: Creating Series Markers in JavaScript using Lightweight Charts\nDESCRIPTION: This code demonstrates how to add markers to a chart series. The marker is positioned above a specific data point, has a custom color, shape, and text label. The markers help annotate important events within the chart data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/series-markers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst markers = [\n    {\n        time: { year: 2018, month: 12, day: 23 },\n        position: 'aboveBar',\n        color: '#f68410',\n        shape: 'circle',\n        text: 'A',\n    },\n];\ncreateSeriesMarkers(series, markers);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Horizontal Scale Chart in Lightweight Charts\nDESCRIPTION: Code to create a chart with custom horizontal scale behavior using the createChartEx function. This approach allows for specialized charting needs with non-standard horizontal scales by defining custom scale behavior.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/chart-types.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChartEx, defaultHorzScaleBehavior } from 'lightweight-charts';\n\nconst customBehavior = new (defaultHorzScaleBehavior())();\n// Customize the behavior as needed\n\nconst chart = createChartEx(document.getElementById('container'), customBehavior, options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Series Scale Margins\nDESCRIPTION: Shows how to position the volume series overlay by configuring scale margins to place it in the bottom 30% of the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/price-and-volume.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvolumeSeries.priceScale().applyOptions({\n    scaleMargins: {\n        top: 0.7, // highest point of the series will be 70% away from the top\n        bottom: 0, // lowest point will be at the very bottom.\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Lightweight Chart Instance in Custom Element\nDESCRIPTION: This code shows how to create a Lightweight Charts instance within the custom element using the createChart function.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n    // Create the div container for the chart\n    const container = document.createElement('div');\n    container.setAttribute('class', 'chart-container');\n\n    // create the stylesheet for the custom element\n    const style = document.createElement('style');\n    style.textContent = elementStyles;\n    this.shadowRoot.append(style, container);\n\n    // Create the Lightweight Chart\n    this.chart = createChart(container);\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Crosshair Move Events for Legend Updates in Lightweight Charts\nDESCRIPTION: This snippet demonstrates how to subscribe to crosshairMove events from a chart instance and update an HTML legend element with formatted price data when the user hovers over the chart. It extracts the price value from the data point and formats it to display in the legend.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/legends.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.subscribeCrosshairMove(param => {\n    let priceFormatted = '';\n    if (param.time) {\n        const dataPoint = param.seriesData.get(areaSeries);\n        const price = data.value !== undefined ? data.value : data.close;\n        priceFormatted = price.toFixed(2);\n    }\n    // legend is a html element which has already been created\n    legend.innerHTML = `${symbolName} <strong>${priceFormatted}</strong>`;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Background and Text Colors in Lightweight Charts\nDESCRIPTION: JavaScript code for setting the chart's background color, text color, and grid line colors during chart creation. This demonstrates applying options during instance initialization.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/chart-colors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst chart = LightweightCharts.createChart(\n    document.getElementById('container'),\n    {\n        layout: {\n            background: { color: '#222' },\n            textColor: '#DDD',\n        },\n        grid: {\n            vertLines: { color: '#444' },\n            horzLines: { color: '#444' },\n        },\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Attaching Pane Primitive to Chart\nDESCRIPTION: Example showing how to create a chart and attach a custom pane primitive to its main pane. The primitive is added using the attachPrimitive method from the IPaneApi interface.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/pane-primitives.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart(document.getElementById('container'));\nconst pane = chart.panes()[0]; // Get the first (main) pane\n\nconst myPanePrimitive = new MyCustomPanePrimitive();\npane.attachPrimitive(myPanePrimitive);\n```\n\n----------------------------------------\n\nTITLE: Chart Description Generator\nDESCRIPTION: Comprehensive JavaScript functions for generating detailed chart descriptions including price changes and key data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/screenreader.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction formatDate(time) {\n    return new Date(time * 1000).toDateString();\n}\n\nfunction formatValue(value) {\n    return `${value < 0 ? '-' : ''}$${Math.abs(value).toFixed(2)}`;\n}\n\nfunction getStats(data) {\n    const stats = {\n        start: data[0],\n        close: data[data.length - 1],\n        low: data[0],\n        high: data[0],\n    };\n\n    for (const point of data) {\n        if (point.value > stats.high.value) {\n            stats.high = point;\n        }\n        if (point.value < stats.low.value) {\n            stats.low = point;\n        }\n    }\n\n    return stats;\n}\n\nfunction getVisibleSeriesData(chart, series) {\n    const timeScale = chart.timeScale();\n    const visibleRange = timeScale.getVisibleLogicalRange();\n    const data = [];\n    for (let i = Math.round(visibleRange.from); i <= visibleRange.to; i++) {\n        const d = series.dataByIndex(i, 0);\n        if (d !== null) {\n            data.push(d);\n        }\n    }\n    return data;\n}\n\nfunction describeFinanceChart(data) {\n    if (!data || data.length === 0) {\n        return 'The data set is empty.';\n    }\n\n    const stats = getStats(data);\n\n    const firstPrice = `The first price is ${formatValue(\n        stats.start.value\n    )} at ${formatDate(stats.start.time)}.`;\n    const lastPrice = `The last price is ${formatValue(\n        stats.close.value\n    )} at ${formatDate(stats.close.time)}.`;\n\n    const actualChange = stats.close.value - stats.start.value;\n    const percentChange = (actualChange / stats.start.value) * 100;\n\n    const changeDescription = `The actual change in price was ${formatValue(\n        actualChange\n    )}, corresponding to a percentage change of ${percentChange.toFixed(2)}%.`;\n\n    let lowHigh = '';\n    if (\n        stats.low.time !== stats.start.time &&\n        stats.low.time !== stats.close.time\n    ) {\n        lowHigh += `The lowest price was ${formatValue(\n            stats.low.value\n        )} at ${formatDate(stats.low.time)}.`;\n    }\n    if (\n        stats.high.time !== stats.start.time &&\n        stats.high.time !== stats.close.time\n    ) {\n        lowHigh += ` The highest price was ${formatValue(\n            stats.high.value\n        )} at ${formatDate(stats.high.time)}.`;\n    }\n\n    return `${firstPrice} ${lastPrice} ${changeDescription} ${lowHigh}`.trim();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Chart Instance in Lightweight Charts Web Component\nDESCRIPTION: Demonstrates how to access the IChartApi instance from the Lightweight Charts web component and use its methods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Get a reference to an instance of the custom element on the page\nconst myChartElement = document.querySelector('lightweight-chart');\n\nconst chartApi = myChartElement.chart;\n\n// For example, call the `fitContent` method on the time scale\nchartApi.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Options in Kotlin\nDESCRIPTION: Kotlin code to configure chart layout options including background, text color, and localization settings.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/android.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncharts_view.api.applyOptions {\n    layout = layoutOptions {\n        background = SolidColor(Color.LTGRAY)\n        textColor = Color.BLACK.toIntColor()\n    }\n    localization = localizationOptions {\n        locale = \"ru-RU\"\n        priceFormatter = PriceFormatter(template = \"{price:#2:#3}$\")\n        timeFormatter = TimeFormatter(\n            locale = \"ru-RU\",\n            dateTimeFormat = DateTimeFormat.DATE_TIME\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lightweight Charts Library\nDESCRIPTION: Import statement for using Lightweight Charts in Swift code.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/ios.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport LightweightCharts\n```\n\n----------------------------------------\n\nTITLE: Creating Line Series in Lightweight Charts v5\nDESCRIPTION: Example of creating a line series in Lightweight Charts version 5. This snippet shows the new method of adding a line series using the unified addSeries function.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v4-to-v5.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example with Line Series in v5\nimport { createChart, LineSeries } from 'lightweight-charts';\nconst chart = createChart(container, {});\nconst lineSeries = chart.addSeries(LineSeries, { color: 'red' });\n```\n\n----------------------------------------\n\nTITLE: Setting Markers in Lightweight Charts v5\nDESCRIPTION: Shows how to set markers using the new markers primitive in Lightweight Charts version 5. This new method requires importing createSeriesMarkers and creating a separate markers instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v4-to-v5.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the markers primitive\nimport { createSeriesMarkers } from 'lightweight-charts';\n\n// Create a markers primitive instance\nconst seriesMarkers = createSeriesMarkers(series, [\n    {\n        time: '2019-04-09',\n        position: 'aboveBar',\n        color: 'black',\n        shape: 'arrowDown',\n    },\n]);\n\n// Getting markers\nconst markers = seriesMarkers.markers();\n\n// Updating markers\nseriesMarkers.setMarkers([/* new markers */]);\n\n// Remove all markers\nseriesMarkers.setMarkers([]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Series Color Using applyOptions in TradingView Lightweight Charts\nDESCRIPTION: This snippet shows how to set the color property for a line series after creation using the applyOptions method. First, a line series is created with no options, then the color is set to a blue hex value (#2962FF).\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/_apply-options-tabs-partial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lineSeries = chart.addSeries(LineSeries, {\n});\n\nlineSeries.applyOptions({\n    color: '#2962FF',\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Price Scale from Right to Left in JavaScript\nDESCRIPTION: This code demonstrates how to move the price scale from the right side to the left side in version 3 of Lightweight Charts™. It involves changing the visibility of price scales and updating the priceScaleId of the series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    leftPriceScale: {\n        visible: true,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n\nmainSeries.applyOptions({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Final Candlestick Width in TypeScript\nDESCRIPTION: This function calculates the final candlestick width that the library would use, adjusting for wick width parity. It takes bar spacing and horizontal pixel ratio as inputs and returns the width in bitmap coordinates.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/pixel-perfect-rendering/widths/candlestick.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function candlestickWidth(\n    barSpacing: number,\n    horizontalPixelRatio: number\n): number {\n    let width = optimalCandlestickWidth(barSpacing, horizontalPixelRatio);\n    if (width >= 2) {\n        const wickWidth = Math.floor(horizontalPixelRatio);\n        if (wickWidth % 2 !== width % 2) {\n            width--;\n        }\n    }\n    return width;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Border Colors in Lightweight Charts\nDESCRIPTION: JavaScript code that uses the applyOptions method to set the border colors for both the price scale (vertical axis) and time scale (horizontal axis) after chart creation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/chart-colors.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Setting the border color for the vertical axis\nchart.priceScale().applyOptions({\n    borderColor: '#71649C',\n});\n\n// Setting the border color for the horizontal axis\nchart.timeScale().applyOptions({\n    borderColor: '#71649C',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Background Shade Series Plugin\nDESCRIPTION: JavaScript code demonstrating how to import a compiled plugin and add it to a chart as a custom series with configuration options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/plugin-examples/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BackgroundShadeSeries } from '../plugins/background-shade-series/background-shade-series';\n\n// ...\n\nconst backgroundShadeSeriesPlugin = new BackgroundShadeSeries();\nconst myCustomSeries = chart.addCustomSeries(backgroundShadeSeriesPlugin, {\n    lowValue: 0,\n    highValue: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Specific Timezone using Date API\nDESCRIPTION: A function that converts UTC timestamps to a specified timezone using JavaScript's built-in Date API. Takes original time in seconds and timezone string as parameters.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/time-zones.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = new Date(new Date(originalTime * 1000).toLocaleString('en-US', { timeZone }));\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lightweight Charts in Different Environments\nDESCRIPTION: Shows how to import the Lightweight Charts library in both ESM and standalone script environments.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// if using esm version (installed via npm):\n// import { createChart } from 'lightweight-charts';\n\n// If using standalone version (loaded via a script tag):\nconst { createChart } = LightweightCharts;\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Histogram Series in Kotlin\nDESCRIPTION: This Kotlin code shows how to add data to a histogram series using the Lightweight Charts™ Android wrapper. It creates a list of HistogramData and WhitespaceData objects and sets them to the series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/android.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = listOf(\n    HistogramData(Time.BusinessDay(2019, 6, 11), 40.01f),\n    HistogramData(Time.BusinessDay(2019, 6, 12), 52.38f),\n    HistogramData(Time.BusinessDay(2019, 6, 13), 36.30f),\n    HistogramData(Time.BusinessDay(2019, 6, 14), 34.48f),\n    WhitespaceData(Time.BusinessDay(2019, 6, 15)),\n    WhitespaceData(Time.BusinessDay(2019, 6, 16)),\n    HistogramData(Time.BusinessDay(2019, 6, 17), 41.50f),\n    HistogramData(Time.BusinessDay(2019, 6, 18), 34.82f)\n)\nhistogramSeries.setData(data)\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts Dependency in Module Gradle\nDESCRIPTION: Adding the Lightweight Charts library dependency in the module's build.gradle file.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/android.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    //...\n    implementation 'com.tradingview:lightweightcharts:3.8.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Yield Curve Chart in JavaScript\nDESCRIPTION: This snippet shows how to create a yield curve chart using the createYieldCurveChart function. It's designed for displaying yield curves with a linearly spaced horizontal scale defined in monthly time duration units.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/chart-types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createYieldCurveChart } from 'lightweight-charts';\n\nconst chart = createYieldCurveChart(document.getElementById('container'), options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Candlestick Colors with applyOptions\nDESCRIPTION: Demonstrates how to customize candlestick series appearance by setting upward candle colors to light blue and downward candles to vibrant red, while also disabling candle borders. The code shows usage of wickUpColor, upColor, wickDownColor, downColor, and borderVisible options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/series.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmainSeries.setData(candleStickData);\n\n// Changing the Candlestick colors\nmainSeries.applyOptions({\n    wickUpColor: 'rgb(54, 116, 217)',\n    upColor: 'rgb(54, 116, 217)',\n    wickDownColor: 'rgb(225, 50, 85)',\n    downColor: 'rgb(225, 50, 85)',\n    borderVisible: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Time Scale in TradingView Charts (JavaScript)\nDESCRIPTION: Example showing how to reset the time scale to its default state using the chart's timeScale API method.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/time-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.timeScale().resetTimeScale();\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Specific Time Zone using JavaScript Date API\nDESCRIPTION: This function converts a UTC timestamp to a specified time zone using the JavaScript Date API. It's a simple solution but may have performance limitations for large datasets.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/time-zones.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = new Date(new Date(originalTime * 1000).toLocaleString('en-US', { timeZone }));\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Crosshair Move Event Handler for Tooltips\nDESCRIPTION: Demonstrates how to handle crosshair movement events to show/hide and position a tooltip. The code checks mouse position and updates tooltip content with price data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/tooltips.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.subscribeCrosshairMove(param => {\n    if (\n        param.point === undefined ||\n\t\t!param.time ||\n\t\tparam.point.x < 0 ||\n\t\tparam.point.y < 0\n    ) {\n        toolTip.style.display = 'none';\n    } else {\n        const dateStr = dateToString(param.time);\n        toolTip.style.display = 'block';\n        const data = param.seriesData.get(series);\n        const price = data.value !== undefined ? data.value : data.close;\n        toolTip.innerHTML = `<div>${price.toFixed(2)}</div>`;\n\n        // Position tooltip according to mouse cursor position\n        toolTip.style.left = param.point.x + 'px';\n        toolTip.style.top = param.point.y + 'px';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Bar Series to Chart\nDESCRIPTION: Creating and adding a bar series to the Lightweight Charts instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/ios.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar series: BarSeries!\n\n// ...\nseries = chart.addBarSeries(options: nil)\n```\n\n----------------------------------------\n\nTITLE: Converting Time using date-fns-tz Library\nDESCRIPTION: A utility function that converts UTC timestamps to a specified time zone using the date-fns-tz library. Takes original time in seconds and target time zone as parameters.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/time-zones.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utcToZonedTime } from 'date-fns-tz';\n\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = utcToZonedTime(new Date(originalTime * 1000), timeZone);\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Histogram Series to the Chart in Kotlin\nDESCRIPTION: Demonstrates how to add a histogram series to the chart and store a reference to it for later use.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/android.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nlateinit var histogramSeries: SeriesApi\ncharts_view.api.addHistogramSeries(\n    onSeriesCreated = { series ->\n        histogramSeries = series\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Layout in Android XML\nDESCRIPTION: XML layout configuration for adding the ChartsView component to an Android layout using ConstraintLayout.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/android.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <com.tradingview.lightweightcharts.view.ChartsView\n            android:id=\"@+id/charts_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"0dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n----------------------------------------\n\nTITLE: Transforming Candlestick Data for Area Series\nDESCRIPTION: Demonstrates how to convert candlestick data format to the format required for an area series by calculating the midpoint between open and close values.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/second-series.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lineData = candleStickData.map(datapoint => ({\n    time: datapoint.time,\n    value: (datapoint.close + datapoint.open) / 2,\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a Locale-Aware Currency Price Formatter with Intl.NumberFormat\nDESCRIPTION: A more versatile price formatter that uses the browser's Intl.NumberFormat API to format prices according to the user's locale and display them as Euro currency.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/price-format.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Get the current users primary locale\nconst currentLocale = window.navigator.languages[0];\n// Create a number format using Intl.NumberFormat\nconst myPriceFormatter = Intl.NumberFormat(currentLocale, {\n    style: 'currency',\n    currency: 'EUR', // Currency for data points\n}).format;\n```\n\n----------------------------------------\n\nTITLE: Setting Page Background Color with CSS for Lightweight Charts\nDESCRIPTION: CSS code to set the HTML body background color to match the chart's dark theme (using #222). This ensures the chart's background matches the page when not filling the entire space.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/chart-colors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    body {\n        padding: 0;\n        margin: 0;\n        /* highlight-start */\n        /* Add a background color to match the chart */\n        background-color: #222;\n        /* highlight-end */\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Column Width and Position Calculation Functions in TypeScript\nDESCRIPTION: A comprehensive set of functions for calculating histogram column widths and positions. Includes utilities for spacing calculations, column position determination, and width adjustments. Supports both array-based and in-place calculations with optimization for performance through memoization.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/pixel-perfect-rendering/widths/columns.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst alignToMinimalWidthLimit = 4;\nconst showSpacingMinimalBarWidth = 1;\n\n/**\n * Spacing gap between columns.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns Spacing gap between columns (in Bitmap coordinates)\n */\nfunction columnSpacing(barSpacingMedia: number, horizontalPixelRatio: number) {\n    return Math.ceil(barSpacingMedia * horizontalPixelRatio) <=\n        showSpacingMinimalBarWidth\n        ? 0\n        : Math.max(1, Math.floor(horizontalPixelRatio));\n}\n\n/**\n * Desired width for columns. This may not be the final width because\n * it may be adjusted later to ensure all columns on screen have a\n * consistent width and gap.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @param spacing - Spacing gap between columns (in Bitmap coordinates). (optional, provide if you have already calculated it)\n * @returns Desired width for column bars (in Bitmap coordinates)\n */\nfunction desiredColumnWidth(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    spacing?: number\n) {\n    return (\n        Math.round(barSpacingMedia * horizontalPixelRatio) -\n        (spacing ?? columnSpacing(barSpacingMedia, horizontalPixelRatio))\n    );\n}\n\ninterface ColumnCommon {\n    /** Spacing gap between columns */\n    spacing: number;\n    /** Shift columns left by one pixel */\n    shiftLeft: boolean;\n    /** Half width of a column */\n    columnHalfWidthBitmap: number;\n    /** horizontal pixel ratio */\n    horizontalPixelRatio: number;\n}\n\n/**\n * Calculated values which are common to all the columns on the screen, and\n * are required to calculate the individual positions.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns calculated values for subsequent column calculations\n */\nfunction columnCommon(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnCommon {\n    const spacing = columnSpacing(barSpacingMedia, horizontalPixelRatio);\n    const columnWidthBitmap = desiredColumnWidth(\n        barSpacingMedia,\n        horizontalPixelRatio,\n        spacing\n    );\n    const shiftLeft = columnWidthBitmap % 2 === 0;\n    const columnHalfWidthBitmap = (columnWidthBitmap - (shiftLeft ? 0 : 1)) / 2;\n    return {\n        spacing,\n        shiftLeft,\n        columnHalfWidthBitmap,\n        horizontalPixelRatio,\n    };\n}\n\ninterface ColumnPosition {\n    left: number;\n    right: number;\n    shiftLeft: boolean;\n}\n\n/**\n * Calculate the position for a column. These values can be later adjusted\n * by a second pass which corrects widths, and shifts columns.\n * @param xMedia - column x position (center) in media coordinates\n * @param columnData - precalculated common values (returned by `columnCommon`)\n * @param previousPosition - result from this function for the previous bar.\n * @returns initial column position\n */\nfunction calculateColumnPosition(\n    xMedia: number,\n    columnData: ColumnCommon,\n    previousPosition: ColumnPosition | undefined\n): ColumnPosition {\n    const xBitmapUnRounded = xMedia * columnData.horizontalPixelRatio;\n    const xBitmap = Math.round(xBitmapUnRounded);\n    const xPositions: ColumnPosition = {\n        left: xBitmap - columnData.columnHalfWidthBitmap,\n        right:\n            xBitmap +\n            columnData.columnHalfWidthBitmap -\n            (columnData.shiftLeft ? 1 : 0),\n        shiftLeft: xBitmap > xBitmapUnRounded,\n    };\n    const expectedAlignmentShift = columnData.spacing + 1;\n    if (previousPosition) {\n        if (xPositions.left - previousPosition.right !== expectedAlignmentShift) {\n            // need to adjust alignment\n            if (previousPosition.shiftLeft) {\n                previousPosition.right = xPositions.left - expectedAlignmentShift;\n            } else {\n                xPositions.left = previousPosition.right + expectedAlignmentShift;\n            }\n        }\n    }\n    return xPositions;\n}\n\nfunction fixPositionsAndReturnSmallestWidth(\n    positions: ColumnPosition[],\n    initialMinWidth: number\n): number {\n    return positions.reduce((smallest: number, position: ColumnPosition) => {\n        if (position.right < position.left) {\n            position.right = position.left;\n        }\n        const width = position.right - position.left + 1;\n        return Math.min(smallest, width);\n    }, initialMinWidth);\n}\n\nfunction fixAlignmentForNarrowColumns(\n    positions: ColumnPosition[],\n    minColumnWidth: number\n) {\n    return positions.map((position: ColumnPosition) => {\n        const width = position.right - position.left + 1;\n        if (width <= minColumnWidth) return position;\n        if (position.shiftLeft) {\n            position.right -= 1;\n        } else {\n            position.left += 1;\n        }\n        return position;\n    });\n}\n\n/**\n * Calculates the column positions and widths for the x positions.\n * This function creates a new array. You may get faster performance using the\n * `calculateColumnPositionsInPlace` function instead\n * @param xMediaPositions - x positions for the bars in media coordinates\n * @param barSpacingMedia - spacing between bars in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns Positions for the columns\n */\nexport function calculateColumnPositions(\n    xMediaPositions: number[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnPosition[] {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    const positions = new Array<ColumnPosition>(xMediaPositions.length);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = 0; i < xMediaPositions.length; i++) {\n        positions[i] = calculateColumnPosition(\n            xMediaPositions[i],\n            common,\n            previous\n        );\n        previous = positions[i];\n    }\n    const initialMinWidth = Math.ceil(barSpacingMedia * horizontalPixelRatio);\n    const minColumnWidth = fixPositionsAndReturnSmallestWidth(\n        positions,\n        initialMinWidth\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        return fixAlignmentForNarrowColumns(positions, minColumnWidth);\n    }\n    return positions;\n}\n\nexport interface ColumnPositionItem {\n    x: number;\n    column?: ColumnPosition;\n}\n\n/**\n * Calculates the column positions and widths for bars using the existing\n * array of items.\n * @param items - bar items which include an `x` property, and will be mutated to contain a column property\n * @param barSpacingMedia - bar spacing in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @param startIndex - start index for visible bars within the items array\n * @param endIndex - end index for visible bars within the items array\n */\nexport function calculateColumnPositionsInPlace(\n    items: ColumnPositionItem[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    startIndex: number,\n    endIndex: number\n): void {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = startIndex; i < Math.min(endIndex, items.length); i++) {\n        items[i].column = calculateColumnPosition(items[i].x, common, previous);\n        previous = items[i].column;\n    }\n    const minColumnWidth = (items as ColumnPositionItem[]).reduce(\n        (smallest: number, item: ColumnPositionItem, index: number) => {\n            if (!item.column || index < startIndex || index > endIndex)\n                return smallest;\n            if (item.column.right < item.column.left) {\n                item.column.right = item.column.left;\n            }\n            const width = item.column.right - item.column.left + 1;\n            return Math.min(smallest, width);\n        },\n        Math.ceil(barSpacingMedia * horizontalPixelRatio)\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        (items as ColumnPositionItem[]).forEach(\n            (item: ColumnPositionItem, index: number) => {\n                if (!item.column || index < startIndex || index > endIndex) return;\n                const width = item.column.right - item.column.left + 1;\n                if (width <= minColumnWidth) return item;\n                if (item.column.shiftLeft) {\n                    item.column.right -= 1;\n                } else {\n                    item.column.left += 1;\n                }\n                return item.column;\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Local Time Zone\nDESCRIPTION: A utility function that converts UTC timestamps to the client's local time zone using Date API methods. Takes original time in seconds as parameter.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/time-zones.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToLocal(originalTime) {\n    const d = new Date(originalTime * 1000);\n    return Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()) / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Local Time Zone in JavaScript\nDESCRIPTION: This function converts a given timestamp to the local time zone of the client. It's useful when you only need to support the client's local time zone rather than multiple time zones.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/time-zones.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToLocal(originalTime) {\n    const d = new Date(originalTime * 1000);\n    return Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()) / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Lightweight Charts Instance in Swift\nDESCRIPTION: Demonstrates the creation of a LightweightCharts instance and adding it to a view in Swift. This is the first step in creating a chart in an iOS application.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/ios.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar chart: LightweightCharts!\n\n// ...\nchart = LightweightCharts()\nview.addSubview(chart)\n// ... setup layout\n```\n\n----------------------------------------\n\nTITLE: Safe Canvas Context Management with Save/Restore\nDESCRIPTION: Demonstrates best practices for managing canvas context state using save() and restore() within a try-finally block to ensure proper context restoration even in case of errors.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/canvas-rendering-target.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myRenderingFunction(scope) {\n    const ctx = scope.context;\n\n    // save the current state of the context to the stack\n    ctx.save();\n\n    try {\n        // example code\n        scope.context.beginPath();\n        scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n        scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n        scope.context.fill();\n    } finally {\n        // restore the saved context from the stack\n        ctx.restore();\n    }\n}\n\ntarget.useMediaCoordinateSpace(scope => {\n    myRenderingFunction(scope);\n    myOtherRenderingFunction(scope);\n    /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Without Visible Price Scales in Lightweight Charts v3\nDESCRIPTION: Demonstrates how to create a chart without any visible price scales using the new API in Lightweight Charts v3. This is achieved by setting both left and right price scales to invisible.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v2-to-v3.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    leftPriceScale: {\n        visible: false,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Data in Kotlin\nDESCRIPTION: Example of adding histogram data points and whitespace data to a chart series using Kotlin.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/android.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = listOf(\n    HistogramData(Time.BusinessDay(2019, 6, 11), 40.01f),\n    HistogramData(Time.BusinessDay(2019, 6, 12), 52.38f),\n    HistogramData(Time.BusinessDay(2019, 6, 13), 36.30f),\n    HistogramData(Time.BusinessDay(2019, 6, 14), 34.48f),\n    WhitespaceData(Time.BusinessDay(2019, 6, 15)),\n    WhitespaceData(Time.BusinessDay(2019, 6, 16)),\n    HistogramData(Time.BusinessDay(2019, 6, 17), 41.50f),\n    HistogramData(Time.BusinessDay(2019, 6, 18), 34.82f)\n)\nhistogramSeries.setData(data)\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Price Line in Lightweight Charts\nDESCRIPTION: This snippet demonstrates how to disable the default price line for the last value in the series and its label by adjusting the series options using the applyOptions method.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/price-line.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries.applyOptions({\n    lastValueVisible: false,\n    priceLineVisible: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Series to Lightweight Charts\nDESCRIPTION: Demonstrates how to create and add a custom series to a chart using addCustomSeries method. Shows implementation of a custom series class and data setting.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomSeries {\n    /* Class implementing the ICustomSeriesPaneView interface */\n}\n\n// Create an instantiated custom series.\nconst customSeriesInstance = new MyCustomSeries();\n\nconst chart = createChart(document.getElementById('container'));\nconst myCustomSeries = chart.addCustomSeries(customSeriesInstance, {\n    // options for the MyCustomSeries\n    customOption: 10,\n});\n\nconst data = [\n    { time: 1642425322, value: 123, customValue: 456 },\n    /* ... more data */\n];\n\nmyCustomSeries.setData(data);\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Price Formatter to the Chart\nDESCRIPTION: Code to apply a custom price formatter function to the entire chart by setting it in the localization options of the chart configuration.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/price-format.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Apply the custom priceFormatter to the chart\nchart.applyOptions({\n    localization: {\n        priceFormatter: myPriceFormatter,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Font Family to Lightweight Charts\nDESCRIPTION: JavaScript code that configures the Lightweight Charts instance to use the Roboto font by setting the fontFamily property within the chart options. This demonstrates how to apply custom typography to the chart elements.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/finishing-touches.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Changing the font\nchart.applyOptions({\n    layout: {\n        fontFamily: \"'Roboto', sans-serif\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Crosshair and Grid Line Widths in TypeScript\nDESCRIPTION: These functions calculate the width of crosshair and grid lines for both bitmap and media sizing. They take the horizontal pixel ratio as input and return the calculated width. The bitmap width is always at least 1 pixel, while the media width is derived from the bitmap width.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/pixel-perfect-rendering/widths/crosshair.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Default grid / crosshair line width in Bitmap sizing\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns default grid / crosshair line width in Bitmap sizing\n */\nexport function gridAndCrosshairBitmapWidth(\n    horizontalPixelRatio: number\n): number {\n    return Math.max(1, Math.floor(horizontalPixelRatio));\n}\n\n/**\n * Default grid / crosshair line width in Media sizing\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns default grid / crosshair line width in Media sizing\n */\nexport function gridAndCrosshairMediaWidth(\n    horizontalPixelRatio: number\n): number {\n    return (\n        gridAndCrosshairBitmapWidth(horizontalPixelRatio) / horizontalPixelRatio\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Local Timezone\nDESCRIPTION: A function that converts UTC timestamps to the client's local timezone. Takes original time in seconds as parameter and returns local time in seconds.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/time-zones.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToLocal(originalTime) {\n    const d = new Date(originalTime * 1000);\n    return Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()) / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Specific Time Zone using JavaScript Date API\nDESCRIPTION: This function converts a given timestamp to a specific time zone using the JavaScript Date API. It's a simple approach but may have performance limitations for large datasets.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/time-zones.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = new Date(new Date(originalTime * 1000).toLocaleString('en-US', { timeZone }));\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Layout Options in Kotlin\nDESCRIPTION: Kotlin code for configuring chart layout options including background, text color, and localization settings.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/android.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncharts_view.api.applyOptions {\n    layout = layoutOptions {\n        background = SolidColor(Color.LTGRAY)\n        textColor = Color.BLACK.toIntColor()\n    }\n    localization = localizationOptions {\n        locale = \"ru-RU\"\n        priceFormatter = PriceFormatter(template = \"{price:#2:#3}$\")\n        timeFormatter = TimeFormatter(\n            locale = \"ru-RU\",\n            dateTimeFormat = DateTimeFormat.DATE_TIME\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Grid and Crosshair Line Widths\nDESCRIPTION: Two utility functions that calculate line widths for grid lines and crosshairs based on the horizontal pixel ratio. The first function calculates width in bitmap sizing using Math.floor and ensures a minimum of 1 pixel. The second function converts the bitmap width to media sizing by dividing by the pixel ratio.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/pixel-perfect-rendering/widths/crosshair.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Default grid / crosshair line width in Bitmap sizing\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns default grid / crosshair line width in Bitmap sizing\n */\nexport function gridAndCrosshairBitmapWidth(\n    horizontalPixelRatio: number\n): number {\n    return Math.max(1, Math.floor(horizontalPixelRatio));\n}\n\n/**\n * Default grid / crosshair line width in Media sizing\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns default grid / crosshair line width in Media sizing\n */\nexport function gridAndCrosshairMediaWidth(\n    horizontalPixelRatio: number\n): number {\n    return (\n        gridAndCrosshairBitmapWidth(horizontalPixelRatio) / horizontalPixelRatio\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Left Price Scale Chart in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a chart with the price scale on the left side in version 3 of Lightweight Charts™. It shows the new configuration options for price scales and how to assign a series to the left price scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    rightPriceScale: {\n        visible: false,\n    },\n    leftPriceScale: {\n        visible: true,\n    },\n});\n\nconst histSeries = chart.addHistogramSeries({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Histogram Series to Chart\nDESCRIPTION: Kotlin implementation for creating and storing a reference to a histogram series in the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/android.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nlateinit var histogramSeries: SeriesApi\ncharts_view.api.addHistogramSeries(\n    onSeriesCreated = { series ->\n        histogramSeries = series\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Pane Separators in Lightweight Charts\nDESCRIPTION: Shows how to customize pane separator colors and disable resize functionality through chart options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/panes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.applyOptions({\n    layout: {\n        panes: {\n            separatorColor: '#ff0000',\n            separatorHoverColor: '#00ff00',\n            enableResize: false,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Series to a Specific Pane in Lightweight Charts\nDESCRIPTION: Demonstrates how to add a volume series to a specific pane and move it between panes using the moveToPane method.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/panes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst volumeSeries = chart.addSeries(\n    HistogramSeries,\n    {\n        priceFormat: {\n            type: 'volume',\n        },\n    },\n    1 // Pane index\n);\n// Moving the series to a different pane\nvolumeSeries.moveToPane(2);\n```\n\n----------------------------------------\n\nTITLE: Time Scale Logical Range Example\nDESCRIPTION: Demonstrates the concept of logical range using numeric indexes. The range includes both fully and partially visible bars, with fractional parts indicating partial visibility. Integer parts represent fully visible bars while decimal parts show the percentage of partial visibility.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/time-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  from: -4.73, // Starting logical index\n  to: 5.05    // Ending logical index\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Bitmap Positions for Centered Shapes in TypeScript\nDESCRIPTION: This function calculates the bitmap position for an item with a desired length, centered according to a position coordinate defined in media sizing. It's useful for drawing centered shapes like horizontal or vertical lines on a chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/pixel-perfect-rendering/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BitmapPositionLength {\n    /** coordinate for use with a bitmap rendering scope */\n    position: number;\n    /** length for use with a bitmap rendering scope */\n    length: number;\n}\n\nfunction centreOffset(lineBitmapWidth: number): number {\n    return Math.floor(lineBitmapWidth * 0.5);\n}\n\n/**\n * Calculates the bitmap position for an item with a desired length (height or width), and centred according to\n * a position coordinate defined in media sizing.\n * @param positionMedia - position coordinate for the bar (in media coordinates)\n * @param pixelRatio - pixel ratio. Either horizontal for x positions, or vertical for y positions\n * @param desiredWidthMedia - desired width (in media coordinates)\n * @returns Position of the start point and length dimension.\n */\nexport function positionsLine(\n    positionMedia: number,\n    pixelRatio: number,\n    desiredWidthMedia: number = 1,\n    widthIsBitmap?: boolean\n): BitmapPositionLength {\n    const scaledPosition = Math.round(pixelRatio * positionMedia);\n    const lineBitmapWidth = widthIsBitmap\n        ? desiredWidthMedia\n        : Math.round(desiredWidthMedia * pixelRatio);\n    const offset = centreOffset(lineBitmapWidth);\n    const position = scaledPosition - offset;\n    return { position, length: lineBitmapWidth };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Price Scale ID for Series in Lightweight Charts\nDESCRIPTION: This code snippet shows how to assign a price scale ID to a series, which creates or attaches to an overlay price scale. This is used for creating custom price scales beyond the default left and right scales.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/price-scale.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`priceScaleId`](/api/interfaces/SeriesOptionsCommon.md#pricescaleid)\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a Bar Series in Lightweight Charts using Swift\nDESCRIPTION: This code demonstrates how to create bar data and add it to a bar series in Lightweight Charts using Swift.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/ios.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet data = [\n    BarData(time: .string(\"2018-10-19\"), open: 180.34, high: 180.99, low: 178.57, close: 179.85),\n    BarData(time: .string(\"2018-10-22\"), open: 180.82, high: 181.40, low: 177.56, close: 178.75),\n    BarData(time: .string(\"2018-10-23\"), open: 175.77, high: 179.49, low: 175.44, close: 178.53),\n    BarData(time: .string(\"2018-10-24\"), open: 178.58, high: 182.37, low: 176.31, close: 176.97),\n    BarData(time: .string(\"2018-10-25\"), open: 177.52, high: 180.50, low: 176.83, close: 179.07)\n]\n\n// ...\nseries.setData(data: data)\n```\n\n----------------------------------------\n\nTITLE: Adding ChartsView to Android XML Layout\nDESCRIPTION: This XML snippet demonstrates how to add the ChartsView component to an Android layout file. It sets up constraints for the view to occupy the full screen.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/android.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <com.tradingview.lightweightcharts.view.ChartsView\n            android:id=\"@+id/charts_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"0dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n----------------------------------------\n\nTITLE: Attaching Drawing Primitives to Chart without Specific Series\nDESCRIPTION: Demonstrates how to attach a drawing primitive to a chart without a specific series. This approach is useful for primitives that should remain on the chart regardless of series changes, such as watermarks.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n// Create an instantiated series primitive.\nconst myCustomPrimitive = new MyCustomPrimitive();\n\nconst chart = createChart(document.getElementById('container'));\n\n// an empty series which won't ever have data\nconst chartSeries = chart.addLineSeries();\nchartSeries.attachPrimitive(myCustomPrimitive);\n```\n\n----------------------------------------\n\nTITLE: Using seriesData Instead of seriesPrices in Event Parameters\nDESCRIPTION: Shows how to use the new seriesData property instead of the removed seriesPrices property in mouse event callbacks.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v3-to-v4.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlineSeries.setData([{ time: '2001-01-01', value: 1 }]);\nbarSeries.setData([{ time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 }]);\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.seriesData.get(lineSeries)); // { time: '2001-01-01', value: 1 } or undefined\n    console.log(param.seriesData.get(barSeries)); // { time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 } or undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Bar Series to Lightweight Charts in Swift\nDESCRIPTION: Shows how to add a bar series to the chart instance with default options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/ios.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar series: BarSeries!\n\n// ...\nseries = chart.addBarSeries(options: nil)\n```\n\n----------------------------------------\n\nTITLE: Hiding Price Scales in Lightweight Charts\nDESCRIPTION: This code snippet demonstrates how to hide a default price scale (left or right) by setting its visibility option to false. This is the only way to 'remove' default price scales as they cannot be actually deleted.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/price-scale.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`visible`](/api/interfaces/PriceScaleOptions.md#visible)\n```\n\n----------------------------------------\n\nTITLE: Setting Histogram Data with Custom Colors\nDESCRIPTION: Shows how to set data for the histogram series with custom colors for individual bars.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/price-and-volume.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhistogramSeries.setData([\n    { time: '2018-10-19', value: 19103293.0, color: 'green' },\n    { time: '2018-10-20', value: 20345000.0, color: 'red' },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pane Primitive\nDESCRIPTION: Basic implementation example of a custom Pane Primitive that implements the IPanePrimitive interface. Shows the structure of a primitive with a paneViews method that defines drawing behavior.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/pane-primitives.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomPanePrimitive {\n    paneViews() {\n        return [\n            {\n                renderer: {\n                    draw: target => {\n                        // Custom drawing logic here\n                    },\n                },\n            },\n        ];\n    }\n\n    // Other methods as needed...\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Drawing Primitives to TradingView Chart Series\nDESCRIPTION: Shows how to create and attach a drawing primitive to an existing chart series. Includes primitive class creation and attachment process.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomPrimitive {\n    /* Class implementing the ISeriesPrimitive interface */\n}\n\n// Create an instantiated series primitive.\nconst myCustomPrimitive = new MyCustomPrimitive();\n\nconst chart = createChart(document.getElementById('container'));\nconst lineSeries = chart.addLineSeries();\n\nconst data = [\n    { time: 1642425322, value: 123 },\n    /* ... more data */\n];\n\n// Attach the primitive to the series\nlineSeries.attachPrimitive(myCustomPrimitive);\n```\n\n----------------------------------------\n\nTITLE: Creating Line Series in Lightweight Charts v4\nDESCRIPTION: Example of creating a line series in Lightweight Charts version 4. This snippet demonstrates the old method of adding a line series to a chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v4-to-v5.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example with Line Series in v4\nimport { createChart } from 'lightweight-charts';\nconst chart = createChart(container, {});\nconst lineSeries = chart.addLineSeries({ color: 'red' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Options in Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to configure chart options using the Lightweight Charts™ Android wrapper. It sets layout options, background color, text color, and localization settings.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/android.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncharts_view.api.applyOptions {\n    layout = layoutOptions {\n        background = SolidColor(Color.LTGRAY)\n        textColor = Color.BLACK.toIntColor()\n    }\n    localization = localizationOptions {\n        locale = \"ru-RU\"\n        priceFormatter = PriceFormatter(template = \"{price:#2:#3}$\")\n        timeFormatter = TimeFormatter(\n            locale = \"ru-RU\",\n            dateTimeFormat = DateTimeFormat.DATE_TIME\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bar Series to Chart\nDESCRIPTION: Creating and adding a bar series to the chart instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/ios.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar series: BarSeries!\n\n// ...\nseries = chart.addBarSeries(options: nil)\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Repository for Lightweight Charts in Gradle\nDESCRIPTION: Configures the project's build.gradle file to include the necessary repositories for fetching the Lightweight Charts Android wrapper dependency.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/android.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ticksVisible Instead of drawTicks in PriceScale Options\nDESCRIPTION: Demonstrates how to use the renamed ticksVisible property (formerly drawTicks) in price scale options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v3-to-v4.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    leftPriceScale: {\n        ticksVisible: false,\n    },\n    rightPriceScale: {\n        ticksVisible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Using hoveredObjectId in Mouse Events in Lightweight Charts v4\nDESCRIPTION: Demonstrates the use of the renamed 'hoveredObjectId' property (formerly 'hoveredMarkerId') in mouse event callbacks in v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v3-to-v4.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchart.subscribeCrosshairMove(param => {\n    console.log(param.hoveredObjectId);\n});\n\nchart.subscribeClick(param => {\n    console.log(param.hoveredObjectId);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Bar Series to Lightweight Charts in Swift\nDESCRIPTION: This snippet shows how to add a bar series to a Lightweight Charts instance in Swift.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/ios.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar series: BarSeries!\n\n// ...\nseries = chart.addBarSeries(options: nil)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Visible Logical Range in TradingView Charts (JavaScript)\nDESCRIPTION: Shows how to modify the visible logical range by adjusting the range boundaries by half a bar-width on both sides to optimize display edges.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/time-scale.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst vr = chart.timeScale().getVisibleLogicalRange();\nchart.timeScale().setVisibleLogicalRange({ from: vr.from + 0.5, to: vr.to - 0.5 });\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Charts in JavaScript\nDESCRIPTION: Demonstrates how to import the createChart function and use it to create multiple chart instances.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\n// ...\n\n// somewhere in your code\nconst firstChart = createChart(firstContainer);\nconst secondChart = createChart(secondContainer);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Series to Lightweight Charts\nDESCRIPTION: Demonstrates how to create and add a custom series to a Lightweight Charts instance. It shows the process of implementing a custom series class, instantiating it, and adding it to the chart with data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomSeries {\n    /* Class implementing the ICustomSeriesPaneView interface */\n}\n\n// Create an instantiated custom series.\nconst customSeriesInstance = new MyCustomSeries();\n\nconst chart = createChart(document.getElementById('container'));\nconst myCustomSeries = chart.addCustomSeries(customSeriesInstance, {\n    // options for the MyCustomSeries\n    customOption: 10,\n});\n\nconst data = [\n    { time: 1642425322, value: 123, customValue: 456 },\n    /* ... more data */\n];\n\nmyCustomSeries.setData(data);\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts Script with CDN in HTML\nDESCRIPTION: This snippet shows how to include the Lightweight Charts library using the standalone version from a CDN server. This approach allows you to include the script tag in your HTML file without needing to host the library yourself.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/creating-a-chart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<title>Lightweight Charts Customization Tutorial</title>\n<!-- highlight-start -->\n<!-- Adding the standalone version of Lightweight charts -->\n<script\n    type=\"text/javascript\"\n    src=\"https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js\"\n></script>\n<!-- highlight-end -->\n<style>\n```\n\n----------------------------------------\n\nTITLE: Series Creation in v4\nDESCRIPTION: Example showing how to create a Line Series chart in Lightweight Charts v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v4-to-v5.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example with Line Series in v4\nimport { createChart } from 'lightweight-charts';\nconst chart = createChart(container, {});\nconst lineSeries = chart.addLineSeries({ color: 'red' });\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding a Lightweight Charts Instance in Swift\nDESCRIPTION: This code demonstrates how to create an instance of LightweightCharts and add it to a view in Swift.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/ios.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar chart: LightweightCharts!\n\n// ...\nchart = LightweightCharts()\nview.addSubview(chart)\n// ... setup layout\n```\n\n----------------------------------------\n\nTITLE: Working with Logical Range in TradingView Charts\nDESCRIPTION: Demonstrates the structure of a logical range object used for managing visible time ranges on the chart. The logical range uses numerical values to represent indexes on the time scale, with fractional parts indicating partial bar visibility.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/time-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  from: number, // starting logical index\n  to: number    // ending logical index\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Series to TradingView Chart\nDESCRIPTION: Demonstrates how to create and add a custom series to a Lightweight Chart. Shows implementation of a custom series class and adding data to it.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomSeries {\n    /* Class implementing the ICustomSeriesPaneView interface */\n}\n\n// Create an instantiated custom series.\nconst customSeriesInstance = new MyCustomSeries();\n\nconst chart = createChart(document.getElementById('container'));\nconst myCustomSeries = chart.addCustomSeries(customSeriesInstance, {\n    // options for the MyCustomSeries\n    customOption: 10,\n});\n\nconst data = [\n    { time: 1642425322, value: 123, customValue: 456 },\n    /* ... more data */\n];\n\nmyCustomSeries.setData(data);\n```\n\n----------------------------------------\n\nTITLE: Setting Watermark in Lightweight Charts v4\nDESCRIPTION: Demonstrates how to set a watermark in Lightweight Charts version 4. This method is no longer used in v5.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v4-to-v5.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart(container, {\n    watermark: {\n        text: 'Watermark Text',\n        color: 'rgba(255,0,0,0.5)',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Watermark in Lightweight Charts v5\nDESCRIPTION: Shows how to set a watermark using the new TextWatermark plugin in Lightweight Charts version 5. This new method requires importing createTextWatermark and creating a separate watermark instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v4-to-v5.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart, createTextWatermark } from 'lightweight-charts';\n\nconst chart = createChart(container, options);\nconst firstPane = chart.panes()[0];\n\ncreateTextWatermark(firstPane, {\n    horzAlign: 'center',\n    vertAlign: 'center',\n    lines: [{\n        text: 'Watermark Text',\n        color: 'rgba(255,0,0,0.5)',\n        fontSize: 50,\n    }],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Lightweight Charts in Swift\nDESCRIPTION: Shows how to import the Lightweight Charts library in a Swift file to start using its functionality.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/ios.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport LightweightCharts\n```\n\n----------------------------------------\n\nTITLE: Configuring No Price Scale - New Method\nDESCRIPTION: Demonstrates the new v3 approach for hiding both price scales.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v2-to-v3.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    leftPriceScale: {\n        visible: false,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Pane Primitives to Lightweight Charts\nDESCRIPTION: Demonstrates how to create and attach a pane primitive to a chart pane for implementing chart-wide features.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomPanePrimitive {\n    /* Class implementing the IPanePrimitive interface */\n}\n\n// Create an instantiated pane primitive.\nconst myCustomPanePrimitive = new MyCustomPanePrimitive();\n\nconst chart = createChart(document.getElementById('container'));\nconst mainPane = chart.panes()[0]; // Get the main pane\n\n// Attach the primitive to the pane\nmainPane.attachPrimitive(myCustomPanePrimitive);\n```\n\n----------------------------------------\n\nTITLE: Bitmap Coordinate Space Usage in Canvas Rendering\nDESCRIPTION: Demonstrates how to use useBitmapCoordinateSpace to draw using actual device pixels as coordinate sizing. Shows drawing a filled rectangle that fills the entire canvas using bitmap dimensions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/canvas-rendering-target.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// target is an instance of CanvasRenderingTarget2D\ntarget.useBitmapCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.bitmapSize.width, scope.bitmapSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pane Primitives in Lightweight Charts\nDESCRIPTION: Demonstrates how to add a pane primitive to a chart using the attachPrimitive method on the IPaneApi interface. Shows chart initialization and primitive attachment to the main pane.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomPanePrimitive {\n    /* Class implementing the IPanePrimitive interface */\n}\n\n// Create an instantiated pane primitive.\nconst myCustomPanePrimitive = new MyCustomPanePrimitive();\n\nconst chart = createChart(document.getElementById('container'));\nconst mainPane = chart.panes()[0]; // Get the main pane\n\n// Attach the primitive to the pane\nmainPane.attachPrimitive(myCustomPanePrimitive);\n```\n\n----------------------------------------\n\nTITLE: ESM Series Creation Example\nDESCRIPTION: Example showing series creation using ES Modules in v5.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v4-to-v5.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart, LineSeries } from 'lightweight-charts';\n\nconst chart = createChart(container, {});\nconst lineSeries = chart.addSeries(LineSeries, { color: 'red' });\n```\n\n----------------------------------------\n\nTITLE: Setting Bar Series Data\nDESCRIPTION: Adding historical price data to a bar series with time, open, high, low, and close values.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/ios.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet data = [\n    BarData(time: .string(\"2018-10-19\"), open: 180.34, high: 180.99, low: 178.57, close: 179.85),\n    BarData(time: .string(\"2018-10-22\"), open: 180.82, high: 181.40, low: 177.56, close: 178.75),\n    BarData(time: .string(\"2018-10-23\"), open: 175.77, high: 179.49, low: 175.44, close: 178.53),\n    BarData(time: .string(\"2018-10-24\"), open: 178.58, high: 182.37, low: 176.31, close: 176.97),\n    BarData(time: .string(\"2018-10-25\"), open: 177.52, high: 180.50, low: 176.83, close: 179.07)\n]\n\n// ...\nseries.setData(data: data)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Pane Primitive in JavaScript\nDESCRIPTION: This example shows a basic implementation of a custom Pane Primitive. It demonstrates the minimum requirements for creating a Pane Primitive by implementing the IPanePrimitive interface with a paneViews method that returns a renderer with drawing logic.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/pane-primitives.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomPanePrimitive {\n    paneViews() {\n        return [\n            {\n                renderer: {\n                    draw: target => {\n                        // Custom drawing logic here\n                    },\n                },\n            },\n        ];\n    }\n\n    // Other methods as needed...\n}\n```\n\n----------------------------------------\n\nTITLE: TimeScaleOptions Configuration Update\nDESCRIPTION: Addition of ticksVisible property to TimeScaleOptions and renaming of drawTicks to ticksVisible in PriceScaleOptions for consistency.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/release-notes.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nTimeScaleOptions.ticksVisible\nPriceScaleOptions.ticksVisible // formerly drawTicks\n```\n\n----------------------------------------\n\nTITLE: Series Markers in v5\nDESCRIPTION: Example showing new markers primitive implementation in v5 using createSeriesMarkers.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v4-to-v5.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the markers primitive\nimport { createSeriesMarkers } from 'lightweight-charts';\n\n// Create a markers primitive instance\nconst seriesMarkers = createSeriesMarkers(series, [\n    {\n        time: '2019-04-09',\n        position: 'aboveBar',\n        color: 'black',\n        shape: 'arrowDown',\n    },\n]);\n\n// Getting markers\nconst markers = seriesMarkers.markers();\n\n// Updating markers\nseriesMarkers.setMarkers([/* new markers */]);\n\n// Remove all markers\nseriesMarkers.setMarkers([]);\n```\n\n----------------------------------------\n\nTITLE: Left Price Scale Configuration - New Method\nDESCRIPTION: Updated method for configuring left price scale positioning in v3, showing how to disable right scale and enable left scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/migrations/from-v2-to-v3.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    rightPriceScale: {\n        visible: false,\n    },\n    leftPriceScale: {\n        visible: true,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via CocoaPods\nDESCRIPTION: Specification for adding Lightweight Charts dependency to a Cocoa project using CocoaPods package manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/ios.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'LightweightCharts', '~> 3.8.0'\n```\n\n----------------------------------------\n\nTITLE: Moving Price Scale from Right to Left in JavaScript\nDESCRIPTION: Illustrates how to move the price scale from right to left in v3, replacing the v2 method. This involves changing visibility of both scales and updating the series' priceScaleId.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v2-to-v3.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v2 way\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    priceScale: {\n        position: 'left',\n    },\n});\n\n// New v3 way\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    leftPriceScale: {\n        visible: true,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n\nmainSeries.applyOptions({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: zOrder Layers Demo\nDESCRIPTION: Interactive demo showing different zOrder layers and their relative positions in the chart's visual stack, illustrating where elements are drawn relative to grid, series, and crosshair.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/series-primitives.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayersExplainerCode\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Data in Kotlin\nDESCRIPTION: Kotlin code demonstrating how to create and set data for a histogram series including business day timestamps and whitespace data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/android.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = listOf(\n    HistogramData(Time.BusinessDay(2019, 6, 11), 40.01f),\n    HistogramData(Time.BusinessDay(2019, 6, 12), 52.38f),\n    HistogramData(Time.BusinessDay(2019, 6, 13), 36.30f),\n    HistogramData(Time.BusinessDay(2019, 6, 14), 34.48f),\n    WhitespaceData(Time.BusinessDay(2019, 6, 15)),\n    WhitespaceData(Time.BusinessDay(2019, 6, 16)),\n    HistogramData(Time.BusinessDay(2019, 6, 17), 41.50f),\n    HistogramData(Time.BusinessDay(2019, 6, 18), 34.82f)\n)\nhistogramSeries.setData(data)\n```\n\n----------------------------------------\n\nTITLE: Drawing with Bitmap Coordinate Space in JavaScript\nDESCRIPTION: Example showing how to use useBitmapCoordinateSpace to draw a filled rectangle using bitmap dimensions. The code demonstrates accessing the bitmap scope properties and using the canvas context for rendering.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/canvas-rendering-target.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// target is an instance of CanvasRenderingTarget2D\ntarget.useBitmapCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.bitmapSize.width, scope.bitmapSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n```\n\n----------------------------------------\n\nTITLE: Using UMD with Lightweight Charts v5\nDESCRIPTION: Shows how to use the Universal Module Definition (UMD) build of Lightweight Charts v5, creating a chart and adding a line series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v4-to-v5.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {});\nconst lineSeries = chart.addSeries(LightweightCharts.LineSeries, { color: 'red' });\n```\n\n----------------------------------------\n\nTITLE: Setting Bar Data in Lightweight Charts iOS\nDESCRIPTION: Demonstrates how to create and add bar data points to a bar series in Lightweight Charts.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/ios.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet data = [\n    BarData(time: .string(\"2018-10-19\"), open: 180.34, high: 180.99, low: 178.57, close: 179.85),\n    BarData(time: .string(\"2018-10-22\"), open: 180.82, high: 181.40, low: 177.56, close: 178.75),\n    BarData(time: .string(\"2018-10-23\"), open: 175.77, high: 179.49, low: 175.44, close: 178.53),\n    BarData(time: .string(\"2018-10-24\"), open: 178.58, high: 182.37, low: 176.31, close: 176.97),\n    BarData(time: .string(\"2018-10-25\"), open: 177.52, high: 180.50, low: 176.83, close: 179.07)\n]\n\n// ...\nseries.setData(data: data)\n```\n\n----------------------------------------\n\nTITLE: Custom Series Interface Properties\nDESCRIPTION: Interface definition showing the required properties and methods for implementing a custom series view in TradingView charts. This includes renderer, update, priceValueBuilder, whitespace handling, default options, and cleanup methods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/custom_series.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ICustomSeriesPaneView {\n  renderer: ICustomSeriesPaneRenderer;\n  update(data: PaneRendererCustomData, seriesOptions: any): void;\n  priceValueBuilder: (item: CustomData) => number[];\n  isWhitespace: (data: CustomData) => boolean;\n  defaultOptions: any;\n  destroy(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Series Data in Mouse Events in Lightweight Charts v4\nDESCRIPTION: Shows how to access series data in mouse events using the new 'seriesData' property, which replaces the removed 'seriesPrices' property.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v3-to-v4.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlineSeries.setData([{ time: '2001-01-01', value: 1 }]);\nbarSeries.setData([{ time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 }]);\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.seriesData.get(lineSeries)); // { time: '2001-01-01', value: 1 } or undefined\n    console.log(param.seriesData.get(barSeries)); // { time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 } or undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring No Price Scale - Old Method\nDESCRIPTION: Previous method for creating a chart without visible price scales.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    priceScale: {\n        position: 'none',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: No Price Scale Configuration - New Method\nDESCRIPTION: Updated method for creating a chart without visible price scales in v3.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/migrations/from-v2-to-v3.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    leftPriceScale: {\n        visible: false,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via CocoaPods in Ruby\nDESCRIPTION: This snippet shows how to specify Lightweight Charts as a dependency in a Podfile for CocoaPods installation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/ios.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'LightweightCharts', '~> 3.8.0'\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Background Color\nDESCRIPTION: Shows how to set chart background color using the new background property structure instead of the deprecated backgroundColor option\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    layout: {\n        background: {\n            type: ColorType.Solid,\n            color: 'red',\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Price Formatter Function in JavaScript\nDESCRIPTION: A simple price formatter function that takes a number and returns it formatted with two decimal points as a string.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/price-format.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst myPriceFormatter = p => p.toFixed(2);\n```\n\n----------------------------------------\n\nTITLE: Calculating Optimal Candlestick Width in TypeScript for TradingView Charts\nDESCRIPTION: This function calculates the optimal width for candlesticks based on bar spacing and pixel ratio. It handles special cases for small bar spacings and uses a coefficient to adjust the width as bar spacing increases. The function ensures the width is appropriate for different device resolutions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/pixel-perfect-rendering/widths/candlestick.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction optimalCandlestickWidth(\n    barSpacing: number,\n    pixelRatio: number\n): number {\n    const barSpacingSpecialCaseFrom = 2.5;\n    const barSpacingSpecialCaseTo = 4;\n    const barSpacingSpecialCaseCoeff = 3;\n    if (barSpacing >= barSpacingSpecialCaseFrom && barSpacing <= barSpacingSpecialCaseTo) {\n        return Math.floor(barSpacingSpecialCaseCoeff * pixelRatio);\n    }\n    // coeff should be 1 on small barspacing and go to 0.8 while bar spacing grows\n    const barSpacingReducingCoeff = 0.2;\n    const coeff =\n        1 -\n        (barSpacingReducingCoeff *\n            Math.atan(\n                Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo\n            )) /\n            (Math.PI * 0.5);\n    const res = Math.floor(barSpacing * coeff * pixelRatio);\n    const scaledBarSpacing = Math.floor(barSpacing * pixelRatio);\n    const optimal = Math.min(res, scaledBarSpacing);\n    return Math.max(Math.floor(pixelRatio), optimal);\n}\n```\n\n----------------------------------------\n\nTITLE: Canvas Context State Management in JavaScript\nDESCRIPTION: Example showing best practices for managing canvas context state using save() and restore() within a try-finally block. This ensures proper context state restoration even when errors occur.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/canvas-rendering-target.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myRenderingFunction(scope) {\n    const ctx = scope.context;\n\n    // save the current state of the context to the stack\n    ctx.save();\n\n    try {\n        // example code\n        scope.context.beginPath();\n        scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n        scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n        scope.context.fill();\n    } finally {\n        // restore the saved context from the stack\n        ctx.restore();\n    }\n}\n\ntarget.useMediaCoordinateSpace(scope => {\n    myRenderingFunction(scope);\n    myOtherRenderingFunction(scope);\n    /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Left-Right Chart Navigation\nDESCRIPTION: Implements horizontal scrolling in the chart using the arrow keys. This creates a shiftChart function that adjusts the chart's scroll position based on arrow key presses.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/keyboard.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction shiftChart(diff) {\n    const currentPos = chart.timeScale().scrollPosition();\n    chart.timeScale().scrollToPosition(currentPos + diff, false);\n}\n\nchartContainer.addEventListener('keydown', event => {\n    switch (event.key) {\n    case 'ArrowLeft':\n        shiftChart(-10);\n        break;\n    case 'ArrowRight':\n        shiftChart(10);\n        break;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Solid Background Color in Lightweight Charts v4\nDESCRIPTION: Shows how to set a solid background color for a chart in v4, using the new 'background' property instead of the removed 'backgroundColor'.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v3-to-v4.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    layout: {\n        background: {\n            type: ColorType.Solid,\n            color: 'red',\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Drawing with Bitmap Coordinate Space in JavaScript\nDESCRIPTION: Example demonstrating how to use useBitmapCoordinateSpace to draw a filled rectangle using bitmap dimensions. The code shows how to access the scope object and utilize bitmap sizing for pixel-perfect rendering.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/canvas-rendering-target.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// target is an instance of CanvasRenderingTarget2D\ntarget.useBitmapCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.bitmapSize.width, scope.bitmapSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Scale Ticks Visibility in Lightweight Charts v4\nDESCRIPTION: Demonstrates how to configure the visibility of price scale ticks in Lightweight Charts v4, using the new ticksVisible property instead of the deprecated drawTicks option.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    leftPriceScale: {\n        ticksVisible: false,\n    },\n    rightPriceScale: {\n        ticksVisible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Price Scale - Legacy Method\nDESCRIPTION: Shows the deprecated way of configuring the left price scale position in Lightweight Charts v2.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v2-to-v3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    priceScale: {\n        position: 'left',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Series in JavaScript\nDESCRIPTION: Shows how to create an overlay series in v3, replacing the v2 method. Instead of using the 'overlay' property, v3 uses a common priceScaleId for all overlay series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v2-to-v3.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v2 way\nconst histogramSeries = chart.addHistogramSeries({\n    overlay: true,\n});\n\n// New v3 way\nconst histogramSeries = chart.addHistogramSeries({\n    // or any other _the same_ id for all overlay series\n    priceScaleId: '',\n});\n```\n\n----------------------------------------\n\nTITLE: Running Example Project\nDESCRIPTION: Shell command for installing dependencies to run the example project from the repository.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/ios.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Accessing Price Scales in Lightweight Charts v4\nDESCRIPTION: Illustrates how to access right and left price scales in v4, which now requires explicit scale ID specification.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v3-to-v4.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rightPriceScale = chart.priceScale('right');\nconst leftPriceScale = chart.priceScale('left');\n```\n\n----------------------------------------\n\nTITLE: Manipulating Panes using PaneApi in Lightweight Charts\nDESCRIPTION: Demonstrates how to modify pane height and position using PaneApi methods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/panes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst secondPane = chart.panes()[1];\nsecondPane.setHeight(300);\nsecondPane.moveTo(0);\n```\n\n----------------------------------------\n\nTITLE: Calculating Candlestick Widths in TypeScript\nDESCRIPTION: Two functions that calculate candlestick widths based on bar spacing and pixel ratio. The optimalCandlestickWidth function handles special cases for bar spacings between 2.5 and 4, while the candlestickWidth function ensures proper width alignment with wick widths. The calculations aim to maximize readability while managing potential overlap at smaller spacings.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/pixel-perfect-rendering/widths/candlestick.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction optimalCandlestickWidth(\n    barSpacing: number,\n    pixelRatio: number\n): number {\n    const barSpacingSpecialCaseFrom = 2.5;\n    const barSpacingSpecialCaseTo = 4;\n    const barSpacingSpecialCaseCoeff = 3;\n    if (barSpacing >= barSpacingSpecialCaseFrom && barSpacing <= barSpacingSpecialCaseTo) {\n        return Math.floor(barSpacingSpecialCaseCoeff * pixelRatio);\n    }\n    // coeff should be 1 on small barspacing and go to 0.8 while bar spacing grows\n    const barSpacingReducingCoeff = 0.2;\n    const coeff =\n        1 -\n        (barSpacingReducingCoeff *\n            Math.atan(\n                Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo\n            )) /\n            (Math.PI * 0.5);\n    const res = Math.floor(barSpacing * coeff * pixelRatio);\n    const scaledBarSpacing = Math.floor(barSpacing * pixelRatio);\n    const optimal = Math.min(res, scaledBarSpacing);\n    return Math.max(Math.floor(pixelRatio), optimal);\n}\n\n/**\n * Calculates the candlestick width that the library would use for the current\n * bar spacing.\n * @param barSpacing - bar spacing in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns The width (in bitmap coordinates) that the chart would use to draw a candle body\n */\nexport function candlestickWidth(\n    barSpacing: number,\n    horizontalPixelRatio: number\n): number {\n    let width = optimalCandlestickWidth(barSpacing, horizontalPixelRatio);\n    if (width >= 2) {\n        const wickWidth = Math.floor(horizontalPixelRatio);\n        if (wickWidth % 2 !== width % 2) {\n            width--;\n        }\n    }\n    return width;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Lightweight Charts View\nDESCRIPTION: Creating and adding a Lightweight Charts instance to the view hierarchy.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/ios.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar chart: LightweightCharts!\n\n// ...\nchart = LightweightCharts()\nview.addSubview(chart)\n// ... setup layout\n```\n\n----------------------------------------\n\nTITLE: Multi-Line Watermark Example in v5\nDESCRIPTION: Extended example showing multiple text lines in watermark using the new primitive in v5.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v4-to-v5.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart(container, options);\nconst mainSeries = chart.addSeries(LineSeries);\nmainSeries.setData(generateData());\n\nconst firstPane = chart.panes()[0];\ncreateTextWatermark(firstPane, {\n    horzAlign: 'center',\n    vertAlign: 'center',\n    lines: [\n        {\n            text: 'Hello',\n            color: 'rgba(255,0,0,0.5)',\n            fontSize: 100,\n            fontStyle: 'bold',\n        },\n        {\n            text: 'This is a text watermark',\n            color: 'rgba(0,0,255,0.5)',\n            fontSize: 50,\n            fontStyle: 'italic',\n            fontFamily: 'monospace',\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Safe Canvas Context Handling in JavaScript\nDESCRIPTION: Example demonstrating best practices for handling canvas context state using save() and restore() within a try-finally block. Shows how to properly manage context state when creating custom rendering functions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/canvas-rendering-target.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myRenderingFunction(scope) {\n    const ctx = scope.context;\n\n    // save the current state of the context to the stack\n    ctx.save();\n\n    try {\n        // example code\n        scope.context.beginPath();\n        scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n        scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n        scope.context.fill();\n    } finally {\n        // restore the saved context from the stack\n        ctx.restore();\n    }\n}\n\ntarget.useMediaCoordinateSpace(scope => {\n    myRenderingFunction(scope);\n    myOtherRenderingFunction(scope);\n    /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Series Scale Margins in JavaScript\nDESCRIPTION: Demonstrates how to apply scale margin options to a series' price scale in v4, replacing the deprecated method from v3.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v3-to-v4.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = chart.addLineSeries();\n\nseries.priceScale().applyOptions({\n    scaleMargins: { /* options here */},\n});\n```\n\n----------------------------------------\n\nTITLE: Overlay Series Creation - Old Method\nDESCRIPTION: Previous method for creating an overlay series using the overlay property.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/migrations/from-v2-to-v3.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst histogramSeries = chart.addHistogramSeries({\n    overlay: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Centered Shape Positions in TypeScript\nDESCRIPTION: Utility functions for calculating bitmap positions for centered shapes. Includes functions to determine position and length for shapes centered on a specific coordinate, taking into account pixel ratio and desired dimensions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/pixel-perfect-rendering/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BitmapPositionLength {\n    /** coordinate for use with a bitmap rendering scope */\n    position: number;\n    /** length for use with a bitmap rendering scope */\n    length: number;\n}\n\nfunction centreOffset(lineBitmapWidth: number): number {\n    return Math.floor(lineBitmapWidth * 0.5);\n}\n\n/**\n * Calculates the bitmap position for an item with a desired length (height or width), and centred according to\n * a position coordinate defined in media sizing.\n * @param positionMedia - position coordinate for the bar (in media coordinates)\n * @param pixelRatio - pixel ratio. Either horizontal for x positions, or vertical for y positions\n * @param desiredWidthMedia - desired width (in media coordinates)\n * @returns Position of the start point and length dimension.\n */\nexport function positionsLine(\n    positionMedia: number,\n    pixelRatio: number,\n    desiredWidthMedia: number = 1,\n    widthIsBitmap?: boolean\n): BitmapPositionLength {\n    const scaledPosition = Math.round(pixelRatio * positionMedia);\n    const lineBitmapWidth = widthIsBitmap\n        ? desiredWidthMedia\n        : Math.round(desiredWidthMedia * pixelRatio);\n    const offset = centreOffset(lineBitmapWidth);\n    const position = scaledPosition - offset;\n    return { position, length: lineBitmapWidth };\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing with Media Coordinate Space in Canvas Rendering Target\nDESCRIPTION: Example of using the useMediaCoordinateSpace method to draw a filled rectangle that covers the entire canvas. This uses media dimensions which represent the size of a pixel according to the operating system, simplifying drawing code by abstracting away device pixel ratio considerations.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/canvas-rendering-target.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// target is an instance of CanvasRenderingTarget2D\ntarget.useMediaCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Charts in JavaScript\nDESCRIPTION: Example of creating multiple chart instances using the createChart function.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n\n// ...\n\n// somewhere in your code\nconst firstChart = createChart(document.getElementById('firstContainer'));\nconst secondChart = createChart(document.getElementById('secondContainer'));\n```\n\n----------------------------------------\n\nTITLE: Adding Bar Series to Chart\nDESCRIPTION: Example of creating and adding a bar series to the chart instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/ios.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar series: BarSeries!\n\n// ...\nseries = chart.addBarSeries(options: nil)\n```\n\n----------------------------------------\n\nTITLE: Calculating Dual Point Shape Positions in TypeScript\nDESCRIPTION: Utility function for calculating bitmap positions between two coordinates. Used for drawing shapes that span between two points, such as high and low prices. Handles pixel ratio scaling and ensures proper positioning.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/pixel-perfect-rendering/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Determines the bitmap position and length for a dimension of a shape to be drawn.\n * @param position1Media - media coordinate for the first point\n * @param position2Media - media coordinate for the second point\n * @param pixelRatio - pixel ratio for the corresponding axis (vertical or horizontal)\n * @returns Position of the start point and length dimension.\n */\nexport function positionsBox(\n    position1Media: number,\n    position2Media: number,\n    pixelRatio: number\n): BitmapPositionLength {\n    const scaledPosition1 = Math.round(pixelRatio * position1Media);\n    const scaledPosition2 = Math.round(pixelRatio * position2Media);\n    return {\n        position: Math.min(scaledPosition1, scaledPosition2),\n        length: Math.abs(scaledPosition2 - scaledPosition1) + 1,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Lightweight Charts View\nDESCRIPTION: Creating and adding a Lightweight Charts instance to the view hierarchy.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/ios.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar chart: LightweightCharts!\n\n// ...\nchart = LightweightCharts()\nview.addSubview(chart)\n// ... setup layout\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Specific Time Zone using date-fns-tz Library\nDESCRIPTION: This function uses the date-fns-tz library to convert a timestamp to a specific time zone. It offers better performance than the Date API approach but requires an additional dependency.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/time-zones.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utcToZonedTime } from 'date-fns-tz';\n\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = utcToZonedTime(new Date(originalTime * 1000), timeZone);\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Series Markers in v4\nDESCRIPTION: Example showing how markers were managed directly through the series instance in v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v4-to-v5.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Markers were directly managed through the series instance\nseries.setMarkers([\n    {\n        time: '2019-04-09',\n        position: 'aboveBar',\n        color: 'black',\n        shape: 'arrowDown',\n    },\n]);\n\n// Getting markers\nconst markers = series.markers();\n```\n\n----------------------------------------\n\nTITLE: Calculating Full Bar Width in TypeScript for TradingView Lightweight Charts\nDESCRIPTION: This function calculates the position and width of a bar to fully occupy its space on the x-axis. It takes into account the bar's x-coordinate, half of the bar spacing, and the horizontal pixel ratio. The function returns an object with the bitmap position and length for rendering.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/pixel-perfect-rendering/widths/full-bar-width.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BitmapPositionLength {\n    /** coordinate for use with a bitmap rendering scope */\n    position: number;\n    /** length for use with a bitmap rendering scope */\n    length: number;\n}\n\n/**\n * Calculates the position and width which will completely full the space for the bar.\n * Useful if you want to draw something that will not have any gaps between surrounding bars.\n * @param xMedia - x coordinate of the bar defined in media sizing\n * @param halfBarSpacingMedia - half the width of the current barSpacing (un-rounded)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns position and width which will completely full the space for the bar\n */\nexport function fullBarWidth(\n    xMedia: number,\n    halfBarSpacingMedia: number,\n    horizontalPixelRatio: number\n): BitmapPositionLength {\n    const fullWidthLeftMedia = xMedia - halfBarSpacingMedia;\n    const fullWidthRightMedia = xMedia + halfBarSpacingMedia;\n    const fullWidthLeftBitmap = Math.round(\n        fullWidthLeftMedia * horizontalPixelRatio\n    );\n    const fullWidthRightBitmap = Math.round(\n        fullWidthRightMedia * horizontalPixelRatio\n    );\n    const fullWidthBitmap = fullWidthRightBitmap - fullWidthLeftBitmap;\n    return {\n        position: fullWidthLeftBitmap,\n        length: fullWidthBitmap,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Notice for v3.5.0\nDESCRIPTION: Important notice about series rendering order changes in version 3.5.0. Series are now displayed in order of creation rather than reversed order.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n**A note about rendering order of series, which might be interpret as a bug or breaking change since this release**\n\nThis is not really a breaking change, but might be interpret like that. In [#794](https://github.com/tradingview/lightweight-charts/issues/794) we've fixed the wrong order of series, thus now all series will be displayed in opposite order (they will be displayed in order of creating now; previously they were displayed in reversed order).\n\nTo fix that, just change the order of creating the series (thus instead of create series A, then series B create series B first and then series A) - see [#812](https://github.com/tradingview/lightweight-charts/issues/812).\n```\n\n----------------------------------------\n\nTITLE: Skeleton Structure for Chart and Series Components\nDESCRIPTION: This code snippet provides a skeleton structure for creating Chart and Series components using React hooks, context, and refs. It demonstrates how to handle component lifecycles and expose methods to parent components.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/react/02-advanced.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useImperativeHandle, useRef, createContext, forwardRef } from 'react';\n\nconst Context = createContext();\n\nexport const MainComponent = props =>\n    // Creates the first reference and instanciate a ParentComponent\n    (\n        <div ref={chartReference}>\n            <ParentComponent {...props} container={container} />\n        </div>\n    );\n\nexport const ParentComponent = forwardRef((props, ref) => {\n    const internalRef = useRef({\n        method1() {\n            // This function would be responsible for creating the chart for instance\n        },\n        methodn() {\n            // This function would be responsible for cleaning up the chart\n        },\n    });\n\n    // this effect will be triggered in position 3\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 1\n        }\n    , []);\n\n    // this effect will be triggered in position 4\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 2\n        }\n    , []);\n\n    useImperativeHandle(ref, () => {\n        // That's the hook responsible for exposing part of/entirety of internalRef\n    }, []);\n\n    // Following bit is to propagate all props & internalRef object down to children\n    return (\n        <Context.Provider value={internalRef.current}>\n            {props.children}\n        </Context.Provider>\n    );\n});\nParentComponent.displayName = 'ParentComponent';\n\nexport const ChildComponent = forwardRef((props, ref) => {\n    const internalRef = useRef({\n        method1() {\n            // This function would be responsible for creating a series\n        },\n        methodn() {\n            // This function would be responsible for removing it\n        },\n    });\n\n    // this effect will be triggered in position 1\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 3\n        }\n    , []);\n\n    // this effect will be triggered in position 2\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 4\n        }\n    , []);\n\n    useImperativeHandle(ref, () => {\n        // That's the hook responsible for exposing part of/entirety of internalRef\n    }, []);\n\n    // Following bit is to propagate all props & internalRef object down to children\n    return (\n        <Context.Provider value={internalRef.current}>\n            {props.children}\n        </Context.Provider>\n    );\n});\nChildComponent.displayName = 'ChildComponent';\n```\n\n----------------------------------------\n\nTITLE: Calculating Centered Shape Positions in TypeScript\nDESCRIPTION: Utility functions for calculating bitmap positions for centered shapes. Includes logic for converting media coordinates to bitmap coordinates and handling pixel ratio scaling. Used for drawing centered lines and shapes at specific coordinates.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/pixel-perfect-rendering/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BitmapPositionLength {\n    /** coordinate for use with a bitmap rendering scope */\n    position: number;\n    /** length for use with a bitmap rendering scope */\n    length: number;\n}\n\nfunction centreOffset(lineBitmapWidth: number): number {\n    return Math.floor(lineBitmapWidth * 0.5);\n}\n\n/**\n * Calculates the bitmap position for an item with a desired length (height or width), and centred according to\n * a position coordinate defined in media sizing.\n * @param positionMedia - position coordinate for the bar (in media coordinates)\n * @param pixelRatio - pixel ratio. Either horizontal for x positions, or vertical for y positions\n * @param desiredWidthMedia - desired width (in media coordinates)\n * @returns Position of the start point and length dimension.\n */\nexport function positionsLine(\n    positionMedia: number,\n    pixelRatio: number,\n    desiredWidthMedia: number = 1,\n    widthIsBitmap?: boolean\n): BitmapPositionLength {\n    const scaledPosition = Math.round(pixelRatio * positionMedia);\n    const lineBitmapWidth = widthIsBitmap\n        ? desiredWidthMedia\n        : Math.round(desiredWidthMedia * pixelRatio);\n    const offset = centreOffset(lineBitmapWidth);\n    const position = scaledPosition - offset;\n    return { position, length: lineBitmapWidth };\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Bitmap Positions for Centered Shapes in TypeScript\nDESCRIPTION: This function calculates the bitmap position for an item with a desired length, centered according to a position coordinate defined in media sizing. It's useful for drawing centered shapes like horizontal or vertical lines at specific coordinates.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/pixel-perfect-rendering/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BitmapPositionLength {\n    /** coordinate for use with a bitmap rendering scope */\n    position: number;\n    /** length for use with a bitmap rendering scope */\n    length: number;\n}\n\nfunction centreOffset(lineBitmapWidth: number): number {\n    return Math.floor(lineBitmapWidth * 0.5);\n}\n\n/**\n * Calculates the bitmap position for an item with a desired length (height or width), and centred according to\n * a position coordinate defined in media sizing.\n * @param positionMedia - position coordinate for the bar (in media coordinates)\n * @param pixelRatio - pixel ratio. Either horizontal for x positions, or vertical for y positions\n * @param desiredWidthMedia - desired width (in media coordinates)\n * @returns Position of the start point and length dimension.\n */\nexport function positionsLine(\n    positionMedia: number,\n    pixelRatio: number,\n    desiredWidthMedia: number = 1,\n    widthIsBitmap?: boolean\n): BitmapPositionLength {\n    const scaledPosition = Math.round(pixelRatio * positionMedia);\n    const lineBitmapWidth = widthIsBitmap\n        ? desiredWidthMedia\n        : Math.round(desiredWidthMedia * pixelRatio);\n    const offset = centreOffset(lineBitmapWidth);\n    const position = scaledPosition - offset;\n    return { position, length: lineBitmapWidth };\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data for a Candlestick Chart\nDESCRIPTION: This code generates sample data for a candlestick chart by calling a provided function 'generateCandlestickData' and assigning the result to a variable. This data will be used to populate the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/creating-a-chart.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the Lightweight Chart within the container element\nconst chart = LightweightCharts.createChart(\n    document.getElementById('container')\n);\n\n// highlight-start\n// Generate sample data to use within a candlestick series\nconst candleStickData = generateCandlestickData();\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Applying Time Scale Options in Lightweight Charts JavaScript\nDESCRIPTION: Shows two equivalent methods to apply options to the time scale: directly through the time scale API or via the chart API with a timeScale sub-object.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/time-scale.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`ITimeScaleApi.applyOptions`](/api/interfaces/ITimeScaleApi.md#applyoptions) or [`IChartApi.applyOptions`](/api/interfaces/IChartApi.md#applyoptions) with `timeScale` sub-object in passed options\n```\n\n----------------------------------------\n\nTITLE: Migrating from backgroundColor to background Property\nDESCRIPTION: Demonstrates how to migrate from the removed backgroundColor property to the new background property with solid color type.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v3-to-v4.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    layout: {\n        backgroundColor: 'red',\n    },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    layout: {\n        background: {\n            type: ColorType.Solid,\n            color: 'red',\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Chart Sections for Primitive Drawing\nDESCRIPTION: This code snippet demonstrates the various sections of the chart where a Primitive can draw, including the main pane, price axis pane, and time axis pane.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/series-primitives.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{sectionsExplainerCode}\n```\n\n----------------------------------------\n\nTITLE: Handling Time Values in Event Subscriptions and Formatters\nDESCRIPTION: Shows how to handle time values in event subscriptions and formatters in Lightweight Charts v4, where the type of outbound time values has been changed to match inbound time values.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nseries.setData([\n    { time: '2001-01-01', value: 1 },\n]);\n\nchart.applyOptions({\n    localization: {\n        timeFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n    timeScale: {\n        tickMarkFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n});\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.time); // will be '2001-01-01' if you hover the bar above\n});\n\nchart.subscribeClick(param => {\n    console.log(param.time); // will be '2001-01-01' if you click on the bar above\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Price Scale Position - New Method\nDESCRIPTION: Updated method for changing price scale position and visibility after chart creation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    leftPriceScale: {\n        visible: true,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n\nmainSeries.applyOptions({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Grid and Crosshair Line Widths in TypeScript\nDESCRIPTION: Two utility functions that calculate the width of grid and crosshair lines based on the device's horizontal pixel ratio. The functions handle both bitmap and media sizing, ensuring proper line rendering across different display densities.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/pixel-perfect-rendering/widths/crosshair.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Default grid / crosshair line width in Bitmap sizing\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns default grid / crosshair line width in Bitmap sizing\n */\nexport function gridAndCrosshairBitmapWidth(\n    horizontalPixelRatio: number\n): number {\n    return Math.max(1, Math.floor(horizontalPixelRatio));\n}\n\n/**\n * Default grid / crosshair line width in Media sizing\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns default grid / crosshair line width in Media sizing\n */\nexport function gridAndCrosshairMediaWidth(\n    horizontalPixelRatio: number\n): number {\n    return (\n        gridAndCrosshairBitmapWidth(horizontalPixelRatio) / horizontalPixelRatio\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Price Scale Position Change - Old Method\nDESCRIPTION: Deprecated method for changing price scale position after chart creation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/migrations/from-v2-to-v3.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    priceScale: {\n        position: 'left',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Time Scale API in Lightweight Charts JavaScript\nDESCRIPTION: Demonstrates how to retrieve the ITimeScaleApi object from the chart instance. This API provides methods to interact with and control the time scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/time-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`IChartApi.timeScale`](/api/interfaces/IChartApi.md#timescale)\n```\n\n----------------------------------------\n\nTITLE: Custom Series Interface Properties\nDESCRIPTION: Key interface definitions for implementing custom series in TradingView lightweight-charts. These properties define the structure and behavior of custom series views.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/custom_series.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ICustomSeriesPaneView {\n  renderer: ICustomSeriesPaneRenderer;\n  update(data: PaneRendererCustomData, seriesOptions: any): void;\n  priceValueBuilder: (item: CustomData) => number[];\n  isWhitespace: (data: CustomData) => boolean;\n  defaultOptions: any;\n  destroy(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Bitmap Positions for Dual Point Shapes in TypeScript\nDESCRIPTION: This function determines the bitmap position and length for a dimension of a shape to be drawn between two coordinates. It's useful for drawing shapes that span between two points, such as high and low prices.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/pixel-perfect-rendering/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Determines the bitmap position and length for a dimension of a shape to be drawn.\n * @param position1Media - media coordinate for the first point\n * @param position2Media - media coordinate for the second point\n * @param pixelRatio - pixel ratio for the corresponding axis (vertical or horizontal)\n * @returns Position of the start point and length dimension.\n */\nexport function positionsBox(\n    position1Media: number,\n    position2Media: number,\n    pixelRatio: number\n): BitmapPositionLength {\n    const scaledPosition1 = Math.round(pixelRatio * position1Media);\n    const scaledPosition2 = Math.round(pixelRatio * position2Media);\n    return {\n        position: Math.min(scaledPosition1, scaledPosition2),\n        length: Math.abs(scaledPosition2 - scaledPosition1) + 1,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating React Component Lifecycle with Hooks\nDESCRIPTION: This snippet illustrates the order of execution for useEffect hooks in parent and child components, showing how they are triggered and cleaned up in React.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/react/02-advanced.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from 'react';\n\nexport const ParentComponent = () => {\n    // this effect will be triggered in position 3\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 1\n        }\n    , []);\n\n    // this effect will be triggered in position 4\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 2\n        }\n    , []);\n\n    // The parent will then return Following bit is to propagate all props & internalRef object down to children\n    return (\n        <ChildComponent />\n    );\n};\nParentComponent.displayName = 'ParentComponent';\n\nexport const ChildComponent = () => {\n    // this effect will be triggered in position 1\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 3\n        }\n    , []);\n\n    // this effect will be triggered in position 2\n    useEffect(() =>\n        () => {\n            // this clean up will be triggered in position 4\n        }\n    , []);\n\n    return (\n        <div />\n    );\n};\nChildComponent.displayName = 'ChildComponent';\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Specified Time Zone using Date API\nDESCRIPTION: A utility function that converts UTC timestamps to a specified time zone using JavaScript's built-in Date API. Takes original time in seconds and target time zone as parameters.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/time-zones.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = new Date(new Date(originalTime * 1000).toLocaleString('en-US', { timeZone }));\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Specifying PriceScale ID in priceScale() Method\nDESCRIPTION: Shows how to update code to explicitly specify price scale ID in the priceScale() method, which is now required in v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v3-to-v4.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst priceScale = chart.priceScale();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst rightPriceScale = chart.priceScale('right');\nconst leftPriceScale = chart.priceScale('left');\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Scale Ticks Visibility in Lightweight Charts v4\nDESCRIPTION: Demonstrates how to configure the visibility of price scale ticks using the renamed 'ticksVisible' option in v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v3-to-v4.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    leftPriceScale: {\n        ticksVisible: false,\n    },\n    rightPriceScale: {\n        ticksVisible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Time Value Types in Lightweight Charts v4\nDESCRIPTION: Demonstrates how to use helper functions to check the type of time values returned by event callbacks in v4, which can now be timestamps, business day objects, or ISO strings.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v3-to-v4.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    createChart,\n    isUTCTimestamp,\n    isBusinessDay,\n} from 'lightweight-charts';\n\nconst chart = createChart(document.body);\n\nchart.subscribeClick(param => {\n    if (param.time === undefined) {\n        // the time is undefined, i.e. there is no any data point where a time could be received from\n        return;\n    }\n\n    if (isUTCTimestamp(param.time)) {\n        // param.time is UTCTimestamp\n    } else if (isBusinessDay(param.time)) {\n        // param.time is a BusinessDay object\n    } else {\n        // param.time is a business day string in ISO format, e.g. `'2010-01-01'`\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Price Scale Position - Old Method\nDESCRIPTION: Previous method for changing price scale position after chart creation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    priceScale: {\n        position: 'left',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Grid and Crosshair Line Widths in TypeScript\nDESCRIPTION: Provides two utility functions for calculating line widths for grid lines and crosshairs. The first function calculates width in bitmap sizing, ensuring a minimum of 1 pixel. The second function converts the bitmap width to media sizing by dividing by the pixel ratio.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/pixel-perfect-rendering/widths/crosshair.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Default grid / crosshair line width in Bitmap sizing\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns default grid / crosshair line width in Bitmap sizing\n */\nexport function gridAndCrosshairBitmapWidth(\n    horizontalPixelRatio: number\n): number {\n    return Math.max(1, Math.floor(horizontalPixelRatio));\n}\n\n/**\n * Default grid / crosshair line width in Media sizing\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns default grid / crosshair line width in Media sizing\n */\nexport function gridAndCrosshairMediaWidth(\n    horizontalPixelRatio: number\n): number {\n    return (\n        gridAndCrosshairBitmapWidth(horizontalPixelRatio) / horizontalPixelRatio\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Final Candlestick Width in TypeScript for TradingView Charts\nDESCRIPTION: This function calculates the final candlestick width that the library would use for the current bar spacing. It uses the optimalCandlestickWidth function and applies additional adjustments to ensure consistency with wick width. The function takes bar spacing and horizontal pixel ratio as inputs.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/pixel-perfect-rendering/widths/candlestick.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Calculates the candlestick width that the library would use for the current\n * bar spacing.\n * @param barSpacing - bar spacing in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns The width (in bitmap coordinates) that the chart would use to draw a candle body\n */\nexport function candlestickWidth(\n    barSpacing: number,\n    horizontalPixelRatio: number\n): number {\n    let width = optimalCandlestickWidth(barSpacing, horizontalPixelRatio);\n    if (width >= 2) {\n        const wickWidth = Math.floor(horizontalPixelRatio);\n        if (wickWidth % 2 !== width % 2) {\n            width--;\n        }\n    }\n    return width;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bar Series Data\nDESCRIPTION: Adding financial data points to the bar series with time, open, high, low, and close values.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/ios.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet data = [\n    BarData(time: .string(\"2018-10-19\"), open: 180.34, high: 180.99, low: 178.57, close: 179.85),\n    BarData(time: .string(\"2018-10-22\"), open: 180.82, high: 181.40, low: 177.56, close: 178.75),\n    BarData(time: .string(\"2018-10-23\"), open: 175.77, high: 179.49, low: 175.44, close: 178.53),\n    BarData(time: .string(\"2018-10-24\"), open: 178.58, high: 182.37, low: 176.31, close: 176.97),\n    BarData(time: .string(\"2018-10-25\"), open: 177.52, high: 180.50, low: 176.83, close: 179.07)\n]\n\n// ...\nseries.setData(data: data)\n```\n\n----------------------------------------\n\nTITLE: Calculating Full Bar Width for Seamless Rendering in TypeScript\nDESCRIPTION: This function calculates the position and width needed to completely fill the space for a bar without gaps between surrounding bars. It takes the x coordinate, half bar spacing in media units, and horizontal pixel ratio to determine the precise bitmap position and length for rendering.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/pixel-perfect-rendering/widths/full-bar-width.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BitmapPositionLength {\n    /** coordinate for use with a bitmap rendering scope */\n    position: number;\n    /** length for use with a bitmap rendering scope */\n    length: number;\n}\n\n/**\n * Calculates the position and width which will completely full the space for the bar.\n * Useful if you want to draw something that will not have any gaps between surrounding bars.\n * @param xMedia - x coordinate of the bar defined in media sizing\n * @param halfBarSpacingMedia - half the width of the current barSpacing (un-rounded)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns position and width which will completely full the space for the bar\n */\nexport function fullBarWidth(\n    xMedia: number,\n    halfBarSpacingMedia: number,\n    horizontalPixelRatio: number\n): BitmapPositionLength {\n    const fullWidthLeftMedia = xMedia - halfBarSpacingMedia;\n    const fullWidthRightMedia = xMedia + halfBarSpacingMedia;\n    const fullWidthLeftBitmap = Math.round(\n        fullWidthLeftMedia * horizontalPixelRatio\n    );\n    const fullWidthRightBitmap = Math.round(\n        fullWidthRightMedia * horizontalPixelRatio\n    );\n    const fullWidthBitmap = fullWidthRightBitmap - fullWidthLeftBitmap;\n    return {\n        position: fullWidthLeftBitmap,\n        length: fullWidthBitmap,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Implementation for Time Scale Customization\nDESCRIPTION: The complete HTML implementation for this step of the tutorial, including all previously built customizations plus the new time scale adjustments. This demonstrates the entire chart configuration in context.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/time-scale.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Lightweight Charts Tutorial - Step 6</title>\n    <!-- Load the required package to create the chart -->\n    <script src=\"https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js\"></script>\n    <style>\n        #container {\n            font-family: -apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif;\n            height: 400px;\n            width: 600px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"container\"></div>\n    <script>\n        const container = document.getElementById('container');\n\n        // Creating a chart\n        const chart = LightweightCharts.createChart(container, {\n            layout: {\n                background: { color: '#222' },\n                textColor: '#DDD',\n            },\n            grid: {\n                vertLines: { color: '#444' },\n                horzLines: { color: '#444' },\n            },\n        });\n\n        // Setting the border color for the vertical axis\n        chart.priceScale('right').applyOptions({\n            borderColor: '#71649C',\n        });\n\n        // Setting the border color for the horizontal axis\n        chart.timeScale().applyOptions({\n            borderColor: '#71649C',\n        });\n\n        // Adjust the starting bar width (essentially the horizontal zoom)\n        chart.timeScale().applyOptions({\n            barSpacing: 10,\n        });\n\n        // Generate sample data\n        const generateBarsData = () => {\n            const data = [];\n            const SECONDS_IN_DAY = 24 * 60 * 60;\n            const today = new Date();\n            today.setHours(0, 0, 0, 0);\n            const todayInSeconds = Math.floor(today.getTime() / 1000);\n            let dayOffset = -10; // Start from 10 days ago\n\n            for (let i = 0; i < 20; i++) { // Generate 20 days of data\n                const timestamp = todayInSeconds + (dayOffset + i) * SECONDS_IN_DAY;\n                const baseValue = 50 + Math.random() * 50;\n                const openValue = baseValue * (1 + (Math.random() * 0.1 - 0.05));\n                const highValue = openValue * (1 + Math.random() * 0.1);\n                const lowValue = openValue * (1 - Math.random() * 0.1);\n                const closeValue = openValue * (1 + (Math.random() * 0.2 - 0.1));\n                const volumeValue = 1000000 + Math.random() * 1000000; // Random volume value\n\n                data.push({\n                    time: timestamp,\n                    open: openValue,\n                    high: highValue,\n                    low: lowValue,\n                    close: closeValue,\n                    volume: volumeValue,\n                });\n            }\n\n            return data;\n        };\n\n        const data = generateBarsData();\n\n        // Create a candlestick series\n        const mainSeries = chart.addCandlestickSeries({\n            upColor: '#26a69a',\n            downColor: '#ef5350',\n            borderVisible: false,\n            wickUpColor: '#26a69a',\n            wickDownColor: '#ef5350',\n        });\n\n        // Set the data\n        mainSeries.setData(data);\n\n        // Create a histogram series for volumes\n        const volumeSeries = chart.addHistogramSeries({\n            color: '#26a69a',\n            priceFormat: {\n                type: 'volume',\n            },\n            priceScaleId: '', // Don't attach to any price scale\n            scaleMargins: {\n                top: 0.85, // Positioning the volume series at the bottom\n                bottom: 0,\n            },\n        });\n\n        // Format the volume data for the histogram series\n        const volumeData = data.map(item => ({\n            time: item.time,\n            value: item.volume,\n            color: item.close > item.open ? '#26a69a' : '#ef5350',\n        }));\n\n        // Set the volume data\n        volumeSeries.setData(volumeData);\n\n        // Fit all the data into the visible range\n        chart.timeScale().fitContent();\n    </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing TimeScaleApi in TypeScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the ITimeScaleApi interface from a chart instance. It allows access to time scale-specific methods and properties.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/time-scale.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst timeScale = chart.timeScale();\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Scale Ticks Visibility in Lightweight Charts v4\nDESCRIPTION: Demonstrates how to configure the visibility of price scale ticks using the new 'ticksVisible' option, which replaces 'drawTicks' in v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v3-to-v4.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    leftPriceScale: {\n        ticksVisible: false,\n    },\n    rightPriceScale: {\n        ticksVisible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Series Data in Mouse Event Handlers\nDESCRIPTION: Shows how to access series data in mouse event handlers using the new seriesData property instead of the removed seriesPrices property in Lightweight Charts v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlineSeries.setData([{ time: '2001-01-01', value: 1 }]);\nbarSeries.setData([{ time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 }]);\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.seriesData.get(lineSeries)); // { time: '2001-01-01', value: 1 } or undefined\n    console.log(param.seriesData.get(barSeries)); // { time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 } or undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Time Value Types in Lightweight Charts v4\nDESCRIPTION: Demonstrates how to use helper functions to check and handle different time value types returned by the API in v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v3-to-v4.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    createChart,\n    isUTCTimestamp,\n    isBusinessDay,\n} from 'lightweight-charts';\n\nconst chart = createChart(document.body);\n\nchart.subscribeClick(param => {\n    if (param.time === undefined) {\n        // the time is undefined, i.e. there is no any data point where a time could be received from\n        return;\n    }\n\n    if (isUTCTimestamp(param.time)) {\n        // param.time is UTCTimestamp\n    } else if (isBusinessDay(param.time)) {\n        // param.time is a BusinessDay object\n    } else {\n        // param.time is a business day string in ISO format, e.g. `'2010-01-01'`\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Series - Old Method\nDESCRIPTION: Previous method for creating an overlay series using the overlay property.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst histogramSeries = chart.addHistogramSeries({\n    overlay: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Time Scale Options Together in JavaScript\nDESCRIPTION: This code shows how to apply multiple time scale options in a single call, setting both the border color and bar spacing simultaneously. This approach can lead to cleaner, more efficient code.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/time-scale.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of applying both properties in a single call\nchart.timeScale().applyOptions({\n    borderColor: '#71649C',\n    barSpacing: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Drawing with Media Coordinate Space in JavaScript\nDESCRIPTION: Example showing how to use useMediaCoordinateSpace to draw a filled rectangle using media dimensions. The code shows how to access media scope properties and use the canvas context for rendering.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/canvas-rendering-target.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// target is an instance of CanvasRenderingTarget2D\ntarget.useMediaCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a Histogram Series in Kotlin\nDESCRIPTION: Shows how to create a list of HistogramData and WhitespaceData objects and set them as data for the histogram series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/android.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = listOf(\n    HistogramData(Time.BusinessDay(2019, 6, 11), 40.01f),\n    HistogramData(Time.BusinessDay(2019, 6, 12), 52.38f),\n    HistogramData(Time.BusinessDay(2019, 6, 13), 36.30f),\n    HistogramData(Time.BusinessDay(2019, 6, 14), 34.48f),\n    WhitespaceData(Time.BusinessDay(2019, 6, 15)),\n    WhitespaceData(Time.BusinessDay(2019, 6, 16)),\n    HistogramData(Time.BusinessDay(2019, 6, 17), 41.50f),\n    HistogramData(Time.BusinessDay(2019, 6, 18), 34.82f)\n)\nhistogramSeries.setData(data)\n```\n\n----------------------------------------\n\nTITLE: Calculating Full Bar Width in TypeScript\nDESCRIPTION: A utility function that calculates the position and width for completely filling the space for a bar without gaps. The function takes media coordinates, bar spacing, and pixel ratio into account to ensure pixel-perfect rendering.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/pixel-perfect-rendering/widths/full-bar-width.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BitmapPositionLength {\n    /** coordinate for use with a bitmap rendering scope */\n    position: number;\n    /** length for use with a bitmap rendering scope */\n    length: number;\n}\n\n/**\n * Calculates the position and width which will completely full the space for the bar.\n * Useful if you want to draw something that will not have any gaps between surrounding bars.\n * @param xMedia - x coordinate of the bar defined in media sizing\n * @param halfBarSpacingMedia - half the width of the current barSpacing (un-rounded)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns position and width which will completely full the space for the bar\n */\nexport function fullBarWidth(\n    xMedia: number,\n    halfBarSpacingMedia: number,\n    horizontalPixelRatio: number\n): BitmapPositionLength {\n    const fullWidthLeftMedia = xMedia - halfBarSpacingMedia;\n    const fullWidthRightMedia = xMedia + halfBarSpacingMedia;\n    const fullWidthLeftBitmap = Math.round(\n        fullWidthLeftMedia * horizontalPixelRatio\n    );\n    const fullWidthRightBitmap = Math.round(\n        fullWidthRightMedia * horizontalPixelRatio\n    );\n    const fullWidthBitmap = fullWidthRightBitmap - fullWidthLeftBitmap;\n    return {\n        position: fullWidthLeftBitmap,\n        length: fullWidthBitmap,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Chart Methods in Vue.js Component\nDESCRIPTION: This snippet demonstrates how to expose chart methods to the component consumer using Vue's defineExpose hook.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/vuejs/01-wrapper.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineExpose } from 'vue';\n\n// A simple method to call `fitContent` on the time scale\nconst fitContent = () => {\n    if (!chart) {\n        return;\n    }\n    chart.timeScale().fitContent();\n};\n\n// Expose the chart instance via a method\nconst getChart = () => chart;\n\ndefineExpose({ fitContent, getChart });\n```\n\n----------------------------------------\n\nTITLE: Price Scale Property Reference in Markdown\nDESCRIPTION: References to the main price scale configuration options and API methods in the LightweightCharts library. Includes options for left, right, and overlay price scales along with methods to access and manipulate them.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/price-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nleftPriceScale\nrightPriceScale\noverlayPriceScales\nIChartApi.priceScale\nISeriesApi.priceScale\npriceScaleId\nvisible\nIPriceScaleApi\nIPriceScaleApi.id\n```\n\n----------------------------------------\n\nTITLE: Using hoveredObjectId in Mouse Events in Lightweight Charts v4\nDESCRIPTION: Demonstrates the use of the renamed 'hoveredObjectId' property (formerly 'hoveredMarkerId') in mouse event callbacks.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v3-to-v4.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchart.subscribeCrosshairMove(param => {\n    console.log(param.hoveredObjectId);\n});\n\nchart.subscribeClick(param => {\n    console.log(param.hoveredObjectId);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Price Scales in Lightweight Charts v4\nDESCRIPTION: Illustrates how to explicitly specify the price scale ID when accessing price scales in v4, a change from the implicit behavior in v3.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v3-to-v4.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rightPriceScale = chart.priceScale('right');\nconst leftPriceScale = chart.priceScale('left');\n```\n\n----------------------------------------\n\nTITLE: Setting Solid Background Color in Lightweight Charts v4\nDESCRIPTION: Shows how to set a solid background color for a chart in v4, using the new 'background' property instead of the removed 'backgroundColor'.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v3-to-v4.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    layout: {\n        background: {\n            type: ColorType.Solid,\n            color: 'red',\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring No Price Scale - Legacy Method\nDESCRIPTION: Shows the old way of hiding price scales in v2.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v2-to-v3.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    priceScale: {\n        position: 'none',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Properties in Lightweight Charts Web Component\nDESCRIPTION: Demonstrates how to read and set properties on an instance of the custom Lightweight Charts web component using JavaScript.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Get a reference to an instance of the custom element on the page\nconst myChartElement = document.querySelector('lightweight-chart');\n\n// read the data property\nconst currentData = myChartElement.data;\n\n// set the seriesOptions property\nmyChartElement.seriesOptions = {\n    color: 'blue',\n};\n```\n\n----------------------------------------\n\nTITLE: Drawing with Media Coordinate Space in JavaScript\nDESCRIPTION: Example showing how to use useMediaCoordinateSpace to draw a filled rectangle using media dimensions. The code demonstrates accessing the scope object and working with media sizing for simpler coordinate calculations.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/canvas-rendering-target.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// target is an instance of CanvasRenderingTarget2D\ntarget.useMediaCoordinateSpace(scope => {\n    // scope is an instance of BitmapCoordinatesRenderingScope\n\n    // example of drawing a filled rectangle which fills the canvas\n    scope.context.beginPath();\n    scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n    scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n    scope.context.fill();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Bar Series Data\nDESCRIPTION: Example of adding bar data to a series with time and OHLC price values.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/ios.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet data = [\n    BarData(time: .string(\"2018-10-19\"), open: 180.34, high: 180.99, low: 178.57, close: 179.85),\n    BarData(time: .string(\"2018-10-22\"), open: 180.82, high: 181.40, low: 177.56, close: 178.75),\n    BarData(time: .string(\"2018-10-23\"), open: 175.77, high: 179.49, low: 175.44, close: 178.53),\n    BarData(time: .string(\"2018-10-24\"), open: 178.58, high: 182.37, low: 176.31, close: 176.97),\n    BarData(time: .string(\"2018-10-25\"), open: 177.52, high: 180.50, low: 176.83, close: 179.07)\n]\n\n// ...\nseries.setData(data: data)\n```\n\n----------------------------------------\n\nTITLE: Column Width and Position Calculation Functions in TypeScript\nDESCRIPTION: A comprehensive set of functions for calculating histogram column widths and positions. Includes utilities for determining column spacing, desired widths, and position adjustments with pixel-perfect precision. Handles both in-place and new array calculations with support for device pixel ratios.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/pixel-perfect-rendering/widths/columns.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst alignToMinimalWidthLimit = 4;\nconst showSpacingMinimalBarWidth = 1;\n\n/**\n * Spacing gap between columns.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns Spacing gap between columns (in Bitmap coordinates)\n */\nfunction columnSpacing(barSpacingMedia: number, horizontalPixelRatio: number) {\n    return Math.ceil(barSpacingMedia * horizontalPixelRatio) <=\n        showSpacingMinimalBarWidth\n        ? 0\n        : Math.max(1, Math.floor(horizontalPixelRatio));\n}\n\n/**\n * Desired width for columns. This may not be the final width because\n * it may be adjusted later to ensure all columns on screen have a\n * consistent width and gap.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @param spacing - Spacing gap between columns (in Bitmap coordinates). (optional, provide if you have already calculated it)\n * @returns Desired width for column bars (in Bitmap coordinates)\n */\nfunction desiredColumnWidth(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    spacing?: number\n) {\n    return (\n        Math.round(barSpacingMedia * horizontalPixelRatio) -\n        (spacing ?? columnSpacing(barSpacingMedia, horizontalPixelRatio))\n    );\n}\n\ninterface ColumnCommon {\n    /** Spacing gap between columns */\n    spacing: number;\n    /** Shift columns left by one pixel */\n    shiftLeft: boolean;\n    /** Half width of a column */\n    columnHalfWidthBitmap: number;\n    /** horizontal pixel ratio */\n    horizontalPixelRatio: number;\n}\n\n/**\n * Calculated values which are common to all the columns on the screen, and\n * are required to calculate the individual positions.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns calculated values for subsequent column calculations\n */\nfunction columnCommon(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnCommon {\n    const spacing = columnSpacing(barSpacingMedia, horizontalPixelRatio);\n    const columnWidthBitmap = desiredColumnWidth(\n        barSpacingMedia,\n        horizontalPixelRatio,\n        spacing\n    );\n    const shiftLeft = columnWidthBitmap % 2 === 0;\n    const columnHalfWidthBitmap = (columnWidthBitmap - (shiftLeft ? 0 : 1)) / 2;\n    return {\n        spacing,\n        shiftLeft,\n        columnHalfWidthBitmap,\n        horizontalPixelRatio,\n    };\n}\n\ninterface ColumnPosition {\n    left: number;\n    right: number;\n    shiftLeft: boolean;\n}\n\n/**\n * Calculate the position for a column. These values can be later adjusted\n * by a second pass which corrects widths, and shifts columns.\n * @param xMedia - column x position (center) in media coordinates\n * @param columnData - precalculated common values (returned by `columnCommon`)\n * @param previousPosition - result from this function for the previous bar.\n * @returns initial column position\n */\nfunction calculateColumnPosition(\n    xMedia: number,\n    columnData: ColumnCommon,\n    previousPosition: ColumnPosition | undefined\n): ColumnPosition {\n    const xBitmapUnRounded = xMedia * columnData.horizontalPixelRatio;\n    const xBitmap = Math.round(xBitmapUnRounded);\n    const xPositions: ColumnPosition = {\n        left: xBitmap - columnData.columnHalfWidthBitmap,\n        right:\n            xBitmap +\n            columnData.columnHalfWidthBitmap -\n            (columnData.shiftLeft ? 1 : 0),\n        shiftLeft: xBitmap > xBitmapUnRounded,\n    };\n    const expectedAlignmentShift = columnData.spacing + 1;\n    if (previousPosition) {\n        if (xPositions.left - previousPosition.right !== expectedAlignmentShift) {\n            // need to adjust alignment\n            if (previousPosition.shiftLeft) {\n                previousPosition.right = xPositions.left - expectedAlignmentShift;\n            } else {\n                xPositions.left = previousPosition.right + expectedAlignmentShift;\n            }\n        }\n    }\n    return xPositions;\n}\n\nfunction fixPositionsAndReturnSmallestWidth(\n    positions: ColumnPosition[],\n    initialMinWidth: number\n): number {\n    return positions.reduce((smallest: number, position: ColumnPosition) => {\n        if (position.right < position.left) {\n            position.right = position.left;\n        }\n        const width = position.right - position.left + 1;\n        return Math.min(smallest, width);\n    }, initialMinWidth);\n}\n\nfunction fixAlignmentForNarrowColumns(\n    positions: ColumnPosition[],\n    minColumnWidth: number\n) {\n    return positions.map((position: ColumnPosition) => {\n        const width = position.right - position.left + 1;\n        if (width <= minColumnWidth) return position;\n        if (position.shiftLeft) {\n            position.right -= 1;\n        } else {\n            position.left += 1;\n        }\n        return position;\n    });\n}\n\n/**\n * Calculates the column positions and widths for the x positions.\n * This function creates a new array. You may get faster performance using the\n * `calculateColumnPositionsInPlace` function instead\n * @param xMediaPositions - x positions for the bars in media coordinates\n * @param barSpacingMedia - spacing between bars in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns Positions for the columns\n */\nexport function calculateColumnPositions(\n    xMediaPositions: number[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnPosition[] {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    const positions = new Array<ColumnPosition>(xMediaPositions.length);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = 0; i < xMediaPositions.length; i++) {\n        positions[i] = calculateColumnPosition(\n            xMediaPositions[i],\n            common,\n            previous\n        );\n        previous = positions[i];\n    }\n    const initialMinWidth = Math.ceil(barSpacingMedia * horizontalPixelRatio);\n    const minColumnWidth = fixPositionsAndReturnSmallestWidth(\n        positions,\n        initialMinWidth\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        return fixAlignmentForNarrowColumns(positions, minColumnWidth);\n    }\n    return positions;\n}\n\nexport interface ColumnPositionItem {\n    x: number;\n    column?: ColumnPosition;\n}\n\n/**\n * Calculates the column positions and widths for bars using the existing\n * array of items.\n * @param items - bar items which include an `x` property, and will be mutated to contain a column property\n * @param barSpacingMedia - bar spacing in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @param startIndex - start index for visible bars within the items array\n * @param endIndex - end index for visible bars within the items array\n */\nexport function calculateColumnPositionsInPlace(\n    items: ColumnPositionItem[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    startIndex: number,\n    endIndex: number\n): void {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = startIndex; i < Math.min(endIndex, items.length); i++) {\n        items[i].column = calculateColumnPosition(items[i].x, common, previous);\n        previous = items[i].column;\n    }\n    const minColumnWidth = (items as ColumnPositionItem[]).reduce(\n        (smallest: number, item: ColumnPositionItem, index: number) => {\n            if (!item.column || index < startIndex || index > endIndex)\n                return smallest;\n            if (item.column.right < item.column.left) {\n                item.column.right = item.column.left;\n            }\n            const width = item.column.right - item.column.left + 1;\n            return Math.min(smallest, width);\n        },\n        Math.ceil(barSpacingMedia * horizontalPixelRatio)\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        (items as ColumnPositionItem[]).forEach(\n            (item: ColumnPositionItem, index: number) => {\n                if (!item.column || index < startIndex || index > endIndex) return;\n                const width = item.column.right - item.column.left + 1;\n                if (width <= minColumnWidth) return item;\n                if (item.column.shiftLeft) {\n                    item.column.right -= 1;\n                } else {\n                    item.column.left += 1;\n                }\n                return item.column;\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Full Bar Width in TypeScript for Lightweight Charts\nDESCRIPTION: This snippet defines an interface 'BitmapPositionLength' and a function 'fullBarWidth' to calculate the position and width of a bar that fully occupies its space without gaps. It takes into account media coordinates, bar spacing, and pixel ratio.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/pixel-perfect-rendering/widths/full-bar-width.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BitmapPositionLength {\n    /** coordinate for use with a bitmap rendering scope */\n    position: number;\n    /** length for use with a bitmap rendering scope */\n    length: number;\n}\n\n/**\n * Calculates the position and width which will completely full the space for the bar.\n * Useful if you want to draw something that will not have any gaps between surrounding bars.\n * @param xMedia - x coordinate of the bar defined in media sizing\n * @param halfBarSpacingMedia - half the width of the current barSpacing (un-rounded)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns position and width which will completely full the space for the bar\n */\nexport function fullBarWidth(\n    xMedia: number,\n    halfBarSpacingMedia: number,\n    horizontalPixelRatio: number\n): BitmapPositionLength {\n    const fullWidthLeftMedia = xMedia - halfBarSpacingMedia;\n    const fullWidthRightMedia = xMedia + halfBarSpacingMedia;\n    const fullWidthLeftBitmap = Math.round(\n        fullWidthLeftMedia * horizontalPixelRatio\n    );\n    const fullWidthRightBitmap = Math.round(\n        fullWidthRightMedia * horizontalPixelRatio\n    );\n    const fullWidthBitmap = fullWidthRightBitmap - fullWidthLeftBitmap;\n    return {\n        position: fullWidthLeftBitmap,\n        length: fullWidthBitmap,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Initial Property Values from Attributes in Lightweight Charts Web Component\nDESCRIPTION: Implements a method to load initial property values from HTML attributes, parse them as JSON, and set them as properties on the web component instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass LightweightChartWC extends HTMLElement {\n    /**\n     * Any data properties which are provided as JSON string values\n     * when the component is attached to the DOM will be used as the\n     * initial values for those properties.\n     *\n     * Note: once the component is attached, then any changes to these\n     * attributes will be ignored (not observed), and should rather be\n     * set using the property directly.\n     */\n    _tryLoadInitialProperty(name) {\n        if (this.hasAttribute(name)) {\n            const valueString = this.getAttribute(name);\n            let value;\n            try {\n                value = JSON.parse(valueString);\n            } catch (error) {\n                console.error(\n                    `Unable to read attribute ${name}'s value during initialisation.`\n                );\n                return;\n            }\n            // change kebab case attribute name to camel case.\n            const propertyName = name\n                .split('-')\n                .map((text, index) => {\n                    if (index < 1) {\n                        return text;\n                    }\n                    return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;\n                })\n                .join('');\n            this[propertyName] = value;\n            this.removeAttribute(name);\n        }\n    }\n\n    connectedCallback() {\n        // ...\n\n        // Read initial values using attributes and then clear the attributes\n        // since we don't want to 'reflect' data properties onto the elements\n        // attributes.\n        const richDataProperties = [\n            'options',\n            'series-options',\n            'pricescale-options',\n            'timescale-options',\n        ];\n        richDataProperties.forEach(propertyName => {\n            this._tryLoadInitialProperty(propertyName);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vue.js Chart Component in App\nDESCRIPTION: This snippet shows how to use the created chart component within a Vue.js application, including how to access exposed methods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/vuejs/01-wrapper.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n    import { ref } from 'vue';\n    import LWChart from './components/LWChart.vue';\n\n    // ...\n\n    const myChart = ref();\n\n    const fitContent = () => {\n        // call a method on the component.\n        myChart.value.fitContent();\n    };\n</script>\n<template>\n    <LWChart type=\"line\" :data=\"myData\" ref=\"myChart\" />\n    <button type=\"button\" @click=\"fitContent\">Fit Content</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Crosshair Mode\nDESCRIPTION: Sets the crosshair mode to normal (0) to make the crosshair follow the cursor directly instead of snapping to data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/two-price-scales.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchart.applyOptions({\n    crosshair: {\n        mode: 0, // CrosshairMode.Normal\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: zOrder Layers Demo Implementation for TradingView Charts\nDESCRIPTION: An interactive demo illustrating different zOrder layers and their relative positions in the chart's visual stack, referenced as 'explainer-layers-demo.js'\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/series-primitives.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayersExplainerCode\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Time Scale Events in Lightweight Charts v3\nDESCRIPTION: Demonstrates how to subscribe to visible time range changes using the new API in Lightweight Charts v3. The subscription methods are now accessed through the timeScale() method of the chart object.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v2-to-v3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.timeScale().subscribeVisibleTimeRangeChange\nchart.timeScale().unsubscribeVisibleTimeRangeChange\n```\n\n----------------------------------------\n\nTITLE: Using hoveredObjectId Instead of hoveredMarkerId\nDESCRIPTION: Shows how to use the renamed hoveredObjectId property (formerly hoveredMarkerId) in event callbacks.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v3-to-v4.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchart.subscribeCrosshairMove(param => {\n    console.log(param.hoveredObjectId);\n});\n\nchart.subscribeClick(param => {\n    console.log(param.hoveredObjectId);\n});\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Example Using Lightweight Charts Web Component\nDESCRIPTION: A full HTML example showing how to use the Lightweight Charts web component in a standalone script environment.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta\n            name=\"viewport\"\n            content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0\"\n        />\n        <title>Web component Example</title>\n        <script\n            type=\"text/javascript\"\n            src=\"https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.development.js\"\n        ></script>\n        <style>\n            #my-chart {\n                height: 100vh;\n                width: 100vw;\n            }\n        </style>\n    </head>\n\n    <body style=\"padding: 0; margin: 0\">\n        <lightweight-chart\n            id=\"my-chart\"\n            autosize\n            type=\"line\"\n            series-options='{\"color\": \"red\"}'\n            data='[{ \"time\": \"2018-10-19\", \"value\": 52.89 },{ \"time\": \"2018-10-22\", \"value\": 51.65 }]'\n        ></lightweight-chart>\n\n        <script src=\"lw-chart.js\" defer></script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom In-Out Chart Navigation\nDESCRIPTION: Implements vertical zooming in the chart using the up and down arrow keys. This function adjusts the visible logical range to create zoom effects while keeping the rightmost data point fixed.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/keyboard.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction scaleChart(pct, zoomIn) {\n    const currentRange = chart.timeScale().getVisibleLogicalRange();\n    if (currentRange) {\n        const bars = currentRange.to - currentRange.from;\n        const direction = zoomIn ? -1 : 1;\n        const newRangeBars = bars * pct * direction + bars;\n        chart.timeScale().setVisibleLogicalRange({\n            to: currentRange.to,\n            from: currentRange.to - newRangeBars,\n        });\n    }\n}\n\nchartContainer.addEventListener('keydown', event => {\n    switch (event.key) {\n    // ...\n    case 'ArrowUp':\n        scaleChart(1 / 8, true);\n        break;\n    case 'ArrowDown':\n        scaleChart(1 / 8, false);\n        break;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Lightweight Charts Instance in Swift\nDESCRIPTION: Demonstrates how to create an instance of LightweightCharts UIView and add it to your view hierarchy.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/ios.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar chart: LightweightCharts!\n\n// ...\nchart = LightweightCharts()\nview.addSubview(chart)\n// ... setup layout\n```\n\n----------------------------------------\n\nTITLE: Calculating Histogram Column Widths and Positions in TypeScript\nDESCRIPTION: This code snippet provides a set of functions for calculating histogram column widths and positions in a trading chart. It includes utilities for determining column spacing, desired width, and position based on bar spacing and pixel ratios. The main functions are calculateColumnPositions and calculateColumnPositionsInPlace, which compute the final positions and widths of histogram columns.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/pixel-perfect-rendering/widths/columns.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst alignToMinimalWidthLimit = 4;\nconst showSpacingMinimalBarWidth = 1;\n\nfunction columnSpacing(barSpacingMedia: number, horizontalPixelRatio: number) {\n    return Math.ceil(barSpacingMedia * horizontalPixelRatio) <=\n        showSpacingMinimalBarWidth\n        ? 0\n        : Math.max(1, Math.floor(horizontalPixelRatio));\n}\n\nfunction desiredColumnWidth(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    spacing?: number\n) {\n    return (\n        Math.round(barSpacingMedia * horizontalPixelRatio) -\n        (spacing ?? columnSpacing(barSpacingMedia, horizontalPixelRatio))\n    );\n}\n\ninterface ColumnCommon {\n    spacing: number;\n    shiftLeft: boolean;\n    columnHalfWidthBitmap: number;\n    horizontalPixelRatio: number;\n}\n\nfunction columnCommon(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnCommon {\n    const spacing = columnSpacing(barSpacingMedia, horizontalPixelRatio);\n    const columnWidthBitmap = desiredColumnWidth(\n        barSpacingMedia,\n        horizontalPixelRatio,\n        spacing\n    );\n    const shiftLeft = columnWidthBitmap % 2 === 0;\n    const columnHalfWidthBitmap = (columnWidthBitmap - (shiftLeft ? 0 : 1)) / 2;\n    return {\n        spacing,\n        shiftLeft,\n        columnHalfWidthBitmap,\n        horizontalPixelRatio,\n    };\n}\n\ninterface ColumnPosition {\n    left: number;\n    right: number;\n    shiftLeft: boolean;\n}\n\nfunction calculateColumnPosition(\n    xMedia: number,\n    columnData: ColumnCommon,\n    previousPosition: ColumnPosition | undefined\n): ColumnPosition {\n    const xBitmapUnRounded = xMedia * columnData.horizontalPixelRatio;\n    const xBitmap = Math.round(xBitmapUnRounded);\n    const xPositions: ColumnPosition = {\n        left: xBitmap - columnData.columnHalfWidthBitmap,\n        right:\n            xBitmap +\n            columnData.columnHalfWidthBitmap -\n            (columnData.shiftLeft ? 1 : 0),\n        shiftLeft: xBitmap > xBitmapUnRounded,\n    };\n    const expectedAlignmentShift = columnData.spacing + 1;\n    if (previousPosition) {\n        if (xPositions.left - previousPosition.right !== expectedAlignmentShift) {\n            if (previousPosition.shiftLeft) {\n                previousPosition.right = xPositions.left - expectedAlignmentShift;\n            } else {\n                xPositions.left = previousPosition.right + expectedAlignmentShift;\n            }\n        }\n    }\n    return xPositions;\n}\n\nfunction fixPositionsAndReturnSmallestWidth(\n    positions: ColumnPosition[],\n    initialMinWidth: number\n): number {\n    return positions.reduce((smallest: number, position: ColumnPosition) => {\n        if (position.right < position.left) {\n            position.right = position.left;\n        }\n        const width = position.right - position.left + 1;\n        return Math.min(smallest, width);\n    }, initialMinWidth);\n}\n\nfunction fixAlignmentForNarrowColumns(\n    positions: ColumnPosition[],\n    minColumnWidth: number\n) {\n    return positions.map((position: ColumnPosition) => {\n        const width = position.right - position.left + 1;\n        if (width <= minColumnWidth) return position;\n        if (position.shiftLeft) {\n            position.right -= 1;\n        } else {\n            position.left += 1;\n        }\n        return position;\n    });\n}\n\nexport function calculateColumnPositions(\n    xMediaPositions: number[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnPosition[] {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    const positions = new Array<ColumnPosition>(xMediaPositions.length);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = 0; i < xMediaPositions.length; i++) {\n        positions[i] = calculateColumnPosition(\n            xMediaPositions[i],\n            common,\n            previous\n        );\n        previous = positions[i];\n    }\n    const initialMinWidth = Math.ceil(barSpacingMedia * horizontalPixelRatio);\n    const minColumnWidth = fixPositionsAndReturnSmallestWidth(\n        positions,\n        initialMinWidth\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        return fixAlignmentForNarrowColumns(positions, minColumnWidth);\n    }\n    return positions;\n}\n\nexport interface ColumnPositionItem {\n    x: number;\n    column?: ColumnPosition;\n}\n\nexport function calculateColumnPositionsInPlace(\n    items: ColumnPositionItem[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    startIndex: number,\n    endIndex: number\n): void {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = startIndex; i < Math.min(endIndex, items.length); i++) {\n        items[i].column = calculateColumnPosition(items[i].x, common, previous);\n        previous = items[i].column;\n    }\n    const minColumnWidth = (items as ColumnPositionItem[]).reduce(\n        (smallest: number, item: ColumnPositionItem, index: number) => {\n            if (!item.column || index < startIndex || index > endIndex)\n                return smallest;\n            if (item.column.right < item.column.left) {\n                item.column.right = item.column.left;\n            }\n            const width = item.column.right - item.column.left + 1;\n            return Math.min(smallest, width);\n        },\n        Math.ceil(barSpacingMedia * horizontalPixelRatio)\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        (items as ColumnPositionItem[]).forEach(\n            (item: ColumnPositionItem, index: number) => {\n                if (!item.column || index < startIndex || index > endIndex) return;\n                const width = item.column.right - item.column.left + 1;\n                if (width <= minColumnWidth) return item;\n                if (item.column.shiftLeft) {\n                    item.column.right -= 1;\n                } else {\n                    item.column.left += 1;\n                }\n                return item.column;\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Chart Sections for Primitive Drawing\nDESCRIPTION: This code snippet demonstrates the various sections of a chart where a Primitive can draw, including the main chart pane, price scale pane, and time scale pane.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/series-primitives.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport CodeBlock from '@theme/CodeBlock';\nimport sectionsExplainerCode from '!!raw-loader!./explainer-sections-demo.js';\n\n<CodeBlock replaceThemeConstants chart className=\"language-js\" chartOnly>\n\t{sectionsExplainerCode}\n</CodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for Lightweight Charts Custom Element\nDESCRIPTION: This snippet shows how to define and apply styles to the custom element, including basic layout and visibility rules.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst elementStyles = `\n    :host {\n        display: block;\n    }\n    :host[hidden] {\n        display: none;\n    }\n    .chart-container {\n        height: 100%;\n        width: 100%;\n    }\n`;\n\n// ...\n\nconnectedCallback() {\n    // Create the div container for the chart\n    const container = document.createElement('div');\n    container.setAttribute('class', 'chart-container');\n    // create the stylesheet for the custom element\n    const style = document.createElement('style');\n    style.textContent = elementStyles;\n    this.shadowRoot.append(style, container);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts iOS via CocoaPods\nDESCRIPTION: Specifies how to include the Lightweight Charts library as a dependency in your iOS project's Podfile using CocoaPods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/ios.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'LightweightCharts', '~> 3.8.0'\n```\n\n----------------------------------------\n\nTITLE: Importing Lightweight Charts in JavaScript\nDESCRIPTION: How to import the createChart function from the Lightweight Charts library in a JavaScript file.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart } from 'lightweight-charts';\n```\n\n----------------------------------------\n\nTITLE: Applying Scale Margins to Series Price Scale in JavaScript\nDESCRIPTION: Demonstrates how to apply scale margins to a series' price scale in Lightweight Charts v4, replacing the deprecated scaleMargins option in series creation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = chart.addLineSeries();\n\nseries.priceScale().applyOptions({\n    scaleMargins: { /* options here */},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Series in Lightweight Charts v3\nDESCRIPTION: Shows how to create an overlay series using the new API in Lightweight Charts v3. Instead of using the 'overlay' property, a common priceScaleId is used for all overlay series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v2-to-v3.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst histogramSeries = chart.addHistogramSeries({\n    // or any other _the same_ id for all overlay series\n    priceScaleId: '',\n});\n```\n\n----------------------------------------\n\nTITLE: UMD Series Creation Example\nDESCRIPTION: Example showing series creation using UMD module format in v5.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v4-to-v5.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {});\nconst lineSeries = chart.addSeries(LightweightCharts.LineSeries, { color: 'red' });\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts via Swift Package Manager\nDESCRIPTION: Configuration for including Lightweight Charts as a dependency in Package.swift using Swift Package Manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/ios.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    .package(url: \"https://github.com/tradingview/LightweightChartsIOS\", .upToNextMajor(from: \"4.0.0\"))\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for Keyboard Navigation\nDESCRIPTION: Sets up a basic event listener for keyboard actions that will control chart interactions. This creates the foundation for handling arrow key navigation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/keyboard.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartContainer = document.getElementById('chart');\nchartContainer.addEventListener('keydown', event => {\n    switch (event.key) {\n    case 'ArrowLeft':\n        // Action for ArrowLeft key\n        break;\n    case 'ArrowRight':\n        // Action for ArrowRight key\n        break;\n        // ... more cases\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Lightweight Charts Library\nDESCRIPTION: Import statement required to use Lightweight Charts in Swift code.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/ios.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport LightweightCharts\n```\n\n----------------------------------------\n\nTITLE: Semantic HTML Chart Container\nDESCRIPTION: Example of using semantic HTML figure element as chart container for better accessibility.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/screenreader.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<figure id=\"chart\"></figure>\n```\n\n----------------------------------------\n\nTITLE: Sections Explainer Demo\nDESCRIPTION: Code demonstrating the various sections where a Primitive can draw on the chart, including pane views and axis views.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/series-primitives.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsectionsExplainerCode\n```\n\n----------------------------------------\n\nTITLE: Adding Drawing Primitives to Series in Lightweight Charts\nDESCRIPTION: Shows how to attach a custom drawing primitive to an existing series using the attachPrimitive method. Includes chart creation, series initialization, and primitive attachment.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomPrimitive {\n    /* Class implementing the ISeriesPrimitive interface */\n}\n\n// Create an instantiated series primitive.\nconst myCustomPrimitive = new MyCustomPrimitive();\n\nconst chart = createChart(document.getElementById('container'));\nconst lineSeries = chart.addSeries(LineSeries);\n\nconst data = [\n    { time: 1642425322, value: 123 },\n    /* ... more data */\n];\n\n// Attach the primitive to the series\nlineSeries.attachPrimitive(myCustomPrimitive);\n```\n\n----------------------------------------\n\nTITLE: Importing Lightweight Charts Library in Swift\nDESCRIPTION: Shows how to import the Lightweight Charts library in a Swift file where a chart will be created.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/ios.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport LightweightCharts\n```\n\n----------------------------------------\n\nTITLE: Adding Histogram Series to Chart\nDESCRIPTION: Creating and storing a reference to a histogram series in the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/android.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nlateinit var histogramSeries: SeriesApi\ncharts_view.api.addHistogramSeries(\n    onSeriesCreated = { series ->\n        histogramSeries = series\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding ARIA Attributes via JavaScript\nDESCRIPTION: JavaScript implementation for dynamically adding ARIA attributes and alert functionality to chart container.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/screenreader.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Template for HTML elements added to the chart container for the A11y improvements -->\n<template id=\"a11y-helpers\">\n    <div tabindex=\"-1\" role=\"alert\" aria-live=\"assertive\"></div>\n</template>\n\n<script>\n    function addAriaAttributesAndAlerter(chart) {\n        const containerEl = chart.chartElement().parentElement;\n        if (!containerEl) return;\n        // make focusable\n        containerEl.tabIndex = 0;\n        containerEl.style.position = 'relative';\n        containerEl.ariaLabel =\n            'Line plot of Accessibility stock price. Press the H key to display the available interaction keys.';\n        chart.chartElement().ariaHidden = 'true';\n\n        const templateElement = document.getElementById('a11y-helpers');\n        const clone = templateElement.content.cloneNode(true);\n        containerEl.appendChild(clone);\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Price Scale - New Method\nDESCRIPTION: Updated method for configuring left price scale visibility while disabling the right price scale, with additional series configuration.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    rightPriceScale: {\n        visible: false,\n    },\n    leftPriceScale: {\n        visible: true,\n    },\n});\n\nconst histSeries = chart.addHistogramSeries({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Getters and Setters for Lightweight Charts Custom Element\nDESCRIPTION: This snippet demonstrates how to implement getter and setter methods for attributes in the custom element, allowing for attribute mirroring as properties.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nset type(value) {\n    this.setAttribute('type', value || 'line');\n}\n\nget type() {\n    return this.getAttribute('type') || 'line';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts with Swift Package Manager\nDESCRIPTION: Package.swift configuration for adding Lightweight Charts dependency using Swift Package Manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/ios.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    .package(url: \"https://github.com/tradingview/LightweightChartsIOS\", .upToNextMajor(from: \"4.0.0\"))\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Chart with HTML\nDESCRIPTION: Makes the chart programmatically focusable for keyboard interaction by adding a tabindex attribute to the chart's container div.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/keyboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"chart\" tabindex=\"0\"></div>\n```\n\n----------------------------------------\n\nTITLE: Basic Candlestick Data Generation in JavaScript\nDESCRIPTION: The original code line that simply generates candlestick data without custom coloring. This is the code that will be replaced with a more advanced implementation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/data-points.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst candleStickData = generateCandlestickData();\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via NPM\nDESCRIPTION: Command to install the lightweight-charts package using npm package manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/intro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save lightweight-charts\n```\n\n----------------------------------------\n\nTITLE: Customizing Horizontal Scale in Lightweight Charts (JavaScript)\nDESCRIPTION: Example of customizing the horizontal scale behavior in Lightweight Charts using the createChartEx function and implementing IHorzScaleBehavior interface.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateChartEx({\n  // ... other options\n  horzScaleBehavior: new CustomHorzScaleBehavior(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawing Primitives in Lightweight Charts\nDESCRIPTION: Shows how to create and attach a custom drawing primitive to an existing series using attachPrimitive method.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomPrimitive {\n    /* Class implementing the ISeriesPrimitive interface */\n}\n\n// Create an instantiated series primitive.\nconst myCustomPrimitive = new MyCustomPrimitive();\n\nconst chart = createChart(document.getElementById('container'));\nconst lineSeries = chart.addSeries(LineSeries);\n\nconst data = [\n    { time: 1642425322, value: 123 },\n    /* ... more data */\n];\n\n// Attach the primitive to the series\nlineSeries.attachPrimitive(myCustomPrimitive);\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via CocoaPods in Ruby\nDESCRIPTION: Specifies the Lightweight Charts dependency in a Podfile for CocoaPods installation. This allows integration of Lightweight Charts into an Xcode project.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/ios.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'LightweightCharts', '~> 3.8.0'\n```\n\n----------------------------------------\n\nTITLE: Defining XML Layout for Charts View\nDESCRIPTION: XML layout configuration for adding the ChartsView component to an Android layout using ConstraintLayout.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/android.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <com.tradingview.lightweightcharts.view.ChartsView\n            android:id=\"@+id/charts_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"0dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n----------------------------------------\n\nTITLE: Handling Time Values in Event Callbacks\nDESCRIPTION: Demonstrates how to handle time values in various chart callbacks with the updated time value handling system\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    createChart,\n    isUTCTimestamp,\n    isBusinessDay,\n} from 'lightweight-charts';\n\nconst chart = createChart(document.body);\n\nchart.subscribeClick(param => {\n    if (param.time === undefined) {\n        // the time is undefined, i.e. there is no any data point where a time could be received from\n        return;\n    }\n\n    if (isUTCTimestamp(param.time)) {\n        // param.time is UTCTimestamp\n    } else if (isBusinessDay(param.time)) {\n        // param.time is a BusinessDay object\n    } else {\n        // param.time is a business day string in ISO format, e.g. `'2010-01-01'`\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying High Contrast Settings in JavaScript\nDESCRIPTION: This snippet shows how to implement a setHighContrast function that applies different color settings to the chart based on the user's contrast preference.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/readability.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst seriesBaseContrastSettings = {\n    color: 'rgb(41, 98, 255)',\n    lineWidth: 2,\n};\nconst chartBaseContrastSettings = {\n    layout: {\n        textColor: '#191919',\n    },\n    grid: {\n        vertLines: {\n            color: '#D6DCDE',\n        },\n        horzLines: {\n            color: '#D6DCDE',\n        },\n    },\n};\nconst seriesHighContrastSettings = {\n    color: 'rgb(0, 0, 0)',\n    lineWidth: 4,\n};\nconst chartHighContrastSettings = {\n    layout: {\n        textColor: '#000000',\n    },\n    grid: {\n        vertLines: {\n            color: '#777777',\n        },\n        horzLines: {\n            color: '#777777',\n        },\n    },\n};\n\nfunction setHighContrast(enabled) {\n    mainSeries.applyOptions(\n        enabled ? seriesHighContrastSettings : seriesBaseContrastSettings\n    );\n    chart.applyOptions(\n        enabled ? chartHighContrastSettings : chartBaseContrastSettings\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Attribute Changes in Lightweight Charts Custom Element\nDESCRIPTION: This code shows how to observe attribute changes in the custom element by defining observedAttributes and implementing attributeChangedCallback.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass LightweightChartWC extends HTMLElement {\n    // Attributes to observe. When changes occur, `attributeChangedCallback` is called.\n    static get observedAttributes() {\n        return ['type', 'autosize'];\n    }\n\n    /**\n     * `attributeChangedCallback()` is called when any of the attributes in the\n     * `observedAttributes` array are changed.\n     */\n    attributeChangedCallback(name, _oldValue, newValue) {\n        if (!this.chart) {\n            return;\n        }\n        const hasValue = newValue !== null;\n        switch (name) {\n        case 'type':\n            // handle the changed attribute\n            break;\n        case 'autosize':\n            // handle the changed attribute\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via CocoaPods\nDESCRIPTION: CocoaPods dependency configuration for integrating Lightweight Charts into an iOS project.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/ios.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'LightweightCharts', '~> 3.8.0'\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Chart with JavaScript\nDESCRIPTION: Alternative approach to make the chart programmatically focusable by setting the tabIndex property using JavaScript.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/keyboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst containerEl = chart.chartElement().parentElement;\ncontainerEl.tabIndex = 0;\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Dimensions for Lightweight Charts\nDESCRIPTION: Optional JavaScript code for specifying explicit height and width for the chart instead of allowing it to fill the available space in its container.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/chart-colors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst chart = LightweightCharts.createChart(\n    document.getElementById('container'),\n    {\n        height: 400,\n        width: 600,\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via NPM\nDESCRIPTION: Command to install the lightweight-charts package using npm package manager\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/intro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save lightweight-charts\n```\n\n----------------------------------------\n\nTITLE: Setting Crosshair Position in Lightweight Charts (JavaScript)\nDESCRIPTION: Example of programmatically setting the crosshair position using the setCrosshairPosition API in Lightweight Charts.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart.setCrosshairPosition(price, time, seriesId);\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Link List for Framework Integrations in JSX\nDESCRIPTION: This code snippet renders a CardLinkList component with items for React, Vue.js, and Web Components integrations, including titles, images, and descriptions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardLinkList\n\titems={[\n\t\t{\n\t\t\thref: \"/tutorials/react/simple\",\n\t\t\ttitle: \"React\",\n\t\t\timage: <ReactLogo />,\n\t\t\tdescription: \"Integration guide for React\",\n\t\t},\n\t\t{\n\t\t\thref: \"/tutorials/vuejs/wrapper\",\n\t\t\ttitle: \"Vue.js\",\n\t\t\timage: <VuejsLogo />,\n\t\t\tdescription: \"Integration guide for Vue.js\",\n\t\t},\n\t\t{\n\t\t\thref: \"/tutorials/webcomponents/custom-element\",\n\t\t\ttitle: \"Web Components\",\n\t\t\timage: <WebComponentsLogo />,\n\t\t\tdescription: \"Web components custom element\",\n\t\t},\n\t]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Attributes for Initial Property Values in Lightweight Charts Web Component\nDESCRIPTION: Example of how to use HTML attributes to set initial values for properties in the Lightweight Charts web component.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<lightweight-chart\n    data='[{\"time\": \"2022-09-14\", \"value\": 123.45},{\"time\": \"2022-09-15\", \"value\": 123.45}]'\n    series-options='{\"color\":\"blue\"}'\n></lightweight-chart>\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts via Swift Package Manager\nDESCRIPTION: Swift Package Manager dependency configuration in Package.swift for integrating Lightweight Charts.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/ios.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    .package(url: \"https://github.com/tradingview/LightweightChartsIOS\", .upToNextMajor(from: \"4.0.0\"))\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Series - New Method\nDESCRIPTION: Updated method for creating an overlay series using priceScaleId.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst histogramSeries = chart.addHistogramSeries({\n    // or any other _the same_ id for all overlay series\n    priceScaleId: '',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter and Setter for Options in Lightweight Charts Web Component\nDESCRIPTION: Shows how to define custom getter and setter methods for the 'options' property in the Lightweight Charts web component class.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Within the class definition\nset options(value) {\n    if (!this.chart) {\n        return;\n    }\n    this.chart.applyOptions(value);\n}\n\nget options() {\n    if (!this.chart) {\n        return null;\n    }\n    return this.chart.options();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts as a Swift Package Manager Dependency\nDESCRIPTION: This code demonstrates how to add Lightweight Charts as a dependency in a Package.swift file for Swift Package Manager installation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/ios.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    .package(url: \"https://github.com/tradingview/LightweightChartsIOS\", .upToNextMajor(from: \"4.0.0\"))\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts™ Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Lightweight Charts™ dependency to the project's Gradle build file. It includes setting up the Maven Central repository and adding the implementation dependency.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/android.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    //...\n    implementation 'com.tradingview:lightweightcharts:3.8.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting High Contrast Preference in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a user prefers high contrast mode using window.matchMedia() and how to subscribe to changes in this preference.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/readability.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Check if user prefers high contrast mode\nfunction checkHighContrast() {\n    // Use window.matchMedia to check 'prefers-contrast' media feature\n    const highContrast = window.matchMedia('(prefers-contrast: high)').matches;\n    return highContrast; // Returns true if high contrast is enabled, false otherwise\n}\n\n// Subscribe to changes\nconst highContrastMediaQuery = window.matchMedia('(prefers-contrast: high)');\nhighContrastMediaQuery.addListener(() => {\n    setHighContrast(highContrastMediaQuery.matches);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Series Color During Creation in TradingView Lightweight Charts\nDESCRIPTION: This snippet demonstrates how to set the color property for a line series at the time of creation using the addSeries method. The color is set to a blue hex value (#2962FF).\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/_apply-options-tabs-partial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lineSeries = chart.addSeries(LineSeries, {\n    color: '#2962FF',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via npm\nDESCRIPTION: Command to install the Lightweight Charts package using npm. This is the first step to use the library in your project.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save lightweight-charts\n```\n\n----------------------------------------\n\nTITLE: Customizing Horizontal Scale in JavaScript\nDESCRIPTION: Example of customizing the horizontal scale behavior using the createChartEx function and implementing IHorzScaleBehavior interface. This allows for non-time-based values on the horizontal scale.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/release-notes.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateChartEx({\n  // ... other options\n  horzScaleBehavior: new CustomHorzScaleBehavior(),\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Candlestick Widths in TradingView Charts in TypeScript\nDESCRIPTION: This code snippet contains two functions: an internal helper function 'optimalCandlestickWidth' and an exported 'candlestickWidth' function. They determine the appropriate width for candlestick bodies based on bar spacing and pixel ratio. The algorithm uses special case handling for bar spacings between 2.5 and 4, and applies a reducing coefficient for larger spacings to ensure readability while managing potential overlap.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/pixel-perfect-rendering/widths/candlestick.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction optimalCandlestickWidth(\n    barSpacing: number,\n    pixelRatio: number\n): number {\n    const barSpacingSpecialCaseFrom = 2.5;\n    const barSpacingSpecialCaseTo = 4;\n    const barSpacingSpecialCaseCoeff = 3;\n    if (barSpacing >= barSpacingSpecialCaseFrom && barSpacing <= barSpacingSpecialCaseTo) {\n        return Math.floor(barSpacingSpecialCaseCoeff * pixelRatio);\n    }\n    // coeff should be 1 on small barspacing and go to 0.8 while bar spacing grows\n    const barSpacingReducingCoeff = 0.2;\n    const coeff =\n        1 -\n        (barSpacingReducingCoeff *\n            Math.atan(\n                Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo\n            )) /\n            (Math.PI * 0.5);\n    const res = Math.floor(barSpacing * coeff * pixelRatio);\n    const scaledBarSpacing = Math.floor(barSpacing * pixelRatio);\n    const optimal = Math.min(res, scaledBarSpacing);\n    return Math.max(Math.floor(pixelRatio), optimal);\n}\n\n/**\n * Calculates the candlestick width that the library would use for the current\n * bar spacing.\n * @param barSpacing - bar spacing in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns The width (in bitmap coordinates) that the chart would use to draw a candle body\n */\nexport function candlestickWidth(\n    barSpacing: number,\n    horizontalPixelRatio: number\n): number {\n    let width = optimalCandlestickWidth(barSpacing, horizontalPixelRatio);\n    if (width >= 2) {\n        const wickWidth = Math.floor(horizontalPixelRatio);\n        if (wickWidth % 2 !== width % 2) {\n            width--;\n        }\n    }\n    return width;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Panes in Lightweight Charts\nDESCRIPTION: Shows how to remove a pane using the removePane method, which also removes any series within the pane.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/how_to/panes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchart.removePane(1);\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts Dependency in Swift Package Manager\nDESCRIPTION: Demonstrates how to add Lightweight Charts as a dependency in a Swift package's Package.swift file using Swift Package Manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/ios.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    .package(url: \"https://github.com/tradingview/LightweightChartsIOS\", .upToNextMajor(from: \"3.8.0\"))\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Series Data Interface\nDESCRIPTION: Definition of the data structure used for custom series rendering, including bar data and visibility information.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/custom_series.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaneRendererCustomData {\n  bars: CustomBarItemData[];\n  barSpacing: number;\n  visibleRange: VisibleRange;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LogicalRange Type in TypeScript\nDESCRIPTION: This code snippet shows how to import the LogicalRange type alias from the Lightweight Charts API. LogicalRange represents the visible range on the time scale with 'from' and 'to' properties.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/time-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogicalRange } from '/api/type-aliases/LogicalRange.md';\n```\n\n----------------------------------------\n\nTITLE: Importing Lightweight Charts in Swift\nDESCRIPTION: This snippet shows how to import the Lightweight Charts library in a Swift file.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/ios.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport LightweightCharts\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Layout in Android XML\nDESCRIPTION: XML layout configuration for adding the ChartsView component to an Android layout using ConstraintLayout.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/android.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <com.tradingview.lightweightcharts.view.ChartsView\n            android:id=\"@+id/charts_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"0dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n----------------------------------------\n\nTITLE: Using aria-hidden for Decorative Elements\nDESCRIPTION: Example of using aria-hidden attribute to hide non-semantic elements from screen readers.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/screenreader.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"decorative-element\" aria-hidden=\"true\"></div>\n```\n\n----------------------------------------\n\nTITLE: Calculating Histogram Column Widths in TypeScript\nDESCRIPTION: A comprehensive set of functions for calculating histogram column widths and positions for trading charts. Includes utilities for spacing, width calculations, and position adjustments with pixel-perfect rendering support. The code handles both standard calculations and in-place modifications for performance optimization.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/pixel-perfect-rendering/widths/columns.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst alignToMinimalWidthLimit = 4;\nconst showSpacingMinimalBarWidth = 1;\n\n/**\n * Spacing gap between columns.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns Spacing gap between columns (in Bitmap coordinates)\n */\nfunction columnSpacing(barSpacingMedia: number, horizontalPixelRatio: number) {\n    return Math.ceil(barSpacingMedia * horizontalPixelRatio) <=\n        showSpacingMinimalBarWidth\n        ? 0\n        : Math.max(1, Math.floor(horizontalPixelRatio));\n}\n\n/**\n * Desired width for columns. This may not be the final width because\n * it may be adjusted later to ensure all columns on screen have a\n * consistent width and gap.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @param spacing - Spacing gap between columns (in Bitmap coordinates). (optional, provide if you have already calculated it)\n * @returns Desired width for column bars (in Bitmap coordinates)\n */\nfunction desiredColumnWidth(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    spacing?: number\n) {\n    return (\n        Math.round(barSpacingMedia * horizontalPixelRatio) -\n        (spacing ?? columnSpacing(barSpacingMedia, horizontalPixelRatio))\n    );\n}\n\ninterface ColumnCommon {\n    /** Spacing gap between columns */\n    spacing: number;\n    /** Shift columns left by one pixel */\n    shiftLeft: boolean;\n    /** Half width of a column */\n    columnHalfWidthBitmap: number;\n    /** horizontal pixel ratio */\n    horizontalPixelRatio: number;\n}\n\n/**\n * Calculated values which are common to all the columns on the screen, and\n * are required to calculate the individual positions.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns calculated values for subsequent column calculations\n */\nfunction columnCommon(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnCommon {\n    const spacing = columnSpacing(barSpacingMedia, horizontalPixelRatio);\n    const columnWidthBitmap = desiredColumnWidth(\n        barSpacingMedia,\n        horizontalPixelRatio,\n        spacing\n    );\n    const shiftLeft = columnWidthBitmap % 2 === 0;\n    const columnHalfWidthBitmap = (columnWidthBitmap - (shiftLeft ? 0 : 1)) / 2;\n    return {\n        spacing,\n        shiftLeft,\n        columnHalfWidthBitmap,\n        horizontalPixelRatio,\n    };\n}\n\ninterface ColumnPosition {\n    left: number;\n    right: number;\n    shiftLeft: boolean;\n}\n\n/**\n * Calculate the position for a column. These values can be later adjusted\n * by a second pass which corrects widths, and shifts columns.\n * @param xMedia - column x position (center) in media coordinates\n * @param columnData - precalculated common values (returned by `columnCommon`)\n * @param previousPosition - result from this function for the previous bar.\n * @returns initial column position\n */\nfunction calculateColumnPosition(\n    xMedia: number,\n    columnData: ColumnCommon,\n    previousPosition: ColumnPosition | undefined\n): ColumnPosition {\n    const xBitmapUnRounded = xMedia * columnData.horizontalPixelRatio;\n    const xBitmap = Math.round(xBitmapUnRounded);\n    const xPositions: ColumnPosition = {\n        left: xBitmap - columnData.columnHalfWidthBitmap,\n        right:\n            xBitmap +\n            columnData.columnHalfWidthBitmap -\n            (columnData.shiftLeft ? 1 : 0),\n        shiftLeft: xBitmap > xBitmapUnRounded,\n    };\n    const expectedAlignmentShift = columnData.spacing + 1;\n    if (previousPosition) {\n        if (xPositions.left - previousPosition.right !== expectedAlignmentShift) {\n            // need to adjust alignment\n            if (previousPosition.shiftLeft) {\n                previousPosition.right = xPositions.left - expectedAlignmentShift;\n            } else {\n                xPositions.left = previousPosition.right + expectedAlignmentShift;\n            }\n        }\n    }\n    return xPositions;\n}\n\nfunction fixPositionsAndReturnSmallestWidth(\n    positions: ColumnPosition[],\n    initialMinWidth: number\n): number {\n    return positions.reduce((smallest: number, position: ColumnPosition) => {\n        if (position.right < position.left) {\n            position.right = position.left;\n        }\n        const width = position.right - position.left + 1;\n        return Math.min(smallest, width);\n    }, initialMinWidth);\n}\n\nfunction fixAlignmentForNarrowColumns(\n    positions: ColumnPosition[],\n    minColumnWidth: number\n) {\n    return positions.map((position: ColumnPosition) => {\n        const width = position.right - position.left + 1;\n        if (width <= minColumnWidth) return position;\n        if (position.shiftLeft) {\n            position.right -= 1;\n        } else {\n            position.left += 1;\n        }\n        return position;\n    });\n}\n\n/**\n * Calculates the column positions and widths for the x positions.\n * This function creates a new array. You may get faster performance using the\n * `calculateColumnPositionsInPlace` function instead\n * @param xMediaPositions - x positions for the bars in media coordinates\n * @param barSpacingMedia - spacing between bars in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns Positions for the columns\n */\nexport function calculateColumnPositions(\n    xMediaPositions: number[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnPosition[] {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    const positions = new Array<ColumnPosition>(xMediaPositions.length);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = 0; i < xMediaPositions.length; i++) {\n        positions[i] = calculateColumnPosition(\n            xMediaPositions[i],\n            common,\n            previous\n        );\n        previous = positions[i];\n    }\n    const initialMinWidth = Math.ceil(barSpacingMedia * horizontalPixelRatio);\n    const minColumnWidth = fixPositionsAndReturnSmallestWidth(\n        positions,\n        initialMinWidth\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        return fixAlignmentForNarrowColumns(positions, minColumnWidth);\n    }\n    return positions;\n}\n\nexport interface ColumnPositionItem {\n    x: number;\n    column?: ColumnPosition;\n}\n\n/**\n * Calculates the column positions and widths for bars using the existing\n * array of items.\n * @param items - bar items which include an `x` property, and will be mutated to contain a column property\n * @param barSpacingMedia - bar spacing in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @param startIndex - start index for visible bars within the items array\n * @param endIndex - end index for visible bars within the items array\n */\nexport function calculateColumnPositionsInPlace(\n    items: ColumnPositionItem[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    startIndex: number,\n    endIndex: number\n): void {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = startIndex; i < Math.min(endIndex, items.length); i++) {\n        items[i].column = calculateColumnPosition(items[i].x, common, previous);\n        previous = items[i].column;\n    }\n    const minColumnWidth = (items as ColumnPositionItem[]).reduce(\n        (smallest: number, item: ColumnPositionItem, index: number) => {\n            if (!item.column || index < startIndex || index > endIndex)\n                return smallest;\n            if (item.column.right < item.column.left) {\n                item.column.right = item.column.left;\n            }\n            const width = item.column.right - item.column.left + 1;\n            return Math.min(smallest, width);\n        },\n        Math.ceil(barSpacingMedia * horizontalPixelRatio)\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        (items as ColumnPositionItem[]).forEach(\n            (item: ColumnPositionItem, index: number) => {\n                if (!item.column || index < startIndex || index > endIndex) return;\n                const width = item.column.right - item.column.left + 1;\n                if (width <= minColumnWidth) return item;\n                if (item.column.shiftLeft) {\n                    item.column.right -= 1;\n                } else {\n                    item.column.left += 1;\n                }\n                return item.column;\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding aria-label to Chart Container\nDESCRIPTION: Example of implementing aria-label attribute to provide descriptive text for screen readers.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/screenreader.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div\n    id=\"chart\"\n    aria-live=\"polite\"\n    aria-label=\"interactive line chart\"\n    tabindex=\"0\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Publishing Package to NPM\nDESCRIPTION: Commands to publish the compiled plugin package to NPM. Can be run with --dry-run flag to test the process.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/template-common/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd dist\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: API method additions\nDESCRIPTION: New API methods added for accessing chart data and markers\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/release-notes.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nISeriesApi.markers\nISeriesApi.dataByIndex\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Local Time Zone using JavaScript Date API\nDESCRIPTION: This function converts a given timestamp to the local time zone of the client. It's useful when only client-side time zone support is needed.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/time-zones.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToLocal(originalTime) {\n    const d = new Date(originalTime * 1000);\n    return Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()) / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Dual Point Shape Positions in TypeScript\nDESCRIPTION: Utility function for calculating bitmap positions for shapes drawn between two coordinates. Determines the starting position and length while accounting for pixel ratio.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/pixel-perfect-rendering/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Determines the bitmap position and length for a dimension of a shape to be drawn.\n * @param position1Media - media coordinate for the first point\n * @param position2Media - media coordinate for the second point\n * @param pixelRatio - pixel ratio for the corresponding axis (vertical or horizontal)\n * @returns Position of the start point and length dimension.\n */\nexport function positionsBox(\n    position1Media: number,\n    position2Media: number,\n    pixelRatio: number\n): BitmapPositionLength {\n    const scaledPosition1 = Math.round(pixelRatio * position1Media);\n    const scaledPosition2 = Math.round(pixelRatio * position2Media);\n    return {\n        position: Math.min(scaledPosition1, scaledPosition2),\n        length: Math.abs(scaledPosition2 - scaledPosition1) + 1,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bar Series to Lightweight Charts in Swift\nDESCRIPTION: Shows how to add a bar series to the Lightweight Charts instance in Swift. This creates a bar chart on the view.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/ios.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar series: BarSeries!\n\n// ...\nseries = chart.addBarSeries(options: nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for TradingView Charts\nDESCRIPTION: Gradle configuration required to set up repositories and dependencies for the Lightweight Charts Android library.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/android.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    //...\n    implementation 'com.tradingview:lightweightcharts:3.8.0'\n}\n```\n\n----------------------------------------\n\nTITLE: TimeScale and PriceScale Options Update\nDESCRIPTION: Property renaming and addition in scale options, introducing ticksVisible for time axis control and standardizing naming across price scale options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/release-notes.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nTimeScaleOptions.ticksVisible\nPriceScaleOptions.ticksVisible // formerly drawTicks\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts with CocoaPods\nDESCRIPTION: Podfile configuration for adding Lightweight Charts dependency using CocoaPods package manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/ios.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'LightweightCharts', '~> 3.8.0'\n```\n\n----------------------------------------\n\nTITLE: Installing React Project Dependencies\nDESCRIPTION: Commands for cloning and setting up a React project using Parcel starter kit as the foundation for implementing Lightweight Charts.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/react/01-simple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone git@github.com:brandiqa/react-parcel-starter.git lwc-react\ncd lwc-react\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Loading Google Fonts in HTML for Lightweight Charts\nDESCRIPTION: HTML code for loading the Roboto font from Google Fonts by adding necessary link tags to the document head. This setup enables custom font usage in the Lightweight Charts library.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/customization/finishing-touches.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<title>Lightweight Charts Customization Tutorial</title>\n<!-- Adding Google Font -->\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link\n    href=\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\"\n    rel=\"stylesheet\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Collapsible Code Display Component\nDESCRIPTION: Component structure for displaying collapsible code blocks using InstantDetails and CodeBlock components.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/vuejs/01-wrapper.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<InstantDetails>\n    <summary>Click here to reveal the code.</summary>\n    <CodeBlock className=\"language-html\">{compositionCode}</CodeBlock>\n</InstantDetails>\n```\n\n----------------------------------------\n\nTITLE: Creating Development Stub\nDESCRIPTION: Command to create a development stub for local testing and development.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/BUILDING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Format\nDESCRIPTION: Standard markdown changelog format showing version number, enhancements, fixes, contributors and release links.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/release-notes.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.4.0\n\n**Enhancement**\n\n- Add option to fix right edge \n- Drop restriction for min bar spacing value\n- Round corners of the line-style plots\n\n**Fixed**\n\n- AutoscaleProvider documentation error\n- Candlestick upColor and downColor is not changed on applyOptions\n- Cleared and reset data appears at visually different location\n```\n\n----------------------------------------\n\nTITLE: Dynamic Description Update\nDESCRIPTION: JavaScript code for updating chart description content.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/screenreader.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst descriptionElement = document.getElementById('chart-description');\ndescriptionElement.textContent = generateDescription(mainSeries.data());\n```\n\n----------------------------------------\n\nTITLE: Calculating Bitmap Positions for Dual Point Shapes in TypeScript\nDESCRIPTION: This function determines the bitmap position and length for a dimension of a shape to be drawn between two coordinates. It's useful for drawing shapes like price ranges or other dual-point elements on a chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/pixel-perfect-rendering/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Determines the bitmap position and length for a dimension of a shape to be drawn.\n * @param position1Media - media coordinate for the first point\n * @param position2Media - media coordinate for the second point\n * @param pixelRatio - pixel ratio for the corresponding axis (vertical or horizontal)\n * @returns Position of the start point and length dimension.\n */\nexport function positionsBox(\n    position1Media: number,\n    position2Media: number,\n    pixelRatio: number\n): BitmapPositionLength {\n    const scaledPosition1 = Math.round(pixelRatio * position1Media);\n    const scaledPosition2 = Math.round(pixelRatio * position2Media);\n    return {\n        position: Math.min(scaledPosition1, scaledPosition2),\n        length: Math.abs(scaledPosition2 - scaledPosition1) + 1,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Series Creation in v5\nDESCRIPTION: Example showing the new series creation syntax in Lightweight Charts v5 using the unified addSeries method.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v4-to-v5.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example with Line Series in v5\nimport { createChart, LineSeries } from 'lightweight-charts';\nconst chart = createChart(container, {});\nconst lineSeries = chart.addSeries(LineSeries, { color: 'red' });\n```\n\n----------------------------------------\n\nTITLE: Setting Data for Histogram Series\nDESCRIPTION: Adding data points to the histogram series including business day timestamps and whitespace data.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/android.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = listOf(\n    HistogramData(Time.BusinessDay(2019, 6, 11), 40.01f),\n    HistogramData(Time.BusinessDay(2019, 6, 12), 52.38f),\n    HistogramData(Time.BusinessDay(2019, 6, 13), 36.30f),\n    HistogramData(Time.BusinessDay(2019, 6, 14), 34.48f),\n    WhitespaceData(Time.BusinessDay(2019, 6, 15)),\n    WhitespaceData(Time.BusinessDay(2019, 6, 16)),\n    HistogramData(Time.BusinessDay(2019, 6, 17), 41.50f),\n    HistogramData(Time.BusinessDay(2019, 6, 18), 34.82f)\n)\nhistogramSeries.setData(data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Repositories for Lightweight Charts Android\nDESCRIPTION: Configuration for the root build.gradle file to add required repositories for the Lightweight Charts dependency.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/android.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Size Adjustment in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create an event listener for the font size checkbox and apply the font size changes to the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/readability.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setFontSize(large) {\n    chart.applyOptions({\n        layout: {\n            fontSize: large ? 16 : 12,\n        },\n    });\n}\n\ndocument\n    .querySelector('#large-font-checkbox')\n    .addEventListener('change', event => {\n        setFontSize(event.target.checked);\n    });\n```\n\n----------------------------------------\n\nTITLE: Converting Times to Local Time Zone Using Date API\nDESCRIPTION: A JavaScript function that converts UTC timestamps to the client's local time zone using the Date API. This is useful when you only need to support the local time zone of the client rather than specific named time zones.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/time-zones.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToLocal(originalTime) {\n    const d = new Date(originalTime * 1000);\n    return Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()) / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Download Link Component\nDESCRIPTION: HTML template code for creating download links for Vue component files using file-loader.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/vuejs/01-wrapper.mdx#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<p><a href={require('!!file-loader!./assets/composition-api.vue').default} download=\"lw-chart.vue\" target=\"\\_blank\">Download file</a></p>\n```\n\n----------------------------------------\n\nTITLE: Accessing Series Data in Mouse Events in Lightweight Charts v4\nDESCRIPTION: Shows how to access series data using the new 'seriesData' property in mouse event callbacks, replacing the removed 'seriesPrices' property in v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v3-to-v4.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlineSeries.setData([{ time: '2001-01-01', value: 1 }]);\nbarSeries.setData([{ time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 }]);\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.seriesData.get(lineSeries)); // { time: '2001-01-01', value: 1 } or undefined\n    console.log(param.seriesData.get(barSeries)); // { time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 } or undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Pane Size in Lightweight Charts (JavaScript)\nDESCRIPTION: Example of retrieving the dimensions of the chart pane using the paneSize getter in Lightweight Charts.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { width, height } = chart.paneSize;\n```\n\n----------------------------------------\n\nTITLE: Calculating Optimal Candlestick Width in TypeScript\nDESCRIPTION: This function calculates the optimal width for a candlestick based on bar spacing and pixel ratio. It handles special cases for bar spacing between 2.5 and 4, and uses a reducing coefficient for larger spacings.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/plugins/pixel-perfect-rendering/widths/candlestick.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction optimalCandlestickWidth(\n    barSpacing: number,\n    pixelRatio: number\n): number {\n    const barSpacingSpecialCaseFrom = 2.5;\n    const barSpacingSpecialCaseTo = 4;\n    const barSpacingSpecialCaseCoeff = 3;\n    if (barSpacing >= barSpacingSpecialCaseFrom && barSpacing <= barSpacingSpecialCaseTo) {\n        return Math.floor(barSpacingSpecialCaseCoeff * pixelRatio);\n    }\n    // coeff should be 1 on small barspacing and go to 0.8 while bar spacing grows\n    const barSpacingReducingCoeff = 0.2;\n    const coeff =\n        1 -\n        (barSpacingReducingCoeff *\n            Math.atan(\n                Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo\n            )) /\n            (Math.PI * 0.5);\n    const res = Math.floor(barSpacing * coeff * pixelRatio);\n    const scaledBarSpacing = Math.floor(barSpacing * pixelRatio);\n    const optimal = Math.min(res, scaledBarSpacing);\n    return Math.max(Math.floor(pixelRatio), optimal);\n}\n```\n\n----------------------------------------\n\nTITLE: Watermarks in v5\nDESCRIPTION: Example showing new watermark primitive implementation in v5 using createTextWatermark.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v4-to-v5.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChart, createTextWatermark } from 'lightweight-charts';\n\nconst chart = createChart(container, options);\nconst firstPane = chart.panes()[0];\n\ncreateTextWatermark(firstPane, {\n    horzAlign: 'center',\n    vertAlign: 'center',\n    lines: [{\n        text: 'Watermark Text',\n        color: 'rgba(255,0,0,0.5)',\n        fontSize: 50,\n    }],\n});\n```\n\n----------------------------------------\n\nTITLE: Watermarks in v4\nDESCRIPTION: Example showing watermark configuration in v4 using chart options.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v4-to-v5.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart(container, {\n    watermark: {\n        text: 'Watermark Text',\n        color: 'rgba(255,0,0,0.5)',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Chart Description Container\nDESCRIPTION: HTML structure for displaying dynamic chart descriptions for screen readers.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/screenreader.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"chart-description\" aria-live=\"assertive\">\n    <!-- The content here should be dynamically generated based on the chart data -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding ChartsView to Android Layout XML\nDESCRIPTION: Demonstrates how to include the ChartsView component in an Android XML layout file, setting its constraints and dimensions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/android.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <com.tradingview.lightweightcharts.view.ChartsView\n            android:id=\"@+id/charts_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"0dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n----------------------------------------\n\nTITLE: Creating a Font Size Toggle in HTML\nDESCRIPTION: This HTML snippet creates a checkbox input for toggling larger font sizes, improving accessibility for visually impaired users.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/readability.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" id=\"large-font-checkbox\" tabindex=\"0\" />\n<label for=\"large-font-checkbox\">Toggle Larger Font</label>\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Local Time Zone using JavaScript Date API\nDESCRIPTION: This function converts a UTC timestamp to the client's local time zone using the JavaScript Date API. It's useful when only local time zone support is needed.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/time-zones.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeToLocal(originalTime) {\n    const d = new Date(originalTime * 1000);\n    return Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()) / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HowToList Component in JSX\nDESCRIPTION: This code snippet defines a HowToList component that retrieves and renders a list of 'How To' tutorial links from the documentation sidebar.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const HowToList = () => {\n\tconst examplesCategory = useDocsSidebar().items.find(\n\t\titem => item.type === \"category\" && item.label === \"How To\"\n\t);\n\tconst examples = examplesCategory.items.filter(doc => doc.type === \"link\");\n\treturn (\n\t\t<ul>\n\t\t\t{examples.map(docLink => (\n\t\t\t\t<li key={docLink.docId}>\n\t\t\t\t\t<a href={docLink.href}>{docLink.label}</a>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Time Scale Subscription in JavaScript\nDESCRIPTION: Demonstrates how to update time scale subscription methods from v2 to v3. The new API moves these methods to the ITimeScaleApi interface.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v2-to-v3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v2 way\nchart.subscribeVisibleTimeRangeChange(func)\nchart.unsubscribeVisibleTimeRangeChange(func)\n\n// New v3 way\nchart.timeScale().subscribeVisibleTimeRangeChange(func)\nchart.timeScale().unsubscribeVisibleTimeRangeChange(func)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 4.1.7\nDESCRIPTION: Documents refinements to price scale label alignment\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.1.7\n\n**Enhancements**\n\n- Further Refinement of the Price Scale Label Alignment (PR [#1630](https://github.com/tradingview/lightweight-charts/pull/1630))\n```\n\n----------------------------------------\n\nTITLE: New API Methods for Series Data Access\nDESCRIPTION: New methods added to ISeriesApi interface for accessing markers and data by index, with time types standardized to Time across the public API.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/release-notes.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nISeriesApi.markers\nISeriesApi.dataByIndex\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 4.1.6\nDESCRIPTION: Details improvements to price scale label alignment algorithm\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.1.6\n\n**Enhancements**\n\n- Improved Price Scale Label Alignment: Enhanced the alignment algorithm for price scale labels to ensure they do not move out of the viewport.\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ARIA Attributes in Chart Container\nDESCRIPTION: Basic HTML setup showing how to add essential ARIA attributes to the chart container for accessibility.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/screenreader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"chart\" aria-live=\"assertive\" tabindex=\"0\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for Lightweight Charts in Custom Element\nDESCRIPTION: This code demonstrates how to create a div container for the chart within the custom element's shadow DOM using JavaScript.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n    // Create the div container for the chart\n    const container = document.createElement('div');\n    container.setAttribute('class', 'chart-container');\n\n    this.shadowRoot.append(container);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Version to Documentation\nDESCRIPTION: General command for creating a new documentation version. The version should match one of the available package versions on unpkg.com.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus docs:version $VERSION\n```\n\n----------------------------------------\n\nTITLE: Checking Time Value Types in Lightweight Charts v4\nDESCRIPTION: Demonstrates how to check and handle different types of time values (UTCTimestamp, BusinessDay, or string) in event subscriptions in Lightweight Charts v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    createChart,\n    isUTCTimestamp,\n    isBusinessDay,\n} from 'lightweight-charts';\n\nconst chart = createChart(document.body);\n\nchart.subscribeClick(param => {\n    if (param.time === undefined) {\n        // the time is undefined, i.e. there is no any data point where a time could be received from\n        return;\n    }\n\n    if (isUTCTimestamp(param.time)) {\n        // param.time is UTCTimestamp\n    } else if (isBusinessDay(param.time)) {\n        // param.time is a BusinessDay object\n    } else {\n        // param.time is a business day string in ISO format, e.g. `'2010-01-01'`\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 4.2.0\nDESCRIPTION: Documents new attributionLogo option and improved data validation features\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.2.0\n\n**Enhancements**\n\n- Added new [`attributionLogo`](https://tradingview.github.io/lightweight-charts/docs/api/interfaces/LayoutOptions#attributionLogo) option to `LayoutOptions`. This feature displays the TradingView attribution logo on the main chart pane by default, helping users meet the library's licensing requirements for attribution.\n  - The TradingView attribution logo can be easily hidden by setting the `attributionLogo` option to `false` in the chart's `layout` option.\n- Improved data validation for `OhlcData` and `SingleValueData`. Introduced `isFulfilledBarData` for `OhlcData` and `isFulfilledLineData` for `SingleValueData`, ensuring more accurate validation of data types.\n```\n\n----------------------------------------\n\nTITLE: Checking Time Value Types with Helper Functions\nDESCRIPTION: Demonstrates how to use the provided helper functions to check and handle different time value types in event callbacks.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v3-to-v4.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    createChart,\n    isUTCTimestamp,\n    isBusinessDay,\n} from 'lightweight-charts';\n\nconst chart = createChart(document.body);\n\nchart.subscribeClick(param => {\n    if (param.time === undefined) {\n        // the time is undefined, i.e. there is no any data point where a time could be received from\n        return;\n    }\n\n    if (isUTCTimestamp(param.time)) {\n        // param.time is UTCTimestamp\n    } else if (isBusinessDay(param.time)) {\n        // param.time is a BusinessDay object\n    } else {\n        // param.time is a business day string in ISO format, e.g. `'2010-01-01'`\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Series - New Method\nDESCRIPTION: Demonstrates the new v3 approach for creating overlay series using priceScaleId.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v2-to-v3.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst histogramSeries = chart.addHistogramSeries({\n    // or any other _the same_ id for all overlay series\n    priceScaleId: '',\n});\n```\n\n----------------------------------------\n\nTITLE: API Methods Addition - Series Data Access\nDESCRIPTION: New methods added to ISeriesApi interface for accessing markers and data by index. Time types have been standardized to 'Time' across the public API.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/release-notes.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nISeriesApi.markers\nISeriesApi.dataByIndex\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via npm\nDESCRIPTION: Command to install the Lightweight Charts library using npm package manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save lightweight-charts\n```\n\n----------------------------------------\n\nTITLE: Version 4.2.2 Release Notes in Markdown\nDESCRIPTION: Details improvements to price scale width calculation and fixes for fixLeftEdge and fixRightEdge calculations.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/release-notes.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.2.2\n\n**Minor Improvements**\n\n- Improved price scale width calculation by not allocating space for crosshair labels when the crosshair is disabled. (PR [#1743](https://github.com/tradingview/lightweight-charts/issues/1743))\n\n**Bug Fixes**\n\n- Fixed calculations for `fixLeftEdge` and `fixRightEdge` on the first render when both are true and data is added to an initially empty chart. Fixes issue [#1356](https://github.com/tradingview/lightweight-charts/issues/1356). (PR [#1741](https://github.com/tradingview/lightweight-charts/issues/1741))\n```\n\n----------------------------------------\n\nTITLE: Embedding an Accessible Chart in HTML\nDESCRIPTION: An iframe element embedding an accessible chart example. The code includes the iframe with a custom class and source file, plus links to view the chart in a new window or download the HTML file.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/a11y/intro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tclassName=\"standalone-iframe h400\"\n\tsrc={require('!!file-loader!./assets/a11y-chart.html').default}\n></iframe>\n<ul>\n\t<li>\n\t\t<a\n\t\t\thref={require('!!file-loader!./assets/a11y-chart.html').default}\n\t\t\ttarget=\"\\_blank\"\n\t\t>\n\t\t\tView in a new window\n\t\t</a>\n\t</li>\n\t<li>\n\t\t<a\n\t\t\thref={require('!!file-loader!./assets/a11y-chart.html').default}\n\t\t\tdownload=\"a11y-chart.html\"\n\t\t\ttarget=\"\\_blank\"\n\t\t>\n\t\t\tDownload the file\n\t\t</a>\n\t</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Loading Lightweight Charts Web Component in Different Environments\nDESCRIPTION: Demonstrates how to load the Lightweight Charts web component using either an import statement or a script tag.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/webcomponents/01-custom-element.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// side-effect import statement (use within a module js file)\nimport './lw-chart.js';\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"lw-chart.js\" defer></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Price Scale in Lightweight Charts v3\nDESCRIPTION: Shows how to configure the chart to display the price scale on the left side using the new API in Lightweight Charts v3. This involves setting visibility for both left and right price scales.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v2-to-v3.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    rightPriceScale: {\n        visible: false,\n    },\n    leftPriceScale: {\n        visible: true,\n    },\n});\n\nconst histSeries = chart.addHistogramSeries({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Watching and Applying Chart Options in Vue.js\nDESCRIPTION: This snippet shows how to use Vue's watch functionality to observe changes in chart options and apply them to the chart instance.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/vuejs/01-wrapper.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(\n    () => props.chartOptions,\n    newOptions => {\n        if (!chart) {\n            return;\n        }\n        chart.applyOptions(newOptions);\n    }\n);\n\nwatch(\n    () => props.priceScaleOptions,\n    newOptions => {\n        if (!chart) {\n            return;\n        }\n        chart.priceScale().applyOptions(newOptions);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Version 4.2.3 Release Notes in Markdown\nDESCRIPTION: Documents minor improvements and bug fixes in version 4.2.3, including improved crosshair label visibility and prototype pollution protection.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/release-notes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.2.3\n\n**Minor Improvements**\n\n- Improve check for crosshair label visibility on the price scale. This improves upon previous work (#1743 in v4.2.2) by reducing the allocated space for the crosshair when it is enabled, but the label is disabled. (PR [#1757](https://github.com/tradingview/lightweight-charts/issues/1757))\n\n**Bug Fixes**\n\n- Added additional prototype pollution protection for internal merge helper function. (PR [#1758](https://github.com/tradingview/lightweight-charts/issues/1758))\n```\n\n----------------------------------------\n\nTITLE: Using hoveredObjectId in Mouse Event Handlers\nDESCRIPTION: Demonstrates how to use the renamed hoveredObjectId property (formerly hoveredMarkerId) in mouse event handlers in Lightweight Charts v4.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchart.subscribeCrosshairMove(param => {\n    console.log(param.hoveredObjectId);\n});\n\nchart.subscribeClick(param => {\n    console.log(param.hoveredObjectId);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Price Scale - New Method\nDESCRIPTION: Demonstrates the new v3 approach for configuring left price scale visibility and series assignment.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v2-to-v3.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    rightPriceScale: {\n        visible: false,\n    },\n    leftPriceScale: {\n        visible: true,\n    },\n});\n\nconst histSeries = chart.addHistogramSeries({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Release Notes Formatting with Markdown\nDESCRIPTION: Markdown-formatted release notes with version headings, bullet points, and links to GitHub pull requests and issues. Uses HTML comments for markdown linting configuration.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- markdownlint-disable no-emphasis-as-heading -->\n<!-- ^ using emphasis as headings so we don't have duplicate headers -->\n<!--\n\nUnreleased\n\n## 5.0.7\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via npm\nDESCRIPTION: Command to install the lightweight-charts package using npm.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install lightweight-charts\n```\n\n----------------------------------------\n\nTITLE: Examples of Bad vs Good Issue Titles in Markdown\nDESCRIPTION: Demonstrates the contrast between a poor issue title that is emotional and unhelpful versus a good title that is clear, descriptive, and searchable.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n_Bad_: Oh my god! This goddamn thing just blew up! Is that my torn off finger laying out there? Oh my freaking god!\n\n_Good_: ACME graphics card overheats and causes injuries when using the software\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Link List for Guides in JSX\nDESCRIPTION: This code snippet renders a CardLinkList component with items for Customization and Accessibility guides, including titles, images, and descriptions.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardLinkList\n\titems={[\n\t\t{\n\t\t\thref: \"/tutorials/customization/intro\",\n\t\t\ttitle: \"Customization\",\n\t\t\timage: <Shapes />,\n\t\t\tdescription: \"Customizing appearance & features\",\n\t\t},\n\t\t{\n\t\t\thref: \"/tutorials/a11y/intro\",\n\t\t\ttitle: \"Accessibility\",\n\t\t\timage: <A11y />,\n\t\t\tdescription: \"How to improve A11y support\",\n\t\t},\n\t]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Code References in Markdown Documentation\nDESCRIPTION: Inline code references showing configuration options and API methods for price scales in the TradingView Lightweight Charts library. These include options for left, right, and overlay price scales, along with methods to access and manage price scale objects.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/price-scale.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`left`\n`right`\n`leftPriceScale`\n`rightPriceScale`\n`overlayPriceScales`\n`IChartApi.priceScale`\n`ISeriesApi.priceScale`\n`priceScaleId`\n`visible`\n`IPriceScaleApi`\n`IPriceScaleApi.id`\n```\n\n----------------------------------------\n\nTITLE: Running Interaction Tests with Bash Script\nDESCRIPTION: Bash command to execute interaction tests using a provided script.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/run-interactions-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Building Lightweight Charts Library\nDESCRIPTION: Commands to install dependencies and build the Lightweight Charts library in production mode.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/plugin-examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build:prod\n```\n\n----------------------------------------\n\nTITLE: Removing a Sandbox from Lightweight Charts Debug Environment in Bash\nDESCRIPTION: Command to delete a sandbox, removing everything under playground/<NAME>.d including the directory itself.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/debug/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run remove <NAME>\n```\n\n----------------------------------------\n\nTITLE: Accessing Price Scales with Explicit IDs\nDESCRIPTION: Demonstrates the new requirement to specify price scale IDs when accessing price scales through the chart API\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rightPriceScale = chart.priceScale('right');\nconst leftPriceScale = chart.priceScale('left');\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Series - Legacy Method\nDESCRIPTION: Shows the deprecated way of creating overlay series in v2.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v2-to-v3.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst histogramSeries = chart.addHistogramSeries({\n    overlay: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes Documentation in Markdown\nDESCRIPTION: Markdown formatted release notes detailing changes, enhancements, bug fixes and contributor acknowledgments for TradingView Lightweight Charts library versions 3.5.0 through 3.8.0.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/release-notes.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.8.0\n\nWe're happy to announce the next release of Lightweight Charts™ library...\n\n**Enhancement**\n\n- Documentation website...\n\n**Fixed**\n\n- timeScale.fitContent is not working correctly...\n\n## 3.7.0\n\n**Enhancement**\n\n- The new baseline series chart...\n\n**Fixed**\n\n- Increased min price tick mark...\n\n## 3.6.1\n\n**Fixed**\n\n- In v3.6.0 there was a typo...\n\n## 3.6.0\n\n**Enhancement**\n\n- Gradient chart background color...\n\n## 3.5.0\n\n**Fixed**\n\n- Screenshot output missing piece...\n```\n\n----------------------------------------\n\nTITLE: Creating Debug HTML File\nDESCRIPTION: Command to create a debug.html file from the example template for local testing.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/BUILDING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp debug.html.example debug.html\n```\n\n----------------------------------------\n\nTITLE: Working with Consistent Time Values in Event Callbacks\nDESCRIPTION: Shows how time values are now consistently returned in the same format they were provided, and how to handle different time formats in event callbacks.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v3-to-v4.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nseries.setData([\n    { time: '2001-01-01', value: 1 },\n]);\n\nchart.applyOptions({\n    localization: {\n        timeFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n    timeScale: {\n        tickMarkFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n});\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.time); // will be '2001-01-01' if you hover the bar above\n});\n\nchart.subscribeClick(param => {\n    console.log(param.time); // will be '2001-01-01' if you click on the bar above\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Lightweight Charts via npm\nDESCRIPTION: Command to install the Lightweight Charts library using npm package manager.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save lightweight-charts\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with npm\nDESCRIPTION: Command to execute unit tests for the Lightweight Charts library using npm.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Graphics Tests with Bash Script\nDESCRIPTION: Bash command to execute graphics tests using a provided script.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/run-graphics-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Building Lightweight Charts Source Code\nDESCRIPTION: Commands for compiling TypeScript source code, with options for watch mode and verification of imports and dependencies.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/BUILDING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run tsc\nnpm run tsc-watch\nnpm run tsc-verify\n```\n\n----------------------------------------\n\nTITLE: Versioning Documentation\nDESCRIPTION: Command to create a new versioned documentation in the website folder.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/BUILDING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus docs:version MAJ.MIN\n```\n\n----------------------------------------\n\nTITLE: Updating Series Scale Margins in JavaScript\nDESCRIPTION: Demonstrates how to apply scale margin options to a series' price scale in v4, replacing the deprecated method from v3.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v3-to-v4.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = chart.addLineSeries();\n\nseries.priceScale().applyOptions({\n    scaleMargins: { /* options here */},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Series in JavaScript\nDESCRIPTION: This snippet illustrates how to create an overlay series in version 3 of Lightweight Charts™. It shows the new way of specifying an overlay by setting the priceScaleId to an empty string.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst histogramSeries = chart.addHistogramSeries({\n    // or any other _the same_ id for all overlay series\n    priceScaleId: '',\n});\n```\n\n----------------------------------------\n\nTITLE: No Price Scale Configuration - Old Method\nDESCRIPTION: Deprecated method for creating a chart without visible price scales in v2.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/migrations/from-v2-to-v3.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    priceScale: {\n        position: 'none',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Graphics Tests on Specific Files\nDESCRIPTION: Command to run graphics tests on specific JavaScript files using npx and esno.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx esno ./tests/e2e/graphics/runner.ts ./path/to/golden/standalone/module.js ./path/to/test/standalone/module.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Scale Ticks Visibility\nDESCRIPTION: Shows how to configure price scale ticks visibility using the new ticksVisible property instead of drawTicks\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart({\n    leftPriceScale: {\n        ticksVisible: false,\n    },\n    rightPriceScale: {\n        ticksVisible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Lightweight Charts Documentation\nDESCRIPTION: Command to start a local development server that opens a browser window. Changes are reflected live without needing to restart the server. Note that API documentation won't be generated unless the library and its typings file are already built.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Building Package for Publishing\nDESCRIPTION: Command to build and prepare the package for publication to NPM registry.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/BUILDING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run prepublishOnly\n```\n\n----------------------------------------\n\nTITLE: Running Memory Leak Tests on Specific File\nDESCRIPTION: Command to run memory leak tests on a specific JavaScript file using npx and esno.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx esno ./tests/e2e/memleaks/runner.ts ./dist/lightweight-charts.standalone.development.js\n```\n\n----------------------------------------\n\nTITLE: Testing Lightweight Charts Code\nDESCRIPTION: Commands for running linting and unit tests on the codebase.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/BUILDING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Preparing a Release\nDESCRIPTION: Command to prepare the package for release to npm.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/BUILDING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prepare-release\n```\n\n----------------------------------------\n\nTITLE: Updating Series Scale Margins Configuration\nDESCRIPTION: Demonstrates the new way to apply scale margin options to series' price scale, replacing the deprecated direct series options approach\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = chart.addLineSeries();\n\nseries.priceScale().applyOptions({\n    scaleMargins: { /* options here */},\n});\n```\n\n----------------------------------------\n\nTITLE: Series Price Scale Assignment\nDESCRIPTION: Example showing how to assign a series to a specific price scale using the new priceScaleId property.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/migrations/from-v2-to-v3.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst histSeries = chart.addHistogramSeries({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Lightweight Charts\nDESCRIPTION: Build configuration to add required repositories and dependencies for Lightweight Charts Android wrapper.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/android.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    //...\n    implementation 'com.tradingview:lightweightcharts:3.8.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Running Graphics Tests with Environmental Variables\nDESCRIPTION: Command to run graphics tests with specific environmental variables for build type, pixel ratio, and output directory.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPRODUCTION_BUILD=false DEVICE_PIXEL_RATIO=1.5 npx esno ./tests/e2e/graphics/runner.ts ./golden/lightweight-charts.standalone.development.js ./dist/lightweight-charts.standalone.development.js\n```\n\n----------------------------------------\n\nTITLE: Example Git Commit Messages in Markdown\nDESCRIPTION: Shows different formats for referencing GitHub issues in commit messages, including inline references and structured commit messages with links to specific comments.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `Fixed bug in the method getFoo #42`\n- `Fixed bug with ... (fixes #42)`\n\n- ```text\n    Fixed bug with rendering\n\n    See LINK_TO_COMMENT\n    ```\n```\n\n----------------------------------------\n\nTITLE: Building the Documentation Website\nDESCRIPTION: Command to generate static content in the build directory. API documentation won't be generated unless the library and its typings file are already built.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Initializing Debug Environment for Lightweight Charts in Bash\nDESCRIPTION: Command to initialize the common root directory for all experiment sandboxes in the debug folder.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/debug/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run init\n```\n\n----------------------------------------\n\nTITLE: Creating a Sandbox for Lightweight Charts Testing in Bash\nDESCRIPTION: Command to create a new sandbox with a specified name. The sandbox will be created under playground/<NAME>.d and includes lightweight-charts, typescript, and vite by default.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/debug/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run create <NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Without Visible Price Scales in JavaScript\nDESCRIPTION: Demonstrates how to create a chart without any visible price scales in v3, replacing the v2 method. This involves setting both left and right price scales to invisible.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v2-to-v3.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v2 way\nconst chart = LightweightCharts.createChart(container, {\n    priceScale: {\n        position: 'none',\n    },\n});\n\n// New v3 way\nconst chart = LightweightCharts.createChart(container, {\n    leftPriceScale: {\n        visible: false,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Generator with Package Managers\nDESCRIPTION: Commands to create a new Lightweight Charts plugin project using different package managers (NPM, Yarn, and PNPM).\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create lwc-plugin@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create lwc-plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create lwc-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Example Dependencies\nDESCRIPTION: Command to install dependencies for the example project using CocoaPods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/ios.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Adding Series to Chart in Kotlin\nDESCRIPTION: Kotlin code showing how to add a histogram series to the chart and store a reference to it.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/android.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nlateinit var histogramSeries: SeriesApi\ncharts_view.api.addHistogramSeries(\n    onSeriesCreated = { series ->\n        histogramSeries = series\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Running Graphics Tests with TypeScript Runner\nDESCRIPTION: Command to run graphics tests using the TypeScript runner script. It compares a golden (LKG) version with a test version of the library.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/e2e/graphics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx esno ./runner.ts ./path/to/golden/standalone/module.js ./path/to/test/standalone/module.js\n```\n\n----------------------------------------\n\nTITLE: Publishing to npm\nDESCRIPTION: Commands for publishing the package to npm, including the pre-release version with a 'next' tag.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/BUILDING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n\n# For pre-release:\nnpm publish --tag next\n```\n\n----------------------------------------\n\nTITLE: Example of Adding Specific Version to Documentation\nDESCRIPTION: Example command showing how to add version 3.7.0 to the documentation using the Docusaurus versioning system.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus docs:version 3.7.0\n```\n\n----------------------------------------\n\nTITLE: Checking Package for Publishing\nDESCRIPTION: Command to check the generated package.json for issues before publishing.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/BUILDING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx publint\n```\n\n----------------------------------------\n\nTITLE: Running a Production Sandbox for Lightweight Charts in Bash\nDESCRIPTION: Command to run a sandbox against the production (minified) build of lightweight-charts.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/debug/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve:prod <NAME>\n```\n\n----------------------------------------\n\nTITLE: Accessing Price Scales with Explicit IDs in Lightweight Charts v4\nDESCRIPTION: Illustrates how to access price scales using explicit IDs in Lightweight Charts v4, which is now required instead of the previous implicit behavior.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v3-to-v4.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rightPriceScale = chart.priceScale('right');\nconst leftPriceScale = chart.priceScale('left');\n```\n\n----------------------------------------\n\nTITLE: Setting Markers in Lightweight Charts v4\nDESCRIPTION: Demonstrates how to set markers on a series in Lightweight Charts version 4. This method is no longer used in v5.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v4-to-v5.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Markers were directly managed through the series instance\nseries.setMarkers([\n    {\n        time: '2019-04-09',\n        position: 'aboveBar',\n        color: 'black',\n        shape: 'arrowDown',\n    },\n]);\n\n// Getting markers\nconst markers = series.markers();\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Development Environment\nDESCRIPTION: Commands to install dependencies and start the development server. The server will be accessible at localhost:5173.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/template-common/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Serving Built Website Locally\nDESCRIPTION: Command to serve the built website locally. Note that embedded .html examples won't display correctly when using this command but will work when hosted online.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Importing Lightweight Charts Library\nDESCRIPTION: Import statement required to use Lightweight Charts in Swift code.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/ios.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport LightweightCharts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for create-lwc-plugin\nDESCRIPTION: Initial setup command to install all required dependencies for the project development.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/BUILDING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Local CLI\nDESCRIPTION: Command to execute the CLI tool locally during development.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/BUILDING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Verification of Local Code\nDESCRIPTION: Command to run comprehensive checks on the local codebase before submitting changes.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/BUILDING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run verify\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests on Specific File\nDESCRIPTION: Command to run coverage tests on a specific JavaScript file using npx and esno.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx esno ./tests/e2e/coverage/runner.ts ./dist/lightweight-charts.standalone.development.js\n```\n\n----------------------------------------\n\nTITLE: Moving Price Scale from Right to Left in Lightweight Charts v3\nDESCRIPTION: Demonstrates how to move the price scale from right to left using the new API in Lightweight Charts v3. This involves changing visibility of price scales and updating the priceScaleId of the series.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v2-to-v3.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    leftPriceScale: {\n        visible: true,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n\nmainSeries.applyOptions({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling Plugin\nDESCRIPTION: Command to compile the plugin into the dist folder for distribution.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/template-common/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Deploying Documentation to GitHub Pages\nDESCRIPTION: Command to build static files and push them to the gh-pages branch. Requires GitHub credentials and organization name. API documentation won't be generated unless the library and its typings file are already built.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nGIT_USER=<Your GitHub username> GITHUB_ORGANIZATION_NAME=<Your Github username or organization name> USE_SSH=true npm deploy\n```\n\n----------------------------------------\n\nTITLE: Running Graphics Tests with Additional Options\nDESCRIPTION: Command to run graphics tests with additional options like bail (stop on first failure) and grep (filter test cases by name).\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/e2e/graphics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx esno ./tests/e2e/graphics/runner.ts ./path/to/golden/standalone/module.js ./path/to/test/standalone/module.js --bail --grep \"add-series\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Compilation and Publishing\nDESCRIPTION: Commands for compiling the plugin to the dist folder and publishing it to NPM. Includes an option for dry-run testing of the publish process.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run compile\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd dist\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Left Price Scale Configuration - Old Method\nDESCRIPTION: Example showing the deprecated way of configuring left price scale positioning in v2.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/migrations/from-v2-to-v3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    priceScale: {\n        position: 'left',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files for Debugging\nDESCRIPTION: Command to serve static files for debugging purposes when running tests with local files. This allows opening HTML pages generated during tests in a browser.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/e2e/graphics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx esno ./tests/e2e/serve-static-files.ts golden.js:./golden/standalone/module.js test.js:./test/standalone/module.js\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Without Visible Price Scales in JavaScript\nDESCRIPTION: This code snippet shows how to create a chart without any visible price scales in version 3 of Lightweight Charts™. It demonstrates setting both left and right price scales to invisible.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    leftPriceScale: {\n        visible: false,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling Plugin Examples\nDESCRIPTION: Command to compile the plugin examples, with output directed to the 'compiled' folder.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/plugin-examples/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Bundling Lightweight Charts Code\nDESCRIPTION: Commands for running Rollup to bundle code, with options for regular and production builds.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/BUILDING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run rollup\nnpm run build\nnpm run build:prod\n```\n\n----------------------------------------\n\nTITLE: Defining ExamplesList Component in JSX\nDESCRIPTION: This code snippet defines an ExamplesList component that retrieves and renders a list of 'Examples / Demos' links from the documentation sidebar.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const ExamplesList = () => {\n\tconst examplesCategory = useDocsSidebar().items.find(\n\t\titem => item.type === \"category\" && item.label === \"Examples / Demos\"\n\t);\n\tconst examples = examplesCategory.items.filter(doc => doc.type === \"link\");\n\treturn (\n\t\t<ul>\n\t\t\t{examples.map(docLink => (\n\t\t\t\t<li key={docLink.docId}>\n\t\t\t\t\t<a href={docLink.href}>{docLink.label}</a>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Example Dependencies\nDESCRIPTION: Command to install dependencies for the example project using CocoaPods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/ios.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Price Scale - Old Method\nDESCRIPTION: Previous method for configuring the price scale position to the left side of the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    priceScale: {\n        position: 'left',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Specific Time Zone using date-fns-tz\nDESCRIPTION: This function uses the date-fns-tz library to convert a given timestamp to a specified time zone. It provides an alternative method for time zone conversion that may be more efficient for some use cases.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.0/time-zones.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utcToZonedTime } from 'date-fns-tz';\n\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = utcToZonedTime(new Date(originalTime * 1000), timeZone);\n    return zonedDate.getTime() / 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Price Scale Position Change - New Method\nDESCRIPTION: Updated method for changing price scale position and series assignment after chart creation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/migrations/from-v2-to-v3.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    leftPriceScale: {\n        visible: true,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n\nmainSeries.applyOptions({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Building Lightweight Charts for Sandbox Testing in Bash\nDESCRIPTION: Command to rebuild the lightweight-charts library, which is necessary before running a sandbox as it depends on your local copy.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/debug/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build --prefix ..\n```\n\n----------------------------------------\n\nTITLE: Running Memory Leak Tests with Bash Script\nDESCRIPTION: Bash command to execute memory leak tests using a provided script.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/run-memleaks-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Moving Price Scale Position - Legacy Method\nDESCRIPTION: Shows the old way of changing price scale position in v2.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v2-to-v3.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    priceScale: {\n        position: 'left',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Price Scale Position - New Method\nDESCRIPTION: Demonstrates the new v3 approach for changing price scale position and series assignment.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/migrations/from-v2-to-v3.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container);\n\nconst mainSeries = chart.addLineSeries();\n\n// ...\n\nchart.applyOptions({\n    leftPriceScale: {\n        visible: true,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n\nmainSeries.applyOptions({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage File\nDESCRIPTION: Command to generate a coverage file during test execution, using environmental variables to control output.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGENERATE_COVERAGE_FILE=true node ./tests/e2e/coverage/runner.js ./dist/lightweight-charts.standalone.development.js\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Commands\nDESCRIPTION: Commands to install dependencies and start the development server for local plugin development. The dev server runs on localhost:5173.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing a Baseline Series in JavaScript\nDESCRIPTION: This snippet illustrates how to create a baseline series chart using Lightweight Charts. It shows how to set chart options, create the chart, add a baseline series with custom colors and base value, and set data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/series-types.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst baselineSeries = chart.addBaselineSeries({ baseValue: { type: 'price', price: 25 }, topLineColor: BASELINE_TOP_LINE_COLOR, topFillColor1: BASELINE_TOP_FILL_COLOR1, topFillColor2: BASELINE_TOP_FILL_COLOR2, bottomLineColor: BASELINE_BOTTOM_LINE_COLOR, bottomFillColor1: BASELINE_BOTTOM_FILL_COLOR1, bottomFillColor2: BASELINE_BOTTOM_FILL_COLOR2 });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nbaselineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Overlay Series Creation - New Method\nDESCRIPTION: New method for creating an overlay series using an empty priceScaleId.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/migrations/from-v2-to-v3.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst histogramSeries = chart.addHistogramSeries({\n    // or any other _the same_ id for all overlay series\n    priceScaleId: '',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Version Warning Admonition in JSX\nDESCRIPTION: This code snippet renders a VersionWarningAdmonition component with specific props to display a warning message for tutorials that are not on the latest published version.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<VersionWarningAdmonition\n\tnotCurrent=\"These tutorials are for the latest published version of Lightweight Charts.\"\n\ttype=\"caution\"\n\tdisplayVersionMessage\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Baseline Chart Series in TradingView Lightweight Charts\nDESCRIPTION: Implements a baseline chart series with custom colors for areas above and below a base value line. The chart uses gradient fills and different colors for positive and negative areas.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/series-types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chartOptions = { layout: { textColor: CHART_TEXT_COLOR, background: { type: 'solid', color: CHART_BACKGROUND_COLOR } } };\nconst chart = createChart(document.getElementById('container'), chartOptions);\nconst baselineSeries = chart.addSeries(BaselineSeries, { baseValue: { type: 'price', price: 25 }, topLineColor: BASELINE_TOP_LINE_COLOR, topFillColor1: BASELINE_TOP_FILL_COLOR1, topFillColor2: BASELINE_TOP_FILL_COLOR2, bottomLineColor: BASELINE_BOTTOM_LINE_COLOR, bottomFillColor1: BASELINE_BOTTOM_FILL_COLOR1, bottomFillColor2: BASELINE_BOTTOM_FILL_COLOR2 });\n\nconst data = [{ value: 1, time: 1642425322 }, { value: 8, time: 1642511722 }, { value: 10, time: 1642598122 }, { value: 20, time: 1642684522 }, { value: 3, time: 1642770922 }, { value: 43, time: 1642857322 }, { value: 41, time: 1642943722 }, { value: 43, time: 1643030122 }, { value: 56, time: 1643116522 }, { value: 46, time: 1643202922 }];\n\nbaselineSeries.setData(data);\n\nchart.timeScale().fitContent();\n```\n\n----------------------------------------\n\nTITLE: Configuring No Price Scale - New Method\nDESCRIPTION: Updated method for creating a chart with both price scales hidden.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/migrations/from-v2-to-v3.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = LightweightCharts.createChart(container, {\n    leftPriceScale: {\n        visible: false,\n    },\n    rightPriceScale: {\n        visible: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Package to NPM\nDESCRIPTION: Command to publish the package to NPM registry. Can be used with --dry-run flag for testing.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/packages/create-lwc-plugin/BUILDING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Example Code Reference - Horizontal Price Scale Test\nDESCRIPTION: Reference to a test case implementation showing horizontal price scale customization, which demonstrates using createChartEx function and implementing IHorzScaleBehavior interface.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/release-notes.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhorizontal-price-scale.js\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Documentation\nDESCRIPTION: Structured changelog entries documenting version updates, breaking changes, enhancements, and bug fixes for TradingView's Lightweight Charts library\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.2/release-notes.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.1\n\n**Fixed**\n\n- Correctly handle `overlay: true` in series options while create series to backward compat (see [#475](https://github.com/tradingview/lightweight-charts/issues/475))\n\n## 3.0.0\n\n**Breaking changes**\n\nWe have some breaking changes since the latest version due some features and API improvements:\n\n- Methods `subscribeVisibleTimeRangeChange` and `unsubscribeVisibleTimeRangeChange` has been moved from ChartApi to TimeScaleApi\n- Since 3.0 you can specify price axis you'd like to place the series on. The same for moving the series between price scales\n\n**Enhancement**\n\n- Added ability to customize time scale tick marks formatter\n- Added ability to put text for series markers\n- Added ability to specify your own date formatter\n```\n\n----------------------------------------\n\nTITLE: Running a Development Sandbox for Lightweight Charts in Bash\nDESCRIPTION: Command to run a sandbox in development mode, starting a web server with TypeScript compilation and live reload functionality.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/debug/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve <NAME>\n```\n\n----------------------------------------\n\nTITLE: Starting Plugin Examples Development Server\nDESCRIPTION: Commands to navigate to the plugin examples folder, install dependencies, and start the development server.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/plugin-examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd plugin-examples\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Interaction Tests on Specific File\nDESCRIPTION: Command to run interaction tests on a specific JavaScript file using npx and esno.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx esno ./tests/e2e/interactions/runner.ts ./dist/lightweight-charts.standalone.development.js\n```\n\n----------------------------------------\n\nTITLE: Running Branch-Specific Graphics Tests\nDESCRIPTION: Command to run graphics tests using test case code from the golden branch for the golden build. This is useful when testing API syntax changes.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/e2e/graphics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBRANCH_SPECIFIC_TEST=\"true\" ./scripts/run-graphics-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Canvas Context Handling with Save/Restore Pattern\nDESCRIPTION: Demonstration of best practices for rendering functions by using save/restore with try/finally blocks to ensure the canvas context state is properly maintained even if errors occur. This pattern should be used for any additional rendering functions within the coordinate space methods.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/canvas-rendering-target.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myRenderingFunction(scope) {\n    const ctx = scope.context;\n\n    // save the current state of the context to the stack\n    ctx.save();\n\n    try {\n        // example code\n        scope.context.beginPath();\n        scope.context.rect(0, 0, scope.mediaSize.width, scope.mediaSize.height);\n        scope.context.fillStyle = 'rgba(100, 200, 50, 0.5)';\n        scope.context.fill();\n    } finally {\n        // restore the saved context from the stack\n        ctx.restore();\n    }\n}\n\ntarget.useMediaCoordinateSpace(scope => {\n    myRenderingFunction(scope);\n    myOtherRenderingFunction(scope);\n    /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Data for Bar Series in Lightweight Charts using Swift\nDESCRIPTION: Demonstrates how to create bar data and set it to the bar series in Swift. This populates the bar chart with actual data points.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/ios.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet data = [\n    BarData(time: .string(\"2018-10-19\"), open: 180.34, high: 180.99, low: 178.57, close: 179.85),\n    BarData(time: .string(\"2018-10-22\"), open: 180.82, high: 181.40, low: 177.56, close: 178.75),\n    BarData(time: .string(\"2018-10-23\"), open: 175.77, high: 179.49, low: 175.44, close: 178.53),\n    BarData(time: .string(\"2018-10-24\"), open: 178.58, high: 182.37, low: 176.31, close: 176.97),\n    BarData(time: .string(\"2018-10-25\"), open: 177.52, high: 180.50, low: 176.83, close: 179.07)\n]\n\n// ...\nseries.setData(data: data)\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests with Bash Script\nDESCRIPTION: Bash command to execute coverage tests using a provided script.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/run-coverage-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-line Text Watermark in Lightweight Charts v5\nDESCRIPTION: Demonstrates how to implement a multi-line text watermark using the new TextWatermark plugin in Lightweight Charts version 5. This example shows advanced usage with multiple lines and different styles.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/migrations/from-v4-to-v5.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart(container, options);\nconst mainSeries = chart.addSeries(LineSeries);\nmainSeries.setData(generateData());\n\nconst firstPane = chart.panes()[0];\ncreateTextWatermark(firstPane, {\n    horzAlign: 'center',\n    vertAlign: 'center',\n    lines: [\n        {\n            text: 'Hello',\n            color: 'rgba(255,0,0,0.5)',\n            fontSize: 100,\n            fontStyle: 'bold',\n        },\n        {\n            text: 'This is a text watermark',\n            color: 'rgba(0,0,255,0.5)',\n            fontSize: 50,\n            fontStyle: 'italic',\n            fontFamily: 'monospace',\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Documentation\nDESCRIPTION: Structured markdown documentation detailing version changes, enhancements, and bug fixes for TradingView Lightweight Charts library from version 4.1.1 to 4.2.0.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/release-notes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.2.0\n\n**Enhancements**\n\n- Added new [`attributionLogo`](https://tradingview.github.io/lightweight-charts/docs/api/interfaces/LayoutOptions#attributionLogo) option to `LayoutOptions`. This feature displays the TradingView attribution logo on the main chart pane by default, helping users meet the library's licensing requirements for attribution.\n  - The TradingView attribution logo can be easily hidden by setting the `attributionLogo` option to `false` in the chart's `layout` option.\n- Improved data validation for `OhlcData` and `SingleValueData`. Introduced `isFulfilledBarData` for `OhlcData` and `isFulfilledLineData` for `SingleValueData`, ensuring more accurate validation of data types.\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Price Scale in JavaScript\nDESCRIPTION: Shows how to configure the chart to use a left price scale in v3, replacing the deprecated v2 method. This includes making the left scale visible and the right scale invisible.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/migrations/from-v2-to-v3.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v2 way\nconst chart = LightweightCharts.createChart(container, {\n    priceScale: {\n        position: 'left',\n    },\n});\n\n// New v3 way\nconst chart = LightweightCharts.createChart(container, {\n    rightPriceScale: {\n        visible: false,\n    },\n    leftPriceScale: {\n        visible: true,\n    },\n});\n\nconst histSeries = chart.addHistogramSeries({\n    priceScaleId: 'left',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Pane Primitive to a Chart in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a chart, get the main pane, and attach a custom Pane Primitive to it. It shows the basic workflow for integrating Pane Primitives into a Lightweight Charts implementation.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/plugins/pane-primitives.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = createChart(document.getElementById('container'));\nconst pane = chart.panes()[0]; // Get the first (main) pane\n\nconst myPanePrimitive = new MyCustomPanePrimitive();\npane.attachPrimitive(myPanePrimitive);\n```\n\n----------------------------------------\n\nTITLE: Interactive Demo of zOrder Layers in Lightweight Charts\nDESCRIPTION: This code snippet provides an interactive demo chart illustrating where each zOrder is drawn relative to existing chart elements such as the grid, series, and crosshair.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/plugins/series-primitives.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport layersExplainerCode from '!!raw-loader!./explainer-layers-demo.js';\n\n<CodeBlock replaceThemeConstants chart className=\"language-js\" chartOnly>\n\t{layersExplainerCode}\n</CodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Font Family in Lightweight Charts\nDESCRIPTION: This code demonstrates how to create a function to set a custom font family for a Lightweight Charts instance. The function uses chart.applyOptions() to modify the layout.fontFamily property, allowing for dynamic font changes on the chart.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/tutorials/demos/custom-font-family.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setFontFamily(fontFamily) {\n\tchart.applyOptions({\n\t\tlayout: {\n\t\t\tfontFamily,\n\t\t},\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Applying TimeScale Options in TypeScript\nDESCRIPTION: This code snippet shows two equivalent ways to apply time scale options: directly through the time scale API or via the chart's applyOptions method with a timeScale sub-object.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/time-scale.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntimeScale.applyOptions(options);\n\n// Equivalent approach\nchart.applyOptions({\n    timeScale: options\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Format\nDESCRIPTION: Structured markdown format for documenting release notes, including version headers, enhancement lists, bug fixes, and contributor acknowledgments.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-3.8/release-notes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- markdownlint-disable no-emphasis-as-heading -->\n<!-- ^ using emphasis as headings so we don't have duplicate headers -->\n\n## 3.8.0\n\n**Enhancement**\n\n- Documentation website\n- Quick tracking mode\n- Improved mouse behaviour\n\n**Fixed**\n\n- timeScale.fitContent issues\n- Delegate.unsubscribeAll method\n- Last price animation fixes\n\nThanks to our contributors:\n- [@contributor](https://github.com/contributor)\n```\n\n----------------------------------------\n\nTITLE: Sections Demo Implementation for TradingView Charts\nDESCRIPTION: A code example demonstrating different sections where primitives can draw on the chart, referenced as 'explainer-sections-demo.js'\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-5.0/plugins/series-primitives.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsectionsExplainerCode\n```\n\n----------------------------------------\n\nTITLE: Adding Lightweight Charts Dependency in Gradle Module\nDESCRIPTION: Adds the Lightweight Charts Android wrapper dependency to the module's build.gradle file.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/versioned_docs/version-4.1/android.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    //...\n    implementation 'com.tradingview:lightweightcharts:3.8.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Lightweight Charts Plugin\nDESCRIPTION: Command to use the create-lwc-plugin package for scaffolding a new plugin project from a template.\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/plugin-examples/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm create lwc-plugin@latest\n```\n\n----------------------------------------\n\nTITLE: Version Number Display\nDESCRIPTION: Version headers for each release section\nSOURCE: https://github.com/tradingview/lightweight-charts/blob/master/website/docs/release-notes.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.8.0\n## 3.7.0\n## 3.6.1\n## 3.6.0\n## 3.5.0\n```"
  }
]