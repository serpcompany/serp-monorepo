[
  {
    "owner": "azure",
    "repo": "bicep",
    "content": "TITLE: Deploying Bicep Code using Azure CLI\nDESCRIPTION: This snippet demonstrates how to deploy a Bicep file to a resource group using the Azure CLI.  It uses the `az deployment group create` command to create a deployment.  The `-f` flag specifies the path to the Bicep file, and the `-g` flag specifies the resource group to deploy to.  This assumes that the Azure CLI is installed and configured correctly.\nSOURCE: https://github.com/azure/bicep/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz deployment group create -f ./main.bicep -g my-rg\n```\n\n----------------------------------------\n\nTITLE: Declaring a Location Parameter in Bicep Language\nDESCRIPTION: Defines a parameter named 'location' of type string, with its default value set dynamically to the location of the Azure resource group using the resourceGroup() function. This parameter can be used to specify deployment locations in Bicep templates. Dependencies include an Azure environment where resourceGroup() is valid, and this parameter expects no external input if used as is.\nSOURCE: https://github.com/azure/bicep/blob/main/src/vscode-bicep/media/walkthroughs/gettingStarted/2_Type_Params.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\nparam location string = resourceGroup().location\n```\n\n----------------------------------------\n\nTITLE: Declaring an App Service Plan Name Parameter with Unique String in Bicep Language\nDESCRIPTION: Defines a string parameter named 'appPlanName' that initializes with a unique string generated from the resource group's ID concatenated with 'plan'. The uniqueString() function ensures that the name is distinct within Azure environments. This parameter is useful for naming Azure App Service Plans uniquely within a deployment context, avoiding conflicts. It relies on the resourceGroup() intrinsic function and string interpolation.\nSOURCE: https://github.com/azure/bicep/blob/main/src/vscode-bicep/media/walkthroughs/gettingStarted/2_Type_Params.md#_snippet_1\n\nLANGUAGE: bicep\nCODE:\n```\nparam appPlanName string = '${uniqueString(resourceGroup().id)}plan'\n```\n\n----------------------------------------\n\nTITLE: Instantiating Azure Bicep Module\nDESCRIPTION: This Bicep code snippet demonstrates how to instantiate a module. It uses the `module` keyword to declare an instance of a module named `mod`. It specifies required parameters and sets their values. The module is pulled from a public registry and versioned.  Dependencies include the Azure Bicep compiler.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool.TestFixtures/Samples/Valid/README.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\nmodule mod 'br/public:test/testmodule:1.1.1' = {\n  name: 'mod'\n  params: {\n    dnsPrefix: ''\n    linuxAdminUsername: ''\n    sshRSAPublicKey: ''\n    servicePrincipalClientId: ''\n    servicePrincipalClientSecret: ''\n    osDiskSizeGB: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining parameters in Azure Bicep module\nDESCRIPTION: This snippet defines input parameters for the Bicep module, specifying types, whether they are required, and descriptions. It includes parameters like DNS prefix, admin username, SSH key, and cluster configurations, essential for customizing deployment. Dependencies include the Bicep language and Azure environment; these parameters influence resource provisioning and configuration.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool.TestFixtures/Samples/Valid_Experimental/README.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\n# Sample module\n\nSample description\n\n## Details\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n```\n\n----------------------------------------\n\nTITLE: Azure Bicep module example usage with parameters\nDESCRIPTION: This snippet demonstrates how to instantiate the Bicep module with specific parameter values, such as DNS prefix, admin username, SSH key, and disk size. It defines the module name and passes the parameters accordingly, enabling customized deployment. The primary dependencies are the Bicep runtime and Azure deployment environment.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool.TestFixtures/Samples/Valid_Experimental/README.md#_snippet_2\n\nLANGUAGE: bicep\nCODE:\n```\n### Example 1\n\n```bicep\nmodule mod 'br/public:test/testmodule:1.1.1' = {\n  name: 'mod'\n  params: {\n    dnsPrefix: ''\n    linuxAdminUsername: ''\n    sshRSAPublicKey: ''\n    servicePrincipalClientId: ''\n    servicePrincipalClientSecret: ''\n    osDiskSizeGB: 1\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Bicep Module - Example 1\nDESCRIPTION: This snippet demonstrates how to define and deploy a Bicep module within a Bicep template. It showcases how to specify module parameters, including strings, secure strings, and integers. Note that parameter values are placeholders and should be replaced with valid data.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool.TestFixtures/Samples/Modified_Experimental/README.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\nmodule mod 'br/public:test/testmodule:1.1.1' = {\n  name: 'mod'\n  params: {\n    dnsPrefix: ''\n    linuxAdminUsername: ''\n    sshRSAPublicKey: ''\n    servicePrincipalClientId: ''\n    servicePrincipalClientSecret: ''\n    osDiskSizeGB: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Bicep Module from Public Registry (Bicep)\nDESCRIPTION: This Bicep code demonstrates deploying a module named 'testmodule' (version 1.1.1) from the public Bicep Registry ('br/public:test/testmodule:1.1.1'). It assigns the deployment name 'mod' and passes several parameters including 'dnsPrefix', 'linuxAdminUsername', 'sshRSAPublicKey', service principal credentials, and 'osDiskSizeGB' to the module. This example requires the referenced Bicep module to exist in the public registry.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool.TestFixtures/Samples/Modified/README.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\nmodule mod 'br/public:test/testmodule:1.1.1' = {\n  name: 'mod'\n  params: {\n    dnsPrefix: ''\n    linuxAdminUsername: ''\n    sshRSAPublicKey: ''\n    servicePrincipalClientId: ''\n    servicePrincipalClientSecret: ''\n    osDiskSizeGB: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template Parameters in Bicep\nDESCRIPTION: This Bicep template (`main.bicep`) defines the parameters that will be required for deployment. Parameter files (`.bicepparam`) will provide values for these parameters.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/extendable-param-files.md#_snippet_0\n\nLANGUAGE: Bicep\nCODE:\n```\nparam namePrefix string\nparam location string\nparam tag string\n```\n\n----------------------------------------\n\nTITLE: Extending Bicep Parameters from a Root File\nDESCRIPTION: This `.bicepparam` file (`leaf.bicepparam`) extends the `root.bicepparam` file using the `extends` keyword, inheriting its parameters and values. It associates itself with the `main.bicep` template using the `using` keyword and demonstrates overriding values (`namePrefix`) and defining new parameters (`tag`).\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/extendable-param-files.md#_snippet_2\n\nLANGUAGE: Bicep\nCODE:\n```\nusing 'main.bicep'\n\nextends 'root.bicepparam'\n\nparam namePrefix = 'Dev'\nparam tag = 'test'\n```\n\n----------------------------------------\n\nTITLE: Sample Bicep Configuration JSON for Consuming Local Extensions - JSON\nDESCRIPTION: This JSON snippet provides a sample bicepconfig.json file enabling experimental features 'extensibility' and 'localDeploy'. It configures cloud credential precedence and registers the 'http' extension with an OCI registry reference. This configuration is necessary to consume published local extensions within the Bicep tooling environment. Replace the 'extensions' entry values with appropriate extension names and references applicable to your environment.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/local-deploy.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimentalFeaturesEnabled\": {\n    \"extensibility\": true,\n    \"localDeploy\": true\n  },\n  \"cloud\": {\n    \"credentialPrecedence\": [\n      \"AzureCLI\"\n    ],\n    \"currentProfile\": \"AzureCloud\"\n  },\n  \"extensions\": {\n    \"http\": \"br:bicepextdemo.azurecr.io/extensions/http:0.1.1\"\n  },\n  \"implicitExtensions\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Bicep Local Extension via CLI - Shell\nDESCRIPTION: This shell snippet illustrates the full command structure to publish a Bicep local extension using the `bicep publish-extension` CLI command. It specifies paths to the types index JSON and binary executables for multiple platforms, along with the target location (local file system or Azure Container Registry). The `--force` flag allows overwriting existing published extensions. Dependencies include all platform binaries as needed and a valid types index JSON describing the extension's types.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/local-deploy.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbicep publish-extension \\\n  <path_to_types_index.json> \\\n  --bin-osx-arm64 <path_to_osx_arm64_binary> \\\n  --bin-linux-x64 <path_to_linux_x64_binary> \\\n  --bin-win-x64 <path_to_windows_x86_binary> \\\n  --target <path_or_acr_reference_to_output_extension> \\\n  --force\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive and Composite Variables in YAML - YAML\nDESCRIPTION: This snippet demonstrates how to define variables of different data types (string, int, bool) and composite types (arrays and nested objects) in a YAML file. This configuration can be used in infrastructure automation, CI/CD, or application settings that parse YAML inputs, requiring only a YAML parser as a dependency. Parameters shown include primitives as well as lists and an embedded object, with each field assigned a sample value; expected input is a valid YAML file, and outputs depend on consuming application—limitations are dependent on YAML parser and application compatibility.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Core.Samples/Files/baselines/LoadFunctions_CRLF/Assets/test.yaml.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nstring: someVal\nint: 123\nbool: true\narrayInt:\n- 1\n- 2\narrayString:\n- someVal\n- someVal2\narrayBool:\n- true\n- true\nobject:\n  nestedString: someVal\n  nestedInt: 123\n  nestedBool : true\n```\n\n----------------------------------------\n\nTITLE: Defining Root Bicep Parameters with no Template Association\nDESCRIPTION: This `.bicepparam` file (`root.bicepparam`) serves as a reusable base. It defines default values for `namePrefix` and `location`. The `using none` directive signifies that this file doesn't validate against a specific Bicep template, making it suitable for extending by various parameter files linked to different templates.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/extendable-param-files.md#_snippet_1\n\nLANGUAGE: Bicep\nCODE:\n```\nusing none\n// Notice that the first line of this .bicepparam file declares `using none` which tells the compiler not to validate this against any particular .bicep file.\n\nparam namePrefix = 'Prod'\nparam location = 'westus'\n```\n\n----------------------------------------\n\nTITLE: Configuring Bicep Editor Settings with JSON\nDESCRIPTION: This JSON snippet configures the editor settings for Bicep files within Visual Studio Code. It specifies the tab size and whether to insert spaces instead of tabs. This is useful for ensuring consistent formatting and readability of Bicep files. The settings are applied to `.bicep` files. These settings can be overridden in user or workspace settings.\nSOURCE: https://github.com/azure/bicep/blob/main/src/vscode-bicep/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"[bicep]\": {\n    \"editor.tabSize\": 2,\n    \"editor.insertSpaces\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Bicep\nDESCRIPTION: This command runs most of the Bicep .NET-based tests, using the `dotnet test` command. This command is crucial for validating the functionality and stability of the Bicep project during development and before submitting changes.\nSOURCE: https://github.com/azure/bicep/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Installing Bicep CLI - PowerShell\nDESCRIPTION: This PowerShell script installs the latest nightly Bicep CLI binary, placing it in the `~/.azure/bin/bicep` directory, so it is automatically picked up by Azure CLI. It uses `irm` to download a PowerShell script, and then executes it using `iex` command.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://aka.ms/bicep/nightly-cli.ps1) }\"\n```\n\n----------------------------------------\n\nTITLE: Bicep CLI Install from Fork - PowerShell\nDESCRIPTION: This script installs the Bicep CLI from a specified fork repository. It downloads the install script using `irm` and executes it with `iex`, passing the `-Repo` parameter containing the fork repository name. This gives the Windows equivalent of the Bash command.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://aka.ms/bicep/nightly-cli.ps1) } -Repo anthony-c-martin/bicep\"\n```\n\n----------------------------------------\n\nTITLE: Bicep CLI Install from Custom Branch - PowerShell\nDESCRIPTION: This script installs the Bicep CLI from a specified branch, equivalent to the Bash option.  The script uses `irm` to get the PowerShell script and `iex` to run it, and includes the `-Branch` parameter. This enables installation of builds from custom branches in a similar manner as Bash.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://aka.ms/bicep/nightly-cli.ps1) } -Branch jeskew/variable-imports\"\n```\n\n----------------------------------------\n\nTITLE: VSCode Extension Install from Action Run - PowerShell\nDESCRIPTION: This PowerShell script installs the Bicep VSCode extension from a specific GitHub action run.  It downloads and executes the installation script using `irm` and `iex`,  providing the `-RunId` parameter, pointing to the ID of a specific GitHub Action run. This gives users control over which build to test.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://aka.ms/bicep/nightly-vsix.ps1) } -RunId 6146657618\"\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Extension Unit Tests\nDESCRIPTION: This snippet outlines the commands required to run unit tests specifically for the VS Code extension of the Bicep project.  It uses npm for package management and test execution. It first navigates to the extension directory, then installs dependencies, and finally runs the tests. It offers an alternative to run tests by launching vscode directly.\nSOURCE: https://github.com/azure/bicep/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm i\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Bicep CLI Install to Custom Directory - PowerShell\nDESCRIPTION: This script installs the Bicep CLI to a custom directory defined by the `-BinaryPath` parameter. It downloads the installation script with `irm` and executes it using `iex`, which provides greater flexibility in where to install the CLI. This corresponds to the Bash version.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://aka.ms/bicep/nightly-cli.ps1) } -BinaryPath C:\\\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Bicep Extensions to Registry\nDESCRIPTION: Examples of using the 'publish-extension' command to publish Bicep extensions to a registry. The command requires an index JSON file path and a registry reference. The --force option can be used to overwrite existing published extensions.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/publish-extension-command.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbicep publish-extension <file> --target <ref>\n```\n\nLANGUAGE: bash\nCODE:\n```\nbicep publish-extension ./index.json --target br:example.azurecr.io/hello/world:v1\n```\n\nLANGUAGE: bash\nCODE:\n```\nbicep publish-extension ./index.json --target br:example.azurecr.io/hello/world:v1 --force\n```\n\n----------------------------------------\n\nTITLE: Bicep CLI Install from Fork - Bash\nDESCRIPTION: This script installs the Bicep CLI from a specified fork repository. The script utilizes `curl` to download the installation script and executes it, passing the `--repo` argument with the fork's name.  This allows users to test builds from forks of the Bicep project.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -Ls https://aka.ms/bicep/nightly-cli.sh) --repo anthony-c-martin/bicep\n```\n\n----------------------------------------\n\nTITLE: Defining Bicep Program Structure\nDESCRIPTION: This snippet defines the core structure of a Bicep program as a sequence of statements followed by the End of File marker. This provides the top-level grammar rule for the program itself and specifies what is valid at the highest level, setting the rules for how the rest of the grammar works. Dependencies: None. Input: Bicep code. Output: a parse tree representing the code.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/params-file-grammar.md#_snippet_0\n\nLANGUAGE: Bicep\nCODE:\n```\nprogram -> statement* EOF \nstatement -> \n  usingDecl |\n  parameterDecl |\n  NL\n```\n\n----------------------------------------\n\nTITLE: Installing Bicep CLI - Bash\nDESCRIPTION: This script installs the latest nightly Bicep CLI binary, placing it in the `~/.azure/bin/bicep` directory, which is picked up by Azure CLI. It uses `curl` to download and execute a shell script. The shell script downloads the Bicep CLI and places it in the appropriate directory.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -Ls https://aka.ms/bicep/nightly-cli.sh)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic JSON Structure with String, Integer and Array Types in Azure Bicep\nDESCRIPTION: A JSON configuration fragment showing the definition of a string property ('someVal'), an integer property (123), and the beginning of an integer array. The snippet demonstrates JSON data type usage but appears to be incomplete.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Core.Samples/Files/baselines/InvalidLoadFunctions_CRLF/Assets/jsonInvalid.json.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": \"someVal\",\n  \"int\": 123,\n  \"array\": [\n    1,\n    2\n\n\n```\n\n----------------------------------------\n\nTITLE: Installing Bicep VSCode Extension - Bash\nDESCRIPTION: This script installs the latest nightly release of the Bicep VSCode extension. It uses `curl` to download a shell script and executes it.  Requires the GitHub CLI. The script downloads and executes a shell script from a Microsoft URL to install the extension.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -Ls https://aka.ms/bicep/nightly-vsix.sh)\n```\n\n----------------------------------------\n\nTITLE: Parsing Parameter Declarations in Bicep\nDESCRIPTION: This defines the syntax for parameter declarations in a Bicep file. It specifies the 'parameter' keyword, an identifier for the parameter's name, an equals sign, a literal value assigned to the parameter, and a newline. It's used to declare and initialize parameters in the Bicep template. Dependencies: None. Input: Bicep code containing parameter declarations. Output: A parse tree representing the parameter declaration.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/params-file-grammar.md#_snippet_3\n\nLANGUAGE: Bicep\nCODE:\n```\nparameterDecl ->\n  \"parameter\" IDENTIFIER(name) \"=\" literalValue NL\n```\n\n----------------------------------------\n\nTITLE: Parsing String Literals in Bicep\nDESCRIPTION: Defines the syntax for string literals in Bicep. It is defined by a single quote, any number of string characters, and a closing single quote. This represents how to represent strings in the Bicep language. Dependencies: None. Input: Bicep code containing string literals. Output: A parse tree or representation representing the string literal.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/params-file-grammar.md#_snippet_4\n\nLANGUAGE: Bicep\nCODE:\n```\nstringLiteral -> \"'\" STRINGCHAR* \"'\"\n```\n\n----------------------------------------\n\nTITLE: VSCode Extension Install from Fork - Bash\nDESCRIPTION: This script installs the Bicep VSCode extension from a specified fork repository. It utilizes `curl` to download and execute the installation script, passing the `--repo` argument with the fork's name.  This allows users to test builds from forks of the Bicep project.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -Ls https://aka.ms/bicep/nightly-vsix.sh) --repo anthony-c-martin/bicep\n```\n\n----------------------------------------\n\nTITLE: Bicep Language Grammar Specification\nDESCRIPTION: Defines the context-free grammar for the Bicep language using a pseudo-BNF notation. It specifies the structure of programs, statements (like parameters, variables, resources, modules, outputs, functions, types, metadata, target scopes, extensions, imports, tests, asserts), expressions (binary, unary, member access, function calls, literals, objects, arrays, conditionals, loops), types (primitive, complex, union, tuples), decorators, and directives.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/grammar.md#_snippet_0\n\nLANGUAGE: Grammar\nCODE:\n```\nprogram -> statement* EOF\nstatement ->\n  targetScopeDecl |\n  extensionDecl |\n  compileTimeImportDecl |\n  metadataDecl |\n  parameterDecl |\n  typeDecl |\n  variableDecl |\n  resourceDecl |\n  moduleDecl |\n  testDecl |\n  assertDel |\n  outputDecl |\n  functionDecl |\n  NL\n\ntargetScopeDecl -> \"targetScope\" \"=\" expression\n\nextensionDecl -> decorator* \"extension\" interpString(specification) extensionWithClause? extensionAsClause? NL\n\nextensionWithClause -> \"with\" object\n\nextensionAsClause -> \"as\" IDENTIFIER(alias)\n\ncompileTimeImportDecl -> decorator* \"import\" compileTimeImportTarget compileTimeImportFromClause\n\ncompileTimeImportTarget ->\n  importedSymbolsList |\n  wildcardImport\n\nimportedSymbolsList -> \"{\" ( NL+ ( importedSymbolsListItem NL+ )* )? \"}\"\n\nimportedSymbolsListItem -> IDENTIFIER(originalSymbolName) extensionAsClause?\n\nwildcardImport -> \"*\" extensionAsClause\n\ncompileTimeImportFromClause -> \"from\" interpString(path)\n\nmetadataDecl -> \"metadata\" IDENTIFIER(name) \"=\" expression NL\n\nparameterDecl ->\n  decorator* \"parameter\" IDENTIFIER(name) typeExpression parameterDefaultValue? NL |\n  decorator* \"parameter\" IDENTIFIER(name) \"resource\" interpString(type) parameterDefaultValue? NL |\nparameterDefaultValue -> \"=\" expression\n\ntypeDecl -> decorator* \"type\" IDENTIFIER(name) \"=\" typeExpression NL\n\nvariableDecl -> decorator* \"variable\" IDENTIFIER(name) \"=\" expression NL\n\nresourceDecl -> decorator* \"resource\" IDENTIFIER(name) interpString(type) \"existing\"? \"=\" (ifCondition | object | forExpression) NL\n\nmoduleDecl -> decorator* \"module\" IDENTIFIER(name) interpString(type) \"=\" (ifCondition | object | forExpression) NL\n\ntestDecl -> \"test\" IDENTIFIER(name) interpString(type) \"=\" (object) NL\n\nassertDecl -> decorator* \"assert\" IDENTIFIER(name) \"=\" expression NL\n\noutputDecl ->\n  decorator* \"output\" IDENTIFIER(name) IDENTIFIER(type) \"=\" expression NL\n  decorator* \"output\" IDENTIFIER(name) \"resource\" interpString(type) \"=\" expression NL\nNL -> (\"\\n\" | \"\\r\")+\n\nfunctionDecl -> decorator* \"func\" IDENTIFIER(name) typedLambdaExpression NL\n\ndecorator -> \"@\" decoratorExpression NL\n\ndisableNextLineDiagnosticsDirective-> #disable-next-line diagnosticCode1 diagnosticCode2 diagnosticCode3 NL\n\nexpression ->\n  binaryExpression |\n  binaryExpression \"?\" expression \":\" expression\n\nbinaryExpression ->\n  equalityExpression |\n  binaryExpression \"&&\" equalityExpression |\n  binaryExpression \"||\" equalityExpression |\n  binaryExpression \"??\" equalityExpression\n\nequalityExpression ->\n  relationalExpression |\n  equalityExpression \"==\" relationalExpression |\n  equalityExpression \"!=\" relationalExpression |\n  equalityExpression \"=~\" relationalExpression |\n  equalityExpression \"!~\" relationalExpression\n\nrelationalExpression ->\n  additiveExpression |\n  relationalExpression \">\" additiveExpression |\n  relationalExpression \">=\" additiveExpression |\n  relationalExpression \"<\" additiveExpression |\n  relationalExpression \"<=\" additiveExpression\n\nadditiveExpression ->\n  multiplicativeExpression |\n  additiveExpression \"+\" multiplicativeExpression |\n  additiveExpression \"-\" multiplicativeExpression\n\nmultiplicativeExpression ->\n  unaryExpression |\n  multiplicativeExpression \"*\" unaryExpression |\n  multiplicativeExpression \"/\" unaryExpression |\n  multiplicativeExpression \"%\" unaryExpression\n\nunaryExpression ->\n  memberExpression |\n  unaryOperator unaryExpression\n\nunaryOperator -> \"!\" | \"-\" | \"+\"\n\nmemberExpression ->\n  primaryExpression |\n  memberExpression \"[\" expression \"]\" |\n  memberExpression \"[^\" expression \"]\" |\n  memberExpression \"[?\" expression \"]\" |\n  memberExpression \"[?^\" expression \"]\" |\n  memberExpression \".\" IDENTIFIER(property) |\n  memberExpression \".?\" IDENTIFIER(property) |\n  memberExpression \".\" functionCall |\n  memberExpression \"::\" IDENTIFIER(name) |\n  memberExpression \"!\"\n\nprimaryExpression ->\n  functionCall |\n  literalValue |\n  interpString |\n  multilineString |\n  array |\n  forExpression |\n  object |\n  parenthesizedExpression |\n  lambdaExpression\n\ndecoratorExpression -> functionCall | memberExpression \".\" functionCall\n\nargumentList -> expression (\",\" expression)*\nfunctionCall -> IDENTIFIER \"(\" argumentList? \")\"\n\nparenthesizedExpression -> \"(\" expression \")\"\n\nlocalVariable -> IDENTIFIER\nvariableBlock -> \"(\" NL* ( localVariable NL* (\",\" NL* localVariable NL*)* )? \")\"\nlambdaExpression -> ( variableBlock | localVariable ) \"=>\" expression\n\ntypedLocalVariable -> IDENTIFIER primaryTypeExpression\ntypedVariableBlock -> \"(\" NL* ( typedLocalVariable NL* (\",\" NL* typedLocalVariable NL*)* )? \")\"\ntypedLambdaExpression -> typedVariableBlock primaryTypeExpression \"=>\" expression\n\nifCondition -> \"if\" parenthesizedExpression object\n\nforExpression -> \"[\" \"for\" (IDENTIFIER(item) | forVariableBlock) \"in\" expression \":\" forBody \"]\"\nforVariableBlock -> \"(\" IDENTIFIER(item) \",\" IDENTIFIER(index) \")\"\nforBody -> expression(body) | ifCondition\n\ninterpString ->  stringLeftPiece ( expression stringMiddlePiece )* expression stringRightPiece | stringComplete\nstringLeftPiece -> \"'\" STRINGCHAR* \"${\"\nstringMiddlePiece -> \"}\" STRINGCHAR* \"${\"\nstringRightPiece -> \"}\" STRINGCHAR* \"'\"\nstringComplete -> \"'\" STRINGCHAR* \"'\"\n\nmultilineString -> \"'''\" + MULTILINESTRINGCHAR+ + \"'''\"\n\nliteralValue -> NUMBER | \"true\" | \"false\" | \"null\"\n\nobject -> \"{\" NL? ( | ( objectProperty ( objectSep objectProperty )* ( | objectSep ) ) ) \"}\"\nobjectSep -> \",\" | NL\nobjectKey -> IDENTIFIER(name) | interpString\nobjectProperty -> ( objectKey \":\" expression ) | ( \"...\" expression )\n\narray -> \"[\" NL? ( | ( arrayItem ( arraySep arrayItem )* ( | arraySep ) ) ) \"]\"\narraySep -> \",\" | NL\narrayItem -> expression | ( \"...\" expression )\n\ntypeExpression ->\n  singularTypeExpression |\n  unionTypeExpression\n\nunionTypeExpression -> \"|\"? singularTypeExpression (\"|\" singularTypeExpression)*\n\nsingularTypeExpression ->\n  primaryTypeExpression |\n  singularTypeExpression \"[]\" |\n  singularTypeExpression \"?\" |\n  parenthesizedTypeExpression\n\nprimaryTypeExpression ->\n  typeReference |\n  literalValue |\n  unaryOperator literalValue |\n  stringComplete |\n  multilineString |\n  objectType |\n  tupleType\n\ntypeReference ->\n  ambientTypeReference |\n  fullyQualifiedAmbientTypeReference |\n  IDENTIFIER(type) |\n  IDENTIFIER(importedType) |\n  IDENTIFIER(wildcardImport) \".\" IDENTIFIER(type) |\n  typeReference \".\" IDENTIFIER(property) |\n  typeReference \"[\" (NUMBER | \"*\") \"]\" |\n  typeReference \".*\"\n\nambientTypeReference -> \"string\" | \"int\" | \"bool\" | \"array\" | \"object\"\n\nfullyQualifiedAmbientTypeReference -> IDENTIFIER(sysNamespace) \".\" ambientTypeReference\n\nobjectType -> \"{\" (NL+ ((objectTypeProperty | objectTypeAdditionalPropertiesMatcher) NL+ )* )? \"}\"\nobjectTypeProperty -> decorator* ( IDENTIFIER(name) | stringComplete | multilineString ) \":\" typeExpression\nobjectTypeAdditionalPropertiesMatcher -> decorator* \"*:\" typeExpression\n\ntupleType -> \"[\" (NL+ tupleItem* )? \"]\"\ntupleItem -> decorator* typeExpression NL+\n\nparenthesizedTypeExpression -> \"(\" typeExpression \")\"\n```\n\n----------------------------------------\n\nTITLE: VSCode Extension Install from Custom Branch - Bash\nDESCRIPTION: This script installs the Bicep VSCode extension from a specified branch. It downloads the installation script using `curl` and executes it, providing the `--branch` argument with the branch name. This allows testing changes from a specific branch within the main Bicep repository.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -Ls https://aka.ms/bicep/nightly-vsix.sh) --branch jeskew/variable-imports\n```\n\n----------------------------------------\n\nTITLE: Setting Up Monarch Language Support for Bicep\nDESCRIPTION: Commands to install dependencies and build the Monarch language definition for Bicep, enabling syntax highlighting in Monaco Editor and Azure DevOps.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd src/monarch\nnpm ci\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Monarch Tests for Bicep\nDESCRIPTION: Commands to execute the test suite for Monarch support, ensuring correct syntax highlighting in supported environments.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd src/monarch\nnpm ci\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Previewing Monarch Baselines\nDESCRIPTION: Command to run a local server to view Monarch syntax highlighting baselines for Bicep, aiding validation and comparison.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx http-server ./src/monarch/test/baselines\n```\n\n----------------------------------------\n\nTITLE: VSCode Extension Install from Custom Branch - PowerShell\nDESCRIPTION: This PowerShell script installs the Bicep VSCode extension from a specified branch. The script downloads and executes the installation script using `irm` and `iex`, passing the `-Branch` parameter with the branch name. This enables testing from specific branches, analogous to the Bash command.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://aka.ms/bicep/nightly-vsix.ps1) } -Branch jeskew/variable-imports\"\n```\n\n----------------------------------------\n\nTITLE: VSCode Extension Install from Fork - PowerShell\nDESCRIPTION: This PowerShell script installs the Bicep VSCode extension from a specified fork repository. The script uses `irm` and `iex` to download and execute the installation script, passing the `-Repo` parameter with the fork's name. This is the Windows equivalent of the Bash command.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://aka.ms/bicep/nightly-vsix.ps1) } -Repo anthony-c-martin/bicep\"\n```\n\n----------------------------------------\n\nTITLE: Previewing Highlight.js Baselines\nDESCRIPTION: Command to start an HTTP server to view Bicep syntax highlighting baselines created with highlight.js, facilitating testing and review.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx http-server ./src/highlightjs/test/baselines\n```\n\n----------------------------------------\n\nTITLE: Previewing Textmate Grammar Baselines\nDESCRIPTION: Command to launch a local HTTP server to view Textmate syntax highlighting baselines in a browser, useful for testing and comparison.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx http-server ./src/textmate/test/baselines\n```\n\n----------------------------------------\n\nTITLE: Bicep CLI Install from Action Run - Bash\nDESCRIPTION: This script installs the Bicep CLI from a specific GitHub action run. It uses `curl` to retrieve the install script, and provides the `--run-id` parameter to the install script. This specific action run ID allows users to obtain a specific build.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -Ls https://aka.ms/bicep/nightly-cli.sh) --run-id 6146657618\n```\n\n----------------------------------------\n\nTITLE: Running Bicep Compilation Benchmark Suite with Profiler\nDESCRIPTION: Command to execute the Bicep compilation benchmark suite with the EP profiler enabled. This runs the benchmark in Release configuration and filters for all benchmarks containing 'Compilation' in their name.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Tools.Benchmark/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run --configuration Release --project src/Bicep.Tools.Benchmark -- --filter *Compilation* --profiler EP\n```\n\n----------------------------------------\n\nTITLE: Copying code to clipboard\nDESCRIPTION: This code copies a snippet to the clipboard related to adding resources. It is triggered by the bicep.gettingStarted.copyToClipboard command and it includes an argument with the step set to 'resources'. This is a VS Code command used within Bicep files for the tutorial, allowing users to easily copy and paste code snippets.\nSOURCE: https://github.com/azure/bicep/blob/main/src/vscode-bicep/media/walkthroughs/gettingStarted/3_Type_Resources.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\ncommand:bicep.gettingStarted.copyToClipboard?%7B%22step%22%3A%22resources%22%7D\n```\n\n----------------------------------------\n\nTITLE: Bicep CLI Install from Custom Branch - Bash\nDESCRIPTION: This script installs the Bicep CLI from a specified branch within the main Bicep repository. The script downloads the installation script via `curl` and runs it, providing the `--branch` argument with the branch name. This functionality allows testing from specific branches.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -Ls https://aka.ms/bicep/nightly-cli.sh) --branch jeskew/variable-imports\n```\n\n----------------------------------------\n\nTITLE: Bicep CLI Install from Action Run - PowerShell\nDESCRIPTION: This PowerShell script installs the Bicep CLI from a specific GitHub action run. It uses `irm` and `iex` to retrieve and execute the install script and provides a `-RunId` parameter, corresponding to a specific action run ID to get a targeted build.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://aka.ms/bicep/nightly-cli.ps1) } -RunId 6146657618\"\n```\n\n----------------------------------------\n\nTITLE: Bicep CLI Install to Custom Directory - Bash\nDESCRIPTION: This script installs the Bicep CLI to a custom directory specified by the `--binary-path` argument. This allows flexibility in determining where to install the binary. The script uses `curl` to download the install script and executes it with a path argument.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -Ls https://aka.ms/bicep/nightly-cli.sh) --binary-path /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Enabling Bicep Tracing in Shell (Mac/Linux)\nDESCRIPTION: Sets the `BICEP_TRACING_ENABLED` environment variable to `true` using the `export` command. This enables detailed tracing for Bicep operations when executed within the same shell session. This is typically used for troubleshooting Bicep issues on macOS or Linux systems.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/troubleshooting.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport BICEP_TRACING_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Copyright Notices for Components\nDESCRIPTION: This section provides a list of copyright notices for several software components and libraries. The notices state copyright ownership and, in some cases, include the component's name and version number. Many components fall under the MIT license. These components are used in the .NET ecosystem.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Local.Deploy/local-tpn.txt#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nruntime.native.System.IO.Ports 6.0.0 - MIT\n\n\n(c) Microsoft Corporation.\nCopyright (c) Andrew Arnott\nCopyright 2018 Daniel Lemire\nCopyright 2012 the V8 project\nCopyright (c) .NET Foundation.\nCopyright (c) 2011, Google Inc.\nCopyright (c) 1998 Microsoft. To\n(c) 1997-2005 Sean Eron Anderson.\nCopyright (c) 2017 Yoshifumi Kawai\nCopyright (c) Microsoft Corporation\nCopyright (c) 2007 James Newton-King\nCopyright (c) 2012-2014, Yann Collet\nCopyright (c) 2013-2017, Alfred Klomp\nCopyright (c) 2015-2017, Wojciech Mula\nCopyright (c) 2005-2007, Nick Galbreath\nCopyright (c) 2018 Alexander Chermyanin\nPortions (c) International Organization\nCopyright (c) 2015 The Chromium Authors.\nCopyright (c) The Internet Society 1997.\nCopyright (c) 2004-2006 Intel Corporation\nCopyright (c) 2013-2017, Milosz Krajewski\nCopyright (c) 2016-2017, Matthieu Darbois\nCopyright (c) .NET Foundation Contributors\nCopyright (c) The Internet Society (2003).\nCopyright (c) .NET Foundation and Contributors\nCopyright (c) 2019 Microsoft Corporation, Daan Leijen\nCopyright (c) 2011 Novell, Inc (http://www.novell.com)\nCopyright (c) 1995-2017 Jean-loup Gailly and Mark Adler\nCopyright (c) 2015 Xamarin, Inc (http://www.xamarin.com)\nCopyright (c) 2009, 2010, 2013-2016 by the Brotli Authors.\nCopyright (c) 2014 Ryan Juckett http://www.ryanjuckett.com\nCopyright (c) 1990- 1993, 1996 Open Software Foundation, Inc.\nCopyright (c) 2015 THL A29 Limited, a Tencent company, and Milo Yip.\nCopyright (c) YEAR W3C(r) (MIT, ERCIM, Keio, Beihang). Disclaimers THIS WORK IS PROVIDED AS\nCopyright 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The Regents of the University of California.\nCopyright (c) 1989 by Hewlett-Packard Company, Palo Alto, Ca. & Digital Equipment Corporation, Maynard, Mass.\nCopyright (c) 1989 by Hewlett-Packard Company, Palo Alto, Ca. & Digital Equipment Corporation, Maynard, Mass. To\n\n\n```\n\n----------------------------------------\n\nTITLE: Uploading NuGet Packages\nDESCRIPTION: PowerShell command to upload Bicep NuGet packages to nuget.org. This uploads compiled packages from either the assets directory or a custom directory containing the packages.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/release-checklist.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n./scripts/UploadPackages.ps1 -PackageDirectory .\\temporary\\__assets\\ -NuGetPath C:\\NugetTool\\\n```\n\n----------------------------------------\n\nTITLE: Uploading Signed Release Artifacts\nDESCRIPTION: PowerShell script command to upload officially signed build artifacts to the GitHub release. The script handles assembly of all required release files from the build output.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/release-checklist.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n./scripts/UploadSignedReleaseArtifacts.ps1\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: This snippet contains the full text of the MIT License, a permissive open-source license that grants users broad rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software. It also includes a disclaimer of warranty and limitation of liability.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Decompiler/local-tpn.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License\nDESCRIPTION: This code block describes the terms of the MIT License. The license grants users the right to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software.  It also states that the software is provided \"as is\", without any warranty, and limits the liability of the authors and copyright holders.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Decompiler/local-tpn.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) .NET Foundation and Contributors\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Git Tagging for Bicep Releases\nDESCRIPTION: Commands for creating and pushing version tags for Bicep releases. These tags mark specific commits for release versions and are essential for the release workflow.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/release-checklist.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit tag v<new_release_number> <commit_hash>\ngit push origin v<new_release_number>\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: This snippet details the standard MIT License, which grants broad permissions for use, modification, and distribution of the software.  It mandates inclusion of copyright and permission notices.  It explicitly disclaims warranties and limits liability.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Local.Deploy/local-tpn.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) .NET Foundation and Contributors\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: This code snippet presents the MIT License, a permissive free software license.  It grants users broad rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, subject to the condition that the copyright notice and permission notice are included in all copies or substantial portions of the software. The software is provided \"AS IS\", without warranty of any kind.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Core/local-tpn.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: This snippet contains the text of the MIT License. It grants permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, subject to the inclusion of the copyright notice and permission notice in all copies or substantial portions of the software. The software is provided \"AS IS\" without warranty of any kind.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool/local-tpn.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) .NET Foundation and Contributors\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for Microsoft.SourceLink.Common\nDESCRIPTION: This section presents the MIT License for the Microsoft.SourceLink.Common project. The license allows for free use, modification, and distribution with the condition that the copyright notice is included. It includes the disclaimer that the software is provided \"AS IS\" without any warranty.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_8\n\nLANGUAGE: MIT License\nCODE:\n```\nMIT License\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for CSharpIsNullAnalyzer\nDESCRIPTION: This section provides the MIT License information for the CSharpIsNullAnalyzer project. It includes the copyright notice, and a detailed explanation of the rights and limitations associated with the license. This license allows free use, modification, and distribution of the software, provided the copyright notice is included.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_4\n\nLANGUAGE: MIT License\nCODE:\n```\nMIT License\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for Microsoft.Build.Tasks.Git\nDESCRIPTION: This provides the MIT License for Microsoft.Build.Tasks.Git, detailing permissions to use, copy, modify, distribute, and sublicense the software, provided the copyright notice is retained. It also states that the software is provided without warranty.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_7\n\nLANGUAGE: MIT License\nCODE:\n```\nMIT License\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for Nerdbank.GitVersioning\nDESCRIPTION: This provides the MIT license details for the Nerdbank.GitVersioning project. It allows for free use, modification, and distribution, provided the copyright notice is included in the software. The license also includes a disclaimer of any warranties.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_10\n\nLANGUAGE: MIT License\nCODE:\n```\nMIT License\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for Newtonsoft.Json\nDESCRIPTION: This section showcases the MIT license information for the Newtonsoft.Json library. It details the rights and restrictions associated with using the software, including the requirement to include the copyright notice. The license emphasizes that the software is provided \"AS IS\" without any warranties.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_11\n\nLANGUAGE: MIT License\nCODE:\n```\nMIT License\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: BSD-3-Clause License Terms\nDESCRIPTION: This snippet presents the terms and conditions of the BSD-3-Clause License. It outlines the permissions for redistribution and use in source and binary forms, with or without modification, provided that specific conditions are met regarding copyright notices and disclaimers.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nCopyright (c) 2007, Clarius Consulting, Manas Technology Solutions, InSTEDD, and Contributors\n\nCopyright (c) <year> <owner> . All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n   1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n   3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Running Release Notes Generation Script\nDESCRIPTION: PowerShell command to generate release notes by comparing changes between version tags. This script produces formatted release notes for inclusion in the GitHub release.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/release-checklist.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./scripts/CreateReleaseNotes -FromTag <previous tag> -ToTag <new tag>\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License boilerplate\nDESCRIPTION: This snippet describes how to apply the Apache License 2.0 to a project. It involves attaching a specific notice with customized fields like the year and copyright owner's name. The notice should be enclosed in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying the Apache License 2.0 Boilerplate Notice (Plaintext)\nDESCRIPTION: This boilerplate text serves as a template to be included in source files (within appropriate comment syntax) to declare the work is licensed under the Apache License, Version 2.0. Key placeholders like '[yyyy]' (year) and '[name of copyright owner]' must be replaced with specific information. It provides a link to the full license text and states the software is provided 'AS IS' without warranties.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Local.Deploy/local-tpn.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Copyright Notices for Components\nDESCRIPTION: This section provides a list of copyright notices for several software components and libraries. The notices state copyright ownership and, in some cases, include the component's name and version number. Many components fall under the MIT license. These components are used in the .NET ecosystem.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Local.Deploy/local-tpn.txt#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nruntime.linux-x64.runtime.native.System.IO.Ports 6.0.0 - MIT\n\n\n(c) Microsoft Corporation.\nCopyright (c) Andrew Arnott\nCopyright 2018 Daniel Lemire\nCopyright 2012 the V8 project\nCopyright (c) .NET Foundation.\nCopyright (c) 2011, Google Inc.\nCopyright (c) 1998 Microsoft. To\n(c) 1997-2005 Sean Eron Anderson.\nCopyright (c) 2017 Yoshifumi Kawai\nCopyright (c) Microsoft Corporation\nCopyright (c) 2007 James Newton-King\nCopyright (c) 2012-2014, Yann Collet\nCopyright (c) 2013-2017, Alfred Klomp\nCopyright (c) 2015-2017, Wojciech Mula\nCopyright (c) 2005-2007, Nick Galbreath\nCopyright (c) 2018 Alexander Chermyanin\nPortions (c) International Organization\nCopyright (c) 2015 The Chromium Authors.\nCopyright (c) The Internet Society 1997.\nCopyright (c) 2004-2006 Intel Corporation\nCopyright (c) 2013-2017, Milosz Krajewski\nCopyright (c) 2016-2017, Matthieu Darbois\nCopyright (c) .NET Foundation Contributors\nCopyright (c) The Internet Society (2003).\nCopyright (c) .NET Foundation and Contributors\nCopyright (c) 2019 Microsoft Corporation, Daan Leijen\nCopyright (c) 2011 Novell, Inc (http://www.novell.com)\nCopyright (c) 1995-2017 Jean-loup Gailly and Mark Adler\nCopyright (c) 2015 Xamarin, Inc (http://www.xamarin.com)\nCopyright (c) 2009, 2010, 2013-2016 by the Brotli Authors.\nCopyright (c) 2014 Ryan Juckett http://www.ryanjuckett.com\nCopyright (c) 1990- 1993, 1996 Open Software Foundation, Inc.\nCopyright (c) 2015 THL A29 Limited, a Tencent company, and Milo Yip.\nCopyright (c) YEAR W3C(r) (MIT, ERCIM, Keio, Beihang). Disclaimers THIS WORK IS PROVIDED AS\nCopyright 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The Regents of the University of California.\nCopyright (c) 1989 by Hewlett-Packard Company, Palo Alto, Ca. & Digital Equipment Corporation, Maynard, Mass.\nCopyright (c) 1989 by Hewlett-Packard Company, Palo Alto, Ca. & Digital Equipment Corporation, Maynard, Mass. To\n\n\n```\n\n----------------------------------------\n\nTITLE: Copyright Notices for Components\nDESCRIPTION: This section provides a list of copyright notices for several software components and libraries. The notices state copyright ownership and, in some cases, include the component's name and version number. Many components fall under the MIT license. These components are used in the .NET ecosystem.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Local.Deploy/local-tpn.txt#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nruntime.native.System.Data.SqlClient.sni 4.7.0 - MIT\n\n\n(c) Microsoft Corporation.\nCopyright (c) .NET Foundation.\nCopyright (c) 2011, Google Inc.\n(c) 1997-2005 Sean Eron Anderson.\nCopyright (c) 2007 James Newton-King\nCopyright (c) 1991-2017 Unicode, Inc.\nCopyright (c) 2013-2017, Alfred Klomp\nCopyright (c) 2015-2017, Wojciech Mula\nCopyright (c) 2005-2007, Nick Galbreath\nPortions (c) International Organization\nCopyright (c) 2015 The Chromium Authors.\nCopyright (c) 2004-2006 Intel Corporation\nCopyright (c) 2016-2017, Matthieu Darbois\nCopyright (c) .NET Foundation Contributors\nCopyright (c) .NET Foundation and Contributors\nCopyright (c) 2011 Novell, Inc (http://www.novell.com)\nCopyright (c) 1995-2017 Jean-loup Gailly and Mark Adler\nCopyright (c) 2015 Xamarin, Inc (http://www.xamarin.com)\nCopyright (c) 2009, 2010, 2013-2016 by the Brotli Authors.\nCopyright (c) YEAR W3C(r) (MIT, ERCIM, Keio, Beihang). Disclaimers THIS WORK IS PROVIDED AS\n\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Extension E2E Tests\nDESCRIPTION: This provides the steps to run end-to-end tests for the Bicep VS Code extension.  The process involves building the .NET solution, navigating to the extension directory, installing dependencies, and then running the end-to-end tests using npm.\nSOURCE: https://github.com/azure/bicep/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndotnet build\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm i\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm run testlocal:e2e\n```\n\n----------------------------------------\n\nTITLE: Unsupported Parameter Import in Bicep Parameters\nDESCRIPTION: This snippet shows an attempt to import a parameter from another Bicep file using the `import` keyword within a `.bicepparam` file. This functionality is currently not supported for extendable Bicep parameters.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/extendable-param-files.md#_snippet_4\n\nLANGUAGE: Bicep\nCODE:\n```\nimport {bar} from 'main.bicep'\n```\n\n----------------------------------------\n\nTITLE: Unsupported Multiple Extends in Bicep Parameters\nDESCRIPTION: This snippet demonstrates an attempt to extend a Bicep parameter file from multiple parent `.bicepparam` files using multiple `extends` statements. Extending from only one parent file is currently supported.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/extendable-param-files.md#_snippet_5\n\nLANGUAGE: Bicep\nCODE:\n```\nusing 'main.bicep'\n\nextends 'root1.bicepparam'\nextends 'root2.biepparam'\nextends 'root3.bicepparam'\n```\n\n----------------------------------------\n\nTITLE: Unsupported Merging of Bicep Array/Object Parameters\nDESCRIPTION: This snippet shows an attempt to merge or combine values from multiple parameters of type array or object (represented conceptually by `union`). Merging or union operations for these complex types are not supported in extendable Bicep parameter files.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/extendable-param-files.md#_snippet_6\n\nLANGUAGE: Bicep\nCODE:\n```\nparam loc1 string = [\n'westus'\n'westus2'\n]\n\nparam loc2 string = [\n'eastus'\n'eastus2'\n]\n\nunion(loc1, loc2)\n```\n\n----------------------------------------\n\nTITLE: Copyright Notices for Components\nDESCRIPTION: This section provides a list of copyright notices for several software components and libraries. The notices state copyright ownership and, in some cases, include the component's name and version number. Many components fall under the MIT license. These components are used in the .NET ecosystem.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Local.Deploy/local-tpn.txt#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nruntime.osx-arm64.runtime.native.System.IO.Ports 6.0.0 - MIT\n\n\n(c) Microsoft Corporation.\nCopyright (c) Andrew Arnott\nCopyright 2018 Daniel Lemire\nCopyright 2012 the V8 project\nCopyright (c) .NET Foundation.\nCopyright (c) 2011, Google Inc.\nCopyright (c) 1998 Microsoft. To\n(c) 1997-2005 Sean Eron Anderson.\nCopyright (c) 2017 Yoshifumi Kawai\nCopyright (c) Microsoft Corporation\nCopyright (c) 2007 James Newton-King\nCopyright (c) 2012-2014, Yann Collet\nCopyright (c) 2013-2017, Alfred Klomp\nCopyright (c) 2015-2017, Wojciech Mula\nCopyright (c) 2005-2007, Nick Galbreath\nCopyright (c) 2018 Alexander Chermyanin\nPortions (c) International Organization\n\n```\n\n----------------------------------------\n\nTITLE: Unsupported Variable Definition in Bicep Parameters\nDESCRIPTION: This snippet demonstrates an unsupported feature in Bicep extendable parameter files. Defining variables (`var`) in a `root.bicepparam` file is not supported for the purpose of being inherited or overridden by extending parameter files.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/extendable-param-files.md#_snippet_3\n\nLANGUAGE: Bicep\nCODE:\n```\nvar namePrefix = 'share'\n```\n\n----------------------------------------\n\nTITLE: Unsupported User-Defined Types and Functions in Bicep Parameters\nDESCRIPTION: This snippet demonstrates the use of `type` and `func` keywords within a `.bicepparam` file. Defining user-defined types or functions is not supported in the context of extendable Bicep parameter files.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/extendable-param-files.md#_snippet_7\n\nLANGUAGE: Bicep\nCODE:\n```\ntype namePrefix = 'extend'\nfunc outputName(name string) => 'Hi ${name}!'\n```\n\n----------------------------------------\n\nTITLE: Enabling Bicep Tracing in PowerShell (Windows)\nDESCRIPTION: Assigns the boolean value `$true` to the `BICEP_TRACING_ENABLED` environment variable within a PowerShell session. This action activates detailed tracing for subsequent Bicep commands run in that window, aiding in troubleshooting on Windows environments.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/troubleshooting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$env:BICEP_TRACING_ENABLED = $true\n```\n\n----------------------------------------\n\nTITLE: Parsing Using Declaration in Bicep\nDESCRIPTION: Defines the syntax for a 'using' declaration in a Bicep file. The declaration is structured with the keyword 'using', followed by a string literal and a newline. This allows the program to specify what resources it utilizes. Dependencies: None. Input: Bicep code containing 'using' declarations. Output: A parse tree or a representation of the declaration.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/params-file-grammar.md#_snippet_1\n\nLANGUAGE: Bicep\nCODE:\n```\nusingDecl ->\n  \"using\" stringLiteral NL\n```\n\n----------------------------------------\n\nTITLE: Parsing Import Declaration in Bicep\nDESCRIPTION: This snippet defines the syntax for import declarations, which incorporates decorators, the 'import' keyword, provider identifier, alias name, an optional object, and a newline. The intent is to allow importing external resources. Dependencies: None. Input: Bicep code with 'import' statements. Output: Parse tree representing import declarations.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/params-file-grammar.md#_snippet_2\n\nLANGUAGE: Bicep\nCODE:\n```\nimportDecl -> decorator* \"import\" IDENTIFIER(providerName) \"as\" IDENTIFIER(aliasName) object? NL\n```\n\n----------------------------------------\n\nTITLE: Parsing Literal Values in Bicep\nDESCRIPTION: Defines the structure of literal values within Bicep.  It accepts numbers, boolean literals ('true' and 'false'), null, string literals, objects, or arrays. This defines the primitive data types. Dependencies: None. Input: Bicep code containing literal values. Output: Parse tree or representation of the literal values.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/params-file-grammar.md#_snippet_5\n\nLANGUAGE: Bicep\nCODE:\n```\nliteralValue -> NUMBER | \"true\" | \"false\" | \"null\" | stringLiteral | object | array\n```\n\n----------------------------------------\n\nTITLE: Parsing Object Structures in Bicep\nDESCRIPTION: Defines the grammar for objects within Bicep files. An object is enclosed within curly braces, possibly containing newline characters, and may have zero or more object properties separated by newlines. This allows for the definition of structured data. Dependencies: None. Input: Bicep code containing object declarations. Output: Parse tree representing the object.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/params-file-grammar.md#_snippet_6\n\nLANGUAGE: Bicep\nCODE:\n```\nobject -> \"{\" ( NL+ ( objectProperty NL+ )* )? \"}\"\nobjectProperty -> ( IDENTIFIER(name) | stringLiteral ) \":\" literalValue\n```\n\n----------------------------------------\n\nTITLE: Parsing Array Structures in Bicep\nDESCRIPTION: Defines the grammar for arrays in Bicep files. Arrays are enclosed in square brackets and can contain zero or more array items separated by newlines.  This allows the representation of lists of values. Dependencies: None. Input: Bicep code with array declarations. Output: Parse tree representing the array.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/params-file-grammar.md#_snippet_7\n\nLANGUAGE: Bicep\nCODE:\n```\narray -> \"[\" ( NL+ arrayItem* )? \"]\"\narrayItem -> literalValue NL+\n```\n\n----------------------------------------\n\nTITLE: Recompiling Textmate Grammar for Bicep\nDESCRIPTION: Commands to rebuild the Textmate grammar for Bicep by installing dependencies and compiling source files, ensuring up-to-date syntax highlighting support.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd src/textmate\nnpm ci\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Textmate Grammar Tests for Bicep\nDESCRIPTION: Commands to execute the test suite for the Textmate grammar, validating syntax highlighting correctness and consistency.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd src/textmate\nnpm ci\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Highlight.js Plugin for Bicep\nDESCRIPTION: Commands to compile the highlight.js plugin source code and run tests to verify correct functionality for Bicep syntax highlighting.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd src/highlightjs\nnpm ci\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd src/highlightjs\nnpm ci\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Integrating Highlight.js Plugin for Bicep\nDESCRIPTION: Instructions for including the Bicep highlight.js plugin via a script tag, configuring highlight.js to recognize 'bicep' as a language. Also references an example usage for syntax highlighting in HTML.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. Use [bicep.min.js](https://github.com/Azure/bicep/blob/main/src/highlightjs/dist/bicep.min.js) in a `<script>` tag.\n1. Use 'bicep' as the highlight.js language name.\n1. See [index.html](https://github.com/Azure/bicep/blob/main/src/highlightjs/example/index.html) for a usage example.\n```\n\n----------------------------------------\n\nTITLE: Community Prism.JS Highlighting for Bicep\nDESCRIPTION: Link to custom Prism.JS component for Bicep syntax highlighting, contributed by the community, for use in PrismJS-based implementations.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/PrismJS/prism/blob/master/components/prism-bicep.js\n```\n\n----------------------------------------\n\nTITLE: Notepad++ Bicep Syntax Highlighting UDL\nDESCRIPTION: Link to a community-contributed User Defined Language (UDL) file enabling syntax highlighting for Bicep in Notepad++, requiring import into the application.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/highlighting.md#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/richardsondev/azure-bicep-udl\n```\n\n----------------------------------------\n\nTITLE: Specifying output variables in Azure Bicep module\nDESCRIPTION: This snippet declares output variables from the Bicep module, including 'controlPlaneFQDN' as a string and 'osDiskSizeGB' as an integer. These outputs represent the DNS name of the control plane and disk size, respectively, providing essential information after deployment. Outputs depend on prior resource configurations and contribute to post-deployment usage.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool.TestFixtures/Samples/Valid_Experimental/README.md#_snippet_1\n\nLANGUAGE: bicep\nCODE:\n```\n# Outputs\n\n| Name               | Type     | Description                  |\n| :----------------- | :------: | :--------------------------- |\n| `controlPlaneFQDN` | `string` | The control plane FQDN       |\n| `osDiskSizeGB`     | `int`    | Override default description |\n```\n\n----------------------------------------\n\nTITLE: Running Bicep Local Deploy via CLI - Shell\nDESCRIPTION: This shell snippet demonstrates how to invoke the Bicep Local Deploy feature via the command line by specifying the path to a .bicepparam file. It requires the Bicep CLI with local deploy capabilities installed and the target parameter file to trigger a local deployment using configured extensions.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental/local-deploy.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbicep local-deploy <path_to_bicepparam_file>\n```\n\n----------------------------------------\n\nTITLE: Using onlyIfNotExists decorator in Bicep\nDESCRIPTION: Example demonstrating the onlyIfNotExists decorator which deploys a resource only if it doesn't already exist in Azure. This feature requires backend service support to function properly.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/experimental-features.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\n@onlyIfNotExists()\nresource onlyDeployIfNotExists 'Microsoft...' = {\n  name: 'example'\n  location: 'eastus'\n  properties: {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bicep VSCode Extension - PowerShell\nDESCRIPTION: This script installs the latest nightly release of the Bicep VSCode extension. It uses `irm` to download a PowerShell script from a Microsoft URL, and then executes it using the `iex` command.  Requires the GitHub CLI.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://aka.ms/bicep/nightly-vsix.ps1) }\"\n```\n\n----------------------------------------\n\nTITLE: Empty Bicep code snippet for module example 2\nDESCRIPTION: A placeholder for an Azure Bicep code example demonstrating additional module implementation. This snippet is currently empty and serves as a template for actual code.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool.TestFixtures/Samples/NewlyGenerated/README.md#_snippet_1\n\nLANGUAGE: bicep\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: VSCode Extension Install from Action Run - Bash\nDESCRIPTION: This script installs the Bicep VSCode extension from a specific GitHub action run. The script downloads the installation script using `curl` and calls it with the `--run-id` parameter, targeting a specific action run ID. This enables testing of builds from individual CI runs.\nSOURCE: https://github.com/azure/bicep/blob/main/docs/installing-nightly.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -Ls https://aka.ms/bicep/nightly-vsix.sh) --run-id 6146657618\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for DotNetAnalyzers\nDESCRIPTION: This snippet provides the MIT License for DotNetAnalyzers. It outlines the copyright information and grants permission for using, copying, modifying, and distributing the software, provided the original copyright notice is included. The license also states the software is provided \"AS IS\" with no warranties.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_5\n\nLANGUAGE: MIT License\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) Tunnel Vision Laboratories, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for DotNetAnalyzers.Unstable\nDESCRIPTION: This section specifies the MIT License for the DotNetAnalyzers.Unstable project. It explains the terms and conditions under which the software can be used, copied, modified, and distributed. It includes the copyright notices and clarifies that the software is provided without warranty.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_6\n\nLANGUAGE: MIT License\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) Tunnel Vision Laboratories, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for Microsoft.SourceLink.GitHub\nDESCRIPTION: This is the MIT License information for the Microsoft.SourceLink.GitHub project, allowing for free use, modification, and distribution, with the requirement to include the copyright notice. It also includes the standard disclaimer of no warranties.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_9\n\nLANGUAGE: MIT License\nCODE:\n```\nMIT License\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License Boilerplate Notice\nDESCRIPTION: This snippet shows how to apply the Apache License to your work by attaching a boilerplate notice with your identifying information. The text should be enclosed in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License Boilerplate Notice\nDESCRIPTION: This section outlines the boilerplate notice required for applying the Apache License to your work. It specifies that the notice should be included with the file, class name, and a description of the purpose for easier identification within third-party archives. The identifying information inside the brackets should be replaced with the actual copyright owner's information.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.LangServer/local-tpn.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: MIT License for .NET Dependencies\nDESCRIPTION: This section provides the MIT License text, which grants permissions to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software. It also includes the copyright notice and permission notice, along with disclaimers about warranties and limitations of liability.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool/local-tpn.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) .NET Foundation and Contributors\n\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Structure - JSON\nDESCRIPTION: This snippet defines a JSON object. It contains key-value pairs of different data types, including strings, integers, arrays, and nested objects. The structure is used for representing configurations or data models within Bicep deployments or other related processes. There are no specific dependencies for this structure, and the output is a JSON object ready for use.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.Core.Samples/Files/baselines/InvalidLoadFunctions_CRLF/Assets/jsonValid.json.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"string\": \"someVal\",\n  \"int\": 123,\n  \"array\": [\n    1,\n    2\n  ],\n  \"object\": {\n    \"nestedString\": \"someVal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Bicep code snippet for module example 1\nDESCRIPTION: A placeholder for an Azure Bicep code example demonstrating module implementation. This snippet is currently empty and serves as a template for actual code.\nSOURCE: https://github.com/azure/bicep/blob/main/src/Bicep.RegistryModuleTool.TestFixtures/Samples/NewlyGenerated/README.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\n\n```"
  }
]