[
  {
    "owner": "goauthentik",
    "repo": "authentik",
    "content": "TITLE: Creating SPprofile Property Mapping for SharePoint (Python)\nDESCRIPTION: This Python code snippet defines a profile scope mapping for SharePoint within authentik.  It creates a property mapping to include specific user profile claims required by SharePoint in the OIDC token, such as `name`, `given_name`, `unique_name`, `preferred_username`, `nickname` and `roles`. This is essential for SharePoint to retrieve user information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/sharepoint-se/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"name\": request.user.name,                                         # The name claim provides a human-readable value that identifies the subject of the token.\n    \"given_name\": request.user.name,                                   # Interoperability with Microsoft Entra ID\n    \"unique_name\": request.user.name,                                  # (Optional) Used for troubleshooting within JWT tokens or to setup SharePoint like ADFS\n    \"preferred_username\": request.user.username,                       # (Optional) The primary username that represents the user.\n    \"nickname\": request.user.username,                                 # (Optional) Used for troubleshooting within JWT tokens or to setup SharePoint like ADFS\n    \"roles\": [group.name for group in request.user.ak_groups.all()],   # The set of roles that were assigned to the user who is logging in.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HedgeDoc OAuth2 Integration via YAML Environment Variables\nDESCRIPTION: This YAML snippet defines the environment variables required for Docker-based installations of HedgeDoc to authenticate against authentik via OAuth2/OpenID Connect. It specifies the provider name, client ID and secret acquired from authentik, OAuth2 scopes, and URLs for user info, token, and authorization endpoints. Additionally, it maps user profile fields such as username, display name, and email to the corresponding attributes from the OAuth2 user info response. The snippet requires prior creation of an OAuth2 application/provider in authentik with matching client credentials and redirect URI compatibility.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hedgedoc/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCMD_OAUTH2_PROVIDERNAME: \"authentik\"\\nCMD_OAUTH2_CLIENT_ID: \"<Client ID from above>\"\\nCMD_OAUTH2_CLIENT_SECRET: \"<Client Secret from above>\"\\nCMD_OAUTH2_SCOPE: \"openid email profile\"\\nCMD_OAUTH2_USER_PROFILE_URL: \"https://authentik.company/application/o/userinfo/\"\\nCMD_OAUTH2_TOKEN_URL: \"https://authentik.company/application/o/token/\"\\nCMD_OAUTH2_AUTHORIZATION_URL: \"https://authentik.company/application/o/authorize/\"\\nCMD_OAUTH2_USER_PROFILE_USERNAME_ATTR: \"preferred_username\"\\nCMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR: \"name\"\\nCMD_OAUTH2_USER_PROFILE_EMAIL_ATTR: \"email\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik using Docker Compose - Shell\nDESCRIPTION: This shell snippet demonstrates how to upgrade authentik by downloading the latest docker-compose.yml file for the 2024.10 release and restarting the Docker Compose stack. The first command uses wget with the -O flag to overwrite the existing docker-compose.yml with the latest version from the official distribution, and the second brings the updated stack up in detached mode. Prerequisites include Docker Compose being installed and existing authentik deployment using Docker Compose. No additional parameters are required, but it will overwrite the local compose file and apply app updates. The expected outcome is that the authentik instance is upgraded in place to the new version.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/2024.10/docker-compose.yml\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Diagram of authentik component relationships using Mermaid\nDESCRIPTION: This diagram visualizes the architecture of authentik's main components, including the server, core, outpost, background worker, database, and cache layers, showing their interactions and dependencies.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/core/architecture.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    user(User) --> ak_server(authentik Server)\n    ak_server --> ak_server_core(authentik Server Core)\n    ak_server --> ak_outpost(Embedded outpost)\n    ak_server_core --> db(PostgreSQL)\n    ak_server_core --> cache(Redis)\n    ak_worker(Background Worker) --> db(PostgreSQL)\n    ak_worker --> cache(Redis)\n```\n\n----------------------------------------\n\nTITLE: Configure Standalone Wekan with authentik OAuth2\nDESCRIPTION: Configures a standalone Wekan installation to use authentik for authentication using OAuth2. This involves modifying the `.env` file to enable OAuth2, set the login style, define the client ID and secret, and configure the server URL and endpoints.  `OAUTH2_*_MAP` variables map the user information received from authentik to Wekan's user fields.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wekan/index.mdx#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n     # authentik OAUTH Config\n      OAUTH2_ENABLED='true'\n      OAUTH2_LOGIN_STYLE='redirect'\n      OAUTH2_CLIENT_ID='<Client ID from above>'\n      OAUTH2_SERVER_URL='https://authentik.company'\n      OAUTH2_AUTH_ENDPOINT='/application/o/authorize/'\n      OAUTH2_USERINFO_ENDPOINT='/application/o/userinfo/'\n      OAUTH2_TOKEN_ENDPOINT='/application/o/token/'\n      OAUTH2_SECRET='<Client Secret from above>'\n      OAUTH2_ID_MAP='sub'\n      OAUTH2_USERNAME_MAP='email'\n      OAUTH2_FULLNAME_MAP='given_name'\n      OAUTH2_EMAIL_MAP='email'\n```\n\n----------------------------------------\n\nTITLE: Configuring sssd for LDAP Authentication with authentik (INI)\nDESCRIPTION: This INI configuration snippet defines the sssd.conf settings needed to connect sssd with an authentik LDAP outpost using LDAPS for secure authentication and identity services. It specifies the LDAP domain, base DNs for users and groups, authentication providers, caching, and service clients such as NSS, PAM, and SSH. The configuration includes connection parameters like ldap_uri using LDAPS, credentials for a service account, and LDAP schema selection. Users should replace placeholders such as ${ldap.domain} and ${authentik.company} with actual deployment values. This config assumes sssd and LDAPS are properly installed and certificates are configured. It does not cover additional system integration steps like PAM module setup or automounting.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/sssd/index.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[nss]\nfilter_groups = root\nfilter_users = root\nreconnection_retries = 3\n\n[sssd]\nconfig_file_version = 2\nreconnection_retries = 3\ndomains = ${ldap.domain}\nservices = nss, pam, ssh\n\n[pam]\nreconnection_retries = 3\n\n[domain/${ldap.domain}]\ncache_credentials = True\nid_provider = ldap\nchpass_provider = ldap\nauth_provider = ldap\naccess_provider = ldap\nldap_uri = ldaps://${authentik.company}:636\n\nldap_schema = rfc2307bis\nldap_search_base = ${ldap.baseDN}\nldap_user_search_base = ou=users,${ldap.baseDN}\nldap_group_search_base = ${ldap.baseDN}\n\nldap_user_object_class = user\nldap_user_name = cn\nldap_group_object_class = group\nldap_group_name = cn\n\n# Optionally, filter logins to only a specific group\n#ldap_access_order = filter\n#ldap_access_filter = memberOf=cn=authentik Admins,ou=groups,${ldap.baseDN}\n\nldap_default_bind_dn = cn=${sssd.serviceAccount},ou=users,${ldap.baseDN}\nldap_default_authtok = ${sssd.serviceAccountToken}\n```\n\n----------------------------------------\n\nTITLE: Setting Username to Google Email Address in authentik with Python\nDESCRIPTION: This Python snippet defines an expression policy used within authentik's enrollment flow to automatically set the user's username to their Google email address, avoiding manual username prompts. It accesses the enrollment context's prompt data to retrieve the email and updates the username field accordingly. This requires that the policy be bound to the enrollment flow's prompt stage and prioritized before default username policies. Inputs: request context containing prompt_data with an email key. Outputs: username field in prompt_data is set. This approach enables seamless username assignment for users authenticating via Google OAuth.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/google/cloud/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nemail = request.context[\"prompt_data\"][\"email\"]\n# Direct set username to email\nrequest.context[\"prompt_data\"][\"username\"] = email\n# Set username to email without domain\n# request.context[\"prompt_data\"][\"username\"] = email.split(\"@\")[0]\nreturn False\n```\n\n----------------------------------------\n\nTITLE: Sample 'values.yaml' Configuration for Authentik Helm Deployment\nDESCRIPTION: Defines the minimal configuration required to deploy Authentik on Kubernetes via Helm, including secret key, error reporting, PostgreSQL password, ingress settings, and enabling Redis. These values customize deployment parameters and access points.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/kubernetes.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nauthentik:\n    secret_key: \"PleaseGenerateASecureKey\"\n    # This sends anonymous usage-data, stack traces on errors and\n    # performance data to sentry.io, and is fully opt-in\n    error_reporting:\n        enabled: true\n    postgresql:\n        password: \"ThisIsNotASecurePassword\"\n\nserver:\n    ingress:\n        # Specify kubernetes ingress controller class name\n        ingressClassName: nginx | traefik | kong\n        enabled: true\n        hosts:\n            - authentik.domain.tld\n\npostgresql:\n    enabled: true\n    auth:\n        password: \"ThisIsNotASecurePassword\"\nredis:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Running LDAP Synchronization in Foreground (Docker Compose)\nDESCRIPTION: This command runs an LDAP synchronization in the foreground using Docker Compose. It allows you to see any errors or warnings that might occur during the synchronization process. Replace '*slug of the source*' with the actual slug of the LDAP source you want to synchronize.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/ldap_source.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run --rm worker ldap_sync *slug of the source*\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File\nDESCRIPTION: This snippet downloads the latest `docker-compose.yml` file, which is crucial for upgrading the authentik instance in a Docker Compose environment. It uses either `wget` or `curl`, common command-line tools for fetching files from the internet. The file is downloaded and saved as `docker-compose.yml`, which will then be used in subsequent upgrade steps.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/upgrade.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/docker-compose.yml\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -O https://goauthentik.io/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentik Proxy Service with Traefik Integration - YAML\nDESCRIPTION: Specifies the authentik-proxy service using the official ghcr.io/goauthentik/proxy image. It maps ports 9000 and 9443 for HTTP(S) communication, includes environment variables for Authentik host URL, security token, and optional browser host override. The service includes detailed Traefik labels configuring routing rules, enabling Traefik, setting a forwarding authentication middleware with trust for forwarded headers, and specifying headers expected in authenticated responses. This setup secures access to services behind Authentik authentication via Traefik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_traefik_compose.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik-proxy:\n    image: ghcr.io/goauthentik/proxy\n    ports:\n        - 9000:9000\n        - 9443:9443\n    environment:\n        AUTHENTIK_HOST: https://your-authentik.tld\n        AUTHENTIK_INSECURE: \"false\"\n        AUTHENTIK_TOKEN: token-generated-by-authentik\n        # Starting with 2021.9, you can optionally set this too\n        # when authentik_host for internal communication doesn't match the public URL\n        # AUTHENTIK_HOST_BROWSER: https://external-domain.tld\n    labels:\n        traefik.enable: true\n        traefik.port: 9000\n        traefik.http.routers.authentik.rule: Host(`app.company`) && PathPrefix(`/outpost.goauthentik.io/`)\n        # `authentik-proxy` refers to the service name in the compose file.\n        traefik.http.middlewares.authentik.forwardauth.address: http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik\n        traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true\n        traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version\n    restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Configuring Matrix Synapse OIDC Provider in YAML\nDESCRIPTION: This YAML configuration block defines Authentik as an OpenID Connect provider within the Matrix Synapse `homeserver.yaml` file. It requires the `issuer` URL, `client_id`, and `client_secret` obtained from the Authentik OAuth2/OpenID Connect provider configuration. The `scopes` define the user information requested from Authentik, and the `user_mapping_provider` configures how Authentik user attributes (`preferred_username`, `name`) are mapped to Matrix user properties (`localpart_template`, `display_name_template`).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/matrix-synapse/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noidc_providers:\n    - idp_id: authentik\n      idp_name: authentik\n      discover: true\n      issuer: \"https://authentik.company/application/o/app-slug/\"\n      client_id: \"*client id*\"\n      client_secret: \"*client secret*\"\n      scopes:\n          - \"openid\"\n          - \"profile\"\n          - \"email\"\n      user_mapping_provider:\n          config:\n              localpart_template: \"{{ user.preferred_username }}\"\n              display_name_template: \"{{ user.name|capitalize }}\"\n\n```\n\n----------------------------------------\n\nTITLE: Deploying authentik Outpost in Kubernetes (YAML)\nDESCRIPTION: Defines a Kubernetes Deployment named `authentik-outpost` responsible for running the authentik outpost proxy container (`ghcr.io/goauthentik/proxy`). It uses environment variables (`AUTHENTIK_HOST`, `AUTHENTIK_TOKEN`, `AUTHENTIK_INSECURE`) populated from the `authentik-outpost-api` Secret to configure the connection to the authentik core. The deployment ensures the specified number of replicas are running and exposes container ports 9000 and 9443. Replace the `__OUTPOST_NAME__` placeholder.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/manual-deploy-kubernetes.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: __OUTPOST_NAME__\n    app.kubernetes.io/managed-by: goauthentik.io\n    app.kubernetes.io/name: authentik-proxy\n    app.kubernetes.io/version: 2021.12.3\n  name: authentik-outpost\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/instance: __OUTPOST_NAME__\n      app.kubernetes.io/managed-by: goauthentik.io\n      app.kubernetes.io/name: authentik-proxy\n      app.kubernetes.io/version: 2021.12.3\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/instance: __OUTPOST_NAME__\n        app.kubernetes.io/managed-by: goauthentik.io\n        app.kubernetes.io/name: authentik-proxy\n        app.kubernetes.io/version: 2021.12.3\n    spec:\n      containers:\n        - env:\n          - name: AUTHENTIK_HOST\n            valueFrom:\n              secretKeyRef:\n                key: authentik_host\n                name: authentik-outpost-api\n          - name: AUTHENTIK_TOKEN\n            valueFrom:\n              secretKeyRef:\n                key: token\n                name: authentik-outpost-api\n          - name: AUTHENTIK_INSECURE\n            valueFrom:\n              secretKeyRef:\n                key: authentik_host_insecure\n                name: authentik-outpost-api\n        image: ghcr.io/goauthentik/proxy\n        name: proxy\n        ports:\n          - containerPort: 9000\n            name: http\n            protocol: TCP\n          - containerPort: 9443\n            name: https\n            protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Proxy for goauthentik SSO Integration - nginx\nDESCRIPTION: This NGINX configuration sets up reverse proxying for an application behind goauthentik-based SSO. It handles SSL/TLS, HTTP/2, WebSocket upgrades, and advanced proxy buffering. The config integrates authentik for authentication and user context propagation by using the 'auth_request' directive, setting relevant X-authentik headers, and managing authentication cookies. It includes routes for proxying application requests, servicing outpost endpoints without auth, and redirecting unauthorized requests to authentik SSO flows. Prerequisites: a running authentik outpost, valid SSL certificates, and optional application backend address configuration (proxy_pass). Inputs include client requests; outputs are properly authenticated, header-enriched proxied requests and redirects. Constraints: adjust proxy_pass and SSL settings as needed; enable commented blocks for advanced or Basic Auth scenarios.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_nginx_standalone.md#_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n# Upgrade WebSocket if requested, otherwise use keepalive\nmap $http_upgrade $connection_upgrade_keepalive {\n    default upgrade;\n    ''      '';\n}\n\nserver {\n    # SSL and VHost configuration\n    listen                  443 ssl http2;\n    server_name             _;\n\n    ssl_certificate         /etc/ssl/certs/ssl-cert-snakeoil.pem;\n    ssl_certificate_key     /etc/ssl/private/ssl-cert-snakeoil.key;\n\n    # Increase buffer size for large headers\n    # This is needed only if you get 'upstream sent too big header while reading response\n    # header from upstream' error when trying to access an application protected by goauthentik\n    proxy_buffers 8 16k;\n    proxy_buffer_size 32k;\n\n    location / {\n        # Put your proxy_pass to your application here, and all the other statements you'll need\n        # proxy_pass http://localhost:5000;\n        # proxy_set_header Host $host;\n        # proxy_set_header ...\n        # Support for websocket\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade_keepalive;\n\n        ##############################\n        # authentik-specific config\n        ##############################\n        auth_request     /outpost.goauthentik.io/auth/nginx;\n        error_page       401 = @goauthentik_proxy_signin;\n        auth_request_set $auth_cookie $upstream_http_set_cookie;\n        add_header       Set-Cookie $auth_cookie;\n\n        # translate headers from the outposts back to the actual upstream\n        auth_request_set $authentik_username $upstream_http_x_authentik_username;\n        auth_request_set $authentik_groups $upstream_http_x_authentik_groups;\n        auth_request_set $authentik_entitlements $upstream_http_x_authentik_entitlements;\n        auth_request_set $authentik_email $upstream_http_x_authentik_email;\n        auth_request_set $authentik_name $upstream_http_x_authentik_name;\n        auth_request_set $authentik_uid $upstream_http_x_authentik_uid;\n\n        proxy_set_header X-authentik-username $authentik_username;\n        proxy_set_header X-authentik-groups $authentik_groups;\n        proxy_set_header X-authentik-entitlements $authentik_entitlements;\n        proxy_set_header X-authentik-email $authentik_email;\n        proxy_set_header X-authentik-name $authentik_name;\n        proxy_set_header X-authentik-uid $authentik_uid;\n\n        # This section should be uncommented when the \"Send HTTP Basic authentication\" option\n        # is enabled in the proxy provider\n        # auth_request_set $authentik_auth $upstream_http_authorization;\n        # proxy_set_header Authorization $authentik_auth;\n    }\n\n    # all requests to /outpost.goauthentik.io must be accessible without authentication\n    location /outpost.goauthentik.io {\n        # When using the embedded outpost, use:\n        proxy_pass              http://authentik.company:9000/outpost.goauthentik.io;\n        # For manual outpost deployments:\n        # proxy_pass              http://outpost.company:9000;\n\n        # Note: ensure the Host header matches your external authentik URL:\n        proxy_set_header        Host $host;\n\n        proxy_set_header        X-Original-URL $scheme://$http_host$request_uri;\n        add_header              Set-Cookie $auth_cookie;\n        auth_request_set        $auth_cookie $upstream_http_set_cookie;\n        proxy_pass_request_body off;\n        proxy_set_header        Content-Length \"\";\n    }\n\n    # Special location for when the /auth endpoint returns a 401,\n    # redirect to the /start URL which initiates SSO\n    location @goauthentik_proxy_signin {\n        internal;\n        add_header Set-Cookie $auth_cookie;\n        return 302 /outpost.goauthentik.io/start?rd=$scheme://$http_host$request_uri;\n        # For domain level, use the below error_page to redirect to your authentik server with the full redirect path\n        # return 302 https://authentik.company/outpost.goauthentik.io/start?rd=$scheme://$http_host$request_uri;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Authorizing OAuth Scope in authentik Expression Policy (Python)\nDESCRIPTION: This Python snippet is used in an authentik expression policy to conditionally authorize requested OAuth scopes. It checks if the `my-admin-scope` is present in the requested `oauth_scopes` within the request context. If so, it further verifies if the `request.user` is a member of the `my-admin-group` using the `ak_is_group_member` helper function to determine authorization; otherwise, it grants authorization by returning `True`. It depends on the `request.context` and `ak_is_group_member` objects provided by the authentik policy engine.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/oauth2/index.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# There are additional fields set in the context, use `ak_logger.debug(request.context)` to see them.\n\nif \"my-admin-scope\" in request.context[\"oauth_scopes\"]:\n    return ak_is_group_member(request.user, name=\"my-admin-group\")\nreturn True\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Backend for Authentik - ENV\nDESCRIPTION: This environment block sets core variables for Authentik to use an S3 storage backend. Place these lines in the '.env' file in the Authentik project directory. Required parameters include the storage backend type ('s3'), access key, secret key, and bucket name. This configuration enables Authentik to interface with the specified S3-compatible storage provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/storage-s3.md#_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nAUTHENTIK_STORAGE__MEDIA__BACKEND=s3\nAUTHENTIK_STORAGE__MEDIA__S3__ACCESS_KEY=access_key\nAUTHENTIK_STORAGE__MEDIA__S3__SECRET_KEY=secret_key\nAUTHENTIK_STORAGE__MEDIA__S3__BUCKET_NAME=authentik-media\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Application in authentik for RustDesk Server Pro\nDESCRIPTION: Configures an application and provider in authentik to enable OAuth2/OIDC authentication for RustDesk Server Pro. This involves setting client credentials and redirect URIs, which will be used in RustDesk configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/rustdesk-pro/index.mdx#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Authentication Header with Custom Attribute - YAML\nDESCRIPTION: This YAML snippet configures the Home Assistant 'auth_header' custom component to use a custom header, 'X-ak-hass-user', for reading the username. This is used in conjunction with authentik user attributes that populate this specific header, allowing for flexible mapping between authentik users and existing Home Assistant usernames. Requires the 'hass-auth-header' integration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/home-assistant/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauth_header:\n    username_header: X-ak-hass-user\n```\n\n----------------------------------------\n\nTITLE: Property Mapping Expression - Group based permissions - Python\nDESCRIPTION: This Python code defines an expression that checks if a user is a member of specified groups (`Minio admins` or `Minio users`). If the user is in the 'Minio admins' group, the expression returns the 'consoleAdmin' policy. If in 'Minio users', it returns 'readonly' and a custom policy. If the user doesn't belong to either group, it returns `None`, effectively denying access. This mapping enables role-based access control.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/minio/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif ak_is_group_member(request.user, name=\"Minio admins\"):\n  return {\n    \"policy\": \"consoleAdmin\",\n}\nelif ak_is_group_member(request.user, name=\"Minio users\"):\n  return {\n    \"policy\": [\"readonly\", \"my-custom-policy\"]\n}\nreturn None\n```\n\n----------------------------------------\n\nTITLE: Configuring IngressRoute with Authentik Middleware and Traefik Routing (YAML)\nDESCRIPTION: This snippet updates the IngressRoute specification in Kubernetes to leverage the Authentik middleware by naming it in the middleware list for specific routes. It requires Traefik with CRD support and must be used in environments where cross-namespace middleware usage may require explicit enabling. Key fields include 'match' for route identification, 'middlewares' (with optional namespace), 'priority', and attached services. The snippet also provides an example for routing to an Authentik outpost via a Service for single-application setups, which may use an ExternalName service to target hosts outside the cluster.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_traefik_ingress.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n    routes:\n        - kind: Rule\n          match: \"Host(`app.company`)\"\n          middlewares:\n              - name: authentik\n                namespace: authentik\n          priority: 10\n          services: # Unchanged\n        # This part is only required for single-app setups\n        - kind: Rule\n          match: \"Host(`app.company`) && PathPrefix(`/outpost.goauthentik.io/`)\"\n          priority: 15\n          services:\n              - kind: Service\n                # Or, to use an external Outpost, create an ExternalName service and reference that here.\n                # See https://kubernetes.io/docs/concepts/services-networking/service/#externalname\n                name: ak-outpost-example-outpost\n                port: 9000\n```\n\n----------------------------------------\n\nTITLE: Whitelisting email domains for SSO enrollment in authentik Python policy\nDESCRIPTION: This Python expression snippet is used in the `default-source-enrollment-if-sso` policy to restrict user enrollment to specific email domains during an SSO flow. It checks the email provided in the enrollment prompt data and denies access if the domain is not in the `allowed_domains` list. It sets the username to the email for allowed users.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression/whitelist_email.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nallowed_domains = [\"example.org\", \"example.net\", \"example.com\"]\n\ncurrent_domain = request.context[\"prompt_data\"][\"email\"].split(\"@\")[1] if request.context.get(\"prompt_data\", {}).get(\"email\") else None\nif current_domain in allowed_domains:\n  email = request.context[\"prompt_data\"][\"email\"]\n  request.context[\"prompt_data\"][\"username\"] = email\n  return ak_is_sso_flow\nelse:\n  return ak_message(\"Enrollment denied for this email domain\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Type in YAML\nDESCRIPTION: Sets the Kubernetes Service type created for the outpost. Options include ClusterIP (default) or LoadBalancer, which might be necessary for certain outpost types like LDAP.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_service_type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Specifying Authentik Host URL in YAML\nDESCRIPTION: Defines the base URL that a managed outpost uses to connect back to the authentik instance. This setting is only relevant when using a managed outpost.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik_host: https://authentik.tld/\n```\n\n----------------------------------------\n\nTITLE: Configuring BookStack for SAML2 Authentication\nDESCRIPTION: This code snippet shows the environment variables needed to configure BookStack for SAML2 authentication with authentik. It includes parameters such as the SAML2 IDP entity ID, auto-initiation flag, email attribute, external ID attribute, and metadata URL, facilitating SAML-based login.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/bookstack/index.mdx#_snippet_1\n\nLANGUAGE: Yaml\nCODE:\n```\nAUTH_METHOD=saml2\nAUTH_AUTO_INITIATE=true # Set this to \"true\" to automatically redirect the user to authentik.\nSAML2_NAME=authentik # The display name shown on the login page.\nSAML2_EMAIL_ATTRIBUTE=email\nSAML2_EXTERNAL_ID_ATTRIBUTE=uid\nSAML2_USER_TO_GROUPS=true\nSAML2_GROUP_ATTRIBUTE=http://schemas.xmlsoap.org/claims/Group\nSAML2_DISPLAY_NAME_ATTRIBUTES=http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\nSAML2_IDP_ENTITYID=https://authentik.company/api/v3/providers/saml/<your-application-slug>/metadata/?download\nSAML2_AUTOLOAD_METADATA=true\n```\n\n----------------------------------------\n\nTITLE: Granting Admin Access via authentik SAML\nDESCRIPTION: This Python snippet defines a custom SAML property mapping to grant admin access to Nextcloud users based on authentik group membership. It iterates through user groups and yields each group's name. If the user is a member of the specified authentik admin group, it then yields 'admin', granting administrative privileges within Nextcloud. This mapping will override the existing Groups mapping in Nextcloud.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/nextcloud/index.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor group in request.user.all_groups():\n    yield group.name\nif ak_is_group_member(request.user, name=\"<authentik nextcloud admin group's name>\"):\n    yield \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik using Helm Chart - Shell\nDESCRIPTION: This shell snippet guides Kubernetes users through upgrading authentik by updating the Helm repository and performing a Helm upgrade with the specified version selector (^2024.10). The first command updates local information about available charts, while the second applies configuration changes found in values.yaml to upgrade the target release to authentik 2024.10. Prerequisites include having Helm installed, the authentik Helm repository added, and an existing authentik installation. Key parameters are the values file, the release name, and the version specifier. Upon completion, the running authentik instance in the Kubernetes cluster will be updated to the latest release.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^2024.10\n```\n\n----------------------------------------\n\nTITLE: Matching ASN in Expression Policy (Python)\nDESCRIPTION: Checks if the Autonomous System Number from the ASN context matches a specific integer, for restricting or allowing access based on network provider. Dependencies: context['asn']['asn'] available. Input: context['asn']['asn']. Output: Boolean. Limitations: Only matches exact ASN number 64496.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreturn context[\"asn\"][\"asn\"] == 64496\n```\n\n----------------------------------------\n\nTITLE: Adding NGINX Ingress Annotations to Secure Authentik Outpost Ingress in YAML\nDESCRIPTION: Adds necessary nginx ingress annotations to the Authentik ingress resource to protect it via authentication requests. These annotations specify the internal authentication URL used by nginx for access control, the sign-in URL redirect after authentication, and the response headers to propagate. Additionally, a custom nginx proxy header is set to forward the original host header. The configuration requires enabling the 'allow-snippet-annotations' feature in the ingress-nginx controller, which is typically done via Helm values by setting 'controller.allowSnippetAnnotations' to true.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_nginx_ingress.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n    annotations:\n        # This should be the in-cluster DNS name for the authentik outpost service\n        # as when the external URL is specified here, nginx will overwrite some crucial headers\n        nginx.ingress.kubernetes.io/auth-url: |-\n            http://ak-outpost-example.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx\n        # If you're using domain-level auth, use the authentication URL instead of the application URL\n        nginx.ingress.kubernetes.io/auth-signin: |-\n            https://app.company/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri\n        nginx.ingress.kubernetes.io/auth-response-headers: |-\n            Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid\n        nginx.ingress.kubernetes.io/auth-snippet: |\n            proxy_set_header X-Forwarded-Host $http_host;\n```\n\n----------------------------------------\n\nTITLE: Checking Discord Guild Membership in authentik with Python\nDESCRIPTION: This Python code snippet checks if a user is a member of a specific Discord guild during the OAuth login process. It uses the Discord API to verify membership and displays an error message if the user is not a member. It requires the `requests` library.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/discord/index.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# To get the guild ID number for the parameters, open Discord, go to Settings > Advanced and enable developer mode.\n# Right-click on the server/guild title and select \"Copy ID\" to get the guild ID.\n\nACCEPTED_GUILD_ID = \"123456789123456789\"\nGUILD_NAME_STRING = \"The desired server/guild name in the error message.\"\n\n# Only change below here if you know what you are doing.\n\n# Ensure flow is only run during OAuth logins via Discord\nif context['source'].provider_type != \"discord\":\n    return True\n\n# Get the user-source connection object from the context, and get the access token\nconnection = context.get(\"goauthentik.io/sources/connection\")\nif not connection:\n  return False\naccess_token = connection.access_token\n\nguilds = requests.get(\n    \"https://discord.com/api/users/@me/guilds\",\n    headers= {\n        \"Authorization\": f\"Bearer {access_token}\",\n    }\n).json()\n\nuser_matched = any(ACCEPTED_GUILD_ID == g[\"id\"] for g in guilds)\nif not user_matched:\n    ak_message(f\"User is not a member of {GUILD_NAME_STRING}.\")\nreturn user_matched\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik on Kubernetes with Helm\nDESCRIPTION: Commands to update the Helm repository and upgrade the authentik Helm chart to version 2025.2.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2025/v2025.2.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^2025.2\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level to Debug in Docker and Kubernetes\nDESCRIPTION: Instructions to modify the log level to 'debug' for Authentik in Docker and Kubernetes environments. In Docker, set environment variable; in Kubernetes, update `values.yml`. Recreate containers to apply changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/logs.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTHENTIK_LOG_LEVEL=debug\n```\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik:\n    log_level: debug\n```\n\n----------------------------------------\n\nTITLE: Setting Terrakube OIDC Client Environment Variables (.env)\nDESCRIPTION: This snippet shows how to define the OIDC client ID and client secret as environment variables, typically in a `.env` file. These variables are referenced in the Dex configuration to securely provide the credentials required for the OIDC connection to authentik. It is recommended to use environment variables rather than hard-coding secrets directly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/terrakube/index.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nTERRAKUBE_OIDC_CLIENT_ID=*your Client ID*\nTERRAKUBE_OIDC_CLIENT_SECRET=*your Client Secret*\n```\n\n----------------------------------------\n\nTITLE: Executing Authentik Email Test Command with Docker Compose in Shell\nDESCRIPTION: This shell command runs the 'ak test_email' command inside the Authentik worker container managed by Docker Compose. It requires access to the Docker Compose setup where Authentik services are defined. The command allows testing email sending using the same parameters as the direct CLI command, facilitating troubleshooting in containerized environments.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/emails.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose exec worker ak test_email [...]\n```\n\n----------------------------------------\n\nTITLE: Conditional MFA Validation Stage with Authentik Policy (Python)\nDESCRIPTION: This snippet checks if the currently pending user's username is 'marie' and passes the policy if so, otherwise fails. Used to restrict MFA prompts to specific users. Dependencies: Authentik's policy execution context with a 'request' object and a 'pending_user' context entry. Input: context['pending_user'] object. Output: Boolean. Returns True only for the specified user. Limitations: Only matches exact usernames.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif request.context[\"pending_user\"].username == \"marie\":\n   return True\nreturn False\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Property Mapping Expression in authentik using Python\nDESCRIPTION: This Python snippet defines a generator expression used in an authentik SAML Property Mapping to check whether the requesting user belongs to the specified group named 'wazuh-administrators'. If the user is a member of that group, it yields the role string 'wazuh-admin' for use in SAML assertion attributes. This facilitates role assignment in Wazuh based on group membership within authentik. It requires the authentik expression context where the 'request' object is available and the function 'ak_is_group_member' is defined.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif ak_is_group_member(request.user, name=\"wazuh-administrators\"):\n   yield \"wazuh-admin\"\n```\n\n----------------------------------------\n\nTITLE: Redirecting Unauthorized Nginx Requests to Goauthentik Sign-in in nginx\nDESCRIPTION: This snippet implements a named internal Nginx location that handles 401 Unauthorized errors by redirecting users to the goauthentik SSO start URL. It sets the authentication cookie header to maintain session state and issues a 302 redirect to initiate the sign-in process. An alternative redirect line for domain-level authentication endpoints is provided but commented out.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_nginx_proxy_manager.md#_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nlocation @goauthentik_proxy_signin {\n    internal;\n    add_header Set-Cookie $auth_cookie;\n    return 302 /outpost.goauthentik.io/start?rd=$scheme://$http_host$request_uri;\n    # For domain level, use the below error_page to redirect to your authentik server with the full redirect path\n    # return 302 https://authentik.company/outpost.goauthentik.io/start?rd=$scheme://$http_host$request_uri;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Properties Python\nDESCRIPTION: This Python code snippet demonstrates how to map LDAP attributes to authentik user properties using the `ldap` dictionary. It shows examples of retrieving a username and a custom attribute and applying `list_flatten` to the phone number attribute. This is used for attribute mapping when synchronizing from the LDAP server.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/protocols/ldap/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"username\": ldap.get(\"uid\"), # list_flatten is automatically applied to top-level attributes\n    \"attributes\": {\n        \"phone\": list_flatten(ldap.get(\"phoneNumber\")), # but not for attributes!\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Flow Stage Response via Authentik API (JSON)\nDESCRIPTION: Example JSON request body for a POST request to `/api/v3/flows/executor/:slug`. This body submits the user's response to a specific flow stage challenge, identified by the `component` field (e.g., `ak-stage-identification`). It includes stage-specific data, such as the `uid_field` for identification. The API will respond with the next challenge or a redirect upon successful validation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/api/flow-executor.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Component is required to determine how to parse the response\n    \"component\": \"ak-stage-identification\",\n\n    // Stage-specific fields\n    \"uid_field\": \"jens\"\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik with Docker Compose (Shell)\nDESCRIPTION: This shell script provides commands to upgrade an authentik instance deployed via docker-compose. It first downloads the specific `docker-compose.yml` file for version 2023.5 using `wget`, overwriting any existing local file with the same name due to the `-O` flag. It then uses `docker-compose up -d` to apply the new configuration and update the running authentik services in detached mode.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/2023.5/docker-compose.yml\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Mounting Kubernetes Volume for authentik Custom Email Templates in YAML\nDESCRIPTION: This YAML snippet is used in the authentik Helm chart values.yaml file to mount the ConfigMap containing custom email templates as a volume. It defines a volume sourced from the ConfigMap and a volumeMount attaching it to the worker pods at the /templates directory. This setup enables authentik to access and use user-defined HTML email templates during email verification stages.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/email/index.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n    - name: email-templates\n      configMap:\n          name: authentik-templates\nvolumeMounts:\n    - name: email-templates\n      mountPath: /templates\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentik Group Attributes for Sonarr Basic Auth (YAML)\nDESCRIPTION: Defines custom attributes within an authentik Group to store HTTP Basic authentication credentials (username and password) for Sonarr users. These attributes, `sonarr_user` and `sonarr_password`, are later referenced in the authentik Provider settings when enabling 'Use Basic Authentication' to forward credentials to Sonarr.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/sonarr/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsonarr_user: username\nsonarr_password: password\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik with Kubernetes Helm (v2024.12)\nDESCRIPTION: Updates the local Helm chart repository to fetch the latest chart information and then upgrades the authentik Helm release named 'authentik' using the 'authentik/authentik' chart. It applies configuration from the 'values.yaml' file (-f) and targets version 2024.12 or later patch versions within the 2024.12 series (^2024.12).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.12.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^2024.12\n```\n\n----------------------------------------\n\nTITLE: Creating Nextcloud Profile Scope using Python\nDESCRIPTION: This Python code defines a custom scope in authentik's property mappings to retrieve user group memberships, determine if a user is an admin, and set a user's storage quota and user ID.  This script is designed to extract user information from the authentik user object.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/nextcloud/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    # Extract all groups the user is a member of\n    groups = [group.name for group in user.ak_groups.all()]\n\n    # Nextcloud admins must be members of a group called \"admin\".\n    # This is static and cannot be changed.\n    # Append \"admin\" to the user's groups if they are an admin in authentik.\n    if user.is_superuser and \"admin\" not in groups:\n        groups.append(\"admin\")\n\n    return {\n        \"name\": request.user.name,\n        \"groups\": groups,\n        # Set a quota by using the \"nextcloud_quota\" property in the user's attributes\n        \"quota\": user.group_attributes().get(\"nextcloud_quota\", None),\n        # To connect an existing Nextcloud user, set \"nextcloud_user_id\" to the Nextcloud username.\n        \"user_id\": user.attributes.get(\"nextcloud_user_id\", str(user.uuid)),\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom YAML Tags in VS Code (JSON)\nDESCRIPTION: This JSON snippet shows how to instruct VS Code to recognize custom YAML tags used by Authentik, ensuring correct syntax highlighting and validation. Add the 'yaml.customTags' key with an array of custom tags to your 'settings.json' to enable support for tags like '!Condition', '!Context', '!Find', and more. No external dependencies are required, and the snippet affects only the user's VS Code editor configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"yaml.customTags\": [\n        \"!Condition sequence\",\n        \"!Context scalar\",\n        \"!Enumerate sequence\",\n        \"!Env scalar\",\n        \"!Find sequence\",\n        \"!Format sequence\",\n        \"!If sequence\",\n        \"!Index scalar\",\n        \"!KeyOf scalar\",\n        \"!Value scalar\",\n        \"!AtIndex scalar\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik via Docker Compose - Shell\nDESCRIPTION: This shell script provides the commands to download the latest docker-compose file for authentik 2024.2 and update the running Docker services. It requires 'wget' to download the file and 'docker compose' (or 'docker-compose') to manage the containers. The '-O' flag ensures the file is saved with the specified name, overwriting if it exists, and 'docker compose up -d' updates services based on the new configuration while running in detached mode.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/2024.2/docker-compose.yml\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Session Name Mapping in authentik (Python)\nDESCRIPTION: Python expression for an authentik SAML Property Mapping for the 'RoleSessionName' attribute. It simply returns the authenticating user's username, which will be used as the session name in AWS CloudTrail logs.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/aws/index.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn user.username\n```\n\n----------------------------------------\n\nTITLE: Mapping Azure AD User Attributes (Python)\nDESCRIPTION: This Python script, designed for an authentik Expression Policy, maps attributes from the Azure AD OAuth user information (`oauth_userinfo`) to the authentik user profile data (`prompt_data`). It defines mappings for required user fields (username, email, name) and additional attributes (upn, sn, name), checks for the presence of these fields in the OAuth data, and updates the `prompt_data` structure for automatic user enrollment during the authentication flow.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/azure-ad/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# save existing prompt data\ncurrent_prompt_data = context.get('prompt_data', {})\n# make sure we are used in an oauth flow\nif 'oauth_userinfo' not in context:\n  ak_logger.warning(f\"Missing expected oauth_userinfo in context. Context{context}\")\n  return False\noauth_data = context['oauth_userinfo']\n# map fields directly to user left hand are the field names provided by\n# the microsoft graph api on the right the user field names as used by authentik\nrequired_fields_map = {\n  'name': 'username',\n  'upn': 'email',\n  'given_name': 'name'\n}\nmissing_fields = set(required_fields_map.keys()) - set(oauth_data.keys())\nif missing_fields:\n  ak_logger.warning(f\"Missing expected fields. Missing fields {missing_fields}.\")\n  return False\nfor oauth_field, user_field in required_fields_map.items():\n  current_prompt_data[user_field] = oauth_data[oauth_field]\n# Define fields that should be mapped as extra user attributes\nattributes_map = {\n  'upn': 'upn',\n  'family_name': 'sn',\n  'name': 'name'\n}\nmissing_attributes = set(attributes_map.keys()) - set(oauth_data.keys())\nif missing_attributes:\n  ak_logger.warning(f\"Missing attributes: {missing_attributes}.\")\n  return False\n# again make sure not to overwrite existing data\ncurrent_attributes = current_prompt_data.get('attributes', {})\nfor oauth_field, user_field in attributes_map.items():\n  current_attributes[user_field] = oauth_data[oauth_field]\ncurrent_prompt_data['attributes'] = current_attributes\ncontext['prompt_data'] = current_prompt_data\nreturn True\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as Reverse Proxy with WebSocket Support for Authentik (nginx)\nDESCRIPTION: This snippet provides an example Nginx configuration to reverse proxy requests to an Authentik server over HTTPS, ensuring correct WebSocket upgrade handling and passing of essential headers. It uses an upstream block with keepalive connections for performance, maps WebSocket upgrade headers, redirects HTTP (port 80) traffic to HTTPS, and sets TLS certificates for HTTPS connections (port 443). Key headers like X-Forwarded-Proto, X-Forwarded-For, Host, Upgrade, and Connection are set to preserve protocol details and client IP information. This configuration requires valid TLS certificates and assumes Authentik listens on the specified upstream hostname and port.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/reverse-proxy.md#_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n# Upstream where your authentik server is hosted.\nupstream authentik {\n    server <hostname of your authentik server>:9443;\n    # Improve performance by keeping some connections alive.\n    keepalive 10;\n}\n\n# Upgrade WebSocket if requested, otherwise use keepalive\nmap $http_upgrade $connection_upgrade_keepalive {\n    default upgrade;\n    ''      '';\n}\n\nserver {\n    # HTTP server config\n    listen 80;\n    listen [::]:80;\n    server_name sso.domain.tld;\n    # 301 redirect to HTTPS\n    return 301 https://$host$request_uri;\n}\nserver {\n    # HTTPS server config\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name sso.domain.tld;\n\n    # TLS certificates\n    ssl_certificate /etc/letsencrypt/live/domain.tld/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/domain.tld/privkey.pem;\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n    # Proxy site\n    # Location can be set to a subpath if desired, see documentation linked below:\n    # https://goauthentik.io/docs/installation/configuration#authentik_web__path\n    location / {\n        proxy_pass https://authentik;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade_keepalive;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nginx Location for Goauthentik Outpost Access in nginx\nDESCRIPTION: This snippet defines an Nginx location block for the /outpost.goauthentik.io path that serves authentication outpost requests without requiring authentication itself. It proxies requests to either an embedded or manual outpost deployment, ensures correct Host header forwarding, and preserves the original URL. It handles cookie setting and prevents request body forwarding to optimize outpost communication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_nginx_proxy_manager.md#_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /outpost.goauthentik.io {\n    # When using the embedded outpost, use:\n    proxy_pass              http://authentik.company:9000/outpost.goauthentik.io;\n    # For manual outpost deployments:\n    # proxy_pass              http://outpost.company:9000;\n\n    # Note: ensure the Host header matches your external authentik URL:\n    proxy_set_header        Host $host;\n\n    proxy_set_header        X-Original-URL $scheme://$http_host$request_uri;\n    add_header              Set-Cookie $auth_cookie;\n    auth_request_set        $auth_cookie $upstream_http_set_cookie;\n    proxy_pass_request_body off;\n    proxy_set_header        Content-Length \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding verify_only Flag to SMS Authenticator Stages\nDESCRIPTION: This snippet adds the 'verify_only' boolean property to the SMS authenticator stage's JSON response and request payloads. It indicates whether the phone number is used solely for verification during enrollment, ensuring privacy by only storing a hash of the number.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"verify_only\": \"boolean\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring authentik Provider with Certificate\nDESCRIPTION: Describes how to edit the LDAP provider configuration in authentik to select the imported certificate. This setup enables secure communication between authentik and pfSense.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Creating Glitchtip Superuser via Docker Exec (Shell)\nDESCRIPTION: This shell command executes the `createsuperuser` management command within the running Glitchtip web Docker container (`glitchtip-web-1`). This superuser is necessary to access the Django Admin interface, where the OpenID Connect provider configuration is performed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/glitchtip/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo docker exec -it glitchtip-web-1 ./manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Mapping Authentik User Groups to SAML groups (Python)\nDESCRIPTION: This Python generator expression is configured in an Authentik SAML Property Mapping. It iterates through the authenticated `user`'s associated `ak_groups` and yields the `name` of each group. This generates a list of group names that are transmitted as the `groups` SAML attribute to the Service Provider (Knocknoc). Requires the `user` object with associated groups.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/knocknoc/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor group in user.ak_groups.all(): yield group.name\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Custom Headers with Python Property Mapping\nDESCRIPTION: Python scope mapping example that dynamically assigns the user's username to the 'X-App-User' header. This approach allows for dynamic values derived from user properties or request context. After creation, this mapping must be selected in the proxy provider settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/custom_headers.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"ak_proxy\": {\n        \"user_attributes\": {\n            \"additionalHeaders\": {\n                \"X-App-User\": request.user.username\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Docker Container Labels in YAML\nDESCRIPTION: Allows adding additional labels to the Docker containers created for the outpost. This setting is specific to Docker outposts and non-embedded deployments.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndocker_labels: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Docker environment for authentik SSO\nDESCRIPTION: Docker environment variables to configure Grafana for authentication with authentik using OAuth2, including client credentials, authorization endpoints, and optional role mapping configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/grafana/index.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n    GF_AUTH_GENERIC_OAUTH_ENABLED: \"true\"\n    GF_AUTH_GENERIC_OAUTH_NAME: \"authentik\"\n    GF_AUTH_GENERIC_OAUTH_CLIENT_ID: \"<Client ID from above>\"\n    GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: \"<Client Secret from above>\"\n    GF_AUTH_GENERIC_OAUTH_SCOPES: \"openid profile email\"\n    GF_AUTH_GENERIC_OAUTH_AUTH_URL: \"https://authentik.company/application/o/authorize/\"\n    GF_AUTH_GENERIC_OAUTH_TOKEN_URL: \"https://authentik.company/application/o/token/\"\n    GF_AUTH_GENERIC_OAUTH_API_URL: \"https://authentik.company/application/o/userinfo/\"\n    GF_AUTH_SIGNOUT_REDIRECT_URL: \"https://authentik.company/application/o/<Slug of the application from above>/end-session/\"\n    # Optionally enable auto-login (bypasses Grafana login screen)\n    GF_AUTH_OAUTH_AUTO_LOGIN: \"true\"\n    # Optionally map user groups to Grafana roles\n    GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: \"contains(groups, 'Grafana Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'\"\n```\n\n----------------------------------------\n\nTITLE: Forwarding additional HTTP headers in YAML configuration for Proxy Provider\nDESCRIPTION: This YAML snippet configures additional HTTP headers for the authentik Proxy Provider to forward user information (username, email, full name) to downstream applications upon user login. It allows customization of header keys and values that applications like Grafana or Tandoor Recipes can consume for authentication or user metadata. Used only in Proxy Provider contexts and requires proper application-side configuration to accept these headers.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/user/user_ref.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalHeaders:\n    REMOTE-USER: joe.smith\n    REMOTE-EMAIL: joe@jsmith.com\n    REMOTE-NAME: Joseph\n```\n\n----------------------------------------\n\nTITLE: Defining Quick Actions in TypeScript\nDESCRIPTION: Imports the `QuickActionsCard` web component JavaScript module and defines a constant `ACTIONS`. This constant is an array where each element represents a quick action, specified as a tuple containing the display text (string), the target URL (string), and an optional boolean flag (defaults to false) indicating whether the link should open in a new browser tab.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/cards/stories/QuickActionsCard.docs.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@goauthentik/elements/cards/QuickActionsCard.js\";\n\nconst ACTIONS: QuickAction[] = [\n    [\"Create a new application\", \"/core/applications\"],\n    [\"Check the logs\", \"/events/log\"],\n    [\"Explore integrations\", \"https://goauthentik.io/integrations/\", true],\n    [\"Manage users\", \"/identity/users\"],\n    [\"Check the release notes\", \"https://goauthentik.io/docs/releases/\", true],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Token Key via Authentik Blueprint YAML\nDESCRIPTION: Defines a token model instance with a specific key value using a blueprint in YAML. This bypasses the standard API limitation where token keys cannot be manually set, only rotated. The snippet requires the 'authentik_core.token' model and sets the token's key attribute for provisioning with a user reference and usage intent. Input is the YAML blueprint snippet; output is the created or updated token with the specified key.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/models.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# [...]\n- model: authentik_core.token\n  state: present\n  identifiers:\n      identifier: my-token\n  attrs:\n      key: this-should-be-a-long-value\n      user: !KeyOf my-user\n      intent: api\n```\n\n----------------------------------------\n\nTITLE: Creating LDAP Providers (API)\nDESCRIPTION: Updates the response for POST /providers/ldap/. The response code is 201 Created with content type application/json. New required properties 'assigned_backchannel_application_name' (Application's display Name) and 'assigned_backchannel_application_slug' (Internal application name for URLs) are added to the response body.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_19\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /providers/ldap/\n```\n\n----------------------------------------\n\nTITLE: Loading Wazuh OpenSearch Security Configuration Using securityadmin.sh in Bash\nDESCRIPTION: This bash command sets the JAVA_HOME environment variable to the Wazuh Indexer JDK path and runs the OpenSearch securityadmin.sh script to apply SAML authentication configurations. It uses various flags including the config file, interactive cluster loading (-icl), certificate key files for authentication, and specifies the Wazuh Indexer host FQDN. The command is essential to activate the new security configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=/usr/share/wazuh-indexer/jdk/ && bash /usr/share/wazuh-indexer/plugins/opensearch-security/tools/securityadmin.sh -f /etc/wazuh-indexer/opensearch-security/config.yml -icl -key /etc/wazuh-indexer/certs/admin-key.pem -cert /etc/wazuh-indexer/certs/admin.pem -cacert /etc/wazuh-indexer/certs/root-ca.pem -h wazuh-indexer.company -nhnv\n```\n\n----------------------------------------\n\nTITLE: Creating an authentik LDAP Provider\nDESCRIPTION: This snippet details the creation of an LDAP provider within authentik. It outlines key settings such as the provider's name and the Base DN. This provider configuration is essential for establishing a connection between authentik and pfSense. It includes setting the provider name and the Base DN of the LDAP provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Configuring Writefreely OAuth Integration with authentik\nDESCRIPTION: The OAuth configuration block for Writefreely's config.ini file that sets up the connection to authentik. Includes endpoint URLs, client credentials, and attribute mapping between authentik claims and Writefreely user properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/writefreely/index.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[oauth.generic]\nclient_id          = <Client ID>\nclient_secret      = <Client Secret>\nhost               = https://authentik.company\ndisplay_name       = authentik\ncallback_proxy     =\ncallback_proxy_api =\ntoken_endpoint     = /application/o/token/\ninspect_endpoint   = /application/o/userinfo/\nauth_endpoint      = /application/o/authorize/\nscope              = openid profile email\nallow_disconnect   = false\nmap_user_id        = sub\nmap_username       = nickname\nmap_display_name   = name\nmap_email          = email\n```\n\n----------------------------------------\n\nTITLE: Configuring Metaapplyblueprint Meta Model in Authentik (YAML)\nDESCRIPTION: This snippet demonstrates how to use the 'metaapplyblueprint' meta model in Authentik blueprints to apply another blueprint instance as part of composite or dependent resource definition. The 'attrs' section specifies identifying attributes, such as matching by name, to locate the target blueprint for application. Dependencies: a working Authentik blueprint setup; keys and values must match target blueprint metadata. Key parameters include 'identifiers' for lookup and an optional 'required' boolean to enforce application or skip missing targets. The input is a YAML mapping and output is the invocation of referenced blueprint logic.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/meta.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nattrs:\n    identifiers:\n        name: Default - Password change flow\n```\n\n----------------------------------------\n\nTITLE: Create Scope Mapping for OpenProject Profile in Python\nDESCRIPTION: Defines a Python scope mapping function in authentik to provide user profile information required by OpenProject. This mapping generates a dictionary with user full name, username aliases, group memberships, and separates the full name into first and last names. The snippet depends on the authentik request context to access user attributes like name, username, and groups. This mapping is necessary because OpenProject requires separate first and last name fields, while authentik only provides a single full name string. The output dictionary keys correspond to user attributes expected by OpenProject during the OAuth2/OpenID authentication flow.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/openproject/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"name\": request.user.name,\n    \"preferred_username\": request.user.username,\n    \"nickname\": request.user.username,\n    \"groups\": [group.name for group in request.user.ak_groups.all()],\n    \"last_name\": request.user.name.rsplit(\" \", 1)[-1],\n    \"first_name\": request.user.name.rsplit(\" \", 1)[0],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Network for Outpost in YAML\nDESCRIPTION: Specifies the Docker network to which the outpost container should be connected. This setting is specific to Docker outposts and applies to non-embedded deployments.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndocker_network: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Open WebUI Environment Variables for authentik OIDC Integration\nDESCRIPTION: Sets the necessary environment variables in Open WebUI to connect to authentik using OpenID Connect. This configuration, typically placed in a .env file or as Docker environment variables, includes the Client ID, Client Secret obtained from authentik, the provider name ('authentik'), the OpenID Provider URL pointing to authentik's discovery endpoint, the Redirect URI matching the one set in authentik, and an option to enable automatic user signup on Open WebUI upon successful authentication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/open-webui/index.md#_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\n# Set OAUTH_CLIENT_ID to the Client ID copied from authentik.\nOAUTH_CLIENT_ID=your_client_id_here\n\n# Set OAUTH_CLIENT_SECRET to the Client Secret copied from authentik.\nOAUTH_CLIENT_SECRET=your_client_secret_here\n\n# Set OAUTH_PROVIDER_NAME to `authentik`.\nOAUTH_PROVIDER_NAME=authentik\n\n# Set OPENID_PROVIDER_URL to https://authentik.company/application/o/your-slug-here/.well-known/openid-configuration.\nOPENID_PROVIDER_URL=https://authentik.company/application/o/your-slug-here/.well-known/openid-configuration\n\n# Set OPENID_REDIRECT_URI to https://openwebui.company/oauth/oidc/callback.\nOPENID_REDIRECT_URI=https://openwebui.company/oauth/oidc/callback\n\n# If you wish for new users to be created on Open Web UI, set ENABLE_OAUTH_SIGNUP to 'true'.\nENABLE_OAUTH_SIGNUP='true'\n```\n\n----------------------------------------\n\nTITLE: Creating Admin Group with Kubernetes - Shell\nDESCRIPTION: This shell command uses `kubectl exec` to execute the `ak create_admin_group` command within a running authentik-worker pod in a Kubernetes deployment.  The command targets the 'worker' container within the pod. The `username` argument specifies the user to add to the newly created group. This requires `kubectl` to be configured to access the Kubernetes cluster. The command assumes an authentik-worker deployment named `authentik-worker`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/missing_admin_group.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deployment/authentik-worker -c worker -- ak create_admin_group username\n```\n\n----------------------------------------\n\nTITLE: Adding SSO Button to Jellyfin Login Page (HTML)\nDESCRIPTION: HTML code snippet to be placed in the Jellyfin login disclaimer section (Dashboard > General > Branding). This creates a button that initiates the OIDC authentication flow by redirecting the user to the specified authentik OIDC start URL. Ensure the `action` URL matches your Jellyfin FQDN and provider name.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/jellyfin/index.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"https://jellyfin.company/sso/OID/start/authentik\">\n  <button class=\"raised block emby-button button-submit\">\n    Sign in with SSO\n  </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Caddy Reverse Proxy with Host Header Override (conf)\nDESCRIPTION: This Caddyfile snippet demonstrates how to reverse proxy a specific path prefix (`/outpost.goauthentik.io/*`) to an HTTPS upstream (`https://outpost.company`). It explicitly sets the `Host` header sent to the upstream to match the upstream's host, which is necessary for some HTTPS upstreams to function correctly. Dependencies include Caddy server and an upstream server expecting a specific Host header. Expected input is an HTTP request matching the path prefix, output is the proxied request sent to the upstream with the modified Host header.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_caddy_standalone.md#_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nreverse_proxy /outpost.goauthentik.io/* https://outpost.company {\n    header_up Host {http.reverse_proxy.upstream.host}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Custom Headers with Group Attributes in YAML\nDESCRIPTION: Configuration example showing how to set static custom headers using group attributes. This approach allows for inheritance but is limited to static values. The header 'X-My-Header' will be sent with the value 'value' to the upstream application.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/custom_headers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalHeaders:\n    X-My-Header: value\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic OIDC Authentication in ownCloud with PHP\nDESCRIPTION: Minimal PHP configuration for ownCloud's OIDC integration with authentik. This code is placed in the oidc.config.php file and includes essential settings for the connection, such as provider URL, client credentials, and user attribute mapping.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/owncloud/index.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$CONFIG = [\n  'http.cookie.samesite' => 'None',\n  'openid-connect' => [\n    'provider-url' => 'https://authentik.company/application/o/owncloud/',\n    'client-id' => '<Client ID from authentik>',\n    'client-secret' => '<Client secret from authentik',\n    'loginButtonName' => 'Log in with authentik',\n    'mode' => 'userid',\n    'search-attribute' => 'preferred_username',\n    ],\n  ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configure Wekan Docker with authentik OAuth2\nDESCRIPTION: Configures Wekan running in Docker to use authentik for authentication via OAuth2. This involves setting specific environment variables to enable OAuth2, define the login style, provide the client ID and secret, and configure the server URL and endpoints. The `OAUTH2_*_MAP` variables map authentik's user information to Wekan's user fields.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wekan/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment: OAUTH2_ENABLED=true\n    OAUTH2_LOGIN_STYLE=redirect\n    OAUTH2_CLIENT_ID=<Client ID from above>\n    OAUTH2_SERVER_URL=https://authentik.company\n    OAUTH2_AUTH_ENDPOINT=/application/o/authorize/\n    OAUTH2_USERINFO_ENDPOINT=/application/o/userinfo/\n    OAUTH2_TOKEN_ENDPOINT=/application/o/token/\n    OAUTH2_SECRET=<Client Secret from above>\n    OAUTH2_ID_MAP=sub\n    OAUTH2_USERNAME_MAP=email\n    OAUTH2_FULLNAME_MAP=given_name\n    OAUTH2_EMAIL_MAP=email\n```\n\n----------------------------------------\n\nTITLE: Configuring Karakeep Environment Variables for authentik Integration\nDESCRIPTION: These environment variables configure Karakeep to use authentik as an OAuth provider. It includes required settings for the OAuth client credentials, configuration URL, and optional settings to restrict authentication methods.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/karakeep/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nNEXTAUTH_URL=https://karakeep.company\nOAUTH_CLIENT_ID=<Client ID from authentik>\nOAUTH_CLIENT_SECRET=<Client secret from authentik>\nOAUTH_WELLKNOWN_URL=https://authentik.company/application/o/karakeep/.well-known/openid-configuration\nOAUTH_PROVIDER_NAME=authentik\nOAUTH_ALLOW_DANGEROUS_EMAIL_ACCOUNT_LINKING=true\n# Optional: You can add this if you only want to allow login with Authentik\n# DISABLE_PASSWORD_AUTH=true\n# Optional but highly recommended:\n# DISABLE_SIGNUPS=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Tandoor Environment Variables for authentik SSO Integration\nDESCRIPTION: This snippet shows the required environment variables that need to be added to your Tandoor configuration to enable OpenID Connect authentication with authentik. It includes setting up the social provider and configuring the connection details.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/tandoor/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSOCIAL_PROVIDERS=allauth.socialaccount.providers.openid_connect\nSOCIALACCOUNT_PROVIDERS='{\"openid_connect\":{\"APPS\":[{\"provider_id\":\"authentik\",\"name\":\"authentik\",\"client_id\":\"<Client ID from authentik>\",\"secret\":\"<Client Secret from authentik>\",\"settings\":{\"server_url\":\"https://authentik.company/application/o/<application slug>/.well-known/openid-configuration\"}}]}}'\n```\n\n----------------------------------------\n\nTITLE: Regex Matching in Python\nDESCRIPTION: Checks if a given value matches a specified regular expression. This is useful for validating user input or filtering data based on patterns. It requires the `re` module in Python.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn regex_match(request.user.username, '.*admin.*')\n```\n\n----------------------------------------\n\nTITLE: Skipping Objects During Synchronization in Authentik Providers (Python)\nDESCRIPTION: This Python snippet demonstrates triggering the SkipObject exception within a property mapping to prevent synchronization of a specific object, such as a user, based on custom logic (e.g., matching username). The snippet depends on Authentik's provider integration (Google Workspace, Microsoft Entra ID, or SCIM) and requires access to the request context. The expression compares the current user's username and raises SkipObject to halt the sync operation for matching entries; non-matching entries continue normally.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/property-mappings/index.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nif request.user.username == \"example_username\":\n\traise SkipObject\n```\n\n----------------------------------------\n\nTITLE: Updating Flow Bindings API\nDESCRIPTION: This describes API endpoints for updating flow bindings, including PUT and PATCH requests. It details request and response content types and changed properties. The purpose is to configure how the flow executor should handle invalid responses to a challenge, the policy engine mode, and related properties for flows. It uses application/json content type.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_35\n\nLANGUAGE: string\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy with Goauthentik Authentication in nginx\nDESCRIPTION: This snippet configures an Nginx reverse proxy to protect an application using goauthentik authentication. It increases buffer sizes to handle large headers and disables port-based redirects. Within the main location block, it sets proxy_pass to the upstream application and integrates goauthentik-specific auth_request handling. The configuration captures and forwards authenticated user details via headers and manages cookie handling. It also includes optional settings for forwarding HTTP Basic authentication headers when enabled in the proxy provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_nginx_proxy_manager.md#_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n# Increase buffer size for large headers\n# This is needed only if you get 'upstream sent too big header while reading response\n# header from upstream' error when trying to access an application protected by goauthentik\nproxy_buffers 8 16k;\nproxy_buffer_size 32k;\n\n# Make sure not to redirect traffic to a port 4443\nport_in_redirect off;\n\nlocation / {\n    # Put your proxy_pass to your application here\n    proxy_pass          $forward_scheme://$server:$port;\n    # Set any other headers your application might need\n    # proxy_set_header Host $host;\n    # proxy_set_header ...\n\n    ##############################\n    # authentik-specific config\n    ##############################\n    auth_request     /outpost.goauthentik.io/auth/nginx;\n    error_page       401 = @goauthentik_proxy_signin;\n    auth_request_set $auth_cookie $upstream_http_set_cookie;\n    add_header       Set-Cookie $auth_cookie;\n\n    # translate headers from the outposts back to the actual upstream\n    auth_request_set $authentik_username $upstream_http_x_authentik_username;\n    auth_request_set $authentik_groups $upstream_http_x_authentik_groups;\n    auth_request_set $authentik_entitlements $upstream_http_x_authentik_entitlements;\n    auth_request_set $authentik_email $upstream_http_x_authentik_email;\n    auth_request_set $authentik_name $upstream_http_x_authentik_name;\n    auth_request_set $authentik_uid $upstream_http_x_authentik_uid;\n\n    proxy_set_header X-authentik-username $authentik_username;\n    proxy_set_header X-authentik-groups $authentik_groups;\n    proxy_set_header X-authentik-entitlements $authentik_entitlements;\n    proxy_set_header X-authentik-email $authentik_email;\n    proxy_set_header X-authentik-name $authentik_name;\n    proxy_set_header X-authentik-uid $authentik_uid;\n\n    # This section should be uncommented when the \"Send HTTP Basic authentication\" option\n    # is enabled in the proxy provider\n    # auth_request_set $authentik_auth $upstream_http_authorization;\n    # proxy_set_header Authorization $authentik_auth;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Recovery Key in Authentik Using Docker Compose Shell Command\nDESCRIPTION: Creates a recovery key link for Authentik via Docker Compose. Requires the docker-compose environment with the Authentik server container. The command specifies the key's validity duration (in this example, 10 years) and the username for which the recovery access will be created. Outputs a URL granting direct instance access for immediate login.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/login.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run --rm server create_recovery_key 10 akadmin\n```\n\n----------------------------------------\n\nTITLE: Configuring EspoCRM Redirect URI in authentik and EspoCRM\nDESCRIPTION: This URI is the endpoint within the EspoCRM application where authentik will redirect the user's browser after successful authentication. It must be configured as a Strict redirect URI in the authentik OAuth2/OpenID Connect provider settings and as the Authorization Redirect URI in EspoCRM's OIDC configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/espocrm/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://<em>espocrm.company</em>/oauth-callback.php\n```\n\n----------------------------------------\n\nTITLE: Defining Default Authentication Flow Blueprint Using YAML\nDESCRIPTION: This YAML snippet provides a declarative blueprint to create a default authentication flow within the authentik system. It defines the main flow entity along with various authentication stages including password change, MFA validation, identification, and user login. Each stage is assigned identifiers and metadata such as names, titles, and configuration options like session duration. The snippet also specifies the binding order of these stages within the overall flow using flowstagebinding entities. Dependencies include the authentik system's models such as authentik_flows.flow and authentik_stages_* models referenced herein. Expected inputs are the named identifiers and model references; outputs are a fully constructed authentication flow usable by authentik. The order of entries is crucial for evaluation references like !KeyOf and !Find tags.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/example.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\nmetadata:\n    name: Default - Authentication flow\nentries:\n    # Order of entries is important when using !KeyOf, as tags are evaluated in order they are in\n    # the document\n    - attrs:\n          # Only options that are required should be set here. Default values should not be stated\n          # here, as they will prevent anyone from overwriting the value\n          designation: authentication\n          name: Welcome to authentik!\n          title: Welcome to authentik!\n      identifiers:\n          slug: default-authentication-flow\n      model: authentik_flows.flow\n      id: flow\n    - attrs:\n          configure_flow:\n              !Find [authentik_flows.flow, [slug, default-password-change]]\n      identifiers:\n          name: default-authentication-password\n      id: default-authentication-password\n      model: authentik_stages_password.passwordstage\n    - identifiers:\n          name: default-authentication-mfa-validation\n      # If we're fine with all defaults, `attrs` can be omitted\n      id: default-authentication-mfa-validation\n      model: authentik_stages_authenticator_validate.authenticatorvalidatestage\n    - identifiers:\n          name: default-authentication-identification\n      id: default-authentication-identification\n      model: authentik_stages_identification.identificationstage\n    - attrs:\n          session_duration: seconds=0\n      identifiers:\n          name: default-authentication-login\n      id: default-authentication-login\n      model: authentik_stages_user_login.userloginstage\n    - identifiers:\n          order: 10\n          stage: !KeyOf default-authentication-identification\n          target: !KeyOf flow\n      model: authentik_flows.flowstagebinding\n    - identifiers:\n          order: 20\n          stage: !KeyOf default-authentication-password\n          target: !KeyOf flow\n      model: authentik_flows.flowstagebinding\n    - identifiers:\n          order: 30\n          stage: !KeyOf default-authentication-mfa-validation\n          target: !KeyOf flow\n      model: authentik_flows.flowstagebinding\n    - identifiers:\n          order: 100\n          stage: !KeyOf default-authentication-login\n          target: !KeyOf flow\n      model: authentik_flows.flowstagebinding\n```\n\n----------------------------------------\n\nTITLE: Running LDAP Synchronization in Foreground (Kubernetes)\nDESCRIPTION: This command runs an LDAP synchronization in the foreground using Kubernetes. It allows you to see any errors or warnings that might occur during the synchronization process. Replace '*slug of the source*' with the actual slug of the LDAP source you want to synchronize.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/ldap_source.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deployment/authentik-worker -c worker -- ak ldap_sync *slug of the source*\n```\n\n----------------------------------------\n\nTITLE: Visualizing SAML Authentication Flow with Mermaid (mermaid)\nDESCRIPTION: This mermaid sequence diagram illustrates the SAML authentication flow between a user, authentik (as SAML broker), Google Workspace (as SAML IdP), and a target application (as SAML SP). The diagram visualizes each step: navigation, redirection to authentik, choice of authentication method, redirection to Google, Google credentials validation, and final return to application post-authentication. Dependencies include mermaid.js for rendering, and the diagram is suitable for documentation or integration architecture overviews. Inputs are narrative authentication steps; output is a rendered flow chart for visual reference.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/google/workspace/index.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant User\n    participant authentik\n    participant Google\n    participant App\n\n    User->>App: User navigates to app...\n    App-->>authentik: ← Redirected to authentik\n    Note over authentik: User chooses \"Google Workspace\"\n    authentik-->>Google: Redirect to Google →\n    Note over Google: Authenticate with email and password\n    Google-->>authentik: ← Redirect to authentik\n    authentik-->>App: Redirect to app →\n```\n\n----------------------------------------\n\nTITLE: Starting Authentik with Docker Compose\nDESCRIPTION: Commands to pull the latest Docker images and start the Authentik services in detached mode.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/docker-compose.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring EspoCRM JSON Web Key Set Endpoint in EspoCRM\nDESCRIPTION: This is the URL on the authentik server that provides the JSON Web Key Set (JWKS). EspoCRM uses the public keys from this set to verify the signature of the ID tokens issued by authentik, ensuring their integrity and authenticity. This is configured in EspoCRM.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/espocrm/index.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://<em>authentik.company</em>/application/o/<em>your-application-slug</em>/jwks\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC in Vault with Provider Discovery URL and Client Credentials\nDESCRIPTION: Sets up Vault's OIDC auth method with the discovery URL, client ID, secret, and default role. The discovery URL points to the OpenID issuer hosted by authentik, and the client credentials are obtained from the authentik application configuration. This establishes the connection between Vault and authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hashicorp-vault/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/oidc/config \\\n         oidc_discovery_url=\"https://authentik.company/application/o/vault-slug/\" \\\n         oidc_client_id=\"Client ID\" \\\n         oidc_client_secret=\"Client Secret\" \\\n         default_role=\"reader\"\n```\n\n----------------------------------------\n\nTITLE: Updating `PATCH /policies/event_matcher/{policy_uuid}/` Request/Response (JSON)\nDESCRIPTION: Documents changes to `action`, `app`, and `model` properties in both the request and `200 OK` response JSON bodies for the `PATCH /policies/event_matcher/{policy_uuid}/` endpoint. Updates include property descriptions and enum values for `app` and `model`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n###### Request:\nChanged content type : `application/json`\n- Changed property `action` (string)\n    > Match created events with this action type. When left empty, all action types will be matched.\n- Changed property `app` (string)\n    > Match events created by selected application. When left empty, all applications are matched.\n    Added enum values:\n    - `authentik.sources.scim`\n    - `authentik.enterprise.stages.source`\n- Changed property `model` (string)\n    > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n    Added enum values:\n    - `authentik_sources_scim.scimsource`\n    - `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage`\n    - `authentik_stages_source.sourcestage`\n    Removed enum value:\n    - `authentik_stages_authenticator_webauthn.authenticatewebauthnstage`\n\n###### Return Type:\nChanged response : **200 OK**\n- Changed content type : `application/json`\n    - Changed property `action` (string)\n        > Match created events with this action type. When left empty, all action types will be matched.\n    - Changed property `app` (string)\n        > Match events created by selected application. When left empty, all applications are matched.\n        Added enum values:\n        - `authentik.sources.scim`\n        - `authentik.enterprise.stages.source`\n    - Changed property `model` (string)\n        > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n        Added enum values:\n        - `authentik_sources_scim.scimsource`\n        - `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage`\n        - `authentik_stages_source.sourcestage`\n        Removed enum value:\n        - `authentik_stages_authenticator_webauthn.authenticatewebauthnstage`\n```\n\n----------------------------------------\n\nTITLE: Logging in to Vault via OIDC with the 'reader' Role\nDESCRIPTION: Performs an OIDC login to Vault using the 'reader' role, allowing access based on the configured OIDC provider and role setup. This is the final step for user authentication into Vault via authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hashicorp-vault/index.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nvault login -method=oidc role=\"reader\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Group Sync for OAuth/SAML Sources in Python\nDESCRIPTION: Python property mapping expression used to prevent default group synchronization for OAuth and SAML sources in authentik 2024.8. Assigning this mapping as a user property mapping on the source and returning an empty list for the `groups` key disables this behavior.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"groups\": [],\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Canonical ID of a Vault Group\nDESCRIPTION: Lists external group identities to retrieve the canonical ID necessary for linking an external group with an OIDC provider. This ID is used in group alias mappings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hashicorp-vault/index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvault list identity/group/id\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Helm chart for authentik SSO\nDESCRIPTION: YAML configuration for Grafana Helm chart values to integrate with authentik using OAuth2, including authentication endpoints, credential settings, and role mapping expressions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/grafana/index.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngrafana.ini:\n    auth:\n        signout_redirect_url: \"https://authentik.company/application/o/<Slug of the application from above>/end-session/\"\n        oauth_auto_login: true\n    auth.generic_oauth:\n        name: authentik\n        enabled: true\n        client_id: \"<Client ID from above>\"\n        client_secret: \"<Client Secret from above>\"\n        scopes: \"openid profile email\"\n        auth_url: \"https://authentik.company/application/o/authorize/\"\n        token_url: \"https://authentik.company/application/o/token/\"\n        api_url: \"https://authentik.company/application/o/userinfo/\"\n        # Optionally map user groups to Grafana roles\n        role_attribute_path: contains(groups, 'Grafana Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: authentik Architecture Diagram\nDESCRIPTION: This diagram illustrates the architecture of authentik, showing the relationships between various components such as LDAP sources, OAuth/SAML sources, the authentik database, providers, applications, the policy engine, and outposts. It visualizes how these components interact to manage authentication and authorization.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/core/terminology.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    source_ldap((LDAP Source)) <-->|Synchronizes| datasource_ldap[\"FreeIPA/\n    Active Directory\"]\n    datasource_oauth1(Twitter) --> source_oauth((OAuth/SAML\\nSource))\n    datasource_oauth2(GitHub) --> source_oauth((OAuth/SAML\\nSource))\n    source_oauth --> authentik_db(authentik Database)\n    source_ldap --> authentik_db(authentik Database)\n\n    app_sso(Gitlab) --> authentik_provider[Provider]\n    authentik_provider --> authentik_db\n    authentik_provider --> authentik_app[\"Application\n    (Stores permissions and UI details)\"]\n    authentik_app --> authentik_policy_engine[Policy Engine]\n    authentik_policy_engine --> authentik_db\n\n    app_ldap(\"Applications that only\n    support LDAP (e.g. pfSense)\") --> authentik_outpost_ldap[LDAP Outpost]\n    app_proxy(\"Applications that don't\n    support any SSO (e.g. Plex)\") --> authentik_outpost_proxy[Proxy Outpost]\n    authentik_outpost_ldap --> authentik_outposts[Outposts]\n    authentik_outpost_proxy --> authentik_outposts[Outposts]\n    authentik_outposts --> authentik_provider\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Forward Authentication (apacheconf)\nDESCRIPTION: This snippet provides a Caddyfile configuration using `apacheconf` syntax to set up forward authentication. It routes outpost-specific paths to the outpost and forwards authentication requests for other paths, copying necessary headers from the outpost response. It also includes an example reverse proxy for the actual application. Dependencies include Caddy server and an authentik outpost. Expected input is an incoming HTTP request, output is either a forwarded request to the application (if authenticated) or a redirect/error from the outpost.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_caddy_standalone.md#_snippet_0\n\nLANGUAGE: apacheconf\nCODE:\n```\napp.company {\n    # directive execution order is only as stated if enclosed with route.\n    route {\n        # always forward outpost path to actual outpost\n        reverse_proxy /outpost.goauthentik.io/* http://outpost.company:9000\n\n        # forward authentication to outpost\n        forward_auth http://outpost.company:9000 {\n            uri /outpost.goauthentik.io/auth/caddy\n\n            # capitalization of the headers is important, otherwise they will be empty\n            copy_headers X-Authentik-Username X-Authentik-Groups X-Authentik-Entitlements X-Authentik-Email X-Authentik-Name X-Authentik-Uid X-Authentik-Jwt X-Authentik-Meta-Jwks X-Authentik-Meta-Outpost X-Authentik-Meta-Provider X-Authentik-Meta-App X-Authentik-Meta-Version\n\n            # optional, in this config trust all private ranges, should probably be set to the outposts IP\n            trusted_proxies private_ranges\n        }\n\n        # actual site configuration below, for example\n        reverse_proxy localhost:1234\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring - authentik SAML - Issuer URL\nDESCRIPTION: This URL is configured as the Issuer in the authentik SAML provider settings. It identifies authentik as the Identity Provider to GlobalProtect (the Service Provider). The URL includes the authentik FQDN and the specific application slug configured for this integration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/globalprotect/index.md#_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\nhttps://<em>authentik.company</em>/application/saml/<em>application-slug</em>/sso/binding/redirect/\n```\n\n----------------------------------------\n\nTITLE: Scaling authentik Deployments to Zero Replicas Using kubectl in shell\nDESCRIPTION: This snippet scales down the authentik-server and authentik-worker deployments to zero replicas using the kubectl command-line tool, initiating downtime necessary for a safe database migration. Requires access to the Kubernetes cluster and appropriate permissions. No parameters beyond deployment names are needed; outputs are status messages from kubectl. Ensure authentik is not in use before executing.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_kubernetes.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl scale deploy --replicas 0 authentik-server\nkubectl scale deploy --replicas 0 authentik-worker\n```\n\n----------------------------------------\n\nTITLE: Comparing Client IP Address with Network in Authentik Policy (Python)\nDESCRIPTION: Example for checking if the client's IP address is within a specific network or is private, leveraging Python's ipaddress capabilities. Dependencies: ak_client_ip variable and ip_network/ip_address from Python's standard library. Input: ak_client_ip. Output: Boolean. The snippet shows both CIDR network inclusion and property-based comparison.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreturn ak_client_ip in ip_network('10.0.0.0/24')\n# or\nreturn ak_client_ip.is_private\n```\n\n----------------------------------------\n\nTITLE: API Schema for PUT /stages/authenticator/sms/{stage_uuid}/\nDESCRIPTION: Defines the schema for updating an SMS authenticator stage with new properties such as provider, auth_type, and flow_set. The request body must include a JSON object matching this structure. Used to modify stage configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Response and Request Structure for User Login Stage\nDESCRIPTION: Defines the JSON structure for the user login stage, including properties for network and GeoIP bindings, as well as flow set configurations. Used for both retrieving and updating login stage settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"network_binding\": \"string\",\n      \"geoip_binding\": \"string\",\n      \"flow_set\": [\n        {\n          \"designation\": \"string\",\n          \"denied_action\": \"string\",\n          \"policy_engine_mode\": \"string\",\n          \"layout\": \"string\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring authentik provider for Grafana using Terraform\nDESCRIPTION: Terraform configuration to set up an OAuth2 provider in authentik for Grafana integration, including client configuration, authorization flow, redirect URIs, and necessary group resources for role-based access control.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/grafana/index.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"authentik_flow\" \"default-provider-authorization-implicit-consent\" {\n  slug = \"default-provider-authorization-implicit-consent\"\n}\n\ndata \"authentik_property_mapping_provider_scope\" \"scope-email\" {\n  name = \"authentik default OAuth Mapping: OpenID 'email'\"\n}\n\ndata \"authentik_property_mapping_provider_scope\" \"scope-profile\" {\n  name = \"authentik default OAuth Mapping: OpenID 'profile'\"\n}\n\ndata \"authentik_property_mapping_provider_scope\" \"scope-openid\" {\n  name = \"authentik default OAuth Mapping: OpenID 'openid'\"\n}\n\nresource \"authentik_provider_oauth2\" \"grafana\" {\n  name          = \"Grafana\"\n  #  Required. You can use the output of:\n  #     $ openssl rand -hex 16\n  client_id     = \"my_client_id\"\n\n  # Optional: will be generated if not provided\n  # client_secret = \"my_client_secret\"\n\n  authorization_flow  = data.authentik_flow.default-provider-authorization-implicit-consent.id\n\n  redirect_uris = [\"https://grafana.company/login/generic_oauth\"]\n\n  property_mappings = [\n    data.authentik_property_mapping_provider_scope.scope-email.id,\n    data.authentik_property_mapping_provider_scope.scope-profile.id,\n    data.authentik_property_mapping_provider_scope.scope-openid.id,\n  ]\n}\n\nresource \"authentik_application\" \"grafana\" {\n  name              = \"Grafana\"\n  slug              = \"grafana\"\n  protocol_provider = authentik_provider_oauth2.grafana.id\n}\n\nresource \"authentik_group\" \"grafana_admins\" {\n  name    = \"Grafana Admins\"\n}\n\nresource \"authentik_group\" \"grafana_editors\" {\n  name    = \"Grafana Editors\"\n}\n\nresource \"authentik_group\" \"grafana_viewers\" {\n  name    = \"Grafana Viewers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for PowerDNS-Admin SAML Integration\nDESCRIPTION: This snippet provides a list of environment variables to enable SAML authentication in PowerDNS-Admin using Docker. It includes settings for SAML endpoints, attributes, and certificate paths, which must match the Authentik configuration for successful integration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/powerdns-admin/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nSAML_ENABLED=True\nSAML_PATH=os.path.join(os.path.dirname(file), 'saml')\nSAML_METADATA_URL=https://authentik.company/application/saml/<application-slug>/metadata/\nSAML_METADATA_CACHE_LIFETIME=1\nSAML_LOGOUT_URL=https://authentik.company/application/saml/<application-slug>/slo/binding/redirect/\nSAML_SP_ENTITY_ID=pdns-admin\nSAML_SP_CONTACT_NAME=me\nSAML_SP_CONTACT_MAIL=me\nSAML_NAMEID_FORMAT=urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\nSAML_ATTRIBUTE_USERNAME=http://schemas.goauthentik.io/2021/02/saml/username\nSAML_ATTRIBUTE_NAME=http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\nSAML_ATTRIBUTE_EMAIL=http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\nSAML_ATTRIBUTE_GROUP=http://schemas.xmlsoap.org/claims/Group\nSAML_GROUP_ADMIN_NAME=<admin-group-name>\nSAML_SIGN_REQUEST='False'\nSAML_ASSERTION_ENCRYPTED=False\nSAML_WANT_MESSAGE_SIGNED=False\nSAML_CERT=/saml.crt\n```\n\n----------------------------------------\n\nTITLE: Installing mod_auth_openidc\nDESCRIPTION: This command installs the mod_auth_openidc package, a third-party module required for OpenID Connect authentication with Apache2.  It downloads the package from a specified location, downloads the latest release, and then uses the apt package manager to install it. This module enables Apache2 to authenticate users against an OpenID Connect provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/observium/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt install ./libapache2-mod-auth-openidc_2.4.15.7-1.bookworm_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Running Authentik Email Test via Kubernetes Exec in Shell\nDESCRIPTION: This shell command executes the email test command in the Authentik worker container within a Kubernetes cluster. It requires access to the Kubernetes cluster and the 'kubectl' CLI configured to communicate with the cluster. The command enables testing email sending in container orchestration environments, targeting the 'authentik-worker' deployment and 'worker' container specifically.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/emails.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deployment/authentik-worker -c worker -- ak test_email [...]\n```\n\n----------------------------------------\n\nTITLE: Creating Traefik Middleware for Authentik (YAML)\nDESCRIPTION: Defines a Traefik Middleware Kubernetes custom resource that uses the ForwardAuth mechanism to proxy authentication requests to the Authentik outpost service. Dependencies include a running Traefik instance with CRD provider and the Authentik outpost deployed in the cluster. Key parameters are the forwardAuth address that points to the internal Authentik endpoint and a list of response headers that Traefik should propagate after authentication. The apiVersion must match your installed Traefik version; older versions (pre-3.0) require 'traefik.containo.us/v1alpha1', and the address must use the service endpoint, not the Ingress.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_traefik_ingress.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n    name: authentik\nspec:\n    forwardAuth:\n        # This address should point to the cluster endpoint provided by the kubernetes service, not the Ingress.\n        address: http://outpost.company:9000/outpost.goauthentik.io/auth/traefik\n        trustForwardHeader: true\n        authResponseHeaders:\n            - X-authentik-username\n            - X-authentik-groups\n            - X-authentik-entitlements\n            - X-authentik-email\n            - X-authentik-name\n            - X-authentik-uid\n            - X-authentik-jwt\n            - X-authentik-meta-jwks\n            - X-authentik-meta-outpost\n            - X-authentik-meta-provider\n            - X-authentik-meta-app\n            - X-authentik-meta-version\n```\n\n----------------------------------------\n\nTITLE: Documenting PATCH /policies/bindings/ Parameter Changes\nDESCRIPTION: This describes changes for the `PATCH` /policies/bindings/{policy_binding_uuid}/ endpoint. The response returns a 200 OK with content type `application/json`. The `user_obj` property has changed, specifically, a new `type` property was added with several string values, describing different user types: `internal`, `external`, `service_account`, and `internal_service_account`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Streaming Logs in Real-Time for Docker and Kubernetes\nDESCRIPTION: Commands to stream logs in real-time using `-f` or `--follow`. Keeps the log output visible until manually terminated, suitable for live monitoring.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/logs.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker logs <container_name_or_id> -f\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl logs -f <pod_name>\n```\n\n----------------------------------------\n\nTITLE: Generating SPNEGO Kerberos Principal and Keytab\nDESCRIPTION: This snippet creates a Kerberos principal specifically for SPNEGO authentication, using the `HTTP` service prefix and the authentik instance's FQDN. It generates a keytab file, which is then base64-encoded for use in authentik's SPNEGO settings. This is crucial for enabling browser-based authentication via Kerberos.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/protocols/kerberos/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kadmin\n> add_principal HTTP/authentik.company@REALM.COMPANY\n> ktadd -k /tmp/authentik.keytab HTTP/authentik.company@REALM.COMPANY\n> exit\n$ cat /tmp/authentik.keytab | base64\n$ rm /tmp/authentik.keytab\n```\n\n----------------------------------------\n\nTITLE: Websocket Message Type: message (JSON)\nDESCRIPTION: Defines the structure of the 'message' type sent over the websocket to web clients. It includes fields for message type, level (error, warning, success, info), tags, and the actual message content. Authentication is session-based, requiring the 'Cookie' header.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/api/websocket.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message_type\": \"message\",\n    \"level\": \"error\" | \"warning\" | \"success\" | \"info\",\n    \"tags\": \"\",\n    \"message\": \"a message\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Ingress for Authentik Outpost in YAML\nDESCRIPTION: Defines a Kubernetes Ingress resource named \"authentik-outpost\" that routes requests to the Authentik outpost service. It specifies the host and path prefix to handle authentication requests and the sign-in flow by forwarding traffic to the internal service \"ak-outpost-example-outpost\" on port 9000. This snippet supports referencing an ExternalName service for external Outpost configurations. It depends on Kubernetes networking API v1 and requires cluster services to be appropriately named and exposed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_nginx_ingress.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n    name: authentik-outpost\nspec:\n    rules:\n        - host: app.company\n          http:\n              paths:\n                  - path: /outpost.goauthentik.io\n                    pathType: Prefix\n                    backend:\n                        # Or, to use an external Outpost, create an ExternalName service and reference that here.\n                        # See https://kubernetes.io/docs/concepts/services-networking/service/#externalname\n                        service:\n                            name: ak-outpost-example-outpost\n                            port:\n                                number: 9000\n```\n\n----------------------------------------\n\nTITLE: Modifying FreeIPA LDAP Configuration\nDESCRIPTION: This snippet modifies the FreeIPA LDAP configuration to allow password resets without requiring users to change their password on first login. It uses ldapmodify to add the authentik bind user to the passSyncManagersDNs attribute of the ipa_pwd_extop plugin.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/directory-sync/freeipa/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ldapmodify -x -D \"cn=Directory Manager\" -W -h ipa1.freeipa.company -p 389\n\ndn: cn=ipa_pwd_extop,cn=plugins,cn=config\nchangetype: modify\nadd: passSyncManagersDNs\npassSyncManagersDNs: uid=svc_authentik,cn=users,cn=accounts,dc=freeipa,dc=company\n```\n\n----------------------------------------\n\nTITLE: Filtering Events with Expression Policy in Python\nDESCRIPTION: This snippet demonstrates how to use a Python expression policy within Authentik's Policy Engine to filter events based on the client IP address. It checks if the 'event' key exists in the request context and returns False if not. Then, it verifies whether the client's IP address falls within a specified IP network range. Required dependencies include the availability of 'ip_address' and 'ip_network' functions (typically from the ipaddress module). The input is the request context containing event data, and the output is a boolean indicating whether the event matches the filter criteria.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/events/notifications.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif \"event\" not in request.context:\n    return False\n\nreturn ip_address(request.context[\"event\"].client_ip) in ip_network('192.0.2.0/24')\n```\n\n----------------------------------------\n\nTITLE: Configure Kimai SAML settings in local.yaml\nDESCRIPTION: This YAML snippet configures Kimai to use authentik as a SAML provider for authentication. It defines the IdP's entity ID, SSO and SLO URLs, certificate, and SP settings. The snippet also includes role mapping, security settings, and contact information. Placeholders need to be replaced with actual values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/kimai/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Optionally add this for docker debug-logging\n# monolog:\n#   handlers:\n#     main:\n#       path: php://stderr\n\nkimai:\n    saml:\n        activate: true\n        title: Login with authentik\n        mapping:\n            - { saml: $http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress, kimai: email, }\n            - { saml: $http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name, kimai: alias, }\n        roles:\n            attribute: http://schemas.xmlsoap.org/claims/Group\n            mapping:\n                # Insert your roles here (ROLE_USER is added automatically)\n                - { saml: admin.group, kimai: ROLE_ADMIN }\n        connection:\n            # You SAML provider\n            # Your authentik instance, replace https://authentik.company with your authentik URL\n            idp:\n                entityId: \"https://authentik.company/\"\n                singleSignOnService:\n                    url: \"https://authentik.company/application/saml/<application-slug>/sso/binding/redirect/\"\n                    binding: \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\n                # the \"single logout\" feature was not yet tested, if you want to help, please let me know!\n                singleLogoutService:\n                    url: \"https://authentik.company/application/saml/<application-slug>/slo/binding/redirect/\"\n                    binding: \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\n                # Signing certificate from *Advanced protocol settings*\n                x509cert: \"XXXXXXXXXXXXXXXXXXXXXXXXXXX==\"\n            # Service Provider Data that we are deploying.\n            # Your Kimai instance, replace https://kimai.company with your Kimai URL\n            sp:\n                entityId: \"https://kimai.company/\"\n                assertionConsumerService:\n                    url: \"https://kimai.company/auth/saml/acs\"\n                    binding: \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n                singleLogoutService:\n                    url: \"https://kimai.company/auth/saml/logout\"\n                    binding: \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\n                #privateKey: ''\n            # only set baseurl, if auto-detection doesn't work\n            baseurl: \"https://kimai.company/auth/saml/\"\n            strict: false\n            debug: true\n            security:\n                nameIdEncrypted: false\n                authnRequestsSigned: false\n                logoutRequestSigned: false\n                logoutResponseSigned: false\n                wantMessagesSigned: false\n                wantAssertionsSigned: false\n                wantNameIdEncrypted: false\n                requestedAuthnContext: true\n                signMetadata: false\n                wantXMLValidation: true\n                signatureAlgorithm: \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"\n                digestAlgorithm: \"http://www.w3.org/2001/04/xmlenc#sha256\"\n            contactPerson:\n                technical:\n                    givenName: \"Kimai Admin\"\n                    emailAddress: \"admin@example.com\"\n            organization:\n                en:\n                    name: \"Kimai\"\n                    displayname: \"Kimai\"\n                    url: \"https://kimai.company\"\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Strings with !Format (YAML)\nDESCRIPTION: This snippet illustrates the '!Format' tag, which uses Python's % string formatting. The first argument is the format string, and additional arguments supply the values for formatting placeholders. Both literals and tag-derived values can be used as arguments.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: !Format [my-policy-%s, !Context instance_name]\n```\n\n----------------------------------------\n\nTITLE: Configuring FortiGate SAML SP via CLI (FortiOS)\nDESCRIPTION: This FortiOS CLI configuration block sets up FortiGate as a SAML Service Provider (SP) named 'authentik-sso'. It defines the SP's entity ID, SSO/SLO URLs, required certificates (FortiGate's own cert and the IdP's cert), IdP details (entity ID, SSO/SLO URLs), attribute mappings for username and group, and specifies SHA256 for digest and signature methods. Placeholders like 'your-fortigate-cert', 'fortigate.company', 'authentik.company', and 'your-authentik-cert' must be replaced with actual values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/fortigate-ssl/index.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig user saml\n    edit \"authentik-sso\"\n        set cert \"your-fortigate-cert\"\n        set entity-id \"http://fortigate.company/remote/saml/metadata/\"\n        set single-sign-on-url \"https://fortigate.company/remote/saml/login\"\n        set single-logout-url \"https://fortigate.company/remote/saml/logout\"\n        set idp-entity-id \"https://authentik.company\"\n        set idp-single-sign-on-url \"https://authentik.company/application/saml/fortigate-sslvpn/sso/binding/redirect/\"\n        set idp-single-logout-url \"https://authentik.company/application/saml/fortigate-sslvpn/slo/binding/redirect/\"\n        set idp-cert \"your-authentik-cert\"\n        set user-name \"http://schemas.goauthentik.io/2021/02/saml/username\"\n        set group-name \"http://schemas.xmlsoap.org/claims/Group\"\n        set digest-method sha256\n    next\nend\n```\n\n----------------------------------------\n\nTITLE: GET /providers/google_workspace_groups/{id}/ - 200 OK\nDESCRIPTION: This details changes to the response of the GET endpoint for Google Workspace Groups. The response now contains `application/json` and includes modifications to the `group_obj` property, particularly changing the `name` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /providers/google_workspace_groups/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Simplified Group Serializer for user's groups\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Enable OAuth over HTTP in SharePoint\nDESCRIPTION: This PowerShell script enables OAuth authentication over HTTP in SharePoint. This is useful in SSL offloading scenarios. The script updates the AllowOAuthOverHttp property of the SPSecurityTokenServiceConfig. No specific dependencies beyond the SharePoint PowerShell snap-in are required.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/sharepoint-se/index.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PSSnapin microsoft.sharepoint.powershell\n$c = get-spsecuritytokenserviceconfig\n$c.AllowOAuthOverHttp = $true\n$c.update()\n```\n\n----------------------------------------\n\nTITLE: Configuring Miniflux OAuth2/OpenID Connect Environment Variables in Shell\nDESCRIPTION: This shell snippet lists the environment variables required to configure Miniflux to authenticate against authentik using OAuth2/OpenID Connect. It includes specifying the provider type, client credentials, redirect URL, OIDC discovery endpoint, and user creation setting. These variables must be set in the Miniflux environment before restarting the service to enable Single Sign-On functionality. The snippet requires the client ID, client secret, and application slug provided by authentik during provider setup.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/miniflux/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nOAUTH2_PROVIDER=oidc\nOAUTH2_CLIENT_ID=<Client ID from authentik>\nOAUTH2_CLIENT_SECRET=<Client Secret from authentik>\nOAUTH2_REDIRECT_URL=https://miniflux.company/oauth2/oidc/callback\nOAUTH2_OIDC_DISCOVERY_ENDPOINT=https://authentik.company</em>/application/o/<application slug>/\nOAUTH2_USER_CREATION=1\n```\n\n----------------------------------------\n\nTITLE: Visualizing OAuth 2.0 Authorization Code Flow with Mermaid\nDESCRIPTION: This Mermaid code snippet creates a sequence diagram that illustrates the OAuth 2.0 Authorization Code flow between a user, a Relying Party (RP), and an OpenID Provider (OP). It depicts the interactions from user access, authorization request and redirect, code exchange, and final login response. The snippet requires Mermaid.js for rendering and is designed for educational and architectural documentation purposes. Inputs are the participant names and message flows defined in Mermaid's sequence diagram DSL, and the output is a rendered process diagram. No external API dependencies are needed, but rendering depends on Mermaid support in the documentation tool.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/oauth2/index.mdx#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nsequenceDiagram\n    participant user as User\n    participant rp as RP (Relying Party)\n    participant op as OP (OpenID Provider)\n\n    user->>rp: User accesses application\n    rp->>user: RP prepares authorization request & redirects user to OP\n\n    user->>op: User authentication & authorization occurs\n    op->>rp: Redirect back to the RP with an authorization code\n\n    rect\n\n        rp->>op: Exchange authorization code\n        op->>rp: RP receives Access token (optionally Refresh Token)\n    end\n\n    rp->>user: User is logged in\n```\n\n----------------------------------------\n\nTITLE: Configuring Jellyfin LDAP Plugin Settings\nDESCRIPTION: Configuration key-value pairs for setting up the LDAP Authentication Plugin in Jellyfin to connect to an authentik LDAP outpost. Requires placeholders like `ldap.company`, `dc=company,dc=com`, and `ldap_bind_user` to be replaced with actual values. SSL/TLS verification depends on the certificate used.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/jellyfin/index.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLDAP Server: ldap.company\nLDAP Port: 636\nSecure LDAP: Checked\nStartTLS: Unchecked\nSkip SSL/TLS Verification: Checked (if using self-signed cert), Unchecked (if using trusted CA cert)\nAllow password change: Unchecked\nPassword Reset URL: Empty\nLDAP Bind User: cn=ldap_bind_user,ou=users,dc=company,dc=com\nLDAP Bind User Password: [Password or Token]\nLDAP Base DN for Searches: dc=company,dc=com\nLDAP User Filter: (objectClass=user)  OR  (memberOf=cn=jellyfin_users,ou=groups,dc=company,dc=com)\nLDAP Admin Base DN: [Optional - Blank]\nLDAP Admin Filter: [Optional - Blank]\nLDAP Attributes: uid, cn, mail, displayName\nEnable case Insensitive Username: Checked\nEnabled User Creation: Checked\nLDAP Name Attribute: cn\nLDAP Password Attribute: userPassword\nLibrary Access: [Set as desired]\n```\n\n----------------------------------------\n\nTITLE: Configure OpenSearch Dashboards YAML\nDESCRIPTION: This YAML snippet configures the `opensearch_dashboards.yml` file to enable SAML authentication, defines the allowlist URLs and disables session keepalive.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nopensearch_security.auth.type: \"saml\"\nserver.xsrf.allowlist:\n    [\n        \"/_opendistro/_security/saml/acs\",\n        \"/_opendistro/_security/saml/logout\",\n        \"/_opendistro/_security/saml/acs/idpinitiated\",\n    ]\nopensearch_security.session.keepalive: false\n```\n\n----------------------------------------\n\nTITLE: Adding Custom RADIUS Attribute in Python Mapping\nDESCRIPTION: This Python snippet demonstrates how to define a custom RADIUS attribute (Cisco AV-Pair) and add it to the response packet within an authentik RADIUS property mapping script. It uses the `define_attribute` helper function to register the attribute definition and then assigns a value to the attribute in the `packet` dictionary. This requires authentik version 2024.8 or later.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/radius/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndefine_attribute(\n    vendor_code=9,\n    vendor_name=\"Cisco\",\n    attribute_name=\"AV-Pair\",\n    attribute_code=1,\n    attribute_type=\"string\",\n)\npacket[\"Cisco-AV-Pair\"] = \"shell:priv-lvl=15\"\nreturn packet\n```\n\n----------------------------------------\n\nTITLE: Running Pre-Pull Request Checks using Make\nDESCRIPTION: Executes a sequence of Make targets (`lint`, `gen`, `web`) before submitting a pull request. This ensures the code is properly formatted, linters pass, and any generated artifacts like API documentation or types are up-to-date.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmake lint   # Ensures your code is well-formatted\nmake gen    # Generates an updated OpenAPI Docs for any changes you make\nmake web    # Formats the front-end code\n```\n\n----------------------------------------\n\nTITLE: Mapping user email to preferred_username (Expression)\nDESCRIPTION: This expression is used in an authentik Scope Mapping to extract the authenticated user's email address (`request.user.email`) and map it to the `preferred_username` claim within the requested `profile` scope. This allows the connected application (engomo) to receive the user's email as their preferred username.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/engomo/index.mdx#_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\nreturn {\"preferred_username\": request.user.email}\n```\n\n----------------------------------------\n\nTITLE: Configuring External GeoIP Updates in Docker Compose\nDESCRIPTION: Sets up automatic external updates for GeoIP databases in a Docker Compose environment using a `docker-compose.override.yml` file. It defines a `geoipupdate` service using the `maxmindinc/geoipupdate` image, configures shared volumes for the database files (`geoip`), and sets environment variables for the update process, including MaxMind account ID and license key.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/geoip.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    server:\n        volumes:\n            - geoip:/geoip\n    worker:\n        volumes:\n            - geoip:/geoip\n    geoipupdate:\n        image: \"maxmindinc/geoipupdate:latest\"\n        volumes:\n            - \"geoip:/usr/share/GeoIP\"\n        environment:\n            GEOIPUPDATE_EDITION_IDS: \"GeoLite2-City GeoLite2-ASN\"\n            GEOIPUPDATE_FREQUENCY: \"8\"\n            GEOIPUPDATE_ACCOUNT_ID: \"*your account ID*\"\n            GEOIPUPDATE_LICENSE_KEY: \"*your license key*\"\nvolumes:\n    geoip:\n        driver: local\n```\n\n----------------------------------------\n\nTITLE: Mounting Custom CSS with Docker Compose YAML\nDESCRIPTION: This YAML snippet for a `docker-compose.override.yml` file demonstrates how to mount a local custom CSS file into the authentik `server` service. It creates a volume binding from a specified local path (e.g., `./my-css-file.css`) to the target path `/web/dist/custom.css` inside the container. This requires Docker Compose and the custom CSS file to be present on the host.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/interfaces/_global/customcss.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    server:\n        volumes:\n            - ./my-css-file.css:/web/dist/custom.css\n```\n\n----------------------------------------\n\nTITLE: Restoring Database from SQL Backup\nDESCRIPTION: Command to restore the Authentik database from the SQL backup file into the new PostgreSQL 16 container.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncat upgrade_backup_12.sql | docker compose exec -T postgresql psql -U authentik\n```\n\n----------------------------------------\n\nTITLE: Limiting Access Based on JWT Claims Using Expression Policy - authentik - Python\nDESCRIPTION: This Python code snippet, intended for use within authentik's expression policies, demonstrates how to restrict access to certain operations based on the 'iss' (issuer) claim within the JWT presented for OAuth authentication. It requires that request.context[\"oauth_jwt\"] be available (i.e., during an authenticated OAuth2 request), and the condition will succeed only if the issuer matches the expected value. This approach enables fine-grained access control based on JWT claims and can be customized for other attributes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/oauth2/client_credentials.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn request.context[\"oauth_jwt\"][\"iss\"] == \"https://my.issuer\"\n```\n\n----------------------------------------\n\nTITLE: Partially Updating WebAuthn Authenticator Stage via PATCH\nDESCRIPTION: Details changes for the PATCH request and response when partially updating a WebAuthn Authenticator Stage. Both request and response expect/return `application/json`. The change involves the `layout` property within the `flow_set` array items.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nPATCH /stages/authenticator/webauthn/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n// Request/Response Body (application/json)\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\"\n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Partially Updating TOTP Authenticator Stage via PATCH\nDESCRIPTION: Details changes for the PATCH request and response when partially updating a TOTP Authenticator Stage. Both request and response expect/return `application/json`. Changes involve the `digits` property (now a string: '6' or '8') and the `layout` property within the `flow_set` array items.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nPATCH /stages/authenticator/totp/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n// Request/Response Body (application/json)\n{\n  \"digits\": \"6 | 8\",\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\"\n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up NetBox Docker environment variables for authentik integration\nDESCRIPTION: Required environment variables for configuring NetBox Docker to use authentik as an OIDC authentication provider. Includes remote authentication settings, client credentials, and logout redirect URL.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/netbox/index.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n# Enable python-social-auth\nREMOTE_AUTH_ENABLED='true'\nREMOTE_AUTH_BACKEND='social_core.backends.open_id_connect.OpenIdConnectAuth'\n\n# python-social-auth config\nSOCIAL_AUTH_OIDC_OIDC_ENDPOINT='https://authentik.company/application/o/<Application slug>/'\nSOCIAL_AUTH_OIDC_KEY='<Client ID>'\nSOCIAL_AUTH_OIDC_SECRET='<Client Secret>'\nSOCIAL_AUTH_OIDC_SCOPE=openid profile email roles\nLOGOUT_REDIRECT_URL='https://authentik.company/application/o/<Application slug>/end-session/'\n```\n\n----------------------------------------\n\nTITLE: Map authentik Groups to ArgoCD Roles (argocd-rbac-cm)\nDESCRIPTION: This snippet maps authentik groups (`ArgoCD Admins`, `ArgoCD Viewers`) to ArgoCD roles (`admin`, `readonly`) in the `argocd-rbac-cm` ConfigMap.  This configuration grants administrative or read-only access to ArgoCD based on group membership in authentik. Ensure groups have already been created within authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/argocd/index.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npolicy.csv: |\n    g, ArgoCD Admins, role:admin\n    g, ArgoCD Viewers, role:readonly\n```\n\n----------------------------------------\n\nTITLE: API Request and Response for SCIM Property Mappings (JSON)\nDESCRIPTION: Outlines the JSON data for creating and listing SCIM property mappings, highlighting the 'managed' property. Supports consistent object management across SCIM integrations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\"managed\": \"string\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring MeshCentral OIDC Authentication with authentik\nDESCRIPTION: JSON configuration to enable OIDC authentication in MeshCentral using authentik. This snippet needs to be added to the domains section of the MeshCentral config.json file, specifying the authentik issuer URL, client ID, client secret, and enabling new account creation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/meshcentral/index.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"domains\": {\n            \"authStrategies\": {\n                \"oidc\": {\n                    \"issuer\": \"https://authentik.company/application/o/meshcentral/\",\n                    \"clientid\": \"<Client ID>\",\n                    \"clientsecret\": \"<Client Secret>\",\n                    \"newAccounts\": true\n                }\n            },\n```\n\n----------------------------------------\n\nTITLE: Updating Static Authenticator Stage via PATCH\nDESCRIPTION: Details changes for the PATCH request and response when updating a Static Authenticator Setup Stage identified by its UUID. Both request and response bodies now expect/return `application/json` with modifications to the `flow_set` array items, specifically the `layout` property which accepts predefined string values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPATCH /stages/authenticator/static/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\" \n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: List Flattening in Python\nDESCRIPTION: Flattens a list by returning its first element if the list is not empty, None if empty, or the object itself if it's not a list. This is useful for handling data structures where a single element might be wrapped in a list.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuser = list_flatten([\"foo\"])\n# user = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Redirect Current Flow to URL in Authentik Python Policy\nDESCRIPTION: This snippet defines a policy that redirects the current authentication flow to a specified URL. It retrieves the flow plan from the request context and, if available, performs a redirect to 'https://foo.bar'. The policy should be attached to the stage after identification to ensure the redirect occurs at the correct point in the flow. Proper stage binding options, such as 'Evaluate when stage is run', should be enabled for correct execution.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/flow/examples/snippets.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nplan = request.context.get(\"flow_plan\")\nif not plan:\n    return False\nplan.redirect(\"https://foo.bar\")\nreturn False\n```\n\n----------------------------------------\n\nTITLE: Phone Number Validation Expression Policy in Python\nDESCRIPTION: Python expression policy to validate phone numbers in authentik. This example removes whitespace from the input and verifies the phone number starts with a specific region code (+1234).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/authenticator_sms/index.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Trim all whitespace in and around the user input\nphone_number = regex_replace(request.context[\"prompt_data\"][\"phone\"], r'\\s+', '')\n\n# Only allow a specific region code\nif phone_number.startswith(\"+1234\"):\n    return True\nak_message(\"Invalid phone number or missing region code\")\nreturn False\n```\n\n----------------------------------------\n\nTITLE: Mapping FortiGate User Group to SAML via CLI (FortiOS)\nDESCRIPTION: This FortiOS CLI configuration creates a user group named 'sslvpn-users' on the FortiGate. It links this group to the previously configured SAML SP ('authentik-sso') and specifies a rule to match users belonging to the 'FortiGate SSLVPN Users' group received from the authentik IdP via SAML assertion. This allows FortiGate policies to be applied based on authentik group membership.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/fortigate-ssl/index.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig user group\n    edit \"sslvpn-users\"\n        set member \"authentik-sso\"\n        config match\n            edit 1\n                set server-name \"authentik-sso\"\n                set group-name \"FortiGate SSLVPN Users\"\n            next\n        end\n    next\nend\n```\n\n----------------------------------------\n\nTITLE: Fetch User in Python\nDESCRIPTION: Fetches a user object based on the provided filters.  Returns None if no user is found. Useful for retrieving user data within policies.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nother_user = ak_user_by(username=\"other_user\")\n```\n\n----------------------------------------\n\nTITLE: Requesting OAuth2 Token with Externally Issued JWT - authentik - HTTP\nDESCRIPTION: This HTTP request shows how to obtain an authentik-issued access token by authenticating with a JWT issued by an external identity provider. Key parameters are grant_type (client_credentials), client_assertion_type (must be set to jwt-bearer), client_assertion (the JWT to validate), and client_id. You may also use client_secret for the JWT in some scenarios. The JWT is validated against JWKS data configured in authentik, and on success, a new signed access_token is returned.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/oauth2/client_credentials.mdx#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /application/o/token/ HTTP/1.1\nHost: authentik.company\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&\nclient_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&\nclient_assertion=$inputJWT&\nclient_id=application_client_id\n```\n\n----------------------------------------\n\nTITLE: Fixing Permission Issues in authentik Docker Installation\nDESCRIPTION: Shell commands to correct ownership and permissions for media, custom-templates, and certificates directories in authentik's docker-compose installation. These commands change ownership to user and group 1000 and set appropriate read, write, and execute permissions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/image_upload.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown 1000:1000 media/\nsudo chown 1000:1000 custom-templates/\nsudo chmod ug+rwx media/\nsudo chmod ug+rx certs/\n```\n\n----------------------------------------\n\nTITLE: Listing Prompt Stages with Layout Options (GET, JSON) in Authentik\nDESCRIPTION: Illustrates the expected JSON response when retrieving a list of prompt stages, specifically focusing on the representation of the 'results' array and nested 'flow_set' items. Each flow within each result can specify a 'layout' property with well-defined values, allowing clients to tailor interface presentation. Inputs are HTTP GET requests without body; outputs are paginated JSON arrays.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"flow_set\": [\n        {\n          \"layout\": \"sidebar_left\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Modification: `PUT` Invitation Flow\nDESCRIPTION: This snippet describes changes to the response of a PUT request targeting the invitation flow. The response content type is `application/json`. The changes include modification of the `flow_obj` object, which serializes the flow.  The `authentication` property has added values like `require_outpost`. The `layout` property lists different types with different values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Backend Selection in Authentik Proxy Provider (Python)\nDESCRIPTION: This Python snippet shows how to create an expression for an authentik Scope Mapping to dynamically override the backend URL used by the Proxy Provider. It uses an f-string to construct a URL based on the requesting user's username (`request.user.username`), returning it within the required `ak_proxy` dictionary structure under the `backend_override` key. This expression is evaluated upon user login to the application associated with the provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"ak_proxy\": {\n        \"backend_override\": f\"http://foo.bar.baz/{request.user.username}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EspoCRM Authorization Endpoint in EspoCRM\nDESCRIPTION: This is the URL on the authentik server that EspoCRM directs the user's browser to initiate the OpenID Connect authorization code flow. EspoCRM must be configured with this endpoint in its OIDC settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/espocrm/index.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://<em>authentik.company</em>/application/o/authorize\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Passwords Using Command Line\nDESCRIPTION: Provides commands to generate secure passwords for database and cache components, using 'pwgen' and 'openssl' utilities. These passwords are intended to be set in 'values.yaml' for secure deployment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/kubernetes.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npwgen -s 50 1\nopenssl rand 60 | base64 -w 0\n```\n\n----------------------------------------\n\nTITLE: Visualizing Authentik Proxy Authentication Flow\nDESCRIPTION: This Mermaid sequence diagram illustrates the interaction between a user, a reverse proxy, authentik, and the target service during an authentication attempt using the Proxy Provider. It shows the flow for both authenticated and unauthenticated users, including redirection for login.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/index.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant u as User accesses service\n    participant rp as Reverse proxy\n    participant ak as authentik\n    participant s as Service\n\n    u->>rp: Initial request\n    rp->>ak: Checks authentication\n    alt User is authenticated\n        ak ->> rp: Successful response\n        rp ->> s: Initial request is forwarded\n    else User needs to be authenticated\n        ak ->> rp: Redirect to the login page\n        rp ->> u: Redirect is passed to enduser\n    end\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentik Bootstrap Credentials in Helm Values - YAML\nDESCRIPTION: This YAML snippet demonstrates how to set the default admin (akadmin) password and token directly within the Helm values file for Authentik deployments in Kubernetes. No external dependencies are required beyond Helm and a working Kubernetes cluster. Set the 'authentik.bootstrap_token' and 'authentik.bootstrap_password' to initialize authentication on first startup. Inputs are plain string values; outputs are the configured administrator credentials on deployment. This method should only be used for non-production or ephemeral environments as it stores credentials in plain text.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/automated-install.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nauthentik:\n    bootstrap_token: test\n    bootstrap_password: test\n```\n\n----------------------------------------\n\nTITLE: Check Group Membership in Python\nDESCRIPTION: Checks if a user is a member of a group that matches the specified filters.  This is useful for implementing role-based access control. Requires a User object and group filters.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreturn ak_is_group_member(request.user, name=\"test_group\")\n```\n\n----------------------------------------\n\nTITLE: Restarting Paperless-ng Docker Container\nDESCRIPTION: Restarts the Paperless-ng Docker containers using Docker Compose. The `docker compose down` command stops the currently running containers, and `docker compose up -d` restarts them in the background, ensuring the new environment variable configurations are loaded and applied.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/paperless-ng/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose down && docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Property Mappings for User Attributes in authentik\nDESCRIPTION: This set of Python expression snippets defines how user attributes and group memberships are mapped from authentik to phpIPAM via SAML attributes. These mappings extract user display names, emails, admin status, and group affiliations to support automated provisioning and permission assignment in phpIPAM.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/phpipam/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn user.name\n```\n\nLANGUAGE: python\nCODE:\n```\nreturn user.email\n```\n\nLANGUAGE: python\nCODE:\n```\nreturn ak_is_group_member(request.user, name=\"admin-permission-group\")\n```\n\nLANGUAGE: python\nCODE:\n```\nif ak_is_group_member(request.user, name=\"operator-permission-group\"):\n    return \"Operators\"\nelif ak_is_group_member(request.user, name=\"guest-permission-group\"):\n    return \"Guests\"\n```\n\nLANGUAGE: python\nCODE:\n```\nif ak_is_group_member(request.user, name=\"operator-permission-group\"):\n    return \"*:2\"\nelif ak_is_group_member(request.user, name=\"guest-permission-group\"):\n    return \"*:1\"\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for User Logout Stage in JSON\nDESCRIPTION: Outlines the JSON format for the GET response of the user logout stage, primarily containing 'results' with 'flow_set' defining the layout options. It details how the layout configuration is serialized when retrieving stage details.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{ \"results\": [ { \"flow_set\": [ { \"layout\": \"stacked\" } ] } ] }\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration Changes with Kubernetes Helm\nDESCRIPTION: Commands to update and apply configuration changes to an authentik deployment in Kubernetes using Helm after editing the values.yaml file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/configuration/configuration.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\nhelm upgrade --install authentik authentik/authentik -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Validating Password Match Using Authentik Python Expression Policy\nDESCRIPTION: This snippet defines an expression policy in Python to ensure two password fields ('password' and 'password_repeat') provided by the user are identical. It fetches both values from the prompt data and compares them. If the values match, it returns True to indicate success; if not, it displays an error message using 'ak_message' and returns False, causing the policy to fail. This approach requires that both password prompts are present and have appropriate 'field_key' attributes in the prompt stage.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/prompt/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif request.context.get('prompt_data').get('password') == request.context.get('prompt_data').get('password_repeat'):\n    return True\n\nak_message(\"Passwords don't match.\")\nreturn False\n```\n\n----------------------------------------\n\nTITLE: Mounting Custom CSS ConfigMap in Kubernetes Helm Values YAML\nDESCRIPTION: This YAML snippet shows the required entries for a Helm chart's `values.yaml` file to mount the previously created `authentik-custom-css` ConfigMap into the authentik pod. It defines a volume that sources the ConfigMap and a corresponding volume mount that exposes the `custom.css` key from the ConfigMap at the required path `/web/dist/custom.css` inside the container.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/interfaces/_global/customcss.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n    - name: custom-css\n      configMap:\n          name: authentik-custom-css\nvolumeMounts:\n    - name: custom-css\n      mountPath: /web/dist/custom.css\n      subPath: custom.css\n```\n\n----------------------------------------\n\nTITLE: Running the authentik Development Server using Make\nDESCRIPTION: Executes the `run` target in the Makefile. This command starts all necessary backend and frontend services for the authentik application in development mode. The application should then be accessible locally.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmake run   # Starts authentik server\n```\n\n----------------------------------------\n\nTITLE: Gitea Helm Chart Configuration\nDESCRIPTION: This YAML snippet configures Gitea's Helm chart for integration with authentik using OAuth2/OpenID Connect.  It defines the OAuth provider settings, including client ID, client secret, auto-discovery URL, icon URL, and scopes. Requires the 'CLIENT_ID_FROM_AUTHENTIK' and 'CLIENT_SECRET_FROM_AUTHENTIK' to be replaced with the correct values obtained during the authentik application/provider creation process.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/gitea/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngitea:\n    oauth:\n        - name: \"authentik\"\n          provider: \"openidConnect\"\n          key: \"CLIENT_ID_FROM_AUTHENTIK\" #Step 1\n          secret: \"CLIENT_SECRET_FROM_AUTHENTIK\" #Step 1\n          autoDiscoverUrl: \"https://authentik.company/application/o/gitea-slug/.well-known/openid-configuration\"\n          iconUrl: \"https://goauthentik.io/img/icon.png\"\n          scopes: \"email profile\"\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Credentials for Authentik\nDESCRIPTION: Commands to generate a secure PostgreSQL password and Authentik secret key using OpenSSL, writing them directly to the .env file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/docker-compose.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho \"PG_PASS=$(openssl rand -base64 36 | tr -d '\\n')\" >> .env\necho \"AUTHENTIK_SECRET_KEY=$(openssl rand -base64 60 | tr -d '\\n')\" >> .env\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom S3 Endpoint and Domain - ENV\nDESCRIPTION: These environment variables set a custom S3 endpoint and custom domain for object URLs in non-AWS S3 providers. Insert into your '.env' if not using AWS S3. 'ENDPOINT' tells Authentik how to connect to the S3 service, and 'CUSTOM_DOMAIN' defines how file URLs are presented in the interface. Both must align with how your provider exposes buckets and objects.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/storage-s3.md#_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nAUTHENTIK_STORAGE__MEDIA__S3__ENDPOINT=https://s3.provider\nAUTHENTIK_STORAGE__MEDIA__S3__CUSTOM_DOMAIN=s3.provider/authentik-media\n```\n\n----------------------------------------\n\nTITLE: Creating SPopenid Property Mapping for SharePoint (Python)\nDESCRIPTION: This Python code defines an OpenID scope mapping for SharePoint within authentik. It creates a property mapping to include specific claims required by SharePoint in the OIDC token, such as `nbf`, `oid`, and `upn`.  This mapping helps ensure SharePoint can properly authenticate and identify users.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/sharepoint-se/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n  \"nbf\": \"0\",           # Identifies the time before which the JWT can't be accepted for processing.\n                        # 0 stand for the date 1970-01-01 in unix timestamp\n  \"oid\": user.uid,      # This ID uniquely identifies the user across applications - two different applications signing in the same user receives the same value in the oid claim.\n  \"upn\": user.username  # (Optional) User Principal Name, used for troubleshooting within JWT tokens or to setup SharePoint like ADFS\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BookStack for OIDC Authentication\nDESCRIPTION: This code snippet provides the environment variables required to set up BookStack with authentik as an OpenID Connect provider. It includes parameters like client ID, client secret, issuer URL, and display name claims, enabling OAuth2/OIDC authentication flow.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/bookstack/index.mdx#_snippet_0\n\nLANGUAGE: Yaml\nCODE:\n```\nAUTH_METHOD=oidc\nAUTH_AUTO_INITIATE=false # Set this to \"true\" to automatically redirect the user to authentik.\nOIDC_NAME=authentik # The display name shown on the login page.\nOIDC_DISPLAY_NAME_CLAIMS=name # Claim(s) for the user's display name. Can have multiple attributes listed, separated with a '|' in which case those values will be joined with a space.\nOIDC_CLIENT_ID=<Client ID from authentik>\nOIDC_CLIENT_SECRET=<Client Secret from authentik>\nOIDC_ISSUER=https://authentik.company/application/o/<your-application-slug>\nOIDC_ISSUER_DISCOVER=true\nOIDC_END_SESSION_ENDPOINT=true\n```\n\n----------------------------------------\n\nTITLE: Installing Authentik Helm Chart from Repository\nDESCRIPTION: Executes Helm commands to add the Authentik chart repository, update local cache, and deploy Authentik with the specified values. This automates the deployment process, applying database migrations during startup.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/kubernetes.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nhelm repo add authentik https://charts.goauthentik.io\nhelm repo update\nhelm upgrade --install authentik authentik/authentik -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Policy Bindings for Transactional Applications\nDESCRIPTION: New policy_bindings property added to transactional applications PUT endpoint. This allows setting policies without explicitly specifying targets as they are set implicitly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.12.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policy_bindings\": [\n    {\n      \"policy\": \"string\",\n      \"group\": \"string\",\n      \"user\": 0,\n      \"negate\": false,\n      \"enabled\": true,\n      \"order\": 0,\n      \"timeout\": 0,\n      \"failure_result\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of Source Stage Flow\nDESCRIPTION: Illustrates the sequence of interactions between a user, authentik, and an external identity provider (IDP) when a Source stage is encountered in an authentik flow. It shows the redirection to the external IDP, the handling of authentication or enrollment flows based on whether the user is already connected, and the eventual resumption of the original authentik flow.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/source/index.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant u as User\n    participant ak as authentik\n    participant eidp as External IDP\n\n    u->>ak: User initiates flow\n    ak->>u: User reaches Source Stage\n\n    u->>eidp: User is redirected to external IDP\n    eidp->>ak: User has authenticated with external IDP\n\n    alt User is connected to external IDP (auth)\n        ak->>u: Source's authentication flow is started\n        u->>ak: User finishes source's authentication flow\n    else User has not been connected to external IDP (enroll)\n        ak->>u: Source's enrollment flow is started\n        u->>ak: User finishes source's enrollment flow\n    end\n\n    ak->>u: Execution of the previous flow is resumed\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SCIM User Mapping for AWS in authentik (Python)\nDESCRIPTION: Python expression for a custom authentik SCIM Mapping used for AWS Identity Center provisioning. This mapping removes the 'photos' attribute from the user object before sending it to AWS, as this attribute is not supported by AWS SCIM. It should be named lexically lower than the default mapping.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/aws/index.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# This expression strips the default mapping from its 'photos' attribute,\n# which is a forbidden property in AWS IAM.\nreturn {\n    \"photos\": None,\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Permissions to Users via Authentik Blueprint YAML\nDESCRIPTION: Sets global permissions on a user model instance via YAML blueprints using the 'permissions' attribute. Permissions specify access rights and are listed as strings matching predefined schema entries. The snippet identifies the user by username and assigns an array of permission strings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/models.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# [...]\n- model: authentik_core.user\n  identifiers:\n      username: test-user\n  attrs:\n      permissions:\n          - authentik_blueprints.view_blueprintinstance\n```\n\n----------------------------------------\n\nTITLE: Adding Kerberos Backend to Password Stage Update (PUT /stages/password/{uuid})\nDESCRIPTION: Modifies the PUT /stages/password/{stage_uuid}/ endpoint. The `backends` array in the JSON request body and the 200 OK response now includes `authentik.sources.kerberos.auth.KerberosBackend` as a possible string enum value for selecting password testing backends.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n// Request Body / 200 OK Response Body Change\n{\n  \"backends\": [\n    // ... other existing backend values\n    \"authentik.sources.kerberos.auth.KerberosBackend\" // Added enum value\n  ],\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Configure ArgoCD Secret with Helm (values.yaml)\nDESCRIPTION: This snippet shows how to configure the `argocd-secret` using Helm, adding the Client Secret from authentik to the `configs.secret.extra` section of the `values.yaml` file. It utilizes variable substitution for secure injection of the secret value. This approach allows managing the secret as part of the Helm chart configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/argocd/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigs:\n    secret:\n        extra:\n            dex.authentik.clientSecret: \"${argocd_authentik_client_secret}\"\n```\n\n----------------------------------------\n\nTITLE: Updating SAML NameID Policy\nDESCRIPTION: This documents a `PATCH` request to `/sources/saml/{slug}/` endpoint. It describes changes to the `name_id_policy` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_6\n\nLANGUAGE: API\nCODE:\n```\n###### `PATCH` /sources/saml/&#123;slug&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `name_id_policy` (string)\n\n    > NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.\n\n    Added enum value:\n\n    - `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName`\n      Removed enum value:\n\n    - `urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName`\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `name_id_policy` (string)\n\n        > NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.\n\n        Added enum value:\n\n        - `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName`\n          Removed enum value:\n\n        - `urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName`\n```\n\n----------------------------------------\n\nTITLE: Adding Kerberos Backend to Password Stage Partial Update (PATCH /stages/password/{uuid})\nDESCRIPTION: Modifies the PATCH /stages/password/{stage_uuid}/ endpoint. The `backends` array in the JSON request body (for partial updates) and the 200 OK response now includes `authentik.sources.kerberos.auth.KerberosBackend` as a possible string enum value for selecting password testing backends.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n// Request Body / 200 OK Response Body Change\n{\n  \"backends\": [\n    // ... other existing backend values\n    \"authentik.sources.kerberos.auth.KerberosBackend\" // Added enum value\n  ],\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Authentik LDAP Outpost using Docker Compose\nDESCRIPTION: Docker Compose service definition for the Authentik LDAP outpost. It uses the official LDAP image, maps standard LDAP/LDAPS ports (389, 636), and sets required environment variables (AUTHENTIK_HOST, AUTHENTIK_INSECURE, AUTHENTIK_TOKEN) for connecting to the core Authentik server. Optional network configuration is available.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/manual-deploy-docker-compose.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    authentik_ldap:\n        image: ghcr.io/goauthentik/ldap\n        # Optionally specify which networks the container should be\n        # might be needed to reach the core authentik server\n        # networks:\n        #   - foo\n        ports:\n            - 389:3389\n            - 636:6636\n        environment:\n            AUTHENTIK_HOST: https://your-authentik.tld\n            AUTHENTIK_INSECURE: \"false\"\n            AUTHENTIK_TOKEN: token-generated-by-authentik\n```\n\n----------------------------------------\n\nTITLE: Setting Authentik Log Level to TRACE (Docker Compose)\nDESCRIPTION: This snippet shows how to set the Authentik log level to TRACE when using Docker Compose.  This is done by adding the environment variable `AUTHENTIK_LOG_LEVEL` to the `.env` file. After adding the variable, the docker compose application needs to be restarted.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/forward_auth/general.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTHENTIK_LOG_LEVEL=trace\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Tokens - Provider Update\nDESCRIPTION: This documentation covers a `GET` request to `/rac/connection_tokens/`. It highlights changes within the ConnectionToken Serializer, focusing on updates to the `provider_obj` and `endpoint_obj`, specifically including the addition of 'invalidation_flow'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_20\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /rac/connection_tokens/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > ConnectionToken Serializer\n\n        - Changed property `provider_obj` (object)\n\n            > RACProvider Serializer\n\n            New required properties:\n\n            - `invalidation_flow`\n\n            * Added property `invalidation_flow` (string)\n                > Flow used ending the session from a provider.\n\n        - Changed property `endpoint_obj` (object)\n\n            > Endpoint Serializer\n\n            - Changed property `provider_obj` (object)\n\n                > RACProvider Serializer\n\n                New required properties:\n\n                - `invalidation_flow`\n\n                * Added property `invalidation_flow` (string)\n                    > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxmox OpenID Connect Realm via CLI (Bash)\nDESCRIPTION: This Bash command configures Proxmox VE to use authentik as an OpenID Connect authentication source by adding a realm with necessary provider connection details. It requires Proxmox VE 7.0 or newer and a previously created OpenID Connect provider and client credentials in authentik. Required parameters include --issuer-url (issuer endpoint from authentik), --client-id, --client-key (client secret), --username-claim (the claim representing the username, usually 'username'), and --autocreate (set to 1 to auto-create users). The command should be run on any Proxmox cluster node via SSH, and successful execution enables authentik-based SSO for Proxmox.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/proxmox-ve/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npveum realm add authentik --type openid --issuer-url https://authentik.company/application/o/proxmox/ --client-id xxx --client-key xxx --username-claim username --autocreate 1\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik Helm Chart (Shell)\nDESCRIPTION: These shell commands first update the local Helm repository cache to fetch the latest chart information using `helm repo update`. Then, `helm upgrade` installs or upgrades the 'authentik' release using the 'authentik/authentik' chart. It specifically targets versions compatible with 2024.2 (indicated by `^2024.2`) and applies custom configurations provided in the local `values.yaml` file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^2024.2\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose file on Linux\nDESCRIPTION: Command to download the latest Authentik docker-compose.yml file on Linux systems using wget.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/docker-compose.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://goauthentik.io/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Provider in authentik JSON Payload\nDESCRIPTION: This JSON code snippet defines the authorization request parameters required for the OAuth2/OpenID Connect provider configuration in Frappe. The snippet specifies the response_type as 'code' and requests the 'email', 'profile', and 'openid' scopes, which are essential for obtaining user identity information during authentication. This snippet is typically used as part of the 'Auth URL Data' in the Frappe social login key settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/frappe/index.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"response_type\": \"code\", \"scope\": \"email profile openid\" }\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint - PATCH /stages/deny\nDESCRIPTION: This snippet describes the API endpoint `/stages/deny/{stage_uuid}/` with the PATCH method. It is very similar to the PUT request, with changes to the properties within the request and response.  Both the request and response use JSON, with adjustments to the `flow_set` and its nested properties. The response returns a 200 OK status.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_49\n\nLANGUAGE: API Definition\nCODE:\n```\nPATCH /stages/deny/&#123;stage_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n    - Changed property `designation` (string)\n\n        > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n    - Changed property `denied_action` (string)\n\n        > Configure what should happen when a flow denies access to a user.\n\n    - Changed property `policy_engine_mode` (string)\n\n    - Changed property `layout` (string)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        - Changed property `designation` (string)\n\n            > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n        - Changed property `denied_action` (string)\n\n            > Configure what should happen when a flow denies access to a user.\n\n        - Changed property `policy_engine_mode` (string)\n\n        - Changed property `layout` (string)\n```\n\n----------------------------------------\n\nTITLE: Filtering user groups by name prefix in Python using Django ORM\nDESCRIPTION: This Python snippet filters groups associated with a user, returning only those whose names start with the prefix 'test'. It uses Django queryset filtering on the `ak_groups` attribute and demonstrates how to retrieve subsets of group memberships based on name criteria. This requires the user object’s `ak_groups` attribute and Django ORM support for field lookups.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/user/user_ref.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuser.ak_groups.filter(name__startswith='test')\n```\n\n----------------------------------------\n\nTITLE: Blocking /-/metrics/ Endpoint in Nginx Configuration\nDESCRIPTION: This Nginx configuration snippet is used as a workaround to mitigate the timing attack vulnerability on the /-/metrics/ endpoint in authentik by denying all access requests and returning a 404 not found status. It prevents public exposure of Prometheus metrics and stops brute force attempts on the SECRET_KEY used by authentik. The snippet should be placed in the server configuration handling client requests to authentik. No additional dependencies are required beyond a functional Nginx reverse proxy. This solution assumes the /-/metrics/ endpoint is not intended for direct client access but only internal scraping via a proxy on a separate port.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/security/cves/CVE-2024-52307.md#_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /-/metrics/ {\n    deny all;\n    return 404;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sequence or Mapping Elements with !AtIndex (YAML)\nDESCRIPTION: This snippet demonstrates the '!AtIndex' tag, retrieving an item in a sequence or mapping by index or key, with optional default if the index is out of bounds. The first argument is the collection, the second is the index/key, and the optional third is a default fallback. Errors are raised for out-of-range access without default.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nvalue_in_sequence: !AtIndex [[\"first\", \"second\"], 0] # Resolves to \"first\"\nvalue_in_mapping: !AtIndex [{ \"foo\": \"bar\", \"other\": \"value\" }, \"foo\"] # Resolves to \"bar\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_value: !AtIndex [[\"first\"], 100, \"default\"]  # Resolves to \"default\"\ndefault_value: !AtIndex [[\"first\"], 100]  # Throws an error\n```\n\n----------------------------------------\n\nTITLE: Setting Mobilizon OAuth Consumer Strategies for authentik in Elixir\nDESCRIPTION: This snippet configures Mobilizon's authentication module to recognize 'authentik' as an OAuth consumer strategy mapped to Keycloak. It registers the Keycloak strategy under the `:mobilizon, :auth` config for use within the Mobilizon platform, enabling it to utilize the authentik provider defined in Ueberauth.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mobilizon/index.md#_snippet_1\n\nLANGUAGE: Elixir\nCODE:\n```\nconfig :mobilizon, :auth,\\n  oauth_consumer_strategies: [\\n    {:keycloak, \"authentik\"}\\n  ]\n```\n\n----------------------------------------\n\nTITLE: Create SharePoint Authentication Provider\nDESCRIPTION: This PowerShell script creates a SharePoint authentication provider based on a trusted identity token issuer (authentik). It defines OIDC settings like metadata endpoint and client identifier, maps claims, and creates the trusted token issuer and authentication provider. Update the placeholders for metadataendpointurl, clientIdentifier, trustedTokenIssuerName, and trustedTokenIssuerDescription.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/sharepoint-se/index.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PSSnapin microsoft.sharepoint.powershell\n\n# OIDC Settings\n$metadataendpointurl = \"auth.providerConfigURL\"\n$clientIdentifier = \"auth.providerClientID\"\n$trustedTokenIssuerName = \"sp.issuerName\"\n$trustedTokenIssuerDescription = \"sp.issuerDesc\"\n\n# OIDC Claims Mapping\n## Identity claim: oid => defined within the Authentik scope mapping\n$idClaim = New-SPClaimTypeMapping \"http://schemas.microsoft.com/identity/claims/objectidentifier\" -IncomingClaimTypeDisplayName \"oid\" -SameAsIncoming\n\n## User claims mappings\n$claims = @(\n    $idClaim\n    ## User Roles (Group membership)\n    ,(New-SPClaimTypeMapping ([System.Security.Claims.ClaimTypes]::Role) -IncomingClaimTypeDisplayName \"Role\" -SameAsIncoming)\n    ## User email\n    ,(New-SPClaimTypeMapping ([System.Security.Claims.ClaimTypes]::Email) -IncomingClaimTypeDisplayName \"Email\" -SameAsIncoming)\n    ## User given_name\n    ,(New-SPClaimTypeMapping ([System.Security.Claims.ClaimTypes]::GivenName) -IncomingClaimTypeDisplayName \"GivenName\" -SameAsIncoming )\n    ## (Optional) User account name\n    #,(New-SPClaimTypeMapping ([System.Security.Claims.ClaimTypes]::NameIdentifier) -IncomingClaimTypeDisplayName \"Username\" -SameAsIncoming)\n\n)\n\n# Trust 3rd party identity token issuer\n$trustedTokenIssuer = New-SPTrustedIdentityTokenIssuer -Name $trustedTokenIssuerName -Description $trustedTokenIssuerDescription -ClaimsMappings $claims -IdentifierClaim $idClaim.InputClaimType -DefaultClientIdentifier $clientIdentifier -MetadataEndPoint $metadataendpointurl -Scope \"openid email profile\"\n#Note: Remove the profile scope if you plan to use the LDAPCP claims augmentation.\n\n# Create the SharePoint authentication provider based on the trusted token issuer\nNew-SPAuthenticationProvider -TrustedIdentityTokenIssuer $trustedTokenIssuer\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NetBox Python settings file for authentik integration\nDESCRIPTION: Configuration file for NetBox that sets up OIDC authentication parameters. Includes both Docker and non-Docker configuration options for connecting to authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/netbox/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom os import environ\n\n#############\n# Docker\n#############\n\n# python-social-auth configuration\nSOCIAL_AUTH_OIDC_OIDC_ENDPOINT = environ.get('SOCIAL_AUTH_OIDC_OIDC_ENDPOINT')\nSOCIAL_AUTH_OIDC_KEY = environ.get('SOCIAL_AUTH_OIDC_KEY')\nSOCIAL_AUTH_OIDC_SECRET = environ.get('SOCIAL_AUTH_OIDC_SECRET')\nSOCIAL_AUTH_OIDC_SCOPE = environ.get('SOCIAL_AUTH_OIDC_SCOPE').split(' ')\nLOGOUT_REDIRECT_URL = environ.get('LOGOUT_REDIRECT_URL')\n\n\n#############\n# non Docker\n#############\n\n# NetBox settings\n#REMOTE_AUTH_ENABLED = True\n#REMOTE_AUTH_BACKEND = 'social_core.backends.open_id_connect.OpenIdConnectAuth'\n\n# python-social-auth configuration\n#SOCIAL_AUTH_OIDC_ENDPOINT = 'https://authentik.company/application/o/<Application\n#SOCIAL_AUTH_OIDC_KEY = '<Client ID>'\n#SOCIAL_AUTH_OIDC_SECRET = '<Client Secret>'\n#LOGOUT_REDIRECT_URL = 'https://authentik.company/application/o/<Application slug>/end-session/\n```\n\n----------------------------------------\n\nTITLE: Simple !If Construct (Long Form, YAML)\nDESCRIPTION: This example demonstrates the extended '!If' form, specifying values for both true and false outcomes. The first argument is the test condition, the second is used if the condition is true, and the third if false.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Longer form\n# !If [<condition>, <when true>, <when false>]\nrequired: !If [true, true, false]\n```\n\n----------------------------------------\n\nTITLE: Linking to Documentation in Standard GitHub Release Notes (Markdown)\nDESCRIPTION: Provides a standard text snippet to include in the GitHub release notes body for a standard initial release. This directs users to the full release notes page on the authentik documentation website for the specific major.minor version.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nSee https://goauthentik.io/docs/releases/2022.12\n```\n\n----------------------------------------\n\nTITLE: Listing user group memberships in Python using Django ORM\nDESCRIPTION: This Python snippet iterates over all groups that a user is associated with via the Django ORM queryset `ak_groups`. It outputs (yields) each group's name, useful in policies or property mappings to dynamically access a user's group membership details. Requires the user object to have an `ak_groups` queryset attribute.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/user/user_ref.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor group in user.ak_groups.all():\n    yield group.name\n```\n\n----------------------------------------\n\nTITLE: Check User Authenticator in Python\nDESCRIPTION: Checks if a user has any valid authenticator devices registered.  Optionally filters by device type (totp, duo, static, webauthn). Requires a User object.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nreturn ak_user_has_authenticator(request.user)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flow Instances API\nDESCRIPTION: This describes how to get flow instances using the GET request. The response includes flow instance details, including designation, denied_action, authentication, policy_engine_mode and layout. It also details the query parameters used to filter results by denied_action and designation. It uses application/json content type.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_37\n\nLANGUAGE: string\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Proxy Provider API Configuration in HTTP\nDESCRIPTION: API endpoints for managing proxy providers, featuring configuration for forwarding authentication requests. Includes support for traefik and nginx auth_request.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_10\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /providers/proxy/{id}/\nPUT /providers/proxy/{id}/\nDELETE /providers/proxy/{id}/\nPATCH /providers/proxy/{id}/\n```\n\n----------------------------------------\n\nTITLE: Mapping Authentik User Name to SAML realName (Python)\nDESCRIPTION: This Python expression is used in an Authentik SAML Property Mapping to extract the user's name. It accesses the `user` object and retrieves the value of its `name` attribute, which is then sent as the `realName` SAML attribute to the Service Provider (Knocknoc). Requires the `user` object to be available in the expression context.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/knocknoc/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn user.name\n```\n\n----------------------------------------\n\nTITLE: Fetching a group by name and retrieving its members using Python in authentik\nDESCRIPTION: This code fetches a Group object by its name using the authentik core Group model, then retrieves all users belonging to that group. It uses Django's ORM methods like 'objects.get' for querying by the group's name field. The snippet requires the 'authentik.core.models.Group' import and the group name as a string parameter. The output is a queryset of user objects representing group members, useful in policy enforcement or attribute mappings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/groups/group_ref.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom authentik.core.models import Group\nGroup.objects.get(name=\"name of group\").users.all()\n```\n\n----------------------------------------\n\nTITLE: Generating Kerberos Principal and Keytab\nDESCRIPTION: This snippet demonstrates the process of creating a Kerberos principal for authentik and generating a keytab file. It uses `kadmin` to add a principal and `ktadd` to generate the keytab, which is then base64-encoded for use in authentik. The keytab is required for both sync and SPNEGO authentication methods.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/protocols/kerberos/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kadmin\n> add_principal authentik/admin@REALM.COMPANY\n> ktadd -k /tmp/authentik.keytab authentik/admin@REALM.COMPANY\n> exit\n$ cat /tmp/authentik.keytab | base64\n$ rm /tmp/authentik.keytab\n```\n\n----------------------------------------\n\nTITLE: Configuring Linkwarden environment variables for authentik OAuth2 SSO in dotenv\nDESCRIPTION: This snippet provides the environment variable settings required to enable Linkwarden to use authentik as an OAuth2/OpenID Connect SSO provider. The variables include enabling authentik support, setting a custom provider name, specifying the issuer URL for the authentik application slug, and providing the client ID and secret for OAuth2 authentication. These settings must be added to Linkwarden's .env file and followed by a Docker container restart to apply changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/linkwarden/index.md#_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nNEXT_PUBLIC_AUTHENTIK_ENABLED=true\nAUTHENTIK_CUSTOM_NAME=authentik # Optionally set a custom provider name. Will be displayed on the login page\nAUTHENTIK_ISSUER=https://authentik.company/application/o/<application slug>\nAUTHENTIK_CLIENT_ID=<Your Client ID>\nAUTHENTIK_CLIENT_SECRET=<Your Client Secret>\n```\n\n----------------------------------------\n\nTITLE: Creating authentik Service Account\nDESCRIPTION: Creates a service account within authentik to be used by pfSense as the LDAP binder. The purpose of this account is to allow pfSense to authenticate against authentik. The key is to note down the password for later use. The username used in the example is 'pfsense-user'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Upgrading Authentik with Docker Compose (v2024.12)\nDESCRIPTION: Downloads the docker-compose.yml file for authentik version 2024.12 using wget, overwriting any existing file with the same name (-O flag), and then updates and restarts the Docker stack in detached mode (-d) using docker compose.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.12.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/2024.12/docker-compose.yml\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Authentik Log Level to TRACE (Kubernetes)\nDESCRIPTION: This snippet demonstrates how to set the Authentik log level to TRACE when deploying with Kubernetes using Helm.  The `log_level` parameter under the `authentik` section of the `values.yml` file must be set to `trace`.  After updating the file, the helm release should be upgraded.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/forward_auth/general.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik:\n    log_level: trace\n```\n\n----------------------------------------\n\nTITLE: GET /flows/bindings/ API Change\nDESCRIPTION: This documents changes to the `GET` request for the `/flows/bindings/` endpoint. It indicates the changes in the request parameters and return type. The request parameters have been modified to include changes in `invalid_response_action` and `policy_engine_mode`.  The return type now contains properties within the `results` array as well as the `stage_obj`. This affects how flow bindings are retrieved and displayed through the API.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_62\n\n\n\n----------------------------------------\n\nTITLE: Enforcing User Authentication Policy in Authentik (Python)\nDESCRIPTION: This Python policy expression is designed to be used within Authentik's flow policies to restrict access only to authenticated users. It depends on the presence of the 'request' object with a 'user' attribute that supports the 'is_authenticated' property. The expression should be inserted into the policy contents for the 'default-user-settings-flow'. The input is the current request context, and the output is a boolean indicating whether the user is authenticated. Its limitation is that it solely checks authentication status; further logic may be needed for advanced restrictions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/security/cves/CVE-2022-46145.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn request.user.is_authenticated\n```\n\n----------------------------------------\n\nTITLE: Building Frontend in Watch Mode Using Make Shell Command\nDESCRIPTION: Runs the front-end build process with continuous watch mode by invoking 'make web-watch'. This facilitates real-time rebuilding and live preview of frontend changes during active development, assuming that Make and associated build tools are installed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/frontend-dev-environment.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake web-watch\n```\n\n----------------------------------------\n\nTITLE: Checking Discord Guild Role Membership in authentik with Python\nDESCRIPTION: This Python code snippet checks if a user is a member of a specific role within a Discord guild during the OAuth login process. It retrieves user roles from the Discord API, verifies membership, and displays an error if the user lacks the required role. It requires the `requests` library.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/discord/index.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# To get the role and guild ID numbers for the parameters, open Discord, go to Settings > Advanced and\n# enable developer mode.\n# Right-click on the server/guild title and select \"Copy ID\" to get the guild ID.\n# Right-click on the server/guild title and select server settings > roles, right click on the role and click\n# \"Copy ID\" to get the role ID.\n\nACCEPTED_ROLE_ID = \"123456789123456789\"\nACCEPTED_GUILD_ID = \"123456789123456789\"\nGUILD_NAME_STRING = \"The desired server/guild name in the error message.\"\nROLE_NAME_STRING = \"The desired role name in the error message.\"\n\n# Only change below here if you know what you are doing.\nGUILD_API_URL = f\"https://discord.com/api/users/@me/guilds/{ACCEPTED_GUILD_ID}/member\"\n\n# Ensure flow is only run during OAuth logins via Discord\nif context['source'].provider_type != \"discord\":\n    return True\n\n# Get the user-source connection object from the context, and get the access token\nconnection = context.get(\"goauthentik.io/sources/connection\")\nif not connection:\n  return False\naccess_token = connection.access_token\n\nguild_member_object = requests.get(\n    GUILD_API_URL,\n    headers= {\n        \"Authorization\": f\"Bearer {access_token}\",\n    }\n).json()\n\n# The response for JSON errors is held within guild_member_object['code']\n# See: https://discord.com/developers/docs/topics/opcodes-and-status-codes#json\n# If the user isn't in the queried guild, it gives the somewhat misleading code = 10004.\nif \"code\" in guild_member_object:\n    if guild_member_object['code'] == 10004:\n        ak_message(f\"User is not a member of {GUILD_NAME_STRING}.\")\n    else:\n        ak_create_event(\"discord_error\", source=context['source'], code=guild_member_object['code'])\n        ak_message(\"Discord API error, try again later.\")\n    # Policy does not match if there is any error.\n    return False\n\nuser_matched = any(ACCEPTED_ROLE_ID == g for g in guild_member_object[\"roles\"])\nif not user_matched:\n    ak_message(f\"User is not a member of the {ROLE_NAME_STRING} role in {GUILD_NAME_STRING}.\")\nreturn user_matched\n```\n\n----------------------------------------\n\nTITLE: Configuring Actual Budget with JSON\nDESCRIPTION: This snippet demonstrates how to configure OpenID Connect in Actual Budget by modifying the `/data/config.json` file.  It defines the necessary settings, including the issuer (authentik's URL), client ID and secret, server hostname, and authentication method.  These settings enable Actual Budget to use authentik for user authentication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/actual-budget/index.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"openId\": {\n          \"issuer\": \"https://authentik.company/application/o/<your-application-slug>/\",\n          \"client_id\": \"<Client ID from authentik>\",\n          \"client_secret\": \"<Client Secret from authentik>\",\n          \"server_hostname\": \"https://actual.company\",\n          \"authMethod\": \"openid\"\n      }\n```\n\n----------------------------------------\n\nTITLE: Documenting POST /policies/event_matcher/ Request Changes\nDESCRIPTION: This section documents the changes in the request and the corresponding response for the `POST` /policies/event_matcher/ endpoint. The request uses content type `application/json`.  The change is related to the `app` property with multiple possible string values: `authentik.admin`, `authentik.api`, etc. and also removal of `authentik.lib` from the list. The response returns a 201 Created with `application/json` content type and the `app` property with same list of possible string values and removal of `authentik.lib` from the list.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Map Authentik Group Membership to GitHub SCIM Roles - Python Expression\nDESCRIPTION: This Python expression is used within an authentik SCIM Property Mapping to dynamically assign GitHub Enterprise Server roles based on authentik group membership. It checks if a user belongs to the 'GitHub Admins' group and assigns the 'enterprise_owner' role; otherwise, it assigns the 'user' role. This mapping controls user permissions provisioned via SCIM.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/github-enterprise-server/index.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nroles = []\n# Edit this if statement if you need to add more GitHub roles.\n# Valid roles include:\n# user, guest_collaborator, enterprise_owner, billing_manager\nif ak_is_group_member(request.user, name='GitHub Admins'):\n    roles.append({'value': 'enterprise_owner', 'primary': True})\nelse:\n    roles.append({'value': 'user', 'primary': True})\n\nreturn {\n    \"roles\": roles,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Recovery Key in Authentik Using CLI Shell Command\nDESCRIPTION: Uses the Authentik CLI entrypoint to generate a recovery key for login recovery. Requires the 'uv' CLI tool to run the 'ak' command with parameters for key expiry in years and username. Outputs a secure link that allows direct access into an Authentik instance as the specified user for the defined period.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/login.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuv run ak create_recovery_key 10 akadmin\n```\n\n----------------------------------------\n\nTITLE: Adding invalidation_flow to RACProvider Response (POST /rac/endpoints/)\nDESCRIPTION: Updates the 201 Created response for the POST /rac/endpoints/ endpoint. The `provider_obj` (RACProvider Serializer) within the response body now requires the `invalidation_flow` property (string), which specifies the flow used for ending a session initiated by this provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider_obj\": {\n    \"invalidation_flow\": \"string\" // Flow used ending the session from a provider. (Required)\n    // ... other properties\n  }\n  // ... other response properties\n}\n```\n\n----------------------------------------\n\nTITLE: Check IP Address in Subnet in Python\nDESCRIPTION: Checks if an IP address is within a given subnet. Utilizes `ip_address` and `ip_network` functions. It requires the `ipaddress` module in Python.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nip_address('192.0.2.1') in ip_network('192.0.2.0/24')\n# evaluates to True\n```\n\n----------------------------------------\n\nTITLE: Requesting OAuth2 Token with Client Credentials - authentik - HTTP\nDESCRIPTION: This HTTP request demonstrates how to obtain an access token from authentik using the client credentials grant flow, with authentication performed via a service-account username and app-password token instead of a traditional client_secret. Required parameters include grant_type (client_credentials), client_id, username (the service account's username), password (the app-password token), and optionally scope. The response includes a signed JWT access_token that can be validated by other services using authentik's signing key.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/oauth2/client_credentials.mdx#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /application/o/token/ HTTP/1.1\nHost: authentik.company\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&\nclient_id=application_client_id&\nusername=my-service-account&\npassword=my-token&\nscope=profile\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definitions\nDESCRIPTION: This section outlines the API endpoints available in authentik, categorized under \"What's New\" and \"What's Changed\".  It details the HTTP methods (GET, POST, PUT, DELETE, PATCH) and paths associated with these endpoints, including the expected request and response formats and data types. The listed endpoints cover management of authenticator endpoints, kerberos sources, property mappings, user/group connections, and stages.  It also specifies changes to the returned properties and enum values, such as added `extra_description` properties or enum values for 'app' and 'model'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_2\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /admin/version/history/\n\n##### `GET` /admin/version/history/&#123;id&#125;/\n\n##### `GET` /authenticators/admin/endpoint/\n\n##### `POST` /authenticators/admin/endpoint/\n\n##### `GET` /authenticators/admin/endpoint/&#123;uuid&#125;/\n\n##### `PUT` /authenticators/admin/endpoint/&#123;uuid&#125;/\n\n##### `DELETE` /authenticators/admin/endpoint/&#123;uuid&#125;/\n\n##### `PATCH` /authenticators/admin/endpoint/&#123;uuid&#125;/\n\n##### `GET` /authenticators/endpoint/\n\n##### `GET` /authenticators/endpoint/&#123;uuid&#125;/\n\n##### `GET` /authenticators/endpoint/&#123;uuid&#125;/used_by/\n\n##### `GET` /propertymappings/source/kerberos/\n\n##### `POST` /propertymappings/source/kerberos/\n\n##### `GET` /propertymappings/source/kerberos/&#123;pm_uuid&#125;/\n\n##### `PUT` /propertymappings/source/kerberos/&#123;pm_uuid&#125;/\n\n##### `DELETE` /propertymappings/source/kerberos/&#123;pm_uuid&#125;/\n\n##### `PATCH` /propertymappings/source/kerberos/&#123;pm_uuid&#125;/\n\n##### `GET` /propertymappings/source/kerberos/&#123;pm_uuid&#125;/used_by/\n\n##### `GET` /sources/group_connections/kerberos/\n\n##### `GET` /sources/group_connections/kerberos/&#123;id&#125;/\n\n##### `PUT` /sources/group_connections/kerberos/&#123;id&#125;/\n\n##### `DELETE` /sources/group_connections/kerberos/&#123;id&#125;/\n\n##### `PATCH` /sources/group_connections/kerberos/&#123;id&#125;/\n\n##### `GET` /sources/group_connections/kerberos/&#123;id&#125;/used_by/\n\n##### `GET` /sources/kerberos/\n\n##### `POST` /sources/kerberos/\n\n##### `GET` /sources/kerberos/&#123;slug&#125;/\n\n##### `PUT` /sources/kerberos/&#123;slug&#125;/\n\n##### `DELETE` /sources/kerberos/&#123;slug&#125;/\n\n##### `PATCH` /sources/kerberos/&#123;slug&#125;/\n\n##### `GET` /sources/kerberos/&#123;slug&#125;/sync/status/\n\n##### `GET` /sources/kerberos/&#123;slug&#125;/used_by/\n\n##### `GET` /sources/user_connections/kerberos/\n\n##### `POST` /sources/user_connections/kerberos/\n\n##### `GET` /sources/user_connections/kerberos/&#123;id&#125;/\n\n##### `PUT` /sources/user_connections/kerberos/&#123;id&#125;/\n\n##### `DELETE` /sources/user_connections/kerberos/&#123;id&#125;/\n\n##### `PATCH` /sources/user_connections/kerberos/&#123;id&#125;/\n\n##### `GET` /sources/user_connections/kerberos/&#123;id&#125;/used_by/\n\n##### `GET` /stages/authenticator/endpoint_gdtc/\n\n##### `POST` /stages/authenticator/endpoint_gdtc/\n\n##### `GET` /stages/authenticator/endpoint_gdtc/&#123;stage_uuid&#125;/\n\n##### `PUT` /stages/authenticator/endpoint_gdtc/&#123;stage_uuid&#125;/\n\n##### `DELETE` /stages/authenticator/endpoint_gdtc/&#123;stage_uuid&#125;/\n\n##### `PATCH` /stages/authenticator/endpoint_gdtc/&#123;stage_uuid&#125;/\n```\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /authenticators/admin/all/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    Changed items (object): > Serializer for Duo authenticator devices\n\n    New required properties:\n\n    - `extra_description`\n\n    * Added property `extra_description` (string)\n\n        > Get extra description\n\n    * Changed property `pk` (integer -> string)\n\n##### `GET` /authenticators/all/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    Changed items (object): > Serializer for Duo authenticator devices\n\n    New required properties:\n\n    - `extra_description`\n\n    * Added property `extra_description` (string)\n\n        > Get extra description\n\n    * Changed property `pk` (integer -> string)\n\n##### `GET` /policies/event_matcher/&#123;policy_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `app` (string)\n\n        > Match events created by selected application. When left empty, all applications are matched.\n\n        Added enum values:\n\n        - `authentik.sources.kerberos`\n        - `authentik.enterprise.stages.authenticator_endpoint_gdtc`\n\n    - Changed property `model` (string)\n\n        > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n\n        Added enum values:\n\n        - `authentik_sources_kerberos.kerberossource`\n        - `authentik_sources_kerberos.kerberossourcepropertymapping`\n        - `authentik_sources_kerberos.userkerberossourceconnection`\n        - `authentik_sources_kerberos.groupkerberossourceconnection`\n        - `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage`\n\n##### `PUT` /policies/event_matcher/&#123;policy_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `app` (string)\n\n    > Match events created by selected application. When left empty, all applications are matched.\n\n    Added enum values:\n\n    - `authentik.sources.kerberos`\n    - `authentik.enterprise.stages.authenticator_endpoint_gdtc`\n\n- Changed property `model` (string)\n\n    > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n\n    Added enum values:\n\n    - `authentik_sources_kerberos.kerberossource`\n    - `authentik_sources_kerberos.kerberossourcepropertymapping`\n    - `authentik_sources_kerberos.userkerberossourceconnection`\n    - `authentik_sources_kerberos.groupkerberossourceconnection`\n    - `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage`\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `app` (string)\n\n        > Match events created by selected application. When left empty, all applications are matched.\n\n        Added enum values:\n\n        - `authentik.sources.kerberos`\n        - `authentik.enterprise.stages.authenticator_endpoint_gdtc`\n\n    - Changed property `model` (string)\n\n        > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n\n        Added enum values:\n\n        - `authentik_sources_kerberos.kerberossource`\n        - `authentik_sources_kerberos.kerberossourcepropertymapping`\n        - `authentik_sources_kerberos.userkerberossourceconnection`\n        - `authentik_sources_kerberos.groupkerberossourceconnection`\n        - `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage`\n\n##### `PATCH` /policies/event_matcher/&#123;policy_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `app` (string)\n\n    > Match events created by selected application. When left empty, all applications are matched.\n\n    Added enum values:\n\n    - `authentik.sources.kerberos`\n    - `authentik.enterprise.stages.authenticator_endpoint_gdtc`\n\n- Changed property `model` (string)\n\n    > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n\n    Added enum values:\n\n    - `authentik_sources_kerberos.kerberossource`\n    - `authentik_sources_kerberos.kerberossourcepropertymapping`\n    - `authentik_sources_kerberos.userkerberossourceconnection`\n    - `authentik_sources_kerberos.groupkerberossourceconnection`\n    - `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage`\n```\n\n----------------------------------------\n\nTITLE: Group Synchronization Mapping in Python for Authentik\nDESCRIPTION: A Python expression for mapping group identifiers from source data to Authentik groups. The expression returns a dictionary with a special 'groups' attribute containing group identifiers, which are then processed by group property mappings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/property-mappings/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"groups\": data.get(\"groups\", []),\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Modification: `GET` Invitation Used By\nDESCRIPTION: This section describes changes made to a `GET` request for invitation's `used_by` endpoint.  The response content type is `application/json` and the response contains a list of all objects referencing the queried object.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Configuring Jellyfin OIDC Plugin Settings\nDESCRIPTION: Configuration settings for the Jellyfin SSO-Auth (OIDC) plugin. Requires the OIDC endpoint URL from authentik (including the provider name), along with the Client ID and Client Secret obtained from the authentik provider configuration. Role claims are optional.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/jellyfin/index.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nName of OID Provider: authentik\nOID Endpoint: https://authentik.company/application/o/jellyfin/.well-known/openid-configuration\nOpenID Client ID: [ClientID from provider]\nOID Secret: [Client Secret from provider]\nEnabled: CHECKED\nEnable Authorization by Plugin: CHECKED\nRoles: [Optional - roles to look for]\nAdmin Roles: [Optional - admin roles to look for]\nRole Claim: groups [Optional]\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab for OpenID Connect Authentication with authentik\nDESCRIPTION: Ruby configuration block for GitLab to enable OpenID Connect authentication with authentik. This should be added to the '/etc/gitlab/gitlab.rb' file. The block includes environment variables for client ID and secret that need to be replaced with actual values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/gitlab/index.mdx#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngitlab_rails['omniauth_allow_single_sign_on'] = ['openid_connect']\ngitlab_rails['omniauth_sync_email_from_provider'] = 'openid_connect'\ngitlab_rails['omniauth_sync_profile_from_provider'] = ['openid_connect']\ngitlab_rails['omniauth_sync_profile_attributes'] = ['email']\ngitlab_rails['omniauth_auto_sign_in_with_provider'] = 'openid_connect'\ngitlab_rails['omniauth_block_auto_created_users'] = false\ngitlab_rails['omniauth_auto_link_user'] = ['openid_connect']\ngitlab_rails['omniauth_providers'] = [\n  {\n    name: 'openid_connect',\n    label: 'My Company OIDC Login',\n    args: {\n      name: 'openid_connect',\n      scope: ['openid','profile','email'],\n      response_type: 'code',\n      issuer: 'https://authentik.company/application/o/gitlab-slug/',\n      discovery: true,\n      client_auth_method: 'query',\n      uid_field: 'preferred_username',\n      send_scope_to_token_endpoint: 'true',\n      pkce: true,\n      client_options: {\n        identifier: '${OIDC_CLIENT_ID}',\n        secret: '${OIDC_CLIENT_SECRET}',\n        redirect_uri: 'https://gitlab.company/users/auth/openid_connect/callback'\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Diagnostic Mode and Updating PostgreSQL Image Tag in values.yaml (YAML)\nDESCRIPTION: This YAML snippet alters the values.yaml used by the authentik Helm chart to remove diagnostic mode and ensure the correct PostgreSQL image tag is set following the upgrade. The change restarts PostgreSQL in normal operational mode. Must be followed by a Helm upgrade to apply. Only the image tag is modified here; ensure that other configurations remain unchanged.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_kubernetes.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npostgresql:\n    image:\n        tag: 15.2.0-debian-11-r26\n```\n\n----------------------------------------\n\nTITLE: Configuring Vikunja's config.yml for authentik Integration\nDESCRIPTION: Configuration block for the auth section in Vikunja's config.yml file to enable OpenID Connect authentication with authentik. This specifies the authentication URL, client ID, and client secret that were generated in authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/vikunja/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauth:\n  # Local authentication will let users log in and register (if enabled) through the db.\n  # This is the default auth mechanism and does not require any additional configuration.\n  local:\n    # Enable or disable local authentication\n    enabled: true\n  # OpenID configuration will allow users to authenticate through a third-party OpenID Connect compatible provider.<br/>\n  # The provider needs to support the `openid`, `profile` and `email` scopes.<br/>\n  # **Note:** Some openid providers (like gitlab) only make the email of the user available through openid claims if they have set it to be publicly visible.\n  # If the email is not public in those cases, authenticating will fail.\n  # **Note 2:** The frontend expects to be redirected after authentication by the third party\n  # to <frontend-url>/auth/openid/<auth key>. Please make sure to configure the redirect url with your third party\n  # auth service accordingly if you're using the default Vikunja frontend.\n  # Take a look at the [default config file](https://github.com/go-vikunja/api/blob/main/config.yml.sample) for more information about how to configure openid authentication.\n  openid:\n    # Enable or disable OpenID Connect authentication\n    enabled: true\n    # A list of enabled providers\n    providers:\n      # The name of the provider as it will appear in the frontend.\n      - name: \"authentik Login\"\n        # The auth url to send users to if they want to authenticate using OpenID Connect.\n        authurl: https://authentik.company/application/o/vikunja/\n        # The client ID used to authenticate Vikunja at the OpenID Connect provider.\n        clientid: THIS IS THE CLIENT ID YOU COPIED FROM STEP 1 in authentik\n        # The client secret used to authenticate Vikunja at the OpenID Connect provider.\n        clientsecret: THIS IS THE CLIENT SECRET YOU COPIED FROM STEP 1 in authentik\n```\n\n----------------------------------------\n\nTITLE: Setting User Password via Authentik Blueprint YAML\nDESCRIPTION: Configures a user model instance with a password in YAML blueprints, allowing password assignment at provisioning time instead of requiring separate endpoint calls. If an LDAP Source is integrated and the user is linked to LDAP, this change propagates to the LDAP server. The snippet identifies the user by username and sets the name and password attributes directly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/models.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# [...]\n- model: authentik_core.user\n  state: present\n  identifiers:\n      username: test-user\n  attrs:\n      name: test user\n      password: this-should-be-a-long-value\n```\n\n----------------------------------------\n\nTITLE: Migrating Database and Generating API Types\nDESCRIPTION: Runs database migrations using `make migrate` to ensure the API schema file exists and the database is up-to-date. Subsequently, runs `make gen` to generate TypeScript API client files based on the current API schema, required for the frontend UI.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ make migrate   # On a fresh install, ensures the API schema file is available\n$ make gen       # Generates the API based on the schema file\n```\n\n----------------------------------------\n\nTITLE: Request Payload Format for Creating or Updating User Logout Stage in JSON\nDESCRIPTION: Specifies the JSON structure for POST requests to create or update the user logout stage, focusing on the 'flow_set' array with layout options. This schema is used to configure the presentation layout of the logout stage in the frontend.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{ \"flow_set\": [ { \"layout\": \"stacked\" } ] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Certbot Service (Docker Compose YAML)\nDESCRIPTION: This YAML snippet defines a Docker Compose service for certbot, configured to obtain Let's Encrypt certificates for authentik's web server using a DNS challenge (specifically AWS Route53 in this example). It mounts a local 'certs' directory into the container for certbot output, sets required environment variables for the DNS plugin, and runs the 'certonly' command to fetch the certificates. This configuration is typically added as an override.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/certificates.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    certbot:\n        image: certbot/dns-route53:v1.22.0\n        volumes:\n            - ./certs/:/etc/letsencrypt\n        # Variables depending on DNS Plugin\n        environment:\n            AWS_ACCESS_KEY_ID: ...\n        command:\n            - certonly\n            - --non-interactive\n            - --agree-tos\n            - -m your.email@company\n            - -d authentik.company\n            # Again, match with your provider\n            - --dns-route53\n```\n\n----------------------------------------\n\nTITLE: Boolean Evaluation with !Condition (YAML, Full Example)\nDESCRIPTION: This snippet provides a comprehensive usage of '!Condition', combining several boolean expressions and values using a specified operator such as AND. Supports complex, multi-argument evaluation, including values from context, other tags, strings, and numbers. Result is used as a boolean predicate.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrequired: !Condition [\n    AND, # Valid modes are: AND, NAND, OR, NOR, XOR, XNOR\n    !Context instance_name,\n    !Find [authentik_flows.flow, [slug, default-password-change],\n    \"My string\",\n    123\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving LDAP Outposts (API)\nDESCRIPTION: Updates the response for GET /outposts/ldap/. The response code is 200 OK with content type application/json. Changes affect the 'results' array items (LDAPProvider Serializer), specifically updating the 'application_slug' property description to prioritize the backchannel slug.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_18\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /outposts/ldap/\n```\n\n----------------------------------------\n\nTITLE: API Request Structure for User Write Stage\nDESCRIPTION: Defines the JSON payload for creating or updating a user write stage, including user creation mode, user type, and flow set configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_creation_mode\": \"string\",\n  \"user_type\": \"string\",\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth User Connection - PUT Endpoint\nDESCRIPTION: Updates or creates an OAuth user connection with specified user ID and source configuration, along with property mappings. Ensures proper association of users via OAuth.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"string\",\n  \"user\": \"integer\",\n  \"source\": {...},\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Authentication Source in pgAdmin via Python\nDESCRIPTION: This Python snippet configures pgAdmin to permit only OAuth2 authentication by modifying the AUTHENTICATION_SOURCES parameter. Add this to your config_local.py file to disable internal authentication and ensure only SSO via authentik is allowed. Make sure to promote at least one admin user to prevent lockout. Dependencies: pgAdmin 4, authentik. Input: none; Output: OAuth2 as the exclusive authentication source.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pgadmin/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAUTHENTICATION_SOURCES = ['oauth2']\n```\n\n----------------------------------------\n\nTITLE: Generating a Hexadecimal Exchange Key using OpenSSL in Bash\nDESCRIPTION: This bash command generates a random 32-byte (256-bit) hexadecimal string using OpenSSL's cryptographic pseudo-random number generator. The generated key is used as an exchange key in Wazuh's SAML authentication configuration, providing a secret for securing the communication between the Wazuh Indexer and authentik Identity Provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 32\n```\n\n----------------------------------------\n\nTITLE: Retrieving LDAP Providers - Provider Update\nDESCRIPTION: This documents a `GET` request to `/providers/ldap/` endpoint. It highlights changes related to the LDAPProvider Serializer and the addition of 'invalidation_flow'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_17\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /providers/ldap/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > LDAPProvider Serializer\n\n        New required properties:\n\n        - `invalidation_flow`\n\n        * Added property `invalidation_flow` (string)\n            > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: Create JWT in Python\nDESCRIPTION: Creates a new JSON Web Token (JWT) signed by a given OAuth2 provider for a specified user. Scopes and validity period can be configured. Requires a User object, OAuth2Provider object or name, and a list of scopes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\njwt = ak_create_jwt(request.user, \"my-oauth2-provider-name\", [\"openid\", \"profile\", \"email\"])\n```\n\n----------------------------------------\n\nTITLE: Requesting OAuth2 Token with authentik-Issued JWT - authentik - HTTP\nDESCRIPTION: This HTTP request demonstrates how to authenticate and obtain an access token from authentik using a JWT issued by another trusted authentik provider (for provider federation scenarios available from version 2024.12). Parameters include grant_type (client_credentials), client_assertion_type (jwt-bearer), client_assertion (the authentik-issued JWT), and client_id. Alternatively, client_secret can be used for the JWT. The JWT must be a valid, unrevoked, and unexpired access token from a configured federated authentik provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/oauth2/client_credentials.mdx#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /application/o/token/ HTTP/1.1\nHost: authentik.company\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&\nclient_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&\nclient_assertion=$inputJWT&\nclient_id=application_client_id\n```\n\n----------------------------------------\n\nTITLE: Creating Flow Instances API\nDESCRIPTION: This describes the API endpoint for creating flow instances using a POST request. It specifies the request and response content types, changed properties such as designation, denied_action, authentication, and policy_engine_mode. It's designed to create new flow instances within the system, returning a 201 Created response upon successful creation.  It uses application/json content type.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_36\n\nLANGUAGE: string\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: GET /oauth2/refresh_tokens/ Endpoint Changes\nDESCRIPTION: This describes the changes made to the response for the GET /oauth2/refresh_tokens/ endpoint.  It involves modifications similar to other endpoints: changing the content type to application/json and incorporating the 'authentication_flow' property to the provider object. The `authentication_flow` property controls the user flow for unauthenticated users.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_6\n\nLANGUAGE: N/A\nCODE:\n```\nGET /oauth2/refresh_tokens/&#123;id&#125;/\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `provider` (object)\n\n        > OAuth2Provider Serializer\n\n        - Added property `authentication_flow` (string)\n            > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: Checking LDAP Connection (Kubernetes)\nDESCRIPTION: This command checks the connectivity to configured LDAP servers using Kubernetes. Replace '*slug of the source*' with the actual slug of the LDAP source you want to check the connection for. This is available from authentik version 2023.10 onwards.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/ldap_source.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deployment/authentik-worker -c worker -- ak ldap_check_connection *slug of the source*\n```\n\n----------------------------------------\n\nTITLE: Documentation for OAuth2 Tokens List Endpoint\nDESCRIPTION: Details the GET /stages/prompt/prompts/{prompt_uuid}/ endpoint, returning prompt data including a new 'name' property, serialized by the Prompt Serializer. The response includes the prompt's name for identification.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.2.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"page_title\": \"Prompt Retrieval Endpoint\",\n  \"page_description\": \"API documentation for retrieving prompt details.\",\n  \"page_summary\": \"Specifies JSON response structure with added 'name' property, facilitating prompt identification.\",\n  \"languages\": [\"JSON\"],\n  \"codeSnippets\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Authentik RADIUS Outpost using Docker Compose\nDESCRIPTION: Docker Compose service definition for the Authentik RADIUS outpost. It configures the official RADIUS image, maps the standard RADIUS authentication UDP port (1812), and sets required environment variables (AUTHENTIK_HOST, AUTHENTIK_INSECURE, AUTHENTIK_TOKEN) to connect to the core Authentik server. Optional network configuration is included.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/manual-deploy-docker-compose.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    radius_outpost:\n        image: ghcr.io/goauthentik/radius\n        # Optionally specify which networks the container should be\n        # might be needed to reach the core authentik server\n        # networks:\n        #   - foo\n        ports:\n            - 1812:1812/udp\n        environment:\n            AUTHENTIK_HOST: https://your-authentik.tld\n            AUTHENTIK_INSECURE: \"false\"\n            AUTHENTIK_TOKEN: token-generated-by-authentik\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Reputation Policy (Response Change)\nDESCRIPTION: Describes changes to the GET endpoint for retrieving objects referencing a specific reputation policy. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/reputation/{policy_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: Updating User Write Stage POST Request and Response\nDESCRIPTION: Changes to the User Write Stage POST endpoint for creating new stages, replacing 'can_create_users' with 'user_creation_mode' in both request and response schemas.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.1.md#_snippet_7\n\nLANGUAGE: API\nCODE:\n```\nPOST /stages/user_write/\nRequest:\nChanged content type : application/json\n- Added property `user_creation_mode` (string)\n- Deleted property `can_create_users` (boolean)\n    > When set, this stage can create users. If not enabled and no user is available, stage will fail.\n\nReturn Type:\nChanged response : 201 Created\n- Changed content type : application/json\n    - Added property `user_creation_mode` (string)\n    - Deleted property `can_create_users` (boolean)\n        > When set, this stage can create users. If not enabled and no user is available, stage will fail.\n```\n\n----------------------------------------\n\nTITLE: Documentation for OAuth2 Refresh Token Endpoint\nDESCRIPTION: Describes the GET /oauth2/refresh_tokens/ endpoint, which retrieves a list of refresh tokens serialized by the BaseGrantModel and RefreshToken serializer. The response includes a 'results' array with provider details and 'sub_mode' configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.2.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"page_title\": \"OAuth2 Refresh Token Endpoint\",\n  \"page_description\": \"API documentation for retrieving OAuth2 refresh tokens.\",\n  \"page_summary\": \"Defines the structure of the JSON response, emphasizing the 'results' array and 'provider' object with 'sub_mode' enum.\",\n  \"languages\": [\"JSON\"],\n  \"codeSnippets\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple AWS Role Choices Mapping in authentik (Python)\nDESCRIPTION: Python expression for an authentik SAML Property Mapping. It returns a list of predefined AWS IAM role ARNs, allowing the user to select a role upon login via Classic IAM. Replace `123412341234` with your AWS Account ID and role names (`role_a`, `role_b`, `role_c`) accordingly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/aws/index.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn [\n    \"arn:aws:iam::123412341234:role/role_a,arn:aws:iam::123412341234:saml-provider/authentik\",\n    \"arn:aws:iam::123412341234:role/role_b,arn:aws:iam::123412341234:saml-provider/authentik\",\n    \"arn:aws:iam::123412341234:role/role_c,arn:aws:iam::123412341234:saml-provider/authentik\",\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Development Configuration using Make\nDESCRIPTION: Runs the `gen-dev-config` target in the Makefile. This command generates a local configuration file (e.g., `.env`) tailored for the development environment, typically setting database connection strings and other environment variables.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake gen-dev-config   # Generates a local config file\n```\n\n----------------------------------------\n\nTITLE: Adding OAuth Source Filtering Parameter\nDESCRIPTION: Addition of a new query parameter 'has_jwks' to the OAuth sources endpoint, allowing filtering to only return sources with JWKS (JSON Web Key Set) data.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.1.md#_snippet_3\n\nLANGUAGE: API\nCODE:\n```\nGET /sources/oauth/\nParameters:\nAdded: `has_jwks` in `query`\n> Only return sources with JWKS data\n```\n\n----------------------------------------\n\nTITLE: Configuring environment variables for Docker-Compose deployment in Authentik\nDESCRIPTION: This snippet instructs users on how to disable outbound update checks, analytics, and error reporting by adding the relevant environment variables to the .env file for Docker-Compose deployments of Authentik. The purpose is to prevent outbound network connections in air-gapped environments.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/air-gapped.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTHENTIK_DISABLE_STARTUP_ANALYTICS=true\nAUTHENTIK_DISABLE_UPDATE_CHECK=true\nAUTHENTIK_ERROR_REPORTING__ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Configuring FreshRSS .env file\nDESCRIPTION: This code snippet configures the FreshRSS `.env` file to enable OpenID Connect (OIDC) login with authentik. It sets several environment variables, including enabling OIDC, the OIDC provider metadata URL, client ID, client secret, and scopes.  The  `OIDC_X_FORWARDED_HEADERS` variable configures the handling of forwarded headers when using OIDC. This configuration requires that a matching authentik user exists in FreshRSS and includes example values that should be replaced.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/freshrss/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nOIDC_ENABLED=1\nOIDC_PROVIDER_METADATA_URL=https://authentik.company/application/o/<your-application-slug>/.well-known/openid-configuration\nOIDC_CLIENT_ID=<Your Client ID from authentik<>\nOIDC_CLIENT_SECRET=<Your Client Secret from authentik>\nOIDC_X_FORWARDED_HEADERS=X-Forwarded-Port X-Forwarded-Proto X-Forwarded-Host\nOIDC_SCOPES=openid email profile\n```\n\n----------------------------------------\n\nTITLE: Creating pfSense Server Certificate\nDESCRIPTION: In pfSense, it details how to create a server certificate under the Certificate Manager.  The key settings include descriptive name, certificate creation with internal method, and the Common Name. The certificate is essential for SSL/TLS encrypted communication with authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Pre-Release Security Announcement Discord Template (Markdown)\nDESCRIPTION: A template for the Discord message (@everyone) used to announce an upcoming security release. It mirrors the mailing list template, including placeholders for CVE, time, severity, and fixed versions, suitable for Discord formatting.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n@everyone We'll be publishing a security Issue (CVE-2022-xxxxx) and accompanying fix on _date_, 13:00 UTC with the Severity level High. Fixed versions x, y and z will be released alongside a workaround for previous versions. For more info, see the authentik Security policy here: https://goauthentik.io/docs/security/policy.\n```\n\n----------------------------------------\n\nTITLE: Property Mapping Expression - Python\nDESCRIPTION: This Python code defines a property mapping expression within authentik to manage user permissions in MinIO. It uses the `ak_is_group_member` function to check if a user belongs to a specified group. Based on group membership, it assigns different policies to the user: 'readwrite', 'consoleAdmin', or a custom policy. Users not belonging to any group are mapped to `None`, denying access. It's essential for fine-grained access control within MinIO based on user roles managed by authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/minio/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n  \"policy\": \"readwrite\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Paperless-ngx with Authentik in Docker Compose\nDESCRIPTION: Docker Compose environment variables configuration for enabling Authentik SSO in Paperless-ngx. This includes setting up the OpenID Connect provider with the required client ID, secret, and server URL configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/paperless-ngx/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n    PAPERLESS_APPS: allauth.socialaccount.providers.openid_connect\n    PAPERLESS_SOCIALACCOUNT_PROVIDERS: >\n        {\n          \"openid_connect\": {\n            \"APPS\": [\n              {\n                \"provider_id\": \"authentik\",\n                \"name\": \"Authentik\",\n                \"client_id\": \"<Client ID>\",\n                \"secret\": \"<Client Secret>\",\n                \"settings\": {\n                  \"server_url\": \"https://authentik.company/application/o/<slug>/.well-known/openid-configuration\"\n                }\n              }\n            ],\n            \"OAUTH_PKCE_ENABLED\": \"True\"\n          }\n        }\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik using Docker Compose\nDESCRIPTION: This command is used to update an existing authentik Docker Compose deployment to version 2023.1 after downloading the appropriate docker-compose.yml file. It rebuilds and restarts services in detached mode.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.1.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap for Custom Email Templates in YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes ConfigMap resource that holds custom email templates for authentik. The templates are stored as key-value pairs, where the key is the filename and the value is the file content. The ConfigMap can then be mounted as a volume in the authentik worker pods to allow usage of custom HTML email templates. Users must ensure the ConfigMap is created in the same namespace as authentik and configure their Helm chart to mount the volume accordingly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/email/index.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: authentik-templates\n    namespace: authentik\ndata:\n    my-template.html: |\n        <tr>...\n```\n\n----------------------------------------\n\nTITLE: Creating an External Group in Vault for Group Management\nDESCRIPTION: Creates an external group named 'reader' in Vault with the 'reader' policy assigned. This allows external identity groups from OIDC provider to be managed within Vault for access control.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hashicorp-vault/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvault write identity/group/reader \\\n    name=\"reader\" \\\n    policies=[\"reader\"] \\\n    type=\"external\"\n```\n\n----------------------------------------\n\nTITLE: Evaluating GeoIP Continent in Expression Policy (Python)\nDESCRIPTION: This snippet checks whether the current request context's geoip continent is 'EU', commonly used for region-based access controls. Dependencies: context object with a populated 'geoip' field. Input: context['geoip']['continent']. Output: Boolean. Limitations: Only compares to a hardcoded continent code.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreturn context[\"geoip\"][\"continent\"] == \"EU\"\n```\n\n----------------------------------------\n\nTITLE: Importing Global Styles in JavaScript\nDESCRIPTION: This snippet imports a Global component or styling module from a relative path, intended to apply or reference global CSS or components in the project. It is a JavaScript ES6 module import statement used to manage layout or style data consistently across pages or components.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/interfaces/flow/customization.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Global from \"../_global/global.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik using AWS Cloudformation ECS\nDESCRIPTION: These steps involve the AWS CloudFormation console to update authentik. Users are instructed to navigate to the Changesets tab and create a changeset. Selecting \"Use existing template\" prompts them to proceed with the upgrade. To upgrade to a specific version, the user must select \"Replace existing template\" and provide the URL to the authentik.ecs.VERSION.yaml file, replacing VERSION with the desired version. This utilizes AWS CloudFormation's template-based deployment to perform the update.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/upgrade.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://authentik-cloudformation-templates.s3.amazonaws.com/authentik.ecs.VERSION.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating LDAP Outpost Response (GET /outposts/ldap/{id}/)\nDESCRIPTION: Details the change in the 200 OK response for the GET endpoint retrieving a specific LDAP outpost. The response content type is `application/json`. The `application_slug` property (string) has been updated to prioritize the backchannel slug over the direct application slug.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_7\n\nLANGUAGE: API Definition\nCODE:\n```\nGET /outposts/ldap/{id}/\nResponse: 200 OK\nContent-Type: application/json\nProperties Changed:\n- application_slug (string): Prioritises backchannel slug over direct application slug.\n```\n\n----------------------------------------\n\nTITLE: Enabling Beta Docker Images Setup Using Shell Environment Variables\nDESCRIPTION: This shell snippet defines environment variables to opt into using beta Docker images for authentik development. By placing these variables in a .env file at the project root, developers can switch from stable to beta images to test upcoming features. It includes image repositories, tags, and log level configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/frontend-dev-environment.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nAUTHENTIK_IMAGE=ghcr.io/goauthentik/dev-server\nAUTHENTIK_TAG=gh-next\nAUTHENTIK_OUTPOSTS__CONTAINER_IMAGE_BASE=ghcr.io/goauthentik/dev-%(type)s:gh-next\nAUTHENTIK_LOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Authentication Header - YAML\nDESCRIPTION: This YAML snippet shows the basic configuration for the Home Assistant 'auth_header' custom component. It instructs Home Assistant to read the username directly from the 'X-authentik-username' HTTP header provided by the authentik proxy. This requires the 'hass-auth-header' integration to be installed in Home Assistant.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/home-assistant/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauth_header:\n    username_header: X-authentik-username\n```\n\n----------------------------------------\n\nTITLE: Nested Enumeration with !Enumerate in Mappings (YAML)\nDESCRIPTION: This example demonstrates nested usage of '!Enumerate' to produce mappings to sequences of formatted strings. Each element is repeatedly processed using inner and outer enumeration. The depth parameter in '!Index' and '!Value' selects which enumeration tag is referenced. Limitations involve the minimum allowed depth and restrictions on nesting.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nexample: !Enumerate [\n        !Context sequence, # [\"foo\", \"bar\"]\n        MAP, # Output a map\n        [\n            !Index 0, # Use the indexes of the items in the sequence as keys\n            !Enumerate [\n                # Nested enumeration\n                # Iterate over each item of the parent enumerate tag.\n                # Notice depth is 1, not 0, since we are inside the nested enumeration tag!\n                !Value 1,\n                SEQ, # Output a sequence\n                !Format [\n                    \"%s: (index: %d, letter: %s)\",\n                    !Value 1,\n                    !Index 0,\n                    !Value 0,\n                ],\n            ],\n        ],\n    ]\n```\n\n----------------------------------------\n\nTITLE: Illustrating SP Initiated SSO Flow - Mermaid\nDESCRIPTION: This Mermaid sequence diagram illustrates the steps of a Service Provider (SP) initiated single sign-on flow. The flow begins with the user attempting to access a protected resource directly on the SP (authentik) without being logged in. The SP initiates the authentication process by requesting a SAML assertion from the Identity Provider (IdP). The IdP authenticates the user and returns the assertion to the SP, which then validates it and establishes a session for the user, redirecting their browser to the resource.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/index.mdx#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant User\n    participant IdP as Identity Provider\n    participant SP as authentik\n    participant Browser\n\n    User->>SP: Access resource\n    SP->>IdP: Request SAML assertion\n    IdP->>IdP: Authenticate user\n    IdP->>SP: Return SAML assertion\n    SP->>Browser: Redirect to resource\n```\n\n----------------------------------------\n\nTITLE: Importing Expand Component in Typescript\nDESCRIPTION: This snippet shows how to import the Expand component in Typescript. It is necessary to import the component to use it in your application. There are no parameters in this import. The dependency is the Expand component.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Expand.docs.mdx#_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport \"@goauthentik/elements/Expand.js\";\n```\n\n----------------------------------------\n\nTITLE: Configuring - GlobalProtect SAML - Username Attribute\nDESCRIPTION: This attribute name is configured in the GlobalProtect Authentication Profile under 'Username Attribute'. It tells GlobalProtect which attribute within the received SAML assertion should be used as the authenticated username. By default, authentik provides the username in an attribute named 'username'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/globalprotect/index.md#_snippet_2\n\nLANGUAGE: Configuration\nCODE:\n```\nusername\n```\n\n----------------------------------------\n\nTITLE: Documentation for Listing Prompts with Filter by Name\nDESCRIPTION: Covers the GET /stages/prompt/prompts/ endpoint which includes an optional 'name' query parameter. The response contains a 'results' array of prompts, each with a 'name' property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.2.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"page_title\": \"List Prompts Endpoint\",\n  \"page_description\": \"API documentation for listing prompts, optionally filtered by name.\",\n  \"page_summary\": \"Details the response JSON with 'results' array containing prompt objects that include the 'name' property.\",\n  \"languages\": [\"JSON\"],\n  \"codeSnippets\": []\n}\n```\n\n----------------------------------------\n\nTITLE: GET /providers/ldap/ Endpoint Changes\nDESCRIPTION: This describes a change to the GET /providers/ldap/ endpoint that introduces the authentication_flow property.  It indicates that the response will be application/json, and include the authentication_flow property. This setting defines how unauthenticated users access the associated applications.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_10\n\nLANGUAGE: N/A\nCODE:\n```\nGET /providers/ldap/\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > LDAPProvider Serializer\n\n        - Added property `authentication_flow` (string)\n            > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: Django HTML Email Template for Password Reset in authentik\nDESCRIPTION: This HTML snippet is a Django template used to customize the email sent by authentik during password reset requests. It extends a base email layout and uses Django template tags for internationalization and human-readable timestamps. Key template variables include 'url' (password reset link), 'user' (pending user object), and 'expires' (token expiration timestamp). The template is designed to be rendered by Django's templating engine and supports multi-part emails if paired with a similarly named .txt file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/email/index.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{# This is how you can write comments which aren't rendered. #}\n{# Extend this template from the base email template, which includes base layout and CSS. #}\n{% extends \"email/base.html\" %}\n{# Load the internationalization module to translate strings, and humanize to show date-time #}\n{% load i18n %}\n{% load humanize %}\n{# The email/base.html template uses a single \"content\" block #}\n{% block content %}\n<tr>\n    <td class=\"alert alert-success\">\n        {% blocktrans with username=user.username %} Hi {{ username }}, \n        {% endblocktrans %}\n    </td>\n</tr>\n<tr>\n    <td class=\"content-wrap\">\n        <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n            <tr>\n                <td class=\"content-block\">\n                    {% trans 'You recently requested to change your password for you authentik account. Use the button below to set a new password.' %}                    \n                </td>\n            </tr>\n            <tr>\n                <td class=\"content-block\">\n                    <table\n                        role=\"presentation\"\n                        border=\"0\"\n                        cellpadding=\"0\"\n                        cellspacing=\"0\"\n                        class=\"btn btn-primary\"\n                    >\n                        <tbody>\n                            <tr>\n                                <td align=\"center\">\n                                    <table\n                                        role=\"presentation\"\n                                        border=\"0\"\n                                        cellpadding=\"0\"\n                                        cellspacing=\"0\"\n                                    >\n                                        <tbody>\n                                            <tr>\n                                                <td>\n                                                    <a\n                                                        id=\"confirm\"\n                                                        href=\"{{ url }}\"\n                                                        rel=\"noopener noreferrer\"\n                                                        target=\"_blank\"\n                                                        >{% trans 'Reset Password' %}</a\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"content-block\">\n                    {% blocktrans with expires=expires|naturaltime %}\n                    If you did not request a password change, please ignore this Email. The link above is valid for {{ expires }}.\n                    {% endblocktrans %}\n                </td>\n            </tr>\n        </table>\n    </td>\n</tr>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Mapping SCIM Roles Using Property Mapping in authentik (Python)\nDESCRIPTION: This Python code snippet is intended to be used in the expression field of a SCIM Provider Mapping in authentik, allowing administrators to assign GitHub roles to users based on group membership. It depends on the authentik function ak_is_group_member and expects that user groups such as 'GitHub Admins' are predefined. The code checks if a user is a member of the 'GitHub Admins' group: if true, it assigns the 'enterprise_owner' role, otherwise it assigns the 'user' role, both conforming to GitHub EMU SCIM requirements. Assignment relies on variables defined by authentik (request, user), and outputs a dictionary with a roles property. Edit the group name if your admin group uses a different name. Outputs must follow GitHub’s SCIM specification and only supported roles are valid; invalid configuration will result in provisioning failures.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/github-enterprise-emu/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nroles = []\n# Edit this if statement if you need to add more GitHub roles.\n# Valid roles include:\n# user, guest_collaborator, enterprise_owner, billing_manager\nif ak_is_group_member(request.user, name='GitHub Admins'):\n    roles.append({'value': 'enterprise_owner', 'primary': True})\nelse:\n    roles.append({'value': 'user', 'primary': True})\nreturn {\n    \"roles\": roles,\n}\n```\n\n----------------------------------------\n\nTITLE: Password Stage and Show Password Option Enhancements\nDESCRIPTION: This snippet updates GET, PUT, and PATCH schemas for password stages to include an 'allow_show_password' boolean property. This controls whether a 'show password' button is enabled. Responses and requests are modified accordingly to support this UI feature.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_54\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"Password Stage Show Password Option\",\n  \"details\": \"Adds 'allow_show_password' property to request and response schemas for password stages, enabling UI toggle features for password inputs.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing Email in Authentik Policy (Python)\nDESCRIPTION: This Python snippet is designed for use within an authentik policy expression to enforce the uniqueness of email addresses. It retrieves the email address from the flow context's prompt data, identified by a configurable field name. The code then queries the authentik database to check if a user with that email already exists. If a match is found, it triggers an 'ak_message' indicating the email is in use and returns 'False' to fail the policy; otherwise, it returns 'True', allowing the flow to proceed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression/unique_email.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom authentik.core.models import User\n\n# Ensure this matches the *Field Key* value of the prompt\nfield_name = \"email\"\nemail = request.context[\"prompt_data\"][field_name]\nif User.objects.filter(email=email).exists():\n  ak_message(\"Email address in use\")\n  return False\nreturn True\n```\n\n----------------------------------------\n\nTITLE: Bulk Changing User Types with 'ak' CLI Tool in Shell\nDESCRIPTION: Shell command using the authentik CLI tool (`ak`) within the container to change the type of users. The `--all` flag modifies all users, while `--type internal` sets their type to 'internal'. Specific usernames can be provided instead of `--all` for targeted changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nak change_user_type --all --type internal\n```\n\n----------------------------------------\n\nTITLE: Dovecot OAuth2 Configuration\nDESCRIPTION: This configuration snippet configures Dovecot to use XOAUTH2 authentication. It specifies the token and introspection URLs, the introspection mode, and the attribute mapping for the username. The `tls_ca_cert_file` is used to verify the TLS certificate of the authentik server. Replace placeholders with actual values from authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/roundcube/index.md#_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\ntokeninfo_url = https://authentik.company/application/o/userinfo/?access_token=\nintrospection_url = https://<Client ID>:<Client Secret>@authentik.company/application/o/introspect/\nintrospection_mode = post\nforce_introspection = yes\nactive_attribute = active\nactive_value = true\nusername_attribute = email\ntls_ca_cert_file = /etc/ssl/certs/ca-certificates.crt\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Deployment Replica Count in YAML\nDESCRIPTION: Specifies the number of replicas for the outpost deployment in Kubernetes. This controls the number of running outpost pods.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_replicas: 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Group Alias for External Group Mapping in Vault\nDESCRIPTION: Creates a group alias linking the external group with the OIDC backend using the mount accessor and the group's canonical ID, allowing group membership to be recognized in Vault via OIDC.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hashicorp-vault/index.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nvault write identity/group-alias \\\n    mount_accessor=\"auth_oidc_xxxxxx\" \\\n    canonical_id=\"group_id\" \\\n    name=\"group name in authentik\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik via Helm in Shell\nDESCRIPTION: Shell commands for upgrading an authentik instance deployed on Kubernetes using Helm. It updates the Helm repository cache (`helm repo update`) and then upgrades the authentik release using the specified chart version (`^2024.8`) and a custom values file (`values.yaml`).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^2024.8\n```\n\n----------------------------------------\n\nTITLE: Defining LDAP Property Mappings in Python (New Format)\nDESCRIPTION: Example of the simplified LDAP property mapping format introduced in authentik 2024.8. Shows how to return a dictionary containing user attributes like `username` and nested attributes like `attributes.phone`, utilizing `list_flatten` for specific fields. This format improves performance and readability compared to the previous method.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"username\": ldap.get(\"uid\"), # list_flatten is automatically applied to top-level attributes\n    \"attributes\": {\n        \"phone\": list_flatten(ldap.get(\"phoneNumber\")), # but not for attributes!\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Helm Repository for Kubernetes Deployment in Shell\nDESCRIPTION: These shell commands remove the existing 'passbook' Helm repository and add the new 'authentik' Helm repository, preparing the Kubernetes environment for the upgraded software deployment. This operation is necessary because the Helm chart repository location has changed, reflecting the project's rename, and ensures that future helm upgrades pull the correct charts. Dependencies include Helm CLI installed and configured with access to the Kubernetes cluster.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.13.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo remove passbook\nhelm repo add authentik https://docker.beryju.org/chartrepo/authentik\n```\n\n----------------------------------------\n\nTITLE: tsconfig.json Compiler Options Configuration\nDESCRIPTION: This code snippet represents specific configurations within the tsconfig.json file for the authentik WebUI project. These settings are crucial for ensuring compatibility with various tools and libraries, such as Storybook, Rapidoc, and lit-analyzer. It addresses issues related to class field definitions, tag recognition, import resolution, and generic type parsing.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"useDefineForClassFields\": false,\n    \"plugins\": {\n      \"ts-lit-plugin\": {\n        \"rules\": {\n          \"no-unknown-tag-name\": \"off\",\n          \"no-missing-import\": \"off\",\n          \"no-incompatible-type-binding\": \"warn\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Kubernetes Image Pull Secrets in YAML\nDESCRIPTION: Provides a list of Kubernetes Secret names required to pull the outpost container image from a private registry. The secrets must be manually created in the target namespace beforehand. This applies to non-embedded outposts.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_image_pull_secrets: []\n```\n\n----------------------------------------\n\nTITLE: Live editing of website with Make\nDESCRIPTION: This command starts a live-reloading development server for the authentik documentation website. This allows for real-time viewing of changes as they are made. It utilizes the 'make' build automation tool.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/writing-documentation.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake website-watch\n```\n\n----------------------------------------\n\nTITLE: Downloading Combination Topic Template with wget\nDESCRIPTION: This shell command utilizes the `wget` utility to download the markdown template file for a 'Combination topic' documentation page directly from the official authentik GitHub repository.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/templates/combo.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://raw.githubusercontent.com/goauthentik/authentik/main/website/developer-docs/docs/templates/combo.tmpl.md\n```\n\n----------------------------------------\n\nTITLE: Generating Commit Log for Initial Release Notes (Shell)\nDESCRIPTION: This Git command lists commit subjects (`%s`) prefixed with '- ' between the previous stable release tag (e.g., `version/2022.11.3`) and the new version branch (e.g., `version-2022.12`). The output is used to populate the 'Minor changes/fixes' section of the initial release notes. Replace the tags/branches with the relevant versions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --pretty=format:'- %s' version/2022.11.3...version-2022.12\n```\n\n----------------------------------------\n\nTITLE: Downloading Integration Documentation Template with Shell\nDESCRIPTION: Command to download the service.md template from GitHub repository for documenting new integrations with support level Community or Vendor.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/templates/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://raw.githubusercontent.com/goauthentik/authentik/main/website/integrations/template/service.md\n```\n\n----------------------------------------\n\nTITLE: Updating Password Policy List Response (GET /policies/password/)\nDESCRIPTION: The response body for listing password policies now includes the new configuration fields (`check_static_rules`, `check_have_i_been_pwned`, `check_zxcvbn`, `hibp_allowed_count`, `zxcvbn_score_threshold`) within each policy object in the `results` array.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.11.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"results\": [\n    {\n      // ... other policy properties\n      \"check_static_rules\": true,\n      \"check_have_i_been_pwned\": true,\n      \"check_zxcvbn\": true,\n      \"hibp_allowed_count\": 0,\n      \"zxcvbn_score_threshold\": 3\n    }\n    // ... more policies\n  ]\n  // ... pagination info\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Zulip SAML settings\nDESCRIPTION: This code snippet demonstrates how to configure Zulip's `settings.py` to enable SAML authentication using authentik as the Identity Provider (IdP). It involves setting the organization information and defining the IdP details, including the entity ID, SSO URL, and display name.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/zulip/index.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nSOCIAL_AUTH_SAML_ORG_INFO = {\n    \"en-US\": {\n        \"displayname\": \"authentik Zulip\",\n        \"name\": \"zulip\",\n        \"url\": \"{}{}\".format(\"https://\", EXTERNAL_HOST),\n    },\n}\n\nSOCIAL_AUTH_SAML_ENABLED_IDPS: Dict[str, Any] = {\n    # idp identifier and settings\n    \"authentik\": {\n\n\t    # KEEP OTHER SETTINGS AS DEFAULT OR CONFIGURE THEM ACCORDING TO YOUR PREFERENCES\n        \"entity_id\": \"https://authentik.company\",\n        \"url\": \"https://authentik.company/application/saml/<application slug>/sso/binding/redirect/\",\n        \"display_name\": \"authentik SAML\",\n    },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing group-to-role mapping in authentik for NetBox integration\nDESCRIPTION: Python expression for authentik's scope mapping that transforms NetBox-specific group names to the expected roles. Maps 'netbox_admin' to 'superusers' and 'netbox_staff' to 'staff' for proper role assignment in NetBox.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/netbox/index.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n  \"groups\": [\"superusers\" if group.name == \"netbox_admin\" else \"staff\" if group.name == \"netbox_staff\" else group.name for group in request.user.ak_groups.all()],\n}\n```\n\n----------------------------------------\n\nTITLE: PUT /stages/user_login/ Endpoint Changes\nDESCRIPTION: This describes additions to the PUT /stages/user_login/ endpoint. Specifically, it includes the `remember_me_offset` property in both the request and the response.  The `remember_me_offset` controls the duration of sessions when a user selects the remember me option.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_14\n\nLANGUAGE: N/A\nCODE:\n```\nPUT /stages/user_login/&#123;stage_uuid&#125;/\n###### Request:\n\nChanged content type : `application/json`\n\n- Added property `remember_me_offset` (string)\n    > Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Added property `remember_me_offset` (string)\n        > Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)\n```\n\n----------------------------------------\n\nTITLE: Showing Authentication Method Arguments in Flow Context (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure and potential contents of the `auth_method_args` dictionary within the flow context. This dictionary provides supplementary details related to the `auth_method` key, which specifies how a user authenticated. The contents vary based on the authentication method used, including details about MFA devices, tokens, or JWT information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/flow/context/index.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    // List of the MFA device objects used during authentication\n    // applies for `auth_method` `auth_mfa`\n    \"mfa_devices\": [],\n    // MFA device used for passwordless authentication, applies to\n    // `auth_method` `auth_webauthn_pwl`\n    \"device\": null,\n    // the token identifier when `auth_method` `token` was used\n    \"identifier\": \"\",\n    // JWT information when `auth_method` `jwt` was used\n    \"jwt\": {},\n    \"source\": null,\n    \"provider\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes values for Authentik 2022.11\nDESCRIPTION: YAML configuration for updating Kubernetes values to use the new Authentik 2022.11.1 image. This snippet shows how to set the correct repository and tag for the deployment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.11.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.11.1\n```\n\n----------------------------------------\n\nTITLE: Assigning Permissions to Roles via Authentik Blueprint YAML\nDESCRIPTION: Assigns global permissions to an RBAC role model instance in Authentik using the permissions attribute in YAML blueprints. Roles are identified by name, and permissions are specified as a list of permission strings according to the JSON schema.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/models.mdx#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# [...]\n- model: authentik_rbac.role\n  identifiers:\n      name: test-role\n  attrs:\n      permissions:\n          - authentik_blueprints.view_blueprintinstance\n```\n\n----------------------------------------\n\nTITLE: Defining Routers and Services for Authentik Integration in Traefik - YAML\nDESCRIPTION: This YAML snippet outlines router and service configuration for Traefik, establishing routing rules for the main application and Authentik authentication endpoints, referencing the authentik middleware where appropriate. Required dependencies are a functional Traefik instance and valid network endpoints for both application and Authentik outpost. Routers use host and prefix-based rules; services are configured with load-balanced upstreams. It is important to ensure that services are reachable at specified URLs for successful request forwarding.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_traefik_standalone.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrouters:\n    default-router:\n        rule: \"Host(`app.company`)\"\n        middlewares:\n            - authentik\n        priority: 10\n        service: app\n    default-router-auth:\n        rule: \"Host(`app.company`) && PathPrefix(`/outpost.goauthentik.io/`)\"\n        priority: 15\n        service: authentik\nservices:\n    app:\n        loadBalancer:\n            servers:\n                - url: http://ip.internal\n    authentik:\n        loadBalancer:\n            servers:\n                - url: http://outpost.company:9000/outpost.goauthentik.io\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Client Credentials in Gatus Environment File (YAML)\nDESCRIPTION: This snippet demonstrates how to set OIDC client credentials as environment variables in the Gatus `.env` file, which are later referenced in the main configuration. The `OIDC_CLIENT_ID` and `OIDC_CLIENT_SECRET` must match values configured in the authentik provider. These variables are essential for authenticating Gatus against authentik using OIDC; hard-coding values is discouraged for security reasons. No additional dependencies are required, but ensure Gatus is configured to load environment variables from this file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/gatus/index.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nOIDC_CLIENT_ID=<Your Client ID from authentik>\nOIDC_CLIENT_SECRET=<Your Client Secret from authentik>\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Client Credentials and Endpoints for Keycloak in Elixir\nDESCRIPTION: This snippet sets the OAuth2 client credentials and endpoint URLs required to authenticate with authentik's Keycloak provider. It includes placeholders for the client ID and secret, and defines URLs for authorization, token exchange, and user info retrieval. The HTTP method for token requests is specified as POST, matching OAuth2 best practices.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mobilizon/index.md#_snippet_2\n\nLANGUAGE: Elixir\nCODE:\n```\nconfig :ueberauth, Ueberauth.Strategy.Keycloak.OAuth,\\n  client_id: \"<Client ID>\",\\n  client_secret: \"<Client Secret>\",\\n  site: \"https://authentik.company\",\\n  authorize_url: \"https://authentik.company/application/o/authorize/\",\\n  token_url: \"https://authentik.company/application/o/token/\",\\n  userinfo_url: \"https://authentik.company/application/o/userinfo/\",\\n  token_method: :post\n```\n\n----------------------------------------\n\nTITLE: Rendering Localized Notification Email Template using Django Template Language\nDESCRIPTION: This snippet defines a localized email template used to notify authentik users of generated notifications. It includes translation blocks for static text, safe output of a notification body with indentation preserved, and conditionally renders additional attributes from a key-value dictionary and notification source transport information. It requires Django's template engine with the i18n and custom authentik_stages_email tags. The key parameters include 'body' for the main message, optional 'key_value' dictionary for extra details, and optional 'source' for transport metadata. The output is a multi-line formatted email body ready for sending. This template relies on Django's internationalization framework and secure autoescaping settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/authentik/stages/email/templates/email/event_notification.txt#_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load authentik_stages_email %}{% load i18n %}{% autoescape off %}{% translate \"Dear authentik user,\" %}\n\n{% translate \"The following notification was created:\" %}\n\n    {{ body|indent }}\n\n{% if key_value %}\n{% translate \"Additional attributes:\" %}\n{% for key, value in key_value.items %}\n    {{ key }}: {{ value|indent }}{% endfor %}\n{% endif %}\n\n{% if source %}{% blocktranslate with name=source.from %}\nThis email was sent from the notification transport {{ name }}.\n{% endblocktranslate %}{% endif %}\n\n-- \nPowered by goauthentik.io.\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Creating an OIDC Role in Vault for Authentication\nDESCRIPTION: Creates a role named 'reader' that binds the OIDC configuration with specific redirect URIs, user claim, and policies. This role defines the permissions and redirect settings for users authenticating via OIDC through Vault.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hashicorp-vault/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/oidc/role/reader \\\n      bound_audiences=\"Client ID\" \\\n      allowed_redirect_uris=\"https://vault.company/ui/vault/auth/oidc/oidc/callback\" \\\n      allowed_redirect_uris=\"https://vault.company/oidc/callback\" \\\n      allowed_redirect_uris=\"http://localhost:8250/oidc/callback\" \\\n      user_claim=\"sub\" \\\n      policies=\"reader\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flow Background Image URL via Authentik Blueprint YAML\nDESCRIPTION: Configures a flow model's background attribute to a URL of an image, allowing customization of flow appearance in Authentik. Identification is by flow slug. Attributes set include name, title, designation, and background URL.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/models.mdx#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n# [...]\n- model: authentik_flows.flow\n  identifiers:\n      slug: my-flow\n  attrs:\n      name: my-flow\n      title: My flow\n      designation: authentication\n      background: https://goauthentik.io/img/icon.png\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket via AWS CLI - Bash\nDESCRIPTION: This snippet demonstrates how to create a private S3 bucket named 'authentik-media' using the AWS CLI with custom access credentials and endpoint URL. Dependencies include having the AWS CLI installed and properly configured. Required parameters are 'access_key', 'secret_key', and the provider-specific 'endpoint'. The bucket's ACL is set to private for enhanced security, although object ACLs will also default to private.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/storage-s3.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=access_key AWS_SECRET_ACCESS_KEY=secret_key aws s3api --endpoint-url=https://s3.provider create-bucket --bucket=authentik-media --acl=private\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Image Values for Authentik 2021.12\nDESCRIPTION: YAML configuration for updating Kubernetes values to use the new Authentik 2021.12.1 images from GitHub Container Registry. This snippet specifies the repository and tag to be used in the Kubernetes deployment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2021/v2021.12.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2021.12.1\n```\n\n----------------------------------------\n\nTITLE: Adding User-Visible Access Denial Message in Authentik Policy (Python)\nDESCRIPTION: Shows how to provide an explanatory message to the end user using ak_message, then deny access. Dependency: Authentik policy engine with function ak_message available. Input: message string. Output: Boolean (False) and displayed message. Typically used to inform users of denial reasons.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak_message(\"Access denied\")\nreturn False\n```\n\n----------------------------------------\n\nTITLE: Checking LDAP Connection (Docker Compose)\nDESCRIPTION: This command checks the connectivity to configured LDAP servers using Docker Compose. Replace '*slug of the source*' with the actual slug of the LDAP source you want to check the connection for.  This is available from authentik version 2023.10 onwards.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/ldap_source.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run --rm worker ldap_check_connection *slug of the source*\n```\n\n----------------------------------------\n\nTITLE: Configuring WUD Environment Variables for authentik Integration\nDESCRIPTION: Environment variables to be added to the WUD .env file for connecting to authentik as an OAuth2/OpenID Connect provider. Includes client credentials, discovery endpoint, and redirect configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/whats-up-docker/index.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWUD_AUTH_OIDC_AUTHENTIK_CLIENTID=<Your Client ID>\nWUD_AUTH_OIDC_AUTHENTIK_CLIENTSECRET=<Your Client Secret>\nWUD_AUTH_OIDC_AUTHENTIK_DISCOVERY=https://authentik.company/application/o/wud/.well-known/openid-configuration\nWUD_AUTH_OIDC_AUTHENTIK_REDIRECT=true # Set to true to skip internal login page\n```\n\n----------------------------------------\n\nTITLE: PUT /core/transactional/applications/ API Change\nDESCRIPTION: This entry details changes to the `PUT` request for the `/core/transactional/applications/` endpoint. It specifies the `application/json` content type. The changes include modifications to properties associated with various providers like `oauth2provider`, `proxyprovider`, `samlprovider`, and `ldapprovider`.  These modifications involve updates to properties such as `client_type`, `sub_mode`, `issuer_mode`, `mode`, `sp_binding`, `digest_algorithm`, `signature_algorithm`, and `search_mode` for each respective provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_58\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Custom User Attribute in Authentik with Python\nDESCRIPTION: This Python snippet returns a dictionary containing a custom user attribute from the request object in Authentik. It accesses the user\\'s attributes and falls back to \\'default\\' if the \\'custom_attribute\\' is not defined. Dependencies include a request object with the \\'user\\' and \\'attributes\\' properties. Inputs are the request object; output is a dictionary with the custom attribute value, and if the user is None, this may cause an AttributeError unless handled elsewhere.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_user.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n  \"custom_attribute\": request.user.attributes.get(\"custom_attribute\", \"default\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik using Docker Compose\nDESCRIPTION: This shell script performs the actual upgrade operation. It utilizes `docker compose pull` to download updated images from the image registry, ensuring the latest versions are used. Then, `docker compose up -d` restarts the authentik containers in detached mode, applying the image updates and restarting the authentik services. This assumes a prior installation and configuration of docker-compose.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/upgrade.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: User Consent Serialization Schema Updates\nDESCRIPTION: This snippet updates the user consent GET schema to include a 'results' array of consent objects, modifying the 'user' property's serializer to include a 'groups_obj' array with 'name' properties. These changes improve the detail and clarity of user consent data representation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_56\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"User Consent Schema\",\n  \"details\": \"Enhances the 'user' serializer within the consent results to include 'groups_obj' with 'name' fields, providing more detailed user group information for consent contexts.\"\n}\n```\n\n----------------------------------------\n\nTITLE: MinIO CLI OpenID Config - Bash\nDESCRIPTION: This Bash command configures MinIO to use OpenID Connect for authentication via the command line. It utilizes the `mc admin config set` command to set the identity provider. It specifies `config_url`, `client_id`, `client_secret`, and `scopes`. The `config_url` points to the authentik OpenID configuration endpoint. The `client_id` and `client_secret` are the credentials from the authentik application. The scopes define the requested claims, including 'openid', 'profile', 'email', and a custom 'minio' scope. This command enables OpenID authentication for MinIO.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/minio/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n~ mc admin config set myminio identity_openid \\\n  config_url=\"https://authentik.company/application/o/<minio slug>/.well-known/openid-configuration\" \\\n  client_id=\"<client id>\" \\\n  client_secret=\"<client secret>\" \\\n  scopes=\"openid,profile,email,minio\"\n```\n\n----------------------------------------\n\nTITLE: Adding Home Assistant User Attribute in authentik - YAML\nDESCRIPTION: This YAML configuration is added to the 'Attributes' section of a specific user in the authentik interface. It defines additional HTTP headers that authentik will send when this user is authenticated through the proxy. In this case, it maps the authentik user to a specific Home Assistant username using the 'X-ak-hass-user' header.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/home-assistant/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalHeaders:\n    X-ak-hass-user: hassusername\n```\n\n----------------------------------------\n\nTITLE: Signing X.509 Certificate with OpenSSL in Shell\nDESCRIPTION: This shell command creates an X.509 certificate signed with the PKCS#1 private key and the previously generated CSR, valid for 365 days. Requires OpenSSL and access to both key and CSR files. Inputs are the .csr and the private key; output is a .pem certificate. Used to finalize certificate regeneration before updating authentik and Mautic.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mautic/index.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nopenssl x509 -req -days 365 -in request.csr -signkey private_key_new.pem -out certificate_new.pem\n```\n\n----------------------------------------\n\nTITLE: Repair Permissions in Kubernetes Environment\nDESCRIPTION: This command executes the 'repair_permissions' operation directly inside a Kubernetes deployment called 'authentik-worker'. It uses 'kubectl exec' to run the command within the specified container. Dependencies include Kubernetes cluster access and a deployment named 'authentik-worker'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/missing_permission.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deployment/authentik-worker -c worker -- ak repair_permissions\n```\n\n----------------------------------------\n\nTITLE: Exposing authentik Outpost Service in Kubernetes (YAML)\nDESCRIPTION: Creates a Kubernetes Service named `authentik-outpost` of type ClusterIP. This service exposes the authentik outpost deployment internally within the cluster on ports 9000 (HTTP) and 9443 (HTTPS), routing traffic to the corresponding target ports on the pods selected by the labels. The `__OUTPOST_NAME__` placeholder needs to be replaced.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/manual-deploy-kubernetes.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: __OUTPOST_NAME__\n    app.kubernetes.io/managed-by: goauthentik.io\n    app.kubernetes.io/name: authentik-proxy\n    app.kubernetes.io/version: 2021.12.3\n  name: authentik-outpost\nspec:\n  ports:\n    - name: http\n      port: 9000\n      protocol: TCP\n      targetPort: http\n    - name: https\n      port: 9443\n      protocol: TCP\n      targetPort: https\n  type: ClusterIP\n  selector:\n    app.kubernetes.io/managed-by: goauthentik.io\n    app.kubernetes.io/name: authentik-outpost\n    app.kubernetes.io/instance: __OUTPOST_NAME__\n```\n\n----------------------------------------\n\nTITLE: Retrieving SAML Providers - Provider Update\nDESCRIPTION: This snippet details changes in `GET` request to `/providers/saml/`, focusing on the inclusion of `invalidation_flow` in the `query` parameter and its impact on the return type. It involves updates to the SAMLProvider serializer.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_19\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /providers/saml/\n\n###### Parameters:\n\nAdded: `invalidation_flow` in `query`\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > SAMLProvider Serializer\n\n        New required properties:\n\n        - `invalidation_flow`\n\n        * Added property `invalidation_flow` (string)\n            > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: GET /stages/user_delete/ Response\nDESCRIPTION: This describes the response for a GET request to `/stages/user_delete/`. The response code is 200 OK, with content type `application/json`. The change is in the `results` array with items, specifically UserDeleteStage Serializer objects. The changes affects the `flow_set` array inside, in which, items are modified, and the change in `policy_engine_mode` property is shown.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_50\n\n\n\n----------------------------------------\n\nTITLE: Importing EmptyState Component Typescript\nDESCRIPTION: Imports the custom element definition for the `ak-empty-state` component using an ES module import. This is necessary for the browser to register and correctly render the component.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/EmptyState.docs.mdx#_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport \"@goauthentik/elements/EmptyState.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Certificate into authentik\nDESCRIPTION: Explains how to import the public and private keys of the certificate into authentik. This step is performed after exporting the key pair from pfSense, and is a prerequisite for configuring secure LDAP connections. This involves navigating to System/Certificates and clicking 'create'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Custom Webhook Mapping for SMS Authentication in Python\nDESCRIPTION: Python example for customizing the webhook payload when using the Generic SMS provider. This function formats a custom message including the token to be sent to the user's phone number.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/authenticator_sms/index.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"from\": stage.from_number,\n    \"to\": device.phone_number,\n    \"body\": f\"foo bar baz {token}\".\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint - PUT /stages/deny\nDESCRIPTION: This snippet describes the API endpoint `/stages/deny/{stage_uuid}/` using the HTTP PUT method. It outlines the request and response structures. The request content type is `application/json`, with changes made to properties, including the `flow_set` array. The response also utilizes `application/json`, mirroring the request changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_48\n\nLANGUAGE: API Definition\nCODE:\n```\nPUT /stages/deny/&#123;stage_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n    - Changed property `designation` (string)\n\n        > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n    - Changed property `denied_action` (string)\n\n        > Configure what should happen when a flow denies access to a user.\n\n    - Changed property `policy_engine_mode` (string)\n\n    - Changed property `layout` (string)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        - Changed property `designation` (string)\n\n            > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n        - Changed property `denied_action` (string)\n\n            > Configure what should happen when a flow denies access to a user.\n\n        - Changed property `policy_engine_mode` (string)\n\n        - Changed property `layout` (string)\n```\n\n----------------------------------------\n\nTITLE: Configuring ProFTPD mod_ldap for authentik Authentication (Bash)\nDESCRIPTION: This Bash configuration snippet demonstrates how to configure the ProFTPD `mod_ldap` module to authenticate users against an authentik LDAP outpost. It specifies the LDAP server, bind credentials, user search base and filter (optionally restricting by group membership), default UID/GID forcing, home directory generation, logging, and other LDAP-related settings. Requires the `proftpd-ldap` package and `mod_ldap.c` to be loaded. Replace placeholders like `authentik.company`, `PASSWORDOFLDAPSERVICE`, and `/your/ftp/storage/dir` with actual values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/proftpd/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDefaultRoot /your/ftp/storage/dir\n\n<IfModule mod_ldap.c>\n    LDAPAuthBinds on\n    # Replace this with the server-url:port of your LDAP outpost\n    LDAPServer authentik.company:389\n    # The LDAP Bind account must be specified here\n    LDAPBindDN cn=ldapservice,ou=users,dc=ldap,dc=goauthentik,dc=io PASSWORDOFLDAPSERVICE\n    # The second parameter is optional\n    #  In this case I am restricting access to the group ftpusers\n    #  Instead you could also create bind policies in your created authentik application\n    LDAPUsers ou=users,dc=ldap,dc=goauthentik,dc=io (&(objectClass=user)(cn=%u)(memberOf=cn=ftpusers,ou=groups,dc=ldap,dc=goauthentik,dc=io))\n\n    # In this example, I am forcing the permission of all files to the system user/group 1000\n    LDAPDefaultUID 1000\n    LDAPDefaultGID 1000\n    LDAPForceDefaultUID on\n    LDAPForceDefaultGID on\n\n    # This way I am making a shared folder, which all ftp users share\n    LDAPGenerateHomedir on\n    LDAPGenerateHomedirPrefix /your/ftp/storage/dir\n    LDAPGenerateHomedirPrefixNoUsername on\n\n    LDAPLog /var/log/mod_ldap.log\n\n    RequireValidShell off\n\n    LDAPAttr uid cn\n\n    LDAPSearchScope subtree\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Configuring authentik Redirect URI for Drupal\nDESCRIPTION: Specifies the required Redirect URI format for the OAuth2/OpenID Provider configuration within authentik. This URI is where authentik will redirect the user after successful authentication. Replace 'drupal.company' with the actual FQDN of the Drupal installation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/drupal/index.md#_snippet_0\n\nLANGUAGE: uri\nCODE:\n```\nhttps://<em>drupal.company</em>/openid-connect/generic\n```\n\n----------------------------------------\n\nTITLE: Retrieving All User Connection Sources via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This snippet retrieves all user connection sources (OAuth) by issuing a GET request to `/sources/user_connections/all/`. The JSON response (200 OK) returns a 'results' array where each item contains a 'source' object, which in turn holds the 'managed' and 'policy_engine_mode' properties. The 'policy_engine_mode' specifies the logic for required policies ('all' or 'any') and 'managed' flags objects subject to migrations. Requires an active user session or API credentials.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_32\n\nLANGUAGE: OpenAPI\nCODE:\n```\nGET /sources/user_connections/all/\nResponse 200 (application/json):\n  results: [\n    {\n      source: {\n        managed: string,\n        policy_engine_mode: string // 'all' or 'any'\n      }\n    }, ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress for authentik Outpost in Kubernetes (YAML)\nDESCRIPTION: Sets up a Kubernetes Ingress resource named `authentik-outpost` to manage external access to the outpost service. It routes HTTP traffic for the specified `__EXTERNAL_HOSTNAME__` to the `authentik-outpost` Service on its `http` port (9000). Includes annotations for configuring behavior in Nginx and Traefik ingress controllers, such as enabling session affinity (sticky sessions). Replace `__OUTPOST_NAME__` and `__EXTERNAL_HOSTNAME__` placeholders.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/manual-deploy-kubernetes.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    nginx.ingress.kubernetes.io/affinity: cookie\n    nginx.ingress.kubernetes.io/proxy-buffer-size: 16k\n    nginx.ingress.kubernetes.io/proxy-buffers-number: \"4\"\n    traefik.ingress.kubernetes.io/affinity: \"true\"\n  labels:\n    app.kubernetes.io/instance: __OUTPOST_NAME__\n    app.kubernetes.io/managed-by: goauthentik.io\n    app.kubernetes.io/name: authentik-proxy\n    app.kubernetes.io/version: 2021.12.3\n  name: authentik-outpost\nspec:\n  rules:\n  - host: __EXTERNAL_HOSTNAME__\n    http:\n      paths:\n      - backend:\n          service:\n            name: authentik-outpost\n            port:\n              name: http\n        path: /\n```\n\n----------------------------------------\n\nTITLE: Configuring Ueberauth Provider for Keycloak OAuth2 in Elixir\nDESCRIPTION: This snippet configures the Ueberauth authentication framework in an Elixir application to use Keycloak as an OAuth2/OpenID Connect provider. It specifies the Keycloak strategy with a default scope including 'openid', 'profile', and 'email'. This is essential for Mobilizon to authenticate users via authentik’s OAuth2 endpoints.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mobilizon/index.md#_snippet_0\n\nLANGUAGE: Elixir\nCODE:\n```\nconfig :ueberauth,\\n       Ueberauth,\\n       providers: [\\n         keycloak: {Ueberauth.Strategy.Keycloak, [default_scope: \"openid profile email\"]}\\n       ]\n```\n\n----------------------------------------\n\nTITLE: GET /policies/bindings/{policy_binding_uuid}/ - 200 OK\nDESCRIPTION: Explains the GET endpoint changes for policy bindings focusing on content type.  The `group_obj`, `user_obj` and their related properties (name) are documented here.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /policies/bindings/&#123;policy_binding_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Group Serializer\n\n        - Changed property `name` (string)\n\n    - Changed property `user_obj` (object)\n\n        > User Serializer\n\n        - Changed property `groups_obj` (array)\n\n            Changed items (object): > Simplified Group Serializer for user's groups\n\n            - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik with Helm - Shell\nDESCRIPTION: This snippet shows the necessary commands for upgrading the Authentik instance using Helm within a Kubernetes environment. It first updates the Helm repository, and then uses the `helm upgrade` command to update the authentik deployment with the specified chart and version. The `-f values.yaml` flag specifies the configuration file and `--version ^2025.4` specifies the version to upgrade to.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2025/v2025.4.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^2025.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex OIDC Connector for authentik (YAML)\nDESCRIPTION: This YAML snippet configures Dex to use authentik as an external OIDC provider. It defines the issuer URL of the authentik application, the client ID and secret obtained from authentik, and the redirect URI where authentik will send the authentication response. The `insecureEnableGroups` flag is set to allow group claims.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/terrakube/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nconnectors:\n    - type: oidc\n      id: TerrakubeClient\n      name: TerrakubeClient\n      config:\n          issuer: \"https://authentik.company/application/o/<Your application slug>/\"\n          clientID: $TERRAKUBE_OIDC_CLIENT_ID\n          clientSecret: $TERRAKUBE_OIDC_CLIENT_SECRET\n          redirectURI: \"https://terrakube-dex.company/dex/callback\"\n          insecureEnableGroups: true\n```\n\n----------------------------------------\n\nTITLE: Moving Old PostgreSQL Data Directory in Kubernetes Pod Using shell\nDESCRIPTION: This snippet, run inside the PostgreSQL pod, moves the existing PostgreSQL data directory to a backup location ('data-11'), safeguarding previous data before initializing the new PostgreSQL version. Requires file system access within the pod and appropriate permissions. No special parameters are needed. The process helps prevent data loss during version upgrade failures.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_kubernetes.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# This is the path where the PVC is mounted\ncd /bitnami/postgresql/\n# Move Postgres' data folder to data-11, which is the version we're upgrading to.\n# The data folder can also be deleted; however it is recommended to rename it first\n# in case the upgrade fails.\nmv data data-11\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Bucket CORS Policy - JSON\nDESCRIPTION: This JSON file defines the CORS configuration for the S3 bucket to allow web access from 'authentik.company'. Dependencies: The file should be named 'cors.json' and must be present when applying the policy. Main fields to adjust are 'AllowedOrigins', 'AllowedHeaders', 'AllowedMethods', and 'MaxAgeSeconds'. If multiple origins are used, append them to the 'AllowedOrigins' array. This policy allows GET requests authorized by the 'Authorization' header.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/storage-s3.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"CORSRules\": [\n        {\n            \"AllowedOrigins\": [\"authentik.company\"],\n            \"AllowedHeaders\": [\"Authorization\"],\n            \"AllowedMethods\": [\"GET\"],\n            \"MaxAgeSeconds\": 3000\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Files from S3 to Local Disk - Bash\nDESCRIPTION: This AWS CLI command synchronizes files from the 'authentik-media' S3 bucket ('media' folder) back to the local '/media' directory. Dependencies: AWS CLI must be installed and authenticated to access the relevant S3 bucket. This command allows you to migrate files from cloud storage to local disk, ensuring data portability.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/storage-s3.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws s3 sync s3://authentik-media/media /media\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik using docker-compose for 2023.6 release\nDESCRIPTION: Commands to upgrade an existing authentik installation using docker-compose. This downloads the new docker-compose file and updates the Docker stack to version 2023.6.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.6.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/2023.6/docker-compose.yml\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Python expression for authentik Property Mapping Role Assignment\nDESCRIPTION: This Python code snippet defines an expression used within the authentik property mapping configuration to assign roles based on group membership. It checks if the user belongs to the 'authentik Admins' group and assigns the 'superAdmin' role if true; otherwise, it leaves the result undefined.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/aruba-orchestrator/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif ak_is_group_member(request.user, name=\"authentik Admins\"):\n    result = \"superAdmin\"\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Email Configuration for Authentik\nDESCRIPTION: Configuration block for setting up email capabilities in Authentik, including SMTP settings, authentication, and connection options.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/docker-compose.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# SMTP Host Emails are sent to\nAUTHENTIK_EMAIL__HOST=localhost\nAUTHENTIK_EMAIL__PORT=25\n# Optionally authenticate (don't add quotation marks to your password)\nAUTHENTIK_EMAIL__USERNAME=\nAUTHENTIK_EMAIL__PASSWORD=\n# Use StartTLS\nAUTHENTIK_EMAIL__USE_TLS=false\n# Use SSL\nAUTHENTIK_EMAIL__USE_SSL=false\nAUTHENTIK_EMAIL__TIMEOUT=10\n# Email address authentik will send from, should have a correct @domain\nAUTHENTIK_EMAIL__FROM=authentik@localhost\n```\n\n----------------------------------------\n\nTITLE: Boolean Evaluation with !Condition (YAML, Minimal Form)\nDESCRIPTION: This YAML demonstrates using the '!Condition' tag with minimal configuration to combine boolean arguments using logical operators (e.g., OR, AND). At least one argument after the operator is required, and the result is a merged boolean value.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nrequired: !Condition [OR, true]\n```\n\n----------------------------------------\n\nTITLE: GET /events/rules/{pbm_uuid}/ - 200 OK\nDESCRIPTION: This describes changes in the GET endpoint for event rules. It highlights content type changes along with `group_obj` and the `name` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /events/rules/&#123;pbm_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Group Serializer\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Modifying JSON Response Schema in Authentik API - JSON\nDESCRIPTION: This snippet describes structural changes applied to the JSON response, such as adding and deleting properties in response objects across various endpoints. Dependencies include understanding the Authentik serializer conventions and the OpenAPI/Swagger formats for describing REST endpoints. The primary input/output is JSON; key parameters include new object properties like 'user_property_mappings', 'group_property_mappings', and security-related fields such as 'encryption_kp'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    { \n      \"user_property_mappings\": [ ],\n      \"group_property_mappings\": [ ],\n      \"group_matching_mode\": { },\n      \"encryption_kp\": \"\",\n      \"sign_assertion\": false,\n      \"sign_response\": false\n      // ...additional endpoint-specific properties\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Authentication Error Messages in Shell\nDESCRIPTION: Example of how to format and document error messages in the documentation, showing the error message itself along with possible causes and solutions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/style-guide.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nError: Authentication failed. Invalid credentials.\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Region for AWS S3 Provider - ENV\nDESCRIPTION: This environment variable specifies the AWS region for the S3 bucket when using the official AWS S3 service. Add this line to your '.env' file if your provider is AWS. The value should match the region where the bucket was created. Omitting this when required will prevent Authentik from accessing resources in the correct geographic location.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/storage-s3.md#_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nAUTHENTIK_STORAGE__MEDIA__S3__REGION=us-east-1  # Use the region of the bucket\n```\n\n----------------------------------------\n\nTITLE: PUT /policies/bindings/{policy_binding_uuid}/ - 200 OK\nDESCRIPTION: Details the PUT endpoint updates for policy bindings. Includes content type changes, and  `group_obj`, `user_obj` and  their `name` properties are modified.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n##### `PUT` /policies/bindings/&#123;policy_binding_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Group Serializer\n\n        - Changed property `name` (string)\n\n    - Changed property `user_obj` (object)\n\n        > User Serializer\n\n        - Changed property `groups_obj` (array)\n\n            Changed items (object): > Simplified Group Serializer for user's groups\n\n            - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Constructing Password Reset Email Template in Django Template Language\nDESCRIPTION: This snippet defines a password reset email template using Django Template Language, enabling localization and dynamic content insertion. It requires Django's i18n and humanize template libraries to handle translation and time formatting. Key variables include 'user.username' for greeting, 'url' for the password reset link, and 'expires' formatted with 'naturaltime' to show link expiration in a human-friendly manner. It outputs a personalized email with instructions and security advice in the user's language context.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/authentik/stages/email/templates/email/password_reset.txt#_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}{% load humanize %}{% autoescape off %}{% blocktrans with username=user.username %}Hi {{ username }},{% endblocktrans %}\n\n{% blocktrans %}\nYou recently requested to change your password for your authentik account. Use the link below to set a new password.\n{% endblocktrans %}\n{{ url }}\n{% blocktrans with expires=expires|naturaltime %}\nIf you did not request a password change, please ignore this email. The link above is valid for {{ expires }}.\n{% endblocktrans %}\n\n-- \nPowered by goauthentik.io.\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Write User Data - authentik Events - JSON\nDESCRIPTION: This JSON snippet shows an example of a 'user_write' event, which occurs when a user's data is modified during a flow execution. It includes the user involved, the action type, context detailing the fields being written (name, email, username, attributes), whether the user was newly created, HTTP request info, client IP, timestamps, and brand.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/events/index.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"pk\": \"d012e8af-cb94-4fa2-9e92-961e4eebc060\",\n    \"user\": {\n        \"pk\": 1,\n        \"email\": \"root@localhost\",\n        \"username\": \"akadmin\"\n    },\n    \"action\": \"user_write\",\n    \"app\": \"authentik.events.signals\",\n    \"context\": {\n        \"name\": \"authentik Default Admin\",\n        \"email\": \"root@localhost\",\n        \"created\": false,\n        \"username\": \"akadmin\",\n        \"attributes\": {\n            \"settings\": {\n                \"locale\": \"\"\n            }\n        },\n        \"http_request\": {\n            \"args\": {\n                \"query\": \"\"\n            },\n            \"path\": \"/api/v3/flows/executor/default-user-settings-flow/\",\n            \"method\": \"GET\"\n        }\n    },\n    \"client_ip\": \"::1\",\n    \"created\": \"2023-02-15T15:41:18.411017Z\",\n    \"expires\": \"2024-02-15T15:41:18.410276Z\",\n    \"brand\": {\n        \"pk\": \"fcba828076b94dedb2d5a6b4c5556fa1\",\n        \"app\": \"authentik_brands\",\n        \"name\": \"Default brand\",\n        \"model_name\": \"brand\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: New API Endpoints for Google Workspace Property Mappings\nDESCRIPTION: Describes the new API endpoints added for managing Google Workspace property mappings, including GET and POST operations for collection access and item-specific GET operations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.6.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### `GET` /propertymappings/provider/google_workspace/\n\n##### `POST` /propertymappings/provider/google_workspace/\n\n##### `GET` /propertymappings/provider/google_workspace/{#123;pm_uuid}#125;/\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap for Custom CSS YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes ConfigMap resource named `authentik-custom-css`. It stores the custom CSS content within the `data` field under the key `custom.css`. This ConfigMap serves as the source for mounting the CSS file into authentik pods in a Kubernetes environment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/interfaces/_global/customcss.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: authentik-custom-css\n    namespace: authentik\ndata:\n    custom.css: |\n        ...\n```\n\n----------------------------------------\n\nTITLE: Updating TOTP Authenticator Stage via PUT\nDESCRIPTION: Details changes for the PUT request and response when updating a TOTP Authenticator Stage. Both request and response expect/return `application/json`. Changes involve the `digits` property (now a string: '6' or '8') and the `layout` property within the `flow_set` array items.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nPUT /stages/authenticator/totp/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n// Request/Response Body (application/json)\n{\n  \"digits\": \"6 | 8\",\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\"\n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Authentik API Request Structure Changes - JSON Schema\nDESCRIPTION: This documentation outlines changes to the API request structure, including modifications to the 'app' and 'model' properties. It lists all available options for each property and highlights additions and removals to the enum values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"application/json\": {\n    \"app\": \"string\", // One of the authentik module values\n    \"model\": \"string\" // One of the authentik model values\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PEM File Headers to PKCS#1 Format Using diff Syntax\nDESCRIPTION: This diff snippet demonstrates the manual edit required in a PEM private key file to convert it from the generic PKCS#8 header/footer to the PKCS#1 RSA-specific form expected by Mautic. No dependencies are required; the change must be made in a text editor. This affects only the headers and footers of the file, changing 'PRIVATE KEY' to 'RSA PRIVATE KEY'. Input: PEM file with generic header/footer. Output: PEM file with RSA-labeled header/footer.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mautic/index.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- -----BEGIN PRIVATE KEY-----\n+ -----BEGIN RSA PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgreSQL Diagnostic Mode and Updating Image Tag in values.yaml (YAML)\nDESCRIPTION: This YAML snippet updates the values.yaml configuration used by the authentik Helm chart, enabling diagnostic mode and specifying a new PostgreSQL image tag for upgrade. Diagnostic mode allows the pod to run without the database process, facilitating data manipulation. Requires Helm deployment; applies during upgrade operations. Ensure values.yaml is correctly referenced during the Helm upgrade.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_kubernetes.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npostgresql:\n    diagnosticMode:\n        enabled: true\n    image:\n        tag: 15.2.0-debian-11-r26\n```\n\n----------------------------------------\n\nTITLE: PUT /core/tokens/{identifier}/ - 200 OK\nDESCRIPTION: This details changes to the PUT endpoint for core tokens.  Includes changes to content type and changes to the `user_obj` and `groups_obj` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n##### `PUT` /core/tokens/&#123;identifier&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `user_obj` (object)\n\n        > User Serializer\n\n        - Changed property `groups_obj` (array)\n\n            Changed items (object): > Simplified Group Serializer for user's groups\n\n            - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Extending OAuth Source Serializer with OIDC URLs\nDESCRIPTION: This snippet updates OAuth source API responses to include 'oidc_jwks_url' and 'oidc_well_known_url' properties in both GET and POST responses. These URL properties are required for configuring OpenID Connect identity providers, enabling clients to retrieve keys and discovery information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": {\n    \"oidc_jwks_url\": \"string\",\n    \"oidc_well_known_url\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gitea Helm Chart Configuration with Secret\nDESCRIPTION: This YAML snippet configures Gitea's Helm chart to use an existing Kubernetes secret for authentik integration credentials. It references the `gitea-authentik-secret` secret created earlier, containing the client ID and secret. The `autoDiscoverUrl`, `iconUrl`, and `scopes` fields are also configured. Requires the Kubernetes secret to be created beforehand.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/gitea/index.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngitea:\n    oauth:\n        - name: \"authentik\"\n          provider: \"openidConnect\"\n          existingSecret: gitea-authentik-secret\n          autoDiscoverUrl: \"https://authentik.company/application/o/gitea-slug/.well-known/openid-configuration\"\n          iconUrl: \"https://goauthentik.io/img/icon.png\"\n          scopes: \"email profile\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebAuthn Authenticator Stage Details via GET\nDESCRIPTION: Documents changes in the GET response for a WebAuthn Authenticator Stage. The response content type is `application/json`. The primary change involves modifications to the `flow_set` array items, specifically the `layout` property accepting predefined string values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET /stages/authenticator/webauthn/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n// Response Body (application/json)\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\"\n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration parameters for Aruba Orchestrator SAML Settings\nDESCRIPTION: This snippet details the key configuration parameters to set within Aruba Orchestrator when adding a new SAML-based Remote Authentication Server. Parameters include URLs for authorization and SSO, certificate input, and role attributes, which enable Aruba Orchestrator to authenticate users via authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/aruba-orchestrator/index.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Testing Email Sending via Authentik CLI in Shell\nDESCRIPTION: This shell command tests the email sending functionality of Authentik. It accepts a recipient email address as a mandatory parameter and an optional stage name via '-S' flag to use specific email stage settings instead of the global configuration. Dependencies include having the 'ak' CLI tool configured and the Authentik environment properly set up. The command outputs the result of the email sending attempt to help troubleshoot configuration issues.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/emails.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nak test_email <to address> [-S <stage name>]\n```\n\n----------------------------------------\n\nTITLE: Response Serialization for User Login Stage in JSON\nDESCRIPTION: Defines the JSON structure of the response for user login stages, including properties like 'results' with nested 'network_binding', 'geoip_binding', and 'flow_set' with layout options. It details how session bindings are configured on login, with options for network and geolocation binding strategies.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{ \"results\": [ { \"network_binding\": { \"no_binding\": \"No Binding\", \"bind_asn\": \"Bind Asn\", \"bind_asn_network\": \"Bind Asn Network\", \"bind_asn_network_ip\": \"Bind Asn Network Ip\" }, \"geoip_binding\": { \"no_binding\": \"No Binding\", \"bind_continent\": \"Bind Continent\", \"bind_continent_country\": \"Bind Continent Country\", \"bind_continent_country_city\": \"Bind Continent Country City\" }, \"flow_set\": [ { \"layout\": \"stacked\" } ] } ] }\n```\n\n----------------------------------------\n\nTITLE: Accessing Drupal Admin Configuration Pages\nDESCRIPTION: Provides the URLs for accessing key Drupal administration sections relevant to the OpenID Connect integration: the main admin page, the OpenID Connect module configuration page, and the user account settings page. Replace 'drupal.company' with the Drupal site's FQDN.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/drupal/index.md#_snippet_1\n\nLANGUAGE: uri\nCODE:\n```\nhttps://<em>drupal.company</em>/admin\n```\n\nLANGUAGE: uri\nCODE:\n```\nhttps://<em>drupal.company</em>/admin/config/services/openid-connect\n```\n\nLANGUAGE: uri\nCODE:\n```\nhttps://<em>drupal.company</em>/admin/config/people/accounts\n```\n\n----------------------------------------\n\nTITLE: Helm Upgrade Configuration\nDESCRIPTION: This snippet provides example changes in the Helm chart for version 0.10. It demonstrates changes to the `error_reporting` configuration and the removal of the `apm` and `monitoring` blocks, while adding  `serverReplicas` and `workerReplicas`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.10.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nerror_reporting:\n    enabled: false\n    environment: customer\n    send_pii: false\n```\n\n----------------------------------------\n\nTITLE: Disabling GeoIP via Environment Variables in Docker Compose\nDESCRIPTION: Disables GeoIP and ASN lookups in authentik for Docker Compose deployments by setting the corresponding environment variables in the `.env` file to point to a non-existent file path. This prevents authentik from loading the GeoIP databases.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/geoip.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTHENTIK_EVENTS__CONTEXT_PROCESSORS__GEOIP=/tmp/non-existent-file\nAUTHENTIK_EVENTS__CONTEXT_PROCESSORS__ASN=/tmp/non-existent-file\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik via Docker Compose in Shell\nDESCRIPTION: Shell commands for upgrading an authentik instance deployed with Docker Compose. It first downloads the specific `docker-compose.yml` for version 2024.8 using `wget`, overwriting any existing file with the `-O` flag, and then applies the update and restarts the services using `docker compose up -d`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/2024.8/docker-compose.yml\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Validating LDAP Group Listing with getent on QNAP (Bash)\nDESCRIPTION: This snippet shows how to list existing groups, combining both QNAP local groups and those retrieved via LDAP from authentik, following configuration. Executed on the QNAP NAS console, this aids verification of successful integration. Command must be run with administrative privileges.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/qnap-nas/index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# list groups\n$ getent group\n```\n\n----------------------------------------\n\nTITLE: Configuring Writefreely Registration Settings in config.ini\nDESCRIPTION: Configuration settings for Writefreely that control user registration behavior. Sets open_registration to false while still allowing OAuth-based registration, and provides an option to disable password-based authentication to reduce spam.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/writefreely/index.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nopen_registration     = false\ndisable_password_auth = false\n```\n\n----------------------------------------\n\nTITLE: Additional OIDC Configuration Options for ownCloud\nDESCRIPTION: Supplementary PHP configuration options for enhancing the OIDC integration with authentik. This includes forcing token-based authentication for all clients and enabling automatic redirection to the authentik login page, which can improve the user experience but comes with some operational risks.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/owncloud/index.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$CONFIG = [\n  'token_auth_enforced' => true,  // Forces OIDC authentication on all desktop, Android, and iOS clients, and disconnects existing sessions.\n  'openid-connect' => [\n    'autoRedirectOnLoginPage' => true,  // Enables automatic redirection to the authentik login page\n  ],\n];\n```\n\n----------------------------------------\n\nTITLE: POST /stages/prompt/stages/ Request/Response\nDESCRIPTION: This section describes the changes related to the POST request and response to `/stages/prompt/stages/`. The request has content type `application/json`. Changes are affecting `flow_set` and  `policy_engine_mode` properties. The response is 201 Created with content type `application/json`. It is showing changes related to  `flow_set` and `policy_engine_mode` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_47\n\n\n\n----------------------------------------\n\nTITLE: POST /policies/event_matcher/ - \nDESCRIPTION: Placeholder description\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n##### `POST` /policies/event_matcher/\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Keypair for Docker Access\nDESCRIPTION: This snippet shows the commands to generate an RSA keypair and corresponding certificate for authenticating to remote Docker hosts using SSH. The generated keypair and certificate are used to establish a secure connection. The public key is added to the remote host's authorized_keys file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/integrations/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -f authentik  -N \\\"\\\" -m pem\n# Generate a certificate from the private key, required by authentik.\n# The values that openssl prompts you for are not relevant\nopenssl req -x509 -sha256 -nodes -days 365 -out certificate.pem -key authentik\n```\n\n----------------------------------------\n\nTITLE: Partially Updating Validate Authenticator Stage via PATCH\nDESCRIPTION: Details changes for the PATCH request and response when partially updating a Validate Authenticator Stage. Both request and response expect/return `application/json`. The change involves the `layout` property within the `flow_set` array items.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nPATCH /stages/authenticator/validate/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n// Request/Response Body (application/json)\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\"\n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: SCIM Source Configuration - GET Endpoint\nDESCRIPTION: Retrieves the existing configuration of a SCIM source, including property mappings and token/user serializer configurations. Notably, it excludes user matching mode and displays grouped serializer details.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...],\n  \"token_obj\": {...},\n  \"user_obj\": {...},\n  \"groups_obj\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EspoCRM Token Endpoint in EspoCRM\nDESCRIPTION: This is the URL on the authentik server where EspoCRM sends the authorization code received from the authorization endpoint to exchange it for an access token and ID token. This endpoint is configured within EspoCRM's OIDC settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/espocrm/index.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://<em>authentik.company</em>/application/o/token\n```\n\n----------------------------------------\n\nTITLE: Changing pfSense Default Authentication\nDESCRIPTION: Provides instructions on how to change the default authentication backend used by the pfSense Web UI. It directs users to the 'Settings' tab within the user manager, where they can select 'LDAP authentik' as the authentication server. This completes the integration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Disabling GeoIP via values.yml in Kubernetes\nDESCRIPTION: Disables GeoIP and ASN lookups in authentik for Kubernetes deployments by configuring specific paths within the `values.yml` file. Setting these paths to non-existent files instructs authentik to skip GeoIP processing.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/geoip.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik:\n    events:\n        context_processors:\n            geoip: \"/tmp/non-existent-file\"\n            asn: \"/tmp/non-existent-file\"\n```\n\n----------------------------------------\n\nTITLE: Whitelisting email domains for SSO authentication in authentik Python policy\nDESCRIPTION: This Python expression snippet is used in the `default-source-authentication-if-sso` policy to restrict user authentication to specific email domains during an SSO flow. It checks the email of the authenticated user (`request.user.email`) and denies access if the domain is not in the `allowed_domains` list. Prerequisites include an authenticated user object in the request context.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression/whitelist_email.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nallowed_domains = [\"example.org\", \"example.net\", \"example.com\"]\n\ncurrent_domain = request.user.email.split(\"@\")[1] if hasattr(request.user, 'email') and request.user.email else None\nif current_domain in allowed_domains:\n  return ak_is_sso_flow\nelse:\n  return ak_message(\"Authentication denied for this email domain\")\n```\n\n----------------------------------------\n\nTITLE: Sample auth_method_args for App Password Context (JSON)\nDESCRIPTION: Provides a reference JSON example for the 'auth_method_args' variable when using 'app_password' authentication. Dependencies: Policy context containing appropriate information. Input: N/A (for illustration only). Output: N/A (structure only). Shows fields related to application tokens used for login.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token\": {\n        \"pk\": \"f6d639aac81940f38dcfdc6e0fe2a786\",\n        \"app\": \"authentik_core\",\n        \"name\": \"test (expires=2021-08-23 15:45:54.725880+00:00)\",\n        \"model_name\": \"token\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Object Synchronization Python\nDESCRIPTION: This Python code demonstrates skipping the synchronization of a specific object based on a condition. It raises the `SkipObject` exception if the object's `cn` attribute equals \"doNotSync\", preventing it from being synchronized. This is used within LDAP source property mappings to exclude specific objects from being synchronized.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/protocols/ldap/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif ldap.get(\"cn\") == \"doNotSync\":\n    raise SkipObject\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Database Name in Helm values.yaml (YAML)\nDESCRIPTION: This YAML snippet specifies the PostgreSQL database name used by the authentik deployment within the Helm chart values file. It overrides the default database name to maintain continuity with the existing database ('passbook'), which is important to avoid database connection disruptions post-upgrade. Users must integrate this snippet within their 'values.yaml' file prior to upgrading. No additional dependencies besides a correctly formatted 'values.yaml' file and Helm tooling are required.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.13.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npostgresql:\n    postgresqlDatabase: passbook\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Refresh Interval in YAML\nDESCRIPTION: Configures the interval at which the outpost refreshes providers and invalidates caches (for caching outposts like LDAP) from the main authentik instance. The format is specified in hours, minutes, and seconds.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrefresh_interval: minutes=5\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint - PATCH /stages/email\nDESCRIPTION: This snippet describes the PATCH method for the endpoint `/stages/email/{stage_uuid}/`. The request uses JSON content type and modifies the `flow_set`.  The response type is JSON, reflecting the changes. The operation relates to the email stages of the application.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_55\n\nLANGUAGE: API Definition\nCODE:\n```\n##### `PATCH` /stages/email/&#123;stage_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n    - Changed property `designation` (string)\n\n        > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n    - Changed property `denied_action` (string)\n\n        > Configure what should happen when a flow denies access to a user.\n\n    - Changed property `policy_engine_mode` (string)\n\n    - Changed property `layout` (string)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        - Changed property `designation` (string)\n\n            > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n        - Changed property `denied_action` (string)\n\n            > Configure what should happen when a flow denies access to a user.\n\n        - Changed property `policy_engine_mode` (string)\n\n        - Changed property `layout` (string)\n```\n\n----------------------------------------\n\nTITLE: Configuring NetBird Environment Variables for Authentik Integration\nDESCRIPTION: This snippet provides the necessary environment variables to configure NetBird for Authentik OAuth2 Single Sign-On. These parameters include endpoints, client IDs, scopes, and additional credentials, which are required for proper authentication setup. Restarting Docker containers applies these configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/netbird/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNETBIRD_AUTH_OIDC_CONFIGURATION_ENDPOINT=\"https://authentik.company/application/o/netbird/.well-known/openid-configuration\"\nNETBIRD_USE_AUTH0=false\nNETBIRD_AUTH_CLIENT_ID=\"<Your Client ID>\"\nNETBIRD_AUTH_SUPPORTED_SCOPES=\"openid profile email offline_access api\"\nNETBIRD_AUTH_AUDIENCE=\"<Your Client Secret>\"\nNETBIRD_AUTH_DEVICE_AUTH_CLIENT_ID=\"<Your Client ID>\"\nNETBIRD_AUTH_DEVICE_AUTH_AUDIENCE=\"<Your Client ID>\"\nNETBIRD_MGMT_IDP=\"authentik\"\nNETBIRD_IDP_MGMT_CLIENT_ID=\"<Your Client ID>\"\nNETBIRD_IDP_MGMT_EXTRA_USERNAME=\"Netbird\"\nNETBIRD_IDP_MGMT_EXTRA_PASSWORD=\"<Your Service Account password>\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Kubernetes Ingress TLS Secret Name in YAML\nDESCRIPTION: Defines the name of a Kubernetes Secret containing TLS certificates to be used for the Ingress object. Leaving this empty disables TLS for the ingress.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_ingress_secret_name: authentik-outpost-tls\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik 2024.4 using docker-compose\nDESCRIPTION: Commands to download the new docker-compose file and update the Docker stack to Authentik version 2024.4. The wget command retrieves the configuration file and the docker compose command deploys the updated stack.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/2024.4/docker-compose.yml\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Headers in Authentik Groups/Users (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the `additionalHeaders` attribute on authentik groups or users. This allows setting custom HTTP headers that the proxy outpost will inject into requests for authenticated users belonging to that group or the specific user.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalHeaders:\n    X-test-header: test-value\n```\n\n----------------------------------------\n\nTITLE: API Response and Request for SAML Property Mappings (JSON)\nDESCRIPTION: Defines the JSON structures for managing SAML property mappings, similar to LDAP mappings. Clients can create and list mappings, with the 'managed' flag showing automatic management status.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\"managed\": \"string\"}\n```\n\n----------------------------------------\n\nTITLE: API Request and Response for Scope Mappings (JSON)\nDESCRIPTION: Provides JSON schemas for creating (`POST`) and listing (`GET`) scope mappings, including indication of managed objects via the 'managed' field, enabling client awareness of object management state.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\"managed\": \"string\"}\n```\n\n----------------------------------------\n\nTITLE: Referencing Model Primary Key with !KeyOf (YAML)\nDESCRIPTION: This YAML snippet demonstrates the use of the '!KeyOf' custom tag to fetch the primary key of a model instance by its ID within a blueprint. The tag expects a single argument—the model's ID string. If no entry matches the supplied ID, an error is raised during blueprint validation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npolicy: !KeyOf my-policy-id\n```\n\n----------------------------------------\n\nTITLE: Configure AWX SAML Enabled Identity Providers JSON\nDESCRIPTION: This JSON snippet configures authentik as a SAML Identity Provider (IdP) within AWX. It defines attribute mappings for user information (username, permanent ID, email, first name) and includes the IdP's x.509 certificate, SSO URL, and entity ID. The certificate should be extracted from the authentik SAML provider settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/awx-tower/index.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"authentik\": {\n        \"attr_username\": \"http://schemas.goauthentik.io/2021/02/saml/username\",\n        \"attr_user_permanent_id\": \"http://schemas.goauthentik.io/2021/02/saml/uid\",\n        \"x509cert\": \"MIIDEjCCAfqgAwIBAgIRAJZ9pOZ1g0xjiHtQAAejsMEwDQYJKoZIhvcNAQELBQAwMDEuMCwGA1UEAwwlcGFzc2Jvb2sgU2VsZi1zaWduZWQgU0FNTCBDZXJ0aWZpY2F0ZTAeFw0xOTEyMjYyMDEwNDFaFw0yMDEyMjYyMDEwNDFaMFkxLjAsBgNVBAMMJXBhc3Nib29rIFNlbGYtc2lnbmVkIFNBTUwgQ2VydGlmaWNhdGUxETAPBgNVBAoMCHBhc3Nib29rMRQwEgYDVQQLDAtTZWxmLXNpZ25lZDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAO/ktBYZkY9xAijF4acvzX6Q1K8KoIZeyde8fVgcWBz4L5FgDQ4/dni4k2YAcPdwteGL4nKVzetUzjbRCBUNuO6lqU4J4WNNX4Xg4Ir7XLRoAQeo+omTPBdpJ1p02HjtN5jT01umN3bK2yto1e37CJhK6WJiaXqRewPxh4lI4aqdj3BhFkJ3I3r2qxaWOAXQ6X7fg3w/ny7QP53//ouZo7hSLY3GIcRKgvdjjVM3OW5C3WLpOq5Dez5GWVJ17aeFCfGQ8bwFKde6qfYqyGcU9xHB36TtVHB9hSFP/tUFhkiSOxtsrYwCgCyXm4UTSpP+wiNyjKfFw7qGLBvA2hGTNw8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAh9PeAqPRQk1/SSygIFADZBi08O/DPCshFwEHvJATIcTzcDD8UGAjXh+H5OlkDyX7KyrcaNvYaafCUo63A+WprdtdY5Ty6SBEwTYyiQyQfwM9BfK+imCoif1Ai7xAelD7p9lNazWq7JU+H/Ep7U7Q7LvpxAbK0JArt+IWTb2NcMb3OWE1r0gFbs44O1l6W9UbJTbyLMzbGbe5i+NHlgnwPwuhtRMh0NUYabGHKcHbhwyFhfGAQv2dAp5KF1E5gu6ZzCiFePzc0FrqXQyb2zpFYcJHXquiqaOeG7cZxRHYcjrl10Vxzki64XVA9BpdELgKSnupDGUEJsRUt3WVOmvZuA\",\n        \"url\": \"https://authentik.company/application/saml/<slug>/sso/binding/redirect/\",\n        \"entity_id\": \"https://awx.company/sso/metadata/saml/\",\n        \"attr_email\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\",\n        \"attr_first_name\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Settings in RustDesk Server Pro\nDESCRIPTION: Sets up the OAuth2/OIDC provider in RustDesk Server Pro via its web UI, entering authentication endpoints, client credentials, and issuer information based on the authentik setup. This configuration allows RustDesk to delegate authentication to authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/rustdesk-pro/index.mdx#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Updating Validate Authenticator Stage via PUT\nDESCRIPTION: Details changes for the PUT request and response when updating a Validate Authenticator Stage. Both request and response expect/return `application/json`. The change involves the `layout` property within the `flow_set` array items.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nPUT /stages/authenticator/validate/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n// Request/Response Body (application/json)\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\"\n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Istio AuthorizationPolicy with authentik Provider (YAML)\nDESCRIPTION: This YAML snippet defines an Istio AuthorizationPolicy that enforces custom external authorization using the previously configured 'authentik' provider. The policy targets the Istio ingress gateway (identified by the label `istio: ingressgateway`) and applies the authentik authorization check to requests for the specified host(s) (e.g., `app.company`). Multiple hosts can be listed or separate policies created.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_envoy_istio.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n    name: authentik-policy\n    namespace: istio-system\nspec:\n    selector:\n        matchLabels:\n            istio: ingressgateway\n    action: CUSTOM\n    provider:\n        name: \"authentik\"\n    rules:\n        - to:\n              - operation:\n                    hosts:\n                        # You can create a single resource and list all Domain names here, or create multiple resources\n                        - \"app.company\"\n```\n\n----------------------------------------\n\nTITLE: Example IDP Metadata Configuration\nDESCRIPTION: This XML snippet provides an example of IDP metadata, which is used to configure authentik as a SAML Service Provider. It contains information about the IDP, such as its entity ID, supported protocols, name ID formats, single sign-on service endpoints, organization details, and contact information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/protocols/saml/index.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<md:EntityDescriptor entityID=\"https://saml.company/idp\">\n    <md:IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\" WantAuthnRequestsSigned=\"false\">\n        <md:NameIDFormat>\n            urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n        </md:NameIDFormat>\n        <md:NameIDFormat>\n            urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n        </md:NameIDFormat>\n        <md:NameIDFormat>\n            urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n        </md:NameIDFormat>\n        <md:NameIDFormat>\n            urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n        </md:NameIDFormat>\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://saml.company/login/saml/\"/>\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://saml.company/login/saml/\"/>\n    </md:IDPSSODescriptor>\n    <md:Organization>\n        <md:OrganizationName xml:lang=\"en\">Example Organization</md:OrganizationName>\n        <md:OrganizationDisplayName xml:lang=\"en\">Example Organization</md:OrganizationDisplayName>\n        <md:OrganizationURL xml:lang=\"en\">http://www.company</md:OrganizationURL>\n    </md:Organization>\n    <md:ContactPerson contactType=\"technical\">\n        <md:Company>Example Organization</md:Company>\n        <md:GivenName>John</md:GivenName>\n        <md:SurName>Doe</md:SurName>\n        <md:EmailAddress>john.doe@company</md:EmailAddress>\n        <md:TelephoneNumber>012 345 67890</md:TelephoneNumber>\n    </md:ContactPerson>\n    <md:ContactPerson contactType=\"support\">\n        <md:Company>Example Organization</md:Company>\n        <md:GivenName>Helpdesk</md:GivenName>\n        <md:SurName>Support</md:SurName>\n        <md:EmailAddress>helpdesk@company</md:EmailAddress>\n        <md:TelephoneNumber>012 345 67890</md:TelephoneNumber>\n    </md:ContactPerson>\n</md:EntityDescriptor>\n```\n\n----------------------------------------\n\nTITLE: Configure AWX SAML Service Provider Contact Info JSON\nDESCRIPTION: This JSON snippet provides contact information for the AWX SAML Service Provider, typically used for technical or support contacts. It includes the given name and email address of the contact.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/awx-tower/index.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"givenName\": \"Admin Name\",\n    \"emailAddress\": \"admin@company\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Actual Budget with Environment Variables\nDESCRIPTION: This snippet shows how to configure Actual Budget using environment variables.  It provides the necessary variables to set up OpenID Connect with authentik, including the discovery URL, client ID, client secret, and server hostname. These values are specific to your authentik installation and the created application.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/actual-budget/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nACTUAL_OPENID_DISCOVERY_URL=https://authentik.company/application/o/<your-application-slug>/\nACTUAL_OPENID_CLIENT_ID=Your Client ID from authentik\nACTUAL_OPENID_CLIENT_SECRET=Your Client Secret from authentik\nACTUAL_OPENID_SERVER_HOSTNAME=https://actual.company\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace Log Level in Docker and Kubernetes\nDESCRIPTION: Guidelines to activate 'trace' level logs in Docker and Kubernetes environments. Use environment variables or configuration files. Recreate containers after updates. Caution advised due to potential exposure of sensitive information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/logs.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nAUTHENTIK_LOG_LEVEL=trace\n```\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik:\n    log_level: trace\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik with Docker Compose - Shell\nDESCRIPTION: This snippet provides the command-line instructions for upgrading an Authentik instance using Docker Compose. It involves downloading the new docker-compose file and updating the Docker stack with the new version.  The `-O` flag in the `wget` command ensures that the downloaded file overwrites the existing one. The `docker compose up -d` command then applies the changes in the new compose file, restarting the services in detached mode.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2025/v2025.4.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/xxxx.x/docker-compose.yml\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Controlling Docker Port Mapping in YAML\nDESCRIPTION: Enables or disables the mapping of ports from the host to the outpost container. Disabling this can be useful when using Docker networks. This setting is specific to Docker outposts and non-embedded deployments.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndocker_map_ports: true\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint - DELETE/GET /stages/email\nDESCRIPTION: This snippet describes the API endpoints `/stages/email/{stage_uuid}/` with both DELETE and GET methods. These definitions outline the request and response structures for interaction with email stages. GET requests retrieve resource information, while DELETE removes it. The response includes the `application/json` content type and returns a status of 200 OK.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_53\n\nLANGUAGE: API Definition\nCODE:\n```\n##### `DELETE` /stages/email/&#123;stage_uuid&#125;/\n\n##### `GET` /stages/email/&#123;stage_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        - Changed property `designation` (string)\n\n            > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n        - Changed property `denied_action` (string)\n\n            > Configure what should happen when a flow denies access to a user.\n\n        - Changed property `policy_engine_mode` (string)\n\n        - Changed property `layout` (string)\n```\n\n----------------------------------------\n\nTITLE: Restarting Authentik with New PostgreSQL\nDESCRIPTION: Command to restart the entire Authentik stack with the upgraded PostgreSQL database.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --force-recreate -d\n```\n\n----------------------------------------\n\nTITLE: Configuring User Attributes for HTTP Basic Authentication in Authentik\nDESCRIPTION: Example YAML configuration showing how to set the app_username and app_password attributes on a user or group level. These attributes are used when the 'Send HTTP-Basic Authentication' option is enabled in a proxy provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/header_authentication.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napp_username: admin\napp_password: admin-password\n```\n\n----------------------------------------\n\nTITLE: Adding captcha_stage to Identification Stage Partial Update (PATCH /stages/identification/{uuid})\nDESCRIPTION: Modifies the PATCH /stages/identification/{stage_uuid}/ endpoint. The `captcha_stage` property (string) can now be included in the JSON request body for partial updates to enable or disable integrated Captcha functionality. This property is also returned in the 200 OK response.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n// Request Body / 200 OK Response Body Addition\n{\n  \"captcha_stage\": \"string\", // Optional: When set, adds functionality exactly like a Captcha stage.\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Updating `GET /outposts/proxy/{id}/` Response (JSON)\nDESCRIPTION: Describes the modification to the `mode` property within the `200 OK` JSON response for the `GET /outposts/proxy/{id}/` endpoint. The updated description clarifies its use for enabling forwardAuth support.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nChanged response : **200 OK**\n- Changed content type : `application/json`\n    - Changed property `mode` (string)\n        > Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.\n```\n\n----------------------------------------\n\nTITLE: Obtaining Azure AD M2M Token (HTTP Request)\nDESCRIPTION: This HTTP request example demonstrates how to acquire a JWT access token from Azure AD using the client credentials grant type for machine-to-machine (M2M) authentication. It specifies the required POST method, endpoint (`login.microsoftonline.com`), content type (`application/x-www-form-urlencoded`), and form parameters (`grant_type`, `client_id`, `scope`, `client_secret`), emphasizing setting the `scope` to the application ID URI (`api://<application_client_id>/.default`) for the correct token format required by authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/azure-ad/index.mdx#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /<azure-ad-tenant-id>/oauth2/v2.0/token/ HTTP/1.1\nHost: login.microsoftonline.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&\nclient_id=<application_client_id>&\nscope=api://<application_client_id>/.default&\nclient_secret=<application_client_secret>\n```\n\n----------------------------------------\n\nTITLE: Querying SAML User Connection Sources via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This sample covers GET requests to `/sources/user_connections/saml/` for listing SAML user connection sources. Each item in the response 'results' array contains a nested 'source' object with 'managed' status and 'policy_engine_mode' (accepting 'all' or 'any'). Requires that the user has the appropriate rights; objects with 'managed' flag may be overwritten after API-level changes or system migrations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_38\n\nLANGUAGE: OpenAPI\nCODE:\n```\nGET /sources/user_connections/saml/\nResponse 200 (application/json):\n  results: [\n    {\n      source: {\n        managed: string,\n        policy_engine_mode: string // 'all' or 'any'\n      }\n    }, ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Setting OIDC as Default Login Method in Nextcloud using Bash\nDESCRIPTION: This bash command configures Nextcloud to use OpenID Connect (OIDC) as the default login method. It sets the `allow_multiple_user_backends` configuration option for the `user_oidc` application to 0, effectively redirecting users to authentik upon accessing Nextcloud.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/nextcloud/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u www-data php var/www/nextcloud/occ config:app:set --value=0 user_oidc allow_multiple_user_backends\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian/Ubuntu\nDESCRIPTION: Installs required development libraries (libgss-dev, krb5-config, libkrb5-dev, postgresql-server-dev-all) and services (postgresql, redis) using the `apt-get` package manager. It also installs the `uv` Python package manager using `pip`. Golangci-lint requires separate installation per official instructions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install uv\n$ sudo apt-get install  libgss-dev krb5-config libkrb5-dev postgresql-server-dev-all\n$ sudo apt-get install postresql redis\n```\n\n----------------------------------------\n\nTITLE: GET /oauth2/authorization_codes/ Endpoint Changes\nDESCRIPTION: This snippet outlines modifications to the response structure of the GET /oauth2/authorization_codes/ endpoint. The changes mirror those made to the /oauth2/access_tokens/ endpoint, involving a content type change to application/json and the addition of an `authentication_flow` property within the provider object. The 'authentication_flow' explains the authentication flow for unauthenticated users.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_5\n\nLANGUAGE: N/A\nCODE:\n```\nGET /oauth2/authorization_codes/&#123;id&#125;/\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `provider` (object)\n\n        > OAuth2Provider Serializer\n\n        - Added property `authentication_flow` (string)\n            > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Response Schema (Implicit GET)\nDESCRIPTION: Describes changes to the 200 OK response for a provider-related GET endpoint. The response content type is now `application/json`. The `managed` property (string) indicates if the object is managed by authentik migrations. The `providers_obj` array now requires `assigned_backchannel_application_name` and `assigned_backchannel_application_slug` for its items, providing details about the assigned backchannel application.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_6\n\nLANGUAGE: API Definition\nCODE:\n```\nResponse: 200 OK\nContent-Type: application/json\nProperties Changed:\n- managed (string): Indicates if the object is managed by authentik migrations.\n- providers_obj (array):\n  - Items (object: Provider Serializer):\n    - New required properties:\n      - assigned_backchannel_application_name (string): Application's display name.\n      - assigned_backchannel_application_slug (string): Internal application name used in URLs.\n```\n\n----------------------------------------\n\nTITLE: Configuring Outpost Log Level in YAML\nDESCRIPTION: Sets the logging verbosity for the authentik outpost. Supported levels are trace, debug, info, warning, and error. This setting is applicable only to non-embedded outposts.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlog_level: debug\n```\n\n----------------------------------------\n\nTITLE: Sample auth_method_args for LDAP Context (JSON)\nDESCRIPTION: Shows an illustrative JSON representation of the 'auth_method_args' structure when authentication occurs via LDAP binding. Dependencies: LDAP authentication flow with a source object present. Input: N/A. Output: N/A. Primarily useful for understanding variable structures in flow context.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"source\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Client Certificate and SNI to LDAP Source Endpoints - JSON\nDESCRIPTION: This schema shows the addition of client_certificate (a string containing the client certificate value) and sni (a boolean to indicate Server Name Indication usage) in requests and responses for /sources/ldap/{slug}/. Requires the client to supply a valid client certificate to authenticate against the LDAP server's certificate, and optionally enable SNI support. Both properties are optional but recommended for secure deployments. Ensure the LDAP server and client are configured appropriately, as improper certificate handling or SNI settings can block authentication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.6.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_certificate\": \"<PEM-encoded cert>\",\n  \"sni\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating WebAuthn Authenticator Stage via PUT\nDESCRIPTION: Details changes for the PUT request and response when updating a WebAuthn Authenticator Stage. Both request and response expect/return `application/json`. The change involves the `layout` property within the `flow_set` array items.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nPUT /stages/authenticator/webauthn/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n// Request/Response Body (application/json)\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\"\n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Outposts Endpoint Changes in Authentik\nDESCRIPTION: Updates to the LDAP Outposts endpoint (/outposts/ldap/{id}/) including a new MFA support property and clarifications for UID and GID numbering. The MFA support enables code-based multi-factor authentication by appending the TOTP code to passwords with a semicolon separator.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.6.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mfa_support\": true,\n  \"uid_start_number\": 2000,\n  \"gid_start_number\": 4000\n}\n```\n\n----------------------------------------\n\nTITLE: Available Model Types for Event Matching in Authentik API\nDESCRIPTION: A comprehensive list of available model types that can be specified in the 'model' property when making API requests. These models can be used to match events created by specific resources within the Authentik system.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.6.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"authentik_core.application\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for List of Prompt Stages (JSON)\nDESCRIPTION: This snippet demonstrates the JSON response when listing prompt stages via GET. It contains a 'results' array with each element as a serialized PromptStage object, including nested flow configurations such as 'flow_set' with layout, designation, and policy properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_76\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"flow_set\": [\n        {\n          \"designation\": \"string\",\n          \"denied_action\": \"string\",\n          \"policy_engine_mode\": \"string\",\n          \"layout\": \"string\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for Prompt Stage List Retrieval (JSON Serialization)\nDESCRIPTION: This snippet illustrates the JSON structure returned when retrieving a list of prompt stages via GET request. It includes an array of prompt stages ('results') each containing flow configuration details, such as 'flow_set' with serialized flow properties, layout, and access policies.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_72\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"flow_set\": [\n        {\n          \"designation\": \"string\",\n          \"denied_action\": \"string\",\n          \"policy_engine_mode\": \"string\",\n          \"layout\": \"string\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables with !Env (YAML)\nDESCRIPTION: This YAML snippet employs the '!Env' tag to access a system environment variable by name within a blueprint. An optional default value can be provided as a second argument. If the environment variable does not exist and no default is supplied, the blueprint will error.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npassword: !Env my_env_var\n```\n\n----------------------------------------\n\nTITLE: Importing authentik data (kubernetes, shell)\nDESCRIPTION: This snippet provides shell commands to import previously exported data into a new authentik instance running in kubernetes. It copies the dump file from the local machine to the 'authentik-web' pod and then executes the `loaddata` management command inside the pod to populate the database.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.9.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl cp authentik_dump.json authentik-web-...:/tmp/authentik_dump.json\nkubectl exec -it authentik-web-... -- ./manage.py loaddata /tmp/authentik_dump.json\n```\n\n----------------------------------------\n\nTITLE: Importing Certificate Manually (authentik CLI)\nDESCRIPTION: This shell command is used within the authentik worker container to manually import a certificate and optionally its private key into authentik's database. It takes the paths to the certificate and private key files on the container filesystem and a name for the certificate entry. The command is idempotent and suitable for cron jobs to keep the certificate updated.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/certificates.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nak import_certificate --certificate /certs/mycert.pem --private-key /certs/something.pem --name test\n```\n\nLANGUAGE: shell\nCODE:\n```\n# --private-key can be omitted to only import a certificate, i.e. to trust other connections\nak import_certificate --certificate /certs/othercert.pem --name test2\n```\n\n----------------------------------------\n\nTITLE: Configuring IstioOperator for authentik ExtAuthz (YAML)\nDESCRIPTION: This YAML snippet configures the IstioOperator resource to define authentik as an external authorization provider. It specifies the authentik outpost service address (`service`), port (`port`), authorization path (`pathPrefix`), and headers to manage (`headersToDownstreamOnAllow`, `headersToUpstreamOnAllow`, `includeRequestHeadersInCheck`) for the Envoy proxy's external authorization filter. The `service` value must be updated to match the actual authentik outpost service in the Kubernetes cluster.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_envoy_istio.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nmetadata:\n    name: istio\n    namespace: istio-system\nspec:\n    meshConfig:\n        extensionProviders:\n            - name: \"authentik\"\n              envoyExtAuthzHttp:\n                  # Replace with <service-name>.<namespace>.svc.cluster.local\n                  service: \"ak-outpost-authentik-embedded-outpost.authentik.svc.cluster.local\"\n                  port: \"9000\"\n                  pathPrefix: \"/outpost.goauthentik.io/auth/envoy\"\n                  headersToDownstreamOnAllow:\n                      - cookie\n                  headersToUpstreamOnAllow:\n                      - set-cookie\n                      - x-authentik-*\n                      # Add authorization headers to the allow list if you need proxy providers which\n                      # send a custom HTTP-Basic Authentication header based on values from authentik\n                      # - authorization\n                  includeRequestHeadersInCheck:\n                      - cookie\n```\n\n----------------------------------------\n\nTITLE: GET /core/brands/ - 200 OK\nDESCRIPTION: This explains the GET endpoint for brands. The property `results` in the response has changes in its items (object).  The addition of property `default_application` is also reflected here.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /core/brands/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > Brand Serializer\n\n        - Added property `default_application` (string)\n            > When set, external users will be redirected to this application after authenticating.\n```\n\n----------------------------------------\n\nTITLE: Configuring Komga's OAuth2 Client in application.yml (YAML)\nDESCRIPTION: This snippet details the YAML configuration required in Komga's application.yml to enable OAuth2 authentication with Authentik. It specifies client identification, scopes, redirect URL, and issuer URI, with notes on selecting the user-name attribute. Dependencies include valid client id, secret, and application slug from Authentik setup.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/komga/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nspring:\n    security:\n        oauth2:\n            client:\n                registration:\n                    authentik:\n                        provider: authentik\n                        client-id: <client id>\n                        client-secret: <client secret>\n                        client-name: authentik\n                        scope: openid,email,profile\n                        authorization-grant-type: authorization_code\n                        redirect-uri: \"{baseUrl}/{action}/oauth2/code/{registrationId}\"\n                provider:\n                    authentik:\n                        user-name-attribute: preferred_username\n                        issuer-uri: https://authentik.company/application/o/<application slug>/\n```\n\n----------------------------------------\n\nTITLE: Viewing Past Logs Using Docker and Kubectl\nDESCRIPTION: Methods to review historical logs with `docker logs` and `kubectl logs` using the `--since` parameter. Supports durations and timestamps to filter logs after a specific point in time.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/logs.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker logs <container_name_or_id> --since 5m\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl logs --since 5m <pod_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring EspoCRM Logout URL in EspoCRM\nDESCRIPTION: This is the URL on the authentik server that EspoCRM redirects the user to when they initiate a logout within EspoCRM. This allows authentik to perform a single logout, terminating the user's session with the identity provider. This URL is configured in EspoCRM.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/espocrm/index.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://<em>authentik.company</em>/application/o/<em>your-application-slug</em>/end_session\n```\n\n----------------------------------------\n\nTITLE: GET /stages/authenticator/static/ API Response\nDESCRIPTION: This describes the response of a GET request to the /stages/authenticator/static/ endpoint.  It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: PUT /core/users/{id}/ - 200 OK\nDESCRIPTION: Details changes to the PUT endpoint for users, covering content type and the `groups_obj` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n##### `PUT` /core/users/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `groups_obj` (array)\n\n        Changed items (object): > Simplified Group Serializer for user's groups\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik on Kubernetes using Helm for 2023.6 release\nDESCRIPTION: Commands to upgrade an existing authentik Helm deployment on Kubernetes. This updates the Helm repository and upgrades the authentik chart to version 2023.6.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.6.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^2023.6\n```\n\n----------------------------------------\n\nTITLE: User Delete Stage Schema Modifications in Authentik (POST/GET, JSON)\nDESCRIPTION: Documents the JSON schema for both the creation and listing of user delete stages, with emphasis on allowed 'layout' values within each flow object. The POST request creates stages and GET retrieves collections, both using consistent nested object structures for extensibility and modular frontend rendering. HTTP 201 and 200 codes indicate success.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"flow_set\": [\n        {\n          \"layout\": \"content_left\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Discord roles to authentik groups on authentication (Python)\nDESCRIPTION: This Python code synchronizes Discord roles with authentik groups during user authentication via Discord OAuth. It fetches user's guild membership from Discord API and updates the user's authentik groups based on their Discord roles defined in the `discord_role_id` attribute. It requires the `requests` and `authentik.core.models.Group` libraries.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/discord/index.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom authentik.core.models import Group\nGUILD_API_URL = \"https://discord.com/api/users/@me/guilds/{guild_id}/member\"\n\n### CONFIG ###\nguild_id = \"<YOUR GUILD ID>\"\n##############\n\n# Ensure flow is only run during OAuth logins via Discord\nif context[\"source\"].provider_type != \"discord\":\n    return True\n\n# Get the user-source connection object from the context, and get the access token\nconnection = context.get(\"goauthentik.io/sources/connection\")\nif not connection:\n    return False\naccess_token = connection.access_token\n\nguild_member_request = requests.get(\n    GUILD_API_URL.format(guild_id=guild_id),\n    headers={\n        \"Authorization\": f\"Bearer {access_token}\"\n    },\n)\nguild_member_info = guild_member_request.json()\n\n# Ensure we are not being ratelimited\nif guild_member_request.status_code == 429:\n    ak_message(f\"Discord is throttling this connection. Retry in {int(guild_member_info['retry_after'])}s\")\n    return False\n\n# Ensure user is a member of the guild\nif \"code\" in guild_member_info:\n    if guild_member_info[\"code\"] == 10004:\n        ak_message(\"User is not a member of the guild\")\n    else:\n        ak_create_event(\"discord_error\", source=context[\"source\"], code=guild_member_info[\"code\"])\n        ak_message(\"Discord API error, try again later.\")\n    return False\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Context Data with !Enumerate (YAML, Sequence)\nDESCRIPTION: This YAML snippet demonstrates generating a sequence by iterating over a mapping from context using the '!Enumerate' tag. Inline '!Index', '!Format', and '!Value' tags provide flexible composition. The first argument is the iterable, the second the output type ('SEQ'), and the third describes the per-item output. Dependencies include context variables and referenced tags.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration_stages: !Enumerate [\n        !Context map_of_totp_stage_names_and_types,\n        SEQ, # Output a sequence\n        !Find [\n            !Format [\n                \"authentik_stages_authenticator_%s.authenticator%sstage\",\n                !Index 0,\n                !Index 0,\n            ],\n            [name, !Value 0],\n        ], # The value of each item in the sequence\n    ]\n```\n\n----------------------------------------\n\nTITLE: Updating `POST /flows/instances/import/` Response Structure (JSON)\nDESCRIPTION: Details changes in the JSON response structure for the `POST /flows/instances/import/` endpoint. Both 204 No Content and 400 Bad Request responses now include a `logs` array where each object represents a log message and requires `attributes`, `event`, `log_level`, `logger`, and `timestamp` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nChanged response : **204 No Content**\n- Changed content type : `application/json`\n    - Changed property `logs` (array)\n        Changed items (object): > Single log message with all context logged.\n        New required properties:\n        - `attributes`\n        - `event`\n        - `log_level`\n        - `logger`\n        - `timestamp`\n        * Added property `timestamp` (string)\n        * Added property `log_level` (string)\n        * Added property `logger` (string)\n        * Added property `event` (string)\n        * Added property `attributes` (object)\n\nChanged response : **400 Bad Request**\n- Changed content type : `application/json`\n    - Changed property `logs` (array)\n        Changed items (object): > Single log message with all context logged.\n        New required properties:\n        - `attributes`\n        - `event`\n        - `log_level`\n        - `logger`\n        - `timestamp`\n        * Added property `timestamp` (string)\n        * Added property `log_level` (string)\n        * Added property `logger` (string)\n        * Added property `event` (string)\n        * Added property `attributes` (object)\n```\n\n----------------------------------------\n\nTITLE: API Schema for GET /stages/authenticator/totp/{stage_uuid}/\nDESCRIPTION: Defines the response schema for retrieving TOTP authenticator stage information, including properties like digits (number of digits in totp code) and flow_set configuration. Used for fetching current TOTP stage settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"digits\": {\"type\": \"string\"},\n    \"flow_set\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"designation\": {\"type\": \"string\"},\n          \"denied_action\": {\"type\": \"string\"},\n          \"policy_engine_mode\": {\"type\": \"string\"},\n          \"layout\": {\"type\": \"string\"}\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET /sources/scim_groups/{id}/ - 200 OK\nDESCRIPTION: Documenting the changes related to the GET endpoint for SCIM groups sources with the same pattern as other group endpoints.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /sources/scim_groups/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Simplified Group Serializer for user's groups\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Update SharePoint Farm Properties for OIDC\nDESCRIPTION: This PowerShell script configures SharePoint farm properties to work with OpenID Connect (OIDC). It creates a self-signed certificate, grants permissions to the web application pool account, and updates the farm properties with the certificate thumbprint and a secret key. Update the <web application pool account> placeholder with the correct account.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/sharepoint-se/index.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PSSnapin microsoft.sharepoint.powershell\n\n# Setup farm properties to work with OIDC\n$cert = New-SelfSignedCertificate -CertStoreLocation Cert:\\LocalMachine\\My -Provider 'Microsoft Enhanced RSA and AES Cryptographic Provider' -Subject \"CN=SharePoint Cookie Cert\"\n$rsaCert = [System.Security.Cryptography.X509Certificates.RSACertificateExtensions]::GetRSAPrivateKey($cert)\n$fileName = $rsaCert.key.UniqueName\n\n#If you have multiple SharePoint servers in the farm, you need to export certificate by Export-PfxCertificate and import certificate to all other SharePoint servers in the farm by Import-PfxCertificate and apply the same permissions as below.\n\n#After certificate is successfully imported to SharePoint Server, we will need to grant access permission to certificate private key.\n\n$path = \"$env:ALLUSERSPROFILE\\Microsoft\\Crypto\\RSA\\MachineKeys\\$fileName\"\n$permissions = Get-Acl -Path $path\n\n#Please replace the <web application pool account> with the real application pool account of your web application.\n$access_rule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"$($env:computername)\\WSS_WPG\", 'Read', 'None', 'None', 'Allow')\n$permissions.AddAccessRule($access_rule)\nSet-Acl -Path $path -AclObject $permissions\n\n#Then we update farm properties only once.\n$f = Get-SPFarm\n$f.Farm.Properties['SP-NonceCookieCertificateThumbprint']=$cert.Thumbprint\n$f.Farm.Properties['SP-NonceCookieHMACSecretKey']='seed'\n$f.Farm.Update()\n```\n\n----------------------------------------\n\nTITLE: Reloading Wazuh Role Mapping Configuration with securityadmin.sh in Bash\nDESCRIPTION: This bash command reloads the updated role mappings to the Wazuh Indexer OpenSearch security plugin by running securityadmin.sh with the roles mapping configuration file. It uses the necessary certificates and specifies the Wazuh Indexer host to apply the role changes without full reconfiguration of other security components.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=/usr/share/wazuh-indexer/jdk/ && bash /usr/share/wazuh-indexer/plugins/opensearch-security/tools/securityadmin.sh -f /etc/wazuh-indexer/opensearch-security/roles_mapping.yml -icl -key /etc/wazuh-indexer/certs/admin-key.pem -cert /etc/wazuh-indexer/certs/admin.pem -cacert /etc/wazuh-indexer/certs/root-ca.pem -h wazuh-indexer.company -nhnv\n```\n\n----------------------------------------\n\nTITLE: Checking Github Organization Membership with Python Policy in authentik\nDESCRIPTION: This Python snippet is intended for use as a policy in authentik flows to verify if an authenticated user is a member of a specified Github organization. It requires the 'requests' library and assumes that the source is configured for Github OAuth with the 'read:org' scope enabled. The script accesses the OAuth context for provider details and tokens, performs a GitHub API call to the /user/orgs endpoint, and checks if the user belongs to the designated organization. Inputs include the context object with OAuth user info, and key outputs include a boolean result and an error message for unauthorized users.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/github/index.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Ensure flow is only run during oauth logins via Github\nif context[\"source\"].provider_type != \"github\":\n    return True\n\naccepted_org = \"foo\"\n\n# Get the user-source connection object from the context, and get the access token\nconnection = context[\"goauthentik.io/sources/connection\"]\naccess_token = connection.access_token\n\n# We also access the user info authentik already retrieved, to get the correct username\ngithub_username = context[\"oauth_userinfo\"]\n\n# Github does not include Organisations in the userinfo endpoint, so we have to call another URL\n\norgs_response = requests.get(\n    \"https://api.github.com/user/orgs\",\n    auth=(github_username[\"login\"], access_token),\n    headers={\n        \"accept\": \"application/vnd.github.v3+json\"\n    }\n)\norgs_response.raise_for_status()\norgs = orgs_response.json()\n\n# `orgs` will be formatted like this\n# [\n#     {\n#         \"login\": \"goauthentik\",\n#         [...]\n#     }\n# ]\nuser_matched = any(org['login'] == accepted_org for org in orgs)\nif not user_matched:\n    ak_message(f\"User is not member of {accepted_org}.\")\nreturn user_matched\n```\n\n----------------------------------------\n\nTITLE: Updating authentik image tag in Kubernetes\nDESCRIPTION: This YAML snippet shows the configuration required to update the authentik server image tag within a Kubernetes deployment configuration (e.g., a values.yaml file) to version 2023.1.0.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.1.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2023.1.0\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Models for Transactional Applications (PUT /core/transactional/applications/)\nDESCRIPTION: Updates the JSON request body for PUT /core/transactional/applications/. Various provider models nested within the `provider` object have been modified: `invalidation_flow` (string) added as required for OAuth2, RADIUS, Proxy, RAC, SAML, LDAP providers; `encryption_key` (string) added for OAuth2; `verify_certificates` (boolean) added for SCIM; `signing_key` (string) description updated for OAuth2.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n// Request Body Snippet\n{\n  \"provider\": {\n    // Based on selected provider_model (e.g., 'authentik_providers_oauth2.oauth2provider')\n    // OAuth2 Changes:\n    \"invalidation_flow\": \"string\", // Required: Flow used ending the session from a provider.\n    \"encryption_key\": \"string\",    // Added: Key used to encrypt the tokens (JWE).\n    \"signing_key\": \"string\",       // Description potentially updated: Key used to sign the tokens.\n    \n    // RADIUS, Proxy, RAC, SAML, LDAP Changes:\n    \"invalidation_flow\": \"string\", // Required: Flow used ending the session from a provider.\n\n    // SCIM Changes:\n    \"verify_certificates\": false,  // Added (boolean)\n\n    // ... other provider-specific properties\n  }\n  // ... other application properties\n}\n```\n\n----------------------------------------\n\nTITLE: Configure authentik SAML Provider and Application with Terraform\nDESCRIPTION: This Terraform code snippet defines an authentik SAML provider and an application linked to it for SonarQube. It configures the SAML provider with the necessary URLs and settings for SonarQube, including the ACS URL, issuer, audience, and property mappings. The application is then created and linked to the SAML provider, enabling SAML-based authentication for SonarQube through authentik. This relies on existing flow and property mapping.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/sonar-qube/index.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"authentik_flow\" \"default-provider-authorization-implicit-consent\" {\n  slug = \"default-provider-authorization-implicit-consent\"\n}\n\ndata \"authentik_property_mapping_saml\" \"saml-sonar-qube\" {\n  managed_list = [\n    \"goauthentik.io/providers/saml/email\",\n    \"goauthentik.io/providers/saml/username\",\n    \"goauthentik.io/providers/saml/name\"\n  ]\n}\n\nresource \"authentik_provider_saml\" \"provider_sonar-qube\" {\n    name                = \"SonarQube\"\n\n    authorization_flow  = data.authentik_flow.default-provider-authorization-implicit-consent.id\n\n    acs_url    = \"https://sonarqube.company/oauth2/callback/saml\"\n    issuer     = \"https://authentik.company/\"\n    sp_binding = \"post\"\n    audience   = \"https://sonarqube.company/saml2/metadata\"\n\n    property_mappings = data.authentik_property_mapping_saml.saml-sonar-qube.ids\n}\n\nresource \"authentik_application\" \"application_sonar-qube\" {\n    name              = \"SonarQube\"\n    slug              = \"sonarqube\"\n    protocol_provider = authentik_provider_saml.provider_sonar-qube.id\n}\n\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Token Retrieval API\nDESCRIPTION: This section describes the API endpoints for retrieving OAuth2 tokens, including access tokens, authorization codes, and refresh tokens. The GET operations return details of tokens, including their provider and associated user data. The content type is application/json. Includes the client_type, sub_mode, and issuer_mode in OAuth2Provider Serializer.  Includes user type information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_38\n\nLANGUAGE: string\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Logic with !If and !Condition (YAML)\nDESCRIPTION: This snippet demonstrates combining '!If' and '!Condition' to add nested, complex conditional logic to a blueprint. The condition is evaluated as a boolean, with the second and third arguments being resolved YAML expressions for the true and false branches, allowing custom tags in both.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nattributes: !If [\n        !Condition [...], # Or any valid YAML or custom tag. Evaluated as boolean in Python\n        {\n            # When condition evaluates to true\n            dictionary:\n                {\n                    with: { keys: \"and_values\" },\n                    and_nested_custom_tags: !Format [\"foo-%s\", !Context foo],\n                },\n        },\n        [\n            # When condition evaluates to false\n            list,\n            with,\n            items,\n            !Format [\"foo-%s\", !Context foo],\n        ],\n    ]\n```\n\n----------------------------------------\n\nTITLE: POST /flows/executor/{flow_slug}/ API Change\nDESCRIPTION: This documents changes for the `POST` request for the `/flows/executor/{flow_slug}/` endpoint.  The request type is `application/json`. It details the updates in the `ak-source-oauth-apple` component. The changes reflect how flows are executed with Apple OAuth.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_64\n\n\n\n----------------------------------------\n\nTITLE: API Endpoint Documentation for Source Object Retrieval and Modification (Application/JSON)\nDESCRIPTION: This snippet documents GET, PUT, PATCH, and DELETE API endpoints for managing user connection sources, primarily focusing on the 'source' object which includes properties like 'user_matching_mode' and 'policy_engine_mode'. It explains how these endpoints retrieve or modify source configurations, such as SAML or Plex connections, returning JSON objects with relevant properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_32\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"response\": \"200 OK\", \"content_type\": \"application/json\", \"properties\": { \"source\": { \"serializer\": \"Source Serializer\", \"properties\": { \"user_matching_mode\": \"Defines user authentication/enrollment logic\", \"policy_engine_mode\": \"Policy engine configuration\" } } } }\n```\n\n----------------------------------------\n\nTITLE: API Schema for GET /stages/authenticator/static/{stage_uuid}/\nDESCRIPTION: Defines the response structure for retrieving static authenticator stage details, focusing on the flow_set configuration which includes flow definitions and layout. Used to fetch current static stage settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"flow_set\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"designation\": {\"type\": \"string\"},\n          \"denied_action\": {\"type\": \"string\"},\n          \"policy_engine_mode\": {\"type\": \"string\"},\n          \"layout\": {\"type\": \"string\"}\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Source Icon URL via Authentik Blueprint YAML\nDESCRIPTION: Sets the icon attribute of various source models such as OAuth, SAML, or Plex to a direct URL via YAML blueprints. This enables quick visual identification of sources in the Authentik interface. The snippet uses the source slug for identification and assigns name and icon URL attributes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/models.mdx#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n# [...]\n- model: authentik_sources_oauth.oauthsource\n  identifiers:\n      slug: my-source\n  attrs:\n      name: My source\n      icon: https://goauthentik.io/img/icon.png\n```\n\n----------------------------------------\n\nTITLE: POST /stages/prompt/prompts/preview/ Request/Response\nDESCRIPTION: This details the request and response for a POST request to `/stages/prompt/prompts/preview/`. The request content type is `application/json` and properties are added as `initial_value` and `initial_value_expression` and changes to `placeholder` property and similar changes to `promptstage_set`, `flow_set`, and `policy_engine_mode` properties. The response is 200 OK with content type `application/json`. The `fields` array is changed, where `initial_value` property is added to the array items. \nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_46\n\n\n\n----------------------------------------\n\nTITLE: Lookup Model with !Find (YAML)\nDESCRIPTION: These YAML snippets illustrate the usage of the '!Find' custom tag to query model instances. The first argument is the model to query, and subsequent arguments specify key-value pairs used for filtering. It resolves to the primary key of the matched entry; if no match is found, an error is raised.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfigure_flow: !Find [authentik_flows.flow, [slug, default-password-change]]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nconfigure_flow:\n    !Find [\n        authentik_flows.flow,\n        [!Context property_name, !Context property_value],\n    ]\n```\n\n----------------------------------------\n\nTITLE: Authorize Application - authentik Events - JSON\nDESCRIPTION: This JSON snippet provides an example of the 'authorize_application' event, logged when a user grants authorization to an application. The event includes user details, the action type, context with geographical and network information (ASN, GeoIP), the flow used, requested scopes, HTTP request details, information about the authorized application, client IP, timestamps, and brand.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/events/index.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"pk\": \"f52f9eb9-dc2a-4f1e-afea-ad5af90bf680\",\n    \"user\": {\n        \"pk\": 1,\n        \"email\": \"root@localhost\",\n        \"username\": \"akadmin\"\n    },\n    \"action\": \"authorize_application\",\n    \"app\": \"authentik.providers.oauth2.views.authorize\",\n    \"context\": {\n        \"asn\": {\n            \"asn\": 6805,\n            \"as_org\": \"Telefonica Germany\",\n            \"network\": \"5.4.0.0/14\"\n        },\n        \"geo\": {\n            \"lat\": 42.0,\n            \"city\": \"placeholder\",\n            \"long\": 42.0,\n            \"country\": \"placeholder\",\n            \"continent\": \"placeholder\"\n        },\n        \"flow\": \"53287faa8a644b6cb124cb602a84282f\",\n        \"scopes\": \"ak_proxy profile openid email\",\n        \"http_request\": {\n            \"args\": {\n                \"query\": \"[...]\"\n            },\n            \"path\": \"/api/v3/flows/executor/default-provider-authorization-implicit-consent/\",\n            \"method\": \"GET\"\n        },\n        \"authorized_application\": {\n            \"pk\": \"bed6a2495fdc4b2e8c3f93cb2ed7e021\",\n            \"app\": \"authentik_core\",\n            \"name\": \"Alertmanager\",\n            \"model_name\": \"application\"\n        }\n    },\n    \"client_ip\": \"::1\",\n    \"created\": \"2023-02-15T10:02:48.615499Z\",\n    \"expires\": \"2023-04-26T10:02:48.612809Z\",\n    \"brand\": {\n        \"pk\": \"10800be643d44842ab9d97cb5f898ce9\",\n        \"app\": \"authentik_brands\",\n        \"name\": \"Default brand\",\n        \"model_name\": \"brand\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Image for authentik 2022.10.1\nDESCRIPTION: YAML configuration snippet demonstrating how to update the authentik server image repository and tag to version 2022.10.1 within a Kubernetes values file. This is a required step when upgrading an authentik deployment running on Kubernetes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.10.1\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Authentication Domain in Wazuh Indexer YAML\nDESCRIPTION: This YAML snippet configures the Wazuh Indexer OpenSearch security plugin to enable SAML authentication alongside the default basic internal authentication. It defines the 'saml_auth_domain' with parameters including the metadata file path for the Identity Provider, entity IDs, the Kibana URL, SAML roles key, and the previously generated exchange key. Proper ordering and challenge flags are set to ensure authentication precedence. This snippet must be added inside the 'authc' section of the OpenSearch security 'config.yml' file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthc:\n    basic_internal_auth_domain:\n        description: \"Authenticate SAML against internal users database\"\n        http_enabled: true\n        transport_enabled: true\n        order: 0\n        http_authenticator:\n            type: basic\n            challenge: false\n        authentication_backend:\n            type: intern\n    saml_auth_domain:\n        http_enabled: true\n        transport_enabled: false\n        order: 1\n        http_authenticator:\n            type: saml\n            challenge: true\n            config:\n                idp:\n                    metadata_file: \"/etc/wazuh-indexer/opensearch-security/wazuh_authentik_meta.xml\"\n                    entity_id: \"wazuh-saml\"\n                sp:\n                    entity_id: \"wazuh-saml\"\n                kibana_url: \"https://wazuh-dashboard.company/\"\n                roles_key: Roles\n                exchange_key: \"<exchange key generated in step 1>\"\n        authentication_backend:\n            type: noop\n```\n\n----------------------------------------\n\nTITLE: Starting Development Databases with Docker Compose\nDESCRIPTION: Navigates to the `/scripts` directory within the authentik repository and starts the pre-configured PostgreSQL and Redis services in detached mode using Docker Compose. This provides the necessary databases for local development.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/authentik/scripts\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Upgrading Kubernetes image configuration\nDESCRIPTION: Instructions for updating the authentik image in a Kubernetes deployment to the 2022.4 version.  It specifies the image repository and tag to use.  This snippet facilitates the update of authentik instances within a Kubernetes cluster to a specific version.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.4.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Kubernetes\n\nUpdate your values to use the new images:\n\n```yaml\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.4.1\n```\n```\n\n----------------------------------------\n\nTITLE: Documentation for Patching Prompt via PATCH\nDESCRIPTION: Details the PATCH /stages/prompt/prompts/{prompt_uuid}/ endpoint, which accepts a JSON body with an optional 'name' property to modify the prompt's name. The response includes the updated 'name'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.2.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"page_title\": \"Patch Prompt Endpoint (PATCH)\",\n  \"page_description\": \"API documentation for partially updating a prompt's details.\",\n  \"page_summary\": \"Describes the request structure with 'name' as optional and the response reflecting the updated 'name'.\",\n  \"languages\": [\"JSON\"],\n  \"codeSnippets\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LDAP Outposts\nDESCRIPTION: This explains a `GET` request to the `/outposts/ldap/` endpoint and the return type. It focuses on the addition of  `unbind_flow_slug` as a new required property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_15\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /outposts/ldap/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > LDAPProvider Serializer\n\n        New required properties:\n\n        - `unbind_flow_slug`\n\n        * Added property `unbind_flow_slug` (string)\n            > Get slug for unbind flow, defaulting to brand's default flow.\n```\n\n----------------------------------------\n\nTITLE: Adding default_relay_state Property to SAML Provider API Responses\nDESCRIPTION: This snippet details the inclusion of the 'default_relay_state' property in SAML provider API responses for GET and POST methods, representing the default relay state value used during IDP-initiated login flows. It improves the ability to manage relay states via API.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"default_relay_state\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a flow context key in Expression policies with Python\nDESCRIPTION: This snippet demonstrates how to set a new key-value pair inside the 'flow_plan' context dictionary within an Expression policy using Python. It modifies the 'redirect_stage_target' key to customize the URL for redirected authentication flow stages. Dependencies include having the 'context' variable with a 'flow_plan' object already available in the policy execution environment. The snippet expects the 'context' structure to be mutable and returns no output but updates in-place.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression/managing_flow_context_keys.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncontext['flow_plan'].context['redirect_stage_target'] = 'ak-flow://redirected-authentication-flow'\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic User Creation in pgAdmin via Python\nDESCRIPTION: This Python snippet disables automatic creation of users upon first OAuth2 login in pgAdmin. Add it to your config_local.py to enforce manual user administration. Set OAUTH2_AUTO_CREATE_USER to False as shown. Dependencies: pgAdmin 4, authentik. Input: none; Output: Only first signed-in user is registered; new users require administrative action.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pgadmin/index.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nOAUTH2_AUTO_CREATE_USER = False\n```\n\n----------------------------------------\n\nTITLE: Retrieving Applications - Provider Update\nDESCRIPTION: This snippet describes a `GET` request to `/core/applications/` and the associated return type. It highlights changes to existing properties within the response payload, specifically regarding the `invalidation_flow` property. It also mentions dependencies on Provider and Application serializers.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_8\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /core/applications/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > Application Serializer\n\n        - Changed property `provider_obj` (object)\n\n            > Provider Serializer\n\n            New required properties:\n\n            - `invalidation_flow`\n\n            * Added property `invalidation_flow` (string)\n                > Flow used ending the session from a provider.\n\n        - Changed property `backchannel_providers_obj` (array)\n\n            Changed items (object): > Provider Serializer\n\n            New required properties:\n\n            - `invalidation_flow`\n\n            * Added property `invalidation_flow` (string)\n                > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: SAML Source Configuration - PUT Endpoint\nDESCRIPTION: Submits updated configuration data for a specific SAML source. Requires property mappings, group matching mode, and optional encryption keypair. The response reflects the updated source settings, allowing clients to modify existing configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...],\n  \"group_matching_mode\": {...},\n  \"encryption_kp\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External GeoIP Updates via values.yml in Kubernetes\nDESCRIPTION: Enables and configures automatic external GeoIP database updates within a Kubernetes deployment by modifying the `values.yml` file. This involves setting `geoip.enabled` to true and providing the MaxMind account ID, license key, desired database editions, image version, and update interval (in hours).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/geoip.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngeoip:\n    enabled: true\n    accountId: \"*your account ID*\"\n    licenseKey: \"*your license key*\"\n    editionIds: \"GeoLite2-City GeoLite2-ASN\"\n    image: maxmindinc/geoipupdate:v4.8\n    updateInterval: 8\n```\n\n----------------------------------------\n\nTITLE: API Response and Request Structure for User Logout Stage\nDESCRIPTION: Specifies the JSON structure for user logout stage, including flow set details. Used for retrieving, creating, and updating logout stage configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"flow_set\": [\n        {\n          \"designation\": \"string\",\n          \"denied_action\": \"string\",\n          \"policy_engine_mode\": \"string\",\n          \"layout\": \"string\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Identification Stage Property Schema Changes\nDESCRIPTION: The collection updates GET, PUT, and PATCH schemas for identification stages identified by UUIDs, focusing on the 'password_stage' property. These modifications involve adding or modifying the 'password_stage' as a string, indicating password form behavior, with responses reflecting the same property changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_53\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"Identification Stage Configuration Changes\",\n  \"details\": \"Updates include adding or modifying the 'password_stage' property to control password input step, with schema responses reflecting these changes across GET, PUT, and PATCH methods.\"\n}\n```\n\n----------------------------------------\n\nTITLE: GET /stages/authenticator/sms/ API Response\nDESCRIPTION: This describes the response of a GET request to the /stages/authenticator/sms/ endpoint.  It includes addition of a 'mapping' property and changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: OAuth2 Provider JWT Federation Implementation\nDESCRIPTION: Changes to OAuth2 Provider model adding JWT federation capabilities and removing JWKS sources. This affects multiple endpoints including access tokens, authorization codes, and refresh tokens.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.12.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider\": {\n    \"jwt_federation_sources\": [],\n    \"jwt_federation_providers\": [],\n    \"jwks_sources\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deny Stage POST and GET Endpoint Changes\nDESCRIPTION: This section describes changes to the POST and GET endpoints for /stages/deny/. It focuses on modifications to the request and response structures, including adjustments to the `flow_set` property. Also includes changes in the DenyStage Serializer and the stripped down flow serializer.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_69\n\n\n\n----------------------------------------\n\nTITLE: Configuring Zabbix IDP Certificate Path in PHP\nDESCRIPTION: Specifies the file path for the SAML Identity Provider (IDP) certificate (`IDP_CERT`) in the Zabbix frontend configuration file (`zabbix.conf.php`). This setting is used when signature verification for authentication requests (`Sign -> AuthN requests`) is enabled in Zabbix, allowing Zabbix to verify the authentik IDP's signature using the provided certificate.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/zabbix/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$SSO['IDP_CERT'] = '<path to the IDP cert file>';\n```\n\n----------------------------------------\n\nTITLE: Configure Gravitee OpenID Connect Identity Provider\nDESCRIPTION: This snippet lists the required configuration parameters and their values or placeholders when setting up an OpenID Connect identity provider in the Gravitee Management Console to integrate with authentik. It includes necessary endpoints, client credentials, and scopes for authentication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/gravitee/index.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nAllow portal authentication to use this identity provider: enable this\nClient ID: Enter the Client ID from authentik that you noted previously\nClient Secret: Enter the Client Secret from authentik that you noted previously\nToken Endpoint: https://<authentik.company>/application/o/token/\nAuthorize Endpoint: https://<authentik.company>/application/o/authorize/\nUserinfo Endpoint: https://<authentik.company>/application/o/userinfo/\nUserinfo Logout Endpoint: https://<authentik.company>/application/o/<application-slug>/end-session/\nScopes: email openid profile\n```\n\n----------------------------------------\n\nTITLE: Adding Kerberos Backend to Password Stage Response (GET /stages/password/{uuid})\nDESCRIPTION: Updates the 200 OK response for GET /stages/password/{stage_uuid}/. The `backends` array in the response body, which lists backends for password testing, now includes `authentik.sources.kerberos.auth.KerberosBackend` as a possible string enum value.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n// 200 OK Response Body Change\n{\n  \"backends\": [\n    // ... other existing backend values\n    \"authentik.sources.kerberos.auth.KerberosBackend\" // Added enum value\n  ],\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Captcha Stage POST Endpoint Changes\nDESCRIPTION: This section describes the changes to the POST endpoint for /stages/captcha/. It focuses on adjustments within the request content type, specifically the `flow_set` array, and its associated properties within the stripped down flow serializer, alongside with the return type changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_66\n\n\n\n----------------------------------------\n\nTITLE: Updating name_id_policy for SAML Source Creation (POST /sources/saml/)\nDESCRIPTION: Modifies the `name_id_policy` property in both the JSON request body and the 201 Created response for the POST /sources/saml/ endpoint. The allowed enum value `urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName` was removed and `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` was added.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n// Request Body and 201 Response Body Change\n{\n  \"name_id_policy\": \"enum(..., 'urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName')\" \n  // Removed enum: 'urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName'\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Adding invalidation_flow to Provider Objects in User Consent Response (GET /core/user_consent/)\nDESCRIPTION: Modifies the 200 OK response for GET /core/user_consent/. Within each item's `application` object in the `results` array, the `provider_obj` (Provider Serializer) and each object within the `backchannel_providers_obj` array (Provider Serializer) now require the `invalidation_flow` property (string).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n// 200 OK Response Body Change\n{\n  \"results\": [\n    {\n      \"application\": {\n        \"provider_obj\": {\n          \"invalidation_flow\": \"string\", // Required: Flow used ending the session from a provider.\n          // ... other provider properties\n        },\n        \"backchannel_providers_obj\": [\n          {\n            \"invalidation_flow\": \"string\", // Required: Flow used ending the session from a provider.\n            // ... other provider properties\n          }\n          // ... potentially more backchannel providers\n        ]\n        // ... other application properties\n      }\n      // ... other consent properties\n    }\n    // ... other results\n  ]\n  // ... pagination properties\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting PUT /policies/bindings/ Parameter Changes\nDESCRIPTION: This section describes changes made to the response of the `PUT` /policies/bindings/{policy_binding_uuid}/ endpoint. The response status code is 200 OK, and the content type is `application/json`. It also describes the change to the `user_obj` property and the `type` property being added with a list of possible string values, `internal`, `external`, `service_account`, and `internal_service_account`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Retrieving User Consent\nDESCRIPTION: This documents a `GET` request to `/core/user_consent/{id}/` endpoint and modifications. It references serializer updates related to 'invalidation_flow'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_9\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /core/user_consent/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `application` (object)\n\n        > Application Serializer\n\n        - Changed property `provider_obj` (object)\n\n            > Provider Serializer\n\n            New required properties:\n\n            - `invalidation_flow`\n\n            * Added property `invalidation_flow` (string)\n                > Flow used ending the session from a provider.\n\n        - Changed property `backchannel_providers_obj` (array)\n\n            Changed items (object): > Provider Serializer\n\n            New required properties:\n\n            - `invalidation_flow`\n\n            * Added property `invalidation_flow` (string)\n                > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for Creating Prompt Stages (JSON)\nDESCRIPTION: This snippet shows the JSON structure received after successfully creating a prompt stage via POST. It returns the created stage with its 'flow_set' properties serialized, including configuration details such as designation, denied action, policy engine mode, and layout.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_75\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Application Icon URL via Authentik Blueprint YAML\nDESCRIPTION: Configures an application model instance by setting the icon attribute to a direct URL, allowing easy customization of app icons without additional uploads. The user identifies the application by slug and sets its name and icon URL.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/models.mdx#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# [...]\n- model: authentik_core.application\n  identifiers:\n      slug: my-app\n  attrs:\n      name: My App\n      icon: https://goauthentik.io/img/icon.png\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for User Write Stage\nDESCRIPTION: Specifies the JSON response for retrieving or updating user write stage configurations, including user mode, user type, and flow set details.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"user_creation_mode\": \"string\",\n      \"user_type\": \"string\",\n      \"flow_set\": [\n        {\n          \"designation\": \"string\",\n          \"denied_action\": \"string\",\n          \"policy_engine_mode\": \"string\",\n          \"layout\": \"string\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating authentik Docker Image Tag in Kubernetes YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to update the docker image tag to version 2022.1.1 for the authentik server in a Kubernetes deployment values file. It specifies the image repository and tag to ensure the cluster pulls the correct release version. This snippet is a minimal configuration and assumes familiarity with Kubernetes deployment configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.1.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.1.1\n```\n\n----------------------------------------\n\nTITLE: Creating an authentik Outpost\nDESCRIPTION: Covers the creation of an LDAP type outpost within authentik. This outpost is configured to use the LDAP application created in a previous step. Outposts facilitate the integration of various services with authentik for authentication purposes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring Zabbix SP Certificate Paths in PHP\nDESCRIPTION: Defines the file paths for the SAML Service Provider (SP) private key (`SP_KEY`) and certificate (`SP_CERT`) within the Zabbix frontend configuration file (`zabbix.conf.php`). These files are necessary for Zabbix to act as a SAML SP and should point to the location of the generated or provided key and certificate files, often found in `/usr/share/zabbix/conf/certs/`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/zabbix/index.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$SSO['SP_KEY'] = '<path to the SP private key file>';\n$SSO['SP_CERT'] = '<path to the SP cert file>';\n```\n\n----------------------------------------\n\nTITLE: SCIM Groups - POST Endpoint for Creating Group\nDESCRIPTION: Creates a new SCIM group with the specified group object, including the group name. Returns the created group details with a 201 status code.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group_obj\": {\n    \"name\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose file on macOS\nDESCRIPTION: Command to download the latest Authentik docker-compose.yml file on macOS systems using curl.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/docker-compose.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -O https://goauthentik.io/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Change File Ownership to wazuh-indexer User in Bash\nDESCRIPTION: This bash command changes the ownership of the SAML metadata XML file to the 'wazuh-indexer' user and group to ensure that the Wazuh Indexer service has appropriate permissions to access the metadata file required for SAML configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchown wazuh-indexer:wazuh-indexer /etc/wazuh-indexer/opensearch-security/wazuh_authentik_meta.xml\n```\n\n----------------------------------------\n\nTITLE: Accessing OAuth Claims Data in Property Mappings\nDESCRIPTION: Example of the data structure available in the 'info' variable for OAuth source property mappings, showing standard OIDC claims that can be accessed when creating mappings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/protocols/oauth/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"iss\": \"https://source.company\",\n    \"sub\": \"f153e7da687eec8c8789c72b6cc6bb5197df7b48b263b3151f36908e1bc10691\",\n    \"aud\": \"01e4DmQiG1d3kaewD3Mkz7E7kXknk9j43eZMkNaE\",\n    \"aud\": \"a7809c1b1c4aaa50adfb68660a6273dd9c8d15e4\",\n    \"email\": \"user@authentik.company\",\n    \"email_verified\": True,\n    \"name\": \"User\",\n    \"given_name\": \"User\",\n    \"preferred_username\": \"user\",\n    \"nickname\": \"user\",\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting GET /policies/bindings/ Parameter Changes\nDESCRIPTION: This section is about the modifications applied to the response of `GET` /policies/bindings/{policy_binding_uuid}/. The response status code is 200 OK, with content type `application/json`. The change involves the `user_obj` property. Inside `user_obj` the property `type` with string values like `internal`, `external`, `service_account`, and `internal_service_account` has been added.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Defining Group-Based AWS Role Mapping in authentik (Python)\nDESCRIPTION: Python expression for an authentik SAML Property Mapping. It dynamically constructs the AWS role ARN based on the value of the 'aws_role' attribute found in the user's group attributes. Requires users to be assigned to groups with an 'aws_role' attribute defined. Replace `123412341234` with your AWS Account ID.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/aws/index.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrole_name = user.group_attributes().get(\"aws_role\", \"\")\nreturn f\"arn:aws:iam::123412341234:role/{role_name},arn:aws:iam::123412341234:saml-provider/authentik\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Blueprint Context with !Context (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use the '!Context' tag to retrieve a value from the blueprint evaluation context. Optionally, a default value can be specified as a fallback. The first argument is the context variable's name.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfigure_flow: !Context foo\n```\n\n----------------------------------------\n\nTITLE: Refresh Token Retrieval - Provider Updates\nDESCRIPTION: This documentation covers a `GET` request to `/oauth2/refresh_tokens/{id}/`. It highlights the modifications to OAuth2Provider Serializer introducing new properties like 'invalidation_flow' and 'encryption_key', in addition to changes to the 'signing_key'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_12\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /oauth2/refresh_tokens/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `provider` (object)\n\n        > OAuth2Provider Serializer\n\n        New required properties:\n\n        - `invalidation_flow`\n\n        * Added property `invalidation_flow` (string)\n\n            > Flow used ending the session from a provider.\n\n        * Added property `encryption_key` (string)\n\n            > Key used to encrypt the tokens. When set, tokens will be encrypted and returned as JWEs.\n\n        * Changed property `signing_key` (string)\n            > Key used to sign the tokens.\n```\n\n----------------------------------------\n\nTITLE: Creating LDAP Providers - Provider Update\nDESCRIPTION: This documents `POST` request to `/providers/ldap/` with request and return changes. It highlights the addition of 'invalidation_flow' property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_16\n\nLANGUAGE: API\nCODE:\n```\n##### `POST` /providers/ldap/\n\n###### Request:\n\nChanged content type : `application/json`\n\nNew required properties:\n\n- `invalidation_flow`\n\n* Added property `invalidation_flow` (string)\n    > Flow used ending the session from a provider.\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\nNew required properties:\n\n- `invalidation_flow`\n\n* Added property `invalidation_flow` (string)\n    > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration Changes with Docker Compose\nDESCRIPTION: Command to apply configuration changes to an authentik deployment using Docker Compose after editing the .env file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/configuration/configuration.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Expression Policy (Response Change)\nDESCRIPTION: Details changes to the GET endpoint for retrieving objects referencing a specific expression policy. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/expression/{policy_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: Enabling Error Reporting in Authentik\nDESCRIPTION: Command to enable error reporting for Authentik by adding the configuration to the .env file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/docker-compose.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho \"AUTHENTIK_ERROR_REPORTING__ENABLED=true\" >> .env\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow with new 'require_redirect' Option\nDESCRIPTION: Updates to the Flow Serializer adding a new authentication enum value 'require_redirect' which enables requiring redirects as part of authentication flows.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.12.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"flow_obj\": {\n        \"authentication\": \"require_redirect\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing PostgreSQL File Path Data\nDESCRIPTION: Command to remove the old PostgreSQL data when using a file path instead of a Docker volume.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf /path/to/v12-data\n```\n\n----------------------------------------\n\nTITLE: Configure AWX SAML Service Provider Organization Info JSON\nDESCRIPTION: This JSON snippet provides organizational metadata for the AWX SAML Service Provider, which can be shared with the Identity Provider (authentik). It includes the organization's name, URL, and display name in English.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/awx-tower/index.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"en-US\": {\n        \"name\": \"authentik\",\n        \"url\": \"https://authentik.company\",\n        \"displayname\": \"authentik\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Captcha Stage API Addition - New Interactive Property\nDESCRIPTION: Addition of a new 'interactive' boolean property to Captcha stage endpoints in version 2024.10.2. This property is included in GET, PUT, PATCH, and POST requests and responses for Captcha stage configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_38\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"interactive\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Validate Authenticator Stage\nDESCRIPTION: This documents the changes to `GET` requests to `/stages/authenticator/validate/`, the response is `200 OK` and `application/json`. Details modifications to the `results` and `flow_set` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /stages/authenticator/validate/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > AuthenticatorValidateStage Serializer\n\n        - Changed property `flow_set` (array)\n\n            Changed items (object): > Stripped down flow serializer\n\n            New optional properties:\n\n            - `cache_count`\n            - `policies`\n            - `stages`\n\n            * Deleted property `stages` (array)\n\n            * Deleted property `policies` (array)\n\n            * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Locales for @lit/localize in JSON\nDESCRIPTION: This JSON snippet shows the configuration of target locales in `lit-localize.json` to specify which languages the frontend should support. It includes an array of locale codes that the localization tooling will use during build and extraction processes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/translation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // [...]\\n    \"targetLocales\": [\n        \"en\",\n        \"pseudo-LOCALE\",\n        \"a-new-locale\"\n        // [...]\n    ],\n    // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the OIDC Authentication Backend ID in Vault\nDESCRIPTION: Lists authentication backends in Vault to find the mount accessor for OIDC, which is needed to create a group alias for group mapping.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hashicorp-vault/index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvault auth list\n```\n\n----------------------------------------\n\nTITLE: Modifying Prompt Stage Schema in Authentik via JSON (PUT, PATCH, POST)\nDESCRIPTION: Describes changes to the request and response JSON schemas for the prompt stage endpoints, covering PUT, PATCH, and POST methods. The primary modification is to the 'promptstage_set' array and its nested 'flow_set' item, specifically the allowed values for the 'layout' property (including stacked, content_left/right, sidebar_left/right). Inputs are JSON objects with arrays reflecting stage and flow hierarchies. Outputs are JSON objects reflecting updated or created promptstage resources. No external dependencies are required; operations assume valid promptstage UUIDs and appropriate JSON structure.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"promptstage_set\": [\n    {\n      \"flow_set\": [\n        {\n          \"layout\": \"stacked\" // or \"content_left\", \"content_right\", \"sidebar_left\", \"sidebar_right\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Event Matcher Policy Response (POST /policies/event_matcher/)\nDESCRIPTION: Describes the change in the 201 Created response after successfully creating an event matcher policy via the POST endpoint. The content type is `application/json`. Similar to the request, the `app` property (string) in the response now includes the added enum value `authentik.enterprise`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_9\n\nLANGUAGE: API Definition\nCODE:\n```\nPOST /policies/event_matcher/\nResponse: 201 Created\nContent-Type: application/json\nProperties Changed:\n- app (string):\n  - Added enum value: `authentik.enterprise`\n  - Full Enum List:\n    - `authentik.admin`\n    - `authentik.api`\n    - `authentik.crypto`\n    - ... (and all other listed enums)\n    - `authentik.core`\n    - `authentik.enterprise`\n```\n\n----------------------------------------\n\nTITLE: Adding invalidation_flow to RACProvider in List Response (GET /rac/endpoints/)\nDESCRIPTION: Modifies the 200 OK response for the GET /rac/endpoints/ endpoint. Each item in the `results` array now includes a `provider_obj` (RACProvider Serializer) which requires the `invalidation_flow` property (string), specifying the session invalidation flow for that provider.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"provider_obj\": {\n        \"invalidation_flow\": \"string\", // Flow used ending the session from a provider. (Required)\n        // ... other properties\n      }\n      // ... other endpoint properties\n    }\n    // ... other results\n  ]\n  // ... pagination properties\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SAML Providers - Provider Update\nDESCRIPTION: This documents changes to `/providers/saml/`, describing the addition of 'invalidation_flow' to the request and the return type. It focuses on modifications to serializers and expected payload changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_18\n\nLANGUAGE: API\nCODE:\n```\n##### `POST` /providers/saml/\n\n###### Request:\n\nChanged content type : `application/json`\n\nNew required properties:\n\n- `invalidation_flow`\n\n* Added property `invalidation_flow` (string)\n    > Flow used ending the session from a provider.\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\nNew required properties:\n\n- `invalidation_flow`\n\n* Added property `invalidation_flow` (string)\n    > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: Captcha Stage Implementation for Flow Executor\nDESCRIPTION: Updates to the captcha_stage property for the flow executor endpoints, changing it from one object type to another while maintaining the site public key information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.12.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ak-stage-identification\": {\n    \"captcha_stage\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint - DELETE/GET /stages/identification\nDESCRIPTION: This snippet describes DELETE and GET methods for the endpoint `/stages/identification/{stage_uuid}/`.  The request and response structures for interacting with identification stages are similar to other methods. The responses are of type JSON, with a status code of 200 OK.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_56\n\nLANGUAGE: API Definition\nCODE:\n```\n##### `DELETE` /stages/identification/&#123;stage_uuid&#125;/\n\n##### `GET` /stages/identification/&#123;stage_uuid&#125;/\n\n```\n\n----------------------------------------\n\nTITLE: Linking to Documentation in Subsequent GitHub Release Notes (Markdown)\nDESCRIPTION: Provides a standard text snippet to include in the GitHub release notes body for subsequent patch releases. This directs users to the specific section within the full release notes detailing fixes for that patch version on the authentik documentation website, using a URL fragment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nSee https://goauthentik.io/docs/releases/2022.12#fixed-in-2022121\n```\n\n----------------------------------------\n\nTITLE: Syncing Discord roles to authentik groups on enrollment (Python)\nDESCRIPTION: This Python code synchronizes Discord roles with authentik groups during user enrollment via Discord OAuth. It fetches user's guild membership information from the Discord API and updates the user's authentik groups based on their Discord roles defined in the `discord_role_id` attribute. It requires the `requests` and `authentik.core.models.Group` libraries.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/discord/index.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom authentik.core.models import Group\nGUILD_API_URL = \"https://discord.com/api/users/@me/guilds/{guild_id}/member\"\n\n### CONFIG ###\nguild_id = \"<YOUR GUILD ID>\"\n##############\n\n# Ensure flow is only run during OAuth logins via Discord\nif context[\"source\"].provider_type != \"discord\":\n    return True\n\n# Get the user-source connection object from the context, and get the access token\nconnection = context.get(\"goauthentik.io/sources/connection\")\nif not connection:\n    return False\naccess_token = connection.access_token\n\nguild_member_request = requests.get(\n    GUILD_API_URL.format(guild_id=guild_id),\n    headers={\n        \"Authorization\": f\"Bearer {access_token}\",\n    },\n)\nguild_member_info = guild_member_request.json()\n\n# Ensure we are not being ratelimited\nif guild_member_request.status_code == 429:\n    ak_message(f\"Discord is throttling this connection. Retry in {int(guild_member_info['retry_after'])}s\")\n    return False\n\n# Ensure user is a member of the guild\nif \"code\" in guild_member_info:\n    if guild_member_info[\"code\"] == 10004:\n        ak_message(\"User is not a member of the guild\")\n    else:\n        ak_create_event(\"discord_error\", source=context[\"source\"], code=guild_member_info[\"code\"])\n        ak_message(\"Discord API error, try again later.\")\n    return False\n\n# Get all discord_groups\ndiscord_groups = Group.objects.filter(attributes__discord_role_id__isnull=False)\n\n# Filter matching roles based on guild_member_info['roles']\nuser_groups_discord_updated = discord_groups.filter(attributes__discord_role_id__in=guild_member_info[\"roles\"])\n\n# Set matchin_roles in flow context\nrequest.context[\"flow_plan\"].context[\"groups\"] = user_groups_discord_updated\n\n# Create event with roles added\nak_create_event(\n    \"discord_role_sync\",\n    user_discord_roles_added=\", \".join(str(group) for group in user_groups_discord_updated),\n)\n\nreturn True\n```\n\n----------------------------------------\n\nTITLE: Querying Plex User Connection Sources via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This example shows retrieving all Plex user connection sources with a GET request to `/sources/user_connections/plex/`. The response (200 OK, application/json) returns a 'results' array of objects; each contains a nested 'source' object with 'managed' status and 'policy_engine_mode' settable to 'all' or 'any'. Authentication is needed, and response objects may be overwritten by system migrations if managed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_36\n\nLANGUAGE: OpenAPI\nCODE:\n```\nGET /sources/user_connections/plex/\nResponse 200 (application/json):\n  results: [\n    {\n      source: {\n        managed: string,\n        policy_engine_mode: string // 'all' or 'any'\n      }\n    }, ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Plex User Connection Source via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This snippet demonstrates how to create a Plex user connection source by POSTing to the `/sources/user_connections/plex/` endpoint. The 201 Created JSON response contains a 'source' object with the 'managed' flag and 'policy_engine_mode' property. The policy mode field determines how attached policies are enforced and whether all or any must pass for the object to be accepted. Requires a valid Plex integration and API authentication; managed objects may be automatically updated.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_35\n\nLANGUAGE: OpenAPI\nCODE:\n```\nPOST /sources/user_connections/plex/\nRequest (application/json):\n  ...\nResponse 201 (application/json):\n  source: {\n    managed: string,\n    policy_engine_mode: string // 'all' or 'any'\n  }\n```\n\n----------------------------------------\n\nTITLE: Building the Frontend UI using Make\nDESCRIPTION: Executes the `web-build` target in the Makefile. This command performs a one-time build of the frontend user interface, compiling assets like JavaScript and CSS.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake web-build   # Builds the UI once\n```\n\n----------------------------------------\n\nTITLE: Enabling OIDC Authentication in Gatus Configuration File (YAML)\nDESCRIPTION: This snippet configures Gatus to use OIDC authentication by specifying the authentik issuer URL, client credentials, and redirect URL in the `config.yaml` file. It requires the client ID, client secret, and application slug obtained from authentik setup. The `issuer-url` should point to the OIDC endpoint in authentik, while `client-id` and `client-secret` reference the environment variables set previously. The `redirect-url` is the callback endpoint Gatus uses after authentication, and the `scopes` parameter should include at least `openid`. Gatus must have access to these variables and settings at startup.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/gatus/index.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsecurity:\n    oidc:\n        issuer-url: https://authentik.company/application/o/<your-application-slug>/\n        client-id: ${OIDC_CLIENT_ID}\n        client-secret: ${OIDC_CLIENT_SECRET}\n        redirect-url: https://gatus.company/authorization-code/callback\n        scopes: [openid]\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Images\nDESCRIPTION: This YAML snippet shows how to update the authentik images in a Kubernetes deployment to use the new images associated with the 2023.4 release. It specifies the repository and tag for the server image.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2023.4.0\n```\n```\n\n----------------------------------------\n\nTITLE: API Updates: Property Changes (GET)\nDESCRIPTION: This section documents API endpoint responses, specifically noting content type and property updates.  It describes how a specific property description is amended within the returned JSON responses, which are always of type `application/json`. The `managed` property is modified to contain a description about the objects being managed by authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring pfSense LDAP Authentication\nDESCRIPTION: Configures pfSense to use an authentik LDAP server for authentication. This involves specifying the server address, port, transport (Standard TCP for insecure and SSL/TLS Encrypted for secure), Base DN, search scope, authentication containers, bind credentials, and group member attributes. The setup details how to configure both insecure and secure LDAP configurations. The setup also includes authentication container and setting for bind credentials.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Backing Up PostgreSQL Docker Volume\nDESCRIPTION: Command sequence to create a backup of the PostgreSQL data volume. This creates a new volume and copies all data from the existing volume as an additional safety measure.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create authentik_database_backup && docker run --rm -v authentik_database:/from -v authentik_database_backup:/to alpine sh -c 'cd /from && cp -a . /to'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik Beta Docker Compose Shell\nDESCRIPTION: Executes shell commands to pull the latest beta Docker images and recreate/start the containers detached. This applies the configuration changes made to the `.env` file. Requires Docker Compose.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/beta.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: API Schema for PATCH /stages/authenticator/sms/{stage_uuid}/\nDESCRIPTION: Defines the schema for partially updating an SMS authenticator stage's properties like provider, auth_type, and flow_set. The request allows partial modification without replacing the entire object. Used for incremental updates.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Change: New App and Model Enum Values for Event Matcher Policies\nDESCRIPTION: Updates to the Event Matcher Policy endpoints that add new enum values for 'app' and 'model' properties. These include Kerberos-related options and authenticator endpoint options.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_5\n\nLANGUAGE: API\nCODE:\n```\nAdded enum values:\n- `authentik.sources.kerberos`\n- `authentik.enterprise.stages.authenticator_endpoint_gdtc`\n\nAdded enum values:\n- `authentik_sources_kerberos.kerberossource`\n- `authentik_sources_kerberos.kerberossourcepropertymapping`\n- `authentik_sources_kerberos.userkerberossourceconnection`\n- `authentik_sources_kerberos.groupkerberossourceconnection`\n- `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage`\n```\n\n----------------------------------------\n\nTITLE: Request Structure for Creating or Updating User Write Stage in JSON\nDESCRIPTION: Defines the JSON payload for POST requests to set up or modify user write stages, emphasizing the 'flow_set' array with layout choices. It controls the UI layout of the user creation or update process.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{ \"flow_set\": [ { \"layout\": \"stacked\" } ] }\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik 2024.4 using Helm on Kubernetes\nDESCRIPTION: Commands to upgrade the Authentik Helm Chart to version 2024.4 on a Kubernetes cluster. The process requires updating the Helm repository and then upgrading the Authentik deployment with the specified version.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^2024.4\n```\n\n----------------------------------------\n\nTITLE: authentik Project Directory Structure Overview\nDESCRIPTION: Illustrates the directory layout of the core authentik Django project. It shows the different application packages and provides a brief description of their responsibilities, such as 'core' for central functionality, 'providers' for integration protocols, and 'stages' for authentication flow steps.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/index.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nauthentik\n├── admin - Administrative tasks and APIs, no models (Version updates, Metrics, system tasks)\n├── api - General API Configuration (Routes, Schema and general API utilities)\n├── blueprints - Handle managed models and their state.\n├── core - Core authentik functionality, central routes, core Models\n├── crypto - Cryptography, currently used to generate and hold Certificates and Private Keys\n├── enterprise - Enterprise features, which are source available but not open source\n├── events - Event Log, middleware and signals to generate signals\n├── flows - Flows, the FlowPlanner and the FlowExecutor, used for all flows for authentication, authorization, etc\n├── lib - Generic library of functions, few dependencies on other packages.\n├── outposts - Configure and deploy outposts on kubernetes and docker.\n├── policies - General PolicyEngine\n│   ├── dummy - A Dummy policy used for testing\n│   ├── event_matcher - Match events based on different criteria\n│   ├── expiry - Check when a user's password was last set\n│   ├── expression - Execute any arbitrary python code\n│   ├── password - Check a password against several rules\n│   └── reputation - Check the user's/client's reputation\n├── providers\n│   ├── ldap - Provide LDAP access to authentik users/groups using an outpost\n│   ├── oauth2 - OIDC-compliant OAuth2 provider\n│   ├── proxy - Provides an identity-aware proxy using an outpost\n│   ├── radius - Provides a RADIUS server that authenticates using flows\n│   ├── saml - SAML2 Provider\n│   └── scim - SCIM Provider\n├── recovery - Generate keys to use in case you lock yourself out\n├── root - Root django application, contains global settings and routes\n├── sources\n│   ├── ldap - Sync LDAP users from OpenLDAP or Active Directory into authentik\n│   ├── oauth - OAuth1 and OAuth2 Source\n│   ├── plex - Plex source\n│   └── saml - SAML2 Source\n├── stages\n│   ├── authenticator_duo - Configure a DUO authenticator\n│   ├── authenticator_static - Configure TOTP backup keys\n│   ├── authenticator_totp - Configure a TOTP authenticator\n│   ├── authenticator_validate - Validate any authenticator\n│   ├── authenticator_webauthn - Configure a WebAuthn / Passkeys authenticator\n│   ├── captcha - Make the user pass a captcha\n│   ├── consent - Let the user decide if they want to consent to an action\n│   ├── deny - Static deny, can be used with policies\n│   ├── dummy - Dummy stage to test\n│   ├── email - Send the user an email and block execution until they click the link\n│   ├── identification - Identify a user with any combination of fields\n│   ├── invitation - Invitation system to limit flows to certain users\n│   ├── password - Password authentication\n│   ├── prompt - Arbitrary prompts\n│   ├── user_delete - Delete the currently pending user\n│   ├── user_login - Login the currently pending user\n│   ├── user_logout - Logout the currently pending user\n│   └── user_write - Write any currently pending data to the user.\n└── tenants - Soft tennancy, configure defaults and branding per domain\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Containers Using Docker Compose Shell Command\nDESCRIPTION: This command starts all required backend containers defined in Docker Compose files. Running this in a separate terminal allows the frontend to connect to backend services locally at the defined ports (9000 for HTTP, 9443 for HTTPS). Requires Docker and Docker Compose (v2) installed and properly configured.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/frontend-dev-environment.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Querying WebAuthn Authenticator Stage\nDESCRIPTION: This provides the information about `GET` requests to `/stages/authenticator/webauthn/`. The information given includes the response code, the content type and the relevant changes in  properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /stages/authenticator/webauthn/\n```\n\n----------------------------------------\n\nTITLE: Describing API Response Structure - JSON\nDESCRIPTION: This snippet describes the changes applied to the structure of the API responses. It specifically points to the successful 200 OK status code and the \"application/json\" content type. It also outlines changes to the `results` property (an array) of the returned data. Finally, the snippet highlights the addition of the `interactive` (boolean) property to items of the \"CaptchaStage Serializer\" type, detailing changes to the nested JSON object.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_40\n\n\n\n----------------------------------------\n\nTITLE: Configuring Observium Auth Mechanism\nDESCRIPTION: This PHP snippet configures Observium to use remote authentication. The primary directive sets the authentication mechanism to 'remote', enabling integration with external authentication providers like authentik.  It also configures the remote user level and the logout URL.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/observium/index.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$config['auth_mechanism'] = \"remote\";\n```\n\nLANGUAGE: php\nCODE:\n```\n$config['auth_remote_userlevel'] = 10;\n$config['auth_remote_logout_url'] = \"https://authentik.company/application/o/observium/end-session/\";\n```\n\n----------------------------------------\n\nTITLE: POST /stages/user_login/ Request/Response\nDESCRIPTION: This documents the POST request and response for the `/stages/user_login/` endpoint. The request has content type `application/json` and includes properties of `flow_set` and `policy_engine_mode` properties. The response is 201 Created with content type `application/json`. It highlights the changes related to  `flow_set` and the changes to `policy_engine_mode` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_51\n\n\n\n----------------------------------------\n\nTITLE: API Schema for PUT /stages/authenticator/totp/{stage_uuid}/\nDESCRIPTION: Defines the request schema for updating TOTP authenticator stage settings, specifically the 'digits' property indicating the number of digits in the totp code, and the flow_set configuration. Used for configuration updates.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"digits\": \"string\",\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TOTP Authenticator Stage\nDESCRIPTION: Describes the changes for `POST` request to `/stages/authenticator/totp/`, the response code is `201 Created` with a content type of `application/json`. The changes involve modifying `flow_set` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n##### `POST` /stages/authenticator/totp/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        New optional properties:\n\n        - `cache_count`\n        - `policies`\n        - `stages`\n\n        * Deleted property `stages` (array)\n\n        * Deleted property `policies` (array)\n\n        * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: API Request Payload for Creating Prompt Stages (JSON)\nDESCRIPTION: This snippet defines the JSON payload format required when creating new prompt stages via POST. It includes 'flow_set' with serialized flow configuration, enabling specification of the flow's designation, denial actions, engine mode, and layout preferences.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_74\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Retrieval - Provider Updates\nDESCRIPTION: This describes a `GET` request to `/oauth2/authorization_codes/{id}/` endpoint with the return type. It details modifications to properties related to the OAuth2Provider serializer, including the new required properties `invalidation_flow` and `encryption_key`, along with the change in 'signing_key'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_11\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /oauth2/authorization_codes/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `provider` (object)\n\n        > OAuth2Provider Serializer\n\n        New required properties:\n\n        - `invalidation_flow`\n\n        * Added property `invalidation_flow` (string)\n\n            > Flow used ending the session from a provider.\n\n        * Added property `encryption_key` (string)\n\n            > Key used to encrypt the tokens. When set, tokens will be encrypted and returned as JWEs.\n\n        * Changed property `signing_key` (string)\n            > Key used to sign the tokens.\n```\n\n----------------------------------------\n\nTITLE: Creating a SAML User Connection Source via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This snippet demonstrates creating a SAML user connection source with a POST to `/sources/user_connections/saml/`. On success, the server returns a 201 Created response containing a 'source' object with the 'managed' flag and 'policy_engine_mode' ('all' or 'any'). Use case: establishing a new SAML connector for end-users under defined policy conditions. Requires proper privileges and may be affected by future migrations if managed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_37\n\nLANGUAGE: OpenAPI\nCODE:\n```\nPOST /sources/user_connections/saml/\nRequest (application/json):\n  ...\nResponse 201 (application/json):\n  source: {\n    managed: string,\n    policy_engine_mode: string // 'all' or 'any'\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Image Tag - YAML\nDESCRIPTION: This snippet provides instructions on how to update the image tag in the Kubernetes deployment. This is a critical step during the upgrade process to ensure the new version of goauthentik is deployed. The `image.tag` parameter specifies the specific version of the image to use.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.2.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.2.1\n```\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definition for Event Matcher Policies\nDESCRIPTION: This API endpoint definition outlines the GET request for a specific event matcher policy identified by its UUID. This endpoint allows for retrieval of details related to a particular policy.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_3\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /policies/event_matcher/&#123;policy_uuid&#125;/\n```\n\n----------------------------------------\n\nTITLE: Creating Event Matcher Policy (Request/Response Change)\nDESCRIPTION: Describes changes to the POST endpoint for creating an Event Matcher Policy. The request body (`application/json`) properties `action`, `app`, and `model` have changed descriptions or enum values (e.g., added `authentik.sources.scim` to `app`, added `authentik_sources_scim.scimsource` to `model`). The 201 Created response (`application/json`) reflects similar changes in the `action`, `app`, and `model` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /policies/event_matcher/\n```\n\n----------------------------------------\n\nTITLE: Defining LDAP Provider Schema with Multi-factor and UID/GID Customization - JSON\nDESCRIPTION: This schema illustrates modifications to LDAP provider endpoints (/providers/ldap/, /outposts/ldap/, /sources/ldap/{slug}/), adding boolean mfa_support for TOTP-based MFA, integer uid_start_number to set a base UID, and integer gid_start_number for base GID. Requires application/json requests and responses. mfa_support governs whether codes can be appended to passwords, while the numeric fields ensure POSIX compatibility and help prevent conflicts with local user/group IDs. All fields are optional but should be used consistently depending on environment constraints. The mfa_support field should only be enabled when users have configured TOTP devices.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.6.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mfa_support\": true,\n  \"uid_start_number\": 2000,\n  \"gid_start_number\": 4000\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Retrieving User Write Stage in JSON\nDESCRIPTION: Details the JSON response structure for the GET request of the user write stage, including nested 'results' with 'flow_set' to define layout and flow configurations for user write processes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{ \"results\": [ { \"flow_set\": [ { \"layout\": \"stacked\" } ] } ] }\n```\n\n----------------------------------------\n\nTITLE: PUT /stages/authenticator/static/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PUT method for the /stages/authenticator/static/ endpoint.  It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Creating pfSense Certificate Authority\nDESCRIPTION: Describes creating a Certificate Authority within pfSense. This step is crucial for setting up secure LDAP authentication by enabling SSL/TLS encryption. It involves specifying a descriptive name and using the internal certificate authority method. The authority's common name is also defined.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Referencing Secrets in Kubernetes with envFrom - YAML\nDESCRIPTION: This YAML snippet demonstrates how to use Kubernetes' 'envFrom' and 'secretRef' constructs to inject environment variables from a Secret into a deployment or pod. The example references a Secret named '_some-secret_' that must contain the necessary environment variables to bootstrap Authentik. Requires a running Kubernetes cluster and previously created Secret containing the appropriate variables. Inputs include the secret name; the output is the population of the pod/container's environment with those variables. This approach is secure for production use, as sensitive credentials are not stored in plain Helm values but instead are securely referenced.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/automated-install.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nenvFrom:\n    - secretRef:\n          name: _some-secret_\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Updates - Prompt Types\nDESCRIPTION: Defines the different types of prompts supported by the API. These include text input, text areas, usernames, emails, passwords, numbers, checkboxes, radio button groups, dropdowns, dates, date-times, files, separators, hidden fields, static values, and locale selections. The description includes an enumeration of possible values for the `type` property and describes the purpose of each prompt type.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: API Endpoint Definitions for RADIUS Providers\nDESCRIPTION: These API endpoint definitions detail the HTTP methods and paths for the RESTful interaction with RADIUS providers in the authentik system. These endpoints enable the creation, retrieval, update, and deletion of RADIUS providers, as well as retrieving data on their usage.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_2\n\nLANGUAGE: API\nCODE:\n```\n##### `POST` /stages/prompt/prompts/preview/\n```\n\n----------------------------------------\n\nTITLE: Removing a flow context key in Expression policies with Python\nDESCRIPTION: This snippet shows how to safely remove the 'redirect_stage_target' key from the 'flow_plan' context dictionary within an Expression policy using Python. It uses the 'pop' method with a default 'None' to avoid errors if the key does not exist. The snippet requires the 'context' variable with the 'flow_plan' context present. It manipulates the flow context in-place without returning any output.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression/managing_flow_context_keys.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontext['flow_plan'].context.pop('redirect_stage_target', None)\n```\n\n----------------------------------------\n\nTITLE: Verifying Outpost Accessibility with curl\nDESCRIPTION: This snippet uses `curl` to check if the `/outpost.goauthentik.io/ping` endpoint is publicly accessible. A successful check should return an HTTP 204 status code, indicating that the outpost is reachable and functioning correctly.  The `-v` flag provides verbose output.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/forward_auth/general.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v https://app.company/outpost.goauthentik.io/ping\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for Event Matcher Policy Serializer (JSON)\nDESCRIPTION: Defines the JSON response format for a list of event matcher policies, including an enumeration of application types and their descriptions. The data is used to inform clients about available policies and their attributes, with emphasis on the 'app' field indicating the policy's associated application.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\"results\": [{\"app\": \"authentik.admin\"}, {\"app\": \"authentik.api\"}, {\"app\": \"authentik.crypto\"}, {\"app\": \"authentik.events\"}, {\"app\": \"authentik.flows\"}, {\"app\": \"authentik.lib\"}, {\"app\": \"authentik.outposts\"}, {\"app\": \"authentik.policies.dummy\"}, {\"app\": \"authentik.policies.event_matcher\"}, {\"app\": \"authentik.policies.expiry\"}, {\"app\": \"authentik.policies.expression\"}, {\"app\": \"authentik.policies.password\"}, {\"app\": \"authentik.policies.reputation\"}, {\"app\": \"authentik.policies\"}, {\"app\": \"authentik.providers.ldap\"}, {\"app\": \"authentik.providers.oauth2\"}, {\"app\": \"authentik.providers.proxy\"}, {\"app\": \"authentik.providers.radius\"}, {\"app\": \"authentik.providers.saml\"}, {\"app\": \"authentik.providers.scim\"}, {\"app\": \"authentik.recovery\"}, {\"app\": \"authentik.sources.ldap\"}, {\"app\": \"authentik.sources.oauth\"}, {\"app\": \"authentik.sources.plex\"}, {\"app\": \"authentik.sources.saml\"}, {\"app\": \"authentik.stages.authenticator_duo\"}, {\"app\": \"authentik.stages.authenticator_sms\"}, {\"app\": \"authentik.stages.authenticator_static\"}, {\"app\": \"authentik.stages.authenticator_totp\"}, {\"app\": \"authentik.stages.authenticator_validate\"}, {\"app\": \"authentik.stages.authenticator_webauthn\"}, {\"app\": \"authentik.stages.captcha\"}, {\"app\": \"authentik.stages.consent\"}, {\"app\": \"authentik.stages.deny\"}, {\"app\": \"authentik.stages.dummy\"}, {\"app\": \"authentik.stages.email\"}, {\"app\": \"authentik.stages.identification\"}, {\"app\": \"authentik.stages.invitation\"}, {\"app\": \"authentik.stages.password\"}, {\"app\": \"authentik.stages.prompt\"}, {\"app\": \"authentik.stages.user_delete\"}, {\"app\": \"authentik.stages.user_login\"}, {\"app\": \"authentik.stages.user_logout\"}, {\"app\": \"authentik.stages.user_write\"}, {\"app\": \"authentik.tenants\"}, {\"app\": \"authentik.blueprints\"}, {\"app\": \"authentik.core\"}, {\"app\": \"authentik.enterprise\"}]}\n```\n\n----------------------------------------\n\nTITLE: Updating User Connections Endpoint Schemas\nDESCRIPTION: This snippet details parameter and response schema updates for user connection-related endpoints, such as GET /sources/user_connections/all/, POST /sources/user_connections/oauth/, GET /sources/user_connections/oauth/, and similar endpoints for plex and saml. Modifications include adding user query parameters, updating response content types, properties like created, user, source, and property mappings, as well as changes to request schemas for POST methods.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_50\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"User Connections Endpoints Schema Updates\",\n  \"details\": \"Introduces parameter additions like user in queries, response property changes such as adding created properties, updating source objects with property mappings, and request property updates for POST requests, including removal of obsolete properties.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Recreating PostgreSQL Container with New Version\nDESCRIPTION: Commands to pull the updated images and recreate the PostgreSQL container with the new version.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pull && docker compose up --force-recreate -d postgresql\n```\n\n----------------------------------------\n\nTITLE: Log User In - authentik Events - JSON\nDESCRIPTION: This JSON snippet shows the structure of an event generated upon a successful user login in authentik. It includes details about the user, the 'login' action, the application that generated the event, the authentication method used, HTTP request details, the client IP address, creation and expiry timestamps, and brand information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/events/index.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"pk\": \"f00f54e7-2b38-421f-bc78-e61f950048d6\",\n    \"user\": {\n        \"pk\": 1,\n        \"email\": \"root@localhost\",\n        \"username\": \"akadmin\"\n    },\n    \"action\": \"login\",\n    \"app\": \"authentik.events.signals\",\n    \"context\": {\n        \"auth_method\": \"password\",\n        \"http_request\": {\n            \"args\": {\n                \"query\": \"next=%2F\"\n            },\n            \"path\": \"/api/v3/flows/executor/default-authentication-flow/\",\n            \"method\": \"GET\"\n        },\n        \"auth_method_args\": {}\n    },\n    \"client_ip\": \"::1\",\n    \"created\": \"2023-02-15T15:33:42.771091Z\",\n    \"expires\": \"2024-02-15T15:33:42.770425Z\",\n    \"brand\": {\n        \"pk\": \"fcba828076b94dedb2d5a6b4c5556fa1\",\n        \"app\": \"authentik_brands\",\n        \"name\": \"Default brand\",\n        \"model_name\": \"brand\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding captcha_stage to Identification Stage Update (PUT /stages/identification/{uuid})\nDESCRIPTION: Modifies the PUT /stages/identification/{stage_uuid}/ endpoint. The `captcha_stage` property (string) can now be included in the JSON request body to enable integrated Captcha functionality. This property is also returned in the 200 OK response upon successful update.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n// Request Body / 200 OK Response Body Addition\n{\n  \"captcha_stage\": \"string\", // Optional: When set, adds functionality exactly like a Captcha stage.\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH /stages/user_write/{stage_uuid}/ API Change\nDESCRIPTION: This section details modifications to the `PATCH` request for the `/stages/user_write/{stage_uuid}/` endpoint.  It describes changes to the request and return content types, as well as modifications to properties such as `user_creation_mode`, `user_type`, and `flow_set`. These properties are part of the user write stage configuration within the authentik system.  The content type is JSON, and the updates are reflected in both the request and response payloads.  The serializer is stripped down.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_57\n\n\n\n----------------------------------------\n\nTITLE: Implementing NetBox custom social auth pipelines for group synchronization\nDESCRIPTION: Custom Python code for NetBox to synchronize user groups and roles from authentik. Works with NetBox 4.0.0+ and includes functions for adding groups, removing groups, and setting superuser and staff roles.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/netbox/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# from django.contrib.auth.models import Group # For Netbox < 4.0.0\nfrom netbox.authentication import Group # For Netbox >= 4.0.0\n\nclass AuthFailed(Exception):\n    pass\n\ndef add_groups(response, user, backend, *args, **kwargs):\n    try:\n        groups = response['groups']\n    except KeyError:\n        pass\n\n    # Add all groups from oAuth token\n    for group in groups:\n        group, created = Group.objects.get_or_create(name=group)\n        # group.user_set.add(user) # For Netbox < 4.0.0\n        user.groups.add(group) # For Netbox >= 4.0.0\n\ndef remove_groups(response, user, backend, *args, **kwargs):\n    try:\n        groups = response['groups']\n    except KeyError:\n        # Remove all groups if no groups in oAuth token\n        user.groups.clear()\n        pass\n\n    # Get all groups of user\n    user_groups = [item.name for item in user.groups.all()]\n    # Get groups of user which are not part of oAuth token\n    delete_groups = list(set(user_groups) - set(groups))\n\n    # Delete non oAuth token groups\n    for delete_group in delete_groups:\n        group = Group.objects.get(name=delete_group)\n        # group.user_set.remove(user) # For Netbox < 4.0.0\n        user.groups.remove(group) # For Netbox >= 4.0.0\n\n\ndef set_roles(response, user, backend, *args, **kwargs):\n    # Remove Roles temporary\n    user.is_superuser = False\n    user.is_staff = False\n    try:\n        groups = response['groups']\n    except KeyError:\n        # When no groups are set\n        # save the user without Roles\n        user.save()\n        pass\n\n    # Set roles is role (superuser or staff) is in groups\n    user.is_superuser = True if 'superusers' in groups else False\n    user.is_staff = True if 'staff' in groups else False\n    user.save()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for SAML Property Mapping (Response Change)\nDESCRIPTION: Describes changes to the GET endpoint for retrieving objects referencing a specific SAML property mapping. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nGET /propertymappings/saml/{pm_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Documentation for 'used_by' Referencing Objects (Various Stages) in JSON\nDESCRIPTION: This section details GET endpoints for retrieving objects that reference a specific source or stage, such as user connections or custom stages. The responses typically include a list of objects with an 'action' property, indicating how these objects interact with or depend on the queried entity.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_33\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"response\": \"200 OK\", \"content_type\": \"application/json\", \"properties\": { \"items\": [ { \"action\": \"string\" } ] } }\n```\n\n----------------------------------------\n\nTITLE: Defining Nextcloud Quota Mapping\nDESCRIPTION: This Python code defines a custom SAML property mapping for setting Nextcloud quota based on user group attributes. It retrieves the 'nextcloud_quota' attribute from the user's group attributes and uses it as the quota. If the attribute isn't set, it defaults to '1 GB'. This is a part of the setup to limit Nextcloud storage.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/nextcloud/index.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn user.group_attributes().get(\"nextcloud_quota\", \"1 GB\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik with Helm (Kubernetes/Shell)\nDESCRIPTION: Shows the Helm commands required to upgrade an Authentik deployment on Kubernetes. First, update the local Helm repository cache using `helm repo update`. Then, upgrade the Authentik release using `helm upgrade`, specifying the release name, chart name, the `--devel` flag (if using development versions), and your custom values file (`-f values.yaml`).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2021/v2021.1.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhelm repo update\n```\n\nLANGUAGE: Shell\nCODE:\n```\nhelm upgrade authentik authentik/authentik --devel -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Converting PEM File Footers to PKCS#1 Format Using diff Syntax\nDESCRIPTION: This diff snippet shows the manual edit required in the PEM private key file footer to specify the RSA type, aligning with PKCS#1 requirements. Perform this replacement in a text editor. Input is the old footer line with 'END PRIVATE KEY', output is the corrected 'END RSA PRIVATE KEY' line. This ensures compatibility with systems requiring RSA-labeled PEM files.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mautic/index.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- -----END PRIVATE KEY-----\n+ -----END RSA PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint - PATCH /stages/dummy\nDESCRIPTION: This snippet defines the PATCH method for the `/stages/dummy/{stage_uuid}/` endpoint. The request uses `application/json` and modifies the `flow_set` array. The response also uses JSON, reflecting the changes. This endpoint, like others, uses the `stage_uuid` for resource identification and provides a 200 OK response upon success.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_52\n\nLANGUAGE: API Definition\nCODE:\n```\n##### `PATCH` /stages/dummy/&#123;stage_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n    - Changed property `designation` (string)\n\n        > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n    - Changed property `denied_action` (string)\n\n        > Configure what should happen when a flow denies access to a user.\n\n    - Changed property `policy_engine_mode` (string)\n\n    - Changed property `layout` (string)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        - Changed property `designation` (string)\n\n            > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n        - Changed property `denied_action` (string)\n\n            > Configure what should happen when a flow denies access to a user.\n\n        - Changed property `policy_engine_mode` (string)\n\n        - Changed property `layout` (string)\n```\n\n----------------------------------------\n\nTITLE: GET /stages/user_login/ Endpoint Changes\nDESCRIPTION: This describes changes to the GET /stages/user_login/ endpoint, where a new property called 'remember_me_offset' has been added to the response. The `remember_me_offset` controls how long sessions are extended when the user chooses the remember me option.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_13\n\nLANGUAGE: N/A\nCODE:\n```\nGET /stages/user_login/&#123;stage_uuid&#125;/\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Added property `remember_me_offset` (string)\n        > Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)\n```\n\n----------------------------------------\n\nTITLE: API Request and Response for LDAP Property Mappings (JSON)\nDESCRIPTION: Describes the request body and response for LDAP property mappings, including the 'managed' property indicating automatic management by Authentik. These endpoints allow listing (`GET`) and creating (`POST`) LDAP property mappings, with consistent JSON structure.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\"managed\": \"string\"}\n```\n\n----------------------------------------\n\nTITLE: Creating RAC Endpoints\nDESCRIPTION: This documentation describes a `POST` request to `/rac/endpoints/` and any corresponding changes. \nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_21\n\nLANGUAGE: API\nCODE:\n```\n##### `POST` /rac/endpoints/\n```\n\n----------------------------------------\n\nTITLE: PATCH /core/users/{id}/ - 200 OK\nDESCRIPTION: Specifies changes to the PATCH endpoint for users, involving content type and the `groups_obj` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n##### `PATCH` /core/users/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `groups_obj` (array)\n\n        Changed items (object): > Simplified Group Serializer for user's groups\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Deployment Image in YAML\nDESCRIPTION: YAML configuration snippet demonstrating how to update the container image for an authentik server deployment in Kubernetes to version 2022.8.1. This requires modifying your Kubernetes manifest or Helm values file to specify the correct image repository and tag.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.8.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.8.1\n```\n\n----------------------------------------\n\nTITLE: Log User In Failed - authentik Events - JSON\nDESCRIPTION: This JSON snippet illustrates the structure of an event recorded when a login attempt fails. It includes the 'login_failed' action, details about the user (often anonymous or partial), the stage where the failure occurred, the username attempted, a masked password field, HTTP request details, client IP, timestamps, and brand information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/events/index.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"pk\": \"2779b173-eb2a-4c2b-a1a4-8283eda308d7\",\n    \"user\": {\n        \"pk\": 2,\n        \"email\": \"\",\n        \"username\": \"AnonymousUser\"\n    },\n    \"action\": \"login_failed\",\n    \"app\": \"authentik.events.signals\",\n    \"context\": {\n        \"stage\": {\n            \"pk\": \"7e88f4a991c442c1a1335d80f0827d7f\",\n            \"app\": \"authentik_stages_password\",\n            \"name\": \"default-authentication-password\",\n            \"model_name\": \"passwordstage\"\n        },\n        \"password\": \"********************\",\n        \"username\": \"akadmin\",\n        \"http_request\": {\n            \"args\": {\n                \"query\": \"next=%2F\"\n            },\n            \"path\": \"/api/v3/flows/executor/default-authentication-flow/\",\n            \"method\": \"POST\"\n        }\n    },\n    \"client_ip\": \"::1\",\n    \"created\": \"2023-02-15T15:32:55.319608Z\",\n    \"expires\": \"2024-02-15T15:32:55.314581Z\",\n    \"brand\": {\n        \"pk\": \"fcba828076b94dedb2d5a6b4c5556fa1\",\n        \"app\": \"authentik_brands\",\n        \"name\": \"Default brand\",\n        \"model_name\": \"brand\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Retrieving Prompt Stages in JSON\nDESCRIPTION: Specifies the JSON structure of the GET response for prompt stages, including 'results' with 'promptstage_set' containing nested 'flow_set' configurations for layout control within prompt stages.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{ \"results\": [ { \"promptstage_set\": [ { \"flow_set\": [ { \"layout\": \"stacked\" } ] } ] } ] }\n```\n\n----------------------------------------\n\nTITLE: Resolve DNS in Python\nDESCRIPTION: Resolves a hostname to a list of IP addresses, optionally filtering by IP version (4 or 6).  Supports caching of DNS results. This requires a network connection.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresolve_dns(\"google.com\")  # return a list of all IPv4 and IPv6 addresses\nresolve_dns(\"google.com\", 4)  # return a list of only IP4 addresses\nresolve_dns(\"google.com\", 6)  # return a list of only IP6 addresses\n```\n\n----------------------------------------\n\nTITLE: Repair Permissions in Docker Environment\nDESCRIPTION: This command runs a Docker container to execute the 'repair_permissions' function within the 'worker' service. It is used to ensure that all necessary permissions are correctly set during initial setup or troubleshooting. Dependencies include Docker Compose configuration with a 'worker' service.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/missing_permission.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run --rm worker repair_permissions\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 for pgAdmin with authentik using Environment Variables in Bash\nDESCRIPTION: This Bash snippet sets the necessary environment variables to configure pgAdmin for OAuth2 authentication using authentik when deploying in containers (Docker/Kubernetes). Export or set these variables in your container orchestration environment. Make sure to replace placeholder values for client ID, secret, URLs, and UI values. Dependencies: Docker/Kubernetes, authentik, pgAdmin image. Key parameters include all PGADMIN_CONFIG_OAUTH2_* environment variables. Input: none; Output: pgAdmin container with authentik-based OAuth2 login.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pgadmin/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPGADMIN_CONFIG_AUTHENTICATION_SOURCES=\"['oauth2', 'internal']\"\nPGADMIN_CONFIG_OAUTH2_AUTO_CREATE_USER=True\nPGADMIN_CONFIG_OAUTH2_CONFIG=\"[{'OAUTH2_NAME':'authentik','OAUTH2_DISPLAY_NAME':'Login with authentik','OAUTH2_CLIENT_ID':'<Client ID from authentik>','OAUTH2_CLIENT_SECRET':'<Client secret from authentik>','OAUTH2_TOKEN_URL':'https://authentik.company/application/o/token/','OAUTH2_AUTHORIZATION_URL':'https://authentik.company/application/o/authorize/','OAUTH2_API_BASE_URL':'https://authentik.company/','OAUTH2_USERINFO_ENDPOINT':'https://authentik.company/application/o/userinfo/','OAUTH2_SERVER_METADATA_URL':'https://authentik.company/application/o/<App Slug>/.well-known/openid-configuration','OAUTH2_SCOPE':'openid email profile','OAUTH2_ICON':'<Fontawesome icon key (e.g., fa-key)>','OAUTH2_BUTTON_COLOR':'<Hexadecimal color code for the login button>'}]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Chronograf Environment Variables for Authentik OAuth2 Integration - YAML\nDESCRIPTION: This YAML snippet lists the key environment variables required to configure Chronograf to authenticate users via an OAuth2/OpenID Connect provider (authentik). It covers settings such as URLs for authorization, token, and userinfo endpoints, client credentials, scopes, and security tokens. These variables enable Chronograf to delegate user login to authentik securely. Users must replace placeholders with their actual domain names and client information. Reference to the official Chronograf documentation is recommended for advanced configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/chronograf/index.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nPUBLIC_URL=https://chronograf.company\nTOKEN_SECRET=Your random secret\nJWKS_URL=https://authentik.company/application/o/<your-application-slug>/jwks/\nGENERIC_NAME=authentik\nGENERIC_CLIENT_ID=<Your Client ID>\nGENERIC_CLIENT_SECRET=<Your Client Secret>\nGENERIC_SCOPES=email,profile,openid\nGENERIC_DOMAINS=authentik.company\nGENERIC_AUTH_URL=https://authentik.company/application/o/authorize/\nGENERIC_TOKEN_URL=https://authentik.company/application/o/token/\nGENERIC_API_URL=https://authentik.company/application/o/userinfo/\nGENERIC_API_KEY=email\nUSE_ID_TOKEN=true\n```\n\n----------------------------------------\n\nTITLE: User Connections - PUT Endpoint for Updating All Connections\nDESCRIPTION: Updates a user connection entry by ID with new source property mappings and group settings, allowing administrative modifications to user connection configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {...},\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flow Stage Challenge via Authentik API (JSON)\nDESCRIPTION: Example JSON response received from a GET request to `/api/v3/flows/executor/:slug`. This response represents the initial challenge presented by a flow stage (e.g., Identification). It includes the stage type (`native`, `shell`, `redirect`), flow metadata (`flow_info`), the active stage component (`component`), and stage-specific fields required for the user interaction.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/api/flow-executor.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"native\", // Stage type, can be \"native\", \"shell\" or \"redirect\"\n    \"flow_info\": {\n        // Related flow information, mostly used for UI and surrounding elements\n        \"title\": \"Welcome to authentik\",\n        \"background\": \"/static/dist/assets/images/flow_background.jpg\",\n        \"cancel_url\": \"/flows/-/cancel/\"\n    },\n    // Main component to distinguish which stage is currently active\n    \"component\": \"ak-stage-identification\",\n\n    // Stage-specific fields\n    \"user_fields\": [\"username\", \"email\"],\n    \"password_fields\": false,\n    \"primary_action\": \"Log in\",\n    \"sources\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Integration in Beszel\nDESCRIPTION: Steps to enable OAuth2 authentication in Beszel by adding an OpenID Connect provider using credentials obtained from Authentik. Includes setting Client ID, Client Secret, authorization URL, token URL, and user info URL to facilitate user login via Authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/beszel/index.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"collection\": \"pb_users_auth\",\n  \"provider\": {\n    \"type\": \"OpenID Connect\",\n    \"settings\": {\n      \"Client ID\": \"<your_client_id>\",\n      \"Client secret\": \"<your_client_secret>\",\n      \"Display name\": \"authentik\",\n      \"Auth URL\": \"https://authentik.company/application/o/authorize/\",\n      \"Token URL\": \"https://authentik.company/application/o/token/\",\n      \"Fetch user info from\": \"User info URL\",\n      \"User info URL\": \"https://authentik.company/application/o/userinfo/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LDAP Sources (API)\nDESCRIPTION: Updates the response for GET /sources/ldap/. The response code is 200 OK with content type application/json. Changes affect the 'results' array items (LDAP Source Serializer), updating the descriptions for the 'managed' and 'policy_engine_mode' properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_25\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /sources/ldap/\n```\n\n----------------------------------------\n\nTITLE: Modifying 'model' Query Parameter (GET /rbac/permissions/assigned_by_roles/)\nDESCRIPTION: Updates the GET /rbac/permissions/assigned_by_roles/ endpoint by changing the behavior or definition of the `model` query parameter. Specific details of the change are not provided in this context.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nGET /rbac/permissions/assigned_by_roles/?model={changed_definition}\n```\n\n----------------------------------------\n\nTITLE: Consent Stage POST and GET Endpoint Changes\nDESCRIPTION: This section covers modifications to the POST and GET endpoints for /stages/consent/.  It outlines changes to both the request and response structures, including modifications to properties like `mode` and `flow_set`. Also changes in the return type and the properties inside the ConsentStage Serializer.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_68\n\n\n\n----------------------------------------\n\nTITLE: Upgrading Authentik Using Docker Compose - Shell\nDESCRIPTION: This shell snippet provides commands to upgrade Authentik to version 2023.10 using Docker Compose. The first command downloads the updated docker-compose.yml file from the official Authentik source and overwrites any existing file, while the second command recreates or updates containers in detached mode using the new configuration. Dependencies: wget must be installed, Docker and Docker Compose should be properly set up, and the user should have necessary permissions. The main parameters involve specifying the remote file URL and ensuring correct permissions to overwrite and restart the stack. Input is not required; output consists of updated docker containers now running the new Authentik version.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/2023.10/docker-compose.yml\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: SCIM Groups - GET Endpoint for Listing Groups\nDESCRIPTION: Retrieves a list of SCIM groups, returning an array of group objects. Each object contains group details like the group name, facilitating enumeration of existing groups.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"group_obj\": {\n        \"name\": \"string\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH /stages/authenticator/validate/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PATCH method for the /stages/authenticator/validate/ endpoint.  It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: PATCH /stages/prompt/prompts/{prompt_uuid}/ Request/Response\nDESCRIPTION: This section describes the changes related to the PATCH request and response to `/stages/prompt/prompts/{prompt_uuid}/`. The request type is `application/json`.  The request includes additions of `initial_value` and `initial_value_expression` properties and changes to `placeholder`. The response is 200 OK with content type `application/json`. It mirrors the changes in the `GET` and `PUT` requests, including additions to properties `initial_value`, `initial_value_expression` and property `placeholder`, as well as similar changes to `promptstage_set`, `flow_set`, and `policy_engine_mode` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_45\n\n\n\n----------------------------------------\n\nTITLE: Call Policy in Python\nDESCRIPTION: Calls another authentik policy by name, passing the current request context. Keyword arguments can be used to modify the request context for the called policy. Returns a `PolicyResult` object.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = ak_call_policy(\"test-policy\")\n# result is a PolicyResult object, so you can access `.passing` and `.messages`.\n# Starting with authentik 2023.4 you can also access `.raw_result`, which is the raw value returned from the called policy\n# `result.passing` will always be a boolean if the policy is passing or not.\nreturn result.passing\n\nresult = ak_call_policy(\"test-policy-2\", foo=\"bar\")\n# Inside the `test-policy-2` you can then use `request.context[\"foo\"]`\nreturn result.passing\n```\n\n----------------------------------------\n\nTITLE: PUT /stages/authenticator/sms/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PUT method for the /stages/authenticator/sms/ endpoint.  It includes addition of a 'mapping' property and changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Image Tag for Authentik Server - YAML\nDESCRIPTION: This snippet provides the configuration lines required to update the Authentik server image when deploying on Kubernetes. It specifies the use of the ghcr.io/goauthentik/server repository and directs users to set the image tag to the specified version (2022.7.1). This update ensures that the deployment uses the intended release version. No additional dependencies are required as this configuration is compatible with standard Kubernetes manifests or Helm values. Users should replace these values in their deployment or values.yaml file as needed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.7.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.7.1\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Sources (API)\nDESCRIPTION: Updates the query parameters and response for GET /sources/oauth/. The 'policy_engine_mode' query parameter description is updated. The response code is 200 OK with content type application/json. Changes affect the 'results' array items (OAuth Source Serializer), updating descriptions for 'managed', 'policy_engine_mode', and adds 'patreon' to the 'provider_type' enum.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_27\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /sources/oauth/\n```\n\n----------------------------------------\n\nTITLE: GET /core/tokens/{identifier}/ - 200 OK\nDESCRIPTION: This describes the changes in the GET endpoint for core tokens.  Changes focus on content type and changes in the  `user_obj` and `groups_obj` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /core/tokens/&#123;identifier&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `user_obj` (object)\n\n        > User Serializer\n\n        - Changed property `groups_obj` (array)\n\n            Changed items (object): > Simplified Group Serializer for user's groups\n\n            - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Configuring NetBox social auth pipeline for authentication and group synchronization\nDESCRIPTION: Configuration for NetBox's social auth pipeline that includes both default and custom pipeline components. Enables synchronization of user groups and roles from authentik to NetBox.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/netbox/index.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSOCIAL_AUTH_PIPELINE = (\n    ###################\n    # Default pipelines\n    ###################\n\n    # Get the information we can about the user and return it in a simple\n    # format to create the user instance later. In some cases the details are\n    # already part of the auth response from the provider, but sometimes this\n    # could hit a provider API.\n    'social_core.pipeline.social_auth.social_details',\n\n    # Get the social uid from whichever service we're authing thru. The uid is\n    # the unique identifier of the given user in the provider.\n    'social_core.pipeline.social_auth.social_uid',\n\n    # Verifies that the current auth process is valid within the current\n    # project, this is where emails and domains whitelists are applied (if\n    # defined).\n    'social_core.pipeline.social_auth.auth_allowed',\n\n    # Checks if the current social-account is already associated in the site.\n    'social_core.pipeline.social_auth.social_user',\n\n    # Make up a username for this person, appends a random string at the end if\n    # there's any collision.\n    'social_core.pipeline.user.get_username',\n\n    # Send a validation email to the user to verify its email address.\n    # Disabled by default.\n    # 'social_core.pipeline.mail.mail_validation',\n\n    # Associates the current social details with another user account with\n    # a similar email address. Disabled by default.\n    # 'social_core.pipeline.social_auth.associate_by_email',\n\n    # Create a user account if we haven't found one yet.\n    'social_core.pipeline.user.create_user',\n\n    # Create the record that associates the social account with the user.\n    'social_core.pipeline.social_auth.associate_user',\n\n    # Populate the extra_data field in the social record with the values\n    # specified by settings (and the default ones like access_token, etc).\n    'social_core.pipeline.social_auth.load_extra_data',\n\n    # Update the user record with any changed info from the auth service.\n    'social_core.pipeline.user.user_details',\n\n\n    ###################\n    # Custom pipelines\n    ###################\n    # Set authentik Groups\n    'netbox.custom_pipeline.add_groups',\n    'netbox.custom_pipeline.remove_groups',\n    # Set Roles\n    'netbox.custom_pipeline.set_roles'\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying the `app` Property\nDESCRIPTION: This section details the changes made to the `app` property, a string, within the API request. It lists the possible values for the `app` property, reflecting available applications within the system, specifying which ones are added and others removed. This change allows for specific application access.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n- Changed property `app` (string)\n\n    > - `authentik.tenants` - authentik Tenants\n    > - `authentik.admin` - authentik Admin\n    > - `authentik.api` - authentik API\n    > - `authentik.crypto` - authentik Crypto\n    > - `authentik.flows` - authentik Flows\n    > - `authentik.outposts` - authentik Outpost\n    > - `authentik.policies.dummy` - authentik Policies.Dummy\n    > - `authentik.policies.event_matcher` - authentik Policies.Event Matcher\n    > - `authentik.policies.expiry` - authentik Policies.Expiry\n    > - `authentik.policies.expression` - authentik Policies.Expression\n    > - `authentik.policies.password` - authentik Policies.Password\n    > - `authentik.policies.reputation` - authentik Policies.Reputation\n    > - `authentik.policies` - authentik Policies\n    > - `authentik.providers.ldap` - authentik Providers.LDAP\n    > - `authentik.providers.oauth2` - authentik Providers.OAuth2\n    > - `authentik.providers.proxy` - authentik Providers.Proxy\n    > - `authentik.providers.radius` - authentik Providers.Radius\n    > - `authentik.providers.saml` - authentik Providers.SAML\n    > - `authentik.providers.scim` - authentik Providers.SCIM\n    > - `authentik.rbac` - authentik RBAC\n    > - `authentik.recovery` - authentik Recovery\n    > - `authentik.sources.ldap` - authentik Sources.LDAP\n    > - `authentik.sources.oauth` - authentik Sources.OAuth\n    > - `authentik.sources.plex` - authentik Sources.Plex\n    > - `authentik.sources.saml` - authentik Sources.SAML\n    > - `authentik.stages.authenticator` - authentik Stages.Authenticator\n    > - `authentik.stages.authenticator_duo` - authentik Stages.Authenticator.Duo\n    > - `authentik.stages.authenticator_sms` - authentik Stages.Authenticator.SMS\n    > - `authentik.stages.authenticator_static` - authentik Stages.Authenticator.Static\n    > - `authentik.stages.authenticator_totp` - authentik Stages.Authenticator.TOTP\n    > - `authentik.stages.authenticator_validate` - authentik Stages.Authenticator.Validate\n    > - `authentik.stages.authenticator_webauthn` - authentik Stages.Authenticator.WebAuthn\n    > - `authentik.stages.captcha` - authentik Stages.Captcha\n    > - `authentik.stages.consent` - authentik Stages.Consent\n    > - `authentik.stages.deny` - authentik Stages.Deny\n    > - `authentik.stages.dummy` - authentik Stages.Dummy\n    > - `authentik.stages.email` - authentik Stages.Email\n    > - `authentik.stages.identification` - authentik Stages.Identification\n    > - `authentik.stages.invitation` - authentik Stages.User Invitation\n    > - `authentik.stages.password` - authentik Stages.Password\n    > - `authentik.stages.prompt` - authentik Stages.Prompt\n    > - `authentik.stages.user_delete` - authentik Stages.User Delete\n    > - `authentik.stages.user_login` - authentik Stages.User Login\n    > - `authentik.stages.user_logout` - authentik Stages.User Logout\n    > - `authentik.stages.user_write` - authentik Stages.User Write\n    > - `authentik.brands` - authentik Brands\n    > - `authentik.blueprints` - authentik Blueprints\n    > - `authentik.core` - authentik Core\n    > - `authentik.enterprise` - authentik Enterprise\n    > - `authentik.enterprise.audit` - authentik Enterprise.Audit\n    > - `authentik.enterprise.providers.rac` - authentik Enterprise.Providers.RAC\n    > - `authentik.events` - authentik Events\n\n    Added enum values:\n\n    - `authentik.brands`\n    - `authentik.enterprise.audit`\n    - `authentik.enterprise.providers.rac`\n```\n\n----------------------------------------\n\nTITLE: Updated Event Matcher Policy App Property Enum Values\nDESCRIPTION: Changes to the app property in Event Matcher Policy Serializer, including the removal of the 'authentik.lib' enum value and listing all available application modules in Authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n\"app\": (string)\n> - `authentik.admin` - authentik Admin\n> - `authentik.api` - authentik API\n> - `authentik.crypto` - authentik Crypto\n> - `authentik.events` - authentik Events\n> - `authentik.flows` - authentik Flows\n> - `authentik.outposts` - authentik Outpost\n> - `authentik.policies.dummy` - authentik Policies.Dummy\n> - `authentik.policies.event_matcher` - authentik Policies.Event Matcher\n> - `authentik.policies.expiry` - authentik Policies.Expiry\n> - `authentik.policies.expression` - authentik Policies.Expression\n> - `authentik.policies.password` - authentik Policies.Password\n> - `authentik.policies.reputation` - authentik Policies.Reputation\n> - `authentik.policies` - authentik Policies\n> - `authentik.providers.ldap` - authentik Providers.LDAP\n> - `authentik.providers.oauth2` - authentik Providers.OAuth2\n> - `authentik.providers.proxy` - authentik Providers.Proxy\n> - `authentik.providers.radius` - authentik Providers.Radius\n> - `authentik.providers.saml` - authentik Providers.SAML\n> - `authentik.providers.scim` - authentik Providers.SCIM\n> - `authentik.recovery` - authentik Recovery\n> - `authentik.sources.ldap` - authentik Sources.LDAP\n> - `authentik.sources.oauth` - authentik Sources.OAuth\n> - `authentik.sources.plex` - authentik Sources.Plex\n> - `authentik.sources.saml` - authentik Sources.SAML\n> - `authentik.stages.authenticator_duo` - authentik Stages.Authenticator.Duo\n> - `authentik.stages.authenticator_sms` - authentik Stages.Authenticator.SMS\n> - `authentik.stages.authenticator_static` - authentik Stages.Authenticator.Static\n> - `authentik.stages.authenticator_totp` - authentik Stages.Authenticator.TOTP\n> - `authentik.stages.authenticator_validate` - authentik Stages.Authenticator.Validate\n> - `authentik.stages.authenticator_webauthn` - authentik Stages.Authenticator.WebAuthn\n> - `authentik.stages.captcha` - authentik Stages.Captcha\n> - `authentik.stages.consent` - authentik Stages.Consent\n> - `authentik.stages.deny` - authentik Stages.Deny\n> - `authentik.stages.dummy` - authentik Stages.Dummy\n> - `authentik.stages.email` - authentik Stages.Email\n> - `authentik.stages.identification` - authentik Stages.Identification\n> - `authentik.stages.invitation` - authentik Stages.User Invitation\n> - `authentik.stages.password` - authentik Stages.Password\n> - `authentik.stages.prompt` - authentik Stages.Prompt\n> - `authentik.stages.user_delete` - authentik Stages.User Delete\n> - `authentik.stages.user_login` - authentik Stages.User Login\n> - `authentik.stages.user_logout` - authentik Stages.User Logout\n> - `authentik.stages.user_write` - authentik Stages.User Write\n> - `authentik.tenants` - authentik Tenants\n> - `authentik.blueprints` - authentik Blueprints\n> - `authentik.core` - authentik Core\n> - `authentik.enterprise` - authentik Enterprise\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentik ForwardAuth Middleware in Traefik - YAML\nDESCRIPTION: This YAML snippet configures the 'authentik' middleware in Traefik using the forwardAuth feature, specifying the endpoint for Authentik, enabling trust for forwarded headers, and enumerating required authentication response headers. Dependencies include a running Traefik instance and accessible Authentik outpost. Inputs include HTTP requests routed through Traefik; outputs involve augmented requests containing authentication headers if successful. Care must be taken to match expected header names between Traefik and Authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_traefik_standalone.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n    middlewares:\n        authentik:\n            forwardAuth:\n                address: http://outpost.company:9000/outpost.goauthentik.io/auth/traefik\n                trustForwardHeader: true\n                authResponseHeaders:\n                    - X-authentik-username\n                    - X-authentik-groups\n                    - X-authentik-entitlements\n                    - X-authentik-email\n                    - X-authentik-name\n                    - X-authentik-uid\n                    - X-authentik-jwt\n                    - X-authentik-meta-jwks\n                    - X-authentik-meta-outpost\n                    - X-authentik-meta-provider\n                    - X-authentik-meta-app\n                    - X-authentik-meta-version\n```\n\n----------------------------------------\n\nTITLE: PATCH /stages/authenticator/sms/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PATCH method for the /stages/authenticator/sms/ endpoint.  It includes addition of a 'mapping' property and changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Import CSS Module for React Before After Slider\nDESCRIPTION: This snippet imports the CSS module required for styling the `react-before-after-slider-component`.  This CSS provides the base styles for the slider to function correctly and display properly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"react-before-after-slider-component/dist/build.css\";\n```\n\n----------------------------------------\n\nTITLE: PATCH /sources/scim_groups/{id}/ - 200 OK\nDESCRIPTION: Details updates to the PATCH endpoint for SCIM groups sources, showcasing similar adjustments to content type and property names.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n##### `PATCH` /sources/scim_groups/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Simplified Group Serializer for user's groups\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Generic SMS Provider Request Payload Structure in JSON\nDESCRIPTION: Example JSON structure of the payload sent to the external API URL when using the Generic SMS provider. The payload includes the from number, the user's phone number, and the authentication token.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/authenticator_sms/index.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"From\": \"<value of the *From number* field>\",\n    \"To\": \"<the phone number of the user's device>\",\n    \"Body\": \"<the token that the user needs to authenticate>,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating API Properties based on changes\nDESCRIPTION: This snippet documents the modification to various API endpoints. The documentation outlines content type, properties, and their associated documentation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `app` (string)\n\n        > Match events created by selected application. When left empty, all applications are matched. When an app is selected, all the application's models are matched.\n\n        Added enum value:\n\n        - `authentik.policies.geoip`\n\n    - Changed property `model` (string)\n\n        > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n\n        Added enum values:\n\n        - `authentik_policies_geoip.geoippolicy`\n        - `authentik_providers_radius.radiusproviderpropertymapping`\n        - `authentik_sources_ldap.ldapsourcepropertymapping`\n        - `authentik_sources_oauth.oauthsourcepropertymapping`\n        - `authentik_sources_oauth.groupoauthsourceconnection`\n        - `authentik_sources_plex.plexsourcepropertymapping`\n        - `authentik_sources_plex.userplexsourceconnection`\n        - `authentik_sources_plex.groupplexsourceconnection`\n        - `authentik_sources_saml.samlsourcepropertymapping`\n        - `authentik_sources_saml.groupsamlsourceconnection`\n        - `authentik_sources_scim.scimsourcepropertymapping`\n          Removed enum values:\n\n        - `authentik_sources_ldap.ldappropertymapping`\n        - `authentik_sources_plex.plexsourceconnection`\n```\n\n----------------------------------------\n\nTITLE: Configure Wazuh Dashboard YAML\nDESCRIPTION: This YAML snippet configures the `wazuh.yml` file to define hosts, ports, usernames, passwords and defines the value for the `run_as` parameter.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nhosts:\n    - default:\n            url: https://127.0.0.1\n            port: 55000\n            username: wazuh-wui\n            password: \"<WAZUH_WUI_PASSWORD>\"\n            // highlight-next-line\n            run_as: false\n```\n\n----------------------------------------\n\nTITLE: Configuring - GlobalProtect SAML - ACS URL\nDESCRIPTION: This value is configured as the ACS URL in the authentik SAML provider settings. It specifies the endpoint on the GlobalProtect portal where authentik (the IdP) should send the SAML assertion after successful authentication. The URL includes the GlobalProtect portal FQDN and port 443.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/globalprotect/index.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nhttps://<em>gp.company:443</em>/SAML20/SP/ACS\n```\n\n----------------------------------------\n\nTITLE: Querying Plex Source List via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This code snippet demonstrates querying the list of Plex sources using Authentik's `/sources/plex/` endpoint via the GET method. The supported query parameter `policy_engine_mode` accepts values 'all' or 'any' to determine policy evaluation logic during the request. The 200 OK JSON response includes a 'results' array with structured Plex source objects containing a 'managed' string (indicating automatic management by Authentik) and the 'policy_engine_mode' used. Required: Authentik instance with Plex source integration enabled; authentication as per API requirements. The endpoint returns structured objects with limit on policy evaluation options.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_29\n\nLANGUAGE: OpenAPI\nCODE:\n```\nGET /sources/plex/\nQuery: policy_engine_mode=[all|any]\nResponse 200 (application/json):\n  results: [\n    {\n      managed: string,\n      policy_engine_mode: string // 'all' or 'any'\n    }, ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Binding (Response Change)\nDESCRIPTION: Describes changes to the GET endpoint for retrieving a specific policy binding. The 200 OK response content type is `application/json`, and the `user_obj` object within the response now has a changed `type` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/bindings/{policy_binding_uuid}/\n```\n\n----------------------------------------\n\nTITLE: Map SAML Last Name from Name Attribute - Python\nDESCRIPTION: This property mapping extracts the last name from the user's full name attribute. It splits the name by the first space and returns everything after the first space. If there is no space, it returns the whole name.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mautic/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreturn request.user.name.split(\" \", 1)[-1]\n```\n\n----------------------------------------\n\nTITLE: Managing QNAP LDAP Services via SSH (Bash)\nDESCRIPTION: This bash snippet provides commands to stop and later start the QNAP NAS LDAP-related services via SSH. Required for editing the nss_ldap.conf file, these commands ensure no processes interfere with configuration changes. Inputs are not required apart from access permissions; commands must be run as an administrator.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/qnap-nas/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/sbin/setcfg LDAP Enable FALSE\n/etc/init.d/ldap.sh stop\n```\n\n----------------------------------------\n\nTITLE: Adding UUID to User Entities in OAuth and Token Responses\nDESCRIPTION: This snippet adds the 'uuid' property to user objects in OAuth tokens, authorization codes, and refresh tokens API responses. It standardizes user identification across token management endpoints with a unique user UUID.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": {\n    \"uuid\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static AWS Role Mapping in authentik (Python)\nDESCRIPTION: Python expression for an authentik SAML Property Mapping. It returns a static ARN string defining the AWS IAM role and SAML provider for users authenticating via Classic IAM. Replace `123412341234` with your AWS Account ID and `saml_role` with your role name.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/aws/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn \"arn:aws:iam::123412341234:role/saml_role,arn:aws:iam::123412341234:saml-provider/authentik\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik with Docker Compose\nDESCRIPTION: This snippet outlines the commands required to upgrade authentik using docker-compose. It involves stopping containers, pulling new images, starting the database, running migrations, and restarting the services.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.10.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down\ndocker-compose pull\ndocker-compose up --no-start\ndocker-compose start redis postgrseql\ndocker-compose run --rm server migrate\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Pre-Release Security Announcement Email Template (Markdown)\nDESCRIPTION: A template for the email body used to announce an upcoming security release to the mailing list. It includes placeholders for the CVE identifier, release date/time, severity level, and fixed versions, along with a link to the security policy.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nWe'll be publishing a security Issue (CVE-2022-xxxxx) and accompanying fix on _date_, 13:00 UTC with the Severity level High. Fixed versions x, y and z will be released alongside a workaround for previous versions. For more info, see the authentik Security policy here: https://goauthentik.io/docs/security/policy.\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Mappings in authentik for SAML Attributes (YAML-like configuration)\nDESCRIPTION: Defines the property mappings required for translating authentik user attributes into SAML attributes for TrueCommand integration. These mappings include username, email, name, title, and telephone number, each with specific expressions to extract data from the request object.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/truecommand/index.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- Name: Username Mapping\n  SAML Attribute Name: unique_name\n  Friendly Name: \n  Expression: return request.user.username\n\n- Name: Email Mapping\n  SAML Attribute Name: email\n  Friendly Name: \n  Expression: return request.user.email\n\n- Name: Name Mapping\n  SAML Attribute Name: given_name\n  Friendly Name: \n  Expression: return request.user.name\n\n- Name: Title Mapping\n  SAML Attribute Name: title\n  Friendly Name: \n  Expression: return [custom_attribute]\n\n- Name: Telephone Number Mapping\n  SAML Attribute Name: telephone_number\n  Friendly Name: \n  Expression: return [custom_attribute]\n```\n\n----------------------------------------\n\nTITLE: Modified SAML Provider Response Schema\nDESCRIPTION: Updates to the SAML Provider response schema with the addition of two new required properties: url_slo_post and url_slo_redirect for Single Logout functionality.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.1.md#_snippet_2\n\nLANGUAGE: API\nCODE:\n```\nChanged response : 200 OK\n- Changed content type : application/json\n    - Changed property `results` (array)\n        Changed items (object): > SAMLProvider Serializer\n        New required properties:\n        - `url_slo_post`\n        - `url_slo_redirect`\n        * Added property `url_slo_post` (string)\n        * Added property `url_slo_redirect` (string)\n```\n\n----------------------------------------\n\nTITLE: Documentation for Updating Prompt via PUT\nDESCRIPTION: Provides details on the PUT method for /stages/prompt/prompts/{prompt_uuid}/, requiring a JSON body with the 'name' property to update the prompt. The response echoes the 'name' field in a JSON format.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.2.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"page_title\": \"Update Prompt Endpoint (PUT)\",\n  \"page_description\": \"API documentation for updating a prompt's details.\",\n  \"page_summary\": \"Explains the request payload structure with the 'name' property and the expected JSON response including the updated name.\",\n  \"languages\": [\"JSON\"],\n  \"codeSnippets\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stage Flow Set Policy Modes via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This snippet demonstrates retrieving a list of flows attached to stages via `/stages/all/{stage_uuid}/` (GET) or `/stages/authenticator/duo/{stage_uuid}/` (GET), returning a JSON 'flow_set' array. Each flow includes a 'policy_engine_mode' property indicating required policy logic ('all' or 'any'). Use cases involve auditing or inspecting stage configuration for correct policy evaluation ordering. Requires stage UUID and bearer authentication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_39\n\nLANGUAGE: OpenAPI\nCODE:\n```\nGET /stages/all/{stage_uuid}/\nGET /stages/authenticator/duo/{stage_uuid}/\nResponse 200 (application/json):\n  flow_set: [\n    {\n      ...,\n      policy_engine_mode: string // 'all' or 'any'\n    }, ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: API Schema for PATCH /stages/authenticator/static/{stage_uuid}/\nDESCRIPTION: Defines the schema for partial updates to static authenticator stages, focusing on modifications to flow_set properties like flow definitions and layout. Allows incremental configuration adjustments.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Deny Stage API with deny_message Property\nDESCRIPTION: This snippet updates the deny stage API to include 'deny_message' in request payloads for creating or updating stages and in responses for retrieval, allowing custom messages to be set and returned in denial scenarios.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deny_message\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Updates for SCIM Providers\nDESCRIPTION: This section details changes to the response of the `/providers/scim/{id}/used_by/` endpoint. The response type is 200 OK with `application/json` content. The `action` property in the response object has updated enum values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: PUT /stages/prompt/prompts/{prompt_uuid}/ Request/Response\nDESCRIPTION: This section describes the changes related to the PUT request and response to `/stages/prompt/prompts/{prompt_uuid}/`. The request type is `application/json`. There are changes in the request, including additions of `initial_value` and `initial_value_expression` properties and changes to `placeholder`. The response is 200 OK with content type `application/json`. It includes the same properties and response modifications found in `GET` request response and similar alterations to `promptstage_set`, `flow_set`, and `policy_engine_mode` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_44\n\n\n\n----------------------------------------\n\nTITLE: Tabbed Interface for Traefik Configuration Templates in JavaScript\nDESCRIPTION: This snippet creates a tabbed interface allowing users to switch between different Traefik setup instructions, including standalone, docker-compose, and ingress. It imports necessary components and embeds the corresponding configuration Markdown files within each tab for easy navigation and visualization.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/server_traefik.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n# Traefik\n\nThe configuration templates shown below apply to both single-application and domain-level forward auth.\n\nimport Placeholders from \"./__placeholders.md\";\n\n<Placeholders />\n\n<Tabs\n  defaultValue=\"standalone-traefik\"\n  values={[\n    {label: 'Standalone traefik', value: 'standalone-traefik'},\n    {label: 'docker-compose', value: 'docker-compose'},\n    {label: 'Ingress', value: 'ingress'}\n  ]}>\n  <TabItem value=\"standalone-traefik\">\n\nimport TraefikStandalone from \"./_traefik_standalone.md\";\n\n<TraefikStandalone />\n\n  </TabItem>\n  <TabItem value=\"docker-compose\">\n\nimport TraefikCompose from \"./_traefik_compose.md\";\n\n<TraefikCompose />\n\n  </TabItem>\n  <TabItem value=\"ingress\">\n\nimport TraefikIngress from \"./_traefik_ingress.md\";\n\n<TraefikIngress />\n\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Implement React Before After Slider Component\nDESCRIPTION: This snippet implements the `ReactBeforeSliderComponent` to display a before-and-after slider comparing two images. It utilizes the `useBaseUrl` hook to dynamically generate the image URLs. Each slider instance compares the dark and light theme versions of different application screens.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/index.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactBeforeSliderComponent\n    firstImage={{\n        id: 1,\n        imageUrl: useBaseUrl(\"img/screen_flow_dark.jpg\"),\n    }}\n    secondImage={{\n        id: 2,\n        imageUrl: useBaseUrl(\"img/screen_flow_light.jpg\"),\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for All Policies (Response Change)\nDESCRIPTION: Details changes to the GET endpoint for retrieving objects referencing a specific policy. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/all/{policy_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab for SAML Authentication with authentik\nDESCRIPTION: Ruby configuration block for GitLab to enable SAML authentication with authentik. This should be added to the '/etc/gitlab/gitlab.rb' file, followed by running 'gitlab-ctl reconfigure' or restarting the container.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/gitlab/index.mdx#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngitlab_rails['omniauth_enabled'] = true\ngitlab_rails['omniauth_allow_single_sign_on'] = ['saml']\ngitlab_rails['omniauth_sync_email_from_provider'] = 'saml'\ngitlab_rails['omniauth_sync_profile_from_provider'] = ['saml']\ngitlab_rails['omniauth_sync_profile_attributes'] = ['email']\ngitlab_rails['omniauth_auto_sign_in_with_provider'] = 'saml'\ngitlab_rails['omniauth_block_auto_created_users'] = false\ngitlab_rails['omniauth_auto_link_saml_user'] = true\ngitlab_rails['omniauth_providers'] = [\n  {\n    name: 'saml',\n    args: {\n      assertion_consumer_service_url: 'https://gitlab.company/users/auth/saml/callback',\n      # Shown when navigating to certificates in authentik\n      idp_cert_fingerprint: '4E:1E:CD:67:4A:67:5A:E9:6A:D0:3C:E6:DD:7A:F2:44:2E:76:00:6A',\n      idp_sso_target_url: 'https://authentik.company/application/saml/<gitlab application slug>/sso/binding/redirect/',\n      issuer: 'https://gitlab.company',\n      name_identifier_format: 'urn:oasis:names:tc:SAML:2.0:nameid-format:persistent',\n      attribute_statements: {\n        email: ['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n        first_name: ['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n        nickname: ['http://schemas.goauthentik.io/2021/02/saml/username']\n      }\n    },\n    label: 'authentik'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configure Omni SAML Environment Variables (Shell)\nDESCRIPTION: This snippet shows the environment variables required for enabling SAML authentication in Omni, pointing to the authentik metadata URL. Replace `authentik.company` with the FQDN of the authentik instance and `<application_slug>` with the slug of the created SAML application in authentik. This allows Omni to discover the authentik SAML configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/omni/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nauth-saml-enabled=true\nauth-saml-url=https://<em>authentik.company</em>/application/saml/<em><application_slug></em>/metadata/\n```\n\n----------------------------------------\n\nTITLE: Documenting POST /policies/event_matcher/ Response Changes\nDESCRIPTION: This section documents the response changes of the `POST` /policies/event_matcher/ endpoint. The response status code is 201 Created and content type is `application/json`. The `app` property changes in the response are documented, including available values like `authentik.admin`, `authentik.api`, etc. Also, `authentik.lib` has been removed from the list of values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: API Response Updates for Radius Providers\nDESCRIPTION: This section details changes to the response of the `/providers/radius/{id}/used_by/` endpoint. The response type is 200 OK with `application/json` content. The `action` property in the response object has updated enum values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: SCIM User Payload Example in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a typical SCIM user payload sent to authentik SCIM endpoints. It includes core user attributes such as schemas, userName, name details, emails, title, and extended enterprise schema fields. The payload represents the expected input format for user creation or update via the SCIM API, adhering to SCIM 2.0 standards. The example also illustrates how special keys with symbols are converted for expression evaluation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/protocols/scim/index.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"schemas\": [\n        \"urn:scim:schemas:core:2.0\",\n        \"urn:scim:schemas:extension:enterprise:2.0\"\n    ],\n    \"userName\": \"foo.bar\",\n    \"name\": {\n        \"familyName\": \"bar\",\n        \"givenName\": \"foo\",\n        \"formatted\": \"foo.bar\"\n    },\n    \"emails\": [\n        {\n            \"value\": \"foo.bar@authentik.company\",\n            \"type\": \"work\",\n            \"primary\": true\n        }\n    ],\n    \"title\": \"\",\n    \"urn:scim:schemas:extension:enterprise:2.0\": {\n        \"department\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Policy Binding (Response Change)\nDESCRIPTION: Describes changes to the GET endpoint for retrieving objects referencing a specific policy binding. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/bindings/{policy_binding_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Updates - Return Type\nDESCRIPTION: Describes the return type and content type changes for the API. It specifies that the response status code is `201 Created` and the content type is `application/json`. It highlights changes in properties like `placeholder` and `type` within the returned JSON structure.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Configure Mastodon OIDC Settings\nDESCRIPTION: This code snippet shows the environment variables that need to be set in Mastodon's `.env.production` file to configure OpenID Connect (OIDC) with authentik. It includes settings for enabling OIDC, specifying the authentik issuer, authorization endpoint, client ID, client secret, redirect URI, and user identifier field.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mastodon/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOIDC_ENABLED=true\nOIDC_DISPLAY_NAME=authentik\nOIDC_DISCOVERY=true\nOIDC_ISSUER=< OpenID Configuration Issuer>\nOIDC_AUTH_ENDPOINT=https://authentik.company/application/o/authorize/\nOIDC_SCOPE=openid,profile,email\nOIDC_UID_FIELD=preferred_username\nOIDC_CLIENT_ID=<Client ID>\nOIDC_CLIENT_SECRET=<Client Secret>\nOIDC_REDIRECT_URI=https://mastodon.company/auth/auth/openid_connect/callback\nOIDC_SECURITY_ASSUME_EMAIL_IS_VERIFIED=true\n```\n\n----------------------------------------\n\nTITLE: API Response Modification: `GET` Stages Used By\nDESCRIPTION: This section describes changes made to `GET` requests for various stages' `used_by` endpoints. The content type is updated to `application/json`, and specific object properties (e.g., `action`) and their allowed enum values are modified, often adding new values and removing old ones. These updates apply to stages like totp, validate, webauthn, captcha, consent, deny, dummy, email, and identification. The responses include a list of all objects referencing the queried object.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Adding verify_only to SMS Stage Creation and Listing Endpoints\nDESCRIPTION: This snippet shows the addition of the 'verify_only' property to the JSON payload of creating and listing SMS authenticator stages, controlling whether phone numbers are used solely for verification purposes and stored as hashes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"verify_only\": \"boolean\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifications to GET /sources/scim/ Endpoint Response Schema\nDESCRIPTION: This snippets updates the response schema for the GET /sources/scim/ endpoint, adding properties for user and group property mappings, and modifying existing properties including results array items to reference the SCIMSource Serializer. It standardizes response content type and status.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_49\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"GET /sources/scim/ Response Schema\",\n  \"details\": \"Updates include result array items with added properties for user and group property mappings, and adjustments to existing object properties.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Action Enum Values in 'used_by' endpoints\nDESCRIPTION: This snippet reflects the changes in enum values for the 'action' property within the 'used_by' endpoints for various policies and property mappings. The change involves adding lowercase values and removing uppercase values for CASCADE, SET_NULL and SET_DEFAULT.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"string\",\n  \"enum_values\": [\n    \"cascade\",\n    \"cascade_many\",\n    \"set_null\",\n    \"set_default\"\n  ],\n  \"removed_enum_values\": [\n    \"CASCADE\",\n    \"CASCADE_MANY\",\n    \"SET_NULL\",\n    \"SET_DEFAULT\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Provider in Semaphore UI - JSON\nDESCRIPTION: This JSON snippet shows how to configure Semaphore UI's OIDC provider settings to integrate authentik as the OAuth2/OpenID Connect authentication provider. It includes key parameters such as the provider URL, client ID, client secret, redirect URL, and claims for username, name, and email, along with requested scopes. This configuration is added to '/etc/semaphore/config.json' on the Semaphore UI host. Dependencies include an existing authentik OAuth2 provider setup with matching client credentials and redirect URLs.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/semaphore/index.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"oidc_providers\": {\n    \"authentik\": {\n      \"display_name\": \"Sign in with authentik\",\n      \"provider_url\": \"https://authentik.company/application/o/<slug>/\",\n      \"client_id\": \"<client-id>\",\n      \"client_secret\": \"<client-secret>\",\n      \"redirect_url\": \"https://semaphore.company/api/auth/oidc/authentik/redirect/\",\n      \"username_claim\": \"username\",\n      \"name_claim\": \"name\",\n      \"email_claim\": \"email\",\n      \"scopes\": [\"openid\", \"profile\", \"email\"]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Tokens Response Structure Updates\nDESCRIPTION: Documents changes to the OAuth2 token endpoints (access_tokens, authorization_codes, refresh_tokens) responses, particularly updating the user avatar property description in the serialized results.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"user\": {\n        \"avatar\": \"User's avatar, either a http/https URL or a data URI\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables and Database Credentials in Shell\nDESCRIPTION: This shell snippet updates the PostgreSQL user and database environment variables necessary for the upgrade from passbook to authentik. It must be added to the .env file to align with new naming conventions and ensure proper database connections. This change is critical because the prefix 'PASSBOOK_' is replaced with 'AUTHENTIK_' and the database credentials need to reflect the existing database name to avoid connection issues during migration. No additional dependencies beyond a shell environment and access to the .env file are required.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.13.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPG_USER=passbook\nPG_DB=passbook\n```\n\n----------------------------------------\n\nTITLE: Configuring Paperless-ng Environment Variables\nDESCRIPTION: Configures Paperless-ng to accept the username from an HTTP header. The `PAPERLESS_ENABLE_HTTP_REMOTE_USER` variable enables this feature, and `PAPERLESS_HTTP_REMOTE_USER_HEADER_NAME` specifies that Paperless should look for the username in the `HTTP_X_AUTHENTIK_USERNAME` header, which is automatically set by the Authentik proxy outpost.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/paperless-ng/index.md#_snippet_0\n\nLANGUAGE: Environment Variables\nCODE:\n```\nPAPERLESS_ENABLE_HTTP_REMOTE_USER=TRUE\nPAPERLESS_HTTP_REMOTE_USER_HEADER_NAME=HTTP_X_AUTHENTIK_USERNAME\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication and Provider Property Values in JSON\nDESCRIPTION: Specifies the possible string values for the 'app' property in Authentik configuration, representing different modules or services within Authentik. These values are used to categorize or identify application components and extensions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n- Changed property `app` (string)\n\n    > - `authentik.admin` - authentik Admin\n    > - `authentik.api` - authentik API\n    > - `authentik.crypto` - authentik Crypto\n    > - `authentik.events` - authentik Events\n    > - `authentik.flows` - authentik Flows\n    > - `authentik.outposts` - authentik Outpost\n    > - `authentik.policies.dummy` - authentik Policies.Dummy\n    > - `authentik.policies.event_matcher` - authentik Policies.Event Matcher\n    > - `authentik.policies.expiry` - authentik Policies.Expiry\n    > - `authentik.policies.expression` - authentik Policies.Expression\n    > - `authentik.policies.password` - authentik Policies.Password\n    > - `authentik.policies.reputation` - authentik Policies.Reputation\n    > - `authentik.policies` - authentik Policies\n    > - `authentik.providers.ldap` - authentik Providers.LDAP\n    > - `authentik.providers.oauth2` - authentik Providers.OAuth2\n    > - `authentik.providers.proxy` - authentik Providers.Proxy\n    > - `authentik.providers.radius` - authentik Providers.Radius\n    > - `authentik.providers.saml` - authentik Providers.SAML\n    > - `authentik.providers.scim` - authentik Providers.SCIM\n    > - `authentik.rbac` - authentik RBAC\n    > - `authentik.recovery` - authentik Recovery\n    > - `authentik.sources.ldap` - authentik Sources.LDAP\n    > - `authentik.sources.oauth` - authentik Sources.OAuth\n    > - `authentik.sources.plex` - authentik Sources.Plex\n    > - `authentik.sources.saml` - authentik Sources.SAML\n    > - `authentik.stages.authenticator` - authentik Stages.Authenticator\n    > - `authentik.stages.authenticator_duo` - authentik Stages.Authenticator.Duo\n    > - `authentik.stages.authenticator_sms` - authentik Stages.Authenticator.SMS\n    > - `authentik.stages.authenticator_static` - authentik Stages.Authenticator.Static\n    > - `authentik.stages.authenticator_totp` - authentik Stages.Authenticator.TOTP\n    > - `authentik.stages.authenticator_validate` - authentik Stages.Authenticator.Validate\n    > - `authentik.stages.authenticator_webauthn` - authentik Stages.Authenticator.WebAuthn\n    > - `authentik.stages.captcha` - authentik Stages.Captcha\n    > - `authentik.stages.consent` - authentik Stages.Consent\n    > - `authentik.stages.deny` - authentik Stages.Deny\n    > - `authentik.stages.dummy` - authentik Stages.Dummy\n    > - `authentik.stages.email` - authentik Stages.Email\n    > - `authentik.stages.identification` - authentik Stages.Identification\n    > - `authentik.stages.invitation` - authentik Stages.User Invitation\n    > - `authentik.stages.password` - authentik Stages.Password\n    > - `authentik.stages.prompt` - authentik Stages.Prompt\n    > - `authentik.stages.user_delete` - authentik Stages.User Delete\n    > - `authentik.stages.user_login` - authentik Stages.User Login\n    > - `authentik.stages.user_logout` - authentik Stages.User Logout\n    > - `authentik.stages.user_write` - authentik Stages.User Write\n    > - `authentik.tenants` - authentik Tenants\n    > - `authentik.blueprints` - authentik Blueprints\n    > - `authentik.core` - authentik Core\n    > - `authentik.enterprise` - authentik Enterprise\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Portainer OAuth Settings for authentik Integration\nDESCRIPTION: Specifies the values required in the Portainer settings (under Settings > Authentication > OAuth > Custom) to integrate with authentik. These settings map Portainer's OAuth client configuration to the authentik provider endpoints and user information. Replace placeholders like `authentik.company` and `portainer.company` with your actual FQDNs. Note that scopes should be space-separated, not comma-separated.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/portainer/index.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n- Client ID: The 'Client ID' from the authentik provider\n- Client Secret: The 'Client secret' from the authentik provider\n- Authorization URL: `https://authentik.company/application/o/authorize/`\n- Access Token URL: `https://authentik.company/application/o/token/`\n- Resource URL: `https://authentik.company/application/o/userinfo/`\n- Redirect URL: `https://portainer.company/`\n- Logout URL: `https://authentik.company/application/o/portainer/end-session/`\n- User Identifier: `preferred_username` (Or `email` if you want to use email addresses as identifiers)\n- Scopes: `email openid profile`\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Service Configuration for PowerDNS-Admin with SAML\nDESCRIPTION: This snippet shows the Docker Compose service setup for PowerDNS-Admin, including port mappings, restart policy, and volume mapping for the SAML certificate. The volume mounts the SAML certificate into the container at the path specified in the environment variable, ensuring secure communication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/powerdns-admin/index.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  powerdns-admin:\n    image: powerdnsadmin/pda-legacy:latest\n    restart: always\n    ports:\n      - 80:80\n    volumes:\n      - ./saml.crt:/saml.crt:ro\n```\n\n----------------------------------------\n\nTITLE: GET /core/user_consent/ Endpoint Changes\nDESCRIPTION: This snippet describes changes to the GET /core/user_consent/ endpoint response by adding the `authentication_flow` property within the provider object. This property defines the authentication flow when an unauthenticated user accesses the associated application.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_16\n\nLANGUAGE: N/A\nCODE:\n```\nGET /core/user_consent/\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > UserConsent Serializer\n\n        - Changed property `application` (object)\n\n            > Application Serializer\n\n            - Changed property `provider_obj` (object)\n\n                > Provider Serializer\n\n                - Added property `authentication_flow` (string)\n                    > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: Modified Flow Serializer Structure in Authentik API Responses\nDESCRIPTION: Describes the restructured flow_set property in Authentik API responses. The flow_set array items now include optional properties for cache_count, policies, and stages instead of having these as separate properties. This represents a significant change in the API response structure.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"cache_count\": \"integer\",\n      \"policies\": \"array\",\n      \"stages\": \"array\"\n      // Additional properties of the stripped down flow serializer\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting  API Response: /providers/radius/{id}/ (PUT)\nDESCRIPTION: Similar to the GET endpoint, this documents the API response structure for the PUT request at `/providers/radius/{id}/`. It specifies changes in expected return type and properties.  This is where modifications made via the PUT method are documented.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Documenting  API Response: /providers/radius/{id}/ (PUT)\",\n  \"description\": \"Similar to the GET endpoint, this documents the API response structure for the PUT request at `/providers/radius/{id}/`. It specifies changes in expected return type and properties.  This is where modifications made via the PUT method are documented.\",\n  \"language\": \"JSON\",\n  \"codeList\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Entitlement Attributes in authentik with Python\nDESCRIPTION: This Python snippet accesses custom attributes stored within a user's entitlements for a specific application in authentik. It calls `app_entitlements()` on the user object, extracts the attributes dictionary, and retrieves the value of a given key (e.g., 'my_attr'). The code returns a dictionary including the requested attribute. Prerequisites are an available request context, user object, entitlement attributes set in authentik, and the target application via `provider.application`. The input is the request context and attribute name; the output is a dictionary with the attribute value. This approach is limited to environments where entitlement attributes are configured and accessible within property mappings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/applications/manage_apps.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nattrs = request.user.app_entitlements(provider.application)\nreturn {\n    \"my_attr\": attrs.get(\"my_attr\")\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying 'model' Query Parameter (GET /rbac/permissions/assigned_by_users/)\nDESCRIPTION: Updates the GET /rbac/permissions/assigned_by_users/ endpoint by changing the behavior or definition of the `model` query parameter. Specific details of the change are not provided in this context.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nGET /rbac/permissions/assigned_by_users/?model={changed_definition}\n```\n\n----------------------------------------\n\nTITLE: Creating an Application and Provider Pair in authentik for SAML Integration\nDESCRIPTION: Guides the creation of an application and provider in authentik configured for SAML SSO with TrueCommand. Includes specifying the ACS URL, issuer, binding type, and attaching property mappings, as well as generating the metadata URL used for TrueCommand setup.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/truecommand/index.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNavigate to Applications > Applications, click Create with Provider\n- Provide application details: name, group, policy mode, UI settings\n- Choose Provider type: SAML Provider\n- Configure Provider: set ACS URL (https://truecommand.company/saml/acs), issuer (truecommand-saml), binding (Post)\n- Add property mappings created earlier\n- Set NameID Property Mapping to email\n- Select signing certificate\n- Save application and provider\n\nNavigate to Applications > Providers > _Provider_, click Copy download URL to obtain metadata URL\n```\n\n----------------------------------------\n\nTITLE: Configuring Node-RED settings.js for OpenID Connect authentication (JavaScript)\nDESCRIPTION: This code snippet shows the configuration object for Node-RED's adminAuth, enabling authentication via the passport-openidconnect strategy. It specifies issuer, authorization, token, userinfo URLs, client credentials, callback URL, and a verification function to process the user's profile, allowing secure login through authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/node-red/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nadminAuth: {\n  type: \"strategy\",\n  strategy: {\n    name: \"openidconnect\",\n    label: 'Sign in with authentik',\n    icon: \"fa-cloud\",\n    strategy: require(\"passport-openidconnect\").Strategy,\n    options: {\n      issuer: 'https://authentik.company/application/o/<application-slug>/',\n      authorizationURL: 'https://authentik.company/application/o/authorize/',\n      tokenURL: 'https://authentik.company/application/o/token/',\n      userInfoURL: 'https://authentik.company/application/o/userinfo/',\n      clientID: '<Client ID (Key): Step 2>',\n      clientSecret: '<Client Secret: Step 2>',\n      callbackURL: 'https://nodered.company/auth/strategy/callback/',\n      scope: ['email', 'profile', 'openid'],\n      proxy: true,\n      verify: function(issuer, profile, done) {\n        done(null, profile)\n      }\n    }\n  },\n  users: function(user) {\n    return Promise.resolve({ username: user, permissions: \"*\" });\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Local Development Hostname for authentik Endpoints in Drupal\nDESCRIPTION: Specifies the hostname 'host.docker.internal:9000' to use for authentik's Token and UserInfo endpoints within the Drupal configuration when developing Drupal locally using DDEV and running authentik locally.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/drupal/index.md#_snippet_3\n\nLANGUAGE: hostname\nCODE:\n```\nhost.docker.internal:9000\n```\n\n----------------------------------------\n\nTITLE: Visualizing Default Authentication Flow with Stages and Policies\nDESCRIPTION: This Mermaid diagram illustrates the structure of the `default-authentication-flow` in authentik. It shows the sequence of different stages (Identification, Password, MFA Validation, User Login) and how policies (Event Matcher, Expression) can conditionally control the flow execution based on specific criteria.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/index.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\nflow_pre[[\"Pre-flow policies\"]]\nflow_pre --Binding 10--> flow_policy_0{{\"Policy (Event Matcher Policy)\ndefault-match-update\"}}\nflow_policy_0 --Policy denied--> done[[\"End of the flow\"]]\nflow_policy_0 --> flow_start[[\"Flow\nWelcome to authentik!\"]]\nstage_0_policy_0 --Policy passed--> stage_0([\"Stage (Identification Stage)\ndefault-authentication-identification\"])\nstage_1_policy_0 --Policy passed--> stage_1([\"Stage (Password Stage)\ndefault-authentication-password\"])\n--> stage_2([\"Stage (Authenticator Validation Stage)\ndefault-authentication-mfa-validation\"])\n--> stage_3([\"Stage (User Login Stage)\ndefault-authentication-login\"])\nflow_start --> stage_0_policy_0{{\"Policy (Event Matcher Policy)\ndefault-match-configuration-error\"}}\nstage_0 --> stage_1_policy_0{{\"Policy (Expression Policy)\ndefault-authentication-flow-password-stage\"}}\nstage_0_policy_0 --Policy denied--> stage_1([\"Stage (Password Stage)\ndefault-authentication-password\"])\nstage_1_policy_0 --Policy denied--> stage_2([\"Stage (Authenticator Validation Stage)\ndefault-authentication-mfa-validation\"])\nstage_3 --> done[[\"End of the flow\"]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving LDAP Providers (API)\nDESCRIPTION: Updates the response for GET /providers/ldap/. The response code is 200 OK with content type application/json. Changes affect the 'results' array items (LDAPProvider Serializer), adding new required properties 'assigned_backchannel_application_name' and 'assigned_backchannel_application_slug'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_20\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /providers/ldap/\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Provisioning of Users in ownCloud OIDC Configuration\nDESCRIPTION: Enhanced PHP configuration for ownCloud's OIDC integration that includes auto-provisioning of new users. This setup automatically creates ownCloud accounts for authentik users upon first login and maps their attributes from claims received in the OIDC flow.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/owncloud/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$CONFIG = [\n  'http.cookie.samesite' => 'None',\n  'openid-connect' => [\n    'provider-url' => 'https://authentik.company/application/o/owncloud/',\n    'client-id' => '<Client ID from authentik>',\n    'client-secret' => '<Client secret from authentik>',\n    'loginButtonName' => 'Log in with authentik',\n    'mode' => 'userid',\n    'search-attribute' => 'preferred_username',\n    'auto-provision' => [\n      'enabled' => true,\n      'email-claim' => 'email',\n      'display-name-claim' => 'given_name',\n      'update' => [\n        'enabled' => true,\n      ],\n    ],\n  ],\n];\n```\n\n----------------------------------------\n\nTITLE: GET /flows/executor/ Endpoint Summary\nDESCRIPTION: This provides a general description of the changes to the GET /flows/executor/ endpoint, focusing on properties and their meanings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_17\n\nLANGUAGE: N/A\nCODE:\n```\nGET /flows/executor/&#123;flow_slug&#125;/\n```\n\n----------------------------------------\n\nTITLE: PUT /stages/authenticator/totp/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PUT method for the /stages/authenticator/totp/ endpoint. It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: User Connections - GET Endpoint for All Connections\nDESCRIPTION: Fetches all user connection configurations by ID, providing source details along with property mappings for users and groups, enabling management of multiple user connection setups.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {...},\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Configuration After Update in YAML\nDESCRIPTION: Shows the new helm values configuration format for authentik in version 0.12. Demonstrates the camelCase naming convention changes and introduces the new kubernetesIntegration setting.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.12.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n    # Optionally specify fixed secret_key, otherwise generated automatically\n    # secretKey: _k*@6h2u2@q-dku57hhgzb7tnx*ba9wodcb^s9g0j59@=y(@_o\n    # Enable error reporting\n    errorReporting:\n        enabled: false\n        environment: customer\n        sendPii: false\n    # Log level used by web and worker\n    # Can be either debug, info, warning, error\n    logLevel: warning\n```\n\n----------------------------------------\n\nTITLE: Updating User/Group Serialization in API Responses (Various Endpoints)\nDESCRIPTION: Multiple API endpoints have updated the serialization of user and group objects within their responses. Specifically, within the `groups_obj` array (found nested under `user_obj`, `user`, or within `results` items), the `users` and original `users_obj` arrays have been removed, and a new optional `users_obj` property has been added to each group object.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.11.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n// Example Change within user_obj or user object in responses like:\n// GET /policies/bindings/, POST /policies/bindings/\n// GET /core/tokens/, POST /core/tokens/\n// GET /core/user_consent/{id}/, GET /core/user_consent/\n// GET /core/users/, POST /core/users/\n// GET /oauth2/authorization_codes/{id}/, GET /oauth2/authorization_codes/\n// GET /oauth2/refresh_tokens/{id}/, GET /oauth2/refresh_tokens/\n{\n  \"groups_obj\": [\n    {\n      // ... other group properties\n      // \"users\": [...] // Deleted property\n      // \"users_obj\": [...] // Deleted property\n      \"users_obj\": [ /* Simplified user representation */ ] // New optional property\n    }\n    // ... more groups\n  ]\n  // ... other user properties\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Outpost Instances - Provider Update\nDESCRIPTION: This details the changes within the `POST` request to `/outposts/instances/`, particularly the impact on the `providers_obj` array. It notes the new required property 'invalidation_flow'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_13\n\nLANGUAGE: API\nCODE:\n```\n##### `POST` /outposts/instances/\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Changed property `providers_obj` (array)\n\n        Changed items (object): > Provider Serializer\n\n        New required properties:\n\n        - `invalidation_flow`\n\n        * Added property `invalidation_flow` (string)\n            > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: Creating SAML Provider Property Mappings in authentik using Python\nDESCRIPTION: These Python expressions are used in authentik's SAML Provider Property Mappings to return user attributes such as full name, user ID, username, and email. Each expression accesses the request object to retrieve the corresponding attribute from the authenticated user. These snippets depend on authentik's context and are executed during SAML token creation to map user information to SAML attributes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/weblate/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn request.user.name\n```\n\nLANGUAGE: python\nCODE:\n```\nreturn request.user.username\n```\n\nLANGUAGE: python\nCODE:\n```\nreturn request.user.username\n```\n\nLANGUAGE: python\nCODE:\n```\nreturn request.user.email\n```\n\n----------------------------------------\n\nTITLE: PATCH Request for Updating Policies Event Matcher with Enumeration of App Property\nDESCRIPTION: This snippet defines the request configuration for a PATCH method targeting a specific policy UUID. It sets the content type as 'application/json' and describes the 'app' property with its possible string values, identical to those in the response, to update or modify the system component association within the event matcher policy.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"application/json\"\n```\n\n----------------------------------------\n\nTITLE: Adding Jellyfin SSO Plugin Repository URL\nDESCRIPTION: The URL for the manifest file of the Jellyfin SSO-Auth plugin repository. This URL needs to be added in the Jellyfin dashboard under Plugins > Repositories to enable the installation of the OIDC plugin.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/jellyfin/index.md#_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://raw.githubusercontent.com/9p4/jellyfin-plugin-sso/manifest-release/manifest.json\n```\n\n----------------------------------------\n\nTITLE: Updating Response Types and Serializers for User Authentication and Connections\nDESCRIPTION: This snippet outlines modifications to several API response schemas, including changing response status codes, content types, and adding or removing properties within serializers related to user properties, groups, tokens, and sources. These changes enhance clarity and extend the data structures supporting user authentication, connections, and stage configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_48\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"response updates for various endpoints, including /sources/scim/ and /sources/user_connections/\",\n  \"details\": \"Adjusts response status codes, modifies properties within serializers such as user_property_mappings, group_property_mappings, token_obj, user_obj, groups_obj, and source objects. Also removes obsolete properties like user_matching_mode.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache2 for Observium OpenID Connect\nDESCRIPTION: This Apache configuration snippet adds OpenID Connect related directives to the Observium VirtualHost configuration.  It sets up the connection to the authentik provider using OIDCProviderMetadataURL, the client ID, secret, and redirect URI, and specifies how to handle forwarded headers.  It defines the authentication type and requires valid users for the location.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/observium/index.md#_snippet_1\n\nLANGUAGE: apacheconf\nCODE:\n```\n<VirtualHost *:80>\n        ...\n\n        OIDCProviderMetadataURL https://authentik.company/application/o/observium/.well-known/openid-configuration\n        OIDCClientID <Client ID>\n        OIDCClientSecret <Client Secret>\n        OIDCRedirectURI https://observium.company/secure/redirect_uri\n        OIDCCryptoPassphrase <Random string for security>\n        OIDCCookieDomain observium.company\n        OIDCXForwardedHeaders X-Forwarded-Host X-Forwarded-Proto\n        OIDCPathScope \"openid email profile\"\n        OIDCRemoteUserClaim preferred_username ^(.*)$ $1@authentik\n\n        <Location />\n        AuthType openid-connect\n        Require valid-user\n        </Location>\n\n        ...\n    </VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Managing SAML Keypair Verification and Signing Fields - JSON\nDESCRIPTION: This schema adds verification_kp (the verification keypair/certificate for incoming SAML assertion signatures) and signing_kp (the keypair for signing outbound responses) to /sources/saml/{slug}/ requests and responses. Application/json payloads now take these fields as optional strings referencing keypair identifiers. verification_kp should be specified if incoming SAML assertions are to be signature-validated, otherwise it can be omitted for unsigned requests. signing_kp is necessary when outgoing SAML responses must be signed. Both fields are dependent on prior keypair configuration in the system.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.6.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"verification_kp\": \"keypair_id_abc123\",\n  \"signing_kp\": \"keypair_id_xyz789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Rancher User ID with Python Expression in authentik\nDESCRIPTION: This Python f-string expression is used within an authentik SAML Property Mapping to create a unique user identifier, specifically for the SAML attribute named `rancherUidUsername` required by Rancher. It concatenates the authentik user's primary key (`user.pk`) and their username (`user.username`), separated by a hyphen, ensuring a unique identifier for each user within Rancher.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/rancher/index.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nreturn f\"{user.pk}-{user.username}\"\n```\n\n----------------------------------------\n\nTITLE: Log User Out - authentik Events - JSON\nDESCRIPTION: This JSON snippet provides an example of an event generated when a user logs out of authentik. It includes the 'logout' action, user details, context including HTTP request information, client IP, creation and expiry timestamps, and associated brand information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/events/index.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"pk\": \"474ffb6b-77e3-401c-b681-7d618962440f\",\n    \"user\": {\n        \"pk\": 1,\n        \"email\": \"root@localhost\",\n        \"username\": \"akadmin\"\n    },\n    \"action\": \"logout\",\n    \"app\": \"authentik.events.signals\",\n    \"context\": {\n        \"http_request\": {\n            \"args\": {\n                \"query\": \"\"\n            },\n            \"path\": \"/api/v3/flows/executor/default-invalidation-flow/\",\n            \"method\": \"GET\"\n        }\n    },\n    \"client_ip\": \"::1\",\n    \"created\": \"2023-02-15T15:39:55.976243Z\",\n    \"expires\": \"2024-02-15T15:39:55.975535Z\",\n    \"brand\": {\n        \"pk\": \"fcba828076b94dedb2d5a6b4c5556fa1\",\n        \"app\": \"authentik_brands\",\n        \"name\": \"Default brand\",\n        \"model_name\": \"brand\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Updates for Proxy Providers\nDESCRIPTION: This section details changes to the response of the `/providers/proxy/{id}/used_by/` endpoint. The response type is 200 OK with `application/json` content. The `action` property in the response object has updated enum values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Modifying User Write Stage List Endpoint\nDESCRIPTION: Updates to the User Write Stage list endpoint, replacing the 'can_create_users' query parameter with 'user_creation_mode' and updating the response schema accordingly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.1.md#_snippet_8\n\nLANGUAGE: API\nCODE:\n```\nGET /stages/user_write/\nParameters:\nAdded: `user_creation_mode` in `query`\nDeleted: `can_create_users` in `query`\n\nReturn Type:\nChanged response : 200 OK\n- Changed content type : application/json\n    - Changed property `results` (array)\n        Changed items (object): > UserWriteStage Serializer\n        - Added property `user_creation_mode` (string)\n        - Deleted property `can_create_users` (boolean)\n            > When set, this stage can create users. If not enabled and no user is available, stage will fail.\n```\n\n----------------------------------------\n\nTITLE: Creating a SAML Source via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This snippet illustrates creating a new SAML source with Authentik's `/sources/saml/` POST endpoint by providing a JSON body that includes the optional 'policy_engine_mode' property. Valid values are 'all' and 'any', determining whether all or any assigned policies must pass. On success, a 201 Created JSON response returns the created source with a 'managed' indicator (for migration-controlled objects) and the specified policy mode. Requires valid Authentik API authentication and appropriate payload structure; the endpoint may overwrite user changes if 'managed' is true.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_30\n\nLANGUAGE: OpenAPI\nCODE:\n```\nPOST /sources/saml/\nRequest (application/json):\n  policy_engine_mode: string // 'all' or 'any'\nResponse 201 (application/json):\n  managed: string,\n  policy_engine_mode: string\n```\n\n----------------------------------------\n\nTITLE: API Change: Adding invalidation_flow to Provider Objects\nDESCRIPTION: Changes to multiple API endpoints that add the 'invalidation_flow' property to provider objects. This property is used for ending sessions from a provider and is now a required field in many provider endpoints.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_3\n\nLANGUAGE: API\nCODE:\n```\nNew required properties:\n- `invalidation_flow`\n\n* Added property `invalidation_flow` (string)\n    > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: Creating SAML Providers (API)\nDESCRIPTION: Updates the response for POST /providers/saml/. The response code is 201 Created with content type application/json. New required properties 'assigned_backchannel_application_name' (Application's display Name) and 'assigned_backchannel_application_slug' (Internal application name for URLs) are added to the response body.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_21\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /providers/saml/\n```\n\n----------------------------------------\n\nTITLE: Roundcube OAuth Configuration\nDESCRIPTION: This configuration block is for Roundcube's OAuth2 plugin. It specifies the provider as 'generic' with the name 'authentik'. It includes the client ID and secret, authorization, token, and identity URIs from the authentik application. It also defines the scopes and identity fields needed for user authentication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/roundcube/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config['oauth_provider'] = 'generic';\n$config['oauth_provider_name'] = 'authentik';\n$config['oauth_client_id'] = '<Client ID>';\n$config['oauth_client_secret'] = '<Client Secret>';\n$config['oauth_auth_uri'] = 'https://authentik.company/application/o/authorize/';\n$config['oauth_token_uri'] = 'https://authentik.company/application/o/token/';\n$config['oauth_identity_uri'] = 'https://authentik.company/application/o/userinfo/';\n$config['oauth_scope'] = \"email openid dovecotprofile\";\n$config['oauth_auth_parameters'] = [];\n$config['oauth_identity_fields'] = ['email'];\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Upgrade Command\nDESCRIPTION: This command is used to upgrade an authentik instance deployed using Docker Compose. It downloads the docker-compose file for the specified version and then runs `docker-compose up -d` to apply the changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2021/v2021.6.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Homarr Environment Variables for authentik OIDC Integration in Shell\nDESCRIPTION: Sets required environment variables in the Homarr container/service to enable OpenID Connect authentication with authentik. It includes specifying enabled auth providers, client credentials (ID and secret), issuer URL, authorization endpoint URI, and optional flags controlling login behavior. These variables should be populated with values obtained from the authentik application/provider setup and then Homarr should be restarted to apply changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/homarr/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_PROVIDERS=\"oidc,credentials\"\nAUTH_OIDC_CLIENT_ID=<Client ID from authentik>\nAUTH_OIDC_CLIENT_SECRET=<Client secret from authentik>\nAUTH_OIDC_ISSUER=https://authentik.company/application/o/<slug from authentik>\nAUTH_OIDC_URI=https://authentik.company/application/o/authorize\nAUTH_OIDC_CLIENT_NAME=authentik\nOAUTH_ALLOW_DANGEROUS_EMAIL_ACCOUNT_LINKING=true\n# Optional: You can add this if you only want to allow auto login via authentik\n# AUTH_OIDC_AUTO_LOGIN=true\n```\n\n----------------------------------------\n\nTITLE: Illustrating IdP Initiated SSO Flow - Mermaid\nDESCRIPTION: This Mermaid sequence diagram visualizes the steps involved in an IdP-initiated single sign-on flow. The process starts with the user logging into the Identity Provider (IdP), then attempting to access a resource on the Service Provider (SP, authentik). The SP requests a SAML assertion from the IdP, which authenticates the user and returns the assertion. Finally, the SP validates the assertion and redirects the user's browser to the requested resource.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/index.mdx#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant User\n    participant IdP as Identity Provider\n    participant SP as authentik\n    participant Browser\n\n    User->>IdP: Log in\n    User->>SP: Access resource\n    SP->>IdP: Request SAML assertion\n    IdP->>IdP: Authenticate user\n    IdP->>SP: Return SAML assertion\n    SP->>Browser: Redirect to resource\n```\n\n----------------------------------------\n\nTITLE: Configuring Guacamole OIDC via Docker .env Variables (YAML)\nDESCRIPTION: Defines OpenID Connect (OIDC) configuration settings for Apache Guacamole when running in a Docker container. These environment variables, typically added to a `.env` file, specify the authentik authorization endpoint, client ID, issuer, JWKS endpoint, redirect URI, and the user claim type to use for authentication against authentik. Requires replacing placeholder values with your specific authentik and Guacamole details.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apache-guacamole/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nOPENID_AUTHORIZATION_ENDPOINT=https://authentik.company/application/o/authorize/\nOPENID_CLIENT_ID=<Client ID from authentik>\nOPENID_ISSUER=https://authentik.company/application/o/<your-slug>/\nOPENID_JWKS_ENDPOINT=https://authentik.company/application/o/<your-slug>/jwks/\nOPENID_REDIRECT_URI=https://guacamole.company/\nOPENID_USERNAME_CLAIM_TYPE=preferred_username\n```\n\n----------------------------------------\n\nTITLE: Deny Flow When User is Authenticated in Authentik Python Policy\nDESCRIPTION: This snippet checks whether the current user is authenticated and denies the flow if they are. It returns 'not request.user.is_authenticated', which ensures non-authenticated users are allowed, while authenticated users are prevented from proceeding. When used with Authentik 2022.7 or later, it is recommended to set the flow's 'Denied action' to 'CONTINUE' to redirect authenticated users to the default interface, enhancing flow control and user experience.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/flow/examples/snippets.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nreturn not request.user.is_authenticated\n```\n\n----------------------------------------\n\nTITLE: Describing GET /policies/event_matcher/ Endpoint\nDESCRIPTION: This section describes the `GET` /policies/event_matcher/ endpoint. However, this part of the text is just a header, and there are no changes or details listed within.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Logging with structlog BoundLogger in Python\nDESCRIPTION: This code snippet demonstrates how to use the structlog BoundLogger to log messages at different levels (debug, warning, and info) in Python. The logger supports structured logging, allowing developers to add contextual data such as the request object when logging. Dependencies include the structlog package (install via pip install structlog). The main input is the log message, which may include additional structured data parameters; outputs are handled by structlog's logging system. There are no direct limitations, but proper structlog configuration is required for optimal usage.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_objects.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nak_logger.debug(\"This is a test message\")\nak_logger.warning(\"This will be logged with a warning level\")\nak_logger.info(\"Passing structured data\", request=request)\n```\n\n----------------------------------------\n\nTITLE: Querying OAuth User Connection Sources via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This snippet covers issuing a GET request to `/sources/user_connections/oauth/` to list all OAuth sources connected to users. The JSON response structure includes an array of 'results', each with a 'source' object, inside which 'managed' and 'policy_engine_mode' properties define management status and the policy logic (all/any). Requires proper authentication; results reflect current connections and their effective policy behavior.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_34\n\nLANGUAGE: OpenAPI\nCODE:\n```\nGET /sources/user_connections/oauth/\nResponse 200 (application/json):\n  results: [\n    {\n      source: {\n        managed: string,\n        policy_engine_mode: string // 'all' or 'any'\n      }\n    }, ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating an authentik Application\nDESCRIPTION: Details the process of creating an application within authentik. It specifies the application's name and slug, and associates it with the previously configured LDAP provider. This application serves as an intermediary to connect the LDAP provider to other services.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Updating Flow Sources in Authentik\nDESCRIPTION: This section details changes to the content related to the flow sources of an authentik component. Specific components are added and deleted. The response content type is `application/json`, and the response code is `200 OK`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nDeleted 'ak-flow-sources-plex' component\n    Deleted 'ak-flow-sources-oauth-apple' component\n    Added 'ak-provider-oauth2-device-code' component:\n    Added 'ak-source-oauth-apple' component:\n    Added 'ak-source-plex' component:\n    Added 'ak-provider-oauth2-device-code-finish' component:\n    Updated `ak-stage-identification` component:\n\n    - Changed property `sources` (array)\n\n        Changed items (object): > Serializer for Login buttons of sources\n\n        - Changed property `challenge` (object)\n\n            Deleted 'ak-flow-sources-plex' component\n            Deleted 'ak-flow-sources-oauth-apple' component\n            Added 'ak-source-oauth-apple' component:\n            Added 'ak-source-plex' component:\n```\n\n----------------------------------------\n\nTITLE: Rendering a Global Component Using JSX Syntax in JavaScript\nDESCRIPTION: This snippet renders a Global component in JSX syntax, which is likely part of a React-based framework. The usage demonstrates embedding the imported Global component to include global styles or behavior in the rendered output.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/interfaces/flow/customization.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Global />\n```\n\n----------------------------------------\n\nTITLE: Introducing New and Removed JSON Query Parameters - JSON\nDESCRIPTION: This snippet documents the addition and deletion of query parameters in GET requests, aligning request structures for filtering and schema discovery. Most common parameters include 'user_property_mappings', 'group_property_mappings', and 'group_matching_mode', enabling more granular API queries. Inputs are typically query key-value pairs transmitted as part of the HTTP GET request; outputs are filtered JSON results.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  // For requests:\n  \"?user_property_mappings=...&group_property_mappings=...&group_matching_mode=...\"\n  // Removed parameters: property_mappings, property_mappings_group\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint - PUT /stages/email\nDESCRIPTION: This snippet describes the PUT method for endpoint `/stages/email/{stage_uuid}/`. The request and response are of type `application/json` with changes reflected in the `flow_set` array. The request includes various properties within the request and response for the `flow_set`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_54\n\nLANGUAGE: API Definition\nCODE:\n```\n##### `PUT` /stages/email/&#123;stage_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n    - Changed property `designation` (string)\n\n        > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n    - Changed property `denied_action` (string)\n\n        > Configure what should happen when a flow denies access to a user.\n\n    - Changed property `policy_engine_mode` (string)\n\n    - Changed property `layout` (string)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        - Changed property `designation` (string)\n\n            > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n        - Changed property `denied_action` (string)\n\n            > Configure what should happen when a flow denies access to a user.\n\n        - Changed property `policy_engine_mode` (string)\n\n        - Changed property `layout` (string)\n```\n\n----------------------------------------\n\nTITLE: Verifying Configuration with Docker Compose\nDESCRIPTION: Command to output the full authentik configuration when using Docker Compose to verify that configuration settings have been applied correctly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/configuration/configuration.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --rm worker dump_config\n```\n\n----------------------------------------\n\nTITLE: API Change: Adding encryption_key to OAuth2 Provider\nDESCRIPTION: Adds an encryption_key property to OAuth2 Provider endpoints. This key is used to encrypt tokens, which will be returned as JWEs when this property is set.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_4\n\nLANGUAGE: API\nCODE:\n```\n* Added property `encryption_key` (string)\n    > Key used to encrypt the tokens. When set, tokens will be encrypted and returned as JWEs.\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Application Entitlements in authentik with Python\nDESCRIPTION: This Python snippet demonstrates how to retrieve all entitlement names available to a user for a specific application within authentik using the property mapping or policy context. The snippet iterates through the entitlements from the user's `app_entitlements()` function, extracting and returning a list of entitlement names as a dictionary. Requires access to the `request` context, the user object, and a properly initialized `provider.application`. The inputs are the request context and provider, and the output is a dictionary containing the entitlements. There are no inherent limitations, but usage is scoped to property mappings or policies where these objects are defined.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/applications/manage_apps.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nentitlements = [entitlement.name for entitlement in request.user.app_entitlements(provider.application)]\nreturn {\n    \"entitlements\": entitlements,\n}\n```\n\n----------------------------------------\n\nTITLE: GET /providers/microsoft_entra_groups/{id}/ - 200 OK\nDESCRIPTION: This describes changes in the GET endpoint's response for Microsoft Entra Groups. The response's content type and properties are updated similarly to the Google Workspace groups.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /providers/microsoft_entra_groups/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Simplified Group Serializer for user's groups\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Configuring Guacamole OIDC via guacamole.properties (YAML)\nDESCRIPTION: Defines OpenID Connect (OIDC) configuration settings for standalone Apache Guacamole installations. These properties are added to the `guacamole.properties` file and specify the authentik authorization endpoint, client ID, issuer, JWKS endpoint, redirect URI, and the user claim type for SSO integration. Requires replacing placeholder values with your specific authentik and Guacamole details.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apache-guacamole/index.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nopenid-authorization-endpoint=https://authentik.company/application/o/authorize/\nopenid-client-id=<Client ID from authentik>\nopenid-issuer=https://authentik.company/application/o/<your-slug>/\nopenid-jwks-endpoint=https://authentik.company/application/o/<your-slug>/jwks/\nopenid-redirect-uri=https://guacamole.company/\nopenid-username-claim-type=preferred_username\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model Identifiers in JSON\nDESCRIPTION: Lists string identifiers for various data models within Authentik, such as policies, providers, stages, and core entities. These strings are used for internal referencing, serialization, or API interactions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n- Changed property `model` (string)\n\n    > - `authentik_crypto.certificatekeypair` - Certificate-Key Pair\n    > - `authentik_events.event` - Event\n    > - `authentik_events.notificationtransport` - Notification Transport\n    > - `authentik_events.notification` - Notification\n    > - `authentik_events.notificationrule` - Notification Rule\n    > - `authentik_events.notificationwebhookmapping` - Webhook Mapping\n    > - `authentik_flows.flow` - Flow\n    > - `authentik_flows.flowstagebinding` - Flow Stage Binding\n    > - `authentik_outposts.dockerserviceconnection` - Docker Service-Connection\n    > - `authentik_outposts.kubernetesserviceconnection` - Kubernetes Service-Connection\n    > - `authentik_outposts.outpost` - Outpost\n    > - `authentik_policies_dummy.dummypolicy` - Dummy Policy\n    > - `authentik_policies_event_matcher.eventmatcherpolicy` - Event Matcher Policy\n    > - `authentik_policies_expiry.passwordexpirypolicy` - Password Expiry Policy\n    > - `authentik_policies_expression.expressionpolicy` - Expression Policy\n    > - `authentik_policies_password.passwordpolicy` - Password Policy\n    > - `authentik_policies_reputation.reputationpolicy` - Reputation Policy\n    > - `authentik_policies_reputation.reputation` - Reputation Score\n    > - `authentik_policies.policybinding` - Policy Binding\n    > - `authentik_providers_ldap.ldapprovider` - LDAP Provider\n    > - `authentik_providers_oauth2.scopemapping` - Scope Mapping\n    > - `authentik_providers_oauth2.oauth2provider` - OAuth2/OpenID Provider\n    > - `authentik_providers_oauth2.authorizationcode` - Authorization Code\n    > - `authentik_providers_oauth2.accesstoken` - OAuth2 Access Token\n    > - `authentik_providers_oauth2.refreshtoken` - OAuth2 Refresh Token\n    > - `authentik_providers_proxy.proxyprovider` - Proxy Provider\n    > - `authentik_providers_radius.radiusprovider` - Radius Provider\n    > - `authentik_providers_saml.samlprovider` - SAML Provider\n    > - `authentik_providers_saml.samlpropertymapping` - SAML Property Mapping\n    > - `authentik_providers_scim.scimprovider` - SCIM Provider\n    > - `authentik_providers_scim.scimmapping` - SCIM Mapping\n    > - `authentik_rbac.role` - Role\n    > - `authentik_sources_ldap.ldapsource` - LDAP Source\n    > - `authentik_sources_ldap.ldappropertymapping` - LDAP Property Mapping\n    > - `authentik_sources_oauth.oauthsource` - OAuth Source\n    > - `authentik_sources_oauth.useroauthsourceconnection` - User OAuth Source Connection\n    > - `authentik_sources_plex.plexsource` - Plex Source\n    > - `authentik_sources_plex.plexsourceconnection` - User Plex Source Connection\n    > - `authentik_sources_saml.samlsource` - SAML Source\n    > - `authentik_sources_saml.usersamlsourceconnection` - User SAML Source Connection\n    > - `authentik_stages_authenticator_duo.authenticatorduostage` - Duo Authenticator Setup Stage\n    > - `authentik_stages_authenticator_duo.duodevice` - Duo Device\n    > - `authentik_stages_authenticator_sms.authenticatorsmsstage` - SMS Authenticator Setup Stage\n    > - `authentik_stages_authenticator_sms.smsdevice` - SMS Device\n    > - `authentik_stages_authenticator_static.authenticatorstaticstage` - Static Authenticator Stage\n    > - `authentik_stages_authenticator_static.staticdevice` - Static Device\n    > - `authentik_stages_authenticator_totp.authenticatortotpstage` - TOTP Authenticator Setup Stage\n    > - `authentik_stages_authenticator_totp.totpdevice` - TOTP Device\n    > - `authentik_stages_authenticator_validate.authenticatorvalidatestage` - Authenticator Validation Stage\n    > - `authentik_stages_authenticator_webauthn.authenticatewebauthnstage` - WebAuthn Authenticator Setup Stage\n    > - `authentik_stages_authenticator_webauthn.webauthndevice` - WebAuthn Device\n    > - `authentik_stages_captcha.captchastage` - Captcha Stage\n    > - `authentik_stages_consent.consentstage` - Consent Stage\n    > - `authentik_stages_consent.userconset` - User Consent\n    > - `authentik_stages_deny.denystage` - Deny Stage\n    > - `authentik_stages_dummy.dummystage` - Dummy Stage\n    > - `authentik_stages_email.emailstage` - Email Stage\n    > - `authentik_stages_identification.identificationstage` - Identification Stage\n    > - `authentik_stages_invitation.invitationstage` - Invitation Stage\n    > - `authentik_stages_invitation.invitation` - Invitation\n    > - `authentik_stages_password.passwordstage` - Password Stage\n    > - `authentik_stages_prompt.prompt` - Prompt\n    > - `authentik_stages_prompt.promptstage` - Prompt Stage\n    > - `authentik_stages_user_delete.userdeletestage` - User Delete Stage\n    > - `authentik_stages_user_login.userloginstage` - User Login Stage\n    > - `authentik_stages_user_logout.userlogoutstage` - User Logout Stage\n    > - `authentik_stages_user_write.userwritestage` - User Write Stage\n    > - `authentik_tenants.tenant` - Tenant\n    > - `authentik_blueprints.blueprintinstance` - Blueprint Instance\n    > - `authentik_core.group` - Group\n    > - `authentik_core.user` - User\n    > - `authentik_core.application` - Application\n    > - `authentik_core.token` - Token\n    > - `authentik_enterprise.license` - License\n```\n\n----------------------------------------\n\nTITLE: Using Expand Component in HTML (Expanded)\nDESCRIPTION: This HTML snippet shows how to use the Expand component to display the content when it is initially rendered in an expanded state. The \"expanded\" attribute is used to set the initial state. The expected output is that the content is visible on page load.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Expand.docs.mdx#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-expand expanded><p>Your primary content goes here</p></ak-expand>\n```\n\n----------------------------------------\n\nTITLE: Retrieving SAML Providers (API)\nDESCRIPTION: Updates the request parameters and response for GET /providers/saml/. Adds 'backchannel_application' and 'is_backchannel' as query parameters. The response code is 200 OK with content type application/json. Changes affect the 'results' array items (SAMLProvider Serializer), adding new required properties 'assigned_backchannel_application_name' and 'assigned_backchannel_application_slug'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_22\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /providers/saml/\n```\n\n----------------------------------------\n\nTITLE: OAuth User Connection - GET Endpoint\nDESCRIPTION: Retrieves OAuth user connection details by ID, including creation timestamp, user ID, source configuration, and property mappings, to manage OAuth-based user associations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"string\",\n  \"user\": \"integer\",\n  \"source\": {...},\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying SAML Source List via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This example covers retrieving all SAML sources using the GET `/sources/saml/` endpoint, optionally filtered by the 'policy_engine_mode' query parameter, which accepts 'all' or 'any' to specify policy evaluation. The 200 OK JSON response includes a 'results' array with SAML source objects, each containing a 'managed' flag and a 'policy_engine_mode'. Requires the user to be authorized with appropriate permissions and access to SAML sources.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_31\n\nLANGUAGE: OpenAPI\nCODE:\n```\nGET /sources/saml/\nQuery: policy_engine_mode=[all|any]\nResponse 200 (application/json):\n  results: [\n    {\n      managed: string,\n      policy_engine_mode: string // 'all' or 'any'\n    }, ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint - DELETE/GET /stages/dummy\nDESCRIPTION: This snippet describes the API endpoints `/stages/dummy/{stage_uuid}/` with both DELETE and GET methods and returns 200 OK.  The GET requests retrieve information, and the DELETE method removes the specified resource. The request and response format for `GET` is consistent with the others, containing the `flow_set` properties within the response.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_50\n\nLANGUAGE: API Definition\nCODE:\n```\n##### `DELETE` /stages/dummy/&#123;stage_uuid&#125;/\n\n##### `GET` /stages/dummy/&#123;stage_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        - Changed property `designation` (string)\n\n            > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n        - Changed property `denied_action` (string)\n\n            > Configure what should happen when a flow denies access to a user.\n\n        - Changed property `policy_engine_mode` (string)\n\n        - Changed property `layout` (string)\n```\n\n----------------------------------------\n\nTITLE: POST /providers/ldap/ Endpoint Changes\nDESCRIPTION: This snippet documents additions to the POST /providers/ldap/ endpoint. Specifically, it adds the 'authentication_flow' property to the request and response. The `authentication_flow` property is used to define the authentication flow for unauthenticated users.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_9\n\nLANGUAGE: N/A\nCODE:\n```\nPOST /providers/ldap/\n###### Request:\n\nChanged content type : `application/json`\n\n- Added property `authentication_flow` (string)\n    > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Added property `authentication_flow` (string)\n        > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: Post-Release Security Announcement Email Template (Markdown)\nDESCRIPTION: A template for the email body announcing that a security advisory and the corresponding fixed releases have been published. It includes links to the specific GitHub Security Advisory and the GitHub Releases page.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nThe security advisory for CVE-2022-xxxxx has been published: https://github.com/goauthentik/authentik/security/advisories/GHSA-mjfw-54m5-fvjf\n\nReleases 2022.10.3 and 2022.11.3 with fixes included are available here: https://github.com/goauthentik/authentik/releases\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication in The Lounge config.js\nDESCRIPTION: These settings enable LDAP authentication in The Lounge IRC client by connecting to an authentik LDAP outpost. It specifies connection details, bind credentials, and search parameters for user authentication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/thelounge/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nldap: {\n  enable: true,\n  url: \"ldap://authentik.company\",\n  primaryKey: \"cn\",\n  searchDN: {\n    rootDN: \"cn=ldap_bind_user,ou=users,dc=company,dc=com\",\n    rootPassword: \"your_bind_user_password\",\n    filter: \"(&(objectClass=user)\",\n    // Alternative filter with group restriction:\n    // filter: \"(&(objectClass=user)(memberOf=cn=group_name,ou=groups,dc=ldap,dc=company,dc=com))\",\n    base: \"dc=ldap,dc=company,dc=com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Updates - GET /stages/prompt/prompts/ Parameters\nDESCRIPTION: Illustrates parameter changes made to the `GET` `/stages/prompt/prompts/` endpoint. Specific emphasis is placed on updated parameter types like `text`, `text_area`, `text_read_only`, and others, mirroring the prompt types defined in the previous section. The description reiterates the possible `type` values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Configuring OIDC Role with Group Claims and Scopes in Vault\nDESCRIPTION: Updates the 'reader' role to include group claim configuration, scopes, and policies. This allows Vault to map OIDC groups to Vault policies, enabling group-based access control.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hashicorp-vault/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/oidc/role/reader \\\n      bound_audiences=\"Client ID\" \\\n      allowed_redirect_uris=\"https://vault.company/ui/vault/auth/oidc/oidc/callback\" \\\n      allowed_redirect_uris=\"https://vault.company/oidc/callback\" \\\n      allowed_redirect_uris=\"http://localhost:8250/oidc/callback\" \\\n      user_claim=\"sub\" \\\n      policies=\"reader\" \\\n      groups_claim=\"groups\" \\\n      oidc_scopes=[ \"openid profile email\" ]\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Client for authentik Web Interface\nDESCRIPTION: Command to build the TypeScript client used by the web-interface and web-FlowExecutor. This will overwrite the locally installed client with the newly built one.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/api/making-schema-changes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake gen-client-ts\n```\n\n----------------------------------------\n\nTITLE: Basic Divider Implementation in HTML\nDESCRIPTION: Demonstrates the simplest implementation of the Divider component with no content. This creates a basic horizontal rule to separate page elements.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Divider.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-divider></ak-divider>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Prompt Stage in Authentik via JSON (POST)\nDESCRIPTION: Details the request and response bodies for creating a new prompt stage using the POST method. The core change is within the 'flow_set' array, with each object supporting a 'layout' property that can take one of five enumerated string values. The response returns the created resource with an HTTP 201 status. Required input is a properly structured JSON object with the relevant flow and stage data.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"content_right\" // Valid values as above\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Authentik Proxy Outpost using Docker Compose\nDESCRIPTION: Docker Compose service definition for the Authentik Proxy outpost. It configures the official proxy image, maps standard HTTP/S ports (9000, 9443), and sets required environment variables (AUTHENTIK_HOST, AUTHENTIK_INSECURE, AUTHENTIK_TOKEN) for connection to the core Authentik server. Optional network and browser host settings are included.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/manual-deploy-docker-compose.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    authentik_proxy:\n        image: ghcr.io/goauthentik/proxy\n        # Optionally specify which networks the container should be\n        # might be needed to reach the core authentik server\n        # networks:\n        #   - foo\n        ports:\n            - 9000:9000\n            - 9443:9443\n        environment:\n            AUTHENTIK_HOST: https://your-authentik.tld\n            AUTHENTIK_INSECURE: \"false\"\n            AUTHENTIK_TOKEN: token-generated-by-authentik\n            # Starting with 2021.9, you can optionally set this too\n            # when authentik_host for internal communication doesn't match the public URL\n            # AUTHENTIK_HOST_BROWSER: https://external-domain.tld\n```\n\n----------------------------------------\n\nTITLE: Authentik OAuth2 Application and Provider Configuration\nDESCRIPTION: Details the steps to set up an OAuth2 application and provider in Authentik for integration with Beszel. Includes creation, configuration of OAuth parameters, and obtaining Client ID, Client Secret, and redirect URI. Essential for enabling OAuth login via Authentik in Beszel.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/beszel/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Create an application and provider in Authentik\n# Step 1: Log in as admin, navigate to Applications > Applications\n# Step 2: Click 'Create with Provider' to create OAuth2/OpenID application\n# Step 3: Provide a descriptive name, slug, and select OAuth2 provider type\n# Step 4: Configure the provider with authorization flow, client ID, client secret, and redirect URI\n# Step 5: Save the application and provider\n\n# Important parameters:\n# - Client ID and Client Secret: obtained from Authentik application configuration\n# - Redirect URI: https://<beszel.company>/api/oauth2-redirect\n# - Slug: unique identifier for the application, e.g., 'beszel'\n\napplication:\n  name: 'Beszel'\n  slug: 'beszel'\n  group: null\n  policy_engine_mode: 'default'\n  ui_settings: {}\n\nprovider:\n  name: 'OAuth2 Provider'\n  provider_type: 'OpenID'\n  authorization_flow: 'Authorization Code'\n  client_id: '<your_client_id>'\n  client_secret: '<your_client_secret>'\n  slug: 'beszel'\n  signing_key: '<select_signing_key>'\n  redirect_uri: 'https://<beszel.company>/api/oauth2-redirect'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring authentik Group Attributes for Tautulli (YAML)\nDESCRIPTION: This YAML snippet shows the custom attributes to be added to an authentik Group. These attributes, `tautulli_user` and `tautulli_password`, are used by the authentik Proxy provider to dynamically retrieve the username and password for HTTP Basic Authentication when proxying requests to Tautulli. Users needing access to Tautulli via authentik should be added to this group to inherit these attributes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/tautulli/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntautulli_user: username\ntautulli_password: password\n```\n\n----------------------------------------\n\nTITLE: Querying All Stages Endpoint\nDESCRIPTION: This snippet details the changes to the `GET` request to `/stages/all/`. The response code is `200 OK` and uses `application/json`. It details changes within the `results` array, involving modifications to objects such as `flow_set`.  Properties have been added and deleted.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /stages/all/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > Stage Serializer\n\n        - Changed property `flow_set` (array)\n\n            Changed items (object): > Stripped down flow serializer\n\n            New optional properties:\n\n            - `cache_count`\n            - `policies`\n            - `stages`\n\n            * Deleted property `stages` (array)\n\n            * Deleted property `policies` (array)\n\n            * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Python Debugging in authentik\nDESCRIPTION: This YAML configuration overrides the default Docker Compose settings for the authentik server (or worker) container. It enables debugging by setting the `AUTHENTIK_DEBUGGER` environment variable to `true`, runs the container as `root` (required for installing debug dependencies), disables the health check, sets the log level to `debug`, and exposes the default debug port 9901. This setup facilitates debugging Python code within the container using `debugpy` and a DAP-compatible editor like VS Code.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/debugging.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    # Replace `server` with `worker` to debug the worker container.\n    server:\n        user: root\n        healthcheck:\n            disable: true\n        environment:\n            AUTHENTIK_DEBUGGER: \"true\"\n            AUTHENTIK_LOG_LEVEL: \"debug\"\n        ports:\n            - 9901:9901\n```\n\n----------------------------------------\n\nTITLE: Replacing Boolean with Enum in User Write Stage GET Response\nDESCRIPTION: Modification of the User Write Stage GET endpoint response, replacing the boolean 'can_create_users' property with a more flexible 'user_creation_mode' enum that offers three creation policies.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.1.md#_snippet_4\n\nLANGUAGE: API\nCODE:\n```\nGET /stages/user_write/{stage_uuid}/\nReturn Type:\nChanged response : 200 OK\n- Changed content type : application/json\n    - Added property `user_creation_mode` (string)\n        Enum values:\n        - `never_create`\n        - `create_when_required`\n        - `always_create`\n    - Deleted property `can_create_users` (boolean)\n        > When set, this stage can create users. If not enabled and no user is available, stage will fail.\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Web Component in Typescript\nDESCRIPTION: Demonstrates how to import the custom <ak-alert> web component into a Typescript or Javascript file using a standard ES module import statement. This makes the custom element available for use in HTML.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Alert.docs.mdx#_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport \"@goauthentik/elements/Alert.js\";\n```\n\n----------------------------------------\n\nTITLE: Creating Info and Warning Admonitions\nDESCRIPTION: Syntax for creating highlighted information blocks and warnings in the documentation using Docusaurus admonitions. These help draw attention to important information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/style-guide.mdx#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n:::info\nWrite your note here.\n:::\n```\n\nLANGUAGE: text\nCODE:\n```\n:::warning\nWrite your warning here.\n:::\n```\n\n----------------------------------------\n\nTITLE: Documentation for Creating a New Prompt via POST\nDESCRIPTION: Explains the POST /stages/prompt/prompts/ endpoint, requiring a JSON body with the 'name' property to create a new prompt. The response confirms creation with a 201 status including the 'name'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.2.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"page_title\": \"Create Prompt Endpoint\",\n  \"page_description\": \"API documentation for creating new prompts.\",\n  \"page_summary\": \"Specifies the request payload with 'name' and the response structure with the created prompt's 'name'.\",\n  \"languages\": [\"JSON\"],\n  \"codeSnippets\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Querying SMS Authenticator Stage\nDESCRIPTION: This section describes the changes to a `GET` request to `/stages/authenticator/sms/`. It includes changes to parameters, specifically the addition of `mapping` in the query. The response returns `200 OK` and  `application/json` content type, also adding and modifying properties of objects such as `results` and `flow_set`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /stages/authenticator/sms/\n\n###### Parameters:\n\nAdded: `mapping` in `query`\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > AuthenticatorSMSStage Serializer\n\n        - Added property `mapping` (string)\n\n            > Optionally modify the payload being sent to custom providers.\n\n        - Changed property `flow_set` (array)\n\n            Changed items (object): > Stripped down flow serializer\n\n            New optional properties:\n\n            - `cache_count`\n            - `policies`\n            - `stages`\n\n            * Deleted property `stages` (array)\n\n            * Deleted property `policies` (array)\n\n            * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Describing Changes to PolicyBinding Serializer and API Responses\nDESCRIPTION: This snippet specifies updates to the PolicyBinding serializer object, adding properties like failure_result, timeout, group_obj, and user_obj with nested attributes such as roles, roles_obj, and uuid. It clarifies API response content types and property additions for multiple endpoints, improving data detail for policy execution results, including failure handling and group/user context.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": {\n    \"failure_result\": \"boolean\",\n    \"timeout\": \"integer\",\n    \"group_obj\": {\n      \"roles_obj\": {\n        \"roles\": \"array\",\n        \"roles_obj\": \"array\"\n      }\n    },\n    \"user_obj\": {\n      \"uuid\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Email Address in authentik Email Stage Using Python\nDESCRIPTION: This Python snippet demonstrates how to override the default email address to which an email is sent during the authentik email verification stage. By modifying the 'email' key in the flow plan's context, you can specify a different recipient email address without altering the user object. This can be done using static values, data from prompts, or attributes from the pending user. No external dependencies beyond authentik's flow context are required.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/email/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrequest.context[\"flow_plan\"].context[\"email\"] = \"foo@bar.baz\"\n# Or get it from a prompt\n# request.context[\"flow_plan\"].context[\"email\"] = request.context[\"prompt_data\"][\"email\"]\n# Or another user attribute\n# request.context[\"flow_plan\"].context[\"email\"] = request.context[\"pending_user\"].attributes.get(\"otherEmail\")\nreturn True\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed SAML sessionDuration Attribute (Python)\nDESCRIPTION: This simple Python expression is used within an Authentik SAML Property Mapping. It returns the fixed integer value `540`. This static value is sent as the `sessionDuration` SAML attribute to the Service Provider (Knocknoc) and is interpreted as the session duration in minutes. The returned value can be modified to set a different duration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/knocknoc/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn 540\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik with Docker Compose\nDESCRIPTION: Commands to download the new docker-compose file and update the Docker stack to authentik version 2025.2.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2025/v2025.2.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/2025.2/docker-compose.yml\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: PATCH /policies/bindings/{policy_binding_uuid}/ - 200 OK\nDESCRIPTION: Specifies the changes for the PATCH endpoint for policy bindings, involving content type and modifications to the `group_obj`, `user_obj` and their related properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n##### `PATCH` /policies/bindings/&#123;policy_binding_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Group Serializer\n\n        - Changed property `name` (string)\n\n    - Changed property `user_obj` (object)\n\n        > User Serializer\n\n        - Changed property `groups_obj` (array)\n\n            Changed items (object): > Simplified Group Serializer for user's groups\n\n            - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Divider with Icon in HTML\nDESCRIPTION: Demonstrates how to add an icon to the Divider component. This requires the CSS Base to be loaded in the parent context and uses Font Awesome icons.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Divider.docs.mdx#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-divider><i class=\"fa fa-bed\"></i></ak-divider>\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies in authentik Web Directory\nDESCRIPTION: Command that should be used with caution as it will overwrite any custom client and revert to the upstream client after using gen-client-ts.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/api/making-schema-changes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Validating LDAP User Group Listing with getent on QNAP (Bash)\nDESCRIPTION: This command verifies the LDAP user integration by listing known user accounts via the NSS database, displaying both local and remote authentik accounts. It should be run on the QNAP NAS CLI after completing LDAP configuration. Requires appropriate user privileges.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/qnap-nas/index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# list users\n$ getent passwd\n```\n\n----------------------------------------\n\nTITLE: Dumping PostgreSQL Database in Kubernetes Pod Using shell\nDESCRIPTION: This snippet enters the PostgreSQL pod, sets the PGPASSWORD required for authentication, and uses pg_dump to export the entire authentik database to a SQL file. Requires the POSTGRES_POSTGRES_PASSWORD environment variable to be set and permissions to execute commands in the pod. Outputs an SQL file ('dump-11.sql') containing the database backup. Ensure database services are stopped or in a consistent state before executing.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_kubernetes.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# This is the path where the PVC is mounted, so we'll place the dump here too\ncd /bitnami/postgresql/\n# Set the postgres password based on the `POSTGRES_POSTGRES_PASSWORD` environment variable\nexport PGPASSWORD=$POSTGRES_POSTGRES_PASSWORD\n# Dump the authentik database into an sql file\npg_dump -U $POSTGRES_USER $POSTGRES_DB > dump-11.sql\n```\n\n----------------------------------------\n\nTITLE: Generating a Certificate Signing Request with OpenSSL in Shell\nDESCRIPTION: This shell command invokes 'openssl req' to generate a certificate signing request (CSR) from a corrected PKCS#1 private key PEM file. Requires OpenSSL installed and a properly formatted key file. The input is the PEM file and output is a .csr file used for certificate generation. Prompts the user for relevant certificate details during execution.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mautic/index.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nopenssl req -new -key private_key_new.pem -out request.csr\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik Helm Chart (Shell)\nDESCRIPTION: This snippet shows the commands to upgrade authentik when installed using the Helm chart on Kubernetes. It first updates the local Helm repository cache and then performs a Helm upgrade of the 'authentik' release, specifying the chart name, a values file for configuration overrides, and the target version range. Requires the `helm` CLI tool and a configured Kubernetes cluster.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/_template.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^xxxx.x\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Configuration Before Update in YAML\nDESCRIPTION: Shows the original helm values configuration format for authentik prior to version 0.12. Includes settings for secret key, error reporting configuration, and log level.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.12.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n    # Optionally specify fixed secret_key, otherwise generated automatically\n    # secret_key: _k*@6h2u2@q-dku57hhgzb7tnx*ba9wodcb^s9g0j59@=y(@_o\n    # Enable error reporting\n    error_reporting:\n        enabled: false\n        environment: customer\n        send_pii: false\n    # Log level used by web and worker\n    # Can be either debug, info, warning, error\n    log_level: warning\n```\n\n----------------------------------------\n\nTITLE: Reverse DNS Lookup in Python\nDESCRIPTION: Performs a reverse DNS lookup for a given IP address. If no DNS records are found, the original IP address is returned. This relies on external DNS servers and might return unexpected results in shared hosting environments.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nreverse_dns(\"192.0.2.0\")\n```\n\n----------------------------------------\n\nTITLE: Assign LDAPCP as Claim Provider in SharePoint\nDESCRIPTION: This PowerShell script assigns LDAPCP as the claim provider for the identity token issuer in SharePoint, enabling the integration with LDAP for user and group resolution. LDAPCP must be installed on the target SharePoint farm.  Update the $trustedTokenIssuerName variable to match your environment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/sharepoint-se/index.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PSSnapin microsoft.sharepoint.powershell\n$trustedTokenIssuerName = \"sp.issuerName\"\n\n$sptrust = Get-SPTrustedIdentityTokenIssuer $trustedTokenIssuerName\n$sptrust.ClaimProviderName = \"LDAPCP\"\n$sptrust.Update()\n```\n\n----------------------------------------\n\nTITLE: Property Models List for Event Matcher in Authentik\nDESCRIPTION: A comprehensive list of available models that can be selected for event matching. When a model is selected, the system will match events created by that specific model. This list spans all major components of Authentik including crypto, events, flows, policies, providers, sources, stages, and core objects.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.6.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": {\n    \"authentik_crypto.certificatekeypair\": \"Certificate-Key Pair\",\n    \"authentik_events.event\": \"Event\",\n    \"authentik_events.notificationtransport\": \"Notification Transport\",\n    \"authentik_events.notification\": \"Notification\",\n    \"authentik_events.notificationrule\": \"Notification Rule\",\n    \"authentik_events.notificationwebhookmapping\": \"Webhook Mapping\",\n    \"authentik_flows.flow\": \"Flow\",\n    \"authentik_flows.flowstagebinding\": \"Flow Stage Binding\",\n    \"authentik_outposts.dockerserviceconnection\": \"Docker Service-Connection\",\n    \"authentik_outposts.kubernetesserviceconnection\": \"Kubernetes Service-Connection\",\n    \"authentik_outposts.outpost\": \"outpost\",\n    \"authentik_policies_dummy.dummypolicy\": \"Dummy Policy\",\n    \"authentik_policies_event_matcher.eventmatcherpolicy\": \"Event Matcher Policy\",\n    \"authentik_policies_expiry.passwordexpirypolicy\": \"Password Expiry Policy\",\n    \"authentik_policies_expression.expressionpolicy\": \"Expression Policy\",\n    \"authentik_policies_password.passwordpolicy\": \"Password Policy\",\n    \"authentik_policies_reputation.reputationpolicy\": \"Reputation Policy\",\n    \"authentik_policies_reputation.reputation\": \"reputation\",\n    \"authentik_policies.policybinding\": \"Policy Binding\",\n    \"authentik_providers_ldap.ldapprovider\": \"LDAP Provider\",\n    \"authentik_providers_oauth2.scopemapping\": \"Scope Mapping\",\n    \"authentik_providers_oauth2.oauth2provider\": \"OAuth2/OpenID Provider\",\n    \"authentik_providers_oauth2.authorizationcode\": \"Authorization Code\",\n    \"authentik_providers_oauth2.accesstoken\": \"OAuth2 Access Token\",\n    \"authentik_providers_oauth2.refreshtoken\": \"OAuth2 Refresh Token\",\n    \"authentik_providers_proxy.proxyprovider\": \"Proxy Provider\",\n    \"authentik_providers_radius.radiusprovider\": \"Radius Provider\",\n    \"authentik_providers_saml.samlprovider\": \"SAML Provider\",\n    \"authentik_providers_saml.samlpropertymapping\": \"SAML Property Mapping\",\n    \"authentik_providers_scim.scimprovider\": \"SCIM Provider\",\n    \"authentik_providers_scim.scimmapping\": \"SCIM Mapping\",\n    \"authentik_sources_ldap.ldapsource\": \"LDAP Source\",\n    \"authentik_sources_ldap.ldappropertymapping\": \"LDAP Property Mapping\",\n    \"authentik_sources_oauth.oauthsource\": \"OAuth Source\",\n    \"authentik_sources_oauth.useroauthsourceconnection\": \"User OAuth Source Connection\",\n    \"authentik_sources_plex.plexsource\": \"Plex Source\",\n    \"authentik_sources_plex.plexsourceconnection\": \"User Plex Source Connection\",\n    \"authentik_sources_saml.samlsource\": \"SAML Source\",\n    \"authentik_sources_saml.usersamlsourceconnection\": \"User SAML Source Connection\",\n    \"authentik_stages_authenticator_duo.authenticatorduostage\": \"Duo Authenticator Setup Stage\",\n    \"authentik_stages_authenticator_duo.duodevice\": \"Duo Device\",\n    \"authentik_stages_authenticator_sms.authenticatorsmsstage\": \"SMS Authenticator Setup Stage\",\n    \"authentik_stages_authenticator_sms.smsdevice\": \"SMS Device\",\n    \"authentik_stages_authenticator_static.authenticatorstaticstage\": \"Static Authenticator Stage\",\n    \"authentik_stages_authenticator_totp.authenticatortotpstage\": \"TOTP Authenticator Setup Stage\",\n    \"authentik_stages_authenticator_validate.authenticatorvalidatestage\": \"Authenticator Validation Stage\",\n    \"authentik_stages_authenticator_webauthn.authenticatewebauthnstage\": \"WebAuthn Authenticator Setup Stage\",\n    \"authentik_stages_authenticator_webauthn.webauthndevice\": \"WebAuthn Device\",\n    \"authentik_stages_captcha.captchastage\": \"Captcha Stage\",\n    \"authentik_stages_consent.consentstage\": \"Consent Stage\",\n    \"authentik_stages_consent.userconsent\": \"User Consent\",\n    \"authentik_stages_deny.denystage\": \"Deny Stage\",\n    \"authentik_stages_dummy.dummystage\": \"Dummy Stage\",\n    \"authentik_stages_email.emailstage\": \"Email Stage\",\n    \"authentik_stages_identification.identificationstage\": \"Identification Stage\",\n    \"authentik_stages_invitation.invitationstage\": \"Invitation Stage\",\n    \"authentik_stages_invitation.invitation\": \"Invitation\",\n    \"authentik_stages_password.passwordstage\": \"Password Stage\",\n    \"authentik_stages_prompt.prompt\": \"Prompt\",\n    \"authentik_stages_prompt.promptstage\": \"Prompt Stage\",\n    \"authentik_stages_user_delete.userdeletestage\": \"User Delete Stage\",\n    \"authentik_stages_user_login.userloginstage\": \"User Login Stage\",\n    \"authentik_stages_user_logout.userlogoutstage\": \"User Logout Stage\",\n    \"authentik_stages_user_write.userwritestage\": \"User Write Stage\",\n    \"authentik_tenants.tenant\": \"Tenant\",\n    \"authentik_blueprints.blueprintinstance\": \"Blueprint Instance\",\n    \"authentik_core.group\": \"group\",\n    \"authentik_core.user\": \"User\",\n    \"authentik_core.application\": \"Application\",\n    \"authentik_core.token\": \"Token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AggregateCard component - HTML\nDESCRIPTION: This code snippet demonstrates how to use the `AggregateCard` component in HTML.  The `header` attribute defines the title of the card, and the content within the tags represents the card's body.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/cards/stories/AggregateCard.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-aggregate-card header=\"Some title\"><p>This is the content of your card!</p></ak-aggregate-card>\n```\n\n----------------------------------------\n\nTITLE: Binding Sessions with Network and GeoIP in User Login Stage (POST/GET, JSON)\nDESCRIPTION: Demonstrates the addition of 'network_binding' and 'geoip_binding' properties to the request and response schemas for user login stages. Both properties are objects or enums that determine session binding policies based on network ASN, network IP, and GeoIP (continent/country/city granularity). This expands on the existing 'flow_set' convention and supports advanced authentication policies. Inputs must specify binding policies as strings; outputs reflect applied policy objects. No special libraries beyond standard JSON parsing are needed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network_binding\": \"bind_asn_network_ip\", // or other valid enum\n  \"geoip_binding\": \"bind_continent_country_city\", // or other valid enum\n  \"flow_set\": [\n    {\n      \"layout\": \"sidebar_right\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Validate Authenticator Stage\nDESCRIPTION: Describes the changes to `POST` requests to `/stages/authenticator/validate/`. The response code is `201 Created` and content type is `application/json`, with changes related to the `flow_set` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n##### `POST` /stages/authenticator/validate/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        New optional properties:\n\n        - `cache_count`\n        - `policies`\n        - `stages`\n\n        * Deleted property `stages` (array)\n\n        * Deleted property `policies` (array)\n\n        * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Creating authentik Outpost API Secret in Kubernetes (YAML)\nDESCRIPTION: Defines a Kubernetes Secret resource named `authentik-outpost-api` to securely store configuration details for the authentik outpost. It includes the authentik host URL, an insecure connection flag, and the API token, which are read by the outpost deployment. Placeholders `__OUTPOST_NAME__`, `__AUTHENTIK_URL__`, and `__AUTHENTIK_TOKEN__` must be replaced with actual values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/manual-deploy-kubernetes.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: __OUTPOST_NAME__\n    app.kubernetes.io/managed-by: goauthentik.io\n    app.kubernetes.io/name: authentik-proxy\n    app.kubernetes.io/version: 2021.12.3\n  name: authentik-outpost-api\nstringData:\n  authentik_host: \"__AUTHENTIK_URL__\"\n  authentik_host_insecure: \"true\"\n  token: \"__AUTHENTIK_TOKEN__\"\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Reverse Proxy with Docker Provider - YAML\nDESCRIPTION: Defines the Traefik service container using the official traefik:v3.0 image. It mounts the Docker socket for dynamic service discovery, exposes port 80 for HTTP traffic, and sets command-line options to enable the API, Docker provider integration, and define an HTTP entrypoint on port 80. This configuration is foundational for reverse proxying and dynamic routing of other containers through Traefik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_traefik_compose.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik:\n    image: traefik:v3.0\n    container_name: traefik\n    volumes:\n        - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n        - 80:80\n    command:\n        - \"--api\"\n        - \"--providers.docker=true\"\n        - \"--providers.docker.exposedByDefault=false\"\n        - \"--entrypoints.web.address=:80\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentik Beta Images Kubernetes YAML\nDESCRIPTION: Configures the `values.yml` file for a Helm chart to specify the beta image repository and tags for the authentik server and outposts. Also sets `pullPolicy` to Always to ensure the latest beta image is used. Requires Helm and a Kubernetes cluster.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/beta.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik:\n    outposts:\n        container_image_base: ghcr.io/goauthentik/dev-%(type)s:gh-%(build_hash)s\nimage:\n    repository: ghcr.io/goauthentik/dev-server\n    tag: gh-next\n    # pullPolicy: Always to ensure you always get the latest version\n    pullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Configuring standalone Grafana for authentik SSO\nDESCRIPTION: INI configuration settings for standalone Grafana installations to enable authentication with authentik via OAuth2, including endpoint URLs and role attribute mapping.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/grafana/index.mdx#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[auth]\nsignout_redirect_url = https://authentik.company/application/o/<Slug of the application from above>/end-session/\n# Optionally enable auto-login\noauth_auto_login = true\n\n[auth.generic_oauth]\nname = authentik\nenabled = true\nclient_id = <Client ID from above>\nclient_secret = <Client Secret from above>\nscopes = openid email profile\nauth_url = https://authentik.company/application/o/authorize/\ntoken_url = https://authentik.company/application/o/token/\napi_url = https://authentik.company/application/o/userinfo/\n# Optionally map user groups to Grafana roles\nrole_attribute_path = contains(groups, 'Grafana Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: PUT /sources/scim_groups/{id}/ - 200 OK\nDESCRIPTION: Specifies modifications for the PUT endpoint of the SCIM groups sources. The response content type and property changes follow the same pattern.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n##### `PUT` /sources/scim_groups/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Simplified Group Serializer for user's groups\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prompt Data in Authentik Python Expressions\nDESCRIPTION: This snippet shows how to access a specific field's value from a user's prompt data within an Authentik policy Python expression environment. It assumes the 'request' object is available in the context and exposes a nested dictionary structure where 'prompt_data' contains the user-submitted values keyed by 'field_key'. This is commonly used in policies to retrieve or validate user input for custom authentication logic.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/prompt/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrequest.context.get('prompt_data').get('<field_key>')\n```\n\n----------------------------------------\n\nTITLE: Describing Default Group LDAP Search in QNAP NAS (Text)\nDESCRIPTION: This snippet documents the default LDAP group search query as performed by QNAP NAS devices. It specifies the search scope, filter, and expected group attributes, providing visibility into how groups are resolved. The snippet serves as a non-executable configuration reference, helping administrators align their LDAP schemas.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/qnap-nas/index.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nScope: 1 (singleLevel)\nDeref Aliases: 0 (neverDerefAliases)\nSize Limit: 0\nTime Limit: 0\nTypes Only: false\nFilter: (objectClass=posixGroup)\nAttributes:\n    cn\n    userPassword\n    memberUid\n    gidNumber\n```\n\n----------------------------------------\n\nTITLE: Basic User Property Mapping in Python for Authentik Sources\nDESCRIPTION: A Python expression that extracts the displayName from source data and maps it to the user's name attribute in Authentik. This demonstrates the basic structure of a property mapping expression that returns a dictionary with keys matching user properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/property-mappings/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"name\": data.get(\"displayName\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading docker-compose configuration\nDESCRIPTION: Instructions on how to upgrade authentik using docker-compose.  It directs the user to download the 2022.4 docker-compose file from a specified URL and run `docker-compose up -d` to apply the changes.  This snippet facilitates the deployment and update of authentik instances using Docker.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.4.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n### docker-compose\n\nDownload the docker-compose file for 2022.4 from [here](https://goauthentik.io/version/2022.4/docker-compose.yml).\nAfterwards, simply run `docker-compose up -d`.\n```\n\n----------------------------------------\n\nTITLE: Configure Outline OIDC Environment Variables\nDESCRIPTION: This code snippet shows the environment variables required to configure Outline for OpenID Connect (OIDC) authentication with authentik. It includes the client ID, client secret, authorization URI, token URI, user info URI, logout URI, username claim, display name and scopes. Replace the placeholders with the actual values from your authentik setup.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/outline/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nOIDC_CLIENT_ID=\nOIDC_CLIENT_SECRET=\nOIDC_AUTH_URI=https://authentik.company/application/o/authorize/\nOIDC_TOKEN_URI=https://authentik.company/application/o/token/\nOIDC_USERINFO_URI=https://authentik.company/application/o/userinfo/\nOIDC_LOGOUT_URI=https://authentik.company/application/o/wiki/end-session/\nOIDC_USERNAME_CLAIM=preferred_username\nOIDC_DISPLAY_NAME=authentik\nOIDC_SCOPES=openid profile email\n```\n\n----------------------------------------\n\nTITLE: (Re)starting QNAP LDAP Services via SSH (Bash)\nDESCRIPTION: This bash snippet shows how to enable and start the QNAP LDAP service after configuration changes. The commands must be run with sufficient permissions on the QNAP NAS. No input parameters are required aside from prior completion of configuration edits.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/qnap-nas/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/sbin/setcfg LDAP Enable TRUE\n/etc/init.d/ldap.sh start\n```\n\n----------------------------------------\n\nTITLE: Enabling the OIDC Authentication Method in Hashicorp Vault\nDESCRIPTION: Enables the OIDC authentication method in Vault, allowing external identity providers like authentik to manage user authentication via OIDC protocol. This is a prerequisite step to configure detailed OIDC settings and roles.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/hashicorp-vault/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault auth enable oidc\n```\n\n----------------------------------------\n\nTITLE: Generating Recovery Key in Authentik Using Kubernetes Shell Command\nDESCRIPTION: Executes a recovery key creation directly within the Authentik Kubernetes deployment. Requires access to the Kubernetes cluster with the proper context and permissions. The command runs inside the 'authentik-worker' container's 'worker' container, passing key validity duration and username as parameters. Produces a recovery URL giving instant authenticated access for the given number of years.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/login.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deployment/authentik-worker -c worker -- ak create_recovery_key 10 akadmin\n```\n\n----------------------------------------\n\nTITLE: API Request Structure for PUT /stages/captcha/{stage_uuid}/\nDESCRIPTION: Specifies the JSON payload for updating a captcha stage, including new URL properties and modifications to existing key properties with explanations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.12.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"js_url\": \"string\",\n  \"api_url\": \"string\",\n  \"public_key\": \"string\",\n  \"private_key\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content with npm run build\nDESCRIPTION: This command builds static files into the 'build' directory for deployment, using 'npm run build'. It relies on a correctly configured build script in package.json and generates optimized static assets suitable for hosting on any static content server.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Skipping Sync Object in Python\nDESCRIPTION: This Python code snippet illustrates the use of the `SkipObject` exception within a Kerberos property mapping. This allows for the skipping of synchronization of certain user objects based on criteria derived from the principal. It's designed to prevent synchronization of specific users, providing granular control over which users are imported.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/protocols/kerberos/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlocalpart, realm = principal.rsplit(\"@\", 1)\nif localpart == \"username\":\n    raise SkipObject\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik Using Helm Chart - Shell\nDESCRIPTION: This shell snippet details how to upgrade Authentik on a Kubernetes cluster via the Helm package manager. The first command updates local information about Helm repositories, and the second performs an upgrade of the installed Authentik release using the specified configuration file and version constraint. Prerequisites include an operational Kubernetes cluster, Helm installed and configured, and network access to the Authentik chart repository. The '--version ^2023.10' flag restricts upgrades to compatible 2023.10.x releases. Inputs are not interactive; expected output is an updated Authentik deployment in Kubernetes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml --version ^2023.10\n```\n\n----------------------------------------\n\nTITLE: Updating Authentik Image in Kubernetes (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the container image for authentik deployments within a Kubernetes environment, specifically for version 2023.5.0. It defines the `image` key with nested `repository` and `tag` properties, pointing to the official authentik server image on GitHub Container Registry (`ghcr.io/goauthentik/server`) and specifying the `2023.5.0` tag. This configuration needs to be updated in the Kubernetes deployment values file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2023.5.0\n```\n\n----------------------------------------\n\nTITLE: Creating Plex Sources (API)\nDESCRIPTION: Updates the request body and response for POST /sources/plex/. The request body (application/json) has an updated description for 'policy_engine_mode'. The response code is 201 Created with content type application/json, featuring updated descriptions for the 'managed' and 'policy_engine_mode' properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_28\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /sources/plex/\n```\n\n----------------------------------------\n\nTITLE: Creating an OAuth User Connection Source via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This shows how to create an OAuth user connection source by POSTing to `/sources/user_connections/oauth/` with a JSON body. On creation, the API responds (201 Created) with a 'source' object containing 'managed' (indicates objects managed and updated by Authentik) and 'policy_engine_mode'. The mode controls whether all or any assigned policies are enforced. Requires authenticated access and valid payload format; objects may be reset in future migrations if managed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_33\n\nLANGUAGE: OpenAPI\nCODE:\n```\nPOST /sources/user_connections/oauth/\nRequest (application/json):\n  ...\nResponse 201 (application/json):\n  source: {\n    managed: string,\n    policy_engine_mode: string // 'all' or 'any'\n  }\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for Prompt Stage Preview (JSON Serialization)\nDESCRIPTION: This snippet shows the JSON structure for a preview response, including flow info and associated fields for a challenge prompt. The flow information contains layout details, while 'fields' is an array of prompt field serializers with 'type' property indicating field types.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_73\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"flow_info\": {\n    \"layout\": \"string\"\n  },\n  \"fields\": [\n    { \"type\": \"string\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Stage Flows with Policy Modes via Authentik API (OpenAPI, JSON)\nDESCRIPTION: This example provides the usage for updating the flow set policy mode on an authenticator Duo stage by sending a PUT request to `/stages/authenticator/duo/{stage_uuid}/` with a JSON body containing the 'flow_set' array. Each item may specify a new 'policy_engine_mode', which defines whether all or any policies must pass. A successful update returns the new list of flows and their modes in the response. Restrictions: Stage UUID must exist, and policy engine mode must be valid ('all' or 'any').\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_40\n\nLANGUAGE: OpenAPI\nCODE:\n```\nPUT /stages/authenticator/duo/{stage_uuid}/\nRequest (application/json):\n  flow_set: [\n    {\n      ...,\n      policy_engine_mode: string // 'all' or 'any'\n    }, ...\n  ]\nResponse 200 (application/json):\n  flow_set: [\n    {\n      ...,\n      policy_engine_mode: string // 'all' or 'any'\n    }, ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: POST /outposts/instances/ Endpoint Changes\nDESCRIPTION: This describes additions to the POST /outposts/instances/ endpoint. It includes the addition of the radius enum and the addition of the authentication_flow property in the providers_obj array.  The `authentication_flow` specifies the authentication flow for an unauthenticated user.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_7\n\nLANGUAGE: N/A\nCODE:\n```\nPOST /outposts/instances/\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `type` (string)\n\n    > - `proxy` - Proxy\n    > - `ldap` - Ldap\n    > - `radius` - Radius\n\n    Added enum value:\n\n    - `radius`\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Changed property `type` (string)\n\n        > - `proxy` - Proxy\n        > - `ldap` - Ldap\n        > - `radius` - Radius\n\n        Added enum value:\n\n        - `radius`\n\n    - Changed property `providers_obj` (array)\n\n        Changed items (object): > Provider Serializer\n\n        - Added property `authentication_flow` (string)\n            > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: API Request Schema for Creating or Updating Connections\nDESCRIPTION: This snippet details JSON request bodies for PUT and PATCH endpoints involving OAuth, SAML, Plex, Kerberos, and user connection management. Each request requires 'source_obj' as an object; some endpoints additionally require 'user' as an integer or 'source' as a string. The content type is application/json, and methods include GET, PUT, and PATCH.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.12.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source_obj\": {\"type\": \"object\"},\n  \"source\": {\"type\": \"string\"},\n  \"user\": {\"type\": \"integer\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with npm run watch\nDESCRIPTION: This command initiates a local development server with 'npm run watch', enabling live reload functionality for immediate reflection of code changes in the browser. It depends on the correct configuration of scripts in package.json and requires Node.js and npm installed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Custom Property Mapping Expression\nDESCRIPTION: This python script defines a custom property mapping for Gitea integration within authentik. It sets claims based on user group membership ('gituser', 'gitadmin', 'gitrestricted') to control Gitea permissions. The script checks group membership and assigns corresponding claim values. Requires the request object to access user group information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/gitea/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngitea_claims = {}\nif request.user.ak_groups.filter(name=\"gituser\").exists():\n    gitea_claims[\"gitea\"]= \"user\"\nif request.user.ak_groups.filter(name=\"gitadmin\").exists():\n    gitea_claims[\"gitea\"]= \"admin\"\nif request.user.ak_groups.filter(name=\"gitrestricted\").exists():\n    gitea_claims[\"gitea\"]= \"restricted\"\n\nreturn gitea_claims\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using Make\nDESCRIPTION: Executes the `install` target in the project's Makefile. This command installs all necessary Python and JavaScript dependencies, including development-specific ones, required for the authentik backend and frontend.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake install               # Installs all required dependencies for Python and Javascript, including development dependencies\n```\n\n----------------------------------------\n\nTITLE: POST /rbac/permissions/assigned_by_roles/&#123;uuid&#125;/assign/\nDESCRIPTION: This section details the changes to the `POST` request to `/rbac/permissions/assigned_by_roles/{uuid}/assign/`. The content type is `application/json`. The `model` property is updated with new enum values, representing different model types.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Iterating Over List Data with !Enumerate (YAML, Mapping)\nDESCRIPTION: This snippet shows how to build a mapping using '!Enumerate' over a list from context. '!Index' and '!Value' are used to assign keys and values for each resultant map entry. The iterable, output type ('MAP'), and per-item YAML structure must be provided.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nexample: !Enumerate [\n        !Context list_of_totp_stage_names,\n        MAP, # Output a map\n        [\n            !Index 0, # The key to assign to each entry\n            !Value 0, # The value to assign to each entry\n        ],\n    ]\n```\n\n----------------------------------------\n\nTITLE: Downloading Default Enrollment Flow Blueprint Using Shell\nDESCRIPTION: This shell command downloads the predefined 'default-enrollment-flow' YAML blueprint file from the Authentik website. The YAML file contains a two-stage enrollment flow configuration required to create invitations that facilitate new user enrollment with the proper stages and prompts. This command assumes network connectivity and access to wget. The downloaded file is used in subsequent steps for importing enrollment flows into the Authentik Admin UI.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/user/invitations.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://goauthentik.io/blueprints/example/flows-enrollment-2-stage.yaml\n```\n\n----------------------------------------\n\nTITLE: Configure ArgoCD ConfigMap for authentik OIDC\nDESCRIPTION: This snippet configures ArgoCD's `argocd-cm` ConfigMap to use authentik as an OIDC backend via the dex connector.  It sets the `issuer`, `clientID`, `clientSecret`, and scopes.  The `issuer` points to the authentik application's OIDC endpoint.  Dependencies include having the authentik application slug and client ID.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/argocd/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://argocd.company\ndex.config: |\n    connectors:\n    - config:\n        issuer: https://authentik.company/application/o/<application slug defined in step 2>/\n        clientID: <client ID from the Provider above>\n        clientSecret: $dex.authentik.clientSecret\n        insecureEnableGroups: true\n        scopes:\n          - openid\n          - profile\n          - email\n      name: authentik\n      type: oidc\n      id: authentik\n```\n\n----------------------------------------\n\nTITLE: Optional Email Configuration Block for 'values.yaml'\nDESCRIPTION: Specifies SMTP server settings for outgoing email notifications and verification emails, allowing customization of email host, port, credentials, encryption, and sender address within the deployment configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/kubernetes.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nauthentik:\n  email:\n    # -- SMTP Server emails are sent from, fully optional\n    host: \"\"\n    port: 587\n    # -- SMTP credentials. When left empty, no authentication will be done.\n    username: \"\"\n    # -- SMTP credentials. When left empty, no authentication will be done.\n    password: \"\"\n    # -- Enable either use_tls or use_ssl. They can't be enabled at the same time.\n    use_tls: false\n    # -- Enable either use_tls or use_ssl. They can't be enabled at the same time.\n    use_ssl: false\n    # -- Connection timeout in seconds\n    timeout: 30\n    # -- Email 'from' address can either be in the format \"foo@bar.baz\" or \"authentik <foo@bar.baz>\"\n    from: \"\"\n```\n\n----------------------------------------\n\nTITLE: Restoring PostgreSQL Database from SQL Dump in Kubernetes Pod Using shell\nDESCRIPTION: This snippet restores the authentik database from a previously created SQL dump file ('dump-11.sql') by setting the PGPASSWORD and running psql inside the PostgreSQL pod. Requires the correct environment variables for PostgreSQL credentials and a valid SQL dump file present in the working directory. On completion, the database will reflect the state captured by the dump. Errors may occur if schema versions are incompatible.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_kubernetes.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# This is the path where the PVC is mounted\ncd /bitnami/postgresql/\n# Set the Postgres password based on the `POSTGRES_POSTGRES_PASSWORD` environment variable.\nexport PGPASSWORD=$POSTGRES_POSTGRES_PASSWORD\npsql -U $POSTGRES_USER $POSTGRES_DB < dump-11.sql\n```\n\n----------------------------------------\n\nTITLE: GET /oauth2/access_tokens/ Endpoint Changes\nDESCRIPTION: This snippet describes changes to the response for the GET /oauth2/access_tokens/ endpoint. It involves modifying the response content type to application/json and adding a property to the provider object. The 'authentication_flow' property is introduced, which specifies the flow used for authentication when the associated application is accessed by an un-authenticated user.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_4\n\nLANGUAGE: N/A\nCODE:\n```\nGET /oauth2/access_tokens/&#123;id&#125;/\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `provider` (object)\n\n        > OAuth2Provider Serializer\n\n        - Added property `authentication_flow` (string)\n            > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: GET /stages/prompt/stages/ Response\nDESCRIPTION: This section provides details on the GET request response to `/stages/prompt/stages/`. The response is 200 OK and content type `application/json`. The change affects the `results` array, and its items which are PromptStage Serializer objects. The changes are in `flow_set` array with items. It shows changes related to `policy_engine_mode` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_48\n\n\n\n----------------------------------------\n\nTITLE: JSON example\nDESCRIPTION: This is an example of a JSON payload containing logout event data, including ASN, geo location, binding information, IP changes, HTTP request details, and logout reasons. The example illustrates the data that can be included in the logout event when session bindings are broken.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/user_login/index.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"asn\": {\n        \"asn\": 6805,\n        \"as_org\": \"Telefonica Germany\",\n        \"network\": \"5.4.0.0/14\"\n    },\n    \"geo\": {\n        \"lat\": 51.2993,\n        \"city\": \"\",\n        \"long\": 9.491,\n        \"country\": \"DE\",\n        \"continent\": \"EU\"\n    },\n    \"binding\": {\n        \"reason\": \"network.missing\",\n        \"new_value\": {\n            \"asn\": 6805,\n            \"as_org\": \"Telefonica Germany\",\n            \"network\": \"5.4.0.0/14\"\n        },\n        \"previous_value\": {}\n    },\n    \"ip\": {\n        \"previous\": \"1.2.3.4\",\n        \"new\": \"5.6.7.8\"\n    },\n    \"http_request\": {\n        \"args\": {},\n        \"path\": \"/if/admin/\",\n        \"method\": \"GET\",\n        \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\"\n    },\n    \"logout_reason\": \"Session binding broken\"\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Frontend UI Changes using Make\nDESCRIPTION: Executes the `web-watch` target in the Makefile. This starts a development server or process that monitors frontend source files for changes and automatically rebuilds the UI, allowing for live updates in the browser during development.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmake web-watch   # Updates the UI with any changes you make\n```\n\n----------------------------------------\n\nTITLE: Embedding LoadingOverlay Component with HTML Content\nDESCRIPTION: Demonstrates the usage of the <ak-loading-overlay> custom element in HTML, specifying the 'topmost' attribute to place the overlay above all other content. It includes a span element as the body slot content, which appears below the loading spinner. Note that inner content must be a valid HTML element rather than plain text to render properly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/LoadingOverlay.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-loading-overlay topmost>\n    <span>This would display below the loading spinner</span>\n</ak-loading-overlay>\n```\n\n----------------------------------------\n\nTITLE: API Response for Provider List with Additional Parameters (JSON)\nDESCRIPTION: Details the structure of the response when fetching all providers, with support for additional query parameters such as 'backchannel_only' to filter results. Ensures clients can retrieve comprehensive provider data with filtering options.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\"results\": [...], \"parameters\": {\"backchannel_only\": \"boolean\"}}\n```\n\n----------------------------------------\n\nTITLE: Exporting authentik data (kubernetes, shell)\nDESCRIPTION: This snippet provides shell commands to export user, group, certificate, event, and OTP device data from an authentik instance running in kubernetes. It executes the `dumpdata` management command inside the 'authentik-web' pod and then copies the resulting JSON file to the local machine.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.9.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it authentik-web-... -- ./manage.py dumpdata -o /tmp/authentik_dump.json authentik_core.User authentik_core.Group authentik_crypto.CertificateKeyPair authentik_audit.Event otp_totp.totpdevice otp_static.staticdevice otp_static.statictoken\nkubectl cp authentik-web-...:/tmp/authentik_dump.json authentik_dump.json\n```\n\n----------------------------------------\n\nTITLE: Listing Event Matcher Policies (Parameter/Response Change)\nDESCRIPTION: Details changes to the GET endpoint for listing Event Matcher Policies. The `action` query parameter description has changed. The 200 OK response (`application/json`) `results` array items have changes in the `action`, `app`, and `model` properties, including updated descriptions and enum values (e.g., added `authentik.sources.scim` to `app`, added `authentik_sources_scim.scimsource` to `model`).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/event_matcher/\n```\n\n----------------------------------------\n\nTITLE: Mapping Wazuh Admin Role in roles_mapping.yml YAML Configuration\nDESCRIPTION: This YAML snippet modifies the Wazuh Indexer 'roles_mapping.yml' file by adding the 'wazuh-admin' backend_role to the 'all_access' role group, which grants admin-level permissions to users with this role. This mapping is crucial to ensure authentik-assigned roles propagate correctly into Wazuh's role-based access control system.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nall_access:\nreserved: true\nhidden: false\nbackend_roles:\n// highlight-next-line\n    - \"wazuh-admin\"\n    - \"admin\"\nhosts: []\nusers: []\nand_backend_roles: []\ndescription: \"Maps admin to all_access\"\n```\n\n----------------------------------------\n\nTITLE: Using Application Empty State Component (HTML)\nDESCRIPTION: This HTML code demonstrates the use of the custom component. The `<ak-library-application-empty-list>` element likely represents the application empty state component.  It is used to display a specific message to the user when no applications are present.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/user/LibraryPage/stories/ApplicationEmptyState.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-library-application-empty-list></ak-library-application-empty-list>\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters for Password Policies (GET /policies/password/)\nDESCRIPTION: Adds new query parameters to filter password policies based on their configuration for static rules, Have I Been Pwned (HIBP), and ZXCVBN checks, including HIBP count and ZXCVBN score thresholds.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.11.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /policies/password/?check_have_i_been_pwned=true&check_static_rules=true&check_zxcvbn=true&hibp_allowed_count=0&zxcvbn_score_threshold=3\n```\n\n----------------------------------------\n\nTITLE: SAML and Plex Connection Endpoint Schemas\nDESCRIPTION: This section captures the changes across GET and POST endpoints for SAML and Plex connections, adding user query parameters, and response schemas with creation timestamps and property mappings. Request schemas include optional user parameters and new properties like user_property_mappings and group_property_mappings for flexible configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_52\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"SAML and Plex Connection Endpoint Schemas\",\n  \"details\": \"Adds user query parameters, updates response schemas with created date and property mappings, and modifies request schemas to include optional user properties and property mappings for flexible integrations.\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Documentation for Stage Invitations (Invitation Object) in JSON\nDESCRIPTION: This snippet describes GET, PUT, PATCH, and GET 'used_by' endpoints related to invitation stages. The main object, 'flow_obj', includes properties such as 'designation', 'denied_action', 'authentication', 'policy_engine_mode', and 'layout', which configure invitation flows.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_34\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"response\": \"200 OK\", \"content_type\": \"application/json\", \"properties\": { \"flow_obj\": { \"serializer\": \"Flow Serializer\", \"properties\": { \"designation\": \"Flow purpose\", \"denied_action\": \"Action on denial\", \"authentication\": \"Authorization level\", \"policy_engine_mode\": \"Policy config\", \"layout\": \"Flow layout\" } } } }\n```\n\n----------------------------------------\n\nTITLE: Updating Event Matcher Policy Request (POST /policies/event_matcher/)\nDESCRIPTION: Documents the change in the request body for the POST endpoint creating an event matcher policy. The content type is `application/json`. The `app` property (string), which specifies the authentik application or module, has a new enum value added: `authentik.enterprise`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_8\n\nLANGUAGE: API Definition\nCODE:\n```\nPOST /policies/event_matcher/\nRequest Body:\nContent-Type: application/json\nProperties Changed:\n- app (string):\n  - Added enum value: `authentik.enterprise`\n  - Full Enum List:\n    - `authentik.admin`\n    - `authentik.api`\n    - `authentik.crypto`\n    - ... (and all other listed enums)\n    - `authentik.core`\n    - `authentik.enterprise`\n```\n\n----------------------------------------\n\nTITLE: Retrieving all members of a group object using Python in authentik\nDESCRIPTION: This snippet returns all user members associated with a given group object using the Django ORM within authentik. It assumes the variable 'group' is an existing group instance. The output is a queryset of all users in the group, enabling further manipulation or listing in policies or mappings. Dependencies include Django's ORM being available and the 'group' variable being a valid Group model instance.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/groups/group_ref.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngroup.users.all()\n```\n\n----------------------------------------\n\nTITLE: Creating WebAuthn Authenticator Stage\nDESCRIPTION: This covers changes to a `POST` request to `/stages/authenticator/webauthn/`.  The response code is `201 Created` and the content type is `application/json`. The changes are associated with the  `flow_set` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n##### `POST` /stages/authenticator/webauthn/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        New optional properties:\n\n        - `cache_count`\n        - `policies`\n        - `stages`\n\n        * Deleted property `stages` (array)\n\n        * Deleted property `policies` (array)\n\n        * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Creating Applications - Provider Update\nDESCRIPTION: This snippet describes a `POST` request to `/core/applications/` and associated response changes. It documents addition of properties related to 'invalidation_flow'. Dependencies include appropriate serializers and API configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_7\n\nLANGUAGE: API\nCODE:\n```\n##### `POST` /core/applications/\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Changed property `provider_obj` (object)\n\n        > Provider Serializer\n\n        New required properties:\n\n        - `invalidation_flow`\n\n        * Added property `invalidation_flow` (string)\n            > Flow used ending the session from a provider.\n\n    - Changed property `backchannel_providers_obj` (array)\n\n        Changed items (object): > Provider Serializer\n\n        New required properties:\n\n        - `invalidation_flow`\n\n        * Added property `invalidation_flow` (string)\n            > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: Finding Docker Volume Names\nDESCRIPTION: Command to list all Docker volumes to identify the correct database volume name for the backup process.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume ls\n```\n\n----------------------------------------\n\nTITLE: Importing authentik data (docker-compose, shell)\nDESCRIPTION: This snippet provides shell commands to import previously exported data into a new authentik instance running via docker-compose. It copies the dump file from the host to the 'server' container and then executes the `loaddata` management command inside the container to populate the database.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.9.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp authentik_dump.json new_authentik_server_1:/tmp/authentik_dump.json\ndocker-compose exec server ./manage.py loaddata /tmp/authentik_dump.json\n```\n\n----------------------------------------\n\nTITLE: Defining Object Naming Template in YAML\nDESCRIPTION: Specifies a template string used for naming objects created by the managed outpost integration, such as deployments, services, or secrets. The template typically includes a placeholder for the outpost's name.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nobject_naming_template: ak-outpost-%(name)s\n```\n\n----------------------------------------\n\nTITLE: Pushing Blueprints to OCI Registry using ORAS (Shell)\nDESCRIPTION: This shell command demonstrates how to push an authentik blueprint YAML file to an OCI-compatible container registry (like GitHub Container Registry or Docker Hub) using the ORAS CLI tool. It specifies the target registry path, the local YAML file, and the custom media type 'application/vnd.goauthentik.blueprint.v1+yaml' required by authentik. Requires the ORAS tool to be installed and configured access to the target registry.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/index.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\noras push ghcr.io/<username>/blueprint/<blueprint name>:latest <yaml file>:application/vnd.goauthentik.blueprint.v1+yaml\n```\n\n----------------------------------------\n\nTITLE: Default Label HTML Structure\nDESCRIPTION: Demonstrates the standard usage of the ak-label component with a paragraph inside. Highlights that only HTML content works inside the label, not plain text.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Label.docs.mdx#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-label><p>This is the content of your alert!</p></ak-label>\n```\n\n----------------------------------------\n\nTITLE: Adding User Type Property to API Responses\nDESCRIPTION: Changes to multiple API endpoints to include the 'type' property in user objects, supporting internal, external, service account, and internal service account user types.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\"type\": (string)\n> - `internal` - Internal\n> - `external` - External\n> - `service_account` - Service Account\n> - `internal_service_account` - Internal Service Account\n```\n\n----------------------------------------\n\nTITLE: Updating User Write Stage PUT Request and Response\nDESCRIPTION: Changes to the User Write Stage PUT endpoint, replacing 'can_create_users' with 'user_creation_mode' in both request and response schemas to provide more granular control over user creation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.1.md#_snippet_5\n\nLANGUAGE: API\nCODE:\n```\nPUT /stages/user_write/{stage_uuid}/\nRequest:\nChanged content type : application/json\n- Added property `user_creation_mode` (string)\n- Deleted property `can_create_users` (boolean)\n    > When set, this stage can create users. If not enabled and no user is available, stage will fail.\n\nReturn Type:\nChanged response : 200 OK\n- Changed content type : application/json\n    - Added property `user_creation_mode` (string)\n    - Deleted property `can_create_users` (boolean)\n        > When set, this stage can create users. If not enabled and no user is available, stage will fail.\n```\n\n----------------------------------------\n\nTITLE: Updating System CA Certificates on Debian (Shell)\nDESCRIPTION: Executes the `update-ca-certificates` command on Debian-based operating systems. This command processes certificate files (specifically `.crt` files) located in `/usr/local/share/ca-certificates/` and updates the system's consolidated CA trust store located at `/etc/ssl/certs/ca-certificates.crt`, making newly added CA certificates trusted system-wide.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apache-guacamole/index.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nupdate-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Creating ldapsearch command for LDAP connectivity testing\nDESCRIPTION: This code snippet provides a shell command for testing LDAP server connectivity using ldapsearch utility. It specifies connection parameters such as LDAP server URL, bind DN, password, base DN, and search filter; SSL options are also mentioned for secure connections.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/ldap/generic_setup.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nldapsearch \\\n  -x \\\n  -H ldap://<LDAP Outpost IP address>:<Port number 389> \\ # In production use SSL with ldaps:// and SSL port\n  -D 'cn=ldapservice,ou=users,DC=ldap,DC=goauthentik,DC=io' \\\n  -w '<ldapuserpassword>' \\\n  -b 'DC=ldap,DC=goauthentik,DC=io' \\\n  '(objectClass=user)'\n```\n\n----------------------------------------\n\nTITLE: Polling for Token - HTTP\nDESCRIPTION: This snippet demonstrates how to poll the `/application/o/token/` endpoint to check the status of the device code. It requires `grant_type`, `client_id`, and `device_code` as parameters. The device should repeat this request until the user completes authentication, or the code expires. Upon successful authorization, an access token and id token are returned.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/oauth2/device_code.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /application/o/token/ HTTP/1.1\nHost: authentik.company\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=urn:ietf:params:oauth:grant-type:device_code&\nclient_id=application_client_id&\ndevice_code=device_code_from_above\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret for Gitea authentik Credentials\nDESCRIPTION: This YAML defines a Kubernetes secret to store the client ID and secret for authentik integration with Gitea. It uses the 'Opaque' type for storing sensitive data. The `key` and `secret` fields should be populated with the respective values from authentik. Used in conjunction with the Helm chart to securely manage credentials.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/gitea/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n    name: gitea-authentik-secret\ntype: Opaque\nstringData:\n    key: \"CLIENT_ID_FROM_AUTHENTIK\" #Step 1\n    secret: \"CLIENT_SECRET_FROM_AUTHENTIK\" #Step 1\n```\n\n----------------------------------------\n\nTITLE: Altering JSON Request Schema for Provider/Sources Configuration - JSON\nDESCRIPTION: This snippet specifies the expected JSON structure for POST requests to various source/provider endpoints, including the addition or removal of keys for configuration objects. These updates target improved integration with LDAP, OAuth, Plex, and SAML sources. Prerequisites include familiarity with the Authentik platform and its property mapping mechanisms. Expected inputs are JSON objects with potentially nested properties such as 'user_property_mappings', 'group_property_mappings', and 'encryption_kp'; the response output is typically a similar JSON reflecting the updated schema.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_property_mappings\": [ ],\n  \"group_property_mappings\": [ ],\n  \"group_matching_mode\": { },\n  \"encryption_kp\": \"...\",\n  \"sign_assertion\": true,\n  \"sign_response\": true\n}\n```\n\n----------------------------------------\n\nTITLE: POST /flows/bindings/ API Change\nDESCRIPTION: This entry outlines changes to the `POST` request for the `/flows/bindings/` endpoint. The content type is `application/json`. Modifications include the addition of `invalid_response_action`, `policy_engine_mode` and changes in the return type.  The properties are contained within the `flow_set` array. It describes how flow binding configurations are set and how invalid responses are handled.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_61\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Outpost Instances - Provider Update\nDESCRIPTION: This focuses on a `GET` request to `/outposts/instances/` and describes the changes in the returned results, particularly the `providers_obj` array. It emphasizes the 'invalidation_flow' requirement and associated serializer changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_14\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /outposts/instances/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > Outpost Serializer\n\n        - Changed property `providers_obj` (array)\n\n            Changed items (object): > Provider Serializer\n\n            New required properties:\n\n            - `invalidation_flow`\n\n            * Added property `invalidation_flow` (string)\n                > Flow used ending the session from a provider.\n```\n\n----------------------------------------\n\nTITLE: Querying TOTP Authenticator Stage\nDESCRIPTION: This outlines the changes for a `GET` request to `/stages/authenticator/totp/`. The response code is `200 OK` and content type is `application/json`. This details changes to the `results` and the `flow_set` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /stages/authenticator/totp/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > AuthenticatorTOTPStage Serializer\n\n        - Changed property `flow_set` (array)\n\n            Changed items (object): > Stripped down flow serializer\n\n            New optional properties:\n\n            - `cache_count`\n            - `policies`\n            - `stages`\n\n            * Deleted property `stages` (array)\n\n            * Deleted property `policies` (array)\n\n            * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Deployment Namespace in YAML\nDESCRIPTION: Sets the Kubernetes namespace where the outpost deployment and related resources should be created. Defaults to the namespace where authentik itself is deployed if available.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_namespace: authentik\n```\n\n----------------------------------------\n\nTITLE: Using the ak-aggregate-card-promise Element in HTML\nDESCRIPTION: Demonstrates the basic usage of the `ak-aggregate-card-promise` custom HTML element. The `header` attribute sets the card's title, and the `.promise` property is bound to a JavaScript Promise variable (`somePromise`). The card dynamically displays the promise's resolved value (using its `.toString()` representation) or a failure notice if the promise rejects.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/cards/stories/AggregatePromiseCard.docs.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ak-aggregate-card-promise\n    header=\"Some title\"\n    .promise=\"${somePromise}\"\n></ak-aggregate-card-promise>\n```\n\n----------------------------------------\n\nTITLE: PATCH /stages/user_login/ Endpoint Changes\nDESCRIPTION: This snippet describes changes made to the PATCH /stages/user_login/ endpoint, involving addition of `remember_me_offset` in request and response.  The `remember_me_offset` is a setting which impacts session duration when the remember me option is selected by the user.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_15\n\nLANGUAGE: N/A\nCODE:\n```\nPATCH /stages/user_login/&#123;stage_uuid&#125;/\n###### Request:\n\nChanged content type : `application/json`\n\n- Added property `remember_me_offset` (string)\n    > Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Added property `remember_me_offset` (string)\n        > Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)\n```\n\n----------------------------------------\n\nTITLE: Returning Policy Result with Python\nDESCRIPTION: Demonstrates how to explicitly return pass or fail conditions from a Python-based Authentik policy, serving as the primary mechanism for policy evaluation. Required dependency: Python policy environment in Authentik. Input: None. Output: Boolean (True = pass, False = fail). This is the fundamental pattern for defining the policy's outcome.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn True\n```\n\nLANGUAGE: python\nCODE:\n```\nreturn False\n```\n\n----------------------------------------\n\nTITLE: Applying CORS Policy to S3 Bucket - Bash\nDESCRIPTION: This AWS CLI command attaches a CORS configuration in 'cors.json' to the specified S3 bucket. Prerequisites: The 'cors.json' configuration file must exist locally. Key parameters include 'access_key', 'secret_key', 'endpoint', and the bucket name. This command ensures the Authentik web interface can display images from S3 by enabling cross-origin requests as specified in the CORS policy.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/storage-s3.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=access_key AWS_SECRET_ACCESS_KEY=secret_key aws s3api --endpoint-url=https://s3.provider put-bucket-cors --bucket=authentik-media --cors-configuration=file://cors.json\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes JSON Patches in YAML\nDESCRIPTION: Allows applying RFC 6902 compliant JSON patches to modify Kubernetes objects managed by the outpost. The configuration is a map where keys are component names (like 'deployment', 'service', 'ingress') and values are lists of patches. This enables advanced customizations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_json_patches: null\n# Example patch to add resources:\n# deployment:\n#   - op: add\n#     path: \"/spec/template/spec/containers/0/resources\"\n#     value:\n#       requests:\n#         cpu: 2000m\n#         memory: 2000Mi\n#       limits:\n#         cpu: 4000m\n#         memory: 8000Mi\n```\n\n----------------------------------------\n\nTITLE: Implement React Before After Slider Component\nDESCRIPTION: This snippet implements the `ReactBeforeSliderComponent` to display a before-and-after slider comparing two images. It utilizes the `useBaseUrl` hook to dynamically generate the image URLs. Each slider instance compares the dark and light theme versions of different application screens.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/index.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactBeforeSliderComponent\n    firstImage={{\n        id: 1,\n        imageUrl: useBaseUrl(\"img/screen_admin_dark.jpg\"),\n    }}\n    secondImage={{\n        id: 2,\n        imageUrl: useBaseUrl(\"img/screen_admin_light.jpg\"),\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implement React Before After Slider Component\nDESCRIPTION: This snippet implements the `ReactBeforeSliderComponent` to display a before-and-after slider comparing two images. It utilizes the `useBaseUrl` hook to dynamically generate the image URLs. Each slider instance compares the dark and light theme versions of different application screens.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/index.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactBeforeSliderComponent\n    firstImage={{\n        id: 1,\n        imageUrl: useBaseUrl(\"img/screen_apps_dark.jpg\"),\n    }}\n    secondImage={{\n        id: 2,\n        imageUrl: useBaseUrl(\"img/screen_apps_light.jpg\"),\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Global Blueprint Export in authentik Worker (Shell)\nDESCRIPTION: Executes the `ak export_blueprint` command within an authentik Worker container to generate a blueprint file containing most configuration objects from the current instance. The output is a YAML list of entries reflecting the database state, excluding write-only fields (like secrets), default values, and potentially objects with unresolved dependencies. Requires access to an authentik Worker container environment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/export.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nak export_blueprint\n```\n\n----------------------------------------\n\nTITLE: Usage of the Label Web Component in HTML\nDESCRIPTION: Provides instructions to include the Label component into HTML pages by importing its JavaScript module. Ensures the component can be used with proper content validation, as it requires HTML content inside the label.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Label.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\nimport \"@goauthentik/elements/Label.js\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS\nDESCRIPTION: Installs required development libraries (libxmlsec1, libpq, krb5) and command-line tools (postgresql, redis, node@22, golangci-lint) using Homebrew (`brew`), and the `uv` Python package manager using `pip`. These are native dependencies needed for building and running authentik on macOS.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install uv\n$ brew install libxmlsec1 libpq krb5   # Required development libraries,\n$ brew install postgresql redis node@22 golangci-lint   # Required CLI tools\n```\n\n----------------------------------------\n\nTITLE: Enabling FortiGate SAML Debug Logging via CLI (FortiOS)\nDESCRIPTION: These FortiOS CLI commands are used for troubleshooting SAML integration issues. The first command enables the debug output, and the second command specifically enables detailed (-1 level) debug logging for the SAML daemon (samld). This helps diagnose problems during the SAML authentication flow.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/fortigate-ssl/index.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndiagnose debug enable\ndiag debug application samld -1\n```\n\n----------------------------------------\n\nTITLE: Flow Executor Endpoint Schema Update\nDESCRIPTION: The last snippet references an update to the GET schema of flow execution endpoints, such as /flows/executor/{flow_slug}/, suggesting modifications aligned with other schema changes, likely for ensuring consistency and extended data support. Specifics are not detailed in the provided content.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_57\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"Flow Executor Endpoint Schema\",\n  \"details\": \"Potential updates to ensure consistency and data support in executing flow-related actions. Exact schema changes unspecified.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting CA Certificate to PKCS12 using OpenSSL (Shell)\nDESCRIPTION: Uses the OpenSSL command-line tool to export a Certificate Authority's certificate and corresponding private key into a single PKCS12 format file (`.p12`). This format is convenient for transferring and importing both the certificate and key into Java keystores, such as the one used by Apache Guacamole's Java runtime.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apache-guacamole/index.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenssl pkcs12 -export -in <CA_certificate>.crt -inkey <CA_certificate>.key -out <CA_certificate>.p12 -passout pass:<password>\n```\n\n----------------------------------------\n\nTITLE: Creating Admin Group with Docker Compose - Shell\nDESCRIPTION: This shell command uses `docker compose` to create an admin group and add a specified user to it.  The command runs within the server container, removing the container after execution (`--rm`). The `ak create_admin_group` command is used to create the group and takes the username as an argument.  The username parameter is mandatory.  There are no inherent limitations, but Docker Compose must be correctly set up for this command to work.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/missing_admin_group.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run --rm server ak create_admin_group username\n```\n\n----------------------------------------\n\nTITLE: Importing AggregatePromiseCard Component in TypeScript\nDESCRIPTION: Shows how to import the `AggregatePromiseCard` custom element JavaScript module to register and make the component available for use within an application. This import statement ensures the custom element definition is loaded.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/cards/stories/AggregatePromiseCard.docs.mdx#_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport \"@goauthentik/elements/cards/AggregatePromiseCard.js\";\n```\n\n----------------------------------------\n\nTITLE: API Response Modification: `PATCH` Invitation Flow\nDESCRIPTION: This snippet describes changes to the response of a PATCH request targeting the invitation flow. The response content type is `application/json`. The changes include modification of the `flow_obj` object, which serializes the flow.  The `authentication` property has added values like `require_outpost`. The `layout` property lists different types with different values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Create Apple Business Manager profile scope mapping - Python\nDESCRIPTION: Creates a scope mapping named 'Apple Business Manager profile' with the scope name 'profile'. This mapping extracts the given and family names from the user's full name, assuming a space delimiter.  It is crucial for providing Apple Business Manager with the required user profile information in the OIDC claim.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apple/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngiven_name, _, family_name = request.user.name.partition(\" \")\n\nreturn {\n    \"given_name\": given_name,\n    \"family_name\": family_name,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TrueCommand to Use SAML Identity Provider\nDESCRIPTION: Details steps for setting up TrueCommand to connect to the authentik SAML Identity Provider by inputting the metadata URL obtained from authentik into TrueCommand's administration settings, enabling SAML-based authentication.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/truecommand/index.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOpen TrueCommand console > Admin > CONFIGURE\n- Enter the Metadata URL from authentik in the SAML Identity Provider URL field\n- Save the configuration\n- Restart or enable the SAML service in TrueCommand as needed\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Type as JSON\nDESCRIPTION: This section describes the content type for the API request, which is explicitly set to `application/json`. This is a crucial detail for the receiving API to correctly parse and interpret the incoming data.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nChanged content type : `application/json`\n```\n\n----------------------------------------\n\nTITLE: Installing website dependencies with Make\nDESCRIPTION: This command installs the necessary dependencies for building the authentik documentation website. It should be executed before running any other website-related commands or after updating dependencies. It utilizes the 'make' build automation tool.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/writing-documentation.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake website-install\n```\n\n----------------------------------------\n\nTITLE: Retrieving TOTP Authenticator Stage Details via GET\nDESCRIPTION: Documents changes in the GET response for a TOTP Authenticator Stage. The response content type is `application/json`. Key changes include the `digits` property changing from integer to string (accepting '6' or '8') and modifications to the `flow_set` array items, specifically the `layout` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nGET /stages/authenticator/totp/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n// Response Body (application/json)\n{\n  \"digits\": \"6 | 8\",\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\"\n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: GET /stages/prompt/prompts/{prompt_uuid}/ Response\nDESCRIPTION: This section describes the changes to the response of a GET request to `/stages/prompt/prompts/{prompt_uuid}/`. The response is 200 OK with content type `application/json`. It shows additions of properties: `initial_value`, `initial_value_expression`, and changes to `placeholder` property. These changes are also affecting `promptstage_set` array and its items, affecting `flow_set` and `policy_engine_mode` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_43\n\n\n\n----------------------------------------\n\nTITLE: Authenticator Validation Logging Example (JSON)\nDESCRIPTION: This JSON snippet demonstrates the format of the logging information produced during a passwordless authentication using WebAuthn. It includes the `auth_method` context variable, the HTTP request details, and the device information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/authenticator_validate/index.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auth_method\": \"auth_webauthn_pwl\",\n    \"http_request\": {\n        \"args\": {\n            \"query\": \"\"\n        },\n        \"path\": \"/api/v3/flows/executor/test/\",\n        \"method\": \"GET\"\n    },\n    \"auth_method_args\": {\n        \"device\": {\n            \"pk\": 1,\n            \"app\": \"authentik_stages_authenticator_webauthn\",\n            \"name\": \"test device\",\n            \"model_name\": \"webauthndevice\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check for Duo Device\nDESCRIPTION: This Python code snippet checks if a Duo device exists for the current pending user in authentik. It imports the `DuoDevice` model, filters devices by user and confirmation status, and returns a boolean indicating the existence of a confirmed device. The code relies on the `request.context['pending_user']` variable to access user information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/password/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom authentik.stages.authenticator_duo.models import DuoDevice\nreturn DuoDevice.objects.filter(user=request.context['pending_user'], confirmed=True).exists()\n```\n\n----------------------------------------\n\nTITLE: Formatting website files with Make\nDESCRIPTION: These commands format the website files to ensure consistent syntax and clean formatting. Running one of these commands before committing is crucial to avoid build failures due to linting issues. It utilizes the 'make' build automation tool or npm.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/writing-documentation.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake website\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake website-lint-fix\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nnpm run prettier\n```\n\n----------------------------------------\n\nTITLE: Updating `/managed/blueprints/` Endpoint Responses (JSON)\nDESCRIPTION: Documents the change in the `200 OK` JSON response for multiple `/managed/blueprints/` endpoints (`GET`, `PUT`, `PATCH /managed/blueprints/{instance_uuid}/` and `POST /managed/blueprints/{instance_uuid}/apply/`). The `status` property within the response body has been modified.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nChanged response : **200 OK** (Applies to GET, PUT, PATCH on /managed/blueprints/{instance_uuid}/ and POST on /managed/blueprints/{instance_uuid}/apply/)\n- Changed content type : `application/json`\n    - Changed property `status` (string)\n```\n\n----------------------------------------\n\nTITLE: Setting up LDAP Configuration in Calibre-Web\nDESCRIPTION: Configuration parameters for setting up LDAP authentication in Calibre-Web to connect with authentik. Includes server details, authentication method, distinguished names, and filtering parameters.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/calibre-web/index.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLogin Type: `Use LDAP Authentication`\nLDAP Server: `authentik.company`\nLDAP Server Port: `389`\nLDAP Encryption: `None`\nLDAP Authentication: `Simple`\nLDAP Administrator Username: `cn=<authentik_administrator_username>,ou=users,dc=goauthentik,dc=io`\nLDAP Administrator Password: `<authentik_administrator_password>`\nLDAP Distinguished Name (DN): `dc=ldap,dc=goauthentik,dc=io`\nLDAP User Object Filter: `(&(objectclass=user)(cn=%s))`\nLDAP Server is OpenLDAP?: `true`\nLDAP Group Object Filter: `(&(objectclass=group)(cn=%s))`\nLDAP Group Name: `<group_name>`\nLDAP Group Members Field: `member`\nLDAP Member User Filter Detection: `Autodetect`\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Web Ports for Authentik\nDESCRIPTION: Configuration to change Authentik's exposed ports from the default 9000/9443 to the standard HTTP/HTTPS ports 80/443.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/docker-compose.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nCOMPOSE_PORT_HTTP=80\nCOMPOSE_PORT_HTTPS=443\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Sources (API)\nDESCRIPTION: Updates the response for GET /sources/all/. The response code is 200 OK with content type application/json. Changes affect the 'results' array items (Source Serializer), updating the descriptions for the 'managed' property and the 'policy_engine_mode' property (enum: 'all', 'any').\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_23\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /sources/all/\n```\n\n----------------------------------------\n\nTITLE: GET /flows/executor/{flow_slug}/ API Change\nDESCRIPTION: This section details changes to the `GET` request for the `/flows/executor/{flow_slug}/` endpoint. The response type is `application/json`. The component updates include changes to `ak-stage-dummy` with added properties, as well as updates in `ak-provider-oauth2-device-code`, `ak-stage-prompt`, and `ak-stage-identification` with new properties to be configured.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_63\n\n\n\n----------------------------------------\n\nTITLE: Generating Formatted Changelog using Make (Shell)\nDESCRIPTION: Executes the `gen-changelog` target defined in the project's Makefile. This command generates a `changelog.md` file, which serves as a base for the release notes, requiring subsequent manual review and curation to remove less important changes like dependency bumps.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake gen-changelog\n```\n\n----------------------------------------\n\nTITLE: Constructing the authentik Apple OAuth Consumer Key\nDESCRIPTION: Example format for the 'Consumer Key' field required when configuring an Apple OAuth source in authentik. This value is constructed by concatenating the Service Identifier (created in Apple Developer step 9), the Apple Team ID (from Apple Developer step 19), and the Key ID (from Apple Developer step 18), separated by semicolons.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/social-logins/apple/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.goauthentik.dev-local;JQNH45HN7V;XFBNJ82BV6\n```\n\n----------------------------------------\n\nTITLE: API Request Payload for User Delete Operation (JSON)\nDESCRIPTION: This snippet specifies the JSON payload structure for initiating a user delete operation via POST. It includes serialized 'flow_set' configurations, such as designation and access policies, to define the process behavior during account deletion.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_77\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm values for Kubernetes deployment in Authentik\nDESCRIPTION: This snippet provides YAML configuration to disable error reporting, update checks, and startup analytics in a Kubernetes environment by setting respective flags in the values.yaml file. It aims to adapt Authentik for air-gapped deployments by disabling outbound connections.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/air-gapped.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik:\n    error_reporting:\n        enabled: false\n    disable_update_check: true\n    disable_startup_analytics: true\n```\n\n----------------------------------------\n\nTITLE: GitHub Security Advisory Template (Markdown)\nDESCRIPTION: A template in Markdown format for creating GitHub Security Advisories for authentik vulnerabilities. It includes standard sections like Summary, Patches, Impact, Details, Workarounds, and contact information (security@goauthentik.io).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Summary\n\nShort summary of the issue\n\n### Patches\n\nauthentik x, y and z fix this issue, for other versions the workaround below can be used.\n\n### Impact\n\nDescribe the impact that this issue has\n\n### Details\n\nFurther explain how the issue works\n\n### Workarounds\n\nDescribe a workaround if possible\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Email us at [security@goauthentik.io](mailto:security@goauthentik.io).\n```\n\n----------------------------------------\n\nTITLE: Add OIDC Client Secret to ArgoCD Secret (argocd-secret)\nDESCRIPTION: This snippet demonstrates how to add the base64 encoded Client Secret from the authentik provider to the `argocd-secret` Kubernetes Secret. This secret is used by ArgoCD to authenticate with authentik via Dex. The `dex.authentik.clientSecret` key is added to the `data` field of the secret. This value MUST be base64 encoded.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/argocd/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndex.authentik.clientSecret: <base 64 encoded value of the Client Secret from the Provider above>\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik using Kubernetes\nDESCRIPTION: This shell script upgrades an authentik installation in a Kubernetes environment using Helm. The first command, `helm repo update`, ensures that the local Helm repository is up to date with the latest package information. The second command, `helm upgrade --install authentik authentik/authentik -f values.yaml`, upgrades the authentik deployment, installing it if it doesn't already exist, and uses the `values.yaml` file for configuration.  This script assumes Helm is installed and configured with the necessary repositories.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/upgrade.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade --install authentik authentik/authentik -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating `PUT /policies/event_matcher/{policy_uuid}/` Request/Response (JSON)\nDESCRIPTION: Details changes to `action`, `app`, and `model` properties in both the request and `200 OK` response JSON bodies for the `PUT /policies/event_matcher/{policy_uuid}/` endpoint. Updates include property descriptions and enum values for `app` and `model`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n###### Request:\nChanged content type : `application/json`\n- Changed property `action` (string)\n    > Match created events with this action type. When left empty, all action types will be matched.\n- Changed property `app` (string)\n    > Match events created by selected application. When left empty, all applications are matched.\n    Added enum values:\n    - `authentik.sources.scim`\n    - `authentik.enterprise.stages.source`\n- Changed property `model` (string)\n    > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n    Added enum values:\n    - `authentik_sources_scim.scimsource`\n    - `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage`\n    - `authentik_stages_source.sourcestage`\n    Removed enum value:\n    - `authentik_stages_authenticator_webauthn.authenticatewebauthnstage`\n\n###### Return Type:\nChanged response : **200 OK**\n- Changed content type : `application/json`\n    - Changed property `action` (string)\n        > Match created events with this action type. When left empty, all action types will be matched.\n    - Changed property `app` (string)\n        > Match events created by selected application. When left empty, all applications are matched.\n        Added enum values:\n        - `authentik.sources.scim`\n        - `authentik.enterprise.stages.source`\n    - Changed property `model` (string)\n        > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n        Added enum values:\n        - `authentik_sources_scim.scimsource`\n        - `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage`\n        - `authentik_stages_source.sourcestage`\n        Removed enum value:\n        - `authentik_stages_authenticator_webauthn.authenticatewebauthnstage`\n```\n\n----------------------------------------\n\nTITLE: Check for WebAuthn Device\nDESCRIPTION: This Python code snippet checks if a WebAuthn device exists for the current pending user in authentik. It imports the `WebAuthnDevice` model, filters devices by user and confirmation status, and returns a boolean indicating the existence of a confirmed device. The code relies on the `request.context['pending_user']` variable to access user information.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/stages/password/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom authentik.stages.authenticator_webauthn.models import WebAuthnDevice\nreturn WebAuthnDevice.objects.filter(user=request.context['pending_user'], confirmed=True).exists()\n```\n\n----------------------------------------\n\nTITLE: Update to Core Applications Schema for SAML and LDAP Providers\nDESCRIPTION: The schema for transactional applications is modified to include new provider properties: encryption key pairs and signing options for SAML, as well as removing deprecated LDAP properties like search_group. These updates enhance security features and configuration options.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_55\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"Core Applications Provider Schema\",\n  \"details\": \"Adds properties such as 'encryption_kp', 'sign_assertion', 'sign_response' for SAML providers, and removes obsolete 'search_group' from LDAP providers, enhancing security and configurability.\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Schema for Updating OAuth, SAML, Plex, and Kerberos Connections\nDESCRIPTION: This snippet documents the response structure for various PUT/PATCH API calls modifying connection properties. Each response returns status 200 OK with JSON content type, including a 'source_obj' object and modified properties like 'group', 'source', and 'identifier'. The common pattern involves adding 'source_obj' and changing specific fields to string types.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.12.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": \"200 OK\",\n  \"content_type\": \"application/json\",\n  \"properties\": {\n    \"source_obj\": {\"type\": \"object\"},\n    \"group\": {\"type\": \"string\"},\n    \"source\": {\"type\": \"string\"},\n    \"identifier\": {\"type\": \"string\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating authentik Kubernetes Image Tag (YAML)\nDESCRIPTION: This YAML configuration snippet specifies the container image repository and tag required to update an authentik deployment on Kubernetes to version 2023.3.0. Update your Kubernetes values file with this configuration to pull the correct image version during the upgrade process.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.3.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2023.3.0\n```\n\n----------------------------------------\n\nTITLE: Querying Flow Inspector Endpoint\nDESCRIPTION: This section describes the changes related to `GET` requests to the `/flows/inspector/{flow_slug}/` endpoint. The response code is `200 OK`, and the content type is `application/json`. The changes include modifications to the `plans` array and its items, including changes to properties like `current_stage` and `stage_obj`. It also involves changes to the `flow_set` array and the addition/deletion of properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /flows/inspector/&#123;flow_slug&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `plans` (array)\n\n        Changed items (object): > Serializer for an active FlowPlan\n\n        - Changed property `current_stage` (object)\n\n            > FlowStageBinding Serializer\n\n            - Changed property `stage_obj` (object)\n\n                > Stage Serializer\n\n                - Changed property `flow_set` (array)\n\n                    Changed items (object): > Stripped down flow serializer\n\n                    New optional properties:\n\n                    - `cache_count`\n                    - `policies`\n                    - `stages`\n\n                    * Deleted property `stages` (array)\n\n                    * Deleted property `policies` (array)\n\n                    * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Query Parameters for Token and Notification APIs - JSON\nDESCRIPTION: Expanded allowed values for intent (used in /core/tokens/ queries) with options for verification, api, recovery, and app_password, and for mode (used in /events/transports/) with values local, webhook, webhook_slack, and email. These enumerations guide clients on valid filter or mode values, ensuring correct intent and notification transport configuration. The changes are non-breaking but clients must restrict their input to the documented values. Omitting or misusing parameters may result in default behavior or errors.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.6.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"intent\": [\"verification\", \"api\", \"recovery\", \"app_password\"],\n  \"mode\": [\"local\", \"webhook\", \"webhook_slack\", \"email\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Quick Action Card Component in HTML\nDESCRIPTION: Demonstrates the HTML usage of the `ak-quick-actions-card` custom element. The `title` attribute sets the card's header text. The `.actions` property is bound to the `ACTIONS` JavaScript array (defined in the TypeScript snippet), passing the list of links to be displayed within the card.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/cards/stories/QuickActionsCard.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-quick-actions-card title=\"Some title\" .actions=${ACTIONS}></ak-aggregate-card>\n```\n\n----------------------------------------\n\nTITLE: Requesting Device Authorization - HTTP\nDESCRIPTION: This snippet shows how to request a device code from the `/application/o/device/` endpoint. It requires a `client_id` and `scope` as parameters in the request body. The response includes the device code, verification URIs, user code, expiration time, and polling interval.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/oauth2/device_code.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /application/o/device/ HTTP/1.1\nHost: authentik.company\nContent-Type: application/x-www-form-urlencoded\n\nclient_id=application_client_id&\nscope=openid email my-other-scope\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate and Key (Bash)\nDESCRIPTION: This OpenSSL command generates a self-signed X.509 certificate and a private key. It creates a certificate valid for 3650 days (approx 10 years) with 'Knocknoc' as the Common Name, without requiring a passphrase for the key. The generated files are saved as specified by `<certificate_filename>.crt` and `<certificate_key_filename>.key` and are needed for Knocknoc configuration if no existing certificate is available.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/knocknoc/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -x509 -days 3650 -nodes -subj /CN=Knocknoc/ -out <certificate_filename>.crt -keyout <certificate_key_filename>.key\n```\n\n----------------------------------------\n\nTITLE: Importing Application Empty State (Typescript)\nDESCRIPTION: This Typescript code snippet imports the ApplicationEmptyState component for use within the application. The import statement uses a relative path, likely from a user interface library, to load the required Javascript file.  This is a prerequisite for using the component.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/user/LibraryPage/stories/ApplicationEmptyState.docs.mdx#_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport \"@goauthentik/user/LibraryPage/ApplicationEmptyState.js\";\n```\n\n----------------------------------------\n\nTITLE: Removing PostgreSQL Docker Volume\nDESCRIPTION: Command to remove the old PostgreSQL Docker volume after confirming the backup was successful.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume rm -f authentik_database\n```\n\n----------------------------------------\n\nTITLE: Modify authentik SAML ACS URL for Fleet EULA\nDESCRIPTION: This diff highlights the change needed in the Assertion Consumer Service URL setting of the authentik SAML provider. It shows the standard callback URL and the alternative URL required when Fleet's End User License Agreement (EULA) feature is enabled, specifically for MDM-managed devices. This modification is necessary to correctly handle the authentication flow in a Fleet environment requiring user agreement to terms.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/fleet/index.md#_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\n```diff\n- https://fleet.company/api/v1/fleet/sso/callback\n+ https://fleet.company/api/v1/fleet/mdm/sso/callback\n```\n```\n\n----------------------------------------\n\nTITLE: SAML Source Configuration - GET Endpoint\nDESCRIPTION: Provides current configuration details for a SAML source identified by 'slug'. The response includes property mappings, group matching mode, and optional encryption keypair information, enabling clients to retrieve existing settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source_property_mappings\": ...,\n  \"group_matching_mode\": ...,\n  \"encryption_kp\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Paperless-ngx with Authentik in Standalone Installation\nDESCRIPTION: Configuration for enabling Authentik SSO in a standalone Paperless-ngx installation using paperless.conf file. This sets up AllAuth with the OpenID Connect provider using the client credentials from Authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/paperless-ngx/index.mdx#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nPAPERLESS_ENABLE_ALLAUTH=true\nPAPERLESS_APPS=allauth.socialaccount.providers.openid_connect\nPAPERLESS_SOCIALACCOUNT_PROVIDERS={\"openid_connect\":{\"OAUTH_PKCE_ENABLED\":true,\"APPS\":[{\"provider_id\":\"authentik\",\"name\":\"authentik\",\"client_id\":\"<Client ID>\",\"secret\":\"<Client Secret>\",\"settings\":{\"server_url\":\"https://authentik.company/application/o/paperless/.well-known/openid-configuration\"}}]}}\n```\n\n----------------------------------------\n\nTITLE: Simple !If Construct (Short Form, YAML)\nDESCRIPTION: This example shows the minimal usage of '!If' where only a single condition is tested. The tag evaluates the first argument as a boolean. If true, the enclosing attribute is set; if false, it is omitted.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/blueprints/v1/tags.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Short form\n# !If [<condition>]\nrequired: !If [true]\n```\n\n----------------------------------------\n\nTITLE: Request Payload for Creating or Updating Prompt Stages in JSON\nDESCRIPTION: Describes the JSON format for POST requests to create or update prompt stages, including 'promptstage_set' with nested 'flow_set' and layout properties. Used to configure prompt UI layouts during stage creation or modification.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{ \"promptstage_set\": [ { \"flow_set\": [ { \"layout\": \"stacked\" } ] } ] }\n```\n\n----------------------------------------\n\nTITLE: Overriding Docker Compose Configuration to Mount Local Directories with YAML\nDESCRIPTION: This YAML snippet defines a Docker Compose override file that mounts the frontend build output directory (./web) and an optional local environment configuration file (local.env.yml) into the server service. This facilitates real-time frontend development by syncing local changes into the containerized environment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/frontend-dev-environment.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    server:\n        volumes:\n            - ./web:/web\n            - ./local.env.yml:/local.env.yml\n```\n\n----------------------------------------\n\nTITLE: POST /core/brands/ - 201 Created\nDESCRIPTION: Describes the POST endpoint for core brands.  This endpoint adds a new property `default_application`. The response also reflects the addition of `default_application`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n##### `POST` /core/brands/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Added property `default_application` (string)\n    > When set, external users will be redirected to this application after authenticating.\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Added property `default_application` (string)\n        > When set, external users will be redirected to this application after authenticating.\n```\n\n----------------------------------------\n\nTITLE: Querying Static Authenticator Stage\nDESCRIPTION: This outlines the changes to a `GET` request to `/stages/authenticator/static/`. The response code is `200 OK` and content type is `application/json`. It highlights the modifications done to the `results` and `flow_set` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /stages/authenticator/static/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > AuthenticatorStaticStage Serializer\n\n        - Changed property `flow_set` (array)\n\n            Changed items (object): > Stripped down flow serializer\n\n            New optional properties:\n\n            - `cache_count`\n            - `policies`\n            - `stages`\n\n            * Deleted property `stages` (array)\n\n            * Deleted property `policies` (array)\n\n            * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Authentik API 200 OK Response Structure\nDESCRIPTION: Defines the structure of a successful 200 OK response from the authentik API, including the enumeration of possible values for the 'app' and 'model' properties. The response includes newly added values related to RBAC, authenticator stages, and enterprise licensing.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": \"string\",\n  \"model\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ubuntu Landscape for OpenID Connect with authentik (INI)\nDESCRIPTION: This snippet shows the necessary additions to the Landscape server configuration file (/etc/landscape/service.conf) to enable authentication via authentik using the OpenID Connect protocol. It requires the Landscape server's FQDN and the Client ID, Secret, and slug from the authentik provider. Restarting Landscape services is needed after editing. Dependencies include having authentik set up as an OAuth2/OpenID Connect provider with proper credentials.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/ubuntu-landscape/index.md#_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[landscape]\noidc-issuer = https://authentik.company/application/o/<slug of the application you've created>/\noidc-client-id = <client ID of the provider you've created>\noidc-client-secret = <client Secret of the provider you've created>\n```\n\n----------------------------------------\n\nTITLE: Modify OpenID Config URL to Include Port 443\nDESCRIPTION: This snippet shows how to add the default HTTPS port (443) to the OpenID Configuration URL obtained from the authentik Apple Business Manager provider. Apple Business Manager requires the port number to be explicitly included when providing the URL in its configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apple/index.md#_snippet_4\n\nLANGUAGE: URL\nCODE:\n```\nhttps://authentik.company:443/application/o/abm/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for Property Mapping Serializer (JSON)\nDESCRIPTION: Defines the JSON response format for listing property mappings managed by Authentik, indicating which objects are automatically created or updated and can be overwritten. Useful for clients to understand object management status.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\"results\": [{\"managed\": \"string\"}]}\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Compose to Version 2021.9\nDESCRIPTION: Instructions for upgrading the authentik deployment via Docker Compose by downloading the new docker-compose YAML file and running the deployment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2021/v2021.9.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDownload the docker-compose file for 2021.9 from [here](https://goauthentik.io/version/2021.9/docker-compose.yml). Afterwards, simply run `docker-compose up -d`.\n```\n\n----------------------------------------\n\nTITLE: SAML Source Configuration - PATCH Endpoint\nDESCRIPTION: Allows partial updates to an existing SAML source configuration. Clients can modify property mappings, group matching mode, or encryption keypair selectively. The response provides the current state after applying changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...],\n  \"group_matching_mode\": {...},\n  \"encryption_kp\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading authentik documentation template file\nDESCRIPTION: This shell command uses the `wget` utility to download the `service.md` template file directly from the authentik GitHub repository. This file serves as a standard template for writing documentation for new application integrations, particularly for community- or vendor-contributed guides.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/index.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://raw.githubusercontent.com/goauthentik/authentik/main/website/integrations/template/service.md\n```\n\n----------------------------------------\n\nTITLE: Updating System CA Certificates on Synology (Shell)\nDESCRIPTION: Executes the `update-ca-certificates.sh` script on Synology systems. This command updates the system's trusted CA certificate bundle `/etc/ssl/certs/ca-certificates.crt` by incorporating certificate files from `/usr/syno/etc/security-profile/ca-bundle-profile/ca-certificates/`, ensuring newly added CA certificates are trusted by the system.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apache-guacamole/index.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nupdate-ca-certificates.sh\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Reputation Score (Response Change)\nDESCRIPTION: Details changes to the GET endpoint for retrieving objects referencing a specific reputation score. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/reputation/scores/{reputation_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: API Schema for PUT /stages/authenticator/static/{stage_uuid}/\nDESCRIPTION: Defines the request schema for updating static authenticator stages, primarily changing the flow_set configuration including flow definitions and layout. Used to set or replace static stage configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Kerberos Source API Updates - Enhanced SPNEGO Server Name Description\nDESCRIPTION: Updates to the Kerberos Source endpoints with a modified description for the 'spnego_server_name' property, specifying it must be in the form HTTP@hostname for SPNEGO server name configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_37\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"spnego_server_name\": \"Force the use of a specific server name for SPNEGO. Must be in the form HTTP@hostname\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Password Policy (Response Change)\nDESCRIPTION: Describes changes to the GET endpoint for retrieving objects referencing a specific password policy. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/password/{policy_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Dummy Policy (Response Change)\nDESCRIPTION: Details changes to the GET endpoint for retrieving objects referencing a specific dummy policy. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/dummy/{policy_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 for pgAdmin with authentik in Python\nDESCRIPTION: This Python snippet configures pgAdmin to use authentik as an OAuth2 (OpenID Connect) authentication source. Place this code into your config_local.py file in the /pgadmin4/ directory. It sets OAuth2 endpoints, client credentials, and UI options. Replace placeholder values with your authentik application\\'s details. Restart pgAdmin after saving to apply changes. Dependencies: pgAdmin 4, authentik, Python. Key parameters include OAUTH2_CLIENT_ID, OAUTH2_CLIENT_SECRET, and endpoint URLs. Input: none; Output: pgAdmin with enabled OAuth2 SSO.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pgadmin/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAUTHENTICATION_SOURCES = ['oauth2', 'internal']\nOAUTH2_AUTO_CREATE_USER = True\nOAUTH2_CONFIG = [{\n    'OAUTH2_NAME': 'authentik',\n    'OAUTH2_DISPLAY_NAME': 'authentik',\n    'OAUTH2_CLIENT_ID': '<Client ID from authentik>',\n    'OAUTH2_CLIENT_SECRET': '<Client secret from authentik>',\n    'OAUTH2_TOKEN_URL': 'https://authentik.company/application/o/token/',\n    'OAUTH2_AUTHORIZATION_URL': 'https://authentik.company/application/o/authorize/',\n    'OAUTH2_API_BASE_URL': 'https://authentik.company/',\n    'OAUTH2_USERINFO_ENDPOINT': 'https://authentik.company/application/o/userinfo/',\n    'OAUTH2_SERVER_METADATA_URL': 'https://authentik.company/application/o/<App Slug>/.well-known/openid-configuration',\n    'OAUTH2_SCOPE': 'openid email profile',\n    'OAUTH2_ICON': '<Fontawesome icon key (e.g., fa-key)>',\n    'OAUTH2_BUTTON_COLOR': '<Hexadecimal color code for the login button>'\n}]\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes authentik image tag (YAML)\nDESCRIPTION: This YAML snippet shows the required configuration change in a Kubernetes values file to upgrade an authentik deployment to version 2022.3.1. It specifies the repository and the exact image tag that should be used for the new version.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.3.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.3.1\n```\n\n----------------------------------------\n\nTITLE: Partially Updating Policy Binding (Response Change)\nDESCRIPTION: Details changes to the PATCH endpoint for partially updating a specific policy binding. The 200 OK response content type is `application/json`, and the `user_obj` object within the response now has a changed `type` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPATCH /policies/bindings/{policy_binding_uuid}/\n```\n\n----------------------------------------\n\nTITLE: SCIM Source Configuration - PUT Endpoint\nDESCRIPTION: Updates a SCIM source configuration with provided property mappings and token serializer details. It does not include user matching mode. The response confirms the updated source configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...],\n  \"token_obj\": {...},\n  \"user_obj\": {...},\n  \"groups_obj\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik - Kubernetes Image Update\nDESCRIPTION: Provides instructions on updating the authentik image tag in Kubernetes deployments to upgrade to version 2021.8.5.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2021/v2021.8.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2021.8.5\n```\n\n----------------------------------------\n\nTITLE: API Request Structure for Prompt Prompts Stage\nDESCRIPTION: Describes the JSON payload for creating or updating prompt stages, including prompt type and associated stage configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"promptstage_set\": [\n    {\n      \"flow_set\": [\n        {\n          \"designation\": \"string\",\n          \"denied_action\": \"string\",\n          \"policy_engine_mode\": \"string\",\n          \"layout\": \"string\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH /stages/authenticator/static/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PATCH method for the /stages/authenticator/static/ endpoint. It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Property Mapping with List Flattening in Python for Authentik\nDESCRIPTION: A Python expression demonstrating how list_flatten is automatically applied to top-level attributes but must be manually applied to nested attributes. This shows how to handle lists of values in property mappings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/sources/property-mappings/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"username\": data.get(\"username\"), # list_flatten is automatically applied to top-level attributes\n    \"attributes\": {\n        \"phone\": list_flatten(data.get(\"phoneNumber\")), # but not for attributes!\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Image for authentik 2022.6.1 (YAML)\nDESCRIPTION: YAML configuration snippet demonstrating how to update the `image.repository` and `image.tag` values in a Kubernetes deployment or Helm chart values file to use the authentik server version 2022.6.1 hosted on ghcr.io.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.6.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.6.1\n```\n\n----------------------------------------\n\nTITLE: Create Apple Business Manager ssf.read scope mapping - Python\nDESCRIPTION: Creates a scope mapping named 'Apple Business Manager ssf.read' with the scope name 'ssf.read'. This mapping is required for read access for Shared Signals Framework (SSF) communication with Apple Business Manager. The expression returns an empty dictionary.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apple/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreturn {}\n```\n\n----------------------------------------\n\nTITLE: Create Apple Business Manager ssf.manage scope mapping - Python\nDESCRIPTION: Creates a scope mapping named 'Apple Business Manager ssf.manage' with the scope name 'ssf.manage'. This mapping is required for management access for Shared Signals Framework (SSF) communication with Apple Business Manager. The expression returns an empty dictionary.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apple/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn {}\n```\n\n----------------------------------------\n\nTITLE: Import React Before After Slider Component\nDESCRIPTION: This snippet imports the `ReactBeforeSliderComponent` from the `react-before-after-slider-component` library. This component is used to create an interactive slider that allows users to compare two images side by side.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/index.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactBeforeSliderComponent from \"react-before-after-slider-component\";\n```\n\n----------------------------------------\n\nTITLE: Configuring authentik Endpoints in Drupal OpenID Connect Module\nDESCRIPTION: Defines the specific authentik endpoint URLs required for the Drupal OpenID Connect module configuration. These include the Authorization, Token, and UserInfo endpoints. Replace 'authentik.company' with the FQDN of the authentik installation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/drupal/index.md#_snippet_2\n\nLANGUAGE: uri\nCODE:\n```\nhttps://<em>authentik.company</em>/application/o/authorize/\n```\n\nLANGUAGE: uri\nCODE:\n```\nhttps://<em>authentik.company</em>/application/o/token/\n```\n\nLANGUAGE: uri\nCODE:\n```\nhttps://<em>authentik.company</em>/application/o/userinfo/\n```\n\n----------------------------------------\n\nTITLE: Importing LoadingOverlay Component Using TypeScript\nDESCRIPTION: Imports the LoadingOverlay web component from the '@goauthentik/elements' package to enable usage within a TypeScript project. This prepares the component for inclusion in web applications and ensures any required custom elements are registered.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/LoadingOverlay.docs.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@goauthentik/elements/LoadingOverlay.js\";\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for User Delete Creation (JSON)\nDESCRIPTION: This snippet provides the JSON response format obtained after successfully creating a user deletion workflow via POST. It details serialized flow properties, emphasizing configuration options like denial actions, engine mode, and layout.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_78\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"designation\": \"string\",\n      \"denied_action\": \"string\",\n      \"policy_engine_mode\": \"string\",\n      \"layout\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating `GET /policies/event_matcher/{policy_uuid}/` Response (JSON)\nDESCRIPTION: Documents changes to the `action`, `app`, and `model` properties in the `200 OK` JSON response for the `GET /policies/event_matcher/{policy_uuid}/` endpoint. Includes updated descriptions and added/removed enum values for `app` and `model`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\nChanged response : **200 OK**\n- Changed content type : `application/json`\n    - Changed property `action` (string)\n        > Match created events with this action type. When left empty, all action types will be matched.\n    - Changed property `app` (string)\n        > Match events created by selected application. When left empty, all applications are matched.\n        Added enum values:\n        - `authentik.sources.scim`\n        - `authentik.enterprise.stages.source`\n    - Changed property `model` (string)\n        > Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.\n        Added enum values:\n        - `authentik_sources_scim.scimsource`\n        - `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage`\n        - `authentik_stages_source.sourcestage`\n        Removed enum value:\n        - `authentik_stages_authenticator_webauthn.authenticatewebauthnstage`\n```\n\n----------------------------------------\n\nTITLE: Disabling Authentik Host SSL Validation in YAML\nDESCRIPTION: Allows disabling SSL certificate validation for the connection between a managed outpost and the authentik instance. Setting this to `true` is insecure and should be used with caution, typically only for development or specific network configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik_host_insecure: false\n```\n\n----------------------------------------\n\nTITLE: Enabling Environment Properties in guacamole.properties (YAML)\nDESCRIPTION: Adds a setting to the `guacamole.properties` file that enables the evaluation of environment variables before static configuration properties. This is necessary when configuring Apache Guacamole in Docker using environment variables as described in the Docker tab.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apache-guacamole/index.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenable-environment-properties: true\n```\n\n----------------------------------------\n\nTITLE: Map SAML First Name from Name Attribute - Python\nDESCRIPTION: This property mapping extracts the first name from the user's full name attribute. It splits the name by the first space and returns the first part. If there is no space, it returns an empty string.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mautic/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnames = request.user.name.split(\" \", 1)\nif (len(names) == 1):\n  return \"\"\nreturn names[0]\n```\n\n----------------------------------------\n\nTITLE: Regex Replace in Python\nDESCRIPTION: Replaces all occurrences of a regular expression pattern within a value with a specified replacement string.  This can be used for data sanitization or transformation. It relies on the `re` module in Python.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuser_email_local = regex_replace(request.user.email, '(.+)@.+', '')\n```\n\n----------------------------------------\n\nTITLE: Configure Mealie OIDC Environment Variables\nDESCRIPTION: This snippet shows the environment variables required to configure Mealie for OIDC authentication using authentik as the provider. It includes settings for enabling OIDC, specifying the provider, configuration URL, client ID, client secret, enabling signup, and defining user and admin groups. The `slug`, `Client ID`, and `Client secret` values are obtained from the authentik application provider configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mealie/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nOIDC_AUTH_ENABLED=true\nOIDC_PROVIDER_NAME=authentik\nOIDC_CONFIGURATION_URL=https://authentik.company/application/o/<slug from authentik>/.well-known/openid-configuration\nOIDC_CLIENT_ID=<Client ID from authentik>\nOIDC_CLIENT_SECRET=<Client secret from authentik>\nOIDC_SIGNUP_ENABLED=true\nOIDC_USER_GROUP=<Your users group created in authentik>\nOIDC_ADMIN_GROUP=<Your admins group created in authentik>\nOIDC_AUTO_REDIRECT=true   # Optional: The login page will be bypassed and you will be sent directly to your Identity Provider.\nOIDC_REMEMBER_ME=true     # Optional: By setting this value to true, a session will be extended as if \"Remember Me\" was checked.\n```\n\n----------------------------------------\n\nTITLE: Flow Layout Options in Flow Bindings API\nDESCRIPTION: Documents changes to the flow bindings endpoints, particularly the layout property which defines the visual arrangement of flow elements with options like stacked, content_left, content_right, sidebar_left, and sidebar_right.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stage_obj\": {\n    \"flow_set\": [\n      {\n        \"layout\": \"stacked\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Values for Application Components in JSON\nDESCRIPTION: Specifies the enum values for the 'app' property, representing specific modules or services within Authentik, used for validation or selection constraints in configuration schemas.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n- Added enum values:\n\n- `authentik.rbac`\n- `authentik.stages.authenticator`\n\n```\n\n----------------------------------------\n\nTITLE: PATCH /core/tokens/{identifier}/ - 200 OK\nDESCRIPTION: Documentation for changes to the PATCH endpoint for core tokens focusing on content type and  the `user_obj` and `groups_obj` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n##### `PATCH` /core/tokens/&#123;identifier&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `user_obj` (object)\n\n        > User Serializer\n\n        - Changed property `groups_obj` (array)\n\n            Changed items (object): > Simplified Group Serializer for user's groups\n\n            - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Importing CA Certificate into Java Keystore using keytool (Shell)\nDESCRIPTION: Utilizes the Java `keytool` utility to import a certificate and its associated private key from a PKCS12 file (`.p12`) into a specified Java keystore, typically `/opt/java/openjdk/jre/lib/security/cacerts`. This step is necessary for the Java runtime environment used by Guacamole to trust connections secured by the self-signed certificate issued by the imported CA.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apache-guacamole/index.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -importkeystore -srckeystore <CA_certificate>.p12 -srcstoretype PKCS12 -keystore /opt/java/openjdk/jre/lib/security/cacerts -deststorepass <destination_store_password> -nopromt -srcstorepass <password>\n```\n\n----------------------------------------\n\nTITLE: Configuration snippet for importing documentation card list component\nDESCRIPTION: Imports the DocCardList component from the theme package to display configuration templates for different web servers. This facilitates the inclusion of server-specific configuration examples within the documentation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/forward_auth.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from \"@theme/DocCardList\";\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Building Project Website using Make (Shell)\nDESCRIPTION: Executes the `website` target defined in the project's Makefile. This command is used after updating release notes or sidebars to build or update the project's documentation website, incorporating the latest changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake website\n```\n\n----------------------------------------\n\nTITLE: Danger Label Display in Storybook\nDESCRIPTION: Provides a demo of a danger style label, also using the PFColor enum for color indication. Similar to other states, it showcases styling and visual cues for critical alerts.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Label.docs.mdx#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<Story of={LabelStories.DangerLabel} />\n```\n\n----------------------------------------\n\nTITLE: Testing pfSense Authentication Setup\nDESCRIPTION: Describes how to test the authentication setup in pfSense by using the diagnostics tool. Select LDAP authentik as the Authentication Server, enter user credentials and validate the connection. This verifies the integration and confirms a successful setup.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/pfsense/index.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Illustrating Prompt Stage Data Storage in Flow Context (JSON)\nDESCRIPTION: This snippet shows how data submitted from a Prompt stage is stored within the flow context's `prompt_data` dictionary. Each field in the Prompt stage, identified by its 'Field key', becomes a key-value pair within this dictionary. This data can then be modified by policies or used by stages like the User Write stage.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/flows-stages/flow/context/index.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"prompt_data\": {\n        \"email\": \"foo@bar.baz\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading the authentik Reference Documentation Template (bash)\nDESCRIPTION: This shell command uses `wget` to download the `reference.tmpl.md` template file from the main branch of the authentik GitHub repository. This file serves as the starting point for creating new reference documentation pages.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/templates/reference.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/goauthentik/authentik/main/website/developer-docs/docs/templates/reference.tmpl.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Image for Authentik - YAML\nDESCRIPTION: This YAML snippet demonstrates how to update the Authentik server's Docker image within a Kubernetes deployment by specifying the image repository and tag. To apply the update, modify your Helm values or deployment manifest to reflect the new image version (here, '2022.5.1'). Ensure that you have access to the specified image repository (ghcr.io/goauthentik/server) and that your Kubernetes cluster is set up for the deployment. No other mandatory parameters are required beyond standard Kubernetes deployment prerequisites.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.5.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2022.5.1\n```\n\n----------------------------------------\n\nTITLE: PUT /events/rules/{pbm_uuid}/ - 200 OK\nDESCRIPTION: This details changes to the PUT endpoint for event rules. Content type changes and the modification of the  `group_obj` with its `name` property is highlighted.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n##### `PUT` /events/rules/&#123;pbm_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Group Serializer\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Outpost Instances API\nDESCRIPTION: This document describes API endpoints for creating and retrieving outpost instances. The POST request creates instances by specifying the type. The GET request lists the instances, displaying the type. It uses application/json as the content type. The POST operation returns 201 created status, the GET operation returns 200 OK.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_39\n\nLANGUAGE: string\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: GET /stages/authenticator/validate/ API Response\nDESCRIPTION: This describes the response of a GET request to the /stages/authenticator/validate/ endpoint. It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in React\nDESCRIPTION: This snippet demonstrates importing the 'DocCardList' component from the '@theme' package, which is likely used for rendering a list of documentation cards within the React application. The component is a dependency for displaying related documentation topics.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/users-sources/roles/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from \"@theme/DocCardList\";\n```\n\n----------------------------------------\n\nTITLE: Create Event in Python\nDESCRIPTION: Creates a new authentik event with a specified action and context.  This is useful for auditing and tracking policy execution.  Automatically flattens non-JSON representable data structures and removes credentials before saving.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/expressions/_functions.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nak_create_event(\"my_custom_event\", foo=request.user)\n```\n\n----------------------------------------\n\nTITLE: API Response Updates for OAuth2 Providers\nDESCRIPTION: This section details changes to the response of the `/providers/oauth2/{id}/used_by/` endpoint. The response type is 200 OK with `application/json` content. The `action` property in the response object has updated enum values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: GET /core/users/{id}/ - 200 OK\nDESCRIPTION: Describes changes to the GET endpoint for users, which include content type and modification of  `groups_obj` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /core/users/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `groups_obj` (array)\n\n        Changed items (object): > Simplified Group Serializer for user's groups\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Provider Configuration API Endpoints in HTTP\nDESCRIPTION: Documentation for OAuth2 provider endpoints including GET, PUT, DELETE, and PATCH operations. Specifies client type configuration, subject mode, and issuer mode properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_9\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /providers/oauth2/{id}/\nPUT /providers/oauth2/{id}/\nDELETE /providers/oauth2/{id}/\nPATCH /providers/oauth2/{id}/\n```\n\n----------------------------------------\n\nTITLE: Changes to UserConsent API Response Structure\nDESCRIPTION: Documents changes to the 200 OK response for user consent endpoints, adding an 'expiring' property to results and updating the user avatar property description.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"expiring\": true,\n      \"user\": {\n        \"avatar\": \"User's avatar, either a http/https URL or a data URI\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Scope Mapping Expression in Python\nDESCRIPTION: This Python code defines an expression for a scope mapping in authentik. It returns a dictionary containing user attributes like name, given name, family name, preferred username, and nickname, which are populated from the request user object. This mapping is used to provide user information to Roundcube during the OAuth2 flow.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/roundcube/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"name\": request.user.name,\n    \"given_name\": request.user.name,\n    \"family_name\": \"\",\n    \"preferred_username\": request.user.username,\n    \"nickname\": request.user.username,\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Apache2 Service\nDESCRIPTION: This command restarts the Apache2 service to apply the configuration changes made in the Apache configuration file. This ensures that the changes take effect and Observium can start using the newly configured authentication settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/observium/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nservice apache2 restart\n```\n\n----------------------------------------\n\nTITLE: Launching whoami Service with Traefik Authentication Middleware - YAML\nDESCRIPTION: Defines a simple whoami service using the containous/whoami image to respond with its hostname for testing routing through Traefik. It enables Traefik via labels, sets a router rule for the host 'app.company', and applies the 'authentik' middleware for forwarding auth verification. This lightweight service helps verify correct routing and authentication integration within the Docker Compose environment.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/_traefik_compose.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwhoami:\n    image: containous/whoami\n    labels:\n        traefik.enable: true\n        traefik.http.routers.whoami.rule: Host(`app.company`)\n        traefik.http.routers.whoami.middlewares: authentik@docker\n    restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Adding captcha_stage to Identification Stage Response (GET /stages/identification/{uuid})\nDESCRIPTION: Updates the 200 OK response for GET /stages/identification/{stage_uuid}/. A new optional property `captcha_stage` (string) has been added to the response body. When set, it indicates that Captcha functionality is integrated into this identification stage.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n// 200 OK Response Body Addition\n{\n  \"captcha_stage\": \"string\", // Optional: When set, adds functionality exactly like a Captcha stage.\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Ingress Class Name in YAML\nDESCRIPTION: Optionally specifies the name of the IngressClass to be used for the outpost's Ingress object. If not set, the cluster's default ingress class will be used. This setting is applicable to proxy outposts.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_ingress_class_name: null\n```\n\n----------------------------------------\n\nTITLE: Upgrading authentik - docker-compose\nDESCRIPTION: Describes how to upgrade authentik instances using docker-compose.  It specifies the steps required to obtain the necessary file and execute the upgrade.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2021/v2021.8.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nDownload the docker-compose file for 2021.8 from [here](https://goauthentik.io/version/2021.8/docker-compose.yml).\nAfterwards, simply run `docker-compose up -d`.\n```\n\n----------------------------------------\n\nTITLE: PATCH /core/groups/{group_uuid}/ - 200 OK\nDESCRIPTION: Specifies changes for the PATCH endpoint for core groups.  Changes focus on content type and `name` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n##### `PATCH` /core/groups/&#123;group_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `name` (string)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Container Image in YAML\nDESCRIPTION: Allows specifying a custom Docker image to be used for the outpost container instead of the default image. This applies to both Docker and Kubernetes outposts and is only relevant for non-embedded outposts.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncontainer_image:\n```\n\n----------------------------------------\n\nTITLE: Disabling Kubernetes Integration Components in YAML\nDESCRIPTION: Allows selectively disabling specific components of the Kubernetes integration managed by authentik for the outpost. Components include 'secret', 'deployment', 'service', 'prometheus servicemonitor', 'ingress', and 'traefik middleware'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_disabled_components: []\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Stage GET Endpoint Changes\nDESCRIPTION: This section details modifications to the GET endpoint for the /stages/authenticator/webauthn/ resource. It includes additions to query parameters and updates to the response structure, specifically the results array and its serialized objects.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_65\n\n\n\n----------------------------------------\n\nTITLE: Captcha Stage GET Endpoint Changes\nDESCRIPTION: This section details the modifications of the GET endpoint for /stages/captcha/. Focuses on adjustments to the return type, particularly concerning the `results` array and properties changes within the CaptchaStage Serializer, and the stripped down flow serializer.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_67\n\n\n\n----------------------------------------\n\nTITLE: Setting Browser-Facing Authentik Host URL in YAML\nDESCRIPTION: Optionally specifies a different URL for user-facing interactions, distinct from the outpost's internal connection URL. This setting is specifically applicable to proxy outposts.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nauthentik_host_browser:\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Blocks and Label Stories in TypeScript\nDESCRIPTION: Imports necessary Storybook blocks for rendering component stories and the Label component stories. Establishes metadata connection for Storybook to display label variations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Label.docs.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Canvas, Description, Meta, Story, Title } from \"@storybook/blocks\";\n\nimport * as LabelStories from \"./Label.stories\";\n\n<Meta of={LabelStories} />\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Device Code Type Change - Integer to String Conversion\nDESCRIPTION: Change in the OAuth2 device code property type from integer to string in the flow executor endpoint. This affects the request body for the 'ak-provider-oauth2-device-code' component.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_39\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"code\": \"string\" // Changed from integer to string\n}\n```\n\n----------------------------------------\n\nTITLE: Using Expression Policy with Python\nDESCRIPTION: An example of an expression policy that evaluates a user's username to determine access. The policy returns true if the username is 'marie' and false otherwise.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/style-guide.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif request.context[\"pending_user\"].username == \"marie\":\n    return True\n    return False\n```\n\n----------------------------------------\n\nTITLE: Migrating Files from Local Disk to S3 - Bash\nDESCRIPTION: This AWS CLI command synchronizes all files from a local directory ('/media') to the 'authentik-media' S3 bucket under the 'media' prefix. The prerequisite is having a functional AWS CLI with appropriate permissions for both the local file system and target S3 bucket. It recursively uploads all files, enabling seamless migration from local to S3 storage.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/sys-mgmt/ops/storage-s3.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naws s3 sync /media s3://authentik-media/media\n```\n\n----------------------------------------\n\nTITLE: Policy Engine Mode Property in Stage API Responses\nDESCRIPTION: Documentation of the policy_engine_mode property added to flow_set array items in API responses. This property controls how policies are evaluated, with options for requiring all policies to pass or any policy to pass.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_41\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"policy_engine_mode\": \"all\"  // all policies must pass\n      // or\n      \"policy_engine_mode\": \"any\"  // any policy must pass\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik Beta Kubernetes Shell\nDESCRIPTION: Executes shell commands using Helm to update the chart repository and perform an upgrade of the authentik release based on the updated `values.yml` file. This pulls and deploys the new beta images within the Kubernetes cluster. Requires Helm and a Kubernetes cluster.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/beta.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade authentik authentik/authentik -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: API Schema for GET /stages/authenticator/sms/{stage_uuid}/\nDESCRIPTION: Defines the response structure for retrieving details about an SMS authenticator stage, including properties like provider, auth_type, and flow_set which contains serialized flow configurations. Used to fetch current stage settings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"provider\": {\"type\": \"string\"},\n    \"auth_type\": {\"type\": \"string\"},\n    \"flow_set\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"designation\": {\"type\": \"string\"},\n          \"denied_action\": {\"type\": \"string\"},\n          \"policy_engine_mode\": {\"type\": \"string\"},\n          \"layout\": {\"type\": \"string\"}\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Editing nss_ldap.conf for QNAP NAS LDAP Integration (Conf)\nDESCRIPTION: This configuration file snippet is to be placed into '/etc/config/nss_ldap.conf' on the QNAP NAS. It defines the LDAP connection parameters, mapping of object classes and attributes, search scopes, and other operational settings to match authentik's LDAP provider. Placeholders like ${ldap.domain} and ${ldap.baseDN} should be filled with actual values. Editing the file requires administrative access via SSH and the LDAP service should be stopped before changes. Certain parameters such as 'nss_map_objectclass' and 'nss_map_attribute' align QNAP's expected schema with authentik's LDAP implementation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/qnap-nas/index.md#_snippet_3\n\nLANGUAGE: conf\nCODE:\n```\nhost                        ${ldap.domain}\nbase                        ${ldap.baseDN}\nuri                         ldaps://${ldap.domain}/\nssl                         on\nrootbinddn                  cn=${qnap.serviceAccount},ou=users,${ldap.baseDN}\nnss_schema                  rfc2307bis\n\n# remap object classes to authentik ones\nnss_map_objectclass         posixAccount    user\nnss_map_objectclass         shadowAccount   user\nnss_map_objectclass         posixGroup      group\n\n# remap attributes\n# uid to cn is essential otherwise only id usernames will occur\nnss_map_attribute           uid             cn\n# map displayName information into comments field\nnss_map_attribute           gecos           displayName\n# see https://ldapwiki.com/wiki/GroupOfUniqueNames%20vs%20groupOfNames\nnss_map_attribute           uniqueMember    member\n\n# configure scope per search filter\nnss_base_passwd             ou=users,${ldap.baseDN}?one\nnss_base_shadow             ou=users,${ldap.baseDN}?one\nnss_base_group              ou=groups,${ldap.baseDN}?one\n\ntls_checkpeer               no\nreferrals                   no\nbind_policy                 soft\ntimelimit                   120\ntls_ciphers                 EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:!MD5\nnss_initgroups_ignoreusers  admin,akadmin\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for Prompt Stage Retrieval and Update (JSON Serialization)\nDESCRIPTION: This snippet describes the JSON structure returned or sent to the API when retrieving or updating prompt stages via GET, PUT, or PATCH requests. It includes details about the prompt stage properties, flow settings, and nested serializers such as 'Flow Serializer' and 'Stage Serializer'. The focus is on serializing the flow configuration and layout settings used in prompt stages.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_71\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"promptstage_set\": [\n    {\n      \"flow_set\": [\n        {\n          \"designation\": \"string\",\n          \"denied_action\": \"string\",\n          \"policy_engine_mode\": \"string\",\n          \"layout\": \"string\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Sources (API)\nDESCRIPTION: Updates the request body and response for POST /sources/oauth/. The request body (application/json) has an updated description for 'policy_engine_mode' and adds 'patreon' to the 'provider_type' enum. The response code is 201 Created with content type application/json, featuring updated descriptions for 'managed', 'policy_engine_mode', and adds 'patreon' to the 'provider_type' enum.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_26\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /sources/oauth/\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik with Docker Compose (Shell)\nDESCRIPTION: Provides the shell commands to upgrade an Authentik instance deployed via Docker Compose. First, download the specific `docker-compose.yml` for the release, then run `docker-compose up -d` to pull and restart containers with the new images, followed by `docker-compose run --rm server migrate` to apply database migrations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2021/v2021.1.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose up -d\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose run --rm server migrate\n```\n\n----------------------------------------\n\nTITLE: Loading i18n Tags (Django Template)\nDESCRIPTION: Loads the internationalization tag library (`i18n`) into the template. This makes translation-related template tags and filters available for use, enabling features like marking text for translation (`blocktrans`, `trans`). This tag should typically be placed at the beginning of templates that require translation.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/authentik/stages/email/templates/email/setup.txt#_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n```\n\n----------------------------------------\n\nTITLE: Modify SSF Config URL to Include Port 443\nDESCRIPTION: This snippet shows how to add the default HTTPS port (443) to the SSF Config URL obtained from the authentik Apple Business Manager SSF provider. Apple Business Manager requires the port number to be explicitly included when providing the URL in its configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/apple/index.md#_snippet_3\n\nLANGUAGE: URL\nCODE:\n```\nhttps://authentik.company:443/.well-known/ssf-configuration/abm\n```\n\n----------------------------------------\n\nTITLE: Dumping PostgreSQL Database in Docker Compose\nDESCRIPTION: Command to dump the existing Authentik PostgreSQL database to a SQL file. This creates a backup of all database content before upgrading.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec postgresql pg_dump -U authentik -d authentik -cC > upgrade_backup_12.sql\n```\n\n----------------------------------------\n\nTITLE: PUT /stages/authenticator/webauthn/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PUT method for the /stages/authenticator/webauthn/ endpoint. It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: PUT /stages/authenticator/validate/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PUT method for the /stages/authenticator/validate/ endpoint. It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Plex User Connection - GET Endpoint\nDESCRIPTION: Fetches details of a specific user connection for Plex integration by ID, including configuration data to manage user connections within Plex.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"string\",\n  \"details\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Import AggregateCard component - Typescript\nDESCRIPTION: This code snippet demonstrates how to import the `AggregateCard` component in a Typescript file. This allows developers to use the `AggregateCard` element within their Typescript/Javascript code.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/cards/stories/AggregateCard.docs.mdx#_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport \"@goauthentik/elements/cards/AggregateCard.js\";\n```\n\n----------------------------------------\n\nTITLE: GET /events/notifications/ API Change\nDESCRIPTION: This section documents modifications to the `GET` request for the `/events/notifications/` endpoint. It describes changes to parameters and return types. Specifically, the `severity` parameter in the query has been modified, and changes are reflected in the return type, which includes `results` and the properties within. The changes impact how notifications are retrieved and displayed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_60\n\n\n\n----------------------------------------\n\nTITLE: Describing Default User LDAP Search in QNAP NAS (Text)\nDESCRIPTION: This snippet details the default LDAP user search query parameters used by QNAP NAS. It specifies the LDAP scope, filter, attributes, and search parameters essential for understanding what information the NAS collects during authentication. No code execution is needed; this is a documentation sample for reference. Inputs are internal to the NAS and cannot be modified directly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/qnap-nas/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nScope: 1 (singleLevel)\nDeref Aliases: 0 (neverDerefAliases)\nSize Limit: 0\nTime Limit: 0\nTypes Only: false\nFilter: (objectClass=posixAccount)\nAttributes:\n    uid\n    userPassword\n    uidNumber\n    gidNumber\n    cn\n    homeDirectory\n    loginShell\n    gecos\n    description\n    objectClass\n```\n\n----------------------------------------\n\nTITLE: GET /core/groups/{group_uuid}/ - 200 OK\nDESCRIPTION: Documenting the modification of a GET endpoint for core groups including content type change.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /core/groups/&#123;group_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: User Type Filter Parameter Addition\nDESCRIPTION: Addition of a type filter parameter to the GET /core/users/ endpoint to filter users by their type.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n// Added query parameter\n\"type\": \n> - `internal` - Internal\n> - `external` - External\n> - `service_account` - Service Account\n> - `internal_service_account` - Internal Service Account\n```\n\n----------------------------------------\n\nTITLE: Updating PasswordStage Response\nDESCRIPTION: This describes changes related to the PasswordStage serializer in response to a request. It specifies the HTTP response code (200 OK) and content type (application/json). The changes affect the `results` array, particularly its items which are PasswordStage Serializer objects. The `flow_set` array within these objects is also modified. The `policy_engine_mode` property of objects inside `flow_set` array changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: GET /providers/scim_groups/{id}/ - 200 OK\nDESCRIPTION: This specifies updates to the GET endpoint for SCIM Groups, echoing previous patterns with changed content type and properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /providers/scim_groups/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Simplified Group Serializer for user's groups\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: GET /stages/authenticator/webauthn/ API Response\nDESCRIPTION: This describes the response of a GET request to the /stages/authenticator/webauthn/ endpoint.  It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: GET /stages/authenticator/totp/ API Response\nDESCRIPTION: This describes the response of a GET request to the /stages/authenticator/totp/ endpoint. It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Adding Kubernetes Ingress Annotations in YAML\nDESCRIPTION: Allows adding additional annotations to the Ingress object created for the outpost, useful for configuring ingress controllers or tools like cert-manager.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/outposts/_config.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_ingress_annotations: {}\n```\n\n----------------------------------------\n\nTITLE: Restart Wazuh Dashboard Service\nDESCRIPTION: This bash command restarts the Wazuh dashboard service. This is necessary for configuration changes to take effect.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/wazuh/index.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart wazuh-dashboard\n```\n\n----------------------------------------\n\nTITLE: API Response Modification: `GET` Invitation Flow\nDESCRIPTION: This snippet describes changes to the response of a GET request targeting the invitation flow. The response content type is `application/json`. The changes include modification of the `flow_obj` object, which serializes the flow.  The `authentication` property has added values like `require_outpost`. The `layout` property lists different types with different values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Updating Plex and SAML Source Connection Schemas\nDESCRIPTION: These snippets focus on endpoints managing Plex and SAML user connections, adding optional user parameters, updating response schemas with created timestamps and optional tokens, and adjusting request schemas with new properties like plex_token and user property mappings, enhancing the configuration flexibility.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_51\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"property\": \"Plex and SAML Source Connection Schema Changes\",\n  \"details\": \"Includes parameter additions such as user in query, response property additions like created timestamps and optional plex_token, and request property updates for POST methods with properties like user_property_mappings. Also removes obsolete properties such as plex_token in some schemas.\"\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH /rbac/permissions/assigned_by_roles/&#123;uuid&#125;/unassign/\nDESCRIPTION: This section details the changes to the `PATCH` request to `/rbac/permissions/assigned_by_roles/{uuid}/unassign/`. There are no specific code changes mentioned.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Enhanced Static Authenticator Stage Properties\nDESCRIPTION: Addition of token_length property and changes to token_count property in the Static Authenticator stage API endpoints.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n// Added to request and response bodies\n\"token_length\": (integer)\n\"token_count\": (integer)\n```\n\n----------------------------------------\n\nTITLE: Flow Executor XAK Redirect Component\nDESCRIPTION: New 'xak-flow-redirect' component for the flow executor POST endpoint, which enables redirecting users to different destinations during the authentication flow.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.12.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"component\": \"xak-flow-redirect\",\n  \"to\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH /stages/authenticator/totp/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PATCH method for the /stages/authenticator/totp/ endpoint. It includes changes to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Authenticator Stage API Changes\nDESCRIPTION: Documents changes to various authenticator stage endpoints (duo, sms, static), updating the flow_set property and layout options in both request and response structures.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth User Connection - PATCH Endpoint\nDESCRIPTION: Partially updates an OAuth user connection, mainly the property mappings and connection details, to facilitate incremental configuration changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"string\",\n  \"user\": \"integer\",\n  \"source\": {...},\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Authentik Stack in Docker Compose\nDESCRIPTION: Command to stop all services in the Authentik Docker Compose stack before proceeding with the database upgrade.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Divider with Text Content in HTML\nDESCRIPTION: Shows how to add text content to the Divider using the unnamed slot. This displays text in the center of the divider line.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Divider.docs.mdx#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-divider><p>Time for bed!</p></ak-divider>\n```\n\n----------------------------------------\n\nTITLE: Backing Up PostgreSQL File Path Data\nDESCRIPTION: Command to backup PostgreSQL data when using a file path instead of a Docker volume.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/troubleshooting/postgres/upgrade_docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp -a /path/to/v12-data /path/to/v12-backup\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Password Expiry Policy (Response Change)\nDESCRIPTION: Details changes to the GET endpoint for retrieving objects referencing a specific password expiry policy. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/password_expiry/{policy_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: PATCH /stages/authenticator/duo/ API Response\nDESCRIPTION: This snippet describes the changes associated with the PATCH method for the /stages/authenticator/duo/ endpoint.  It includes a change to the content type and the flow_set property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Outposts (API)\nDESCRIPTION: Updates the response for GET /outposts/. The response code is 200 OK with content type application/json. Changes include an updated description for the 'managed' property and added required properties 'assigned_backchannel_application_name' and 'assigned_backchannel_application_slug' to the nested 'providers_obj' within the 'results' array.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_17\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /outposts/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for RAC Property Mapping (Response Change)\nDESCRIPTION: Details changes to the GET endpoint for retrieving objects referencing a specific RAC property mapping. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nGET /propertymappings/rac/{pm_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: Using ak-app-icon component (HTML)\nDESCRIPTION: Demonstrates how to use the `ak-app-icon` custom element within an HTML template, setting the `name` and `icon` attributes. The component displays either the specified FontAwesome icon or, if the icon is missing, uses the first letter of the `name` as a fallback.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/AppIcon.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-app-icon name=${app.name} icon=${app.metaIcon}></ak-ak-icon>\n```\n\n----------------------------------------\n\nTITLE: POST /providers/saml/ Endpoint Changes\nDESCRIPTION: This snippet describes changes to the POST /providers/saml/ endpoint including the addition of the `authentication_flow` property in both the request and the response. The `authentication_flow` is used to determine the authentication flow for unauthenticated users.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_11\n\nLANGUAGE: N/A\nCODE:\n```\nPOST /providers/saml/\n###### Request:\n\nChanged content type : `application/json`\n\n- Added property `authentication_flow` (string)\n    > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Added property `authentication_flow` (string)\n        > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validate Authenticator Stage Details via GET\nDESCRIPTION: Documents changes in the GET response for a Validate Authenticator Stage. The response content type is `application/json`. The primary change involves modifications to the `flow_set` array items, specifically the `layout` property accepting predefined string values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nGET /stages/authenticator/validate/{stage_uuid}/\n```\n\nLANGUAGE: json\nCODE:\n```\n// Response Body (application/json)\n{\n  \"flow_set\": [\n    {\n      \"layout\": \"stacked | content_left | content_right | sidebar_left | sidebar_right\"\n      // ... other properties\n    }\n    // ... other items\n  ]\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Action Button (Typescript)\nDESCRIPTION: This snippet imports the `ak-action-button` component, which is a custom web component designed to handle asynchronous actions driven by promises. The component provides visual feedback based on the promise's state. There are no required dependencies, except for the import of the component's definition.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/buttons/ActionButton/ak-action-button.docs.mdx#_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport \"@goauthentik/elements/buttons/ActionButton/ak-action-button.js\";\n```\n\n----------------------------------------\n\nTITLE: Creating LDAP Sources (API)\nDESCRIPTION: Updates the request body and response for POST /sources/ldap/. The request body (application/json) has an updated description for 'policy_engine_mode' (enum: 'all', 'any'). The response code is 201 Created with content type application/json, featuring updated descriptions for the 'managed' and 'policy_engine_mode' properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_24\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /sources/ldap/\n```\n\n----------------------------------------\n\nTITLE: Pull Request Naming Convention Examples\nDESCRIPTION: Provides examples demonstrating the required format for Pull Request titles: `<package>: <verb> <description>`. These examples show how to reference a specific package (like 'providers/saml2' or 'website/docs') and describe the change concisely.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/index.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`providers/saml2: fix parsing of requests`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`website/docs: add config info for GWS`\n```\n\n----------------------------------------\n\nTITLE: Verifying Configuration with Kubernetes\nDESCRIPTION: Command to output the full authentik configuration when running in Kubernetes to verify that configuration settings have been applied correctly.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/configuration/configuration.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it deployment/authentik-worker -c worker -- ak dump_config\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentik Beta Images Docker Compose Shell\nDESCRIPTION: Sets environment variables in a Docker Compose `.env` file to specify the beta image repository and tags for the authentik server and outposts. This directs Docker Compose to use the development/beta builds instead of stable ones. Requires Docker Compose setup and an existing `.env` file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/beta.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTHENTIK_IMAGE=ghcr.io/goauthentik/dev-server\nAUTHENTIK_TAG=gh-next\nAUTHENTIK_OUTPOSTS__CONTAINER_IMAGE_BASE=ghcr.io/goauthentik/dev-%(type)s:gh-%(build_hash)s\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters for Session Binding in User Login Stage (GET, JSON)\nDESCRIPTION: Covers new GET query parameters available for the user login stage endpoint, enabling clients to filter or specify session binding methods using 'network_binding' and 'geoip_binding'. Supported parameter values include variants of network (no_binding, bind_asn, bind_asn_network, bind_asn_network_ip) and GeoIP granularity (no_binding, bind_continent, bind_continent_country, bind_continent_country_city). No body is sent or required; all values are passed in the query string.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network_binding\": \"bind_asn\",\n  \"geoip_binding\": \"bind_continent\"\n  // passed as query parameters\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Values Configuration for authentik 2023.2\nDESCRIPTION: YAML configuration for updating Kubernetes deployments to use the authentik 2023.2.0 image. This snippet specifies the image repository and tag to be used in a Kubernetes values file.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.2.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2023.2.0\n```\n\n----------------------------------------\n\nTITLE: Using Alert Web Component in HTML\nDESCRIPTION: Shows the basic structure for using the <ak-alert> custom web component in an HTML document. The content placed within the tags will be rendered inside the alert. Note that the content must be valid HTML.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Alert.docs.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ak-alert><p>This is the content of your alert!</p></ak-alert>\n```\n\n----------------------------------------\n\nTITLE: Sample auth_method_args for MFA Context (JSON)\nDESCRIPTION: An example of the JSON structure for the context['auth_method_args'] variable when using 'auth_mfa' authentication. Dependencies: Context dictionary during policy evaluation. Input: N/A (for illustration/reference). Output: N/A (sample data structure). Illustrates the expected shape of MFA device lists.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/customize/policies/expression.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mfa_devices\": [\n        {\n            \"pk\": 1,\n            \"app\": \"otp_static\",\n            \"name\": \"Static Token\",\n            \"model_name\": \"staticdevice\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Changes to Notifications API Response\nDESCRIPTION: Documents changes to the events/notifications/ endpoint response structure, including the addition of 'brand' property, removal of 'tenant' property, and modifications to 'user' and 'context' properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"event\": {\n        \"brand\": {},\n        \"user\": {},\n        \"context\": {}\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component in MDX with JSX\nDESCRIPTION: A React component implementation for creating tabbed interfaces in MDX documentation files. Shows how to configure tabs to display different authentication options like OIDC and SAML.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/style-guide.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n<Tabs\n    defaultValue=\"oidc\"\n    values={[\n        { label: \"OIDC\", value: \"oidc\" },\n        { label: \"SAML\", value: \"saml\" },\n    ]}\n>\n    <TabItem value=\"oidc\">OIDC configuration details go here.</TabItem>\n    <TabItem value=\"saml\">SAML configuration details go here.</TabItem>\n</Tabs>;\n```\n\n----------------------------------------\n\nTITLE: Adding IP ASN Data to Reputation Scores Endpoint\nDESCRIPTION: This snippet details the addition of the `ip_asn_data` property (object) and the changing the type of `ip_geo_data` from object to object in the `GET /policies/reputation/scores/` endpoint. The response content type is `application/json`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"ip_asn_data\": \"object\",\n      \"ip_geo_data\": \"object\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Including deny_message in Deny Stage API Responses\nDESCRIPTION: This snippet introduces the 'deny_message' property into the deny stage's GET, PUT, and PATCH responses and requests, allowing administrators to provide custom denial messages presented to users upon stage rejection.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deny_message\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Updates for SAML Providers\nDESCRIPTION: This section details changes to the response of the `/providers/saml/{id}/used_by/` endpoint. The response type is 200 OK with `application/json` content. The `action` property in the response object has updated enum values.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Usage for LDAP Property Mapping (Response Change)\nDESCRIPTION: Details changes to the GET endpoint for retrieving objects referencing a specific LDAP property mapping. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nGET /propertymappings/ldap/{pm_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Authenticator API in HTTP\nDESCRIPTION: API endpoints for WebAuthn authenticator management. Includes device type and AAGUID properties for hardware device identification and classification.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /authenticators/admin/webauthn/\nGET /authenticators/admin/webauthn/\n```\n\n----------------------------------------\n\nTITLE: Assigning admin privileges to an OpenID Connect user in Ubuntu Landscape (SQL)\nDESCRIPTION: This SQL snippet provides commands to insert records into the Landscape PostgreSQL database to grant administrative privileges to a user authenticated via OpenID Connect. The user ID must be obtained beforehand by querying the 'person' table. These commands enable admin access and control by updating 'person_account' and 'person_access' tables accordingly. It assumes access to the PostgreSQL prompt on the Landscape server.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/ubuntu-landscape/index.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO person_account VALUES (<user id>, 1);\nINSERT INTO person_access VALUES (<user id>, 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Modifying Writefreely Database Schema for OAuth Token Size\nDESCRIPTION: SQL command to alter the 'access_token' column in the 'oauth_users' table to support larger token sizes (2048 characters). This modification is required because the default column size is too small to store authentik tokens.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/writefreely/index.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `oauth_users` MODIFY `access_token` varchar(2048);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Kubernetes Service Connection (Response Change)\nDESCRIPTION: Describes changes to the GET endpoint for retrieving objects referencing a specific Kubernetes service connection. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nGET /outposts/service_connections/kubernetes/{uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Values for authentik 2021.10.4 Upgrade\nDESCRIPTION: This YAML snippet shows how to update the Kubernetes values.yaml file to use the authentik 2021.10.1 container image when upgrading to version 2021.10.4.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2021/v2021.10.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2021.10.1\n```\n\n----------------------------------------\n\nTITLE: Documenting  API Response: /providers/radius/{id}/ (GET)\nDESCRIPTION: This documentation captures the API response details for the GET endpoint at `/providers/radius/{id}/`.  It specifies the expected content type and newly added properties. This response includes a boolean property related to multi-factor authentication support.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Documenting  API Response: /providers/radius/{id}/ (GET)\",\n  \"description\": \"This documentation captures the API response details for the GET endpoint at `/providers/radius/{id}/`.  It specifies the expected content type and newly added properties. This response includes a boolean property related to multi-factor authentication support.\",\n  \"language\": \"JSON\",\n  \"codeList\": [\n    {\n      \"language\": \"json\",\n      \"code\": \"{\\n  \\\"title\\\": \\\"Documenting  API Response: /providers/radius/{id}/ (GET)\\\",\\n  \\\"description\\\": \\\"This documentation captures the API response details for the GET endpoint at `/providers/radius/{id}/`.  It specifies the expected content type and newly added properties. This response includes a boolean property related to multi-factor authentication support.\\\",\\n  \\\"language\\\": \\\"JSON\\\",\\n  \\\"codeList\\\": []\\n}\\n\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Deployment with New Image Tag\nDESCRIPTION: Guidance for updating a Kubernetes deployment of authentik to the new release by changing the image tag in the deployment configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2021/v2021.9.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nimage:\n    repository: ghcr.io/goauthentik/server\n    tag: 2021.9.1\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definitions for RADIUS Outposts\nDESCRIPTION: This section lists the API endpoints related to RADIUS functionality, covering GET operations for retrieving RADIUS outposts and providers, as well as POST, PUT, DELETE and PATCH operations for managing RADIUS providers. The endpoints allow interaction with RADIUS outposts and providers.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_1\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /outposts/radius/\n\n##### `GET` /outposts/radius/&#123;id&#125;/\n\n##### `GET` /providers/radius/\n\n##### `POST` /providers/radius/\n\n##### `GET` /providers/radius/&#123;id&#125;/\n\n##### `PUT` /providers/radius/&#123;id&#125;/\n\n##### `DELETE` /providers/radius/&#123;id&#125;/\n\n##### `PATCH` /providers/radius/&#123;id&#125;/\n\n##### `GET` /providers/radius/&#123;id&#125;/used_by/\n\n```\n\n----------------------------------------\n\nTITLE: GET /outposts/instances/ Endpoint Changes\nDESCRIPTION: This describes modifications to the GET /outposts/instances/ endpoint, specifically changing properties and adding the radius enum.  The response includes the addition of an authentication_flow property. This setting controls authentication behavior for unauthenticated users.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_8\n\nLANGUAGE: N/A\nCODE:\n```\nGET /outposts/instances/\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > Outpost Serializer\n\n        - Changed property `type` (string)\n\n            > - `proxy` - Proxy\n            > - `ldap` - Ldap\n            > - `radius` - Radius\n\n            Added enum value:\n\n            - `radius`\n\n        - Changed property `providers_obj` (array)\n\n            Changed items (object): > Provider Serializer\n\n            - Added property `authentication_flow` (string)\n                > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: Importing ak-app-icon component (Typescript)\nDESCRIPTION: Imports the necessary module to register the custom `ak-app-icon` web component definition, making it available for use in HTML templates. This is a common pattern for web components implemented using libraries like Lit or similar.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/AppIcon.docs.mdx#_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport \"@goauthentik/components/ak-app-icon.js\";\n```\n\n----------------------------------------\n\nTITLE: Exporting authentik data (docker-compose, shell)\nDESCRIPTION: This snippet provides shell commands to export user, group, certificate, event, and OTP device data from an authentik instance running via docker-compose. It executes the `dumpdata` management command inside the 'server' container and then copies the resulting JSON file to the host machine.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.9.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose exec server ./manage.py dumpdata -o /tmp/authentik_dump.json authentik_core.User authentik_core.Group authentik_crypto.CertificateKeyPair authentik_audit.Event otp_totp.totpdevice otp_static.staticdevice otp_static.statictoken\ndocker cp authentik_server_1:/tmp/authentik_dump.json authentik_dump.json\n```\n\n----------------------------------------\n\nTITLE: Changes to Flow Serialization in Authentik API Endpoints\nDESCRIPTION: Overview of consistent changes across multiple API endpoints where the flow_set property has been restructured. The main change makes 'cache_count', 'policies', and 'stages' optional properties rather than deleting them completely, affecting both request and response handling.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_31\n\nLANGUAGE: REST API\nCODE:\n```\nGET /stages/password/\nGET /stages/prompt/prompts/{prompt_uuid}/\nPUT /stages/prompt/prompts/{prompt_uuid}/\nPATCH /stages/prompt/prompts/{prompt_uuid}/\nPOST /stages/prompt/stages/\nGET /stages/prompt/stages/\nPOST /stages/user_delete/\nGET /stages/user_delete/\nPOST /stages/user_login/\nGET /stages/user_login/\nPOST /stages/user_logout/\nGET /stages/user_logout/\nPOST /stages/user_write/\nGET /stages/user_write/\n```\n\n----------------------------------------\n\nTITLE: API Updates: Property Changes (PUT, PATCH)\nDESCRIPTION: This section illustrates the expected behaviour after `PUT` and `PATCH` requests for different endpoints.  It includes the content type and the expected updates on the `managed` property. The `managed` property is modified to contain a description about the objects being managed by authentik.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Validating RSA Private Key Format with grep in Shell\nDESCRIPTION: This shell snippet uses the grep utility to check that the private key file has the expected 'RSA PRIVATE KEY' marker in its PEM headers and footers, verifying PKCS#1 compliance. Requires 'grep' installed in the shell environment and the target file path. Input: path to private key PEM file. Output: lines from the file that match the expected pattern. This detects whether manual header/footer correction is necessary.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/mautic/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngrep \"RSA PRIVATE KEY\" \"Mautic Self-signed Certificate_private_key.pem\"\n```\n\n----------------------------------------\n\nTITLE: Executing Helm Upgrade Command in Shell\nDESCRIPTION: This shell command performs a Helm upgrade of the authentik deployment using the new Helm repository and the customized values file. It installs or updates the application with the latest charts, enabling the user to finalize the upgrade to version 0.13. The '--devel' flag allows use of development versions and the '-f values.yaml' parameter ensures custom configurations are applied. This step assumes Helm CLI is installed and properly configured with Kubernetes access.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/old/v0.13.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade authentik authentik/authentik --devel -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Convention Example\nDESCRIPTION: Shows an example of a Git commit message adhering to the `<package>: <verb> <description>` format. This convention mirrors the Pull Request naming guidelines for consistency.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/index.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`providers/saml2: fix parsing of requests`\n```\n\n----------------------------------------\n\nTITLE: User Connections - PATCH Endpoint for Partial Update\nDESCRIPTION: Partially modifies user connection data, specifically the property mappings for user and group properties. Useful for incremental updates without overwriting entire configurations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {...},\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: PUT /core/groups/{group_uuid}/ - 200 OK\nDESCRIPTION: Details the PUT endpoint for core groups, including content type and property updates.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n##### `PUT` /core/groups/&#123;group_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `name` (string)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Authenticator Stage\nDESCRIPTION: This describes the changes to a `POST` request at `/stages/authenticator/static/`.  The response code is `201 Created` and content type is `application/json`, with modification of the `flow_set` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n##### `POST` /stages/authenticator/static/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        New optional properties:\n\n        - `cache_count`\n        - `policies`\n        - `stages`\n\n        * Deleted property `stages` (array)\n\n        * Deleted property `policies` (array)\n\n        * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Modifying the `model` Property\nDESCRIPTION: This section details the changes to the `model` property, also a string within the API request.  It specifies updated and removed enumeration values for `model`, indicating changes to the types of models the API can work with. The changes include various domain and system component mappings.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.2.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- Changed property `model` (string)\n\n    > - `authentik_tenants.domain` - Domain\n    > - `authentik_crypto.certificatekeypair` - Certificate-Key Pair\n    > - `authentik_flows.flow` - Flow\n    > - `authentik_flows.flowstagebinding` - Flow Stage Binding\n    > - `authentik_outposts.dockerserviceconnection` - Docker Service-Connection\n    > - `authentik_outposts.kubernetesserviceconnection` - Kubernetes Service-Connection\n    > - `authentik_outposts.outpost` - Outpost\n    > - `authentik_policies_dummy.dummypolicy` - Dummy Policy\n    > - `authentik_policies_event_matcher.eventmatcherpolicy` - Event Matcher Policy\n    > - `authentik_policies_expiry.passwordexpirypolicy` - Password Expiry Policy\n    > - `authentik_policies_expression.expressionpolicy` - Expression Policy\n    > - `authentik_policies_password.passwordpolicy` - Password Policy\n    > - `authentik_policies_reputation.reputationpolicy` - Reputation Policy\n    > - `authentik_policies.policybinding` - Policy Binding\n    > - `authentik_providers_ldap.ldapprovider` - LDAP Provider\n    > - `authentik_providers_oauth2.scopemapping` - Scope Mapping\n    > - `authentik_providers_oauth2.oauth2provider` - OAuth2/OpenID Provider\n    > - `authentik_providers_proxy.proxyprovider` - Proxy Provider\n    > - `authentik_providers_radius.radiusprovider` - Radius Provider\n    > - `authentik_providers_saml.samlprovider` - SAML Provider\n    > - `authentik_providers_saml.samlpropertymapping` - SAML Property Mapping\n    > - `authentik_providers_scim.scimprovider` - SCIM Provider\n    > - `authentik_providers_scim.scimmapping` - SCIM Mapping\n    > - `authentik_rbac.role` - Role\n    > - `authentik_sources_ldap.ldapsource` - LDAP Source\n    > - `authentik_sources_ldap.ldappropertymapping` - LDAP Property Mapping\n    > - `authentik_sources_oauth.oauthsource` - OAuth Source\n    > - `authentik_sources_oauth.useroauthsourceconnection` - User OAuth Source Connection\n    > - `authentik_sources_plex.plexsource` - Plex Source\n    > - `authentik_sources_plex.plexsourceconnection` - User Plex Source Connection\n    > - `authentik_sources_saml.samlsource` - SAML Source\n    > - `authentik_sources_saml.usersamlsourceconnection` - User SAML Source Connection\n    > - `authentik_stages_authenticator_duo.authenticatorduostage` - Duo Authenticator Setup Stage\n    > - `authentik_stages_authenticator_duo.duodevice` - Duo Device\n    > - `authentik_stages_authenticator_sms.authenticatorsmsstage` - SMS Authenticator Setup Stage\n    > - `authentik_stages_authenticator_sms.smsdevice` - SMS Device\n    > - `authentik_stages_authenticator_static.authenticatorstaticstage` - Static Authenticator Setup Stage\n    > - `authentik_stages_authenticator_static.staticdevice` - Static Device\n    > - `authentik_stages_authenticator_totp.authenticatortotpstage` - TOTP Authenticator Setup Stage\n    > - `authentik_stages_authenticator_totp.totpdevice` - TOTP Device\n    > - `authentik_stages_authenticator_validate.authenticatorvalidatestage` - Authenticator Validation Stage\n    > - `authentik_stages_authenticator_webauthn.authenticatewebauthnstage` - WebAuthn Authenticator Setup Stage\n    > - `authentik_stages_authenticator_webauthn.webauthndevice` - WebAuthn Device\n    > - `authentik_stages_captcha.captchastage` - Captcha Stage\n    > - `authentik_stages_consent.consentstage` - Consent Stage\n    > - `authentik_stages_consent.userconsent` - User Consent\n    > - `authentik_stages_deny.denystage` - Deny Stage\n    > - `authentik_stages_dummy.dummystage` - Dummy Stage\n    > - `authentik_stages_email.emailstage` - Email Stage\n    > - `authentik_stages_identification.identificationstage` - Identification Stage\n    > - `authentik_stages_invitation.invitationstage` - Invitation Stage\n    > - `authentik_stages_invitation.invitation` - Invitation\n    > - `authentik_stages_password.passwordstage` - Password Stage\n    > - `authentik_stages_prompt.prompt` - Prompt\n    > - `authentik_stages_prompt.promptstage` - Prompt Stage\n    > - `authentik_stages_user_delete.userdeletestage` - User Delete Stage\n    > - `authentik_stages_user_login.userloginstage` - User Login Stage\n    > - `authentik_stages_user_logout.userlogoutstage` - User Logout Stage\n    > - `authentik_stages_user_write.userwritestage` - User Write Stage\n    > - `authentik_brands.brand` - Brand\n    > - `authentik_blueprints.blueprintinstance` - Blueprint Instance\n    > - `authentik_core.group` - Group\n    > - `authentik_core.user` - User\n    > - `authentik_core.application` - Application\n    > - `authentik_core.token` - Token\n    > - `authentik_enterprise.license` - License\n    > - `authentik_providers_rac.racprovider` - RAC Provider\n    > - `authentik_providers_rac.endpoint` - RAC Endpoint\n    > - `authentik_providers_rac.racpropertymapping` - RAC Property Mapping\n    > - `authentik_events.event` - Event\n    > - `authentik_events.notificationtransport` - Notification Transport\n    > - `authentik_events.notification` - Notification\n    > - `authentik_events.notificationrule` - Notification Rule\n    > - `authentik_events.notificationwebhookmapping` - Webhook Mapping\n\n    Added enum values:\n\n    - `authentik_tenants.domain`\n    - `authentik_brands.brand`\n    - `authentik_providers_rac.racprovider`\n    - `authentik_providers_rac.endpoint`\n    - `authentik_providers_rac.racpropertymapping`\n      Removed enum values:\n\n    - `authentik_policies_reputation.reputation`\n    - `authentik_providers_oauth2.authorizationcode`\n    - `authentik_providers_oauth2.accesstoken`\n    - `authentik_providers_oauth2.refreshtoken`\n    - `authentik_tenants.tenant`\n```\n\n----------------------------------------\n\nTITLE: SCIM Source Configuration - PATCH Endpoint\nDESCRIPTION: Partially updates a SCIM source's property mappings and serializer objects. The response indicates the configuration state after modifications.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_property_mappings\": [...],\n  \"group_property_mappings\": [...],\n  \"token_obj\": {...},\n  \"user_obj\": {...},\n  \"groups_obj\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for All Property Mappings (Response Change)\nDESCRIPTION: Describes changes to the GET endpoint for retrieving objects referencing a specific property mapping (from the 'all' category). The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET /propertymappings/all/{pm_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: Updating UserConsent Serializer to Include User UUID\nDESCRIPTION: This snippet updates the UserConsent serializer response to include a 'uuid' property within the nested user object, ensuring user identities are identifiable via UUIDs for consent records.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.10.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": {\n    \"uuid\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Security Policy Markdown in React JavaScript\nDESCRIPTION: This snippet shows how to import a markdown file named SECURITY.md from a relative path and use it as a React component within a JSX expression. It requires a tool or loader capable of converting markdown files into React components. The snippet is intended to integrate security documentation directly into a React-based UI. It takes no explicit input parameters and outputs the rendered markdown content within the React tree.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/security/policy.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SecurityPolicy from \"../../../SECURITY.md\";\n\n<SecurityPolicy />\n```\n\n----------------------------------------\n\nTITLE: Modifying User Write Stage PATCH Request and Response\nDESCRIPTION: Updates to the User Write Stage PATCH endpoint, replacing 'can_create_users' with 'user_creation_mode' in both request and response schemas for partial updates.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.1.md#_snippet_6\n\nLANGUAGE: API\nCODE:\n```\nPATCH /stages/user_write/{stage_uuid}/\nRequest:\nChanged content type : application/json\n- Added property `user_creation_mode` (string)\n- Deleted property `can_create_users` (boolean)\n    > When set, this stage can create users. If not enabled and no user is available, stage will fail.\n\nReturn Type:\nChanged response : 200 OK\n- Changed content type : application/json\n    - Added property `user_creation_mode` (string)\n    - Deleted property `can_create_users` (boolean)\n        > When set, this stage can create users. If not enabled and no user is available, stage will fail.\n```\n\n----------------------------------------\n\nTITLE: POST /stages/user_delete/ Request/Response\nDESCRIPTION: This outlines the request and response for a POST request to `/stages/user_delete/`. The request content type is `application/json`. The request includes change of properties in `flow_set` array, in which, items are modified, and `policy_engine_mode` is changed. The response is 201 Created with content type `application/json`, showing similar changes in `flow_set` and the changes to `policy_engine_mode` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_49\n\n\n\n----------------------------------------\n\nTITLE: Access Token Retrieval - Provider Changes\nDESCRIPTION: This documents a `GET` request to `/oauth2/access_tokens/{id}/` endpoint and modifications. It highlights changes to the OAuth2Provider Serializer with new required properties 'invalidation_flow', 'encryption_key', and changes to 'signing_key'.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_10\n\nLANGUAGE: API\nCODE:\n```\n##### `GET` /oauth2/access_tokens/&#123;id&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `provider` (object)\n\n        > OAuth2Provider Serializer\n\n        New required properties:\n\n        - `invalidation_flow`\n\n        * Added property `invalidation_flow` (string)\n\n            > Flow used ending the session from a provider.\n\n        * Added property `encryption_key` (string)\n\n            > Key used to encrypt the tokens. When set, tokens will be encrypted and returned as JWEs.\n\n        * Changed property `signing_key` (string)\n            > Key used to sign the tokens.\n```\n\n----------------------------------------\n\nTITLE: Updating Password Policy Response Body (POST /policies/password/)\nDESCRIPTION: The response body for creating password policies now includes the newly added boolean flags (`check_static_rules`, `check_have_i_been_pwned`, `check_zxcvbn`) and integer thresholds (`hibp_allowed_count`, `zxcvbn_score_threshold`) reflecting the created policy's configuration.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.11.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  // ... other policy properties\n  \"check_static_rules\": true,\n  \"check_have_i_been_pwned\": true,\n  \"check_zxcvbn\": true,\n  \"hibp_allowed_count\": 0,\n  \"zxcvbn_score_threshold\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Updating `POST /policies/all/{policy_uuid}/test/` Response Structure (JSON)\nDESCRIPTION: Details changes to the `200 OK` JSON response structure for the `POST /policies/all/{policy_uuid}/test/` endpoint. The `log_messages` array items (log message objects) now require `attributes`, `event`, `log_level`, `logger`, and `timestamp` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\nChanged response : **200 OK**\n- Changed content type : `application/json`\n    - Changed property `log_messages` (array)\n        Changed items (object): > Single log message with all context logged.\n        New required properties:\n        - `attributes`\n        - `event`\n        - `log_level`\n        - `logger`\n        - `timestamp`\n        * Added property `timestamp` (string)\n        * Added property `log_level` (string)\n        * Added property `logger` (string)\n        * Added property `event` (string)\n        * Added property `attributes` (object)\n```\n\n----------------------------------------\n\nTITLE: PATCH /events/rules/{pbm_uuid}/ - 200 OK\nDESCRIPTION: Details the PATCH endpoint changes for event rules with content type and `group_obj` adjustments.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.8.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n##### `PATCH` /events/rules/&#123;pbm_uuid&#125;/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `group_obj` (object)\n\n        > Group Serializer\n\n        - Changed property `name` (string)\n```\n\n----------------------------------------\n\nTITLE: Updating Password Policy Request Body (POST /policies/password/)\nDESCRIPTION: Adds new boolean flags and integer thresholds to the request body for creating password policies, enabling checks against static rules, Have I Been Pwned (HIBP), and ZXCVBN password strength estimations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.11.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"check_static_rules\": true,\n  \"check_have_i_been_pwned\": true,\n  \"check_zxcvbn\": true,\n  \"hibp_allowed_count\": 0, \n  \"zxcvbn_score_threshold\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Updating name_id_policy for SAML Source Listing (GET /sources/saml/)\nDESCRIPTION: Updates the GET /sources/saml/ endpoint. The `name_id_policy` query parameter definition is changed (details not specified but likely related to enum values). In the 200 OK response, the `name_id_policy` property within each item in the `results` array reflects updated enum values (added 1.1 X509SubjectName, removed 2.0 X509SubjectName).\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET /sources/saml/?name_id_policy={updated_enum_values}\n```\n\nLANGUAGE: json\nCODE:\n```\n// 200 OK Response Body Change\n{\n  \"results\": [\n    {\n      \"name_id_policy\": \"enum(..., 'urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName')\", \n      // Removed enum: 'urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName'\n      // ... other properties\n    }\n    // ... other results\n  ]\n  // ... pagination properties\n}\n```\n\n----------------------------------------\n\nTITLE: GET /providers/saml/ Endpoint Changes\nDESCRIPTION: This details the changes to the GET /providers/saml/ endpoint by adding `authentication_flow` as a query parameter, changing the content type to application/json, and including the `authentication_flow` property. The `authentication_flow` specifies the flow used for authentication when accessed by unauthenticated users.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_12\n\nLANGUAGE: N/A\nCODE:\n```\nGET /providers/saml/\n###### Parameters:\n\nAdded: `authentication_flow` in `query`\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > SAMLProvider Serializer\n\n        - Added property `authentication_flow` (string)\n            > Flow used for authentication when the associated application is accessed by an un-authenticated user.\n```\n\n----------------------------------------\n\nTITLE: Styling Jellyfin SSO Button and Disclaimer (CSS)\nDESCRIPTION: Custom CSS code to be added in the Jellyfin Custom CSS section (Dashboard > General > Branding). This styles the SSO login button added via HTML and ensures the disclaimer container is properly displayed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/integrations/services/jellyfin/index.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\na.raised.emby-button {\n    padding:0.9em 1em;\n    color: inherit !important;\n}\n\n.disclaimerContainer{\n    display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Updates - GET /stages/prompt/prompts/ Return\nDESCRIPTION: Describes the changes to the return type of the `GET` `/stages/prompt/prompts/` API. Specifies the changed response code `200 OK` and content type as `application/json`.  It also details the modifications to the `results` property, including the `placeholder` and `type` within items.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.4.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Defining API Response Content Type and 'app' Property Enumeration\nDESCRIPTION: This snippet specifies the response content type as 'application/json' and details the 'app' property with its possible string values representing various Authentik system components. It provides a comprehensive list of recognized app identifiers and their descriptions, and includes support for an 'authentik.enterprise' enum value.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.5.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"application/json\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenSearch Security Role Mappings in YAML\nDESCRIPTION: A YAML configuration example for OpenSearch security role mappings. It maps the 'wazuh-admin' and 'admin' backend roles to the 'all_access' permission level.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/docs/style-guide.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nall_access:\nreserved: true\nhidden: false\nbackend_roles:\n    - \"wazuh-admin\"\n    - \"admin\"\nhosts: []\nusers: []\nand_backend_roles: []\ndescription: \"Maps admin to all_access\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Event Matcher Policy (Response Change)\nDESCRIPTION: Describes changes to the GET endpoint for retrieving objects referencing a specific event matcher policy. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nGET /policies/event_matcher/{policy_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: RAC Provider Property Changes - invalidation_flow modification\nDESCRIPTION: Changes to the RACProvider Serializer where the 'invalidation_flow' property was changed from a string to an object property. This affects multiple endpoints including connection tokens, endpoints, and transactional applications.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.10.md#_snippet_36\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"provider_obj\": {\n    \"invalidation_flow\": {} // New optional object property\n    // Previously was: \"invalidation_flow\": \"Flow used ending the session from a provider.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Action Button (HTML)\nDESCRIPTION: This snippet demonstrates how to use the `ak-action-button` component within an HTML context. The `.apiRequest` property is bound to a promise, which defines the action to be performed. The button's behavior is dictated by the promise's resolution or rejection.  Input: a promise. Output: A visual representation of the button state based on the promise.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/buttons/ActionButton/ak-action-button.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-action-button .apiRequest=${somePromise}\">Your message here</ak-action-button>\n```\n\n----------------------------------------\n\nTITLE: Updating Policy Binding (Response Change)\nDESCRIPTION: Details changes to the PUT endpoint for updating a specific policy binding. The 200 OK response content type is `application/json`, and the `user_obj` object within the response now has a changed `type` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPUT /policies/bindings/{policy_binding_uuid}/\n```\n\n----------------------------------------\n\nTITLE: Using EmptyState with Custom Icon and Primary Slot HTML\nDESCRIPTION: Shows how to use the `ak-empty-state` custom element in HTML. It sets a custom icon using the `icon` attribute and places content within the named `primary` slot. This assumes the custom element definition has been imported.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/EmptyState.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n\t<ak-empty-state icon=\"fa-eject\"\n\t    ><span slot=\"primary\">This would display in the \"primary\" slot</span></ak-empty-state\n\t>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage for Notification Property Mapping (Response Change)\nDESCRIPTION: Describes changes to the GET endpoint for retrieving objects referencing a specific notification property mapping. The 200 OK response content type is now `application/json`, and the response object list includes a changed `action` property.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nGET /propertymappings/notification/{pm_uuid}/used_by/\n```\n\n----------------------------------------\n\nTITLE: GET /core/user_consent/ API Change\nDESCRIPTION: This documents changes to the `GET` request for the `/core/user_consent/` endpoint.  It describes a change in the return type, specifically the properties within the `results` array, which is composed of `user` and `application` objects. The changes affect how user consent information is retrieved and presented through the API.  The content type is `application/json`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_59\n\n\n\n----------------------------------------\n\nTITLE: Describing GET /crypto/certificatekeypairs/ Parameters\nDESCRIPTION: This section describes the parameters that have changed for the `GET` `/crypto/certificatekeypairs/` endpoint.  It specifies that the `managed` and `name` parameters within the `query` have been changed. No other specific details about the nature of the changes are given.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2023/v2023.8.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Dummy Stage POST Endpoint Changes\nDESCRIPTION: This section outlines changes to the POST endpoint for /stages/dummy/. It focuses on adjustments within the request content type, specifically the `flow_set` array, and its associated properties within the stripped down flow serializer, alongside with the return type changes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_70\n\n\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown-Based Configuration Tabs with React and JavaScript\nDESCRIPTION: This code snippet demonstrates how to build a tabbed documentation interface in React by importing Markdown files and rendering them in TabItem components from the Docusaurus theme. It requires React, Docusaurus’s @theme/Tabs and @theme/TabItem for UI, and a project setup that allows direct Markdown import as React components. Tabs are defined for Standalone Nginx, Ingress, and Nginx Proxy Manager, each displaying the corresponding configuration template for forward authentication. Expected input includes imported Markdown docs; the output is an interactive documentation UI. Limitations: this approach relies on Docusaurus or a similar build environment that supports Markdown imports and JSX.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/add-secure-apps/providers/proxy/server_nginx.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport Placeholders from \"./__placeholders.md\";\nimport NginxStandalone from \"./_nginx_standalone.md\";\nimport NginxIngress from \"./_nginx_ingress.md\";\nimport NginxProxyManager from \"./_nginx_proxy_manager.md\";\n\n<Placeholders />\n\n<Tabs\n  defaultValue=\"standalone-nginx\"\n  values={[\n    {label: 'Standalone nginx', value: 'standalone-nginx'},\n    {label: 'Ingress', value: 'ingress'},\n    {label: 'Nginx Proxy Manager', value: 'proxy-manager'},\n  ]}>\n  <TabItem value=\"standalone-nginx\">\n    <NginxStandalone />\n  </TabItem>\n  <TabItem value=\"ingress\">\n    <NginxIngress />\n  </TabItem>\n  <TabItem value=\"proxy-manager\">\n    <NginxProxyManager />\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Using Expand Component in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the Expand component with the content. The content to be displayed is placed inside the ak-expand tag.  This example shows how to implement the default, collapsed state. The expected output is the content hidden by default.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Expand.docs.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ak-expand><p>Your primary content goes here</p></ak-expand>\n```\n\n----------------------------------------\n\nTITLE: Querying Duo Authenticator Stage\nDESCRIPTION: This describes the changes for `GET` requests to `/stages/authenticator/duo/`. The response code is `200 OK` and the content type is `application/json`. It highlights modifications to the `results` and `flow_set` properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n##### `GET` /stages/authenticator/duo/\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `results` (array)\n\n        Changed items (object): > AuthenticatorDuoStage Serializer\n\n        - Changed property `flow_set` (array)\n\n            Changed items (object): > Stripped down flow serializer\n\n            New optional properties:\n\n            - `cache_count`\n            - `policies`\n            - `stages`\n\n            * Deleted property `stages` (array)\n\n            * Deleted property `policies` (array)\n\n            * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for GET /stages/captcha/{stage_uuid}/\nDESCRIPTION: Defines the structure of the JSON response returned by the GET request to fetch captcha stage details, including additional URL fields and updated property descriptions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.12.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"js_url\": \"string\",\n  \"api_url\": \"string\",\n  \"public_key\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Duo Authenticator Stage\nDESCRIPTION: Describes the changes related to a `POST` request to `/stages/authenticator/duo/`. The request's content type is `application/json`, and the response is `201 Created` with `application/json` content. The core change involves the `flow_set` property, which is modified with additions of properties.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n##### `POST` /stages/authenticator/duo/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        New optional properties:\n\n        - `cache_count`\n        - `policies`\n        - `stages`\n\n        * Deleted property `stages` (array)\n\n        * Deleted property `policies` (array)\n\n        * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint - PUT /stages/dummy\nDESCRIPTION: This snippet defines the PUT method for the `/stages/dummy/{stage_uuid}/` endpoint.  The request content type is `application/json`, with properties changed in `flow_set`. The response is also of type JSON, including the same `flow_set` modifications. The operation targets the dummy stage type and requires a `stage_uuid` for identification.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2024/v2024.4.md#_snippet_51\n\nLANGUAGE: API Definition\nCODE:\n```\n##### `PUT` /stages/dummy/&#123;stage_uuid&#125;/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n    - Changed property `designation` (string)\n\n        > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n    - Changed property `denied_action` (string)\n\n        > Configure what should happen when a flow denies access to a user.\n\n    - Changed property `policy_engine_mode` (string)\n\n    - Changed property `layout` (string)\n\n###### Return Type:\n\nChanged response : **200 OK**\n\n- Changed content type : `application/json`\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        - Changed property `designation` (string)\n\n            > Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.\n\n        - Changed property `denied_action` (string)\n\n            > Configure what should happen when a flow denies access to a user.\n\n        - Changed property `policy_engine_mode` (string)\n\n        - Changed property `layout` (string)\n```\n\n----------------------------------------\n\nTITLE: Creating SMS Authenticator Stage\nDESCRIPTION: This section details changes to a `POST` request at `/stages/authenticator/sms/`.  It adds a `mapping` property and modifies the `flow_set`. The response code is `201 Created` and uses `application/json`.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/2022/v2022.10.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n##### `POST` /stages/authenticator/sms/\n\n###### Request:\n\nChanged content type : `application/json`\n\n- Added property `mapping` (string)\n\n    > Optionally modify the payload being sent to custom providers.\n\n- Changed property `flow_set` (array)\n\n    Changed items (object): > Stripped down flow serializer\n\n###### Return Type:\n\nChanged response : **201 Created**\n\n- Changed content type : `application/json`\n\n    - Added property `mapping` (string)\n\n        > Optionally modify the payload being sent to custom providers.\n\n    - Changed property `flow_set` (array)\n\n        Changed items (object): > Stripped down flow serializer\n\n        New optional properties:\n\n        - `cache_count`\n        - `policies`\n        - `stages`\n\n        * Deleted property `stages` (array)\n\n        * Deleted property `policies` (array)\n\n        * Deleted property `cache_count` (integer)\n```\n\n----------------------------------------\n\nTITLE: Controlling Auto-escaping (Django Template)\nDESCRIPTION: Defines a block where automatic HTML escaping behavior can be controlled. In this specific snippet, auto-escaping is turned `off` for the enclosed content, ensuring that raw characters like `<`, `>`, etc., are output directly rather than being converted to HTML entities.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/authentik/stages/email/templates/email/setup.txt#_snippet_1\n\nLANGUAGE: Django Template\nCODE:\n```\n{% autoescape off %}\nauthentik Test-Email\n{% blocktrans %}\nThis is a test email to inform you, that you've successfully configured authentik emails.\n{% endblocktrans %}\n\n-- \nPowered by goauthentik.io.\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Building Go Client for authentik Outpost\nDESCRIPTION: Command to build the Go client used by the Outpost to communicate with the backend authentik server. The generated files are stored in /gen-go-api in the repository root.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/api/making-schema-changes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake gen-client-go\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Using npm ci\nDESCRIPTION: This snippet executes 'npm ci' to install project dependencies exactly as specified in the package-lock.json, ensuring a clean and reproducible environment for development or deployment. It requires Node.js and npm to be installed and assumes a valid package-lock.json exists in the project root.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Marking Text for Translation (Django Template)\nDESCRIPTION: Designates a specific block of static text within the template as a string that can be translated into different languages. The content within this tag will be extracted by Django's internationalization utilities for localization.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/authentik/stages/email/templates/email/setup.txt#_snippet_2\n\nLANGUAGE: Django Template\nCODE:\n```\n{% blocktrans %}\nThis is a test email to inform you, that you've successfully configured authentik emails.\n{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Updating Project Version using Bumpversion (Shell)\nDESCRIPTION: Uses the `bumpversion` tool to increment the project's version number on the release branch. The `--new-version` flag specifies the exact target version (e.g., `2022.12.2`), `minor` indicates the part of the version being updated (though overridden by `--new-version`), and `--verbose` provides detailed output. This command typically updates version strings in configured files and creates a version commit and tag.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbumpversion --new-version 2022.12.2 minor --verbose\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies Using NPM Shell Commands\nDESCRIPTION: Commands to navigate into the web directory of the authentik project and install the frontend dependencies via npm ci. This ensures all necessary node packages are installed and locked for the current development environment, requiring Node.js and npm to be preinstalled.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/frontend-dev-environment.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd web\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Formatting Frontend Code using Make\nDESCRIPTION: Executes the `web` target in the Makefile. This command typically runs code formatters (like Prettier) and linters on the frontend codebase to ensure code style consistency.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/full-dev-environment.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmake web   # Formats the frontend code\n```\n\n----------------------------------------\n\nTITLE: Generating Schema in authentik\nDESCRIPTION: Command to generate a new schema file after changing a Serializer. This updates the schema.yml file in the root of the repository.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/api/making-schema-changes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gen-build\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component in TypeScript\nDESCRIPTION: Shows how to import the Divider component into a TypeScript file. This import statement is required before using the component in your application.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Divider.docs.mdx#_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport \"@goauthentik/elements/Divider.js\";\n```\n\n----------------------------------------\n\nTITLE: Access URL for Authentik Initial Setup\nDESCRIPTION: Advises accessing Authentik's initial setup page via a URL with a trailing slash to avoid 'Not Found' errors, where the default admin password can be set.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/install-config/install/kubernetes.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Default Info Label Demonstration in Storybook\nDESCRIPTION: Shows the default informational label with the story associated with the default label configuration. Used for visual testing and demonstration within Storybook.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Label.docs.mdx#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<Story of={LabelStories.DefaultStory} />\n```\n\n----------------------------------------\n\nTITLE: Import useBaseUrl hook from Docusaurus\nDESCRIPTION: This snippet imports the `useBaseUrl` hook from the `@docusaurus/useBaseUrl` package. This hook is used to generate URLs relative to the base URL of the Docusaurus site, ensuring that images and other assets are loaded correctly regardless of the site's deployment path.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/index.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n```\n\n----------------------------------------\n\nTITLE: Cloning authentik Repository Using Git Shell\nDESCRIPTION: This snippet shows the shell commands to clone the authentik repository from GitHub and navigate into its directory. It is a prerequisite for all subsequent development steps and requires Git to be installed.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/setup/frontend-dev-environment.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/goauthentik/authentik\ncd authentik\n```\n\n----------------------------------------\n\nTITLE: Success Label with Styled Content in Storybook\nDESCRIPTION: Displays a success style label that uses the PFColor enum for coloring. Content inside the label is slotted and can be styled independently, demonstrating versatility and styling options.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Label.docs.mdx#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<Story of={LabelStories.SuccessLabel} />\n```\n\n----------------------------------------\n\nTITLE: Generating API Diff using Make (Shell)\nDESCRIPTION: Executes the `gen-diff` target defined in the project's Makefile. This command generates a `diff.md` file containing detected API changes, which should be copied into the 'API Changes' section of the release notes.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake gen-diff\n```\n\n----------------------------------------\n\nTITLE: Upgrading Authentik with Docker Compose (Shell)\nDESCRIPTION: This snippet demonstrates how to upgrade an authentik installation managed by Docker Compose. It involves downloading the updated docker-compose.yml file using `wget` and then applying the changes by running `docker compose up -d` to recreate or update the containers. Requires `wget` and Docker Compose.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/releases/_template.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O docker-compose.yml https://goauthentik.io/version/xxxx.x/docker-compose.yml\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Displaying Authentik's Package Structure\nDESCRIPTION: A directory tree showing Authentik's main Django application structure, displaying the various packages and their purposes within the application architecture.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nauthentik\n├── admin - Administrative tasks and APIs, no models (Version updates, Metrics, system tasks)\n├── api - General API Configuration (Routes, Schema and general API utilities)\n├── blueprints - Handle managed models and their state.\n├── core - Core authentik functionality, central routes, core Models\n├── crypto - Cryptography, currently used to generate and hold Certificates and Private Keys\n├── enterprise - Enterprise features, which are source available but not open source\n├── events - Event Log, middleware and signals to generate signals\n├── flows - Flows, the FlowPlanner and the FlowExecutor, used for all flows for authentication, authorization, etc\n├── lib - Generic library of functions, few dependencies on other packages.\n├── outposts - Configure and deploy outposts on kubernetes and docker.\n├── policies - General PolicyEngine\n│   ├── dummy - A Dummy policy used for testing\n│   ├── event_matcher - Match events based on different criteria\n│   ├── expiry - Check when a user's password was last set\n│   ├── expression - Execute any arbitrary python code\n│   ├── password - Check a password against several rules\n│   └── reputation - Check the user's/client's reputation\n├── providers\n│   ├── ldap - Provide LDAP access to authentik users/groups using an outpost\n│   ├── oauth2 - OIDC-compliant OAuth2 provider\n│   ├── proxy - Provides an identity-aware proxy using an outpost\n│   ├── radius - Provides a RADIUS server that authenticates using flows\n│   ├── saml - SAML2 Provider\n│   └── scim - SCIM Provider\n├── recovery - Generate keys to use in case you lock yourself out\n├── root - Root django application, contains global settings and routes\n├── sources\n│   ├── ldap - Sync LDAP users from OpenLDAP or Active Directory into authentik\n│   ├── oauth - OAuth1 and OAuth2 Source\n│   ├── plex - Plex source\n│   └── saml - SAML2 Source\n├── stages\n│   ├── authenticator_duo - Configure a DUO authenticator\n│   ├── authenticator_static - Configure TOTP backup keys\n│   ├── authenticator_totp - Configure a TOTP authenticator\n│   ├── authenticator_validate - Validate any authenticator\n│   ├── authenticator_webauthn - Configure a WebAuthn / Passkeys authenticator\n│   ├── captcha - Make the user pass a captcha\n│   ├── consent - Let the user decide if they want to consent to an action\n│   ├── deny - Static deny, can be used with policies\n│   ├── dummy - Dummy stage to test\n│   ├── email - Send the user an email and block execution until they click the link\n│   ├── identification - Identify a user with any combination of fields\n│   ├── invitation - Invitation system to limit flows to certain users\n│   ├── password - Password authentication\n│   ├── prompt - Arbitrary prompts\n│   ├── user_delete - Delete the currently pending user\n│   ├── user_login - Login the currently pending user\n│   ├── user_logout - Logout the currently pending user\n│   └── user_write - Write any currently pending data to the user.\n└── tenants - Soft tennancy, configure defaults and branding per domain\n```\n\n----------------------------------------\n\nTITLE: Post-Release Security Announcement Discord Update Template (Markdown)\nDESCRIPTION: A template for updating the previous Discord announcement after a security fix is released. It is intended to be edited into the original announcement and includes links to the published GitHub Security Advisory and the GitHub Releases page containing the fixed versions.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/website/docs/developer-docs/releases/index.md#_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n[...existing announcement...]\n\nEdit:\n\nAdvisory for for CVE-2022-xxxxx has been published here https://github.com/goauthentik/authentik/security/advisories/GHSA-mjfw-54m5-fvjf\n\nThe fixed versions 2022.10.3 and 2022.11.3 are available here: https://github.com/goauthentik/authentik/releases\n```\n\n----------------------------------------\n\nTITLE: Warning Label with Icon Customization in Storybook\nDESCRIPTION: Illustrates how to configure a warning label with a Font Awesome icon specified via the icon attribute. The label is set to a compact form to distinguish visual differences. Useful for testing icon and style variations.\nSOURCE: https://github.com/goauthentik/authentik/blob/main/web/src/elements/stories/Label.docs.mdx#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<Story of={LabelStories.CompactWarningLabel} />\n```"
  }
]