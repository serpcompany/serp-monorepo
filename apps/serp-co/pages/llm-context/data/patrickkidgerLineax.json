[
  {
    "owner": "patrick-kidger",
    "repo": "lineax",
    "content": "TITLE: Solving Linear Least Squares with Rectangular Matrix in Lineax\nDESCRIPTION: Demonstrates how to solve a linear least squares problem with a rectangular matrix using Lineax. This example shows how to configure the solver to handle non-square matrices.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/least_squares.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport jax.random as jr\nimport lineax as lx\n\n\nvector = jr.normal(jr.PRNGKey(1), (3,))\n\nrectangular_matrix = jr.normal(jr.PRNGKey(0), (3, 4))\nrectangular_operator = lx.MatrixLinearOperator(rectangular_matrix)\nrectangular_solution = lx.linear_solve(\n    rectangular_operator, vector, solver=lx.AutoLinearSolver(well_posed=None)\n)\nprint(\"rectangular_solution: \", rectangular_solution.value)\n```\n\n----------------------------------------\n\nTITLE: Solving Quadratic Problem with Implicit Matrix\nDESCRIPTION: Example demonstrating solving a quadratic optimization problem without materializing a matrix explicitly. Uses automatic differentiation to compute gradients and conjugate gradient method for solving.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport jax\nimport lineax as lx\n\nkey = jax.random.PRNGKey(0)\ny = jax.random.normal(key, (10,))\n\ndef quadratic_fn(y, args):\n  return jax.numpy.sum((y - 1)**2)\n\ngradient_fn = jax.grad(quadratic_fn)\nhessian = lx.JacobianLinearOperator(gradient_fn, y, tags=lx.positive_semidefinite_tag)\nsolver = lx.CG(rtol=1e-6, atol=1e-6)\nout = lx.linear_solve(hessian, gradient_fn(y, args=None), solver)\nminimum = y - out.value\n```\n\n----------------------------------------\n\nTITLE: Solving Complex Linear Systems with Lineax in Python\nDESCRIPTION: This code demonstrates how to solve a linear system Ax=b where A is a complex-valued matrix and b is a complex-valued vector. It uses JAX's random functions to generate complex data, creates a MatrixLinearOperator from the matrix, and then solves the system using Lineax's linear_solve function.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/complex_solve.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport jax.numpy as jnp\nimport jax.random as jr\nimport lineax as lx\n\n\nmatrix = jr.normal(jr.PRNGKey(0), (3, 3), dtype=jnp.complex64)\nvector = jr.normal(jr.PRNGKey(1), (3,), dtype=jnp.complex64)\noperator = lx.MatrixLinearOperator(matrix)\nsolution = lx.linear_solve(operator, vector)\nprint(f\"A=\\n{matrix}\\nb={vector}\\nx={solution.value}\")\n```\n\n----------------------------------------\n\nTITLE: Solving Linear Systems with Lineax Iterative Solvers\nDESCRIPTION: Shows how to solve a linear system using Lineax's iterative solvers, specifically using the NormalCG solver with a Jacobian linear operator. The example defines a function, computes its Jacobian as an operator, and solves a linear system without explicit matrix representation.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/no_materialisation.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport jax.numpy as jnp\nimport lineax as lx\nfrom jaxtyping import Array, Float  # https://github.com/google/jaxtyping\n\n\ndef f(y: Float[Array, \"3\"], args) -> Float[Array, \"3\"]:\n    y0, y1, y2 = y\n    f0 = 5 * y0 + y1**2\n    f1 = y1 - y2 + 5\n    f2 = y0 / (1 + 5 * y2**2)\n    return jnp.stack([f0, f1, f2])\n\n\ny = jnp.array([1.0, 2.0, 3.0])\noperator = lx.JacobianLinearOperator(f, y, args=None)\nvector = f(y, args=None)\nsolver = lx.NormalCG(rtol=1e-6, atol=1e-6)\nsolution = lx.linear_solve(operator, vector, solver)\n```\n\n----------------------------------------\n\nTITLE: Solving Multiple Linear Systems with Lineax and JAX\nDESCRIPTION: Demonstrates how to use jax.vmap or equinox.filter_vmap to solve multiple systems of linear equations (AX = B) using Lineax's linear_solve function. This approach allows for efficient vectorization of the solving process across multiple right-hand sides.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmulti_linear_solve = eqx.filter_vmap(lx.linear_solve, in_axes=(None, 1))\n#  or    \nmulti_linear_solve = jax.vmap(lx.linear_solve, in_axes=(None, 1))\n```\n\n----------------------------------------\n\nTITLE: Solving Linear Least Squares with Rank-Deficient Matrix in Lineax\nDESCRIPTION: Shows how to solve a linear least squares problem with a rank-deficient matrix using Lineax. This example configures the solver to handle potentially ill-posed problems.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/least_squares.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndeficient_matrix = jr.normal(jr.PRNGKey(0), (3, 3)).at[0].set(0)\ndeficient_operator = lx.MatrixLinearOperator(deficient_matrix)\ndeficient_solution = lx.linear_solve(\n    deficient_operator, vector, solver=lx.AutoLinearSolver(well_posed=False)\n)\nprint(\"deficient_solution: \", deficient_solution.value)\n```\n\n----------------------------------------\n\nTITLE: Matrix-Free Quadratic Optimization\nDESCRIPTION: Example showing how to solve a quadratic optimization problem without materializing a matrix explicitly. Uses automatic differentiation to compute gradients and conjugate gradient solver.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport jax\nimport lineax as lx\n\nkey = jax.random.PRNGKey(0)\ny = jax.random.normal(key, (10,))\n\ndef quadratic_fn(y, args):\n  return jax.numpy.sum((y - 1)**2)\n\ngradient_fn = jax.grad(quadratic_fn)\nhessian = lx.JacobianLinearOperator(gradient_fn, y, tags=lx.positive_semidefinite_tag)\nsolver = lx.CG(rtol=1e-6, atol=1e-6)\nout = lx.linear_solve(hessian, gradient_fn(y, args=None), solver)\nminimum = y - out.value\n```\n\n----------------------------------------\n\nTITLE: Solving Least Squares with Matrix Operator\nDESCRIPTION: Example showing how to solve a least squares problem using an explicit matrix operator in Lineax. Creates random matrix and vector data, then solves the system using QR decomposition.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport jax.random as jr\nimport lineax as lx\n\nmatrix_key, vector_key = jr.split(jr.PRNGKey(0))\nmatrix = jr.normal(matrix_key, (10, 8))\nvector = jr.normal(vector_key, (10,))\noperator = lx.MatrixLinearOperator(matrix)\nsolution = lx.linear_solve(operator, vector, solver=lx.QR())\n```\n\n----------------------------------------\n\nTITLE: Solving Least Squares with Matrix Operator\nDESCRIPTION: Example demonstrating how to solve a least squares problem using an explicit matrix operator in Lineax. Creates random matrix and vector inputs, and solves using QR decomposition.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport jax.random as jr\nimport lineax as lx\n\nmatrix_key, vector_key = jr.split(jr.PRNGKey(0))\nmatrix = jr.normal(matrix_key, (10, 8))\nvector = jr.normal(vector_key, (10,))\noperator = lx.MatrixLinearOperator(matrix)\nsolution = lx.linear_solve(operator, vector, solver=lx.QR())\n```\n\n----------------------------------------\n\nTITLE: Comparing Lineax and JAX Linear Least Squares Solvers (Gradient Computation)\nDESCRIPTION: Compares the performance and correctness of Lineax and JAX's built-in least squares solvers for gradient computation. This example shows Lineax's advantages in both speed and numerical stability.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/least_squares.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@jax.jit\n@jax.grad\ndef grad_jax(matrix):\n    out, *_ = jnp.linalg.lstsq(matrix, vector)\n    return out.sum()\n\n\n@jax.jit\n@jax.grad\ndef grad_lineax(matrix):\n    operator = lx.MatrixLinearOperator(matrix)\n    solution = lx.linear_solve(operator, vector, lx.SVD())\n    return solution.value.sum()\n\n\ngradients_jax = grad_jax(matrix)\ngradients_lineax = grad_lineax(matrix)\nwith np.printoptions(threshold=10, edgeitems=2):\n    print(\"JAX gradients:\", gradients_jax)\n    print(\"Lineax gradients:\", gradients_lineax)\nprint()\ntime_jax = timeit.repeat(lambda: grad_jax(matrix), number=1, repeat=10)\ntime_lineax = timeit.repeat(lambda: grad_lineax(matrix), number=1, repeat=10)\nprint(\"JAX time:\", min(time_jax))\nprint(\"Lineax time:\", min(time_lineax))\n\n@jax.jit\n@jax.grad\ndef grad_jax(matrix):\n    out, *_ = jnp.linalg.lstsq(matrix, jnp.arange(3.0))\n    return out.sum()\n\n\n@jax.jit\n@jax.grad\ndef grad_lineax(matrix):\n    operator = lx.MatrixLinearOperator(matrix)\n    solution = lx.linear_solve(operator, jnp.arange(3.0), lx.SVD())\n    return solution.value.sum()\n\n\nprint(\"JAX gradients:\", grad_jax(jnp.eye(3)))\nprint(\"Lineax gradients:\", grad_lineax(jnp.eye(3)))\n```\n\n----------------------------------------\n\nTITLE: Comparing Lineax and JAX Linear Least Squares Solvers (Forward Pass)\nDESCRIPTION: Compares the performance of Lineax and JAX's built-in least squares solvers for the forward pass. This example demonstrates Lineax's speed advantage in handling rectangular matrices.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/least_squares.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport timeit\n\nimport jax\nimport jax.numpy as jnp\nimport numpy as np\n\n\nmatrix = jr.normal(jr.PRNGKey(0), (500, 200))\nvector = jr.normal(jr.PRNGKey(1), (500,))\n\n\n@jax.jit\ndef solve_jax(matrix, vector):\n    out, *_ = jnp.linalg.lstsq(matrix, vector)\n    return out\n\n\n@jax.jit\ndef solve_lineax(matrix, vector):\n    operator = lx.MatrixLinearOperator(matrix)\n    solver = lx.QR()  # or lx.AutoLinearSolver(well_posed=None)\n    solution = lx.linear_solve(operator, vector, solver)\n    return solution.value\n\n\nsolution_jax = solve_jax(matrix, vector)\nsolution_lineax = solve_lineax(matrix, vector)\nwith np.printoptions(threshold=10):\n    print(\"JAX solution:\", solution_jax)\n    print(\"Lineax solution:\", solution_lineax)\nprint()\ntime_jax = timeit.repeat(lambda: solve_jax(matrix, vector), number=1, repeat=10)\ntime_lineax = timeit.repeat(lambda: solve_lineax(matrix, vector), number=1, repeat=10)\nprint(\"JAX time:\", min(time_jax))\nprint(\"Lineax time:\", min(time_lineax))\n```\n\n----------------------------------------\n\nTITLE: Solving Linear System using Lineax and JAX\nDESCRIPTION: Solves a linear system Ax = b using Lineax library. Creates a random 3x3 matrix A and random vector b using JAX's random number generator, then constructs a MatrixLinearOperator and solves the system using linear_solve function.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/classical_solve.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport jax.random as jr\nimport lineax as lx\n\n\nmatrix = jr.normal(jr.PRNGKey(0), (3, 3))\nvector = jr.normal(jr.PRNGKey(1), (3,))\noperator = lx.MatrixLinearOperator(matrix)\nsolution = lx.linear_solve(operator, vector)\nprint(f\"A=\\n{matrix}\\nb={vector}\\nx={solution.value}\")\n```\n\n----------------------------------------\n\nTITLE: Computing Jacobian-Vector Product with JAX\nDESCRIPTION: Demonstrates how to compute a Jacobian-vector product without instantiating the full Jacobian matrix using JAX's jvp function. This approach is useful in Newton's method when only the action of a matrix on a vector is needed.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/no_materialisation.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nf = ...\ny = ...\n\ndef F(x):\n    \"\"\"Computes (df/dy) @ x.\"\"\"\n    _, out = jax.jvp(f, (y,), (x,))\n    return out\n```\n\n----------------------------------------\n\nTITLE: Applying a Positive Semidefinite Tag to a Matrix Linear Operator in Python\nDESCRIPTION: Demonstrates how to tag a matrix as positive semidefinite and then solve a linear system. The tag allows Lineax to dispatch to a Cholesky solver for maximum efficiency.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/tags.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Some rank-2 JAX array.\nmatrix = ...\n# Some rank-1 JAX array.\nvector = ...\n\n# Declare that this matrix is positive semidefinite.\noperator = lx.MatrixLinearOperator(matrix, lx.positive_semidefinite_tag)\n\n# This tag is used to dispatch to a maximally-efficient linear solver.\n# In this case, a Cholesky solver is used:\nsolution = lx.linear_solve(operator, vector)\n\n# Whether operators are tagged can be checked:\nassert lx.is_positive_semidefinite(operator)\n```\n\n----------------------------------------\n\nTITLE: Abstract Linear Operator Base Class\nDESCRIPTION: Base class defining the interface for all linear operators with core methods for matrix-vector operations, matrix conversion, transposition, and structure information.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/operators.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AbstractLinearOperator:\n    def mv(self)\n    def as_matrix(self)\n    def transpose(self)\n    def in_structure(self)\n    def out_structure(self)\n    def in_size(self)\n    def out_size(self)\n```\n\n----------------------------------------\n\nTITLE: Solving Tridiagonal Linear System\nDESCRIPTION: Shows how to solve a linear system using the tridiagonal operator with automatic solver dispatch\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/structured_matrices.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvector = jnp.array([1.0, -0.5, 2.0, 0.8])\n# Will automatically dispatch to a tridiagonal solver.\nsolution = lx.linear_solve(operator, vector)\n```\n\n----------------------------------------\n\nTITLE: Matrix Linear Operator Implementation\nDESCRIPTION: Linear operator that directly stores and operates on a matrix A for linear systems.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/operators.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MatrixLinearOperator:\n    def __init__(self)\n```\n\n----------------------------------------\n\nTITLE: Creating Tridiagonal Linear Operator in Python\nDESCRIPTION: Demonstrates how to create a tridiagonal linear operator using diagonal, lower diagonal, and upper diagonal arrays with Lineax library\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/structured_matrices.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport jax.numpy as jnp\nimport jax.random as jr\nimport lineax as lx\n\n\ndiag = jnp.array([4.0, -0.5, 7.0, 1.0])\nlower_diag = jnp.array([1.0, 3.0, -0.7])\nupper_diag = jnp.array([2.0, -1.0, -5.0])\n\noperator = lx.TridiagonalLinearOperator(diag, lower_diag, upper_diag)\nprint(operator.as_matrix())\n```\n\n----------------------------------------\n\nTITLE: Creating Positive Definite Matrix Operator\nDESCRIPTION: Shows how to create a positive definite matrix operator using matrix multiplication\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/structured_matrices.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmatrix = jr.normal(jr.PRNGKey(0), (4, 4))\noperator = lx.MatrixLinearOperator(matrix.T @ matrix)\n```\n\n----------------------------------------\n\nTITLE: Initializing Linear Operators in Lineax\nDESCRIPTION: Sets up different types of linear operators including sparse, tridiagonal, and identity operators using JAX and Lineax. Demonstrates initialization with matrices and random values.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/operators.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport jax\nimport jax.numpy as jnp\nimport jax.random as jr\nimport lineax as lx\nimport numpy as np\n\n\nnp.set_printoptions(precision=3)\n\nmatrix = jnp.zeros((5, 5))\nmatrix = matrix.at[0, 4].set(3)  # top left corner\nsparse_operator = lx.MatrixLinearOperator(matrix)\n\nkey0, key1, key = jr.split(jr.PRNGKey(0), 3)\ndiag = jr.normal(key0, (5,))\nlower_diag = jr.normal(key0, (4,))\nupper_diag = jr.normal(key0, (4,))\ntridiag_operator = lx.TridiagonalLinearOperator(diag, lower_diag, upper_diag)\n\nidentity_operator = lx.IdentityLinearOperator(jax.ShapeDtypeStruct((5,), jnp.float32))\n```\n\n----------------------------------------\n\nTITLE: Checking Built-in Properties of Special Linear Operators in Python\nDESCRIPTION: Demonstrates that some specialized linear operators have inherent properties without needing explicit tags, such as DiagonalLinearOperator being symmetric and IdentityLinearOperator being positive semidefinite.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/tags.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlx.is_symmetric(lx.DiagonalLinearOperator(...))  # True\nlx.is_positive_semidefinite(lx.IdentityLinearOperator(...))  # True\n```\n\n----------------------------------------\n\nTITLE: Diagonal Linear Operator Implementation\nDESCRIPTION: Efficient implementation for diagonal matrices that only stores the diagonal elements.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/operators.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass DiagonalLinearOperator:\n    def __init__(self)\n```\n\n----------------------------------------\n\nTITLE: Tridiagonal Linear Operator Implementation\nDESCRIPTION: Specialized operator for tridiagonal matrices with optimized storage and operations.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/operators.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TridiagonalLinearOperator:\n    def __init__(self)\n```\n\n----------------------------------------\n\nTITLE: Applying a Single Tag to a Linear Operator in Python\nDESCRIPTION: Shows how to add a symmetric tag to a matrix linear operator. This informs solvers that the matrix has the property that A = A^T.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/tags.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noperator = lx.MatrixLinearOperator(matrix, lx.symmetric_tag)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Specific Solver Usage\nDESCRIPTION: Shows how to manually specify a particular solver type for linear system solution\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/structured_matrices.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsolution = lx.linear_solve(operator, vector, solver=lx.Tridiagonal())\n```\n\n----------------------------------------\n\nTITLE: Converting Linear Operator to Matrix\nDESCRIPTION: Shows how to materialize a composed operator into a matrix and create a new matrix linear operator.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/operators.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\noperator_fully_materialised = lx.MatrixLinearOperator(operator.as_matrix())\neqx.tree_pprint(operator_fully_materialised, short_arrays=False)\n```\n\n----------------------------------------\n\nTITLE: Warning about Incorrect Tagging in Python\nDESCRIPTION: Illustrates the danger of incorrectly tagging a matrix. The example shows that Lineax only checks the tag, not the actual matrix properties, which can lead to incorrect solutions if tags are misapplied.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/tags.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Not a positive semidefinite matrix\nmatrix = jax.numpy.array([[1, 2], [3, 4]])\n\noperator = lx.MatrixLinearOperator(matrix, lx.positive_semidefinite_tag)\nlx.is_positive_semidefinite(operator)  # True\nlx.linear_solve(operator, vector)  # Returns the wrong solution!\n```\n\n----------------------------------------\n\nTITLE: Linear Operator Addition in Lineax\nDESCRIPTION: Demonstrates adding sparse and tridiagonal operators together and converting the result to a matrix.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/operators.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint((sparse_operator + tridiag_operator).as_matrix())\n```\n\n----------------------------------------\n\nTITLE: Function Linear Operator Implementation\nDESCRIPTION: Memory-efficient operator that uses a function F(x) = Ax instead of storing the full matrix.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/operators.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass FunctionLinearOperator:\n    def __init__(self)\n```\n\n----------------------------------------\n\nTITLE: Jacobian Linear Operator Implementation\nDESCRIPTION: Linear operator specifically designed for Jacobian matrices.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/operators.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass JacobianLinearOperator:\n    def __init__(self)\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Tags to a Linear Operator in Python\nDESCRIPTION: Demonstrates how to apply multiple tags simultaneously to a linear operator by providing them as a tuple.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/tags.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noperator = lx.MatrixLinearOperator(matrix, (lx.symmetric_tag, lx.unit_diagonal_tag))\n```\n\n----------------------------------------\n\nTITLE: Using Matrix Tags for Optimization\nDESCRIPTION: Shows how to use tags to indicate matrix properties for solver optimization\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/structured_matrices.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\noperator = lx.MatrixLinearOperator(matrix.T @ matrix, lx.positive_semidefinite_tag)\nsolution2 = lx.linear_solve(operator, vector)\nprint(default_solver.select_solver(operator))\n```\n\n----------------------------------------\n\nTITLE: Linear Operator Composition\nDESCRIPTION: Demonstrates matrix multiplication between tridiagonal and sparse operators.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/operators.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint((tridiag_operator @ sparse_operator).as_matrix())\n```\n\n----------------------------------------\n\nTITLE: Comparing Solution Results\nDESCRIPTION: Demonstrates comparing solutions from different solver approaches\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/structured_matrices.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(solution.value)\nprint(solution2.value)\n```\n\n----------------------------------------\n\nTITLE: PyTree Linear Operator Implementation\nDESCRIPTION: Linear operator implementation that works with PyTree structures.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/operators.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass PyTreeLinearOperator:\n    def __init__(self)\n```\n\n----------------------------------------\n\nTITLE: Linear Operator Subtraction with Identity\nDESCRIPTION: Shows subtraction between a tridiagonal operator and a scaled identity operator.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/operators.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint((tridiag_operator - 100 * identity_operator).as_matrix())\n```\n\n----------------------------------------\n\nTITLE: Using TaggedLinearOperator to Wrap Existing Operators in Python\nDESCRIPTION: Shows how to take an existing linear operator and wrap it with TaggedLinearOperator to apply tags, particularly useful for operators that don't directly support a tags argument.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/tags.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\noperator = lx.MatrixLinearOperator(...)\nsymmetric_operator = operator + operator.T\nlx.is_symmetric(symmetric_operator)  # False\nsymmetric_operator = lx.TaggedLinearOperator(symmetric_operator, lx.symmetric_tag)\nlx.is_symmetric(symmetric_operator)  # True\n```\n\n----------------------------------------\n\nTITLE: Linear Operator Transposition\nDESCRIPTION: Shows how to transpose a sparse operator and convert it to a matrix.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/operators.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(sparse_operator.transpose().as_matrix())  # or sparse_operator.T will work\n```\n\n----------------------------------------\n\nTITLE: Solving with Standard Solver\nDESCRIPTION: Demonstrates solving a system without specifying matrix structure\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/structured_matrices.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsolution = lx.linear_solve(operator, vector)\nprint(default_solver.select_solver(operator))\n```\n\n----------------------------------------\n\nTITLE: Complex Linear Operator Composition\nDESCRIPTION: Creates complex compositions of Jacobian, Function, and Identity operators with custom mathematical functions.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/operators.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom jaxtyping import Array, Float  # https://github.com/google/jaxtyping\n\n\ndef f(y: Float[Array, \"3\"], args) -> Float[Array, \"3\"]:\n    y0, y1, y2 = y\n    f0 = 5 * y0 + y1**2\n    f1 = y1 - y2 + 5\n    f2 = y0 / (1 + 5 * y2**2)\n    return jnp.stack([f0, f1, f2])\n\n\ndef g(y: Float[Array, \"3\"]) -> Float[Array, \"3\"]:\n    # Must be linear!\n    y0, y1, y2 = y\n    f0 = y0 - y2\n    f1 = 0.0\n    f2 = 5 * y1\n    return jnp.stack([f0, f1, f2])\n\n\ny = jnp.array([1.0, 2.0, 3.0])\nin_structure = jax.eval_shape(lambda: y)\njac_operator = lx.JacobianLinearOperator(f, y, args=None)\nfn_operator = lx.FunctionLinearOperator(g, in_structure)\nidentity_operator = lx.IdentityLinearOperator(in_structure)\n\noperator = jac_operator @ fn_operator + 0.9 * identity_operator\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported Matrix Types\nDESCRIPTION: Example of attempting to use a tridiagonal solver with an incompatible matrix type\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/structured_matrices.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnot_tridiagonal_matrix = jr.normal(jr.PRNGKey(0), (4, 4))\nnot_tridiagonal_operator = lx.MatrixLinearOperator(not_tridiagonal_matrix)\nsolution = lx.linear_solve(not_tridiagonal_operator, vector, solver=lx.Tridiagonal())\n```\n\n----------------------------------------\n\nTITLE: Identity Linear Operator Implementation\nDESCRIPTION: Special case operator representing the identity matrix.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/operators.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass IdentityLinearOperator:\n    def __init__(self)\n```\n\n----------------------------------------\n\nTITLE: Tagged Linear Operator Implementation\nDESCRIPTION: Linear operator that supports tagging for additional metadata or identification.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/operators.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass TaggedLinearOperator:\n    def __init__(self)\n```\n\n----------------------------------------\n\nTITLE: Checking Selected Solver Type\nDESCRIPTION: Demonstrates how to check which solver is being used for a given operator\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/structured_matrices.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndefault_solver = lx.AutoLinearSolver(well_posed=True)\nprint(default_solver.select_solver(operator))\n```\n\n----------------------------------------\n\nTITLE: Inspecting Linear Operator Structure\nDESCRIPTION: Uses Equinox to pretty print the structure of a composed linear operator.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/examples/operators.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport equinox as eqx  # https://github.com/patrick-kidger/equinox\n\n\ntruncate_leaf = lambda x: x in (jac_operator, fn_operator, identity_operator)\neqx.tree_pprint(operator, truncate_leaf=truncate_leaf)\n```\n\n----------------------------------------\n\nTITLE: Solution class import path\nDESCRIPTION: Import path for the Solution class in the lineax package.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/solution.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: lineax.Solution\n    options:\n        members: []\n```\n\n----------------------------------------\n\nTITLE: Installing Lineax via pip\nDESCRIPTION: Command to install Lineax package using pip package manager. Requires Python 3.10+, JAX 0.4.38+, and Equinox 0.11.10+.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install lineax\n```\n\n----------------------------------------\n\nTITLE: Installing Lineax via pip\nDESCRIPTION: Installation command for the Lineax library. Requires Python 3.10+, JAX 0.4.38+, and Equinox 0.11.10+.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install lineax\n```\n\n----------------------------------------\n\nTITLE: Running lineax tests with Python module command\nDESCRIPTION: Shows the correct command for running tests to avoid JAX out-of-memory errors. Tests should be run as Python modules rather than directly with pytest.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m tests\n```\n\n----------------------------------------\n\nTITLE: Installing Lineax in Development Mode\nDESCRIPTION: Instructions for cloning and installing Lineax project in development mode using pip.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username-here/lineax.git\ncd lineax\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running Lineax Tests\nDESCRIPTION: Commands to install test dependencies and run the test suite.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r tests/requirements.txt\npython -m tests\n```\n\n----------------------------------------\n\nTITLE: Academic Citation in BibTeX Format\nDESCRIPTION: BibTeX citation entry for referencing the Lineax library in academic work, published in AI for science workshop at NeurIPS 2023.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{lineax2023,\n    title={Lineax: unified linear solves and linear least-squares in JAX and Equinox},\n    author={Jason Rader and Terry Lyons and Patrick Kidger},\n    journal={\n        AI for science workshop at Neural Information Processing Systems 2023,\n        arXiv:2311.17283\n    },\n    year={2023},\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Pre-commit Hooks\nDESCRIPTION: Commands to install and configure pre-commit hooks for code formatting with Black and linting with Ruff.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Locally\nDESCRIPTION: Commands to install documentation dependencies and serve the documentation locally using MkDocs.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -r docs/requirements.txt\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: RESULTS import path\nDESCRIPTION: Import path for the RESULTS constants/enums in the lineax package.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/docs/api/solution.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n::: lineax.RESULTS\n    options:\n        members: []\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork\nDESCRIPTION: Git command to push local changes to the forked repository.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Restarting Documentation Server\nDESCRIPTION: Command to restart the MkDocs documentation server after initial build.\nSOURCE: https://github.com/patrick-kidger/lineax/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```"
  }
]