[
  {
    "owner": "mattermost",
    "repo": "docs",
    "content": "TITLE: SMTP Connection Security - config.json Path\nDESCRIPTION: This snippet shows the path in `config.json` used to set the SMTP connection security. Options are: \"Not specified\", \"TLS\", or \"STARTTLS\".\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n``.EmailSettings.ConnectionSecurity``\n```\n\n----------------------------------------\n\nTITLE: Setting network binding capability for Mattermost binary (Shell)\nDESCRIPTION: This command sets the `CAP_NET_BIND_SERVICE` capability for the Mattermost binary. This allows the binary to bind to ports lower than 1024, such as port 80 or 443, if TLS is set up on the Mattermost server. It requires `sudo` for elevated privileges and the `setcap` utility.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/upgrading-mattermost-server.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo setcap cap_net_bind_service=+ep ./mattermost/bin/mattermost\n```\n\n----------------------------------------\n\nTITLE: Running Mattermost Preview Image\nDESCRIPTION: Runs the Mattermost preview image using Docker, publishing ports 8065 and 8443 for HTTP and HTTPS access, respectively. This creates a local, self-contained Mattermost instance for evaluation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --name mattermost-preview -d --publish 8065:8065 --publish 8443:8443 mattermost/mattermost-preview\n```\n\n----------------------------------------\n\nTITLE: Configure NGINX with SSL, HTTP/2 and improved security\nDESCRIPTION: This NGINX configuration snippet enhances the previous configuration by adding SSL/TLS support using Let's Encrypt certificates, enabling HTTP/2, configuring a cache, and setting more secure SSL parameters.  It also sets up a redirect from HTTP to HTTPS.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nupstream backend {\n    server {ip}:8065;\n   keepalive 32;\n    }\n\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;\n\nserver {\n    server_name mattermost.example.com;\n\n    location ~ /api/v[0-9]+/(users/)?websocket$ {\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        client_max_body_size 50M;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60s;\n        send_timeout 300s;\n        lingering_timeout 5s;\n        proxy_connect_timeout 90s;\n        proxy_send_timeout 300s;\n        proxy_read_timeout 90s;\n        proxy_http_version 1.1;\n        proxy_pass http://backend;\n    }\n\n    location / {\n        client_max_body_size 50M;\n        proxy_set_header Connection \"\";\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        proxy_read_timeout 600s;\n        proxy_http_version 1.1;\n        proxy_pass http://backend;\n    }\n\n    listen 443 ssl http2; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/mattermost.example.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/mattermost.example.com/privkey.pem; # managed by Certbot\n    # include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    ssl_session_timeout 1d;\n\n    # Enable TLS versions (TLSv1.3 is required upcoming HTTP/3 QUIC).\n    ssl_protocols TLSv1.2 TLSv1.3;\n\n    # Enable TLSv1.3's 0-RTT. Use $ssl_early_data when reverse proxying to\n    # prevent replay attacks.\n    #\n    # @see: https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_early_data\n    ssl_early_data on;\n\n    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:50m;\n    # HSTS (ngx_http_headers_module is required) (15768000 seconds = six months)\n    add_header Strict-Transport-Security max-age=15768000;\n    # OCSP Stapling ---\n    # fetch OCSP records from URL in ssl_certificate and cache them\n    ssl_stapling on;\n    ssl_stapling_verify on;\n}\n\n\nserver {\n    if ($host = mattermost.example.com) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n\n\n    listen 80 default_server;\n    server_name mattermost.example.com;\n    return 404; # managed by Certbot\n\n}\n```\n\n----------------------------------------\n\nTITLE: Require Plugin Signature Configuration\nDESCRIPTION: This setting determines whether plugin signature validation is enforced.  When enabled, only plugins with valid signatures can be installed or run. The configuration can be managed via the System Console, `config.json` file (PluginSettings.RequirePluginSignature), or the `MM_PLUGINSETTINGS_REQUIREPLUGINSIGNATURE` environment variable.  Available only for self-hosted instances.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- **true**: **(Default)** Enables plugin signature validation for managed and unmanaged plugins.\n- **false**: Disables plugin signature validation for managed and unmanaged plugins.\n```\n\n----------------------------------------\n\nTITLE: Configure NGINX upstream and server blocks\nDESCRIPTION: This NGINX configuration snippet defines an upstream backend for Mattermost and configures the server block to handle HTTP traffic, proxying requests to the Mattermost backend. It sets various proxy headers and timeouts to ensure proper communication between NGINX and Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nupstream backend {\n    server {ip}:8065;\n    keepalive 32;\n    }\n\nserver {\n    listen 80 default_server;\n    server_name mattermost.example.com;\n\n    location ~ /api/v[0-9]+/(users/)?websocket$ {\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        client_max_body_size 50M;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60s;\n        send_timeout 300s;\n        lingering_timeout 5s;\n        proxy_connect_timeout 90s;\n        proxy_send_timeout 300s;\n        proxy_read_timeout 90s;\n        proxy_pass http://backend;\n    }\n\n    location / {\n        client_max_body_size 50M;\n        proxy_set_header Connection \"\";\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        proxy_read_timeout 600s;\n        proxy_http_version 1.1;\n        proxy_pass http://backend;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grant Specific MySQL Privileges\nDESCRIPTION: This snippet grants specific MySQL privileges to the user 'mmuser' on the 'mattermost' database. These privileges include ALTER, CREATE, DELETE, DROP, INDEX, INSERT, SELECT, UPDATE, and REFERENCES. It is used when you need more security and don't want to grant all privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> GRANT ALTER, CREATE, DELETE, DROP, INDEX, INSERT, SELECT, UPDATE, REFERENCES ON mattermost.* TO 'mmuser'@'%';\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON Setting - Session Length SSO\nDESCRIPTION: Defines the session length in hours for users authenticated via Single Sign-On (SSO) methods like SAML, GitLab, or OAuth 2.0. The default value is 720 hours. This setting determines how long a user's session remains active after they last entered their SSO credentials.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_95\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.SessionLengthSSOInHours: 720,\"\n```\n\n----------------------------------------\n\nTITLE: Configure Ingress Annotations for Mattermost on AKS\nDESCRIPTION: This YAML snippet configures Ingress annotations specifically tailored for Azure Application Gateway Ingress Controller (AGIC). It ensures that the Ingress resource is managed by AGIC and enforces SSL redirection for secure communication to the Mattermost instance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s-aks.rst#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes.io/ingress.class: azure/application-gateway\nappgw.ingress.kubernetes.io/ssl-redirect: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Replication for OpenSearch Indices using Shell\nDESCRIPTION: This command stops replication for specific OpenSearch indices (channels, files, users). It uses curl to send an HTTP POST request to the '_stop' endpoint of the replication plugin, requiring authentication.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/channels/_stop?pretty' -d '{}'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/files/_stop?pretty' -d '{}'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/users/_stop?pretty' -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Updating Nginx Websocket Proxy Configuration\nDESCRIPTION: This snippet describes how to update the Nginx configuration to correctly handle websocket connections for Mattermost after upgrading. It involves modifying the regular expression used in the `location` block for websocket connections. This change ensures compatibility with newer versions of the Mattermost API.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_63\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ /api/v[0-9]+/(users/)?websocket$ {\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Message Restrictions\nDESCRIPTION: This snippet explains how to configure restrictions on direct messages in Mattermost. It shows the system configuration path, config.json setting, and environment variable to control whether users can DM anyone on the server or only team members. Options are \"any\" for any user on the server and \"team\" for any member of the team.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n``TeamSettings`` > ``RestrictDirectMessage``\n```\n\n----------------------------------------\n\nTITLE: Modify Posts Table Columns (MySQL)\nDESCRIPTION: This SQL snippet modifies the `FileIds` and `Props` columns in the `Posts` table. `FileIds` is modified to `text` and `Props` is modified to `JSON`. These changes are part of the v6.0 database schema migrations. Combining the queries limits the time taken to that of a single query of that type.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE Posts MODIFY COLUMN FileIds text, MODIFY COLUMN Props JSON;\n```\n\n----------------------------------------\n\nTITLE: Adding a new column to the reactions table - PostgreSQL\nDESCRIPTION: This SQL statement adds a new column `channelid` to the `reactions` table if it doesn't already exist. The column is of type `varchar(26)` and is set to `NOT NULL` with a default value of an empty string. This statement is intended to be run before upgrading to Mattermost v7.1. Adding `IF NOT EXISTS` prevents errors if the column already exists.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/prepare-to-upgrade-mattermost.rst#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE reactions ADD COLUMN IF NOT EXISTS channelid varchar(26) NOT NULL DEFAULT '';\n```\n\n----------------------------------------\n\nTITLE: Verifying Mattermost Proxy Setup\nDESCRIPTION: This uses the curl command to check that the proxy setup works by ensuring you can see the HTML for the Mattermost signup page.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://localhost\n```\n\n----------------------------------------\n\nTITLE: Create MySQL User and Database\nDESCRIPTION: This snippet creates a MySQL user named 'mmuser', a database named 'mattermost', and grants the user all privileges on the database. The user is identified by a password that should be changed to a more secure value. It is crucial for setting up the database before installing Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmysql> create user 'mmuser'@'%' identified by 'mmuser-password';\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql> create database mattermost;\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql> grant all privileges on mattermost.* to 'mmuser'@'%';\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache2 Virtual Host for Mattermost\nDESCRIPTION: This code snippet configures an Apache2 virtual host to act as a reverse proxy for a Mattermost server. It sets up the ServerName, ServerAdmin, and enables ProxyPreserveHost. It also configures WebSocket proxying using RewriteEngine and RewriteRule directives.  The code also includes Location directives to reverse proxy HTTP requests to the Mattermost server running on localhost:8065. It depends on the modules mod_rewrite, mod_proxy, mod_proxy_http, and mod_proxy_wstunnel.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/config-proxy-apache2.rst#_snippet_0\n\nLANGUAGE: apacheconf\nCODE:\n```\n<VirtualHost *:80>\n  # If you're not using a subdomain you may need to set a ServerAlias to:\n  # ServerAlias www.mydomain.com\n  ServerName mysubdomain.mydomain.com\n  ServerAdmin hostmaster@mydomain.com\n  ProxyPreserveHost On\n\n  # Set web sockets\n  RewriteEngine On\n  RewriteCond %{REQUEST_URI} /api/v[0-9]+/(users/)?websocket [NC]\n  RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC,OR]\n  RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC]\n  RewriteRule .* ws://127.0.0.1:8065%{REQUEST_URI} [P,QSA,L]\n\n  <Location />\n    Require all granted\n    ProxyPass http://127.0.0.1:8065/\n    ProxyPassReverse http://127.0.0.1:8065/\n    ProxyPassReverseCookieDomain 127.0.0.1 mysubdomain.mydomain.com\n  </Location>\n\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Configuration Defaults via Environment Variable\nDESCRIPTION: This snippet demonstrates how to load custom configuration defaults using the MM_CUSTOM_DEFAULTS_PATH environment variable. This variable should point to a JSON file containing the custom configuration defaults. This configuration applies only if the values are not already present in the current server configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-variables.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nMM_CUSTOM_DEFAULTS_PATH=custom.json\n```\n\n----------------------------------------\n\nTITLE: Creating Mattermost Database\nDESCRIPTION: This SQL snippet creates a database named \"mattermost\" with UTF8 encoding and a specific locale. It's essential for Mattermost to function correctly with international characters.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE mattermost WITH ENCODING 'UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8' TEMPLATE=template0;\n```\n\n----------------------------------------\n\nTITLE: Fixing Websocket 403 errors - NGINX\nDESCRIPTION: This configuration snippet shows how to configure NGINX to correctly handle WebSocket connections for Mattermost, preventing 403 errors caused by failing cross-origin checks. It ensures the `Host` header is dynamically set and that `AllowCorsFrom` in `config.json` is properly configured.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nlocation ~ /api/v[0-9]+/(users/)?websocket$ {\n  proxy_pass            http://backend;\n  (...)\n  proxy_set_header      Host $host;\n  proxy_set_header      X-Forwarded-For $remote_addr;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Mattermost Plugins with mmctl\nDESCRIPTION: Enables specified plugins on the Mattermost server. It requires the plugins to be already installed. Multiple plugins can be enabled at once by listing their names after the `enable` command. This command directly interacts with the Mattermost server to activate the plugins.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_120\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin enable [plugins] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin enable hovercardexample pluginexample\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Least Privilege Permissions Configuration\nDESCRIPTION: This JSON configuration outlines the least privilege permissions required for a Mattermost service account to interact correctly with Elasticsearch. It defines cluster and index permissions, specifying allowed actions like monitoring, template management, bulk writing, and index administration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cluster_permissions\": [\n    \"cluster:monitor/*\",\n    \"indices:admin/template/put\",\n    \"indices:data/write/bulk\"\n  ],\n  \"index_permissions\": [\n    {\n      \"index_patterns\": [\n        \"\\<IndexPrefix\\>*\"\n      ],\n      \"allowed_actions\": [\n        \"indices:admin/get\",\n        \"indices:admin/create\",\n        \"indices:admin/delete\",\n        \"indices:admin/mapping/put\",\n        \"indices:admin/mappings/fields/get*\",\n        \"indices:data/read*\",\n        \"indices:data/write*\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: mmctl Global Flags\nDESCRIPTION: These flags are inherited by all mmctl commands and configure aspects such as configuration file path, output format, and security settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_58\n\nLANGUAGE: sh\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: config.json setting for AllowedUntrustedInternalConnections\nDESCRIPTION: This setting whitelists local network addresses that the Mattermost server can request on behalf of a client. It's crucial for controlling untrusted requests within the local network, especially from integrations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_107\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.AllowedUntrustedInternalConnections\": \"\"\n```\n\n----------------------------------------\n\nTITLE: Edit mmctl Configuration\nDESCRIPTION: Opens the default editor defined in the EDITOR environment variable to modify the Mattermost server configuration. After editing, saving the file will upload the changes to the server. This command depends on the EDITOR environment variable being set.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_53\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config edit\n```\n\n----------------------------------------\n\nTITLE: SMTP Password Setting - Environment Variable\nDESCRIPTION: This snippet shows the environment variable to set the SMTP server password. String input is expected. This setting is used for authentication with the SMTP server and overrides `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\n``MM_EMAILSETTINGS_SMTPPASSWORD``\n```\n\n----------------------------------------\n\nTITLE: Refreshing OpenSearch Indices using Shell\nDESCRIPTION: This command refreshes all indices in the OpenSearch cluster, making recent changes visible to search operations. It uses curl with the POST method and requires authentication.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST -u '<USERNAME>:<PASSWORD>' 'https://<HOSTNAME>/_refresh?pretty'\n```\n\n----------------------------------------\n\nTITLE: Granting Usage and Create Schema Privileges (PostgreSQL v15+)\nDESCRIPTION: This SQL snippet grants usage and create schema privileges on the public schema to the 'mmuser' user, which is required for PostgreSQL v15 and later.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER DATABASE mattermost OWNER TO mmuser;\nGRANT USAGE, CREATE ON SCHEMA PUBLIC TO mmuser;\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Log Output\nDESCRIPTION: This setting configures Mattermost to output logs to the console.  It can be enabled/disabled via the System Console or through the `config.json` setting `.LogSettings.EnableConsole`, or the environment variable MM_LOGSETTINGS_ENABLECONSOLE. When enabled (true), log messages are written to stdout based on the console log level.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_84\n\nLANGUAGE: text\nCODE:\n```\n\".LogSettings.EnableConsole\": true\",``\n```\n\n----------------------------------------\n\nTITLE: Deleting OpenSearch Indices using Shell\nDESCRIPTION: These commands delete specific indices (posts*, channels, files, users) in OpenSearch. They use curl with the DELETE method, requiring authentication.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XDELETE -u '<USERNAME>:<PASSWORD>' 'https://<HOSTNAME>/posts*?pretty'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XDELETE -u '<USERNAME>:<PASSWORD>' 'https://<HOSTNAME>/channels?pretty'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XDELETE -u '<USERNAME>:<PASSWORD>' 'https://<HOSTNAME>/files?pretty'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XDELETE -u '<USERNAME>:<PASSWORD>' 'https://<HOSTNAME>/users?pretty'\n```\n\n----------------------------------------\n\nTITLE: Example systemd Service Configuration (INI)\nDESCRIPTION: This snippet shows an example systemd service configuration file for Mattermost. It includes the Unit, Service, and Install sections, specifying dependencies, execution commands, user/group settings, and security options. It also includes commented-out lines showing where proxy settings can be included via environment variables.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Mattermost\nAfter=network.target\nAfter=postgresql.service\nBindsTo=postgresql.service\n\n[Service]\nType=notify\nExecStart=/opt/mattermost/bin/mattermost\nTimeoutStartSec=3600\nKillMode=mixed\nRestart=always\nRestartSec=10\nWorkingDirectory=/opt/mattermost\nUser=mattermost\nGroup=mattermost\nLimitNOFILE=49152\n\n# Configure proxy settings if needed\n#Environment=HTTP_PROXY=http://proxy.example.com:3128\n#Environment=HTTPS_PROXY=https://proxy.example.com:3128\n#Environment=NO_PROXY=localhost,127.0.0.1,.internal.example.com\n\n# Recommended security options\nProtectSystem=full\nPrivateTmp=true\nNoNewPrivileges=true\n\n[Install]\nWantedBy=postgresql.service\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting by HTTP Header in config.json\nDESCRIPTION: This snippet demonstrates how to configure rate limiting by HTTP header in Mattermost's `config.json` file. The `RateLimitSettings.VaryByHeader` setting specifies the HTTP header field used to vary rate limiting API access. This is particularly useful when using a proxy, like NGINX (X-Real-IP) or AmazonELB (X-Forwarded-For).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/rate-limiting-configuration-settings.rst#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\".RateLimitSettings.VaryByHeader: \\\"\\\",\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Data using CLI command\nDESCRIPTION: This code snippet demonstrates how to export data from all teams on a Mattermost server using the command-line interface. It requires navigating to the Mattermost installation directory and running the export command with appropriate permissions. Two examples are provided, one with a relative path and one with an absolute path.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/bulk-export-tool.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo -u mattermost bin/mattermost export bulk file.json --all-teams\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsudo -u mattermost bin/mattermost export bulk /home/user/bulk_data.json --all-teams\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON Setting - Session Length AD/LDAP/Email\nDESCRIPTION: Defines the session length in hours for users authenticated via AD/LDAP or email. The default value is 720 hours.  This setting affects how long a user's session remains active after they last entered their credentials via the web or desktop app when using email or AD/LDAP authentication.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_93\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.SessionLengthWebInHours: 720,\"\n```\n\n----------------------------------------\n\nTITLE: Modifying NGINX proxy_pass directive with HTTPS\nDESCRIPTION: This snippet demonstrates changing the `proxy_pass` directive in the NGINX configuration file to use HTTPS instead of HTTP. This enforces TLS encryption between the NGINX proxy and the Mattermost application server.  The change is necessary to enable HTTPS traffic to the backend.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nproxy_pass https://backend;\n```\n\n----------------------------------------\n\nTITLE: Altering column type to JSONB - PostgreSQL\nDESCRIPTION: This SQL statement alters the `props` column in the `posts` table to the `jsonb` data type, converting existing data using `props::jsonb`. This operation is mentioned as having a significant impact on database CPU usage during the Mattermost v6.0 upgrade.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/prepare-to-upgrade-mattermost.rst#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE posts ALTER COLUMN props TYPE jsonb USING props::jsonb;\n```\n\n----------------------------------------\n\nTITLE: Adding Users to a Channel using mmctl\nDESCRIPTION: This command adds users to a specified channel. The channel is identified by '[team]:[channel]' format, and users can be specified by email or username. This command requires valid channel and user identifiers.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel users add [channel] [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel users add myteam:mychannel user@example.com username\n```\n\n----------------------------------------\n\nTITLE: Configure Replica Lag Settings for AWS Aurora in Mattermost (JSON)\nDESCRIPTION: This JSON snippet configures the `ReplicaLagSettings` for Mattermost to monitor replica lag in an AWS Aurora cluster. It defines the data source and SQL queries to measure both absolute and time-based lag. The `DataSource` should point to a single node in the Aurora cluster. The queries use the `aurora_global_db_instance_status()` function to retrieve replication statistics.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SqlSettings\": {\n    \"ReplicaLagSettings\": [\n      {\n        \"DataSource\": \"replica-1\",\n        \"QueryAbsoluteLag\": \"select server_id, highest_lsn_rcvd-durable_lsn as bindiff from aurora_global_db_instance_status() where server_id=<>\",\n        \"QueryTimeLag\": \"select server_id, visibility_lag_in_msec from aurora_global_db_instance_status() where server_id=<>\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mattermost Theme JSON\nDESCRIPTION: This JSON snippet defines the color settings for the Mattermost theme. It includes colors for the sidebar, center channel, links, buttons, and various indicators. Use this JSON by copying and pasting it into the Mattermost custom theme settings to apply this theme.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"sidebarBg\":\"#145dbf\",\n\t\"sidebarText\":\"#ffffff\",\n\t\"sidebarUnreadText\":\"#ffffff\",\n\t\"sidebarTextHoverBg\":\"#4578bf\",\n\t\"sidebarTextActiveBorder\":\"#579eff\",\n\t\"sidebarTextActiveColor\":\"#ffffff\",\n\t\"sidebarHeaderBg\":\"#1153ab\",\n\t\"sidebarTeamBarBg\":\"#0b428c\",\n\t\"sidebarHeaderTextColor\":\"#ffffff\",\n\t\"onlineIndicator\":\"#06d6a0\",\n\t\"awayIndicator\":\"#ffbc42\",\n\t\"dndIndicator\":\"#f74343\",\n\t\"mentionBg\":\"#ffffff\",\n\t\"mentionBj\":\"#ffffff\",\n\t\"mentionColor\":\"#145dbf\",\n\t\"centerChannelBg\":\"#ffffff\",\n\t\"centerChannelColor\":\"#3d3c40\",\n\t\"newMessageSeparator\":\"#ff8800\",\n\t\"linkColor\":\"#2389d7\",\n\t\"buttonBg\":\"#166de0\",\n\t\"buttonColor\":\"#ffffff\",\n\t\"errorTextColor\":\"#fd5960\",\n\t\"mentionHighlightBg\":\"#ffe577\",\n\t\"mentionHighlightLink\":\"#166de0\",\n\t\"codeTheme\":\"github\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Outgoing Webhook using mmctl\nDESCRIPTION: This command creates an outgoing webhook, enabling messages from a specific channel to trigger external actions. It requires specifying the team, user, display name, trigger words, and callback URL. It also supports specifying the channel, description, trigger condition, icon, and content type.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_200\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook create-outgoing [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook create-outgoing --team myteam --user myusername --display-name mywebhook --trigger-word \"build\" --trigger-word \"test\" --url http://localhost:8000/my-webhook-handler\n mmctl webhook create-outgoing --team myteam --channel mychannel --user myusername --display-name mywebhook --description \"My cool webhook\" --trigger-when start --trigger-word build --trigger-word test --icon http://localhost:8000/my-slash-handler-bot-icon.png --url http://localhost:8000/my-webhook-handler --content-type \"application/json\"\n```\n\nLANGUAGE: sh\nCODE:\n```\n--channel string             Channel name or ID\n--content-type string        Content-type\n--description string         Outgoing webhook description\n--display-name string        Outgoing webhook display name\n-h, --help                   help for create-outgoing\n--icon string                Icon URL\n--team string                Team name or ID (required)\n--trigger-when string        When to trigger webhook (exact: for first word matches a trigger word exactly, start: for first word starts with a trigger word) (default \"exact\")\n--trigger-word stringArray   Word to trigger webhook (required)\n--url stringArray            Callback URL (required)\n--user string                The username, email, or ID of the user that the webhook should post as (required)\n```\n\n----------------------------------------\n\nTITLE: Uploading Export with mmctl\nDESCRIPTION: This command uploads a Mattermost export file to a destination server using the mmctl tool. The export file is specified as a parameter. The command returns an upload session ID and confirms the successful upload of the specified file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmmctl import upload r3kcj8yuwbramdt714doafi3oo_export.zip\n```\n\n----------------------------------------\n\nTITLE: Converting Slack Export to Mattermost Format using mmetl\nDESCRIPTION: This snippet uses the `mmetl` tool to transform a Slack export file (with emails and attachments) into Mattermost's bulk import format.  The `<TEAM-NAME>` parameter specifies the Mattermost team name (lowercase, one word). The tool outputs a `.jsonl` file and a `data` directory.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrate-from-slack.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./mmetl transform slack --team <TEAM-NAME> --file export-with-emails-and-attachments.zip --output mattermost_import.jsonl\n```\n\n----------------------------------------\n\nTITLE: Verifying File Limit in RHEL7/Ubuntu 16.04\nDESCRIPTION: This snippet describes how to increase the maximum number of open files for the Mattermost server on newer Linux distributions (RHEL7 and Ubuntu 16.04).  The `LimitNOFILE` parameter within the `/etc/systemd/system/mattermost.service` file controls this limit.  Increasing this value is essential for handling a large number of concurrent connections.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_66\n\nLANGUAGE: text\nCODE:\n```\nLimitNOFILE=49152\n```\n\n----------------------------------------\n\nTITLE: Test Connection to Elasticsearch\nDESCRIPTION: Tests the connection to Elasticsearch from the Mattermost server using curl. Replace 172.31.80.220 with the actual IP address of the Elasticsearch server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl 172.31.80.220:9200\n```\n\n----------------------------------------\n\nTITLE: Configuring Entra ID settings in config.json\nDESCRIPTION: This code snippet demonstrates how to directly configure Entra ID settings within the `config.json` file of a Mattermost server. It includes enabling/disabling the feature, setting the secret and application ID, specifying the required scopes, setting endpoints, and defining the directory ID. Modifying the `config.json` file requires a server restart for the changes to take effect.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-entraid.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  \"Office365Settings\": {\n        \"Enable\": false,\n        \"Secret\": \"i.hddd6Pu3--5dg~cRddddqOrBdd1a\",\n        \"Id\": \"28ddd714-1f2f-4f9c-9486-90b8dddd27\",\n        \"Scope\": \"profile openid email\",\n        \"AuthEndpoint\": \"\",\n        \"TokenEndpoint\": \"\",\n        \"UserApiEndpoint\": \"\",\n        \"DiscoveryEndpoint\": \"https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\",\n        \"DirectoryId\": \"common\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting CAP_NET_BIND_SERVICE capability for Mattermost\nDESCRIPTION: This command grants the Mattermost binary the CAP_NET_BIND_SERVICE capability, allowing it to bind to ports below 1024 (like port 443) without running as root. This is required when running Mattermost without a proxy.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/troubleshooting.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo setcap cap_net_bind_service=+ep ./mattermost/bin/mattermost\n```\n\n----------------------------------------\n\nTITLE: Enabling Push Notifications via config.json\nDESCRIPTION: This snippet shows how to enable push notifications by setting the `EmailSettings.SendPushNotifications` property to `true` in the `config.json` file. This setting determines whether Mattermost sends mobile push notifications to users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/push-notification-server-configuration-settings.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"EmailSettings.SendPushNotifications\": true\n```\n\n----------------------------------------\n\nTITLE: Validating an Import File with mmctl\nDESCRIPTION: This command validates an import file to check for errors or inconsistencies. It requires the file path as an argument. The command supports various flags for checking missing teams, server duplicates, and ignoring attachments. The `--team` flag can be repeated. Use the `-h` or `--help` flag for command specific help.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_97\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import validate [filepath] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nimport validate import_file.zip --team myteam --team myotherteam\n```\n\n----------------------------------------\n\nTITLE: Grant CREATE privilege on public schema (SQL)\nDESCRIPTION: This SQL snippet grants the CREATE privilege on the public schema to PUBLIC. This is required for fresh installations of PostgreSQL v15 to ensure compatibility with Mattermost. This is needed because PostgreSQL v15 introduces changes that may affect compatibility with previous releases.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble-postgres.rst#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT CREATE ON SCHEMA public TO PUBLIC\n```\n\n----------------------------------------\n\nTITLE: config.json Example: EnableIncomingWebhooks\nDESCRIPTION: This snippet shows the config.json setting for enabling or disabling incoming webhooks.  It allows external applications to create posts in public or private channels. Security considerations are important as enabling this feature can pose phishing attack risks.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/integrations-configuration-settings.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"EnableIncomingWebhooks\": true\n```\n\n----------------------------------------\n\nTITLE: Issuing TLS Certificate\nDESCRIPTION: Uses a bash script to issue a TLS certificate for the Mattermost domain using Let's Encrypt. The certificate and key are stored in the specified directory. Requires bash and Let's Encrypt tools installed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbash scripts/issue-certificate.sh -d <YOUR_MM_DOMAIN> -o ${PWD}/certs\n```\n\n----------------------------------------\n\nTITLE: Granting Database Privileges\nDESCRIPTION: This SQL snippet grants all privileges on the 'mattermost' database to the 'mmuser' user. This allows Mattermost to read and write data in the database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nGRANT ALL PRIVILEGES ON DATABASE mattermost to mmuser;\n```\n\n----------------------------------------\n\nTITLE: Configure MySQL N-gram Parser Settings for Korean Search\nDESCRIPTION: This snippet shows how to configure the minimum token size for the n-gram parser in MySQL. This is often needed for languages like Korean where words are not separated by spaces. The snippet sets `ft_min_word_len` and `innodb_ft_min_token_size` to 2 within the `[mysqld]` section of the MySQL configuration file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/enabling-chinese-japanese-korean-search.rst#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n[mysqld]\nft_min_word_len = 2\ninnodb_ft_min_token_size = 2\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Reverse Proxy for HTTPS\nDESCRIPTION: This snippet configures NGINX as a reverse proxy to handle HTTPS traffic for Mattermost.  It listens on port 443, specifies the TLS certificate locations, sets up secure TLS protocols and ciphers, and forwards requests to the Mattermost server running on port 8065. It requires NGINX to be installed and TLS certificates to be obtained.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/deploy-containers.rst#_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 443 ssl;\n    server_name your-domain.com;\n    \n    ssl_certificate /etc/nginx/certs/fullchain.pem;\n    ssl_certificate_key /etc/nginx/certs/privkey.pem;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    location / {\n        proxy_pass http://mattermost:8065;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto https;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Mattermost Operator with Custom Config\nDESCRIPTION: Installs the Mattermost Operator with a custom configuration file (config.yaml), allowing you to override default settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nhelm install mattermost-operator mattermost/mattermost-operator -n mattermost-operator -f config.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating pgloader configuration (migration-assist)\nDESCRIPTION: This command generates a pgloader configuration file that can be used to migrate the data from MySQL to PostgreSQL. It includes settings to remove null characters from text type data to prevent errors during data insertion into Postgres.  The removal of null chars can be disabled.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmigration-assist pgloader --mysql=\"<MYSQL_DSN>\" --postgres=\"<POSTGRES_DSN>\" > migration.load\n```\n\n----------------------------------------\n\nTITLE: Overriding Mattermost License via Environment Variable\nDESCRIPTION: This example shows how to override the Mattermost license using the MM_LICENSE environment variable. The variable should contain the entire contents of the license file as its value. If the provided license is invalid, the server will start without a license.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-variables.rst#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nMM_LICENSE=<license_content>\n```\n\n----------------------------------------\n\nTITLE: NGINX Proxy Configuration\nDESCRIPTION: This snippet provides an example of a complete NGINX configuration file to proxy connections to a Mattermost server, including settings for HTTP to HTTPS redirection, SSL/TLS configuration, websocket proxying, and general proxy settings.  It also includes a `map` block useful for debugging TLS v1.3.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nupstream backend {\n   server 10.10.10.2:8065;\n   keepalive 32;\n}\n\nserver {\n  listen 80 default_server;\n  server_name   mattermost.example.com;\n  return 301 https://$server_name$request_uri;\n}\n\nserver {\n   listen 443 ssl http2;\n   listen [::]:443 ssl http2;\n   server_name    mattermost.example.com;\n\n   ssl_certificate /etc/letsencrypt/live/{domain-name}/fullchain.pem;\n   ssl_certificate_key /etc/letsencrypt/live/{domain-name}/privkey.pem;\n   ssl_session_timeout 1d;\n\n   # Enable TLS versions (TLSv1.3 is required upcoming HTTP/3 QUIC).\n   ssl_protocols TLSv1.2 TLSv1.3;\n\n   # Enable TLSv1.3's 0-RTT. Use $ssl_early_data when reverse proxying to\n   # prevent replay attacks.\n   #\n   # @see: https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_early_data\n   ssl_early_data on;\n\n   ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384';\n   ssl_prefer_server_ciphers on;\n   ssl_session_cache shared:SSL:50m;\n   # HSTS (ngx_http_headers_module is required) (15768000 seconds = six months)\n   add_header Strict-Transport-Security max-age=15768000;\n   # OCSP Stapling ---\n   # fetch OCSP records from URL in ssl_certificate and cache them\n   ssl_stapling on;\n   ssl_stapling_verify on;\n\n   add_header X-Early-Data $tls1_3_early_data;\n\n   location ~ /api/v[0-9]+/(users/)?websocket$ {\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection \"upgrade\";\n       client_max_body_size 50M;\n       proxy_set_header Host $host;\n       proxy_set_header X-Real-IP $remote_addr;\n       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       proxy_set_header X-Forwarded-Proto $scheme;\n       proxy_set_header X-Frame-Options SAMEORIGIN;\n       proxy_buffers 256 16k;\n       proxy_buffer_size 16k;\n       client_body_timeout 60s;\n       send_timeout 300s;\n       lingering_timeout 5s;\n       proxy_connect_timeout 90s;\n       proxy_send_timeout 300s;\n       proxy_read_timeout 90s;\n       proxy_http_version 1.1;\n       proxy_pass http://backend;\n   }\n\n   location / {\n       client_max_body_size 100M;\n       proxy_set_header Connection \"\";\n       proxy_set_header Host $host;\n       proxy_set_header X-Real-IP $remote_addr;\n       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       proxy_set_header X-Forwarded-Proto $scheme;\n       proxy_set_header X-Frame-Options SAMEORIGIN;\n       proxy_buffers 256 16k;\n       proxy_buffer_size 16k;\n       proxy_read_timeout 600s;\n       proxy_http_version 1.1;\n       proxy_pass http://backend;\n   }\n}\n\n# This block is useful for debugging TLS v1.3. Please feel free to remove this\n# and use the `$ssl_early_data` variable exposed by NGINX directly should you\n# wish to do so.\nmap $ssl_early_data $tls1_3_early_data {\n  \"~.\" $ssl_early_data;\n  default \"\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mattermost Installation Manifest YAML\nDESCRIPTION: Defines the Mattermost custom resource in Kubernetes. It specifies the size, ingress settings, Mattermost version, and associated license secret.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: installation.mattermost.com/v1beta1\nkind: Mattermost\nmetadata:\n  name: <INSTALLATION_NAME_HERE>        # Example: mm-example-full\nspec:\n  size: <SIZE_VALUE_HERE>               # Example: 5000users\n  ingress:\n    enabled: true\n    host: <FULL_DOMAIN_NAME_HERE>       # Example: example.mattermost-example.com\n    annotations:\n      kubernetes.io/ingress.class: nginx\nversion: <VERSION_HERE>               # Example: 9.3.0\nlicenseSecret: \"\"                     # If you created a license secret, put the name here\n```\n\n----------------------------------------\n\nTITLE: Configure CORS - config.json\nDESCRIPTION: This snippet shows how to configure the `AllowCorsFrom` setting in Mattermost's `config.json` file to allow WebSocket connections from specific domains. This configuration is essential for resolving cross-origin issues that can lead to 403 errors.  The domains should match the ones used by the clients.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n\"EnableUserAccessTokens\": false,\n\"AllowCorsFrom\": \"domain.com domain.com:443 im.domain.com\",\n\"SessionLengthWebInDays\": 30,\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database\nDESCRIPTION: This SQL command creates a new database named `mattermost`. It must be executed with root privileges or a user with CREATE DATABASE privilege. The command is used when the `mattermost` database does not exist.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ncreate database mattermost;\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to Role with mmctl\nDESCRIPTION: This command adds specified permissions to a given role.  The [role_name] and [permission...] placeholders should be replaced with the actual role and permissions to be added respectively.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nmmctl permissions add [role_name] [permission...]\n```\n\n----------------------------------------\n\nTITLE: Define Advanced Logging Output\nDESCRIPTION: This JSON configuration defines advanced logging outputs for Mattermost. It includes configurations for console, and file logging, specifying the type, format, levels, options (like filename and rotation settings), and maximum queue size for each output target. This allows administrators to customize where and how logs are stored and processed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/logging.rst#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"console1\": {\n        \"type\": \"console\",\n        \"format\": \"json\",\n        \"levels\": [\n            {\"id\": 5, \"name\": \"debug\", \"stacktrace\": false},\n            {\"id\": 4, \"name\": \"info\", \"stacktrace\": false, \"color\": 36},\n            {\"id\": 3, \"name\": \"warn\", \"stacktrace\": false},\n            {\"id\": 2, \"name\": \"error\", \"stacktrace\": true, \"color\": 31},\n            {\"id\": 1, \"name\": \"fatal\", \"stacktrace\": true, \"color\": 31},\n            {\"id\": 0, \"name\": \"panic\", \"stacktrace\": true, \"color\": 31},\n            {\"id\": 10, \"name\": \"stdlog\", \"stacktrace\": false}\n        ],\n        \"options\": {\n            \"out\": \"stdout\"\n        },\n        \"maxqueuesize\": 1000\n    },\n    \"file1\": {\n        \"type\": \"file\",\n        \"format\": \"json\",\n        \"levels\": [\n            {\"id\": 5, \"name\": \"debug\", \"stacktrace\": false},\n            {\"id\": 4, \"name\": \"info\", \"stacktrace\": false},\n            {\"id\": 3, \"name\": \"warn\", \"stacktrace\": false},\n            {\"id\": 2, \"name\": \"error\", \"stacktrace\": true},\n            {\"id\": 1, \"name\": \"fatal\", \"stacktrace\": true},\n            {\"id\": 0, \"name\": \"panic\", \"stacktrace\": true}\n        ],\n        \"options\": {\n            \"filename\": \"mattermost_logging.log\",\n            \"max_size\": 100,\n            \"max_age\": 1,\n            \"max_backups\": 10,\n            \"compress\": true,\n        },\n        \"maxqueuesize\": 1000\n    },\n    \"file2\": {\n        \"type\": \"file\",\n        \"format\": \"json\",\n        \"levels\": [\n            {\"id\": 2, \"name\": \"error\", \"stacktrace\": true},\n            {\"id\": 1, \"name\": \"fatal\", \"stacktrace\": true},\n            {\"id\": 0, \"name\": \"panic\", \"stacktrace\": true}\n        ],\n        \"options\": {\n            \"filename\": \"mattermost_logging_errors.log\",\n            \"max_size\": 100,\n            \"max_age\": 30,\n            \"max_backups\": 10,\n            \"compress\": true\n        },\n        \"maxqueuesize\": 1000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set LiveIndexingBatchSize via mmctl (Shell)\nDESCRIPTION: This shell command uses `mmctl` to set the `LiveIndexingBatchSize` setting within Mattermost's Elasticsearch configuration. The `LiveIndexingBatchSize` setting determines how many new posts are batched together before they're added to the Elasticsearch index.  This example sets the batch size to 200.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config set ElasticsearchSettings.LiveIndexingBatchSize 200\n```\n\n----------------------------------------\n\nTITLE: mmctl Token Revoke Command\nDESCRIPTION: This command revokes one or more tokens for a specified user.  It requires the token IDs to be revoked.  Revoked tokens are no longer valid for authentication.  Appropriate permissions are required.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_150\n\nLANGUAGE: sh\nCODE:\n```\nmmctl token revoke [token-ids] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl revoke testuser test-token-id\n```\n\n----------------------------------------\n\nTITLE: Configure Maximum Burst Size - config.json\nDESCRIPTION: This setting specifies the maximum number of API requests allowed beyond the per-second query limit when rate limiting is enabled. It allows for short bursts of traffic to be handled without being immediately throttled.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/rate-limiting-configuration-settings.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\".RateLimitSettings.MaxBurst: 100,”\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Replica Node\nDESCRIPTION: This configuration block adjusts the settings for a PostgreSQL read replica node, building upon the primary node configuration. Key modifications include reducing work_mem to 16MB and enabling hot_standby and hot_standby_feedback.  It also reiterates the importance of tuning `MaxOpenConns` based on the instance size.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/high-availability-cluster-based-deployment.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# If the instance is lower capacity than r5.xlarge, then set it to a lower number. \n# Also tune the \"MaxOpenConns\" setting under the \"SqlSettings\" of the Mattermost app accordingly. \n# Note that \"MaxOpenConns\" on Mattermost is per data source name.\n  max_connections = 1024\n\n  # This setting should be 16MB on read nodes, and 32MB on writer nodes\n  work_mem = 16MB\n\n  # The below settings allow the reader to return query results even when the primary has a write process running, a query conflict. \n  # This is set to on because of the high volume of write traffic that can prevent the reader from returning query results within the timeout. \n  # https://www.postgresql.org/docs/current/hot-standby.html#HOT-STANDBY-CONFLICT\n  hot_standby = on\n  hot_standby_feedback = on\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Simplified Permissions Configuration\nDESCRIPTION: This JSON configuration demonstrates a simplified and more resilient set of permissions for Mattermost to interact with Elasticsearch. It uses wildcard to grant a broader range of index permissions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cluster_permissions\": [\n    \"cluster:monitor/*\",\n    \"indices:admin/template/put\",\n    \"indices:data/write/bulk\"\n  ],\n  \"index_permissions\": [\n    {\n      \"index_patterns\": [\n        \"\\<IndexPrefix\\>*\"\n      ],\n      \"allowed_actions\": [\n        \"indices:*\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing SMTP Server Reachability with Telnet\nDESCRIPTION: These code snippets demonstrate how to use Telnet to verify if an SMTP server is reachable from the Mattermost server. It outlines the commands to send and the expected responses for a successful connection.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/smtp-email.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTrying 24.121.12.143...\nConnected to mail.example.com.\n220 mail.example.com NO UCE ESMTP\n```\n\nLANGUAGE: text\nCODE:\n```\n250-mail.example.com NO UCE\n250-STARTTLS\n250-PIPELINING\n250 8BITMIME\n```\n\n----------------------------------------\n\nTITLE: Create Mattermost User and Group (useradd)\nDESCRIPTION: Creates a system user and group named 'mattermost' using the useradd command. This user and group will own the Mattermost files and processes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo useradd --system --user-group mattermost\n```\n\n----------------------------------------\n\nTITLE: TLS Cipher Overwrites Configuration\nDESCRIPTION: This setting allows overwriting the TLS ciphers used by the Mattermost server.  It can be used to meet requirements from legacy clients or to limit the types of accepted ciphers.  The setting is configured either via config.json or an environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n\".ServiceSettings.TLSOverwriteCiphers: []\",\n```\n\n----------------------------------------\n\nTITLE: Removing Mattermost Server\nDESCRIPTION: Removes the Mattermost server package and its configuration files. The `--purge` option ensures that all configuration files are also removed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt remove --purge mattermost\n```\n\n----------------------------------------\n\nTITLE: Test NGINX configuration\nDESCRIPTION: This command tests the Nginx configuration for syntax errors before restarting the server. It helps ensure that the configuration is valid before applying changes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo nginx -t\n```\n\n----------------------------------------\n\nTITLE: config.json example for DataSourceReplicas\nDESCRIPTION: This code snippet shows the structure for configuring read replicas in the `config.json` file.  `DataSourceReplicas` specifies the connection strings for read replica databases, enabling load balancing of read queries across multiple database instances to improve performance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\".SqlSettings.DataSourceReplicas\": []\n```\n\n----------------------------------------\n\nTITLE: Configure Google Settings in config.json\nDESCRIPTION: This snippet shows the configuration settings for Google SSO that can be added to the `config.json` file in a Mattermost server. It includes settings such as enabling Google SSO, the Client Secret, Client ID, scopes, discovery endpoint, and button customization options. Restarting the Mattermost server is required for these changes to take effect.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-google.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  \"GoogleSettings\": {\n        \"Enable\": true,\n        \"Secret\": \"P-k9R-7E7ayX9LdddddWdXVg\",\n        \"Id\": \"1022ddddd5846-bkddddd4a1ddddd9d88j1kb6eqc.apps.googleusercontent.com\",\n        \"Scope\": \"profile openid email\",\n        \"AuthEndpoint\": \"\",\n        \"TokenEndpoint\": \"\",\n        \"UserApiEndpoint\": \"\",\n        \"DiscoveryEndpoint\": \"https://accounts.google.com/.well-known/openid-configuration\",\n        \"ButtonText\": \"\",\n        \"ButtonColor\": \"\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Generating .key file from .p12 file using OpenSSL\nDESCRIPTION: This command uses OpenSSL to extract the private key from a .p12 keystore file and save it to a .key file. The -nodes option prevents encryption of the private key, and -nocerts option avoids including certificate information in the output. This .key file is needed to configure SAML encryption within Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-saml-keycloak.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenssl pkcs12 -in keystore.p12 -out mattermost.key -nodes -nocerts\n```\n\n----------------------------------------\n\nTITLE: mmctl User Change-Password Command\nDESCRIPTION: This command allows changing a user's password. If a user is changing their own password, the `--current` flag must be provided with the current password. The `--hashed` flag indicates the provided new password is already hashed.  Appropriate permissions are required to change passwords of other users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_152\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user change-password <user> [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl user change-password john_doe --password new-password\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl user change-password my-username --current current-password --password new-password\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl user change-password my-username\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl user change-password john_doe --password HASHED_PASSWORD --hashed\n```\n\n----------------------------------------\n\nTITLE: NGINX Proxy Configuration for Mattermost\nDESCRIPTION: This NGINX configuration proxies requests to a cluster of Mattermost servers. It includes settings for WebSocket connections, caching, header configuration, and timeouts to ensure proper routing and performance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/high-availability-cluster-based-deployment.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nupstream backend {\n      server 10.10.10.2:8065;\n      server 10.10.10.4:8065;\n      keepalive 256;\n}\n\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:50m max_size=16g inactive=60m use_temp_path=off;\n\nserver {\n  listen 80 reuseport;\n  server_name mattermost.example.com;\n\n  location ~ /api/v[0-9]+/(users/)?websocket$ {\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        client_max_body_size 100M;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60s;\n        send_timeout        300s;\n        lingering_timeout   5s;\n        proxy_connect_timeout   30s;\n        proxy_send_timeout      90s;\n        proxy_read_timeout      90s;\n        proxy_http_version 1.1;\n        proxy_pass http://backend;\n  }\n\n  location / {\n        proxy_set_header Connection \"\";\n        client_max_body_size 100M;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60s;\n        send_timeout        300s;\n        lingering_timeout   5s;\n        proxy_connect_timeout   30s;\n        proxy_send_timeout      90s;\n        proxy_read_timeout      90s;\n        proxy_http_version 1.1;\n        proxy_pass http://backend;\n        proxy_cache mattermost_cache;\n        proxy_cache_revalidate on;\n        proxy_cache_min_uses 2;\n        proxy_cache_use_stale timeout;\n        proxy_cache_lock on;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Index on PropertyValues Table in MySQL\nDESCRIPTION: This SQL snippet creates an index named `idx_propertyvalues_create_at_id` on the `PropertyValues` table in MySQL if it does not already exist. The index is created on the `CreateAt` and `ID` columns. This index is used for cursor-based pagination. The script dynamically checks for existing indices before creating a new one.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET @preparedStatement = (SELECT IF(\n    (\n        SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS\n        WHERE table_name = 'PropertyValues'\n        AND table_schema = DATABASE()\n        AND index_name = 'idx_propertyvalues_create_at_id'\n    ) > 0,\n    'SELECT 1',\n    'CREATE INDEX idx_propertyvalues_create_at_id ON PropertyValues(CreateAt, ID);'\n));\n\nPREPARE createIndexIfNotExists FROM @preparedStatement;\nEXECUTE createIndexIfNotExists;\nDEALLOCATE PREPARE createIndexIfNotExists;\n```\n\n----------------------------------------\n\nTITLE: Trusted Proxy IP Header Configuration\nDESCRIPTION: This snippet demonstrates how to configure trusted proxy IP headers.  It specifies the location in the config.json file and the environment variable used to define an array of header names that Mattermost will check for IP addresses. Order is important.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n``\".ServiceSettings.TrustedProxyIPHeader: [],``\n```\n\nLANGUAGE: text\nCODE:\n```\n``MM_SERVICESETTINGS_TRUSTEDPROXYIPHEADER``\n```\n\n----------------------------------------\n\nTITLE: Modify /etc/security/limits.conf (Text)\nDESCRIPTION: This code snippet shows how to modify the `/etc/security/limits.conf` file on each Mattermost server. It increases the process limit (`nproc`) and the maximum number of open files (`nofile`) for the user running the Mattermost process. These settings are necessary to handle a large number of concurrent connections.  The changes require a server restart or user re-login to take effect.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/high-availability-cluster-based-deployment.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* soft nofile 65536\n* hard nofile 65536\n* soft nproc 8192\n* hard nproc 8192\n```\n\n----------------------------------------\n\nTITLE: Setting Site URL via Environment Variable\nDESCRIPTION: This example demonstrates how to set the Site URL using an environment variable. The Site URL setting in config.json is ServiceSettings.SiteURL, so the corresponding environment variable is MM_SERVICESETTINGS_SITEURL. The value is set to \"http://example.com\".\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-variables.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport MM_SERVICESETTINGS_SITEURL=\"http://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on Ubuntu/Debian/AWS/Azure\nDESCRIPTION: This code snippet demonstrates how to install PostgreSQL on Ubuntu, Debian, AWS, and Azure systems using the apt package manager. It updates the package list and then installs the postgresql package.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo apt install postgresql\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Maximum URL Length\nDESCRIPTION: Introduces a new configuration setting `MaximumURLLength` within the `ServiceSettings` section of the `config.json` file. This setting removes the hardcoded URL length limit, allowing administrators to configure the maximum allowed URL length.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\nUnder ``ServiceSettings`` in ``config.json``:\n    - Added a new setting ``MaximumURLLength`` to remove the hardcoded URL length limit.\n```\n\n----------------------------------------\n\nTITLE: Example iptables NAT Rules Output\nDESCRIPTION: This text block demonstrates the output from `iptables -t nat -L`.  It confirms the creation of DNAT rules, redirecting traffic destined for specific IP addresses and ports to localhost on different ports. This verifies the correct application of the UFW rules.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nChain PREROUTING (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\nDNAT       tcp  --  anywhere             10.10.250.231        tcp dpt:8075 to:127.0.0.1:18075\nDNAT       tcp  --  anywhere             10.10.250.231        tcp dpt:8074 to:127.0.0.1:18074\nDNAT       tcp  --  anywhere             10.10.250.165        tcp dpt:8075 to:127.0.0.1:28075\nDNAT       tcp  --  anywhere             10.10.250.165        tcp dpt:8074 to:127.0.0.1:28074\n```\n\n----------------------------------------\n\nTITLE: File Storage System Configuration\nDESCRIPTION: Specifies the file storage system used, which can be either 'local' or 'amazons3'. When set to 'local', files are stored in the specified local file directory. When set to 'amazons3', files are stored on Amazon S3 based on access key, bucket, and region. Compatible with MinIO and Digital Ocean Spaces.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.DriverName:  local”\n```\n\n----------------------------------------\n\nTITLE: Configure Cluster Settings in config.json (JSON)\nDESCRIPTION: This code snippet shows the `ClusterSettings` section in the `config.json` file, which is used to configure high availability features. Key parameters include `Enable` to turn on clustering, `ClusterName` to identify the cluster, `OverrideHostname` to force discovery, `UseIpAddress` to use IP addresses for discovery, `ReadOnlyConfig` to prevent System Console changes to config.json, and `GossipPort` for cluster communication.  Ensure this configuration is identical across all Mattermost servers in the cluster, unless `OverrideHostname` is specifically needed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/high-availability-cluster-based-deployment.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ClusterSettings\": {\n            \"Enable\": false,\n            \"ClusterName\": \"production\",\n            \"OverrideHostname\": \"\",\n            \"UseIpAddress\": true,\n            \"ReadOnlyConfig\": true,\n            \"GossipPort\": 8074\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network\nDESCRIPTION: This snippet creates a custom Docker bridge network named 'mattermost-network'.  This network allows containers to communicate with each other securely by isolating them from the host network. The command requires Docker to be installed and running.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/deploy-containers.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker network create mattermost-network\n```\n\n----------------------------------------\n\nTITLE: Update Reactions Table Primary Key - MySQL\nDESCRIPTION: This SQL command removes the existing primary key on the Reactions table in a MySQL database and adds a new primary key constraint composed of PostId, UserId, and EmojiName. This is a schema migration step required when upgrading Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_58\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE Reactions DROP PRIMARY KEY, ADD PRIMARY KEY (PostId, UserId, EmojiName);\n```\n\n----------------------------------------\n\nTITLE: Mattermost config.json ServiceSettings after TLS\nDESCRIPTION: This snippet shows the modified section of the Mattermost `config.json` file *after* enabling TLS encryption between the proxy and the application server. The `ConnectionSecurity` is set to `TLS`, and the paths to the TLS certificate and key files are specified.  This configuration enables TLS.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ServiceSettings\": {\n        \"SiteURL\": \"https://transport-encryption.dev.example.com\",\n        \"WebsocketURL\": \"\",\n        \"LicenseFileLocation\": \"\",\n        \"ListenAddress\": \":8065\",\n        \"ConnectionSecurity\": \"TLS\",\n        \"TLSCertFile\": \"/opt/mattermost/config/cert.pem\",\n        \"TLSKeyFile\": \"/opt/mattermost/config/key.pem\",\n        \"...\":\"...\"\n    },\n    \"...\":\"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Mattermost Service\nDESCRIPTION: Starts the Mattermost server as a systemd service. This command initiates the execution of the Mattermost application, making it accessible for users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start mattermost\n```\n\n----------------------------------------\n\nTITLE: Listing Import Jobs with mmctl\nDESCRIPTION: This command lists the status of import jobs using the mmctl tool, providing information about ongoing or completed import processes. The `--local` flag specifies a local import operation. Output shows the job ID, current status, and creation timestamp.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmmctl --local import job list\n```\n\n----------------------------------------\n\nTITLE: Websocket URL Configuration\nDESCRIPTION: This snippet describes how to configure the Websocket URL for the Mattermost server. It specifies the location in the config.json file and the corresponding environment variable to use.  It allows administrators to instruct clients on where to connect for websocket communication.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n``\".ServiceSettings.WebsocketURL: \"\",``\n```\n\nLANGUAGE: text\nCODE:\n```\n``MM_SERVICESETTINGS_WEBSOCKETURL``\n```\n\n----------------------------------------\n\nTITLE: Data Migration for Playbooks - pgloader\nDESCRIPTION: This pgloader configuration is tailored for migrating collaborative playbooks data. It includes schema creation, table creation, index creation, and data migration from MySQL to PostgreSQL. It also includes casting rules and table filtering based on name patterns. The target tables are all tables starting with `IR_`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nLOAD DATABASE\n FROM      mysql://{{ .mysql_user }}:{{ .mysql_password }}@{{ .mysql_address }}/{{ .source_db }}\n INTO      pgsql://{{ .pg_user }}:{{ .pg_password }}@{{ .postgres_address }}/{{ .target_db }}\n\nWITH include drop, create tables, create indexes, no foreign keys,\n workers = 8, concurrency = 1,\n multiple readers per thread, rows per range = 50000,\n preserve index names\n\nSET PostgreSQL PARAMETERS\n maintenance_work_mem to '128MB',\n work_mem to '12MB'\n\nSET MySQL PARAMETERS\n net_read_timeout  = '120',\n net_write_timeout = '120'\n\nCAST column IR_ChannelAction.ActionType to text drop typemod,\n column IR_ChannelAction.TriggerType to text drop typemod,\n column IR_Incident.ChecklistsJSON to \"json\" drop typemod\n\nINCLUDING ONLY TABLE NAMES MATCHING\n ~/IR_/\n\nBEFORE LOAD DO\n $$ ALTER SCHEMA public RENAME TO {{ .source_db }}; $$\n\nAFTER LOAD DO\n $$ ALTER TABLE {{ .source_db }}.IR_ChannelAction ALTER COLUMN ActionType TYPE varchar(65536); $$,\n $$ ALTER TABLE {{ .source_db }}.IR_ChannelAction ALTER COLUMN TriggerType TYPE varchar(65536); $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ReminderMessageTemplate TYPE varchar(65536); $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ReminderMessageTemplate SET DEFAULT ''::text;  $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedInvitedUserIDs TYPE varchar(65536); $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedInvitedUserIDs SET DEFAULT ''::text; $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedWebhookOnCreationURLs TYPE varchar(65536); $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedWebhookOnCreationURLs SET DEFAULT ''::text; $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedInvitedGroupIDs TYPE varchar(65536); $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedInvitedGroupIDs SET DEFAULT ''::text; $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN Retrospective TYPE varchar(65536); $$,\n $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN Retrospective SET DEFAULT ''::text; $$\n```\n\n----------------------------------------\n\nTITLE: Assign Role using mmctl\nDESCRIPTION: This command assigns a specified role to one or more users using the mmctl command-line tool. The role_name parameter specifies the role to assign, and username specifies the user(s) to whom the role is assigned.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl permissions role assign [role_name] [username...]\n```\n\n----------------------------------------\n\nTITLE: Migrate mmctl Configuration\nDESCRIPTION: Migrates the Mattermost configuration from a file-based store to a database or vice versa. It requires local mode to be enabled and depends on the target database being accessible. The command transfers configuration data between stores.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_56\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config migrate path/to/config.json \"postgres://mmuser:mostest@localhost:5432/mattermost_test?sslmode=disable&connect_timeout=10\" --local\n```\n\nLANGUAGE: sh\nCODE:\n```\nMM_SERVICESETTINGS_ENABLELOCALMODE=true\n```\n\n----------------------------------------\n\nTITLE: AD/LDAP User Filter for Deactivated Users\nDESCRIPTION: This filter is used in the Mattermost AD/LDAP configuration to exclude deactivated users. It ensures that users who are deactivated in AD/LDAP are also deactivated in Mattermost upon synchronization. The filter leverages the `UserAccountControl` attribute to identify and exclude disabled accounts.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap.rst#_snippet_2\n\nLANGUAGE: LDAP Filter\nCODE:\n```\n(&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))\n```\n\n----------------------------------------\n\nTITLE: Multi-Database SqlSettings Configuration in JSON\nDESCRIPTION: This JSON snippet demonstrates the configuration of SqlSettings for a Mattermost server with one master database and two read replicas. It includes connection strings, driver name, and other settings related to database connections and timeouts.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/high-availability-cluster-based-deployment.rst#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"SqlSettings\": {\n        \"DriverName\": \"mysql\",\n        \"DataSource\": \"master_user:master_password@tcp(master.server)/mattermost?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s\",\n        \"DataSourceReplicas\": [\"slave_user:slave_password@tcp(replica1.server)/mattermost?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s\",\"slave_user:slave_password@tcp(replica2.server)/mattermost?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s\"],\n        \"DataSourceSearchReplicas\": [],\n        \"MaxIdleConns\": 20,\n        \"MaxOpenConns\": 300,\n        \"Trace\": false,\n        \"AtRestEncryptKey\": \"\",\n        \"QueryTimeout\": 30\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Kubernetes Ingress Resource for Mattermost\nDESCRIPTION: Defines an Ingress resource to route external traffic to the Mattermost service running in a Kubernetes cluster. It configures TLS termination, sets custom annotations for Nginx Ingress Controller, and defines routing rules based on the host and path.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/deploy-kubernetes.rst#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: mattermost-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"10m\"  # Customize client body size limit\n    nginx.ingress.kubernetes.io/proxy-read-timeout: \"60\" # Customize request timeout\nspec:\n  tls:\n  - secretName: mattermost-tls # Reference to the TLS secret\n  rules:\n  - host: <your-domain.com>\n    http:\n      paths:\n      - path: /\n        pathType: ImplementationSpecific\n        backend:\n          service:\n            name: mattermost-service # Name of your Mattermost service\n            port:\n              number: 80\n```\n\n----------------------------------------\n\nTITLE: Modifying NGINX proxy_pass directive with HTTPS\nDESCRIPTION: This snippet demonstrates changing the `proxy_pass` directive in the NGINX configuration file to use HTTPS instead of HTTP. This enforces TLS encryption between the NGINX proxy and the Mattermost application server.  The existing line needs to be located in the NGINX configuration file and modified.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproxy_pass http://backend;\n```\n\n----------------------------------------\n\nTITLE: Run Certbot installer\nDESCRIPTION: This command runs the Let's Encrypt installer (Certbot) to obtain and install SSL certificates for the specified domain. It automatically configures Nginx to use the certificates.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nsudo certbot\n```\n\n----------------------------------------\n\nTITLE: Configure Rate Limiting Enable - config.json\nDESCRIPTION: This setting enables or disables rate limiting for the Mattermost API. When set to `true`, API requests are throttled based on the configured maximum queries per second. When set to `false`, rate limiting is disabled.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/rate-limiting-configuration-settings.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\".RateLimitSettings.Enable: false”,\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout via config.json\nDESCRIPTION: This snippet demonstrates setting the query timeout in Mattermost via the `config.json` file. The `QueryTimeout` setting under `SqlSettings` specifies the amount of time to wait for a database response in seconds. The default is 30 seconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n\".SqlSettings.QueryTimeout: 30\",\n```\n\n----------------------------------------\n\nTITLE: Updating Mattermost Omnibus\nDESCRIPTION: Updates the system's package list and upgrades installed packages, including Mattermost Omnibus, using the apt package manager. It's recommended to stop the Mattermost server before updating.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Log Output\nDESCRIPTION: This setting determines if console logs are output in JSON format. It is enabled/disabled via the System Console, `config.json` setting `.LogSettings.ConsoleJson`, or the MM_LOGSETTINGS_CONSOLEJSON environment variable. When enabled, logged events are written in a machine-readable JSON format, typically used in production environments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_86\n\nLANGUAGE: text\nCODE:\n```\n\".LogSettings.ConsoleJson\": true\",``\n```\n\n----------------------------------------\n\nTITLE: mmctl User Invite Command\nDESCRIPTION: The `mmctl user invite` command sends an email invitation to a specified user to join one or more teams within a Mattermost instance.  The user's email and the target teams' names or IDs are required.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_173\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user invite user@example.com myteam\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user invite user@example.com myteam1 myteam2\n```\n\n----------------------------------------\n\nTITLE: Starting and Checking Mattermost Service Status\nDESCRIPTION: These commands are used to start the Mattermost service and check its status. `systemctl start mattermost` starts the service, and `systemctl status mattermost.service` displays the current status of the service, including whether it is running and any recent log messages.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl start mattermost\nsystemctl status mattermost.service\n```\n\n----------------------------------------\n\nTITLE: Enable Plugins Configuration\nDESCRIPTION: This section describes how to enable or disable plugins on the Mattermost server.  It involves configuring the `PluginSettings.Enable` setting either via the System Console or by directly modifying the `config.json` file. The environment variable `MM_PLUGINSETTINGS_ENABLE` can also be used to control this setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- **true**: **(Default)** Enables plugins on your Mattermost server.\n- **false**: Disables plugins on your Mattermost server.\n```\n\n----------------------------------------\n\nTITLE: Setting mmctl Configuration\nDESCRIPTION: This command sets the value of a configuration setting using dot notation. It allows setting multiple values for array settings. Mattermost plugin uploads cannot be enabled through mmctl in local mode.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_61\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config set [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config set SqlSettings.DriverName postgres\nmmctl config set SqlSettings.DataSourceReplicas \"replica1\" \"replica2\"\nmmctl config set PluginSettings.Plugins.com.mattermost.calls.rtcdserviceurl \"http://mattermost-rtcd\"\nmmctl config set LogSettings.AdvancedLoggingJSON '{\"console1\":{\"Type\":\"console\",\"Format\":\"json\",\"Levels\":[{\"ID\":5,\"Name\":\"debug\",\"Stacktrace\":false},{\"ID\":4,\"Name\":\"info\",\"Stacktrace\":false,\"color\":36},{\"ID\":3,\"Name\":\"warn\",\"Stacktrace\":false},{\"ID\":2,\"Name\":\"error\",\"Stacktrace\":true,\"color\":31},{\"ID\":1,\"Name\":\"fatal\",\"Stacktrace\":true,\"color\":31},{\"ID\":0,\"Name\":\"panic\",\"Stacktrace\":true,\"color\":31},{\"ID\":10,\"Name\":\"stdlog\",\"Stacktrace\":false}],\"Options\":{\"Out\":\"stdout\"},\"MaxQueueSize\":1000}}'\n```\n\n----------------------------------------\n\nTITLE: Configure VIRTUAL_HOST in docker-compose.yml - Docker\nDESCRIPTION: This snippet shows how to configure the `VIRTUAL_HOST` environment variable and `expose` directive in the `docker-compose.yml` file for the Mattermost application. This allows the NGINX proxy to route requests to the Mattermost container based on the specified virtual host.  Requires docker-compose.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nenvironment:\n  # set same as db credentials and dbname\n  - MM_USERNAME=mmuser\n  - MM_PASSWORD=mmuser-password\n  - MM_DBNAME=mattermost\n  - VIRTUAL_HOST=mymattermost.tld\nexpose:\n  - \"80\"\n  - \"443\"\n```\n\n----------------------------------------\n\nTITLE: Let's Encrypt rate limit error - Certbot\nDESCRIPTION: This snippet displays an error message indicating that the Let's Encrypt rate limit has been exceeded. This typically happens when there are too many failed certificate authorization attempts. The error advises to consult the Let's Encrypt rate limits documentation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nError: Could not issue a Let's Encrypt SSL/TLS certificate for example.com.\nOne of the Let's Encrypt rate limits has been exceeded for example.com.\nSee the related Knowledge Base article for details.\nDetails\nInvalid response from https://acme-v02.api.letsencrypt.org/acme/new-order.\nDetails:\nType: urn:ietf:params:acme:error:rateLimited\nStatus: 429\nDetail: Error creating new order :: too many failed authorizations recently: see https://letsencrypt.org/docs/rate-limits/\n```\n\n----------------------------------------\n\nTITLE: Generating self-signed certificates using OpenSSL\nDESCRIPTION: This snippet generates a self-signed certificate using OpenSSL for encrypting traffic between the proxy server and the Mattermost application server. It changes to the Mattermost config directory, generates the certificate and key, and sets the correct ownership and permissions.  The certificates are valid for 365 days.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/mattermost/config\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nchown root:mattermost *.pem\nchmod 640 *.pem\n```\n\n----------------------------------------\n\nTITLE: Setting File and Folder Permissions - Shell\nDESCRIPTION: Sets the file and folder permissions for the Mattermost installation, giving ownership to the `mattermost` user and group using `sudo chown`. Requires sudo privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown -R mattermost:mattermost /opt/mattermost\n```\n\n----------------------------------------\n\nTITLE: Resolving \"Too many redirects\" error - NGINX\nDESCRIPTION: This snippet demonstrates how to resolve the \"Too many redirects\" error when running Mattermost in a sub-path by adding a specific location block to the NGINX configuration. This block handles HEAD requests with a 200 OK response to prevent redirection loops.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nlocation ~* ^/sub-path {\n    client_max_body_size 250M;\n    proxy_set_header Connection \"\";\n\n    if ($request_method = HEAD) {\n        return 200;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a Compliance Report using the API\nDESCRIPTION: This snippet demonstrates how to download a generated compliance report from Mattermost using curl. It requires the report ID obtained during the report creation process. The `p9o1qx457fbc9gdrn39z9ah59o` should be replaced by the actual bearer token value. The output is saved as `report-zip.zip`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/electronic-discovery.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n  -H 'Authorization: Bearer p9o1qx457fbc9gdrn39z9ah59o' \\\n  --data '{\"status_code\":0,\"id\":\"du6kektczifqxexeroywpz3nbc\",\"message\":\"\",\"requestion_id\":\"\"}' \\\n  --output report-zip.zip \\\n  https://yourmattermosturl/api/v4/compliance/reports/du6kektczifqxexeroywpz3nbc/download\n```\n\n----------------------------------------\n\nTITLE: Updating config.json - Adding ScheduledPosts Setting\nDESCRIPTION: This snippet shows the addition of the `ScheduledPosts` setting under `ServiceSettings` in the `config.json` file.  This setting enables the scheduling and sending of messages in the future. It is a boolean setting, enabled by default.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nUnder ``ServiceSettings `` in ``config.json``:\n    - Added ``ScheduledPosts`` to enable the feature to schedule and send message in the future.\n```\n\n----------------------------------------\n\nTITLE: SMTP Connection Security - Environment Variable\nDESCRIPTION: This snippet shows the environment variable used for configuring SMTP connection security. Possible values include \"\", \"TLS\", or \"STARTTLS\". It overrides the `config.json` setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_77\n\nLANGUAGE: bash\nCODE:\n```\n``MM_EMAILSETTINGS_CONNECTIONSECURITY``\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Channels Per Team\nDESCRIPTION: This snippet demonstrates how to configure the maximum number of channels per team in Mattermost, encompassing both active and archived channels. It provides the system configuration path, config.json setting, and environment variable for adjusting this limit. The default value is 2000 for self-hosted deployments and 10000 for Cloud deployments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n``TeamSettings`` > ``MaxChannelsPerTeam`` > ``2000``\n```\n\n----------------------------------------\n\nTITLE: Configure IAM Policy for OpenSearch Cross-Cluster Replication\nDESCRIPTION: This code snippet defines the IAM policy required for enabling cross-cluster replication (CCR) in AWS OpenSearch. It grants permissions for ``es:ESHttp*`` and ``es:ESCrossClusterGet`` actions, allowing the OpenSearch cluster to communicate with another cluster for replication purposes. Replace `<region>`, `<acc_num>`, and `<domain_name>` with your actual AWS region, account number, and OpenSearch domain name respectively.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Action\": \"es:ESHttp*\",\n      \"Resource\": \"arn:aws:es:<region>:<acc_num>:domain/<domain_name>/*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Action\": \"es:ESCrossClusterGet\",\n      \"Resource\": \"arn:aws:es:<region>:<acc_num>:domain/<domain_name>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Connection Lifetime via config.json\nDESCRIPTION: This snippet shows how to configure the maximum connection lifetime in Mattermost using the `config.json` file. The `ConnMaxLifetimeMilliseconds` setting under `SqlSettings` defines the maximum time a connection can be reused, in milliseconds. The default is 3600000 milliseconds (1 hour).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n\".SqlSettings.ConnMaxLifetimeMilliseconds: 3600000\",\n```\n\n----------------------------------------\n\nTITLE: mmctl Token Generate Command\nDESCRIPTION: This command generates a token for a specified user within the Mattermost system. It requires the user's identifier (username, email, or ID) and an optional description for the token. The generated token can then be used for authentication and authorization purposes. Note that appropriate permissions are required to generate tokens for other users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_148\n\nLANGUAGE: sh\nCODE:\n```\nmmctl token generate [user] [description] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl token generate testuser test-token\n```\n\n----------------------------------------\n\nTITLE: Archiving a Team using mmctl\nDESCRIPTION: This command allows system administrators to archive a team using the Mattermost command-line tool (mmctl). It archives the team and makes its content inaccessible. Requires mmctl to be properly configured and connected to the Mattermost instance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/team-channel-members.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl team archive\n```\n\n----------------------------------------\n\nTITLE: Generating Support Packet with mmctl\nDESCRIPTION: This command generates and downloads a support packet that contains information about the Mattermost server for sharing with Mattermost support. The `-o` flag allows specifying the output filename. Requires a configured mmctl installation and appropriate permissions to access server data.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_135\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system supportpacket [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system supportpacket\n```\n\n----------------------------------------\n\nTITLE: Silent MSI Installation - Windows\nDESCRIPTION: Performs a silent installation of the Mattermost desktop app using the MSI package. This command requires the Mattermost desktop app to be closed before execution. The user must update the version details in the command as new versions of the Mattermost desktop app are released. This command requires administrator privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/desktop-msi-installer-and-group-policy-install.rst#_snippet_0\n\nLANGUAGE: Batchfile\nCODE:\n```\nmsiexec /i mattermost-desktop-v5.11.2-x64.msi /qn\n```\n\n----------------------------------------\n\nTITLE: Enabling Team Sync with mmctl\nDESCRIPTION: These steps describe how to enable team synchronization with groups using the mmctl command-line tool. First, ensure at least one group is already associated with the team. Then, confirm that \"Allow any user with an account on this server to join this team\" is set to \"No\". Finally, convert the team to be managed by synchronized groups using the `mmctl group team enable` command.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap-groups-synchronization.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group team enable\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Emoji Object - JavaScript\nDESCRIPTION: This snippet defines a custom emoji object, specifying the emoji's name and the path to its image. It shows how to include custom emoji in a Mattermost bulk import. The `image` path can be absolute or relative to the current working directory.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"emoji\",\n  \"emoji\": {\n    \"name\": \"custom-emoji-troll\",\n    \"image\": \"bulkdata/emoji/trollolol.png\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Calls Migration Configuration - Text\nDESCRIPTION: This configuration file for pgloader defines the data migration process from MySQL to PostgreSQL for the Calls plugin. It specifies the source and target databases, includes directives for creating tables and indexes, sets performance parameters, and defines type casting rules. The configuration performs pre and post-load operations using SQL to rename schemas.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\n  LOAD DATABASE\n   FROM      mysql://{{ .mysql_user }}:{{ .mysql_password }}@{{ .mysql_address }}/{{ .source_db }}\n   INTO      pgsql://{{ .pg_user }}:{{ .pg_password }}@{{ .postgres_address }}/{{ .target_db }}\n\n  WITH include drop, create tables, create indexes, reset sequences,\n   workers = 8, concurrency = 1,\n   multiple readers per thread, rows per range = 50000,\n   preserve index names\n\n  SET PostgreSQL PARAMETERS\n   maintenance_work_mem to '128MB',\n   work_mem to '12MB'\n\n  SET MySQL PARAMETERS\n   net_read_timeout  = '120',\n   net_write_timeout = '120'\n\n  CAST type json to jsonb drop typemod\n\n  INCLUDING ONLY TABLE NAMES MATCHING\n   ~/calls/\n\n  BEFORE LOAD DO\n   $$ ALTER SCHEMA public RENAME TO {{ .source_db }}; $$\n\n  AFTER LOAD DO\n   $$ ALTER SCHEMA {{ .source_db }} RENAME TO public; $$,\n   $$ SELECT pg_catalog.set_config('search_path', '\"$user\", public', false); $$;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Index for Jobs Table\nDESCRIPTION: This SQL snippet creates a composite index on the `Jobs` table in MySQL. It is recommended for installations with a large jobs table (over 1 million rows) to improve query performance during upgrades to Mattermost v6.1. Consider adding the index during off-peak hours.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_51\n\nLANGUAGE: SQL\nCODE:\n```\ncreate index idx_jobs_status_type on Jobs (Status,Type);\n```\n\n----------------------------------------\n\nTITLE: Pulling and Verifying Mattermost pgloader Docker Image\nDESCRIPTION: This code snippet pulls the mattermost-pgloader Docker image and verifies that pgloader is working correctly. It is used in manual migrations to avoid installing or building pgloader directly. The command checks the version to ensure it functions as expected.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm -v $(pwd):/home/migration mattermost/mattermost-pgloader:latest pgloader --version\n```\n\n----------------------------------------\n\nTITLE: Altering PostgreSQL Autovacuum Settings\nDESCRIPTION: This SQL statement modifies autovacuum settings for a specific table. It sets autovacuum_vacuum_scale_factor, autovacuum_analyze_scale_factor, and autovacuum_vacuum_cost_limit to custom values. This allows administrators to fine-tune vacuuming behavior on a per-table basis, optimizing performance based on table-specific characteristics.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/high-availability-cluster-based-deployment.rst#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE <table> SET (\n    autovacuum_vacuum_scale_factor = 0.1, -- default is 0.2\n    autovacuum_analyze_scale_factor = 0.05, -- default is 0.1\n    autovacuum_vacuum_cost_limit = 1000 -- default is 200\n  );\n```\n\n----------------------------------------\n\nTITLE: MySQL Collation Specification\nDESCRIPTION: This code snippet demonstrates how to specify collation settings in the `DataSource` parameter of Mattermost's `SqlSettings` for MySQL databases. It highlights how to set the character set and collation for the database connection. This is particularly relevant for ensuring proper handling of Unicode characters and can impact sorting and indexing behavior.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n  \"SqlSettings\": {\n      \"DataSource\": \"<mmuser:password>@tcp(hostname or IP:3306)/mattermost?charset=utf8mb4,utf8&collation=utf8mb4_general_ci\",\n      [...]\n  }\n```\n\n----------------------------------------\n\nTITLE: Querying config.json value using jq\nDESCRIPTION: This snippet demonstrates how to use `jq`, a command-line JSON processor, to extract a specific value (SiteName) from the Mattermost `config.json` file.  It requires `jq` to be installed. The command pipes the contents of `config.json` to `jq`, which then parses the JSON and extracts the value associated with the key `.TeamSettings.SiteName`. The output is the value of the SiteName setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncat config/config.json | jq '.TeamSettings.SiteName'\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Connection Idle Timeout via config.json\nDESCRIPTION: This snippet illustrates setting the maximum connection idle timeout in Mattermost using the `config.json` file. The `ConnMaxIdleTimeMilliseconds` setting under `SqlSettings` specifies the maximum time a database connection can remain idle, in milliseconds. The default is 300000 milliseconds (5 minutes).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n\".SqlSettings.ConnMaxIdleTimeMilliseconds: 300000\",\n```\n\n----------------------------------------\n\nTITLE: Assigning Bot Ownership with mmctl\nDESCRIPTION: This snippet demonstrates the command syntax for assigning ownership of a bot to a different user using mmctl. It uses the `mmctl bot assign` command followed by the bot's username and the new owner's username.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot assign [bot-username] [new-owner-username] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot assign testbot user2\n```\n\n----------------------------------------\n\nTITLE: Restoring Archived Team with mmctl\nDESCRIPTION: Restores archived Mattermost teams.  Requires the team name as input.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_144\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team restore [teams] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team restore myteam\n```\n\n----------------------------------------\n\nTITLE: AD/LDAP User Filter Example\nDESCRIPTION: This example demonstrates an AD/LDAP filter used to exclude disabled users. The filter identifies user objects that are not disabled based on the UserAccountControl attribute.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap.rst#_snippet_0\n\nLANGUAGE: LDAP\nCODE:\n```\n(&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS/SSL Encryption for MySQL - skip-verify\nDESCRIPTION: This snippet demonstrates how to configure Mattermost to use TLS/SSL encryption with a self-signed certificate against a MySQL server. The `tls=skip-verify` parameter instructs the client to skip verifying the server's certificate. This configuration uses the database connection string format.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\n\"<mmuser:password>@tcp(hostname or IP:3306)/mattermost_test             ?charset=utf8mb4,utf8&writeTimeout=30s&tls=skip-verify\"\n```\n\n----------------------------------------\n\nTITLE: Deleting mmctl Plugin\nDESCRIPTION: Deletes previously uploaded plugins from the Mattermost server.  The plugin names (without the extension) must be provided as arguments. This removes the plugin from the system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_118\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin delete [plugins] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin delete hovercardexample pluginexample\n```\n\n----------------------------------------\n\nTITLE: Export mmctl Configuration\nDESCRIPTION: Exports the Mattermost server configuration for backup or transfer to another server. The --remove-masked and --remove-defaults flags can be used to filter the exported configuration. Requires no specific dependencies, but should be run in local mode for masked values to be included.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_54\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config export --remove-masked --remove-defaults\n```\n\n----------------------------------------\n\nTITLE: Channel Create Example - Public\nDESCRIPTION: Demonstrates creating a new public channel named 'mynewchannel' with the display name 'My New Channel' within the 'myteam' team.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel create --team myteam --name mynewchannel --display-name \"My New Channel\"\n```\n\n----------------------------------------\n\nTITLE: Updating channelid in reactions table - PostgreSQL\nDESCRIPTION: This SQL statement updates the `channelid` column in the `reactions` table. It populates the `channelid` with the `channelid` from the `posts` table where the `posts.id` matches the `reactions.postid`. It only updates rows where `channelid` is currently empty, preventing unnecessary operations. This is to be executed before upgrading to v7.1.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/prepare-to-upgrade-mattermost.rst#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE reactions SET channelid = COALESCE((select channelid from posts where posts.id = reactions.postid), '') WHERE channelid='';\n```\n\n----------------------------------------\n\nTITLE: Configuring Export File Format - Mattermost\nDESCRIPTION: This setting determines the format of the compliance export file. Supported formats include CSV, Actiance XML, and Global Relay EML. It's configured via the System Console, config.json, or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Configuring Database Connection String\nDESCRIPTION: This snippet demonstrates how to configure the database connection string for Mattermost, specifically for MySQL. It includes the user, password, host, port, and database name. It also shows how to escape special characters within the password.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nMM_CONFIG='mysql://mmuser:mostest@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8&writeTimeout=30s'\n```\n\n----------------------------------------\n\nTITLE: Mattermost config.json ServiceSettings before TLS\nDESCRIPTION: This snippet shows the relevant section of the Mattermost `config.json` file *before* enabling TLS encryption between the proxy and the application server.  The settings `ConnectionSecurity`, `TLSCertFile`, and `TLSKeyFile` are initially empty.  This is the starting point for configuring TLS.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ServiceSettings\": {\n        \"SiteURL\": \"https://transport-encryption.dev.example.com\",\n        \"WebsocketURL\": \"\",\n        \"LicenseFileLocation\": \"\",\n        \"ListenAddress\": \":8065\",\n        \"ConnectionSecurity\": \"\",\n        \"TLSCertFile\": \"\",\n        \"TLSKeyFile\": \"\",\n        \"...\":\"...\"\n    },\n    \"...\":\"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Bot with mmctl\nDESCRIPTION: This snippet shows how to create a new bot using the `mmctl bot create` command. It requires a username for the bot and optionally accepts flags to set the description, display name, and generate an access token.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot create [username] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot create testbot\n```\n\n----------------------------------------\n\nTITLE: Creating a Mattermost Bulk Import Zip File\nDESCRIPTION: This command creates a zip archive containing the `.jsonl` file (mattermost_import.jsonl) and the `data` directory for importing into Mattermost.  This zip file is then uploaded to the Mattermost server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrate-from-slack.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nzip -r mattermost-bulk-import.zip data mattermost_import.jsonl\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Client Authentication\nDESCRIPTION: This code snippet shows how to add a line to pg_hba.conf to allow connections from a specific IP address (mattermost-server-IP) to the database. Replace {mattermost-server-IP} with the Mattermost server's IP address.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhost all all {mattermost-server-IP}/32 md5\n```\n\n----------------------------------------\n\nTITLE: Install and Configure SCWS for Chinese Search (PostgreSQL)\nDESCRIPTION: This snippet downloads, extracts, configures, compiles, and installs SCWS (Simple Chinese Words Segmentation) for use with PostgreSQL. It includes steps to obtain the SCWS code, decompress it, enter the directory, and execute the configuration, compilation, and installation process. It also includes optional steps to check file existence and install dictionaries.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/enabling-chinese-japanese-korean-search.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# 取得 SCWS 代码\nwget http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2\n# 解压缩\ntar xvjf scws-1.2.3.tar.bz2\n# 进入解压后的目录\ncd scws-1.2.3\n# 执行配置脚本、编译并安装\n./configure --prefix=/usr/local/scws ; make ; make install\n    \n# 可选：检查文件是否存在\nls -al /usr/local/scws/lib/libscws.la\n/usr/local/scws/bin/scws -h\n# 可选：将词典安装在 /usr/local/scws/etc 中\ncd /usr/local/scws/etc\nwget http://www.xunsearch.com/scws/down/scws-dict-chs-gbk.tar.bz2\nwget http://www.xunsearch.com/scws/down/scws-dict-chs-utf8.tar.bz2\ntar xvjf scws-dict-chs-gbk.tar.bz2\ntar xvjf scws-dict-chs-utf8.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Object in JavaScript\nDESCRIPTION: This JavaScript code snippet represents a Channel object structure used for bulk import into Mattermost. It demonstrates the required fields such as 'team', 'name', 'display_name', 'type', 'header', and 'purpose'. The 'type' field indicates the channel visibility (public or private).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"channel\",\n    \"channel\": {\n      \"team\": \"team-name\",\n      \"name\": \"channel-name\",\n      \"display_name\": \"Channel Name\",\n      \"type\": \"O\",\n      \"header\": \"The Channel Header\",\n      \"purpose\": \"The Channel Purpose\",\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Endpoint\nDESCRIPTION: This snippet shows the config.json setting and environment variable to set the Amazon S3 endpoint. The endpoint specifies the hostname of the S3-compatible instance. The default value is s3.amazonaws.com. For Digital Ocean Spaces, it needs to be set to <region>.digitaloceanspaces.com.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.AmazonS3Endpoint: s3.amazonaws.com\",\n```\n\n----------------------------------------\n\nTITLE: Configure Vary Rate Limit by Remote Address - config.json\nDESCRIPTION: This setting configures Mattermost to rate limit API access based on the remote IP address of the client.  When set to `true` (default), rate limiting is applied per IP address. It is recommended when using a proxy.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/rate-limiting-configuration-settings.rst#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\".RateLimitSettings.VaryByRemoteAddr: true,”\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile Biometric Authentication\nDESCRIPTION: This snippet shows how to configure mobile biometric authentication in Mattermost by editing the config.json file. It enforces biometric authentication (with PIN/passcode fallback) before accessing the app.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_109\n\nLANGUAGE: json\nCODE:\n```\n\".NativeAppSettings.MobileEnableBiometrics\": false\n```\n\n----------------------------------------\n\nTITLE: License File Location Configuration\nDESCRIPTION: This snippet shows how to configure the license file location for the Mattermost server.  It includes the config.json setting and the environment variable used to specify the path to the license file. This setting enables Mattermost to locate and load the license on startup.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n``\".ServiceSettings.LicenseFileLocation: \"\",``\n```\n\nLANGUAGE: text\nCODE:\n```\n``MM_SERVICESETTINGS_LICENSEFILELOCATION``\n```\n\n----------------------------------------\n\nTITLE: Renaming PostgreSQL Schema\nDESCRIPTION: This SQL command renames a PostgreSQL schema to 'public'. This is used to revert schema changes made during the pgloader process if errors occur and need to be corrected.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration.rst#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER SCHEMA <schema_name> RENAME TO public;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for Mattermost Monitoring in YAML\nDESCRIPTION: This YAML configuration file configures Prometheus to scrape metrics from Mattermost servers. It defines global settings such as scrape and evaluation intervals, external labels, and scrape configurations. The scrape configuration specifies the Mattermost host IP address and port to collect data from the /metrics endpoint.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/deploy-prometheus-grafana-for-performance-monitoring.rst#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# my global config\nglobal:\n   scrape_interval:     60s # By default, scrape targets every 15 seconds.\n   evaluation_interval: 60s # By default, scrape targets every 15 seconds.\n   # scrape_timeout is set to the global default (10s).\n\n   # Attach these labels to any time series or alerts when communicating with\n   # external systems (federation, remote storage, Alertmanager).\n   external_labels:\n      monitor: 'mattermost-monitor'\n\n# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.\nrule_files:\n   # - \"first.rules\"\n   # - \"second.rules\"\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n   # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n   - job_name: 'prometheus'\n\n   # Override the global default and scrape targets from this job every five seconds.\n   # scrape_interval: 5s\n\n   # metrics_path defaults to '/metrics'\n   # scheme defaults to 'http'.\n\n   static_configs:\n      - targets: [\"<hostname1>:<port>\", \"<hostname2>:<port>\"]\n```\n\n----------------------------------------\n\nTITLE: Adding New GPG Key (Ubuntu Jammy - 22.04 LTS and Ubuntu Noble - 24.04 LTS)\nDESCRIPTION: Adds the new Mattermost PPA GPG public key to the system, specifically for Ubuntu Jammy and Noble. It downloads the key, converts it to the proper format, and saves it to the correct keyring location.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sL -o- https://deb.packages.mattermost.com/pubkey.gpg |  gpg --dearmor | sudo tee /usr/share/keyrings/mattermost-archive-keyring.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Install Certbot via Snap\nDESCRIPTION: This command installs Certbot using Snap, a package management system. The --classic flag grants Certbot the necessary permissions to modify system files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nsudo snap install --classic certbot\n```\n\n----------------------------------------\n\nTITLE: System Tuning for High-Performance Mattermost Calls on Linux\nDESCRIPTION: These system tunings optimize UDP buffer sizes and memory allocation for hosting a large number of calls or calls with many participants on a Linux system.  Increasing `rmem_max`, `wmem_max`, and `optmem_max` allows for handling more network traffic effectively.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/calls-deployment.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Setting the maximum buffer size of the receiving UDP buffer to 16MB\nnet.core.rmem_max = 16777216\n\n# Setting the maximum buffer size of the sending UDP buffer to 16MB\nnet.core.wmem_max = 16777216\n\n# Allow to allocate more memory as needed for more control messages that need to be sent for each socket connected\nnet.core.optmem_max = 16777216\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Rebuild PublicChannels Table\nDESCRIPTION: This SQL code snippet is used to rebuild the materialized `PublicChannels` table in the Mattermost database. It first deletes all existing entries from the `PublicChannels` table and then inserts data from the `Channels` table where the channel type is 'O' (Open/Public). This is required if `EnablePublicChannelsMaterialization` is set to `false` before upgrading to increase channel search performance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_60\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM PublicChannels;\nINSERT INTO PublicChannels\n    (Id, DeleteAt, TeamId, DisplayName, Name, Header, Purpose)\nSELECT\n    c.Id, c.DeleteAt, c.TeamId, c.DisplayName, c.Name, c.Header, c.Purpose\nFROM\n    Channels c\nWHERE\n    c.Type = 'O';\n```\n\n----------------------------------------\n\nTITLE: Setting App Custom URL Schemes via Environment Variable\nDESCRIPTION: This example demonstrates how to set the App Custom URL Schemes using an environment variable. This setting defines valid custom URL schemes for redirect links provided by custom-built mobile Mattermost apps. The value is a space-separated list of URL schemes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMM_NativeAppSettings_AppCustomURLSchemes = mmauth:// mmauthbeta://\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration (Text)\nDESCRIPTION: This configures Nginx to request and verify client certificates. It ensures only clients with valid certificates can access the Mattermost server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n:emphasize-lines: 4-5, 10-11, 16-17\n\nssl on;\nssl_certificate /etc/letsencrypt/live/example.mattermost.com/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/example.mattermost.com/privkey.pem;\nssl_client_certificate /opt/mattermost/config/ca.mattermost.crt;\nssl_verify_client on;\n\n...\n\nlocation ~ /api/v[0-9]+/(users/)?websocket$ {\n proxy_set_header X-SSL-Client-Cert $ssl_client_cert;\n proxy_set_header X-SSL-Client-Cert-Subject-DN $ssl_client_s_dn;\n \n...\n\nlocation / {\n proxy_set_header X-SSL-Client-Cert $ssl_client_cert;\n proxy_set_header X-SSL-Client-Cert-Subject-DN $ssl_client_s_dn;\n \n...\n```\n\n----------------------------------------\n\nTITLE: Signing a Debian Package on Linux\nDESCRIPTION: Signs a Debian package using the dpkg-sig tool. Requires dpkg-sig and GnuPG to be installed. The builder argument specifies the signing key, and your-package.deb should be replaced with the actual package file name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndpkg-sig --sign builder your-package.deb\n```\n\n----------------------------------------\n\nTITLE: mmctl User Migrate-Auth Command\nDESCRIPTION: The `mmctl user migrate-auth` command facilitates the migration of user accounts between different authentication providers (e.g., from email to LDAP or SAML).  The command requires specifying the source and destination authentication types, as well as any migration-specific options such as a user mapping file for SAML migration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_175\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user migrate-auth email saml users.json\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL: Updating threadteamid with teamid from channels\nDESCRIPTION: This SQL snippet updates the threadteamid column in the threads table with teamid values from the channels table in PostgreSQL. It joins the tables on channelid to retrieve the correct team ID for each thread, only updating rows where threadteamid is currently NULL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE threads\nSET threadteamid = channels.\n  teamid\nFROM channels\nWHERE threads.threadteamid IS\n  NULL\n  AND channels.id = threads.\n  channelid;\n```\n\n----------------------------------------\n\nTITLE: Signing Executable with SignTool on Windows\nDESCRIPTION: Signs an executable file using the SignTool utility, incorporating certificate details and timestamping. It requires the Windows SDK, a code signing certificate installed in the Windows Certificate Store, and administrator privileges to execute. The <cert hash> placeholder must be replaced with the SHA1 hash of the signing certificate, and <path-to-your-executable> with the actual path.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsigntool sign /v /s \"My\" /sha1 <cert hash> /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 <path-to-your-executable>\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Vacuuming Statistics\nDESCRIPTION: This SQL query retrieves vacuuming and analyzing statistics from the pg_stat_user_tables view. It provides information about table activity, including inserts, updates, deletes, live tuples, dead tuples, and the last time autovacuum and autoanalyze ran. The query is ordered by dead tuples in descending order to identify tables that may require more frequent vacuuming.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/high-availability-cluster-based-deployment.rst#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT relname, n_tup_ins as inserts,n_tup_upd as updates,n_tup_del as deletes, n_live_tup as live_tuples, n_dead_tup as dead_tuples, n_mod_since_analyze, last_autovacuum, last_autoanalyze, autovacuum_count, autoanalyze_count FROM pg_stat_user_tables order by dead_tuples desc LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Creating index on reactions table - PostgreSQL\nDESCRIPTION: This SQL statement creates a concurrent index on the `reactions` table for the `channelid` column, if it doesn't already exist. The `CONCURRENTLY` option allows the index to be created without locking the table, minimizing downtime during the upgrade to Mattermost v7.1.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/prepare-to-upgrade-mattermost.rst#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX CONCURRENTLY IF NOT EXISTS idx_reactions_channel_id on reactions (channelid);\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Users Per Team\nDESCRIPTION: This snippet demonstrates how to configure the maximum number of users per team in Mattermost. It details the system configuration path, config.json setting, and environment variable to adjust the limit. The default value is 50 for self-hosted and 10000 for cloud deployments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n``TeamSettings`` > ``MaxUsersPerTeam`` > ``50``\n```\n\n----------------------------------------\n\nTITLE: Checking MySQL Status\nDESCRIPTION: This snippet allows you to check if the MySQL server is running. It uses the `mysqladmin` command-line tool to retrieve the server's status, requiring root privileges and password authentication.  The output shows uptime, threads, queries, and other server statistics. It depends on the mysql-admin package installed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmysqladmin -u root -p status\n```\n\n----------------------------------------\n\nTITLE: Configuring Extend Session Length via config.json\nDESCRIPTION: This setting controls whether user sessions are automatically extended when users are active in their Mattermost client. It's configured via the config.json file. `true` extends sessions, and `false` disables the extension, relying on configured session lengths or idle timeouts.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_91\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.ExtendSessionLengthWithActivity: true,\n```\n\n----------------------------------------\n\nTITLE: Deleting Old GPG Key (Ubuntu Focal - 20.04 LTS)\nDESCRIPTION: Deletes the old GPG public key from the system. This step is recommended before adding the new apt repository, especially for installations that didn't rely on the repository setup script.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-key del A1B31D46F0F3A10B02CF2D44F8F2C31744774B28\n```\n\n----------------------------------------\n\nTITLE: Docker Compose GitLab PKI Chain Volume\nDESCRIPTION: Example of mounting the GitLab PKI chain file as a volume in the `docker-compose.yml` file for configuring SSO with GitLab using a self-signed certificate.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# - ${GITLAB_PKI_CHAIN_PATH}:/etc/ssl/certs/pki_chain.pem:ro\n```\n\n----------------------------------------\n\nTITLE: Enable Security Alerts - Environment Variable\nDESCRIPTION: This snippet displays the environment variable used to enable or disable security alerts. When enabled, system admins are notified by email about security fixes. It overrides `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\n``MM_SERVICESETTINGS_ENABLESECURITYFIXALERT``\n```\n\n----------------------------------------\n\nTITLE: Configuring Support Email Address\nDESCRIPTION: This setting defines the email address displayed on email notifications and during the Getting Started tutorial for user support or feedback.  If no value is set, email notifications will not contain a way for users to request assistance. The default is feedback@mattermost.com.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``.SupportSettings.SupportEmail``\n```\n\n----------------------------------------\n\nTITLE: Reloading systemd Daemon\nDESCRIPTION: This command reloads the systemd daemon, applying any changes made to the systemd unit files. This is necessary after modifying the Mattermost systemd unit file to ensure that the changes are reflected in the running system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Setting Console Log Level\nDESCRIPTION: This setting determines the level of detail in log events written to the console. Configuration options include DEBUG, ERROR, and INFO, configurable through the System Console, `config.json` setting `.LogSettings.ConsoleLevel`, or the MM_LOGSETTINGS_CONSOLELEVEL environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_85\n\nLANGUAGE: text\nCODE:\n```\n\".LogSettings.ConsoleLevel\": DEBUG\",``\n```\n\n----------------------------------------\n\nTITLE: Reloading Nginx configuration\nDESCRIPTION: This snippet reloads the Nginx configuration to apply changes made to the proxy configuration file.  This is necessary to activate the HTTPS proxy configuration.  It requires root or sudo privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl reload nginx\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Mattermost Calls and RTCD Metrics\nDESCRIPTION: This Prometheus configuration scrapes metrics from both the Mattermost Calls plugin and the external rtcd service. It defines separate jobs for node, calls plugin and rtcd service, specifying the metrics paths and target instances to monitor. This allows for centralized monitoring of performance data.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/calls-deployment.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n- job_name: node\n  static_configs:\n    - targets: ['rtcd-0:9100','rtcd-1:9100', 'calls-offloader-1:9100', 'calls-offloader-2:9100']\n- job_name: calls\n   metrics_path: /plugins/com.mattermost.calls/metrics\n   static_configs:\n     - targets: ['app-0:8067','app-1:8067','app-2:8067']\n- job_name: rtcd\n   static_configs:\n     - targets: ['rtcd-0:8045', 'rtcd-1:8045']\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL to Listen on All Addresses\nDESCRIPTION: This code snippet shows how to modify the postgresql.conf file to allow PostgreSQL to listen for connections on all network interfaces.  This is necessary for remote database access.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nlisten_addresses = '*'\n```\n\n----------------------------------------\n\nTITLE: Setting File Storage Permissions\nDESCRIPTION: This code snippet sets the ownership of the local file storage directory to the mattermost user and group. This ensures that Mattermost has the necessary permissions to read and write files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown -R mattermost:mattermost /opt/mattermost/data\n```\n\n----------------------------------------\n\nTITLE: Downloading mmctl Release Package (Linux)\nDESCRIPTION: Downloads a specific version of the mmctl tool for Linux using `curl`.  The command constructs a URL based on the desired version (e.g., v8.0.0) and architecture (amd64). The `-vfsSL` flags provide verbose output, fail silently on errors, follow redirects, and show download progress. The downloaded archive is saved with the same filename as the URL's basename.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -vfsSL -O https://releases.mattermost.com/mmctl/v8.0.0/linux_amd64.tar\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Amazon S3 Connections\nDESCRIPTION: This snippet shows the config.json setting and environment variable to enable or disable secure Amazon S3 connections. When set to true (default), only secure HTTPS connections are allowed to Amazon S3.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.AmazonS3SSL: true\",\n```\n\n----------------------------------------\n\nTITLE: Configure Memory Store Size - config.json\nDESCRIPTION: This setting determines the maximum number of user sessions that can be stored in memory for rate limiting purposes.  It's typically set to the expected number of users in the system to optimize resource usage.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/rate-limiting-configuration-settings.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\".RateLimitSettings.MemoryStoreSize: 10000,”\n```\n\n----------------------------------------\n\nTITLE: Restore File Permissions (Troubleshooting)\nDESCRIPTION: These commands are used to restore file permissions after a manual change, particularly when troubleshooting issues like Mattermost reverting to Team Edition. `<OriginalFileOwner>` should be replaced with the correct owner, and `<PathToBinaryFile>` with the binary path, such as `/opt/mattermost/bin/mattermost`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/enterprise-install-upgrade.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nchown <OriginalFileOwner> <PathToBinaryFile>\nchmod -w <PathToBinaryFile>\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticated Outbound Proxy Environment Variables (Text)\nDESCRIPTION: This snippet demonstrates setting environment variables to configure an outbound proxy with authentication for Mattermost. It shows how to include credentials (username and password) in the HTTP_PROXY and HTTPS_PROXY URLs. These settings are used when the proxy server requires authentication.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nEnvironment=HTTP_PROXY=http://username:password@proxy.example.com:3128\nEnvironment=HTTPS_PROXY=https://username:password@proxy.example.com:3128\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Disable Cloud Settings\nDESCRIPTION: This snippet describes the new configuration setting CloudSettings.Disable, which, when set to true, disables all requests to the Mattermost Customer Portal from a workspace. It can be set via config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n\"CloudSettings.Disable\": true\n```\n\n----------------------------------------\n\nTITLE: NGINX Management Commands\nDESCRIPTION: These commands provide the user with instructions to manage the NGINX web server. The snippet shows how to stop, start, restart, reload, enable, and disable the NGINX service using `systemctl`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl stop nginx\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start nginx\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl restart nginx\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl reload nginx\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl disable nginx\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable nginx\n```\n\n----------------------------------------\n\nTITLE: mmctl LDAP Sync Usage\nDESCRIPTION: This snippet demonstrates the use of the `mmctl ldap sync` command to synchronize all LDAP users and groups. It presents the command format and a straightforward example.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_104\n\nLANGUAGE: sh\nCODE:\n```\nmmctl ldap sync [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl ldap sync\n```\n\n----------------------------------------\n\nTITLE: Downloading Mattermost Server Tarball (Latest Release) - Shell\nDESCRIPTION: Downloads the latest release of the Mattermost Server tarball using wget. Replace `amd64` with the appropriate architecture if needed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwget https://releases.mattermost.com/10.7.0/mattermost-10.7.0-linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Mention an LDAP Group in Mattermost\nDESCRIPTION: This example shows how to mention an LDAP synced group using @groupname, which sends a notification to all members of the group who are also members of the channel. The group mention identifiers (slugs) use the LDAP group name by default, but can be customized via the System Console.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/mention-people.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n@dev-managers great work hitting all of our code coverage goals this quarter!\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Storage Class Configuration\nDESCRIPTION: This snippet configures the storage class used for uploads to S3-compatible storage solutions. It is crucial for some S3-compatible solutions that require this parameter. The default is an empty string, and the configuration can be set via the system console, config.json file, or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_61\n\nLANGUAGE: text\nCODE:\n```\nconfig.json setting: \".FileSettings.AmazonS3StorageClass: \\\"\\\"\",\nEnvironment variable: \"MM_FILESETTINGS_AMAZONS3STORAGECLASS\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Group Management for Teams using mmctl\nDESCRIPTION: This snippet demonstrates how to enable group-based membership management for a Mattermost team using the `mmctl group team enable` command.  Before running, ensure at least one group is associated with the team and that \"Allow any user with an account on this server to join this team\" is disabled in Team Settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/managing-team-channel-membership-using-ad-ldap-sync-groups.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group team enable\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Data Volume with Docker Compose YAML\nDESCRIPTION: This snippet demonstrates how to configure the Prometheus data volume within a `docker-compose.yml` file.  It defines two volumes: one for the Prometheus configuration and another that mounts the directory containing the Mattermost performance metric dump to `/prometheus/data` within the Prometheus container.  The dump must be decompressed before use.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/collect-performance-metrics.rst#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - ./prometheus:/etc/prometheus\n  - /Path/To/Dump/Directory:/prometheus/data\n```\n\n----------------------------------------\n\nTITLE: Split Compressed Logs into Multiple Files\nDESCRIPTION: This set of commands splits a large compressed log file into smaller chunks. It first creates a directory to store the split files, then changes the current directory to the newly created directory. The `tar` command extracts and pipes the log, which is then split into 20MB files named with a suffix. This is useful for transferring large logs that exceed size limitations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/troubleshooting.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p /tmp/mattermost-logs\ncd /tmp/mattermost-logs\ntar czf - /opt/mattermost/logs/mattermost.log | split -b 20m - mattermost.log.tgz.\n```\n\n----------------------------------------\n\nTITLE: Uploading an Import File with mmctl\nDESCRIPTION: This command uploads an import file to the server. It requires the file path as an argument. The `--resume` flag and `--upload` option allow resuming incomplete uploads. Use the `-h` or `--help` flag for command specific help.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_96\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import upload [filepath] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import upload import_file.zip\n```\n\n----------------------------------------\n\nTITLE: Get Mattermost Ingress Details using Kubectl\nDESCRIPTION: This shell command retrieves the Ingress details for the Mattermost deployment using `kubectl`. It specifically targets the `mattermost-operator` namespace to identify the IP address assigned to the Mattermost Ingress, which is crucial for DNS configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s-aks.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl -n mattermost-operator get ingress\n```\n\n----------------------------------------\n\nTITLE: Install Mattermost Operator with Helm\nDESCRIPTION: Installs the Mattermost Operator using Helm in the specified namespace.  Uses the mattermost/mattermost-operator chart. It can be customized with a config.yaml file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhelm install <your-release-name> mattermost/mattermost-operator -n <namespace_name>\n```\n\n----------------------------------------\n\nTITLE: Certbot challenge failure - NGINX\nDESCRIPTION: This snippet shows example error message when Certbot is unable to access port 80, usually due to firewall or DNS configuration issues. It suggests verifying A/AAAA records and NGINX server_name configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nRequesting a certificate for yourdomain.com\nPerforming the following challenges:\nhttp-01 challenge for yourdomain.com\nWaiting for verification...\nChallenge failed for domain yourdomain.com\nhttp-01 challenge for yourdomain.com\nCleaning up challenges\nSome challenges have failed.\n```\n\n----------------------------------------\n\nTITLE: Starting the Mattermost Server - Shell\nDESCRIPTION: Starts the Mattermost Server using systemctl and requires sudo privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start mattermost\n```\n\n----------------------------------------\n\nTITLE: Terminate Sessions on Password Change Setting\nDESCRIPTION: This configuration setting, located under `ServiceSettings` in `config.json`, allows administrators to configure session revocation during password resets. It's available for all plans.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ServiceSettings\": {\n    \"TerminateSessionsOnPasswordChange\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Bash Autocompletion Script\nDESCRIPTION: Generates bash autocompletion scripts for the mmctl command-line tool. To enable completion, the output must be sourced or added to the ~/.bashrc file. No external dependencies are required other than bash itself.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_51\n\nLANGUAGE: sh\nCODE:\n```\n. <(mmctl completion bash)\n```\n\n----------------------------------------\n\nTITLE: Creating index on PropertyValues for TargetID and GroupID in PostgreSQL\nDESCRIPTION: Creates an index named `idx_propertyvalues_targetid_groupid` on the `PropertyValues` table in PostgreSQL if it doesn't already exist. The index is on the `TargetID` and `GroupID` columns. This is likely to optimize queries that filter or sort based on both the target ID and group ID, improving query performance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\n CREATE INDEX IF NOT EXISTS idx_propertyvalues_targetid_groupid ON PropertyValues (TargetID, GroupID);\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Authentication Method\nDESCRIPTION: This SQL command alters a MySQL user's authentication method to mysql_native_password. This is a workaround for a known pgloader issue when migrating from MySQL v8.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration.rst#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER '<mysql_user>'@'%' IDENTIFIED WITH mysql_native_password BY '<mysql_password>';\n```\n\n----------------------------------------\n\nTITLE: TLS Minimum Version Configuration\nDESCRIPTION: This snippet describes configuring the minimum TLS version for the Mattermost server. It specifies the setting within the config.json file and the environment variable used to set the TLS minimum version. The default value is 1.2.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n``\".ServiceSettings.TLSMinVer: 1.2\",``\n```\n\nLANGUAGE: text\nCODE:\n```\n``MM_SERVICESETTINGS_TLSMINVER``\n```\n\n----------------------------------------\n\nTITLE: Managing export jobs with mmctl\nDESCRIPTION: This command is a parent command that lists, shows, and exports jobs using mmctl. The command requires the mmctl tool to be configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_71\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help   help for job\n```\n\n----------------------------------------\n\nTITLE: Checking for Invalid JSON Values in SQL\nDESCRIPTION: This SQL query counts the number of rows in a table where a specific column contains the invalid JSON character '\\u0000'.  It helps identify affected values before attempting to fix them. The parameters <table> and <column> should be replaced with the actual table and column names.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_52\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT COUNT(*) FROM <table> WHERE <column> LIKE '%\\u0000%';\n```\n\n----------------------------------------\n\nTITLE: Setting SELinux to Permissive Mode - Shell\nDESCRIPTION: This command temporarily sets SELinux to permissive mode, which disables policy enforcement and only logs violations. It is useful for debugging and troubleshooting SELinux-related issues. It requires sudo privileges and should be reverted after testing.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nsudo setenforce 0\n```\n\n----------------------------------------\n\nTITLE: Start Elasticsearch Service\nDESCRIPTION: Starts the Elasticsearch service. This command initiates the Elasticsearch process, making it available for indexing and searching data.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start elasticsearch.service\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Omnibus with SSL\nDESCRIPTION: Installs the Mattermost Omnibus package with SSL enabled using the apt package manager. The `-y` flag automatically answers yes to any prompts during the installation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n// Install Mattermost Omnibus with SSL enabled\nsudo apt install mattermost-omnibus -y\n```\n\n----------------------------------------\n\nTITLE: Renewing Authentication Credentials with mmctl\nDESCRIPTION: This snippet demonstrates the command syntax for renewing authentication credentials for a specific server using mmctl. It involves using the `mmctl auth renew` command followed by any applicable flags such as `-t`, `-m`, or `-f` for providing access tokens, MFA tokens, or password files respectively.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth renew [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth renew local-server\n```\n\n----------------------------------------\n\nTITLE: Configure LiveIndexingBatchSize in config.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `LiveIndexingBatchSize` setting within the `config.json` file for Mattermost.  The `LiveIndexingBatchSize` setting controls the number of new posts batched together before being added to the Elasticsearch index.  Adjusting this value can help optimize Elasticsearch performance under heavy load. The value provided in this example is 200.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_40\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ElasticsearchSettings\": {\n    \"LiveIndexingBatchSize\": 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Strict Transport Security (HSTS) Configuration\nDESCRIPTION: This snippet details configuring Strict Transport Security (HSTS). It provides the config.json setting and the environment variable for enabling or disabling HSTS.  When enabled, it forces browsers to request all resources via HTTPS.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n``\".ServiceSettings.TLSStrictTransport: false\",``\n```\n\nLANGUAGE: text\nCODE:\n```\n``MM_SERVICESETTINGS_TLSSTRICTTRANSPORT``\n```\n\n----------------------------------------\n\nTITLE: Deploying Mattermost with NGINX\nDESCRIPTION: Deploys Mattermost using Docker Compose, including the included NGINX reverse proxy for HTTPS access. Requires `docker-compose.yml` and `docker-compose.nginx.yml` files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f docker-compose.yml -f docker-compose.nginx.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Connect to Object Storage in Mattermost Manifest\nDESCRIPTION: Snippet demonstrating how to configure the Mattermost installation to use external object storage by specifying the URL, bucket, and filestore secret.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  fileStore:\n    external:\n      url: <storage-service-url>  # The URL of your storage service (e.g., s3.amazonaws.com)\n      bucket: <bucket-name>      # The name of your storage bucket\n      secret: <filestore-secret-name> # The name of the filestore secret (e.g., my-s3-credentials)\n```\n\n----------------------------------------\n\nTITLE: Setting Server Busy State with mmctl\nDESCRIPTION: This command sets the server to a busy state for a specified duration (in seconds), disabling non-critical services. The `-s` flag specifies the number of seconds the server should remain in the busy state. It requires mmctl to be configured and authorized to modify server settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_133\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system setbusy -s [seconds] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system setbusy -s 3600\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure Outgoing Connections - Mattermost\nDESCRIPTION: This snippet describes how to configure the enable insecure outgoing connections setting in Mattermost. This setting allows outgoing HTTPS requests to accept unverified, self-signed certificates. The setting can be configured via the System Console, config.json file, and the environment variable MM_SERVICESETTINGS_ENABLEINSECUREOUTGOINGCONNECTIONS. Enabling this feature can make connections susceptible to man-in-the-middle attacks.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.EnableInsecureOutgoingConnections: false\"\n```\n\n----------------------------------------\n\nTITLE: Getting Server Version with mmctl\nDESCRIPTION: This command prints the server version and build number of the connected Mattermost instance. It is useful for verifying the installed version of the server. The command requires mmctl to be correctly configured and connected to the Mattermost server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_136\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system version [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system version\n```\n\n----------------------------------------\n\nTITLE: ID-Only Push Notification Payload Example (JSON)\nDESCRIPTION: This JSON payload illustrates the structure of a push notification when the ID-Only Push Notification setting is enabled in Mattermost Enterprise. Instead of sending the full message content, only a unique message ID (post_id) is included. The mobile app then uses this ID to fetch the message content directly from the server, enhancing data privacy.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/mobile/mobile-faq.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ack_id\": \"nnfbqk5bnffe5karxuzs8o5rec\",\n    \"platform\": \"apple_rn\",\n    \"server_id\": \"aoej8izzfffr9e67d6uz3g387h\",\n    \"device_id\": \"32f198dbdd7427be7e6f03ba721ffdceba58c3f0bfa9c4655a6e7cc8271ba539\",\n    \"post_id\": \"77d9cs9aq3b1fpoepbdbmqfs4c\",\n    \"category\": \"CAN_REPLY\",\n    \"message\": \"You've received a new message.\",\n    \"badge\": 3,\n    \"channel_id\": \"et3ghiycm7g7bb41ihg85pqgah\",\n    \"type\": \"message\",\n    \"sender_id\": \"g774dzud4tgaxgphso4wm8xrxe\",\n    \"version\": \"v2\",\n    \"is_id_loaded\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Install Elasticsearch ICU Plugin\nDESCRIPTION: Installs the icu-analyzer plugin for Elasticsearch, providing advanced text analysis capabilities. The plugin is installed using the elasticsearch-plugin command.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-icu\n```\n\n----------------------------------------\n\nTITLE: Creating Index on Posts Table - Postgres\nDESCRIPTION: This SQL command creates an index on the `posts` table in Postgres. The index is named `idx_posts_create_at_id` and is based on the `createat` and `id` columns. `CONCURRENTLY` avoids locking the table during index creation. `IF NOT EXISTS` prevents errors if the index already exists.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX CONCURRENTLY IF NOT EXISTS idx_posts_create_at_id on posts(createat, id);\n```\n\n----------------------------------------\n\nTITLE: Checking MySQL database schema (migration-assist)\nDESCRIPTION: This command checks the MySQL database schema for issues before migration. It outputs the readiness status and provides flags to fix common problems, such as artifacts from older Mattermost versions, unsupported Unicode characters, and varchar overflows.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmigration-assist mysql \"<MYSQL_DSN>\" # example DSN: \"user:password@tcp(address:3306)/db_name\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Idle Timeout - Mattermost\nDESCRIPTION: This snippet describes how to configure the idle timeout setting in Mattermost. The idle timeout determines the maximum time, in seconds, before an idle connection is disconnected. The setting can be configured via the System Console, config.json file, and the environment variable MM_SERVICESETTINGS_IDLETIMEOUT. The default value is 300 seconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.IdleTimeout: 300\"\n```\n\n----------------------------------------\n\nTITLE: Modify Message Column in MySQL\nDESCRIPTION: This SQL command alters the `Message` column in the `Posts` table of a MySQL database to the `TEXT` data type. This is necessary for migrating Mattermost to newer versions where the message field requires more storage. Ensure you have the correct database connection established before running this command.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_61\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE Posts MODIFY COLUMN Message TEXT;\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Plugins from URL with mmctl\nDESCRIPTION: Installs a Mattermost plugin from a specified URL.  The URL must point to a `.tar.gz` file containing the plugin. The server must allow plugin installations. The command can install multiple plugins by specifying multiple URLs. The `--force` flag overwrites previously installed plugins with the same ID.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_121\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin install-url <url>... [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl plugin install-url https://example.com/mattermost-plugin.tar.gz\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl plugin install-url https://example.com/mattermost-plugin-one.tar.gz https://example.com/mattermost-plugin-two.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Preparing MySQL server for SSL connections\nDESCRIPTION: This command uses the `mysql_ssl_rsa_setup` utility to generate self-signed certificates for SSL connections to the MySQL server. The certificates are stored in `/var/lib/mysql/`. This is a prerequisite to enabling TLS for connections to the MySQL server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo mysql_ssl_rsa_setup --uid=mysql\n```\n\n----------------------------------------\n\nTITLE: Enabling Colorized Console Logs\nDESCRIPTION: This setting enables the display of plain text log level details in color.  It can be enabled/disabled through the `config.json` setting `.LogSettings.EnableColor` or the environment variable MM_LOGSETTINGS_ENABLECOLOR. When enabled (true), log level details are colorized in the console.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_87\n\nLANGUAGE: text\nCODE:\n```\n\".LogSettings.EnableColor\"\n```\n\n----------------------------------------\n\nTITLE: mmctl User Email Format\nDESCRIPTION: Shows the format for the `mmctl user email` command.  It takes a user identifier and the new email address, and optional flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_171\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user email [user] [new email] [flags]\n```\n\n----------------------------------------\n\nTITLE: SMTP Server Setting - Environment Variable\nDESCRIPTION: This snippet shows the environment variable used to configure the SMTP server address in Mattermost. Using environment variables allows for flexible configuration, especially in containerized deployments. The environment variable overrides the value in `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\n``MM_EMAILSETTINGS_SMTPSERVER``\n```\n\n----------------------------------------\n\nTITLE: Enabling Mattermost Service at Boot (systemd)\nDESCRIPTION: This command enables the Mattermost service to start automatically at system boot using systemd. It ensures that the Mattermost server is launched whenever the system restarts.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/troubleshooting.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable mattermost.service\n```\n\n----------------------------------------\n\nTITLE: Goroutine Health Threshold Configuration\nDESCRIPTION: This setting sets a threshold on the number of goroutines. When the Mattermost system exceeds this limit, a warning is returned in the server logs. A default value of -1 turns off checking for the threshold. The setting is configured either via config.json or an environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\".ServiceSettings.GoroutineHealthThreshold: -1\",\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL: Adding threadteamid column\nDESCRIPTION: This SQL snippet adds a threadteamid column of type VARCHAR(26) to the threads table in PostgreSQL if it does not already exist. The column stores team IDs associated with threads.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE threads ADD COLUMN IF NOT EXISTS threadteamid VARCHAR(26);\n```\n\n----------------------------------------\n\nTITLE: Disable Mattermost in GitLab Omnibus\nDESCRIPTION: This code snippet shows how to disable the built-in Mattermost instance within a GitLab Omnibus installation. Setting `mattermost['enable']` to `false` in `/etc/gitlab/gitlab.rb` and then running `sudo gitlab-ctl reconfigure` will disable the bundled Mattermost, allowing for a standalone Enterprise Edition installation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/enterprise-install-upgrade.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmattermost['enable'] = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Team Group Constraints with mmctl\nDESCRIPTION: This command enables group constraints in a specified Mattermost team, allowing group-based access control. It uses the `mmctl group team enable` command and requires the team name as an argument, along with optional flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_86\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group team enable [team] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group team enable myteam\n```\n\n----------------------------------------\n\nTITLE: Running pgloader\nDESCRIPTION: This command runs pgloader with the generated configuration file.  Carefully read the log file to analyze whether there were any errors during the migration process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npgloader migration.load > migration.log\n```\n\n----------------------------------------\n\nTITLE: Upload Plugin Configuration\nDESCRIPTION: This configuration controls whether system administrators can upload plugins from their local computer to the Mattermost server.  The configuration setting `EnableUploads` within `config.json` (not under PluginSettings) or the environment variable `MM_PLUGINSETTINGS_ENABLEUPLOADS` controls this function. It applies only to self-hosted installations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n- **true**: Enables system admins to upload plugins from the local computer to the Mattermost server.\n- **false**: **(Default)** Disables uploading of plugins from the local computer to the Mattermost server.\n```\n\n----------------------------------------\n\nTITLE: Granting Write Permissions to the Mattermost Group - Shell\nDESCRIPTION: Grants write permissions to the `mattermost` group for the application folder using `sudo chmod`. Requires sudo privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo chmod -R g+w /opt/mattermost\n```\n\n----------------------------------------\n\nTITLE: Configuring Bind Address for Cluster Traffic\nDESCRIPTION: This setting is used to bind cluster traffic to a specific network device, primarily for servers with multiple network devices or deployments involving NAT.  The configuration can be set via the config.json file using the `.ClusterSettings.BindAddress` setting, or via the MM_CLUSTERSETTINGS_BINDADDRESS environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_82\n\nLANGUAGE: text\nCODE:\n```\n\".ClusterSettings.BindAddress: \"\",``\n```\n\n----------------------------------------\n\nTITLE: Generate and Install Custom SELinux Policy (audit2allow, semodule)\nDESCRIPTION: Generates a custom SELinux policy module for Mattermost based on audit logs and installs it using audit2allow and semodule. This allows Mattermost to perform actions that SELinux might otherwise block.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nsudo grep mattermost /var/log/audit/audit.log | audit2allow -M mattermost_policy\nsudo semodule -i mattermost_policy.pp\n```\n\n----------------------------------------\n\nTITLE: Installing mmctl with Go (Mattermost >= v8.0.0)\nDESCRIPTION: Installs the mmctl tool using `go install`. This command is intended for Mattermost versions 8.0.0 and newer. It retrieves the mmctl source code from the specified GitHub repository path and installs the binary into the user's `$GOPATH/bin` directory, assuming the Go environment is properly configured.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# For Mattermost versions >= v8.0.0\ngo install github.com/mattermost/mattermost/server/v8/cmd/mmctl@master\n```\n\n----------------------------------------\n\nTITLE: Creating RetentionIdsForDeletion Table MySQL\nDESCRIPTION: This SQL script creates the `RetentionIdsForDeletion` table in MySQL if it does not already exist. The table is designed to store IDs and table names for data retention deletion operations, using JSON for storing multiple IDs efficiently. It includes primary and secondary keys for indexing and performance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\n CREATE TABLE                                                                                                                                                    \n IF NOT EXISTS                                                                                                                                                   \n   RetentionIdsForDeletion(Id                                                                                                                                    \n     VARCHAR(26) NOT NULL,                                                                                                                                       \n     TableName VARCHAR(64),                                                                                                                                      \n     Ids json, PRIMARY KEY (Id                                                                                                                                   \n       ), KEY                                                                                                                                                    \n     idx_retentionidsfordeletion_tablename                                                                                                                       \n     (TableName)) ENGINE =                                                                                                                                       \n   InnoDB DEFAULT CHARSET =                                                                                                                                      \n   utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: Starting Replication for OpenSearch Indices in Shell\nDESCRIPTION: This snippet starts replication for specific indices (channels, users, files) in OpenSearch. It uses curl with the PUT method to the replication endpoint, specifying the leader alias, leader index, and cluster roles.  Authentication is required.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPUT -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/channels/_start?pretty' -d '\n{\n  \"leader_alias\": \"<LEADER_ALIAS>\",\n  \"leader_index\": \"channels\",\n  \"use_roles\":{\n      \"leader_cluster_role\": \"all_access\",\n      \"follower_cluster_role\": \"all_access\"\n  }\n}'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPUT -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/users/_start?pretty' -d '\n{\n  \"leader_alias\": \"<LEADER_ALIAS>\",\n  \"leader_index\": \"users\",\n  \"use_roles\":{\n      \"leader_cluster_role\": \"all_access\",\n      \"follower_cluster_role\": \"all_access\"\n  }\n}'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPUT -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/files/_start?pretty' -d '\n{\n  \"leader_alias\": \"<LEADER_ALIAS>\",\n  \"leader_index\": \"files\",\n  \"use_roles\":{\n      \"leader_cluster_role\": \"all_access\",\n      \"follower_cluster_role\": \"all_access\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring File Output with AdvancedLoggingJSON in JSON\nDESCRIPTION: This JSON snippet demonstrates configuring file output using the AdvancedLoggingJSON setting. It defines a file target with a plain format, specifies audit log levels, and sets options for compression, filename, maximum age, maximum backups, and maximum size. It also defines the maximum queue size.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/logging.rst#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n        \"AdvancedLoggingJSON\": {\n            \"file_1\": {\n                \"type\": \"file\",\n                \"format\": \"plain\",\n                \"levels\": [\n                    { \"id\": 100, \"name\": \"audit-api\" },\n                    { \"id\": 101, \"name\": \"audit-content\" },\n                    { \"id\": 102, \"name\": \"audit-permissions\" },\n                    { \"id\": 103, \"name\": \"audit-cli\" }\n                ],\n                \"options\": {\n                    \"compress\": true,\n                    \"filename\": \"./logs/audit.log\",\n                    \"max_age\": 1,\n                    \"max_backups\": 10,\n                    \"max_size\": 500\n                },\n                \"maxqueuesize\": 1000\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Accessing config.json values with jq\nDESCRIPTION: This snippet demonstrates how to access a specific value within the `config.json` file using the `jq` command-line JSON processor.  It shows how to extract the `LoginButtonColor` value from the `LdapSettings` object. This requires `jq` to be installed and the `config.json` file to be present in the specified path.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncat config/config.json | jq '.LdapSettings.LoginButtonColor'\n```\n\n----------------------------------------\n\nTITLE: Setting up Auto-Follow Rule for OpenSearch Indices in Shell\nDESCRIPTION: This snippet sets up an auto-follow rule for indices matching the pattern 'posts*' in OpenSearch. It specifies the leader alias, rule name, and pattern, and configures roles for leader and follower clusters using curl to make an HTTP POST request.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/_autofollow?pretty' -d '\n{\n  \"leader_alias\" : \"<LEADER_ALIAS>\",\n  \"name\": \"autofollow-rule\",\n  \"pattern\": \"posts*\",\n  \"use_roles\":{\n      \"leader_cluster_role\": \"all_access\",\n      \"follower_cluster_role\": \"all_access\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Executing pgloader Migration\nDESCRIPTION: This shell command executes the pgloader tool for database migration. It directs the output of the `calls.load` process to a log file named `calls_migration.log`. The pgloader tool is assumed to be installed and configured correctly, and the `calls.load` file is a pgloader configuration file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\npgloader calls.load > calls_migration.log\n```\n\n----------------------------------------\n\nTITLE: SMTP Auth Setting - Environment Variable\nDESCRIPTION: This snippet shows the environment variable to enable or disable SMTP authentication. If set to `true`, Mattermost uses the configured username and password to authenticate with the SMTP server. It overrides the `config.json` setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\n``MM_EMAILSETTINGS_ENABLESMTPAUTH``\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Primary Node\nDESCRIPTION: This configuration block sets up PostgreSQL for the primary or writer node, tuning parameters like max_connections, random_page_cost, work_mem, effective_cache_size, shared_buffers, tcp_keepalives, maintenance_work_mem, and autovacuum settings. These optimizations are designed for an AWS Aurora r5.xlarge instance, and adjustments may be necessary for lower-capacity instances. It includes settings to optimize performance and manage connection pooling.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/high-availability-cluster-based-deployment.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# If the instance is lower capacity than r5.xlarge, then set it to a lower number. \n# Also tune the \"MaxOpenConns\" setting under the \"SqlSettings\" of the Mattermost app accordingly. \n# Note that \"MaxOpenConns\" on Mattermost is per data source name.\n  max_connections = 1024\n\n  # Set it to 1.1, unless the DB is using spinning disks.\n  random_page_cost = 1.1\n\n  # This should be 32MB if using read replicas, or 16MB if using a single PostgreSQL instance. \n  # If the instance is of a lower capacity than r5.xlarge, then set it to a lower number.\n  work_mem = 32MB\n\n  # Set both of the below settings to 65% of total memory. For a 32 GB instance, it should be 21 GB.\n  # If on a smaller server, set this to 20% or less total RAM.\n  # ex: 512MB would work for a 4GB RAM server\n  effective_cache_size = 21GB\n  shared_buffers = 21GB\n\n  # If you are using pgbouncer, or any similar connection pooling proxy, \n  # in front of your DB, then apply the keepalive settings to the proxy instead, \n  # and revert the keepalive settings for the DB back to defaults.\n  tcp_keepalives_idle = 5\n  tcp_keepalives_interval = 1\n  tcp_keepalives_count = 5\n\n  # 1GB (reduce this to 512MB if your server has less than 32GB of RAM)\n  maintenance_work_mem = 512MB\n  \n  autovacuum_max_workers = 4\n  autovacuum_vacuum_cost_limit = 500\n\n\n  # If you have more than 32 CPUs on your database server, please set the following options to utilize more CPU for your server:\n  max_worker_processes = 12\n  max_parallel_workers_per_gather = 4\n  max_parallel_workers = 12\n  max_parallel_maintenance_workers = 4\n```\n\n----------------------------------------\n\nTITLE: Removing GPG key (Ubuntu Jammy and Noble)\nDESCRIPTION: Removes the Mattermost archive keyring file on Ubuntu Jammy (22.04 LTS) and Ubuntu Noble (24.04 LTS). This step is required before adding the new GPG key.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm /usr/share/keyrings/mattermost-archive-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Mattermost Job Server Startup Example\nDESCRIPTION: Provides an example of how to start the Mattermost job server. It shows the command invocation using the `bin/mattermost` executable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nbin/mattermost jobserver\n```\n\n----------------------------------------\n\nTITLE: Setting Transcriber Model Size in config.json\nDESCRIPTION: This configuration setting determines the speech-to-text model size used for call transcriptions in the Mattermost Calls plugin. Larger models produce more accurate results but require more processing time and resources. Options include Tiny, Base, and Small, with Base being the default. Available starting in plugin version 0.22.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``PluginSettings`` > ``Plugins`` > ``com.mattermost.calls`` > ``transcribermodelsize``\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile Screen Capture Prevention\nDESCRIPTION: This snippet shows how to configure screen capture prevention in Mattermost by editing the config.json file. It blocks screenshots and screen recordings when using the mobile app.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_111\n\nLANGUAGE: json\nCODE:\n```\n\".NativeAppSettings.MobilePreventScreenCapture\": false\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Desktop App via Snapcraft\nDESCRIPTION: This command installs the Mattermost desktop app on systems with Snapcraft installed. It uses the `--beta` flag to install the beta version of the app. Snapcraft is typically installed by default on Ubuntu 16.04 and later. The command uses `sudo` to execute the installation with administrative privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/linux-desktop-install.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo snap install mattermost-desktop --beta\n```\n\n----------------------------------------\n\nTITLE: Configuration: Teammate Name Display - config.json\nDESCRIPTION: This setting determines how teammate names are displayed in posts and under the Direct Messages list.  It allows for displaying usernames, nicknames, or full names. The option is controlled via the `TeamSettings.TeammateNameDisplay` setting in `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"username\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"nickname_full_name\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"full_name\"\n```\n\n----------------------------------------\n\nTITLE: Enable Elasticsearch Service\nDESCRIPTION: Enables the Elasticsearch service to start automatically at boot time. This ensures that Elasticsearch is running whenever the server restarts.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo /bin/systemctl enable elasticsearch.service\n```\n\n----------------------------------------\n\nTITLE: Unshare Channel Slash Command - Mattermost\nDESCRIPTION: This slash command removes all secure connections from the current channel. A system message confirms that the channel is no longer shared. Secure connections may still be invited to other shared channels. Unsharing a shared channel stops synchronization with the remote Mattermost server but the channel continues to function for local users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/connected-workspaces.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/share-channel unshare\n```\n\n----------------------------------------\n\nTITLE: Configure Mattermost Client Certificate Settings in config.json\nDESCRIPTION: This code snippet shows how to configure the `config.json` file to enable client-side certificate authentication. `ClientSideCertEnable` enables the feature, and `ClientSideCertCheck` determines how the certificate is used to log in.  `primary` logs in without password, `secondary` uses it to verify user's email.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/certificate-based-authentication.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  \"ExperimentalSettings\": {\n      \"ClientSideCertEnable\": true,\n      \"ClientSideCertCheck\": \"secondary\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Rebuild Fulltext Indexes with N-gram Parser in MySQL for Korean Search\nDESCRIPTION: This SQL snippet demonstrates how to drop and recreate fulltext indexes on the `Posts` table using the n-gram parser in MySQL. It is used for enabling search functionality in languages like Korean that don't use spaces between words.  It includes examples for both `Message` and `Hashtags` columns.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/enabling-chinese-japanese-korean-search.rst#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDROP INDEX idx_posts_message_txt ON Posts;\nCREATE FULLTEXT INDEX idx_posts_message_txt ON Posts (Message) WITH PARSER ngram;\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP INDEX idx_posts_hashtags_txt ON Posts;\nCREATE FULLTEXT INDEX idx_posts_hashtags_txt ON Posts (Hashtags) WITH PARSER ngram;\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting SMTP Connection Error\nDESCRIPTION: This log entry example indicates a client host rejection, typically due to access restrictions on the SMTP server. Troubleshooting involves investigating the server's configuration and ensuring Mattermost's IP address is allowed to relay emails.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/smtp-email.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nConnection unsuccessful: Failed to add to email address - 554 5.7.1 <unknown[IP-ADDRESS]>: Client host rejected: Access denied\n```\n\n----------------------------------------\n\nTITLE: Restarting Mattermost service (sh)\nDESCRIPTION: Restarts the Mattermost service using systemctl. This applies any configuration changes and ensures that the Mattermost server is running with the updated settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/configuration-in-your-database.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl restart mattermost\n```\n\n----------------------------------------\n\nTITLE: Processing a Mattermost Import\nDESCRIPTION: This command uses `mmctl` to process a specific import file on the Mattermost server.  Replace `<IMPORT FILE NAME>` with the name obtained from the `mmctl import list available` command.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrate-from-slack.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import process <IMPORT FILE NAME>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Team with mmctl\nDESCRIPTION: Deletes a specified Mattermost team permanently, including all associated data. Requires the `Enable API Team Deletion` configuration setting to be enabled. Requires confirmation and database backup before execution.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_140\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team delete [teams] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team delete myteam\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Open Connections via config.json\nDESCRIPTION: This snippet shows how to set the maximum number of open database connections in Mattermost using the `config.json` file.  The `MaxOpenConns` setting under `SqlSettings` controls this. The default value is 300 for self-hosted deployments and 100 for Cloud deployments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n\".SqlSettings.MaxOpenConns\": 300,\n```\n\n----------------------------------------\n\nTITLE: Removing Users from a Channel using mmctl\nDESCRIPTION: This command removes users from a channel. Users can be removed individually by specifying their email or username, or all users can be removed using the `--all-users` flag. The channel is specified in the '[team]:[channel]' format.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_43\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel users remove [channel] [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel users remove myteam:mychannel user@example.com username\nmmctl channel users remove myteam:mychannel --all-users\n```\n\n----------------------------------------\n\nTITLE: Removing Read Access to Authentication with mmctl\nDESCRIPTION: This command removes read access to the Authentication section of the System Console from all users with the system_user_manager role. It removes the 'sysconsole_read_authentication' permission from the 'system_user_manager' role.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nmmctl permissions remove system_user_manager sysconsole_read_authentication\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Mattermost with NGINX\nDESCRIPTION: Stops and removes the containers created during the Mattermost deployment with NGINX, using Docker Compose. Requires the same compose files used during deployment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f docker-compose.yml -f docker-compose.nginx.yml down\n```\n\n----------------------------------------\n\nTITLE: mmctl User Deactivate Format\nDESCRIPTION: Shows the format for the `mmctl user deactivate` command. It takes a list of user identifiers (emails, usernames, or userIds) and optional flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_159\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user deactivate [emails, usernames, userIds] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Advertise Address for Cluster Nodes\nDESCRIPTION: This setting defines the IP address used to access the server from other cluster nodes, particularly when nodes are in different networks and involve NAT. It's configured via config.json using `.ClusterSettings.AdvertiseAddress` or via the MM_CLUSTERSETTINGS_ADVERTISEADDRESS environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_83\n\nLANGUAGE: text\nCODE:\n```\n\".ClusterSettings.AdvertiseAddress: \"\",``\n```\n\n----------------------------------------\n\nTITLE: Mattermost systemd Unit File Configuration - Text\nDESCRIPTION: Defines the configuration for the Mattermost systemd unit file. This file is used to manage the Mattermost service.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n  [Unit]\n  Description=Mattermost\n  After=network.target\n\n  [Service]\n  Type=notify\n  ExecStart=/opt/mattermost/bin/mattermost\n  TimeoutStartSec=3600\n  KillMode=mixed\n  Restart=always\n  RestartSec=10\n  WorkingDirectory=/opt/mattermost\n  User=mattermost\n  Group=mattermost\n  LimitNOFILE=49152\n\n  [Install]\n  WantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Example dbcmp Command\nDESCRIPTION: This example shows how to run the `dbcmp` tool to compare two databases. It displays the specific formats for the `--source` and `--target` arguments, including database credentials, address, port, and database name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndbcmp --source \"user:password@tcp(address:3306)/db_name --target \"postgres://user:password@address:5432/db_name\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Settings via jq in config.json\nDESCRIPTION: This snippet demonstrates how to use the `jq` command-line JSON processor to access the `Enable` setting under the `PluginSettings` object within the `config.json` file. This is useful for automating configuration changes or programmatically retrieving settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat config/config.json | jq '.PluginSettings.Enable'\n```\n\n----------------------------------------\n\nTITLE: Creating Local File Storage Directory\nDESCRIPTION: This code snippet creates a directory for storing Mattermost files locally. It uses `sudo mkdir -p` to create the directory and any necessary parent directories, if they don't exist.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir -p /opt/mattermost/data\n```\n\n----------------------------------------\n\nTITLE: Creating index on posts table - PostgreSQL\nDESCRIPTION: This SQL statement creates a concurrent index on the `posts` table for the `createat` and `id` columns, if it doesn't already exist.  The `CONCURRENTLY` option ensures zero downtime by creating the index without locking the table prior to upgrading to Mattermost v6.7.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/prepare-to-upgrade-mattermost.rst#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX CONCURRENTLY IF NOT EXISTS idx_posts_create_at_id on posts(createat, id);\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Server\nDESCRIPTION: Installs the Mattermost server package from the configured repositories. The `-y` flag automatically answers \"yes\" to any prompts during the installation process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install mattermost -y\n```\n\n----------------------------------------\n\nTITLE: Unarchiving a Channel using mmctl\nDESCRIPTION: This command unarchives a previously archived channel. Channels can be identified by using '[team]:[channel]' or by the channel ID. This effectively restores the channel to active use.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel unarchive [channels] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel unarchive myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Backing up Mattermost Omnibus\nDESCRIPTION: Creates a backup of the Mattermost server, including content, users, plugins, configurations, and databases, using the `mmomni` command-line tool. The backup is saved as a compressed archive.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmmomni backup -o /tmp/mm_backup_datetime.tgz\n```\n\n----------------------------------------\n\nTITLE: Creating Incoming Webhook using mmctl\nDESCRIPTION: This command creates an incoming webhook, enabling external systems to post messages to a specific channel. It requires specifying the channel, user, display name, and description. Optionally, it allows locking to a channel and setting an icon.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_199\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook create-incoming [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook create-incoming --channel [channelID] --user [userID] --display-name [displayName] --description [webhookDescription] --lock-to-channel --icon [iconURL]\n```\n\nLANGUAGE: sh\nCODE:\n```\n--channel string        Channel name or ID of the new webhook\n--description string    Incoming webhook description\n--display-name string   Incoming webhook display name\n-h, --help              help for create-incoming\n--icon string           Icon URL\n--lock-to-channel       Lock to channel\n--user string           The username, email, or ID of the user that the webhook should post as\n```\n\n----------------------------------------\n\nTITLE: Generating pgloader config for plugins (migration-assist)\nDESCRIPTION: This command generates migration configuration files for collaborative playbooks, boards, and calls plugins. These configuration files are then used by pgloader to migrate plugin data from MySQL to PostgreSQL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmigration-assist pgloader boards --mysql=\"<MYSQL_DSN>\" --postgres=\"<POSTGRES_DSN>\" > boards.load\nmigration-assist pgloader playbooks --mysql=\"<MYSQL_DSN>\" --postgres=\"<POSTGRES_DSN>\" > playbooks.load\nmigration-assist pgloader calls --mysql=\"<MYSQL_DSN>\" --postgres=\"<POSTGRES_DSN>\" > calls.load\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Logging JSON via config.json\nDESCRIPTION: This configuration setting allows specifying advanced logging options using a JSON structure within the config.json file. This allows configuring multiple log targets such as console, file, syslog, and TCP sockets. It enables sending log records to multiple destinations for comprehensive log aggregation and analysis.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n\".LogSettings.AdvancedLoggingJSON\": \"\",\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Request Timeout Configuration\nDESCRIPTION: Defines the timeout in seconds for Elasticsearch calls. This can be set via config.json or environment variable. The default value is 30 seconds. Ensure the numerical input represents seconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n\".Elasticsearchsettings.RequestTimeoutSeconds :30\"\n```\n\n----------------------------------------\n\nTITLE: Create Extension and Configuration for Chinese Search (PostgreSQL)\nDESCRIPTION: This SQL snippet creates the zhparser extension and configures a text search configuration named `simple_zh_cfg` to utilize the zhparser. It also defines token mappings for different part-of-speech tags (n, v, a, i, e, l) using the simple dictionary.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/enabling-chinese-japanese-korean-search.rst#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- 创建 extension\nCREATE EXTENSION zhparser\n-- 创建 text search configuration\nCREATE TEXT SEARCH CONFIGURATION simple_zh_cfg (PARSER = zhparser);\n-- 配置 token mapping\nALTER TEXT SEARCH CONFIGURATION simple_zh_cfg ADD MAPPING FOR n,v,a,i,e,l WITH simple;\n```\n\n----------------------------------------\n\nTITLE: Creating unique index on PropertyValues in PostgreSQL\nDESCRIPTION: Creates a unique index named `idx_propertyvalues_unique` on the `PropertyValues` table in PostgreSQL if it doesn't already exist.  The index is on the `GroupID`, `TargetID`, and `FieldID` columns, and it only applies to rows where `DeleteAt` is 0. This ensures uniqueness for a specific property value within a given group and target, based on the field.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n CREATE UNIQUE INDEX IF NOT EXISTS idx_propertyvalues_unique ON PropertyValues (GroupID, TargetID, FieldID) WHERE DeleteAt = 0;\n```\n\n----------------------------------------\n\nTITLE: Calculate Average Posts per Minute in SQL\nDESCRIPTION: This SQL query calculates the average number of posts per minute on a Mattermost server. It is useful for determining the appropriate `LiveIndexingBatchSize` for Elasticsearch. The query aggregates post counts by minute and averages those values over a specified time period (defaulting to the past year). Note that the query can be resource-intensive and should be run during non-peak hours.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_39\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n  AVG(postsPerMinute) as averagePostsPerMinute\nFROM (\n  SELECT \n    count(*) as postsPerMinute, \n    date_trunc('minute', to_timestamp(createat/1000))\n  FROM posts\n  WHERE createAt > ( (extract(epoch from now()) * 1000 )  - 31536000000)\n  GROUP BY date_trunc('minute', to_timestamp(createat/1000))\n) as ppm;\n```\n\n----------------------------------------\n\nTITLE: Installing mmctl with Homebrew\nDESCRIPTION: Installs the mmctl tool using Homebrew, a package manager for macOS and Linux. This command assumes that Homebrew is already installed and configured on the system.  It retrieves the mmctl package from the Homebrew repository and installs it on the system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew install mmctl\n```\n\n----------------------------------------\n\nTITLE: Enabling RunScheduler in config.json\nDESCRIPTION: This setting controls whether the Mattermost server schedules tasks to be completed by a Worker via config.json. It is a boolean setting (true or false). In High Availability, this should be enabled on all servers.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n\"RunScheduler\": true\n```\n\n----------------------------------------\n\nTITLE: Showing mmctl Configuration\nDESCRIPTION: This command prints the entire server configuration in JSON format to STDOUT. It does not require any specific parameters to display the configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_62\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config show [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config show\n```\n\n----------------------------------------\n\nTITLE: Enabling Server-Side Encryption for Amazon S3\nDESCRIPTION: This snippet shows the config.json setting and environment variable to enable server-side encryption for Amazon S3. If set to true, files will be encrypted using server-side encryption with Amazon S3-managed keys.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.AmazonS3SSE: false\",\n```\n\n----------------------------------------\n\nTITLE: Convert MySQL Table Collation\nDESCRIPTION: This SQL query converts a MySQL table's character set and collation to `utf8mb4` and `utf8mb4_0900_ai_ci`, respectively. This is necessary when upgrading to MySQL 8, as the default collation changed and inconsistencies can lead to query errors.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/software-hardware-requirements.rst#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;\n```\n\n----------------------------------------\n\nTITLE: Connect to External Database in Mattermost Manifest\nDESCRIPTION: Snippet demonstrating how to connect the Mattermost installation to an external database by referencing the database secret in the spec.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  database:\n    external:\n      secret: <database-secret-name>  # The name of the database secret (e.g., my-postgres-connection)\n```\n\n----------------------------------------\n\nTITLE: Back up application files\nDESCRIPTION: This snippet describes how to back up Mattermost application files by copying them into an archive folder. This ensures a safe copy of the application configuration and necessary files before downgrading.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/downgrading-mattermost-server.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmattermost-back-YYYY-MM-DD-HH-mm\n```\n\n----------------------------------------\n\nTITLE: Update and Upgrade System Packages (dnf)\nDESCRIPTION: Updates and upgrades system packages using the dnf package manager. This is a recommended preliminary step to ensure the system is up-to-date before installing Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf update\nsudo dnf upgrade\n```\n\n----------------------------------------\n\nTITLE: Stop Elasticsearch Service\nDESCRIPTION: Stops the Elasticsearch service. Useful when reconfiguring Elasticsearch or performing maintenance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl stop elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Pinging Mattermost APIv4 Endpoint in Go\nDESCRIPTION: This code snippet demonstrates how to ping the Mattermost APIv4 endpoint using Go. It imports the Mattermost model package, creates a new APIv4 client, logs in, and then calls the GetPing method to check the server's health.  The endpoint checks if the server is up and healthy based on the configuration setting ``GoRoutineHealthThreshold``.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/configure-health-check-probes.rst#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport github.com/mattermost/mattermost/tree/master/server/public/model\"\n  \n  Client := model.NewAPIv4Client(\"https://your-mattermost-url.com\")\n  Client.Login(\"email@domain.com\", \"Password1\")\n  \n  // GetPing\n  status, err := Client.GetPing()\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair for Mattermost Service Account\nDESCRIPTION: This command generates an RSA key pair for the Mattermost service account, which is used for SSH authentication between cluster nodes. It is executed with the privileges of the `mattermost` user.  The key is stored in the .ssh directory of the mattermost user's home directory.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nsudo -u mattermost ssh-keygen -t rsa\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL User Search Path\nDESCRIPTION: This SQL command modifies the specified PostgreSQL user's search path to 'public'. This ensures that when the user accesses database objects without specifying a schema, it will default to the 'public' schema. The parameter {{ .pg_user }} represents the PostgreSQL username to be configured.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_16\n\nLANGUAGE: postgresql\nCODE:\n```\nALTER USER {{ .pg_user }} SET SEARCH_PATH TO 'public';\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL database schema (migration-assist)\nDESCRIPTION: This command creates the PostgreSQL database schema by downloading and applying the necessary migrations. The --mattermost-version flag is required to specify the Mattermost version being migrated from. It includes checks for schema owner and empty tables before running migrations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmigration-assist postgres \"<POSTGRES_DSN>\" --run-migrations --mattermost-version=\"<MATTERMOST_VERSION>\" # example DSN: \"postgres://user:password@address:5432/db_name\", example Mattermost version: \"v9.4.0\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Mattermost Server Tarball (Current ESR) - Shell\nDESCRIPTION: Downloads the current ESR (Extended Support Release) of the Mattermost Server tarball using wget.  Replace `amd64` with the appropriate architecture if needed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwget https://releases.mattermost.com/10.5.3/mattermost-10.5.3-linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Granting Write Access to Authentication with mmctl\nDESCRIPTION: This command grants write access to the Authentication section of the System Console to all users with the system_user_manager role. It adds the 'sysconsole_write_authentication' permission to the 'system_user_manager' role.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nmmctl permissions add system_user_manager sysconsole_write_authentication\n```\n\n----------------------------------------\n\nTITLE: Generating CA Key and Certificate (OpenSSL)\nDESCRIPTION: This snippet generates a certificate authority (CA) key and a certificate for signing client certificates using OpenSSL. The CA is used by the NGINX proxy server to validate client certificates.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nopenssl genrsa -des3 -out ca.mattermost.key 4096\n```\n\n----------------------------------------\n\nTITLE: Creating NGINX Configuration File\nDESCRIPTION: This snippet shows how to create a configuration file for Mattermost on Ubuntu and RHEL 8. The `touch` command creates an empty file in the appropriate directory.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo touch /etc/nginx/sites-available/mattermost\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo touch /etc/nginx/conf.d/mattermost\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON Setting - Session Idle Timeout\nDESCRIPTION: Defines the session idle timeout in minutes. The default value is 43200 minutes (30 days).  This setting determines how long a user's session remains active if they are inactive on the system. A value of 0 disables the timeout.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_97\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.SessionIdleTimeoutInMinutes: 43200,\"\n```\n\n----------------------------------------\n\nTITLE: Focalboard Migration Configuration - Text\nDESCRIPTION: This configuration file for pgloader defines the data migration process from MySQL to PostgreSQL for the Focalboard plugin.  It specifies the source and target databases, includes directives for creating tables and indexes, sets performance parameters, and defines type casting rules. The configuration performs pre and post-load operations using SQL to rename schemas and update JSON fields.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\n  LOAD DATABASE\n   FROM      mysql://{{ .mysql_user }}:{{ .mysql_password }}@{{ .mysql_address }}/{{ .source_db }}\n   INTO      pgsql://{{ .pg_user }}:{{ .pg_password }}@{{ .postgres_address }}/{{ .target_db }}\n\n  WITH include drop, create tables, create indexes, reset sequences,\n   workers = 8, concurrency = 1,\n   multiple readers per thread, rows per range = 50000,\n   preserve index names\n\n  SET PostgreSQL PARAMETERS\n   maintenance_work_mem to '128MB',\n   work_mem to '12MB'\n\n  SET MySQL PARAMETERS\n   net_read_timeout  = '120',\n   net_write_timeout = '120'\n\n  CAST column focalboard_blocks.fields to \"json\" drop typemod,\n   column focalboard_blocks_history.fields to \"json\" drop typemod,\n   column focalboard_schema_migrations.name to \"varchar\" drop typemod,\n   column focalboard_sessions.props to \"json\" drop typemod,\n   column focalboard_teams.settings to \"json\" drop typemod,\n   column focalboard_users.props to \"json\" drop typemod,\n   type int when (= precision 11) to int4 drop typemod,\n   type json to jsonb drop typemod\n\n  INCLUDING ONLY TABLE NAMES MATCHING\n   ~/focalboard/\n\n  BEFORE LOAD DO\n   $$ ALTER SCHEMA public RENAME TO {{ .source_db }}; $$\n\n  AFTER LOAD DO\n   $$ UPDATE {{ .source_db }}.focalboard_blocks SET \"fields\" = '{}'::json WHERE \"fields\"::text = ''; $$,\n   $$ UPDATE {{ .source_db }}.focalboard_blocks_history SET \"fields\" = '{}'::json WHERE \"fields\"::text = ''; $$,\n   $$ UPDATE {{ .source_db }}.focalboard_sessions SET \"props\" = '{}'::json WHERE \"props\"::text = ''; $$, \n   $$ UPDATE {{ .source_db }}.focalboard_teams SET \"settings\" = '{}'::json WHERE \"settings\"::text = ''; $$,\n   $$ UPDATE {{ .source_db }}.focalboard_users SET \"props\" = '{}'::json WHERE \"props\"::text = ''; $$, \n   $$ ALTER SCHEMA {{ .source_db }} RENAME TO public; $$,\n   $$ SELECT pg_catalog.set_config('search_path', '\"$user\", public', false); $$,\n   $$ ALTER USER {{ .pg_user }} SET SEARCH_PATH TO 'public'; $$;\n```\n\n----------------------------------------\n\nTITLE: Preconfiguring Server URL - config.json Override\nDESCRIPTION: This snippet demonstrates how to preconfigure the server URL and other settings for Mattermost mobile apps by overriding the default `config.json` file. It involves creating an `/assets/override/config.json` file and setting the `DefaultServerURL` and optionally `AutoSelectServerUrl` parameters. This customization requires forking the mattermost-mobile repository and compiling the app yourself.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/mobile/mobile-faq.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"DefaultServerURL\": \"my-mattermost-instance.example.com\",\n        \"AutoSelectServerUrl\": true,\n        \"ExperimentalUsernamePressIsMention\": true\n    }\n```\n\n----------------------------------------\n\nTITLE: Check Elasticsearch Status\nDESCRIPTION: Confirms that Elasticsearch is running correctly by sending a request to the default Elasticsearch endpoint. A successful response indicates that Elasticsearch is operational.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:9200\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Omnibus without SSL\nDESCRIPTION: Installs the Mattermost Omnibus package without SSL by setting the `MMO_HTTPS` environment variable to `false` before running the apt install command. The `-y` flag automatically answers yes to any prompts during the installation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n// Install Mattermost Omnibus without SSL\nsudo MMO_HTTPS=false apt install mattermost-omnibus -y\n```\n\n----------------------------------------\n\nTITLE: Export Channel Data using Slash Command\nDESCRIPTION: Use the `/export` slash command within a Mattermost channel to export the current channel's message data into a CSV-formatted file.  This command requires the user to be a Mattermost system administrator.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/export-mattermost-channel-data.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/export\n```\n\n----------------------------------------\n\nTITLE: Creating Full-Text Indexes in PostgreSQL\nDESCRIPTION: These SQL commands create full-text indexes on the `posts` and `fileinfo` tables in the PostgreSQL database. They use the `gin` index type and the `to_tsvector` function to index the `message` and `content` columns, respectively, for efficient text search.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX IF NOT EXISTS idx_posts_message_txt ON public.posts USING gin(to_tsvector('english', message));\nCREATE INDEX IF NOT EXISTS idx_fileinfo_content_txt ON public.fileinfo USING gin(to_tsvector('english', content));\n```\n\n----------------------------------------\n\nTITLE: Create symbolic link for Certbot\nDESCRIPTION: This command creates a symbolic link to make the certbot command available in the /usr/bin directory, allowing it to be easily accessed from the command line.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n```\n\n----------------------------------------\n\nTITLE: Restarting Mattermost service\nDESCRIPTION: This snippet restarts the Mattermost service and checks its status using `systemctl`. This ensures that the configuration changes in `config.json` are applied, and the service is running correctly. It depends on systemd.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl restart mattermost\nsystemctl status mattermost\n```\n\n----------------------------------------\n\nTITLE: Download Latest Mattermost Server tarball (wget)\nDESCRIPTION: Downloads the latest Mattermost Server tarball using wget.  The architecture (amd64, arm64) should be adjusted according to the system.  This is the first step in the installation process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwget https://releases.mattermost.com/10.7.0/mattermost-10.7.0-linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Generating Client Key for User (OpenSSL)\nDESCRIPTION: This snippet generates a client-side key for a specific user with a passphrase using OpenSSL. The key is used to create a certificate signing request.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nopenssl genrsa -des3 -out mmuser-mattermost.key 1024\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL table for Retention Ids in Mattermost\nDESCRIPTION: This SQL snippet creates a new table named `RetentionIdsForDeletion` in MySQL. The table stores IDs related to data retention policies, along with the table name and a JSON field for additional IDs.  The table is created only if it doesn't already exist. It is used in the context of a Mattermost data retention migration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n CREATE TABLE                                                                                                                                                    \n IF NOT EXISTS                                                                                                                                                   \n RetentionIdsForDeletion(Id                                                                                                                                    \n VARCHAR(26) NOT NULL,                                                                                                                                       \n TableName VARCHAR(64),                                                                                                                                      \n Ids json, PRIMARY KEY (Id\n```\n\n----------------------------------------\n\nTITLE: Initiating UDP connection using netcat\nDESCRIPTION: This command uses the `netcat` utility to initiate a UDP connection to a specified host and port. This is used to verify network connectivity from the client to the server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/calls-deployment.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnc -v -u HOST_IP 8443\n```\n\n----------------------------------------\n\nTITLE: Disabling Channel Group Synchronization via mmctl\nDESCRIPTION: This command disables the synchronization of group members for a specific channel using the Mattermost command-line tool (mmctl). This removes the management of channel members by synchronized groups, reverting to manual management or other methods.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap-groups-synchronization.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmmctl group channel disable\n```\n\n----------------------------------------\n\nTITLE: Connect Nginx proxy to Mattermost Network - Docker\nDESCRIPTION: These commands outline how to connect an NGINX proxy container to the Mattermost network within a Docker environment. This allows the NGINX proxy to communicate with the Mattermost application container. Requires Docker to be installed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ndocker network ls\n# Grep the name of your Mattermost network like \"mymattermost_default\".\ndocker network connect mymattermost_default nginx-proxy\n```\n\n----------------------------------------\n\nTITLE: Add Mattermost Helm Repository\nDESCRIPTION: Adds the Mattermost Helm repository to your Helm configuration, allowing you to install charts from Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhelm repo add mattermost https://helm.mattermost.com\n```\n\n----------------------------------------\n\nTITLE: Connect MS Teams Account using Slash Command\nDESCRIPTION: Connects a Microsoft Teams account to Mattermost using the `/mstmeetings connect` slash command. This command initiates the OAuth2 flow, allowing users to link their Teams account for meeting integration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/microsoft-teams-meetings-interoperability.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/mstmeetings connect\n```\n\n----------------------------------------\n\nTITLE: Deleting a Post via API - DELETE Request\nDESCRIPTION: This snippet describes how to permanently delete a post and its attachments using the Mattermost API. It requires the 'permanent' URL parameter to be set to 'true' when making a DELETE request to the specified endpoint.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_13\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /api/v4/posts/<post-id>?permanent=true\n```\n\n----------------------------------------\n\nTITLE: mmctl User Activate Command\nDESCRIPTION: This command activates previously deactivated users. The command accepts email addresses, usernames, or user IDs as input. This action restores the user's ability to log in and access the Mattermost system. Appropriate permissions are required to activate users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_151\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user activate [emails, usernames, userIds] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user activate user@example.com\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user activate username\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Aggregate Search Indexes Configuration\nDESCRIPTION: Defines the age (in days) after which Elasticsearch indexes will be aggregated during the daily scheduled job. Configurable via config.json (Elasticsearchsettings.AggregatePostsAfterDays) or the environment variable MM_ELASTICSEARCHSETTINGS_AGGREGATEPOSTSAFTERDAYS. Default value is 365 days.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_38\n\nLANGUAGE: JSON\nCODE:\n```\n\".Elasticsearchsettings.AggregatePostsAfterDays: 365\"\n```\n\n----------------------------------------\n\nTITLE: Searching for Teams with mmctl\nDESCRIPTION: Searches for Mattermost teams based on their name. Takes the team name or a part of it as input.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_145\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team search [teams] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team search team1\n```\n\n----------------------------------------\n\nTITLE: Enabling a Bot with mmctl\nDESCRIPTION: This snippet demonstrates how to enable a disabled bot using the `mmctl bot enable` command.  It requires the username of the bot to be enabled.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot enable [username] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot enable testbot\n```\n\n----------------------------------------\n\nTITLE: Managing Channels via Slash Commands\nDESCRIPTION: These slash commands enable users to join, leave, mute, or remove members from channels within the Mattermost workspace. Channel names can be explicitly specified for join/open and mute commands. The /kick command removes a specified user from the current channel.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/built-in-slash-commands.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/join {channel-name}\n/open {channel-name}\n/leave\n/mute\n/mute {channel-name}\n/kick {@username}\n/remove {@username}\n```\n\n----------------------------------------\n\nTITLE: Running pgloader from CLI\nDESCRIPTION: This command executes the pgloader tool using a configuration file named `migration.load`. The output is redirected to a file named `migration.log`.  This allows for capturing any errors, warnings, or progress information during the data migration process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npgloader migration.load > migration.log\n```\n\n----------------------------------------\n\nTITLE: Restarting MySQL service\nDESCRIPTION: This snippet restarts the MySQL service and checks its status using `systemctl`. This ensures that the configuration changes are applied, and the service is running correctly. It depends on systemd.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl restart mysql\nsystemctl status mysql\n```\n\n----------------------------------------\n\nTITLE: Removing Mattermost Omnibus\nDESCRIPTION: Removes the Mattermost and Mattermost Omnibus packages completely from the system using the apt package manager. The `--purge` option removes configuration files as well.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt remove --purge mattermost mattermost-omnibus\n```\n\n----------------------------------------\n\nTITLE: Verifying a Debian Package Signature on Linux\nDESCRIPTION: Verifies the signature of a Debian package using dpkg-sig. Requires dpkg-sig and GnuPG to be installed. your-package.deb must be replaced with the actual Debian package file name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndpkg-sig --verify your-package.deb\n```\n\n----------------------------------------\n\nTITLE: Creating Team with mmctl\nDESCRIPTION: This command creates a new team.  Required flags include `--name` for the team name and `--display_name` for the display name.  Optional flags include `--email` to specify an administrator email and `--private` to create a private team. Requires a configured mmctl installation with permissions to create teams.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_139\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team create [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team create --name mynewteam --display_name \"My New Team\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team create --name private --display_name \"My New Private Team\" --private\n```\n\n----------------------------------------\n\nTITLE: Alter Teams Table - MySQL\nDESCRIPTION: This SQL command alters the `Teams` table in MySQL, modifying the `Type` column to be an ENUM with specified values. This enforces type constraints on the team type. The command execution time was recorded as 0.04 seconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE Teams MODIFY COLUMN Type ENUM(\"I\", \"O\");\n```\n\n----------------------------------------\n\nTITLE: Group Channel Enable Command\nDESCRIPTION: Enables group constraints on a specified channel within a team. The team and channel are specified in the format `team:channel`. It inherits global options for configuration, output formatting, and security settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_81\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group channel enable [team]:[channel] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group channel enable myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Resetting SAML AuthData\nDESCRIPTION: Resets the AuthData field for SAML users to their email addresses. This is typically used after changing the SAML 'id' attribute. It can be performed on all users or a specific list, including deleted users, with options for dry runs and skipping confirmation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_129\n\nLANGUAGE: sh\nCODE:\n```\nmmctl saml auth-data-reset [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Reset all SAML users' AuthData field to their email, including deleted users\n$ mmctl saml auth-data-reset --include-deleted\n\n# Show how many users would be affected by the reset\n$ mmctl saml auth-data-reset --dry-run\n\n# Skip confirmation for resetting the AuthData\n$ mmctl saml auth-data-reset -y\n\n# Only reset the AuthData for the following SAML users\n$ mmctl saml auth-data-reset --users userid1,userid2\n```\n\n----------------------------------------\n\nTITLE: Creating a full export of a Mattermost server (Cloud to Self-hosted)\nDESCRIPTION: This command uses the mmctl tool to create a full export of a Mattermost Cloud server, including attached files. The `--no-attachments` flag can be used to exclude attachments, and `--with-archived-channels` can be used to include archived channels in the export file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl export create\n```\n\n----------------------------------------\n\nTITLE: Start a MS Teams Meeting using Slash Command\nDESCRIPTION: Starts a new Microsoft Teams meeting via Mattermost using the `/mstmeetings start` slash command. This command triggers the creation of a new meeting room in Microsoft Teams.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/microsoft-teams-meetings-interoperability.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/mstmeetings start\n```\n\n----------------------------------------\n\nTITLE: Complete Mattermost Systemd Service File\nDESCRIPTION: This snippet provides a complete example of a `mattermost.service` file with the `EnvironmentFile` directive added. This file configures the Mattermost service to start automatically and run under the `mattermost` user and group.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[Unit]\nDescription=Mattermost\nAfter=network.target\nAfter=mysql.service\nRequires=mysql.service\n\n[Service]\nType=notify\nEnvironmentFile=/opt/mattermost/config/mattermost.environment\nExecStart=/opt/mattermost/bin/mattermost\nTimeoutStartSec=3600\nKillMode=mixed\nRestart=always\nRestartSec=10\nWorkingDirectory=/opt/mattermost\nUser=mattermost\nGroup=mattermost\nLimitNOFILE=49152\n\n[Install]\nWantedBy=mysql.service\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Jira Cloud Instance via Slash Command\nDESCRIPTION: This command is used to uninstall a Jira Cloud instance from Mattermost. Replace `YOUR-JIRA-URL` with your Jira URL. This will remove the configured Jira Cloud instance from Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/jira instance uninstall cloud-oauth <YOUR-JIRA-URL>\n```\n\n----------------------------------------\n\nTITLE: Enabling IP Forwarding\nDESCRIPTION: This command enables IP forwarding in the operating system. IP forwarding allows the system to route packets from one network interface to another, which is necessary for the NAT rules to function correctly.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nsysctl -w net.ipv4.ip_forward=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Channels in config.json\nDESCRIPTION: This snippet details how to configure default channels that users are automatically added to when joining a new team via the config.json. Only applies to Public channels. Expects a string array of channel names.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n\"ExperimentalDefaultChannels\": []\n```\n\nLANGUAGE: JSON\nCODE:\n```\n\"ExperimentalDefaultChannels\": [\"announcement\", \"developers\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Daemon\nDESCRIPTION: Ensures that the Docker daemon is enabled and running on the system. This is a common troubleshooting step for Docker deployments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable --now docker\n```\n\n----------------------------------------\n\nTITLE: Defining a Team Object - JavaScript\nDESCRIPTION: This code defines a team object for Mattermost bulk import. It includes the team's name, display name, type (open or invite-only), description, and whether open invites are allowed. The `type` field dictates whether a team is open to all or requires an invite.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"team\",\n  \"team\": {\n    \"name\": \"team-name\",\n    \"display_name\": \"Team Display Name\",\n    \"type\": \"O\",\n    \"description\": \"The Team Description\",\n    \"allow_open_invite\": true\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: RTCD_RTC_ICEHOSTPORTOVERRIDE config example\nDESCRIPTION: This code snippet demonstrates how to configure the `RTCD_RTC_ICEHOSTPORTOVERRIDE` environment variable to provide a full mapping of node IPs and their respective ports when using port mapping (NAT) in a Kubernetes environment. This configuration is required when exposing the `rtcd` instances using a single external IP address.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/calls-deployment.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nRTCD_RTC_ICEHOSTPORTOVERRIDE=rtcdA_IP/8443,rtcdB_IP/8444,rtcdC_IP/8445\n```\n\n----------------------------------------\n\nTITLE: Unassigning mmctl Permissions Role\nDESCRIPTION: Unassigns users from a role by their usernames. The role name and one or more usernames are required arguments.  This removes the association between users and a role, revoking the permissions granted by that role.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_115\n\nLANGUAGE: sh\nCODE:\n```\nmmctl permissions role unassign <role_name> <username...> [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Unassign users with usernames 'john.doe' and 'jane.doe' from the role named 'system_admin'.\nmmctl permissions unassign system_admin john.doe jane.doe\n\n# Examples using other system roles\nmmctl permissions unassign system_manager john.doe jane.doe\nmmctl permissions unassign system_user_manager john.doe jane.doe\nmmctl permissions unassign system_read_only_admin john.doe jane.doe\n```\n\n----------------------------------------\n\nTITLE: Moving a Channel using mmctl\nDESCRIPTION: This command moves channels between teams.  It validates user membership in the target team and also handles the migration of associated webhooks. Channels can be identified using the format '[team]:[channel]' or by their channel ID. The `--force` flag removes users not in the target team.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel move [team] [channels] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel move newteam oldteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Configuring TURN Server with Generated Credentials - JSON\nDESCRIPTION: This JSON example shows how to configure a TURN server with generated credentials for the Mattermost Calls plugin.  To make this configuration work, you must provide a secret through the *TURN static auth secret* setting. This server can be configured with URL only.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[{\n\t    \"urls\": [\"turn:turn.example.com:443\"]\n    }]\n```\n\n----------------------------------------\n\nTITLE: mmctl User Preference Delete Options\nDESCRIPTION: Defines the specific options for the mmctl user preference delete command. These options are category and name of preference to delete. -h provides help.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_183\n\nLANGUAGE: sh\nCODE:\n```\n   -c, --category string   The category of the preference\n   -h, --help              help for delete\n   -n, --name string       The name of the preference\n```\n\n----------------------------------------\n\nTITLE: Download Current ESR Mattermost Server (wget)\nDESCRIPTION: Downloads the current ESR (Extended Support Release) Mattermost Server tarball using wget. The architecture (amd64, arm64) should be adjusted according to the system. This is an alternative to the latest release download.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwget https://releases.mattermost.com/10.5.3/mattermost-10.5.3-linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Channel Archive Command Usage\nDESCRIPTION: Shows the format to archive a channel, specified by team and channel name or channel ID. This command permanently archives the channel and all its data.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel archive [channels] [flags]\n```\n\n----------------------------------------\n\nTITLE: Let's Encrypt rate limit error in Mattermost logs - JSON\nDESCRIPTION: This JSON snippet shows an error message from the Mattermost logs indicating that the Let's Encrypt rate limit has been exceeded. This typically happens when there are too many failed certificate authorization attempts. Requires access to Mattermost logs.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\"level\":\"error\",\"ts\":1609092001.752515,\"caller\":\"http/server.go:3088\",\"msg\":\"http: TLS handshake error from ip:port: 429 urn:ietf:params:acme:error:rateLimited: Error creating new order :: too many failed authorizations recently: see https://letsencrypt.org/docs/rate-limits/\",\"source\":\"httpserver\"}\n```\n\n----------------------------------------\n\nTITLE: Installing dbcmp CLI\nDESCRIPTION: This command installs the dbcmp CLI tool, which is used to compare data between MySQL and PostgreSQL databases after the migration. It uses the 'go install' command to download and install the dbcmp tool from the specified GitHub repository.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/mattermost/dbcmp/cmd/dbcmp@latest\n```\n\n----------------------------------------\n\nTITLE: Grant pg_monitor Permissions to User in PostgreSQL (Shell)\nDESCRIPTION: This shell command grants the `pg_monitor` role to the specified database user (`mmuser`) in PostgreSQL. This permission is required to allow the user to access replication statistics. This command is executed using the `psql` command-line tool as the `postgres` user.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nsudo -u postgres psql\npostgres=# GRANT pg_monitor TO mmuser;\n```\n\n----------------------------------------\n\nTITLE: Enabling Group Management for Channels using mmctl\nDESCRIPTION: This snippet shows how to enable group-based membership management for a private channel in Mattermost using the `mmctl group channel enable` command. Ensure at least one group is associated with the channel before executing this command.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/managing-team-channel-membership-using-ad-ldap-sync-groups.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group channel enable\n```\n\n----------------------------------------\n\nTITLE: Configure Advanced Logging with Environment Variable\nDESCRIPTION: This snippet demonstrates how to configure advanced logging in Mattermost using the `MM_LOGSETTINGS_ADVANCEDLOGGINGJSON` environment variable. It uses `jq` to generate a JSON payload that defines the logging configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/logging.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport MM_LOGSETTINGS_ADVANCEDLOGGINGJSON=$(jq -n -c '{\n        \"console1\": {\n            \"Type\": \"console\",\n            \"Format\": \"json\",\n            \"Levels\": [\n                {\"ID\": 5, \"Name\": \"debug\", \"Stacktrace\": false},\n                {\"ID\": 4, \"Name\": \"info\", \"Stacktrace\": false, \"color\": 36},\n                {\"ID\": 3, \"Name\": \"warn\", \"Stacktrace\": false},\n                {\"ID\": 2, \"Name\": \"error\", \"Stacktrace\": true, \"color\": 31},\n                {\"ID\": 1, \"Name\": \"fatal\", \"Stacktrace\": true, \"color\": 31},\n                {\"ID\": 0, \"Name\": \"panic\", \"Stacktrace\": true, \"color\": 31},\n                {\"ID\": 10, \"Name\": \"stdlog\", \"Stacktrace\": false}\n            ],\n            \"Options\": {\n                \"Out\": \"stdout\"\n            },\n            \"MaxQueueSize\": 1000\n        }\n    }')\n```\n\n----------------------------------------\n\nTITLE: Initializing Zsh Shell Completion\nDESCRIPTION: This snippet initializes zsh shell completion for the mmctl command-line tool. It uses command substitution to source the completion script generated by `mmctl completion zsh` into the current shell environment, enabling tab completion functionality for mmctl commands in zsh.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsource <(mmctl completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Set SAML Response Signature in ADFS using PowerShell\nDESCRIPTION: This PowerShell command configures the SAML response signature for a specific relying party trust in ADFS. It ensures that the SAML messages are signed, enabling successful verification during the authentication process. Replace `<display-name>` with the display name you assigned to the relying party trust when adding it.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-saml-adfs-msws2016.rst#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ADFSRelyingPartyTrust -TargetName <display-name> -SamlResponseSignature \"MessageAndAssertion\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Console and File Output in External JSON\nDESCRIPTION: This JSON snippet showcases an external configuration file (audit_log_config.json) that defines two log outputs: one to the console with a plain format and a pipe delimiter, and another to a file with a JSON format. Both outputs include audit log levels and specify various options like filename, size, age, backups, compression, and queue size.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/logging.rst#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n        {\n            \"sample-console\": {\n                \"type\": \"console\",\n                \"format\": \"plain\",\n                \"format_options\": {\n                    \"delim\": \" | \"\n                },\n                \"levels\": [\n                    {\"id\": 100, \"name\": \"audit-api\"},\n                    {\"id\": 101, \"name\": \"audit-content\"},\n                    {\"id\": 102, \"name\": \"audit-permissions\"},\n                    {\"id\": 103, \"name\": \"audit-cli\"}\n                ],\n                \"options\": {\n                    \"out\": \"stdout\"\n                },\n                \"maxqueuesize\": 1000\n            },\n            \"sample-file\": {\n                \"type\": \"file\",\n                \"format\": \"json\",\n                \"levels\": [\n                    {\"id\": 100, \"name\": \"audit-api\"},\n                    {\"id\": 101, \"name\": \"audit-content\"},\n                    {\"id\": 102, \"name\": \"audit-permissions\"},\n                    {\"id\": 103, \"name\": \"audit-cli\"}\n                ],\n                \"options\": {\n                    \"filename\": \"./logs/audit.log\",\n                    \"max_size\": 500,\n                    \"max_age\": 1,\n                    \"max_backups\": 10,\n                    \"compress\": true\n                },\n                \"maxqueuesize\": 1000\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Displaying Logs (mmctl)\nDESCRIPTION: Shows how to use the mmctl command to display logs in a human-readable format. The format is server-dependent, and the --format flag is not applicable to this command. Allows for specifying the number of log lines and using logrus for formatting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_108\n\nLANGUAGE: sh\nCODE:\n```\nmmctl logs [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl auth login command\nDESCRIPTION: This command logs in to a Mattermost instance and stores the credentials.  It requires the instance URL and either username/password or an access token.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth login [instance url] --name [server name] --username [username] --password-file [password-file] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth login https://mattermost.example.com\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth login https://mattermost.example.com --name local-server --username sysadmin --password-file mysupersecret.txt\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth login https://mattermost.example.com --name local-server --username sysadmin --password-file mysupersecret.txt --mfa-token 123456\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth login https://mattermost.example.com --name local-server --access-token myaccesstoken\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl auth login https://community.mattermost.com --name community --username my-username --password-file mysupersecret\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl auth login https://community.mattermost.com\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl auth login https://community.mattermost.com --name community --username my-username --password-file mysupersecret --mfa-token 123456\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl auth login https://community.mattermost.com --name community --access-token MY_ACCESS_TOKEN\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl auth login https://my-instance.example.com --name my-instance --username john.doe --password-file mysupersecret\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl auth list\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl user search john.doe\n```\n\n----------------------------------------\n\nTITLE: Managing User Roles (System Admin)\nDESCRIPTION: Promotes or demotes users to or from the system admin role. The command requires the `system_admin` or `member` role specification and a list of user IDs. It alters user permissions within the Mattermost system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_128\n\nLANGUAGE: sh\nCODE:\n```\nmmctl roles system_admin [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl roles member [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl roles system_admin john_doe\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl roles system_admin john_doe jane_doe\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl roles member john_doe\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl roles member john_doe jane_doe\n```\n\n----------------------------------------\n\nTITLE: Configuration: Allow Archived Channel Viewing - config.json\nDESCRIPTION: This setting controls whether users can view archived channels. It's configured using `TeamSettings.ExperimentalViewArchivedChannels` in `config.json`. Setting it to `true` allows users to access content in archived channels they were members of.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"true\"\n```\n\n----------------------------------------\n\nTITLE: Adding Environment File to Systemd Service\nDESCRIPTION: This snippet shows how to add the `EnvironmentFile` directive to the Mattermost `systemd` service file. This directive specifies the path to a file containing environment variables used by Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nEnvironmentFile=/opt/mattermost/config/mattermost.environment\n```\n\n----------------------------------------\n\nTITLE: Change File Ownership for Mattermost Upgrade\nDESCRIPTION: These commands change the ownership of the Mattermost binary file to the `mattermost` user and grant write access.  `<PathToBinaryFile>` should be replaced with the actual path to the Mattermost binary. This allows the Mattermost user to perform the upgrade using the System Console tool.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/enterprise-install-upgrade.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchown mattermost <PathToBinaryFile>\nchmod +w <PathToBinaryFile>\n```\n\n----------------------------------------\n\nTITLE: Getting Server Status with mmctl\nDESCRIPTION: This command retrieves and prints the server's status based on basic health checks. It gives an overview of the server's operational state. The command requires mmctl to be correctly configured and connected to the Mattermost server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_134\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system status [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system status\n```\n\n----------------------------------------\n\nTITLE: Creating PropertyFields table in PostgreSQL\nDESCRIPTION: Creates a table named `PropertyFields` in PostgreSQL if it doesn't already exist. This table stores information about property fields, including their ID, group ID, name, type (using the `property_field_type` enum), attributes (as a JSONB object), target ID, target type, and creation/update/deletion timestamps.  A primary key constraint on `ID` is defined, and several columns are set as NOT NULL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n CREATE TABLE IF NOT EXISTS PropertyFields (\n  ID varchar(26) PRIMARY KEY,\n  GroupID varchar(26) NOT NULL,\n  Name varchar(255) NOT NULL,\n  Type property_field_type,\n  Attrs jsonb,\n  TargetID varchar(255),\n  TargetType varchar(255),\n  CreateAt bigint NOT NULL,\n  UpdateAt bigint NOT NULL,\n  DeleteAt bigint NOT NULL\n );\n```\n\n----------------------------------------\n\nTITLE: Modify /etc/sysctl.conf (Text)\nDESCRIPTION: This code snippet shows how to modify the `/etc/sysctl.conf` file on each Mattermost server to increase the number of WebSocket connections. It adjusts various kernel parameters related to networking, including port range, TCP timeout, socket reuse, backlog limits, memory allocation, congestion control, and buffer sizes. These optimizations improve performance and handle a high volume of concurrent connections in a high-availability setup. After making the changes, run `sysctl -p` to apply them.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/high-availability-cluster-based-deployment.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Extending default port range to handle lots of concurrent connections.\nnet.ipv4.ip_local_port_range = 1025 65000\n\n# Lowering the timeout to faster recycle connections in the FIN-WAIT-2 state.\nnet.ipv4.tcp_fin_timeout = 30\n\n# Reuse TIME-WAIT sockets for new outgoing connections.\nnet.ipv4.tcp_tw_reuse = 1\n\n# Bumping the limit of a listen() backlog.\n# This is maximum number of established sockets (with an ACK)\n# waiting to be accepted by the listening process.\nnet.core.somaxconn = 4096\n\n# Increasing the maximum number of connection requests which have\n# not received an acknowledgment from the client.\n# This is helpful to handle sudden bursts of new incoming connections.\nnet.ipv4.tcp_max_syn_backlog = 8192\n\n# This is tuned to be 2% of the available memory.\nvm.min_free_kbytes = 167772\n\n# Disabling slow start helps increasing overall throughput\n# and performance of persistent single connections.\nnet.ipv4.tcp_slow_start_after_idle = 0\n\n# These show a good performance improvement over defaults.\n# More info at https://blog.cloudflare.com/http-2-prioritization-with-nginx/\nnet.ipv4.tcp_congestion_control = bbr\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_notsent_lowat = 16384\n\n# TCP buffer sizes are tuned for 10Gbit/s bandwidth and 0.5ms RTT (as measured intra EC2 cluster).\n# This gives a BDP (bandwidth-delay-product) of 625000 bytes.\nnet.ipv4.tcp_rmem = 4096 156250 625000\nnet.ipv4.tcp_wmem = 4096 156250 625000\nnet.core.rmem_max = 312500\nnet.core.wmem_max = 312500\nnet.core.rmem_default = 312500\nnet.core.wmem_default = 312500\nnet.ipv4.tcp_mem = 1638400 1638400 1638400\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL Statement Logging via config.json\nDESCRIPTION: This snippet shows how to enable SQL statement logging in Mattermost using the `config.json` file. The `Trace` setting under `SqlSettings` controls whether executing SQL statements are written to the log.  The default value is `false`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n\".SqlSettings.Trace: false\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Relay SMTP Password - Mattermost\nDESCRIPTION: This setting is the password associated with the Global Relay SMTP username. It is configured via the System Console, config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Configuring Recording Quality in config.json\nDESCRIPTION: This configuration setting controls the recording quality for Mattermost Calls. It is a required value with options such as Medium (default).  The setting affects job service performance and recording file size.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``PluginSettings`` > ``Plugins`` > ``com.mattermost.calls`` > ``recordingquality``\n```\n\n----------------------------------------\n\nTITLE: Configuring STUN and TURN Servers - JSON\nDESCRIPTION: This JSON example demonstrates how to configure STUN and TURN servers for the Mattermost Calls plugin.  It includes the server URLs, username, and credentials for authentication with the TURN server.  These configurations are sent to the clients and used to generate local candidates.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n       \"urls\":[\n          \"stun:stun.global.calls.mattermost.com:3478\"\n       ]\n    },\n    {\n       \"urls\":[\n          \"turn:turn.example.com:3478\"\n       ],\n       \"username\":\"webrtc\",\n       \"credentials\":\"turnpassword\"\n    }\n   ]\n```\n\n----------------------------------------\n\nTITLE: Showing MySQL Databases\nDESCRIPTION: This SQL command displays all databases present on the MySQL server. It needs to be executed after logging in to MySQL as the root user with appropriate privileges. This is used to verify the existence of the `mattermost` database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nshow databases;\n```\n\n----------------------------------------\n\nTITLE: Starting the Mattermost server (Shell)\nDESCRIPTION: This command starts the Mattermost server using `systemctl`. It requires `sudo` for elevated privileges. The `mattermost` service must be properly configured in the system's systemd configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/upgrading-mattermost-server.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start mattermost\n```\n\n----------------------------------------\n\nTITLE: mmctl Configuration Options\nDESCRIPTION: These options are inherited from parent commands and control the behavior of the mmctl tool. They define the configuration file path, output format, security settings, and more.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_206\n\nLANGUAGE: sh\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl User Delete Example\nDESCRIPTION: An example usages of the `mmctl user delete` command, showing how to delete a user by email.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_163\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user delete user@example.com\n```\n\n----------------------------------------\n\nTITLE: Create MySQL Index for Reactions\nDESCRIPTION: This SQL command creates an index on the `Reactions` table for the `ChannelId` column in MySQL. This helps improve query performance when filtering reactions by channel. The `LOCK=NONE` clause allows the index to be created without locking the table, minimizing downtime.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_44\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX idx_reactions_channel_id ON Reactions(ChannelId) LOCK=NONE;\n```\n\n----------------------------------------\n\nTITLE: Downloading an export file with mmctl\nDESCRIPTION: This command downloads an export file using mmctl. It requires the export file name and optionally a destination file path. If no path is provided, it downloads to the same name as export name. The command requires the mmctl tool to be configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_69\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help          help for download\n--num-retries int   Number of retries to resume a download. (Default is 5)\n```\n\n----------------------------------------\n\nTITLE: Fixing EXPKEYSIG Error on Upgrades\nDESCRIPTION: Commands to resolve the EXPKEYSIG error during Mattermost Omnibus upgrades. This involves removing the expired key, adding the new key, and updating the package list.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-key remove 44774B28\nsudo curl -o- https://deb.packages.mattermost.com/pubkey.gpg | sudo apt-key add -\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Renaming a Channel using mmctl\nDESCRIPTION: This command renames an existing channel, allowing changes to both the channel's name and display name.  It requires specifying the channel using '[team]:[channel]' format. Options allow modification of either name or display name independently, or both simultaneously.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel rename [channel] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel rename myteam:oldchannel --name 'new-channel' --display_name 'New Display Name'\nmmctl channel rename myteam:oldchannel --name 'new-channel'\nmmctl channel rename myteam:oldchannel --display_name 'New Display Name'\n```\n\n----------------------------------------\n\nTITLE: Searching for a Channel using mmctl\nDESCRIPTION: This command searches for a channel by its name. The search can be performed across all teams or restricted to a specific team by using the `--team` flag. Channels can be specified by team name/ID using the --team flag.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel search [channel]\nmmctl search --team [team] [channel] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel search mychannel\nmmctl channel search --team myteam mychannel\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Region Configuration\nDESCRIPTION: This configuration sets the AWS region where the Amazon S3 bucket is located.  The region is specified through the System Console, config.json, and an environment variable.  Specifying the correct region is crucial for accessing the S3 bucket.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_52\n\nLANGUAGE: none\nCODE:\n```\nSystem Config path: Environment > File Storage\nconfig.json setting: .FileSettings.AmazonS3Region\nEnvironment variable: MM_FILESETTINGS_AMAZONS3REGION\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Mattermost API using curl\nDESCRIPTION: This snippet demonstrates how to authenticate with the Mattermost API using curl. It sends a POST request to the `/api/v4/users/login` endpoint with the user's login ID and password to obtain an authentication token.  The `username` and `password` should be replaced with actual credentials. The Mattermost URL must also be specified.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/electronic-discovery.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i -d '{\"login_id\": \"username\", \"password\": \"password\"}' https://yourmattermosturl/api/v4/users/login\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Jira Notifications via Slash Command\nDESCRIPTION: This command opens a modal that allows channel admins to configure Jira notifications for a specific channel.  It enables filtering notifications based on various criteria.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n/jira subscribe\n```\n\n----------------------------------------\n\nTITLE: Listing Posts in a Channel\nDESCRIPTION: Lists posts in a specified channel within a Mattermost team. The command allows filtering by the number of messages, time, and displaying post IDs. It requires a team and channel name as input and supports following new messages.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_127\n\nLANGUAGE: sh\nCODE:\n```\nmmctl post list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl post list myteam:mychannel\nmmctl post list myteam:mychannel --number 20\n```\n\n----------------------------------------\n\nTITLE: Signing Client Certificate with CA (OpenSSL)\nDESCRIPTION: This snippet signs the user's certificate signing request with the previously created CA certificate, generating the user's client certificate.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nopenssl x509 -req -days 365 -in mmuser-mattermost.csr -CA ca.mattermost.crt -CAkey ca.mattermost.key -set_serial 01 -out mmuser-mattermost.crt\n```\n\n----------------------------------------\n\nTITLE: Creating Index Concurrently in PostgreSQL\nDESCRIPTION: This SQL statement creates an index concurrently on the `Posts` table, specifically on the `OriginalId` column. The `CONCURRENTLY` option ensures that the table is not locked during index creation, allowing other operations to continue without interruption. This is particularly useful for large tables where locking could significantly impact performance. \nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX CONCURRENTLY idx_posts_original_id ON Posts(OriginalId);\n```\n\n----------------------------------------\n\nTITLE: Get Mattermost Logs using journalctl\nDESCRIPTION: This command retrieves Mattermost logs from the system journal using `journalctl`.  It filters logs specifically for the `mattermost` service and extracts logs starting from a specified date and time.  The output is then redirected to a file for analysis. Replace the date and time with the actual starting point of the issue.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/troubleshooting.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo journalctl -u mattermost --since \"2020-08-23 17:15:00\" > mattermost_journalctl.log\n```\n\n----------------------------------------\n\nTITLE: mmctl User Creation Command\nDESCRIPTION: This command allows Mattermost admins to create new user accounts using the mmctl command-line tool. It is a convenient method for scripting and automating user provisioning tasks. Replace the placeholder values with the actual user details.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/user-management-configuration-settings.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user create\n```\n\n----------------------------------------\n\nTITLE: Resetting mmctl Configuration\nDESCRIPTION: This command resets the value of a configuration setting to its default. You can specify the setting by its name in dot notation or reset an entire section.  Accepts multiple values for array settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_60\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config reset [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config reset SqlSettings.DriverName LogSettings\n```\n\n----------------------------------------\n\nTITLE: Enabling Daily Compliance Report - Mattermost\nDESCRIPTION: This setting enables or disables the generation of daily compliance reports. Possible values are true and false. It is configured via the System Console, config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Add Permissions to a Role using mmctl\nDESCRIPTION: This command adds specific permissions to a designated role within Mattermost.  It allows for fine-grained control over user capabilities by assigning roles the ability to execute certain actions.  The tool provides functionality to manage and customize roles based on organizational needs.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/advanced-permissions.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmmctl permissions add\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Region\nDESCRIPTION: This snippet shows the config.json setting and environment variable for specifying the AWS region for the Amazon S3 bucket. The region is needed for Mattermost to correctly access the S3 bucket. If no region is specified, Mattermost defaults to us-east-1 if it can't determine the region automatically.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.AmazonS3Region\",\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Index for Jobs Table\nDESCRIPTION: This SQL snippet creates a composite index concurrently on the `jobs` table in PostgreSQL. It is recommended for installations with a large jobs table (over 1 million rows) to improve query performance during upgrades to Mattermost v6.1. Running it concurrently minimizes locking.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_50\n\nLANGUAGE: SQL\nCODE:\n```\ncreate index concurrently idx_jobs_status_type on jobs (status,type);\n```\n\n----------------------------------------\n\nTITLE: GitHub Slash Command: Subscriptions\nDESCRIPTION: This snippet provides an example of the `/github subscriptions add` slash command used to subscribe a Mattermost channel to receive notifications for specific GitHub repository events. It showcases the usage of flags such as `--features`, `--exclude-org-member`, `--render-style`, and `--exclude` to customize the subscription.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/github-interoperability.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/github subscriptions add mattermost/mattermost-server --features issues,pulls,issue_comments,label:\"Help Wanted\"\n```\n\n----------------------------------------\n\nTITLE: Patch mmctl Configuration\nDESCRIPTION: Applies changes to the Mattermost server configuration using a provided configuration file. It requires the config-file argument to be a valid path to a configuration file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_57\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config patch /path/to/config.json\n```\n\n----------------------------------------\n\nTITLE: Adding mmctl Plugin\nDESCRIPTION: Adds plugins to the Mattermost server.  The plugin files (tar.gz) must be provided as arguments. The command uploads and installs the specified plugins.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_117\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin add [plugins] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin add hovercardexample.tar.gz pluginexample.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Adding New GPG Key (Ubuntu Focal - 20.04 LTS)\nDESCRIPTION: Adds the new Mattermost PPA GPG public key to the system.  The key is downloaded from the Mattermost package server and added to the apt keyring, allowing apt to verify the authenticity of the Mattermost packages.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sL -o- https://deb.packages.mattermost.com/pubkey.gpg | gpg --dearmor | sudo apt-key add\n```\n\n----------------------------------------\n\nTITLE: Downloading Support Packet Confirmation\nDESCRIPTION: This is an example of the output message when a support packet is successfully downloaded after running the mmctl command.  It confirms the location and name of the downloaded support packet. This message ensures the user knows the operation completed successfully.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/admin/generating-support-packet.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDownloading Support Packet\nDownloaded Support Packet to mattermost_support_packet_.zip\n```\n\n----------------------------------------\n\nTITLE: Create Index on Posts Table\nDESCRIPTION: This SQL snippet creates an index named `idx_posts_create_at_id` on the `Posts` table, using the `CreateAt` and `Id` columns. This index can be applied prior to upgrading to v6.7 for zero downtime.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX idx_posts_create_at_id on Posts(CreateAt, Id) LOCK=NONE;\n```\n\n----------------------------------------\n\nTITLE: Mention Online Users in a Channel in Mattermost\nDESCRIPTION: This example demonstrates how to mention users currently online in a channel using @here. Only online members will receive a desktop and push notification. Confirmation prompts are displayed for channels with 5+ members. Mentions can be ignored in specific channels via notification preferences.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/mention-people.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n@here can someone complete a quick review of this?\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Desktop App on Ubuntu/Debian\nDESCRIPTION: This command installs the Mattermost desktop app on Ubuntu/Debian systems using the `apt` package manager. It assumes that the Mattermost repository has already been set up. The command uses `sudo` to execute the installation with administrative privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/linux-desktop-install.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install mattermost-desktop\n```\n\n----------------------------------------\n\nTITLE: Listing mmctl Slash Commands\nDESCRIPTION: This snippet details how to list all slash commands on specified teams using the `mmctl command list` command.  It takes a list of team names as input.  The command returns a list of slash commands associated with the provided teams.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command list [teams] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command list myteam\n```\n\n----------------------------------------\n\nTITLE: Running Mattermost Docker Preview Container\nDESCRIPTION: This snippet shows how to pull and run the Mattermost preview container using Docker. It publishes port 8065, allowing access to the Mattermost instance via a web browser. Requires Docker to be installed and running on the system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/quick-start-evaluation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name mattermost-preview -d --publish 8065:8065 mattermost/mattermost-preview\n```\n\n----------------------------------------\n\nTITLE: Adding LDAP job command to mmctl\nDESCRIPTION: Added an LDAP job command to mmctl. This allows administrators to manage LDAP synchronization tasks directly from the command line, simplifying user management and authentication processes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nmmctl\n```\n\n----------------------------------------\n\nTITLE: Disable Wake Up Reconnect Handler - config.json\nDESCRIPTION: This setting disables attempts to detect when the computer has woken up and refetch data, which might reduce network traffic. Setting to 'true' disables this detection.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalSettings.DisableWakeUpReconnectHandler\": false\n```\n\n----------------------------------------\n\nTITLE: Configure Replica Lag Settings for MySQL Group Replication in Mattermost (JSON)\nDESCRIPTION: This JSON snippet configures the `ReplicaLagSettings` for Mattermost to monitor replica lag in a MySQL Group Replication setup. It defines the data source and SQL queries to measure absolute lag. The `DataSource` should point to a single node in the MySQL replication group.  The query uses the `performance_schema.replication_group_member_stats` table to retrieve the number of transactions in the applier queue.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SqlSettings\": {\n    \"ReplicaLagSettings\": [\n      {\n        \"DataSource\": \"replica-1\",\n        \"QueryAbsoluteLag\": \"select member_id, count_transactions_remote_in_applier_queue FROM performance_schema.replication_group_member_stats where member_id=<>\",\n        \"QueryTimeLag\": \"\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying iptables NAT Rules\nDESCRIPTION: This command lists the NAT rules in the iptables configuration. It is used to verify that the NAT rules defined in /etc/ufw/after.rules have been successfully applied. The output will show the PREROUTING, INPUT, and OUTPUT chains, including any DNAT (Destination NAT) rules.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\niptables -t nat -L\n```\n\n----------------------------------------\n\nTITLE: Enabling Mattermost NGINX Configuration\nDESCRIPTION: These commands create symbolic links to enable the Mattermost NGINX configuration. It uses `ln -s` command on Ubuntu and RHEL 8.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo ln -s /etc/nginx/conf.d/mattermost /etc/nginx/conf.d/default.conf\n```\n\n----------------------------------------\n\nTITLE: Creating the Default Storage Folder - Shell\nDESCRIPTION: Creates the default storage directory for Mattermost files, `/opt/mattermost/data`, using `sudo mkdir`. Requires sudo privileges.  This location can be changed later.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir /opt/mattermost/data\n```\n\n----------------------------------------\n\nTITLE: mmctl User Deactivate Example\nDESCRIPTION: Example usages of the `mmctl user deactivate` command, showing how to deactivate a user by email or username.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_160\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user deactivate user@example.com\nmmctl user deactivate username\n```\n\n----------------------------------------\n\nTITLE: GitHub Webhook Settings\nDESCRIPTION: This snippet defines the settings for creating a webhook in GitHub to send notifications to Mattermost. It includes the Payload URL, Content Type, Secret, and the individual events that trigger the webhook, ensuring that specific GitHub activities are communicated to Mattermost channels.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/github-interoperability.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- **Payload URL**: ``https://YOUR-MATTERMOST-URL.COM/plugins/github/webhook``. Replace ``https://YOUR-MATTERMOST-URL.COM`` with your Mattermost URL.\n- **Content Type**: ``application/json``\n- **Secret**: The **Webhook Secret** value you copied earlier.\n```\n\n----------------------------------------\n\nTITLE: Install and Configure Zhparser for Chinese Search (PostgreSQL)\nDESCRIPTION: This snippet downloads, compiles, and installs Zhparser, a Chinese parser for PostgreSQL, using git. It clones the Zhparser repository, navigates into the directory, and then compiles and installs it, specifying the SCWS home directory.  Requires SCWS to be installed first.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/enabling-chinese-japanese-korean-search.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# 下载 Zhparser 源代码\ngit clone https://github.com/amutu/zhparser.git\n# 进入下载后的目录\ncd zhparser\n# 编译并安装\nSCWS_HOME=/usr/local/scws make && make install\n```\n\n----------------------------------------\n\nTITLE: Running Focalboard Database Migration - Shell\nDESCRIPTION: This shell command executes the pgloader tool with the 'focalboard.load' configuration file and redirects the output to 'focalboard_migration.log'. pgloader migrates database schemas and data between different database systems.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n  pgloader focalboard.load > focalboard_migration.log\n```\n\n----------------------------------------\n\nTITLE: Archiving Team with mmctl\nDESCRIPTION: This command archives a specified team and its associated data. The `--confirm` flag is required to confirm the action and indicate that a database backup has been performed. It is crucial to have a backup before archiving a team. Requires appropriate mmctl configuration and server access.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_138\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team archive [teams] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team archive myteam\n```\n\n----------------------------------------\n\nTITLE: MySQL schema check with fixes (migration-assist)\nDESCRIPTION: This command checks the MySQL database schema, applies necessary fixes for Unicode, artifacts, and VARCHAR, and automatically produces a file named mysql.output for air-gapped environments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmigration-assist mysql \"user:password@tcp(localhost:3306)/mattermost\" --fix-unicode --fix-artifacts --fix-varchar\n```\n\n----------------------------------------\n\nTITLE: Upload License via mmctl (Shell)\nDESCRIPTION: This command uploads a Mattermost license file using the `mmctl license upload` command-line tool. The [license] argument specifies the path to the license file.  After uploading, the Mattermost server must be restarted for the changes to take effect. In High Availability environments, the new license must be updated on every node.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/admin/installing-license-key.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmmctl license upload [license] [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying Mattermost without NGINX\nDESCRIPTION: Deploys Mattermost using Docker Compose, excluding the included NGINX reverse proxy. Access is via HTTP on port 8065. Requires `docker-compose.yml` and `docker-compose.without-nginx.yml` files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f docker-compose.yml -f docker-compose.without-nginx.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Uploading the Mattermost Bulk Import Zip File\nDESCRIPTION: This command uses the `mmctl` tool to upload the generated zip file to the Mattermost server for import. The path to the zip file is passed as an argument.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrate-from-slack.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import upload ./mattermost-bulk-import.zip\n```\n\n----------------------------------------\n\nTITLE: Creating PropertyValues Index Concurrently - SQL\nDESCRIPTION: This SQL snippet creates an index named `idx_propertyvalues_create_at_id` on the `PropertyValues` table, using the `CreateAt` and `ID` columns. The `CONCURRENTLY` option allows the index to be built without locking the table, minimizing disruption. The `IF NOT EXISTS` clause ensures that the index is only created if it doesn't already exist.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX CONCURRENTLY IF NOT EXISTS idx_propertyvalues_create_at_id ON PropertyValues(CreateAt, ID)\n```\n\n----------------------------------------\n\nTITLE: AD/LDAP Group Exclusion Filter Example\nDESCRIPTION: This example shows an AD/LDAP filter that excludes users belonging to a specific group. It filters out users who are members of the 'DEV_OPS' group within the 'ACME_ALL' group.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap.rst#_snippet_1\n\nLANGUAGE: LDAP\nCODE:\n```\n(&(memberof=cn=ACME_ALL,ou=Users,dc=sademo,dc=com)(!(memberof=cn=DEV_OPS,ou=Users,dc=sademo,dc=com)))\n```\n\n----------------------------------------\n\nTITLE: Update invalid Unicode occurrences - PostgreSQL\nDESCRIPTION: This SQL statement updates rows in a specified table, replacing all occurrences of the invalid Unicode character '\\u0000' with an empty string in a specified column. Replace `TableName` and `ColumnName` with the actual table and column names. The `regexp_replace` function with the 'g' flag ensures that all occurrences are replaced.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/prepare-to-upgrade-mattermost.rst#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE TableName SET ColumnName = regexp_replace(ColumnName, '\\\\u0000', '', 'g') WHERE ColumnName LIKE '%\\u0000%';\n```\n\n----------------------------------------\n\nTITLE: New API Endpoint: User Report\nDESCRIPTION: Introduces a new API endpoint, `GET /api/v4/users/report`, for system administrators to retrieve user reporting data. This endpoint facilitates the extraction of user-related statistics and information.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_21\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/v4/users/report\n```\n\n----------------------------------------\n\nTITLE: Remove NGINX default site (RHEL 8)\nDESCRIPTION: This command removes the default Nginx site configuration file on CentOS/RHEL 8 systems. It is necessary to disable the default site so that the Mattermost configuration can take effect.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm /etc/nginx/conf.d/default\n```\n\n----------------------------------------\n\nTITLE: Updating Package Repositories\nDESCRIPTION: Updates the package lists for upgrades and new packages. This command is used to synchronize the package index files from their sources.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Trace Configuration\nDESCRIPTION: This snippet describes how to enable or disable Amazon S3 debugging to capture additional debugging information in system logs. The configuration can be set via the system console, config.json file, or environment variable. The default is false, meaning no debugging information is logged.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_60\n\nLANGUAGE: text\nCODE:\n```\nconfig.json setting: \".FileSettings.AmazonS3Trace: false\",\nEnvironment variable: \"MM_FILESETTINGS_AMAZONS3TRACE\"\n```\n\n----------------------------------------\n\nTITLE: Creating Index on Posts Table - MySQL\nDESCRIPTION: This SQL command creates an index on the `Posts` table in MySQL. The index is named `idx_posts_create_at_id` and is based on the `CreateAt` and `Id` columns. `LOCK=NONE` allows concurrent read/write operations during index creation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX idx_posts_create_at_id on Posts(CreateAt, Id) LOCK=NONE;\n```\n\n----------------------------------------\n\nTITLE: New API Endpoint: User Count Report\nDESCRIPTION: Introduces a new API endpoint, `GET /api/v4/reports/users/count`, for system administrators to retrieve a count of users. This endpoint is designed for simplified user counting operations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_22\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/v4/reports/users/count\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mattermost Post with mmctl\nDESCRIPTION: Deletes a post by its ID from a Mattermost channel. The post can be either marked as deleted (soft delete) or permanently deleted with the `--permanent` flag. Permanent deletion requires confirmation with the `--confirm` flag and ensures a database backup exists. The command can delete multiple posts at once.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_126\n\nLANGUAGE: sh\nCODE:\n```\nmmctl post delete [posts] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl post delete udjmt396tjghi8wnsk3a1qs1sw\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl post delete udjmt396tjghi8wnsk3a1qs1sw --permanent\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl post delete udjmt396tjghi8wnsk3a1qs1sw 7jgcjt7tyjyyu83qz81wo84w6o --permanent\n```\n\n----------------------------------------\n\nTITLE: Cloning Mattermost Docker Repository\nDESCRIPTION: Clones the official Mattermost Docker repository from GitHub to the local machine using git. This provides the necessary Docker Compose files and related configuration examples for deployment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/mattermost/docker\ncd docker\n```\n\n----------------------------------------\n\nTITLE: Restoring a Team using mmctl\nDESCRIPTION: This command allows system administrators to restore a previously archived team using the Mattermost command-line tool (mmctl). It restores the team and makes its content accessible again. Requires mmctl to be properly configured and connected to the Mattermost instance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/team-channel-members.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl team restore\n```\n\n----------------------------------------\n\nTITLE: Removing GPG key (Ubuntu Focal)\nDESCRIPTION: Removes the existing GPG public key for Mattermost's package repository on Ubuntu Focal (20.04 LTS). This is necessary before adding the new key to avoid conflicts.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-key del A1B31D46F0F3A10B02CF2D44F8F2C31744774B28\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Content - Bash\nDESCRIPTION: This command uses `openssl` to display the content of the generated certificate (`mattermost-x509.crt`) in a human-readable format. The `-noout` option suppresses the output of the raw certificate data, and the `-text` option displays the certificate details in a text format.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scripts/generate-certificates/gencert.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in mattermost-x509.crt -noout -text\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Hashtag Length via config.json\nDESCRIPTION: This snippet demonstrates configuring the minimum hashtag length in Mattermost using the `config.json` file. The `MinimumHashtagLength` setting under `SqlSettings` determines the minimum number of characters in a hashtag.  The value must be greater than or equal to 2. The default is 3.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n\".SqlSettings.MinimumHashtagLength: 3\",\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS KMS Policy for Mattermost BYOK\nDESCRIPTION: This JSON snippet demonstrates the policy blocks that an Enterprise customer must add to their AWS KMS Policy to grant Mattermost access to their KMS key. It includes permissions for encryption, decryption, re-encryption, data key generation, and key description. Replace <MATTERMOST_AWS_ACCOUNT_ID>, <VPC_ID>, <CLUSTER_ID>, and <CUSTOM_CUSTOMER_KMS_ID> with the appropriate values.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-byok.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Sid\": \"Allow use of the key\",\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n        \"AWS\": \"arn:aws:iam::<MATTERMOST_AWS_ACCOUNT_ID>:user/mattermost-cloud-<environment>-provisioning-<VPC_ID>\"\n    },\n    \"Action\": [\n        \"kms:Encrypt\",\n        \"kms:Decrypt\",\n        \"kms:ReEncrypt*\",\n        \"kms:GenerateDataKey*\",\n        \"kms:DescribeKey\"\n    ],\n    \"Resource\": \"<CUSTOM_CUSTOMER_KMS_ID>\"\n},\n{\n    \"Sid\": \"Allow use of the key role nodes\",\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n        \"AWS\": \"arn:aws:iam::<MATTERMOST_AWS_ACCOUNT_ID>:role/nodes.<CLUSTER_ID>-kops.k8s.local\"\n    },\n    \"Action\": [\n        \"kms:Encrypt\",\n        \"kms:Decrypt\",\n        \"kms:ReEncrypt*\",\n        \"kms:GenerateDataKey*\",\n        \"kms:DescribeKey\"\n    ],\n    \"Resource\": \"<CUSTOM_CUSTOMER_KMS_ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mattermost CLI with Database Configuration\nDESCRIPTION: This snippet shows how to run a Mattermost CLI command when the configuration is stored in the database. It requires passing the database connection string using the `--config` parameter.  The example uses a PostgreSQL database with specific credentials and connection parameters.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbin/mattermost --config=\"postgres://mmuser:mostest@localhost:5432/mattermost_test?sslmode=disable\\u0026connect_timeout=10\"\n```\n\n----------------------------------------\n\nTITLE: Automatic Prepackaged Plugins Configuration\nDESCRIPTION: This configuration controls whether Mattermost automatically installs and updates pre-packaged plugins. This can be configured via the System Console, the `config.json` file (`PluginSettings.AutomaticPrepackagedPlugins`), or using the `MM_PLUGINSETTINGS_AUTOMATICPREPACKAGEDPLUGINS` environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n- **true**: **(Default)** Mattermost automatically installs and upgrades any enabled pre-packaged plugins. If a newer version is installed, no changes are made.\n- **false**: Mattermost does not automatically install or upgrade pre-packaged plugins. Pre-packaged plugins may be installed manually from the Marketplace, even when offline.\n```\n\n----------------------------------------\n\nTITLE: Modifying Incoming Webhook using mmctl\nDESCRIPTION: This command modifies an existing incoming webhook.  It allows changing the title, description, channel, or icon URL.  Webhook ID is the required argument.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_203\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook modify-incoming [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook modify-incoming [webhookID] --channel [channelID] --display-name [displayName] --description [webhookDescription] --lock-to-channel --icon [iconURL]\n```\n\nLANGUAGE: sh\nCODE:\n```\n--channel string        Channel ID\n--description string    Incoming webhook description\n--display-name string   Incoming webhook display name\n-h, --help              help for modify-incoming\n--icon string           Icon URL\n--lock-to-channel       Lock to channel\n```\n\n----------------------------------------\n\nTITLE: Showing a Webhook with mmctl\nDESCRIPTION: This command is used to display the details of a specific webhook identified by its webhookId. The command requires the webhookId as an argument.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_207\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook show [webhookId] [flags]\n```\n\n----------------------------------------\n\nTITLE: Running mmctl Extract Command\nDESCRIPTION: This command executes the extraction process, potentially with flags, to prepare the data for the new instance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmmctl extract run [flags].\n```\n\n----------------------------------------\n\nTITLE: Listing OpenSearch Indices using Shell\nDESCRIPTION: This command retrieves a list of all indices in the OpenSearch cluster using curl.  It authenticates with a username and password and formats the output for readability.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -s -u '<USERNAME>:<PASSWORD>' 'https://<HOSTNAME>/_cat/indices?pretty'\n```\n\n----------------------------------------\n\nTITLE: Adding ThreadTeamId Column To Threads Table - SQL\nDESCRIPTION: This SQL script checks if a 'ThreadTeamId' column exists in the 'Threads' table and adds it if it doesn't. It uses prepared statements to dynamically execute the 'ALTER TABLE' command, setting the default value to NULL. This prepares the table for storing the team ID associated with each thread.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSET @preparedStatement = (SELECT IF(\n    NOT EXISTS(\n        SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS\n        WHERE table_name = 'Threads'\n        AND table_schema = DATABASE()\n        AND column_name = 'ThreadTeamId'\n\n    ),\n    'ALTER TABLE Threads ADD COLUMN ThreadTeamId varchar(26) DEFAULT NULL;',\n    'SELECT 1;'\n));\n\nPREPARE addColumnIfNotExists FROM @preparedStatement;\nEXECUTE addColumnIfNotExists;\nDEALLOCATE PREPARE addColumnIfNotExists;\n```\n\n----------------------------------------\n\nTITLE: Reset Permissions to Default using mmctl\nDESCRIPTION: This command resets all permissions to the default state as they are on new Mattermost installations. It is a useful tool for troubleshooting or reverting unwanted permission changes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/advanced-permissions.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl permissions reset\n```\n\n----------------------------------------\n\nTITLE: Allowing SSH Access through UFW Firewall\nDESCRIPTION: These commands add UFW firewall rules to allow SSH access from specific IP addresses.  Replace the IP addresses with the internal IPs of other nodes in the Mattermost cluster. The /32 CIDR notation specifies a single host.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nsudo ufw allow from 10.10.250.231/32 to any port ssh\nsudo ufw allow from 10.10.250.165/32 to any port ssh\nsudo ufw status\n```\n\n----------------------------------------\n\nTITLE: Silent Install of Mattermost Desktop App (Batch)\nDESCRIPTION: This batch script silently installs the Mattermost desktop application and generates a pre-configured config.json file in the user's application data directory. It assumes the Mattermost installer is located on a shared network drive. The config.json sets the server URL and other preferences.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/silent-windows-desktop-distribution.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrem \"Step 1: Install Mattermost desktop app silently into user's local disk\"\nstart \\\\SERVER\\shared_folder\\mattermost-setup-4.6.2-win.exe --silent\n\nif not exist \"%APPDATA%\\Mattermost\" mkdir %APPDATA%\\Mattermost\n\nrem \"Step 2: Generate initial config.json into user's config directory\"\n(\n  echo {\n  echo   \"version\": 2,\n  echo   \"teams\": [\n  echo     {\n  echo       \"name\": \"core\",\n  echo       \"url\": \"https://community.mattermost.com\",\n  echo       \"order\": 0\n  echo     }\n  echo   ],\n  echo   \"showTrayIcon\": true,\n  echo   \"trayIconTheme\": \"light\",\n  echo   \"minimizeToTray\": true,\n  echo   \"notifications\": {\n  echo     \"flashWindow\": 2,\n  echo     \"bounceIcon\": true,\n  echo     \"bounceIconType\": \"informational\"\n  echo   },\n  echo   \"showUnreadBadge\": true,\n  echo   \"useSpellChecker\": true,\n  echo   \"enableHardwareAcceleration\": true,\n  echo   \"autostart\": true,\n  echo   \"spellCheckerLocale\": \"en-US\",\n  echo   \"darkMode\": false\n  echo }\n) > %APPDATA%\\Mattermost\\config.json\n```\n\n----------------------------------------\n\nTITLE: Generating a pre-signed URL for an export file with mmctl\nDESCRIPTION: This command generates a pre-signed URL for an export file, particularly useful for large cloud exports. It requires the export file name. The command requires the mmctl tool to be configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_70\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help   help for generate-presigned-url\n```\n\n----------------------------------------\n\nTITLE: Bulk Loading Data Example\nDESCRIPTION: This code snippet illustrates the structure of a JSONL file used for bulk loading data into Mattermost. It showcases the sequence of objects including version, team, channel, user, and post, which are placed on individual lines in the file. The file needs to follow the specified order for successful import.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"type\": \"version\", ... }\n{ \"type\": \"team\", \"team\": { \"name\": \"TeamA\", ...} }\n{ \"type\": \"team\", \"team\": { \"name\": \"TeamB\", ...} }\n{ \"type\": \"channel\", \"channel\": { \"team\": \"TeamA\", \"name\": \"channel_a1\", ...} }\n{ \"type\": \"channel\", \"channel\": { \"team\": \"TeamA\", \"name\": \"channel_a2\", ...} }\n{ \"type\": \"channel\", \"channel\": { \"team\": \"TeamB\", \"name\": \"channel_b1\", ...} }\n{ \"type\": \"channel\", \"channel\": { \"team\": \"TeamB\", \"name\": \"channel_b2\", ...} }\n{ \"type\": \"user\", \"user\": { \"username\": \"user001\", ...} }\n{ \"type\": \"user\", \"user\": { \"username\": \"user002\", ...} }\n{ \"type\": \"user\", \"user\": { \"username\": \"user003\", ...} }\n{ \"type\": \"user\", ... }\n{ \"type\": \"user\", ... }\n{ \"type\": \"user\", ... }\n.\n.\n.\n{ \"type\": \"post\", { \"team\": \"TeamA\", \"name\": \"channel_a1\", \"user\": \"user001\", ...} }\n{ \"type\": \"post\", { \"team\": \"TeamA\", \"name\": \"channel_a1\", \"user\": \"user001\", ...} }\n{ \"type\": \"post\", { \"team\": \"TeamA\", \"name\": \"channel_a1\", \"user\": \"user001\", ...} }\n.\n.\n.\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring Mattermost Omnibus\nDESCRIPTION: Reconfigures the Mattermost Omnibus server after restoring from a backup or modifying the `mmomni.yml` configuration file. This step applies the changes to the server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmmomni reconfigure\n```\n\n----------------------------------------\n\nTITLE: Re-enable SELinux Enforcing Mode - Shell\nDESCRIPTION: This command re-enables SELinux enforcing mode after it has been set to permissive. It requires sudo privileges and returns SELinux to its default security posture.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nsudo setenforce 1\n```\n\n----------------------------------------\n\nTITLE: Restart Mattermost Service on Ubuntu 16.04, Debian Stretch, and RHEL 7\nDESCRIPTION: This command restarts the Mattermost service on newer systems using `systemctl`. It requires `sudo` privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/certificate-based-authentication.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl restart mattermost\n```\n\n----------------------------------------\n\nTITLE: Listing Mattermost Plugins with mmctl\nDESCRIPTION: Lists all installed plugins, indicating whether each is enabled or disabled. It retrieves this information from the Mattermost server. No specific input is required beyond the command itself.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_122\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin list\n```\n\n----------------------------------------\n\nTITLE: Showing mmctl Permissions Role\nDESCRIPTION: Displays all information about a specific role.  The role name must be provided as an argument to retrieve its details. It retrieves and outputs the role's configuration and assigned permissions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_114\n\nLANGUAGE: sh\nCODE:\n```\nmmctl permissions role show <role_name> [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl permissions show system_user\n```\n\n----------------------------------------\n\nTITLE: New API Endpoint: Move Post\nDESCRIPTION: Introduces a new API endpoint, `POST /api/v4/posts/<post ID>/move`, to allow moving posts programmatically. This endpoint enables the relocation of posts within the Mattermost system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_20\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/v4/posts/<post ID>/move\n```\n\n----------------------------------------\n\nTITLE: File Retention Hours config.json setting\nDESCRIPTION: Specifies the config.json setting for file retention hours.  When `FileRetentionHours` is configured, `FileRetentionDays` must be set to 0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"FileRetentionHours\": 1\n```\n\n----------------------------------------\n\nTITLE: Listing Team Groups with mmctl\nDESCRIPTION: This command lists the groups associated with a specified Mattermost team. It uses the `mmctl group team list` command and requires the team name as an argument, along with optional flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_87\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group team list [team] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group team list myteam\n```\n\n----------------------------------------\n\nTITLE: Share Channel Slash Command\nDESCRIPTION: This slash command is used to specify the public or private channels to share with a secure connection. It utilizes the `--connectionID` parameter and optionally allows for a read-only invitation using the `--readonly` parameter.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/connected-workspaces.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/share-channel invite --connectionID <--readonly>\n\nFor example:\n\n/share-channel invite --connectionID\n```\n\n----------------------------------------\n\nTITLE: Fetching Slack Emails and Attachments using slack-advanced-exporter\nDESCRIPTION: This snippet demonstrates how to use the `slack-advanced-exporter` tool to fetch user emails and file attachments from a Slack export. It requires a Slack API token with `users:read` and `users:read.email` scopes, as well as the path to the Slack export file. It outputs a zip file containing the original data, emails and attachments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrate-from-slack.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./slack-advanced-exporter --input-archive <SLACK EXPORT FILE> --output-archive export-with-emails.zip fetch-emails --api-token <SLACK TOKEN>\n./slack-advanced-exporter --input-archive export-with-emails.zip --output-archive export-with-emails-and-attachments.zip fetch-attachments --api-token <SLACK TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON Setting - Session Length Mobile\nDESCRIPTION: Defines the session length in hours for users accessing Mattermost through the mobile app. The default value is 720 hours.  This setting controls how long a user's session lasts after they last entered their credentials into the mobile app.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_94\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.SessionLengthMobileInHours: 720,\"\n```\n\n----------------------------------------\n\nTITLE: Channel Create Command Usage\nDESCRIPTION: Displays the general format for the `mmctl channel create` command.  The specific parameters and flags control the properties of the new channel.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel create [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling Channel Sync with mmctl\nDESCRIPTION: This step describes how to enable channel synchronization with groups using the mmctl command-line tool. Ensure at least one group is already associated with the channel. Then, convert the team to have its membership managed by synchronized groups using the `mmctl group channel enable` command.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap-groups-synchronization.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group channel enable\n```\n\n----------------------------------------\n\nTITLE: Moving the Mattermost Directory to /opt - Shell\nDESCRIPTION: Moves the extracted Mattermost directory to the `/opt` directory using `sudo mv`. Requires sudo privileges. Consider using a different path if desired.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo mv mattermost /opt\n```\n\n----------------------------------------\n\nTITLE: Enabling Call Transcriptions in config.json\nDESCRIPTION: This configuration setting enables or disables automatic transcriptions of calls within the Mattermost Calls plugin.  It is a boolean value, with 'false' as the default, and it requires call recordings to be enabled.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``PluginSettings`` > ``Plugins`` > ``com.mattermost.calls`` > ``enabletranscriptions``\n```\n\n----------------------------------------\n\nTITLE: Capturing network packets using tcpdump\nDESCRIPTION: This command uses the `tcpdump` utility to capture and display network packets flowing through a specified port. It is useful for advanced network debugging to identify source and destination addresses, and to pinpoint network configuration issues.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/calls-deployment.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo tcpdump -n port 8443\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Deep Linking - apple-app-site-association\nDESCRIPTION: This snippet configures deep linking for Mattermost iOS apps. It involves creating an `apple-app-site-association` file in the `.well-known` directory of your server, adding your app ID, and configuring associated domains in the Apple developer portal and Xcode. This configuration allows outside permalinks to open the app.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/mobile/mobile-faq.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"applinks\": {\n            \"apps\": [],\n            \"details\": [\n                {\n                    \"appID\": \"<your-app-id-here>\",\n                    \"paths\": [\"**/pl/*\", \"**/channels/*\"]\n                }\n            ]\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Alter Channels Table - MySQL\nDESCRIPTION: This SQL command alters the `Channels` table in MySQL, modifying the `Type` column to be an ENUM with specified values. This enforces type constraints on the channel type. The command execution time was recorded as 13.24 seconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE Channels MODIFY COLUMN Type ENUM(\"D\", \"O\", \"G\", \"P\");\n```\n\n----------------------------------------\n\nTITLE: Enable Mattermost NGINX configuration (Ubuntu)\nDESCRIPTION: This command creates a symbolic link to enable the Mattermost Nginx configuration file on Ubuntu systems. This enables the Mattermost site configuration for Nginx.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost\n```\n\n----------------------------------------\n\nTITLE: mmctl LDAP Job Show Usage\nDESCRIPTION: This snippet shows how to use the `mmctl ldap job show` command to display specific LDAP synchronization jobs using their ID. It shows the command format and a sample execution.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_103\n\nLANGUAGE: sh\nCODE:\n```\nmmctl ldap job show [ldapJobID] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl ldap show f3d68qkkm7n8xgsfxwuo498rah\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX on Ubuntu\nDESCRIPTION: This snippet demonstrates how to install NGINX on an Ubuntu server using the `apt` package manager. It first updates the package index and then installs the `nginx` package.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo apt install nginx\n```\n\n----------------------------------------\n\nTITLE: Enable Security Alerts - config.json Example (Enabled)\nDESCRIPTION: This snippet shows how security alerts are enabled by default in the `config.json` file. When enabled (`true`), system administrators are notified of security alerts via email, assuming email is configured correctly.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n``\".ServiceSettings.EnableSecurityFixAlert\": true\"``\n```\n\n----------------------------------------\n\nTITLE: Checking Client Certificate (OpenSSL)\nDESCRIPTION: This snippet checks the newly generated client certificate for a user using OpenSSL to verify its contents.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nopenssl x509 -in mmuser-mattermost.crt -text -noout\n```\n\n----------------------------------------\n\nTITLE: Environment Variable: MM_TEAMSETTINGS_TEAMMATENAMEDISPLAY\nDESCRIPTION: This environment variable provides an alternative way to configure the teammate name display setting. It mirrors the functionality of the `TeamSettings.TeammateNameDisplay` option in `config.json`, allowing administrators to manage name display behavior.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_8\n\nLANGUAGE: environment\nCODE:\n```\nMM_TEAMSETTINGS_TEAMMATENAMEDISPLAY\n```\n\n----------------------------------------\n\nTITLE: Defining Redirect URIs for GitLab SSO\nDESCRIPTION: This snippet defines the redirect URIs required for GitLab SSO configuration. It specifies the endpoints that GitLab will redirect to after successful authentication.  The {mattermost-site-name} placeholder should be replaced with the actual Mattermost site URL. Ensure to use 'http://' if GitLab instance is not set up to use SSL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-gitlab.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://{mattermost-site-name}/login/gitlab/complete\nhttps://{mattermost-site-name}/signup/gitlab/complete\n```\n\n----------------------------------------\n\nTITLE: Flushing MySQL Privileges\nDESCRIPTION: This SQL command reloads the grant tables in the MySQL server. It ensures that any changes made to user privileges, such as creating or dropping users, are immediately applied. This command often follows creating or deleting users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nflush privileges;\n```\n\n----------------------------------------\n\nTITLE: Copying Pre-existing TLS Certificate\nDESCRIPTION: Copies pre-existing TLS certificate and key files to the designated directory for use with the Mattermost Docker deployment. Requires the certificate and key files to be available on the file system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ./volumes/web/cert\ncp <PATH-TO-PRE-EXISTING-CERT>.pem ./volumes/web/cert/cert.pem\ncp <PATH-TO-PRE-EXISTING-KEY>.pem ./volumes/web/cert/key-no-password.pem\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User\nDESCRIPTION: This SQL command creates a new MySQL user with the username `mmuser` that can connect from any host (`'%'`). The `identified by` clause sets the password for the user, represented by `{mmuser-password}`. Executing this command requires root privileges or a user with CREATE USER privilege.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ncreate user 'mmuser'@'%' identified by '{mmuser-password}';\n```\n\n----------------------------------------\n\nTITLE: Mattermost DB Reset Command\nDESCRIPTION: This snippet shows how to reset the Mattermost database to its initial state.  It is typically run from the bin directory and truncates tables, excluding the migrations table.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmattermost db reset\n```\n\nLANGUAGE: sh\nCODE:\n```\nbin/mattermost db reset\n```\n\n----------------------------------------\n\nTITLE: Get Network Interface Name\nDESCRIPTION: Retrieves the name of the network interface to use for configuring Elasticsearch. This name is needed to bind Elasticsearch to the correct network interface.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nip addr\n```\n\n----------------------------------------\n\nTITLE: Get System Logs within a Time Range using journalctl\nDESCRIPTION: This command retrieves system logs within a specific time range using `journalctl`. It filters logs based on both a start and end date/time. The output captures logs from all processes on the Mattermost server within the specified period, directing them to a file for review.  Replace the date and time placeholders with the actual timeframe when the issue occurred.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/troubleshooting.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo journalctl --since \"2020-08-23 17:15:00\" --until \"2020-08-23 16:30:00\" > mattermost_journalctl.log\n```\n\n----------------------------------------\n\nTITLE: Renaming a Team with mmctl\nDESCRIPTION: Renames an existing Mattermost team, changing its display name. Requires the team name and the new display name to be provided as arguments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_143\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team rename [team] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team rename old-team --display_name 'New Display Name'\n```\n\n----------------------------------------\n\nTITLE: config.json Example: EnableCommands\nDESCRIPTION: This snippet displays the config.json setting to enable or disable custom slash commands. When enabled, users can create custom slash commands that send events to external integrations, triggering a response back to Mattermost. The default setting is false.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/integrations-configuration-settings.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"EnableCommands\": false\n```\n\n----------------------------------------\n\nTITLE: Setting ADFS Relying Party Trust with PowerShell\nDESCRIPTION: This PowerShell command updates the SAML relying party trust in ADFS to include the signature in SAML messages, which is required for successful verification. The `<display-name>` parameter must be replaced with the display name given during the relying party trust setup.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-saml-adfs.rst#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ADFSRelyingPartyTrust -TargetName <display-name> -SamlResponseSignature \"MessageAndAssertion\"\n```\n\n----------------------------------------\n\nTITLE: Managing Teams with mmctl\nDESCRIPTION: This is the parent command for managing teams using mmctl.  It provides access to subcommands for archiving, creating, deleting, listing, modifying, renaming, restoring, searching, and managing users within teams.  It requires the mmctl tool to be installed and configured to connect to the Mattermost server. Note the necessity to use `team-URL` instead of display name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_137\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help   help for team\n```\n\n----------------------------------------\n\nTITLE: Applying schema and data to PostgreSQL (migration-assist)\nDESCRIPTION: This command uses the mysql.output file to apply the schema and data into the PostgreSQL database, crucial for air-gapped environments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nmigration-assist postgres \"postgres://mmuser:mostest@localhost:5432/imported?sslmode=disable\" --run-migrations --applied-migrations=\"./mysql.output\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Wrangler Settings\nDESCRIPTION: Introduces configuration settings for the Wrangler feature, including `AllowedEmailDomain`, `MoveThreadMaxCount`, `MoveThreadToAnotherTeamEnable`, `MoveThreadFromPrivateChannelEnable`, and `MoveThreadFromDirectMessageChannelEnable`. These settings control various aspects of thread moving functionality in Professional and Enterprise plans.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\nAllowedEmailDomain\\nMoveThreadMaxCount\\nMoveThreadToAnotherTeamEnable\\nMoveThreadFromPrivateChannelEnable\\nMoveThreadFromDirectMessageChannelEnable\n```\n\n----------------------------------------\n\nTITLE: systemd Unit File Content (text)\nDESCRIPTION: Defines the content of the systemd unit file for Mattermost. This configuration specifies how the Mattermost service should be started, stopped, and managed by systemd.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n[Unit]\nDescription=Mattermost\nAfter=network.target\n\n[Service]\nType=notify\nExecStart=/opt/mattermost/bin/mattermost\nTimeoutStartSec=3600\nKillMode=mixed\nRestart=always\nRestartSec=10\nWorkingDirectory=/opt/mattermost\nUser=mattermost\nGroup=mattermost\nLimitNOFILE=49152\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: EnableAPIPostDeletion in config.json\nDESCRIPTION: This snippet illustrates the 'EnableAPIPostDeletion' setting within the 'ServiceSettings' section of the 'config.json' file. When enabled, it allows post deletion via the API. It's not needed when using mmctl in local mode.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ServiceSettings\": {\n    \"EnableAPIPostDeletion\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: mmctl Options\nDESCRIPTION: Lists available options for the mmctl command-line tool. Options allow the user to configure the behavior of mmctl, such as specifying the configuration file path, disabling paged output, or using insecure TLS protocols. Common options include `--config`, `--disable-pager`, `-h`, `--help`, `--json`, `--local`, `--quiet`, `--strict`, and `--suppress-warnings`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n-h, --help                     help for mmctl\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Listing Available Mattermost Imports\nDESCRIPTION: This command lists the available import files on the Mattermost server using `mmctl`. The command retrieves a list of available import files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrate-from-slack.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import list available\n```\n\n----------------------------------------\n\nTITLE: Opening DevTools Console in Mattermost Desktop App (JavaScript)\nDESCRIPTION: This snippet opens an additional set of developer tools for each server added to the Mattermost desktop app. It can be pasted into the Developer Tools Console, which is accessed via View > Developer Tools > Developer Tools for Current Tab. This allows for server-specific debugging.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/desktop-troubleshooting.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementsByTagName(\"webview\")[0].openDevTools();\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Table\nDESCRIPTION: This snippet demonstrates the Markdown syntax for creating a table. It shows how to define the header row, separate columns using pipes, and align columns using colons.  It requires Markdown support in the rendering environment. The output is a formatted table.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| Left column 1 | this text       |  $100 |\n| Left column 2 | is              |   $10 |\n| Left column 3 | centered        |    $1 |\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Compliance Report Creation\nDESCRIPTION: This JSON snippet shows the expected response from the Mattermost API after successfully submitting the Compliance Report creation request. It returns the report's ID, status, and other relevant details. The execution time of the export is based on the number of records and server load.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/electronic-discovery.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":\"du6kektczifqxexeroywpz3nbc\",\" create_at\":1531444617901, \"user_id\":\"qfjzamfg47bu9gsyyfbqjk4s6a\", \"status\":\"running\", \"count\":0, \"desc\":\" \", \"type\":\"adhoc\", \"start_at\":1514769359000, \"end_at\":1546305359000, \"keywords\":\"\", \"emails\":\"craig@mattermost.com\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Mattermost Desktop App on Ubuntu/Debian\nDESCRIPTION: This command updates the Mattermost desktop app on Ubuntu/Debian systems using the `apt` package manager. It updates all installed packages, including Mattermost. The command uses `sudo` to execute the upgrade with administrative privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/linux-desktop-install.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt upgrade mattermost-desktop\n```\n\n----------------------------------------\n\nTITLE: Query Mattermost License Keys (SQL)\nDESCRIPTION: This SQL query retrieves all license keys stored in the `mattermost.Licenses` table. This command is used to verify the uploaded license keys and associated details directly from the database. It requires direct access to the Mattermost SQL database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/admin/installing-license-key.rst#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from mattermost.Licenses;\n```\n\n----------------------------------------\n\nTITLE: Get mmctl Configuration Value\nDESCRIPTION: Retrieves a specific configuration setting from the Mattermost server using dot notation. The command takes the setting name as an argument and prints its value to standard output. No specific dependencies are required.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_55\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config get SqlSettings.DriverName\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed Resource Paths - Mattermost\nDESCRIPTION: This snippet describes how to configure the managed resource paths setting in Mattermost. This setting defines a comma-separated list of paths within the Mattermost domain that are managed by a third-party service instead of Mattermost. The setting can be configured via the System Console, config.json file, and the environment variable MM_SERVICESETTINGS_MANAGEDRESOURCEPATHS. Links to these paths will open in a new tab/window.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.ManagedResourcePaths\"\n```\n\n----------------------------------------\n\nTITLE: mmctl Email User Command\nDESCRIPTION: This command is used to set or modify the email address of an existing user in Mattermost. The user is identified by username, and the email address is provided as an argument.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_172\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user email testuser user@example.com\n```\n\n----------------------------------------\n\nTITLE: Managing Conversations via Slash Commands\nDESCRIPTION: These slash commands provide tools for managing conversations within Mattermost, including sending direct or group messages, displaying code blocks, collapsing/expanding image previews, echoing text, responding with a shrug, and searching message content.  The message content is passed as a parameter to respective commands.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/built-in-slash-commands.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/msg {@username} {message}\n/groupmsg {@username1, @username2, @username3,...} {message}\n/code {text}\n/collapse\n/expand\n/echo {message} {delay in seconds}\n/me {message}\n/shrug {message}\nsearch {text}\n```\n\n----------------------------------------\n\nTITLE: GitHub Theme JSON\nDESCRIPTION: This JSON defines the color settings for the GitHub theme in Mattermost. It customizes elements like the sidebar, text, and indicators to resemble the GitHub interface. Copy and paste the JSON into the custom theme settings in Mattermost to apply this theme.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"awayIndicator\":\"#D4B579\",\n\t\"buttonBg\":\"#66CCCC\",\n\t\"buttonColor\":\"#FFFFFF\",\n\t\"centerChannelBg\":\"#FFFFFF\",\n\t\"centerChannelColor\":\"#444444\",\n\t\"codeTheme\":\"github\",\n\t\"linkColor\":\"#3DADAD\",\n\t\"mentionBg\":\"#66CCCC\",\n\t\"mentionColor\":\"#FFFFFF\",\n\t\"mentionHighlightBg\":\"#3DADAD\",\n\t\"mentionHighlightLink\":\"#FFFFFF\",\n\t\"newMessageSeparator\":\"#F2777A\",\n\t\"onlineIndicator\":\"#52ADAD\",\n\t\"sidebarBg\":\"#F2F0EC\",\n\t\"sidebarHeaderBg\":\"#E8E6DF\",\n\t\"sidebarHeaderTextColor\":\"#424242\",\n\t\"sidebarText\":\"#2E2E2E\",\n\t\"sidebarTextActiveBorder\":\"#66CCCC\",\n\t\"sidebarTextActiveColor\":\"#594545\",\n\t\"sidebarTextHoverBg\":\"#E0E0E0\",\n\t\"sidebarUnreadText\":\"#515151\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ExecStartPre in systemd Unit File\nDESCRIPTION: This configuration snippet adds an `ExecStartPre` directive to the Mattermost systemd unit file.  This directive specifies that the `pre_start.sh` script should be executed before the Mattermost service is started. This ensures that the SSH tunnels are created before Mattermost attempts to communicate with other nodes in the cluster.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n[Service]\nType=notify\nExecStartPre=/opt/mattermost/bin/pre_start.sh\n```\n\n----------------------------------------\n\nTITLE: Disabling Team Group Synchronization via mmctl\nDESCRIPTION: This command disables the synchronization of group members for a specific team using the Mattermost command-line tool (mmctl). This removes the management of team members by synchronized groups, reverting to manual management or other methods.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap-groups-synchronization.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmmctl group team disable\n```\n\n----------------------------------------\n\nTITLE: Adding Users to a Team with mmctl\nDESCRIPTION: Adds specified users to a Mattermost team.  Requires the team name and user identifiers (email or username) as arguments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_146\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team users add [team] [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team users add myteam user@example.com username\n```\n\n----------------------------------------\n\nTITLE: Environment Variable for AllowedUntrustedInternalConnections\nDESCRIPTION: This environment variable controls which internal connections are allowed. It corresponds to the `AllowedUntrustedInternalConnections` setting in `config.json` and is used to whitelist hostnames, IP addresses, and CIDR ranges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_108\n\nLANGUAGE: environment\nCODE:\n```\nMM_SERVICESETTINGS_ALLOWEDUNTRUSTEDINTERNALCONNECTIONS\n```\n\n----------------------------------------\n\nTITLE: config.json setting for Enable Performance Monitoring\nDESCRIPTION: This setting enables or disables performance monitoring in Mattermost. Setting it to 'true' enables data collection and profiling, while 'false' (default) disables it. A server restart is required for the changes to take effect. Access via System Console > Environment > Performance Monitoring.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_98\n\nLANGUAGE: json\nCODE:\n```\n``.MetricsSettings.Enable\": false``\n```\n\n----------------------------------------\n\nTITLE: Restarting NGINX\nDESCRIPTION: This command restarts the NGINX service to apply the new configuration. This command utilizes `systemctl` to accomplish the task.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Installing Morph CLI\nDESCRIPTION: This command installs the Morph CLI tool, which is used to create the PostgreSQL schema during the migration process. It uses the 'go install' command to download and install the morph tool from the specified GitHub repository.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/mattermost/morph/cmd/morph@v1\n```\n\n----------------------------------------\n\nTITLE: Building mmctl from Source\nDESCRIPTION: Builds the mmctl binary from the Mattermost source code. This command needs to be executed from the root directory of the Mattermost repository. It uses the `make` command to compile the mmctl binary.  Requires `go` version 1.19 or greater installed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake -C server mmctl-build\n```\n\n----------------------------------------\n\nTITLE: Mattermost User Email Query (PostgreSQL/MySQL)\nDESCRIPTION: This SQL query retrieves a list of email addresses from the Mattermost database. It's used to gather email addresses for sending onboarding announcements. This query works for both PostgreSQL and MySQL databases.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrating-from-hipchat-to-mattermost.rst#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Email FROM Users\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Join/Leave Messages\nDESCRIPTION: This snippet demonstrates how to configure the default setting for join/leave messages in Mattermost channels. It details the system configuration path, config.json setting, and environment variable for setting whether these messages are displayed by default. The default value is 'true' to display the messages.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n``TeamSettings`` > ``EnableJoinLeaveMessageByDefault`` > ``true``\n```\n\n----------------------------------------\n\nTITLE: Generating Support Packet with mmctl\nDESCRIPTION: This command generates a Mattermost Support Packet using the mmctl command-line tool. It compiles and executes the mmctl tool with the system supportpacket command. The command downloads the support packet to the server, which can then be retrieved. This is helpful for gathering diagnostics from a Mattermost server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/admin/generating-support-packet.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo run ./cmd/mmctl system supportpacket\n```\n\n----------------------------------------\n\nTITLE: Configuring NAT in UFW's after.rules\nDESCRIPTION: This code block configures Network Address Translation (NAT) rules in the /etc/ufw/after.rules file. These rules redirect traffic from the specified IP addresses and ports (8075 and 8074) to localhost on different ports. This allows the SSH tunnels to forward traffic to the correct services within the cluster.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n*nat\n:POSTROUTING ACCEPT [0:0]\n:PREROUTING ACCEPT [0:0]\n\n-A OUTPUT -p tcp -d 10.10.250.231 --dport 8075 -j DNAT --to-destination 127.0.0.1:18075\n-A OUTPUT -p tcp -d 10.10.250.231 --dport 8074 -j DNAT --to-destination 127.0.0.1:18074\n-A OUTPUT -p tcp -d 10.10.250.165 --dport 8075 -j DNAT --to-destination 127.0.0.1:28075\n-A OUTPUT -p tcp -d 10.10.250.165 --dport 8074 -j DNAT --to-destination 127.0.0.1:28074\n\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: License Upload Command Usage (mmctl)\nDESCRIPTION: Demonstrates how to upload a new Mattermost license using the mmctl command-line tool. It replaces the current license with the new one specified by the file path.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_106\n\nLANGUAGE: sh\nCODE:\n```\nmmctl license upload /path/to/license/mylicensefile.mattermost-license\n```\n\n----------------------------------------\n\nTITLE: Remove NGINX default site (Ubuntu)\nDESCRIPTION: This command removes the default Nginx site configuration file on Ubuntu systems. It is necessary to disable the default site so that the Mattermost configuration can take effect.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm /etc/nginx/sites-enabled/default\n```\n\n----------------------------------------\n\nTITLE: Adding Mattermost PPA Repository\nDESCRIPTION: Configures the system to use the Mattermost PPA repository. This script automates the process of adding the repository to the system's package sources, enabling the installation of Mattermost and its dependencies.  It also configures PostgreSQL, Nginx, and Certbot.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- https://deb.packages.mattermost.com/repo-setup.sh | sudo bash -s mattermost\n```\n\n----------------------------------------\n\nTITLE: Create Lists Using Markdown - Text\nDESCRIPTION: Illustrates how to create unordered lists using asterisks, hyphens, or plus signs and ordered lists using numbers. It also demonstrates how to create sub-points by adding two spaces in front of each bullet point.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* item one\n- item two\n  + item two sub-point\n```\n\n----------------------------------------\n\nTITLE: Disabling mmctl Plugin\nDESCRIPTION: Disables specified plugins. The plugins are immediately removed from the user interface and logged out of all sessions. The plugin names (without extension) must be provided as arguments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_119\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin disable [plugins] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin disable hovercardexample pluginexample\n```\n\n----------------------------------------\n\nTITLE: Modifying Outgoing Webhook using mmctl\nDESCRIPTION: This command modifies an existing outgoing webhook. It allows changing the title, description, channel, icon, url, content-type, or triggers. Webhook ID is the required argument.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_204\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook modify-outgoing [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook modify-outgoing [webhookId] --channel [channelId] --display-name [displayName] --description \"New webhook description\" --icon http://localhost:8000/my-slash-handler-bot-icon.png --url http://localhost:8000/my-webhook-handler --content-type \"application/json\" --trigger-word test --trigger-when start\n```\n\nLANGUAGE: sh\nCODE:\n```\n--channel string             Channel name or ID\n--content-type string        Content-type\n--description string         Outgoing webhook description\n--display-name string        Outgoing webhook display name\n-h, --help                   help for modify-outgoing\n--icon string                Icon URL\n--trigger-when string        When to trigger webhook (exact: for first word matches a trigger word exactly, start: for first word starts with a trigger word)\n```\n\n----------------------------------------\n\nTITLE: Set LiveIndexingBatchSize via Environment Variable (Shell)\nDESCRIPTION: This shell command demonstrates how to set the `LiveIndexingBatchSize` using an environment variable. The `LiveIndexingBatchSize` setting defines the number of new posts that are batched together before being added to the Elasticsearch index.  This example sets the batch size to 200.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\nMM_ELASTICSEARCHSETTINGS_LIVEINDEXINGBATCHSIZE = 200\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Tunnels with pre_start.sh\nDESCRIPTION: This script creates SSH tunnels to forward traffic from the local machine to other nodes in the cluster. The `ssh` command uses port forwarding (`-L`) to redirect traffic from specific local ports to the corresponding remote ports on the target nodes.  The tunnels are created in the background (`-f`) and will exit if forwarding fails (`ExitOnForwardFailure=yes`).  The errors from the SSH connections are ignored to allow Mattermost to start even if a tunnel already exists.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/bash\nssh -N -f -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 18075:10.10.250.231:8075 10.10.250.231 || true\nssh -N -f -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 18074:10.10.250.231:8074 10.10.250.231 || true\nssh -N -f -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 28075:10.10.250.165:8075 10.10.250.165 || true\nssh -N -f -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L 28074:10.10.250.165:8074 10.10.250.165 || true\n```\n\n----------------------------------------\n\nTITLE: Disabling Group Management for Channels using mmctl\nDESCRIPTION: This snippet disables group-based membership management for a private channel in Mattermost using the `mmctl group channel disable` command. After running, the channel membership will no longer be synchronized with AD/LDAP groups.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/managing-team-channel-membership-using-ad-ldap-sync-groups.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group channel disable\n```\n\n----------------------------------------\n\nTITLE: Running Playbooks Database Migration - Shell\nDESCRIPTION: This shell command executes the pgloader tool with the 'playbooks.load' configuration file and redirects the output to 'playbooks_migration.log'. pgloader migrates database schemas and data between different database systems.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n  pgloader playbooks.load > playbooks_migration.log\n```\n\n----------------------------------------\n\nTITLE: MySQL Collation Default\nDESCRIPTION: This code snippet shows the default collation setting for Mattermost's `SqlSettings` for MySQL databases. When a collation is not explicitly specified, `utf8mb4_general_ci` is used. This snippet is important for understanding the implicit behavior of Mattermost when connecting to MySQL databases and how it handles character sets.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n  \"SqlSettings\": {\n    \"DataSource\": \"<mmuser:password>@tcp(hostname or IP:3306)/mattermost?charset=utf8mb4,utf8\",\n    [...]\n  }\n```\n\n----------------------------------------\n\nTITLE: Data Migration Baseline Configuration - pgloader\nDESCRIPTION: This pgloader configuration migrates data from a MySQL database to a PostgreSQL database. It specifies connection details, data handling options like `data only`, worker settings, and parameter tuning for both MySQL and PostgreSQL. It also includes data type casting rules and table exclusion patterns.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLOAD DATABASE\n FROM      mysql://{{ .mysql_user }}:{{ .mysql_password }}@{{ .mysql_address }}/{{ .source_db }}\n INTO      pgsql://{{ .pg_user }}:{{ .pg_password }}@{{ .postgres_address }}/{{ .target_db }}\n\nWITH data only,\n workers = 8, concurrency = 1,\n multiple readers per thread, rows per range = 10000,\n prefetch rows = 10000, batch rows = 2500,\n create no tables, create no indexes,\n preserve index names\n\nSET PostgreSQL PARAMETERS\n maintenance_work_mem to '128MB',\n work_mem to '12MB'\n\nSET MySQL PARAMETERS\n net_read_timeout  = '120',\n net_write_timeout = '120'\n\nCAST column Channels.Type to \"channel_type\" drop typemod,\n column Teams.Type to \"team_type\" drop typemod,\n column UploadSessions.Type to \"upload_session_type\" drop typemod,\n column ChannelBookmarks.Type to \"channel_bookmark_type\" drop typemod,\n column Drafts.Priority to text,\n type int when (= precision 11) to integer drop typemod,\n type bigint when (= precision 20) to bigint drop typemod,\n type text to varchar drop typemod using remove-null-characters,\n type tinyint when (<= precision 4) to boolean using tinyint-to-boolean,\n type json to jsonb drop typemod using remove-null-characters\n\nEXCLUDING TABLE NAMES MATCHING ~<IR_>, ~<focalboard>, 'schema_migrations', 'db_migrations', 'db_lock',\n 'Configurations', 'ConfigurationFiles', 'db_config_migrations', 'calls'\n\nBEFORE LOAD DO\n $$ ALTER SCHEMA public RENAME TO {{ .source_db }}; $$,\n $$ TRUNCATE TABLE {{ .source_db }}.systems; $$,\n $$ DROP INDEX IF EXISTS {{ .source_db }}.idx_posts_message_txt; $$,\n $$ DROP INDEX IF EXISTS {{ .source_db }}.idx_fileinfo_content_txt; $$\n\nAFTER LOAD DO\n $$ UPDATE {{ .source_db }}.db_migrations set name='add_createat_to_teamembers' where version=92; $$,\n $$ ALTER SCHEMA {{ .source_db }} RENAME TO public; $$,\n $$ SELECT pg_catalog.set_config('search_path', '\"$user\", public', false); $$,\n $$ ALTER USER {{ .pg_user }} SET SEARCH_PATH TO 'public'; $$\n```\n\n----------------------------------------\n\nTITLE: Organization Theme JSON\nDESCRIPTION: This JSON defines the color settings for the Organization theme in Mattermost. It customizes elements such as the sidebar, text colors, and notification indicators. To use it, copy and paste it into the custom theme input box in Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"sidebarBg\":\"#2071a7\",\n\t\"sidebarText\":\"#ffffff\",\n\t\"sidebarUnreadText\":\"#ffffff\",\n\t\"sidebarTextHoverBg\":\"#136197\",\n\t\"sidebarTextActiveBorder\":\"#7ab0d6\",\n\t\"sidebarTextActiveColor\":\"#ffffff\",\n\t\"sidebarHeaderBg\":\"#2f81b7\",\n\t\"sidebarTeamBarBg\":\"#256996\",\n\t\"sidebarHeaderTextColor\":\"#ffffff\",\n\t\"onlineIndicator\":\"#7dbe00\",\n\t\"awayIndicator\":\"#dcbd4e\",\n\t\"dndIndicator\":\"#ff6a6a\",\n\t\"mentionBg\":\"#fbfbfb\",\n\t\"mentionColor\":\"#2071f7\",\n\t\"centerChannelBg\":\"#f2f4f8\",\n\t\"centerChannelColor\":\"#333333\",\n\t\"newMessageSeparator\":\"#ff8800\",\n\t\"linkColor\":\"#2f81b7\",\n\t\"buttonBg\":\"#1dacfc\",\n\t\"buttonColor\":\"#ffffff\",\n\t\"errorTextColor\":\"#a94442\",\n\t\"mentionHighlightBg\":\"#f3e197\",\n\t\"mentionHighlightLink\":\"#2f81b7\",\n\t\"codeTheme\":\"github\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Availability and Status via Slash Commands\nDESCRIPTION: These slash commands allow users to set their availability status (away, offline, online, dnd) and custom status messages within Mattermost. The `/status` command requires an emoji name and a descriptive message.  `/status clear` removes custom status.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/built-in-slash-commands.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n/away\n/offline\n/online\n/dnd\n/status {emoji_name} {descriptive status_message}\n/status clear\n```\n\n----------------------------------------\n\nTITLE: Including the token in the Authorization header\nDESCRIPTION: This snippet shows how to include the authentication token obtained from the login request in the Authorization header for subsequent API requests using curl. The token is included using the Bearer method. `yi94pwci6ibjfc9phbikhqutbe` is a placeholder and should be replaced with the actual token value.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/electronic-discovery.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i -H 'Authorization: Bearer yi94pwci6ibjfc9phbikhqutbe http://yourmattermosturl/api/v4/users/me'\n```\n\n----------------------------------------\n\nTITLE: AD/LDAP User Filter for Excluding Groups\nDESCRIPTION: This filter is used to exclude users belonging to specific groups from being synchronized into Mattermost. The filter uses the `memberof` attribute to identify group memberships and exclude users who are members of the specified groups. Multiple `(!(memberof=...))` clauses can be chained to exclude users from multiple groups.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap.rst#_snippet_3\n\nLANGUAGE: LDAP Filter\nCODE:\n```\n(&(memberof=cn=ACME_ALL,ou=Users,dc=sademo,dc=com)\n(!(memberof=cn=DEV_OPS,ou=Users,dc=sademo,dc=com)))\n```\n\n----------------------------------------\n\nTITLE: Creating unique index on PropertyFields in PostgreSQL\nDESCRIPTION: Creates a unique index named `idx_propertyfields_unique` on the `PropertyFields` table in PostgreSQL if it doesn't already exist. The index is on the `GroupID`, `TargetID`, and `Name` columns, and it only applies to rows where `DeleteAt` is 0, effectively indexing only non-deleted property fields for uniqueness. This enforces uniqueness for property fields within a group and target.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n CREATE UNIQUE INDEX IF NOT EXISTS idx_propertyfields_unique ON PropertyFields (GroupID, TargetID, Name) WHERE DeleteAt = 0;\n```\n\n----------------------------------------\n\nTITLE: Counting OAuth Access Data SQL\nDESCRIPTION: This SQL query counts OAuth access tokens that are not associated with an OAuth application preference and have a valid session. It joins the `OAuthAccessData`, `Preferences`, and `Sessions` tables and filters for tokens where the preference is null.  This helps identify potentially orphaned or invalid access tokens.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\n SELECT COUNT(o.`Token`)                                                                                                                                         \n FROM OAuthAccessData o                                                                                                                                          \n LEFT JOIN Preferences p ON o.                                                                                                                                   \n   clientid = p.name                                                                                                                                             \n   AND o.userid = p.userid                                                                                                                                       \n   AND p.category = 'oauth_app'                                                                                                                                  \n INNER JOIN Sessions s ON o.token = s                                                                                                                            \n   .token                                                                                                                                                        \n WHERE p.name IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Fallback\nDESCRIPTION: This configuration setting, `PluginSettingsSection.Fallback`, determines whether settings defined under a section should still render as a fallback when the plugin is disabled. This enables administrators to manage settings that persist even if the plugin is inactive.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nPluginSettingsSection.Fallback\n```\n\n----------------------------------------\n\nTITLE: Set File and Folder Permissions (chown)\nDESCRIPTION: Sets the file and folder permissions for the Mattermost installation, assigning ownership to the 'mattermost' user and group using the chown command. This ensures the correct user has access to the Mattermost files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown -R mattermost:mattermost /opt/mattermost\n```\n\n----------------------------------------\n\nTITLE: Listing Import Jobs with mmctl\nDESCRIPTION: This command lists import jobs with optional filters such as page number and items per page. It uses the `mmctl import job list` command. The command allows fetching all import jobs, ignoring pagination when the `--all` flag is used.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_90\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import job list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import job list\n```\n\n----------------------------------------\n\nTITLE: Channel Delete Command Usage\nDESCRIPTION: Presents the format of the `mmctl channel delete` command, which permanently deletes the specified channels. Requires the `Enable API Channel Deletion` configuration setting to be set to `true`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel delete [channels] [flags]\n```\n\n----------------------------------------\n\nTITLE: Downgrading Mattermost Database (SQL)\nDESCRIPTION: This SQL snippet provides a series of commands to downgrade a Mattermost database from version 6.0 to 5.38. It includes commands to update the system version, drop and create indexes, and alter table definitions. This is a destructive operation and should be performed with caution and a database backup.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO Systems (Name,Value) VALUES ('Version','5.38.0') ON DUPLICATE KEY UPDATE Value = '5.38.0';\n\n    CREATE INDEX idx_status_status ON Status (Status);\n    DROP INDEX idx_status_status_dndendtime ON Status;\n    CREATE INDEX idx_channelmembers_user_id ON ChannelMembers (UserId);\n    DROP INDEX idx_channelmembers_channel_id_scheme_guest_user_id ON ChannelMembers;\n    DROP INDEX idx_channelmembers_user_id_channel_id_last_viewed_at ON ChannelMembers;\n    CREATE INDEX idx_threads_channel_id ON Threads (ChannelId);\n    DROP INDEX idx_threads_channel_id_last_reply_at ON Threads;\n    CREATE INDEX idx_channels_team_id ON Channels (TeamId);\n    DROP INDEX idx_channels_team_id_type ON Channels;\n    DROP INDEX idx_channels_team_id_display_name ON Channels;\n    CREATE INDEX idx_posts_root_id ON Posts (RootId);\n    DROP INDEX idx_posts_root_id_delete_at ON Posts;\n\n    ALTER TABLE CommandWebhooks ADD COLUMN ParentId varchar(26);\n    UPDATE CommandWebhooks SET ParentId = '';\n    ALTER TABLE Posts ADD COLUMN ParentId varchar(26);\n    UPDATE Posts SET ParentId = '';\n\n    ALTER TABLE Users MODIFY Timezone text;\n    ALTER TABLE Users MODIFY NotifyProps text;\n    ALTER TABLE Users MODIFY Props text;\n    ALTER TABLE Threads MODIFY Participants longtext;\n    ALTER TABLE Sessions MODIFY Props text;\n    ALTER TABLE Posts MODIFY Props text;\n    ALTER TABLE Jobs MODIFY Data text;\n    ALTER TABLE LinkMetadata MODIFY Data text;\n    ALTER TABLE ChannelMembers MODIFY NotifyProps text;\n```\n\n----------------------------------------\n\nTITLE: mmctl User Convert Command\nDESCRIPTION: This command converts user accounts to bots or bots to user accounts. To convert a user to a bot, provide the user's email, username, or ID with the `--bot` flag. To convert a bot to a user, provide the bot's username with the `--user` flag, along with the new email and password.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_153\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user convert (--bot [emails] [usernames] [userIds] | --user <username> --password PASSWORD [--email EMAIL]) [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl user convert user@example.com --bot\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl user convert user@example.com anotherUser --bot\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl user convert botusername --email new.email@email.com --password password --user\n```\n\n----------------------------------------\n\nTITLE: Set bin contexts for /opt/mattermost/bin (semanage, restorecon)\nDESCRIPTION: Sets the SELinux bin context for the /opt/mattermost/bin directory and its contents, labeling the Mattermost binaries as safe for SELinux. This is necessary for Mattermost to function correctly when SELinux is enabled in enforcing mode on RHEL9.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsudo semanage fcontext -a -t bin_t \"/opt/mattermost/bin(/.*)?\"\nsudo restorecon -RF /opt/mattermost/bin\n```\n\n----------------------------------------\n\nTITLE: Assign System Manager Role using mmctl\nDESCRIPTION: This command assigns the System Manager role to a specified user using the mmctl command-line tool. The system_manager parameter specifies the role to assign, and user-name specifies the user to whom the role is assigned.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl permissions role assign system_manager user-name\n```\n\n----------------------------------------\n\nTITLE: config.json setting for EnableDeveloper\nDESCRIPTION: This setting enables or disables developer mode in Mattermost. When enabled, Javascript errors are shown in a banner. It's not recommended for production environments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_103\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.EnableDeveloper\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Trace Logging with JSON\nDESCRIPTION: This JSON configuration sets up file-based trace logging for LDAP. It defines various logging levels (LDAPTrace, LDAPDebug, LDAPInfo, LDAPWarn, LDAPError) with associated IDs and configures options for the log file, including filename, maximum size (in MB), maximum age (in days), maximum number of backups, and compression. The `stacktrace` parameter is enabled for `LDAPWarn` and `LDAPError` levels to include stack traces in the logs, which is useful for debugging. The `maxqueuesize` parameter defines the size of the logging queue.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/logging.rst#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"ldap-file\": {\n        \"type\": \"file\",\n        \"format\": \"plain\",\n        \"levels\": [\n            {\n                \"id\": 144,\n                \"name\": \"LDAPTrace\"\n            },\n            {\n                \"id\": 143,\n                \"name\": \"LDAPDebug\"\n            },\n            {\n                \"id\": 142,\n                \"name\": \"LDAPInfo\"\n            },\n            {\n                \"id\": 141,\n                \"name\": \"LDAPWarn\",\n                \"stacktrace\": true\n            },\n            {\n                \"id\": 140,\n                \"name\": \"LDAPError\",\n                \"stacktrace\": true\n            }\n        ],\n        \"options\": {\n            \"filename\": \"./logs/ldap.log\",\n            \"max_size\": 100,\n            \"max_age\": 14,\n            \"max_backups\": 3,\n            \"compress\": false\n        },\n        \"maxqueuesize\": 1000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Channel Index Shards Configuration\nDESCRIPTION: Defines the number of shards for each channel index in Elasticsearch. Configurable via config.json (Elasticsearchsettings.ChannelIndexShards) or the environment variable MM_ELASTICSEARCHSETTINGS_CHANNELINDEXSHARDS. Default value is 1.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_35\n\nLANGUAGE: JSON\nCODE:\n```\n\".Elasticsearchsettings.ChannelIndexShards: 1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Desktop Entry on Linux (Beta)\nDESCRIPTION: This script `create_desktop_file.sh` creates a `Mattermost.desktop` desktop entry on Linux systems.  It facilitates integration of the application into the desktop environment, allowing it to be launched from the application menu and properly associated with file types. It relies on the shell environment to execute.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/desktop-app-changelog.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncreate_desktop_file.sh\n```\n\n----------------------------------------\n\nTITLE: Validate Key or Certificate Format\nDESCRIPTION: This command validates the format of a key or certificate file using `cat` with the `-A` option, which displays non-printing characters.  It outputs the file content with special characters, making it possible to verify proper line endings and the presence of the BEGIN and END markers.  The output is inspected manually to ensure the file meets the required format criteria.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/troubleshooting.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncat -A /path/to/key-or.cert\n```\n\n----------------------------------------\n\nTITLE: Client Key Passphrase (Text)\nDESCRIPTION: Displays the required passphrase to encrypt the user's private key.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npassphrase: mmuser-passphrase\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Teams in Mattermost Desktop (JSON)\nDESCRIPTION: Configures a list of server URLs and their display names added to the desktop app by default. Users cannot modify these teams unless `enableServerManagement` is set to `true`. Expects a JSON array of key-value pairs, where each object has `name` and `url` properties.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/distribute-a-custom-desktop-app.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n      \"name\": \"example\",\n      \"url\": \"https://example.com\"\n    },\n    {\n      \"name\": \"mattermost\",\n      \"url\": \"https://www.mattermost.com\"\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Defining DirectChannel Object in Mattermost\nDESCRIPTION: This JavaScript snippet demonstrates the structure of a DirectChannel object for Mattermost data import. It includes the channel type, members (usernames), header, and users who have favorited the channel. Note: In a data file, the object must be represented on a single line.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"direct_channel\",\n    \"direct_channel\": {\n      \"members\": [\n        \"username1\",\n        \"username2\",\n        \"username3\"\n      ],\n      \"header\": \"The Channel Header\",\n      \"favorited_by\": [\n        \"username1\",\n        \"username2\",\n        \"username3\"\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: mmctl Job Update Usage\nDESCRIPTION: This snippet demonstrates the usage of the `mmctl job update` command for updating the status of a job. It includes examples of updating a job's status and using the `--force` flag to bypass restrictions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_100\n\nLANGUAGE: sh\nCODE:\n```\nmmctl job update [job] [status] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\njob update myJobID pending\n job update myJobID pending --force true\n job update myJobID canceled --force true\n```\n\n----------------------------------------\n\nTITLE: mmctl Global Options\nDESCRIPTION: Defines the global options inherited by all mmctl commands. These options control configuration file path, output formatting, TLS security, and command execution behavior.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_181\n\nLANGUAGE: sh\nCODE:\n```\n   --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n   --disable-pager                disables paged output\n   --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n   --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n   --json                         the output format will be in json format\n   --local                        allows communicating with the server through a unix socket\n   --quiet                        prevent mmctl to generate output for the commands\n   --strict                       will only run commands if the mmctl version matches the server one\n   --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Request Timeout Configuration\nDESCRIPTION: This snippet configures the timeout duration for requests to Amazon S3, in milliseconds. The default value is 30000 (30 seconds), and the configuration can be set via the config.json file, or environment variable. This setting is not available in the system console.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_63\n\nLANGUAGE: text\nCODE:\n```\nconfig.json setting: \".FileSettings.AmazonS3RequestTimeoutMilliseconds: 30000\"\nEnvironment variable: \"MM_FILESETTINGS_AMAZONS3REQUESTTIMEOUTMILLISECONDS\"\n```\n\n----------------------------------------\n\nTITLE: Database Query: Get LDAP Users\nDESCRIPTION: This SQL query retrieves all users from the Mattermost database whose AuthService is set to 'ldap'. This is part of the SAML synchronization process with AD/LDAP.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-saml-technical.rst#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM Users WHERE AuthService = 'ldap'\n```\n\n----------------------------------------\n\nTITLE: Selecting user messages from Mattermost database\nDESCRIPTION: This SQL query selects all messages for a specified user from the Mattermost database. It uses a subquery to retrieve the user's ID based on their username from the `mattermost.Users` table, then filters the messages in the `mattermost.Posts` table based on this ID.  The username 'username' should be replaced with the actual username.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/electronic-discovery.rst#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM mattermost.Posts WHERE UserId = (SELECT Id FROM mattermost.Users WHERE Username = 'username');\n```\n\n----------------------------------------\n\nTITLE: Extract Job Show Command\nDESCRIPTION: Shows details for a specific extract job, identified by its ID. It inherits global options for configuration, output formatting, and security settings. The job ID is a required parameter.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_78\n\nLANGUAGE: sh\nCODE:\n```\nmmctl extract job show [extractJobID] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl extract job show f3d68qkkm7n8xgsfxwuo498rah\n```\n\n----------------------------------------\n\nTITLE: Follow Kubernetes Pod Logs\nDESCRIPTION: Kubectl command used to follow the logs of a specific pod within a Kubernetes namespace.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nkubectl -n [namespace] logs -f [pod name]\n```\n\n----------------------------------------\n\nTITLE: Creating Volume Directories\nDESCRIPTION: Creates necessary directories for persistent storage of Mattermost configuration, data, logs, plugins, and search indexes. It also sets the appropriate ownership permissions for the 'mattermost' user (UID 2000).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ./volumes/app/mattermost/{config,data,logs,plugins,client/plugins,bleve-indexes}\nsudo chown -R 2000:2000 ./volumes/app/mattermost\n```\n\n----------------------------------------\n\nTITLE: Assign Custom Group Manager Role using mmctl\nDESCRIPTION: This command assigns the Custom Group Manager role to two specified users using the mmctl command-line tool. The system_custom_group_admin parameter specifies the role to assign, and user-name1 and user-name2 specify the users to whom the role is assigned.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl permissions role assign system_custom_group_admin user-name1 user-name2\n```\n\n----------------------------------------\n\nTITLE: Managing Channels (Header, Purpose, Rename) via Slash Commands\nDESCRIPTION: These slash commands provide functionalities to manage channels, allowing users to edit the channel header, purpose, and rename the channel. The text to be used for header, purpose, or the new channel name is passed as a parameter to these commands.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/built-in-slash-commands.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n/header {text}\n/purpose {text}\n/rename {text}\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Search Path for User\nDESCRIPTION: These SQL commands set the search path for a specific PostgreSQL user to include 'public'. This ensures the user has default access to the public schema after the pgloader migration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration.rst#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER <user> SET SEARCH_PATH TO 'public';\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT pg_catalog.set_config('search_path', '\"$user\", public', false); -- should give access for the session\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions\nDESCRIPTION: This snippet demonstrates how to set the file permissions for the Mattermost directory using the `chown` command. It recursively changes the owner and group of the `/opt/mattermost` directory to `mattermost`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown -R mattermost:mattermost /opt/mattermost\n```\n\n----------------------------------------\n\nTITLE: Deleting Auto-Follow Rule in OpenSearch using Shell\nDESCRIPTION: This command deletes a specific auto-follow rule in OpenSearch, using curl to send an HTTP DELETE request to the replication plugin endpoint. It requires authentication and specifies the leader alias and rule name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XDELETE -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/_autofollow?pretty' -d '\n{\n  \"leader_alias\" : \"<LEADER_ALIAS>\",\n  \"name\": \"autofollow-rule\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: MaximumPayloadSizeBytes\nDESCRIPTION: This setting defines the maximum payload size limit for HTTP requests.  The default value has been increased from 100 kB to 300 kB. Existing servers require a manual update to this value in the ServiceSettings section of config.json.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ServiceSettings\": {\n    \"MaximumPayloadSizeBytes\": 307200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing mmctl Plugin\nDESCRIPTION: Lists available subcommands for managing plugins.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_116\n\nLANGUAGE: sh\nCODE:\n```\n-  `mmctl plugin add`_ - Add plugins\n-  `mmctl plugin delete`_ - Remove plugins\n-  `mmctl plugin disable`_ - Disable plugins\n-  `mmctl plugin enable`_ - Enable plugins\n-  `mmctl plugin install-url`_ - Install plugin from URL\n-  `mmctl plugin list`_ - List plugins\n-  `mmctl plugin marketplace`_ - Manage Marketplace plugins\n```\n\n----------------------------------------\n\nTITLE: Archiving mmctl Slash Command\nDESCRIPTION: This snippet demonstrates how to archive a slash command using the `mmctl command archive` command.  The command takes a command ID as input. The archived command is identified by its ID.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_44\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command archive [commandID] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command archive commandID\n```\n\n----------------------------------------\n\nTITLE: Adding Another Open Source Component\nDESCRIPTION: This snippet shows adding another open source component which is ``@voximplant/react-native-foreground-service`` to the Mattermost mobile app from https://github.com/mattermost/mattermost-mobile. This adds support for foreground services within the react native framework.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mobile-app-changelog.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nAdded ``@voximplant/react-native-foreground-service`` to https://github.com/mattermost/mattermost-mobile.\n```\n\n----------------------------------------\n\nTITLE: Unassigning System Manager Role with mmctl\nDESCRIPTION: This command removes the system_manager role from a specific user, in this case, 'bob-smith'. It utilizes the 'mmctl permissions role unassign' command to revoke the assigned role.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nmmctl permissions role unassign system_manager bob-smith\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Search Path\nDESCRIPTION: This SQL command displays the current search path in PostgreSQL. This is used to verify the search path settings after the pgloader migration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration.rst#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT current_setting('search_path');\n```\n\n----------------------------------------\n\nTITLE: Environment Variable for EnableClientPerformanceDebugging\nDESCRIPTION: This environment variable controls client-side debugging settings in Mattermost, corresponding to the `EnableClientPerformanceDebugging` setting in the `config.json` file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_106\n\nLANGUAGE: environment\nCODE:\n```\nMM_SERVICESETTINGS_ENABLECLIENTPERFORMANCEDEBUGGING\n```\n\n----------------------------------------\n\nTITLE: Configuring Websocket Broadcasting Performance in config.json\nDESCRIPTION: This snippet demonstrates the configuration setting `EnableWebHubChannelIteration` within the `ServiceSettings` section of `config.json`. It allows control over websocket broadcasting performance, optimizing for high concurrency at the expense of channel join/leave performance. Enabling this feature is only recommended for installations with at least 200,000 concurrent active users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ServiceSettings\": {\n    \"EnableWebHubChannelIteration\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Custom User Group with mmctl\nDESCRIPTION: This command restores a custom user group. It uses the `mmctl group user restore` command and requires the group name as an argument, along with optional flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_89\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group user restore [groupname] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group user restore examplegroup\n```\n\n----------------------------------------\n\nTITLE: Configure Data Source in config.json (Mattermost)\nDESCRIPTION: This JSON snippet shows how to configure the data source in the Mattermost `config.json` file. The `DataSource` key specifies the connection string to the master database, including the username, password, server name, and character set.  Correct configuration ensures proper communication with the database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/mobile/mobile-troubleshooting.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  \"SqlSettings\": {\n      \"DataSource\": \"<user:pass>@<servername>/mattermost?charset=utf8mb4,utf8\",\n      [...]\n    }\n```\n\n----------------------------------------\n\nTITLE: Mattermost DB Init Command\nDESCRIPTION: These snippets demonstrates initializing the Mattermost database. It includes examples using the `--config` flag to specify the database connection string (DSN), using the `MM_CONFIG` environment variable, and using the `MM_CUSTOM_DEFAULTS_PATH` variable to load a custom defaults file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmattermost db init\n```\n\nLANGUAGE: sh\nCODE:\n```\nmattermost db init --config postgres://localhost/mattermost\n```\n\nLANGUAGE: sh\nCODE:\n```\nMM_CONFIG=postgres://localhost/mattermost mattermost db init\n```\n\nLANGUAGE: sh\nCODE:\n```\nMM_CUSTOM_DEFAULTS_PATH=custom.json MM_CONFIG=postgres://localhost/mattermost mattermost db init\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminate Sessions on Password Change via config.json\nDESCRIPTION: This setting determines whether user sessions are revoked when a user's password is changed. It's configured via the config.json file. `true` enables session revocation (default for new deployments), and `false` disables it (default for existing deployments).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_92\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.TerminateSessionsOnPasswordChange: true,\n```\n\n----------------------------------------\n\nTITLE: Defining a Post Object in JSON\nDESCRIPTION: This code snippet illustrates the structure of a Post object within a Mattermost data file. It includes fields such as `type`, `post`, `team`, `channel`, `user`, `message`, `props` (including `attachments`), `create_at`, `flagged_by`, `replies` (containing `user`, `message`, `create_at`, and nested `attachments`), `reactions` (with `user`, `emoji_name`, and `create_at`), and `attachments`. The object represents a post within a team and channel, including replies, reactions, and file attachments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"post\",\n    \"post\": {\n      \"team\": \"team-name\",\n      \"channel\": \"channel-name\",\n      \"user\": \"username\",\n      \"message\": \"The post message\",\n      \"props\": {\n        \"attachments\": [{\n          \"pretext\": \"This is the attachment pretext.\",\n          \"text\": \"This is the attachment text.\"\n        }]\n      },\n      \"create_at\": 140012340013,\n      \"flagged_by\": [\n        \"username1\",\n        \"username2\",\n        \"username3\"\n      ],\n      \"replies\": [{\n        \"user\": \"username4\",\n        \"message\": \"The reply message\",\n        \"create_at\": 140012352049,\n        \"attachments\": [{\n            \"path\": \"/some/valid/file/path/1\"\n        }]\n      }, {\n        \"user\": \"username5\",\n        \"message\": \"Other reply message\",\n        \"create_at\": 140012353057\n      }],\n      \"reactions\": [{\n        \"user\": \"username6\",\n        \"emoji_name\": \"+1\",\n        \"create_at\": 140012356032\n      }, {\n        \"user\": \"username7\",\n        \"emoji_name\": \"heart\",\n        \"create_at\": 140012359034\n      }],\n      \"attachments\": [{\n        \"path\": \"/some/valid/file/path/1\"\n      }, {\n        \"path\": \"/some/valid/file/path/2\"\n      }]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: mmctl auth delete command\nDESCRIPTION: This command deletes a named credential.  It removes the authentication information for the specified server name from the configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth delete [server name] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth delete local-server\n```\n\n----------------------------------------\n\nTITLE: Updating Mattermost Preview Image & Container (Shell)\nDESCRIPTION: This snippet updates the Mattermost preview Docker image and container. It first pulls the latest image from the repository, then stops and removes the existing container named 'mattermost-preview'. Requires Docker to be installed and configured. Execute these commands in a shell environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull mattermost/mattermost-preview\ndocker stop mattermost-preview\ndocker rm mattermost-preview\n```\n\n----------------------------------------\n\nTITLE: Updating Cluster Encryption Key - PostgreSQL\nDESCRIPTION: This SQL command updates the ClusterEncryptionKey value in the 'systems' table for PostgreSQL.  It requires shutting down the entire Mattermost cluster before applying the change and restarting afterwards.  The 'value' parameter should be replaced with the desired encryption key.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_55\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE systems SET value='<value>' WHERE name='ClusterEncryptionKey'\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Removing Unused Settings\nDESCRIPTION: The following unused settings have been removed from the ClusterSettings section of config.json: StreamingPort, MaxIdleConns, MaxIdleConnsPerHost, and IdleConnTimeoutMilliseconds.  These settings no longer have any effect and should be removed from existing configurations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ClusterSettings\": {\n    \"StreamingPort\": \"removed\",\n    \"MaxIdleConns\": \"removed\",\n    \"MaxIdleConnsPerHost\": \"removed\",\n    \"IdleConnTimeoutMilliseconds\": \"removed\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Altering Database Collation - MySQL (Generic)\nDESCRIPTION: This SQL command alters the collation of a MySQL database. It's a more general version used to correct collation mismatch errors during Mattermost upgrades. Replace `<db_name>` with the database name and `<collation>` with the desired collation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nALTER DATABASE <db_name> COLLATE = '<collation>';\n```\n\n----------------------------------------\n\nTITLE: Mattermost Plugin Multi Hook Time Metric\nDESCRIPTION: Defines a Prometheus metric for tracking the execution time of multiple plugin hook handlers on the server. The metric is a histogram, allowing for aggregation and analysis of execution time distribution.  The metric includes a 'le' label which signifies less than or equal to value of the bucket.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/performance-alerting.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  mattermost_plugin_multi_hook_server_time_bucket{le=\"0.005\"} 1043\n```\n\n----------------------------------------\n\nTITLE: Environment Variable for EnableDeveloper\nDESCRIPTION: This environment variable enables or disables developer mode in Mattermost. It corresponds to the `EnableDeveloper` setting in the `config.json` file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_104\n\nLANGUAGE: environment\nCODE:\n```\nMM_SERVICESETTINGS_ENABLEDEVELOPER\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Server Name - Mattermost\nDESCRIPTION: When using a custom Global Relay customer account type, this setting specifies the SMTP server name URL that receives the Global Relay EML file. It is configured via the System Console, config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Add ChannelId Column to Reactions - MySQL\nDESCRIPTION: This SQL command adds a new column named `ChannelId` to the `Reactions` table in MySQL.  It's defined as a varchar(26) and is NOT NULL with a default value of an empty string. This is used for schema changes in Mattermost v7.1.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE Reactions ADD COLUMN ChannelId varchar(26) NOT NULL DEFAULT \"\";\n```\n\n----------------------------------------\n\nTITLE: Alter and Update PostgreSQL Reactions Table\nDESCRIPTION: These SQL commands modify the `reactions` table in PostgreSQL. First, they add a `channelid` column if it doesn't already exist. Then, they update the `channelid` column for existing rows, populating it with the `channelid` from the `posts` table based on the `postid`. Finally, they create an index on the `channelid` column using `CREATE INDEX CONCURRENTLY` to avoid locking the table.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_45\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE reactions ADD COLUMN IF NOT EXISTS channelid varchar(26) NOT NULL DEFAULT '';\n```\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE reactions SET channelid = COALESCE((select channelid from posts where posts.id = reactions.postid), '') WHERE channelid='';\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX CONCURRENTLY IF NOT EXISTS idx_reactions_channel_id on reactions (channelid);\n```\n\n----------------------------------------\n\nTITLE: mmctl LDAP Job List Usage\nDESCRIPTION: This snippet provides the usage of the `mmctl ldap job list` command, which lists LDAP synchronization jobs. It includes the command format and a basic example.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_102\n\nLANGUAGE: sh\nCODE:\n```\nmmctl ldap job list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl ldap job list\n```\n\n----------------------------------------\n\nTITLE: Creating PropertyValues table in PostgreSQL\nDESCRIPTION: Creates a table named `PropertyValues` in PostgreSQL if it doesn't already exist. This table stores the actual values for property fields, including their ID, target ID, target type, group ID, field ID, value (as a JSONB object), and creation/update/deletion timestamps. The `Value` column stores the data in JSONB format to accommodate different data types.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n CREATE TABLE IF NOT EXISTS PropertyValues (\n  ID varchar(26) PRIMARY KEY,\n  TargetID varchar(255) NOT NULL,\n  TargetType varchar(255) NOT NULL,\n  GroupID varchar(26) NOT NULL,\n  FieldID varchar(26) NOT NULL,\n  Value jsonb NOT NULL,\n  CreateAt bigint NOT NULL,\n  UpdateAt bigint NOT NULL,\n  DeleteAt bigint NOT NULL\n );\n```\n\n----------------------------------------\n\nTITLE: Legal Hold Verification Success Output\nDESCRIPTION: This code block illustrates the output when the Legal Hold secret key verification is successful. It verifies a specific Legal Hold and confirms its verification status.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/legal-hold.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSecret key was provided, verifying legal holds...\n- Verifying Legal Hold *processor9*: Verified\n```\n\n----------------------------------------\n\nTITLE: Defining User Object in JavaScript\nDESCRIPTION: This JavaScript code snippet represents a User object structure used for bulk import into Mattermost. It demonstrates the required fields such as 'username', 'email', and optional fields such as 'first_name', 'last_name', 'position', 'roles', 'teams', and 'profile_image'. The teams array defines team memberships, roles, themes, and channel-specific notify properties.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"user\",\n    \"user\": {\n      \"profile_image\": \"profile-picture.png\",\n      \"username\": \"username\",\n      \"email\": \"email@example.com\",\n      \"auth_service\": \"\",\n      \"password\": \"passw0rd\",\n      \"nickname\": \"bobuser\",\n      \"first_name\": \"Bob\",\n      \"last_name\": \"User\",\n      \"position\": \"Senior Developer\",\n      \"roles\": \"system_user\",\n      \"locale\": \"pt_BR\",\n      \"teams\": [\n        {\n          \"name\": \"team-name\",\n          \"theme\": \"{\n              \\\"awayIndicator\\\":\\\"#DBBD4E\\\",\n              \\\"buttonBg\\\":\\\"#23A1FF\\\",\n              \\\"buttonColor\\\":\\\"#FFFFFF\\\",\n              \\\"centerChannelBg\\\":\\\"#ffffff\\\",\n              \\\"centerChannelColor\\\":\\\"#333333\\\",\n              \\\"codeTheme\\\":\\\"github\\\",\n              \\\"linkColor\\\":\\\"#2389d7\\\",\n              \\\"mentionBg\\\":\\\"#2389d7\\\",\n              \\\"mentionColor\\\":\\\"#ffffff\\\",\n              \\\"mentionHighlightBg\\\":\\\"#fff2bb\\\",\n              \\\"mentionHighlightLink\\\":\\\"#2f81b7\\\",\n              \\\"newMessageSeparator\\\":\\\"#FF8800\\\",\n              \\\"onlineIndicator\\\":\\\"#7DBE00\\\",\n              \\\"sidebarBg\\\":\\\"#fafafa\\\",\n              \\\"sidebarHeaderBg\\\":\\\"#3481B9\\\",\n              \\\"sidebarHeaderTextColor\\\":\\\"#ffffff\\\",\n              \\\"sidebarText\\\":\\\"#333333\\\",\n              \\\"sidebarTextActiveBorder\\\":\\\"#378FD2\\\",\n              \\\"sidebarTextActiveColor\\\":\\\"#111111\\\",\n              \\\"sidebarTextHoverBg\\\":\\\"#e6f2fa\\\",\n              \\\"sidebarUnreadText\\\":\\\"#333333\\\"\\n              }\",\n          \"roles\": \"team_user team_admin\",\n          \"channels\": [\n            {\n              \"name\": \"channel-name\",\n              \"roles\": \"channel_user\",\n              \"notify_props\": {\n                \"desktop\": \"default\",\n                \"mark_unread\": \"all\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Webhooks using mmctl\nDESCRIPTION: This command retrieves and displays a list of all webhooks.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_202\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook list myteam\n```\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: config.json example for DisableDatabaseSearch\nDESCRIPTION: This code snippet demonstrates how to disable database search using the `config.json` setting. When set to `false`, database search is disabled, potentially improving server performance in larger deployments but requiring an alternative search engine.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n\"SqlSettings.DisableDatabaseSearch: false\"\n```\n\n----------------------------------------\n\nTITLE: Accept Secure Connection Slash Command\nDESCRIPTION: This slash command accepts a secure connection invitation from a remote Mattermost instance. The command takes the `--name`, `--displayname`, `--password`, and `--invite` parameters, where `--invite` expects the encrypted code blob.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/connected-workspaces.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/secure-connection accept --name --displayname --password --invite [code blob]\n\nFor example:\n\n/secure-connection accept --name AcmeUS --displayname “AcmeUSA” --password examplepassword --invite [code-blob]\n```\n\n----------------------------------------\n\nTITLE: Channel Create Example - Private\nDESCRIPTION: Shows how to create a new private channel called 'mynewprivatechannel' with the display name 'My New Private Channel' within the 'myteam' team. The `--private` flag designates it as a private channel.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel create --team myteam --name mynewprivatechannel --display-name \"My New Private Channel\" --private\n```\n\n----------------------------------------\n\nTITLE: Creating an export file with mmctl\nDESCRIPTION: This command creates an export file using mmctl. It supports options for omitting attachments and including archived channels. The command requires the mmctl tool to be configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_67\n\nLANGUAGE: sh\nCODE:\n```\n--no-attachments              Omit file attachments in the export file.\n--include-archived-channels   Include archived channels in the export file.\n-h, --help                    help for create\n```\n\n----------------------------------------\n\nTITLE: Restart Mattermost Docker containers - Docker\nDESCRIPTION: These commands demonstrate how to stop and start the Mattermost application container using Docker Compose. This is required for the changes to be applied after the network connection has been established.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose stop app\ndocker-compose start app\n```\n\n----------------------------------------\n\nTITLE: Specify Install Directory - Windows\nDESCRIPTION: Specifies a custom installation directory for the Mattermost desktop app using the APPLICATIONFOLDER parameter. This command requires administrator privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/desktop-msi-installer-and-group-policy-install.rst#_snippet_3\n\nLANGUAGE: Batchfile\nCODE:\n```\nmsiexec /i mattermost-desktop-v5.11.2-x64.msi APPLICATIONFOLDER=<install directory>\n```\n\n----------------------------------------\n\nTITLE: Checking Mattermost Version on Docker Installation\nDESCRIPTION: This snippet demonstrates how to check the Mattermost version on a Docker installation. It requires using `docker exec` to run the `mattermost version` command inside the specified Mattermost container.  The container name needs to be correctly identified.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it <your-mattermost-container-name> mattermost version\n```\n\n----------------------------------------\n\nTITLE: SAML Request (AuthNRequest) Example - Base64 Encoded\nDESCRIPTION: This code snippet shows an example of a base64-encoded SAML AuthnRequest. This request is generated by Mattermost when initiating an SP-initiated SAML flow. The request is sent to the Identity Provider (IdP) using HTTP-Redirect binding.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-saml-technical.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbM441nuRIzAjKeMM8RhegMFjZ4L4xPBHhAfHYqgnYDQnSxC++Qn5IocWuzuBGz7JQmT9C57nxjxgbFIatiqUCQN17aYrLn/mWE09C5mJMYlcV68ibEkbR/JKUQ+2u/N+mSD4/C/QvFvuB6BcJaXaz0h7NwGhHROUte6MoGJKMPE=\n```\n\n----------------------------------------\n\nTITLE: Create Numbered Lists Using Markdown - Text\nDESCRIPTION: Shows how to create numbered lists using numbers followed by a period. The numbers do not need to be sequential.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n1. Item one\n1. Item two\n1. item three\n```\n\n----------------------------------------\n\nTITLE: Referencing External JSON Configuration File\nDESCRIPTION: This snippet shows how to reference an external JSON file for advanced logging configuration using the AdvancedLoggingJSON setting. This keeps the main configuration file cleaner and more manageable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/logging.rst#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n        \"AdvancedLoggingJSON\": \"/path/to/audit_log_config.json\"\n```\n\n----------------------------------------\n\nTITLE: Opening Mattermost in Fullscreen - macOS\nDESCRIPTION: This command line instruction opens the Mattermost application in fullscreen mode on macOS. It uses the `open` command to launch the application and passes arguments (`--args --fullscreen true` or `--args -f true`) to set the fullscreen option.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-desktop-app-experience.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nopen release/mac/Mattermost.app --args --fullscreen true\n```\n\nLANGUAGE: Shell\nCODE:\n```\nopen release/mac/Mattermost.app --args -f true\n```\n\n----------------------------------------\n\nTITLE: Configuring Websocket Secure Port in config.json\nDESCRIPTION: This snippet shows how to configure the websocket secure port within the config.json file. It defines the port on which the secured WebSocket will listen using the ``wss`` protocol. The default is 443. This is a numerical input setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"WebsocketSecurePort\": 443\n```\n\n----------------------------------------\n\nTITLE: mmctl User Demote Example\nDESCRIPTION: Example usages of the `mmctl user demote` command, showing how to demote multiple users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_169\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user demote user1 user2\n```\n\n----------------------------------------\n\nTITLE: Creating PropertyGroups Table in MySQL\nDESCRIPTION: This SQL snippet creates the `PropertyGroups` table in MySQL. The table stores property group information, including an ID and a name. A unique constraint is added on the `Name` column.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS PropertyGroups (\n  ID varchar(26) PRIMARY KEY,\n  Name varchar(64) NOT NULL,\n  UNIQUE(Name)\n );\n```\n\n----------------------------------------\n\nTITLE: Configuring Websocket Port in config.json\nDESCRIPTION: This snippet illustrates how to configure the unsecured websocket port in the config.json file. It configures the port used by the websocket using the ws protocol, with the default being 80. Changes require server restart to take effect. This is a numerical input setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n\"WebsocketPort\": 80\n```\n\n----------------------------------------\n\nTITLE: Downgrade database schema\nDESCRIPTION: This snippet demonstrates how to downgrade the database schema using the Mattermost command-line tool. The specific schema versions to downgrade to are specified as comma-separated values.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/downgrading-mattermost-server.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmattermost db downgrade 128,127,126\n```\n\n----------------------------------------\n\nTITLE: Assign User Manager Role using mmctl\nDESCRIPTION: This command assigns the User Manager role to two specified users using the mmctl command-line tool. The system_user_manager parameter specifies the role to assign, and user-name1 and user-name2 specify the users to whom the role is assigned.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl permissions role assign system_user_manager user-name1 user-name2\n```\n\n----------------------------------------\n\nTITLE: Creating a compliance report using the Compliance API\nDESCRIPTION: This snippet demonstrates how to use the Mattermost Compliance API to create a new compliance report for a specific user within a given date range using curl. It requires authentication with a valid token and uses a JSON payload to specify report parameters such as the user's email, start and end times in Unix Epoch format.  `yi94pwci6ibjfc9phbikhqutbe` should be replaced with the actual token value, and dates should be converted to epoch format.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/electronic-discovery.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  -H 'Authorization: Bearer yi94pwci6ibjfc9phbikhqutbe' \\\n  --data '{\"id\":\"\",\"create_at\":0,\"user_id\":\"craig\",\"status\":\"\",\"count\":0,\"desc\":\" \",\"type\":\"\",\"start_at\":1514769359000,\"end_at\": 1546305359000,\"keywords\":\"\",\"emails\":\"craig@mattermost.com\"}' \\\n  https://yourmattermosturl/api/v4/compliance/reports\n```\n\n----------------------------------------\n\nTITLE: Update ChannelId in Reactions - MySQL\nDESCRIPTION: This SQL command updates the newly added `ChannelId` column in the `Reactions` table. It populates the `ChannelId` by selecting the corresponding `ChannelId` from the `Posts` table, where the `Posts.Id` matches the `Reactions.PostId`.  If no match is found, it defaults to an empty string. This is used for schema changes in Mattermost v7.1.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_43\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE Reactions SET ChannelId = COALESCE((select ChannelId from Posts where Posts.Id = Reactions.PostId), '') WHERE ChannelId=\"\";\n```\n\n----------------------------------------\n\nTITLE: Querying Mattermost Configuration from Database (SQL)\nDESCRIPTION: This SQL query retrieves the currently active Mattermost configuration from the database. It selects the \"Value\" column from the \"Configurations\" table where the \"Active\" column is set to 1, indicating the active configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/troubleshooting.rst#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT Value FROM Configurations WHERE Active = 1;\n```\n\n----------------------------------------\n\nTITLE: config.json setting for Performance Monitoring Listen Address\nDESCRIPTION: This setting defines the port on which the Mattermost server listens to expose performance metrics when enabled. The default port is 8067. A server restart is needed for the changes to take effect. It is configured through System Console > Environment > Performance Monitoring.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n``.MetricsSettings.ListenAddress\": 8067``\n```\n\n----------------------------------------\n\nTITLE: SMTP Username Setting - config.json Path\nDESCRIPTION: This snippet shows the path in `config.json` to configure the SMTP server username. This username is used for authenticating with the SMTP server when SMTP authentication is enabled.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n``.EmailSettings.SMTPUsername``\n```\n\n----------------------------------------\n\nTITLE: Checking Team Group Status with mmctl\nDESCRIPTION: This command shows the group constraint status for a specified Mattermost team. It uses the `mmctl group team status` command and requires the team name as an argument, along with optional flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_88\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group team status [team] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group channel status myteam\n```\n\n----------------------------------------\n\nTITLE: Accessing WebRTC Internals in Firefox\nDESCRIPTION: Opens the `about://webrtc` page in the Firefox browser.  This provides detailed information about the WebRTC connection, including audio and video streams, signaling data, and statistics. This tool is helpful for diagnosing audio/video issues during active calls.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/make-calls.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nabout://webrtc\n```\n\n----------------------------------------\n\nTITLE: Alter Upload Sessions Table - PostgreSQL\nDESCRIPTION: This SQL command alters the `uploadsessions` table in PostgreSQL, changing the `type` column to use the newly created `upload_session_type` enum. This ensures data consistency and enforces valid upload session types. The command was tested on a machine with 8 cores and 16GB RAM and took 37.099 milliseconds to execute.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE uploadsessions alter column type type upload_session_type using type::upload_session_type;\n```\n\n----------------------------------------\n\nTITLE: Banner Notification - Sample Message\nDESCRIPTION: This text provides a sample message for the system-wide banner notification to inform users of the upcoming maintenance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/communicate-scheduled-maintenance.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nHeads up! Scheduled maintenance is planned for [Date],\nbetween [Start Time] and [End Time] [Time Zone]. \nThe Mattermost instance will be unavailable during this time.\n```\n\n----------------------------------------\n\nTITLE: mmctl auth list command\nDESCRIPTION: This command prints a list of registered credentials. It shows the active credential, name, username, and instance URL for each stored authentication.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth list\n```\n\n----------------------------------------\n\nTITLE: Updating ThreadTeamId Column - SQL\nDESCRIPTION: This SQL script updates the 'ThreadTeamId' column in the 'Threads' table using data from the 'Channels' table.  It sets the 'ThreadTeamId' to the 'TeamId' from 'Channels' where the 'ChannelId' in 'Threads' matches the 'Id' in 'Channels' and where 'ThreadTeamId' is currently NULL. This populates the new column with the appropriate team ID for each thread.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE Threads, Channels\nSET Threads.ThreadTeamId = Channels.TeamId\nWHERE Channels.Id = Threads.ChannelId\nAND Threads.ThreadTeamId IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Create Mattermost Operator Namespace\nDESCRIPTION: Creates a new Kubernetes namespace specifically for the Mattermost Operator. This helps to isolate the operator's resources.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create ns mattermost-operator\n```\n\n----------------------------------------\n\nTITLE: Query PostgreSQL search_path setting using SQL\nDESCRIPTION: This SQL query retrieves the value of the `search_path` setting from the `pg_settings` table in PostgreSQL.  The `search_path` is a configuration parameter that specifies the order in which PostgreSQL searches schemas when resolving unqualified object names. This setting is important for determining which database objects (tables, functions, etc.) are accessed when a schema is not explicitly specified in a query.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration.rst#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT boot_val FROM pg_settings WHERE name='search_path';\n```\n\n----------------------------------------\n\nTITLE: Reset system_read_only_admin Permissions using mmctl\nDESCRIPTION: This command demonstrates how to reset the permissions of the `system_read_only_admin` role using the `mmctl` tool. This ensures the role has the default set of permissions associated with it. It's a specific example of the more general command for resetting role permissions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_12\n\nLANGUAGE: CLI\nCODE:\n```\nmmctl permissions reset system_read_only_admin\n```\n\n----------------------------------------\n\nTITLE: Creating Export with mmctl\nDESCRIPTION: This command creates a Mattermost export using the mmctl tool, including attachments if the `--attachments` flag is specified.  The export process runs in the background, and the command returns a job ID upon successful initiation.  Omitting `--attachments` excludes attached files from the export.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmmctl export create --attachments\n```\n\n----------------------------------------\n\nTITLE: Cancelling an export job with mmctl\nDESCRIPTION: This command cancels an export job using mmctl. It takes the export job ID as an argument. The command requires the mmctl tool to be configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_72\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help     help for download\n```\n\n----------------------------------------\n\nTITLE: Updating a Bot with mmctl\nDESCRIPTION: This snippet demonstrates how to update a bot's information using the `mmctl bot update` command. It requires the bot's username and optionally accepts flags to update the description or display name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot update [username] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot update testbot --username newbotusername\n```\n\n----------------------------------------\n\nTITLE: Maximum File Size Configuration\nDESCRIPTION: Configures the maximum file size in bytes for message attachments and plugin uploads. The value must be specified in mebibytes in the System Console and in bytes in the config.json file. The default is 104857600 bytes (100 mebibytes). Large file sizes can increase the risk of server crashes and failed uploads.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.MaxFileSize: 104857600\"\n```\n\n----------------------------------------\n\nTITLE: Downgrade database schema with migration plan\nDESCRIPTION: This snippet showcases how to downgrade the database schema using a migration plan file. This file contains SQL scripts for both forward and backward migrations, simplifying the downgrade process and allowing for use of older Mattermost versions during the downgrade.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/downgrading-mattermost-server.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmattermost db downgrade migration_plan_128_127.json\n```\n\n----------------------------------------\n\nTITLE: LocalizationSettings Configuration\nDESCRIPTION: Details the `EnableExperimentalLocales` setting added under `LocalizationSettings` in `config.json`.  This setting controls whether experimental language options are available for selection, providing control over the use of in-progress language translations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n``LocalizationSettings``\n```\n\nLANGUAGE: text\nCODE:\n```\n``EnableExperimentalLocales``\n```\n\n----------------------------------------\n\nTITLE: Creating a full export of a self-hosted Mattermost server\nDESCRIPTION: This command uses the mmctl tool to create a full export of a self-hosted Mattermost server, including attached files. The `--attachments` flag is used to include attachments in the export. Without the flag, attachments are not included in the export.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl export create --attachments\n```\n\n----------------------------------------\n\nTITLE: Monokai Theme JSON\nDESCRIPTION: This JSON configures the Monokai theme for Mattermost, setting specific colors for the sidebar, center channel, links, and various indicators. To use this theme, copy and paste the provided JSON code into the custom theme settings within Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"awayIndicator\":\"#B8B884\",\n\t\"buttonBg\":\"#90AD58\",\n\t\"buttonColor\":\"#FFFFFF\",\n\t\"centerChannelBg\":\"#FFFFFF\",\n\t\"centerChannelColor\":\"#444444\",\n\t\"codeTheme\":\"monokai\",\n\t\"linkColor\":\"#90AD58\",\n\t\"mentionBg\":\"#7E9949\",\n\t\"mentionColor\":\"#FFFFFF\",\n\t\"mentionHighlightBg\":\"#54850C\",\n\t\"mentionHighlightLink\":\"#FFFFFF\",\n\t\"newMessageSeparator\":\"#90AD58\",\n\t\"onlineIndicator\":\"#99CB3F\",\n\t\"sidebarBg\":\"#262626\",\n\t\"sidebarHeaderBg\":\"#363636\",\n\t\"sidebarHeaderTextColor\":\"#FFFFFF\",\n\t\"sidebarText\":\"#FFFFFF\",\n\t\"sidebarTextActiveBorder\":\"#7E9949\",\n\t\"sidebarTextActiveColor\":\"#FFFFFF\",\n\t\"sidebarTextHoverBg\":\"#525252\",\n\t\"sidebarUnreadText\":\"#CCCCCC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Cookies For Subdomains Configuration\nDESCRIPTION: This setting controls whether cookies are allowed for subdomains. If set to true, cookies are allowed for subdomains. Otherwise, they are not.  The setting is configured either via config.json or an environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n\".ServiceSettings.AllowCookiesForSubdomains: true\",\n```\n\n----------------------------------------\n\nTITLE: Running pgloader for plugin migrations\nDESCRIPTION: This command runs pgloader with the generated configuration files for boards, playbooks, and calls. The logs are carefully read for any potential errors during the migration process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npgloader boards.load > boards_migration.log\npgloader playbooks.load > playbooks_migration.log\npgloader calls.load > calls.log\n```\n\n----------------------------------------\n\nTITLE: Disabling Group Management for Teams using mmctl\nDESCRIPTION: This snippet disables group-based membership management for a Mattermost team using the `mmctl group team disable` command.  This reverts the team to the standard membership management system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/managing-team-channel-membership-using-ad-ldap-sync-groups.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group team disable\n```\n\n----------------------------------------\n\nTITLE: Executing Mattermost Version Check on Default Installation\nDESCRIPTION: This snippet demonstrates how to check the Mattermost version on a default installation.  It requires navigating to the Mattermost root directory and executing the `mattermost version` command as the `mattermost` user.  It assumes a standard installation path of `/opt/mattermost`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/mattermost/\nsudo -u mattermost bin/mattermost version\n```\n\n----------------------------------------\n\nTITLE: config.json setting for Client Side User IDs\nDESCRIPTION: This setting specifies a comma-separated list of user IDs to track for client-side webapp metrics. Limited to 5 user IDs to avoid performance issues. Accessed via System Console > Environment > Performance Monitoring.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_100\n\nLANGUAGE: json\nCODE:\n```\n``.MetricsSettings.ClientSideUserIds``\n```\n\n----------------------------------------\n\nTITLE: Daily Run Time config.json setting\nDESCRIPTION: Specifies the config.json setting for the daily compliance export job start time. The time must be in 24-hour format (HH:MM).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"DailyRunTime\": 01:00\n```\n\n----------------------------------------\n\nTITLE: Generating mmctl Documentation\nDESCRIPTION: This command generates mmctl documentation into a specified directory, defaulting to the \"docs\" directory.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_64\n\nLANGUAGE: sh\nCODE:\n```\nmmctl docs [flags]\n```\n\n----------------------------------------\n\nTITLE: Deleting Webhook using mmctl\nDESCRIPTION: This command deletes a webhook identified by its ID.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_201\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook delete [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook delete [webhookID]\n```\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help   help for delete\n```\n\n----------------------------------------\n\nTITLE: SMTP Password Setting - config.json Path\nDESCRIPTION: This snippet displays the `config.json` path for the SMTP server password. This password is used in conjunction with the username for SMTP authentication.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n``.EmailSettings.SMTPPassword``\n```\n\n----------------------------------------\n\nTITLE: Deleting an export file with mmctl\nDESCRIPTION: This command deletes an export file using mmctl. It takes the export file name as an argument. The command requires the mmctl tool to be configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_68\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help   help for delete\n```\n\n----------------------------------------\n\nTITLE: Get System Logs using journalctl\nDESCRIPTION: This command retrieves system logs using `journalctl`, filtering logs based on a specified starting date and time. The output captures logs from all processes on the Mattermost server and directs them to a file for review. Replace the placeholder date and time with the actual timeframe when the issue occurred.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/troubleshooting.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo journalctl --since \"2020-08-23 17:15:00\" > mattermost_journalctl.log\n```\n\n----------------------------------------\n\nTITLE: Channel Modify Command Usage\nDESCRIPTION: Shows how to modify a channel's privacy settings (public or private). Channel can be specified by team and channel name, or by channel ID.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel modify [channel] [flags]\n```\n\n----------------------------------------\n\nTITLE: Reload Systemd Daemon\nDESCRIPTION: Reloads the systemd daemon to recognize newly created or modified unit files. This command is a prerequisite before enabling and starting the Elasticsearch service.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo /bin/systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Removing Users from a Team with mmctl\nDESCRIPTION: Removes specified users from a Mattermost team. Requires the team name and user identifiers (email or username) as arguments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_147\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team users remove [team] [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team users remove myteam user@example.com username\n```\n\n----------------------------------------\n\nTITLE: Configuring User Status Poll Interval - JSON\nDESCRIPTION: This JSON snippet shows how to configure the interval for fetching user statuses and profile data using the `UsersStatusAndProfileFetchingPollIntervalMilliseconds` setting within the `ExperimentalSettings` section of the `config.json` file. This setting allows administrators to adjust the frequency of `getStatusesByIds` and `getProfilesByIds` network calls.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ExperimentalSettings\": {\n    \"UsersStatusAndProfileFetchingPollIntervalMilliseconds\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Content Example for Compliance Exports (bash)\nDESCRIPTION: This code block illustrates the contents of a single batch zip file within a compliance export after Mattermost v10.5. It shows the presence of a \"files\" directory, a \"metadata.json\" file, and either an \"actiance_export.xml\" or equivalent file depending on the chosen export format.  This structure provides metadata and actual message data in a structured format.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/compliance-export.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbatch001-1723105062492-1723106622163.zip\n├── files\n├── metadata.json\n└── actiance_export.xml\n```\n\n----------------------------------------\n\nTITLE: Extract Mattermost tarball (tar)\nDESCRIPTION: Extracts the downloaded Mattermost Server tarball using the tar command. This unpacks the Mattermost Server files into a directory.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntar -xvzf mattermost*.gz\n```\n\n----------------------------------------\n\nTITLE: config.json setting for Enable Client Performance Monitoring\nDESCRIPTION: This setting enables or disables client-side performance monitoring in Mattermost. Setting it to 'true' enables data collection and profiling, while 'false' (default) disables it. A server restart is needed for the changes to take effect. Configurable through System Console > Environment > Performance Monitoring.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n``.MetricsSettings.EnableClientMetrics\": false``\n```\n\n----------------------------------------\n\nTITLE: Describe Mattermost Server Pod\nDESCRIPTION: Kubectl command to describe the Mattermost server pods in the specified namespace, providing detailed information.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nkubectl -n [namespace] describe pod\n```\n\n----------------------------------------\n\nTITLE: mmctl User Deleteall Example\nDESCRIPTION: An example usage of the `mmctl user deleteall` command.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_166\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user deleteall\n```\n\n----------------------------------------\n\nTITLE: Creating a Mattermost Post with mmctl\nDESCRIPTION: Creates a new post in a specified Mattermost channel. The channel is identified by the team and channel name (e.g., `myteam:mychannel`). The message content is provided using the `--message` flag. An optional `--reply-to` flag can specify a parent post ID to create a reply.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_125\n\nLANGUAGE: sh\nCODE:\n```\nmmctl post create [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl post create myteam:mychannel --message \"some text for the post\"\n```\n\n----------------------------------------\n\nTITLE: mmctl User Demote Format\nDESCRIPTION: Shows the format for the `mmctl user demote` command. It takes a list of users and optional flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_168\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user demote [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Testing Client Certificate with Curl\nDESCRIPTION: This snippet tests the client certificate with a curl command, verifying the connection to the Mattermost server using the client key and certificate.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -s -k --key mmuser-mattermost.key --cert mmuser-mattermost.crt:mmuser-passphrase https://example.mattermost.com\n```\n\n----------------------------------------\n\nTITLE: Setting execute permission on chrome-sandbox (Linux)\nDESCRIPTION: This command sets execute permission for all users on the chrome-sandbox file. This is necessary on some Linux distributions to allow apps to open links in the browser due to sandbox restrictions.  It is a workaround for an issue with electron.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/desktop-app-changelog.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ chmod 4755 <installpath>/chrome-sandbox\n```\n\n----------------------------------------\n\nTITLE: Modify Message Column in PostgreSQL\nDESCRIPTION: This SQL command alters the `Message` column in the `Posts` table of a PostgreSQL database to the `VARCHAR(65535)` data type. This is required for migrating Mattermost to newer versions. The command updates the data type and should be executed after connecting to the correct PostgreSQL database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_62\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE Posts ALTER COLUMN Message TYPE VARCHAR(65535);\n```\n\n----------------------------------------\n\nTITLE: Kubernetes port mapping example\nDESCRIPTION: This code snippet demonstrates an example of port mapping (NAT) used to map the respective `rtcd` nodes behind a single external IP in a Kubernetes environment. NAT mappings need to be in place for every `rtcd` node, typically at the ingress point (e.g., ELB, NLB, etc.).  The `RTCD_RTC_ICEHOSTPORTOVERRIDE` config is needed to pass a full mapping of node IPs and their respective port.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/calls-deployment.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nEXT_IP:8443 -> rtcdA:8443\nEXT_IP:8444 -> rtcdB:8443\nEXT_IP:8445 -> rtcdC:8443\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Bucket Configuration\nDESCRIPTION: This configuration defines the Amazon S3 bucket used for storing files in Mattermost. It's specified using a System Console setting, a config.json parameter, and an environment variable, all representing the bucket name string.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_50\n\nLANGUAGE: none\nCODE:\n```\nSystem Config path: Environment > File Storage\nconfig.json setting: \".FileSettings.AmazonS3Bucket\",\nEnvironment variable: MM_FILESETTINGS_AMAZONS3BUCKET\n```\n\n----------------------------------------\n\nTITLE: Mattermost DB Migrate Options\nDESCRIPTION: This snippet displays CLI options for the `mattermost db migrate` command, specifically regarding auto-recovery, saving the migration plan, and dry-run mode. It includes options for automatically recovering from migration errors, saving the migration plan to a file, and performing a dry run to validate the migration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n--auto-recover bool     If the migration plan receives an error during migrations, this command will try to rollback migrations already applied within the plan. Not recommended without reviewing migration plan by combining --save-plan and --dry-run options.\n--save-plan bool        Saves the plan for the migration into the file store so that it can be used for reviewing the plan or for downgrading.\n--dry-run bool          Does not apply the migrations, but it validates how the migration would run based on the given conditions.\n```\n\n----------------------------------------\n\nTITLE: Updating Digest using Slash Command\nDESCRIPTION: This snippet shows how to update the daily digest using a slash command. The command `/playbook todo` can be run in any channel, direct message, or group message to deliver an updated digest listing active runs the user belongs to.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/repeatable-processes/notifications-and-updates.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/playbook todo\n```\n\n----------------------------------------\n\nTITLE: Restoring Mattermost Omnibus\nDESCRIPTION: Restores a Mattermost server from a backup archive using the `mmomni` command-line tool. After restoring, the server needs to be reconfigured.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmmomni restore /tmp/mm_backup_datetime.tgz\n```\n\n----------------------------------------\n\nTITLE: ZIP Archive Content Search Configuration\nDESCRIPTION: This configuration enables or disables the searching of document content within ZIP archive files. It is controlled through System Console settings, config.json configuration, and an environment variable. Disabling this feature may improve server performance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_49\n\nLANGUAGE: none\nCODE:\n```\nSystem Config path: Environment > File Storage\nconfig.json setting: \".FileSettings.ArchiveRecursion: false\",\nEnvironment variable: MM_FILESETTINGS_ARCHIVERECURSION\n```\n\n----------------------------------------\n\nTITLE: Inline image with hover text\nDESCRIPTION: This example demonstrates how to include an inline image with alt text, a URL, and hover text in Mattermost markdown. It shows the expected syntax and the rendering output.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n![Mattermost](../images/icon-76x76.png \"Mattermost Icon\")\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on RHEL/CentOS\nDESCRIPTION: This code snippet demonstrates how to install PostgreSQL on RHEL/CentOS systems using the dnf package manager.  It installs the postgresql-server package and initializes the database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install postgresql-server\nsudo postgresql-setup --initdb\n```\n\n----------------------------------------\n\nTITLE: Adding Open Source Component\nDESCRIPTION: This snippet demonstrates the addition of a new open-source component to the Mattermost mobile app. Specifically, the '@formatjs/intl-listformat' and 'path-to-regexp' libraries were added. This change is part of the app's ongoing effort to enhance functionality and maintainability by incorporating relevant dependencies.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mobile-app-changelog.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nAdded ``@formatjs/intl-listformat`` and ``path-to-regexp``, and removed ``@nozbe/with-observables``, ``@react-native/eslint-config`` and ``@react-native/metro-config`` from https://github.com/mattermost/mattermost-mobile.\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Path Prefix Configuration\nDESCRIPTION: This configuration specifies the path prefix within the Amazon S3 bucket to use for file storage. The prefix is configured through the config.json file and an environment variable. The System Console setting is not available for this configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_51\n\nLANGUAGE: none\nCODE:\n```\nSystem Config path: N/A\nconfig.json setting: \".FileSettings.AmazonS3PathPrefix\",\nEnvironment variable: MM_FILESETTINGS_AMAZONS3PATHPREFIX\n```\n\n----------------------------------------\n\nTITLE: Prometheus Multi Hook Time Metric Example\nDESCRIPTION: This code snippet shows an example of a Prometheus metric for tracking the execution time of multiple plugin hook handlers. It includes the metric name, help text, and type.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/performance-alerting.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# HELP mattermost_plugin_multi_hook_time Time to execute multiple plugin hook handler in seconds.\n# TYPE mattermost_plugin_multi_hook_time histogram\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: These options are inherited from parent commands and are applicable to all mmctl user subcommands. These include configurations for config file path, pager disabling, insecure TLS protocols, JSON output format, local mode, suppressing output, strict version matching, and disabling warning messages.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_155\n\nLANGUAGE: sh\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Backend Configuration Setting\nDESCRIPTION: This configuration setting, located under `ElasticsearchSettings` in `config.json`, allows administrators to specify whether to use Elasticsearch or Opensearch as the backend. The default value is `Elasticsearch`.  It's crucial for AWS Elasticsearch users who need to switch to Opensearch.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ElasticsearchSettings\": {\n    \"Backend\": \"elasticsearch\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: mmctl User Verify Options\nDESCRIPTION: Defines the available options for the mmctl user verify command, which includes only the help flag (-h). Note that the help text incorrectly states 'help for version'.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_195\n\nLANGUAGE: sh\nCODE:\n```\n   -h, --help       help for version\n```\n\n----------------------------------------\n\nTITLE: Configure SAML Login Button Text Color - config.json\nDESCRIPTION: This setting customizes the text color of the SAML login button in the Mattermost mobile app for white-labeling purposes. A hex code with a #-sign is required.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"LoginButtonTextColor\": \"\"\n```\n\n----------------------------------------\n\nTITLE: License Upload-String Command Usage (mmctl)\nDESCRIPTION: Demonstrates how to upload a Mattermost license from a string using the mmctl command-line tool.  This command replaces the current license with the new one provided as a string.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_107\n\nLANGUAGE: sh\nCODE:\n```\nlicense upload-string \"mylicensestring\"\n```\n\n----------------------------------------\n\nTITLE: Jira Webhook URL (Legacy)\nDESCRIPTION: Example of a legacy Jira webhook URL used when Mattermost cannot connect to the Jira instance directly. Replace `MATTERMOST-SITE-URL`, `MATTERMOST-WEBHOOK-SECRET`, `MATTERMOST-TEAM-URL`, and `MATTERMOST-CHANNEL-URL` with appropriate values.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nhttps://MATTERMOST-SITE-URL/plugins/jira/webhook?secret=MATTERMOST-WEBHOOK-SECRET&team=MATTERMOST-TEAM-URL&channel=MATTERMOST-CHANNEL-URL\n```\n\n----------------------------------------\n\nTITLE: Restarting Mattermost service after DB TLS config\nDESCRIPTION: This snippet restarts the Mattermost service and checks its status using `systemctl` after configuring TLS for the database connection. This ensures the service uses the new database connection settings.  The `systemctl` command is a standard Linux utility.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl restart mattermost\nsystemctl status mattermost\n```\n\n----------------------------------------\n\nTITLE: Defining Audit Log JSON Schema\nDESCRIPTION: This code block defines the base JSON schema for audit logs in Mattermost. It includes fields for timestamp, status, event name, error details, actor information, event-specific data, and metadata.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/embedded-json-audit-log-schema.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"timestamp\": \"\",       // Event time\n    \"status\": \"\",          // Success or failure of the audited event or activity\n    \"event_name\": \"\",      // Logged event name\n    \"error\": {             // Error if status = fail\n        \"status_code\": 0,\n        \"description\": \"\"\n    },\n    \"actor\": {             // The user performing the action\n        \"user_id\": \"\"           // Unique identifier of the event user\n        \"session_id\": \"\"        // Unique session identifier of the event user\n        \"client\": \"\"            // User agent of the client/platform in use by the event user\n        \"ip_address\": \"\"        // IPv4/IPv6 IP address of the event user\n    },\n    \"event\": {             // Event-specific data\n        \"parameters\": {}        // Map containing parameters of the audited event or activity\n        \"prior_state\": {}       // Pre-event state of the object\n        \"resulting_state\": {}   // Post-event state of the object\n        \"object_type\": \"\"       // Object targeted by the event or activity\n    },\n    \"meta\": {\n        \"api_path\": \"\",         // API endpoint interacted with for event or activity\n        \"cluster_id\": \"\"        // Unique identifier of the cluster in use by the event user\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: macOS Screen Sharing Permission Reset (Mattermost Desktop)\nDESCRIPTION: This snippet resets the screen capture permissions for the Mattermost Desktop application on macOS. It's a workaround for a known Chrome-related bug where screen sharing fails even after granting permissions. The steps involve quitting Mattermost, executing a terminal command, restarting Mattermost, re-granting permissions, and restarting again.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/make-calls.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntccutil reset ScreenCapture Mattermost.Desktop\n```\n\n----------------------------------------\n\nTITLE: SMTP Server Setting - config.json Path\nDESCRIPTION: This snippet shows the path to the SMTP server setting within the Mattermost `config.json` file. This configuration is crucial for specifying the address of the SMTP server used for sending email notifications.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n``.EmailSettings.SMTPServer``\n```\n\n----------------------------------------\n\nTITLE: Alter Channels Table - PostgreSQL\nDESCRIPTION: This SQL command alters the `channels` table in PostgreSQL, changing the `type` column to use the newly created `channel_type` enum. This ensures data consistency and enforces valid channel types. The command was tested on a machine with 8 cores and 16GB RAM and took 3856.790 milliseconds (3.857 seconds) to execute.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE channels alter column type type channel_type using type::channel_type;\n```\n\n----------------------------------------\n\nTITLE: Getting Webhook URL via Slash Command\nDESCRIPTION: This command is used to retrieve the webhook URL for configuring webhooks in Jira. Replace `YOUR-JIRA-URL` with your Jira URL.  The webhook URL is required to establish a connection between Jira and Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n/jira webhook <YOUR-JIRA-URL>\n```\n\n----------------------------------------\n\nTITLE: mmctl User Preference Set Options\nDESCRIPTION: Defines the options for setting a user preference using the mmctl tool. It includes the category, name, and value of the preference to be set. The help flag displays usage information.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_180\n\nLANGUAGE: sh\nCODE:\n```\n   -c, --category string   The category of the preference\n   -h, --help              help for set\n   -n, --name string       The name of the preference\n   -v, --value string      The value of the preference\n```\n\n----------------------------------------\n\nTITLE: Gruvbox Dark Theme JSON\nDESCRIPTION: This JSON configures the Gruvbox Dark theme in Mattermost, specifying color settings for the sidebar, text, channel, and indicators. To apply it, copy and paste the JSON into the custom theme settings within Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"awayIndicator\":\"#fabd2f\",\n\t\"buttonBg\":\"#689d6a\",\n\t\"buttonColor\":\"#ebdbb2\",\n\t\"centerChannelBg\":\"#3c3836\",\n\t\"centerChannelColor\":\"#ebdbb2\",\n\t\"codeTheme\":\"monokai\",\n\t\"errorTextColor\":\"#fb4934\",\n\t\"linkColor\":\"#83a598\",\n\t\"mentionBg\":\"#b16286\",\n\t\"mentionColor\":\"#fbf1c7\",\n\t\"mentionHighlightBg\":\"#d65d0e\",\n\t\"mentionHighlightLink\":\"#fbf1c7\",\n\t\"newMessageSeparator\":\"#d65d0e\",\n\t\"onlineIndicator\":\"#b8bb26\",\n\t\"sidebarBg\":\"#282828\",\n\t\"sidebarHeaderBg\":\"#1d2021\",\n\t\"sidebarHeaderTextColor\":\"#ebdbb2\",\n\t\"sidebarText\":\"#ebdbb2\",\n\t\"sidebarTextActiveBorder\":\"#d65d0e\",\n\t\"sidebarTextActiveColor\":\"#fbf1c7\",\n\t\"sidebarTextHoverBg\":\"#d65d0e\",\n\t\"sidebarUnreadText\":\"#fe8019\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnect MS Teams Account using Slash Command\nDESCRIPTION: Disconnects a Microsoft Teams account from Mattermost using the `/mstmeetings disconnect` slash command.  This command removes the link between the user's Mattermost account and their Microsoft Teams account.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/microsoft-teams-meetings-interoperability.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/mstmeetings disconnect\n```\n\n----------------------------------------\n\nTITLE: TLS Strict Transport Max Age Configuration\nDESCRIPTION: This setting configures the time, in seconds, that a browser remembers a site is only to be accessed using HTTPS. After this period, the site can't be accessed using HTTP unless TLSStrictTransport is set to true.  The setting is configured either via config.json or an environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n\".ServiceSettings.TLSStrictTransportMaxAge: 63072000\",\n```\n\n----------------------------------------\n\nTITLE: Configure Channel Name in Email Notifications - config.json\nDESCRIPTION: This setting controls whether the channel name appears in email notification subject lines. `true` includes channel and team name, while `false` (default) only includes the team name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"UseChannelInEmailNotifications\": false\n```\n\n----------------------------------------\n\nTITLE: Listing Jira Subscription Rules via Slash Command\nDESCRIPTION: This command displays a list of all subscription rules configured across all channels and teams in the Mattermost instance. It provides an overview of the existing Jira subscriptions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n/jira subscribe list\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: EnableWebHubChannelIteration\nDESCRIPTION: This configuration setting, `ServiceSettings.EnableWebHubChannelIteration`, controls the performance of websocket broadcasting. When enabled, it improves websocket broadcasting performance but may decrease performance when users join/leave a channel.  It is only recommended for instances with at least 200,000 concurrent users actively using Mattermost.  The default is off.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nServiceSettings.EnableWebHubChannelIteration\n```\n\n----------------------------------------\n\nTITLE: Install/Refresh Snap Core\nDESCRIPTION: This command installs or refreshes the snap core package, which is a dependency for installing Certbot via Snap.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nsudo snap install core; sudo snap refresh core\n```\n\n----------------------------------------\n\nTITLE: HTML div for Mattermost Plans Badge\nDESCRIPTION: This HTML snippet creates a div element with the class 'mm-plans-badge'. This class is likely used to apply specific styling and positioning to the content within the div. This snippet typically wraps the badge image and related text.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/allplans-cloud-selfhosted.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"mm-plans-badge\">\n```\n\n----------------------------------------\n\nTITLE: Start Mattermost Service (systemctl)\nDESCRIPTION: Starts the Mattermost service using the systemctl command. This initiates the Mattermost Server process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start mattermost\n```\n\n----------------------------------------\n\nTITLE: Configure SAML Login Button Border Color - config.json\nDESCRIPTION: This setting customizes the border color of the SAML login button in the Mattermost mobile app for white-labeling purposes. A hex code with a #-sign is required.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"LoginButtonBorderColor\": \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating the Mattermost User and Group - Shell\nDESCRIPTION: Creates a system user and group named `mattermost` using `sudo useradd`. Requires sudo privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo useradd --system --user-group mattermost\n```\n\n----------------------------------------\n\nTITLE: Making pre_start.sh Executable\nDESCRIPTION: This command sets the executable permission on the pre_start.sh script, allowing it to be executed by the system. This is necessary for the script to be run as part of the Mattermost service startup process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x /opt/mattermost/bin/pre_start.sh\n```\n\n----------------------------------------\n\nTITLE: Backing up the default config.json - Shell\nDESCRIPTION: Backs up the default Mattermost configuration file using `sudo cp`. Requires sudo privileges. This creates a backup before making changes to the configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo cp /opt/mattermost/config/config.json /opt/mattermost/config/config.defaults.json\n```\n\n----------------------------------------\n\nTITLE: Extract Run Command\nDESCRIPTION: Starts a new content extraction job. It allows specifying a time range for the extraction using Unix timestamps. It inherits global options for configuration, output formatting, and security settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_79\n\nLANGUAGE: sh\nCODE:\n```\nmmctl extract run [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl extract run\n```\n\n----------------------------------------\n\nTITLE: Listing OAuth2 Applications (mmctl)\nDESCRIPTION: Demonstrates how to list registered OAuth2 applications using the mmctl command-line tool. Includes an example command to display the list.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_109\n\nLANGUAGE: sh\nCODE:\n```\nmmctl oauth list\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl list\n```\n\n----------------------------------------\n\nTITLE: Edit Elasticsearch Configuration\nDESCRIPTION: Opens the Elasticsearch configuration file using the vi editor. This allows for modifying settings such as the network host.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nvi /etc/elasticsearch/elasticsearch.yml\n```\n\n----------------------------------------\n\nTITLE: MySQL service status output\nDESCRIPTION: This is an example output of `systemctl status mysql` after a successful restart. It indicates that the MySQL service is active and running. This verifies that the configuration changes have not caused the service to fail.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n● mysql.service - MySQL Community Server\n   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)\n   Active: active (running) since Fri 2019-10-18 16:41:25 UTC; 2s ago\n  Process: 8380 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/run/mysqld/mysqld.pid (code=exited, status=0/SUCCESS)\n  Process: 8360 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS)\n Main PID: 8382 (mysqld)\n   Tasks: 27 (limit: 2361)\n  CGroup: /system.slice/mysql.service\n          └─8382 /usr/sbin/mysqld --daemonize --pid-file=/run/mysqld/mysqld.pid\n\nOct 18 16:41:25 transport-encryption-mysql1 systemd[1]: Stopped MySQL Community Server.\nOct 18 16:41:25 transport-encryption-mysql1 systemd[1]: Starting MySQL Community Server...\nOct 18 16:41:25 transport-encryption-mysql1 systemd[1]: Started MySQL Community Server.\n```\n\n----------------------------------------\n\nTITLE: Load Balancer Message - HTML Template\nDESCRIPTION: This HTML template is designed to be displayed by the load balancer during the scheduled maintenance window. It informs users that the Mattermost server is undergoing maintenance and provides estimated downtime and contact information.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/communicate-scheduled-maintenance.rst#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Maintenance in Progress</title>\n    <style>\n        body {\n            text-align: center;\n            padding: 50px;\n            font-family: \"Arial\", sans-serif;\n            background-color: #f2f2f2;\n        }\n        .container {\n            margin: auto;\n            width: 50%;\n            padding: 20px;\n            background-color: #fff;\n            border-radius: 8px;\n            box-shadow: 0px 0px 10px 0px #0000001a;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Maintenance in Progress</h1>\n        <p>Our Mattermost server is currently undergoing scheduled maintenance.</p>\n        <p>Estimated downtime: [Start Time] to [End Time] [Time Zone]</p>\n        <p>We apologize for any inconvenience and thank you for your understanding.</p>\n        <p>If you have any questions, please contact our support team at <a href=\"mailto:[Support Email]\">[Support Email]</a>.</p>\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Database Setting: Amazon S3 Bucket Endpoint (config.json)\nDESCRIPTION: This setting allows setting a custom endpoint URL for Amazon S3 buckets. Requires a string input for the URL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"AmazonS3BucketEndpoint\": \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON Setting - Session Cache\nDESCRIPTION: Defines the session cache duration in minutes. The default value is 10 minutes.  This setting configures how long a session is cached in memory to improve performance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_96\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.SessionCacheInMinutes: 10,\"\n```\n\n----------------------------------------\n\nTITLE: Running mmctl Unit Tests\nDESCRIPTION: This command executes the unit tests for mmctl. It changes the directory to the server directory and runs the make command with the target test-mmctl-unit.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake -C server test-mmctl-unit\n```\n\n----------------------------------------\n\nTITLE: Environment Variable: MM_TEAMSETTINGS_EXPERIMENTALVIEWARCHIVEDCHANNELS\nDESCRIPTION: This environment variable provides an alternative way to configure access to view archived channels, mirroring the functionality of the  `TeamSettings.ExperimentalViewArchivedChannels` setting in `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_12\n\nLANGUAGE: environment\nCODE:\n```\nMM_TEAMSETTINGS_EXPERIMENTALVIEWARCHIVEDCHANNELS\n```\n\n----------------------------------------\n\nTITLE: Downloading create_desktop_file.sh from GitHub\nDESCRIPTION: This snippet references a workaround for a missing script (`create_desktop_file.sh`) in the .tar.gz release of the Mattermost Desktop app. The workaround involves downloading the script from the specified GitHub URL. This script is typically used for creating a desktop file to launch the application.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/desktop-app-changelog.md#_snippet_1\n\nLANGUAGE: N/A\nCODE:\n```\nhttps://github.com/mattermost/desktop/blob/master/src/assets/linux/create_desktop_file.sh\n```\n\n----------------------------------------\n\nTITLE: Mattermost Job Server Startup\nDESCRIPTION: Starts the Mattermost job server. This functionality is accessible via the deprecated `mattermost jobserver` command. The command initiates the job processing component of the Mattermost platform.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nmattermost jobserver\n```\n\n----------------------------------------\n\nTITLE: File Retention Days config.json setting\nDESCRIPTION: Specifies the config.json setting for file retention days. When `FileRetentionDays` is configured, `FileRetentionHours` must be set to 0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"FileRetentionDays\"\n```\n\n----------------------------------------\n\nTITLE: Text Example: Screen Reader Message Readout\nDESCRIPTION: This example demonstrates how a screen reader might present a Mattermost message, combining various elements into a coherent sentence. It shows the order in which message elements (author, timestamp, content, attachments, reactions, saves/pins) are read out to the user.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/keyboard-accessibility.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nEric Sethna at 12:57pm Thursday June 13th wrote a reply \"Thanks for the review\", 3 attachments, 2 reactions, message is saved and pinned.\n```\n\n----------------------------------------\n\nTITLE: Deleting a Post via mmctl command\nDESCRIPTION: This snippet shows how to permanently delete a post and its attachments using the 'mmctl post delete' command.  This command is useful for administrators to remove content and associated files permanently from the system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\nmmctl post delete <post-id>\n```\n\n----------------------------------------\n\nTITLE: Updating Mattermost Desktop App on CentOS/RHEL\nDESCRIPTION: This command updates the Mattermost desktop app on CentOS/RHEL systems using the `rpm` package manager.  Replace `mattermost-desktop-5.11.2-linux-x86_64.rpm` with the appropriate file name. The command uses `sudo` to execute the upgrade with administrative privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/linux-desktop-install.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo rpm -u mattermost-desktop-5.11.2-linux-x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: One Dark Theme JSON\nDESCRIPTION: This JSON configures the One Dark theme in Mattermost, setting specified colors for the sidebar, text, channel, and indicators. Apply this theme by copying and pasting the JSON code into the custom theme settings within Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"sidebarBg\":\"#21252b\",\n\t\"sidebarText\":\"#abb2bf\",\n\t\"sidebarUnreadText\":\"#abb2bf\",\n\t\"sidebarTextHoverBg\":\"#3a3f4b\",\n\t\"sidebarTextActiveBorder\":\"#4d78cc\",\n\t\"sidebarTextActiveColor\":\"#d7dae0\",\n\t\"sidebarHeaderBg\":\"#282c34\",\n\t\"sidebarHeaderTextColor\":\"#abb2bf\",\n\t\"onlineIndicator\":\"#98c379\",\n\t\"awayIndicator\":\"#d19a66\",\n\t\"dndIndicator\":\"#be5046\",\n\t\"mentionBg\":\"#98c379\",\n\t\"mentionColor\":\"#ffffff\",\n\t\"centerChannelBg\":\"#282c34\",\n\t\"centerChannelColor\":\"#abb2bf\",\n\t\"newMessageSeparator\":\"#c67add\",\n\t\"linkColor\":\"#61afef\",\n\t\"buttonBg\":\"#4d78cc\",\n\t\"buttonColor\":\"#ffffff\",\n\t\"errorTextColor\":\"#f44747\",\n\t\"mentionHighlightBg\":\"#525a69\",\n\t\"mentionHighlightLink\":\"#61afef\",\n\t\"codeTheme\":\"monokai\",\n\t\"mentionBg\":\"#98c379\"\n}\n```\n\n----------------------------------------\n\nTITLE: mmctl Token List Command\nDESCRIPTION: This command retrieves a list of tokens associated with a given user. It supports filtering the list to show only active or inactive tokens. Paging options are available to handle large numbers of tokens.  It requires the user's identifier (username, email, or ID).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_149\n\nLANGUAGE: sh\nCODE:\n```\nmmctl token list [user] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user tokens testuser\n```\n\n----------------------------------------\n\nTITLE: Managing mmctl Exports\nDESCRIPTION: This section outlines the commands related to managing exports, including creating, deleting, and downloading export files, as well as managing export jobs.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_65\n\nLANGUAGE: sh\nCODE:\n```\nmmctl export create\n```\n\n----------------------------------------\n\nTITLE: Configuring Transcriber Threads in config.json\nDESCRIPTION: This configuration setting specifies the number of threads used by the post-call transcriber in the Mattermost Calls plugin. The value must be in the range [1, numCPUs], with a default value of 2. It affects the performance of the job service.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/plugins-configuration-settings.rst#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``PluginSettings`` > ``Plugins`` > ``com.mattermost.calls`` > ``transcribernumthread``\n```\n\n----------------------------------------\n\nTITLE: Profiling with Go pprof\nDESCRIPTION: This snippet demonstrates how to use the `go tool pprof` command to profile a running Mattermost server. It specifies the endpoint to access profiling data, the type of profile to collect (e.g., CPU, heap), and the duration for which to collect the data. The port number and server name should be replaced with the actual values.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/performance-monitoring-metrics.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo tool pprof http://localhost:<port>/debug/pprof/profile?seconds=<duration>\n```\n\n----------------------------------------\n\nTITLE: Listing Incomplete Import Files with mmctl\nDESCRIPTION: This command lists import file uploads that have not been completed. The output format can be controlled via the inherited `--json` flag. Use the `-h` or `--help` flag for command specific help.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_94\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import list incomplete [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import list incomplete\n```\n\n----------------------------------------\n\nTITLE: Initializing Bash Shell Completion\nDESCRIPTION: This snippet initializes bash shell completion for the mmctl command-line tool. It uses command substitution to source the completion script generated by `mmctl completion bash` into the current shell environment, making command-line completion available for mmctl.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsource <(mmctl completion bash)\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Library\nDESCRIPTION: This setting determines whether to use the updated SAML library, which doesn't require the XML Security Library (xmlsec1). When set to 'true', the updated library is enabled. Otherwise, the existing implementation using the XML Security Library is used. This setting is configured using the 'UseNewSAMLLibrary' option in the config.json file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"UseNewSAMLLibrary\": false\n```\n\n----------------------------------------\n\nTITLE: Run Start Webhook Payload Example (JSON)\nDESCRIPTION: This JSON snippet provides an example of the payload sent for a `run start` webhook.  It illustrates the structure and types of data included in the webhook when a playbook run is initiated, allowing developers to understand how to parse and utilize this information for integrations. It is available as a Gist.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/repeatable-processes/work-with-playbooks.rst#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nhttps://gist.github.com/icelander/b68f2bf2b4ffefec93400cb050211cf1\n```\n\n----------------------------------------\n\nTITLE: Creating Index on PropertyValues (MySQL)\nDESCRIPTION: This SQL snippet conditionally creates an index named `idx_propertyvalues_targetid_groupid` on the `PropertyValues` table if it doesn't already exist. The index is created on the `TargetID` and `GroupID` columns to optimize queries that filter or sort by these columns.  It uses prepared statements to dynamically create the index.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSET @preparedStatement = (SELECT IF(\n  (\n     SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS\n     WHERE table_name = 'PropertyValues'\n     AND table_schema = DATABASE()\n     AND index_name = 'idx_propertyvalues_targetid_groupid'\n  ) > 0,\n  'SELECT 1',\n  'CREATE INDEX idx_propertyvalues_targetid_groupid ON PropertyValues (TargetID, GroupID);'\n));\n\nPREPARE createIndexIfNotExists FROM @preparedStatement;\nEXECUTE createIndexIfNotExists;\nDEALLOCATE PREPARE createIndexIfNotExists;\n```\n\n----------------------------------------\n\nTITLE: mmctl User Delete Format\nDESCRIPTION: Shows the format for the `mmctl user delete` command. It takes a list of user identifiers and optional flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_162\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user delete [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Alter Teams Table - PostgreSQL\nDESCRIPTION: This SQL command alters the `teams` table in PostgreSQL, changing the `type` column to use the newly created `team_type` enum. This ensures data consistency and enforces valid team types. The command was tested on a machine with 8 cores and 16GB RAM and took 116.205 milliseconds to execute.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE teams alter column type type team_type using type::team_type;\n```\n\n----------------------------------------\n\nTITLE: mmctl User Delete Options\nDESCRIPTION: Options for the `mmctl user delete` command, including confirm and help flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_164\n\nLANGUAGE: sh\nCODE:\n```\n--confirm   Confirm you really want to delete the user and a database backup has been performed\n-h, --help  help for delete\n```\n\n----------------------------------------\n\nTITLE: Testing Jira Webhook with cURL\nDESCRIPTION: This command sends a POST request to the Mattermost Jira webhook to verify its configuration. Replace the placeholder values with your actual Mattermost URL, secret, team, channel, user_id, and user_key.  This curl command is used to test the connectivity and ensure the webhook is reachable and correctly configured.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -v \"https://<YOUR-MATTERMOST-URL>/plugins/jira/webhook?secret=<YOUR-SECRET>&team=<YOUR-TEAM>&channel=<YOUR-CHANNEL>&user_id=admin&user_key=admin\" --data '{\"event\":\"some_jira_event\"}'\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Rebuilding HTML Documentation\nDESCRIPTION: This command first deletes all existing HTML files in the `/build` directory and then rebuilds all HTML files from the reStructuredText source files. Useful for a clean build, especially when modifying the navigation pane.\nSOURCE: https://github.com/mattermost/docs/blob/master/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake clean html\n```\n\n----------------------------------------\n\nTITLE: Removing Old CLI tool and APIv3 endpoints\nDESCRIPTION: In Mattermost v3.8, the old CLI tool was replaced by an upgraded version. Several APIv3 endpoints were also removed and replaced by newer equivalents, impacting channel and user status updates.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Displaying the status of an mmctl export job\nDESCRIPTION: This command uses the mmctl tool to show the status of a specific export job, identified by its ID. The output includes the ID, status (success, pending, etc.), creation timestamp, and start timestamp. The export job ID is required to check the status.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl export job show yfrr9ku5i7fjubeshs1ksrknzc\nID: yfrr9ku5i7fjubeshs1ksrknzc\nStatus: success\nCreated: 2021-11-03 10:44:13 -0500 CDT\nStarted: 2021-11-03 10:44:23 -0500 CDT\n```\n\n----------------------------------------\n\nTITLE: Removing Mattermost Deployment Data\nDESCRIPTION: Removes all data and settings associated with a Mattermost deployment. This command recursively deletes the `volumes` directory, effectively resetting the deployment to a clean state. Use with caution as it results in data loss.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/docker-troubleshooting.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm -rf ./volumes\n```\n\n----------------------------------------\n\nTITLE: Connect to MySQL using Sockets\nDESCRIPTION: These code snippets demonstrate how to connect to a MySQL database using sockets, and then configures the Mattermost server to use this connection. The first block demonstrates creating a database and user using the command line. The second block describes how to configure the Mattermost server. Mattermost is configured in ``/etc/webapps/mattermost/config.json``, and strings need to be quoted.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmysql -u root -p\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE mattermostdb;\nCREATE USER mmuser IDENTIFIED BY 'mmuser_password';\nGRANT ALL ON mattermostdb.* TO mmuser;\n```\n\nLANGUAGE: text\nCODE:\n```\n- set ``DriverName`` to ``mysql``.\n- set ``DataSource`` to ``mmuser:mmuser_password@unix(/run/mysqld/mysqld.sock)/mattermostdb?charset=utf8mb4,utf8``.\n```\n\n----------------------------------------\n\nTITLE: Database Query: Get SAML Users\nDESCRIPTION: This SQL query retrieves all users from the Mattermost database whose AuthService is set to 'saml'. This is part of the SAML synchronization process with AD/LDAP.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-saml-technical.rst#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM Users WHERE AuthService = 'saml'\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Relay Email Address - Mattermost\nDESCRIPTION: This setting is the email address that the Global Relay server monitors for compliance exports. It is configured via the System Console, config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Verifying Application Signature on Mac (spctl)\nDESCRIPTION: Verifies the signature of a macOS application using the spctl tool to assess its security. /path/to/your.app should be replaced with the actual path to the application bundle.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nspctl --assess --verbose=4 /path/to/your.app\n```\n\n----------------------------------------\n\nTITLE: Configure Primary Team - config.json\nDESCRIPTION: This setting specifies the primary team of a Mattermost server. When configured, users are restricted from joining or leaving this team. The value should be the team URL's team name (e.g., 'myteam' for 'https://example.mattermost.com/myteam/').\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalPrimaryTeam\": \"\"\n```\n\n----------------------------------------\n\nTITLE: NAT Configuration Example for Multi-Node Setup\nDESCRIPTION: This text block shows an example of NAT rules for a four-node setup. It demonstrates how to configure the rules for multiple nodes, ensuring unique local ports for each node. The IP addresses and port numbers should be adjusted to match the actual configuration of the cluster.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n-A OUTPUT -p tcp -d ip_node_2 --dport 8075 -j DNAT --to-destination 127.0.0.1:18075\n-A OUTPUT -p tcp -d ip_node_2 --dport 8074 -j DNAT --to-destination 127.0.0.1:18074\n-A OUTPUT -p tcp -d ip_node_3 --dport 8075 -j DNAT --to-destination 127.0.0.1:28075\n-A OUTPUT -p tcp -d ip_node_3 --dport 8074 -j DNAT --to-destination 127.0.0.1:28074\n-A OUTPUT -p tcp -d ip_node_4 --dport 8075 -j DNAT --to-destination 127.0.0.1:38075\n-A OUTPUT -p tcp -d ip_node_4 --dport 8074 -j DNAT --to-destination 127.0.0.1:38074\n```\n\n----------------------------------------\n\nTITLE: Creating Index on PropertyFields Table in MySQL\nDESCRIPTION: This SQL snippet creates an index named `idx_propertyfields_create_at_id` on the `PropertyFields` table in MySQL if it does not already exist. The index is created on the `CreateAt` and `ID` columns to improve query performance for pagination. It uses a prepared statement to conditionally create the index, ensuring that it only runs if the index doesn't already exist.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSET @preparedStatement = (SELECT IF(\n    (\n        SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS\n        WHERE table_name = 'PropertyFields'\n        AND table_schema = DATABASE()\n        AND index_name = 'idx_propertyfields_create_at_id'\n    ) > 0,\n    'SELECT 1',\n    'CREATE INDEX idx_propertyfields_create_at_id ON PropertyFields(CreateAt, ID);'\n));\n\nPREPARE createIndexIfNotExists FROM @preparedStatement;\nEXECUTE createIndexIfNotExists;\nDEALLOCATE PREPARE createIndexIfNotExists;\n```\n\n----------------------------------------\n\nTITLE: Removing Default NGINX Configuration\nDESCRIPTION: This snippet removes the default NGINX configuration file.  This step is necessary to ensure that the new Mattermost configuration file is used.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm /etc/nginx/sites-enabled/default\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm /etc/nginx/conf.d/default\n```\n\n----------------------------------------\n\nTITLE: Migrating permissions to roles\nDESCRIPTION: In Mattermost v4.9, certain permissions configuration settings were migrated to roles in the database. Modifying their `config.json` values no longer has an effect, but they can still be modified through the System Console.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Removing ServiceSettings: SegmentDeveloperKey\nDESCRIPTION: The `ServiceSettings: SegmentDeveloperKey` setting in `config.json` was removed in Mattermost v3.7.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Adding config.json setting to whitelist protocols\nDESCRIPTION: Mattermost v5.0 introduced a new `config.json` setting to whitelist types of protocols for auto-linking. This allows administrators to control which protocols are automatically linked in messages.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Importing Discord Dark Theme\nDESCRIPTION: This JSON snippet defines a custom theme for Mattermost, mimicking the appearance of Discord's dark theme. To apply this theme, copy the JSON code and paste it into the Mattermost custom theme settings under 'Copy and paste to share theme colors'.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"sidebarBg\": \"#121214\", \"sidebarText\": \"#ffffff\", \"sidebarUnreadText\": \"#ffffff\", \"sidebarTextHoverBg\": \"#1d1d1e\", \"sidebarTextActiveBorder\": \"#ffffff\", \"sidebarTextActiveColor\": \"#ffffff\", \"sidebarHeaderBg\": \"#121214\", \"sidebarHeaderTextColor\": \"#ffffff\", \"sidebarTeamBarBg\": \"#121214\", \"onlineIndicator\": \"#43a25a\", \"awayIndicator\": \"#ca9654\", \"dndIndicator\": \"#d83a42\", \"mentionBg\": \"#6e84d2\", \"mentionBj\": \"#6e84d2\", \"mentionColor\": \"#ffffff\", \"centerChannelBg\": \"#1a1a1e\", \"centerChannelColor\": \"#efeff0\", \"newMessageSeparator\": \"#ff4d4d\", \"linkColor\": \"#2095e8\", \"buttonBg\": \"#5865f2\", \"buttonColor\": \"#ffffff\", \"errorTextColor\": \"#ff6461\", \"mentionHighlightBg\": \"#a4850f\", \"mentionHighlightLink\": \"#a4850f\", \"codeTheme\": \"monokai\"}\n```\n\n----------------------------------------\n\nTITLE: Deprecating PostgreSQL 9.x\nDESCRIPTION: Mattermost v5.30 fully deprecated PostgreSQL 9.4 and all 9.x versions. New installs require PostgreSQL 10+.  Previous versions, including the current ESR, remain compatible with PostgreSQL 9.4 until fully deprecated.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: SMTP Port Setting - config.json Path\nDESCRIPTION: This snippet displays the `config.json` path for the SMTP server port setting. This setting defines the port number used to connect to the SMTP server. It is numerical input.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n``.EmailSettings.SMTPPort``\n```\n\n----------------------------------------\n\nTITLE: Restricting Public Channel Management Configuration\nDESCRIPTION: This snippet shows the config.json setting used to restrict who can rename and manage (header or purpose) public channels. Options include all channel members, channel admins, team admins, and system admins, team admins and system admins, and system admins only. This is deprecated and replaced by advanced permissions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"RestrictPublicChannelManagement\": \"all\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Daily Digest using Slash Command\nDESCRIPTION: This snippet shows how to disable the daily digest feature using a slash command within Mattermost. The command `/playbook settings digest off` is used in any channel to turn off the daily digest notifications.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/repeatable-processes/notifications-and-updates.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/playbook settings digest off\n```\n\n----------------------------------------\n\nTITLE: Mattermost Plugin Multi Hook Time Bucket Metric\nDESCRIPTION: Defines a Prometheus metric to capture time buckets for a Multi Hook. This shows which bucket the requests fall into.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/performance-alerting.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n  mattermost_plugin_multi_hook_time_bucket{plugin_id=\"com.mattermost.custom-attributes\",le=\"0.005\"} 100\n  mattermost_plugin_multi_hook_time_bucket{plugin_id=\"com.mattermost.custom-attributes\",le=\"0.01\"} 100\n```\n\n----------------------------------------\n\nTITLE: Importing Old Discord Dark Theme\nDESCRIPTION: This JSON snippet defines an older version of a Discord-inspired custom theme for Mattermost. To use this theme, copy the JSON code and paste it into the Mattermost custom theme input under 'Copy and paste to share theme colors'.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"sidebarBg\":\"#2f3136\",\"sidebarText\":\"#ffffff\",\"sidebarUnreadText\":\"#ffffff\",\"sidebarTextHoverBg\":\"#33363c\",\"sidebarTextActiveBorder\":\"#66cfa0\",\"sidebarTextActiveColor\":\"#ffffff\",\"sidebarHeaderBg\":\"#27292c\",\"sidebarHeaderTextColor\":\"#ffffff\",\"onlineIndicator\":\"#43b581\",\"awayIndicator\":\"#faa61a\",\"dndIndicator\":\"#f04747\",\"mentionBg\":\"#6e84d2\",\"mentionBg\":\"#6e84d2\",\"mentionColor\":\"#ffffff\",\"centerChannelBg\":\"#36393f\",\"centerChannelColor\":\"#dddddd\",\"newMessageSeparator\":\"#6e84d2\",\"linkColor\":\"#2095e8\",\"buttonBg\":\"#43b581\",\"buttonColor\":\"#ffffff\",\"errorTextColor\":\"#ff6461\",\"mentionHighlightBg\":\"#3d414f\",\"mentionHighlightLink\":\"#6e84d2\",\"codeTheme\":\"monokai\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to a Role (mmctl)\nDESCRIPTION: Shows how to add permissions to an existing role using the mmctl command-line tool. Requires specifying the role and the permissions to be added.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_110\n\nLANGUAGE: sh\nCODE:\n```\nmmctl permissions add system_user list_open_teams\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl permissions add system_manager sysconsole_read_user_management_channels\n```\n\n----------------------------------------\n\nTITLE: Bundle JS and Assets Manually (React Native)\nDESCRIPTION: This command manually bundles the JavaScript and assets for a React Native Android application.  It sets the platform to Android, disables development mode, specifies the entry point (index.js), and sets the output paths for the bundle and assets. This is a workaround for build issues.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/mobile/mobile-troubleshooting.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nreact-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/\n```\n\n----------------------------------------\n\nTITLE: Removing temporary files after upgrade (Shell)\nDESCRIPTION: These commands remove temporary files created during the Mattermost upgrade process. They require `sudo` for elevated privileges and the `rm` command. The first command removes the entire upgrade directory recursively. The second command interactively prompts for confirmation before removing any `mattermost*.gz` files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/upgrading-mattermost-server.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm -r /tmp/mattermost-upgrade/\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm -i /tmp/mattermost*.gz\n```\n\n----------------------------------------\n\nTITLE: Configure User Status Away Timeout - config.json\nDESCRIPTION: This setting configures the number of seconds after which a user's status is set to 'Away' when inactive. The default value is 300 seconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"UserStatusAwayTimeout\": 300\n```\n\n----------------------------------------\n\nTITLE: Scheduling an Export Job with Mattermost CLI (Deprecated)\nDESCRIPTION: Schedules an export job in a format suitable for importing into a third-party archive system. This command is deprecated and will be moved to the `mmctl` command-line tool in a future version. Requires a Unix timestamp for the export start time and can set a timeout.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nmattermost export schedule\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Marketplace Plugins with mmctl\nDESCRIPTION: Installs a Mattermost plugin directly from the Plugin Marketplace. It requires a valid plugin ID. The command automatically installs the latest version of the specified plugin. This command needs network access to the Mattermost Plugin Marketplace server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_123\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin marketplace install <id> [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl plugin marketplace install jitsi\n```\n\n----------------------------------------\n\nTITLE: Export Amazon S3 Storage Class Configuration\nDESCRIPTION: This snippet configures the storage class used for exports to S3-compatible storage solutions. The default is an empty string, and the configuration can be set via the config.json file, or environment variable. Note that this setting is not available in the system console.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_62\n\nLANGUAGE: text\nCODE:\n```\nconfig.json setting: \".FileSettings.ExportAmazonS3StorageClass: \\\"\\\"\",\nEnvironment variable: \"MM_FILESETTINGS_EXPORTAMAZONS3STORAGECLASS\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gossip Protocol Usage\nDESCRIPTION: This setting configures whether the server uses the gossip protocol for communication. If set to \"true\", the server attempts to communicate via the gossip protocol over the specified gossip port. If set to \"false\", the server attempts to communicate over the streaming port.  The setting is \"UseExperimentalGossip\" and expects a boolean value.  Removed in Mattermost v6.0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n\"UseExperimentalGossip\": true\n```\n\n----------------------------------------\n\nTITLE: Running an Integrity Check with mmctl\nDESCRIPTION: This command performs a relational integrity check to identify orphaned records. It is deprecated from Mattermost v9.3 and only functions in local mode. Requires the `--confirm` flag to be set to acknowledge the potentially harmful impact on system performance. Use the `-h` or `--help` flag for command specific help.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_98\n\nLANGUAGE: sh\nCODE:\n```\nmmctl integrity [flags]\n```\n\n----------------------------------------\n\nTITLE: Inline image with fixed width\nDESCRIPTION: This example demonstrates how to display an inline image with a fixed width, allowing Mattermost to adjust the height to maintain the aspect ratio. It uses the =width notation after the image URL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n![Mattermost](../images/icon-76x76.png =50 \"Mattermost Icon\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Local Mode for mmctl in config.json\nDESCRIPTION: This configuration enables or disables local mode for mmctl via the config.json. Setting this to true enables local mode, while false (default) prevents it.  It uses a boolean input.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n\"EnableLocalMode\": false\n```\n\n----------------------------------------\n\nTITLE: Assign Viewer Role using mmctl\nDESCRIPTION: This command assigns the Viewer role to a specified user using the mmctl command-line tool. The system_read_only_admin parameter specifies the role to assign, and user-name specifies the user to whom the role is assigned.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl permissions role assign system_read_only_admin user-name\n```\n\n----------------------------------------\n\nTITLE: Defining DirectPost Object in Mattermost\nDESCRIPTION: This JavaScript snippet defines the structure of a DirectPost object for Mattermost data import. It includes channel members, user posting, message content, creation timestamp, flagged users, replies, and reactions. Note:  In a data file, the object must be represented on a single line.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"direct_post\",\n    \"direct_post\": {\n      \"channel_members\": [\n        \"username1\",\n        \"username2\",\n        \"username3\",\n      ],\n      \"user\": \"username2\",\n      \"message\": \"Hello Group Channel\",\n      \"create_at\": 140012340013,\n      \"flagged_by\": [\n        \"username1\",\n        \"username2\",\n        \"username3\"\n      ],\n      \"replies\": [{\n        \"user\": \"username4\",\n        \"message\": \"The reply message\",\n        \"create_at\": 140012352049,\n      }, {\n        \"user\": \"username5\",\n        \"message\": \"Other reply message\",\n        \"create_at\": 140012353057,\n      }],\n      \"reactions\": [{\n        \"user\": \"username6\",\n        \"emoji_name\": \"+1\",\n        \"create_at\": 140012356032,\n      }, {\n        \"user\": \"username7\",\n        \"emoji_name\": \"heart\",\n        \"create_at\": 140012359034,\n      }]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Inter-Node Listen Address\nDESCRIPTION: This setting defines the address the Mattermost server listens on for inter-node communication. It's crucial to secure this address to allow only cluster machines access. The configuration parameter is \"InterNodeListenAddress\" and expects a string value representing the address, such as \":8075\".  Deprecated after v4.0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n\"InterNodeListenAddress\": \":8075\"\n```\n\n----------------------------------------\n\nTITLE: Configure Maximum Queries Per Second - config.json\nDESCRIPTION: This setting defines the maximum number of API requests allowed per second when rate limiting is enabled. The value should be a numerical input representing the desired number of requests per second.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/rate-limiting-configuration-settings.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\".RateLimitSettings.PerSec: 10,”\n```\n\n----------------------------------------\n\nTITLE: Verify SSL configuration with curl\nDESCRIPTION: This command uses curl to verify that the SSL configuration is working correctly by accessing the Mattermost website over HTTPS.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://{your domain here}\n```\n\n----------------------------------------\n\nTITLE: Install MSI for All Users - Windows\nDESCRIPTION: Installs the Mattermost desktop app for all users on the system using the ALLUSERS parameter. Installing for all users disables automatic updates for the desktop app on Windows. This command requires administrator privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/desktop-msi-installer-and-group-policy-install.rst#_snippet_1\n\nLANGUAGE: Batchfile\nCODE:\n```\nmsiexec /i mattermost-desktop-v5.11.2-x64.msi ALLUSERS=1\n```\n\n----------------------------------------\n\nTITLE: Installing Jira Server/Data Center Instance via Slash Command\nDESCRIPTION: This command is used by a Mattermost system admin to install a Jira Server or Data Center instance. It replaces `YOUR-JIRA-URL` with the actual Jira URL. The value must match the Jira server URL used to log in. This action enables users to create and manage Jira issues across Mattermost channels.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/jira instance install server <YOUR-JIRA-URL>\n```\n\n----------------------------------------\n\nTITLE: Assigning mmctl Permissions Role\nDESCRIPTION: Assigns users to a specified role by their usernames. The role name and one or more usernames must be provided as arguments. This command is used to grant permissions to users by associating them with a role.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_113\n\nLANGUAGE: sh\nCODE:\n```\nmmctl permissions role assign <role_name> <username...> [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Assign users with usernames 'john.doe' and 'jane.doe' to the role named 'system_admin'.\nmmctl permissions role assign system_admin john.doe jane.doe\n\n# Examples using other system roles\nmmctl permissions role assign system_manager john.doe jane.doe\nmmctl permissions role assign system_user_manager john.doe jane.doe\nmmctl permissions role assign system_read_only_admin john.doe jane.doe\n```\n\n----------------------------------------\n\nTITLE: Service Setting: Experimental Data Prefetch (config.json)\nDESCRIPTION: This setting controls whether messages in all unread channels are pre-loaded from the server when the client reconnects. Takes a boolean value (true/false) to enable/disable the feature.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalDataPrefetch\": true\n```\n\n----------------------------------------\n\nTITLE: Accessing Shell Inside Mattermost Preview Container (Shell)\nDESCRIPTION: This snippet allows you to access a shell inside the running Mattermost preview Docker container. It uses the `docker exec` command with the `-ti` flags to create an interactive terminal session. Requires the 'mattermost-preview' container to be running.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -ti mattermost-preview /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Configure Users Status Poll Interval - config.json\nDESCRIPTION: This setting configures how often Mattermost checks for and retrieves updated user profile data. A lower value increases frequency but might impact performance.  The value is specified in milliseconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalSettings.UsersStatusAndProfileFetchingPollIntervalMilliseconds\": 3000\n```\n\n----------------------------------------\n\nTITLE: Listing Available Import Files with mmctl\nDESCRIPTION: This command lists import files that are available for processing. It accepts no specific arguments, and inherits command-line options from its parent commands. Use the `-h` or `--help` flag for command specific help.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_93\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import list available [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import list available\n```\n\n----------------------------------------\n\nTITLE: Including common ESR support information.\nDESCRIPTION: This snippet includes a common markdown file related to extended support releases.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-mobile-releases.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{Important}\n```{include} common-esr-support.md\n```\n```\n\n----------------------------------------\n\nTITLE: Windows Dark Theme JSON\nDESCRIPTION: This JSON configures the Windows Dark theme for Mattermost, specifying colors for elements like the sidebar, center channel, and notification indicators. Apply this theme by copying and pasting the JSON into the custom theme settings in Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"sidebarBg\":\"#171717\",\n\t\"sidebarText\":\"#ffffff\",\n\t\"sidebarUnreadText\":\"#ffffff\",\n\t\"sidebarTextHoverBg\":\"#302e30\",\n\t\"sidebarTextActiveBorder\":\"#196caf\",\n\t\"sidebarTextActiveColor\":\"#ffffff\",\n\t\"sidebarHeaderBg\":\"#1f1f1f\",\n\t\"sidebarTeamBarBg\":\"#181818\",\n\t\"sidebarHeaderTextColor\":\"#ffffff\",\n\t\"onlineIndicator\":\"#399fff\",\n\t\"awayIndicator\":\"#c1b966\",\n\t\"dndIndicator\":\"#e81023\",\n\t\"mentionBg\":\"#0177e7\",\n\t\"mentionColor\":\"#ffffff\",\n\t\"centerChannelBg\":\"#1f1f1f\",\n\t\"centerChannelColor\":\"#dddddd\",\n\t\"newMessageSeparator\":\"#cc992d\",\n\t\"linkColor\":\"#0d93ff\",\n\t\"buttonBg\":\"#0177e7\",\n\t\"buttonColor\":\"#ffffff\",\n\t\"errorTextColor\":\"#ff6461\",\n\t\"mentionHighlightBg\":\"#784098\",\n\t\"mentionHighlightLink\":\"#a4ffeb\",\n\t\"codeTheme\":\"monokai\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Password from Private Key - Bash\nDESCRIPTION: This command removes the password protection from the encrypted private key (`mattermost-x509.secure.key`) using `openssl pkcs8`. The `-nocrypt` option specifies that no encryption should be applied, resulting in an unencrypted private key saved as `mattermost-x509.key`. The user will be prompted for the existing password.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scripts/generate-certificates/gencert.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# unsecure\nopenssl pkcs8 -in mattermost-x509.secure.key -topk8 -nocrypt -out mattermost-x509.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Idle Database Connections\nDESCRIPTION: This setting specifies the maximum number of idle connections held open to the database. The default value is 20. It can be configured through the System Config path (Environment > Database), the config.json setting (\".SqlSettings.MaxIdleConns\": 20), or the environment variable MM_SQLSETTINGS_MAXIDLECONNS. Numerical input is expected. Deprecated after v7.0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n\".SqlSettings.MaxIdleConns\": 20\n```\n\n----------------------------------------\n\nTITLE: Removing config watcher mechanism\nDESCRIPTION: In Mattermost v5.38, the automatic config.json reload mechanism was removed. Configuration changes now require running the `mmctl config` command to apply them. This improves configuration performance and robustness.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: mmctl Version Options\nDESCRIPTION: Defines the available options for the mmctl version command, which only includes the help flag (-h).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_197\n\nLANGUAGE: sh\nCODE:\n```\n   -h, --help       help for version\n```\n\n----------------------------------------\n\nTITLE: Alter column type to JSONB (Troubleshooting) - PostgreSQL\nDESCRIPTION: These SQL statements alter the column types of various columns in different tables (posts, channelmembers, jobs, linkmetadata, sessions, threads, users) to JSONB. This is a troubleshooting step for upgrades from releases older than v5.35 to v6.0 if \"Failed to alter column type\" error is encountered. They are intended to be run against the v5.39 development database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/prepare-to-upgrade-mattermost.rst#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE posts ALTER COLUMN props TYPE jsonb USING props::jsonb;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE channelmembers ALTER COLUMN notifyprops TYPE jsonb USING notifyprops::jsonb;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE jobs ALTER COLUMN data TYPE jsonb USING data::jsonb;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE linkmetadata ALTER COLUMN data TYPE jsonb USING data::jsonb;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE sessions ALTER COLUMN props TYPE jsonb USING props::jsonb;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE threads ALTER COLUMN participants TYPE jsonb USING participants::jsonb;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ALTER COLUMN props TYPE jsonb USING props::jsonb;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ALTER COLUMN notifyprops TYPE jsonb USING notifyprops::jsonb;\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ALTER COLUMN timezone TYPE jsonb USING timezone::jsonb;\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Outgoing Integration Timeout\nDESCRIPTION: Introduces a new configuration setting called `OutgoingIntegrationRequestsDefaultTimeout` to manage timeouts for integration requests within the Mattermost system. This allows administrators to define how long the system waits for responses from external integrations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nOutgoingIntegrationRequestsDefaultTimeout\n```\n\n----------------------------------------\n\nTITLE: Prometheus Plugin Hook Time Metric Example\nDESCRIPTION: This code snippet shows an example of a Prometheus metric for tracking the execution time of plugin hook handlers. It includes the metric name, help text, type, labels (hook_name, plugin_id, success), and bucket values for a histogram.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/performance-alerting.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# HELP mattermost_plugin_hook_time Time to execute plugin hook handler in seconds.\n# TYPE mattermost_plugin_hook_time histogram\nmattermost_plugin_hook_time_bucket{hook_name=\"ChannelHasBeenCreated\",plugin_id=\"com.mattermost.demo-plugin\",success=\"true\",le=\"0.005\"} 0\nmattermost_plugin_hook_time_bucket{hook_name=\"ChannelHasBeenCreated\",plugin_id=\"com.mattermost.demo-plugin\",success=\"true\",le=\"0.01\"} 0\n```\n\n----------------------------------------\n\nTITLE: Filestore Secret YAML Example\nDESCRIPTION: Provides an example of a Kubernetes Secret to store S3 credentials, emphasizing the need for base64 encoding.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-s3-credentials\ntype: Opaque\ndata:\n  accesskey: QUNDRVNTX0tFWQo=  # Example: Replace with your actual encoded key\n  secretkey: U1VQRVJfU0VDUkVUX0tFWQo=  # Example: Replace with your actual encoded key\n```\n\n----------------------------------------\n\nTITLE: Setting MM_CONFIG environment variable (text)\nDESCRIPTION: Sets the MM_CONFIG environment variable in the mattermost.environment file to the database connection string. This instructs Mattermost to load its configuration from the database instead of the config.json file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/configuration-in-your-database.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMM_CONFIG='postgres://mmuser:mostest@localhost:5432/mattermost_test?sslmode=disable&connect_timeout=10'\n```\n\n----------------------------------------\n\nTITLE: Alter Upload Sessions Table - MySQL\nDESCRIPTION: This SQL command alters the `UploadSessions` table in MySQL, modifying the `Type` column to be an ENUM with specified values. This enforces type constraints on the upload session type. The command execution time was recorded as 0.03 seconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE UploadSessions MODIFY COLUMN Type ENUM(\"attachment\", \"import\");\n```\n\n----------------------------------------\n\nTITLE: Group Channel Disable Command\nDESCRIPTION: Disables group constraints on a specified channel within a team. The team and channel are specified in the format `team:channel`. It inherits global options for configuration, output formatting, and security settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_80\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group channel disable [team]:[channel] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group channel disable myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Create Mattermost Data Directory (mkdir)\nDESCRIPTION: Creates the default data directory for Mattermost at /opt/mattermost/data using the mkdir command. This directory is used for storing files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir /opt/mattermost/data\n```\n\n----------------------------------------\n\nTITLE: Mattermost Database Secret YAML\nDESCRIPTION: Defines a Kubernetes Secret to store database connection details for Mattermost.  Includes connection string and check URL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  DB_CONNECTION_CHECK_URL: <DB_CONNECTION_CHECK_URL>\n  DB_CONNECTION_STRING: <DB_CONNECTION_STRING>\n  MM_SQLSETTINGS_DATASOURCEREPLICAS: <MM_SQLSETTINGS_DATASOURCEREPLICAS>\nkind: Secret\nmetadata:\n  name: my-postgres-connection\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Executing Call Logs Slash Command in Mattermost\nDESCRIPTION: Executes the `/call logs` slash command within a Mattermost channel to review client logs for the last call session. This command is useful for diagnosing issues after a call has concluded. Note that data is only saved for the last joined call.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/make-calls.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/call logs\n```\n\n----------------------------------------\n\nTITLE: Mattermost DB Downgrade Command\nDESCRIPTION: This snippet illustrates the command structure for downgrading the Mattermost database. It requires specifying version numbers to rollback or using an update plan file. This command rolls back database migrations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmattermost db downgrade\n```\n\nLANGUAGE: sh\nCODE:\n```\nmattermost db downgrade 99,100,101\n```\n\n----------------------------------------\n\nTITLE: mmctl User Deactivate Options\nDESCRIPTION: Options for the `mmctl user deactivate` command, including help flag.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_161\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help       help for deactivate\n```\n\n----------------------------------------\n\nTITLE: Removing platform binary and flag\nDESCRIPTION: In Mattermost v5.37, the `platform` binary and `--platform` flag were removed.  System administrators must now use the `mattermost` binary to run the Mattermost server application.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Creating retentionidsfordeletion Table - MySQL\nDESCRIPTION: This SQL script creates the `retentionidsfordeletion` table in a MySQL database. It includes columns for `id`, `tablename`, and `ids`, with appropriate data types and constraints. An index is also created on the `tablename` column to optimize queries. The table uses the InnoDB engine with utf8mb4 charset.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE\nIF NOT EXISTS\nretentionidsfordeletion(\nid VARCHAR(26) PRIMARY KEY,\ntablename VARCHAR(64),\nids TEXT,\nKEY\nidx_retentionidsfordeletion_tablename\n(TableName)) ENGINE =\nInnoDB DEFAULT CHARSET =\nutf8mb4;\n```\n\n----------------------------------------\n\nTITLE: Creating mmctl Slash Command\nDESCRIPTION: This snippet shows how to create a custom slash command for a specified team using `mmctl command create`.  It requires various flags such as title, description, trigger word, URL, and creator.  The newly created command will be associated with the specified team and configured according to the provided parameters.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command create [team] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command create myteam --title MyCommand --description \"My Command Description\" --trigger-word mycommand --url http://localhost:8000/my-slash-handler --creator myusername --response-username my-bot-username --icon http://localhost:8000/my-slash-handler-bot-icon.png --autocomplete --post\n```\n\n----------------------------------------\n\nTITLE: Processing an Import Job using mmctl\nDESCRIPTION: This command starts a new import job. It requires the name of the import file as an argument. The `--bypass-upload` flag allows reading the file directly from the filesystem when in local mode. Use the `-h` or `--help` flag for command specific help.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_95\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import process [importname] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import process 35uy6cwrqfnhdx3genrhqqznxc_import.zip\n```\n\n----------------------------------------\n\nTITLE: Verify Mattermost through proxy\nDESCRIPTION: This command uses curl to verify that the Mattermost application is accessible through the Nginx proxy.  It checks if the Mattermost signup page is returned.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost\n```\n\n----------------------------------------\n\nTITLE: Updating mmctl Subpath Configuration\nDESCRIPTION: This command updates the hard-coded production client asset paths to reflect Mattermost running on a subpath.  Requires access to the Mattermost `assets` directory.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_63\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config subpath [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n# you can rewrite the assets to use a subpath\nmmctl config subpath --assets-dir /opt/mattermost/client --path /mattermost\n\n# the subpath can have multiple steps\nmmctl config subpath --assets-dir /opt/mattermost/client --path /my/custom/subpath\n\n# or you can fallback to the root path passing /\nmmctl config subpath --assets-dir /opt/mattermost/client --path /\n```\n\n----------------------------------------\n\nTITLE: Configuring Webserver Mode - Mattermost\nDESCRIPTION: This snippet describes how to configure the webserver mode setting in Mattermost. This setting determines how the server serves static files. Options include gzip (default), uncompressed, and disabled. The setting can be configured via the System Console, config.json file, and the environment variable MM_SERVICESETTINGS_WEBSERVERMODE.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.WebserverMode: gzip\"\n```\n\n----------------------------------------\n\nTITLE: HipChat Export Command\nDESCRIPTION: This command allows you to export data from HipChat via the command-line interface. It requires specifying a password to protect the exported archive files. Ensure you remember the password, as it's not saved elsewhere.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrating-from-hipchat-to-mattermost.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhipchat export --export  -p your_password\n```\n\n----------------------------------------\n\nTITLE: Adding shell completion to mmctl user commands\nDESCRIPTION: Added shell completion to ``mmctl user active`` and ``mmctl user deactivate`` commands. This improves the user experience by providing suggestions and auto-completion during command input in the shell.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nmmctl user active\n```\n\nLANGUAGE: Text\nCODE:\n```\nmmctl user deactivate\n```\n\n----------------------------------------\n\nTITLE: Inline image with fixed dimensions\nDESCRIPTION: This snippet illustrates how to display an inline image with fixed width and height in Mattermost. It shows the syntax for specifying the width and height using the =widthxheight notation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n![Mattermost](../images/icon-76x76.png =50x76 \"Mattermost Icon\")\n```\n\n----------------------------------------\n\nTITLE: config.json MetricsSettings Modification\nDESCRIPTION: Under ``MetricsSettings`` in ``config.json``, a feature flag and a setting ``EnableClientMetrics`` were added to control new client performance metrics. A setting for notification metrics ``EnableNotificationMetrics`` was also added, allowing administrators to configure performance and notification metric collection.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\nconfig.json\n```\n\n----------------------------------------\n\nTITLE: Restart Mattermost Service (systemctl)\nDESCRIPTION: Restarts the Mattermost service using the systemctl command.  This is used to apply configuration changes and test fixes to SELinux configuration issues.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl restart mattermost\n```\n\n----------------------------------------\n\nTITLE: Checking for Valid Mattermost License Key (Text)\nDESCRIPTION: This code snippet demonstrates how to check for a valid Mattermost Enterprise Edition license by examining the Mattermost log file for a specific entry indicating a valid license key.  The log entry format includes the date, time, log level (INFO), and a message confirming the license validity. This is useful for verifying that enterprise features are unlocked without logging into the system.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/admin-onboarding-tasks.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[2017/05/19 16:51:40 UTC] [INFO] License key valid unlocking enterprise features.\n```\n\n----------------------------------------\n\nTITLE: Add ChannelId Column to Reactions Table\nDESCRIPTION: This SQL snippet adds a new column `ChannelId` to the `Reactions` table, backfills its values, and creates an index on this new column. It obtains a lock on Reactions table. These operations are required during Mattermost upgrades to version 7.1. Users' reactions posted during this time won't be reflected in the database until the migrations are complete. This is fully backwards-compatible.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE Reactions ADD COLUMN ChannelId varchar(26) NOT NULL DEFAULT \"\";\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE Reactions SET ChannelId = COALESCE((select ChannelId from Posts where Posts.Id = Reactions.PostId), '') WHERE ChannelId=\"\";\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX idx_reactions_channel_id ON Reactions(ChannelId) LOCK=NONE;\n```\n\n----------------------------------------\n\nTITLE: Dropping TeamId Column From Threads Table - SQL\nDESCRIPTION: This SQL script checks if a 'TeamId' column exists in the 'Threads' table and drops it if it does. It uses prepared statements to dynamically execute the 'ALTER TABLE' command. This ensures that the column is removed cleanly if it exists, preventing errors during later operations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\n-- Drop any existing TeamId column from 000094_threads_teamid.up.sql\n\nSET @preparedStatement = (SELECT IF(\n    EXISTS(\n        SELECT 1 FROM INFORMATION_SCHEMA.STATISTICS\n        WHERE table_name = 'Threads'\n        AND table_schema = DATABASE()\n        AND column_name = 'TeamId'\n    ),\n    'ALTER TABLE Threads DROP COLUMN TeamId;',\n    'SELECT 1;'\n));\n\nPREPARE removeColumnIfExists FROM @preparedStatement;\nEXECUTE removeColumnIfExists;\nDEALLOCATE PREPARE removeColumnIfExists;\n```\n\n----------------------------------------\n\nTITLE: Closing HTML Div Tag\nDESCRIPTION: This HTML snippet provides the closing tag for the 'mm-plans-badge' div element. It signifies the end of the badge container.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/ent-only.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuration: Lock Teammate Name Display - config.json\nDESCRIPTION: This setting controls whether users can change their teammate name display settings. It is configured via the `TeamSettings.LockTeammateNameDisplay` setting in `config.json`. When set to `true`, users cannot modify their display settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Removing ExperimentalEnablePostMetadata\nDESCRIPTION: The `ExperimentalEnablePostMetadata` setting was removed in Mattermost v5.12. Post metadata is now stored in the database for improved scroll position handling.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: mmctl Version Command\nDESCRIPTION: Shows the format for displaying the mmctl tool's version. It uses the `mmctl version` command.  The help flag (-h) provides usage details.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_196\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl version [flags]\n```\n\n----------------------------------------\n\nTITLE: Restricting Team Invites Configuration\nDESCRIPTION: This snippet shows the config.json setting used to restrict who can invite others to a team. Options include all team members, team admins and system admins, and system admins only. This is deprecated and replaced by advanced permissions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n\"RestrictTeamInvite\": \"all\"\n```\n\n----------------------------------------\n\nTITLE: Setting App Custom URL Schemes via mmctl\nDESCRIPTION: This example demonstrates how to set the App Custom URL Schemes using the mmctl command-line tool. This setting defines valid custom URL schemes for redirect links provided by custom-built mobile Mattermost apps.  The arguments are the URL schemes to allow.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmmctl config set NativeAppSettings.AppCustomURLSchemes \"mmauth://\" \"mmauthbeta://\"\n```\n\n----------------------------------------\n\nTITLE: Creating retentionidsfordeletion Table - PostgreSQL\nDESCRIPTION: This SQL script creates the `retentionidsfordeletion` table in a PostgreSQL database. It defines the `id` as the primary key and creates an index on the `tablename` column for efficient querying. The `ids` column is defined as an array of VARCHAR(26) values. The `IF NOT EXISTS` clause ensures that the table is only created if it doesn't already exist.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE\nIF NOT EXISTS\nretentionidsfordeletion(id\nVARCHAR(26) PRIMARY KEY,\ntablename VARCHAR(64),\nids VARCHAR(26) []);\nCREATE INDEX\nIF NOT EXISTS\nidx_retentionidsfordeletion_tablename\nON retentionidsfordeletion(\ntablename);\n```\n\n----------------------------------------\n\nTITLE: Schemes Table Definition\nDESCRIPTION: This snippet defines the structure of the `Schemes` database table in Mattermost. It includes fields for ID, name, display name, description, scope (team or channel), and associated role names for admins, users, and guests at both the team and channel levels. The purpose is to store dynamic and user-configurable permission schemes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/advanced-permissions-backend-infrastructure.rst#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n``Schemes`` table\n~~~~~~~~~~~~~~~~~\n\nSchemes are dynamic and user configurable, necessitating a database table with the following fields:\n\n- ``Id`` (Autoincrement, Primary Key)\n- ``Name`` (Unique String with Character Constraints, e.g. “corporate_scheme”)\n- ``Display`` Name\n- ``Description`` (String)\n- ``Scope`` (String): Team or Channel\n- ``Team Admin Role`` (String): Empty if Channel Scope\n- ``Team User Role`` (String): Empty if Channel Scope\n- ``Team Guest Role`` (String): Empty if Channel Scope\n- ``Channel Admin Role`` (String): Always provided\n- ``Channel User Role`` (String): Always provided\n- ``Channel Guest Role`` (String): Always provided\n```\n\n----------------------------------------\n\nTITLE: Creating PropertyFields Table in MySQL\nDESCRIPTION: This SQL snippet creates the `PropertyFields` table in MySQL. The table stores property field definitions, including group ID, name, type, attributes, target ID and type, and timestamps. A unique constraint is added on `GroupID`, `TargetID`, `Name`, and `DeleteAt` columns.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS PropertyFields (\n  ID varchar(26) PRIMARY KEY,\n  GroupID varchar(26) NOT NULL,\n  Name varchar(255) NOT NULL,\n  Type enum('text', 'select', 'multiselect', 'date', 'user', 'multiuser'),\n  Attrs json,\n  TargetID varchar(255),\n  TargetType varchar(255),\n  CreateAt bigint(20),\n  UpdateAt bigint(20),\n  DeleteAt bigint(20),\n  UNIQUE(GroupID, TargetID, Name, DeleteAt)\n );\n```\n\n----------------------------------------\n\nTITLE: Reloading systemd daemon and restarting Mattermost (sh)\nDESCRIPTION: Reloads the systemd daemon and restarts the Mattermost service. This ensures that the changes to the mattermost.service file, including the EnvironmentFile directive, are applied.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/configuration-in-your-database.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl restart mattermost\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch User Index Replicas Configuration\nDESCRIPTION: Defines the number of replicas for each user index in Elasticsearch. Configurable via config.json (Elasticsearchsettings.UserIndexReplicas) or the environment variable MM_ELASTICSEARCHSETTINGS_USERINDEXREPLICAS. Default value is 1. This should be n-1, where n is the number of data nodes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_36\n\nLANGUAGE: JSON\nCODE:\n```\n\".Elasticsearchsettings.UserIndexReplicas: 1\"\n```\n\n----------------------------------------\n\nTITLE: Migrating config.json on Windows\nDESCRIPTION: This command creates a Mattermost directory in the %APPDATA% directory and copies the config.json file from the old electron-mattermost directory to the new Mattermost directory. This is required when the project was renamed from electron-mattermost to desktop.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/desktop-app-changelog.md#_snippet_4\n\nLANGUAGE: Batch\nCODE:\n```\nmkdir %APPDATA%\\Mattermost and copy %APPDATA%\\electron-mattermost\\config.json %APPDATA%\\Mattermost\\config.json\n```\n\n----------------------------------------\n\nTITLE: Create Headings with Underlines - Text\nDESCRIPTION: Shows how to create headings using equal signs '===' or hyphens '---' to underline the text.  Equal signs create a larger heading and hyphens create a smaller heading.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nLarge Heading\n-------------\n```\n\n----------------------------------------\n\nTITLE: HTML div for Mattermost Plans Badge\nDESCRIPTION: This HTML snippet defines a div element with the class 'mm-plans-badge'. This is likely used to style and contain the plan availability badge in the documentation. The closing tag for this div is also provided in a separate snippet.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/allplans-selfhosted.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mm-plans-badge\">\n```\n\n----------------------------------------\n\nTITLE: Starting or Joining a Call via Slash Commands\nDESCRIPTION: These slash commands allow users to initiate or participate in calls within a specific channel or thread in Mattermost.  `/call start` starts a new call and `/call join` joins an existing call.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/built-in-slash-commands.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/call start\n/call join\n```\n\n----------------------------------------\n\nTITLE: Start Numbered List at Arbitrary Number - Text\nDESCRIPTION: Demonstrates how to start a numbered list at a number other than one.  Subsequent list items will increment from that starting number, regardless of the explicit numbers used.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n4. The first list number is 4.\n1. The second list number is 5.\n1. The third list number is 6.\n```\n\n----------------------------------------\n\nTITLE: Database Secret YAML Example (AWS Aurora)\nDESCRIPTION: Provides an example Kubernetes Secret for connecting to an AWS Aurora PostgreSQL database. The connection strings are base64 encoded.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  DB_CONNECTION_CHECK_URL: cG9zdGdyZXM6Ly91c2VyOnN1cGVyX3NlY3JldF9wYXNzd29yZEBteS1kYXRhYmFzZS5jbHVzdGVyLWFiY2QudXMtZWFzdC0xLnJkcy5hbWF6b25hd3MuY29tOjU0MzIvbWF0dGVybW9zdD9jb25uZWN0X3RpbWVvdXQ9MTAK\n  DB_CONNECTION_STRING: cG9zdGdyZXM6Ly91c2VyOnN1cGVyX3NlY3JldF9wYXNzd29yZEBteS1kYXRhYmFzZS5jbHVzdGVyLWFiY2QudXMtZWFzdC0xLnJkcy5hbWF6b25hd3MuY29tOjU0MzIvbWF0dGVybW9zdD9jb25uZWN0X3RpbWVvdXQ9MTAK\n  MM_SQLSETTINGS_DATASOURCEREPLICAS: cG9zdGdyZXM6Ly91c2VyOnN1cGVyX3NlY3JldF9wYXNzd29yZEBteS1kYXRhYmFzZS5jbHVzdGVyLXJvLWFiY2QudXMtZWFzdC0xLnJkcy5hbWF6b25hd3MuY29tOjU0MzIvbWF0dGVybW9zdD9jb25uZWN0X3RpbWVvdXQ9MTAK\nkind: Secret\nmetadata:\n  name: my-postgres-connection\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Removing API v3 Endpoints\nDESCRIPTION: Mattermost v5.0 removed all API v3 endpoints. They were replaced by API v4 endpoints released on July 16th, 2017. Refer to the Mattermost API documentation for more details.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Running the Mattermost Server\nDESCRIPTION: Runs the Mattermost server. This utilizes the deprecated `mattermost server` command, starting the core application logic and handling client requests.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nmattermost server\n```\n\n----------------------------------------\n\nTITLE: Configure SAML Login Button Color - config.json\nDESCRIPTION: This setting customizes the color of the SAML login button in the Mattermost mobile app for white-labeling purposes. A hex code with a #-sign is required.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"LoginButtonColor\": \"\"\n```\n\n----------------------------------------\n\nTITLE: Listing LDAP Groups with mmctl\nDESCRIPTION: This command lists LDAP groups managed by the Mattermost server. It uses the `mmctl group list-ldap` command and supports global flags such as configuration file path, output format, and TLS security settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_84\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group list-ldap [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group list-ldap\n```\n\n----------------------------------------\n\nTITLE: Starting Jira Plugin Setup Wizard via Slash Command\nDESCRIPTION: This command initiates a wizard to guide users through the Jira plugin configuration. It simplifies the setup process by providing a step-by-step interface.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n/jira setup\n```\n\n----------------------------------------\n\nTITLE: Inviting Users via Slash Command\nDESCRIPTION: These slash commands allow users to invite others to the Mattermost workspace or specific channels. The commands support inviting single or multiple users, user groups, and specifying the target channel. Email-based invites are also supported.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/built-in-slash-commands.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/invite user1\n/invite @user1\n/invite @usergroup\n/invite @user1 @user2\n/invite @user1 ~channel1\n/invite @user1 channel1\n/invite @user1 @user2 ~channel1 ~channel2\n/invite_people {name@domain.com, ...}\n```\n\n----------------------------------------\n\nTITLE: Displaying Websocket with mmctl\nDESCRIPTION: This command is used to display websocket information in a human-readable format. It takes no specific arguments but can be used with inherited flags to modify the output or behavior.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_209\n\nLANGUAGE: sh\nCODE:\n```\nmmctl websocket [flags]\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic Updates - Windows\nDESCRIPTION: Disables automatic updates for the Mattermost desktop app on a per-user basis using the DISABLEAUTOUPDATE parameter. This command requires administrator privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/desktop-msi-installer-and-group-policy-install.rst#_snippet_2\n\nLANGUAGE: Batchfile\nCODE:\n```\nmsiexec /i mattermost-desktop-v5.11.2-x64.msi DISABLEAUTOUPDATE=1\n```\n\n----------------------------------------\n\nTITLE: Resetting mmctl User MFA\nDESCRIPTION: Shows the format for turning off multi-factor authentication (MFA) for a user using mmctl, specifying target users. The example demonstrates resetting MFA for user@example.com.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_188\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user resetmfa [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user resetmfa user@example.com\n```\n\n----------------------------------------\n\nTITLE: Checking Mattermost Version on GitLab Omnibus\nDESCRIPTION: This snippet demonstrates checking the Mattermost version on GitLab Omnibus. It involves navigating to the correct directory, specifying the configuration file location, and running the `mattermost version` command as the `mattermost` user using `chpst`.  The configuration file path `/opt/gitlab/etc/mattermost/env` is crucial for proper execution.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/gitlab/embedded/service/mattermost\nsudo /opt/gitlab/embedded/bin/chpst -e /opt/gitlab/etc/mattermost/env -P -U mattermost:mattermost -u mattermost:mattermost /opt/gitlab/embedded/bin/mattermost version\n```\n\n----------------------------------------\n\nTITLE: Restricting Private Channel Creation Configuration\nDESCRIPTION: This snippet shows the config.json setting used to restrict who can create private channels. Options include all team members, team admins and system admins, and system admins only. This is deprecated and replaced by advanced permissions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n\"RestrictPrivateChannelCreation\": \"all\"\n```\n\n----------------------------------------\n\nTITLE: config.json ExperimentalSettings Modification\nDESCRIPTION: Under ``ExperimentalSettings`` in ``config.json``, ``DisableWakeUpReconnectHandler`` was added to disable the wake-up on reconnect handler. This setting allows customization of the reconnection behavior in Mattermost deployments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\nconfig.json\n```\n\n----------------------------------------\n\nTITLE: Showing an Import Job using mmctl\nDESCRIPTION: This command is used to display information about a specific import job. It requires the import job ID as an argument. The output format can be specified using the `--json` flag inherited from parent commands. Use the `-h` or `--help` flag for command specific help.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_91\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import job show [importJobID] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import job show f3d68qkkm7n8xgsfxwuo498rah\n```\n\n----------------------------------------\n\nTITLE: HTML Badge for Mattermost Academy Training\nDESCRIPTION: This HTML snippet creates a badge that links to the Mattermost Academy introductory training program. It uses an `<a>` tag with styling classes and an `<img>` tag to display the badge image. The badge includes a title and descriptive text to encourage users to learn about Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/academy-platform-overview.rst#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://mattermost.com/pl/mattermost-academy-intro-training\" class=\"mm-badge mm-badge--academy\" target=\"_blank\">\n    <img src=\"../_static/images/badges/academy-callout-image.jpg\" alt=\"\" />\n    <div class=\"mm-badge__copy\">\n      <span class=\"mm-badge__accent-text\">Mattermost Academy</span>\n      <span class=\"mm-badge__title\">Learn about Mattermost</span>\n    </div>\n  </a>\n```\n\n----------------------------------------\n\nTITLE: Mattermost License Secret YAML\nDESCRIPTION: Defines a Kubernetes Secret resource for storing a Mattermost Enterprise license. The `license` key holds the license content.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-mattermost-license\ntype: Opaque\nstringData:\n  license: <LICENSE_FILE_CONTENTS>\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Main Function\nDESCRIPTION: This code snippet showcases a basic Go program with a main function that prints \"Hello, 世界\" to the console. It demonstrates the fundamental structure of a Go application and utilizes the `fmt` package for outputting text.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello, 世界\")\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Mattermost Service Status\nDESCRIPTION: This snippet shows how to check the status of the Mattermost service using `systemctl`. The output will include the location of the `mattermost.service` file, which is needed for further configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl status mattermost.service\n```\n\n----------------------------------------\n\nTITLE: Email Template - 7-Day Notice\nDESCRIPTION: This email template is sent 7 days before scheduled maintenance to inform users of the upcoming downtime. It includes the date, start and end times, and time zone of the maintenance window, as well as contact information for support.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/communicate-scheduled-maintenance.rst#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nDear Mattermost Users,\n\nThis is a notification that our Mattermost server will undergo scheduled \nmaintenance on [Date] from [Start Time] to [End Time] [Time Zone]. \nDuring this time, the Mattermost instance will be unavailable.\n\nWe apologize for any inconvenience this may cause and appreciate your \nunderstanding as we work to improve our service.\n\nIf you have any questions or concerns, please contact our \nsupport team at [Support Email].\n\nThank you for your cooperation.\n\nBest regards,\n[Your Name]\n[Your Position]\n```\n\n----------------------------------------\n\nTITLE: Restoring full-text indexes (migration-assist)\nDESCRIPTION: This command creates the full-text indexes for the Posts and FileInfo tables in the PostgreSQL database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmigration-assist postgres post-migrate \"<POSTGRES_DSN>\"\n```\n\n----------------------------------------\n\nTITLE: Channel Reminder - 1-Day Notice\nDESCRIPTION: This channel message serves as the final reminder of the scheduled maintenance, posted 1 day before the event in relevant Mattermost channels.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/communicate-scheduled-maintenance.rst#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n@all Final reminder: Our Mattermost server will \nundergo scheduled maintenance tomorrow, [Date], \nfrom [Start Time] to [End Time] [Time Zone]. \nThank you for your cooperation.\n```\n\n----------------------------------------\n\nTITLE: Running dbcmp Database Comparison Tool\nDESCRIPTION: This command executes the `dbcmp` tool to compare two databases.  The `--source` and `--target` flags specify the connection strings for the MySQL and PostgreSQL databases, respectively. The `--include` flag restricts the comparison to only the `posts` and `users` tables.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndbcmp --source \"${MYSQL_DSN}\" --target \"${POSTGRES_DSN} \" --include=\"posts,users\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Application Signature on Mac (codesign)\nDESCRIPTION: Verifies the signature of a macOS application using the codesign tool. /path/to/your.app should be replaced with the actual path to the application bundle.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncodesign -dv --verbose=4 /path/to/your.app\n```\n\n----------------------------------------\n\nTITLE: Showing MySQL databases with mmuser\nDESCRIPTION: This code snippet demonstrates how to list the databases accessible to the 'mmuser' in MySQL. By logging in as 'mmuser' and running 'show databases;', you can verify if the user has the necessary privileges to access the 'mattermost' database. If the 'mattermost' database is not listed in the output, the user lacks the required permissions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n+--------------------+\n1 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Accessing config.json value using jq\nDESCRIPTION: Demonstrates how to access a specific value within the Mattermost config.json file using the `jq` command-line JSON processor. This example retrieves the `MessageRetentionDays` value from the `DataRetentionSettings` object. This requires `jq` to be installed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat config/config.json | jq '.DataRetentionSettings.MessageRetentionDays'\n```\n\n----------------------------------------\n\nTITLE: Resetting mmctl Permissions\nDESCRIPTION: Resets the permissions of a specified role to their default settings. It overwrites any custom permission settings that have been applied to the role. The role name must be provided as an argument.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_112\n\nLANGUAGE: sh\nCODE:\n```\nmmctl permissions reset <role_name> [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Reset the permissions of the 'system_read_only_admin' role.\n$ mmctl permissions reset system_read_only_admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Notification Contents Type\nDESCRIPTION: This setting determines the level of detail included in email notifications. It can be set to \"full\" (default) to include the full message contents, or \"generic\" to only include the sender and team name. This affects the privacy and information shared via email.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``\"EmailSettings`` > ``EmailNotificationContentsType````\n```\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``\"full\"``\n```\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``\"generic\"``\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Size - Mattermost\nDESCRIPTION: This setting sets the size of the batches in which posts are read from the database to generate the compliance report.  The default value is 30000 and can only be set in config.json.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Check Listening Ports\nDESCRIPTION: Lists all listening ports on the server to verify that Elasticsearch is listening on the expected ports (9200 and 9300).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnetstat -plnt\n```\n\n----------------------------------------\n\nTITLE: HTML Div for Mattermost Plans Badge\nDESCRIPTION: This HTML snippet creates a div element with the class 'mm-plans-badge'. This class is likely styled using CSS to visually represent the badge. It serves as a container for the badge's content.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/ent-only.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mm-plans-badge\">\n```\n\n----------------------------------------\n\nTITLE: Listing export jobs with mmctl\nDESCRIPTION: This command lists export jobs using mmctl. It provides options for fetching all jobs, specifying a page number, and setting the number of jobs per page. The command requires the mmctl tool to be configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_73\n\nLANGUAGE: sh\nCODE:\n```\n--all            Fetch all export jobs. ``--page`` flag will be ignored if provided\n-h, --help       help for list\n--page int       Page number to fetch for the list of export jobs\n--per-page int   Number of export jobs to be fetched (maximum 200)\n```\n\n----------------------------------------\n\nTITLE: Modifying mmctl Slash Command\nDESCRIPTION: This snippet explains how to modify a slash command using the `mmctl command modify` command.  It requires the command ID and various flags to specify the changes.  The command updates the slash command identified by the ID with the new settings provided via the flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_48\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command modify [commandID] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command modify commandID --title MyModifiedCommand --description \"My Modified Command Description\" --trigger-word mycommand --url http://localhost:8000/my-slash-handler --creator myusername --response-username my-bot-username --icon http://localhost:8000/my-slash-handler-bot-icon.png --autocomplete --post\n```\n\n----------------------------------------\n\nTITLE: Add BannerInfo Column to Channels Table - PostgreSQL\nDESCRIPTION: This SQL snippet adds the `BannerInfo` column to the `Channels` table in PostgreSQL if it doesn't already exist. This column is used to store metadata for a licensed feature. The operation is designed to be backwards-compatible, non-locking, and allow for zero downtime.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE channels ADD COLUMN IF NOT EXISTS bannerinfo jsonb;\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed Resources in Mattermost Desktop (Array)\nDESCRIPTION: Configures managed resources by adding their paths to the `managedResources` field. These resources are services available on the same hostname and protocol as the Mattermost server, and they open as pop-up windows in the desktop app. This also requires configuring the Managed Resource Paths server configuration setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/distribute-a-custom-desktop-app.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[...]\n    managedResources: ['trusted', 'video'],\n  [...]\n```\n\n----------------------------------------\n\nTITLE: mmctl auth current command\nDESCRIPTION: This command displays the currently stored user credentials. It shows the username and instance URL for the active session.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth current [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth current\n```\n\n----------------------------------------\n\nTITLE: SMTP Username Setting - Environment Variable\nDESCRIPTION: This snippet displays the environment variable used for setting the SMTP server username. String input is expected. This environment variable overrides the value in the `config.json` file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\n``MM_EMAILSETTINGS_SMTPUSERNAME``\n```\n\n----------------------------------------\n\nTITLE: Listing Team Groups with mmctl\nDESCRIPTION: This step describes how to list the groups associated to the team using the mmctl command-line tool. Use the `mmctl group team list` command to list teams associated to the group.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap-groups-synchronization.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group team list\n```\n\n----------------------------------------\n\nTITLE: Executing Webhook Command\nDESCRIPTION: This snippet shows the basic structure of the `mmctl webhook` command. It serves as the parent command for all webhook-related operations such as create, delete, list, modify and show.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_198\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help       help for webhook\n```\n\n----------------------------------------\n\nTITLE: Creating Full-Text Indexes with substring in PostgreSQL\nDESCRIPTION: This SQL command creates a full-text index on the `fileinfo` table using a substring of the `content` column. It handles the case where the content exceeds the maximum length allowed for `tsvector` by truncating the string before indexing, using a substring of the first 1000000 characters.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX IF NOT EXISTS idx_fileinfo_content_txt ON public.fileinfo USING gin(to_tsvector('english', substring(content,0,1000000)));\n```\n\n----------------------------------------\n\nTITLE: Selecting user messages with date and time filters\nDESCRIPTION: This SQL query selects messages for a specific user within a specified date and time range from the Mattermost database.  It filters the messages based on the `CreateAt` column, which stores timestamps in Unix Epoch format.  The username 'username' should be replaced with the actual username, and the epoch times 1530405832000 and 1532997832000 should be replaced with the start and end dates in epoch format.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/electronic-discovery.rst#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM mattermost.Posts WHERE UserId = (SELECT Id FROM mattermost.Users WHERE Username = 'username' AND CreateAt > 1530405832000 AND CreateAt < 1532997832000);\n```\n\n----------------------------------------\n\nTITLE: Restart Mattermost Service on Ubuntu 14.04 and RHEL 6\nDESCRIPTION: This command restarts the Mattermost service on older systems using the `restart` command.  It requires `sudo` privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/certificate-based-authentication.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo restart mattermost\n```\n\n----------------------------------------\n\nTITLE: Removing Mattermost Desktop App via Snap (Linux)\nDESCRIPTION: This command removes the Mattermost desktop application installed via Snap on Linux. It requires root privileges to execute, so the `sudo` prefix is needed.  It is a simple one-line command to uninstall the application.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/desktop-troubleshooting.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap remove mattermost-desktop\n```\n\n----------------------------------------\n\nTITLE: Display Mattermost Academy Training Banner\nDESCRIPTION: This HTML snippet creates a banner that links to the Mattermost Academy channels training page. It includes an image, title, and descriptive text. The banner is designed to be visually appealing and informative, encouraging users to learn more about Mattermost channels.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/academy-channels.rst#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://mattermost.com/pl/mattermost-academy-channels-training\" class=\"mm-badge mm-badge--academy\" target=\"_blank\">\n    <img src=\"../_static/images/badges/academy-callout-image.jpg\" alt=\"\" />\n    <div class=\"mm-badge__copy\">\n      <span class=\"mm-badge__accent-text\">Mattermost Academy</span>\n      <span class=\"mm-badge__title\">Learn about Mattermost channels</span>\n    </div>\n  </a>\n```\n\n----------------------------------------\n\nTITLE: Count invalid Unicode occurrences - PostgreSQL\nDESCRIPTION: This SQL statement counts the number of rows in a specified table where a specified column contains the invalid Unicode character '\\u0000'. Replace `TableName` and `ColumnName` with the actual table and column names identified in the error message. This helps in identifying the scope of the problem before attempting to fix the data.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/prepare-to-upgrade-mattermost.rst#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM TableName WHERE ColumnName LIKE '%\\u0000%';\n```\n\n----------------------------------------\n\nTITLE: Executing Sandbox Permission Fix for Linux\nDESCRIPTION: This snippet demonstrates the command required to manually adjust sandbox permissions on some Linux distributions where apps fail to open links in the browser. It addresses an issue related to Electron's sandbox setting, requiring user intervention for the tgz installer package. The command modifies the permissions of the chrome-sandbox executable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/desktop-app-changelog.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ chmod 4755 <installpath>/chrome-sandbox\n```\n\n----------------------------------------\n\nTITLE: Adding EnvironmentFile to systemd service (text)\nDESCRIPTION: Adds the EnvironmentFile directive to the mattermost.service file. This instructs systemd to load environment variables from the specified file before starting the Mattermost process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/configuration-in-your-database.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nEnvironmentFile=/opt/mattermost/config/mattermost.environment\n```\n\n----------------------------------------\n\nTITLE: Mattermost service status output after DB TLS\nDESCRIPTION: This is sample output from `systemctl status mattermost` command after restarting the Mattermost service with TLS enabled for the database connection. The command line in the output shows the `DataSource` parameter including the `tls=skip-verify` setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n● mattermost.service - Mattermost\n   Loaded: loaded (/lib/systemd/system/mattermost.service; static; vendor preset: enabled)\n   Active: active (running) since Fri 2019-10-18 16:47:08 UTC; 3s ago\n  Process: 3424 ExecStartPre=/opt/mattermost/bin/pre_start.sh (code=exited, status=0/SUCCESS)\n Main PID: 3443 (mattermost)\n   Tasks: 20 (limit: 2361)\n  CGroup: /system.slice/mattermost.service\n          ├─3443 /opt/mattermost/bin/mattermost --config=mysql://mmuser:sad09zusaopdhsad123@tcp(10.10.250.148:3306)/mattermost?charset=utf8mb4,utf8&writeTimeout=30s&tls=skip-verify\n          └─3459 plugins/com.mattermost.nps/server/dist/plugin-linux-amd64\n\nOct 18 16:47:08 transport-encryption-mattermost1 mattermost[3443]: {\"level\":\"debug\",\"ts\":1571417228.8637397,\"caller\":\"scheduler/worker.go:36\",\"msg\":\"Worker started\",\"worker\":\"Plugins\"}\nOct 18 16:47:08 transport-encryption-mattermost1 mattermost[3443]: {\"level\":\"debug\",\"ts\":1571417228.8639545,\"caller\":\"jobs/jobs_watcher.go:38\",\"msg\":\"Watcher Started\"}\nOct 18 16:47:08 transport-encryption-mattermost1 mattermost[3443]: {\"level\":\"info\",\"ts\":1571417228.8641603,\"caller\":\"jobs/schedulers.go:72\",\"msg\":\"Starting schedulers.\"}\nOct 18 16:47:08 transport-encryption-mattermost1 mattermost[3443]: {\"level\":\"debug\",\"ts\":1571417228.8645394,\"caller\":\"app/web_hub.go:436\",\"msg\":\"Hub for index 0 is starting with goroutine 3923\"}\nOct 18 16:47:08 transport-encryption-mattermost1 mattermost[3443]: {\"level\":\"debug\",\"ts\":1571417228.8648505,\"caller\":\"app/web_hub.go:436\",\"msg\":\"Hub for index 1 is starting with goroutine 3924\"}\nOct 18 16:47:08 transport-encryption-mattermost1 mattermost[3443]: {\"level\":\"debug\",\"ts\":1571417228.8656101,\"caller\":\"web/static.go:31\",\"msg\":\"Using client directory at /opt/mattermost/client\"}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Scheme Object - JavaScript\nDESCRIPTION: This code snippet defines a custom scheme object for Mattermost bulk import. It specifies the scheme's name, display name, description, scope (team or channel), and default roles for team and channel admins/users.  It sets the stage for customizing access control within Mattermost teams and channels.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"scheme\",\n  \"scheme\": {\n    \"name\": \"custom_scheme_name\",\n    \"display_name\": \"Custom Scheme Name\",\n    \"description\": \"This is a custom override scheme.\",\n    \"scope\": \"team\",\n    \"default_team_admin_role\": {\n      \"name\": \"custom_scheme_team_admin_role\",\n      \"display_name\": \"Custom Scheme Team Admin Role\",\n      \"description\": \"This is the default team admin role for the custom scheme.\",\n      \"permissions\": [\"add_user_to_team\", \"manage_team_roles\"]\n    },\n    \"default_team_user_role\": {\n      \"name\": \"custom_scheme_team_user_role\",\n      \"display_name\": \"Custom Scheme Team User Role\",\n      \"description\": \"This is the default team user role for the custom scheme.\",\n      \"permissions\": [\"create_public_channel\", \"create_private_channel\"]\n    },\n    \"default_channel_admin_role\": {\n      \"name\": \"custom_scheme_channel_admin_role\",\n      \"display_name\": \"Custom Scheme Channel Admin Role\",\n      \"description\": \"This is the default channel admin role for the custom scheme.\",\n      \"permissions\": [\"manage_private_channel_members\", \"manage_channel_roles\"]\n    },\n    \"default_channel_user_role\": {\n      \"name\": \"custom_scheme_channel_user_role\",\n      \"display_name\": \"Custom Scheme Channel User Role\",\n      \"description\": \"This is the default channel user role for the custom scheme.\",\n      \"permissions\": [\"manage_public_channel_members\", \"manage_public_channel_properties\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Access Key ID\nDESCRIPTION: This snippet shows the config.json setting and environment variable for configuring the Amazon S3 Access Key ID.  The access key is used for authentication with the S3 service. This is required unless using an Amazon S3 IAM Role.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.AmazonS3AccessKeyId\",\n```\n\n----------------------------------------\n\nTITLE: Grant Write Permissions to Mattermost Group (chmod)\nDESCRIPTION: Grants the 'mattermost' group write permissions to the Mattermost application folder using the chmod command.  This allows the Mattermost server to write to its own files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo chmod -R g+w /opt/mattermost\n```\n\n----------------------------------------\n\nTITLE: config.json Example: EnableOutgoingWebhooks\nDESCRIPTION: This snippet shows the config.json setting for enabling or disabling outgoing webhooks. Outgoing webhooks trigger new message events to external integrations. Disabling outgoing webhooks can improve server performance by reducing network traffic and server load.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/integrations-configuration-settings.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"EnableOutgoingWebhooks\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Reply-To Address\nDESCRIPTION: This setting specifies the email address used in the reply-to header of notification emails sent from Mattermost.  This address should be monitored by a system admin. The default is test@example.com.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``.EmailSettings.ReplyToAddress``\n```\n\n----------------------------------------\n\nTITLE: Disable Post Metadata in config.json\nDESCRIPTION: This setting disables post metadata, potentially improving channel and post load times. Setting this to `true` disables post metadata. This corresponds to `\"DisablePostMetadata\": false` with options `true` and `false`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n\"DisablePostMetadata\": false\n```\n\n----------------------------------------\n\nTITLE: Mattermost DataSource value with TLS skip-verify\nDESCRIPTION: This shows how to modify the `DataSource` setting in the Mattermost `config.json` file to enable TLS encryption to the MySQL database, specifically using the `skip-verify` option, which is suitable for self-signed certificates. It appends `&tls=skip-verify` to the connection string.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n\"DataSource\": \"mmuser:sad09zusaopdhsad123@tcp(10.10.250.148:3306)/mattermost?charset=utf8mb4,utf8\\u0026writeTimeout=30s&tls=skip-verify\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with mmctl\nDESCRIPTION: This command authenticates the mmctl tool with a Mattermost instance.  It requires the address of the instance as a parameter.  Successful execution allows subsequent mmctl commands to be executed against the specified Mattermost instance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmmctl auth login https://localinstance.company.com\n```\n\n----------------------------------------\n\nTITLE: Example JSON Content for User Migration\nDESCRIPTION: The following JSON code block shows the format for a JSON file containing user details for migrating accounts to SAML.  It includes the user's email and corresponding username in the SAML service provider.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_177\n\nLANGUAGE: javascript\nCODE:\n```\n{\n            \"usr1@email.com\": \"usr.one\",\n            \"usr2@email.com\": \"usr.two\"\n         }\n```\n\n----------------------------------------\n\nTITLE: Uninvite Secure Connection Slash Command - Mattermost\nDESCRIPTION: This slash command removes a secure connection from the current channel based on its `connectionID`. The channel continues to function for local users, and the secure connection may still be invited to other shared channels. It requires a valid `connectionID`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/connected-workspaces.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n/share-channel uninvite --connectionID\n```\n\n----------------------------------------\n\nTITLE: GitHub Subscription Command\nDESCRIPTION: This slash command subscribes a Mattermost channel to notifications when a specific label is applied to issues in a GitHub repository. It uses the `/github subscriptions add` command with the repository name, the `issues` keyword, and the `label` filter.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/github-interoperability.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/github subscriptions add mattermost/mattermost-plugin-github issues,label:\"Severity/Critical\"\n```\n\n----------------------------------------\n\nTITLE: Setting Outbound Proxy Environment Variables (Text)\nDESCRIPTION: This snippet demonstrates setting environment variables to configure an outbound proxy for Mattermost. It shows how to define HTTP_PROXY, HTTPS_PROXY, and NO_PROXY variables, including examples for authenticated proxies. These settings are typically used in a systemd service configuration or similar environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nEnvironment=HTTP_PROXY=http://proxy.example.com:3128\nEnvironment=HTTPS_PROXY=https://proxy.example.com:3128\nEnvironment=NO_PROXY=localhost,127.0.0.1,.internal.example.com\n```\n\n----------------------------------------\n\nTITLE: Channel Make-Private Example (Deprecated)\nDESCRIPTION: Illustrates how to make a channel private using its team and channel name combination. The channel 'mychannel' within the team 'myteam' is made private.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel make-private myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Mattermost Slack Import Example (Deprecated)\nDESCRIPTION: Provides an example of how to use the deprecated `mattermost import slack` command. It shows importing a Slack export zip file into a Mattermost team named `myteam`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nbin/mattermost import slack myteam slack_export.zip\n```\n\n----------------------------------------\n\nTITLE: Mattermost DataSource value in SqlSettings\nDESCRIPTION: This displays the typical format of the DataSource connection string within Mattermost's config.json file, highlighting the information needed to configure the connection to the MySQL database before TLS encryption is configured. The string includes username, password, host, port and database name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n\"DataSource\": \"mmuser:sad09zusaopdhsad123@tcp(10.10.250.148:3306)/mattermost?charset=utf8mb4,utf8\\u0026writeTimeout=30s\",\n```\n\n----------------------------------------\n\nTITLE: Example SSH Key Generation Output\nDESCRIPTION: This text block shows example output from the ssh-keygen command, displaying the steps involved in key generation, including file location and passphrase prompts. It demonstrates the successful creation of the SSH key pair.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/mattermost/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/mattermost/.ssh/id_rsa.\nYour public key has been saved in /home/mattermost/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:redacted mattermost@transport-encryption-mattermost1\n```\n\n----------------------------------------\n\nTITLE: Setting Redirect URL for OAuth App in ServiceNow\nDESCRIPTION: This snippet shows the redirect URL required when creating an OAuth app in ServiceNow.  It needs to be configured in ServiceNow to allow the integration to connect correctly. Replace ``YOUR-MATTERMOST-URL`` with the actual URL of your Mattermost instance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/servicenow-interoperability.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://<YOUR-MATTERMOST-URL>/plugins/mattermost-plugin-servicenow/api/v1/oauth2/complete\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Compliance Exports (bash)\nDESCRIPTION: This code block illustrates the directory structure of compliance exports after Mattermost v10.5.  It shows the parent directory named after the export's start time and timestamps, and the zip files within, named after batch numbers and message timestamps. This structure helps organize and track message data across batches and export periods.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/compliance-export.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncompliance-export-2024-08-13-05h08m-1723105062492-1723109100075\n├── batch001-1723105062492-1723106622163.zip\n├── batch002-1723106622163-1723108196005.zip\n└── batch003-1723108196005-1723109100075.zip\n```\n\n----------------------------------------\n\nTITLE: Channel Modify Example - Public\nDESCRIPTION: Shows how to modify a channel to be public, specifying the channel by its channel ID.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel modify channelId --public\n```\n\n----------------------------------------\n\nTITLE: Installing mmctl with Go (Mattermost < v8.0.0)\nDESCRIPTION: Installs the mmctl tool using `go install`. This command is for Mattermost versions older than 8.0.0. It retrieves the mmctl source code from the dedicated mmctl repository and installs the binary. Requires a correctly configured Go environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# For Mattermost versions < v8.0.0\ngo install github.com/mattermost/mmctl@latest\n```\n\n----------------------------------------\n\nTITLE: HTML Note Badge\nDESCRIPTION: This snippet defines an HTML div element with classes to render a note badge. It's used to display informational messages within the documentation, particularly regarding deployment availability.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/selfhosted-only.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"mm-badge mm-badge--note\">\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Shell\nDESCRIPTION: This code snippet shows how to access the PostgreSQL shell as the postgres user.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo -u postgres psql\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL: Dropping the teamid column\nDESCRIPTION: This SQL snippet drops the existing teamid column from the threads table in PostgreSQL if it exists. This is a preparatory step for adding the threadteamid column.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE threads DROP COLUMN IF EXISTS teamid;\n```\n\n----------------------------------------\n\nTITLE: Configuring Enable Diagnostics via config.json\nDESCRIPTION: This setting enables or disables the sending of diagnostics and error reports to Mattermost, Inc. It's configured via the config.json file and allows users to control telemetry data sharing. A value of `true` enables sending reports, while `false` disables it.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n\".LogSettings.EnableDiagnostics\": \"\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting by User in config.json\nDESCRIPTION: This snippet shows how to configure rate limiting by user in Mattermost's `config.json` file. Setting `RateLimitSettings.VaryByUser` to `false` disables rate limiting that varies by user authentication token. This setting impacts how API access is rate-limited when rate limiting is enabled.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/rate-limiting-configuration-settings.rst#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\".RateLimitSettings.VaryByUser: false,\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating mmctl against a Mattermost Cloud instance\nDESCRIPTION: This command uses the mmctl tool to authenticate against a Mattermost Cloud instance. It requires the URL of the Cloud instance.  The user will be prompted for their admin username and password, and a connection name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl auth login https://yourdomain.cloud.mattermost.com\n```\n\n----------------------------------------\n\nTITLE: mmctl Job List Usage\nDESCRIPTION: This snippet shows the usage of the `mmctl job list` command to list the latest jobs. It supports filtering jobs by IDs, type, and status, as well as pagination options.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_99\n\nLANGUAGE: sh\nCODE:\n```\nmmctl job list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\njob list\n job list --ids jobID1,jobID2\n job list --type ldap_sync --status success\n job list --type ldap_sync --status success --page 0 --per-page 10\n```\n\n----------------------------------------\n\nTITLE: Skip Certificate Verification - Environment Variable\nDESCRIPTION: This snippet shows the environment variable that configures whether Mattermost skips the email server certificate verification. If set to `true`, Mattermost skips verification. It overrides the `config.json` setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\n``MM_EMAILSETTINGS_SKIPSERVERCERTIFICATEVERIFICATION``\n```\n\n----------------------------------------\n\nTITLE: Migrating configuration using mmctl (sh)\nDESCRIPTION: Uses the mmctl config migrate command to migrate the configuration from the config.json file to the database.  Requires the path to config.json and the database connection string as parameters.  The --local flag enables local mode.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/configuration-in-your-database.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n.bin/mmctl mmctl config migrate path/to/config.json \"postgres://mmuser:mostest@localhost:5432/mattermost_test?sslmode=disable&connect_timeout=10\" --local\n```\n\n----------------------------------------\n\nTITLE: Example Mattermost Service Status Output\nDESCRIPTION: This text block is example output from `systemctl status mattermost.service`. It confirms the Mattermost service is running, and shows it has executed the pre_start.sh script successfully.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n● mattermost.service - Mattermost\n     Loaded: loaded (/lib/systemd/system/mattermost.service; static; vendor preset: enabled)\n     Active: active (running) since Fri 2019-10-04 19:44:20 UTC; 5min ago\n    Process: 16734 ExecStartPre=/opt/mattermost/bin/pre_start.sh (code=exited, status=0/SUCCESS)\n```\n\n----------------------------------------\n\nTITLE: Listing Channel Groups with mmctl\nDESCRIPTION: This step describes how to list the groups associated to the channel using the mmctl command-line tool. Use the `mmctl group channel list` command to list channels associated to the group.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ad-ldap-groups-synchronization.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group channel list\n```\n\n----------------------------------------\n\nTITLE: Enable Shared Channels in config.json\nDESCRIPTION: This experimental setting (deprecated in November 16th, 2024 release) enabled secure connections between Mattermost instances for shared channels. Setting this to `true` allowed system admins to establish these connections.  This corresponds to `\"ExperimentalSettings.EnableSharedChannels\": false` with options `true` and `false`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalSettings.EnableSharedChannels\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Reactions Limits in config.json\nDESCRIPTION: This snippet describes the addition of  `DefaultUniqueReactionsPerPost` and `MaxUniqueReactionsPerPost` under `ServiceSettings` in `config.json`. These settings are introduced to address issues related to invalid reactions and to establish a default limit on the number of reactions allowed per post.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\nUnder ``ServiceSettings`` in ``config.json``:\n    - Added ``DefaultUniqueReactionsPerPost`` and ``MaxUniqueReactionsPerPost`` to fix an issue where invalid reactions could be added to posts and to add a default limit for the number of reactions per post.\n```\n\n----------------------------------------\n\nTITLE: Checking Replication Status of OpenSearch Indices in Shell\nDESCRIPTION: These commands check the status of replication for specific OpenSearch indices using curl.  They require authentication and query the '_status' endpoint of the replication plugin.  The response indicates the current status (e.g., SYNCING) and other relevant details.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/channels/_status?pretty'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/files/_status?pretty'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/users/_status?pretty'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/posts_<DATE>/_status?pretty'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -u '<USERNAME>:<PASSWORD>'  'https://<HOSTNAME>/_plugins/_replication/posts_<DATE>/_status?pretty'\n```\n\n----------------------------------------\n\nTITLE: Setting Supported Timezones Path in config.json\nDESCRIPTION: This configuration setting (removed in April 16, 2019 release) specified the path to the JSON file listing supported timezones when `ExperimentalTimezone` was set to `true`. The file had to be in the same directory as `config.json` for relative paths. It corresponds to the `\"SupportedTimezonesPath\": \"timezones.json\"` setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n\"SupportedTimezonesPath\": \"timezones.json\"\n```\n\n----------------------------------------\n\nTITLE: Setting CAP_NET_BIND_SERVICE for Mattermost\nDESCRIPTION: This command activates the CAP_NET_BIND_SERVICE capability, allowing the Mattermost server to bind to low ports (like 443 for HTTPS). This is necessary when configuring TLS directly on the Mattermost server.  The command uses sudo to execute setcap with root privileges, ensuring proper permissions to modify file capabilities.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-tls.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo setcap cap_net_bind_service=+ep /opt/mattermost/bin/mattermost\n```\n\n----------------------------------------\n\nTITLE: HTML Badge Link to Mattermost Academy\nDESCRIPTION: This HTML snippet creates a badge that links to the Mattermost Academy customization training page. It includes an image and text to attract users to the training resources. The badge is designed to visually stand out on the page.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/academy-customize-ui.rst#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://mattermost.com/pl/mattermost-academy-customization-training\" class=\"mm-badge mm-badge--academy\" target=\"_blank\">\n    <img src=\"../_static/images/badges/academy-callout-image.jpg\" alt=\"\" />\n    <div class=\"mm-badge__copy\">\n      <span class=\"mm-badge__accent-text\">Mattermost Academy</span>\n      <span class=\"mm-badge__title\">Learn what you can customize</span>\n    </div>\n  </a>\n```\n\n----------------------------------------\n\nTITLE: HTML Academy Badge\nDESCRIPTION: This HTML snippet defines a Mattermost Academy badge using a link and an image. The badge links to a Mattermost Academy course on multi-LLM setup and usage. The snippet uses Mattermost-specific CSS classes for styling the badge.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/academy-calls.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://academy.mattermost.com/p/new-mattermost-copilot-multi-llm-setup-usage\" class=\"mm-badge mm-badge--academy\" target=\"_blank\">\n    <img src=\"../_static/images/badges/academy-callout-image.jpg\" alt=\"\" />\n    <div class=\"mm-badge__copy\">\n      <span class=\"mm-badge__accent-text\">Mattermost Academy</span>\n      <span class=\"mm-badge__title\">Learn about Mattermost Calls</span>\n    </div>\n  </a>\n```\n\n----------------------------------------\n\nTITLE: YAML Support Packet Example\nDESCRIPTION: This YAML snippet provides an example of the structure and content of a Mattermost Support Packet. It includes fields such as version, type, generated_at, server_version, server_id, license_id, customer_id, and extras, with plugin version nested under extras. The example demonstrates the expected data types and formatting for each field in the support packet.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/admin/generating-support-packet.rst#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ntype: support-packet\ngenerated_at: 1622569200\nserver_version: 9.1.1\nserver_id: 8fqk9rti13fmpxdd5934a3xsxh\nlicense_id: 3g3pqn8in3brzjkozcn1kdidgr\ncustomer_id: 74cmws7gf3ykpj31car7zahsny\nextras:\n plugin_version: 0.1.0\n```\n\n----------------------------------------\n\nTITLE: Granting privileges to mmuser in MySQL\nDESCRIPTION: This command grants all privileges on the 'mattermost' database to the 'mmuser' user. It must be executed by a user with sufficient privileges, such as root. This ensures that the 'mmuser' has full access to all tables and data within the 'mattermost' database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ngrant all privileges on mattermost.* to 'mmuser'@'%';\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin States via Environment Variable\nDESCRIPTION: This example demonstrates how to configure plugin states using an environment variable. This approach is especially useful for Helm configuration files, allowing all plugins to be configured simultaneously. The example enables the 'com.mattermost.calls' and 'com.mattermost.nps' plugins.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-variables.rst#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nMM_PLUGINSETTINGS_PLUGINSTATES=\"{\\\"com.mattermost.calls\\\":{\\\"Enable\\\":true},\\\"com.mattermost.nps\\\":{\\\"Enable\\\":true}}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Preview Image Width in config.json\nDESCRIPTION: This configuration setting allows you to specify the maximum width of preview images in Mattermost. The value should be a numerical input.  Updating this setting will affect future image previews, but not those already created. It corresponds to the `\"PreviewWidth\": 1024` setting in `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n\"PreviewWidth\": 1024\n```\n\n----------------------------------------\n\nTITLE: Deleting mmctl User Preference\nDESCRIPTION: Shows the format for deleting a user preference using mmctl, specifying category, name, and target users. The example demonstrates deleting the `use_military_time` setting for a user.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_182\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user preference delete --category [category] --name [name] [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n   preference delete --category display_settings --name use_military_time user@example.com\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Mattermost without NGINX\nDESCRIPTION: Stops and removes the containers created during the Mattermost deployment without NGINX, using Docker Compose. Requires the same compose files used during deployment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f docker-compose.yml -f docker-compose.without-nginx.yml down\n```\n\n----------------------------------------\n\nTITLE: Secure Connection Creation Slash Command\nDESCRIPTION: This slash command creates a password-protected AES 256-bit encrypted code blob for a remote Mattermost entity. It requires the `--name`, `--displayname`, and `--password` parameters to define the connection.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/connected-workspaces.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/secure-connection create --name <--displayname> --password\n\nFor example:\n\n/secure-connection create --name AcmeUS --displayname “AcmeUSA” --password examplepassword\n```\n\n----------------------------------------\n\nTITLE: Deprecating TLS 1.0 and 1.1\nDESCRIPTION: Mattermost v5.32 began returning errors when connected to servers deployed with TLS versions 1.0 and 1.1.  System administrators must explicitly add a flag in their commands to continue using these deprecated TLS versions. Upgrade to TLS version 1.2 or higher is recommended.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Generating Legacy Webhook URL via Slash Command\nDESCRIPTION: This command retrieves the legacy webhook URL to a specific channel.  This is used when Mattermost cannot connect to the Jira instance, allowing Jira webhooks to post to a specific channel.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n/jira webhook\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Marketplace Integration Notifications\nDESCRIPTION: This bash script checks for new integrations in the Mattermost Marketplace. It downloads the latest listing, compares it with a locally stored version, and if a new plugin is identified, pushes a notification to a Mattermost channel via an incoming webhook.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/faq-integrations.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nA `bash script <https://gist.github.com/mickmister/543a49584146af18ba5e5f82dd86ea93>`_\n```\n\n----------------------------------------\n\nTITLE: Mattermost API User Retrieval\nDESCRIPTION: This snippet demonstrates how to retrieve user details, including the user ID, using the Mattermost API. It involves making an HTTP GET request to a specific endpoint, replacing the placeholders with the appropriate Mattermost URL and username. The API returns a JSON object containing the user's information.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/user-management-configuration-settings.rst#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://your-mattermost-url/api/v4/users/username/username_here\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate with Default Values - Bash\nDESCRIPTION: This command generates a self-signed certificate using default values for the Common Name (CN) and Subject Alternative Name (SAN). It sets the CN to \"client.com\" and the SAN to include DNS entries for www.client.com and admin.client.com, as well as IP addresses 192.168.1.10 and 10.0.0.234. The `gencert.sh` script is executed with these environment variables.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scripts/generate-certificates/gencert.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCRT_CN=\"client.com\" CRT_SAN=\"DNS.1:www.client.com,DNS.2:admin.client.com,IP.1:192.168.1.10,IP.2:10.0.0.234\" gencert.sh\n```\n\n----------------------------------------\n\nTITLE: Updating mmctl User Username\nDESCRIPTION: Shows the format for changing a user's username using mmctl. It requires the current username and the new username. The example shows how to change 'testuser' to 'newusername'.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_192\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user username [user] [new username] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user username testuser newusername\n```\n\n----------------------------------------\n\nTITLE: Configuring Gossip Encryption in Mattermost\nDESCRIPTION: This snippet shows how to enable experimental gossip encryption within a Mattermost cluster and manually update the encryption key in the Systems table. Requires knowledge of the Mattermost cluster settings and database access.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_54\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE Systems SET Value='<value>' WHERE Name='ClusterEncryptionKey';\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS/SSL Encryption for MySQL - preferred\nDESCRIPTION: This snippet configures Mattermost to use TLS/SSL encryption if the MySQL server advertises it as a possible fallback; unencrypted if it's not advertised. The `tls=preferred` parameter enables this behavior. This configuration uses the database connection string format.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\n\"<mmuser:password>@tcp(hostname or IP:3306)/mattermost_test             ?charset=utf8mb4,utf8&writeTimeout=30s&tls=preferred\"\n```\n\n----------------------------------------\n\nTITLE: Creating PropertyGroups Table (PostgreSQL)\nDESCRIPTION: This SQL snippet creates the `PropertyGroups` table in PostgreSQL if it doesn't already exist. The table stores property group names and their IDs. It includes a unique constraint on the `Name` column to ensure that group names are unique.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS PropertyGroups (\n  ID varchar(26) PRIMARY KEY,\n  Name varchar(64) NOT NULL,\n  UNIQUE(Name)\n);\n```\n\n----------------------------------------\n\nTITLE: Restore File Ownership After Mattermost Upgrade\nDESCRIPTION: These commands restore the original file ownership and permissions after the Mattermost upgrade is complete.  `<OriginalFileOwner>` should be replaced with the original owner of the file, and `<PathToBinaryFile>` with the path to the Mattermost binary. This restores the original permissions for security and operational stability.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/enterprise-install-upgrade.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchown <OriginalFileOwner> <PathToBinaryFile>\nchmod -w <PathToBinaryFile>\n```\n\n----------------------------------------\n\nTITLE: Create Team Type Enum - PostgreSQL\nDESCRIPTION: This SQL command creates a new enum type named `team_type` in PostgreSQL. This enum is used to represent different team types within the Mattermost application. The command was tested on a machine with 8 cores and 16GB RAM and took 4.191 milliseconds to execute.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE team_type AS ENUM ('I', 'O');\n```\n\n----------------------------------------\n\nTITLE: Email Template - 3-Day Notice\nDESCRIPTION: This email template serves as a reminder sent 3 days before the scheduled maintenance. It includes similar information to the 7-day notice but emphasizes that it is a reminder.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/communicate-scheduled-maintenance.rst#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nDear Mattermost Users,\n\nThis is a reminder that our Mattermost server will undergo scheduled \nmaintenance on [Date] from [Start Time] to [End Time] [Time Zone]. \nThe Mattermost instance will be unavailable during this period.\n\nIf you have any questions or concerns, please contact our \nsupport team at [Support Email].\n\nThank you for your cooperation.\n\nBest regards,\n[Your Name]\n[Your Position]\n```\n\n----------------------------------------\n\nTITLE: Mattermost CLI Options\nDESCRIPTION: This snippet displays CLI options for the Mattermost command, specifically regarding configuration file usage and disabling config file watching.  It highlights the default configuration file location and the option to prevent automatic reloading of the config file when changed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n-c, --config {string}           Configuration file to use. (default \"config.json\")\n--disableconfigwatch {boolean}  When true, the config.json file will not be reloaded automatically when another process changes it (default \"false\")\n```\n\n----------------------------------------\n\nTITLE: Version Object Example\nDESCRIPTION: This example shows the structure of the Version object, which must be the first object in the JSONL file and appear only once. The version field indicates the version of the bulk import tool, which is currently 1. This object is mandatory for a valid bulk load file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/bulk-loading-data.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"version\",\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Single Quotes in Database String\nDESCRIPTION: This snippet demonstrates how to escape single quotes within the database connection string for Mattermost. The backslash character (\\) is used to escape the single quote, preventing it from being interpreted as the end of the string.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nMM_CONFIG='mysql://mmuser:it\\'s-a-password!@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8&writeTimeout=30s'\n```\n\n----------------------------------------\n\nTITLE: Adding GPG key (Ubuntu Focal)\nDESCRIPTION: Downloads and adds the new Mattermost package repository GPG public key to the system's trusted keys. This allows apt to verify the authenticity of packages from the Mattermost repository on Ubuntu Focal (20.04 LTS).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL -o- https://deb.packages.mattermost.com/pubkey.gpg | gpg --dearmor | sudo apt-key add\n```\n\n----------------------------------------\n\nTITLE: Fixing Docker Permission Issues on M1 Mac\nDESCRIPTION: Addresses permission issues encountered when deploying Mattermost using Docker on an M1 Mac. It advises re-creating the required directories and setting their permissions. This snippet should be skipped if already done as it can cause the deployment to stop working.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/docker-troubleshooting.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown -R 2000:2000 ./volumes/app/mattermost\n```\n\n----------------------------------------\n\nTITLE: Document Content Extraction Configuration\nDESCRIPTION: This configuration enables or disables the extraction and indexing of document content for searching.  It details the available settings in the System Console, config.json file, and the corresponding environment variable.  The setting defaults to enabled (true), making document contents searchable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_48\n\nLANGUAGE: none\nCODE:\n```\nSystem Config path: Environment > File Storage\nconfig.json setting: \".FileSettings.ExtractContent: true\",\nEnvironment variable: MM_FILESETTINGS_EXTRACTCONTENT\n```\n\n----------------------------------------\n\nTITLE: Create Code Blocks with Indentation - Text\nDESCRIPTION: Shows how to create a code block by indenting each line of the code by four spaces.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n    this is my\n    code block\n```\n\n----------------------------------------\n\nTITLE: Altering Database Collation - MySQL\nDESCRIPTION: This SQL command alters the collation of a MySQL database. It is used to fix collation mismatch errors when upgrading Mattermost. Replace `<YOUR_DB_NAME>` with the actual database name and `'utf8mb4_general_ci'` with the desired collation if needed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\nALTER DATABASE <YOUR_DB_NAME> COLLATE = 'utf8mb4_general_ci';\n```\n\n----------------------------------------\n\nTITLE: Common mmctl inherited options\nDESCRIPTION: These options are inherited from parent mmctl commands and are applicable to various export subcommands.  They control configuration, output formatting, security, and communication settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_76\n\nLANGUAGE: sh\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Management in Mattermost Desktop (Boolean)\nDESCRIPTION: Controls whether users can add, edit, or remove servers on the app settings page. If set to `false`, at least one server must be specified for `defaultTeams` or else users cannot interact with any servers. Expects a boolean value (true or false).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/distribute-a-custom-desktop-app.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nenableServerManagement: true\n```\n\n----------------------------------------\n\nTITLE: Creating PropertyValues Table (MySQL)\nDESCRIPTION: This SQL snippet creates the `PropertyValues` table in MySQL if it doesn't already exist. The table stores property values with associated metadata like target ID, type, group ID, field ID, and timestamps. It includes a unique constraint on `GroupID`, `TargetID`, `FieldID`, and `DeleteAt` to prevent duplicate entries.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS PropertyValues (\n  ID varchar(26) PRIMARY KEY,\n  TargetID varchar(255) NOT NULL,\n  TargetType varchar(255) NOT NULL,\n  GroupID varchar(26) NOT NULL,\n  FieldID varchar(26) NOT NULL,\n  Value json,\n  CreateAt bigint(20),\n  UpdateAt bigint(20),\n  DeleteAt bigint(20),\n  UNIQUE(GroupID, TargetID, FieldID, DeleteAt)\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Old Keyring (Ubuntu Jammy - 22.04 LTS and Ubuntu Noble - 24.04 LTS)\nDESCRIPTION: Deletes the old Mattermost keyring file. This is a necessary step before installing the new key on Ubuntu Jammy and Noble.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm /usr/share/keyrings/mattermost-archive-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Restarting Mattermost Server\nDESCRIPTION: This command restarts the Mattermost server using the Mattermost user account. It is executed from the Mattermost installation directory. This is necessary after applying configuration changes, such as granting database privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u mattermost bin/mattermost\n```\n\n----------------------------------------\n\nTITLE: Dropping MySQL Database\nDESCRIPTION: This SQL command removes a database specified by `{misnamed}`. It needs to be run with root privileges or a user with DROP DATABASE privileges. Use this to correct any accidental misnaming of the database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndrop database {misnamed};\n```\n\n----------------------------------------\n\nTITLE: mmctl User Create Command Format\nDESCRIPTION: Shows the format for the `mmctl user create` command. It takes flags to define user attributes like email, username, and password.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_156\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user create [flags]\n```\n\n----------------------------------------\n\nTITLE: Channel Modify Example - Private\nDESCRIPTION: Demonstrates modifying a channel to be private, specifying the channel using the team and channel name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel modify myteam:mychannel --private\n```\n\n----------------------------------------\n\nTITLE: Update Reactions Table Primary Key - PostgreSQL\nDESCRIPTION: This SQL command drops the existing primary key constraint named `reactions_pkey` from the Reactions table in a PostgreSQL database and creates a new primary key constraint composed of PostId, UserId, and EmojiName. This is a schema migration step required when upgrading Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_59\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE reactions DROP CONSTRAINT reactions_pkey, ADD PRIMARY KEY (PostId, UserId, EmojiName);\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezone Setting Visibility\nDESCRIPTION: This setting determines whether the Timezone setting is visible in the Mattermost Settings. Setting it to \"true\" makes the timezone visible and automatically assigns one in the next active session. Setting it to \"false\" hides the setting. This setting corresponds to the 'ExperimentalTimezone' option in the config.json file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n\"ExperimentalTimezone\": true\n```\n\n----------------------------------------\n\nTITLE: Disabling a Bot with mmctl\nDESCRIPTION: This snippet demonstrates how to disable an existing bot using the `mmctl bot disable` command. It requires the username of the bot to be disabled.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot disable [username] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot disable testbot\n```\n\n----------------------------------------\n\nTITLE: Listing export files with mmctl\nDESCRIPTION: This command lists available export files using mmctl.  The command requires the mmctl tool to be configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_75\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: Import process with bypass upload and local flag\nDESCRIPTION: Fixed an issue where it wasn’t clear that the ``mmctl import process --bypass-upload --local`` doesn't work if the server is in High Availability. This clarifies the usage limitations of the command in specific server configurations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nmmctl import process --bypass-upload --local\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Channel Index Replicas Configuration\nDESCRIPTION: Defines the number of replicas for each channel index in Elasticsearch. Configurable via config.json (Elasticsearchsettings.ChannelIndexReplicas) or the environment variable MM_ELASTICSEARCHSETTINGS_CHANNELINDEXREPLICAS. Default value is 1. This should be n-1, where n is the number of data nodes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_34\n\nLANGUAGE: JSON\nCODE:\n```\n\".Elasticsearchsettings.ChannelIndexReplicas: 1\"\n```\n\n----------------------------------------\n\nTITLE: SMTP Port Setting - Environment Variable\nDESCRIPTION: This snippet displays the environment variable used to configure the SMTP server port in Mattermost. Numerical input is expected. It overrides the `config.json` setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n``MM_EMAILSETTINGS_SMTPPORT``\n```\n\n----------------------------------------\n\nTITLE: Connecting Containers to a Docker Network\nDESCRIPTION: This snippet connects the 'mattermost' and 'nginx' containers to the 'mattermost-network'. This enables the containers to communicate with each other using their container names as hostnames.  The containers and network need to already exist for this to work.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/deploy-containers.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker network connect mattermost-network mattermost\ndocker network connect mattermost-network nginx\n```\n\n----------------------------------------\n\nTITLE: Enabling RunJobs in config.json\nDESCRIPTION: This setting determines whether a Mattermost server handles tasks created by the Scheduler via config.json.  It uses a boolean input (true or false). Should be enabled on one or more servers in a High Availability setup.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n\"RunJobs\": true\n```\n\n----------------------------------------\n\nTITLE: CacheSettings Configuration\nDESCRIPTION: Explains new `CacheSettings` added to the `config.json` file. The settings control the type of cache used (either lru or redis) and the Redis configuration details. Configuration includes `CacheType`, `RedisAddress`, `RedisPassword`, `RedisDB`, and `DisableClientCache`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n``CacheSettings``\n```\n\nLANGUAGE: text\nCODE:\n```\n``CacheType``\n```\n\nLANGUAGE: text\nCODE:\n```\n``RedisAddress``\n```\n\nLANGUAGE: text\nCODE:\n```\n``RedisPassword``\n```\n\nLANGUAGE: text\nCODE:\n```\n``RedisDB``\n```\n\nLANGUAGE: text\nCODE:\n```\n``DisableClientCache``\n```\n\n----------------------------------------\n\nTITLE: Setting Local Mode Socket Location in config.json\nDESCRIPTION: This snippet allows setting the socket location for mmctl local mode connections via config.json.  The server creates a socket at this location for mmctl to connect through local mode. The default is /var/tmp/mattermost_local.socket. Requires string input.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n\"LocalModeSocketLocation\": \"/var/tmp/mattermost_local.socket\"\n```\n\n----------------------------------------\n\nTITLE: Migrating config.json on macOS\nDESCRIPTION: This command copies the config.json file from the old electron-mattermost directory to the new Mattermost directory within the Application Support directory in the user's Library. This is required when the project was renamed from electron-mattermost to desktop.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/desktop-app-changelog.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nditto ~/Library/Application\\ Support/electron-mattermost/config.json ~/Library/Application\\ Support/Mattermost/config.json\n```\n\n----------------------------------------\n\nTITLE: Enforcing secure transport for MySQL connections\nDESCRIPTION: This snippet configures the MySQL server to require secure transport (TLS) for all connections. It adds the line `require_secure_transport = ON` to the MySQL configuration file.  This forces clients to use TLS for connecting to the database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nrequire_secure_transport = ON\n```\n\n----------------------------------------\n\nTITLE: Removing Mattermost Server - Shell\nDESCRIPTION: This command removes the Mattermost Server installation located in the /opt/mattermost directory. It requires sudo privileges. Before running the command, ensure to back up the config, logs, plugins, client/plugins, and data directories.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm /opt/mattermost\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Picture Height in config.json\nDESCRIPTION: This configuration setting (removed in July 16th, 2017 release) allowed you to specify the height to which profile pictures were resized after being uploaded. It corresponds to the `\"ProfileHeight\": 128` setting in `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n\"ProfileHeight\": 128\n```\n\n----------------------------------------\n\nTITLE: Configuring Idle Connection Timeout\nDESCRIPTION: This setting specifies the amount of time, in milliseconds, to leave an idle connection open between servers in the cluster. It can be configured through the config.json setting (\".ClusterSettings.IdleConnTimeoutMilliseconds: 90000,\"). Deprecated after v7.0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n\".ClusterSettings.IdleConnTimeoutMilliseconds: 90000,\"\n```\n\n----------------------------------------\n\nTITLE: Creating block quotes\nDESCRIPTION: This demonstrates how to create a block quote in Mattermost using the `>` character at the beginning of a line.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n> block quotes\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Credentials with mmctl\nDESCRIPTION: This snippet demonstrates the command syntax for setting authentication credentials for a specific server using mmctl. It involves using the `mmctl auth set` command followed by the server name and any applicable flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth set [server name] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth set local-server\n```\n\n----------------------------------------\n\nTITLE: Review Connection Status Slash Command - Mattermost\nDESCRIPTION: This slash command retrieves the current status of all secure connections established for the Mattermost instance. Status details include Connection ID, URL, Description, Invite status, Online status, Last ping timestamp and Deleted status.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/connected-workspaces.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n/secure-connection status\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Audits Table Length Check\nDESCRIPTION: This SQL query checks the length of the 'Action' column in the 'Audits' table to identify rows where the length exceeds 512 characters.  This is necessary because of schema differences where MySQL's text column is replaced with varchar(512) in PostgreSQL.  Rows identified need to be deleted or updated before migration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT FROM mattermost.Audits where LENGTH(Action) > 512;\n```\n\n----------------------------------------\n\nTITLE: Mattermost Dark Theme JSON\nDESCRIPTION: This JSON configures the Mattermost Dark theme with specified color settings for the sidebar, text, channel, and indicators. Copy and paste this into the custom theme settings within Mattermost to apply the dark theme.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"sidebarBg\":\"#1b2c3e\",\n\t\"sidebarText\":\"#ffffff\",\n\t\"sidebarUnreadText\":\"#ffffff\",\n\t\"sidebarTextHoverBg\":\"#4a5664\",\n\t\"sidebarTextActiveBorder\":\"#66b9a7\",\n\t\"sidebarTextActiveColor\":\"#ffffff\",\n\t\"sidebarHeaderBg\":\"#1b2c3e\",\n\t\"sidebarTeamBarBg\":\"#152231\",\n\t\"sidebarHeaderTextColor\":\"#ffffff\",\n\t\"onlineIndicator\":\"#65dcc8\",\n\t\"awayIndicator\":\"#c1b966\",\n\t\"dndIndicator\":\"#e81023\",\n\t\"mentionBg\":\"#b74a4a\",\n\t\"mentionColor\":\"#ffffff\",\n\t\"centerChannelBg\":\"#2f3e4e\",\n\t\"centerChannelColor\":\"#dddddd\",\n\t\"newMessageSeparator\":\"#5de5da\",\n\t\"linkColor\":\"#a4ffeb\",\n\t\"buttonBg\":\"#4cbba4\",\n\t\"buttonColor\":\"#ffffff\",\n\t\"errorTextColor\":\"#ff6461\",\n\t\"mentionHighlightBg\":\"#984063\",\n\t\"mentionHighlightLink\":\"#a4ffeb\",\n\t\"codeTheme\":\"solarized-dark\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Managed Resources Paths in config file\nDESCRIPTION: This code snippet shows how to add managed resource paths to the Mattermost desktop app's configuration file. The `managedResources` array specifies the paths that should be treated as managed resources, allowing them to be opened as pop-up windows within the desktop application. The Mattermost server's `Managed Resource Paths` setting must also be configured.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/desktop-app-managed-resources.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[...]\\nmanagedResources: ['trusted', 'video'],\\n[...]\n```\n\n----------------------------------------\n\nTITLE: Restart Elasticsearch Service\nDESCRIPTION: Restarts the Elasticsearch service, applying any configuration changes that have been made.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/elasticsearch.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Accessing Resources via Slash Commands\nDESCRIPTION: These slash commands provide convenient access to various Mattermost resources, including product documentation, the in-product Marketplace, keyboard shortcuts, settings, and the ability to log out.  They are intended to provide quick access without navigating through the UI.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/built-in-slash-commands.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n/help\n/marketplace\n/shortcuts\n/settings\n/logout\n```\n\n----------------------------------------\n\nTITLE: Installing Pipenv (Homebrew)\nDESCRIPTION: This command installs the `pipenv` package manager using Homebrew, specifically for Mac and Ubuntu VM users with Homebrew installed. Pipenv manages Python package dependencies required for building the documentation.\nSOURCE: https://github.com/mattermost/docs/blob/master/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew install pipenv\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Secret Access Key\nDESCRIPTION: This snippet shows the config.json setting and environment variable for configuring the Amazon S3 Secret Access Key. The secret access key is used along with the access key for authenticating with the S3 service.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.AmazonS3SecretAccessKey\",\n```\n\n----------------------------------------\n\nTITLE: Importing Night Owl Dark Theme\nDESCRIPTION: This JSON snippet defines a custom theme named \"Night Owl Dark\" for Mattermost. To apply, copy the JSON code and paste it into the Mattermost custom theme settings in the 'Copy and paste to share theme colors' field.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"sidebarBg\":\"#011627\",\"sidebarText\":\"#d6deeb\",\"sidebarUnreadText\":\"#d6deeb\",\"sidebarTextHoverBg\":\"#1d3b53\",\"sidebarTextActiveBorder\":\"#ff2c83\",\"sidebarTextActiveColor\":\"#82aaff\",\"sidebarHeaderBg\":\"#1d3b53\",\"sidebarHeaderTextColor\":\"#d6deeb\",\"onlineIndicator\":\"#addb67\",\"awayIndicator\":\"#ffbc42\",\"dndIndicator\":\"#f74343\",\"mentionBg\":\"#d6deeb\",\"mentionBg\":\"#d6deeb\",\"mentionColor\":\"#145dbf\",\"centerChannelBg\":\"#011627\",\"centerChannelColor\":\"#d6deeb\",\"newMessageSeparator\":\"#ff8800\",\"linkColor\":\"#2389d7\",\"buttonBg\":\"#166de0\",\"buttonColor\":\"#011627\",\"errorTextColor\":\"#fd5960\",\"mentionHighlightBg\":\"#0b2942\",\"mentionHighlightLink\":\"#82aaff\",\"codeTheme\":\"solarized-dark\"}\n```\n\n----------------------------------------\n\nTITLE: Creating mmctl Export\nDESCRIPTION: This command creates an export file which includes message attachments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_66\n\nLANGUAGE: sh\nCODE:\n```\nmmctl export create\n```\n\n----------------------------------------\n\nTITLE: Showing mmctl Slash Command\nDESCRIPTION: This snippet illustrates how to display the details of a slash command using the `mmctl command show` command. The command takes the command ID as input. It displays command ID, team ID, trigger word, display name, and creator username.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_50\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command show [commandID] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command show commandID\n```\n\n----------------------------------------\n\nTITLE: CA Certificate Information (Text)\nDESCRIPTION: This represents the textual output when creating the CA certificate, detailing the organization information and email address. It is used to configure information about the CA.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCountry Name: US\nState: Maryland\nLocality Name: Meade\nOrganization Name: Mattermost\nOrganization Unit: Smarttotem\nCommon Name: example.mattermost.com\nEmail Address: admin@mattermost.com\n```\n\n----------------------------------------\n\nTITLE: Ignore Gradle Task (Android)\nDESCRIPTION: This command builds the Android release version of the application while excluding the 'bundleReleaseJsAndAssets' task. This task is skipped due to a known bundling issue. It requires the Gradle wrapper to be executable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/mobile/mobile-troubleshooting.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew assembleRelease -x bundleReleaseJsAndAssets\n```\n\n----------------------------------------\n\nTITLE: Installing Pipenv (Generic)\nDESCRIPTION: This command installs the `pipenv` package manager using pip for operating systems other than Mac/Ubuntu with Homebrew. Pipenv manages Python package dependencies required for building the documentation.\nSOURCE: https://github.com/mattermost/docs/blob/master/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install --user pipenv\n```\n\n----------------------------------------\n\nTITLE: Skip Certificate Verification - config.json Example (Disabled)\nDESCRIPTION: This snippet shows the `config.json` setting to disable SMTP server certificate verification. When set to `false`, Mattermost verifies the email server certificate. Setting it to `true` disables verification.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n``\".EmailSettings.SkipServerCertificateVerification\": false\"``\n```\n\n----------------------------------------\n\nTITLE: SMTP Auth Setting - config.json Example (Disabled)\nDESCRIPTION: This snippet shows an example of how to disable SMTP authentication in the `config.json` file. When set to `false`, Mattermost does not attempt to authenticate with the SMTP server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n``\".EmailSettings.EnableSMTPAuth\": false\"``\n```\n\n----------------------------------------\n\nTITLE: Disabling REST API v3 Endpoints\nDESCRIPTION: This snippet shows the config.json setting used to enable or disable REST API v3 endpoints. Setting this to false will disable all version 3 endpoints of the REST API. This is deprecated and should be migrated to API v4.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"EnableAPIv3\": false\n```\n\n----------------------------------------\n\nTITLE: Configuration Settings in config.json\nDESCRIPTION: This snippet describes the addition of new configuration settings to the `config.json` file for Mattermost. It outlines changes applicable to all plans and specifically to the Enterprise plan, providing context for customizing server behavior.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\nconfig.json\n```\n\n----------------------------------------\n\nTITLE: Configure Mattermost Version for Upgrade\nDESCRIPTION: This configuration snippet shows the key to configure to define the Mattermost version you want to install as a value to upgrade the Mattermost instance. This is set within the AKS cluster configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s-aks.rst#_snippet_2\n\nLANGUAGE: other\nCODE:\n```\nglobal.azure.mattermost.version\n```\n\n----------------------------------------\n\nTITLE: Generating PKCS12 File (OpenSSL)\nDESCRIPTION: This generates a PKCS12 file from the client key and certificate. This file can be imported into client machines to enable client certificate authentication in browsers.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nopenssl pkcs12 -export -out mmuser-mattermost.p12 -inkey mmuser-mattermost.key -in mmuser-mattermost.crt -certfile ca.mattermost.crt\n```\n\n----------------------------------------\n\nTITLE: Executing Call Statistics Slash Command in Mattermost\nDESCRIPTION: Executes the `/call stats` slash command within a Mattermost channel where a call is active. This command returns a JSON object containing call statistics as an ephemeral message. This data can be used to diagnose audio/video issues, such as stuttering or choppy audio.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/make-calls.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/call stats\n```\n\n----------------------------------------\n\nTITLE: Mattermost DB Version Command\nDESCRIPTION: This snippet shows the command for retrieving the most recently applied version number for the Mattermost database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nmattermost db version\n```\n\n----------------------------------------\n\nTITLE: Removing Internet Explorer (IE11) Support\nDESCRIPTION: Mattermost v5.16 removed support for Internet Explorer (IE11). Users are recommended to switch to modern browsers like Chrome, Firefox, Safari, or Edge.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Changing directory permissions (sh)\nDESCRIPTION: Changes the ownership of the Mattermost installation directory to the 'mattermost' user and group. This ensures that the Mattermost process has the necessary permissions to access and modify files within the directory.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/configuration-in-your-database.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown -R mattermost:mattermost /opt/mattermost\n```\n\n----------------------------------------\n\nTITLE: Installing Jira Cloud Instance via Slash Command\nDESCRIPTION: This command is used by a Mattermost system admin to install a Jira Cloud instance using OAuth. Replace `YOUR-JIRA-URL` with your Jira URL. The command initiates a wizard to complete the setup process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/jira instance install cloud-oauth <YOUR-JIRA-URL>\n```\n\n----------------------------------------\n\nTITLE: Environment Variable: MM_TEAMSETTINGS_LOCKTEAMMATENAMEDISPLAY\nDESCRIPTION: This environment variable controls if the users can change the teammate name display. It mirrors the functionality of the `TeamSettings.LockTeammateNameDisplay` option in `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_10\n\nLANGUAGE: environment\nCODE:\n```\nMM_TEAMSETTINGS_LOCKTEAMMATENAMEDISPLAY\n```\n\n----------------------------------------\n\nTITLE: Reconfigure GitLab Omnibus\nDESCRIPTION: This command applies the updated settings after modifying the `/etc/gitlab/gitlab.rb` file. It is necessary to run this command after disabling the built-in Mattermost instance to apply the changes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/enterprise-install-upgrade.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo gitlab-ctl reconfigure\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation\nDESCRIPTION: This command uses `make` to generate HTML files from the reStructuredText source files located in the `source` directory. Only modified files are re-built, making it faster for incremental changes.\nSOURCE: https://github.com/mattermost/docs/blob/master/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Configuring Help Link in Mattermost Desktop (String)\nDESCRIPTION: Sets the URL of the help documentation in the Help > Learn More menu bar item. If the string is empty, the menu option is hidden. Expects a string representing the URL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/distribute-a-custom-desktop-app.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n'https://docs.mattermost.com/messaging/managing-desktop-app-servers.html'\n  helpLink: ''\n```\n\n----------------------------------------\n\nTITLE: Generating a GPG Key on Linux\nDESCRIPTION: Generates a new GPG key using the gpg command. This key can then be used to sign packages.  Requires GnuPG to be installed on the system.  No specific input is required, as it is an interactive process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngpg --full-generate-key\n```\n\n----------------------------------------\n\nTITLE: Listing Available Imports with mmctl\nDESCRIPTION: This command lists the available import files on the destination server using the mmctl tool. It retrieves a list of files that are ready to be imported into the Mattermost instance. The list includes the names of the available import files.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmmctl import list available\n```\n\n----------------------------------------\n\nTITLE: Mention an Entire Channel in Mattermost\nDESCRIPTION: This example shows how to mention all members of a channel using @channel. All channel members will receive a mention notification. Confirmation prompts are displayed for channels with 5+ members. Mentions can be ignored in specific channels via notification preferences.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/mention-people.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n@channel great work on interviews this week. I think we found some excellent potential candidates!\n```\n\n----------------------------------------\n\nTITLE: Listing Teams with mmctl\nDESCRIPTION: Lists all teams on the Mattermost server.  No specific prerequisites beyond a configured mmctl environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_141\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team list\n```\n\n----------------------------------------\n\nTITLE: Move Mattermost Folder to /opt (mv)\nDESCRIPTION: Moves the extracted Mattermost folder to the /opt directory (or a custom path) using the mv command. This places the Mattermost Server files in a designated location.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo mv mattermost /opt\n```\n\n----------------------------------------\n\nTITLE: Silent Uninstall of Mattermost Desktop App (Command)\nDESCRIPTION: This command silently uninstalls the Mattermost desktop application for the current user.  It requires that the Mattermost desktop application is closed before executing this command. The `/currentuser` flag specifies that the application should be uninstalled for the current user only, and the `/S` flag enables silent uninstallation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/silent-windows-desktop-distribution.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n%userprofile%\\AppData\\local\\Programs\\mattermost-desktop\\Uninstall Mattermost.exe /currentuser /S\n```\n\n----------------------------------------\n\nTITLE: Creating Retention IDs Table SQL\nDESCRIPTION: This SQL script creates the `retentionidsfordeletion` table if it doesn't already exist. It includes the `id` as the primary key, `tablename` to identify the table associated with the IDs, and `ids` as an array of IDs.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE\nIF NOT EXISTS\n  retentionidsfordeletion(id\n    VARCHAR(26) PRIMARY KEY,\n    tablename VARCHAR(64),\n    ids VARCHAR(26) []);\nCREATE INDEX\n\nIF NOT EXISTS\n  idx_retentionidsfordeletion_tablename\n  ON retentionidsfordeletion(\n    tablename);\n```\n\n----------------------------------------\n\nTITLE: Moving mmctl Slash Command\nDESCRIPTION: This snippet describes how to move a slash command to a different team using the `mmctl command move` command.  It takes the new team name and the command ID as input.  The command reassigns the specified slash command to the new team.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command move [team] [commandID] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command move newteam commandID\n```\n\n----------------------------------------\n\nTITLE: Removing Open Source Component\nDESCRIPTION: This code snippet shows the removal of the `@rudderstack/rudder-sdk-react-native` component from the Mattermost mobile app repository. This action indicates a change in dependencies or functionality within the application.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mobile-app-changelog.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n``@rudderstack/rudder-sdk-react-native``\n```\n\n----------------------------------------\n\nTITLE: CA Certificate Information (Text)\nDESCRIPTION: This shows the expected output and input prompts when creating the certificate authority. This part of the process captures the details about the authority and the server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npass phrase: capassword\n```\n\n----------------------------------------\n\nTITLE: Handling Interactive Dialogs Payload Validation\nDESCRIPTION: Added a validation step to ensure the payload for an open Interactive Dialog request is valid according to the rules at https://developers.mattermost.com/integrate/plugins/interactive-dialogs/. This ensures the integrity and security of interactive dialog interactions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_6\n\nLANGUAGE: URL\nCODE:\n```\nhttps://developers.mattermost.com/integrate/plugins/interactive-dialogs/\n```\n\n----------------------------------------\n\nTITLE: mmctl User List Command\nDESCRIPTION: This command displays a list of all users and their corresponding IDs within the Mattermost instance.  It requires the mmctl command-line tool to be properly configured and authenticated with the Mattermost server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/user-management-configuration-settings.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user list\n```\n\n----------------------------------------\n\nTITLE: Creating .env File\nDESCRIPTION: Copies the example environment file and renames it to `.env`. This file contains configuration variables for the Mattermost Docker deployment, such as domain, database settings, and TLS configurations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Cloning Documentation Repository\nDESCRIPTION: This command clones the forked documentation repository from GitHub to your local machine. It's the first step to set up the environment for local documentation editing and building.\nSOURCE: https://github.com/mattermost/docs/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/mattermost/docs.git\n```\n\n----------------------------------------\n\nTITLE: Dropping MySQL User\nDESCRIPTION: This SQL command removes the MySQL user `mmuser`. It needs to be executed with root privileges or a user with DROP USER privileges. After dropping the user, `flush privileges` should be run.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ndrop user mmuser;\n```\n\n----------------------------------------\n\nTITLE: Navigating to Build Directory\nDESCRIPTION: This command navigates the terminal to the `build` directory, where the generated HTML files are located. This is required to access and preview the built documentation.\nSOURCE: https://github.com/mattermost/docs/blob/master/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd build\n```\n\n----------------------------------------\n\nTITLE: Actiance Batch Content Example for Compliance Exports (bash)\nDESCRIPTION: This code block illustrates the specific contents of a single batch zip file when using Actiance XML export format. It contains a directory with date and the actiance_export.xml file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/compliance-export.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbatch001-1723105062492-1723106622163.zip\n├── 20240808\n└── actiance_export.xml\n```\n\n----------------------------------------\n\nTITLE: Maximum Payload Size Configuration\nDESCRIPTION: This setting determines the maximum payload size in bytes for all APIs except those that receive a file as input. The default value is 300000 bytes. The setting is configured either via config.json or an environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n\".ServiceSettings.MaximumPayloadSizeBytes: 300000\",\n```\n\n----------------------------------------\n\nTITLE: Create systemd Unit File (touch)\nDESCRIPTION: Creates a systemd unit file for Mattermost using the touch command. This file will define how Mattermost is managed as a system service.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo touch /lib/systemd/system/mattermost.service\n```\n\n----------------------------------------\n\nTITLE: CSR Information for User (Text)\nDESCRIPTION: This shows example output of the information prompted when creating the certificate signing request.  It captures details about the user to be included in the certificate.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nCountry Name: US\nState: Maryland\nLocality Name: Meade\nOrganization Name: Mattermost\nOrganization Unit: Smarttotem\nCommon Name: mmuser\nEmail Address: mmuser@mattermost.com\n\nChallenge password: mmuser-passphrase\n```\n\n----------------------------------------\n\nTITLE: Solarized Dark Theme JSON\nDESCRIPTION: This JSON snippet defines the color settings for the Solarized Dark theme. It includes colors for the sidebar, center channel, links, buttons, and various indicators. Apply this theme by copying and pasting the provided JSON into the custom theme settings in Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-your-theme.rst#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"awayIndicator\":\"#E0B333\",\n\t\"buttonBg\":\"#859900\",\n\t\"buttonColor\":\"#fdf6e3\",\n\t\"centerChannelBg\":\"#073642\",\n\t\"centerChannelColor\":\"#93a1a1\",\n\t\"codeTheme\":\"solarized-dark\",\n\t\"linkColor\":\"#268bd2\",\n\t\"mentionBg\":\"#dc322f\",\n\t\"mentionColor\":\"#ffffff\",\n\t\"mentionHighlightBg\":\"#d33682\",\n\t\"mentionHighlightLink\":\"#268bd2\",\n\t\"newMessageSeparator\":\"#cb4b16\",\n\t\"onlineIndicator\":\"#2AA198\",\n\t\"sidebarBg\":\"#073642\",\n\t\"sidebarHeaderBg\":\"#002B36\",\n\t\"sidebarHeaderTextColor\":\"#FDF6E3\",\n\t\"sidebarText\":\"#FDF6E3\",\n\t\"sidebarTextActiveBorder\":\"#d33682\",\n\t\"sidebarTextActiveColor\":\"#FDF6E3\",\n\t\"sidebarTextHoverBg\":\"#CB4B16\",\n\t\"sidebarUnreadText\":\"#FDF6E3\",\n\t\"errorTextColor\":\"#dc322f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying mmctl User Email\nDESCRIPTION: Shows the format for manually marking a user's email as verified using mmctl. This skips the normal email verification process. The example shows verification of 'user1'.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_194\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user verify [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user verify user1\n```\n\n----------------------------------------\n\nTITLE: Selecting MySQL Users\nDESCRIPTION: This SQL query selects the `User` and `Host` columns from the `mysql.user` table. It displays all the existing users and the hosts they are allowed to connect from. This is used to verify if the `mmuser` has been created correctly with the intended host.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble_mysql.rst#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nselect User, Host from mysql.user;\n```\n\n----------------------------------------\n\nTITLE: Enabling Compliance Reporting - Mattermost\nDESCRIPTION: This setting enables or disables compliance reporting in Mattermost.  Possible values are true and false. It is configured via the System Console, config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Removing Permissions from a Role (mmctl)\nDESCRIPTION: Shows how to remove permissions from an existing role using the mmctl command-line tool.  Requires specifying the role and the permissions to be removed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_111\n\nLANGUAGE: sh\nCODE:\n```\nmmctl permissions remove system_user list_open_teams\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl permissions remove system_manager sysconsole_read_user_management_channels\n```\n\n----------------------------------------\n\nTITLE: Verifying File Limit in RHEL6/Ubuntu 14.04\nDESCRIPTION: This snippet highlights a required configuration setting for older Linux distributions (RHEL6 and Ubuntu 14.04) to increase the maximum number of open files for the Mattermost server.  This setting is defined in the `/etc/init/mattermost.conf` file and is critical for performance under heavy load.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_65\n\nLANGUAGE: text\nCODE:\n```\nlimit nofile 50000 50000\n```\n\n----------------------------------------\n\nTITLE: Mattermost DB Migrate Command\nDESCRIPTION: This snippet demonstrates the command for migrating the Mattermost database schema. It migrates the database schema if there are any unapplied migrations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmattermost db migrate\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies in Docker for Chinese Search (PostgreSQL)\nDESCRIPTION: This snippet installs necessary dependencies inside a Docker container running PostgreSQL for setting up Chinese search. It updates the package list, installs wget, make, and gcc for SCWS, and git and postgresql-server-dev-13 for Zhparser. The specific PostgreSQL version (13) may need to be adjusted based on the container's configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/enabling-chinese-japanese-korean-search.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# 更新本地缓存\napt update\n# 配置 SCWS 时需要的依赖\napt install wget make gcc\n# 配置 Zhparser 时需要的依赖\napt install git postgresql-server-dev-13\n```\n\n----------------------------------------\n\nTITLE: Adding GPG key (Ubuntu Jammy and Noble)\nDESCRIPTION: Downloads and installs the new Mattermost package repository GPG public key to the system's keyring on Ubuntu Jammy (22.04 LTS) and Ubuntu Noble (24.04 LTS), enabling apt to verify the integrity of Mattermost packages.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL -o- https://deb.packages.mattermost.com/pubkey.gpg |  gpg --dearmor | sudo tee /usr/share/keyrings/mattermost-archive-keyring.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Channel Make-Private Command Usage (Deprecated)\nDESCRIPTION: Displays the command format for setting a channel's type to private.  This command is deprecated in favour of mmctl channel modify. Channel can be specified by team and channel name, or by channel ID.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel make-private [channel] [flags]\n```\n\n----------------------------------------\n\nTITLE: Environment Variable: MM_PRIVACYSETTINGS_SHOWEMAILADDRESS\nDESCRIPTION: This environment variable provides an alternative way to control the visibility of email addresses to other users, mirroring the functionality of the `PrivacySettings.ShowEmailAddress` setting in `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_14\n\nLANGUAGE: environment\nCODE:\n```\nMM_PRIVACYSETTINGS_SHOWEMAILADDRESS\n```\n\n----------------------------------------\n\nTITLE: Service Setting: Segment Write Key (config.json)\nDESCRIPTION: This setting allows specifying a Segment.com WRITE_KEY for tracking system behavior. It accepts a string input representing the key.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"SegmentDeveloperKey\": \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Signing Request (OpenSSL)\nDESCRIPTION: This snippet creates a certificate signing request (CSR) for the user's key. The CSR is then signed by the CA to create the user's client certificate.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nopenssl req -new -key mmuser-mattermost.key -out mmuser-mattermost.csr\n```\n\n----------------------------------------\n\nTITLE: Navigating to Documentation Directory\nDESCRIPTION: This command navigates the terminal to the cloned `docs` repository. This is a necessary step to execute subsequent commands related to installing dependencies and building the documentation.\nSOURCE: https://github.com/mattermost/docs/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd docs\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Daemon\nDESCRIPTION: Ensures the Docker daemon is enabled and running, which is a prerequisite for deploying Mattermost using Docker. This command starts and enables the Docker service to run on boot.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/docker-troubleshooting.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable --now docker\n```\n\n----------------------------------------\n\nTITLE: Promoting mmctl User\nDESCRIPTION: Shows the format for promoting a guest user to a regular user using mmctl, specifying target guest users. The example demonstrates promoting guest1 and guest2.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_184\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user promote [guests] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user promote guest1 guest2\n```\n\n----------------------------------------\n\nTITLE: Users and Teams Setting: Enable Team Directory (config.json)\nDESCRIPTION: This setting enables or disables the team directory on the system main page. It's controlled by a boolean value.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"EnableTeamListing\": false\n```\n\n----------------------------------------\n\nTITLE: Copy Default Configuration File (cp)\nDESCRIPTION: Copies the default Mattermost configuration file to create a backup using the cp command. This allows for reverting to the default configuration if needed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsudo cp /opt/mattermost/config/config.json /opt/mattermost/config/config.defaults.json\n```\n\n----------------------------------------\n\nTITLE: Restart NGINX service\nDESCRIPTION: This command restarts the Nginx service to apply any configuration changes. It ensures that the new configuration is loaded and used by the Nginx server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl start nginx\n```\n\n----------------------------------------\n\nTITLE: Install policycoreutils-python-utils (yum)\nDESCRIPTION: Installs the policycoreutils-python-utils package using yum, providing tools like audit2allow for generating custom SELinux policies.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-rhel.rst#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum install -y policycoreutils-python-utils\n```\n\n----------------------------------------\n\nTITLE: Creating Mattermost User\nDESCRIPTION: This SQL snippet creates a database user named \"mmuser\" with a password \"mmuser-password\".  The password should be replaced with a strong, secure password.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/preparations.rst#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER mmuser WITH PASSWORD 'mmuser-password';\n```\n\n----------------------------------------\n\nTITLE: Audit Log Example: Update User Preferences\nDESCRIPTION: This JSON snippet provides an example of an audit log record for a successful user preference update in Mattermost.  It shows how data is structured and populated for a specific event.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/embedded-json-audit-log-schema.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"timestamp\": \"2022-08-17 20:37:52.846 +01:00\",\n    \"event_name\": \"updatePreferences\",\n    \"status\": \"success\",\n    \"actor\": {\n        \"user_id\": \"aw8ehkwaziytzry1qqxi9tsqwh\",\n        \"session_id\": \"kth3jyadc3b1p84kbz6y3o75na\",\n        \"client\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Safari/605.1.15\",\n        \"ip_address\": \"192.168.0.169\"\n    },\n    \"event\": {\n        \"parameters\": {},\n        \"prior_state\": {},\n        \"resulting_state\": {},\n        \"object_type\": \"\"\n    },\n    \"meta\": {\n        \"api_path\": \"/api/v4/users/aw8ehkwaziytzry1qqxi9tsqwh/preferences\",\n        \"cluster_id\": \"8dxdbfx6fpdwtki1z6n8whtkho\"\n    },\n    \"error\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Role Permissions using mmctl\nDESCRIPTION: This command resets the permissions of a specified role to its default set. It leverages the `mmctl` command-line tool, which must be installed and configured to interact with the Mattermost server. The role name is passed as an argument to the `mmctl permissions reset` command.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_11\n\nLANGUAGE: CLI\nCODE:\n```\nmmctl permissions reset [role_name]\n```\n\n----------------------------------------\n\nTITLE: Generating a presigned URL for an mmctl export\nDESCRIPTION: This command generates a presigned URL for a specific export file, allowing it to be downloaded. The filename of the export must be specified.  This URL can then be used to download the export file to a local machine.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl export generate-presigned-url r3kcj8yuwbramdt714doafi3oo_export.zip\n```\n\n----------------------------------------\n\nTITLE: Mattermost Export Schedule Options (Deprecated)\nDESCRIPTION: Lists the available options for the deprecated `mattermost export schedule` command, including `--exportFrom` to specify the export start time and `--timeoutSeconds` to set the export timeout.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n--exportFrom string     Unix timestamp (seconds since epoch, UTC) to export data from.\n--timeoutSeconds string Set how long the export should run for before timing out.\n```\n\n----------------------------------------\n\nTITLE: Counting affected rows in PostgreSQL\nDESCRIPTION: This SQL query for PostgreSQL counts the number of rows in the `oauthaccessdata` table that do not have a corresponding entry in the `preferences` table with matching client ID, user ID, and category 'oauth_app'. This helps assess the impact of an OAuth 2 fix.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\n SELECT count(o.*)                                                                                                                                               \n  FROM oauthaccessdata o                                                                                                                                         \n  WHERE NOT EXISTS (                                                                                                                                             \n     SELECT p.*                                                                                                                                                  \n     FROM preferences p                                                                                                                                          \n     WHERE o.clientid = p.name                                                                                                                                   \n       AND o.userid = p.                                                                                                                                         \n       userid                                                                                                                                                    \n       AND p.category =                                                                                                                                          \n       'oauth_app'                                                                                                                                               \n     );\n```\n\n----------------------------------------\n\nTITLE: Generate Zsh Autocompletion Script\nDESCRIPTION: Generates zsh autocompletion scripts for the mmctl command-line tool. To enable completion, the output must be sourced or added to the ~/.zshrc file. No external dependencies are required other than zsh itself.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_52\n\nLANGUAGE: sh\nCODE:\n```\n. <(mmctl completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Locating Mattermost Service File\nDESCRIPTION: This snippet shows the example output of the `systemctl status mattermost.service` command, demonstrating how to find the path to the `mattermost.service` file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nLoaded: loaded (/lib/systemd/system/mattermost.service; enabled; vendor preset: enabled)\n```\n\n----------------------------------------\n\nTITLE: Rebuild PostgreSQL GIN Index for Full-Text Search (SQL)\nDESCRIPTION: This SQL snippet addresses the issue of full-text search not using indexes when the `default_text_search_config` is not set to `english`. It creates a new GIN index with the correct language setting (e.g., 'spanish'), verifies its functionality, then drops the old index and renames the new one to ensure full-text search leverages the index. It assumes the user is logged in as a superuser or has the appropriate permissions. The target table is `posts`, and the column is `message`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/trouble-postgres.rst#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Create the new index with a new name before dropping the old one\nCREATE INDEX CONCURRENTLY IF NOT EXISTS idx_posts_message_txt_spanish ON posts USING gin(to_tsvector('spanish', message));\n# Check that the new index does work. If it does, drop the old one and rename the new one:\nDROP INDEX CONCURRENTLY IF EXISTS idx_posts_message_txt;\nALTER INDEX idx_posts_message_txt_spanish RENAME TO idx_posts_message_txt;\n```\n\n----------------------------------------\n\nTITLE: mmctl User Create Command Examples\nDESCRIPTION: Example usages of the `mmctl user create` command, including creating a user with required fields, with optional fields, as a system admin and verifying user email.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_157\n\nLANGUAGE: sh\nCODE:\n```\n# You can create a user\n$ mmctl user create --email user@example.com --username userexample --password Password1\n\n# You can define optional fields like first name, last name, and nickname\n$ mmctl user create --email user@example.com --username userexample --password Password1 --firstname User --lastname Example --nickname userex\n\n# You can also create the user as a system sdmin\n$ mmctl user create --email user@example.com --username userexample --password Password1 --system-admin\n\n# You can verify user on creation if you have the correct permissions\n$ mmctl user create --email user@example.com --username userexample --password Password1 --system-admin --email-verified\n```\n\n----------------------------------------\n\nTITLE: Example: Showing a Webhook\nDESCRIPTION: This example demonstrates how to use the `mmctl webhook show` command with a specific webhook ID. It displays the details associated with the webhook 'w16zb5tu3n1zkqo18goqry1je'.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_208\n\nLANGUAGE: sh\nCODE:\n```\nmmctl webhook show w16zb5tu3n1zkqo18goqry1je\n```\n\n----------------------------------------\n\nTITLE: Local Storage Directory Configuration\nDESCRIPTION: Sets the local directory to which files are written when the File Storage system is set to 'local'. The directory must be writable by the Mattermost user and is relative to the Mattermost installation directory. The default value is './data/'. This setting has no effect if the File Storage System is set to 'amazons3'.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.Directory”\n```\n\n----------------------------------------\n\nTITLE: Setting up Mattermost Repository on Ubuntu/Debian\nDESCRIPTION: This command sets up the Mattermost repository on Ubuntu/Debian systems. It downloads and executes a setup script that configures the system to receive Mattermost desktop app updates. The script uses `curl` to fetch the script and `sudo bash` to execute it with elevated privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/linux-desktop-install.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsS -o- https://deb.packages.mattermost.com/setup-repo.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Deleting mmctl Slash Command\nDESCRIPTION: This snippet illustrates how to delete a slash command using the `mmctl command delete` command. The command takes the command ID as input. Note this command is deprecated in favor of archive.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_46\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command delete [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl command delete commandID\n```\n\n----------------------------------------\n\nTITLE: Finding mattermost.service file (sh)\nDESCRIPTION: Uses systemctl status to find the location of the running mattermost.service file. The location is typically shown in the second line of the output.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/configuration-in-your-database.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl status mattermost.service\n```\n\n----------------------------------------\n\nTITLE: Removing Mattermost Data\nDESCRIPTION: Removes all persistent data and settings for the Mattermost Docker deployment by deleting the `volumes` directory. This is a destructive operation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm -rf ./volumes\n```\n\n----------------------------------------\n\nTITLE: PlaybookRunWebhookPayload Struct Definition (Go)\nDESCRIPTION: This code snippet defines the `PlaybookRunWebhookPayload` struct in Go, which is used as the payload for webhooks triggered by playbook run events, such as run start and status update.  The struct contains information about the playbook run, which can be used to integrate with external systems.  The link points to the definition of the struct in the Mattermost Playbooks plugin repository.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/repeatable-processes/work-with-playbooks.rst#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/mattermost/mattermost-plugin-playbooks/blob/b4c8058d8660efe35050bc7eb080e3819c7ab09c/server/app/playbook_run_service.go#L176-L185\n```\n\n----------------------------------------\n\nTITLE: mmctl auth clean command\nDESCRIPTION: This command cleans the credentials associated with a Mattermost instance. It removes the stored authentication information for the specified server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth clean [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl auth clean\n```\n\n----------------------------------------\n\nTITLE: Showing an export job with mmctl\nDESCRIPTION: This command shows a specific export job using mmctl. It takes the export job ID as an argument. The command requires the mmctl tool to be configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_74\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help   help for show\n```\n\n----------------------------------------\n\nTITLE: Configuration Update: Enterprise Plans (config.json)\nDESCRIPTION: This snippet describes the addition of new settings under the `essageExportSettings` section within the `config.json` file related to compliance export functionality in Mattermost Enterprise plans. These settings include options for defining the directory format, path, CLI path, and batch sizes for channel history exports, intended for compliance purposes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"essageExportSettings\": {\n    \"ComplianceExportDirectoryFormat\": \"string\",\n    \"ComplianceExportPath\": \"string\",\n    \"ComplianceExportPathCLI\": \"string\",\n    \"ComplianceExportChannelBatchSizeDefault\": \"integer\",\n    \"ComplianceExportChannelHistoryBatchSizeDefault\": \"integer\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Import with mmctl\nDESCRIPTION: This command initiates the import process for a specified Mattermost export file on the destination server, using the mmctl tool. The name of the export file is provided as a parameter. This command starts the process of importing the data from the export file into the Mattermost instance.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmmctl import process cfuq6q9kkjrqfgnph1pew3db4e_r3kcj8yuwbramdt714doafi3oo_export.zip\n```\n\n----------------------------------------\n\nTITLE: Removing Write Access to Authentication with mmctl\nDESCRIPTION: This command removes write access to the Authentication section of the System Console from all users with the system_user_manager role. It removes the 'sysconsole_write_authentication' permission from the 'system_user_manager' role.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nmmctl permissions remove system_user_manager sysconsole_write_authentication\n```\n\n----------------------------------------\n\nTITLE: Dropping and Adding Primary Key - MySQL\nDESCRIPTION: This SQL command drops the existing primary key on the 'Reactions' table and creates a new primary key constraint using the 'PostId', 'UserId', and 'EmojiName' columns in MySQL. This command is part of a schema upgrade to address emoji reaction performance issues and requires migration during low usage times.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_56\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE Reactions DROP PRIMARY KEY, ADD PRIMARY KEY (PostId, UserId, EmojiName);\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Jira Server/Data Center Instance via Slash Command\nDESCRIPTION: This command is used to uninstall a Jira Server or Data Center instance from Mattermost. Replace `YOUR-JIRA-URL` with the actual Jira URL. This will remove the configured Jira instance from Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/jira-interoperability.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/jira instance uninstall server <YOUR-JIRA-URL>\n```\n\n----------------------------------------\n\nTITLE: Add inline image using markdown\nDESCRIPTION: Demonstrates how to add an inline image to Mattermost messages. The snippet shows the syntax for including an image with alt text and a URL, optionally including hover text.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n![alt text](URL of image \"Hover text\")\n```\n\n----------------------------------------\n\nTITLE: Channel List Example\nDESCRIPTION: Provides an example of listing channels for a specified team named 'myteam'.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel list myteam\n```\n\n----------------------------------------\n\nTITLE: Cluster Log Timeout Configuration\nDESCRIPTION: This setting defines the frequency, in milliseconds, of cluster request time logging for performance monitoring. The default is 2000 milliseconds (2 seconds). The setting is configured either via config.json or an environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n\".ServiceSettings.ClusterLogTimeoutMilliseconds: 2000\",\n```\n\n----------------------------------------\n\nTITLE: Disabling Team Group Constraints with mmctl\nDESCRIPTION: This command disables group constraints in a specified Mattermost team, preventing group-based access control. It uses the `mmctl group team disable` command and requires the team name as an argument, along with optional flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_85\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group team disable [team] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group team disable myteam\n```\n\n----------------------------------------\n\nTITLE: Create Channel Type Enum - PostgreSQL\nDESCRIPTION: This SQL command creates a new enum type named `channel_type` in PostgreSQL. This enum is used to represent different channel types within the Mattermost application. The command was tested on a machine with 8 cores and 16GB RAM and took 14.114 milliseconds to execute.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE channel_type AS ENUM ('P', 'G', 'O', 'D');\n```\n\n----------------------------------------\n\nTITLE: Verifying an RPM Package Signature on Linux\nDESCRIPTION: Verifies the signature of an RPM package using rpm. Requires rpm.  your-package.rpm should be the name of the RPM package to verify.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nrpm --checksig your-package.rpm\n```\n\n----------------------------------------\n\nTITLE: FileSettings Configuration\nDESCRIPTION: Describes the `AmazonS3StorageClass` and `ExportAmazonS3StorageClass` settings under `FileSettings` in `config.json`. These settings, which default to an empty string, allow administrators to configure the storage class for their S3 solution.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n``FileSettings``\n```\n\nLANGUAGE: text\nCODE:\n```\n``AmazonS3StorageClass``\n```\n\nLANGUAGE: text\nCODE:\n```\n``ExportAmazonS3StorageClass``\n```\n\n----------------------------------------\n\nTITLE: Add BannerInfo Column to Channels Table - MySQL\nDESCRIPTION: This SQL snippet adds the `BannerInfo` column to the `Channels` table in MySQL if it doesn't already exist.  It uses a prepared statement to conditionally execute the ALTER TABLE command. This ensures that the column is only added if it's not already present, preventing errors during schema migration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET @preparedStatement = (SELECT IF(\n    NOT EXISTS(\n        SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS\n        WHERE table_name = 'Channels'\n        AND table_schema = DATABASE()\n        AND column_name = 'BannerInfo'\n    ),\n    'ALTER TABLE Channels ADD COLUMN BannerInfo json;',\n    'SELECT 1;'\n));\nPREPARE addColumnIfNotExists FROM @preparedStatement;\nEXECUTE addColumnIfNotExists;\nDEALLOCATE PREPARE addColumnIfNotExists;\n```\n\n----------------------------------------\n\nTITLE: Removing the Mattermost Server - Shell\nDESCRIPTION: Removes the Mattermost Server directory using `sudo rm -rf`. Requires sudo privileges. This will delete all files within the Mattermost installation directory. Backups are strongly encouraged.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm - rf /opt/mattermost\n```\n\n----------------------------------------\n\nTITLE: Listing Import Files with mmctl\nDESCRIPTION: This command lists all import files available. There are no specific flags for this command, but it inherits options from parent commands, such as specifying a configuration file path with `--config` or setting output format with `--json`. Use the `-h` or `--help` flag for command specific help.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_92\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import list\n```\n\n----------------------------------------\n\nTITLE: Remove Secure Connection Slash Command - Mattermost\nDESCRIPTION: This slash command severs the trust relationship between the local Mattermost server and a remote Mattermost server based on its `connectionID`, removing the secure connection from all shared Mattermost channels. It requires a valid `connectionID`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/connected-workspaces.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n/secure-connection remove --connectionID\n```\n\nLANGUAGE: text\nCODE:\n```\n/secure-connection remove --connectionID\n```\n\n----------------------------------------\n\nTITLE: Mattermost service status output\nDESCRIPTION: This is an example output of `systemctl status mattermost` after a successful restart. It indicates that the Mattermost service is active and running. This verifies that the configuration changes have not caused the service to fail.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n● mattermost.service - Mattermost\n   Loaded: loaded (/lib/systemd/system/mattermost.service; static; vendor preset: enabled)\n   Active: active (running) since Mon 2019-10-28 16:45:29 UTC; 1h 15min ago\n   [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile Jailbreak/Root Protection\nDESCRIPTION: This snippet shows how to configure jailbreak/root protection in Mattermost by editing the config.json file.  It prevents access to the app on devices detected as jailbroken or rooted.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_110\n\nLANGUAGE: json\nCODE:\n```\n\".NativeAppSettings.MobileJailbreakProtection\": false\n```\n\n----------------------------------------\n\nTITLE: Showing Export Job Status with mmctl\nDESCRIPTION: This command retrieves and displays the status of a specific Mattermost export job using the mmctl tool. The job ID is provided as a parameter to identify the job.  The output includes details about the job, such as its ID.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmmctl export job show yfrr9ku5i7fjubeshs1ksrknzc\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Display Name\nDESCRIPTION: This setting specifies the display name used for email notifications sent from the Mattermost system. It allows customization of the sender's display name in email clients, helping to identify the source of the notification. The setting is string input and has no default value.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``.EmailSettings.FeedbackName``\n```\n\n----------------------------------------\n\nTITLE: Group Channel Status Command\nDESCRIPTION: Shows the group constraint status for a specified channel. The team and channel are specified in the format `team:channel`. It inherits global options for configuration, output formatting, and security settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_83\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group channel status [team]:[channel] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group channel status myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Finding Invalid JSON Data in MySQL\nDESCRIPTION: This SQL query helps identify rows in a MySQL table where the JSON data is invalid. This is useful for troubleshooting errors during the pgloader process when migrating JSON data to PostgreSQL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration.rst#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM <table_name> WHERE JSON_VALID(<column_name>) = 0;\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch User Index Shards Configuration\nDESCRIPTION: Defines the number of shards for each user index in Elasticsearch. Configurable via config.json (Elasticsearchsettings.UserIndexShards) or the environment variable MM_ELASTICSEARCHSETTINGS_USERINDEXSHARDS. Default value is 1.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_37\n\nLANGUAGE: JSON\nCODE:\n```\n\".Elasticsearchsettings.UserIndexShards: 1\"\n```\n\n----------------------------------------\n\nTITLE: GitLab PKI Chain Path\nDESCRIPTION: Example of setting the GITLAB_PKI_CHAIN_PATH variable in the `.env` file for configuring SSO with GitLab using a self-signed certificate. Requires the path to the `pki_chain.pem` file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n#GITLAB_PKI_CHAIN_PATH=<path_to_your_gitlab_pki>/pki_chain.pem\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Example\nDESCRIPTION: Illustrates the addition of a new query string parameter for the API endpoint to exclude threads not part of the team.  The endpoint is `GET api/v4/users/{user_id:[A-Za-z0-9]+}/teams/{team_id:[A-Za-z0-9]+}/threads`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nGET api/v4/users/{user_id:[A-Za-z0-9]+}/teams/{team_id:[A-Za-z0-9]+}/threads\n```\n\n----------------------------------------\n\nTITLE: Example Mattermost Operator Installation\nDESCRIPTION: Provides an example command to install the Mattermost Operator in the mattermost-operator namespace.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhelm install mattermost-operator mattermost/mattermost-operator -n mattermost-operator\n```\n\n----------------------------------------\n\nTITLE: Clearing System Busy State\nDESCRIPTION: Clears the system busy state, re-enabling non-critical services. This command is used to resume normal operations after a maintenance period or when the system is intentionally placed in a busy state.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_131\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system clearbusy [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system clearbusy\n```\n\n----------------------------------------\n\nTITLE: Configure Delay Channel Autocomplete - config.json\nDESCRIPTION: This setting controls the behavior of channel link autocomplete after typing a tilde (~). Setting to 'true' delays the autocomplete until two or more characters are typed after the tilde.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalSettings.DelayChannelAutocomplete\": false\n```\n\n----------------------------------------\n\nTITLE: Disable Data Refetching on Browser Focus - config.json\nDESCRIPTION: This setting disables re-fetching of channel and channel members when the browser regains focus, potentially improving performance for users with many channels and members. Setting to 'true' disables refetching.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/experimental-configuration-settings.rst#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalSettings.DisableRefetchingOnBrowserFocus\": false\n```\n\n----------------------------------------\n\nTITLE: Adding config.json setting to disable permanent team delete\nDESCRIPTION: Mattermost v5.0 introduced a new `config.json` setting to disable the permanent APIv4 delete team parameter. This setting is off by default for new and existing installs, except those deployed on GitLab Omnibus.  System administrators can enable the API v4 endpoint from the `config.json` file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Mention a User in Mattermost\nDESCRIPTION: This example demonstrates how to mention a specific user in a Mattermost message using the @username syntax. It sends a notification to the mentioned user. The system checks if the user is in the channel/team and prompts to add them if not.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/mention-people.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n@alice how did your interview go with the new candidate?\n```\n\n----------------------------------------\n\nTITLE: Enable Mattermost NGINX configuration (RHEL 8)\nDESCRIPTION: This command creates a symbolic link to enable the Mattermost Nginx configuration file on CentOS/RHEL 8 systems. This enables the Mattermost site configuration for Nginx.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s /etc/nginx/conf.d/mattermost /etc/nginx/conf.d/default.conf\n```\n\n----------------------------------------\n\nTITLE: Dropping and Adding Primary Key - PostgreSQL\nDESCRIPTION: This SQL command drops the existing primary key constraint 'reactions_pkey' on the 'reactions' table and adds a new primary key constraint using 'PostId', 'UserId', and 'EmojiName' columns in PostgreSQL. This command addresses emoji reaction performance issues by updating the schema and needs to be performed during low usage times.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_57\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE reactions DROP CONSTRAINT reactions_pkey, ADD PRIMARY KEY (PostId, UserId, EmojiName);\n```\n\n----------------------------------------\n\nTITLE: API Endpoint: GET /api/v4/hooks/incoming\nDESCRIPTION: Describes the addition of a new request parameter, `include_total_count`, to the `GET /api/v4/hooks/incoming` API endpoint. This parameter allows retrieving the total count of incoming webhooks.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_19\n\nLANGUAGE: HTTP\nCODE:\n```\nAdded a new request parameter ``include_total_count`` to API endpoint ``GET /api/v4/hooks/incoming``.\n```\n\n----------------------------------------\n\nTITLE: Group Channel List Command\nDESCRIPTION: Lists the groups associated with a specified channel. The team and channel are specified in the format `team:channel`. It inherits global options for configuration, output formatting, and security settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_82\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group channel list [team]:[channel] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl group channel list myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Listing available mmctl exports\nDESCRIPTION: This command lists all available exports on the Mattermost server. The output includes the names of the export files. It is necessary to identify the correct export file for download.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl export list\nr3kcj8yuwbramdt714doafi3oo_export.zip\n```\n\n----------------------------------------\n\nTITLE: Extracting the Mattermost Server Tarball - Shell\nDESCRIPTION: Extracts the downloaded Mattermost Server tarball using the `tar` command. Assumes the tarball is in the current directory.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntar -xvzf mattermost*.gz\n```\n\n----------------------------------------\n\nTITLE: Example UFW Status Output\nDESCRIPTION: This text block provides an example output of the `sudo ufw status` command showing the active firewall rules. It confirms the addition of rules to allow SSH connections from specified IP addresses, along with other potentially existing rules.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/transport-encryption.rst#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nRule added\nRule added\nStatus: active\n\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW       10.10.250.10\n8065/tcp                   ALLOW       Anywhere\n22/tcp                     ALLOW       10.10.250.231\n22/tcp                     ALLOW       10.10.250.165\n```\n\n----------------------------------------\n\nTITLE: Removing settings from System Console and Account Settings\nDESCRIPTION: In Mattermost v4.0, settings such as image preview dimensions, profile picture dimensions, image thumbnail dimensions, the font setting, and the teammate name display setting were removed or moved to different locations within the System Console or Account Settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Configuring Compliance Report Directory - Mattermost\nDESCRIPTION: This setting sets the directory where compliance reports are written. The default value is ./data/. It is configured via the System Console, config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Extract Job List Command\nDESCRIPTION: Lists content extraction jobs. It supports filtering by page number and number of jobs per page, and can fetch all export jobs. The command also inherits global options for configuration, output formatting, and security settings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_77\n\nLANGUAGE: sh\nCODE:\n```\nmmctl extract job list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl extract job list\n```\n\n----------------------------------------\n\nTITLE: Fix Flags for MySQL schema check (migration-assist)\nDESCRIPTION: These are flags that can be passed to the migration-assist tool to fix issues found during the MySQL database schema check. These include removing artifacts, fixing Unicode characters, and removing rows with varchar overflow.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n--fix-artifacts               Removes the artifacts from older versions of Mattermost\n--fix-unicode                 Removes the unsupported unicode characters from MySQL tables\n--fix-varchar                 Removes the rows with varchar overflow\n```\n\n----------------------------------------\n\nTITLE: Gantt Chart of Mattermost Releases\nDESCRIPTION: This Mermaid code defines a Gantt chart illustrating the timeline and support periods for various Mattermost releases, including Extended Support Releases (ESRs). It visualizes release dates, end-of-life dates, and the duration of support for each version. The chart helps users plan their upgrades and understand the release cadence.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/release-policy.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    dateFormat  YYYY-MM-DD\n    axisFormat  %b %y\n    tickInterval 2month\n    \n    section 2024\n    v9.7                   :done,  2024-04-16, 2024-07-15\n    v9.8                   :done,  2024-05-15, 2024-08-15\n    v9.9                   :done,  2024-06-16, 2024-09-15\n    v9.10                  :done,  2024-07-16, 2024-10-15\n    v9.11 & Desktop App v5.9 Extended Support :crit,    2024-08-16, 2025-05-15\n    v10.0                  :done,    2024-09-16, 2024-12-15\n    v10.1                  :done,    2024-10-16, 2025-01-15\n    v10.2                  :done,  2024-11-15, 2025-02-15\n    v10.3                  :done,  2024-12-16, 2025-03-15\n\n    section 2025\n    v10.4                  :active,  2025-01-16, 2025-04-15\n    v10.5 & Desktop App v5.11 Extended Support :crit,    2025-02-16, 2025-11-15\n    v10.6                  :active, 2025-03-16, 2025-06-15\n    v10.7                  :active, 2025-04-16, 2025-07-15\n```\n\n----------------------------------------\n\nTITLE: Configuring Idle Connection Timeout Milliseconds\nDESCRIPTION: This snippet shows the environment variable used to configure the idle connection timeout in milliseconds. It is used within the Mattermost cluster settings.  The default value is 90000.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nMM_CLUSTERSETTINGS_IDLECONNTIMEOUTMILLISECONDS\n```\n\n----------------------------------------\n\nTITLE: Importing a Slack Team into Mattermost (Deprecated)\nDESCRIPTION: Imports a team from a Slack export zip file. This command is deprecated in favor of `mmctl import slack`. Requires the team name and the path to the Slack export zip file as arguments.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nmattermost import slack {team} {file}\n```\n\n----------------------------------------\n\nTITLE: Onboarding Announcement Template\nDESCRIPTION: This message template is used to alert users about the migration to Mattermost within their previous messaging system.  It instructs users on how to reset their passwords to access their accounts in the new Mattermost server. The placeholder for the Mattermost URL should be replaced with the actual URL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrating-from-hipchat-to-mattermost.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n@all, we’re moving communications to a new Mattermost server. You can start your new account by going to the [your new location, e.g. ``https://yourcompany.com/mattermost``], selecting **I forgot my password**, and entering the email you used on this system in the Reset Password page to set up new credentials. Your message history and channels should carry over from this system into Mattermost. Any questions? Please let us know.\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Relay Customer Account - Mattermost\nDESCRIPTION: This setting specifies the type of Global Relay customer account. Options are A9/Type 9, A10/Type 10, or Custom. It is configured via the System Console, config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Signature Version\nDESCRIPTION: This snippet shows the config.json setting and environment variable to configure the Amazon S3 signature version. The default is Signature v4. Setting it to true will use Signature v2.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n\".FileSettings.AmazonS3SignV2: false\",\n```\n\n----------------------------------------\n\nTITLE: Create Code Blocks with Backticks - Text\nDESCRIPTION: Shows how to create a code block by enclosing the code within three backticks. This preserves formatting and provides a \"Copy\" option for the code.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n```\nthis is my\ncode block\n```\n```\n\n----------------------------------------\n\nTITLE: Create Headings Using Markdown - Text\nDESCRIPTION: Demonstrates how to create headings of different sizes using the '#' symbol in Markdown. The number of '#' symbols determines the heading level.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n## Large Heading\n### Smaller Heading\n#### Even Smaller Heading\n```\n\n----------------------------------------\n\nTITLE: Checking Auto-Follow Rule Status in OpenSearch with Shell\nDESCRIPTION: This command retrieves the status of auto-follow rules in OpenSearch. It uses curl to make an HTTP request and requires authentication with a username and password.  The expected output is a JSON response showing the status and statistics of the auto-follow rules.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/backup-disaster-recovery.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H 'Content-Type: application/json' -u 'username/password'  'https://<>/_plugins/_replication/autofollow_stats?pretty'\n```\n\n----------------------------------------\n\nTITLE: Channel Delete Example\nDESCRIPTION: Illustrates how to delete a channel named 'mychannel' within the team 'myteam'. Note the requirement for the `Enable API Channel Deletion` configuration setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel delete myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: config.json setting for EnableClientPerformanceDebugging\nDESCRIPTION: This setting enables or disables client-side debugging options for individual users in Mattermost. When enabled, users can access debugging settings under *Settings > Advanced > Debugging*.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_105\n\nLANGUAGE: json\nCODE:\n```\n\".ServiceSettings.EnableClientPerformanceDebugging\": false\n```\n\n----------------------------------------\n\nTITLE: mmctl User Create Options\nDESCRIPTION: Options for the `mmctl user create` command, including flags to disable welcome email, specify email, email verification, first name, guest status, help, last name, locale, nickname, password, system admin status, and username.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_158\n\nLANGUAGE: sh\nCODE:\n```\n--disable-welcome-email   Optional. If supplied, the new user will not receive a welcome email. Defaults to false\n--email string            Required. The email address for the new user account\n--email-verified          Optional. If supplied, the new user will have the email verified. Defaults to false\n--firstname string        Optional. The first name for the new user account\n--guest                   Optional. If supplied, the new user will be a guest. Defaults to false\n-h, --help                help for create\n--lastname string         Optional. The last name for the new user account\n--locale string           Optional. The locale (ex: en, fr) for the new user account\n--nickname string         Optional. The nickname for the new user account\n--password string         Required. The password for the new user account\n--system-admin            Optional. If supplied, the new user will be a system administrator. Defaults to false\n--username string         Required. Username for the new user account\n```\n\n----------------------------------------\n\nTITLE: Showing Mattermost Import Job Status\nDESCRIPTION: This command uses `mmctl` to display the status of a specific import job on the Mattermost server. Replace `<JOB ID>` with the job ID obtained from the `mmctl import list process` command.  The `--json` flag enables error message viewing.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/migrate-from-slack.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmmctl import job show <JOB ID> --json\n```\n\n----------------------------------------\n\nTITLE: Listing Bots with mmctl\nDESCRIPTION: This snippet shows how to list existing bots using the `mmctl bot list` command. Optional flags include `--all` to show all bots, and `--orphaned` to only show orphaned bots.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl bot list\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: ExportAmazonS3UploadPartSizeBytes\nDESCRIPTION: This setting controls the part size used when exporting files to an S3 store, optimizing export performance.  It is located in the FileSettings section of config.json, adjustable via the file or the System Console.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"FileSettings\": {\n    \"ExportAmazonS3UploadPartSizeBytes\": \"<size_in_bytes>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data\nDESCRIPTION: Generates sample data for a Mattermost server. The data can be output to a file or directly imported. The command allows customization of entity counts (users, teams, channels, etc.) and supports profile images. It's useful for testing and demonstration purposes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_130\n\nLANGUAGE: sh\nCODE:\n```\nmmctl sampledata [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n# You can create a sampledata file and store it locally\n$ mmctl sampledata --bulk sampledata-file.jsonl\n\n# Or you can simply print it to the STDOUT\n$ mmctl sampledata --bulk -\n\n# You can customize the amount of entities to create\n$ mmctl sampledata -t 7 -u 20 -g 4\n\n# The sampledata file can be directly imported into the remote server by not specifying a ``--bulk``` flag\n$ mmctl sampledata\n\n# Sample users can be created with profile pictures\n$ mmctl sampledata --profile-images ./images/profiles\n```\n\n----------------------------------------\n\nTITLE: License Remove Command Usage (mmctl)\nDESCRIPTION: Demonstrates how to remove the current Mattermost license using the mmctl command-line tool.  This command reverts the system to Mattermost Team Edition.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_105\n\nLANGUAGE: sh\nCODE:\n```\nmmctl license remove\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: EnableWebHubChannelIteration\nDESCRIPTION: This snippet describes a new configuration setting `ServiceSettings.EnableWebHubChannelIteration` that controls websocket broadcasting performance. Enabling it improves websocket broadcasting performance but negatively impacts performance when users join/leave channels. It is recommended only for deployments with at least 200,000 concurrent users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_10\n\nLANGUAGE: None\nCODE:\n```\nServiceSettings.EnableWebHubChannelIteration\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Server Port - Mattermost\nDESCRIPTION: When using a custom Global Relay customer account type, this setting specifies the SMTP server port that receives the Global Relay EML file. The default port is 25. It is configured via the System Console, config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Create Upload Session Type Enum - PostgreSQL\nDESCRIPTION: This SQL command creates a new enum type named `upload_session_type` in PostgreSQL. This enum is used to represent different upload session types within the Mattermost application. The command was tested on a machine with 8 cores and 16GB RAM and took 4.266 milliseconds to execute.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE upload_session_type AS ENUM ('attachment', 'import');\n```\n\n----------------------------------------\n\nTITLE: Validating mmctl import command\nDESCRIPTION: Improved the message length validation step in the ``mmctl import validate`` command. This ensures the integrity and correctness of imported data by enforcing length constraints.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nmmctl import validate\n```\n\n----------------------------------------\n\nTITLE: GitHub OAuth App Settings\nDESCRIPTION: This snippet describes the settings required when registering an OAuth app in GitHub for the Mattermost integration. It specifies the Application name, Homepage URL, and Authorization callback URL, which are essential for establishing the connection between GitHub and Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/integrate/github-interoperability.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- **Application name**: ``Mattermost GitHub Plugin - <YOUR COMPANY NAME>``\n- **Homepage URL**: ``https://github.com/mattermost/mattermost-plugin-github``\n- **Authorization callback URL**: ``https://YOUR-MATTERMOST-URL.COM/plugins/github/oauth/complete``, replacing ``https://YOUR-MATTERMOST-URL.COM`` with your Mattermost URL. This value must match the Mattermost server URL you use to log in.\n```\n\n----------------------------------------\n\nTITLE: Restricting Public Channel Deletion Configuration\nDESCRIPTION: This snippet shows the config.json setting used to restrict who can delete public channels. Options include all channel members, channel admins, team admins, and system admins, team admins and system admins, and system admins only. This is deprecated and replaced by advanced permissions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n\"RestrictPublicChannelDeletion\": \"all\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Relay SMTP Username - Mattermost\nDESCRIPTION: This setting is the username used to authenticate to the Global Relay SMTP server. It is configured via the System Console, config.json or environment variable.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: config.json setting for Enable Testing Commands\nDESCRIPTION: This setting enables or disables the `/test` slash command. When set to 'true' (default), the command is enabled to load test accounts and data. When set to 'false', the command is disabled. Changes require a server restart. Configured via System Console > Environment > Developer.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_102\n\nLANGUAGE: json\nCODE:\n```\n``.ServiceSettings.EnableTesting\": true``\n```\n\n----------------------------------------\n\nTITLE: Creating custom enum type property_field_type in PostgreSQL\nDESCRIPTION: Creates a custom enum type named `property_field_type` in PostgreSQL if it doesn't already exist. The enum includes values like 'text', 'select', 'multiselect', 'date', 'user', and 'multiuser'. This type is used to define the type of a property field.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n DO $$\n BEGIN\n  IF NOT EXISTS (SELECT 1 FROM pg_type typ\n                      JOIN pg_namespace nsp ON nsp.oid = typ.typnamespace\n                     WHERE nsp.nspname = current_schema()\n                       AND typ.typname = 'property_field_type') THEN\n   CREATE TYPE property_field_type AS ENUM (\n      'text',\n      'select',\n      'multiselect',\n      'date',\n      'user',\n      'multiuser'\n   );\n   END IF;\n  END; $$\n LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Parse LDAP ObjectGUID in Golang\nDESCRIPTION: This code snippet demonstrates how to parse the hexadecimal representation of an Active Directory ObjectGUID (as emitted by the go-ldap library) into a base-10 representation. It iterates through the hexadecimal byte array and prints the integer value of each byte.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-saml-technical.rst#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\t// Example ObjectGUID as hexadecimal byte array with backslashes\n\tobjectGUID := \"\\1e\\bc\\ff\\1e\\a3\\4a\\9d\\4f\\a5\\08\\d4\\d8\\1f\\1f\\58\\73\"\n\n\t// Remove backslashes and convert to a slice of bytes (you'd need to implement this)\n\t// For simplicity, let's assume we have the byte slice directly.\n\t// In reality you would need to decode the hex string into a byte slice.\n\tguidBytes := []byte{30, 188, 255, 30, 163, 74, 157, 79, 165, 8, 212, 216, 31, 31, 88, 115}\n\n\t// Print the base 10 representation of each byte\n\tfmt.Print(\"[\")\n\tfor i, b := range guidBytes {\n\t\tfmt.Print(b)\n\t\tif i < len(guidBytes)-1 {\n\t\t\tfmt.Print(\" \")\n\t\t}\n\t}\n\tfmt.Println(\"]\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure MySQL Authentication Plugin\nDESCRIPTION: This code snippet configures the MySQL server to use the `mysql_native_password` authentication plugin. This is required because MySQL 8.0.4 and later use `caching_sha2_password` by default, which may not be compatible with all applications.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/software-hardware-requirements.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[mysqld]\ndefault-authentication-plugin=mysql_native_password\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: MobileExternalBrowser in config.json\nDESCRIPTION: This snippet shows the 'MobileExternalBrowser' setting within the 'NativeAppSettings' section of the 'config.json' file. It instructs the mobile app to use the external browser for SSO authentication.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"NativeAppSettings\": {\n    \"MobileExternalBrowser\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mattermost Plugin API Time Metric\nDESCRIPTION: Defines a Prometheus metric to track the execution time of plugin API handlers. This is a histogram metric that provides insights into the performance of specific API calls. The metric includes labels for the API name, plugin ID, success status, and 'le' bucket for histogram.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scale/performance-alerting.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n  mattermost_plugin_api_time_bucket{api_name=\"AddUserToChannel\",plugin_id=\"com.mattermost.plugin-incident-response\",success=\"true\",le=\"0.005\"} 0\n  mattermost_plugin_api_time_bucket{api_name=\"AddUserToChannel\",plugin_id=\"com.mattermost.plugin-incident-response\",success=\"true\",le=\"0.01\"} 0\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: EnableDesktopLandingPage in config.json\nDESCRIPTION: This snippet illustrates the 'EnableDesktopLandingPage' setting within the 'ServiceSettings' section of the 'config.json' file. This setting allows the desktop app landing page to be disabled.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ServiceSettings\": {\n    \"EnableDesktopLandingPage\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel List Command Usage\nDESCRIPTION: Shows how to list channels for specific teams with the command `mmctl channel list`. Lists public, private, and archived channels.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel list [teams] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Removing UseNewSAMLLibrary\nDESCRIPTION: The UseNewSAMLLibrary experimental setting has been removed from the ExperimentalSettings section of config.json.  This setting is no longer used and should be removed from existing configurations.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ExperimentalSettings\": {\n    \"UseNewSAMLLibrary\": \"removed\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring a Channel using mmctl\nDESCRIPTION: This command restores a previously deleted channel. It is deprecated in Mattermost Server v5.26 and later, in favor of the `mmctl channel unarchive` command. Channels can be specified using '[team]:[channel]' format or by channel ID.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel restore [channels] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel restore myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Email Template - 1-Day Notice\nDESCRIPTION: This email template is the final reminder, sent 1 day before the maintenance. It reiterates the date, time, and duration of the downtime and is intended to be a last-minute heads-up to users.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/communicate-scheduled-maintenance.rst#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nDear Mattermost Users,\n\nThis is a final reminder that our Mattermost server will undergo scheduled\nmaintenance tomorrow, [Date], from [Start Time] to [End Time] [Time Zone]. \nThe Mattermost instance will be unavailable during this period.\n\nIf you have any questions or concerns, please contact our\nsupport team at [Support Email].\n\nThank you for your cooperation.\n\nBest regards,\n[Your Name]\n[Your Position]\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Footer Mailing Address\nDESCRIPTION: This optional setting allows including the organization's name and mailing address in the footer of email notifications. If not set, nothing will appear in the footer.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``.EmailSettings.FeedbackOrganization``\n```\n\n----------------------------------------\n\nTITLE: mmctl LDAP Idmigrate Usage\nDESCRIPTION: This snippet illustrates the usage of the `mmctl ldap idmigrate` command to migrate the LDAP IdAttribute to a new value. It shows the command syntax and a simple example.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_101\n\nLANGUAGE: sh\nCODE:\n```\nmmctl ldap idmigrate <objectGUID> [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl ldap idmigrate objectGUID\n```\n\n----------------------------------------\n\nTITLE: mmctl User Reset Password Options\nDESCRIPTION: Defines the available options for the mmctl user reset-password command, specifically the help flag (-h).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_187\n\nLANGUAGE: sh\nCODE:\n```\n   -h, --help       help for reset-password\n```\n\n----------------------------------------\n\nTITLE: Channel Archive Example\nDESCRIPTION: Illustrates how to archive a specific channel using its team and channel name combination.  The channel 'mychannel' within the team 'myteam' will be archived.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nmmctl channel archive myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: config.json LogSettings MaxFieldSize Configuration\nDESCRIPTION: This configuration allows administrators to limit the size of log fields during logging. It can be modified in `config.json` or the System Console when available. The default value is set upon install.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"LogSettings\": {\n    \"MaxFieldSize\": \"defaultValue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Post Index Shards Configuration\nDESCRIPTION: Defines the number of shards for each post index in Elasticsearch. Configurable via config.json (Elasticsearchsettings.PostIndexShards) or the environment variable MM_ELASTICSEARCHSETTINGS_POSTINDEXSHARDS. Default value is 1. Changes only affect newly-created indexes; existing indexes require purging and rebuilding.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_33\n\nLANGUAGE: JSON\nCODE:\n```\n\".Elasticsearchsettings.PostIndexShards: 1\"\n```\n\n----------------------------------------\n\nTITLE: Export Amazon S3 Upload Part Size Configuration\nDESCRIPTION: This snippet configures the size, in bytes, of each part in a multi-part export to Amazon S3. The default value is 104857600 (100MB).  The configuration can be set via the config.json file, or environment variable. This setting is not available in the system console.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_65\n\nLANGUAGE: text\nCODE:\n```\nconfig.json setting: \".FileSettings.ExportAmazonS3UploadPartSizeBytes: 104857600\"\n```\n\n----------------------------------------\n\nTITLE: Verifying NGINX Installation\nDESCRIPTION: This snippet shows the expected HTML output when verifying a successful NGINX installation using `curl http://localhost`. It represents the default NGINX welcome page.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n.\n.\n.\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Post Index Replicas Configuration\nDESCRIPTION: Defines the number of replicas for each post index in Elasticsearch. Configurable via config.json (Elasticsearchsettings.PostIndexReplicas), or the environment variable MM_ELASTICSEARCHSETTINGS_POSTINDEXREPLICAS. Default value is 1. Changes only affect newly-created indexes; existing indexes require purging and rebuilding.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_32\n\nLANGUAGE: JSON\nCODE:\n```\n\".Elasticsearchsettings.PostIndexReplicas: 1\"\n```\n\n----------------------------------------\n\nTITLE: Reloading mmctl Configuration\nDESCRIPTION: This command reloads the Mattermost server configuration and applies any new settings. It does not require any specific parameters and updates the server dynamically.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_59\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config reload [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl config reload\n```\n\n----------------------------------------\n\nTITLE: Migrating config.json on Linux\nDESCRIPTION: This command creates a Mattermost directory in the user's .config directory and copies the config.json file from the old electron-mattermost directory to the new Mattermost directory.  This is required when the project was renamed from electron-mattermost to desktop.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/desktop-app-changelog.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p ~/.config/Mattermost && cp ~/.config/electron-mattermost/config.json ~/.config/Mattermost/config.json\n```\n\n----------------------------------------\n\nTITLE: Mattermost DB Downgrade Options\nDESCRIPTION: This snippet displays CLI options for the `mattermost db downgrade` command, specifically regarding downgrade migration plan file selection. It includes an option for selecting an update plan file to run the rollback migrations defined in the plan file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n--<plan-file> string      Runs the rollback migrations defined in the plan file.\n```\n\n----------------------------------------\n\nTITLE: Deletion Job Start Time config.json setting\nDESCRIPTION: Specifies the config.json setting for the data deletion job start time.  The time must be in 24-hour format (HH:MM).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"DeletionJobStartTime\": \"02:00\"\n```\n\n----------------------------------------\n\nTITLE: Signing an Application on Mac\nDESCRIPTION: Signs a macOS application using the codesign tool. Requires Xcode and a Developer ID Application certificate installed in the Keychain. Replace \"Developer ID Application: Your Name (TeamID)\" with the exact name of your certificate and /path/to/your.app with the actual path to the application bundle.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncodesign --deep --force --verify --verbose --sign \"Developer ID Application: Your Name (TeamID)\" /path/to/your.app\n```\n\n----------------------------------------\n\nTITLE: Resetting mmctl User Password\nDESCRIPTION: Shows the format for resetting a user's password using mmctl.  It involves sending an email to reset the password, specifying target users. The example demonstrates resetting the password for user@example.com.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_186\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user reset-password [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user reset-password user@example.com\n```\n\n----------------------------------------\n\nTITLE: Mattermost Export Schedule Example (Deprecated)\nDESCRIPTION: Provides an example of how to use the deprecated `mattermost export schedule` command. It showcases specifying the `exportFrom` option with a Unix timestamp.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nbin/mattermost export schedule --exportFrom=1513102632\n```\n\n----------------------------------------\n\nTITLE: Removing Invalid JSON Values in SQL\nDESCRIPTION: This SQL UPDATE statement removes all occurrences of the invalid JSON character '\\u0000' from a specified column in a table. It uses a regular expression to replace the invalid character with an empty string.  The parameters <table> and <column> should be replaced with the actual table and column names.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_53\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE <table> SET <column> = regexp_replace(<column>, '\\\\u0000', '', 'g') where <column> like '%\\u0000%';\n```\n\n----------------------------------------\n\nTITLE: Configuration Update - CloudSettings Disable - config.json\nDESCRIPTION: Describes the addition of the `Disable` setting under `CloudSettings` in the `config.json` file. When set to `true`, all requests to the Mattermost Customer Portal from a workspace are disabled.  The default value is `false`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CloudSettings\": {\n    \"Disable\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running mmctl End-to-End Tests\nDESCRIPTION: This command executes the end-to-end tests for mmctl. It changes the directory to the server directory and runs the make command with the target test-mmctl-e2e.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake -C server test-mmctl-e2e\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Data Retention Settings\nDESCRIPTION: Introduces configuration settings for data retention, including `MessageRetentionHours` and `FileRetentionHours`. These settings allow setting the global retention time in hours. The `DataRetentionSettings.MessageRetentionDays` and `DataRetentionSettings.FileRetentionDays` settings are deprecated.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nMessageRetentionHours\\nFileRetentionHours\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Field Size via config.json\nDESCRIPTION: This setting allows setting a limit to the size of log fields using the config.json file.  The purpose is to prevent excessive log data. The default value is 2048.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n\".LogSettings.MaxFieldSize\": 2048,\n```\n\n----------------------------------------\n\nTITLE: mmctl Convert Command Options\nDESCRIPTION: This section lists options for the `mmctl convert` command, including email, firstname, help, lastname, locale, nickname, password, system_admin, user, and username. It also shows inherited options like config, disable-pager, insecure-sha1-intermediate, insecure-tls-version, json, local, quiet, strict, and suppress-warnings.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_154\n\nLANGUAGE: sh\nCODE:\n```\n--email string       The email address for the converted user account. Required when the \"bot\" flag is set\n--firstname string   The first name for the converted user account. Required when the \"bot\" flag is set\n-h, --help           help for convert\n--lastname string    The last name for the converted user account. Required when the \"bot\" flag is set\n--locale string      The locale (e.g., EN, FR) for the converted new user account. Required when the \"bot\" flag is set\n--nickname string    The nickname for the converted user account. Required when the \"bot\" flag is set\n--password string    The password for converted new user account. Required when \"user\" flag is set\n--system_admin       If supplied, the converted user will be a system admin. Defaults to false. Required when the \"bot\" flag is set\n--user               If supplied, convert a bot to a user\n--username string    Username for the converted user account. Required when the \"bot\" flag is set\n\n```\n\n----------------------------------------\n\nTITLE: Creating the systemd Unit File - Shell\nDESCRIPTION: Creates the systemd unit file for Mattermost using `sudo touch`. Requires sudo privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-tar.rst#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo touch /lib/systemd/system/mattermost.service\n```\n\n----------------------------------------\n\nTITLE: Generate Mattermost CLI Documentation in Markdown\nDESCRIPTION: Generates full documentation for the Mattermost command line tools in Markdown format. Takes the output directory as an argument. This functionality is related to the deprecated `mattermost help` command.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nmattermost help {outputdir}\n```\n\n----------------------------------------\n\nTITLE: Message Retention Hours config.json setting\nDESCRIPTION: Specifies the config.json setting for message retention hours.  When `MessageRetentionHours` is configured, `MessageRetentionDays` must be set to 0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"MessageRetentionHours\": 1\n```\n\n----------------------------------------\n\nTITLE: Enable Compliance Export config.json setting\nDESCRIPTION: Specifies the config.json setting to enable or disable compliance export. Accepted values are `true` and `false`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"EnableExport\": false\n```\n\n----------------------------------------\n\nTITLE: Status Update Webhook Payload Example (JSON)\nDESCRIPTION: This JSON snippet provides an example of the payload sent for a `status update` webhook.  It demonstrates the structure and data included in the webhook when a playbook run's status is updated, enabling developers to integrate with the status update events and react accordingly. It is available as a Gist.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/repeatable-processes/work-with-playbooks.rst#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nhttps://gist.github.com/icelander/2f9938ad68d1e0aa656f97969895d080\n```\n\n----------------------------------------\n\nTITLE: Altering Incident and Playbook Tables for Migration - SQL\nDESCRIPTION: This SQL snippet alters various columns in the IR_Incident and IR_Playbook tables to varchar(65536) and sets default values. It also modifies the ChecklistsJSON column in IR_Playbook to JSON and creates constraints and indexes, to prepare these tables for migration using pgloader. The scripts use templating ({{ .source_db }}) for database name substitution.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/manual-postgres-migration.rst#_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN MessageOnJoin TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN MessageOnJoin SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedWebhookOnStatusUpdateURLs TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedWebhookOnStatusUpdateURLs SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN CategoryName TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN CategoryName SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedBroadcastChannelIds TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ConcatenatedBroadcastChannelIds SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ChannelIDToRootID TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Incident ALTER COLUMN ChannelIDToRootID SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ReminderMessageTemplate TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ReminderMessageTemplate SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedInvitedUserIDs TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedInvitedUserIDs SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedWebhookOnCreationURLs TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedWebhookOnCreationURLs SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedInvitedGroupIDs TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedInvitedGroupIDs SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN MessageOnJoin TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN MessageOnJoin SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN RetrospectiveTemplate TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN RetrospectiveTemplate SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedWebhookOnStatusUpdateURLs TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedWebhookOnStatusUpdateURLs SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedSignalAnyKeywords TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedSignalAnyKeywords SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN CategoryName TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN CategoryName SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ChecklistsJSON TYPE JSON USING ChecklistsJSON::JSON; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedBroadcastChannelIds TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ConcatenatedBroadcastChannelIds SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN RunSummaryTemplate TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN RunSummaryTemplate SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ChannelNameTemplate TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Playbook ALTER COLUMN ChannelNameTemplate SET DEFAULT ''::text; $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_PlaybookMember ALTER COLUMN Roles TYPE varchar(65536); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Category_Item ADD CONSTRAINT ir_category_item_categoryid FOREIGN KEY (CategoryId) REFERENCES {{ .source_db }}.IR_Category(Id); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Metric ADD CONSTRAINT ir_metric_metricconfigid FOREIGN KEY (MetricConfigId) REFERENCES {{ .source_db }}.IR_MetricConfig(Id); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Metric ADD CONSTRAINT ir_metric_incidentid FOREIGN KEY (IncidentId) REFERENCES {{ .source_db }}.IR_Incident(Id); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_MetricConfig ADD CONSTRAINT ir_metricconfig_playbookid FOREIGN KEY (PlaybookId) REFERENCES {{ .source_db }}.IR_Playbook(Id); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_PlaybookAutoFollow ADD CONSTRAINT ir_playbookautofollow_playbookid FOREIGN KEY (PlaybookId) REFERENCES {{ .source_db }}.IR_Playbook(Id); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_PlaybookMember ADD CONSTRAINT ir_playbookmember_playbookid FOREIGN KEY (PlaybookId) REFERENCES {{ .source_db }}.IR_Playbook(Id); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_Run_Participants ADD CONSTRAINT ir_run_participants_incidentid FOREIGN KEY (IncidentId) REFERENCES {{ .source_db }}.IR_Incident(Id); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_StatusPosts ADD CONSTRAINT ir_statusposts_incidentid FOREIGN KEY (IncidentId) REFERENCES {{ .source_db }}.IR_Incident(Id); $$,\n   $$ ALTER TABLE {{ .source_db }}.IR_TimelineEvent ADD CONSTRAINT ir_timelineevent_incidentid FOREIGN KEY (IncidentId) REFERENCES {{ .source_db }}.IR_Incident(Id); $$,\n   $$ CREATE UNIQUE INDEX IF NOT EXISTS ir_playbookmember_playbookid_memberid_key on {{ .source_db }}.IR_PlaybookMember(PlaybookId,MemberId); $$,\n   $$ CREATE INDEX IF NOT EXISTS ir_statusposts_incidentid_postid_key on {{ .source_db }}.IR_StatusPosts(IncidentId,PostId); $$,\n   $$ CREATE INDEX IF NOT EXISTS ir_playbookmember_playbookid on {{ .source_db }}.IR_PlaybookMember(PlaybookId); $$,\n   $$ ALTER SCHEMA {{ .source_db }} RENAME TO public; $$,\n   $$ SELECT pg_catalog.set_config('search_path', '\"$user\", public', false); $$,\n   $$ ALTER USER {{ .pg_user }} SET SEARCH_PATH TO 'public'; $$;\n```\n\n----------------------------------------\n\nTITLE: Mattermost DB Options\nDESCRIPTION: This snippet displays CLI options for the `mattermost db` command, specifically regarding help and configuration file usage.  It shows the flags for displaying help information and for specifying a configuration file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n-h, --help   help for db\n-c, --config string   Configuration file to use\n```\n\n----------------------------------------\n\nTITLE: Filestore Secret YAML\nDESCRIPTION: Defines a Kubernetes Secret for storing credentials to access object storage.  Requires base64 encoded keys.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>  # Choose a descriptive name (e.g., my-s3-credentials)\ntype: Opaque\ndata:\n  accesskey: <base64-encoded-access-key>\n  secretkey: <base64-encoded-secret-key>\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL schema migration flags (migration-assist)\nDESCRIPTION: These flags can be used with the migration-assist postgres command to perform checks before running migrations. You can disable them by setting them to false.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--check-schema-owner          Check if the schema owner is the same as the user running the migration (default true)\n--check-tables-empty          Check if tables are empty before running migrations (default true)\n```\n\n----------------------------------------\n\nTITLE: Inline code using backticks\nDESCRIPTION: This snippet demonstrates how to create inline monospaced code text in Mattermost using backticks. The text enclosed within the backticks will be rendered in a monospace font.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n`monospace`\n```\n\n----------------------------------------\n\nTITLE: Creating PropertyFields Index Concurrently - SQL\nDESCRIPTION: This SQL snippet creates an index named `idx_propertyfields_create_at_id` on the `PropertyFields` table, using the `CreateAt` and `ID` columns. The `CONCURRENTLY` option prevents table locking during index creation. The `IF NOT EXISTS` clause prevents errors if the index already exists.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX CONCURRENTLY IF NOT EXISTS idx_propertyfields_create_at_id ON PropertyFields(CreateAt, ID)\n```\n\n----------------------------------------\n\nTITLE: Counting OAuth Data Rows MySQL\nDESCRIPTION: This SQL query counts the number of rows in the `OAuthAccessData` table that do not have corresponding entries in the `Preferences` table, joined with the `Sessions` table on the token. This helps determine the number of OAuth access data entries potentially impacted by changes or deletions, specifically in MySQL environments. It uses `LEFT JOIN` and `INNER JOIN` clauses, with a `WHERE p.name IS NULL` to identify rows without corresponding preferences.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\n SELECT COUNT(o.`Token`)\n FROM OAuthAccessData o\n LEFT JOIN Preferences p ON o.\n   clientid = p.name\n   AND o.userid = p.userid\n   AND p.category = 'oauth_app'\n INNER JOIN Sessions s ON o.token = s\n   .token\n WHERE p.name IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Desktop App on CentOS/RHEL\nDESCRIPTION: This command installs the Mattermost desktop app on CentOS/RHEL systems using the `rpm` package manager. It assumes that the Mattermost desktop app .rpm package has already been downloaded. Replace `mattermost-desktop-5.11.2-linux-x86_64.rpm` with the appropriate file name. The command uses `sudo` to execute the installation with administrative privileges.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/desktop/linux-desktop-install.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo rpm -i mattermost-desktop-5.11.2-linux-x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: Note block in release notes\nDESCRIPTION: This code snippet represents a note block found within the Mattermost Mobile App release notes, used to highlight important information, such as security fixes. It's a visual element in the markdown format.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mobile-app-changelog.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n``` {Note}\nMattermost Mobile App v1.41.0 contains a high level security fix. Upgrading is recommended. Details will be posted on our [security updates page](https://mattermost.com/security-updates/) 30 days after release as per the [Mattermost Responsible Disclosure Policy](https://mattermost.com/security-vulnerability-report/).\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification From Address\nDESCRIPTION: This setting determines the email address used as the sender for notification emails from the Mattermost system. It should be an address monitored by a system administrator. The default value is test@example.com.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n``config.json`` setting: ``.EmailSettings.FeedbackEmail``\n```\n\n----------------------------------------\n\nTITLE: Installing migration-assist tool with Go\nDESCRIPTION: This command uses the go install command to install the migration-assist tool.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/postgres-migration-assist-tool.rst#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/mattermost/migration-assist/cmd/migration-assist@latest\n```\n\n----------------------------------------\n\nTITLE: mmctl User Deleteall Options\nDESCRIPTION: Options for the `mmctl user deleteall` command, including confirm and help flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_167\n\nLANGUAGE: sh\nCODE:\n```\n--confirm   Confirm you really want to delete the user and a database backup has been performed\n-h, --help  help for delete\n```\n\n----------------------------------------\n\nTITLE: Displaying Mattermost Academy Search Training Badge (HTML)\nDESCRIPTION: This HTML snippet displays a badge that links to Mattermost Academy search training resources. It uses an image and text to create a visually appealing callout to the training.  The badge directs users to an external URL where they can access the training materials.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/academy-search.rst#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://mattermost.com/pl/mattermost-academy-search-training\" class=\"mm-badge mm-badge--academy\" target=\"_blank\">\n    <img src=\"../_static/images/badges/academy-callout-image.jpg\" alt=\"\" />\n    <div class=\"mm-badge__copy\">\n      <span class=\"mm-badge__accent-text\">Mattermost Academy</span>\n      <span class=\"mm-badge__title\">Learn about search</span>\n    </div>\n  </a>\n```\n\n----------------------------------------\n\nTITLE: Create Task List Using Markdown - Text\nDESCRIPTION: Explains how to create a task list with checkboxes using square brackets. Adding an 'x' inside the brackets marks a task as completed.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- [ ] Item one\n- [ ] Item two\n- [x] Completed item\n```\n\n----------------------------------------\n\nTITLE: Websocket Event Field Addition\nDESCRIPTION: Describes the addition of a new `server_hostname` field to the websocket `HELLO` event. This new field provides the hostname of the server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n``server_hostname``\n```\n\nLANGUAGE: text\nCODE:\n```\n``HELLO``\n```\n\n----------------------------------------\n\nTITLE: Rendering LaTeX Formula in Code Block\nDESCRIPTION: This snippet shows how to display a LaTeX formula as a code block. The code block must be defined with the `latex` language identifier.  LaTeX rendering for code blocks must be enabled in the Mattermost system console. The formula is rendered as an image.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n```latex\nX_k = \\sum_{n=0}^{2N-1} x_n \\cos \\left[\\frac{\\pi}{N} \\left(n+\\frac{1}{2}+\\frac{N}{2}\\right) \\left(k+\\frac{1}{2}\\right) \\right]\n```\n```\n\n----------------------------------------\n\nTITLE: Adding fetchMissingUsers option in PostUtils - Javascript\nDESCRIPTION: This code snippet describes the addition of the `fetchMissingUsers` option to the `PostUtils.messageHtmlToComponent` function, designed for use by plugins. This option likely allows plugins to request user information that might be missing during the rendering of messages.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nAdded the ``fetchMissingUsers`` option to ``PostUtils.messageHtmlToComponent`` for use by plugins.\n```\n\n----------------------------------------\n\nTITLE: Channel Reminder - 3-Day Notice\nDESCRIPTION: This channel message is sent 3 days before the scheduled maintenance to remind users in relevant Mattermost channels.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/communicate-scheduled-maintenance.rst#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n@all This is a reminder that our Mattermost server will \nundergo scheduled maintenance on [Date],\nfrom [Start Time] to [End Time] [Time Zone]. \nPlease plan accordingly.\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Upload Part Size Configuration\nDESCRIPTION: This snippet configures the size, in bytes, of each part in a multi-part upload to Amazon S3. The default value is 5242880 (5MB). The configuration can be set via the config.json file, or environment variable. This setting is not available in the system console.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_64\n\nLANGUAGE: text\nCODE:\n```\nconfig.json setting: \".FileSettings.AmazonS3UploadPartSizeBytes: 5242880\"\nEnvironment variable: \"MM_FILESETTINGS_AMAZONS3UPLOADPARTSIZEBYTES\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Idle Connections for High Availability\nDESCRIPTION: This setting defines the maximum number of idle connections held open from one server to all others in the cluster. The default value is 100. It can be configured through the config.json setting (\".ClusterSettings.MaxIdleConns: 100,\") or the environment variable MM_CLUSTERSETTINGS_MAXIDLECONNS. Numerical input is expected. Deprecated after v7.0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n\".ClusterSettings.MaxIdleConns: 100,\"\n```\n\n----------------------------------------\n\nTITLE: Message Retention Days config.json setting\nDESCRIPTION: Specifies the config.json setting for message retention days. When `MessageRetentionDays` is configured, `MessageRetentionHours` must be set to 0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/compliance-configuration-settings.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"MessageRetentionDays\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Streaming Port\nDESCRIPTION: This setting defines the port used for streaming data between servers. The configuration setting is \"StreamingPort\" and expects a string input, such as \":8075\". Deprecated after v6.0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n\"StreamingPort\": \":8075\"\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML Badge for Mattermost Academy Link\nDESCRIPTION: This code snippet embeds an HTML badge that links to a Mattermost Academy page. The badge provides users with a visual cue to access learning resources about Mattermost Copilot and Calls. It relies on relative paths to static images within the Mattermost documentation.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/academy-copilot-calls.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://academy.mattermost.com/p/streamline-communication-with-mattermost-copilot-calls\" class=\"mm-badge mm-badge--academy\" target=\"_blank\">\n    <img src=\"../_static/images/badges/academy-callout-image.jpg\" alt=\"\" />\n    <div class=\"mm-badge__copy\">\n      <span class=\"mm-badge__accent-text\">Mattermost Academy</span>\n      <span class=\"mm-badge__title\">Learn about Mattermost Copilot and Calls</span>\n    </div>\n  </a>\n```\n\n----------------------------------------\n\nTITLE: mmctl User Demote Options\nDESCRIPTION: Options for the `mmctl user demote` command, including a help flag.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_170\n\nLANGUAGE: sh\nCODE:\n```\n-h, --help   help for demote\n```\n\n----------------------------------------\n\nTITLE: config.json Example: EnableOAuthServiceProvider\nDESCRIPTION: This snippet reveals the config.json setting for enabling or disabling Mattermost as an OAuth 2.0 service provider. Enabling allows Mattermost to authorize API requests from external applications. Cloud admins cannot modify this setting.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/integrations-configuration-settings.rst#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"EnableOAuthServiceProvider\": true\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline LaTeX Formula\nDESCRIPTION: This snippet shows how to embed a LaTeX formula inline within text using dollar signs.  LaTeX rendering must be enabled in the Mattermost system console. The formula is rendered as an image.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n$X_k = \\sum_{n=0}^{2N-1} x_n \\cos \\left[\\frac{\\pi}{N} \\left(n+\\frac{1}{2}+\\frac{N}{2}\\right) \\left(k+\\frac{1}{2}\\right) \\right]$\n```\n\n----------------------------------------\n\nTITLE: Certbot dry-run\nDESCRIPTION: This command performs a dry-run of the Let's Encrypt installer to verify that the DNS configuration is correct before attempting to generate a certificate. It checks for any potential issues without making any actual changes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/setup-nginx-proxy.rst#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nsudo certbot certonly --dry-run\n```\n\n----------------------------------------\n\nTITLE: Creating horizontal lines\nDESCRIPTION: This demonstrates how to create a horizontal line in Mattermost using three asterisks. Other options are using three underscores or dashes.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n***\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: AmazonS3UploadPartSizeBytes\nDESCRIPTION: This setting controls the part size used to upload files to an S3 store, allowing for optimization of S3 uploads. It resides under the FileSettings section in config.json and can be configured either directly in the file or via the System Console.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v9-changelog.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"FileSettings\": {\n    \"AmazonS3UploadPartSizeBytes\": \"<size_in_bytes>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting OAuth Data Rows PostgreSQL\nDESCRIPTION: This SQL query counts the number of rows in the `oauthaccessdata` table that do not have corresponding entries in the `preferences` table based on client ID, user ID, and category. This helps determine the number of OAuth access data entries potentially impacted by changes or deletions.  It uses a `NOT EXISTS` subquery to identify mismatches between the two tables.  The query is tailored for PostgreSQL syntax.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\n SELECT count(o.*)                                                                                                                                               \n FROM oauthaccessdata o                                                                                                                                          \n  WHERE NOT EXISTS (                                                                                                                                             \n     SELECT p.*                                                                                                                                                  \n     FROM preferences p                                                                                                                                          \n     WHERE o.clientid = p.name                                                                                                                                   \n       AND o.userid = p.                                                                                                                                         \n       userid                                                                                                                                                    \n       AND p.category =                                                                                                                                          \n       'oauth_app'                                                                                                                                               \n     );\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin React DOM Patching\nDESCRIPTION: This snippet shows the config.json setting used to control the patching of the React DOM library used by plugins. Enabling this setting patches web app plugins to use the web app's version of React DOM. This is deprecated and not used in Mattermost v8.0 and later.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"PatchPluginsReactDOM\": false\n```\n\n----------------------------------------\n\nTITLE: Configuration: Show Email Address - config.json\nDESCRIPTION: This setting controls whether email addresses are visible to other users in the Mattermost interface. It is configured via `PrivacySettings.ShowEmailAddress` in the `config.json` file. When set to `true`, all users can see each other's email addresses.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/site-configuration-settings.rst#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n.PrivacySettings.ShowEmailAddress\n```\n\n----------------------------------------\n\nTITLE: Removing WebRTC and IE11 Mobile View Support\nDESCRIPTION: Mattermost v5.6 removed support for WebRTC in beta, and IE11 Mobile View. WebRTC was replaced with other video and audio solutions. Removing IE11 Mobile View enables focus on maintaining high quality experience on other browsers.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Channel Reminder - 7-Day Notice\nDESCRIPTION: This channel message reminds users of scheduled maintenance 7 days in advance. It's designed for posting in relevant Mattermost channels.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/communicate-scheduled-maintenance.rst#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n@all Please be advised that our Mattermost server will \nundergo scheduled maintenance on [Date],\nfrom [Start Time] to [End Time] [Time Zone]. \nThe instance will be unavailable during this time. We appreciate your understanding.\n```\n\n----------------------------------------\n\nTITLE: mmctl User Preference List Command\nDESCRIPTION: This command lists user preferences, optionally filtered by category. It requires specifying the user(s) whose preferences are being listed and optionally a category to filter the results.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_179\n\nLANGUAGE: sh\nCODE:\n```\npreference list user@example.com\n```\n\n----------------------------------------\n\nTITLE: Searching mmctl User\nDESCRIPTION: Shows the format for searching for users using mmctl, specifying search terms. The example demonstrates searching for user1@mail.com and user2@mail.com.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_190\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user search [users] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n   mmctl user search user1@mail.com user2@mail.com\n```\n\n----------------------------------------\n\nTITLE: Renaming platform binary to mattermost\nDESCRIPTION: In Mattermost v5.0, the `platform` binary was renamed to `mattermost`. This change applies to all command-line tools, including the bulk loading tool and developer tools, for a clearer installation and upgrade experience.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: mmctl User Preference Get Command\nDESCRIPTION: This command retrieves a specific user preference based on the provided category and name. It requires specifying the category and name of the preference and the user(s) whose preference is being queried.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_178\n\nLANGUAGE: sh\nCODE:\n```\npreference get --category display_settings --name use_military_time user@example.com\n```\n\n----------------------------------------\n\nTITLE: Fixing Docker Permission Issue\nDESCRIPTION: Command that should be skipped if you are on an M1 Mac and encountering permission issues in the Docker container.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/containers/install-docker.rst#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown -R 2000:2000 ./volumes/app/mattermost\n```\n\n----------------------------------------\n\nTITLE: mmctl User Search Options\nDESCRIPTION: Defines the available options for the mmctl user search command, which includes only the help flag (-h).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_191\n\nLANGUAGE: sh\nCODE:\n```\n   -h, --help       help for search\n```\n\n----------------------------------------\n\nTITLE: mmctl User Reset MFA Options\nDESCRIPTION: Defines the available options for the mmctl user resetmfa command, which currently only includes the help flag (-h).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_189\n\nLANGUAGE: sh\nCODE:\n```\n   -h, --help       help for resetmfa\n```\n\n----------------------------------------\n\nTITLE: Inline image with link\nDESCRIPTION: Shows how to create an inline image that acts as a hyperlink. The snippet demonstrates the use of nested brackets and parentheses to link an image to a specified URL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/format-messages.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[![Mattermost](../images/icon-76x76.png)](https://github.com/mattermost/mattermost)\n```\n\n----------------------------------------\n\nTITLE: Service Setting: Enable Reliable Websockets (config.json)\nDESCRIPTION: This setting enables more reliable websocket messages by buffering messages during connection loss and re-transmitting them when the connection is restored. It takes a boolean value.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"EnableReliableWebsockets\": true\n```\n\n----------------------------------------\n\nTITLE: mmctl Common Options\nDESCRIPTION: These options are inherited from parent commands and are available for use with all mmctl webhook subcommands. They control configuration, output format, security settings, and connection behavior.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_205\n\nLANGUAGE: sh\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Configure Replica Lag Settings for PostgreSQL Replication Slots in Mattermost (JSON)\nDESCRIPTION: This JSON snippet configures the `ReplicaLagSettings` for Mattermost to monitor replica lag in a PostgreSQL replication setup using replication slots.  It defines the data source and SQL queries to measure absolute lag. The `DataSource` should point to the **primary** node in the PostgreSQL cluster. The query uses the `pg_stat_replication` view to calculate the difference between the current WAL LSN and the replay LSN.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SqlSettings\": {\n    \"ReplicaLagSettings\": [\n      {\n        \"DataSource\": \"postgres://mmuser:password@localhost:5432/mattermost_test?sslmode=disable&connect_timeout=10.\",\n        \"QueryAbsoluteLag\": \"select usename, pg_wal_lsn_diff(pg_current_wal_lsn(),replay_lsn) as metric from pg_stat_replication;\",\n        \"QueryTimeLag\": \"\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: mmctl User Deleteall Format\nDESCRIPTION: Shows the format for the `mmctl user deleteall` command, which takes flags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_165\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user deleteall [flags]\n```\n\n----------------------------------------\n\nTITLE: Legal Hold Secret Verification Command\nDESCRIPTION: This command-line example demonstrates how to append the processor command with the `--legal-hold-secret <KEY>` flag to verify the contents of files within a Legal Hold. The `<KEY>` should be replaced with the actual Legal Hold secret key.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/legal-hold.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--legal-hold-secret <KEY>\n```\n\n----------------------------------------\n\nTITLE: Slash command payload encoding change\nDESCRIPTION: In Mattermost v5.0, slash commands configured to receive a GET request now have the payload encoded in the query string. Previously, the payload was sent in the request body. This change ensures consistency with standard HTTP requests.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/deprecated-features.rst#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Configuring Experimental Channel Sidebar\nDESCRIPTION: This setting enables or disables experimental channel sidebar features such as custom collapsible channel categories, drag and drop to reorganize channels, and unread filtering.  The available options are 'off', 'default_on', and 'default_off'. This configures the \"ExperimentalChannelSidebarOrganization\" option in config.json.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n\"ExperimentalChannelSidebarOrganization\": off\n```\n\n----------------------------------------\n\nTITLE: mmctl User Username Options\nDESCRIPTION: Defines the available options for the mmctl user username command, which includes only the help flag (-h). Note that the help text incorrectly states 'help for version'.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_193\n\nLANGUAGE: sh\nCODE:\n```\n   -h, --help       help for version\n```\n\n----------------------------------------\n\nTITLE: Displaying an export job ID after creation\nDESCRIPTION: This snippet shows the output after successfully creating an export job with mmctl. It displays the job ID, which is used to check the status of the export process. The ID is a unique identifier for the export job.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/cloud-data-export.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nExport process job successfully created, ID: yfrr9ku5i7fjubeshs1ksrknzc\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Setting: Bulk Indexing Time Window (config.json)\nDESCRIPTION: This setting determines the maximum time window for a batch of posts being indexed by the Bulk Indexer in Elasticsearch. It's a performance optimization for large installs. The numerical input specifies the time in seconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"BulkIndexingTimeWindowSeconds\": 3600\n```\n\n----------------------------------------\n\nTITLE: mmctl User Promote Options\nDESCRIPTION: Defines the available options for the mmctl user promote command, which includes the help flag (-h).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_185\n\nLANGUAGE: sh\nCODE:\n```\n   -h, --help   help for promote\n```\n\n----------------------------------------\n\nTITLE: Signing an RPM Package on Linux\nDESCRIPTION: Signs an RPM package using the rpmsign tool. Requires rpmsign and GnuPG to be installed. your-package.rpm must be replaced with the actual RPM package file name.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrpmsign --addsign your-package.rpm\n```\n\n----------------------------------------\n\nTITLE: HTML raw div for Mattermost Plans Badge (closing)\nDESCRIPTION: This HTML snippet provides the closing tag for the div element with the class 'mm-plans-badge'. It complements the opening div tag and completes the structure for the plan availability badge container. The badge content (image and text) would be placed between the opening and closing div tags.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/allplans-selfhosted.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n</div>\n```\n\n----------------------------------------\n\nTITLE: Compress Mattermost Logs using tar\nDESCRIPTION: This command compresses the Mattermost logs into a gzipped tar archive.  It uses `tar` with the `czf` options to create a compressed archive at a specified location, typically `/tmp`. This helps reduce file size for easier transfer and sharing.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/troubleshooting.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntar -czf /tmp/mattermost.log.tgz\n```\n\n----------------------------------------\n\nTITLE: Enable AD/LDAP Group Sync in config.json\nDESCRIPTION: This setting enables or disables AD/LDAP Group Sync functionality. Setting this to `true` enables AD/LDAP Group Sync. It corresponds to `\"ExperimentalLdapGroupSync\": false` with options `true` and `false`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalLdapGroupSync\": false\n```\n\n----------------------------------------\n\nTITLE: mmctl User List Command\nDESCRIPTION: This command lists all users in a Mattermost instance or optionally filters the list to display only users belonging to a specific team.  It supports pagination for large user bases.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_174\n\nLANGUAGE: sh\nCODE:\n```\nmmctl user list\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Picture Width in config.json\nDESCRIPTION: This configuration setting (removed in July 16th, 2017 release) allowed you to specify the width to which profile pictures were resized after being uploaded. It corresponds to the `\"ProfileWidth\": 128` setting in `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n\"ProfileWidth\": 128\n```\n\n----------------------------------------\n\nTITLE: PKCS12 Export Password (Text)\nDESCRIPTION: Displays the export password used to protect the PKCS12 file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nEnter Export Password: mmuser-passphrase\n```\n\n----------------------------------------\n\nTITLE: Database Setting: Amazon S3 Lowercase Bucket (config.json)\nDESCRIPTION: This setting indicates whether S3 bucket names are fully lowercase. It accepts a boolean value to define this characteristic.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"AmazonS3LowercaseBucket\": false\n```\n\n----------------------------------------\n\nTITLE: Building Live HTML Preview\nDESCRIPTION: This command generates a live preview of the documentation at `http://127.0.0.1:8000` which automatically updates as changes are saved in the local IDE. This allows for real-time review of documentation changes.\nSOURCE: https://github.com/mattermost/docs/blob/master/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmake livehtml\n```\n\n----------------------------------------\n\nTITLE: Getting Server Busy State with mmctl\nDESCRIPTION: This command retrieves the server's busy state and the timestamp for when the busy flag will be cleared automatically. It provides information about high server load conditions and their expected duration. No specific dependencies are required, but mmctl must be properly configured to connect to the Mattermost server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_132\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system getbusy [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl system getbusy\n```\n\n----------------------------------------\n\nTITLE: HTML Note Badge Closing\nDESCRIPTION: This snippet defines the closing HTML div element for the note badge. It closes the container that holds the note badge content.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/selfhosted-only.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Mattermost Version Information\nDESCRIPTION: Displays the Mattermost version information. This is achieved using the deprecated `mattermost version` command. Note that from Mattermost v6.5, this command no longer interacts with the database.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/command-line-tools.rst#_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nmattermost version\n```\n\n----------------------------------------\n\nTITLE: Disable Inactive Server Email Notifications in config.json\nDESCRIPTION: This configuration setting disables sending inactivity email notifications to Mattermost System Admins.  It corresponds to `\"EnableInactivityEmail\": true` with options `true` and `false`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n\"EnableInactivityEmail\": true\n```\n\n----------------------------------------\n\nTITLE: Embedding Mattermost Academy Badge via HTML\nDESCRIPTION: This HTML snippet embeds a Mattermost Academy badge with a link to a training resource on upgrading Mattermost using a tarball. It uses specific CSS classes for styling and an image for the badge.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/academy-tarball-upgrade.rst#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://mattermost.com/pl/mattermost-academy-upgrade-tarball-training\" class=\"mm-badge mm-badge--academy\" target=\"_blank\">\n    <img src=\"../_static/images/badges/academy-callout-image.jpg\" alt=\"\" />\n    <div class=\"mm-badge__copy\">\n      <span class=\"mm-badge__accent-text\">Mattermost Academy</span>\n      <span class=\"mm-badge__title\">Learn about upgrading Mattermost using a tarball</span>\n    </div>\n  </a>\n```\n\n----------------------------------------\n\nTITLE: HTML Image Reference for Plans Badge\nDESCRIPTION: This HTML snippet includes an image element that displays the flag icon for the plans badge. The image source is specified as '/_static/images/badges/flag_icon.svg'.  It relies on the image file existing at the specified path.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/ent-only.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/_static/images/badges/flag_icon.svg\" alt=\"plans-img\">\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Trace Configuration\nDESCRIPTION: Configures the Elasticsearch trace options for printing errors. Options include 'error', 'all', or unspecified (default). 'error' creates error traces for client initialization and prints template/search query errors. 'all' creates three traces (error, trace, and info) but doesn't print queries.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n\".Elasticsearchsettings.Trace\"\n```\n\n----------------------------------------\n\nTITLE: Listening for UDP connections using netcat\nDESCRIPTION: This command uses the `netcat` utility to listen for UDP connections on a specified port. It's used to test whether data can go through between the client and server.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/calls-deployment.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnc -l -u -p 8443\n```\n\n----------------------------------------\n\nTITLE: Verifying File Log Directory Setting\nDESCRIPTION: This snippet explains the configuration of the file log directory. The path should not have a filename as part of the path, otherwise there will be a security risk.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/important-upgrade-notes.rst#_snippet_64\n\nLANGUAGE: text\nCODE:\n```\nMake sure that the **File Log Directory** field is either empty or has a directory path only. It must not have a filename as part of the path.\n```\n\n----------------------------------------\n\nTITLE: Service Setting: Limit Access to Config Settings (config.json)\nDESCRIPTION: This setting limits the number of config settings sent to users prior to login. It takes a boolean value to enable or disable the feature.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalLimitClientConfig\": \"false\"\n```\n\n----------------------------------------\n\nTITLE: Enable Remote Cluster Service in config.json\nDESCRIPTION: This experimental setting (deprecated in November 16th, 2024 release) enabled the management of remote clusters for shared channels. Setting this to `true` allowed system admins to manage remote clusters via the System Console.  This setting corresponds to `\"ExperimentalSettings.EnableRemoteClusters\": false` with options `true` and `false`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n\"ExperimentalSettings.EnableRemoteClusters\": false\n```\n\n----------------------------------------\n\nTITLE: Querying Configurations table in database (sql)\nDESCRIPTION: SQL query to verify successful migration of the Mattermost configuration to the database.  It checks for a single active configuration and confirms the Value matches the config.json file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/configuration-in-your-database.rst#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Configurations WHERE Active=true;\n```\n\n----------------------------------------\n\nTITLE: Generating .crt file from .p12 file using OpenSSL\nDESCRIPTION: This command uses OpenSSL to convert a .p12 (PKCS#12) keystore file into a .crt (certificate) file. The -nodes option ensures that the private key is not encrypted in the output file. The generated certificate file is required for configuring SAML encryption in Mattermost.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-saml-keycloak.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl pkcs12 -in keystore.p12 -out mattermost.crt -nodes\n```\n\n----------------------------------------\n\nTITLE: Setting Preview Image Height in config.json\nDESCRIPTION: This configuration setting (removed in July 16th, 2017 release) allowed you to specify the maximum height of preview images in Mattermost. Setting the value to `0` would auto-size the height based on the source image's aspect ratio and the specified width. It corresponds to the `\"PreviewHeight\": 0` setting in `config.json`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n\"PreviewHeight\": 0\n```\n\n----------------------------------------\n\nTITLE: Note block in release notes\nDESCRIPTION: This code snippet represents a note block found within the Mattermost Mobile App release notes, used to highlight important information, such as security fixes. It's a visual element in the markdown format.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mobile-app-changelog.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n``` {Note}\nMattermost Mobile App v1.40.0 contains a low level security fix. Upgrading is recommended. Details will be posted on our [security updates page](https://mattermost.com/security-updates/) 30 days after release as per the [Mattermost Responsible Disclosure Policy](https://mattermost.com/security-vulnerability-report/).\n```\n```\n\n----------------------------------------\n\nTITLE: Restricting Public Channel Creation Configuration\nDESCRIPTION: This snippet shows the config.json setting used to restrict who can create public channels. Options include all team members, team admins and system admins, and system admins only. This is deprecated and replaced by advanced permissions.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"RestrictPublicChannelCreation\": \"all\"\n```\n\n----------------------------------------\n\nTITLE: Bleve Setting: Bulk Indexing Time Window (config.json)\nDESCRIPTION: This setting determines the maximum time window for a batch of posts being indexed by the Bulk Indexer in Bleve. It serves as a performance optimization for large installs. The numerical input specifies the time in seconds.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"BulkIndexingTimeWindowSeconds\": 3600\n```\n\n----------------------------------------\n\nTITLE: Database connection string example\nDESCRIPTION: Example of a mysql database connection string.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/prepare-mattermost-mysql-database.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nmysql://mmuser:really_secure_password@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8&writeTimeout=30s\n```\n\n----------------------------------------\n\nTITLE: Setting up Mattermost PPA repository\nDESCRIPTION: Downloads and executes a shell script that configures the Mattermost PPA repository on the system. This script sets up required repositories and configures PostgreSQL, NGINX, Certbot, and the Mattermost Omnibus repository.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-omnibus.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -o- https://deb.packages.mattermost.com/repo-setup.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Listing Mattermost Marketplace Plugins with mmctl\nDESCRIPTION: Retrieves a list of plugins available on the Mattermost Plugin Marketplace server. It can filter plugins by ID, name, or description using the `--filter` option. It supports pagination via `--page` and `--per-page` options. The `--local-only` flag restricts the output to only locally installed plugins.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_124\n\nLANGUAGE: sh\nCODE:\n```\nmmctl plugin marketplace list [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl plugin marketplace list --all\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl plugin marketplace list --page 2 --per-page 10\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl plugin marketplace list --filter jit\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mmctl plugin marketplace list --local-only\n```\n\n----------------------------------------\n\nTITLE: Complete mattermost.service file example (text)\nDESCRIPTION: Example of a complete mattermost.service file with the EnvironmentFile directive added. This file defines how the Mattermost service is managed by systemd.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/configuration-in-your-database.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n[Unit]\nDescription=Mattermost\nAfter=network.target\nAfter=postgresql.service\nRequires=postgresql.service\n\n[Service]\nType=notify\nEnvironmentFile=/opt/mattermost/config/mattermost.environment\nExecStart=/opt/mattermost/bin/mattermost\nTimeoutStartSec=3600\nKillMode=mixed\nRestart=always\nRestartSec=10\nWorkingDirectory=/opt/mattermost\nUser=mattermost\nGroup=mattermost\nLimitNOFILE=49152\n\n[Install]\nWantedBy=postgresql.service\n```\n\n----------------------------------------\n\nTITLE: Database Setting: At Rest Encrypt Key (config.json)\nDESCRIPTION: This setting specifies a 32-character key for encrypting and decrypting sensitive fields in the database. It's a legacy setting that is no longer used. Requires a string input.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"AtRestEncryptKey\": \"\"\n```\n\n----------------------------------------\n\nTITLE: Legal Hold Verification Error Output\nDESCRIPTION: This code block shows the output when the Legal Hold secret key verification fails. It indicates a hash mismatch for a specific file within the Legal Hold data, highlighting a potential issue with data integrity.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/comply/legal-hold.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n...\nSecret key was provided, verifying legal holds...\n- Verifying Legal Hold *processor9*: [Error] hash mismatch for file: legal_hold/processor9_i7k1dbkipiyojeess6ozi4agyr/index.json\n...\n```\n\n----------------------------------------\n\nTITLE: Verify database schema version\nDESCRIPTION: This snippet shows how to verify the current database schema version using the Mattermost command-line tool. This is essential for ensuring compatibility during the downgrade process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/upgrade/downgrading-mattermost-server.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmattermost db version --all\n```\n\n----------------------------------------\n\nTITLE: SAML Request (AuthNRequest) Example - XML Payload\nDESCRIPTION: This code snippet showcases an example of an XML payload for a signed SAML AuthnRequest. It includes namespaces for SAML protocol (samlp), SAML assertion (saml), and XML signature (samlsig). The request contains details like Issuer, Signature, and AssertionConsumerServiceURL.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/sso-saml-technical.rst#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n <samlp:AuthnRequest xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:samlsig=\"https://www.w3.org/2000/09/xmldsig#\" ID=\"_u5mpjadp1fdozfih4cj8ap4brh\" Version=\"2.0\" ProtocolBinding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" AssertionConsumerServiceURL=\"http://localhost:8065/login/sso/saml\" IssueInstant=\"2019-06-08T16:00:31Z\">\n      <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://www.okta.com/exkoxukx1D8OIfY03356</saml:Issuer>\n      <samlsig:Signature Id=\"Signature1\">\n          <samlsig:SignedInfo>\n              <samlsig:CanonicalizationMethod Algorithm=\"https://www.w3.org/2001/10/xml-exc-c14n#\"></samlsig:CanonicalizationMethod>\n              <samlsig:SignatureMethod Algorithm=\"https://www.w3.org/2000/09/xmldsig#rsa-sha1\"></samlsig:SignatureMethod>\n              <samlsig:Reference URI=\"#_u5mpjadp1fdozfih4cj8ap4brh\">\n                  <samlsig:Transforms>\n                      <samlsig:Transform Algorithm=\"https://www.w3.org/2000/09/xmldsig#enveloped-signature\"></samlsig:Transform>\n                  </samlsig:Transforms>\n                  <samlsig:DigestMethod Algorithm=\"https://www.w3.org/2000/09/xmldsig#sha1\"></samlsig:DigestMethod>\n                  <samlsig:DigestValue></samlsig:DigestValue>\n              </samlsig:Reference>\n          </samlsig:SignedInfo>\n          <samlsig:SignatureValue></samlsig:SignatureValue>\n          <samlsig:KeyInfo>\n              <samlsig:X509Data>\n                  <samlsig:X509Certificate>MIIFmzCCA4OgAwIBAgIJAIusvV3gZIwiMA0GCSqGSIb3DQEBCwUAMGIxCzAJBgNVBAYTAlVTMRIwEAYDVQQHDAlQYWxvIEFsdG8xEzARBgNVBAoMCk1hdHRlcm1vc3QxDzANBgNVBAsMBkRldk9wczEZMBcGA1UEAwwQYmFzZS5leGFtcGxlLmNvbTAeFw0xOTA2MDcxMjQ0MTdaFw0yOTA2MDQxMjQ0MTdaMGIxCzAJBgNVBAYTAlVTMRIwEAYDVQQHDAlQYWxvIEFsdG81EzARBgNVBAoMCk1hdHRlcm1vc3QxDzANBgNVBAsMBkRldk9wczEZMBcGA1UEAwwQYmFzZS5leGFtcGxlLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALAfDj+RyByszTOPRL4b+cilNF/3PB1I0CG3TNzgllgy5CwRGHLKn5/t8rPsJoWLKOUGenzVdXWuoVi3jyl5FZ1N60CBbXfmSWk20dSIkcYCcYEgs1BTBqKKYFw2dV4M0oppzNtlq7A0Glpg/gpaR/2TXEPAhOsUfORC2qAdJt9ev0AQjp5V0TkIKMZz8oo33Coi38TG5r/LG+ihRbpWzO7j9Rc2S5I6bczvG4wOg7nVKG+B5XBvuU9PjSqgxpd/F/fYf+ggAEru58E+VM4veCRV8vSPbBqDG4FMPV6DiA+tH/70n6zuPCS3soxX00kjKtP80QD6UgzvM2NN7PHiNlf0Zj6VCU3VdjEnypg7dzlHJuyyaAaTD5nSfkecamEoJpq7kaUB7uTmBHELRUhOOy24f54HnP72vnxicZL8cWsOkJwQAqIGzBxQ7J0uX4Os71WrV2YIur8QVk6KN6MBPxfiCh3xO/R+cycgx0aMrWZoyzOzP7NCTM5MNE41C48xeGviyCtUID4xiBow+xo6IDUaiCoUVJhz579ore8ic70a19DD0qHy4SpBvrUwCO54kvkgn6HjYlLC/k8nFM9F9W9wVAQD/QwIjd7EtLZLGgbU61Jv3q4kZxxq270hogCRY0lmI3RxkedGHhetF7kaizrikW5zJQEeido/ir37HhX5AgMBAAGjVDBSMBIGA1UdEwEB/wQIMAYBAf8CAQAwPAYDVR0RBDUwM4IQbG9ncy5leGFtcGxlLmNvbYITbWV0cmljcy5leGFtcGxlLmNvbYcEwKgAAYcEfwAAATANBgkqhkiG9w0BAQsFAAOCAgEAH1O91BABHXZjrU7v1OwG+GbU/4TYZqBXXNxax++OFSRCkEEoNKGg49R6J7lY4lrm12zBlw+oGSyjIOerzi39/dcxDkKpzyhGvEN4mExbDlybmdCVrHPeWgZl7uwqn4Bj1xiu97M6eMthgxJE7KVNDGDHthGL0/fTlONIh3qS7Far33hLHJJKy3+lC1MDB8cNltV3mf/ctHCx5Wa0bfZId0MJgd/seP0WU1HCf3kIxhnhsnOYs32xu7EGiM4/lgnquVd/q/f99ueSaDSHrep373/w2ce9iF3U0qcLd2iP8ayF/daGeW1dVPL9R10Oe4BpRjMkjlLwhZdjJeKSg9GBa2GXUEn1Ru9vpSw/C10no3Qx/6ZHweYbSmJ6hBg4T0nDBp6iVS1eQULNXxDuDWb26U0ESOO5jK8ATywuc45o0bqdvD1XOrGYGfGnofx7ofRWwKHWfltvxurnbsyo2vH6nM6K41K2DpVdyQOKAGvKe/oCWfdi+WyBQJGWcIp2OTC1XyWHv7JsY3lo04+islkHEcqJyd8Rf8GWmRHdXz0WzGiZbxWzAuvRRWnzM31VAws8kQBHTBwIJlJoGX4AXfEvPi+NTxkntf8cQdJucK9ZZbP4ycXHULO4LneyJoJ9Q7nxX11xWv7BDWxxclOXy6tyUkg9Fjb7pQ/HCVvGhRzilVU=</samlsig:X509Certificate>\n              </samlsig:X509Data>\n          </samlsig:KeyInfo>\n      </samlsig:Signature>\n  </samlp:AuthnRequest>\n```\n\n----------------------------------------\n\nTITLE: Get Mattermost Resource Status\nDESCRIPTION: Kubectl command to get the status of the deployed Mattermost resource in the specified namespace.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/kubernetes/deploy-k8s.rst#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkubectl -n [namespace] get mattermost\n```\n\n----------------------------------------\n\nTITLE: Opening Mattermost in Fullscreen Mode via CLI\nDESCRIPTION: This command allows opening the Mattermost desktop application in fullscreen mode using the command-line interface (CLI). It leverages the `open` command on macOS, passing arguments to the application to enable fullscreen. Two alternative syntaxes are provided to achieve the same result.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/preferences/customize-desktop-app-experience.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopen release/mac/Mattermost.app --args --fullscreen true\n```\n\nLANGUAGE: bash\nCODE:\n```\nopen release/mac/Mattermost.app --args -f true\n```\n\n----------------------------------------\n\nTITLE: Resetting System Read Only Admin Permissions with mmctl\nDESCRIPTION: This command resets the permissions for the system_read_only_admin role to their default values. It is used to restore a known state of permissions for this role.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/delegated-granular-administration.rst#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nmmctl permissions reset system_read_only_admin\n```\n\n----------------------------------------\n\nTITLE: Enable OpenTracing in config.json\nDESCRIPTION: This experimental setting (removed in March 16, 2025 release) enabled OpenTracing with a Jaeger client for tracing HTTP requests. Setting this to `true` instantiated the Jaeger client.  This corresponds to `\"EnableOpenTracing\": false` with options `true` and `false`.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n\"EnableOpenTracing\": false\n```\n\n----------------------------------------\n\nTITLE: Renaming Configuration File\nDESCRIPTION: Renames the default configuration file and sets the correct permissions and ownership. This ensures that the Mattermost user has the necessary access to read and modify the configuration.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/deploy/server/linux/deploy-ubuntu.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo install -C -m 600 -o mattermost -g mattermost /opt/mattermost/config/config.defaults.json /opt/mattermost/config/config.json\n```\n\n----------------------------------------\n\nTITLE: Database Setting: Amazon S3 Location Constraint (config.json)\nDESCRIPTION: This setting indicates whether the S3 region is location constrained. It takes a boolean value.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"AmazonS3LocationConstraint\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Idle Connections Per Host\nDESCRIPTION: This setting specifies the maximum number of idle connections held open from one server to another server in the cluster. The default value is 128. It can be configured through the config.json setting (\".ClusterSettings.MaxIdleConnsPerHost: 128\") or the environment variable MM_CLUSTERSETTINGS_MAXIDLECONNSPERHOST. Numerical input is expected. Deprecated after v7.0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n\".ClusterSettings.MaxIdleConnsPerHost: 128\"\n```\n\n----------------------------------------\n\nTITLE: Accessing WebRTC Internals in Chrome\nDESCRIPTION: Opens the `chrome://webrtc-internals/` page in the Chrome browser. This provides detailed information about the WebRTC connection, including audio and video streams, signaling data, and statistics. This tool is helpful for diagnosing audio/video issues during active calls.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/collaborate/make-calls.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nchrome://webrtc-internals/\n```\n\n----------------------------------------\n\nTITLE: Modifying Team Privacy with mmctl\nDESCRIPTION: Modifies the privacy setting of a Mattermost team, allowing you to set it as either public or private.  Requires the team name and the desired privacy flag.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_142\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team modify [teams] [flag] [flags]\n```\n\nLANGUAGE: sh\nCODE:\n```\nmmctl team modify myteam --private\n```\n\n----------------------------------------\n\nTITLE: Configuring Inter-Node URLs\nDESCRIPTION: This setting defines a list of all machines in the Mattermost cluster, such as [\"http://10.10.10.2\", \"http://10.10.10.4\"]. Internal IP addresses are recommended for security. The configuration setting is \"InterNodeUrls\" and expects an array of strings, each representing a machine's URL. Deprecated after v4.0.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/deprecated-configuration-settings.rst#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n\"InterNodeUrls\": []\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting Example\nDESCRIPTION: Illustrates the addition of a new configuration setting `ServiceSettings.EnableWebHubChannelIteration` in `config.json`. This setting controls the performance of websocket broadcasting. It defaults to off and is recommended only for installations with at least 200,000 concurrent users due to potential performance impact when users join/leave a channel.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-v10-changelog.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n``ServiceSettings.EnableWebHubChannelIteration``\n```\n\n----------------------------------------\n\nTITLE: Securing Private Key with Password - Bash\nDESCRIPTION: This command secures the private key (`mattermost-x509.key`) using `openssl pkcs8` and the DES3 encryption algorithm. The resulting encrypted key is saved as `mattermost-x509.secure.key`.  The user will be prompted for a password during the encryption process.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/scripts/generate-certificates/gencert.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# secure\nopenssl pkcs8 -in mattermost-x509.key -topk8 -v2 des3 -out mattermost-x509.secure.key\n```\n\n----------------------------------------\n\nTITLE: HTML div closing for Mattermost Plans Badge\nDESCRIPTION: This HTML snippet closes the div element with the class 'mm-plans-badge'. This tag ensures that the content meant to be part of the badge is correctly contained within the styled div.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/_static/badges/allplans-cloud-selfhosted.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including badges for all plans.\nDESCRIPTION: This snippet includes a badge indicating that the content applies to all Mattermost plans, including Cloud and Self-Hosted.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/about/mattermost-mobile-releases.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{include} ../_static/badges/allplans-cloud-selfhosted.md\n```\n```\n\n----------------------------------------\n\nTITLE: Creating CA Certificate (OpenSSL)\nDESCRIPTION: This snippet creates a certificate for the generated CA key. The certificate is valid for 365 days and contains information about the organization and domain.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/onboard/ssl-client-certificate.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopenssl req -new -x509 -days 365 -key ca.mattermost.key -out ca.mattermost.crt\n```\n\n----------------------------------------\n\nTITLE: Importing a GPG Key on Linux\nDESCRIPTION: Imports an existing GPG key from a file. Requires GnuPG to be installed.  The /path/to/your-key.asc placeholder needs to be replaced with the actual path to the GPG key file.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/code-signing-custom-builds.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngpg --import /path/to/your-key.asc\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages with Pipenv\nDESCRIPTION: This command uses `pipenv` to install the Python packages specified in the project's Pipfile and Pipfile.lock files, including development dependencies. These packages are required for building the Mattermost documentation.\nSOURCE: https://github.com/mattermost/docs/blob/master/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npipenv install --dev\n```\n\n----------------------------------------\n\nTITLE: Query metric for Grafana\nDESCRIPTION: This snippet provides the query to use in Grafana for displaying the absolute replica lag metric. It specifies the metric name and the instance to monitor. This helps monitor replication lag.\nSOURCE: https://github.com/mattermost/docs/blob/master/source/configure/environment-configuration-settings.rst#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nmattermost_db_replica_lag_abs{instance=~\"$server\"}\n```\n\n----------------------------------------\n\nTITLE: SAML User Migration Example (JSON)\nDESCRIPTION: This JSON configuration provides an example of the expected format for a user mapping file used during SAML authentication migration. Each object represents a user and includes their email address along with SAML-specific authentication data (IDP ID and SAML user ID).\nSOURCE: https://github.com/mattermost/docs/blob/master/source/manage/mmctl-command-line-tool.rst#_snippet_176\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n      \"email\": \"user1@example.com\",\n      \"auth_data\": {\n        \"saml\": {\n          \"idp_id\": \"saml_idp_1\",\n          \"saml_user_id\": \"user123\"\n        }\n      }\n    },\n    {\n      \"email\": \"user2@example.com\",\n      \"auth_data\": {\n        \"saml\": {\n          \"idp_id\": \"saml_idp_2\",\n          \"saml_user_id\": \"user456\"\n        }\n      }\n    }\n  ]\n```"
  }
]