[
  {
    "owner": "xiaoymin",
    "repo": "knife4j",
    "content": "TITLE: Setting API Operation Order with @ApiOperationSupport in Java\nDESCRIPTION: This snippet demonstrates how to specify the order of an API operation using the `@ApiOperationSupport` annotation. The `order` field determines the order in which the API is displayed in the Knife4j UI.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/apiSort.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n@ApiOperationSupport(order = 33)\n@ApiOperation(value = \"忽略参数值-Form类型\")\n@PostMapping(\"/ex\")\npublic Rest<LongUser> findAll(LongUser longUser) {\n    Rest<LongUser> r=new Rest<>();\n    r.setData(longUser);\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4jCloud Spring Boot Starter\nDESCRIPTION: This XML snippet defines the Maven dependency for the `knife4j-discovery-spring-boot-starter` library.  It is used to enable automatic registration of Swagger documentation with the Knife4jCloud platform from a Spring Boot application. The version should be the latest available on Maven Central and must match the Knife4jCloud main version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jCloud.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-discovery-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库(http://search.maven.org)搜索最新版本号-->\n    <!-- 该版本必须和Knife4jCloud主版本一致-->\n    <version>1.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configure Eureka Aggregation in Knife4j (YAML)\nDESCRIPTION: This YAML snippet configures Knife4j to aggregate OpenAPI documentation from services registered with Eureka. It specifies the Eureka server URL, the service name, and the location of the OpenAPI documentation endpoint. Setting `knife4j.enable-aggregation` to true enables the aggregation feature.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/aggregation-eureka.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  enable-aggregation: true\n  eureka:\n    enable: false\n    service-url: http://localhost:10000/eureka/\n    routes:\n      - name: 订单服务\n        service-name: service-order\n        location: /v2/api-docs?group=default\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j Cloud Discovery in Spring Boot\nDESCRIPTION: This Java code snippet demonstrates how to enable Knife4j Cloud discovery in a Spring Boot application using the `@EnableKnife4jCloudDiscovery` annotation. This annotation is essential for automatically registering the application's Swagger documentation with Knife4jCloud. The class also implements the `WebMvcConfigurer` interface, indicating it might have additional web-related configurations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jCloud.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@EnableKnife4jCloudDiscovery\n@SpringBootApplication\npublic class Knife4jSpringBootDemoApplication implements WebMvcConfigurer{\n    //more..\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters in Form Request - Java\nDESCRIPTION: This Java code snippet demonstrates how to use the `@ApiOperationSupport` annotation with the `ignoreParameters` attribute to hide specific parameters in a form-based request. It ignores the 'id' field of UptModel and the 'id' field within the OrderDate class.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/filterRequestParameter.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ApiOperation(value = \"新增Model接口1\")\n@ApiOperationSupport(ignoreParameters = {\"id\",\"orderDate.id\"})\n@PostMapping(\"/insertMode1l\")\npublic Rest<UptModel> insertModel1(UptModel uptModel){\n    Rest<UptModel> r =new Rest<>();\n    r.setData(uptModel);\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4jCloud Discovery in Spring Boot\nDESCRIPTION: This Java code snippet demonstrates how to enable the Knife4jCloud discovery feature in a Spring Boot application using the `@EnableKnife4jCloudDiscovery` annotation. The annotation is placed on the main application class to initiate automatic registration of Swagger documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jCloud.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@EnableKnife4jCloudDiscovery\n@SpringBootApplication\npublic class Knife4jSpringBootDemoApplication implements WebMvcConfigurer{\n    //more..\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom API with Springfox (Java)\nDESCRIPTION: This code snippet demonstrates how to add a custom API (login) using springfox by implementing the ApiListingScannerPlugin interface. It creates an Operation object with parameters, tags, summary, and notes. It supports simple form-based APIs only. For @RequestBody APIs, springdoc is recommended.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/customer-api.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@Slf4j\n@Component\npublic class CustomerApiPlugin implements ApiListingScannerPlugin {\n    \n    @Override\n    public List<ApiDescription> apply(DocumentationContext context) {\n        // consumers、produces\n        Set<String> mediaSet = new HashSet<>();\n        mediaSet.add(MediaType.APPLICATION_JSON_VALUE);\n        // 设定参数\n        List<Parameter> parameters = new ArrayList<>();\n        parameters.add(new ParameterBuilder().name(\"username\").required(true).modelRef(new ModelRef(\"String\")).defaultValue(\"test\").description(\"用户名\").build());\n        parameters.add(new ParameterBuilder().name(\"password\").required(true).modelRef(new ModelRef(\"String\")).defaultValue(\"123\").description(\"密码\").build());\n        // 接口的Tag\n        Set<String> tags = new HashSet<>();\n        tags.add(\"首页\");\n        // 构建Operation对象\n        Operation usernamePasswordOperation = new OperationBuilder(new CachingOperationNameGenerator())\n                .method(HttpMethod.POST)\n                .tags(tags)\n                .summary(\"用户名密码登录\")\n                .notes(\"用户登陆获取token\")\n                .parameters(parameters)\n                .consumes(mediaSet)\n                .produces(mediaSet)\n                .build();\n        \n        // 需要注意的是groupName需要和开发者创建的Docket对象赋值的groupName保持一致\n        ApiDescription loginApiDescription = new ApiDescription(\"hello\", \"/login\", \"登录接口描述\", Collections.singletonList(usernamePasswordOperation), false);\n        return Collections.singletonList(loginApiDescription);\n    }\n    \n    @Override\n    public boolean supports(DocumentationType documentationType) {\n        return documentationType == DocumentationType.SWAGGER_2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Field with HTML in Knife4j (Java)\nDESCRIPTION: This code snippet demonstrates how to include HTML tags within the `ApiModelProperty` annotation to format the description of a field in the Swagger/Knife4j documentation.  The span tag with inline CSS is used to highlight a portion of the description in red. Requires the springfox library.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-02-knife4j-2.0.7-issue.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@ApiModelProperty(value = \"奖金名称,记住:<br /><span style=\\\"color:red\\\">我很重要</span>\",example = \"MVP奖杯\")\nprivate String name;\n```\n\n----------------------------------------\n\nTITLE: Configure CORS Filter in Spring Boot\nDESCRIPTION: This snippet demonstrates how to configure a CORS (Cross-Origin Resource Sharing) filter in a Spring Boot application to enable cross-origin requests, which is a prerequisite for using the custom Host feature in Knife4j. It configures allowed origins, headers, and methods for requests.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/host.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic CorsFilter corsFilter(){\n    //针对CorsFilter详细的用法，不同的Spring Boot可能配置不太一样，建议开发者跟踪源码查看具体的使用方式\n    // 此处代码仅给出示例参考\n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    CorsConfiguration corsConfiguration=new CorsConfiguration();\n    corsConfiguration.setAllowCredentials(true);\n    corsConfiguration.addAllowedOrigin(\"*\");\n    corsConfiguration.addAllowedHeader(\"*\");\n    corsConfiguration.addAllowedMethod(\"*\");\n    corsConfiguration.setMaxAge(10000L);\n    source.registerCorsConfiguration(\"/**\",corsConfiguration);\n    CorsFilter corsFilter=new CorsFilter(source);\n    return corsFilter;\n}\n```\n\n----------------------------------------\n\nTITLE: Using i18n Annotations for API Documentation\nDESCRIPTION: This code snippet shows how to use i18n annotations in API documentation. The `@ApiOperation` annotation with `value` and `notes` attributes, which are keys for i18n messages. These keys will be resolved to their corresponding localized messages based on the configured locale.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/i18n.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n@ApiOperation(value = \"API_JOB_I18n\",notes = \"API_JOB_I18n_DESC\")\n@PostMapping(\"/hidden3\")\npublic ResponseEntity<ModelUser> i18n3(@RequestBody ModelUser sysUser){\n    return ResponseEntity.ok(sysUser);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a complex query parameter with content in JSON\nDESCRIPTION: This JSON defines a complex query parameter using the 'content' field to specify a JSON schema for an object with 'lat' and 'long' properties of type 'number'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration for Static Swagger Files\nDESCRIPTION: This configuration snippet shows how to configure an Nginx server to serve the static Swagger files. It specifies the listening port, server name, and the root directory where the static resources are located. The `location /` block maps all requests to the root to the specified directory containing the `swagger-bootstrap-ui` static files.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-static.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nserver {\n        listen       18001;\n        server_name  192.168.0.112;\n        #charset koi8-r;\n\n        location / {\n            #此处为swagger-bootstrap-ui项目中resources目录中的静态资源;\n            root /mnt/application/swagger-static;\n        }\n\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for OpenAPI2 with Spring Boot 2\nDESCRIPTION: This XML snippet shows the Maven dependency required to use Knife4j with OpenAPI2 and Spring Boot 2. It specifies the groupId, artifactId, and version for the `knife4j-openapi2-spring-boot-starter` dependency. This starter includes the UI and relies on springfox-swagger 2.10.5.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.0.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>\n    <version>4.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for OpenAPI3 with Spring Boot 2\nDESCRIPTION: This XML snippet shows the Maven dependency required to use Knife4j with OpenAPI3 and Spring Boot 2. It specifies the groupId, artifactId, and version for the `knife4j-openapi3-spring-boot-starter` dependency.  This starter includes the UI and relies on springdoc-openapi.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.0.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>\n    <version>4.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Security OAuth2 for Implicit Grant\nDESCRIPTION: This code snippet configures Spring Security OAuth2 to support the implicit grant type. It sets up an in-memory client with a client ID, secret, authorized grant types, redirect URIs, and scopes.  The redirect URI points to the OAuth2 callback page provided by Knife4j.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/oauth2.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n    //简化模式（implicit）\n    clients.inMemory()\n        .withClient(\"app1\").secret(\"123\")\n            .authorizedGrantTypes(\"implicit\")\n            .redirectUris(\"http://192.168.1.10:8080/webjars/oauth/oauth2.html\")\n            .scopes(\"read\",\"write\",\"reads\",\"writes\");\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Security Scheme Definition (JSON)\nDESCRIPTION: This JSON snippet shows how to define a security scheme for Authorization using the OpenAPI 3 specification. It defines a 'bearer' type HTTP security scheme under the 'Authorization' key within the `securitySchemes` section of the `components` object.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/add-authorization-header.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"components\": {\n        \"securitySchemes\": {\n            \"Authorization\": {\n                \"type\": \"http\",\n                \"scheme\": \"bearer\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Security Scheme Definition (YAML)\nDESCRIPTION: This YAML snippet demonstrates the correct way to define a Security Scheme for Authorization in the components section of an OpenAPI3 specification. The `type` is set to `http` and the `scheme` to `bearer` to indicate a bearer token-based authentication.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/add-authorization-header.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       type: object\n       properties:\n          name: \n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content: \n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content: \n      'application/json': {}\n      'application/xml': {}\n# 接口级别，这里引用鉴权方案\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j OpenAPI3\nDESCRIPTION: This XML snippet provides the Maven dependency for the Knife4j OpenAPI3 starter. This dependency allows developers to use Knife4j for documenting APIs based on the OpenAPI 3 specification in Spring Boot projects.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/index.mdx#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>\n    <version>4.4.0</version>\n</dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Dynamic Parameters with @DynamicParameters\nDESCRIPTION: This Java snippet demonstrates how to use the `@DynamicParameters` annotation to document dynamic request parameters for a REST endpoint that accepts a `HashMap`. It includes defining parameter names, values, examples, and data types using `@DynamicParameter` annotations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/dynamicRequestDescription.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PostMapping(\"/createOrder426\")\n@ApiOperation(value = \"jdk-HashMap-动态创建显示参数-无@RequestBody\")\n@DynamicParameters(name = \"CreateOrderHashMapModel\",properties = {\n        @DynamicParameter(name = \"\",value = \"注解id\",example = \"X000111\",required = true,dataTypeClass = Integer.class),\n        @DynamicParameter(name = \"name3\",value = \"订单编号-gson\"),\n        @DynamicParameter(name = \"name1\",value = \"订单编号1-gson\"),\n})\npublic Rest<HashMap> createOrder1235332(@RequestBody HashMap map){\n    Rest<HashMap> r=new Rest<>();\n    r.setData(map);\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating ParameterObject for Correct Parameter Parsing\nDESCRIPTION: This code snippet demonstrates the first solution: adding the `@ParameterObject` annotation to the DTO parameter in the API endpoint.  This ensures that Knife4j correctly parses the DTO's fields as individual parameters in the generated OpenAPI documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/v4/knife4j-parameterobject-flat-param.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n@Operation(summary = \"Get 请求\", tags = \"对接口分组\", description = \"对接口的作用进行描述\")\n@RequestMapping(value = \"/api/v1/open-api\", method = RequestMethod.GET)\npublic R<GetDTO> get(@ParameterObject GetDTO dto) {\n    return R.ok(dto);\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Cloud Gateway Route Configuration (YAML)\nDESCRIPTION: This YAML configuration defines routes for Spring Cloud Gateway. It configures routes for 'service-user' and 'service-order', specifying the URI, predicates (path), and filters. Crucially, it includes the 'SwaggerHeaderFilter' to ensure the correct basePath is available for Knife4j to generate documentation correctly. The 'StripPrefix=1' filter is used to remove the prefix from the request path before forwarding it to the respective service.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nspring:\n  application:\n    name: service-doc\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          #          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: service-user\n          uri: lb://service-user\n          predicates:\n            - Path=/user/**\n          #            - Header=Cookie,Set-Cookie\n          filters:\n            - SwaggerHeaderFilter\n            - StripPrefix=1\n        - id:  service-order\n          uri: lb://service-order\n          predicates:\n            - Path=/order/**\n          filters:\n            - SwaggerHeaderFilter  //指定filter\n            - StripPrefix=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger for Implicit Grant\nDESCRIPTION: This code snippet configures Swagger to use the implicit grant type for OAuth2 authentication. It defines an ImplicitGrant with a LoginEndpoint and configures the OAuth security scheme with the defined grant types and scopes. It is used to configure the Swagger Docket.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/oauth2.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Bean(value = \"defaultApi2\")\npublic Docket defaultApi2() {\n    //schema\n    List<GrantType> grantTypes=new ArrayList<>();\n    //简单模式implicit\n    ImplicitGrant implicitGrant=new ImplicitGrant(new LoginEndpoint(\"http://localhost:8999/oauth/authorize\"),\"access_token\");\n    grantTypes.add(implicitGrant);\n\n    OAuth oAuth=new OAuthBuilder().name(\"oauth2\")\n            .grantTypes(grantTypes).build();\n    //context\n    //scope方位\n    List<AuthorizationScope> scopes=new ArrayList<>();\n    scopes.add(new AuthorizationScope(\"read\",\"read all resources\"));\n    SecurityReference securityReference=new SecurityReference(\"oauth2\",scopes.toArray(new AuthorizationScope[]{}));\n    SecurityContext securityContext=new SecurityContext(CollectionUtil.newArrayList(securityReference),PathSelectors.ant(\"/api/**\"));\n    //schemas\n    List<SecurityScheme> securitySchemes=CollectionUtil.newArrayList(oAuth);\n    //securyContext\n    List<SecurityContext> securityContexts=CollectionUtil.newArrayList(securityContext);\n\n    String groupName=\"2.X版本\";\n    Docket docket=new Docket(DocumentationType.SWAGGER_2)\n            .host(\"https://www.baidu.com\")\n            .apiInfo(apiInfo())\n            .groupName(groupName)\n            .select()\n            .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n            .paths(PathSelectors.any())\n            .build()\n            .securityContexts(securityContexts).securitySchemes(securitySchemes);\n    return docket;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot i18n in YML\nDESCRIPTION: This snippet shows how to configure the Spring Boot framework's i18n functionality in the application's YAML configuration file. It defines the base name for message resource bundles, the encoding, and the cache duration. This enables the application to resolve localized messages from resource bundles.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/i18n.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nspring:\n  messages:\n    basename: i18n/message\n    encoding: utf-8\n    cache-duration: 3600\n```\n\n----------------------------------------\n\nTITLE: Adding knife4j Gateway Starter Dependency (Maven)\nDESCRIPTION: This XML snippet shows how to add the knife4j-gateway-spring-boot-starter dependency to a Spring Cloud Gateway project using Maven.  Replace `${最新版本}` with the desired version.  It requires a Maven-based project setup.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j/knife4j-gateway-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-gateway-spring-boot-starter</artifactId>\n    <version>${最新版本}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Knife4j OpenAPI2 Configuration (YML)\nDESCRIPTION: This YAML snippet presents Knife4j-specific configuration properties. It includes settings for enabling Knife4j, setting the document title, description, contact information, and defining API groups. The `api-rule` and `api-rule-resources` properties are used to define which APIs should be included in the documentation based on package name.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/index.mdx#_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  openapi:\n    title: Knife4j官方文档\n    description: \"`我是测试`,**你知道吗**\n    # aaa\"\n    email: xiaoymin@foxmail.com\n    concat: 八一菜刀\n    url: https://docs.xiaominfo.com\n    version: v4.0\n    license: Apache 2.0\n    license-url: https://stackoverflow.com/\n    terms-of-service-url: https://stackoverflow.com/\n    group:\n      test1:\n        group-name: 分组名称\n        api-rule: package\n        api-rule-resources:\n          - com.knife4j.demo.new3\n```\n\n----------------------------------------\n\nTITLE: Gateway Application YAML Configuration\nDESCRIPTION: This YAML configuration defines the gateway properties, including the server port, application name, discovery locator settings, and route definitions. It configures the gateway to discover services via Eureka and defines routes for the user and order services with path predicates, filters, and prefix stripping.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nserver:\n  port: 10003\nspring:\n  application:\n    name: service-doc\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          #          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: service-user\n          uri: lb://service-user\n          predicates:\n            - Path=/user/**\n          #            - Header=Cookie,Set-Cookie\n          filters:\n            - SwaggerHeaderFilter\n            - StripPrefix=1\n        - id:  service-order\n          uri: lb://service-order\n          predicates:\n            - Path=/order/**\n          filters:\n            - SwaggerHeaderFilter\n            - StripPrefix=1\n\n\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:10000/eureka/\n\nlogging:\n  level:\n    org.springframework:cloud.gateway: debug\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters in JSON Request - Java\nDESCRIPTION: This Java code snippet shows how to use `@ApiOperationSupport` to ignore parameters in a JSON-based request.  The `ignoreParameters` attribute specifies the parameters to be hidden, including nested properties like `uptModel.orderDate.id`. The `@RequestBody` annotation indicates that the `UptModel` parameter is received in the request body as JSON.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/filterRequestParameter.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@ApiOperation(value = \"新增Model接口\")\n@ApiOperationSupport(ignoreParameters = {\"uptModel.id\",\"uptModel.name\",\"uptModel.orderDate.id\"})\n@PostMapping(\"/insertModel\")\npublic Rest<UptModel> insertModel(@RequestBody UptModel uptModel){\n    Rest<UptModel> r =new Rest<>();\n    r.setData(uptModel);\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j in YML\nDESCRIPTION: This YML configuration snippet enables Knife4j, which is required for the Spring Security annotation enhancements to function correctly. Without this configuration, the annotations will not be processed and displayed in the API documentation. This setting is mandatory starting from version 4.0.0.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/springSecurity.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Knife4j Dependency (> 2.0.4) - Maven\nDESCRIPTION: Introduces Knife4j dependency for versions later than 2.0.4, requiring only one artifact: `knife4j-spring-mvc`. Developers need to include this dependency in their Maven project's `pom.xml` file.  It specifies the group ID, artifact ID, and version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springmvc.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!--引入Knife4j-->\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-mvc</artifactId>\n    <!--在引用时请在maven中央仓库搜索最新版本号，如果不存在则代表尚未发布,作者正在努力开发中-->\n    <version>2.0.5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Nacos Mode Configuration with nacos.properties\nDESCRIPTION: This properties file configures Nacos mode for Knife4j. It specifies the Nacos server address, username, password, namespace, service name, group name, and location of the OpenAPI document.  This setup allows Knife4j to dynamically aggregate and display API documentation from services registered with a Nacos registry.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_8\n\nLANGUAGE: Properties\nCODE:\n```\nknife4j.nacos[0].server=127.0.0.1:8848\nknife4j.nacos[0].username=nacos\nknife4j.nacos[0].password=nacos\nknife4j.nacos[0].namespace=dev\nknife4j.nacos[0].routes[0].name=用户\nknife4j.nacos[0].routes[0].serviceName=userService\nknife4j.nacos[0].routes[0].groupName=DEFAULT_GROUP\nknife4j.nacos[0].routes[0].location=/v2/api-docs?group=2.X版本\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Security OAuth2 for Authorization Code Grant\nDESCRIPTION: This code snippet configures Spring Security OAuth2 to support the authorization code grant type.  It sets up an in-memory client with a client ID, secret, authorized grant types, redirect URIs, and scopes. The redirect URI points to the OAuth2 callback page provided by Knife4j.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/oauth2.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n    //授权码模式（authorization code）\n    clients.inMemory()\n        .withClient(\"app1\").secret(\"123\")\n            .authorizedGrantTypes(\"authorization_code\")\n            .redirectUris(\"http://192.168.1.10:8080/webjars/oauth/oauth2.html\")\n            .scopes(\"read\",\"write\",\"reads\",\"writes\");\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Mode Configuration YAML\nDESCRIPTION: This YAML snippet shows how to configure Knife4j to aggregate OpenAPI specifications from HTTP endpoints using the Cloud mode. The `uri` and `location` properties specify the endpoint to retrieve the OpenAPI specification from. It also shows optional Basic authentication configuration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregation.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enableAggregation: true\n  cloud:\n    enable: true\n    routes:\n      - name: 用户体系\n        uri: 192.168.0.152:8999\n        location: /v2/api-docs?group=2.X版本\n        swaggerVersion: 2.0\n        servicePath: /abbb/ffe\n        routeAuth:\n          enable: true\n          username: test3\n          password: 66666\n    routeAuth:\n      enable: true\n      username: test\n      password: 12313\n```\n\n----------------------------------------\n\nTITLE: Define Dubbox Swagger Service Interface\nDESCRIPTION: This Java interface `DubboxSwaggerService` defines a JAX-RS service endpoint for retrieving the Swagger/OpenAPI definition. It uses JAX-RS annotations to specify the path, consumption, and production types, as well as the HTTP GET method for the swagger endpoint.  This service is responsible for exposing the Swagger definition that will be consumed by Knife4j.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport javax.servlet.ServletConfig;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Application;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.HttpHeaders;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.UriInfo;\n\n/**\n * 类描述：dubbox+swagger\n *\n * @author xksgs\n * @date 2021-09-02\n */\n@Path(\"dubboxswagger\")\n@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\n@Produces({MediaType.APPLICATION_JSON + \"; \" + \"charset=UTF-8\", MediaType.TEXT_XML + \"; \" + \"charset=UTF-8\"})\npublic interface DubboxSwaggerService {\n\n    @GET\n    @Path(\"swagger\")\n    Response getListingJson(@Context Application app,\n                            @Context ServletConfig sc, @Context HttpHeaders headers,\n                            @Context UriInfo uriInfo);\n}\n```\n\n----------------------------------------\n\nTITLE: Security Requirement Object (OAuth2, JSON)\nDESCRIPTION: This JSON defines a security requirement object for an OAuth2 scheme, 'petstore_auth', listing the required scopes: 'write:pets' and 'read:pets'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_103\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Resource Configuration Java\nDESCRIPTION: This Java code snippet defines a `SwaggerResourceConfig` class that implements the `SwaggerResourcesProvider` interface.  It dynamically discovers Swagger resources from registered microservices via the Spring Cloud Gateway's `RouteLocator` and `GatewayProperties`. This is required to display aggregated documentation in Knife4j.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Slf4j\n@Component\n@Primary\n@AllArgsConstructor\npublic class SwaggerResourceConfig implements SwaggerResourcesProvider {\n\n    private final RouteLocator routeLocator;\n    private final GatewayProperties gatewayProperties;\n\n\n    @Override\n    public List<SwaggerResource> get() {\n        List<SwaggerResource> resources = new ArrayList<>();\n        List<String> routes = new ArrayList<>();\n        routeLocator.getRoutes().subscribe(route -> routes.add(route.getId()));\n        gatewayProperties.getRoutes().stream().filter(routeDefinition -> routes.contains(routeDefinition.getId())).forEach(route -> {\n            route.getPredicates().stream()\n                    .filter(predicateDefinition -> (\"Path\").equalsIgnoreCase(predicateDefinition.getName()))\n                    .forEach(predicateDefinition -> resources.add(swaggerResource(route.getId(),\n                            predicateDefinition.getArgs().get(NameUtils.GENERATED_NAME_PREFIX + \"0\")\n                                    .replace(\"**\", \"v2/api-docs\"))));\n        });\n\n        return resources;\n    }\n\n    private SwaggerResource swaggerResource(String name, String location) {\n        log.info(\"name:{},location:{}\",name,location);\n        SwaggerResource swaggerResource = new SwaggerResource();\n        swaggerResource.setName(name);\n        swaggerResource.setLocation(location);\n        swaggerResource.setSwaggerVersion(\"2.0\");\n        return swaggerResource;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Aggregation in Spring Boot (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure Knife4j Aggregation in a Spring Boot application using application.yml or application.properties file.  It shows the configuration options for Cloud, Eureka, Nacos, and Disk modes, allowing users to aggregate OpenAPI documents from different sources. Note that only one of the enable properties for the routes (cloud, eureka, nacos, disk) should be set to true.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/aggregation-introduction.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable-aggregation: true\n  cloud:\n    enable: true\n    routes:\n      - name: 用户体系\n        uri: 192.168.0.152:8999\n        location: /v2/api-docs?group=2.X版本\n  eureka:\n    enable: false\n    service-url: http://localhost:10000/eureka/\n    routes:\n      - name: 订单服务\n        service-name: service-order\n        location: /v2/api-docs?group=default\n  nacos:\n    enable: false\n    service-url: http://localhost:8848/nacos/\n    routes:\n      - name: 订单服务\n        service-name: service-order\n        location: /v2/api-docs?group=default\n  disk:\n    enable: false\n    routes:\n      - name: 用户\n        location: classpath:openapi/user.json\n```\n\n----------------------------------------\n\nTITLE: Swagger Configuration Java\nDESCRIPTION: This Java code configures Swagger for use with Knife4j in a Spring Boot application.  It defines a Docket bean, specifying API information, group name, controller package to scan, and path selection. It utilizes `@Configuration` and `@EnableSwagger2WebMvc` annotations.  The `RequestHandlerSelectors.basePackage` method is configured to scan `com.github.xiaoymin.knife4j.controller` package.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springboot.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class Knife4jConfiguration {\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(new ApiInfoBuilder()\n                        //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                        .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                        .termsOfServiceUrl(\"http://www.xx.com/\")\n                        .contact(\"xx@qq.com\")\n                        .version(\"1.0\")\n                        .build())\n                //分组名称\n                .groupName(\"2.X版本\")\n                .select()\n                //这里指定Controller扫描包路径\n                .apis(RequestHandlerSelectors.basePackage(\"com.github.xiaoymin.knife4j.controller\"))\n                .paths(PathSelectors.any())\n                .build();\n        return docket\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Routes in Cloud Mode\nDESCRIPTION: This snippet configures routes for Cloud mode within the `cloud.properties` file. It defines the service name, location (API docs endpoint), and URI for each route. This allows aggregating documentation from multiple services.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.cloud.routes[0].name=大数据平台1\nknife4j.cloud.routes[0].location=/v2/api-docs?group=3.默认接口\nknife4j.cloud.routes[0].uri=http://knife4j.xiaominfo.com\nknife4j.cloud.routes[1].name=甄选平台\nknife4j.cloud.routes[1].location=/v2/api-docs?group=2.X版本\nknife4j.cloud.routes[1].uri=http://knife4j.xiaominfo.com\n```\n\n----------------------------------------\n\nTITLE: Eureka Mode Configuration with eureka.properties\nDESCRIPTION: This properties file configures Eureka mode for Knife4j.  It specifies the Eureka service URL, username, password, service name, and location of the OpenAPI document. This allows Knife4j to discover and aggregate documentation from services registered in a Eureka service registry.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_6\n\nLANGUAGE: Properties\nCODE:\n```\nknife4j.eureka[0].serviceUrl=http://localhost:10000/eureka/\nknife4j.eureka[0].username=eureka鉴权账号\nknife4j.eureka[0].password=eureka鉴权密码\nknife4j.eureka[0].routes[0].name=用户\nknife4j.eureka[0].routes[0].serviceName=userService\nknife4j.eureka[0].routes[0].location=/v2/api-docs?group=2.X版本\n\n```\n\n----------------------------------------\n\nTITLE: REST Controller Example Java\nDESCRIPTION: This Java code defines a simple REST controller with a single endpoint `/sayHi`. It uses Spring annotations such as `@RestController`, `@GetMapping`, `@RequestParam`, `@Api`, `@ApiOperation`, and `@ApiImplicitParam`. The `sayHi` method takes a `name` parameter and returns a greeting.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springboot.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Api(tags = \"首页模块\")\n@RestController\npublic class IndexController {\n\n    @ApiImplicitParam(name = \"name\",value = \"姓名\",required = true)\n    @ApiOperation(value = \"向客人问好\")\n    @GetMapping(\"/sayHi\")\n    public ResponseEntity<String> sayHi(@RequestParam(value = \"name\")String name){\n        return ResponseEntity.ok(\"Hi:\"+name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Gateway Aggregation with Service Discovery - YAML\nDESCRIPTION: This snippet demonstrates the simplest configuration for enabling gateway aggregation in Knife4j, utilizing the service discovery strategy to aggregate Swagger2 or OpenAPI3 specifications from all child services.  The `version` property specifies the default specification to aggregate.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.3.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      # 聚合所有子服务(swagger2规范)，子服务是3规范则替换为openapi3\n      version: swagger2\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Eureka Service URLs and Routes\nDESCRIPTION: This snippet demonstrates configuring Eureka service URLs and routes in `eureka.properties`. It defines the Eureka service URL, service name, and location of the API documentation for each route. This is used to aggregate documentation from services registered with Eureka.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.eureka.serviceUrl=http://localhost:10000/eureka/\nknife4j.eureka.routes[0].name=用户服务asdf\nknife4j.eureka.routes[0].serviceName=service-user\nknife4j.eureka.routes[0].location=/aub/v2/api-docs?group=default\nknife4j.eureka.routes[1].name=订单服务2ff\nknife4j.eureka.routes[1].serviceName=service-order\nknife4j.eureka.routes[1].location=/v2/api-docs?group=default\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Gateway for Service Discovery - YML\nDESCRIPTION: This YAML configuration snippet enables Knife4j Gateway for service discovery. It configures the gateway to automatically aggregate OpenAPI documentation from registered microservices using the 'discover' strategy. The version specifies the OpenAPI specification version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.1.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n    gateway:\n        enable: true\n        # 指定服务发现的模式聚合微服务文档，并且是默认`default`分组\n        strategy: discover\n        discover:\n            enable: true\n            # 指定版本号(Swagger2|OpenAPI3)\n            version : openapi3\n```\n\n----------------------------------------\n\nTITLE: Swagger Configuration - Java\nDESCRIPTION: Configures Swagger for a Spring application using `@Configuration` and `@EnableSwagger2` annotations. Defines a `Docket` bean to customize Swagger's behavior, including API information, group name, request handler selection, and path selection. The `RequestHandlerSelectors.basePackage` method is used to limit API documentation to a specific package.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springmvc.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfiguration {\n\n\n    @Bean\n    public Docket defaultApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(groupApiInfo())\n                .groupName(\"默认接口\")\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.xiaominfo.knife4j.controller\"))\n                //.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n\n    private ApiInfo groupApiInfo(){\n        return new ApiInfoBuilder()\n                .title(\"swagger-bootstrap-ui很棒~~~！！！\")\n                .description(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.group.com/\")\n                .contact(\"group@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Docket for OAuth2 Client Credentials in Knife4j\nDESCRIPTION: This snippet configures a Docket object for Swagger/Knife4j, enabling OAuth2 client credentials flow. It defines the OAuth2 grant type, scopes, security reference, security context, and security schemes. This configuration allows users to authorize and test APIs secured with OAuth2 client credentials within the Swagger UI.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/oauth2-client_credentials.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket productApi() {\n        //schema\n        List<GrantType> grantTypes=new ArrayList<>();\n        //客户端模式（client credentials）\n        String clientTokenUrl=\"http://localhost:18010/oauth/token\";\n        ClientCredentialsGrant clientCredentialsGrant=new ClientCredentialsGrant(clientTokenUrl);\n        grantTypes.add(clientCredentialsGrant);\n        OAuth oAuth=new OAuthBuilder().name(\"oauth2\")\n                .grantTypes(grantTypes).build();\n        //context\n        //scope方位\n        List<AuthorizationScope> scopes=new ArrayList<>();\n        scopes.add(new AuthorizationScope(\"read\",\"read  resources\"));\n        scopes.add(new AuthorizationScope(\"write\",\"write resources\"));\n        scopes.add(new AuthorizationScope(\"reads\",\"read all resources\"));\n        scopes.add(new AuthorizationScope(\"writes\",\"write all resources\"));\n\n        SecurityReference securityReference=new SecurityReference(\"oauth2\",scopes.toArray(new AuthorizationScope[]{}));\n        SecurityContext securityContext=new SecurityContext(Lists.newArrayList(securityReference),PathSelectors.ant(\"/api/**\"));\n        //schemas\n        List<SecurityScheme> securitySchemes=Lists.newArrayList(oAuth);\n        //securyContext\n        List<SecurityContext> securityContexts=Lists.newArrayList(securityContext);\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.xiaominfo.knife4j.oauth2.web\"))\n                .paths(PathSelectors.any())\n                .build()\n                .securityContexts(securityContexts)\n                .securitySchemes(securitySchemes)\n                .apiInfo(apiInfo());\n\n\n    }\n\n\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder().title(\"knife4j-oauth2-demo\").description(\"\")\n                .termsOfServiceUrl(\"https://doc.xiaominfo.com\")\n                .contact(new Contact(\"Developers\", \"https://gitee.com/xiaoym/knife4j\", \"\"))\n                .license(\"Open Source\")\n                .licenseUrl(\"\\\"https://www.apache.org/licenses/LICENSE-2.0\")\n                .version(\"1.0.0\")\n                .build();\n\n    }\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: SwaggerHeaderFilter for Spring Cloud Gateway (Java)\nDESCRIPTION: This filter adds the X-Forwarded-Prefix header to the request, which is required by Knife4j to correctly determine the basePath for API documentation when using Spring Cloud Gateway.  It checks if the request path ends with /v2/api-docs, extracts the basePath, and adds it as a header to the request. Dependencies: Spring Cloud Gateway, Spring Web.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class SwaggerHeaderFilter extends AbstractGatewayFilterFactory {\n    private static final String HEADER_NAME = \"X-Forwarded-Prefix\";\n\n    private static final String URI = \"/v2/api-docs\";\n\n    @Override\n    public GatewayFilter apply(Object config) {\n        return (exchange, chain) -> {\n            ServerHttpRequest request = exchange.getRequest();\n            String path = request.getURI().getPath();\n            if (!StringUtils.endsWithIgnoreCase(path,URI )) {\n                return chain.filter(exchange);\n            }\n            String basePath = path.substring(0, path.lastIndexOf(URI));\n            ServerHttpRequest newRequest = request.mutate().header(HEADER_NAME, basePath).build();\n            ServerWebExchange newExchange = exchange.mutate().request(newRequest).build();\n            return chain.filter(newExchange);\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j OpenAPI2\nDESCRIPTION: This XML snippet illustrates adding the Knife4j OpenAPI2 starter dependency to a Maven project.  This is needed for projects using Spring Boot 2 and the OpenAPI 2 (Swagger) specification.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/index.mdx#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>\n    <version>4.4.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configure Security Filters in XML\nDESCRIPTION: This XML snippet demonstrates configuring filters in `web.xml` to control access to Swagger resources in a SpringMVC application. It includes a filter to block resources in production and a filter for Basic authentication using username and password. Dependencies: SpringMVC, Knife4j.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/accessControl.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<!--Knife4j提供的Swagger增强功能,Filter过滤保护Swagger资源-->\n  <!--生产环境Filter-->\n  <filter>\n    <filter-name>swaggerProductionFilter</filter-name>\n    <filter-class>com.github.xiaoymin.knife4j.spring.filter.ProductionSecurityFilter</filter-class>\n    <init-param>\n      <param-name>production</param-name>\n      <param-value>false</param-value>\n    </init-param>\n  </filter>\n  <filter-mapping>\n    <filter-name>swaggerProductionFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n  <!--Swagger资源的Basic认证保护策略-->\n  <filter>\n    <filter-name>swaggerSecurityBasic</filter-name>\n    <filter-class>com.github.xiaoymin.knife4j.spring.filter.SecurityBasicAuthFilter</filter-class>\n    <!--开启basic认证-->\n    <init-param>\n      <param-name>enableBasicAuth</param-name>\n      <param-value>true</param-value>\n    </init-param>\n    <!--用户名&密码-->\n    <init-param>\n      <param-name>userName</param-name>\n      <param-value>lisi</param-value>\n    </init-param>\n    <init-param>\n      <param-name>password</param-name>\n      <param-value>123</param-value>\n    </init-param>\n  </filter>\n  <filter-mapping>\n    <filter-name>swaggerSecurityBasic</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```\n\n----------------------------------------\n\nTITLE: Knife4j Aggregation YML Configuration (YML)\nDESCRIPTION: This YML snippet configures Knife4j for disk-based aggregation in a Spring Boot application. It sets the server port, enables aggregation globally, enables disk aggregation specifically, and defines routes to the OpenAPI JSON files. The `location` parameter specifies the classpath location of the OpenAPI specification file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-disk.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nserver:\n  port: 19081\nknife4j:\n  enableAggregation: true\n  disk:\n    enable: true\n    routes:\n      - name: 用户\n        location: classpath:openapi/user.json\n\n```\n\n----------------------------------------\n\nTITLE: Configure ClientDetailsService for Password Grant - Java\nDESCRIPTION: Configures the ClientDetailsService in Spring Security to enable the password grant type.  It creates an in-memory client with a client ID 'app1', a secret '123' (encoded), and specifies 'password' as the authorized grant type.  Scopes 'read', 'write', 'reads', and 'writes' are also defined for the client.  Requires Spring Security dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/oauth2-password.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n    //密码模式（resource owner password credentials）\n    clients.inMemory()\n        .withClient(\"app1\").secret(noOpPasswordEncoder.encode(\"123\"))\n            .authorizedGrantTypes(\"password\")\n            .scopes(\"read\",\"write\",\"reads\",\"writes\");\n}\n```\n\n----------------------------------------\n\nTITLE: Microservice Application YAML Configuration\nDESCRIPTION: This YAML configuration defines the application properties for a microservice, including the server port, application name, and Eureka client service URL. It specifies the location of the Eureka server for service registration and discovery.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nserver:\n  port: 10001\nspring:\n  application:\n    name: service-user\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:10000/eureka/\n```\n\n----------------------------------------\n\nTITLE: Example API Endpoint with HttpSession Parameter - Java\nDESCRIPTION: This example shows an API endpoint that takes an HttpSession object as a parameter.  HttpSession is often automatically passed without needing explicit input in the request body. The goal is to remove it from the swagger documentation. This example represents the initial state before any modifications to ignore the HttpSession parameter. Dependencies include Spring Web and Swagger annotations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox21.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@PostMapping(\"/createOr33der\")\n@ApiOperation(value = \"创建订单\")\npublic Rest<Order> createOrdetr(@RequestBody Order order, HttpSession httpSession){\n    Rest<Order> r=new Rest<>();\n    r.setData(order);\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example in YAML\nDESCRIPTION: Defines an example for a response, specifying the description, content type, schema reference, and examples. It also uses a reference to an external example defined elsewhere in the OpenAPI document.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_65\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  '200':\n    description: your car appointment has been booked\n    content: \n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Document Locations in YML\nDESCRIPTION: This YAML snippet configures custom document locations in the application.yml file for Knife4j. It defines the group, name, and locations of the markdown files to be included in the documentation. The 'locations' property specifies the path to the markdown files, which can be a directory or a specific file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/selfdocument.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  documents:\n    -\n      group: 1.2.x\n      name: 测试自定义标题分组\n      # 某一个文件夹下所有的.md文件\n      locations: classpath:markdown/*\n    -\n      group: 1.2.x\n      name: 接口签名\n      # 某一个文件夹下单个.md文件\n      locations: classpath:markdown/sign.md\n```\n\n----------------------------------------\n\nTITLE: Disk Mode Configuration YAML\nDESCRIPTION: This YAML snippet shows how to configure Knife4j to aggregate OpenAPI specifications from local JSON files using the Disk mode. The `location` property specifies the classpath location of the OpenAPI JSON file. Only one mode (Disk, Cloud, Eureka, or Nacos) can be enabled at a time.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregation.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enableAggregation: true\n  disk:\n    enable: true\n    routes:\n      - name: 用户\n        location: classpath:openapi/user.json\n```\n\n----------------------------------------\n\nTITLE: Swagger Resource Configuration Java Class\nDESCRIPTION: This Java class implements the `SwaggerResourcesProvider` interface to dynamically discover and aggregate Swagger resources from microservices registered in Eureka. It retrieves route definitions from the gateway properties and creates SwaggerResource objects for each service, defining the name, location, and Swagger version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Slf4j\n@Component\n@Primary\n@AllArgsConstructor\npublic class SwaggerResourceConfig implements SwaggerResourcesProvider {\n\n    private final RouteLocator routeLocator;\n    private final GatewayProperties gatewayProperties;\n\n\n    @Override\n    public List<SwaggerResource> get() {\n        List<SwaggerResource> resources = new ArrayList<>();\n        List<String> routes = new ArrayList<>();\n        routeLocator.getRoutes().subscribe(route -> routes.add(route.getId()));\n        gatewayProperties.getRoutes().stream().filter(routeDefinition -> routes.contains(routeDefinition.getId())).forEach(route -> {\n            route.getPredicates().stream()\n                    .filter(predicateDefinition -> (\"Path\").equalsIgnoreCase(predicateDefinition.getName()))\n                    .forEach(predicateDefinition -> resources.add(swaggerResource(route.getId(),\n                            predicateDefinition.getArgs().get(NameUtils.GENERATED_NAME_PREFIX + \"0\")\n                                    .replace(\"**\", \"v2/api-docs\"))));\n        });\n\n        return resources;\n    }\n\n    private SwaggerResource swaggerResource(String name, String location) {\n        log.info(\"name:{},location:{}\",name,location);\n        SwaggerResource swaggerResource = new SwaggerResource();\n        swaggerResource.setName(name);\n        swaggerResource.setLocation(location);\n        swaggerResource.setSwaggerVersion(\"2.0\");\n        return swaggerResource;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Disk Mode\nDESCRIPTION: This YAML snippet configures a Docker Compose service for Knife4j in Disk mode. It defines the container name, restart policy, image, network mode, volume mapping for the data directory, port mapping, and environment variables to specify the disk source and directory.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# 通过docker-compose可以快速部署knife4j服务\nversion: \"2.0\"\nservices:\n  knife4j:\n    container_name: knife4j-desktop\n    restart: always\n    image: \"xiaoymin/knife4j:v2.0\"\n    network_mode: \"bridge\"\n    # 本地磁盘目录映射\n    volumes:\n      - D:\\Temp\\data:/knife4j/data\n    ports:\n      - \"10000:10000\"\n    # 指定配置属性模式为disk本地磁盘\n    environment:\n      - knife4j.source=disk\n      - knife4j.disk.dir=/knife4j/data\n\n```\n\n----------------------------------------\n\nTITLE: Startup Script (Shell)\nDESCRIPTION: This shell script (`startup.sh`) starts the knife4j-admin application.  It executes the JAR file with specific memory allocation parameters. The command redirects standard output and standard error to `/dev/null` to run the application in the background. It requires execute permissions.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/knife4j-admin-deploy.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnohup java -Xms512m -Xmx512m -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=256m -XX:MaxNewSize=256m -jar /mnt/application/kadmin/knife4j-admin-1.0.jar >> /dev/null 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j OpenAPI3 (Jakarta)\nDESCRIPTION: This XML snippet demonstrates how to add the Knife4j OpenAPI3 Jakarta starter dependency to a Maven project. This dependency is required for using Knife4j with Spring Boot 3 and Jakarta EE.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/index.mdx#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>\n    <version>4.4.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Aggregation (Nacos Mode)\nDESCRIPTION: This YAML snippet configures Knife4j to aggregate OpenAPI specifications from services registered in a Nacos registry (Nacos mode). The `serviceUrl` specifies the Nacos server address, and the `routes` section defines the services to aggregate, using their `serviceName` in Nacos.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregation.md#_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enableAggregation: true\n  nacos:\n    enable: true\n    serviceUrl: http://192.168.0.112:8804/nacos/\n    routeAuth:\n      enable: true\n      username: test\n      password: 12313\n    routes:\n      - name: 订单服务\n        serviceName: service-order\n        groupName: test\n        namespaceId: test\n        clusters: test\n        location: /v2/api-docs?group=default\n        swaggerVersion: 2.0\n        servicePath: /order\n        routeAuth:\n          enable: true\n          username: test\n          password: 12313\n```\n\n----------------------------------------\n\nTITLE: Manual Configuration of Routes in YAML\nDESCRIPTION: This YAML snippet configures manual routes for documentation aggregation. It defines routes for `user-service` and `order-service` with specific names, service names, and URLs.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/gateway/knife4j-gateway-introduce.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  gateway:\n    enabled: true\n    # 选择手动\n    strategy: manual\n    routes:\n      - name: 用户服务\n        service-name: user-service\n        url: /user/v2/api-docs\n      - name: 订单服务\n        service-name: order-service\n        url: /order/v3/api-docs\n\n```\n\n----------------------------------------\n\nTITLE: Install Swashbuckle.AspNetCore and Knife4jUI\nDESCRIPTION: This snippet demonstrates how to install the necessary NuGet packages (Swashbuckle.AspNetCore.Swagger, Swashbuckle.AspNetCore.SwaggerGen, and IGeekFan.AspNetCore.Knife4jUI) using either the Package Manager Console or the .NET CLI. These packages are required for integrating Swagger/OpenAPI and Knife4j UI into a .NET Core project.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-guid.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nPackage Manager : \n\nInstall-Package Swashbuckle.AspNetCore.Swagger\nInstall-Package Swashbuckle.AspNetCore.SwaggerGen\nInstall-Package IGeekFan.AspNetCore.Knife4jUI\n\nOR\n\nCLI :\n\ndotnet add package Swashbuckle.AspNetCore.Swagger\ndotnet add package Swashbuckle.AspNetCore.SwaggerGen\ndotnet add package IGeekFan.AspNetCore.Knife4jUI\n```\n\n----------------------------------------\n\nTITLE: Swagger Configuration with SpringAddtionalModelService\nDESCRIPTION: This snippet shows how to inject the SpringAddtionalModelService into the SwaggerConfiguration. This service is used for scanning packages to find additional models. The `@EnableSwaggerBootstrapUI` annotation is crucial for ensuring correct operation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox11.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2\n@EnableSwaggerBootstrapUI\n@Import(BeanValidatorPluginsConfiguration.class)\npublic class SwaggerConfiguration {\n\n    @Autowired\n    SpringAddtionalModelService springAddtionalModelService;\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Global OpenAPI Customizer (Java)\nDESCRIPTION: This Java code demonstrates how to use a `GlobalOpenApiCustomizer` to apply a Security Requirement to all operations within a specific OpenAPI instance. This approach avoids the need to annotate each endpoint individually with `@SecurityRequirement`, providing a global configuration option.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/add-authorization-header.mdx#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic GlobalOpenApiCustomizer orderGlobalOpenApiCustomizer() {\n    return openApi -> {\n        // 全局添加鉴权参数\n        if(openApi.getPaths()!=null){\n            openApi.getPaths().forEach((s, pathItem) -> {\n                // 为所有接口添加鉴权\n                pathItem.readOperations().forEach(operation -> {\n                    peration.addSecurityItem(new SecurityRequirement().addList(HttpHeaders.AUTHORIZATION));\n                });\n            });\n        }\n\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for OpenAPI3 with Spring Boot 3\nDESCRIPTION: This XML snippet shows the Maven dependency required to use Knife4j with OpenAPI3 and Spring Boot 3. It specifies the groupId, artifactId, and version for the `knife4j-openapi3-jakarta-spring-boot-starter` dependency. This starter includes the UI and relies on springdoc-openapi.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.0.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>\n    <version>4.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: SpringBoot WebMvcConfigurer Implementation in Java\nDESCRIPTION: This Java code shows a SpringBoot application implementing WebMvcConfigurer to add resource handlers for Swagger UI. It maps /doc.html to classpath:/META-INF/resources/ and /webjars/** to classpath:/META-INF/resources/webjars/, resolving 404 errors when accessing doc.html.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/old.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@SpringBootApplication\n@ConditionalOnClass(SpringfoxWebMvcConfiguration.class)\npublic class SwaggerBootstrapUiDemoApplication  implements WebMvcConfigurer{\n\n\t@Override\n\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\tregistry.addResourceHandler(\"doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n\t\tregistry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Spring REST Controller with OpenAPI3 Annotations (JavaScript)\nDESCRIPTION: This Javascript snippet demonstrates a Spring REST controller with OpenAPI3 annotations. It includes annotations for defining the API endpoint, request body, parameters, headers, and path variables. This code requires `springdoc-openapi` and `knife4j` dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/index.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n@RestController\n@RequestMapping(\"body\")\n@Tag(name = \"body参数\")\npublic class BodyController {\n\n    @Operation(summary = \"普通body请求\")\n    @PostMapping(\"/body\")\n    public ResponseEntity<FileResp> body(@RequestBody FileResp fileResp){\n        return ResponseEntity.ok(fileResp);\n    }\n\n    @Operation(summary = \"普通body请求+Param+Header+Path\")\n    @Parameters({\n            @Parameter(name = \"id\",description = \"文件id\",in = ParameterIn.PATH),\n            @Parameter(name = \"token\",description = \"请求token\",required = true,in = ParameterIn.HEADER),\n            @Parameter(name = \"name\",description = \"文件名称\",required = true,in=ParameterIn.QUERY)\n    })\n    @PostMapping(\"/bodyParamHeaderPath/{id}\")\n    public ResponseEntity<FileResp> bodyParamHeaderPath(@PathVariable(\"id\") String id,@RequestHeader(\"token\") String token, @RequestParam(\"name\")String name,@RequestBody FileResp fileResp){\n        fileResp.setName(fileResp.getName()+\",receiveName:\"+name+\",token:\"+token+\",pathID:\"+id);\n        return ResponseEntity.ok(fileResp);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j in application.yml\nDESCRIPTION: This YAML snippet demonstrates how to enable Knife4j by setting the 'enable' property to true in the application.yml or application.properties file. This is a prerequisite for using any Knife4j features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/selfdocument.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Enable Basic Authentication in YML\nDESCRIPTION: This YAML snippet shows how to enable Basic authentication for Swagger/Knife4j.  It configures a username and password that users must provide to access the documentation. Dependencies: Spring Boot\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/accessControl.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  # 开启增强配置 \n  enable: true\n　# 开启Swagger的Basic认证功能,默认是false\n  basic:\n      enable: true\n      # Basic认证用户名\n      username: test\n      # Basic认证密码\n      password: 123\n```\n\n----------------------------------------\n\nTITLE: Add Knife4j Dependency XML\nDESCRIPTION: This XML snippet adds the Knife4j Spring Boot Starter dependency to a Maven project's pom.xml file. It is required to integrate Knife4j with a Spring Boot application. Version `2.0.9` is specified.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springboot.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <version>2.0.9</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Info Object YAML Example\nDESCRIPTION: This snippet demonstrates the YAML format for representing an Info Object, which contains metadata about an API. It showcases fields like title, description, termsOfService, contact details, license information, and version. This object provides essential details used by tools for documentation and editing purposes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Sample Pet Store App\ndescription: This is a sample server for a pet store.\ntermsOfService: http://example.com/terms/\ncontact:\n  name: API Support\n  url: http://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Spring Boot Starter Dependency (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the `knife4j-spring-boot-starter` dependency to a Spring Boot project's `pom.xml` file.  This allows for quick integration with the UI. The dependency includes the group ID, artifact ID, and version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2019-12-23-knife4j-2.0.1-issue.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-spring-boot-starter</artifactId>\n  <version>2.0.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Minimal Configuration (v3) - knife4j Gateway\nDESCRIPTION: This YAML snippet shows the minimal configuration needed for knife4j gateway v3. It enables the gateway and excludes the gateway service from discovery. Requires a Spring Cloud Gateway application with knife4j gateway starter.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j/knife4j-gateway-spring-boot-starter/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  gateway:\n    enabled: true\n    discover:\n      excluded-services: ${spring.application.name}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger for Client Credentials Grant\nDESCRIPTION: This code snippet configures Swagger to use the client credentials grant type for OAuth2 authentication. It defines a ClientCredentialsGrant with a clientTokenUrl and configures the OAuth security scheme with the defined grant types and scopes. It is used to configure the Swagger Docket.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/oauth2.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Bean(value = \"defaultApi2\")\npublic Docket defaultApi2() {\n    //schema\n    List<GrantType> grantTypes=new ArrayList<>();\n    //客户端模式（client credentials）\n    String clientTokenUrl=\"http://192.168.1.10:8080/oauth/token\";\n    ClientCredentialsGrant clientCredentialsGrant=new ClientCredentialsGrant(clientTokenUrl);\n    grantTypes.add(clientCredentialsGrant);\n\n\n    OAuth oAuth=new OAuthBuilder().name(\"oauth2\")\n            .grantTypes(grantTypes).build();\n    //context\n    //scope方位\n    List<AuthorizationScope> scopes=new ArrayList<>();\n    scopes.add(new AuthorizationScope(\"read\",\"read all resources\"));\n    SecurityReference securityReference=new SecurityReference(\"oauth2\",scopes.toArray(new AuthorizationScope[]{}));\n    SecurityContext securityContext=new SecurityContext(CollectionUtil.newArrayList(securityReference),PathSelectors.ant(\"/api/**\"));\n    //schemas\n    List<SecurityScheme> securitySchemes=CollectionUtil.newArrayList(oAuth);\n    //securyContext\n    List<SecurityContext> securityContexts=CollectionUtil.newArrayList(securityContext);\n\n    String groupName=\"2.X版本\";\n    Docket docket=new Docket(DocumentationType.SWAGGER_2)\n            .host(\"https://www.baidu.com\")\n            .apiInfo(apiInfo())\n            .groupName(groupName)\n            .select()\n            .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n            .paths(PathSelectors.any())\n            .build()\n            .securityContexts(securityContexts).securitySchemes(securitySchemes);\n    return docket;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j with Nacos\nDESCRIPTION: This YAML snippet configures Knife4j to aggregate OpenAPI definitions from services registered in a Nacos registry. It specifies the Nacos server URL, and a route to aggregate the 'service-order' service from the 'test' group and namespace. The `location` property defines the path to the OpenAPI definition.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/aggregation-nacos.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable-aggregation: true\n  nacos:\n    enable: true\n    service-url: http://192.168.0.112:8804/nacos/\n    routes:\n      - name: 订单服务\n        service-name: service-order\n        group-name: test\n        namespace-id: test\n        clusters: test\n        location: /v2/api-docs?group=default\n```\n\n----------------------------------------\n\nTITLE: Document Aggregation Dependencies XML\nDESCRIPTION: This XML configuration defines the dependencies required for document aggregation, including Eureka Client, Spring Cloud Gateway, and Knife4j Spring Boot Starter. These dependencies enable the service to register with Eureka, act as a gateway, and provide the frontend UI and backend code for Swagger documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-gateway</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j in YML\nDESCRIPTION: This snippet demonstrates how to enable Knife4j by setting the `knife4j.enable` property to `true` in the application.yml or application.properties file. This is a prerequisite for using other Knife4j features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/forbidOpenApi.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Nacos Mode\nDESCRIPTION: This YAML snippet configures a Docker Compose service for Knife4j Insight using Nacos as its configuration source. It specifies the image, port mappings, and environment variables required to connect to the Nacos server, including the server address, authentication credentials, namespace, data ID, and group.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-nacos.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n# 通过docker-compose可以快速部署knife4j服务\nversion: \"2.0\"\nservices:\n  knife4j:\n    container_name: knife4j-insight-nacos\n    restart: always\n    image: \"xiaoymin/knife4j:v2.0\"\n    network_mode: \"bridge\"\n    # 端口映射\n    ports:\n      - \"10000:10000\"\n    # 指定配置属性模式为Nacos配置中心\n    environment:\n      - knife4j.source=nacos\n      - knife4j.nacos.server=127.0.0.1:8848\n      - knife4j.nacos.username=nacos\n      - knife4j.nacos.password=nacos\n      # 使用者自行在所指定的nacos上创建 namespace 、dataid、group\n      - knife4j.nacos.namespace=knife4j\n      - knife4j.nacos.dataId=knife4j_data_id\n      - knife4j.nacos.group=DEFAULT_GROUP\n\n```\n\n----------------------------------------\n\nTITLE: Knife4j YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates a comprehensive configuration for Knife4j, including enabling the feature, defining document groups, customizing UI settings, and setting basic authentication. Key parameters include `enable`, `documents`, `setting`, `cors`, and `basic`, which control various aspects of Knife4j's behavior.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/enhance.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  enable: true\n  documents:\n    -\n      group: 2.X版本\n      name: 接口签名\n      locations: classpath:sign/*\n  setting:\n    language: zh-CN\n    enable-swagger-models: true\n    enable-document-manage: true\n    swagger-model-name: 实体类列表\n    enable-version: false\n    enable-reload-cache-parameter: false\n    enable-after-script: true\n    enable-filter-multipart-api-method-type: POST\n    enable-filter-multipart-apis: false\n    enable-request-cache: true\n    enable-host: false\n    enable-host-text: 192.168.0.193:8000\n    enable-home-custom: true\n    home-custom-path: classpath:markdown/home.md\n    enable-search: false\n    enable-footer: false\n    enable-footer-custom: true\n    footer-custom-content: Apache License 2.0 | Copyright  2019-[浙江八一菜刀股份有限公司](https://gitee.com/xiaoym/knife4j)\n    enable-dynamic-parameter: false\n    enable-debug: true\n    enable-open-api: false\n    enable-group: true\n  cors: false\n  production: false\n  basic:\n    enable: false\n    username: test\n    password: 12313\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j in YAML\nDESCRIPTION: This YAML snippet shows how to enable Knife4j in the application.yml configuration file.  Setting `knife4j.enable` to `true` is required to use Knife4j features.  This configuration should be placed in the application.yml or application.properties file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/tagSort.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Disable Resources in Production YML\nDESCRIPTION: This YAML snippet demonstrates how to disable Swagger/Knife4j resources in a production environment. Setting `production` to `true` will block access to documentation resources.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/accessControl.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  # 开启增强配置 \n  enable: true\n　# 开启生产环境屏蔽\n  production: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag and Operation Sorting in YAML\nDESCRIPTION: This YAML snippet configures a unified sorting rule for tags and operations. The `tags-sorter` and `operations-sorter` properties are set to \"order\".\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/gateway/knife4j-gateway-introduce.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      version: swagger2\n      enabled: true\n    # 排序规则\n    tags-sorter: order\n    operations-sorter: order\n\n```\n\n----------------------------------------\n\nTITLE: Configure Swagger and Knife4jUI Middleware\nDESCRIPTION: This snippet configures the Swagger and Knife4jUI middleware in the `Configure` method of the `Startup.cs` file. It enables Swagger and sets up the Knife4j UI to serve the API documentation. The `RoutePrefix` property allows serving the UI at the root, and `SwaggerEndpoint` defines the endpoint for the Swagger JSON file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-guid.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\napp.UseSwagger();\n\napp.UseKnife4UI(c =>\n{\n    c.RoutePrefix = \"\"; // serve the UI at root\n    c.SwaggerEndpoint(\"/v1/api-docs\", \"V1 Docs\");\n});\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n    endpoints.MapSwagger(\"{documentName}/api-docs\");\n});\n```\n\n----------------------------------------\n\nTITLE: Enable Dynamic Request Parameters in Knife4j (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to enable the dynamic request parameter feature in Knife4j. By setting `knife4j.setting.enable-dynamic-parameter` to `true`, developers can add custom parameters to API requests during debugging.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/dynamicRequestParameter.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n  # 开启动态请求参数，true-开启，false-关闭\n    enable-dynamic-parameter: true\n```\n\n----------------------------------------\n\nTITLE: Maven Profiles for Excluding UI Dependencies (XML)\nDESCRIPTION: This XML snippet demonstrates how to use Maven profiles to exclude Knife4j and Swagger UI dependencies during the build process for a production environment. This prevents UI resources from being included in the final artifact.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/production-forbidden-ui.mdx#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<profiles>\n    <profile>\n        <id>dev</id>\n        <activation>\n            <!-- 激活条件为\"dev\"系统属性存在 -->\n            <property>\n                <name>env</name>\n                <value>dev</value>\n            </property>\n        </activation>\n    </profile>\n    <profile>\n        <id>prod</id>\n        <activation>\n            <!-- 激活条件为\"prod\"环境变量存在 -->\n            <property>\n                <name>env</name>\n                <value>prod</value>\n            </property>\n        </activation>\n        <dependencies>\n            <dependency>\n                <groupId>com.github.xiaoymin</groupId>\n                <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>\n                <exclusions>\n                    <exclusion>\n                        <groupId>com.github.xiaoymin</groupId>\n                        <artifactId>knife4j-openapi3-ui</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>org.webjars</groupId>\n                        <artifactId>swagger-ui</artifactId>\n                    </exclusion>\n                </exclusions>\n\n            </dependency>\n        </dependencies>\n    </profile>\n</profiles>\n\n```\n\n----------------------------------------\n\nTITLE: Configure knife4j Aggregation for Eureka - YAML\nDESCRIPTION: This YAML snippet configures knife4j to aggregate OpenAPI documentation from services registered in Eureka.  It specifies the port, enables aggregation, sets the Eureka service URL, and defines routes to the individual service's API documentation endpoints. The `servicePath` and `location` properties are crucial for directing knife4j to the correct API documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-eureka.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nserver:\n  port: 10909\nknife4j:\n  enableAggregation: true\n  eureka:\n    enable: true\n    serviceUrl: http://localhost:10000/eureka/\n    routes:\n      - name: 订单服务\n        serviceName: service-order\n        location: /v2/api-docs?group=default\n        servicePath: /order\n      - name: 用户体系\n        serviceName: service-user\n        location: /aub/v2/api-docs?group=default\n        servicePath: /\n```\n\n----------------------------------------\n\nTITLE: Microservice Dependencies Configuration XML\nDESCRIPTION: This XML configuration specifies the dependencies required for a microservice, including Spring Boot Starter Web, Eureka Client, Spring Boot Starter Test, and Knife4j Micro Starter.  It is used for both the user and order services.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-micro-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configure ClientDetailsService for Client Credentials in Spring Security\nDESCRIPTION: This snippet configures the ClientDetailsService in Spring Security to use the client credentials grant type. It creates an in-memory client with the ID 'app1', the secret '123', and scopes 'read', 'write', 'reads', and 'writes'. The `noOpPasswordEncoder` is used for demonstration purposes, but a more secure encoder should be used in production.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/oauth2-client_credentials.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n    //客户端模式（client credentials）\n    clients.inMemory()\n        .withClient(\"app1\").secret(noOpPasswordEncoder.encode(\"123\"))\n            .authorizedGrantTypes(\"client_credentials\")\n            .scopes(\"read\",\"write\",\"reads\",\"writes\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j in YML Configuration\nDESCRIPTION: This YAML snippet shows how to enable Knife4j in the application.yml configuration file.  Setting `knife4j.enable` to `true` activates the Knife4j functionality.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/dynamicResponseDescription.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency for Knife4j OpenAPI3 (Jakarta)\nDESCRIPTION: This XML snippet shows how to add the Knife4j OpenAPI3 Jakarta starter dependency to a Gradle project.  It's necessary for integrating Knife4j with Spring Boot 3 using Gradle.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/index.mdx#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nimplementation(\"com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter:4.4.0\")\n```\n\n----------------------------------------\n\nTITLE: Setting Swagger Root Extension in Java\nDESCRIPTION: This Java code snippet shows how to programmatically add a vendor extension to the Swagger root object using the `setVendorExtension` method. It sets the `x-description` property with a corresponding description string. This assumes the existence of a `mapper` and `documentation` object already initialized.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nSwagger swagger = mapper.mapDocumentation(documentation);\nswagger.setVendorExtension(\"x-description\",\"Swagger扩展属性之一Description\");\n```\n\n----------------------------------------\n\nTITLE: Maven POM Configuration XML\nDESCRIPTION: This XML snippet configures the Maven project's POM file. It includes dependencies for Spring Boot Starter Web, Knife4j Spring Boot Starter, and Spring Boot Starter Test. It also specifies project metadata like group ID, artifact ID, and version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springboot.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.3.5.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-fast-demo</artifactId>\n    <version>1.0</version>\n    <name>knife4j-spring-boot-fast-demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.github.xiaoymin</groupId>\n            <artifactId>knife4j-spring-boot-starter</artifactId>\n            <version>2.0.9</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n----------------------------------------\n\nTITLE: Eureka Mode Configuration YAML\nDESCRIPTION: This YAML snippet shows how to configure Knife4j to aggregate OpenAPI specifications from services registered in a Eureka server using the Eureka mode. The `serviceUrl` property specifies the address of the Eureka server and the `serviceName` property identifies the service to aggregate.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregation.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enableAggregation: true\n  eureka:\n    enable: false\n    serviceUrl: http://localhost:10000/eureka/\n    serviceAuth:\n      enable: false\n      username: test\n      password: 12313\n    routeAuth:\n      enable: true\n      username: test\n      password: 12313\n    routes:\n      - name: 订单服务\n        serviceName: service-order\n        location: /v2/api-docs?group=default\n        swaggerVersion: 2.0\n        servicePath: /order\n        routeAuth:\n          enable: true\n          username: test\n          password: 12313\n```\n\n----------------------------------------\n\nTITLE: Knife4j Enable Request Cache Configuration - YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to enable or disable request parameter caching in Knife4j. The `enable-request-cache` property controls whether Knife4j caches request parameters during debugging.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/requestCache.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    # 对于调试中的请求参数是否缓存进行开启配置，该参数默认为true\n    enable-request-cache: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Discovery and Eureka Client Java Annotation\nDESCRIPTION: This Java code snippet uses `@EnableDiscoveryClient`, `@EnableEurekaClient` and `@SpringBootApplication` to enable service discovery and Eureka client functionality in a Spring Boot application.  It allows the service to register with and discover other services through Eureka.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@EnableDiscoveryClient\n@EnableEurekaClient\n@SpringBootApplication\npublic class ServiceDocApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(ServiceDocApplication.class, args);\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Aggregation (Eureka Mode)\nDESCRIPTION: This YAML snippet configures Knife4j to aggregate OpenAPI specifications from services registered in a Eureka registry (Eureka mode).  `serviceUrl` specifies the Eureka server address, and `routes` defines the services to aggregate, using their `serviceName` in Eureka.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregation.md#_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enableAggregation: true\n  eureka:\n    enable: false\n    serviceUrl: http://localhost:10000/eureka/\n    serviceAuth:\n      enable: false\n      username: test\n      password: 12313\n    routeAuth:\n      enable: true\n      username: test\n      password: 12313\n    routes:\n      - name: 订单服务\n        serviceName: service-order\n        location: /v2/api-docs?group=default\n        swaggerVersion: 2.0\n        servicePath: /order\n        routeAuth:\n          enable: true\n          username: test\n          password: 12313\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency: OpenAPI3 Starter\nDESCRIPTION: This XML snippet shows the Maven dependency for the Knife4j OpenAPI3 Spring Boot starter. It's used for OpenAPI3 specifications with Spring Boot projects.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/upgrading/upgrading_v4.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>\n    <version>4.0.0</version>\n</dependency>\n\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Production Environment\nDESCRIPTION: This YAML snippet demonstrates how to disable Knife4j in a production environment using the application-prod.yml file. The `knife4j.enable` property is set to `false`, preventing access to Knife4j UI and API documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/production-forbidden-ui.mdx#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: false\n  ## other properties.......\n```\n\n----------------------------------------\n\nTITLE: Include Knife4j Spring Boot Starter\nDESCRIPTION: This snippet shows how to include the `knife4j-spring-boot-starter` module in a Spring Boot project using Maven.  It allows for easy integration of Knife4j with a Spring Boot application. Add this to the `<dependencies>` section of your `pom.xml`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/mavenbom.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>com.github.xiaoymin</groupId>\n        <artifactId>knife4j-spring-boot-starter</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Disk Mode in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Knife4j to use Disk mode for OpenAPI specification aggregation. It specifies the location of the OpenAPI JSON file and assigns a name for the service, which will appear in the UI's dropdown menu. The `knife4j.disk.enable` property enables the Disk mode, and `knife4j.disk.routes` defines the services to aggregate.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/aggregation-disk.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable-aggregation: true\n  disk:\n    enable: true\n    routes:\n      - name: 用户\n        location: classpath:openapi/user.json\n```\n\n----------------------------------------\n\nTITLE: Register API Request Example JSON\nDESCRIPTION: This JSON payload is an example of the request body for registering an API service with the Knife4jCloud platform. It includes parameters such as the access key, project code, application host and port, SSL flag, client URL, and service routes containing group names, OpenAPI v2 content, and API paths.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jCloud.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"accessKey\":\"JDUkd1YvSi5zZmUkMHYuSGNmN1hMazJPajJuMjNJVW43dWNyL2tyR3N4bzJaa1A2ZC5mSUlwNA\",\n    \"code\":\"APIFactory\",\n    \"applicationHost\":\"192.168.0.152\",\n    \"applicationPort\":\"9200\",\n    \"ssl\":false,\n    \"client\":\"\",\n    \"cloudRoutes\":[{\n        \"groupName\":\"订单服务\",\n        \"content\":\"{....}\",\n        \"path\":\"/aaa/v2/api-docs?group=订单服务\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Services from Gateway Aggregation Using Regex - YAML\nDESCRIPTION: This snippet showcases how to exclude specific services from gateway aggregation using regular expressions. The `excluded-services` list defines patterns to match against service names, preventing their API documentation from being included in the aggregated documentation.  In this example, any service starting with 'order' is excluded.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.3.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      version: swagger2\n      enabled: true\n      excluded-services:\n        # 排除order开头的配置\n        - order.*\n```\n\n----------------------------------------\n\nTITLE: Mapping Springfox Operation to Swagger Operation\nDESCRIPTION: This Java code snippet shows the conversion of a Springfox Operation object to a Swagger Operation object. It handles setting security details and vendor extensions, showcasing the mapping process between the Springfox and Swagger models. This step is crucial for transferring operation-specific metadata.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected io.swagger.models.Operation mapOperation(Operation from) {\n    if ( from == null ) {\n        return null;\n    }\n\n    io.swagger.models.Operation operation = new io.swagger.models.Operation();\n\n    operation.setSecurity( mapAuthorizations( from.getSecurityReferences() ) );\n    operation.setVendorExtensions( vendorExtensionsMapper.mapExtensions( from.getVendorExtensions() ) );\n```\n\n----------------------------------------\n\nTITLE: Configure Knife4j Cloud Mode in YAML\nDESCRIPTION: This snippet shows how to configure Knife4j's Cloud mode in a YAML file. It enables aggregation, sets up a route for a service, and specifies the URI and location of the OpenAPI specification.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/aggregation-cloud.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable-aggregation: true\n  cloud:\n    enable: true\n    routes:\n      - name: 用户体系\n        uri: 192.168.0.152:8999\n        location: /v2/api-docs?group=2.X版本\n```\n\n----------------------------------------\n\nTITLE: Configuring Docket with OpenApiExtensionResolver (Java)\nDESCRIPTION: This Java code snippet demonstrates how to configure a Docket object with the OpenApiExtensionResolver to apply Knife4j's extension properties. It involves injecting the OpenApiExtensionResolver, and then calling the buildSettingExtensions method to set the extensions in the Docket.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/forbidDebug.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildSettingExtensions());\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Knife4j Security Filters - XML\nDESCRIPTION: Configures optional security filters provided by Knife4j in `web.xml`: `ProductionSecurityFilter` and `SecurityBasicAuthFilter`. The `ProductionSecurityFilter` disables Swagger in production environments, while `SecurityBasicAuthFilter` provides basic authentication.  Only one of these filters should be enabled.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springmvc.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!--Knife4j提供的Swagger增强功能,Filter过滤保护Swagger资源-->\n<!--生产环境Filter-->\n<filter>\n    <filter-name>knife4jProductionFilter</filter-name>\n    <filter-class>com.github.xiaoymin.knife4j.spring.filter.ProductionSecurityFilter</filter-class>\n    <init-param>\n        <param-name>production</param-name>\n        <!--如果该值配置为true则代表开启-->\n        <param-value>false</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>knife4jProductionFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n<!--Swagger资源的Basic认证保护策略-->\n<filter>\n    <filter-name>knife4jSecurityBasic</filter-name>\n    <filter-class>com.github.xiaoymin.knife4j.spring.filter.SecurityBasicAuthFilter</filter-class>\n    <!--开启basic认证-->\n    <init-param>\n        <param-name>enableBasicAuth</param-name>\n         <!--如果该值配置为true则代表开启-->\n        <param-value>false</param-value>\n    </init-param>\n    <!--用户名&密码-->\n    <init-param>\n        <param-name>userName</param-name>\n        <param-value>lisi</param-value>\n    </init-param>\n    <init-param>\n        <param-name>password</param-name>\n        <param-value>123</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>knife4jSecurityBasic</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n```\n\n----------------------------------------\n\nTITLE: Map /v3/api-docs/swagger-config endpoint (C#)\nDESCRIPTION: This code snippet maps the `/v3/api-docs/swagger-config` endpoint to a handler that returns the Swagger configuration as JSON.  This provides the data needed for the Knife4j front end to load properly. It also showcases setting JsonSerializerOptions for camel case naming and ignoring null values.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_14\n\nLANGUAGE: c#\nCODE:\n```\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n    endpoints.MapSwagger(\"{documentName}/api-docs\");\n    endpoints.MapGet(\"/v3/api-docs/swagger-config\", async (httpContext) =>\n    {\n\n        JsonSerializerOptions _jsonSerializerOptions = new JsonSerializerOptions();\n        _jsonSerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;\n        _jsonSerializerOptions.IgnoreNullValues = true;\n        _jsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase, false));\n\n        SwaggerUIOptions _options = new SwaggerUIOptions()\n        {\n            ConfigObject = new ConfigObject()\n            {\n                Urls = new List<UrlDescriptor>\n                {\n                    new UrlDescriptor()\n                    {\n                        Url=\"/v1/api-docs\",\n                        Name=\"V1 Docs\"\n                    }\n                }\n            }\n        };\n\n        await httpContext.Response.WriteAsync(JsonSerializer.Serialize(_options.ConfigObject, _jsonSerializerOptions));\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency: OpenAPI2 Starter\nDESCRIPTION: This XML snippet shows the Maven dependency for the Knife4j OpenAPI2 Spring Boot starter.  It allows to easily integrate Knife4j with OpenAPI2 based Spring Boot applications.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/upgrading/upgrading_v4.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>\n    <version>4.0.0</version>\n</dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Knife4j Dependency (<= 2.0.4) - Maven\nDESCRIPTION: Introduces Knife4j dependencies for versions 2.0.4 and earlier, requiring two artifacts: `knife4j-spring` and `knife4j-spring-ui`.  Developers need to include these dependencies in their Maven project's `pom.xml` file. It specifies the group ID, artifact ID, and version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springmvc.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!--引入Knife4j-->\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring</artifactId>\n    <!--在引用时请在maven中央仓库搜索最新版本号-->\n    <version>2.0.4</version>\n</dependency>\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-ui</artifactId>\n    <!--在引用时请在maven中央仓库搜索最新版本号-->\n    <version>2.0.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enable Enhanced Mode (> 2.0.4) - Java\nDESCRIPTION: Enables Knife4j's enhanced mode for versions later than 2.0.4 by adding the `@EnableKnife4j` annotation to the `SwaggerConfiguration` class. This annotation simplifies the process compared to earlier versions by encapsulating the `@ComponentScan` functionality.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springmvc.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2\n//增强扫描\n@EnableKnife4j\npublic class SwaggerConfiguration {\n    //more..\n}\n```\n\n----------------------------------------\n\nTITLE: Service Doc Dependencies Configuration XML\nDESCRIPTION: This snippet shows the dependencies for the service-doc application, which acts as the documentation aggregation point. It includes dependencies for Eureka client, Spring Cloud Gateway, and the Knife4j Spring Boot starter.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-gateway</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Aggregation YAML\nDESCRIPTION: This YAML snippet shows the general structure and available options for configuring Knife4j aggregation. The top-level `knife4j` configuration provides settings for enabling different aggregation modes (Disk, Cloud, Eureka, Nacos) and defining routes for each mode. It's a central configuration point for managing API aggregation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregation.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enableAggregation: true\n  cloud:\n    enable: true\n    routes:\n      - name: 用户体系\n        uri: 192.168.0.152:8999\n        location: /v2/api-docs?group=2.X版本\n        swaggerVersion: 2.0\n        servicePath: /abbb/ffe\n        routeAuth:\n          enable: true\n          username: test\n          password: 12313\n    routeAuth:\n      enable: true\n      username: test\n      password: 12313\n  eureka:\n    enable: false\n    serviceUrl: http://localhost:10000/eureka/\n    routeAuth:\n      enable: true\n      username: test\n      password: 12313\n    routes:\n      - name: 订单服务\n        serviceName: service-order\n        location: /v2/api-docs?group=default\n        swaggerVersion: 2.0\n        servicePath: /order\n        routeAuth:\n          enable: true\n          username: test\n          password: 12313\n  nacos:\n    enable: false\n    serviceUrl: http://localhost:10000/nacos/\n    routeAuth:\n      enable: true\n      username: test\n      password: 12313\n    routes:\n      - name: 订单服务\n        serviceName: service-order\n        location: /v2/api-docs?group=default\n        swaggerVersion: 2.0\n        servicePath: /order\n        routeAuth:\n          enable: true\n          username: test\n          password: 12313\n  disk:\n    enable: false\n    routes:\n      - name: 用户\n        location: classpath:openapi/user.json\n```\n\n----------------------------------------\n\nTITLE: Disk Mode OpenAPI Configuration\nDESCRIPTION: This YAML configuration file (app.yml) configures Knife4j to aggregate OpenAPI specifications from local files in Disk mode. It specifies the paths to the OpenAPI JSON files.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-docker.md#_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nserver:\n  port: 8888\nknife4j:\n  enableAggregation: true\n  disk:\n    enable: true\n    routes:\n      - name: 用户AAAAAAAAAAA\n        location: /app/data/open-api.json\n      - name: 用户BBBBBBBBBBBB\n        location: /app/data/openapi.json\n```\n\n----------------------------------------\n\nTITLE: CourseTypeDeserializer for JSON Requests (Java)\nDESCRIPTION: This class extends `JsonDeserializer` and provides custom deserialization logic for the `CourseType` enum when handling JSON requests. It deserializes the input JSON value into a `CourseType` instance using the same matching logic as the `fromValue` method in the `CommonFormEnumParser` interface. It includes logging for debugging.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/handler-enum.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n@Slf4j\npublic class CourseTypeDeserializer   extends JsonDeserializer<CourseType> {\n    @Override\n    public CourseType deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {\n        log.info(\"des....\");\n        String input = jsonParser.getValueAsString();\n        log.info(\"value:{}\",input);\n        for (CourseType courseType : CourseType.values()) {\n            // 根据规则自定义实现\n            if (input.startsWith(Objects.toString(courseType))||input.equalsIgnoreCase(courseType.name())) {\n                return courseType;\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid CourseType value: \" + input);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Configuration - knife4j Gateway\nDESCRIPTION: This YAML snippet shows the detailed configuration options for knife4j gateway. It includes settings for enabling the gateway, API path prefix, UI version, service discovery, and route configurations. Requires a Spring Cloud Gateway application with knife4j gateway starter.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j/knife4j-gateway-spring-boot-starter/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  gateway:\n    # 开区网关聚合文档 默认:/\n    enabled: true\n    # 网关前缀(如nginx配置的代理前缀) 默认:/\n    api-path-prefix: /api\n    # 使用的UI版本(v2或者v3) 默认: v3\n    version: v2\n    # 服务发现\n    discover:\n      # 开启服务发现 默认:true\n      enabled: true\n      # 默认排序 默认:0\n      default-order: 0\n      # 排除的服务名 默认:为空(建议排除网关服务)\n      excluded-services: order-server,user-server\n    v2:\n      # 文档访问地址 默认：/v2/api-docs?group=default\n      api-docs-path: '/v2/api-docs?group=default'\n    v3:\n      # 文档访问地址 默认:/v3/api-docs\n      api-docs-path: '/v3/api-docs'\n      # oauth2 redirect url\n      oauth2-redirect-url: ''\n      # validator url\n      validator-url: ''\n    routes:\n      # 分组名称\n      - name: mall-server\n        # 文档地址\n        url: '/v2/api-docs'\n        # context-path\n        context-path: '/'\n        # 服务名\n        service-name: mall-server\n        # 排序\n        order: 1\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration (Nginx)\nDESCRIPTION: This Nginx configuration (`kadmin.conf`) sets up a reverse proxy to route requests to the knife4j-admin backend and serves the frontend files. It listens on port 80 and proxies requests to the backend server running on `http://127.0.0.1:17808`. It also defines a location block to serve static files from the `/mnt/application/kadmin/front` directory.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/knife4j-admin-deploy.md#_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen       80;\n    server_name  kadmin.xiaominfo.com;\n    # 后台服务\n    location / {\n        proxy_pass http://127.0.0.1:17808;\n        client_max_body_size 300m;\n    }\n    # 前端文件\n\tlocation ~*^.+\\.(icon|gif|jpg|jpeg|png|html|css|js|txt|xml|swf|wav)$ {\n\t    root /mnt/application/kadmin/front;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docket with OpenApiExtensionResolver in Java\nDESCRIPTION: This code snippet demonstrates how to configure a Docket object in a Spring Boot application with the OpenApiExtensionResolver provided by Knife4j.  This is necessary to integrate the language setting from the YAML configuration.  It involves autowiring the OpenApiExtensionResolver and using it to build extensions for the Docket.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/i18n.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildExtensions(groupName));\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Aggregation Dependency (Maven)\nDESCRIPTION: This XML snippet shows how to include the Knife4j Aggregation Spring Boot starter dependency in a Maven project. It is required to add the dependency to your pom.xml file. Replace `4.0.0` with the latest version available in the Maven Central Repository.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/aggregation-introduction.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-aggregation-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库搜索aggregation最新版本号-->\n    <version>4.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Nacos Mode Configuration YAML\nDESCRIPTION: This YAML snippet shows how to configure Knife4j to aggregate OpenAPI specifications from services registered in a Nacos server using the Nacos mode. It includes options for specifying the service URL, group name, namespace ID, and clusters. The  `serviceName` property identifies the service to aggregate.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregation.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enableAggregation: true\n  nacos:\n    enable: true\n    serviceUrl: http://192.168.0.112:8804/nacos/\n    routeAuth:\n      enable: true\n      username: test\n      password: 12313\n    routes:\n      - name: 订单服务\n        serviceName: service-order\n        groupName: test\n        namespaceId: test\n        clusters: test\n        location: /v2/api-docs?group=default\n        swaggerVersion: 2.0\n        servicePath: /order\n        routeAuth:\n          enable: true\n          username: test\n          password: 12313\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Aggregation (Disk Mode)\nDESCRIPTION: This YAML snippet configures Knife4j to aggregate OpenAPI specifications from local disk files (Disk mode). The `location` specifies the path to the OpenAPI JSON file. Ensure that the `enableAggregation` property is set to `true` to activate the aggregation feature.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregation.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enableAggregation: true\n  disk:\n    enable: true\n    routes:\n      - name: 用户\n        location: classpath:openapi/user.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Disk Routes and Host in Disk Mode\nDESCRIPTION: This snippet demonstrates configuring routes and host settings in `disk.properties` for Disk mode. It sets the service name, host URL, and location of the OpenAPI specification file. It is used to enable debugging functionality for a specific service.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.disk.routes[0].name=测试平台\nknife4j.disk.routes[0].host=http://knife4j.xiaominfo.com\nknife4j.disk.routes[0].location=test.json\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in Spring Boot - Java\nDESCRIPTION: This Java code snippet shows how to configure a `CorsFilter` in a Spring Boot application to enable Cross-Origin Resource Sharing (CORS). It allows requests from any origin (`*`), with any header (`*`), and any method (`*`), and enables credentials (cookies) to be sent, setting the max age to 10000 seconds.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-06-28-knife4j-2.0.4-issue.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic CorsFilter corsFilter(){\n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    CorsConfiguration corsConfiguration=new CorsConfiguration();\n    corsConfiguration.setAllowCredentials(true);\n    corsConfiguration.addAllowedOrigin(\"*\");\n    corsConfiguration.addAllowedHeader(\"*\");\n    corsConfiguration.addAllowedMethod(\"*\");\n    corsConfiguration.setMaxAge(10000L);\n    source.registerCorsConfiguration(\"/**\",corsConfiguration);\n    CorsFilter corsFilter=new CorsFilter(source);\n    return corsFilter;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j in YML Configuration\nDESCRIPTION: This snippet shows the basic configuration needed to enable Knife4j in your application using a YAML file. The `knife4j.enable` property must be set to `true` for Knife4j features to be active.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/apiSort.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Operation Example in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of an operation object within an OpenAPI specification.  It shows the usage of fields like `tags`, `summary`, `operationId`, `parameters`, `requestBody`, `responses`, and `security`. It defines how to update a pet with form data.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"]\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: application-prod.yml Configuration (YAML)\nDESCRIPTION: This YAML configuration file (`application-prod.yml`) defines the server port and the monitored directory for knife4j. The `knife4j.monitor` property must be updated to reflect the actual data directory location on the server. The server port can be modified to avoid conflicts with other applications.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/knife4j-admin-deploy.md#_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nserver:\n# 端口号\n  port: 17808 \nknife4j:\n  # 监听项目目录 \n  monitor: /mnt/application/kadmin/data \n```\n\n----------------------------------------\n\nTITLE: Maven POM Configuration for Knife4j Aggregation (XML)\nDESCRIPTION: This XML snippet shows the complete pom.xml configuration required to add Knife4j aggregation to a Spring Boot project. It includes dependencies for spring-boot-starter-web and knife4j-aggregation-spring-boot-starter. It is used to configure Maven to build and manage project dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-cloud.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.4.0</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-aggregation-disk-demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>knife4j-aggregation-disk-demo</name>\n    <description>通过基于Spring Boot的工程聚合任意微服务接口文档</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.github.xiaoymin</groupId>\n            <artifactId>knife4j-aggregation-spring-boot-starter</artifactId>\n            <version>2.0.8</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j via YML\nDESCRIPTION: This configuration snippet shows the basic setup required to enable Knife4j functionality. It sets the `knife4j.enable` property to `true` in the application's YML file. This is required for all Knife4j features to function.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/forbidDebug.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Swagger API Specification Example JSON\nDESCRIPTION: This JSON snippet provides an example of a standard Swagger API specification file. It showcases the structure and key elements of a Swagger definition, including swagger version, info, tags, paths, security definitions, and definitions.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox1.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"<div style='font-size:14px;color:red;'>swagger-bootstrap-ui-demo RESTful APIs</div>\",\n        \"version\": \"1.0\",\n        \"title\": \"swagger-bootstrap-ui很棒~~~！！！\",\n        \"termsOfService\": \"http://www.group.com/\",\n        \"contact\": {\n            \"name\": \"group@qq.com\"\n        }\n    },\n    \"host\": \"127.0.0.1:8999\",\n    \"basePath\": \"/\",\n    \"tags\": [\n        {\n            \"name\": \"1.8.2版本\",\n            \"description\": \"Api 182 Controller\"\n        }\n    ],\n    \"paths\": {\n        \"/2/api/new187/postRequest\": {\n            \"post\": {\n                \"tags\": [\n                    \"api-1871-controller\"\n                ],\n                \"summary\": \"版本2-post请求参数Hidden属性是否生效\",\n                \"operationId\": \"postRequestUsingPOST_1\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"*/*\"\n                ],\n                \"parameters\": [\n                    {\n                        \"in\": \"body\",\n                        \"name\": \"model187\",\n                        \"description\": \"model187\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"originalRef\": \"Model187\",\n                            \"$ref\": \"#/definitions/Model187\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"originalRef\": \"Rest«Model187»\",\n                            \"$ref\": \"#/definitions/Rest«Model187»\"\n                        }\n                    },\n                    \"201\": {\n                        \"description\": \"Created\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found\"\n                    }\n                ],\n                \"security\": [\n                    {\n                        \"BearerToken\": [\n                            \"global\"\n                        ]\n                    },\n                    {\n                        \"BearerToken1\": [\n                            \"global\"\n                        ]\n                    }\n                ],\n                \"deprecated\": false\n            }\n        }\n    },\n    \"securityDefinitions\": {\n        \"BearerToken\": {\n            \"type\": \"apiKey\",\n            \"name\": \"Authorization\",\n            \"in\": \"header\"\n        }\n    },\n    \"definitions\": {\n        \"AInfoVo\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"aId\",\n                \"bList\"\n            ],\n            \"properties\": {\n                \"aId\": {\n                    \"type\": \"string\",\n                    \"description\": \"A记录主键\"\n                },\n                \"bList\": {\n                    \"type\": \"object\",\n                    \"description\": \"B信息Map, key为BInfoVo的主键pkId\",\n                    \"additionalProperties\": {\n                        \"originalRef\": \"BInfoVo\",\n                        \"$ref\": \"#/definitions/BInfoVo\"\n                    }\n                }\n            },\n            \"title\": \"AInfoVo\",\n            \"description\": \"A信息\"\n        },\n        \"ActInteger\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"doub1\": {\n                    \"type\": \"number\",\n                    \"format\": \"double\",\n                    \"description\": \"double类型属性\"\n                },\n                \"float1\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"float类型属性\"\n                },\n                \"name\": {\n                    \"type\": \"string\"\n                },\n                \"number\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\",\n                    \"description\": \"Long类型\"\n                },\n                \"price\": {\n                    \"type\": \"number\",\n                    \"description\": \"BigDecimal类型属性\"\n                },\n                \"sort\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"description\": \"int类型\"\n                }\n            },\n            \"title\": \"ActInteger\"\n        },\n        \"Actor\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"address\": {\n                    \"type\": \"string\"\n                },\n                \"deepOne\": {\n                    \"originalRef\": \"DeepOne\",\n                    \"$ref\": \"#/definitions/DeepOne\"\n                },\n                \"recipt\": {\n                    \"originalRef\": \"Recipt\",\n                    \"$ref\": \"#/definitions/Recipt\"\n                },\n                \"sort\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                }\n            },\n            \"title\": \"Actor\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disk Mode Customization with disk.properties\nDESCRIPTION: This properties file configures the display names and locations of OpenAPI documents in Disk mode.  It defines how to rename the document groups in the Knife4j UI using the `knife4j.disk[0].routes[n].name` and `knife4j.disk[0].routes[n].location` properties. The configuration allows customization of the names and file paths for OpenAPI documents.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nknife4j.disk[0].routes[0].name=用户服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk[0].routes[0].location=userOpenApi.json\n\nknife4j.disk[0].routes[1].name=订单服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk[0].routes[1].location=orderOpenApi.json\n\nknife4j.disk[0].routes[2].name=商品服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk[0].routes[2].location=goodsOpenApi.yml\n\n```\n\n----------------------------------------\n\nTITLE: Eureka Server Application YAML Configuration\nDESCRIPTION: This YAML configuration defines the Eureka server's properties such as port, hostname, registration settings, and service URL. It configures the server to not register with itself and defines the default zone for service registration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nserver:\n  port: 10000\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false\n    fetch-registry: false\n    service-url:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\nspring:\n  application:\n    name: knife4j-gateway-server\n```\n\n----------------------------------------\n\nTITLE: Register API Request Example JSON\nDESCRIPTION: This is an example JSON payload for the `/knife4j/cloud/upload` API endpoint. It contains parameters like accessKey, code, applicationHost, applicationPort, ssl, client, and cloudRoutes to register a Swagger service.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/cloud-openapi.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"accessKey\":\"JDUkd1YvSi5zZmUkMHYuSGNmN1hMazJPajJuMjNJVW43dWNyL2tyR3N4bzJaa1A2ZC5mSUlwNA\",\n    \"code\":\"APIFactory\",\n    \"applicationHost\":\"192.168.0.152\",\n    \"applicationPort\":\"9200\",\n    \"ssl\":false,\n    \"client\":\"\",\n    \"cloudRoutes\":[{\n        \"groupName\":\"订单服务\",\n        \"content\":\"{....}\",\n        \"path\":\"/aaa/v2/api-docs?group=订单服务\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Docket Bean Creation\nDESCRIPTION: This code demonstrates how to create a Docket bean in a Spring application.  It configures various aspects of the API documentation, including API information, group name, request handlers, paths, global operation parameters (including a token parameter), security contexts, and security schemes. The Docket bean is responsible for generating the Swagger 2 documentation for the specified API endpoints.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Bean(value = \"defaultApi\")\n@Order(value = 4)\npublic Docket defaultApi() {\n    ParameterBuilder parameterBuilder=new ParameterBuilder();\n    List<Parameter> parameters= Lists.newArrayList();\n    parameterBuilder.name(\"token\").description(\"token令牌\").modelRef(new ModelRef(\"String\"))\n        .parameterType(\"header\")\n        .required(true).build();\n    parameters.add(parameterBuilder.build());\n\n    Docket docket=new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(apiInfo())\n        .groupName(\"默认接口\")\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.controller\"))\n        //.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))\n        .paths(PathSelectors.any())\n        .build().globalOperationParameters(parameters)\n        .securityContexts(Lists.newArrayList(securityContext())).securitySchemes(Lists.<SecurityScheme>newArrayList(apiKey()));\n    return docket;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Dependency (Springfox 2.X) - XML\nDESCRIPTION: This XML snippet adds the Knife4j dependency to a Maven project when using OpenAPI 2 and Springfox 2.10.5. It specifies the `knife4j-spring-boot-starter` artifact and version 2.0.8.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库搜索2.X最新版本号-->\n    <version>2.0.8</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configure Middleware for NSwag and Knife4jUI\nDESCRIPTION: This snippet configures the middleware required for NSwag integration and Knife4jUI. It enables OpenApi and sets up the Knife4j UI to point to the NSwag-generated Swagger JSON file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-guid.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n            // 其它 Use\n          app.UseOpenApi();\n          app.UseKnife4UI(c =>\n         {\n               c.RoutePrefix = \"\";\n               c.SwaggerEndpoint(\"/swagger/v1/swagger.json\");\n          });\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Knife4jUI (C#)\nDESCRIPTION: This snippet shows how to configure the Knife4jUI middleware in the Startup.cs file. It sets the route prefix, Swagger endpoints, and other configurations.  This replaces UseSwaggerUI.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\napp.UseKnife4UI(c =>\n{\n    c.RoutePrefix = \"\"; // serve the UI at root\n    c.SwaggerEndpoint(\"/v1/api-docs\", \"V1 Docs\");\n    c.SwaggerEndpoint(\"/gp/api-docs\", \"登录模块\");\n});\n```\n\n----------------------------------------\n\nTITLE: Run Knife4j Docker Container (Disk Mode)\nDESCRIPTION: This command creates and runs a Knife4j Docker container, mapping port 18002 on the host to port 8888 in the container, and mounting the app.yml and data directories from the host to the container.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-docker.md#_snippet_4\n\nLANGUAGE: shell script\nCODE:\n```\n[root@izbx23 app]# docker run -itd --name myopenapi -p 18002:8888 -v /home/openapi/app.yml:/app/app.yml -v /home/openapi/data:/app/data xiaoymin/knife4j\n3f0ed4cde46dd8a625e0338bc8cb1688059c7169447bda5681a34d93e2ba7c3e\n[root@izbx23 app]# docker ps \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES\ne678bccd4d66        xiaoymin/knife4j    \"java -jar -Djava.se…\"   3 seconds ago       Up 2 seconds        0.0.0.0:18002->8888/tcp   myopenapi\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger for Authorization Code Grant\nDESCRIPTION: This code snippet configures Swagger to use the authorization code grant type for OAuth2 authentication. It defines an AuthorizationCodeGrant with TokenRequestEndpoint and TokenEndpoint, and configures the OAuth security scheme with the defined grant types and scopes. It is used to configure the Swagger Docket.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/oauth2.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Bean(value = \"defaultApi2\")\npublic Docket defaultApi2() {\n    //schema\n    List<GrantType> grantTypes=new ArrayList<>();\n    //授权码模式AuthorizationCodeGrant\n    TokenRequestEndpoint tokenRequestEndpoint=new TokenRequestEndpoint(\"http://localhost:8999/oauth/authorize\",\"app1\",\"123\");\n    TokenEndpoint tokenEndpoint=new TokenEndpoint(\"http://192.168.1.10:8080/oauth/token\",\"access_token\");\n    AuthorizationCodeGrant authorizationCodeGrant=new AuthorizationCodeGrant(tokenRequestEndpoint,tokenEndpoint);\n    grantTypes.add(authorizationCodeGrant);\n\n    OAuth oAuth=new OAuthBuilder().name(\"oauth2\")\n            .grantTypes(grantTypes).build();\n    //context\n    //scope方位\n    List<AuthorizationScope> scopes=new ArrayList<>();\n    scopes.add(new AuthorizationScope(\"read\",\"read all resources\"));\n    SecurityReference securityReference=new SecurityReference(\"oauth2\",scopes.toArray(new AuthorizationScope[]{}));\n    SecurityContext securityContext=new SecurityContext(CollectionUtil.newArrayList(securityReference),PathSelectors.ant(\"/api/**\"));\n    //schemas\n    List<SecurityScheme> securitySchemes=CollectionUtil.newArrayList(oAuth);\n    //securyContext\n    List<SecurityContext> securityContexts=CollectionUtil.newArrayList(securityContext);\n\n    String groupName=\"2.X版本\";\n    Docket docket=new Docket(DocumentationType.SWAGGER_2)\n            .host(\"https://www.baidu.com\")\n            .apiInfo(apiInfo())\n            .groupName(groupName)\n            .select()\n            .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n            .paths(PathSelectors.any())\n            .build()\n            .securityContexts(securityContexts).securitySchemes(securitySchemes);\n    return docket;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a string path parameter in JSON\nDESCRIPTION: This JSON snippet defines a path parameter of type string. It includes the name, location ('in': 'path'), description, and schema details.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Request Body Example without Example Values - Java\nDESCRIPTION: This Java code snippet demonstrates a Swagger request body class without example values for the 'name' field. In this case, Knife4j will cache the value entered during debugging and use it for subsequent requests.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/requestCache.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class SwaggerRequestBody{\n    \n    @ApiModelProperty(value=\"姓名\")\n    private String name;\n    \n    //more...\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Development Environment\nDESCRIPTION: This YAML snippet demonstrates how to enable Knife4j in a development environment using the application-dev.yml file. The `knife4j.enable` property is set to `true`, allowing access to Knife4j UI and API documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/production-forbidden-ui.mdx#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  ## other properties.......\n```\n\n----------------------------------------\n\nTITLE: Configure Swagger Generator in ConfigureServices\nDESCRIPTION: This snippet configures the Swagger generator within the `ConfigureServices` method of the `Startup.cs` file.  It defines a Swagger document, adds a server configuration, and customizes the operation IDs based on controller and action names.  This configuration is crucial for Swagger to generate the API documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-guid.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n   services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\"v1\",new OpenApiInfo{Title = \"API V1\",Version = \"v1\"});\n        c.AddServer(new OpenApiServer()\n        {\n            Url = \"\",\n            Description = \"vvv\"\n        });\n        c.CustomOperationIds(apiDesc =>\n        {\n            var controllerAction = apiDesc.ActionDescriptor as ControllerActionDescriptor;\n            return  controllerAction.ControllerName+\"-\"+controllerAction.ActionName;\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Spring Cloud Gateway Route Configuration (YAML)\nDESCRIPTION: This YAML configuration defines routes for service-user and service-order in Spring Cloud Gateway. It includes predicates based on the path and applies the SwaggerHeaderFilter to add the X-Forwarded-Prefix header. The StripPrefix filter is also used to remove the leading path segment. Note: For newer Spring Cloud Gateway versions, the `SwaggerHeaderFilter` configuration should be removed.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nspring:\n  application:\n    name: service-doc\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          #          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: service-user\n          uri: lb://service-user\n          predicates:\n            - Path=/user/**\n          #            - Header=Cookie,Set-Cookie\n          filters:\n            - SwaggerHeaderFilter\n            - StripPrefix=1\n        - id:  service-order\n          uri: lb://service-order\n          predicates:\n            - Path=/order/**\n          filters:\n            - SwaggerHeaderFilter  //指定filter\n            - StripPrefix=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger for Password Grant\nDESCRIPTION: This code snippet configures Swagger to use the password grant type for OAuth2 authentication. It defines a ResourceOwnerPasswordCredentialsGrant with a passwordTokenUrl and configures the OAuth security scheme with the defined grant types and scopes. It is used to configure the Swagger Docket.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/oauth2.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Bean(value = \"defaultApi2\")\npublic Docket defaultApi2() {\n    //schema\n    List<GrantType> grantTypes=new ArrayList<>();\n    //密码模式\n    String passwordTokenUrl=\"http://192.168.1.10:8080/oauth/token\";\n    ResourceOwnerPasswordCredentialsGrant resourceOwnerPasswordCredentialsGrant=new ResourceOwnerPasswordCredentialsGrant(passwordTokenUrl);\n    grantTypes.add(resourceOwnerPasswordCredentialsGrant);\n\n    OAuth oAuth=new OAuthBuilder().name(\"oauth2\")\n            .grantTypes(grantTypes).build();\n    //context\n    //scope方位\n    List<AuthorizationScope> scopes=new ArrayList<>();\n    scopes.add(new AuthorizationScope(\"read\",\"read all resources\"));\n    SecurityReference securityReference=new SecurityReference(\"oauth2\",scopes.toArray(new AuthorizationScope[]{}));\n    SecurityContext securityContext=new SecurityContext(CollectionUtil.newArrayList(securityReference),PathSelectors.ant(\"/api/**\"));\n    //schemas\n    List<SecurityScheme> securitySchemes=CollectionUtil.newArrayList(oAuth);\n    //securyContext\n    List<SecurityContext> securityContexts=CollectionUtil.newArrayList(securityContext);\n\n    String groupName=\"2.X版本\";\n    Docket docket=new Docket(DocumentationType.SWAGGER_2)\n            .host(\"https://www.baidu.com\")\n            .apiInfo(apiInfo())\n            .groupName(groupName)\n            .select()\n            .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n            .paths(PathSelectors.any())\n            .build()\n            .securityContexts(securityContexts).securitySchemes(securitySchemes);\n    return docket;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying @SecurityRequirement alternative (Java)\nDESCRIPTION: This Java snippet presents an alternative to apply a defined Security Scheme to a specific API operation using the `@SecurityRequirement` annotation at class level and `@Operation` for describing the endpoint. This is necessary for Knife4j to display the Authorization header field in the UI for that particular endpoint.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/add-authorization-header.mdx#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@SecurityRequirement(name = HttpHeaders.AUTHORIZATION)\n@Operation(summary = \"描述1\")\n@PostMapping(\"/description\")\npublic ResponseEntity<ConfigPageParam> description(@ParameterObject ConfigPageParam configPageParam){\n    return ResponseEntity.ok(configPageParam);\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j Gateway (4.0+)\nDESCRIPTION: This snippet shows the Maven dependency for including Knife4j Gateway support in a Spring Cloud Gateway project, specifically for Knife4j version 4.0 and later. It allows aggregating OpenAPI documentation from various sub-services.  It requires setting the version to a value greater than 4.0.0.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/start-knife4j-version.mdx#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-gateway-spring-boot-starter</artifactId>\n    <version>{大于4.0.0版本}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring MultipartFile Upload with SwaggerBootstrapUi in Java\nDESCRIPTION: This code snippet demonstrates how to properly configure file uploads with SwaggerBootstrapUi using the `@ApiImplicitParam` annotation. It highlights the crucial step of setting the `dataType` attribute to `MultipartFile` to ensure that the file input field is rendered correctly in the Swagger UI. Additionally, it showcases how to enable multiple file uploads using `allowMultiple = true` and demonstrates the use of `@RequestParam` to handle the uploaded file(s).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/upload-error.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@ApiOperation(value = \"文件素材上传接口\")\n@ApiImplicitParams({@ApiImplicitParam(name = \"file[]\", value = \"文件流对象,接收数组格式\", required = true,dataType = \"MultipartFile\",allowMultiple = true),\n                    @ApiImplicitParam(name = \"title\", value = \"title\", required = true)}\n                  )\n@RequestMapping(value=\"/uploadMaterial\",method = RequestMethod.POST)\n@ResponseBody\npublic RestMessage uploadMaterial(@RequestParam(value=\"file[]\",required = true) MultipartFile[] files,@RequestParam(value = \"title\") String title, HttpServletRequest request) throws IOException {\n    //int mul=1*1024*1024;\n    String realPath=request.getSession().getServletContext().getRealPath(\"/upload\");\n    File realFile=new File(realPath);\n    if (!realFile.exists()){\n        realFile.mkdirs();\n    }\n    List<Map> uploadFiles= Lists.newArrayList();\n    System.out.println(\"进入图片上传接口:\"+files.length +\"张\");\n    for (MultipartFile file : files) {\n        File targetFile=new File(realFile,file.getOriginalFilename());\n        FileOutputStream fileOutputStream=null;\n        InputStream ins=null;\n        try{\n            fileOutputStream=new FileOutputStream(targetFile);\n            int i=-1;\n            byte[] bytes=new byte[1024*1024];\n            ins=file.getInputStream();\n            while ((i=ins.read(bytes))!=-1){\n                fileOutputStream.write(bytes,0,i);\n            }\n        }catch (IOException e){\n        }finally {\n            closeQuilty(ins);\n            closeQuilty(fileOutputStream);\n        }\n        Map fileInfo= Maps.newHashMap();\n        fileInfo.put(\"id\", UUID.randomUUID().toString());\n        fileInfo.put(\"url\",targetFile.getPath());\n        fileInfo.put(\"original_name\",targetFile.getName());\n        uploadFiles.add(fileInfo);\n    }\n    RestMessage rm=new RestMessage();\n    rm.setData(uploadFiles);\n    return rm;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j with Nacos Properties\nDESCRIPTION: This snippet configures Knife4j to use Nacos as a service registry and configures authentication and routing. It sets the service URL, enables authentication with username and password, and defines routes for two services (service-user and service-order). It also shows how to disable basic authentication for Knife4j.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.nacos.serviceUrl=http://192.168.0.223:8848/nacos\n# Nacos OpenAPI权限\nknife4j.nacos.serviceAuth.enable=true\nknife4j.nacos.serviceAuth.username=nacos\nknife4j.nacos.serviceAuth.password=nacos\n\nknife4j.nacos.routes[0].name=自定义X服务1\nknife4j.nacos.routes[0].serviceName=service-user\nknife4j.nacos.routes[0].location=/v2/api-docs?group=default\nknife4j.nacos.routes[0].order=3\nknife4j.nacos.routes[1].name=自定义X服务2\nknife4j.nacos.routes[1].serviceName=service-order\nknife4j.nacos.routes[1].location=/v2/api-docs?group=default\nknife4j.nacos.routes[1].order=2\n# 可以改为false，或者把下面的配置全部注释，两种方式都行\nknife4j.basicAuth.enable=false\nknife4j.basicAuth.username=nacos\nknife4j.basicAuth.password=1234\n```\n\n----------------------------------------\n\nTITLE: Operation Builder Plugin for x-order\nDESCRIPTION: This Java code snippet implements an `OperationBuilderPlugin` to add a custom 'x-order' vendor extension to each API operation. It sets the value of 'x-order' to \"1\" for all operations. The plugin is annotated with `@Component` and `@Order` to ensure it's registered as a Spring component and executed with high precedence. This plugin customizes the Swagger documentation by adding the 'x-order' extension.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@Order(Ordered.HIGHEST_PRECEDENCE+100)\npublic class OperationPositionBulderPlugin implements OperationBuilderPlugin {\n    @Override\n    public void apply(OperationContext context) {\n        context.operationBuilder().extensions(Lists.newArrayList(new StringVendorExtension(\"x-order\",\"1\")));\n    }\n\n    @Override\n    public boolean supports(DocumentationType delimiter) {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Properties for a Type - Java\nDESCRIPTION: This method retrieves the properties (fields and getter/setter methods) for a given `ResolvedType`. It uses Jackson's `BeanDescription` to discover the properties and then converts them into `ModelProperty` objects. The method iterates over the `BeanPropertyDefinition` objects to find and add the properties.  It uses safeGetPrimaryMember to get AnnotatedMember.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nprivate List<ModelProperty> propertiesFor(ResolvedType type, ModelContext givenContext, String namePrefix) {\n    List<ModelProperty> properties = newArrayList();\n    BeanDescription beanDescription = beanDescription(type, givenContext);\n    Map<String, BeanPropertyDefinition> propertyLookup = uniqueIndex(beanDescription.findProperties(),\n        BeanPropertyDefinitions.beanPropertyByInternalName());\n    for (Map.Entry<String, BeanPropertyDefinition> each : propertyLookup.entrySet()) {\n      LOG.debug(\"Reading property {}\", each.getKey());\n      BeanPropertyDefinition jacksonProperty = each.getValue();\n      Optional<AnnotatedMember>\n          annotatedMember\n          = Optional.fromNullable(safeGetPrimaryMember(jacksonProperty));\n      if (annotatedMember.isPresent()) {\n        properties.addAll(candidateProperties(type, annotatedMember.get(), jacksonProperty, givenContext, namePrefix));\n      }\n    }\n    return FluentIterable.from(properties).toSortedSet(byPropertyName()).asList();\n  }\n```\n\n----------------------------------------\n\nTITLE: Knife4j Cloud Aggregation YAML Configuration\nDESCRIPTION: This YAML snippet configures Knife4j for cloud mode aggregation. It specifies the server port, enables aggregation, and defines routes to fetch OpenAPI specifications from remote URLs. The configuration is used by Spring Boot to set up the application's behavior.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-cloud.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: 19081\nknife4j:\n  enableAggregation: true\n  cloud:\n    enable: true\n    routes:\n      - name: 测试分组1\n        uri: knife4j.xiaominfo.com\n        location: /v2/api-docs?group=2.X版本\n      - name: 测试分组2\n        uri: knife4j.xiaominfo.com\n        location: /v2/api-docs?group=3.默认接口\n\n```\n\n----------------------------------------\n\nTITLE: Security Requirement Object (Optional OAuth2, JSON)\nDESCRIPTION: This JSON defines a security requirement object with an optional OAuth2 scheme, allowing requests without authentication or with 'petstore_auth' and specified scopes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_105\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j in YML\nDESCRIPTION: This snippet shows how to enable Knife4j in the application's YML configuration file. It is a prerequisite for using other Knife4j features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/forbidSearch.md#_snippet_0\n\nLANGUAGE: YML\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Eureka Client Java\nDESCRIPTION: This snippet shows how to enable the Eureka client using the `@EnableEurekaClient` annotation and marks the class as a Spring Boot application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@EnableEurekaClient\n@SpringBootApplication\npublic class ServiceUserApplication {\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Knife4j in YML\nDESCRIPTION: This YAML snippet shows the configuration to enable Knife4j functionality. The `enable` property should be set to `true` to activate Knife4j features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/accessControl.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Enable Knife4j in application.yml\nDESCRIPTION: This YAML snippet shows how to enable Knife4j in the application.yml file. It is required to enable the enhanced features, starting from version 2.0.7.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/swaggermodels.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Static Resource Configuration - XML\nDESCRIPTION: Configures static resources in a Spring MVC application to serve webjar dependencies, crucial for accessing `doc.html`.  This configuration prevents 404 errors when accessing the Swagger UI.  It defines resource handlers for `doc.html` and `/webjars/**` locations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springmvc.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:resources location=\"classpath:/META-INF/resources/\" mapping=\"doc.html\"/>\n<mvc:resources location=\"classpath:/META-INF/resources/webjars/\" mapping=\"/webjars/**\"/>\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Host in application.yml\nDESCRIPTION: This snippet shows how to configure the custom host feature in Knife4j using the `application.yml` file.  The `enable-host` property enables or disables the feature, and the `enable-host-text` property specifies the host address.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/host.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    # 是否启用Host\n    enable-host: false\n    # 启用Host后地址，例如：http://192.168.0.111:8080\n    enable-host-text: \"\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Response Parameters with HashMap in Java\nDESCRIPTION: This Java snippet demonstrates how to use the `@DynamicResponseParameters` annotation to dynamically define response parameters for a REST endpoint.  The `name` attribute can be used to specify a unique class name, or left empty for Knife4j to generate one. The `properties` attribute allows defining parameters with name, value, example, requirement, and data type using `@DynamicParameter`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/dynamicResponseDescription.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@PostMapping(\"/createOrder426\")\n@ApiOperation(value = \"jdk-HashMap-动态创建显示参数-无@RequestBody\")\n@DynamicResponseParameters(name = \"CreateOrderHashMapModel\",properties = {\n        @DynamicParameter(name = \"\",value = \"注解id\",example = \"X000111\",required = true,dataTypeClass = Integer.class),\n        @DynamicParameter(name = \"name3\",value = \"订单编号-gson\"),\n        @DynamicParameter(name = \"name1\",value = \"订单编号1-gson\"),\n})\npublic Rest<HashMap> createOrder1235332(@RequestBody HashMap map){\n    Rest<HashMap> r=new Rest<>();\n    r.setData(map);\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger Docket with Knife4j Extensions\nDESCRIPTION: This Java code snippet shows how to customize a Swagger Docket object using Knife4j's extension classes. It involves injecting `OpenApiExtensionResolver`, building extensions with a group name, and applying the extensions to the Docket. The group name is used to differentiate custom documents in different Docket logic groups. Requires `@Configuration`, `@EnableSwagger2WebMvc` annotations and dependency injection of `OpenApiExtensionResolver`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/enhance.mdx#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n    /*引入Knife4j提供的扩展类*/\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n@Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                //赋予插件体系\n                .extensions(openApiExtensionResolver.buildExtensions(groupName));\n        return docket;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Swagger Handler Java Class\nDESCRIPTION: This Java class provides endpoints to access Swagger resources, security configuration, and UI configuration. It is a controller that handles requests for Swagger resources and returns the configuration as a ResponseEntity.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@RestController\npublic class SwaggerHandler {\n\n    @Autowired(required = false)\n    private SecurityConfiguration securityConfiguration;\n\n    @Autowired(required = false)\n    private UiConfiguration uiConfiguration;\n\n    private final SwaggerResourcesProvider swaggerResources;\n\n    @Autowired\n    public SwaggerHandler(SwaggerResourcesProvider swaggerResources) {\n        this.swaggerResources = swaggerResources;\n    }\n\n\n    @GetMapping(\"/swagger-resources/configuration/security\")\n    public Mono<ResponseEntity<SecurityConfiguration>> securityConfiguration() {\n        return Mono.just(new ResponseEntity<>(\n                Optional.ofNullable(securityConfiguration).orElse(SecurityConfigurationBuilder.builder().build()), HttpStatus.OK));\n    }\n\n    @GetMapping(\"/swagger-resources/configuration/ui\")\n    public Mono<ResponseEntity<UiConfiguration>> uiConfiguration() {\n        return Mono.just(new ResponseEntity<>(\n                Optional.ofNullable(uiConfiguration).orElse(UiConfigurationBuilder.builder().build()), HttpStatus.OK));\n    }\n\n    @GetMapping(\"/swagger-resources\")\n    public Mono<ResponseEntity> swaggerResources() {\n        return Mono.just((new ResponseEntity<>(swaggerResources.get(), HttpStatus.OK)));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Model Dependencies - Java\nDESCRIPTION: This method resolves the dependencies of a given `ModelContext`. It first obtains the `ResolvedType` from the `ModelContext` and checks if it's a base type. If not, it proceeds to collect dependencies from parameters, array elements, map types, properties/fields, and subclasses. This process involves recursively identifying all dependent types necessary to fully represent the model.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nprivate List<ResolvedType> resolvedDependencies(ModelContext modelContext) {\n    ResolvedType resolvedType = modelContext.alternateFor(modelContext.resolvedType(typeResolver));\n    if (isBaseType(ModelContext.fromParent(modelContext, resolvedType))) {\n      LOG.debug(\"Marking base type {} as seen\", resolvedType.getSignature());\n      modelContext.seen(resolvedType);\n      return newArrayList();\n    }\n    List<ResolvedType> dependencies = newArrayList(resolvedTypeParameters(modelContext, resolvedType));\n    dependencies.addAll(resolvedArrayElementType(modelContext, resolvedType));\n    dependencies.addAll(resolvedMapType(modelContext, resolvedType));\n    dependencies.addAll(resolvedPropertiesAndFields(modelContext, resolvedType));\n    dependencies.addAll(resolvedSubclasses(resolvedType));\n    return dependencies;\n  }\n```\n\n----------------------------------------\n\nTITLE: Minimal Configuration (v2) - knife4j Gateway\nDESCRIPTION: This YAML snippet shows the minimal configuration needed for knife4j gateway v2. It enables the gateway, sets the version to v2, and excludes the gateway service from discovery.  Requires a Spring Cloud Gateway application with knife4j gateway starter.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j/knife4j-gateway-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  gateway:\n    enabled: true\n    version: v2\n    discover:\n      excluded-services: ${spring.application.name}\n```\n\n----------------------------------------\n\nTITLE: Response Object Example (Status Code 200) - YAML\nDESCRIPTION: This YAML snippet demonstrates a response object for a status code of 200, defining the response description and content type as application/json. It includes a schema reference to a Pet object defined in the components/schemas section.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\n'200':\n  description: a pet to be returned\n  content: \n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n```\n\n----------------------------------------\n\nTITLE: XML Naming solution (YAML)\nDESCRIPTION: This YAML demonstrates a solution for naming issues when wrapping XML arrays. It defines both the outer and inner element names using the 'name' and 'wrapped' attributes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_84\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j Cloud Discovery in Spring Boot\nDESCRIPTION: This Java snippet illustrates how to enable Knife4j Cloud discovery in a Spring Boot application using the `@EnableKnife4jCloudDiscovery` annotation. This annotation activates the automatic registration feature.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/cloud-openapi.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@EnableKnife4jCloudDiscovery\n@SpringBootApplication\npublic class Knife4jSpringBootDemoApplication implements WebMvcConfigurer{\n    //more..\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Discovery Locator in YAML\nDESCRIPTION: This YAML snippet configures the Spring Cloud Gateway to automatically establish routes based on service names by enabling the discovery locator and setting `lower-case-service-id` to true.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/gateway/knife4j-gateway-introduce.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n    # 路由网关配置\n    gateway:\n      # 启用了自动根据服务名建立路由\n      discovery:\n        locator:\n          enabled: true\n          lower-case-service-id: true\n\n```\n\n----------------------------------------\n\nTITLE: Include XML Comments for Documentation\nDESCRIPTION: This snippet demonstrates how to include XML comments in the Swagger documentation.  It adds the XML comments file to the Swagger generator configuration, enabling the display of comments on controllers and actions within the Knife4j UI. The `true` parameter enables the display of comments on controllers.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-guid.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nc.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, \"SwaggerDemo.xml\"),true);\n```\n\n----------------------------------------\n\nTITLE: Defining Components Schema in JSON\nDESCRIPTION: This JSON snippet defines reusable components for an OpenAPI specification, including schemas for `GeneralError`, `Category`, and `Tag` objects. It also defines parameters for pagination (`skipParam` and `limitParam`), common responses (`NotFound`, `IllegalInput`, `GeneralError`), and security schemes (`api_key`, `petstore_auth`).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"http://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Disk Mode in Nacos\nDESCRIPTION: This Properties snippet configures the Disk mode for Knife4j Insight within Nacos. It defines multiple documents with context paths and routes to OpenAPI specification files stored within Nacos, identified by their data IDs and groups. Each document can have multiple routes, allowing for grouping of OpenAPI definitions.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-nacos.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# 第一个文档，访问：http://ip:port/disk-t1/doc.html\nknife4j.disk[0].contextPath=disk-t1\nknife4j.disk[0].routes[0].name=分组1\nknife4j.disk[0].routes[0].dataId=openapi1\nknife4j.disk[0].routes[0].group=DEFAULT_GROUP\nknife4j.disk[0].routes[0].order=1\n\n# 第二个文档，访问：http://ip:port/disk-t2/doc.html\nknife4j.disk[1].contextPath=disk-t2\nknife4j.disk[1].routes[0].name=分组2-1\nknife4j.disk[1].routes[0].dataId=openapi2\nknife4j.disk[1].routes[0].group=DEFAULT_GROUP\nknife4j.disk[1].routes[0].order=1\nknife4j.disk[1].routes[1].name=分组2-2\nknife4j.disk[1].routes[1].dataId=openapi3\nknife4j.disk[1].routes[1].group=DEFAULT_GROUP\nknife4j.disk[1].routes[1].order=2\n\n# more....\n\n```\n\n----------------------------------------\n\nTITLE: Swagger Handler Java\nDESCRIPTION: This snippet defines a `SwaggerHandler` class with REST endpoints to expose Swagger resources, security configuration, and UI configuration.  It uses the `SwaggerResourcesProvider` to retrieve the list of Swagger resources.  These endpoints are necessary for the Knife4j UI to function correctly with Spring Cloud Gateway.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@RestController\npublic class SwaggerHandler {\n\n    @Autowired(required = false)\n    private SecurityConfiguration securityConfiguration;\n\n    @Autowired(required = false)\n    private UiConfiguration uiConfiguration;\n\n    private final SwaggerResourcesProvider swaggerResources;\n\n    @Autowired\n    public SwaggerHandler(SwaggerResourcesProvider swaggerResources) {\n        this.swaggerResources = swaggerResources;\n    }\n\n\n    @GetMapping(\"/swagger-resources/configuration/security\")\n    public Mono<ResponseEntity<SecurityConfiguration>> securityConfiguration() {\n        return Mono.just(new ResponseEntity<>(\n                Optional.ofNullable(securityConfiguration).orElse(SecurityConfigurationBuilder.builder().build()), HttpStatus.OK));\n    }\n\n    @GetMapping(\"/swagger-resources/configuration/ui\")\n    public Mono<ResponseEntity<UiConfiguration>> uiConfiguration() {\n        return Mono.just(new ResponseEntity<>(\n                Optional.ofNullable(uiConfiguration).orElse(UiConfigurationBuilder.builder().build()), HttpStatus.OK));\n    }\n\n    @GetMapping(\"/swagger-resources\")\n    public Mono<ResponseEntity> swaggerResources() {\n        return Mono.just((new ResponseEntity<>(swaggerResources.get(), HttpStatus.OK)));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Language in YML\nDESCRIPTION: This snippet shows how to configure the default language for Knife4j in the application's YAML configuration file. The `language` property under `knife4j.setting` allows specifying either Chinese (zh-CN) or English (en-US) as the default language for the documentation UI.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/i18n.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    # Knife4j默认显示中文(zh-CN),如果开发者想直接显示英文(en-US)，在通过该配置进行设置即可\n    language: zh-CN\n```\n\n----------------------------------------\n\nTITLE: Knife4j Aggregation POM Configuration (XML)\nDESCRIPTION: This XML snippet shows the POM file configuration required to set up a Spring Boot project with Knife4j Aggregation. It includes the necessary dependencies like `spring-boot-starter-web` and `knife4j-aggregation-spring-boot-starter`. Version numbers may need to be adjusted to match available releases. It depends on Maven to build the project.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-disk.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.4.0</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-aggregation-disk-demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>knife4j-aggregation-disk-demo</name>\n    <description>通过基于Spring Boot的工程聚合任意微服务接口文档</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.github.xiaoymin</groupId>\n            <artifactId>knife4j-aggregation-spring-boot-starter</artifactId>\n            <version>2.0.8</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n----------------------------------------\n\nTITLE: Operation Example in YAML\nDESCRIPTION: This YAML snippet represents the same operation object as the previous JSON snippet, providing an alternative representation for defining an OpenAPI operation.  It includes fields such as `tags`, `summary`, `operationId`, `parameters`, `requestBody`, `responses`, and `security`. It showcases how to update a pet with form data using YAML syntax.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\ntags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       properties:\n          name:\n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content:\n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content:\n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Aggregation Starter Dependency (Maven)\nDESCRIPTION: This XML snippet demonstrates how to include the `knife4j-aggregation-spring-boot-starter` dependency in a Maven project.  It's required to enable the Knife4j aggregation feature. The `version` should be replaced with the latest version available in the Maven Central Repository.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregation.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-aggregation-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库搜索aggregation最新版本号-->\n    <version>2.0.8</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Import Knife4j Dependencies BOM in Maven\nDESCRIPTION: This snippet demonstrates how to import the `knife4j-dependencies` BOM in your Maven project's `pom.xml` file. This approach helps manage Knife4j dependencies and avoid version conflicts. The snippet should be placed within the `<dependencyManagement>` section of your `pom.xml`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/mavenbom.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.github.xiaoymin</groupId>\n            <artifactId>knife4j-dependencies</artifactId>\n            <!--在引用时请在maven中央仓库搜索2.X最新版本号-->\n            <version>2.0.9</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Define JSON Example with Schema Reference - JSON\nDESCRIPTION: Defines a JSON example with a schema reference and multiple examples with summaries and values. The 'schema' references a component schema, while 'examples' provides specific instances, showcasing different values for the same schema, including string, number, boolean, and nested objects.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\": \n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  { \n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docket to Ignore HttpSession - Java\nDESCRIPTION: This code shows how to configure a `Docket` bean to ignore the `HttpSession` class.  The `ignoredParameterTypes` method is used to specify `HttpSession.class` as an ignored type. This configuration ensures that `HttpSession` parameters are excluded from the generated Swagger documentation across all endpoints. Requires Springfox dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox21.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Bean(value = \"groupRestApi\")\n@Order(value = 1)\npublic Docket groupRestApi() {\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(groupApiInfo())\n        .groupName(\"分组接口\")\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.group\"))\n        .paths(PathSelectors.any())\n        .build()\n        .ignoredParameterTypes(HttpSession.class) //添加忽略类型\n        .extensions(Lists.newArrayList(new OrderExtensions(2))).securityContexts(Lists.newArrayList(securityContext(),securityContext1())).securitySchemes(Lists.<SecurityScheme>newArrayList(apiKey(),apiKey1()));\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Knife4j Gateway OpenAPI3Response.java\nDESCRIPTION: This Java snippet provides a workaround to fix the sorting issue in knife4j-gateway.  By overriding the `OpenAPI3Response` class and setting `tagsSorter` to \"order\", the API order defined in `@ApiOperationSupport` will be respected.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/apiSort.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\npublic class OpenAPI3Response implements Serializable {\n    \n    /**\n     * ConfigUrl，eg: /v3/api-docs/swagger-config\n     */\n    private String configUrl;\n    /**\n     * oauth2RedirectUrl,eg : http://192.168.10.103:17812/swagger-ui/oauth2-redirect.html\n     */\n    private String oauth2RedirectUrl;\n    \n    /**\n     * operation接口排序规则\n     */\n    private String operationsSorter = \"alpha\";\n    \n    /**\n     * 修改为order\n     */\n    private String tagsSorter = \"order\";\n\n    // other....\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host for API debugging - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the base URL for API requests in Knife4j, which is used when debugging interfaces. It checks if host is enabled and if the `enableHostText` property is configured for setting the base URL, before configuring the axios instance.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-06-28-knife4j-2.0.4-issue.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar baseUrl='';//默认是空\n//是否启用Host\nif(this.enableHost){\n    baseUrl=this.enableHostText;\n}\nvar requestConfig={\n    baseURL:baseUrl,//调用目标Host服务的接口\n    url: url,\n    method: methodType,\n    headers: headers,\n    params: formParams,\n    data: data,\n    //Cookie标志\n    withCredentials:this.debugSendHasCookie(headers),\n    timeout: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Add Server to SwaggerGen Options (C#)\nDESCRIPTION: This code adds a server configuration to the SwaggerGen options. This addresses an issue in the frontend where the server list is expected to be non-empty. Url is an empty string here.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\nservices.AddSwaggerGen(c =>\n{\n\n    c.AddServer(new OpenApiServer()\n    {\n        Url = \"\",\n        Description = \"v1\"\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Docket with OpenApiExtensionResolver in Java\nDESCRIPTION: This Java code snippet configures a Swagger Docket object, integrating Knife4j's OpenApiExtensionResolver to extend the API documentation with custom markdown files. It demonstrates how to inject the OpenApiExtensionResolver, build the Docket, and add the extensions using the resolver. The `groupName` parameter should match the 'group' defined in the application.yml.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/selfdocument.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildExtensions(groupName));\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register JSR303 Plugin Beans\nDESCRIPTION: This configuration class registers various Spring beans that handle JSR303 validation annotations.  These beans are responsible for extracting validation metadata from the annotations and making them available to Springfox for display in the generated API documentation. Each bean corresponds to a specific JSR303 annotation or a group of related annotations, ensuring comprehensive validation support.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/jsr303.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class BeanValidatorPluginsConfiguration {\n\n  @Bean\n  public ExpandedParameterMinMaxAnnotationPlugin expanderMinMax() {\n    return new ExpandedParameterMinMaxAnnotationPlugin();\n  }\n\n  @Bean\n  public ExpandedParameterNotNullAnnotationPlugin expanderNotNull() {\n    return new ExpandedParameterNotNullAnnotationPlugin();\n  }\n\n  @Bean\n  public ExpandedParameterNotBlankAnnotationPlugin expanderNotBlank() {\n    return new ExpandedParameterNotBlankAnnotationPlugin();\n  }\n\n  @Bean\n  public ExpandedParameterPatternAnnotationPlugin expanderPattern() {\n    return new ExpandedParameterPatternAnnotationPlugin();\n  }\n\n  @Bean\n  public ExpandedParameterSizeAnnotationPlugin expanderSize() {\n    return new ExpandedParameterSizeAnnotationPlugin();\n  }\n\n  @Bean\n  public springfox.bean.validators.plugins.parameter.MinMaxAnnotationPlugin parameterMinMax() {\n    return new springfox.bean.validators.plugins.parameter.MinMaxAnnotationPlugin();\n  }\n\n  @Bean\n  public springfox.bean.validators.plugins.parameter.NotNullAnnotationPlugin parameterNotNull() {\n    return new springfox.bean.validators.plugins.parameter.NotNullAnnotationPlugin();\n  }\n\n  @Bean\n  public springfox.bean.validators.plugins.parameter.NotBlankAnnotationPlugin parameterNotBlank() {\n    return new springfox.bean.validators.plugins.parameter.NotBlankAnnotationPlugin();\n  }\n\n  @Bean\n  public springfox.bean.validators.plugins.parameter.PatternAnnotationPlugin parameterPattern() {\n    return new springfox.bean.validators.plugins.parameter.PatternAnnotationPlugin();\n  }\n\n  @Bean\n  public springfox.bean.validators.plugins.parameter.SizeAnnotationPlugin parameterSize() {\n    return new springfox.bean.validators.plugins.parameter.SizeAnnotationPlugin();\n  }\n\n  @Bean\n  public MinMaxAnnotationPlugin minMaxPlugin() {\n    return new MinMaxAnnotationPlugin();\n  }\n\n  @Bean\n  public DecimalMinMaxAnnotationPlugin decimalMinMaxPlugin() {\n    return new DecimalMinMaxAnnotationPlugin();\n  }\n\n  @Bean\n  public SizeAnnotationPlugin sizePlugin() {\n    return new SizeAnnotationPlugin();\n  }\n\n  @Bean\n  public NotNullAnnotationPlugin notNullPlugin() {\n    return new NotNullAnnotationPlugin();\n  }\n\n  @Bean\n  public NotBlankAnnotationPlugin notBlankPlugin() {\n    return new NotBlankAnnotationPlugin();\n  }\n\n  @Bean\n  public PatternAnnotationPlugin patternPlugin() {\n    return new PatternAnnotationPlugin();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Home Page\nDESCRIPTION: This YAML configuration snippet demonstrates how to enable custom home page content in Knife4j and specify the location of the Markdown file. `enable-home-custom` enables the feature, and `home-custom-path` defines the path to the Markdown file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/customHome.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    enable-home-custom: true\n    # 自4.1.0版本开始，该属性过时，请使用下面home-custom-path属性\n    home-custom-location: classpath:markdown/home.md\n    # 自4.1.0版本开始，替代home-custom-location属性，开发者请使用该配置\n    home-custom-path: classpath:markdown/home.md\n```\n\n----------------------------------------\n\nTITLE: Configuration Example in application.yml\nDESCRIPTION: This YAML snippet demonstrates the configuration parameters required in the `application.yml` file for the Knife4j Cloud auto-registration feature. It includes properties like `accessKey`, `code`, `server`, `ssl`, and `client`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/cloud-openapi.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  cloud:\n    ## 参考注册API中的accessKey\n    accessKey: JDUkd1YvSi5zZmUkMHYuSGNmN1hMazJPajJuMjNJVW43dWNyL2tyR3N4bzJaa1A2ZC5mSUlwNA\n    ## 项目编号\n    code: APITest\n    ## Knife4jCloud的对外域名地址\n    server: http://127.0.0.1:19011\n    ## 当前服务是否是HTTPS的,默认可以不配置,并且该参数默认为false\n    ssl: false\n    ## 参考注册API中的client属性,该参数可以不配置,只有在域名的情况下需要进行配置\n    client: http://test.domain.com\n```\n\n----------------------------------------\n\nTITLE: Adding Author to Controller with @ApiSupport\nDESCRIPTION: This Java code snippet demonstrates how to add author information to a Controller using the `@ApiSupport` annotation. This indicates that all APIs within the Controller are developed by the specified author. The `@Api` annotation defines the tags for the controller, and `@RestController` and `@RequestMapping` define the controller and request mapping respectively.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/author.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Api(tags = \"2.0.3版本-20200312\")\n@ApiSupport(author = \"xiaoymin@foxmail.com\",order = 284)\n@RestController\n@RequestMapping(\"/api/nxew203\")\npublic class Api203Constroller {\n    \n    \n}\n```\n\n----------------------------------------\n\nTITLE: ApiResourceController for Swagger Resources\nDESCRIPTION: This controller handles requests to the /swagger-resources endpoint. It retrieves SwaggerResource information using the SwaggerResourcesProvider interface and returns it as a JSON response.  It uses `@Autowired` to inject `SecurityConfiguration`, `UiConfiguration`, and `SwaggerResourcesProvider` dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox16.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Controller\n@ApiIgnore\n@RequestMapping(\"/swagger-resources\")\npublic class ApiResourceController {\n\n\n  @Autowired(required = false)\n  private SecurityConfiguration securityConfiguration;\n  @Autowired(required = false)\n  private UiConfiguration uiConfiguration;\n\n  private final SwaggerResourcesProvider swaggerResources;\n\n  @Autowired\n  public ApiResourceController(SwaggerResourcesProvider swaggerResources) {\n    this.swaggerResources = swaggerResources;\n  }\n\n  @RequestMapping(value = \"/configuration/security\")\n  @ResponseBody\n  public ResponseEntity<SecurityConfiguration> securityConfiguration() {\n    return new ResponseEntity<SecurityConfiguration>(\n        Optional.fromNullable(securityConfiguration).or(SecurityConfigurationBuilder.builder().build()), HttpStatus.OK);\n  }\n\n  @RequestMapping(value = \"/configuration/ui\")\n  @ResponseBody\n  public ResponseEntity<UiConfiguration> uiConfiguration() {\n    return new ResponseEntity<UiConfiguration>(\n        Optional.fromNullable(uiConfiguration).or(UiConfigurationBuilder.builder().build()), HttpStatus.OK);\n  }\n\n  @RequestMapping\n  @ResponseBody\n  public ResponseEntity<List<SwaggerResource>> swaggerResources() {\n    return new ResponseEntity<List<SwaggerResource>>(swaggerResources.get(), HttpStatus.OK);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Springdoc OpenAPI Configuration (YML)\nDESCRIPTION: This YAML snippet shows example configurations for Springdoc OpenAPI, including settings for Swagger UI, API docs path, and group configurations.  It also includes Knife4j-specific settings to enable and configure its enhanced features.  The `packages-to-scan` property specifies the base package for API controllers.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/index.mdx#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n# springdoc-openapi项目配置\nspringdoc:\n  swagger-ui:\n    path: /swagger-ui.html\n    tags-sorter: alpha\n    operations-sorter: alpha\n  api-docs:\n    path: /v3/api-docs\n  group-configs:\n    - group: 'default'\n      paths-to-match: '/**'\n      packages-to-scan: com.xiaominfo.knife4j.demo.web\n# knife4j的增强配置，不需要增强可以不配\nknife4j:\n  enable: true\n  setting:\n    language: zh_cn\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Scheme (YAML)\nDESCRIPTION: This YAML snippet defines a basic authentication security scheme for use in an OpenAPI specification. It specifies the type as 'http' and the scheme as 'basic'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_92\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: basic\n```\n\n----------------------------------------\n\nTITLE: Enabling Eureka Server Java Annotation\nDESCRIPTION: This Java code snippet uses the `@EnableEurekaServer` annotation to enable the Eureka server functionality in a Spring Boot application. The `@SpringBootApplication` annotation indicates that it is the main entry point of the Spring Boot application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@EnableEurekaServer\n@SpringBootApplication\npublic class ServiceServerApplication {\n    \n    \n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode via YML\nDESCRIPTION: This configuration snippet shows how to disable the debugging functionality in Knife4j using the `knife4j.setting.enable-debug` property in the application's YML file. Setting this property to `false` will disable the debug features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/forbidDebug.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    enable-debug: false\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Server Objects in JSON\nDESCRIPTION: This JSON snippet defines multiple Server objects, each with a URL and description. The snippet shows development, staging and production server configurations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Docket for OAuth2 Password Grant - Java\nDESCRIPTION: Configures the Docket object in Springfox Swagger to enable OAuth2 password grant type with Knife4j. It defines the password grant flow by specifying the token URL. Authorization scopes are defined to control access to resources.  It requires Springfox Swagger and Knife4j dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/oauth2-password.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket productApi() {\n        //schema\n        List<GrantType> grantTypes=new ArrayList<>();\n         //密码模式\n        String passwordTokenUrl=\"http://localhost:18010/oauth/token\";\n        ResourceOwnerPasswordCredentialsGrant resourceOwnerPasswordCredentialsGrant=new ResourceOwnerPasswordCredentialsGrant(passwordTokenUrl);\n        grantTypes.add(resourceOwnerPasswordCredentialsGrant);\n        OAuth oAuth=new OAuthBuilder().name(\"oauth2\")\n                .grantTypes(grantTypes).build();\n        //context\n        //scope方位\n        List<AuthorizationScope> scopes=new ArrayList<>();\n        scopes.add(new AuthorizationScope(\"read\",\"read  resources\"));\n        scopes.add(new AuthorizationScope(\"write\",\"write resources\"));\n        scopes.add(new AuthorizationScope(\"reads\",\"read all resources\"));\n        scopes.add(new AuthorizationScope(\"writes\",\"write all resources\"));\n\n        SecurityReference securityReference=new SecurityReference(\"oauth2\",scopes.toArray(new AuthorizationScope[]{}));\n        SecurityContext securityContext=new SecurityContext(Lists.newArrayList(securityReference),PathSelectors.ant(\"/api/**\"));\n        //schemas\n        List<SecurityScheme> securitySchemes=Lists.newArrayList(oAuth);\n        //securyContext\n        List<SecurityContext> securityContexts=Lists.newArrayList(securityContext);\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.xiaominfo.knife4j.oauth2.web\"))\n                .paths(PathSelectors.any())\n                .build()\n                .securityContexts(securityContexts)\n                .securitySchemes(securitySchemes)\n                .apiInfo(apiInfo());\n\n\n    }\n\n\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder().title(\"knife4j-oauth2-demo\").description(\"\")\n                .termsOfServiceUrl(\"https://doc.xiaominfo.com\")\n                .contact(new Contact(\"Developers\", \"https://gitee.com/xiaoym/knife4j\", \"\"))\n                .license(\"Open Source\")\n                .licenseUrl(\"\\\"https://www.apache.org/licenses/LICENSE-2.0\")\n                .version(\"1.0.0\")\n                .build();\n\n    }\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: MobileConfig Class with Plugin Registries\nDESCRIPTION: This code configures the Spring application to enable the Spring Plugin system for the MobileIncrementBusiness interface using the `@EnablePluginRegistries` annotation. It also defines beans for both MobileIncrementV1 and MobileIncrementDiscount, making them available as plugins.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnablePluginRegistries({MobileIncrementBusiness.class})\npublic class MobileConfig {\n\n\n    @Bean\n    public MobileIncrementV1 mobileIncrementV1(){\n        return new MobileIncrementV1();\n    }\n\n   @Bean\n    public MobileIncrementDiscount mobileIncrementDiscount(){\n        return new MobileIncrementDiscount();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Mode Configuration with cloud.properties\nDESCRIPTION: This properties file configures the Cloud mode for Knife4j.  It specifies the name, URI, and location of the OpenAPI document. It points to a remote OpenAPI definition, allowing Knife4j to aggregate documentation from external services.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_4\n\nLANGUAGE: Properties\nCODE:\n```\nknife4j.cloud[0].routes[0].name=用户\nknife4j.cloud[0].routes[0].uri=http://192.168.0.152:8999\nknife4j.cloud[0].routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Cloud模式\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Mode in Nacos\nDESCRIPTION: This Properties snippet configures the Cloud mode for Knife4j Insight within Nacos. It defines multiple documents, each with a context path and routes to external OpenAPI endpoints. Each route specifies the URI and location of the OpenAPI definition, allowing Knife4j Insight to aggregate specifications from different services.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-nacos.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# cloud模式第一个文档，http://ip:port/cloud1/doc.html\nknife4j.cloud[0].contextPath=cloud1\nknife4j.cloud[0].routes[0].name=用户\nknife4j.cloud[0].routes[0].uri=http://192.168.0.152:8999\nknife4j.cloud[0].routes[0].location=/v2/api-docs?group=2.X版本\n\n# cloud模式第二个文档，http://ip:port/cloud2/doc.html\nknife4j.cloud[1].contextPath=cloud2\nknife4j.cloud[1].routes[0].name=订单\nknife4j.cloud[1].routes[0].uri=http://192.168.0.153:8999\nknife4j.cloud[1].routes[0].location=/v2/api-docs?group=2.X版本\n\n\n```\n\n----------------------------------------\n\nTITLE: JWT Bearer Security Scheme (YAML)\nDESCRIPTION: This YAML defines a JWT Bearer security scheme. It specifies the 'type' as 'http', the 'scheme' as 'bearer', and the 'bearerFormat' as 'JWT'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_96\n\nLANGUAGE: yaml\nCODE:\n```\ntype: http\nscheme: bearer\nbearerFormat: JWT\n```\n\n----------------------------------------\n\nTITLE: Define JSON Example with Schema Reference - YAML\nDESCRIPTION: Defines a JSON example with a schema reference and multiple examples with summaries and values, using YAML syntax. The schema references a component schema, while examples provides specific instances, showcasing different values. This example uses YAML to demonstrate the same structure and content as the JSON example.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\napplication/json: \n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Gateway Starter Dependency - Maven\nDESCRIPTION: This XML snippet shows how to add the Knife4j Gateway Starter dependency to a Maven project. This dependency is required to enable the Spring Cloud Gateway aggregation component. The version should be aligned with the knife4j version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.1.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-gateway-spring-boot-starter</artifactId>\n    <version>4.4.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j Feature via YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable Knife4j's features.  The `enable` property under `knife4j` should be set to `true` to activate Knife4j functionality.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/customFooter.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Eureka Server Dependency Configuration XML\nDESCRIPTION: This XML snippet defines the dependency for the Eureka server, which is required for service registration and discovery in a Spring Cloud environment.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple CarDTO Class\nDESCRIPTION: This Java code defines a simple `CarDTO` class with a `seatCount` property.  It serves as the destination object for MapStruct's mapping process from the `Car` class.  The class should include getters and setters, as well as constructors (though they are not explicitly shown in the provided code).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox2.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CarDTO {\n    private int seatCount;\n    //getter and setter ,constructs\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example\nDESCRIPTION: This JSON shows an example response from a login API that includes a token in the `data` field.  The following JavaScript code demonstrates how to extract this token.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/afterScript.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 8200,\n  \"message\": null,\n  \"data\": {\n    \"token\": \"1y1tn8tvw93fxixp79dcx0nugixkw4su\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud mode directory structure\nDESCRIPTION: This snippet shows the directory structure required for the Cloud mode, including the cloud.properties file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-use.md#_snippet_3\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------cloud.properties\n```\n\n----------------------------------------\n\nTITLE: Cloud mode properties configuration\nDESCRIPTION: This snippet configures the `cloud.properties` file for Cloud mode in Knife4jAggregationDesktop. It specifies the name, URI, and location of the OpenAPI documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-use.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.cloud.routes[0].name=用户\nknife4j.cloud.routes[0].uri=192.168.0.152:8999\nknife4j.cloud.routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Cloud模式\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Micro Spring Boot Starter Dependency using Maven\nDESCRIPTION: This snippet illustrates how to include the Knife4j Micro Spring Boot starter dependency in a Maven project. This is specifically designed for microservices architectures, where the UI is typically handled by a gateway. This starter includes only the enhancement attributes and is used in microservices.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-03-08-knife4j-2.0.2-issue.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-micro-spring-boot-starter</artifactId>\n    <version>2.0.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Add Knife4j Spring Boot Starter Dependency - XML\nDESCRIPTION: This XML snippet demonstrates how to add the `knife4j-spring-boot-starter` dependency to your Maven project. This starter is used in Spring Boot projects and includes both the UI and core functionality of Knife4j, enabling quick integration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-05-24-knife4j-2.0.3-issue.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-spring-boot-starter</artifactId>\n  <version>2.0.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: CustomerService Plugin Injection - Java\nDESCRIPTION: This snippet illustrates how to inject a `PluginRegistry` instance into a Spring-managed component using `@Autowired`.  The `PluginRegistry` is parameterized with the plugin interface (`MobileIncrementBusiness`) and a delimiter type (`MobileCustomer`).  This allows the component to access and utilize the registered plugins at runtime. The ultimate instance of PluginRegistry is `OrderAwarePluginRegistry`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\n@Component\npublic class CustomerService {\n\n    @Autowired\n    private PluginRegistry<MobileIncrementBusiness,MobileCustomer> mobileCustomerPluginRegistry;\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Configuration Java Class\nDESCRIPTION: This Java class configures Swagger for API documentation. It enables Swagger 2, Swagger Bootstrap UI, and Bean Validator Plugins. It also defines a Docket bean for the user API, specifying API information, request handler selectors, and path selectors.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n\n@Configuration\n@EnableSwagger2\n@EnableSwaggerBootstrapUi\n@Import(BeanValidatorPluginsConfiguration.class)\npublic class SwaggerConfiguration {\n\n    @Bean(value = \"userApi\")\n    @Order(value = 1)\n    public Docket groupRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(groupApiInfo())\n                .select()\n                \t.apis(RequestHandlerSelectors.basePackage(\"com.xiaominfo.swagger.service.user.controller\"))\n                .paths(PathSelectors.any())\n\n                .build();\n    }\n\n    private ApiInfo groupApiInfo(){\n        return new ApiInfoBuilder()\n                .title(\"swagger-bootstrap-ui很棒~~~！！！\")\n                .description(\"<div style='font-size:14px;color:red;'>swagger-bootstrap-ui-demo RESTful APIs</div>\")\n                .termsOfServiceUrl(\"http://www.group.com/\")\n                .contact(\"group@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameter with @ApiIgnore - Java\nDESCRIPTION: This snippet demonstrates how to use the `@ApiIgnore` annotation to exclude a parameter (HttpSession in this case) from the generated Swagger documentation. The annotation is placed directly before the parameter in the method signature. Requires `springfox.swagger2.annotations.ApiIgnore`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox21.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PostMapping(\"/createOr33der\")\n@ApiOperation(value = \"创建订单\")\npublic Rest<Order> createOrdetr(@RequestBody Order order,@ApiIgnore HttpSession httpSession){\n    Rest<Order> r=new Rest<>();\n    r.setData(order);\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Request body with string array in JSON\nDESCRIPTION: This JSON defines a request body that accepts an array of strings with media type 'text/plain'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service User Dependencies Configuration XML\nDESCRIPTION: This snippet shows the dependencies required for a microservice (service-user). It includes dependencies for web, Eureka client, testing, and the Knife4j micro starter. These dependencies are specified in the pom.xml file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-micro-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Complex Array Response Example - JSON\nDESCRIPTION: This JSON example represents a response object for a complex object array. It specifies the content type as application/json and includes a schema definition with an array type and a reference to a VeryComplexType schema for the items.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Spring Boot Starter Dependency (Maven)\nDESCRIPTION: This XML snippet shows how to add the `knife4j-spring-boot-starter` dependency to a Maven project. This starter includes the UI components and is suitable for Spring Boot applications. It simplifies integration by automatically configuring Knife4j within the Spring Boot environment.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2019-12-16-knife4j-2.0.0-issue.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-spring-boot-starter</artifactId>\n  <version>2.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j in YML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to enable Knife4j by setting the `knife4j.enable` property to `true`. This configuration is required to activate Knife4j's features and enhancements within the application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/author.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Configure Swagger to import JSR303\nDESCRIPTION: This code snippet demonstrates how to configure Swagger with Springfox to include JSR303 validation support. It imports `BeanValidatorPluginsConfiguration` to register the necessary plugins for handling JSR303 annotations. This enables the display of validation constraints within the Knife4j interface.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/jsr303.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\n@Import(BeanValidatorPluginsConfiguration.class)\npublic class SwaggerConfiguration {\n    //more...\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Enhanced Mode (<= 2.0.4) - Java\nDESCRIPTION: Enables Knife4j's enhanced mode for versions 2.0.4 and earlier by adding a `@ComponentScan` annotation to the `SwaggerConfiguration` class. This component scan includes the necessary packages for Knife4j's plugins and web components.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springmvc.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2\n//增强扫描\n@ComponentScan(\n        basePackages = {\n                \"com.github.xiaoymin.knife4j.spring.plugin\",\n                \"com.github.xiaoymin.knife4j.spring.web\"\n        }\n)\npublic class SwaggerConfiguration {\n    //more..\n}\n```\n\n----------------------------------------\n\nTITLE: Service User Application Configuration YML\nDESCRIPTION: This snippet configures the application.yml file for the service-user microservice. It sets the server port, application name, and Eureka client service URL.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nserver:\n  port: 10001\nspring:\n  application:\n    name: service-user\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:10000/eureka/\n```\n\n----------------------------------------\n\nTITLE: SpringfoxWebMvcConfiguration with ComponentScan\nDESCRIPTION: This snippet showcases the `SpringfoxWebMvcConfiguration` class, a Spring configuration class responsible for setting up Springfox's web components.  It uses `@ComponentScan` to specify the base packages to scan for Spring components, including those related to scanners, operation readers, parameter readers, plugins, and paths. It also uses `@EnablePluginRegistries` to register different plugin interfaces.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox6.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@Import({ ModelsConfiguration.class })\n@ComponentScan(basePackages = {\n    \"springfox.documentation.spring.web.scanners\",\n    \"springfox.documentation.spring.web.readers.operation\",\n    \"springfox.documentation.spring.web.readers.parameter\",\n    \"springfox.documentation.spring.web.plugins\",\n    \"springfox.documentation.spring.web.paths\"\n})\n@EnablePluginRegistries({ DocumentationPlugin.class,\n    ApiListingBuilderPlugin.class,\n    OperationBuilderPlugin.class,\n    ParameterBuilderPlugin.class,\n    ExpandedParameterBuilderPlugin.class,\n    ResourceGroupingStrategy.class,\n    OperationModelsProviderPlugin.class,\n    DefaultsProviderPlugin.class,\n    PathDecorator.class,\n    ApiListingScannerPlugin.class\n})\npublic class SpringfoxWebMvcConfiguration {\n    //more..\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Type Property in Java\nDESCRIPTION: This code snippet shows the correct way to define a generic type property named 'data' in Java.  The data field is declared with the generic type `T`, which is important for Swagger to correctly resolve the type and display its properties.  The type `T` should be resolved at the interface level.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swagger-des-not-found.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate T data;//返回属性T\n```\n\n----------------------------------------\n\nTITLE: Disk Mode Configuration (disk.properties)\nDESCRIPTION: Shows the configuration for disk mode using `disk.properties`. It defines the route names and locations of the OpenAPI JSON files.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.disk.routes[0].name=用户服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk.routes[0].location=userOpenApi.json\n\nknife4j.disk.routes[1].name=订单服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk.routes[1].location=orderOpenApi.json\n\n```\n\n----------------------------------------\n\nTITLE: Implicit OAuth2 Security Scheme (YAML)\nDESCRIPTION: This YAML defines an Implicit OAuth2 security scheme, providing the authorization URL and scopes for the flow. The scopes define the permissions requested by the application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_98\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Knife4jAggregationDesktop Application Properties Configuration\nDESCRIPTION: This snippet shows the configurable properties for Knife4jAggregationDesktop. It includes settings for the port, basic authentication, and individual project authentication. These properties allow developers to customize the application's behavior and secure access to the aggregated OpenAPI documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# Knife4jAggregationDesktop 启动端口号\nknife4j.port=18006\n# 为所有Knife4jAggregationDesktop开放出去的OpenAPI文档加权，设置BasicAuth访问密码\n# enable=true 代表启用\nknife4j.basic.enable=true\nknife4j.basic.username=zhangsan\nknife4j.basic.password=123456\n\n# 使用者也可以为单个开放出去的OpenAPI文档独立设置Basic验证权限，设置规则是knife4j.basic.项目code.开头\n# 例如一个项目文档的访问路径是：http://localhost:18006/bigdata/doc.html,那么bigdata就是该项目的code，为该文档设置BasicAuth\nknife4j.basic.bigdata.enable=true\nknife4j.basic.bigdata.username=zhangsan\nknife4j.basic.bigdata.password=123456\n\n```\n\n----------------------------------------\n\nTITLE: Request body with model reference in YAML\nDESCRIPTION: This YAML example is equivalent to the previous JSON, defining a request body with references to a User schema and providing examples for different media types.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\ncontent: \n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'http://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example in XML\n        externalValue: 'http://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in text plain format\n        externalValue: 'http://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user: \n        summary: User example in other format\n        externalValue: 'http://foo.bar/examples/user-example.whatever\n```\n\n----------------------------------------\n\nTITLE: Starting Knife4jInsight with Docker Compose\nDESCRIPTION: This command is used to start the Knife4jInsight service defined in the docker-compose.yml file. It will pull the necessary images, create containers, and start the services according to the configuration specified in the file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-introduction.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j\nDESCRIPTION: This YAML snippet shows how to enable Knife4j in the application's configuration. The `enable` property must be set to `true`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/includeRequestParameter.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Micro Spring Boot Starter Dependency (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the `knife4j-micro-spring-boot-starter` dependency to a microservice project's `pom.xml` file.  This is used when the UI is not directly included in the microservice. The dependency includes the group ID, artifact ID, and version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2019-12-23-knife4j-2.0.1-issue.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-micro-spring-boot-starter</artifactId>\n    <version>2.0.1</version>\n</dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing CommonFormEnumParser in Enum (Java)\nDESCRIPTION: This code snippet demonstrates how to implement the `CommonFormEnumParser` interface within the `CourseType` enum. The `fromValue` method provides custom logic for converting a string input to a `CourseType` instance based on name or code matching.  It includes logging for debugging.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/handler-enum.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n@Slf4j\n@AllArgsConstructor\n@Getter\npublic enum CourseType implements CommonFormEnumParser<CourseType> {\n\n    MATH(1,\"数学\"),\n    ENGLISH(2,\"英语\"),\n    CHINESE(3,\"语文\"),\n    COMPUTER(4,\"计算机\");\n\n    /**\n     * 课程编码\n     */\n    final int code;\n    /**\n     * 课程标签\n     */\n    final String label;\n\n    @Override\n    public String toString() {\n        return this.name()+\":\"+this.label;\n    }\n\n    @Override\n    public CourseType fromValue(String input) {\n        log.info(\"input:{}\",input);\n        for (CourseType courseType : CourseType. values()) {\n            // 根据规则自定义实现\n            if (input.startsWith(Objects.toString(courseType))||input.equalsIgnoreCase(courseType.name())) {\n                return courseType;\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid CourseType value: \" + input);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j\nDESCRIPTION: This YAML snippet demonstrates how to enable Knife4j by setting the `knife4j.enable` property to `true` in the application's configuration file. This configuration is required to activate Knife4j's features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/dynamicRequestDescription.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: API Key Security Scheme (YAML)\nDESCRIPTION: This YAML defines an API key security scheme. It specifies the 'type' as 'apiKey', the parameter 'name' as 'api_key', and the key's location 'in' the 'header'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_94\n\nLANGUAGE: yaml\nCODE:\n```\ntype: apiKey\nname: api_key\nin: header\n```\n\n----------------------------------------\n\nTITLE: JWT Bearer Security Scheme (JSON)\nDESCRIPTION: This JSON defines a JWT Bearer security scheme.  It specifies the 'type' as 'http', the 'scheme' as 'bearer', and the 'bearerFormat' as 'JWT'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_95\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\",\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Spring UI Dependency (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the `knife4j-spring-ui` dependency to a Java+Spring project's `pom.xml` file. This enables the Knife4j UI for Swagger documentation. The dependency includes the group ID, artifact ID, and version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2019-12-23-knife4j-2.0.1-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-spring-ui</artifactId>\n  <version>2.0.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Example Rest Response Class in Java\nDESCRIPTION: This Java code defines a generic `Rest` response class.  It includes fields for success status, data, error code, and message, all annotated with `@ApiModelProperty` for Swagger documentation.  This class serves as a common structure for API responses and allows consistent representation of results in the Swagger UI.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swagger-des-not-found.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class Rest<T> {\n\n    @ApiModelProperty(value = \"是否成功\")\n    private boolean success=true;\n    @ApiModelProperty(value = \"返回对象\")\n    private T data;\n    @ApiModelProperty(value = \"错误编号\")\n    private Integer errCode;\n    @ApiModelProperty(value = \"错误信息\")\n    private String message;\n\n    public boolean isSuccess() {\n        return success;\n    }\n\n    public void setSuccess(boolean success) {\n        this.success = success;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n    public Integer getErrCode() {\n        return errCode;\n    }\n\n    public void setErrCode(Integer errCode) {\n        this.errCode = errCode;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Old Knife4j Configuration Properties (YAML)\nDESCRIPTION: This YAML snippet demonstrates the old configuration properties for Knife4j. The property names are in camel case. This configuration includes settings like enabling Knife4j and configuring the language and Swagger models.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.0.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  enable: true\n# 以setting配置为例\n  setting:\n    language: zh-CN\n    enableSwaggerModels: true\n    enableDocumentManage: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Reload Cache Parameter in Knife4j (YAML)\nDESCRIPTION: This YAML snippet configures Knife4j to enable the local refresh variable button function. This feature allows users to refresh cached parameters. The attribute is false by default and can be enabled via configuration. Requires Knife4j and a compatible Swagger/OpenAPI implementation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-02-knife4j-2.0.7-issue.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    enableReloadCacheParameter: true\n```\n\n----------------------------------------\n\nTITLE: SmartLifecycle start() Method Implementation (Java)\nDESCRIPTION: This code snippet presents the start() method implementation of the SmartLifecycle interface in the DocumentationPluginsBootstrapper class. This method retrieves DocumentationPlugin implementations (Docket beans), sorts them by groupName, and iterates through them to scan and generate the Swagger documentation if the plugin is enabled.  It logs the process and manages multiple documentation groups.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox7.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void start() {\n    if (initialized.compareAndSet(false, true)) {\n        log.info(\"Context refreshed\");\n        //此处拿到DocumentationPlugin插件\n        //因为Docket类是实现了DocumentationPlugin,我们在程序外部通过@Bean注解注入到Spring容器中,所以此处DocumentationPlugin的实例对象是Docket对象\n        //一个Docket代表的一个分组,多个则是多个文档分组\n        //调用guava的排序规则,根据groupName排序\n        //思考：在重构Swagger-ui的过程中,会有需求能否提供默认的排序规则,因为groupName排序对用户来说太死板,可以提供一个order参数值来进行默认排序,这样对用户更友好\n        List<DocumentationPlugin> plugins = pluginOrdering()\n            .sortedCopy(documentationPluginsManager.documentationPlugins());\n        log.info(\"Found {} custom documentation plugin(s)\", plugins.size());\n        //遍历Docket对象\n        for (DocumentationPlugin each : plugins) {\n            //获取文档类型,一般都是Swagger_2\n            DocumentationType documentationType = each.getDocumentationType();\n            if (each.isEnabled()) {\n                //如果启用,则开始扫描生成文档\n                scanDocumentation(buildContext(each));\n            } else {\n                log.info(\"Skipping initializing disabled plugin bean {} v{}\",\n                         documentationType.getName(), documentationType.getVersion());\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Knife4j, Swagger, and related dependencies\nDESCRIPTION: This XML snippet shows the required dependencies for integrating Knife4j with Dubbox via Swagger. It includes Knife4j Spring, Swagger JAX-RS, Swagger Core, Swagger Jersey JAX-RS, and Swagger Annotations. These dependencies enable Swagger to understand the JAX-RS endpoints provided by Dubbox and for Knife4j to display the API documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <dependency>\n        <groupId>com.github.xiaoymin</groupId>\n        <artifactId>knife4j-spring</artifactId>\n        <version>2.0.9</version>\n    </dependency>\n    <dependency>\n        <groupId>com.github.xiaoymin</groupId>\n        <artifactId>knife4j-spring-ui</artifactId>\n        <version>2.0.9</version>\n    </dependency>\n    <dependency>\n        <groupId>io.swagger</groupId>\n        <artifactId>swagger-jaxrs</artifactId>\n        <version>1.6.2</version>\n    </dependency>\n    <dependency>\n        <groupId>io.swagger</groupId>\n        <artifactId>swagger-core</artifactId>\n        <version>1.6.2</version>\n    </dependency>\n    <dependency>\n        <groupId>io.swagger</groupId>\n        <artifactId>swagger-jersey-jaxrs</artifactId>\n        <version>1.6.2</version>\n    </dependency>\n    <dependency>\n        <groupId>io.swagger</groupId>\n        <artifactId>swagger-annotations</artifactId>\n        <version>1.6.2</version>\n    </dependency>\n    <dependency>\n        <groupId>io.swagger</groupId>\n        <artifactId>swagger-jersey2-jaxrs</artifactId>\n        <version>1.6.2</version>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Auto-Configuration Setup\nDESCRIPTION: This snippet shows the configuration of the `spring.factories` file to enable Knife4j auto-configuration. It specifies the `Knife4jAutoConfiguration` class to be automatically configured when the application starts.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/enhance.mdx#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.github.xiaoymin.knife4j.spring.configuration.Knife4jAutoConfiguration\n```\n\n----------------------------------------\n\nTITLE: Include Parameters - JSON Request - Java\nDESCRIPTION: This Java snippet shows how to use the `includeParameters` attribute of the `ApiOperationSupport` annotation to include specific parameters in a JSON request. It specifies that `ignoreP1.ignoreLabels.code` and `ignoreP1.longUser.ids` should be included. `@RequestBody` annotation indicates it's a JSON request.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/includeRequestParameter.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@ApiOperationSupport(order = 42,includeParameters = {\"ignoreP1.ignoreLabels.code\",\"ignoreP1.longUser.ids\"})\n@ApiOperation(value = \"包含参数值-JSON类型1\")\n@PostMapping(\"/exc3\")\npublic Rest<IgnoreP1> findAllc3(@RequestBody IgnoreP1 ignoreP1) {\n    Rest<IgnoreP1> r=new Rest<>();\n    r.setData(ignoreP1);\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j in application.yml\nDESCRIPTION: This YAML snippet shows how to enable Knife4j in the application's configuration file. Setting `knife4j.enable` to `true` activates the Knife4j features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/filterRequestParameter.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Eureka Mode Directory Structure\nDESCRIPTION: This shell script represents the directory structure for storing the `eureka.properties` file under the ROOT directory in Disk mode, to configure Eureka mode.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_7\n\nLANGUAGE: Shell Script\nCODE:\n```\n|-data\n|------ROOT  \n|--------eureka.properties\n\n```\n\n----------------------------------------\n\nTITLE: Nacos Mode Configuration (nacos.properties)\nDESCRIPTION: Shows the configuration for Nacos mode using `nacos.properties`. It defines the Nacos service URL, route name, service name, and location of the OpenAPI endpoints.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.nacos.serviceUrl=http://localhost:10000/nacos/\nknife4j.nacos.routes[0].name=用户\nknife4j.nacos.routes[0].serviceName=userService\nknife4j.nacos.routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Nacos模式\n\n```\n\n----------------------------------------\n\nTITLE: API Key Security Scheme (JSON)\nDESCRIPTION: This JSON defines an API key security scheme. It specifies the 'type' as 'apiKey', the parameter 'name' as 'api_key', and the key's location 'in' the 'header'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_93\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n```\n\n----------------------------------------\n\nTITLE: Application Configuration (application.properties)\nDESCRIPTION: Demonstrates the configuration properties within the `application.properties` file. These properties include the server port, enabling Basic Authentication, and setting the username and password.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# Knife4jAggregationDesktop 启动端口号\nknife4j.port=18006\n# 为所有Knife4jAggregationDesktop开放出去的OpenAPI文档加权，设置BasicAuth访问密码\n# enable=true 代表启用\nknife4j.basic.enable=true\nknife4j.basic.username=zhangsan\nknife4j.basic.password=123456\n\n```\n\n----------------------------------------\n\nTITLE: Spring MVC DispatcherServlet Configuration\nDESCRIPTION: This snippet demonstrates the configuration of the Spring MVC DispatcherServlet in web.xml. The `contextConfigLocation` parameter specifies the location of the Spring configuration file (`spring.xml`), which should contain the Swagger configuration bean defined in the previous snippet.  Ensuring this is correctly configured is crucial for Swagger to scan the controllers.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/springmvc-notshow.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<servlet>\n    <servlet-name>swaggerDemoMvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n        <!--在第二步中注入的SwaggerConfig的bean需写在spring.xml文件中-->\n      <param-value>classpath:config/spring.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n```\n\n----------------------------------------\n\nTITLE: Check Java Version (Shell)\nDESCRIPTION: This command verifies the installed Java version, which is a prerequisite for running knife4j-admin. It ensures that a compatible Java Runtime Environment (JRE) is available on the server. The expected output shows the Java version details, including the version number, build number, and JVM information.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/knife4j-admin-deploy.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[root@iZbt ~]# java -version\njava version \"1.8.0_144\"\nJava(TM) SE Runtime Environment (build 1.8.0_144-b01)\nJava HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)\n```\n\n----------------------------------------\n\nTITLE: Nacos mode properties configuration\nDESCRIPTION: This snippet configures the `nacos.properties` file for Nacos mode in Knife4jAggregationDesktop. It specifies the Nacos service URL and the service name and location for the OpenAPI documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-use.md#_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.nacos.serviceUrl=http://localhost:10000/nacos/\nknife4j.nacos.routes[0].name=用户\nknife4j.nacos.routes[0].serviceName=userService\nknife4j.nacos.routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Nacos模式\n```\n\n----------------------------------------\n\nTITLE: Eureka mode properties configuration\nDESCRIPTION: This snippet configures the `eureka.properties` file for Eureka mode in Knife4jAggregationDesktop. It specifies the Eureka service URL and the service name and location for the OpenAPI documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-use.md#_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.eureka.serviceUrl=http://localhost:10000/eureka/\nknife4j.eureka.routes[0].name=用户\nknife4j.eureka.routes[0].serviceName=userService\nknife4j.eureka.routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Eureka模式\n```\n\n----------------------------------------\n\nTITLE: Security Requirement Object (OAuth2, YAML)\nDESCRIPTION: This YAML defines a security requirement object for an OAuth2 scheme, 'petstore_auth', listing the required scopes: 'write:pets' and 'read:pets'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_104\n\nLANGUAGE: yaml\nCODE:\n```\npetstore_auth:\n- write:pets\n- read:pets\n```\n\n----------------------------------------\n\nTITLE: Docket Class Definition\nDESCRIPTION: This code snippet defines the Docket class, which implements the DocumentationPlugin interface. It includes various fields such as documentationType, securityContexts, responseMessages, globalOperationParameters, ruleBuilders, ignorableParameterTypes, protocols, produces, consumes, additionalModels, tags, pathProvider, securitySchemes, ordering configurations, API information, group name, enabled status, generics naming strategy, default response messages application, host, path mapping, API selector, URL templating enablement, and vendor extensions. These fields are used to configure the API documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class Docket implements DocumentationPlugin {\n\n  public static final String DEFAULT_GROUP_NAME = \"default\";\n\n  private final DocumentationType documentationType;\n  private final List<SecurityContext> securityContexts = newArrayList();\n  private final Map<RequestMethod, List<ResponseMessage>> responseMessages = newHashMap();\n  private final List<Parameter> globalOperationParameters = newArrayList();\n  private final List<Function<TypeResolver, AlternateTypeRule>> ruleBuilders = newArrayList();\n  private final Set<Class> ignorableParameterTypes = newHashSet();\n  private final Set<String> protocols = newHashSet();\n  private final Set<String> produces = newHashSet();\n  private final Set<String> consumes = newHashSet();\n  private final Set<ResolvedType> additionalModels = newHashSet();\n  private final Set<Tag> tags = newHashSet();\n\n  private PathProvider pathProvider;\n  private List<? extends SecurityScheme> securitySchemes;\n  private Ordering<ApiListingReference> apiListingReferenceOrdering;\n  private Ordering<ApiDescription> apiDescriptionOrdering;\n  private Ordering<Operation> operationOrdering;\n\n  private ApiInfo apiInfo = ApiInfo.DEFAULT;\n  private String groupName = DEFAULT_GROUP_NAME;\n  private boolean enabled = true;\n  private GenericTypeNamingStrategy genericsNamingStrategy = new DefaultGenericTypeNamingStrategy();\n  private boolean applyDefaultResponseMessages = true;\n  private String host = \"\";\n  private Optional<String> pathMapping = Optional.absent();\n  private ApiSelector apiSelector = ApiSelector.DEFAULT;\n  private boolean enableUrlTemplating = false;\n  private List<VendorExtension> vendorExtensions = newArrayList();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Dependency (Springfox 3.X) - XML\nDESCRIPTION: This XML snippet adds the Knife4j dependency to a Maven project when using OpenAPI 3 and Springfox 3.0.0. It specifies the `knife4j-spring-boot-starter` artifact and version 3.0.2.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库搜索3.X最新版本号-->\n    <version>3.0.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Gateway Configuration - YAML\nDESCRIPTION: This YAML snippet shows how to configure sorting rules for tags and operations within the Knife4j gateway. The `tags-sorter` and `operations-sorter` properties can be set to either `alpha` (the default Swagger UI sorting) or `order` (a Knife4j-enhanced sorting that allows custom ordering based on the `x-order` extension in the sub-services).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.2.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n\tgateway:\n\t\ttags-sorter: alpha # 接口排序规则\n        operations-sorter: alpha\n```\n\n----------------------------------------\n\nTITLE: Tag Object Example in YAML\nDESCRIPTION: A YAML example illustrating the structure of a Tag object, specifying the name and description of the tag.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_72\n\nLANGUAGE: yaml\nCODE:\n```\nname: pet\ndescription: Pets operations\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Authentication in Eureka Mode\nDESCRIPTION: This snippet configures basic authentication for Eureka mode using the `eureka.properties` file. It sets `knife4j.basicAuth.enable` to `true` and provides a username and password, requiring users to authenticate to access the documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.eureka.serviceUrl=http://localhost:10000/eureka/\nknife4j.eureka.routes[0].name=自定义服务1\nknife4j.eureka.routes[0].serviceName=service-user\nknife4j.eureka.routes[0].location=/aub/v2/api-docs?group=default\nknife4j.eureka.routes[0].order=1\nknife4j.eureka.routes[1].name=自定义服务2\nknife4j.eureka.routes[1].serviceName=service-order\nknife4j.eureka.routes[1].location=/v2/api-docs?group=default\nknife4j.eureka.routes[1].order=2\nknife4j.basicAuth.enable=true\nknife4j.basicAuth.username=abc\nknife4j.basicAuth.password=123456\n```\n\n----------------------------------------\n\nTITLE: index.html config object parsing (JavaScript)\nDESCRIPTION: This JavaScript snippet parses the configuration objects injected into the index.html file. The placeholders %(ConfigObject) and %(OAuthConfigObject) are expected to contain JSON strings.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar configObject = JSON.parse('%(ConfigObject)');\nvar oauthConfigObject = JSON.parse('%(OAuthConfigObject)');\n```\n\n----------------------------------------\n\nTITLE: Knife4j Dockerfile\nDESCRIPTION: This Dockerfile defines the steps to build the Knife4j aggregation Docker image. It uses openjdk:8-jdk-alpine as the base image, creates directories, adds resources, and sets the entry point for the application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-docker.md#_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM openjdk:8-jdk-alpine\nLABEL version=\"2.0\"\nLABEL released-date=2020/11/25\nLABEL author=\"xiaoymin@foxmail.com\"\nLABEL description=\"Knife4jAggregation OpenAPI,RunAnyWhere!!!\"\nMAINTAINER xiaoymin\nRUN mkdir /app\n# Disk模式数据挂载目录\nRUN mkdir /app/data\nADD src/main/resources/application.yml /app/app.yml\nADD target/knife4j-aggregation-docker-1.0.jar /app/app.jar\nENTRYPOINT [\"java\",\"-jar\",\"-Djava.security.egd=file:/dev/./urandom\",\"-Duser.timezone=Asia/Shanghai\",\"/app/app.jar\",\"--spring.config.location=/app/app.yml\"]\n#EXPOSE 8888:\n```\n\n----------------------------------------\n\nTITLE: Swagger Configuration Java\nDESCRIPTION: This snippet configures Swagger for a microservice. It enables Swagger 2 and Swagger Bootstrap UI, imports BeanValidatorPluginsConfiguration, and defines a Docket bean for API documentation customization.  It specifies the base package for scanning controllers.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n\n@Configuration\n@EnableSwagger2\n@EnableSwaggerBootstrapUi\n@Import(BeanValidatorPluginsConfiguration.class)\npublic class SwaggerConfiguration {\n\n    @Bean(value = \"userApi\")\n    @Order(value = 1)\n    public Docket groupRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(groupApiInfo())\n                .select()\n                \t.apis(RequestHandlerSelectors.basePackage(\"com.xiaominfo.swagger.service.user.controller\"))\n                .paths(PathSelectors.any())\n\n                .build();\n    }\n\n    private ApiInfo groupApiInfo(){\n        return new ApiInfoBuilder()\n                .title(\"swagger-bootstrap-ui很棒~~~！！！\")\n                .description(\"<div style='font-size:14px;color:red;'>swagger-bootstrap-ui-demo RESTful APIs</div>\")\n                .termsOfServiceUrl(\"http://www.group.com/\")\n                .contact(\"group@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in JSON\nDESCRIPTION: This JSON snippet defines a License object with name and URL properties. It specifies the license used by the API.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apache 2.0\",\n  \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure (Shell)\nDESCRIPTION: This snippet illustrates the required directory structure for deploying knife4j-admin.  It shows the location of the data directory, front-end files, logs directory, startup script, and the executable JAR file. The 'data' and 'logs' directories must be created manually before deployment.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/knife4j-admin-deploy.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n|-kadmin\n|----data    //数据目录,可以为空,在部署时该目录必须先手工创建\n|----front   //由zip包解压得到\n|----logs    //程序的日志目录,在部署时该目录必须先手工创建\n|----startup.sh //启动脚本,必须使用chmod+x startup.sh 命令赋予可执行权限\n|----knife4j-admin-1.0.jar //由zip包解压得到\n```\n\n----------------------------------------\n\nTITLE: ModelContext Class Definition (Java)\nDESCRIPTION: This code defines the `ModelContext` class, which holds information about the model being constructed, including its type, return type status, group name, documentation type, parent context, resolved types, model builder, alternate type provider, generic naming strategy, and ignorable types.  The constructor initializes these parameters, primarily to facilitate the creation of Swagger definitions.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ModelContext {\n    //类型\n  private final Type type;\n    //是否返回类型\n  private final boolean returnType;\n    //分组名称\n  private final String groupName;\n    //文档类型\n  private final DocumentationType documentationType;\n  //父级\n  private final ModelContext parentContext;\n    //ResolvedType\n  private final Set<ResolvedType> seenTypes = newHashSet();\n    //model构造器\n  private final ModelBuilder modelBuilder;\n  private final AlternateTypeProvider alternateTypeProvider;\n    //名称策略\n  private final GenericTypeNamingStrategy genericNamingStrategy;\n    //忽略类型\n  private final ImmutableSet<Class> ignorableTypes;\n\n  private ModelContext(\n      String groupName,\n      Type type,\n      boolean returnType,\n      DocumentationType documentationType,\n      AlternateTypeProvider alternateTypeProvider,\n      GenericTypeNamingStrategy genericNamingStrategy,\n      ImmutableSet<Class> ignorableTypes) {\n    this.groupName = groupName;\n    this.documentationType = documentationType;\n    this.alternateTypeProvider = alternateTypeProvider;\n    this.genericNamingStrategy = genericNamingStrategy;\n    this.ignorableTypes = ignorableTypes;\n    this.parentContext = null;\n    this.type = type;\n    this.returnType = returnType;\n    this.modelBuilder = new ModelBuilder();\n  }\n //...   \n}\n```\n\n----------------------------------------\n\nTITLE: ApiListing Interface Collection with springfox (Java)\nDESCRIPTION: This code snippet demonstrates how springfox aggregates interface information to construct the ApiListing interface. It retrieves interface contexts, collects models and API descriptions, and uses an ApiListingBuilder to construct the ApiListing object.  It leverages plugins for customizing ApiListingBuilder properties such as grouping information, media types, and tags.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox14.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/*** \n * 通过已经筛选过滤的接口集合以及context上下文对象来得到接口列表\n * @param context\n * @return\n */\npublic Multimap<String, ApiListing> scan(ApiListingScanningContext context) {\n  final Multimap<String, ApiListing> apiListingMap = LinkedListMultimap.create();\n  int position = 0;\n  // 从外部拿到已经筛选过滤后的接口信息\n  //controler:methods 1:N\n  Map<ResourceGroup, List<RequestMappingContext>> requestMappingsByResourceGroup\n      = context.getRequestMappingsByResourceGroup();\n  //收集接口详细信息\n  //由于ApiListingScannerPlugin在springfox中没有实现类,所以此处返回additional集合对象是空的\n  //additionalListings在此处是空集合，一个元素都没有\n  Collection<ApiDescription> additionalListings = pluginsManager.additionalListings(context);\n  //拿到所有的Controller分组信息\n\n  Set<ResourceGroup> allResourceGroups = FluentIterable.from(collectResourceGroups(additionalListings))\n          .append(requestMappingsByResourceGroup.keySet())\n          .toSet();\n  List<SecurityReference> securityReferences = newArrayList();\n  for (final ResourceGroup resourceGroup : sortedByName(allResourceGroups)) {\n\n    DocumentationContext documentationContext = context.getDocumentationContext();\n    Set<String> produces = new LinkedHashSet<String>(documentationContext.getProduces());\n    Set<String> consumes = new LinkedHashSet<String>(documentationContext.getConsumes());\n    String host = documentationContext.getHost();\n    Set<String> protocols = new LinkedHashSet<String>(documentationContext.getProtocols());\n    Set<ApiDescription> apiDescriptions = newHashSet();\n\n    Map<String, Model> models = new LinkedHashMap<String, Model>();\n    //得到该Controller下的所有接口\n    List<RequestMappingContext> requestMappings = nullToEmptyList(requestMappingsByResourceGroup.get(resourceGroup));\n    for (RequestMappingContext each : sortedByMethods(requestMappings)) {\n      //拿到该接口的所有Model\n      models.putAll(apiModelReader.read(each.withKnownModels(models)));\n      apiDescriptions.addAll(apiDescriptionReader.read(each));\n    }\n    //根据分组名称进行分组\n    List<ApiDescription> additional = from(additionalListings)\n        .filter(\n            and(\n                belongsTo(resourceGroup.getGroupName()),\n                onlySelectedApis(documentationContext)))\n        .toList();\n    apiDescriptions.addAll(additional);\n\n    List<ApiDescription> sortedApis = FluentIterable.from(apiDescriptions)\n        .toSortedList(documentationContext.getApiDescriptionOrdering());\n\n    String resourcePath = new ResourcePathProvider(resourceGroup)\n        .resourcePath()\n        .or(longestCommonPath(sortedApis))\n        .orNull();\n\n    PathProvider pathProvider = documentationContext.getPathProvider();\n    String basePath = pathProvider.getApplicationBasePath();\n    PathAdjuster adjuster = new PathMappingAdjuster(documentationContext);\n    ApiListingBuilder apiListingBuilder = new ApiListingBuilder(context.apiDescriptionOrdering())\n        .apiVersion(documentationContext.getApiInfo().getVersion())\n        .basePath(adjuster.adjustedPath(basePath))\n        .resourcePath(resourcePath)\n        .produces(produces)\n        .consumes(consumes)\n        .host(host)\n        .protocols(protocols)\n        .securityReferences(securityReferences)\n        .apis(sortedApis)\n        .models(models)\n        .position(position++)\n        .availableTags(documentationContext.getTags());\n\n    ApiListingContext apiListingContext = new ApiListingContext(\n        context.getDocumentationType(),\n        resourceGroup,\n        apiListingBuilder);\n    apiListingMap.put(resourceGroup.getGroupName(), pluginsManager.apiListing(apiListingContext));\n  }\n  return apiListingMap;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docket with OpenApiExtensionResolver in Java\nDESCRIPTION: This Java code snippet demonstrates how to configure a Docket object with custom settings using the OpenApiExtensionResolver in Knife4j.  It autowires the OpenApiExtensionResolver, then uses it to build setting extensions when creating the Docket.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/customFooter.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildSettingExtensions());\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife4j\nDESCRIPTION: This YAML snippet shows how to enable Knife4j. The `enable` property must be set to `true` to activate Knife4j functionality.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/customHome.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Version Control in Knife4j (YAML)\nDESCRIPTION: This YAML snippet shows how to enable version control for interfaces in Knife4j. When enabled, a small blue dot will appear in the UI if the backend interface changes. This configuration requires Knife4j and a compatible Swagger/OpenAPI implementation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-02-knife4j-2.0.7-issue.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n\t#是否开启界面中对某接口的版本控制,如果开启，后端接口变化后Ui界面会存在小蓝点\n    enableVersion: true \n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Aggregation Dependency - XML\nDESCRIPTION: This XML snippet adds the Knife4j Aggregation dependency to a Maven project. It specifies the `knife4j-aggregation-spring-boot-starter` artifact and version 2.0.8, enabling microservice API documentation aggregation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-aggregation-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库搜索Knife4jAggregation最新版本号-->\n  <version>2.0.8</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Modifying Interface Body to Include Comments\nDESCRIPTION: This code snippet demonstrates how to modify the `getInterfaceBody` function to include comments for each property in the generated TypeScript interface. It leverages the `leadingComments` property of the `TSPropertySignature` node to add a comment block containing the property's description.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/use-claude-fixed-issue.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getInterfaceBody(props, openOptional) {\n  return props.map(p => {\n    let ta = t.tsTypeAnnotation(getTsType(p, getBaseType(p.type), openOptional), p.description);\n    let key = t.identifier(p.name);\n    let pro = t.tsPropertySignature(\n      key,\n      ta,\n      openOptional ? !p.require : false,\n    )\n    // 增加注释\n    pro.leadingComments = [{\n      type: \"CommentBlock\",\n      value: `${p.description} `\n    }]\n    return pro;\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: TypeResolver Bean Configuration\nDESCRIPTION: This configuration class defines a bean for TypeResolver, a utility class from jackson used to convert Java types to Springfox's ResolvedType.  This bean is required to use the additionalModels method of the Docket object. The ModelsConfiguration class is annotated with @Configuration and includes a TypeResolver bean definition.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox11.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@ComponentScan(basePackages = {\n    \"springfox.documentation.schema\"\n})\n@EnablePluginRegistries({\n    ModelBuilderPlugin.class,\n    ModelPropertyBuilderPlugin.class,\n    TypeNameProviderPlugin.class,\n    SyntheticModelProviderPlugin.class\n})\npublic class ModelsConfiguration {\n  @Bean\n  public TypeResolver typeResolver() {\n    return new TypeResolver();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Eureka Routes with Order Attribute\nDESCRIPTION: This snippet shows how to configure the display order of Eureka routes using the `order` attribute in the `eureka.properties` file. It specifies the order in which the services will be displayed in the documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.eureka.serviceUrl=http://localhost:10000/eureka/\nknife4j.eureka.routes[0].name=用户服务asdf\nknife4j.eureka.routes[0].serviceName=service-user\nknife4j.eureka.routes[0].location=/aub/v2/api-docs?group=default\nknife4j.eureka.routes[0].order=1\nknife4j.eureka.routes[1].name=订单服务2ff\nknife4j.eureka.routes[1].serviceName=service-order\nknife4j.eureka.routes[1].location=/v2/api-docs?group=default\nknife4j.eureka.routes[1].order=2\n```\n\n----------------------------------------\n\nTITLE: DocumentationPlugin Configure Method\nDESCRIPTION: This code defines the configure method in the DocumentationPlugin interface. It takes a DocumentationContextBuilder as input and returns a DocumentationContext. This allows plugins to customize the documentation context.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface DocumentationPlugin extends Plugin<DocumentationType> {\n  /**\n   * Creates a documentation context based on a given DocumentationContextBuilder\n   *\n   * @param builder - @see springfox.documentation.spi.service.contexts.DocumentationContextBuilder\n   * @return context to use for building the documentation\n   */\n  DocumentationContext configure(DocumentationContextBuilder builder);\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Authentication in Disk Mode\nDESCRIPTION: This snippet configures basic authentication for Disk mode by setting the `knife4j.basicAuth.enable` flag to `true` and providing a username and password. This configuration protects the documentation with a login prompt.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.basicAuth.enable=true\nknife4j.basicAuth.username=zhangsan\nknife4j.basicAuth.password=123456\n```\n\n----------------------------------------\n\nTITLE: Knife4j UI Dependency XML\nDESCRIPTION: This XML snippet shows the dependency required for integrating Knife4j UI. This is an alternative to knife4j-spring-boot-starter, used when only frontend UI functionality is required.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-ui</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom API with Springdoc (Java)\nDESCRIPTION: This code snippet demonstrates how to add a custom API (login) using springdoc by implementing the GlobalOpenApiCustomizer interface. It creates a PathItem and Operation object, defines parameters, and sets the response. This approach allows for more comprehensive API customizations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/customer-api.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n@Slf4j\n@Component\npublic class CustomerOperation implements GlobalOpenApiCustomizer {\n    \n    @Override\n    public void customise(OpenAPI openApi) {\n        log.info(\"customer.\");\n        // 因为要新增自定义的接口，直接这里add\n        PathItem pathItem = new PathItem();\n        // 基础信息 构建Operation\n        Operation operation = new Operation();\n        operation.operationId(\"login\");\n        operation.summary(\"登录接口\");\n        operation.description(\"根据用户名和密码登录获取token\");\n        operation.tags(Collections.singletonList(\"登录\"));\n        // 构建参数\n        List<Parameter> parameters = new ArrayList<>();\n        parameters.add(new Parameter().name(\"name\").example(\"zhangFei\").description(\"用户名\").required(true).schema(new StringSchema()).in(\"query\"));\n        parameters.add(new Parameter().name(\"password\").example(\"123456\").description(\"密码\").required(true).schema(new StringSchema()).in(\"query\"));\n        operation.parameters(parameters);\n        // 构建响应body\n        ApiResponses apiResponses = new ApiResponses();\n        ApiResponse apiResponse = new ApiResponse();\n        apiResponse.description(\"ok\").content(new Content().addMediaType(\"*/*\", new MediaType().schema(new StringSchema())));\n        apiResponses.addApiResponse(\"200\",apiResponse);\n        operation.responses(apiResponses);\n        // 该自定义接口为post\n        pathItem.post(operation);\n        openApi.path(\"/login\", pathItem);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disk Mode: disk.properties Configuration\nDESCRIPTION: Shows the configuration for the Disk mode using a 'disk.properties' file. This file allows customization of the names and locations of the OpenAPI documents. The example defines routes for '用户服务' (User Service) and '订单服务' (Order Service), pointing to their respective JSON files.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.disk.routes[0].name=用户服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk.routes[0].location=userOpenApi.json\n\nknife4j.disk.routes[1].name=订单服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk.routes[1].location=orderOpenApi.json\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Eureka Mode in Nacos\nDESCRIPTION: This Properties snippet configures Eureka mode for Knife4j Insight, fetching OpenAPI definitions from services registered with Eureka. It defines documents associated with Eureka service URLs, including optional authentication credentials. Routes then point to specific services and their OpenAPI endpoints.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-nacos.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n# Eureka模式下的第一个文档，访问：http://ip:port/eureka1/doc.html\nknife4j.eureka[0].contextPath=eureka1\nknife4j.eureka[0].serviceUrl=http://localhost:10000/eureka/\nknife4j.eureka[0].username=eureka鉴权账号\nknife4j.eureka[0].password=eureka鉴权密码\nknife4j.eureka[0].routes[0].name=用户\nknife4j.eureka[0].routes[0].serviceName=userService\nknife4j.eureka[0].routes[0].location=/v2/api-docs?group=2.X版本\n\n# Eureka模式下的第二个文档，访问：http://ip:port/eureka2/doc.html\nknife4j.eureka[1].contextPath=eureka2\nknife4j.eureka[1].serviceUrl=http://192.168.0.220:10000/eureka/\nknife4j.eureka[1].username=eureka鉴权账号\nknife4j.eureka[1].password=eureka鉴权密码\nknife4j.eureka[1].routes[0].name=用户\nknife4j.eureka[1].routes[0].serviceName=userService\nknife4j.eureka[1].routes[0].location=/v2/api-docs?group=2.X版本\n\n```\n\n----------------------------------------\n\nTITLE: Correct Getter Method for Generic Type in Java\nDESCRIPTION: This code snippet shows the correct way to define a getter method for a generic type `T` in Java. The return type of the getter must match the generic type to ensure Swagger can resolve the type correctly and display the appropriate field properties in the UI. This getter corresponds to a field declared as `private T data;`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swagger-des-not-found.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic T getData(){\n    return data;\n}\n```\n\n----------------------------------------\n\nTITLE: SwaggerUI Middleware Invoke Method (C#)\nDESCRIPTION: This code snippet shows the `Invoke` method within the SwaggerUI middleware, which handles requests for the `index.html` file. It reads the file from a stream, injects arguments, and writes the result to the response. The `_options` field holds the SwaggerUI options, and `httpContext` provides access to the HTTP context.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nprivate readonly SwaggerUIOptions _options;\n//xxx\n  \npublic async Task Invoke(HttpContext httpContext)\n{ \n//xxx\n    if (httpMethod == \"GET\" && Regex.IsMatch(path, $\"^/{Regex.Escape(_options.RoutePrefix)}/?index.html$\"))\n    {\n        await RespondWithIndexHtml(httpContext.Response);\n        return;\n    }\n//xxx\n  }\n```\n\n----------------------------------------\n\nTITLE: Springfox-Swagger Error Stack Trace (NoSuchMethodError)\nDESCRIPTION: This stack trace shows the error encountered when upgrading Springfox-Swagger to version 2.9.2.  The error indicates a missing method in the Guava library, suggesting a version conflict. It occurs during the startup of the Spring application context, specifically within the documentationPluginsBootstrapper bean.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/sp-nmerror.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.springframework.context.ApplicationContextException: Failed to start bean 'documentationPluginsBootstrapper'; nested exception is com.google.common.util.concurrent.ExecutionError: java.lang.NoSuchMethodError: com.google.common.collect.FluentIterable.concat(Ljava/lang/Iterable;Ljava/lang/Iterable;)Lcom/google/common/collect/FluentIterable;\n\torg.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:176)\n\torg.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51)\n\torg.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346)\n\torg.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149)\n\torg.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112)\n\torg.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:851)\n\torg.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:540)\n\torg.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:667)\n\torg.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:633)\n\torg.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:681)\n\torg.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:552)\n\torg.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:493)\n\torg.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)\n\tjavax.servlet.GenericServlet.init(GenericServlet.java:158)\n\torg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474)\n\torg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n\torg.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:624)\n\torg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)\n\torg.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783)\n\torg.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\torg.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:798)xxxxxxxxxx sp-nmerrororg.springframework.context.ApplicationContextException: Failed to start bean 'documentationPluginsBootstrapper'; nested exception is com.google.common.util.concurrent.ExecutionError: java.lang.NoSuchMethodError: com.google.common.collect.FluentIterable.concat(Ljava/lang/Iterable;Ljava/lang/Iterable;)Lcom/google/common/collect/FluentIterable;    org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:176)    org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51)    org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346)    org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149)    org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112)    org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:851)    org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:540)    org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:667)    org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:633)    org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:681)    org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:552)    org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:493)    org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)    javax.servlet.GenericServlet.init(javax.servlet.GenericServlet.java:158)    org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474)    org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)    org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:624)    org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)    org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783)    org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)    org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:798)java\n```\n\n----------------------------------------\n\nTITLE: EnableSwagger2 Annotation Definition Java\nDESCRIPTION: This annotation enables Swagger 2 support. It imports the Swagger2DocumentationConfiguration class, which initializes the core components for generating Swagger documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox4.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)\n@Target(value = { java.lang.annotation.ElementType.TYPE })\n@Documented\n@Import({Swagger2DocumentationConfiguration.class})\npublic @interface EnableSwagger2 {\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Model from Return Type (Java)\nDESCRIPTION: This method collects the model from the return type of a request mapping. It retrieves the resolved return type from the context, applies alternate type resolution, and adds the resulting type to the operation models builder.  It logs the added type for debugging purposes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate void collectFromReturnType(RequestMappingContext context) {\n    ResolvedType modelType = context.getReturnType();\n    modelType = context.alternateFor(modelType);\n    LOG.debug(\"Adding return parameter of type {}\", resolvedTypeSignature(modelType).or(\"<null>\"));\n    context.operationModelsBuilder().addReturn(modelType);\n  }\n```\n\n----------------------------------------\n\nTITLE: JSON Project Configuration Example\nDESCRIPTION: This JSON snippet shows the format required for adding a project to the knife4j-admin platform. It includes the project's name, code, description, and an array of group configurations, each defining a Swagger endpoint's name, URI, URL, header, and Swagger version.  The 'code' must be unique for each project, and the 'header' within each group must also be globally unique. The 'uri' + 'url' combination must result in a valid and accessible Swagger endpoint.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/admin.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"大数据测试平台\",\n    \"code\":\"test1\",\n    \"description\":\"我是描述信息\",\n    \"groups\": [\n        {\n            \"name\": \"用户模块\",\n            \"uri\":\"http://knife4j.xiaominfo.com\",\n            \"header\":\"server1\",\n            \"url\": \"/v2/api-docs?group=2.X版本\",\n            \"swaggerVersion\": \"2.0\"\n        },{\n            \"name\": \"订单模块\",\n            \"uri\":\"http://swagger-bootstrap-ui.xiaominfo.com\",\n            \"header\":\"server2\",\n            \"url\": \"/v2/api-docs?group=1.8.X版本接口\",\n            \"swaggerVersion\": \"2.0\"\n        }\n        //more..\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Text Response with Headers - YAML\nDESCRIPTION: This YAML defines a plain text response with associated headers. It describes rate limiting headers and their schemas, in addition to a simple string response.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n```\n\n----------------------------------------\n\nTITLE: DocumentationPluginsBootstrapper Class Declaration (Java)\nDESCRIPTION: This code snippet shows the declaration of the DocumentationPluginsBootstrapper class, which is responsible for building and executing DocumentationConfigurer instances after the application context is refreshed. It implements the SmartLifecycle interface, making it a Spring component that gets initialized after the application context is refreshed. It declares fields for managing documentation plugins and request handler providers.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox7.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * After an application context refresh, builds and executes all DocumentationConfigurer instances found in the\n * application context.\n *\n * If no instances DocumentationConfigurer are found a default one is created and executed.\n */\n@Component\npublic class DocumentationPluginsBootstrapper implements SmartLifecycle {\n  private static final Logger log = LoggerFactory.getLogger(DocumentationPluginsBootstrapper.class);\n  private static final String SPRINGFOX_DOCUMENTATION_AUTO_STARTUP = \"springfox.documentation.auto-startup\";\n  //插件管理类,提供了一些列的Swagger相关参数的插件\n  private final DocumentationPluginsManager documentationPluginsManager;\n  //所有的请求接口结果\n  /***\n   * springfox.documentation.spring.web.plugins\n   */\n  private final List<RequestHandlerProvider> handlerProviders;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Spring UI Dependency (Maven)\nDESCRIPTION: This XML snippet demonstrates how to add the `knife4j-spring-ui` dependency to a Maven project. This dependency provides the user interface for Knife4j in a Spring environment. It requires a Maven project setup and internet access to download the dependency from the Maven Central Repository.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2019-12-16-knife4j-2.0.0-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-spring-ui</artifactId>\n  <version>2.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Authentication in Nacos Mode\nDESCRIPTION: This snippet configures basic authentication for Nacos mode using the `nacos.properties` file. It sets `knife4j.basicAuth.enable` to `true` and provides a username and password, requiring users to authenticate to access the documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_14\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.nacos.serviceUrl=http://192.168.0.223:8848/nacos\nknife4j.nacos.routes[0].name=自定义X服务1\nknife4j.nacos.routes[0].serviceName=service-user\nknife4j.nacos.routes[0].location=/v2/api-docs?group=default\nknife4j.nacos.routes[0].order=3\nknife4j.nacos.routes[1].name=自定义X服务2\nknife4j.nacos.routes[1].serviceName=service-order\nknife4j.nacos.routes[1].location=/v2/api-docs?group=default\nknife4j.nacos.routes[1].order=2\nknife4j.basicAuth.enable=true\nknife4j.basicAuth.username=nacos\nknife4j.basicAuth.password=1234\n```\n\n----------------------------------------\n\nTITLE: Swagger Request Body Example with Example Values - Java\nDESCRIPTION: This Java code snippet demonstrates a Swagger request body class with example values provided using the `@ApiModelProperty` annotation. Knife4j will always use these example values instead of cached values during debugging.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/requestCache.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class SwaggerRequestBody{\n    \n    @ApiModelProperty(value=\"姓名\",example=\"张飞\")\n    private String name;\n    \n    //more...\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This XML snippet defines the Maven dependency configuration required to include Swagger-Bootstrap-Ui version 1.8.7 in a project.  It specifies the groupId, artifactId, and version, allowing Maven to automatically download and manage the dependency.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-11-12-swagger-bootstrap-ui-1.8.7-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.8.7</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: PluginRegistriesBeanDefinitionRegistrar - Java\nDESCRIPTION: This Java class `PluginRegistriesBeanDefinitionRegistrar` is an `ImportBeanDefinitionRegistrar` that registers `PluginRegistryFactoryBean` instances for types listed in `@EnablePluginRegistries`. It picks up `@Qualifier` annotations used on the plugin interface and forwards them to the bean definition for the factory.  This class dynamically injects PluginRetry's entity bean.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * {@link ImportBeanDefinitionRegistrar} to register {@link PluginRegistryFactoryBean} instances for type listed in\n * {@link EnablePluginRegistries}. Picks up {@link Qualifier} annotations used on the plugin interface and forwards them\n * to the bean definition for the factory.\n * 为pluginRegistry接口注入动态实例bean对象\n *\n * @author Oliver Gierke\n */\npublic class PluginRegistriesBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(PluginRegistriesBeanDefinitionRegistrar.class);\n\n\t/*\n\t * importingClassMetadata:此参数为通过@EnablePluginRegistries注解标注的类型注解元数据信息对象\n\t * registry:注入bean对象\n\t * \n\t */\n\t@Override\n\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\n        //获取当前enablePluginRegistries注解类信息\n\t\tMap<String, Object> annotationAttributes = importingClassMetadata\n\t\t\t\t.getAnnotationAttributes(EnablePluginRegistries.class.getName());\n\t\t//判断是否为空\n\t\tif (annotationAttributes == null) {\n\t\t\tLOG.info(\"No EnablePluginRegistries annotation found on type {}!\", importingClassMetadata.getClassName());\n\t\t\treturn;\n\t\t}\n\t\t//获取什么的类型集合\n        //例如我们在示例中使用的@EnablePluginRegistries({MobileIncrementBusiness.class})\n        //此处会拿到MobileIncrementBusiness.class这个type，types.length=1\n\t\tClass<?>[] types = (Class<?>[]) annotationAttributes.get(\"value\");\n        //循环遍历\n\t\tfor (Class<?> type : types) {\n            //获取PluginRegistryFactoryBean类的实体bean定义builder\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(PluginRegistryFactoryBean.class);\n\t\t\tbuilder.addPropertyValue(\"type\", type);\n\n\t\t\tRootBeanDefinition beanDefinition = (RootBeanDefinition) builder.getBeanDefinition();\n\t\t\tbeanDefinition.setTargetType(getTargetType(type));\n\n\t\t\tQualifier annotation = type.getAnnotation(Qualifier.class);\n\n\t\t\t// If the plugin interface has a Qualifier annotation, propagate that to the bean definition of the registry\n\t\t\tif (annotation != null) {\n\t\t\t\tAutowireCandidateQualifier qualifierMetadata = new AutowireCandidateQualifier(Qualifier.class);\n\t\t\t\tqualifierMetadata.setAttribute(AutowireCandidateQualifier.VALUE_KEY, annotation.value());\n\t\t\t\tbeanDefinition.addQualifier(qualifierMetadata);\n\t\t\t}\n\t\t\t//获取bean的默认名称\n\t\t\t// Default\n\t\t\tString beanName = annotation == null //\n\t\t\t\t\t? StringUtils.uncapitalize(type.getSimpleName() + \"Registry\") //\n\t\t\t\t\t: annotation.value();\n\t\t\t//动态注入\n\t\t\tregistry.registerBeanDefinition(beanName, builder.getBeanDefinition());\n\t\t}\n\t}\n\n\t/**\n\t * Returns the target type of the {@link PluginRegistry} for the given plugin type.\n\t *\n\t * @param pluginType must not be {@literal null}.\n\t * @return\n\t */\n\tprivate static ResolvableType getTargetType(Class<?> pluginClass) {\n\n\t\tAssert.notNull(pluginClass, \"Plugin type must not be null!\");\n\n\t\tResolvableType delimiterType = ResolvableType.forClass(Plugin.class, pluginClass).getGeneric(0);\n\t\tResolvableType pluginType = ResolvableType.forClass(pluginClass);\n\n\t\treturn ResolvableType.forClassWithGenerics(OrderAwarePluginRegistry.class, pluginType, delimiterType);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Search Feature in Knife4j via YML\nDESCRIPTION: This snippet demonstrates how to disable the search functionality in the Knife4j UI by setting the `enable-search` property to `false` within the `knife4j.setting` configuration in the YML file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/forbidSearch.md#_snippet_1\n\nLANGUAGE: YML\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    enable-search: false\n```\n\n----------------------------------------\n\nTITLE: Eureka Mode: Directory Structure\nDESCRIPTION: Illustrates the directory structure for Eureka mode. This mode utilizes a `eureka.properties` file within a project directory to configure service discovery via Eureka.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_7\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------eureka.properties\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Footer Content in Knife4j via YAML\nDESCRIPTION: This YAML snippet shows how to configure a custom footer for Knife4j.  `enable-footer` disables the default footer.  `enable-footer-custom` enables the custom footer.  `footer-custom-content` sets the actual content, supporting Markdown.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/customFooter.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    enable-footer: false\n    enable-footer-custom: true\n    footer-custom-content: Apache License 2.0 | Copyright  2019-[浙江八一菜刀研究基地](https://gitee.com/xiaoym/knife4j)\n```\n\n----------------------------------------\n\nTITLE: Adding MapStruct Dependencies in Maven\nDESCRIPTION: This XML snippet shows how to include the necessary MapStruct dependencies in a Maven project.  It includes dependencies for mapstruct-jdk8 and mapstruct-processor, as well as configuring the maven-compiler-plugin to use the annotation processor. The annotationProcessorPaths configuration is crucial for MapStruct to generate the mapping implementations during compilation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox2.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <mapstruct.version>1.2.0.Final</mapstruct.version>\n</properties>\n<dependencies>\n    <!-- https://mvnrepository.com/artifact/junit/junit -->\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.8.2</version>\n        <scope>test</scope>\n    </dependency>\n\n    <dependency>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct-jdk8</artifactId>\n        <version>${mapstruct.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct-processor</artifactId>\n        <version>${mapstruct.version}</version>\n    </dependency>\n</dependencies>\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.5.1</version> <!-- or newer version -->\n            <configuration>\n                <source>1.8</source> <!-- depending on your project -->\n                <target>1.8</target> <!-- depending on your project -->\n                <annotationProcessorPaths>\n                    <path>\n                        <groupId>org.mapstruct</groupId>\n                        <artifactId>mapstruct-processor</artifactId>\n                        <version>${mapstruct.version}</version>\n                    </path>\n                    <!-- other annotation processors -->\n                </annotationProcessorPaths>\n                <compilerArgs>\n                    <compilerArg>\n                        -Amapstruct.suppressGeneratorTimestamp=true\n                    </compilerArg>\n                    <compilerArg>\n                        -Amapstruct.suppressGeneratorVersionInfoComment=true\n                    </compilerArg>\n                </compilerArgs>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: DefaultConfiguration Class in Springfox\nDESCRIPTION: This class implements the DefaultsProviderPlugin interface and provides default values for the DocumentationContextBuilder.  It sets various ordering options, ignorable types, rules, response messages, path provider, type resolver, and API selector.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox5.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class DefaultConfiguration implements DefaultsProviderPlugin {\n\n  private final Defaults defaults;\n  private final TypeResolver typeResolver;\n  private final ServletContext servletContext;\n\n  public DefaultConfiguration(Defaults defaults,\n                       TypeResolver typeResolver,\n                       ServletContext servletContext) {\n\n    this.servletContext = servletContext;\n    this.defaults = defaults;\n    this.typeResolver = typeResolver;\n  }\n\n  @Override\n  public DocumentationContextBuilder create(DocumentationType documentationType) {\n    return new DocumentationContextBuilder(documentationType)\n            .operationOrdering(defaults.operationOrdering())\n            .apiDescriptionOrdering(defaults.apiDescriptionOrdering())\n            .apiListingReferenceOrdering(defaults.apiListingReferenceOrdering())\n            .additionalIgnorableTypes(defaults.defaultIgnorableParameterTypes())\n            .rules(defaults.defaultRules(typeResolver))\n            .defaultResponseMessages(defaults.defaultResponseMessages())\n            .pathProvider(new RelativePathProvider(servletContext))\n            .typeResolver(typeResolver)\n            .enableUrlTemplating(false)\n            .selector(ApiSelector.DEFAULT);\n  }\n\n  @Override\n  public boolean supports(DocumentationType delimiter) {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling AfterScript in Knife4j (YAML)\nDESCRIPTION: This YAML snippet shows how to disable the `AfterScript` functionality in the debugging bar of Knife4j. The `AfterScript` feature is enabled by default but can be disabled using this configuration. Requires Knife4j and a compatible Swagger/OpenAPI implementation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-02-knife4j-2.0.7-issue.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    enableAfterScript: false\n```\n\n----------------------------------------\n\nTITLE: Docket Configuration with additionalModels\nDESCRIPTION: This example demonstrates how to configure a Docket bean and use the additionalModels method to add a custom model to the Swagger definitions. The typeResolver is used to resolve the DeveloperApiInfo class to a ResolvedType. The DeveloperApiInfo model will then appear in the Swagger UI, even if it is not used directly in any API endpoint parameters or return types.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox11.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Bean(value = \"groupRestApi\")\n    @Order(value = 1)\n    public Docket groupRestApi() {\n        List<ResolvedType> list=Lists.newArrayList();\n\n        SpringAddtionalModel springAddtionalModel= springAddtionalModelService.scan(\"com.swagger.bootstrap.ui.demo.extend\");\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(groupApiInfo())\n                .groupName(\"分组接口\")\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.group\"))\n                .paths(PathSelectors.any())\n                .build()\n            //添加自定义Model类型\n                .additionalModels(typeResolver.resolve(DeveloperApiInfo.class))\n                .ignoredParameterTypes(HttpSession.class).extensions(Lists.newArrayList(new OrderExtensions(2))).securityContexts(Lists.newArrayList(securityContext(),securityContext1())).securitySchemes(Lists.<SecurityScheme>newArrayList(apiKey(),apiKey1()));\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying @SecurityRequirement to an Operation (Java)\nDESCRIPTION: This Java snippet shows the correct way to apply a defined Security Scheme to a specific API operation using the `@Operation` and `@SecurityRequirement` annotations from springdoc-openapi. This is necessary for Knife4j to display the Authorization header field in the UI for that particular endpoint.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/add-authorization-header.mdx#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Operation(security = { @SecurityRequirement(name = HttpHeaders.AUTHORIZATION) })\n```\n\n----------------------------------------\n\nTITLE: Execute Startup Script (Shell)\nDESCRIPTION: This command executes the startup script (`startup.sh`) to initiate the knife4j-admin application.  The script must have execute permissions set. This will start the java application in the background.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/knife4j-admin-deploy.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n[root@izbt kadmin]# ./startup.sh\n```\n\n----------------------------------------\n\nTITLE: Customizing Footer Display and Content - YAML\nDESCRIPTION: This YAML snippet configures Knife4j to customize the footer display and content. `enableFooter` controls whether the default footer is displayed, `enableFooterCustom` enables custom footer content, and `footerCustomContent` specifies the custom content, supporting Markdown syntax.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n\tenable: true\n\tsetting:\n\t\t# 是否不显示Knife4j默认的footer，默认为true(显示)\n\t\tenableFooter: false\n\t\t# 是否自定义Footer，默认为false(非自定义)\n\t\tenableFooterCustom: true\n\t\t# 自定义Footer内容,支持Markdown语法\n\t\tfooterCustomContent: 中国XXX科技股份有限公司版权所有\n```\n\n----------------------------------------\n\nTITLE: Docket additionalModels method\nDESCRIPTION: This is the core method provided by Springfox's Docket object for adding additional models to the Swagger definitions. It accepts a ResolvedType object and allows including models not directly used in API parameters or return types. The ResolvedType is typically derived from a Java Type.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox11.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n   * Method to add additional models that are not part of any annotation or are perhaps implicit\n   *\n   * @param first     - at least one is required\n   * @param remaining - possible collection of more\n   * @return on-going docket\n   * @since 2.4.0\n   */\npublic Docket additionalModels(ResolvedType first, ResolvedType... remaining) {\n    additionalModels.add(first);\n    additionalModels.addAll(newHashSet(remaining));\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping API Listings to Paths\nDESCRIPTION: This Java code snippet details how Springfox maps API listings to Swagger paths. It iterates through API listings and descriptions to construct a map of API paths, associating each path with its corresponding operations. This involves extracting API paths from ApiDescription objects and converting Operation objects to Swagger paths.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprotected Map<String, Path> mapApiListings(Multimap<String, ApiListing> apiListings) {\n    Map<String, Path> paths = newTreeMap();\n    for (ApiListing each : apiListings.values()) {\n      for (ApiDescription api : each.getApis()) {\n        paths.put(api.getPath(), mapOperations(api, Optional.fromNullable(paths.get(api.getPath()))));\n      }\n    }\n    return paths;\n  }\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency: OpenAPI3 Jakarta Starter\nDESCRIPTION: This XML snippet shows the Maven dependency for the Knife4j OpenAPI3 Jakarta Spring Boot starter.  It is used with Spring Boot 3.0.0 or later and requires JDK 17 or higher.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/upgrading/upgrading_v4.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>\n    <version>4.0.0</version>\n</dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Algolia in Docusaurus\nDESCRIPTION: This JSON snippet shows how to configure Algolia search within a Docusaurus `docusaurus.config.js` file. It requires specifying the Algolia app ID, API key, and index name.  Importantly, `contextualSearch` should be set to `false` if contextual facet filters are not needed, which can prevent unexpected search results.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/others/doc-search.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nthemeConfig:\n    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */ ({\n            // others....\n            algolia: {\n                appId: '3CRIMRK623',\n                apiKey: 'ae4f57f208e3c7749017e09582f0b8a4', // search only (public) API key\n                indexName: 'xiaominfo',\n                contextualSearch: false,\n                debug: true\n            },\n        }),\n```\n\n----------------------------------------\n\nTITLE: MobileIncrementV1 with Discount Logic\nDESCRIPTION: This code shows how to add discount logic directly into MobileIncrementV1. The code checks if the customer is an old customer and if the recharge amount is greater than 100. If both conditions are met, it calculates a discount of 10% and logs the discount amount.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class MobileIncrementV1 implements MobileIncrementBusiness {\n\n    Logger logger= LoggerFactory.getLogger(MobileIncrementV1.class);\n\n    @Override\n    public void increment(MobileCustomer mobileCustomer, int money) {\n        logger.info(\"给{}充值电话费,充值金额:{}\",mobileCustomer.getTel(),money);\n        logger.info(\"充值完成.\");\n        if (mobileCustomer.isOld()){\n            logger.info(\"老用户折扣\");\n            if (money>100){\n                BigDecimal big=new BigDecimal(money).multiply(new BigDecimal(0.1));\n                logger.info(\"当前充值金额>100元,返冲{}元\",big.intValue());\n            }\n        }\n    }\n\n    @Override\n    public boolean supports(MobileCustomer delimiter) {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of Knife4jAggregationDesktop\nDESCRIPTION: Shows the directory structure of the Knife4jAggregationDesktop installation. This includes directories for binaries, configuration, data, libraries, logs, and static web resources. The configuration directory is important for setting up the application, while the data directory is where OpenAPI specifications are stored.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\n|-Knife4jAggregationDesktop\n|------bin \n|------conf\n|------data\n|------lib\n|-----—logs\n|------webapps\n|------LICENSE\n|------readme.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Context Builder in DocumentationPluginsManager\nDESCRIPTION: This code shows the createContextBuilder method in DocumentationPluginsManager. It obtains a plugin for the given DocumentationType and DefaultConfiguration, then uses that plugin to create a DocumentationContextBuilder with a resource grouping strategy.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic DocumentationContextBuilder createContextBuilder(\n    DocumentationType documentationType,\n    DefaultConfiguration defaultConfiguration) {\n    return defaultsProviders.getPluginFor(documentationType, defaultConfiguration)\n        .create(documentationType)\n        .withResourceGroupingStrategy(resourceGroupingStrategy(documentationType));\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot >= 3.0.0-M1 Dependency\nDESCRIPTION: This XML snippet shows the Maven dependency required for integrating Knife4j with Spring Webflux in Spring Boot versions 3.0.0-M1 and later. It uses springdoc-openapi-starter-webflux-ui version 2.0.2.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/spring-webflux/spring-webflux-introduction.mdx#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.springdoc</groupId>\n    <artifactId>springdoc-openapi-starter-webflux-ui</artifactId>\n    <version>2.0.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configure Swagger Bean\nDESCRIPTION: This Java class `SwaggerConfig` configures Swagger using a `BeanConfig`. It sets metadata such as title, description, version, contact, host, schemes, base path, and resource package. The `setScan(true)` enables Swagger to scan the specified resource package for JAX-RS annotations, generating the API documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.swagger.jaxrs.config.BeanConfig;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * 类描述: swagger全局配置\n *\n * @author xksgs\n * @date 2021-09-02\n */\n@Configuration\npublic class SwaggerConfig {\n\n    @Bean\n    public BeanConfig beanConfig() {\n        BeanConfig config = new BeanConfig();\n        config.setConfigId(\"xxx-collect\");\n        config.setTitle(\"xxx-collect rest api接口文档\");\n        config.setDescription(\"xxx-collect rest api接口文档\");\n        config.setVersion(\"v1\");\n        config.setContact(\"xxx@gmail.com\");\n        config.setHost(\"localhost:9026\");\n        config.setSchemes(new String[]{\"http\"});\n        config.setBasePath(\"/collect\");\n        config.setResourcePackage(\"com.xx.xxx.collect\");\n        config.setPrettyPrint(true);\n        config.setScan(true);\n        return config;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger with Grouping in Spring Boot\nDESCRIPTION: This Java code snippet demonstrates how to configure Swagger in a Spring Boot application to enable API grouping using the swagger-bootstrap-ui library. It defines two Docket beans, 'defaultApi' and 'groupRestApi', each associated with a different group name and base package for request handlers.  Dependencies include Springfox Swagger and Spring Boot.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2017-12-18-swagger-bootstrap-ui-1.7-issue.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfiguration {\n\n    @Bean(value = \"defaultApi\")\n    public Docket defaultApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .groupName(\"默认接口\")\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.controller\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n    @Bean(value = \"groupRestApi\")\n    public Docket groupRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(groupApiInfo())\n                .groupName(\"分组接口\")\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.group\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo groupApiInfo(){\n        return new ApiInfoBuilder()\n                .title(\"分组Api\")\n                .description(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.group.com/\")\n                .contact(\"group@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Aggregation Dependency Maven\nDESCRIPTION: This XML snippet demonstrates how to add the `knife4j-aggregation-spring-boot-starter` dependency to a Maven project. Replace `2.0.8` with the latest version available in the Maven Central Repository. This dependency enables OpenAPI specification aggregation in a Spring Boot application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregation.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n <dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-aggregation-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库搜索aggregation最新版本号-->\n    <version>2.0.8</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Swagger Model Definition Java\nDESCRIPTION: This code snippet shows the structure of the Swagger model class. It defines the standard Swagger object attributes used for representing API documentation.  These attributes includes swagger version, info, host, basePath, tags, schemes, consumes, produces, security, paths, securityDefinitions, definitions, parameters, responses, externalDocs, and vendorExtensions.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox17.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Swagger {\n    protected String swagger = \"2.0\";\n    protected Info info;\n    protected String host;\n    protected String basePath;\n    protected List<Tag> tags;\n    protected List<Scheme> schemes;\n    protected List<String> consumes;\n    protected List<String> produces;\n    protected List<SecurityRequirement> security;\n    protected Map<String, Path> paths;\n    protected Map<String, SecuritySchemeDefinition> securityDefinitions;\n    protected Map<String, Model> definitions;\n    protected Map<String, Parameter> parameters;\n    protected Map<String, Response> responses;\n    protected ExternalDocs externalDocs;\n    protected Map<String, Object> vendorExtensions;\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy with API Path Prefix (Shell)\nDESCRIPTION: This configuration shows how to use Nginx to reverse proxy requests to an application server, specifically targeting APIs that begin with `/api/`. It includes setting the root directory for serving static files and increasing the client body size limit.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-nginx.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nserver {\n        listen       18001;\n        server_name  192.168.0.112;\n        #charset koi8-r;\n\n        location / {\n            root /mnt/application/swagger-static;\n        }\n        location /api/ {\n        \t// Swagger JSON文件中所有以api开头的接口全部走8999的代理\n            proxy_pass http://127.0.0.1:8999/api/;\n            client_max_body_size   200m;\n        }\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Nacos Service Names\nDESCRIPTION: This snippet demonstrates how to customize the display names of services in Nacos mode using the `name` attribute in `nacos.properties`. It allows users to provide more descriptive names for services in the Knife4j documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_13\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.nacos.serviceUrl=http://192.168.0.223:8848/nacos\nknife4j.nacos.routes[0].name=自定义X服务1\nknife4j.nacos.routes[0].serviceName=service-user\nknife4j.nacos.routes[0].location=/v2/api-docs?group=default\nknife4j.nacos.routes[0].order=3\nknife4j.nacos.routes[1].name=自定义X服务2\nknife4j.nacos.routes[1].serviceName=service-order\nknife4j.nacos.routes[1].location=/v2/api-docs?group=default\nknife4j.nacos.routes[1].order=2\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files (C#)\nDESCRIPTION: This configures the application to serve static files from the wwwroot directory.  This allows for the serving of the Knife4j front-end code, which is placed in that folder.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\napp.UseStaticFiles();\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Flow configuration (JSON)\nDESCRIPTION: This JSON defines an OAuth2 security scheme with both implicit and authorization code flows. It specifies the authorization URL, token URL, and scopes for each flow.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulated Host Configuration in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the logic Knife4j uses to apply the custom host configuration when sending API requests.  It checks if the custom host is enabled and then sets the `baseURL` property of the Axios request configuration accordingly.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/host.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar baseUrl='';//默认是空\n//是否启用Host\nif(this.enableHost){\n    baseUrl=this.enableHostText;\n}\nvar requestConfig={\n    baseURL:baseUrl,//调用目标Host服务的接口\n    url: url,\n    method: methodType,\n    headers: headers,\n    params: formParams,\n    data: data,\n    //Cookie标志\n    withCredentials:this.debugSendHasCookie(headers),\n    timeout: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Callback Object Example - YAML\nDESCRIPTION: This YAML code defines a callback object using a user-provided queryUrl parameter. The callback includes a POST request with a description and a reference to a schema.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\nmyCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content: \n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Configure Services for NSwag\nDESCRIPTION: This snippet configures the services required for NSwag integration. It adds OpenApiDocument to the service collection, enabling NSwag to generate the OpenAPI document.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-guid.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n {\n    // 其它Service\n     services.AddOpenApiDocument();\n }\n```\n\n----------------------------------------\n\nTITLE: Custom Gateway Service Exclusion - Java\nDESCRIPTION: This Java code snippet demonstrates how to implement a custom service exclusion rule for the Knife4j gateway. It defines a class `MyExcludeService` that implements the `GatewayServiceExcludeService` interface. This allows developers to programmatically exclude services based on custom logic, such as filtering services containing the word 'order' in their name. Dependencies include lombok for logging and Spring Framework annotations for component management.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.2.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Slf4j\n@Component\npublic class MyExcludeService implements GatewayServiceExcludeService {\n    @Override\n    public Set<String> exclude(Environment environment, Knife4jGatewayProperties properties, List<String> services) {\n        log.info(\"自定义过滤器.\");\n        if (!CollectionUtils.isEmpty(services)){\n\t\t\t\t\t\t// 排除注册中心包含order字眼的服务\n            return services.stream().filter(s -> s.contains(\"order\")).collect(Collectors.toSet());\n        }\n        return new TreeSet<>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Software Directory Structure\nDESCRIPTION: Describes the directory structure of the Knife4jAggregationDesktop application. It includes directories for binaries, configurations, data, libraries, logs, and web applications.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\n|-Knife4jAggregationDesktop\n|------bin \n|------conf\n|------data\n|------lib\n|-----—logs\n|------webapps\n|------LICENSE\n|------readme.txt\n```\n\n----------------------------------------\n\nTITLE: Reflection-Based Model Creation - Java\nDESCRIPTION: This method constructs a `Model` based on reflection of the properties of a `ResolvedType`. It extracts properties using `properties` method, indexes them by property name, and then builds a `Model` using the extracted properties and information from the `ModelContext`. This allows creating models dynamically based on the structure of classes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nprivate Optional<Model> reflectionBasedModel(ModelContext modelContext, ResolvedType propertiesHost) {\n    ImmutableMap<String, ModelProperty> propertiesIndex\n        = uniqueIndex(properties(modelContext, propertiesHost), byPropertyName());\n    LOG.debug(\"Inferred {} properties. Properties found {}\", propertiesIndex.size(),\n              Joiner.on(\", \").join(propertiesIndex.keySet()));\n    Map<String, ModelProperty> properties = newTreeMap();\n    properties.putAll(propertiesIndex);\n    return Optional.of(modelBuilder(propertiesHost, properties, modelContext));\n}\n```\n\n----------------------------------------\n\nTITLE: Operation Builder Plugin with ApiOperation Position\nDESCRIPTION: This Java code snippet implements an `OperationBuilderPlugin` to add a custom 'x-order' vendor extension to each API operation, dynamically setting its value based on the `position` attribute of the `@ApiOperation` or `@ApiOperationSort` annotation.  If neither annotation is present, the value remains Integer.MAX_VALUE. The plugin uses `StringVendorExtension` to create the extension and adds it to the operation builder.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void apply(OperationContext context) {\n    int position=Integer.MAX_VALUE;\n    //首先查找ApiOperation注解\n    Optional<ApiOperation> api=context.findAnnotation(ApiOperation.class);\n    if (api.isPresent()){\n        //判断postion是否有值\n        int posit=api.get().position();\n        if (posit!=0){\n            position=posit;\n        }else{\n            Optional<ApiOperationSort> apiOperationSortOptional=context.findAnnotation(ApiOperationSort.class);\n            if (apiOperationSortOptional.isPresent()){\n                position=apiOperationSortOptional.get().value();\n            }\n        }\n    }else{\n        Optional<ApiOperationSort> apiOperationSortOptional=context.findAnnotation(ApiOperationSort.class);\n        if (apiOperationSortOptional.isPresent()){\n            position=apiOperationSortOptional.get().value();\n        }\n    }\n\n    context.operationBuilder().extensions(Lists.newArrayList(new StringVendorExtension(\"x-order\",String.valueOf(position))));\n}\n```\n\n----------------------------------------\n\nTITLE: Gateway Configuration: application.yml\nDESCRIPTION: This YAML snippet configures Knife4j gateway aggregation in the application.yml file. It defines the routes to aggregate Swagger documents from different services.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/upgrading/upgrading_v4.md#_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  # 聚合swagger文档\n  gateway:\n    enable: true\n    routes:\n      - name: 用户服务\n        url: /user-service/v2/api-docs?group=default\n        service-name: user-service\n        order: 2\n      - name: 订单服务\n        url: /order-service/v2/api-docs?group=default\n        service-name: order-service\n        order: 3\n\n```\n\n----------------------------------------\n\nTITLE: Set X-Forwarded-Prefix Header in Nginx\nDESCRIPTION: This Nginx configuration sets the 'X-Forwarded-Prefix' header with the specified forward path. This header is crucial for Knife4j to correctly resolve paths when accessed through a reverse proxy. The '${your_foward_path}' variable should be replaced with the actual path.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/nginx-forward-path.md#_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nproxy_set_header X-Forwarded-Prefix ${your_foward_path};\n```\n\n----------------------------------------\n\nTITLE: Form URL Encoded Request Body - YAML\nDESCRIPTION: Defines a request body content schema for application/x-www-form-urlencoded using YAML. It includes properties with different types, such as 'string' with format 'uuid' and a complex 'object'. The complex 'object' will be stringified to support RFC 1866.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Object in Springfox (Java)\nDESCRIPTION: This Java code snippet shows how to generate the Documentation object in Springfox. It involves scanning API listings, constructing a DocumentationBuilder with various properties, and building the final Documentation object. Key components used include ApiListingReferenceScanner, ApiListingScanner, DocumentationBuilder, and ResourceListingBuilder. Dependencies include springfox core library and related classes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox15.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/***\n   * 最终生成Documentation文档对象\n   * @param context\n   * @return\n   */\n  public Documentation scan(DocumentationContext context) {\n    //得到分组接口\n    ApiListingReferenceScanResult result = apiListingReferenceScanner.scan(context);\n    //拿到所有接口请求\n    //controller:methods-- 1:N的关系\n    ApiListingScanningContext listingContext = new ApiListingScanningContext(context,\n        result.getResourceGroupRequestMappings());\n    //核心操作,springfox的关键操作都在下面这个scan方法中,构造接口函数\n    Multimap<String, ApiListing> apiListings = apiListingScanner.scan(listingContext);\n    Set<Tag> tags = toTags(apiListings);\n    tags.addAll(context.getTags());\n    DocumentationBuilder group = new DocumentationBuilder()\n        .name(context.getGroupName())\n        .apiListingsByResourceGroupName(apiListings)\n        .produces(context.getProduces())\n        .consumes(context.getConsumes())\n        .host(context.getHost())\n        .schemes(context.getProtocols())\n        .basePath(context.getPathProvider().getApplicationBasePath())\n        .extensions(context.getVendorExtentions())\n        .tags(tags);\n\n    Set<ApiListingReference> apiReferenceSet = newTreeSet(listingReferencePathComparator());\n    apiReferenceSet.addAll(apiListingReferences(apiListings, context));\n\n    ResourceListing resourceListing = new ResourceListingBuilder()\n        .apiVersion(context.getApiInfo().getVersion())\n        .apis(from(apiReferenceSet).toSortedList(context.getListingReferenceOrdering()))\n        .securitySchemes(context.getSecuritySchemes())\n        .info(context.getApiInfo())\n        .build();\n    group.resourceListing(resourceListing);\n    return group.build();\n  }\n```\n\n----------------------------------------\n\nTITLE: Request body with model reference in JSON\nDESCRIPTION: This JSON snippet defines a request body that references a schema defined elsewhere ('#/components/schemas/User'). It also includes examples for different media types (application/json, application/xml, text/plain, */*).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\", \n            \"externalValue\": \"http://foo.bar/examples/user-example.json\"\n          } \n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.txt\" \n        }\n      } \n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"http://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Knife4j UI Dependency Configuration XML\nDESCRIPTION: This snippet shows an alternative dependency for the documentation aggregation service (service-doc).  It includes only the Knife4j Spring UI module. This snippet illustrates that only UI dependencies are enough when you don't have backend code.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-ui</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Mode in Docker Compose (YAML)\nDESCRIPTION: This snippet demonstrates how to configure Knife4jInsight to use Nacos as a configuration source. In this mode, Knife4jInsight retrieves its configuration, including OpenAPI specification URLs, from a Nacos server. The environment variables specify the data source as 'nacos', the server address, credentials, namespace, data ID, and group to use for configuration retrieval.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-install.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# 通过docker-compose可以快速部署knife4j服务\nversion: \"2.0\"\nservices:\n  knife4j:\n    container_name: knife4j-insight-nacos\n    restart: always\n    # 访问\n    image: \"xiaoymin/knife4j:v2.0.1\"\n    network_mode: \"bridge\"\n    # 端口映射\n    ports:\n      - \"10000:10000\"\n    # 指定配置属性模式为Nacos配置中心\n    environment:\n      - knife4j.source=nacos\n      - knife4j.nacos.server=127.0.0.1:8848\n      - knife4j.nacos.username=nacos\n      - knife4j.nacos.password=nacos\n      # 使用者自行在所指定的nacos上创建 namespace 、dataid、group\n      - knife4j.nacos.namespace=knife4j\n      - knife4j.nacos.dataId=knife4j_data_id\n      - knife4j.nacos.group=DEFAULT_GROUP\n```\n\n----------------------------------------\n\nTITLE: Spring Boot < 3.0.0-M1 Dependency\nDESCRIPTION: This XML snippet shows the Maven dependency required for integrating Knife4j with Spring Webflux in Spring Boot versions prior to 3.0.0-M1.  It utilizes springdoc-openapi-webflux-ui version 1.6.14.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/spring-webflux/spring-webflux-introduction.mdx#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.springdoc</groupId>\n    <artifactId>springdoc-openapi-webflux-ui</artifactId>\n    <version>1.6.14</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Plugin Registries with @EnablePluginRegistries - Java\nDESCRIPTION: This code snippet demonstrates the usage of the `@EnablePluginRegistries` annotation in Java to enable the injection of `PluginRegistry` instances. It specifies the plugin interface (`Plugin<? extends Plugin<?>>`) for which the registry should be created. The registries are named after the uncapitalized plugin type extended with Registry. \nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * 为开启使用Plugin插件的类型应用启用PluginRegistry的实例注入\n * @see #value()\n * @author Oliver Gierke\n */\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\n@Documented\n@Import(PluginRegistriesBeanDefinitionRegistrar.class)\npublic @interface EnablePluginRegistries {\n\n\t/**\n\t* \n\t * The {@link Plugin} types to register {@link PluginRegistry} instances for. The registries will be named after the\n\t * uncapitalized plugin type extended with {@code Registry}. So for a plugin interface {@code SamplePlugin} the\n\t * exposed bean name will be {@code samplePluginRegistry}. This can be used on the client side to make sure you get\n\t * the right {@link PluginRegistry} injected by using the {@link Qualifier} annotation and referring to that bean\n\t * name. If the auto-generated bean name collides with one already in your application you can use the\n\t * {@link Qualifier} annotation right at the plugin interface to define a custom name.\n\t * \n\t * @return\n\t */\n\tClass<? extends Plugin<?>>[] value();\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for Knife4j Discovery Starter\nDESCRIPTION: This XML snippet shows the Maven dependency configuration required to include the `knife4j-discovery-spring-boot-starter` in a Spring Boot project for automatic registration with Knife4j Cloud. Ensure the version matches the Knife4jCloud version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/cloud-openapi.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-discovery-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库(http://search.maven.org)搜索最新版本号-->\n    <!-- 该版本必须和Knife4jCloud主版本一致-->\n    <version>1.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Server Objects in YAML\nDESCRIPTION: This YAML snippet defines multiple Server objects, each with a URL and description.  The snippet shows development, staging and production server configurations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n```\n\n----------------------------------------\n\nTITLE: Add Knife4j Aggregation Starter Dependency\nDESCRIPTION: This XML snippet adds the `knife4j-aggregation-spring-boot-starter` dependency. This dependency enables Knife4j's Cloud mode, allowing it to aggregate API documentation from multiple sources. This is necessary because the base version of Knife4j only supports a single port, while the Dubbox service runs on a different port from the Spring Boot application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n    <dependency>\n    \t<groupId>com.github.xiaoymin</groupId>\n    \t<artifactId>knife4j-aggregation-spring-boot-starter</artifactId>\n    \t<version>2.0.9</version>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Configure OpenAPI Extension Resolver in Docket\nDESCRIPTION: This snippet shows how to configure `OpenApiExtensionResolver` with Docket object in Swagger configuration. It demonstrates how to inject `OpenApiExtensionResolver` and use it to build extensions for Docket, which allows Knife4j to extend OpenAPI specifications.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/host.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildExtensions(groupName));\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Body for Specific Media Types - YAML\nDESCRIPTION: Defines a request body content schema for specific media types (image/jpeg and image/png) using YAML.  Each media type is associated with a schema of type 'string' and format 'binary', indicating that the request body can contain either a JPEG or PNG image file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\n# multiple, specific media types may be specified:\nrequestBody:\n  content:\n      # a binary file of type png or jpeg\n    'image/jpeg':\n      schema:\n        type: string\n        format: binary\n    'image/png':\n      schema:\n        type: string\n        format: binary        \n```\n\n----------------------------------------\n\nTITLE: Eureka Mode Configuration (eureka.properties)\nDESCRIPTION: Shows the configuration for Eureka mode using `eureka.properties`. It defines eureka service URL, route name, service name and location of the OpenAPI endpoints.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.eureka.serviceUrl=http://localhost:10000/eureka/\nknife4j.eureka.routes[0].name=用户\nknife4j.eureka.routes[0].serviceName=userService\nknife4j.eureka.routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Eureka模式\n\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Spring UI Dependency using Maven\nDESCRIPTION: This snippet shows how to add the Knife4j Spring UI dependency to a Maven project. This allows to replace the default Swagger UI skin with Knife4j's UI. It requires a Java+Spring technology stack and using springfox.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-03-08-knife4j-2.0.2-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-spring-ui</artifactId>\n  <version>2.0.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Example in List Field\nDESCRIPTION: This Java code snippet demonstrates an incorrect usage of `@ApiModelProperty` on a `List` field.  Specifically, providing an `example` value for a `List` can cause issues with JSON parsing in the Swagger UI, as the generated JSON structure will be invalid.  The `example` should be removed from list fields and let springfox-swagger automatically handle the parsing.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swaggerResourceInvalid.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@ApiModel(description = \"客户字段分组模型\",value = \"CrmFieldGroupResponse\")\npublic class CrmFieldGroupResponse {\n\n    @ApiModelProperty(value = \"客户字段分组ID\")\n    private int id;\n\n    @ApiModelProperty(value = \"客户字段分组名称\")\n    private String name;\n\n    @ApiModelProperty(value = \"客户字段数据\",example = \"{'id':'xxx'}\")\n    private List<CrmFieldResponse> fields;\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Servlet Filter for Production Security (Java)\nDESCRIPTION: This Java snippet demonstrates a Servlet filter that blocks access to Knife4j resources in a production environment. It intercepts requests, checks if the resource matches a restricted URI, and returns an error if it does.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/production-forbidden-ui.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n    HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n    if (production) {\n        String uri = httpServletRequest.getRequestURI();\n        // 匹配判断uri地址是否我们需要屏蔽的资源\n        if (!match(uri)) {\n            chain.doFilter(request, response);\n        } else {\n            HttpServletResponse resp = (HttpServletResponse) response;\n            resp.setStatus(customCode);\n            resp.sendError(customCode, \"You do not have permission to access this page\");\n        }\n    } else {\n        chain.doFilter(request, response);\n    }\n}   \n```\n\n----------------------------------------\n\nTITLE: Cloud Mode OpenAPI Configuration\nDESCRIPTION: This YAML configuration file (app.yml) configures Knife4j to aggregate OpenAPI specifications from remote URLs in Cloud mode. It specifies the names, URIs, and locations of the OpenAPI endpoints.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-docker.md#_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nserver:\n  port: 8888\nknife4j:\n  enableAggregation: true\n  cloud:\n    enable: true\n    routes:\n      - name: cloud1\n        uri: knife4j.xiaominfo.com\n        location: /v2/api-docs?group=2.X版本\n      - name: cloud2\n        uri: knife4j.xiaominfo.com\n        location: /v2/api-docs?group=3.默认接口\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration\nDESCRIPTION: This XML snippet defines the Maven dependencies required for the Spring Plugin example. It includes dependencies for JUnit, Spring Core, Spring Plugin Core, SLF4J API, JCL over SLF4J, and Logback Classic.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <logback.version>1.2.3</logback.version>\n    <org.slf4j.version>1.7.21</org.slf4j.version>\n</properties>\n\n<dependencies>\n    <!-- https://mvnrepository.com/artifact/junit/junit -->\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.8.2</version>\n        <scope>test</scope>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-core</artifactId>\n        <version>4.0.9.RELEASE</version>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/org.springframework.plugin/spring-plugin-core -->\n    <dependency>\n        <groupId>org.springframework.plugin</groupId>\n        <artifactId>spring-plugin-core</artifactId>\n        <version>1.2.0.RELEASE</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-api</artifactId>\n        <version>${org.slf4j.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>jcl-over-slf4j</artifactId>\n        <version>${org.slf4j.version}</version>\n        <scope>runtime</scope>\n    </dependency>\n    <dependency>\n        <groupId>ch.qos.logback</groupId>\n        <artifactId>logback-classic</artifactId>\n        <version>${logback.version}</version>\n        <exclusions>\n            <exclusion>\n                <groupId>javax.mail</groupId>\n                <artifactId>mail</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>javax.jms</groupId>\n                <artifactId>jms</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>com.sun.jdmk</groupId>\n                <artifactId>jmxtools</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>com.sun.jmx</groupId>\n                <artifactId>jmxri</artifactId>\n            </exclusion>\n        </exclusions>\n        <scope>runtime</scope>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Swagger Root Object JSON Extension\nDESCRIPTION: This JSON snippet demonstrates how to add a vendor extension to the root Swagger object. The `x-description` property is added to provide a custom description. This extension follows the Swagger standard of prefixing extension properties with `x-`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"<div style='font-size:14px;color:red;'>swagger-bootstrap-ui-demo RESTful APIs</div>\",\n        \"version\": \"1.0\",\n        \"title\": \"swagger-bootstrap-ui很棒~~~！！！\",\n        \"termsOfService\": \"http://www.group.com/\",\n        \"contact\": {\n            \"name\": \"group@qq.com\"\n        }\n    },\n    \"host\": \"127.0.0.1:8999\",\n    \"basePath\": \"/\",\n    \"tags\": [\n        {\n            \"name\": \"1.8.2版本\",\n            \"description\": \"Api 182 Controller\"\n        }\n    ],\n    \"paths\": {\n        \"/2/api/new187/postRequest\": {\n            \"post\": {\n                \"tags\": [\n                    \"api-1871-controller\"\n                ],\n                \"summary\": \"版本2-post请求参数Hidden属性是否生效\",\n                \"operationId\": \"postRequestUsingPOST_1\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"*/*\"\n                ],\n                \"parameters\": [\n                    {\n                        \"in\": \"body\",\n                        \"name\": \"model187\",\n                        \"description\": \"model187\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"originalRef\": \"Model187\",\n                            \"$ref\": \"#/definitions/Model187\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"originalRef\": \"Rest«Model187»\",\n                            \"$ref\": \"#/definitions/Rest«Model187»\"\n                        }\n                    },\n                    \"201\": {\n                        \"description\": \"Created\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"BearerToken\": [\n                            \"global\"\n                        ]\n                    },\n                    {\n                        \"BearerToken1\": [\n                            \"global\"\n                        ]\n                    }\n                ],\n                \"deprecated\": false\n            }\n        }\n    },\n    \"securityDefinitions\": {\n        \"BearerToken\": {\n            \"type\": \"apiKey\",\n            \"name\": \"Authorization\",\n            \"in\": \"header\"\n        }\n    },\n    \"definitions\": {\n        \"AInfoVo\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"aId\",\n                \"bList\"\n            ],\n            \"properties\": {\n                \"aId\": {\n                    \"type\": \"string\",\n                    \"description\": \"A记录主键\"\n                },\n                \"bList\": {\n                    \"type\": \"object\",\n                    \"description\": \"B信息Map, key为BInfoVo的主键pkId\",\n                    \"additionalProperties\": {\n                        \"originalRef\": \"BInfoVo\",\n                        \"$ref\": \"#/definitions/BInfoVo\"\n                    }\n                }\n            },\n            \"title\": \"AInfoVo\",\n            \"description\": \"A信息\"\n        },\n        \"ActInteger\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"doub1\": {\n                    \"type\": \"number\",\n                    \"format\": \"double\",\n                    \"description\": \"double类型属性\"\n                },\n                \"float1\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\",\n                    \"description\": \"float类型属性\"\n                },\n                \"name\": {\n                    \"type\": \"string\"\n                },\n                \"number\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\",\n                    \"description\": \"Long类型\"\n                },\n                \"price\": {\n                    \"type\": \"number\",\n                    \"description\": \"BigDecimal类型属性\"\n                },\n                \"sort\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"description\": \"int类型\"\n                }\n            },\n            \"title\": \"ActInteger\"\n        },\n        \"Actor\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"address\": {\n                    \"type\": \"string\"\n                },\n                \"deepOne\": {\n                    \"originalRef\": \"DeepOne\",\n                    \"$ref\": \"#/definitions/DeepOne\"\n                },\n                \"recipt\": {\n                    \"originalRef\": \"Recipt\",\n                    \"$ref\": \"#/definitions/Recipt\"\n                },\n                \"sort\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                }\n            },\n            \"title\": \"Actor\"\n        }\n    },\n    \"x-description\":\"Swagger扩展属性之一Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message\nDESCRIPTION: This snippet displays the error message that users encounter when upgrading to Knife4j 4.0's OpenAPI 3 version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/v4/knife4j-no-openapi.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNo OpenAPI resource found for group: swagger-config\n```\n\n----------------------------------------\n\nTITLE: Run Knife4j Docker Container (Cloud Mode)\nDESCRIPTION: This command creates and runs a Knife4j Docker container in Cloud mode, mapping port 18002 on the host to port 8888 in the container, and mounting the app.yml configuration file from the host to the container.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-docker.md#_snippet_6\n\nLANGUAGE: shell script\nCODE:\n```\n[root@izbx23 openapi]# docker run -itd --name cloudapi -p 18002:8888 -v /home/openapi/app.yml:/app/app.yml xiaoymin/knife4j\n6b81844e0c605704eef3ffcb207e090a1139a9fbc8dcf0a43efdcb60f41d327c\n[root@izbx23 openapi]# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES\n6b81844e0c60        xiaoymin/knife4j    \"java -jar -Djava.se…\"   4 seconds ago       Up 3 seconds        0.0.0.0:18002->8888/tcp   cloudapi\n```\n\n----------------------------------------\n\nTITLE: ServiceModelToSwagger2MapperImpl Class Java\nDESCRIPTION: This class uses MapStruct to map Springfox's internal representation of the API documentation to the Swagger 2 data model. It autowires various Mappers to handle different aspects of the documentation, such as models, parameters, and security definitions. The mapDocumentation method converts a Documentation object to a Swagger object.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox4.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2018-06-23T17:02:57-0500\",\n    comments = \"version: 1.2.0.Final, compiler: javac, environment: Java 1.8.0_151 (Oracle Corporation)\"\n)\n@Component\npublic class ServiceModelToSwagger2MapperImpl extends ServiceModelToSwagger2Mapper {\n    \n    @Autowired\n    private ModelMapper modelMapper;\n    @Autowired\n    private ParameterMapper parameterMapper;\n    @Autowired\n    private SecurityMapper securityMapper;\n    @Autowired\n    private LicenseMapper licenseMapper;\n    @Autowired\n    private VendorExtensionsMapper vendorExtensionsMapper;\n\n    @Override\n    public Swagger mapDocumentation(Documentation from) {\n        if ( from == null ) {\n            return null;\n        }\n\n        Swagger swagger = new Swagger();\n\n        swagger.setVendorExtensions( vendorExtensionsMapper.mapExtensions( from.getVendorExtensions() ) );\n        swagger.setSchemes( mapSchemes( from.getSchemes() ) );\n        swagger.setPaths( mapApiListings( from.getApiListings() ) );\n        swagger.setHost( from.getHost() );\n        swagger.setDefinitions( modelMapper.modelsFromApiListings( from.getApiListings() ) );\n        swagger.setSecurityDefinitions( securityMapper.toSecuritySchemeDefinitions( from.getResourceListing() ) );\n        ApiInfo info = fromResourceListingInfo( from );\n        if ( info != null ) {\n            swagger.setInfo( mapApiInfo( info ) );\n        }\n        swagger.setBasePath( from.getBasePath() );\n        swagger.setTags( tagSetToTagList( from.getTags() ) );\n        List<String> list2 = from.getConsumes();\n        if ( list2 != null ) {\n            swagger.setConsumes( new ArrayList<String>( list2 ) );\n        }\n        else {\n            swagger.setConsumes( null );\n        }\n        List<String> list3 = from.getProduces();\n        if ( list3 != null ) {\n            swagger.setProduces( new ArrayList<String>( list3 ) );\n        }\n        else {\n            swagger.setProduces( null );\n        }\n\n        return swagger;\n    }\n    //more...\n}\n```\n\n----------------------------------------\n\nTITLE: Generated MapStruct Implementation\nDESCRIPTION: This Java code shows the generated implementation of the `CarMapper` interface by MapStruct. It includes the `@Generated` annotation and an override of the `carToCarDto` method. The generated code performs the mapping of the `numberOfSeats` property from the source `Car` object to the `seatCount` property of the target `CarDTO` object.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox2.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2019-05-21T21:46:10+0800\",\n    comments = \"version: 1.2.0.Final, compiler: javac, environment: Java 1.8.0_111 (Oracle Corporation)\"\n)\npublic class CarMapperImpl implements CarMapper {\n\n    @Override\n    public CarDTO carToCarDto(Car car) {\n        if ( car == null ) {\n            return null;\n        }\n\n        CarDTO carDTO = new CarDTO();\n\n        carDTO.setSeatCount( car.getNumberOfSeats() );\n\n        return carDTO;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing inner and outer name (JSON)\nDESCRIPTION: This JSON configuration changes both the inner and outer element names of the XML array to 'animal' and 'aliens' respectively.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CommonFormEnumParser Interface in Java\nDESCRIPTION: This interface defines a common method for converting an input string value into an enum instance.  It facilitates custom enum parsing logic for form submissions. This interface is intended to be implemented by the enum classes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/handler-enum.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npublic interface CommonFormEnumParser<T extends Enum<T>> {\n\n    /**\n     * Realize the instantiation of the enumeration according to the input input\n     * @param input input character\n     * @return enumeration instance\n     */\n    T fromValue(String input);\n}\n```\n\n----------------------------------------\n\nTITLE: Declare Dubbo Service with REST protocol\nDESCRIPTION: This XML snippet configures a Dubbo service to be exposed using the REST protocol. It specifies the protocol name, port, threads, context path, server, and other configurations. The `<dubbo:service>` tag declares the service interface, implementation, protocol, and validation settings.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\t\n\t<dubbo:protocol name=\"rest\" port=\"9026\" threads=\"1000\"\n\t\tcontextpath=\"collect\" server=\"tomcat\" accepts=\"1000\"\n\t\textension=\"com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter\" />\n\n\t<dubbo:service document=\"dubboxswagger\"\n\t\t\t\t   interface=\"com.xx.xxx.collect.framework.swagger.DubboxSwaggerService\"\n\t\t\t\t   ref=\"dubboxAcceptHeaderApiListingResource\" protocol=\"rest\" validation=\"true\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Spring Boot Starter Dependency using Maven\nDESCRIPTION: This snippet demonstrates how to include the Knife4j Spring Boot starter dependency in a Maven project. This dependency includes the UI component and can be used with Spring Boot-based projects to enable Knife4j's UI and features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-03-08-knife4j-2.0.2-issue.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-spring-boot-starter</artifactId>\n  <version>2.0.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Java Model with Example Attribute\nDESCRIPTION: This Java code snippet demonstrates an incorrect usage of the `@ApiModelProperty` annotation where the `example` attribute is used on a `List` field (`fields`). This can cause the generated Swagger JSON to be invalid, leading to parsing errors in Knife4j. The `JSON.parse()` function fails to convert the malformed JSON, resulting in request errors.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/knife4j-exception.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@ApiModel(description = \"客户字段分组模型\",value = \"CrmFieldGroupResponse\")\npublic class CrmFieldGroupResponse {\n\n    @ApiModelProperty(value = \"客户字段分组ID\")\n    private int id;\n\n    @ApiModelProperty(value = \"客户字段分组名称\")\n    private String name;\n\n    @ApiModelProperty(value = \"客户字段数据\",example = \"{'id':'xxx'}\")\n    private List<CrmFieldResponse> fields;\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Multipart Form Data Request Body with Property Types - YAML\nDESCRIPTION: Defines a multipart/form-data request body schema with various property types in YAML. The schema includes properties like 'id' (string/uuid), 'address' (object), 'profileImage' (string/binary), 'children' (array of strings), and 'addresses' (array of objects), showcasing the default Content-Type for each type.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # default Content-Type for string/binary is `application/octet-stream`\n            type: string\n            format: binary\n          children:\n            # default Content-Type for arrays is based on the `inner` type (text/plain here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: '#/components/schemas/Address'\n```\n\n----------------------------------------\n\nTITLE: Correct OpenAPI Paths Example\nDESCRIPTION: This JSON snippet demonstrates a correctly structured `paths` section in an OpenAPI specification, specifically focusing on the `$ref` attribute within the `schema` for request and response parameters. The presence of `$ref` enables Knife4j to properly identify and display the parameters. Note the escaped newlines for proper JSON formatting.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"paths\": {\n    \"/xxxService/pageList\": {\n      \"post\": {\n        \"vendorExtensions\": {},\n        \"tags\": [\n          \"相关的接口\"\n        ],\n        \"summary\": \"分页查询列表\",\n        \"description\": \"分页查询列表\",\n        \"operationId\": \"listPage_3\",\n        \"schemes\": null,\n        \"consumes\": null,\n        \"produces\": null,\n        \"parameters\": [\n          {\n            \"vendorExtensions\": {},\n            \"in\": \"body\",\n            \"name\": \"body\",\n            \"description\": null,\n            \"required\": false,\n            \"access\": null,\n            \"pattern\": null,\n            \"readOnly\": null,\n            \"schema\": {\n              \"description\": null,\n              \"externalDocs\": null,\n              \"properties\": null,\n              \"example\": null,\n              \"title\": null,\n              \"reference\": \"#/definitions/查询请求DTO\",\n              \"vendorExtensions\": null,\n              \"$ref\": \"#/definitions/查询请求DTO\",\n              \"simpleRef\": \"查询请求DTO\",\n              \"originalRef\": \"查询请求DTO\",\n              \"refFormat\": \"INTERNAL\"\n            },\n            \"examples\": null\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"examples\": null,\n            \"headers\": null,\n            \"vendorExtensions\": {},\n            \"schema\": {\n              \"type\": \"ref\",\n              \"required\": false,\n              \"$ref\": \"#/definitions/基础返回对象公共的分页返回封装实例DTO\",\n              \"simpleRef\": \"基础返回对象公共的分页返回封装实例DTO\",\n              \"originalRef\": \"基础返回对象公共的分页返回封装实例DTO\",\n              \"refFormat\": \"INTERNAL\"\n            },\n            \"responseSchema\": {\n              \"description\": null,\n              \"externalDocs\": null,\n              \"properties\": null,\n              \"example\": null,\n              \"title\": null,\n              \"reference\": \"#/definitions/基础返回对象公共的分页返回封装实例DTO\",\n              \"vendorExtensions\": null,\n              \"$ref\": \"#/definitions/基础返回对象公共的分页返回封装实例DTO\",\n              \"simpleRef\": \"基础返回对象公共的分页返回封装实例DTO\",\n              \"originalRef\": \"基础返回对象公共的分页返回封装实例DTO\",\n              \"refFormat\": \"INTERNAL\"\n            }\n          }\n        },\n        \"security\": null,\n        \"externalDocs\": null,\n        \"deprecated\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Language in YML (repeated)\nDESCRIPTION: This snippet shows how to configure the default language for Knife4j in the application's YAML configuration file. The `language` property under `knife4j.setting` allows specifying either Chinese (zh-CN) or English (en-US) as the default language for the documentation UI. Repeated configuration example.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/i18n.md#_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    # Knife4j默认显示中文(zh-CN),如果开发者想直接显示英文(en-US)，在通过该配置进行设置即可\n    language: zh-CN\n```\n\n----------------------------------------\n\nTITLE: Incorrect OpenAPI Definitions Example (Null Values)\nDESCRIPTION: This JSON snippet demonstrates an incorrectly structured `definitions` section in an OpenAPI specification, specifically showing the presence of `null` values in various attributes. Knife4j may not work as expected with such definitions.  Note the escaped newlines for proper JSON formatting.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"definitions\": {\n      \"基础返回对象\": {\n      \"type\": \"object\",\n      \"required\": null,\n      \"discriminator\": null,\n\t  \"externalDocs\": null,\n      \"reference\": null,\n      \"title\": null,\n      \"vendorExtensions\": {},\n      \"xml\": null,\n      \"minimum\": null,\n      \"maximum\": null,\n      \"multipleOf\": null,\n      \"exclusiveMinimum\": null,\n      \"exclusiveMaximum\": null,\n      \"minLength\": null,\n      \"maxLength\": null,\n      \"pattern\": null,\n      \"format\": null,\n      \"name\": \"基础返回对象\",\n      \"allowEmptyValue\": null,\n      \"uniqueItems\": null,\n      \"description\": null,\n      \"example\": null,\n      \"additionalProperties\": null,\n      \"defaultValue\": null,\n      \"simple\": false,\n      \"enum\": null,\n      \"properties\": {\n        \"requestId\": {\n          \"name\": \"requestId\",\n          \"type\": \"string\",\n          \"format\": null,\n          \"example\": null,\n          \"xml\": null,\n          \"required\": false,\n          \"position\": null,\n          \"description\": null,\n          \"title\": null,\n          \"readOnly\": null,\n          \"allowEmptyValue\": null,\n          \"access\": null,\n          \"vendorExtensions\": {},\n          \"minLength\": null,\n          \"maxLength\": null,\n          \"pattern\": null,\n          \"default\": null,\n          \"enum\": null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j OpenAPI3 Jakarta (4.0+, Spring Boot 3.x)\nDESCRIPTION: This snippet shows the Maven dependency for including Knife4j with OpenAPI3 Jakarta support in a Spring Boot 3.x project, specifically for Knife4j version 4.0 and later.  It requires setting the version to the latest available in the Maven repository.  This dependency is necessary when using OpenAPI3 in a Spring Boot 3 application due to the Jakarta EE migration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/start-knife4j-version.mdx#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>\n    <version>{maven仓库最新版本}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implicit OAuth2 Security Scheme (JSON)\nDESCRIPTION: This JSON defines an Implicit OAuth2 security scheme, providing the authorization URL and scopes for the flow. The scopes define the permissions requested by the application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_97\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Override SwaggerUI index stream (C#)\nDESCRIPTION: This code overrides the default IndexStream of swaggerUI, allowing us to serve our own custom index.html file.  Here it is configured to load from the wwwroot folder.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\napp.UseSwaggerUI(c =>\n{\n        c.RoutePrefix = \"\"; // serve the UI at root\n        c.SwaggerEndpoint(\"/v1/api-docs\", \"V1 Docs\");//这个配置无效。\n        c.IndexStream = () => new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), \"wwwroot\")).GetFileInfo(\"index.html\").CreateReadStream();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ModelContext Set (Java)\nDESCRIPTION: This code retrieves `OperationModelsProviderPlugin` implementations based on the documentation type and calls their `apply` method on the given `RequestMappingContext`.  After applying the plugins, it builds the model contexts from the operation models builder. The loop allows different plugins to contribute to the `ModelContext` creation process.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic Set<ModelContext> modelContexts(RequestMappingContext context) {\n    DocumentationType documentationType = context.getDocumentationContext().getDocumentationType();\n    //构建该接口的ModelContext集合\n    for (OperationModelsProviderPlugin each : operationModelsProviders.getPluginsFor(documentationType)) {\n      each.apply(context);\n    }\n    return context.operationModelsBuilder().build();\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Mode Directory Structure\nDESCRIPTION: This shell script represents the directory structure for storing the `cloud.properties` file under the ROOT directory in Disk mode, to configure Cloud mode.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_5\n\nLANGUAGE: Shell Script\nCODE:\n```\n|-data\n|------ROOT  \n|--------cloud.properties\n\n```\n\n----------------------------------------\n\nTITLE: Configure Knife4j Cloud Mode Routes\nDESCRIPTION: This properties snippet configures Knife4j's Cloud mode. It enables aggregation and defines a route for the Dubbox service.  It specifies the name, URI, location of the OpenAPI definition, Swagger version, service path, and authentication settings for the Dubbox API. The `knife4j.enableAggregation=true` property enables the aggregation functionality, and `knife4j.cloud.enable=true` activates the Cloud mode.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.enableAggregation=true\nknife4j.cloud.enable=true\nknife4j.cloud.routes[0].name=xxx-collect\nknife4j.cloud.routes[0].uri=localhost:9026\nknife4j.cloud.routes[0].location=/collect/dubboxswagger/swagger\nknife4j.cloud.routes[0].swaggerVersion=2.0\nknife4j.cloud.routes[0].servicePath=/\nknife4j.cloud.routes[0].routeAuth.enable=false\nknife4j.cloud.routes[0].routeAuth.username=test3\nknife4j.cloud.routes[0].routeAuth.password=66666\nknife4j.cloud.routeAuth.enable=false\nknife4j.cloud.routeAuth.username=test\nknife4j.cloud.routeAuth.password=12313\n```\n\n----------------------------------------\n\nTITLE: Configuring UI for Debugging Methods - Java\nDESCRIPTION: This Java code snippet demonstrates how to configure the `UiConfiguration` bean in Knife4j to specify the supported HTTP methods for API debugging in the UI. By setting the `supportedSubmitMethods` to an empty array, the debugging tab is effectively hidden from the UI, displaying only the documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-06-28-knife4j-2.0.4-issue.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic UiConfiguration uiConfiguration(){\n    return UiConfigurationBuilder.builder()\n        .supportedSubmitMethods(new String[]{}) \n        .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Request body with string array in YAML\nDESCRIPTION: This YAML snippet defines a request body that accepts an array of strings, consistent with the prior JSON definition. 'required' is true in this sample.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Building DocumentationContext\nDESCRIPTION: This snippet shows how the DocumentationContext is built from a Docket object using the configure method of a DocumentationPlugin. The defaultContextBuilder method likely returns a DocumentationContextBuilder instance.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate DocumentationContext buildContext(DocumentationPlugin each) {\n    return each.configure(defaultContextBuilder(each));\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of @ApiOperation response Attribute in Java\nDESCRIPTION: This code snippet illustrates an incorrect usage of the `@ApiOperation` annotation's `response` attribute. When a method returns a generic type (e.g., `Rest<List<AlarmResponse>>`), specifying `response = AlarmResponse.class` in `@ApiOperation` can cause the UI to only display the properties of `AlarmResponse` and ignore the properties of the `Rest` wrapper. It's generally recommended to omit the `response` attribute and let springfox-swagger automatically infer the return type.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swagger-des-not-found.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@ApiOperation(value = \"查询所有\",response=AlarmReponse.class)\n@GetMapping(\"/queryAll\")\npublic Rest<List<AlarmResponse>> queryAll(){\n    //more..\n}\n```\n\n----------------------------------------\n\nTITLE: Request Body for Binary File Upload - YAML\nDESCRIPTION: Defines a request body content schema for a binary file upload using YAML. The 'content' is set to 'application/octet-stream', with a 'schema' of type 'string' and format 'binary', specifying that the request body contains a binary file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/octet-stream:\n      schema:\n        # a binary file of any type\n        type: string\n        format: binary\n```\n\n----------------------------------------\n\nTITLE: Enabling Eureka Client Java Annotation\nDESCRIPTION: This Java code snippet uses the `@EnableEurekaClient` annotation to enable the Eureka client functionality in a Spring Boot application. The `@SpringBootApplication` annotation indicates that it is the main entry point of the Spring Boot application, registering the service with the Eureka server.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springcloud-gateway.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@EnableEurekaClient\n@SpringBootApplication\npublic class ServiceUserApplication {\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload with Binary Encoding - YAML\nDESCRIPTION: Defines a schema for file upload using binary (octet-stream) encoding in YAML. The 'type' is set to 'string' and the 'format' to 'binary', indicating that the content should be transferred in binary format.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\n# content transferred in binary (octet-stream):\nschema:\n  type: string\n  format: binary\n```\n\n----------------------------------------\n\nTITLE: @ApiIgnore Annotation Definition - Java\nDESCRIPTION: This snippet displays the definition of the `@ApiIgnore` annotation. It specifies the target elements where the annotation can be applied, namely `METHOD`, `TYPE`, and `PARAMETER`.  It also defines a value attribute for providing a description of why the element is ignored. Requires `java.lang.annotation.*` imports.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox21.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE, ElementType.PARAMETER})\npublic @interface ApiIgnore {\n  /**\n   * A brief description of why this parameter/operation is ignored\n   * @return  the description of why it is ignored\n   */\n  String value() default \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies for Knife4j and Springdoc-openapi\nDESCRIPTION: This XML snippet shows the Maven dependencies required to use Knife4j with an upgraded version of springdoc-openapi. It includes exclusions for older springdoc-openapi dependencies provided by Knife4j, and explicit dependencies for the desired springdoc-openapi version and swagger dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/v4/knife4j-parameterobject-flat-param.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t\t\t<groupId>com.github.xiaoymin</groupId>\n\t\t\t<artifactId>knife4j-openapi3-spring-boot-starter</artifactId>\n\t\t\t<version>4.0.0</version>\n\t\t\t<!--排查低版本-->\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.springdoc</groupId>\n\t\t\t\t\t<artifactId>springdoc-openapi-common</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.springdoc</groupId>\n\t\t\t\t\t<artifactId>springdoc-openapi-webflux-core</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.springdoc</groupId>\n\t\t\t\t\t<artifactId>springdoc-openapi-webmvc-core</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>io.swagger.core.v3</groupId>\n\t\t\t\t\t<artifactId>swagger-models</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>io.swagger.core.v3</groupId>\n\t\t\t\t\t<artifactId>swagger-annotations</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.swagger.core.v3</groupId>\n\t\t\t<artifactId>swagger-models</artifactId>\n\t\t\t<version>2.2.7</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.swagger.core.v3</groupId>\n\t\t\t<artifactId>swagger-annotations</artifactId>\n\t\t\t<version>2.2.7</version>\n\t\t</dependency>\n\n\n\t\t<!--springdoc-openapi的Jar包引用-->\n\t\t<dependency>\n\t\t\t<groupId>org.springdoc</groupId>\n\t\t\t<artifactId>springdoc-openapi-common</artifactId>\n\t\t\t<version>1.6.14</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springdoc</groupId>\n\t\t\t<artifactId>springdoc-openapi-webflux-core</artifactId>\n\t\t\t<version>1.6.14</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springdoc</groupId>\n\t\t\t<artifactId>springdoc-openapi-webmvc-core</artifactId>\n\t\t\t<version>1.6.14</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springdoc</groupId>\n\t\t\t<artifactId>springdoc-openapi-ui</artifactId>\n\t\t\t<version>1.6.14</version>\n\t\t</dependency>\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger Model Names in Knife4j (YAML)\nDESCRIPTION: This YAML snippet configures Knife4j to enable Swagger Models and customize their names in the UI. This allows developers to provide more user-friendly names for the entity classes displayed in the documentation. Requires Knife4j and a compatible Swagger/OpenAPI implementation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-02-knife4j-2.0.7-issue.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    enableSwaggerModels: true\n    swaggerModelName: 实体类列表\n```\n\n----------------------------------------\n\nTITLE: Building the Default Context Builder\nDESCRIPTION: This snippet demonstrates building the default context builder, retrieving RequestHandlers and AlternateTypeRules, and then using the DocumentationPluginsManager to create and configure the DocumentationContextBuilder.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n/*** \n   * 构建文档builder\n   * @param plugin\n   * @return\n   */\n  private DocumentationContextBuilder defaultContextBuilder(DocumentationPlugin plugin) {\n    DocumentationType documentationType = plugin.getDocumentationType();\n    //获取RequestHandler\n    //疑问：handlerProviders在何时初始化\n    List<RequestHandler> requestHandlers = from(handlerProviders)\n        .transformAndConcat(handlers())\n        .toList();\n    List<AlternateTypeRule> rules = from(nullToEmptyList(typeConventions))\n          .transformAndConcat(toRules())\n          .toList();\n    return documentationPluginsManager\n        .createContextBuilder(documentationType, defaultConfiguration)\n        .rules(rules)\n        .requestHandlers(combiner().combine(requestHandlers));\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dependent Models - Java\nDESCRIPTION: This method determines the dependent models for a given `ModelContext`. It concatenates the resolved dependencies (filtered for ignorable and base types) with the dependencies from the `schemaPluginsManager`. The result is a set of `ResolvedType` objects representing the model's dependencies. It uses a dependencyProvider which in turn uses a default implementation of the interface.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic Set<ResolvedType> dependentModels(ModelContext modelContext) {\n    return concat(from(resolvedDependencies(modelContext))\n                  .filter(ignorableTypes(modelContext))\n                  .filter(not(baseTypes(modelContext))),\n                  schemaPluginsManager.dependencies(modelContext))\n        .toSet();\n}\n```\n\n----------------------------------------\n\nTITLE: Docket Configuration Method\nDESCRIPTION: This method configures the Docket by merging user-specified values into the DocumentationContextBuilder. It applies various settings such as API information, API selector, response messages, global operation parameters, ignorable types, rule builders, group name, path provider, security contexts, security schemes, and more. The method returns a fully configured DocumentationContext.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n/**\n   * Builds the Docket by merging/overlaying user specified values.\n   * It is not necessary to call this method when defined as a spring bean.\n   * NOTE: Calling this method more than once has no effect.\n   *\n   * @see DocumentationPluginsBootstrapper\n   */\n  public DocumentationContext configure(DocumentationContextBuilder builder) {\n    return builder\n        .apiInfo(apiInfo)\n        .selector(apiSelector)\n        .applyDefaultResponseMessages(applyDefaultResponseMessages)\n        .additionalResponseMessages(responseMessages)\n        .additionalOperationParameters(globalOperationParameters)\n        .additionalIgnorableTypes(ignorableParameterTypes)\n        .ruleBuilders(ruleBuilders)\n        .groupName(groupName)\n        .pathProvider(pathProvider)\n        .securityContexts(securityContexts)\n        .securitySchemes(securitySchemes)\n        .apiListingReferenceOrdering(apiListingReferenceOrdering)\n        .apiDescriptionOrdering(apiDescriptionOrdering)\n        .operationOrdering(operationOrdering)\n        .produces(produces)\n        .consumes(consumes)\n        .host(host)\n        .protocols(protocols)\n        .genericsNaming(genericsNamingStrategy)\n        .pathMapping(pathMapping)\n        .enableUrlTemplating(enableUrlTemplating)\n        .additionalModels(additionalModels)\n        .tags(tags)\n        .vendorExtentions(vendorExtensions)\n        .build();\n  }\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j Swagger2 (Pre 4.0)\nDESCRIPTION: This snippet shows the Maven dependency for including Knife4j with Swagger2 support in a Spring Boot project, specifically for versions before Knife4j 4.0.  It requires setting the version to a value less than 4.0.0. This dependency provides the necessary classes and configurations for integrating Knife4j's UI with a Swagger2-based API documentation setup.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/start-knife4j-version.mdx#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <version>{<4.0.0版本}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j with OpenAPI 2 (XML)\nDESCRIPTION: This XML snippet shows the Maven dependency for using Knife4j with OpenAPI 2. It depends on the springfox framework (version 2.10.5). Make sure to search for the latest 2.X version in the Maven Central Repository.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-02-knife4j-2.0.7-issue.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库搜索2.X最新版本号-->\n    <version>2.0.7</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Modifying XML element name (JSON)\nDESCRIPTION: This JSON snippet defines an array of strings named 'animals', where each string item is represented as an XML element named 'animal'. The 'xml' property allows customizing the XML representation of the array items.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Body Example in YAML\nDESCRIPTION: Defines examples for request bodies with different content types (application/json, application/xml, text/plain). It specifies the schema reference, summaries, and values for each example. The 'externalValue' property is used for external example files.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples: \n        foo:\n          summary: A foo example\n          value: {\"foo\": \"bar\"}\n        bar:\n          summary: A bar example\n          value: {\"bar\": \"baz\"}\n    'application/xml':\n      examples: \n        xmlExample:\n          summary: This is an example in XML\n          externalValue: 'http://example.org/examples/address-example.xml'\n    'text/plain':\n      examples:\n        textExample: \n          summary: This is a text example\n          externalValue: 'http://foo.bar/examples/address-example.txt'\n```\n\n----------------------------------------\n\nTITLE: InMemorySwaggerResourcesProvider implementation\nDESCRIPTION: This class implements the SwaggerResourcesProvider interface. It retrieves Documentation objects from the DocumentationCache and generates a list of SwaggerResource objects based on the configured swagger versions (v1 and v2). It depends on Environment and DocumentationCache to retrieve configuration and cached documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox16.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class InMemorySwaggerResourcesProvider implements SwaggerResourcesProvider {\n  private final String swagger1Url;\n  private final String swagger2Url;\n\n  @VisibleForTesting\n  boolean swagger1Available;\n  @VisibleForTesting\n  boolean swagger2Available;\n\n  private final DocumentationCache documentationCache;\n\n  @Autowired\n  public InMemorySwaggerResourcesProvider(\n      Environment environment,\n      DocumentationCache documentationCache) {\n    swagger1Url = environment.getProperty(\"springfox.documentation.swagger.v1.path\", \"/api-docs\");\n    swagger2Url = environment.getProperty(\"springfox.documentation.swagger.v2.path\", \"/v2/api-docs\");\n    swagger1Available = classByName(\"springfox.documentation.swagger1.web.Swagger1Controller\").isPresent();\n    swagger2Available = classByName(\"springfox.documentation.swagger2.web.Swagger2Controller\").isPresent();\n    this.documentationCache = documentationCache;\n  }\n\n  @Override\n  public List<SwaggerResource> get() {\n    List<SwaggerResource> resources = new ArrayList<SwaggerResource>();\n\n    for (Map.Entry<String, Documentation> entry : documentationCache.all().entrySet()) {\n      String swaggerGroup = entry.getKey();\n      if (swagger1Available) {\n        SwaggerResource swaggerResource = resource(swaggerGroup, swagger1Url);\n        swaggerResource.setSwaggerVersion(\"1.2\");\n        resources.add(swaggerResource);\n      }\n\n      if (swagger2Available) {\n        SwaggerResource swaggerResource = resource(swaggerGroup, swagger2Url);\n        swaggerResource.setSwaggerVersion(\"2.0\");\n        resources.add(swaggerResource);\n      }\n    }\n    Collections.sort(resources);\n    return resources;\n  }\n\n  private SwaggerResource resource(String swaggerGroup, String baseUrl) {\n    SwaggerResource swaggerResource = new SwaggerResource();\n    swaggerResource.setName(swaggerGroup);\n    swaggerResource.setUrl(swaggerLocation(baseUrl, swaggerGroup));\n    return swaggerResource;\n  }\n\n  private String swaggerLocation(String swaggerUrl, String swaggerGroup) {\n    String base = Optional.of(swaggerUrl).get();\n    if (Docket.DEFAULT_GROUP_NAME.equals(swaggerGroup)) {\n      return base;\n    }\n    return base + \"?group=\" + swaggerGroup;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting with @ApiSort in Java\nDESCRIPTION: This Java snippet demonstrates the usage of the `@ApiSort` annotation to sort API groups.  The value passed to the annotation represents the sort order. This requires the `knife4j-openapi2-spring-boot-starter` component, starting from Knife4j 4.0.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/tagSort.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Api(tags = \"2.0.2版本-20200226\")\n@ApiSort(286)\n@RestController\n@RequestMapping(\"/api/nxew202\")\npublic class Api202Controller {\n    \n    \n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Routes in Cloud Mode\nDESCRIPTION: This snippet demonstrates adding an `order` attribute to the routes configuration in Cloud mode, allowing control over the display order of services. The lower the number, the higher the service will appear in the documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.cloud.routes[0].name=大数据平台1\nknife4j.cloud.routes[0].order=1\nknife4j.cloud.routes[0].location=/v2/api-docs?group=3.默认接口\nknife4j.cloud.routes[0].uri=http://knife4j.xiaominfo.com\nknife4j.cloud.routes[1].name=甄选平台\nknife4j.cloud.routes[1].order=2\nknife4j.cloud.routes[1].location=/v2/api-docs?group=2.X版本\nknife4j.cloud.routes[1].uri=http://knife4j.xiaominfo.com\n```\n\n----------------------------------------\n\nTITLE: Using the MapStruct Mapper\nDESCRIPTION: This Java code demonstrates how to use the generated MapStruct mapper to convert a `Car` object to a `CarDTO` object. It retrieves an instance of the mapper using `Mappers.getMapper()` and calls the `carToCarDto()` method to perform the conversion.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox2.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n //given\nCar car = new Car( \"Morris\", \"4make\", 13 );\n//when\nCarDTO carDto = CarMapper.INSTANCE.carToCarDto( car );\n//then\nSystem.out.println(carDto.getSeatCount());\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of @ApiModel on Generic Class in Java\nDESCRIPTION: This Java code demonstrates the incorrect usage of the `@ApiModel` annotation on a generic class like `Rest<T>`. Applying `@ApiModel` to a generic class can lead to issues where field properties are not displayed correctly in the Swagger UI, as it can cause conflicts with how OpenAPI structures the class names.  It is recommended to avoid using `@ApiModel` on generic wrapper classes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swagger-des-not-found.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n/*\n* 泛型类中不能使用@ApiModel注解，应该去掉\n*/\n@ApiModel(\"结果类\")\npublic class Rest<T> {\n    //....\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Students with ArrayListMultimap Java\nDESCRIPTION: Demonstrates how to use `ArrayListMultimap` to group a list of `Student` objects by their `classRoom` attribute. This allows for easy retrieval of students belonging to a specific class. It takes a `List<Student>` as input and outputs a `Map<String, Collection<Student>>` where the key is the classRoom name and the value is a collection of Student objects belonging to that class.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox19.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nList<Student> list= Lists.newArrayList();\nlist.add(new Student(\"学生A\",12,\"班级1\"));\nlist.add(new Student(\"学生B\",13,\"班级2\"));\nlist.add(new Student(\"学生C\",12,\"班级1\"));\nlist.add(new Student(\"学生D\",15,\"班级3\"));\nlist.add(new Student(\"学生E\",12,\"班级1\"));\nlist.add(new Student(\"学生F\",13,\"班级2\"));\nlist.add(new Student(\"学生G\",11,\"班级1\"));\nlist.add(new Student(\"学生H\",15,\"班级2\"));\nlist.add(new Student(\"学生I\",11,\"班级3\"));\nlist.add(new Student(\"学生J\",12,\"班级1\"));\nlist.add(new Student(\"学生W\",16,\"班级1\"));\nlist.add(new Student(\"学生Q\",13,\"班级4\"));\n\n//针对班级分组\nArrayListMultimap<String,Student> arrayListMultimap=ArrayListMultimap.create();\nfor (Student student:list){\n    arrayListMultimap.put(student.getClassRoom(),student);\n}\nMap<String,Collection<Student>> map=arrayListMultimap.asMap();\nfor (String key:map.keySet()){\n    Collection<Student> students=map.get(key);\n    System.out.println(\"班级名称:\"+key+\",总共有学员:\"+students.size());\n    for (Student sd:students){\n        System.out.println(sd.toString());\n    }\n    System.out.println(\"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configure ResourceHandlers with WebMvcConfigurer in Spring Boot (classpath)\nDESCRIPTION: This code snippet demonstrates an alternative implementation of the `WebMvcConfigurer` interface in a Spring Boot application to add resource handlers for `doc.html` and `/webjars/**`.  This configuration allows Swagger-Bootstrap-UI's doc.html to be accessible. The `addResourceLocations` method uses the classpath prefix.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/springboot-404.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\npublic class SwaggerBootstrapUiDemoApplication  implements WebMvcConfigurer{\n\n\t@Override\n\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\tregistry.addResourceHandler(\"doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n\t\tregistry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Path Object in YAML\nDESCRIPTION: This YAML snippet defines a path object for an OpenAPI specification, equivalent to the JSON example.  It describes the `GET` operation for the `/pets` path, specifying the response schema and content type.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n```\n\n----------------------------------------\n\nTITLE: Adding Author to API Operation with @ApiOperationSupport\nDESCRIPTION: This Java code snippet shows how to add author information to an API operation using the `@ApiOperationSupport` annotation. The `author` attribute specifies the author's email. `@ApiOperation` provides a description for the API endpoint.  `@GetMapping` maps the method to a specific URL.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/author.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ApiOperationSupport(author = \"xiaoymin@foxmail.com\")\n@ApiOperation(value = \"写文档注释我是认真的\")\n@GetMapping(\"/getRealDoc\")\npublic Rest<RealDescription> getRealDoc(){\n    Rest<RealDescription> r=new Rest<>();\n    try {\n        TimeUnit.SECONDS.sleep(1);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    r.setData(new RealDescription());\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Disk mode directory structure\nDESCRIPTION: This snippet shows the directory structure required for the Disk mode in Knife4jAggregationDesktop. It includes the OpenAPI specification files (JSON or YAML) and the optional `disk.properties` file for custom naming.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-use.md#_snippet_1\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------userOpenApi.json\n|--------orderOpenApi.json\n|--------goodsOpenApi.yml\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j with Springdoc-Openapi (XML)\nDESCRIPTION: This XML snippet shows the Maven dependency for using Knife4j with the springdoc-openapi framework. Note that this version provides only a UI and lacks the enhanced features of Knife4j.  Ensure you search the Maven Central Repository for the latest 3.X version when using this dependency.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-02-knife4j-2.0.7-issue.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-springdoc-ui</artifactId>\n    <!--在引用时请在maven中央仓库搜索3.X最新版本号-->\n    <version>3.0.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Getting Response Header\nDESCRIPTION: This code demonstrates how to retrieve a response header (Content-Type) from the `ke.response.headers` object and log it to the console. The header names are automatically converted to lowercase.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/afterScript.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar contentType=ke.response.headers[\"content-type\"];\nconsole.log(\"响应ContentType:\"+contentType)\n```\n\n----------------------------------------\n\nTITLE: springdoc-openapi Sorting Configuration (Incorrect)\nDESCRIPTION: This snippet shows the incorrect configuration for springdoc-openapi when using Knife4j for API sorting. Setting `operations-sorter` to `alpha` will override Knife4j's order-based sorting.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/apiSort.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nspringdoc:\n  swagger-ui:\n    path: /swagger-ui.html\n    tags-sorter: alpha\n    # 该参数是swagger默认的排序规则，如果设置为alpha，那么Knife4j提供的按照order排序的增强规则不生效\n    operations-sorter: alpha\n```\n\n----------------------------------------\n\nTITLE: Service Doc Application Java\nDESCRIPTION: This snippet shows the main application class for the service-doc application. It enables discovery client and Eureka client using annotations and marks the class as a Spring Boot application. The `@EnableDiscoveryClient` is redundant with `@EnableEurekaClient` here.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@EnableDiscoveryClient\n@EnableEurekaClient\n@SpringBootApplication\npublic class ServiceDocApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(ServiceDocApplication.class, args);\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Project using JSON\nDESCRIPTION: This JSON snippet shows the required format for adding a new project to the Knife4j-Admin platform. It includes the project's name, code (which must be unique), description, and a list of groups representing Swagger documentation endpoints. The groups array contains the service name, URI, header (must be globally unique), URL to the Swagger documentation, and the Swagger version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2019-05-20-knife4j-admin-1.0-issue.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"大数据测试平台\",\n    \"code\":\"test1\",\n    \"description\":\"我是描述信息\",\n    \"groups\": [\n        {\n            \"name\": \"用户模块\",\n            \"uri\":\"http://knife4j.xiaominfo.com\",\n            \"header\":\"server1\",\n            \"url\": \"/v2/api-docs?group=2.X版本\",\n            \"swaggerVersion\": \"2.0\"\n        },{\n            \"name\": \"订单模块\",\n            \"uri\":\"http://swagger-bootstrap-ui.xiaominfo.com\",\n            \"header\":\"server2\",\n            \"url\": \"/v2/api-docs?group=1.8.X版本接口\",\n            \"swaggerVersion\": \"2.0\"\n        }\n        //more..\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Implementation with MultipartFile - Java\nDESCRIPTION: This code snippet demonstrates how to implement file upload functionality using Swagger annotations and Spring's MultipartFile in a Java-based API. It uses `@ApiOperation` to define the API operation, `@ApiImplicitParams` to specify the request parameters (including the file and title), and `@RequestMapping` to map the request to the appropriate handler method. The method receives an array of `MultipartFile` objects and a title parameter, processes the uploaded files, and returns a RestMessage.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2017-09-06-swagger-bootstrap-ui-1.6-issue.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n @ApiOperation(value = \"文件素材上传接口\")\n @ApiImplicitParams({@ApiImplicitParam(name = \"file\", value = \"文件流对象,接收数组格式\", required = true,dataType = \"MultipartFile\"),\n            @ApiImplicitParam(name = \"title\", value = \"title\", required = true)}\n    )\n @RequestMapping(value=\"/uploadMaterial\",method = RequestMethod.POST)\n @ResponseBody\n public RestMessage uploadMaterial(@RequestParam(value=\"file\") MultipartFile[] files,@RequestParam(value = \"title\") String title, HttpServletRequest request) throws IOException {\n        //int mul=1*1024*1024;\n        String realPath=request.getSession().getServletContext().getRealPath(\"/upload\");\n  //......\n}\n```\n\n----------------------------------------\n\nTITLE: Java Plugin Usage Example\nDESCRIPTION: This code demonstrates how to retrieve and use plugins from a PluginRegistry. It iterates through a list of Plugin instances, checks if a plugin supports a given delimiter (in this case, of type S), and then executes the plugin's doSomeThing() method.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nList<Plugin<S>> plugins=plugin.getPlugins();\nS delimiter;\nfor(Plugin<S> p:plugins){\n    if(p.supports(delimiter)){\n        p.doSomeThing();//\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Eureka Server Dependency Configuration XML\nDESCRIPTION: This snippet shows the dependency required to set up a Eureka server.  It includes the spring-cloud-starter-netflix-eureka-server dependency in the pom.xml file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Docket Configuration with OpenApiExtensionResolver - Java\nDESCRIPTION: This Java code snippet shows how to configure a Docket object with the `OpenApiExtensionResolver` in Knife4j. This is required when using `knife4j-openapi2-spring-boot-starter` and allows customizing OpenAPI extensions. It involves injecting `OpenApiExtensionResolver` and using it to build extensions for the Docket.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/requestCache.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildExtensions(groupName));\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example\nDESCRIPTION: This snippet demonstrates the JSON format used to represent an array within an OpenAPI document. The example shows a field named \"field\" containing an array of numbers.  All field names in the specification are case-sensitive.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"field\": [ 1, 2, 3 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Path JSON Extension\nDESCRIPTION: This JSON snippet demonstrates how to add a vendor extension to a specific path in the Swagger definition. The `x-order` property is added to the `post` operation within a path, allowing for custom ordering of API endpoints. The extension adheres to the 'x-' prefix rule for vendor extensions.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"/2/api/new187/postRequest\": {\n    \"post\": {\n        \"tags\": [\n            \"api-1871-controller\"\n        ],\n        \"summary\": \"版本2-post请求参数Hidden属性是否生效\",\n        \"operationId\": \"postRequestUsingPOST_1\",\n        \"consumes\": [\n            \"application/json\"\n        ],\n        \"produces\": [\n            \"*/*\"\n        ],\n        \"parameters\": [\n            {\n                \"in\": \"body\",\n                \"name\": \"model187\",\n                \"description\": \"model187\",\n                \"required\": true,\n                \"schema\": {\n                    \"originalRef\": \"Model187\",\n                    \"$ref\": \"#/definitions/Model187\"\n                }\n            }\n        ],\n        \"responses\": {\n            \"200\": {\n                \"description\": \"OK\",\n                \"schema\": {\n                    \"originalRef\": \"Rest«Model187»\",\n                    \"$ref\": \"#/definitions/Rest«Model187»\"\n                }\n            },\n            \"201\": {\n                \"description\": \"Created\"\n            },\n            \"401\": {\n                \"description\": \"Unauthorized\"\n            },\n            \"403\": {\n                \"description\": \"Forbidden\"\n            },\n            \"404\": {\n                \"description\": \"Not Found\"\n            }\n        },\n        \"security\": [\n            {\n                \"BearerToken\": [\n                    \"global\"\n                ]\n            },\n            {\n                \"BearerToken1\": [\n                    \"global\"\n                ]\n            }\n        ],\n        \"deprecated\": false,\n        \"x-order\":\"1\"\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UI with UiConfigurationBuilder in Java\nDESCRIPTION: This Java code snippet demonstrates how to configure the UI using UiConfigurationBuilder to customize supported submit methods. In this example, the `supportedSubmitMethods` is set to an empty array, effectively disabling the debug tab in the UI.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-09-14-knife4j-2.0.5-issue.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic UiConfiguration uiConfiguration(){\n    return UiConfigurationBuilder.builder()\n        .supportedSubmitMethods(new String[]{})\n        .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Callback Example - YAML\nDESCRIPTION: This YAML code defines a transaction callback object where the server is fixed, but the query string parameters (transactionId and email) are populated from the request body. It uses a POST request with a payload schema and a response definition.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\ntransactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content: \n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n```\n\n----------------------------------------\n\nTITLE: Customizing Eureka Service Names\nDESCRIPTION: This snippet demonstrates how to customize the display names of services in Eureka mode using the `name` attribute in `eureka.properties`. It allows users to provide more descriptive names for services in the Knife4j documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.eureka.serviceUrl=http://localhost:10000/eureka/\nknife4j.eureka.routes[0].name=自定义服务1\nknife4j.eureka.routes[0].serviceName=service-user\nknife4j.eureka.routes[0].location=/aub/v2/api-docs?group=default\nknife4j.eureka.routes[0].order=1\nknife4j.eureka.routes[1].name=自定义服务2\nknife4j.eureka.routes[1].serviceName=service-order\nknife4j.eureka.routes[1].location=/v2/api-docs?group=default\nknife4j.eureka.routes[1].order=2\n```\n\n----------------------------------------\n\nTITLE: Start Nginx Service (Shell)\nDESCRIPTION: This command starts the Nginx service. It assumes that Nginx has been installed as a system service. This allows the webserver to start listening for incoming requests.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/knife4j-admin-deploy.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n[root@izbt kadmin]# service nginx start\n```\n\n----------------------------------------\n\nTITLE: Customize Swagger Model Name in application.yml\nDESCRIPTION: This YAML snippet demonstrates how to customize the Swagger Model name in the application.yml file. It requires enabling swagger-models and setting the swagger-model-name property.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/swaggermodels.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    enable-swagger-models: true\n    swagger-model-name: 我是自定义的Model名称\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for swagger-bootstrap-ui 1.9.6\nDESCRIPTION: This XML snippet shows the Maven dependency configuration needed to include swagger-bootstrap-ui version 1.9.6 in a project.  It specifies the groupId, artifactId, and version. Add this to your pom.xml to use swagger-bootstrap-ui.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2019-08-28-swagger-bootstrap-ui-1.9.6-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.9.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Swagger2Controller Implementation Java\nDESCRIPTION: This snippet shows the implementation of the Swagger2Controller, which handles requests to the /v2/api-docs endpoint. It retrieves Swagger documentation based on the provided group name, transforms it into a Swagger object, and returns it as a JSON response. The controller depends on DocumentationCache, ServiceModelToSwagger2Mapper, and JsonSerializer.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox17.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Controller\n@ApiIgnore\npublic class Swagger2Controller {\n\n  public static final String DEFAULT_URL = \"/v2/api-docs\";\n  private static final Logger LOGGER = LoggerFactory.getLogger(Swagger2Controller.class);\n  private static final String HAL_MEDIA_TYPE = \"application/hal+json\";\n\n  private final String hostNameOverride;\n  private final DocumentationCache documentationCache;\n  private final ServiceModelToSwagger2Mapper mapper;\n  private final JsonSerializer jsonSerializer;\n\n  @Autowired\n  public Swagger2Controller(\n      Environment environment,\n      DocumentationCache documentationCache,\n      ServiceModelToSwagger2Mapper mapper,\n      JsonSerializer jsonSerializer) {\n\n    this.hostNameOverride =\n        environment.getProperty(\n            \"springfox.documentation.swagger.v2.host\",\n            \"DEFAULT\");\n    this.documentationCache = documentationCache;\n    this.mapper = mapper;\n    this.jsonSerializer = jsonSerializer;\n  }\n\n  @RequestMapping(\n      value = DEFAULT_URL,\n      method = RequestMethod.GET,\n      produces = { APPLICATION_JSON_VALUE, HAL_MEDIA_TYPE })\n  @PropertySourcedMapping(\n      value = \"${springfox.documentation.swagger.v2.path}\",\n      propertyKey = \"springfox.documentation.swagger.v2.path\")\n  @ResponseBody\n  public ResponseEntity<Json> getDocumentation(\n      @RequestParam(value = \"group\", required = false) String swaggerGroup,\n      HttpServletRequest servletRequest) {\n\n    String groupName = Optional.fromNullable(swaggerGroup).or(Docket.DEFAULT_GROUP_NAME);\n    Documentation documentation = documentationCache.documentationByGroup(groupName);\n    if (documentation == null) {\n      LOGGER.warn(\"Unable to find specification for group {}\", groupName);\n      return new ResponseEntity<Json>(HttpStatus.NOT_FOUND);\n    }\n    Swagger swagger = mapper.mapDocumentation(documentation);\n    UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());\n    swagger.basePath(Strings.isNullOrEmpty(uriComponents.getPath()) ? \"/\" : uriComponents.getPath());\n    if (isNullOrEmpty(swagger.getHost())) {\n      swagger.host(hostName(uriComponents));\n    }\n    return new ResponseEntity<Json>(jsonSerializer.toJson(swagger), HttpStatus.OK);\n  }\n\n  private String hostName(UriComponents uriComponents) {\n    if (\"DEFAULT\".equals(hostNameOverride)) {\n      String host = uriComponents.getHost();\n      int port = uriComponents.getPort();\n      if (port > -1) {\n        return String.format(\"%s:%d\", host, port);\n      }\n      return host;\n    }\n    return hostNameOverride;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedded Resources (csproj)\nDESCRIPTION: This code snippet configures the .csproj file to include specific files as embedded resources within the compiled assembly. This allows these files to be accessed at runtime as streams, which is often used for serving static content like HTML, CSS, and JavaScript files.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n\t<EmbeddedResource Include=\"knife4j/**/*\" />\n\t<EmbeddedResource Include=\"favicon.ico\" />\n\t<EmbeddedResource Include=\"index.html\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: ModelContext Initialization - Java\nDESCRIPTION: This static method creates a `ModelContext` for an input parameter. It takes various parameters, including the group name, type, documentation type, alternate type provider, generic naming strategy, and ignorable types. The method then constructs and returns a new `ModelContext` object using these parameters. This is a convenience method to encapsulate the ModelContext creation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n/**\n   * Convenience method to provide an new context for an input parameter\n   *\n   * @param group                 - group name of the docket\n   * @param type                  - type\n   * @param documentationType     - for documentation type\n   * @param alternateTypeProvider - alternate type provider\n   * @param genericNamingStrategy - how generic types should be named\n   * @param ignorableTypes        - types that can be ignored\n   * @return new context\n   */\npublic static ModelContext inputParam(\n    String group,\n    Type type,\n    DocumentationType documentationType,\n    AlternateTypeProvider alternateTypeProvider,\n    GenericTypeNamingStrategy genericNamingStrategy,\n    ImmutableSet<Class> ignorableTypes) {\n\n    return new ModelContext(\n        group,\n        type,\n        false,\n        documentationType,\n        alternateTypeProvider,\n        genericNamingStrategy,\n        ignorableTypes);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j OpenAPI3 Starter Dependency\nDESCRIPTION: This snippet shows the Maven dependency for the Knife4j OpenAPI3 Spring Boot Starter. It includes the groupId, artifactId, and version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/v4/knife4j-no-openapi.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>\n  <version>4.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Disk Mode Directory Structure\nDESCRIPTION: This shell script represents the directory structure for storing OpenAPI documentation in Disk mode.  Each sub-directory under 'data' represents a separate project, accessible via a specific URL.  ROOT is a special directory representing the root context.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\n|-data\n|------ROOT  \n|------project1\n|------project2\n|------project3\n|-----—project4\n|-----—more...\n\n```\n\n----------------------------------------\n\nTITLE: OperationDeprecatedReader Implementation\nDESCRIPTION: This snippet shows the implementation of `OperationDeprecatedReader`, a class responsible for determining if an API operation is deprecated. It implements the `OperationBuilderPlugin` interface and uses the `@Component` annotation to be registered as a Spring bean. The `apply` method checks for the `@Deprecated` annotation on an operation and sets the `deprecated` flag in the operation builder.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox6.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage springfox.documentation.spring.web.readers.operation;\n\nimport com.google.common.base.Optional;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spi.service.OperationBuilderPlugin;\nimport springfox.documentation.spi.service.contexts.OperationContext;\n\n@Component\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class OperationDeprecatedReader implements OperationBuilderPlugin {\n  @Override\n  public void apply(OperationContext context) {\n    Optional<Deprecated> annotation = context.findAnnotation(Deprecated.class);\n    context.operationBuilder().deprecated(String.valueOf(annotation.isPresent()));\n  }\n\n  @Override\n  public boolean supports(DocumentationType delimiter) {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Mirror\nDESCRIPTION: This JSON configuration snippet shows how to configure Docker to use mirror registries, which can improve download speeds.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-docker.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\",\n    \"http://hub-mirror.c.163.com\",\n    \"https://3laho3y3.mirror.aliyuncs.com\",\n    \"https://mirror.ccs.tencentyun.com\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Path Item Object in YAML\nDESCRIPTION: This YAML snippet is equivalent to the JSON example for Path Item Object definition. It defines a GET operation, its responses (success and default error), and parameters (id) within an OpenAPI specification.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nget:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    items:\n      type: string  \n  style: simple\n```\n\n----------------------------------------\n\nTITLE: UptModel Entity Class - Java\nDESCRIPTION: This Java code defines the `UptModel` entity class, which includes fields such as `id`, `name`, `email`, and `orderDate`.  The `@ApiModelProperty` annotations provide metadata for the Swagger/OpenAPI documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/filterRequestParameter.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class UptModel {\n\n    @ApiModelProperty(value = \"主键id\")\n    private String id;\n\n    @ApiModelProperty(value = \"姓名\")\n    private String name;\n\n    @ApiModelProperty(value = \"邮箱\")\n    private String email;\n\n    @ApiModelProperty(value = \"订单信息\")\n    private OrderDate orderDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapped array configuration (JSON)\nDESCRIPTION: This JSON configuration demonstrates the use of the 'wrapped' attribute. When set to true without an explicit name, both the outer and inner elements use the array name ('animals').\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Eureka mode directory structure\nDESCRIPTION: This snippet shows the directory structure required for the Eureka mode, including the eureka.properties file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-use.md#_snippet_5\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------eureka.properties\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for swagger-bootstrap-ui\nDESCRIPTION: This XML snippet shows the Maven dependency required to include swagger-bootstrap-ui version 1.8.4 in a project.  It specifies the groupId, artifactId, and version for the dependency.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-09-25-swagger-bootstrap-ui-1.8.4-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.8.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j 3.x (OpenAPI 3.0)\nDESCRIPTION: This XML snippet showcases the Maven dependency for incorporating Knife4j version 3.x, intended for projects that utilize OpenAPI 3.0. It specifies the groupId, artifactId, and version, highlighting the 3.x version series for OpenAPI 3 support.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-10-26-knife4j-2.0.6-issue.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <!--如果想使用springfox3.0及OpenAPI3请用3.x版本-->\n    <version>3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Swagger Bootstrap UI\nDESCRIPTION: This XML snippet shows the Maven dependency required to include Swagger Bootstrap UI in your project. It specifies the groupId, artifactId, and version of the library.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-12-17-swagger-bootstrap-ui-1.8.8-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.8.8</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Micro Spring Boot Starter Dependency (Maven)\nDESCRIPTION: This XML snippet shows how to add the `knife4j-micro-spring-boot-starter` dependency to a Maven project. This starter is tailored for microservices architecture and does not include UI components.  It is generally used when the UI is provided at the API gateway level.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2019-12-16-knife4j-2.0.0-issue.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-micro-spring-boot-starter</artifactId>\n    <version>2.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: GlobalRestAdvice for WebDataBinder Initialization (Java)\nDESCRIPTION: This `@RestControllerAdvice` class uses `@InitBinder` to register a custom editor (`GenericEnumPropertySupport`) for the `CourseType` enum with the `WebDataBinder`. This allows Spring to properly bind form parameters to enum values using the custom parsing logic defined in `CommonFormEnumParser`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/handler-enum.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n@RestControllerAdvice\npublic class GlobalRestAdvice {\n\n    @InitBinder\n    public void initBinder(WebDataBinder binder) {\n        //这里可以做成scan扫描包的方式，扫描所有枚举类，然后分批注入，或者其他的方式也行，看自己项目的规则\n        binder.registerCustomEditor(CourseType.class,new GenericEnumPropertySupport<>(CourseType.class));\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Servlet Mapping - XML\nDESCRIPTION: Configures servlet mappings in `web.xml` for Swagger endpoints to prevent 404 errors. It maps URLs for Swagger's API documentation, resources, configuration, and the Knife4j-enhanced API documentation.  Mappings 1, 2, and 3 are mandatory; mapping 5 is required for enhanced features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springmvc.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 配置knife4j的url请求路径-->\n\n<!--1.该接口是springfox提供的Swagger实例接口-->\n<servlet-mapping>\n    <servlet-name>knife4jDemoMvc</servlet-name>\n    <url-pattern>/v2/api-docs</url-pattern>\n</servlet-mapping>\n<!--2.该接口是springfox提供的Swagger分组接口-->\n<servlet-mapping>\n    <servlet-name>knife4jDemoMvc</servlet-name>\n    <url-pattern>/swagger-resources</url-pattern>\n</servlet-mapping>\n<!--3.该接口是springfox提供的Swagger配置接口-->\n<servlet-mapping>\n    <servlet-name>knife4jDemoMvc</servlet-name>\n    <url-pattern>/swagger-resources/configuration/ui</url-pattern>\n</servlet-mapping>\n<!--4.该接口是springfox提供的Swagger权限接口(在knife4j中未使用)-->\n<servlet-mapping>\n    <servlet-name>knife4jDemoMvc</servlet-name>\n    <url-pattern>/swagger-resources/configuration/security</url-pattern>\n</servlet-mapping>\n\n<!--5.该接口是knife4j提供的Swagger增强接口-->\n<servlet-mapping>\n    <servlet-name>knife4jDemoMvc</servlet-name>\n    <url-pattern>/v2/api-docs-ext</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: ApiListingBuilderPlugin Interface in Springfox\nDESCRIPTION: This interface defines the `apply` method, which is used to override the ApiListing using the ApiListingBuilder.  It takes an ApiListingContext as a parameter, allowing modification of the API listing attributes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox5.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface ApiListingBuilderPlugin extends Plugin<DocumentationType> {\n  /**\n   * Implement this method to override the ApiListing using the ApiListingBuilder\n   * \n   * @param apiListingContext - context that can be used to override the model property attributes\n   * @see springfox.documentation.service.ApiListing\n   * @see springfox.documentation.builders.ApiListingBuilder\n   */\n  void apply(ApiListingContext apiListingContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Security Requirement Object (Non-OAuth2, JSON)\nDESCRIPTION: This JSON defines a security requirement object for a non-OAuth2 scheme, 'api_key', indicating that no specific scopes are required.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_key\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Config Proxy Setting (JavaScript)\nDESCRIPTION: This configures a proxy in vue.config.js to forward requests to the backend server, which is required for development and testing.  It forwards all requests to `http://localhost:5000/`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nproxy: {\n  \"/\": {\n    target: 'http://localhost:5000/',\n    ws: true,\n    changeOrigin: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure DispatcherServlet URL Patterns (XML)\nDESCRIPTION: This XML snippet shows the required URL patterns for DispatcherServlet in web.xml to ensure that Knife4j's API documentation is accessible.  It maps various URLs, including /v2/api-docs, /swagger-resources, and /v2/api-docs-ext, to the DispatcherServlet. This configuration is necessary when DispatcherServlet is used to handle requests.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/springmvc-404.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 配置swagger-bootstrap-ui的url请求路径-->\n<servlet-mapping>\n    <servlet-name>swaggerDemoMvc</servlet-name>\n    <url-pattern>/v2/api-docs</url-pattern>\n</servlet-mapping>\n<servlet-mapping>\n    <servlet-name>swaggerDemoMvc</servlet-name>\n    <url-pattern>/swagger-resources</url-pattern>\n</servlet-mapping>\n<servlet-mapping>\n    <servlet-name>swaggerDemoMvc</servlet-name>\n    <url-pattern>/swagger-resources/configuration/ui</url-pattern>\n</servlet-mapping>\n<servlet-mapping>\n    <servlet-name>swaggerDemoMvc</servlet-name>\n    <url-pattern>/swagger-resources/configuration/security</url-pattern>\n</servlet-mapping>\n<!--此接口地址为SwaggerBootstrapUi提供的增强地址,如果不使用增强功能,可排除此配置-->\n<servlet-mapping>\n    <servlet-name>swaggerDemoMvc</servlet-name>\n    <url-pattern>/v2/api-docs-ext</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Path Matching Example in Bash\nDESCRIPTION: This Bash snippet illustrates path matching priority in OpenAPI. If both `/pets/{petId}` and `/pets/mine` are defined, `/pets/mine` will be matched first.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n/pets/{petId}\n/pets/mine\n```\n\n----------------------------------------\n\nTITLE: Verify Swagger Resources Response JSON\nDESCRIPTION: This snippet represents the correct JSON format for the `/swagger-resources` endpoint, which Knife4j uses to discover available API documentation. It is crucial to ensure that the response is a plain array of objects without any additional wrapper or modifications. Any modifications to this response will lead to errors. Each object contains the name, URL, Swagger version, and location of a specific API documentation group.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/knife4j-exception.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"name\": \"2.X版本\",\n        \"url\": \"/v2/api-docs?group=2.X版本\",\n        \"swaggerVersion\": \"2.0\",\n        \"location\": \"/v2/api-docs?group=2.X版本\"\n    },\n    {\n        \"name\": \"分组接口\",\n        \"url\": \"/v2/api-docs?group=分组接口\",\n        \"swaggerVersion\": \"2.0\",\n        \"location\": \"/v2/api-docs?group=分组接口\"\n    },\n    {\n        \"name\": \"默认接口\",\n        \"url\": \"/v2/api-docs?group=默认接口\",\n        \"swaggerVersion\": \"2.0\",\n        \"location\": \"/v2/api-docs?group=默认接口\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Add knife4j-aggregation-spring-boot-starter dependency - Maven\nDESCRIPTION: This XML snippet shows how to add the `knife4j-aggregation-spring-boot-starter` dependency to a Spring Boot project using Maven. This starter enables the aggregation of OpenAPI documentation from different services. The parent pom is referenced for version management.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-eureka.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.xiaominfo.swagger</groupId>\n        <artifactId>knife4j-aggregation-eureka-demo</artifactId>\n        <version>1.0</version>\n        <relativePath>../pom.xml</relativePath> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.xiaominfo.swagger</groupId>\n    <artifactId>service-doc</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>service-doc</name>\n    <description>Eureka聚合</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.github.xiaoymin</groupId>\n            <artifactId>knife4j-aggregation-spring-boot-starter</artifactId>\n            <version>2.0.8</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n----------------------------------------\n\nTITLE: SwaggerUI RespondWithIndexHtml Method (C#)\nDESCRIPTION: This method responds with the `index.html` content, replacing placeholders with values from `GetIndexArguments`. It sets the status code and content type, reads the HTML from a stream, and replaces placeholders using a StringBuilder. `response` is the HttpResponse object to write to.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nprivate async Task RespondWithIndexHtml(HttpResponse response)\n{\n    response.StatusCode = 200;\n    response.ContentType = \"text/html;charset=utf-8\";\n\n    using (var stream = _options.IndexStream())\n    {\n        // Inject arguments before writing to response\n        var htmlBuilder = new StringBuilder(new StreamReader(stream).ReadToEnd());\n        foreach (var entry in GetIndexArguments())\n        {\n            htmlBuilder.Replace(entry.Key, entry.Value);\n        }\n\n        await response.WriteAsync(htmlBuilder.ToString(), Encoding.UTF8);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Knife4jInsight\nDESCRIPTION: This Docker Compose configuration sets up a Knife4jInsight service using a specified image. It configures port mapping, volume mounts for data persistence, and environment variables to specify the data source as a local disk. The volume mapping allows the service to read and store data on the host machine.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-introduction.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n# 通过docker-compose可以快速部署knife4j服务\nversion: \"2.0\"\nservices:\n  knife4j:\n    container_name: knife4j-desktop\n    restart: always\n    image: \"xiaoymin/knife4j:v2.0\"\n    network_mode: \"bridge\"\n    # 本地磁盘目录映射\n    volumes:\n      - D:\\Temp\\data:/knife4j/data\n    ports:\n      - \"10000:10000\"\n    # 指定配置属性模式为disk本地磁盘\n    environment:\n      - knife4j.source=disk\n      - knife4j.disk.dir=/knife4j/data\n```\n\n----------------------------------------\n\nTITLE: New Knife4j Configuration Properties (YAML)\nDESCRIPTION: This YAML snippet demonstrates the new configuration properties for Knife4j 4.0. The property names are converted to lowercase with hyphens. This example configures custom code, disables the footer custom content, and defines the footer custom content.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.0.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    custom-code: 500\n    enable-footer-custom: false\n    footer-custom-content: 我是自定义的Footer\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for swagger-bootstrap-ui - XML\nDESCRIPTION: This XML snippet provides the Maven dependency information required to include the swagger-bootstrap-ui library in a project.  It specifies the groupId, artifactId, and version of the library, enabling Maven to resolve and manage the dependency. Version 1.6 is specified here.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2017-09-06-swagger-bootstrap-ui-1.6-issue.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Vue Config Output Dir (JavaScript)\nDESCRIPTION: This code snippet configures the output directory and index file for a Vue.js project during the build process. assetsDir sets the output directory to \"knife4j\", and indexPath sets the name of the output HTML file to \"index.html\".\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nassetsDir: \"knife4j\",\nindexPath: \"index.html\"\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Scheme (JSON)\nDESCRIPTION: This JSON snippet defines a basic authentication security scheme for use in an OpenAPI specification. It specifies the type as 'http' and the scheme as 'basic'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_91\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GetDTO Data Transfer Object\nDESCRIPTION: This code snippet defines a simple data transfer object (DTO) called GetDTO, annotated with Lombok's @Data annotation for automatic getter and setter generation. It includes fields with descriptions and examples using the @Schema annotation for OpenAPI documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/v4/knife4j-parameterobject-flat-param.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n@Data\n@Schema(description = \"请求 Param 对象\")\nclass GetDTO {\n\n    @Schema(description = \"param 必填参数\", required = true, example = \"param 必填参数\")\n    private String paramRequired;\n\n    @Schema(description = \"param 非必填参数\", example = \"param 非必填参数\")\n    private String paramNoRequired;\n}\n```\n\n----------------------------------------\n\nTITLE: index.html title placeholder (HTML)\nDESCRIPTION: This is an HTML snippet showing the placeholder for the document title within the index.html file.  The placeholder %(DocumentTitle) will be replaced with the actual title during the response generation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<title>%(DocumentTitle)</title>\n```\n\n----------------------------------------\n\nTITLE: Custom Operation Ids (C#)\nDESCRIPTION: This code configures custom operation IDs for Swagger. It uses the method name as the operation ID. If a method info cannot be determined, it returns null.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\nservices.AddSwaggerGen(c =>\n{\n    //xx\n     c.CustomOperationIds(apiDesc =>\n    {\n        return apiDesc.TryGetMethodInfo(out MethodInfo methodInfo) ? methodInfo.Name : null;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Vendor Extensions\nDESCRIPTION: This Java code snippet details how Springfox maps vendor extensions. It iterates through a list of VendorExtension objects and filters them based on their type (ListVendorExtension, ObjectVendorExtension, StringVendorExtension). It then transforms and adds these extensions to a map, which is used to populate the vendorExtensions field in the Swagger model. The mapping logic handles different types of vendor extensions, supporting list, object, and string representations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Mapper\npublic class VendorExtensionsMapper {\n\n  public Map<String, Object> mapExtensions(List<VendorExtension> from) {\n    Map<String, Object> extensions = newTreeMap();\n    Iterable<ListVendorExtension> listExtensions = from(from)\n        .filter(ListVendorExtension.class);\n    for (ListVendorExtension each : listExtensions) {\n      extensions.put(each.getName(), each.getValue());\n    }\n    Iterable<Map<String, Object>> objectExtensions = from(from)\n        .filter(ObjectVendorExtension.class)\n        .transform(toExtensionMap());\n    for (Map<String, Object> each : objectExtensions) {\n      extensions.putAll(each);\n    }\n    Iterable<StringVendorExtension> propertyExtensions = from(from)\n        .filter(StringVendorExtension.class);\n    for (StringVendorExtension each : propertyExtensions) {\n      extensions.put(each.getName(), each.getValue());\n    }\n    return extensions;\n  }\n```\n\n----------------------------------------\n\nTITLE: Overriding toString() for Enum Display in Java\nDESCRIPTION: This code snippet overrides the `toString()` method of the `CourseType` enum to include both the `name` and `label` properties in the output. This allows developers to display more descriptive information about the enum values in the documentation. However, this can cause debugging issues in form submissions.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/handler-enum.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n@AllArgsConstructor\n@Getter\npublic enum CourseType {\n\n    MATH(1,\"数学\"),\n    ENGLISH(2,\"英语\"),\n    CHINESE(3,\"语文\"),\n    COMPUTER(4,\"计算机\");\n\n    /**\n     * 课程编码\n     */\n    final int code;\n    /**\n     * 课程标签\n     */\n    final String label;\n\n    @Override\n    public String toString() {\n        return this.name()+\":\"+this.label;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Configuration for Swagger Docket with OpenAPI Extensions\nDESCRIPTION: This Java code snippet configures a Swagger Docket with OpenAPI extensions in a Spring application. It defines a Docket bean and uses OpenApiExtensionResolver to build extensions based on a group name, linking the Docket to the custom documentation configured in the YAML.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-10-26-knife4j-2.0.6-issue.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\n@Import(BeanValidatorPluginsConfiguration.class)\npublic class SwaggerConfiguration {\n \n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n    \n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                //.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))\n                .paths(PathSelectors.any())\n                .build()\n            //此处调用openApiExtensionResolver的方法获取extensions集合\n                .extensions(openApiExtensionResolver.buildExtensions(groupName))\n                .securityContexts(CollectionUtil.newArrayList(securityContext())).securitySchemes(CollectionUtil.newArrayList(apiKey()));\n        return docket;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Knife4jCloud Configuration in application.yml\nDESCRIPTION: This YAML snippet configures the `knife4j` properties in the `application.yml` file for automatic registration with Knife4jCloud.  It includes settings for the access key, project code, Knife4jCloud server address, SSL configuration, and optional client URL for domain-based access.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jCloud.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  cloud:\n    ## 参考注册API中的accessKey\n    accessKey: JDUkd1YvSi5zZmUkMHYuSGNmN1hMazJPajJuMjNJVW43dWNyL2tyR3N4bzJaa1A2ZC5mSUlwNA\n    ## 项目编号\n    code: APITest\n    ## Knife4jCloud的对外域名地址\n    server: http://127.0.0.1:19011\n    ## 当前服务是否是HTTPS的,默认可以不配置,并且该参数默认为false\n    ssl: false\n    ## 参考注册API中的client属性,该参数可以不配置,只有在域名的情况下需要进行配置\n    client: http://test.domain.com\n```\n\n----------------------------------------\n\nTITLE: JavaScript KE Object Structure\nDESCRIPTION: This code snippet shows the structure of the `ke` object provided by Knife4j, which allows access to global parameters and the current API response. It includes methods for setting headers and parameters, and accessing response headers and data.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/afterScript.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nke={\n    global:{\n        setHeader:function(name,value){\n            \n        },\n        setAllHeader:function(name,value){\n            \n        },\n        setParameter:function(name,value){\n            \n        },\n        setAllParameter:function(name,value){\n            \n        }\n    },\n    response:{\n        headers:{\n            \n        },\n        data:{\n            \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Springdoc Reverse Proxy Documentation Link\nDESCRIPTION: This is a URL that links to the official springdoc documentation. It describes the process to deploy springdoc-openapi-starter-webmvc-ui behind a reverse proxy. It will provide more in-depth information.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/nginx-forward-path.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://springdoc.org/#how-can-i-deploy-springdoc-openapi-starter-webmvc-ui-behind-a-reverse-proxy\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Types with Discriminator in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI schema equivalent to the JSON example, using a discriminator object.  The `Pet` schema has a `petType` property, which acts as the discriminator. `Cat` and `Dog` schemas extend the `Pet` schema and provide specific properties. Comments indicate the discriminator value for Cat and Dog.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_74\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n```\n\n----------------------------------------\n\nTITLE: Middleware Modification (C#)\nDESCRIPTION: This code modifies the SwaggerUIMiddleware to return the ConfigObject as a JSON string when the /v3/api-docs/swagger-config endpoint is requested.  This makes the configuration available for Knife4j to consume.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nif (httpMethod == \"GET\" && Regex.IsMatch(path, $\"^/v3/api-docs/swagger-config$\"))\n{\n     await httpContext.Response.WriteAsync(JsonSerializer.Serialize(_options.ConfigObject, _jsonSerializerOptions));\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: MobileCustomer Class Definition\nDESCRIPTION: Defines the `MobileCustomer` class, which represents a mobile phone customer. It contains properties for the customer's phone number (`tel`) and a boolean flag indicating whether the customer is an old customer (`old`).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/***\\n *\\n * @since:spring-plugin-demo 1.0\\n * @author <a href=\"mailto:xiaoymin@foxmail.com\">xiaoymin@foxmail.com</a> \\n * 2019/05/22 14:41\\n */\npublic class MobileCustomer {\n\n    /***\\n     * 电话号码\\n     */\n    private String tel;\n \t//setter getter   \n    /***\\n     * 是否老用户\\n     */\n    private boolean old=false;\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Schema for SensorTable - JSON\nDESCRIPTION: This JSON snippet shows an example schema definition for a `SensorTable` object within a Swagger/OpenAPI specification.  It demonstrates a recursive structure where the `sensorMap` property contains references back to the `SensorTable` definition, which was fixed in knife4j version 2.0.4 to avoid recursive loops.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-06-28-knife4j-2.0.4-issue.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"SensorTable\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"attrib\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                },\n                \"sensorMap\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"originalRef\": \"SensorTable\",\n                        \"$ref\": \"#/definitions/SensorTable\"\n                    }\n                }\n                //more...\n            },\n            \"title\": \"SensorTable\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Vue Component: initSpringDocOpenApi/initKnife4jSpringUi methods\nDESCRIPTION: This JavaScript code snippet shows how to initialize the SpringDoc OpenAPI or Springfox UI within the `create()` method of a Vue component. It requires commenting out one of the methods depending on the desired debugging target (Springdoc or Springfox).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/community/contributing.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n created() {\n    // 调试springdoc框架时，使用该方法，注释下面的this.initKnife4jSpringUi()方法\n    this.initSpringDocOpenApi();\n    // 调试springfox框架时，使用该方法，注释上面的 this.initSpringDocOpenApi()方法\n    //this.initKnife4jSpringUi();\n    this.initI18n();\n  },\n```\n\n----------------------------------------\n\nTITLE: Renaming Files in Disk Mode\nDESCRIPTION: This snippet demonstrates how to configure the renaming of YAML and JSON files in Disk mode using the `disk.properties` file. It sets the name, location, and order for each file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.disk.routes[0].name=yml格式\nknife4j.disk.routes[0].location=33.yml\nknife4j.disk.routes[0].order=1\nknife4j.disk.routes[1].name=json格式\nknife4j.disk.routes[1].location=DolphinScheduler.json\nknife4j.disk.routes[1].order=2\n```\n\n----------------------------------------\n\nTITLE: External Documentation Example in YAML\nDESCRIPTION: This YAML example defines an External Documentation object, mirroring the JSON example but using YAML syntax. It includes a `description` and `url` field, pointing to external resources.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_25\n\nLANGUAGE: YAML\nCODE:\n```\ndescription: Find more info here\nurl: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Enum Definition in Java\nDESCRIPTION: This code snippet defines a simple enum named `CourseType` with associated code and label properties.  It demonstrates a common enum structure that might be used in a Spring Boot application. The enum's `name` attribute is typically displayed in Swagger/Springdoc.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/handler-enum.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@AllArgsConstructor\n@Getter\npublic enum CourseType {\n\n    MATH(1,\"数学\"),\n    ENGLISH(2,\"英语\"),\n    CHINESE(3,\"语文\"),\n    COMPUTER(4,\"计算机\");\n\n    /**\n     * 课程编码\n     */\n    final int code;\n    /**\n     * 课程标签\n     */\n    final String label;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Link Object Example with Runtime Expression in YAML\nDESCRIPTION: This example demonstrates how to use runtime expressions to pass parameters to a linked operation.  It extracts the 'id' from the request path parameter and passes it as the 'userId' to the 'getUserAddress' operation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n```\n\n----------------------------------------\n\nTITLE: Encoding Object Example for Multipart/Mixed - YAML\nDESCRIPTION: Demonstrates the use of the 'encoding' object in a multipart/mixed request body using YAML. It defines the Content-Type for 'historyMetadata' as XML and restricts 'profileImage' to PNG or JPEG, including header information for rate limiting.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/mixed:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage:\n            # default is application/octet-stream, need to declare an image type only!\n            type: string\n            format: binary\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Ingress Configuration for UI Redirection (YAML)\nDESCRIPTION: This Kubernetes Ingress configuration redirects requests to /doc.html to an error-service. The error-service can be configured to return a custom error page or error code.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/production-forbidden-ui.mdx#_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-ingress\nspec:\n  rules:\n    - http:\n        paths:\n        # 转发doc.html到error-service,可以在该服务中定义一个错误页面或返回适当的错误码\n          - path: /doc.html\n            pathType: Prefix\n            backend:\n              service:\n                name: error-service\n                port:\n                  number: 80\n```\n\n----------------------------------------\n\nTITLE: Docket Configuration with Package Scanning\nDESCRIPTION: This code demonstrates configuring a Docket bean using package scanning. It utilizes `springAddtionalModelService` to scan specified packages, retrieve custom models, and include them in the Swagger definitions. The `springAddtionalModelService.scan()` method returns a `SpringAddtionalModel` object containing the scanned models.  These models are then added to the Docket using the `additionalModels` method.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox11.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Bean(value = \"groupRestApi\")\n@Order(value = 1)\npublic Docket groupRestApi() {\n    List<ResolvedType> list=Lists.newArrayList();\n\t//扫描\n    SpringAddtionalModel springAddtionalModel= springAddtionalModelService.scan(\"com.swagger.bootstrap.ui.demo.extend\");\n    return new Docket(DocumentationType.SWAGGER_2)\n        .apiInfo(groupApiInfo())\n        .groupName(\"分组接口\")\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.group\"))\n        .paths(PathSelectors.any())\n        .build()\n        .additionalModels(springAddtionalModel.getFirst(),springAddtionalModel.getRemaining())\n        .ignoredParameterTypes(HttpSession.class).extensions(Lists.newArrayList(new OrderExtensions(2))).securityContexts(Lists.newArrayList(securityContext(),securityContext1())).securitySchemes(Lists.<SecurityScheme>newArrayList(apiKey(),apiKey1()));\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Example Value on Generic Type Property in Java\nDESCRIPTION: This Java code demonstrates incorrect usage of the `example` attribute within the `@ApiModelProperty` annotation for a generic type `T`.  Specifying an example value for a generic type property can lead to inconsistent or incorrect example values in the Swagger UI, as the actual type `T` could be any entity.  It's better to let the framework infer example values based on the resolved type structure.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swagger-des-not-found.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class Rest<T> {\n    /*\n    * 泛型T属性不能赋予example值，因为T有可能是实体类，这样赋值会导致生成的示例值不一致，应该交给框架去解析类结构\n    */\n    @ApiModelProperty(value = \"返回对象\",example=\"Test\")\n    private T data; \n}\n```\n\n----------------------------------------\n\nTITLE: OperationModelsProvider Plugin Apply Method (Java)\nDESCRIPTION: The `apply` method of the `OperationModelsProvider` plugin collects models from the return type, parameters, and global models of the request mapping context.  It uses `collectFromReturnType`, `collectParameters`, and `collectGlobalModels` to identify and add the models to the context, enabling the creation of Swagger definitions for API parameters and responses. This plugin handles models from the return type, parameters, and global models.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class OperationModelsProvider implements OperationModelsProviderPlugin {\n\n  private static final Logger LOG = LoggerFactory.getLogger(OperationModelsProvider.class);\n  private final TypeResolver typeResolver;\n\n  @Autowired\n  public OperationModelsProvider(TypeResolver typeResolver) {\n    this.typeResolver = typeResolver;\n  }\n\n  @Override\n  public void apply(RequestMappingContext context) {\n    collectFromReturnType(context);\n    collectParameters(context);\n    collectGlobalModels(context);\n  }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Eureka Mode: eureka.properties Configuration\nDESCRIPTION: Shows the configuration properties for Eureka mode using `eureka.properties`.  This allows fetching OpenAPI specifications from services registered in Eureka. It defines the Eureka service URL, service name, and location of the OpenAPI specification.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.eureka.serviceUrl=http://localhost:10000/eureka/\nknife4j.eureka.routes[0].name=用户\nknife4j.eureka.routes[0].serviceName=userService\nknife4j.eureka.routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Eureka模式\n\n```\n\n----------------------------------------\n\nTITLE: Collecting Model from ApiOperation Annotation (Java)\nDESCRIPTION: This method collects a model from the `response` attribute of the `@ApiOperation` annotation. It finds the annotation, transforms it into a resolved type, and adds it to the operation models builder if it's different from the default return type.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate void collectFromApiOperation(RequestMappingContext context) {\n    ResolvedType returnType = context.getReturnType();\n    returnType = context.alternateFor(returnType);\n    Optional<ResolvedType> returnParameter = context.findAnnotation(ApiOperation.class)\n        .transform(resolvedTypeFromOperation(typeResolver, returnType));\n    if (returnParameter.isPresent() && returnParameter.get() != returnType) {\n      LOG.debug(\"Adding return parameter of type {}\", resolvedTypeSignature(returnParameter.get()).or(\"<null>\"));\n      context.operationModelsBuilder().addReturn(returnParameter.get());\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: SpringfoxWebMvcConfiguration Class Java\nDESCRIPTION: This configuration class imports ModelsConfiguration and scans packages related to Spring Web MVC. It enables plugin registries for various plugin types like DocumentationPlugin and ApiListingBuilderPlugin.  It also defines several beans related to documentation defaults, caching and JSON serialization.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox4.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@Import({ ModelsConfiguration.class })\n@ComponentScan(basePackages = {\n    \"springfox.documentation.spring.web.scanners\",\n    \"springfox.documentation.spring.web.readers.operation\",\n    \"springfox.documentation.spring.web.readers.parameter\",\n    \"springfox.documentation.spring.web.plugins\",\n    \"springfox.documentation.spring.web.paths\"\n})\n@EnablePluginRegistries({ DocumentationPlugin.class,\n    ApiListingBuilderPlugin.class,\n    OperationBuilderPlugin.class,\n    ParameterBuilderPlugin.class,\n    ExpandedParameterBuilderPlugin.class,\n    ResourceGroupingStrategy.class,\n    OperationModelsProviderPlugin.class,\n    DefaultsProviderPlugin.class,\n    PathDecorator.class,\n    ApiListingScannerPlugin.class\n})\npublic class SpringfoxWebMvcConfiguration {\n\n  @Bean\n  public Defaults defaults() {\n    return new Defaults();\n  }\n\n  @Bean\n  public DocumentationCache resourceGroupCache() {\n    return new DocumentationCache();\n  }\n\n  @Bean\n  public static ObjectMapperConfigurer objectMapperConfigurer() {\n    return new ObjectMapperConfigurer();\n  }\n\n  @Bean\n  public JsonSerializer jsonSerializer(List<JacksonModuleRegistrar> moduleRegistrars) {\n    return new JsonSerializer(moduleRegistrars);\n  }\n\n  @Bean\n  public DescriptionResolver descriptionResolver(Environment environment) {\n    return new DescriptionResolver(environment);\n  }\n\n  @Bean\n  public HandlerMethodResolver methodResolver(TypeResolver resolver) {\n    return new HandlerMethodResolver(resolver);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Getter Method for Generic Type in Java\nDESCRIPTION: This Java code snippet demonstrates an incorrect getter method for a generic type.  Instead of returning the generic type `T`, the getter returns `Object`, which prevents Swagger from correctly identifying the type and displaying its properties. This is a common mistake when automatically generating getter/setter methods.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swagger-des-not-found.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic Object getData(){\n    return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Resolved Type From ApiOperation Annotation (Java)\nDESCRIPTION: This method retrieves the resolved type from the `response` and `responseContainer` attributes of an `ApiOperation` annotation, using a TypeResolver. It returns the default type if the annotation is null or if the resolved type cannot be obtained. It extracts the class type from the annotation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@VisibleForTesting\nstatic ResolvedType getResolvedType(\n    ApiOperation annotation,\n    TypeResolver resolver,\n    ResolvedType defaultType) {\n\n    if (null != annotation) {\n        Class<?> response = annotation.response();\n        String responseContainer = annotation.responseContainer();\n        if (resolvedType(resolver, response, responseContainer).isPresent()) {\n            return resolvedType(resolver, response, responseContainer).get();\n        }\n    }\n    return defaultType;\n}\n```\n\n----------------------------------------\n\nTITLE: Nacos Mode Directory Structure\nDESCRIPTION: Shows the directory structure for Nacos mode. It contains the ROOT directory along with the `nacos.properties` file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_9\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------nacos.properties\n```\n\n----------------------------------------\n\nTITLE: Add Knife4j Micro Spring Boot Starter Dependency - XML\nDESCRIPTION: This XML snippet shows how to add the `knife4j-micro-spring-boot-starter` dependency to your Maven project. This starter is specifically designed for microservice architectures where only the gateway needs the UI. It includes enhanced attributes without the UI components.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-05-24-knife4j-2.0.3-issue.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-micro-spring-boot-starter</artifactId>\n    <version>2.0.3</version>\n</dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Single Server Object in JSON\nDESCRIPTION: This JSON snippet defines a single Server object with URL and description properties. It represents a development server.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Forwarded Headers in Spring Boot\nDESCRIPTION: This property enables the use of forwarded headers in Spring Boot applications. It's required to correctly handle requests proxied through a reverse proxy like Nginx. Setting this to 'true' allows the application to recognize the original host, port, and scheme.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/nginx-forward-path.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nserver.use-forward-headers=true\n```\n\n----------------------------------------\n\nTITLE: Defining a complex query parameter with content in YAML\nDESCRIPTION: This YAML example corresponds to the previous JSON example, defining a complex query parameter with a JSON schema for an object containing 'lat' and 'long' number properties.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n```\n\n----------------------------------------\n\nTITLE: SwaggerResource Model Definition\nDESCRIPTION: This class represents the SwaggerResource model, which contains information about a specific swagger resource.  It includes fields for name, URL, and swaggerVersion. It also implements the Comparable interface to allow for sorting of SwaggerResource objects.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox16.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class SwaggerResource implements Comparable<SwaggerResource> {\n  private String name;\n  private String url;\n  private String swaggerVersion;\n  @Override\n  public int compareTo(SwaggerResource other) {\n    return ComparisonChain.start()\n        .compare(this.swaggerVersion, other.swaggerVersion)\n        .compare(this.name, other.name)\n        .result();\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Resource Groups to Process API Interfaces (Java)\nDESCRIPTION: This code iterates through all resource groups (controllers) and their associated request mappings (API endpoints).  For each endpoint, it reads the API model using `apiModelReader.read` and adds the resulting models to a map. It also reads API descriptions using `apiDescriptionReader.read` to gather endpoint details. This is the core loop for extracting API metadata.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfor (final ResourceGroup resourceGroup : sortedByName(allResourceGroups)) {\n  DocumentationContext documentationContext = context.getDocumentationContext();\n  Set<String> produces = new LinkedHashSet<String>(documentationContext.getProduces());\n  Set<String> consumes = new LinkedHashSet<String>(documentationContext.getConsumes());\n  String host = documentationContext.getHost();\n  Set<String> protocols = new LinkedHashSet<String>(documentationContext.getProtocols());\n  Set<ApiDescription> apiDescriptions = newHashSet();\n\n  Map<String, Model> models = new LinkedHashMap<String, Model>();\n  //得到该Controller下的所有接口\n  List<RequestMappingContext> requestMappings = nullToEmptyList(requestMappingsByResourceGroup.get(resourceGroup));\n  for (RequestMappingContext each : sortedByMethods(requestMappings)) {\n    //拿到该接口的所有Model\n    models.putAll(apiModelReader.read(each.withKnownModels(models)));\n    apiDescriptions.addAll(apiDescriptionReader.read(each));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Eureka Server Application Configuration YML\nDESCRIPTION: This snippet defines the application.yml configuration for the Eureka server. It sets the server port, Eureka instance hostname, and client settings to prevent registration and fetch registry. The default zone URL is configured for service registration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nserver:\n  port: 10000\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false\n    fetch-registry: false\n    service-url:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\nspring:\n  application:\n    name: knife4j-gateway-server\n```\n\n----------------------------------------\n\nTITLE: DefaultsProviderPlugin Interface in Springfox\nDESCRIPTION: This interface defines the `create` method, which is used to create a default DocumentationContextBuilder based on the documentation type. It allows customization of default configurations for building the documentation context.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox5.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface DefaultsProviderPlugin extends Plugin<DocumentationType> {\n  /**\n   * Implement this method to override the @see  springfox.documentation.spi.service.contexts\n   * .DocumentationContextBuilder\n   * \n   * @param documentationType - creates a default DocumentationContextBuilder based on documentation type\n   * @return - returns the documentation context builder\n   */\n  DocumentationContextBuilder create(DocumentationType documentationType);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Algolia Docsearch Scraper with Docker\nDESCRIPTION: This snippet shows how to run the Algolia DocSearch scraper using Docker. It requires setting environment variables for application ID, API key, and configuration file. The scraper crawls the specified website and sends the data to Algolia.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/others/doc-search.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --env-file=.env algolia/docsearch-scraper\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Document Structure\nDESCRIPTION: This markdown snippet represents the structure of a custom documentation file in Knife4j. It includes level 1 and level 2 headings, along with content, to demonstrate how the document is structured and how Knife4j parses the headings for display.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/selfdocument.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# 自定义文档说明\n\n## 效果说明\n\n`knife4j`为了满足文档的个性化配置,添加了自定义文档功能\n\n开发者可自定义`md`文件扩展补充整个系统的文档说明\n\n开发者可以在当前项目中添加一个文件夹，文件夹中存放`.md`格式的markdown文件,每个`.md`文档代表一份自定义文档说明\n\n**注意**：自定义文档说明必须以`.md`结尾的文件,其他格式文件会被忽略\n```\n\n----------------------------------------\n\nTITLE: SwaggerHeaderFilter for Spring Cloud Gateway (Java)\nDESCRIPTION: This Java code defines a custom filter, SwaggerHeaderFilter, for Spring Cloud Gateway. It checks if the request path ends with '/v2/api-docs'. If it does, it extracts the basePath from the path and adds an 'X-Forwarded-Prefix' header to the request before forwarding it. This filter is necessary because Spring Cloud Gateway doesn't automatically provide the basePath like Zuul does.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class SwaggerHeaderFilter extends AbstractGatewayFilterFactory {\n    private static final String HEADER_NAME = \"X-Forwarded-Prefix\";\n\n    private static final String URI = \"/v2/api-docs\";\n\n    @Override\n    public GatewayFilter apply(Object config) {\n        return (exchange, chain) -> {\n            ServerHttpRequest request = exchange.getRequest();\n            String path = request.getURI().getPath();\n            if (!StringUtils.endsWithIgnoreCase(path,URI )) {\n                return chain.filter(exchange);\n            }\n            String basePath = path.substring(0, path.lastIndexOf(URI));\n            ServerHttpRequest newRequest = request.mutate().header(HEADER_NAME, basePath).build();\n            ServerWebExchange newExchange = exchange.mutate().request(newRequest).build();\n            return chain.filter(newExchange);\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpecAdapterFactory Interface\nDESCRIPTION: This TypeScript interface defines the contract for a factory that creates `SpecAdapter` instances based on the provided `SpecType`. It includes a `createAdapter` method that takes a `SpecType` and returns a corresponding `SpecAdapter` implementation. This factory enables dynamic selection and instantiation of the appropriate adapter.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-core/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SpecAdapterFactory{\n\n    /***\n     * 转换接口\n     */\n    createAdapter(type:SpecType):SpecAdapter;\n}\n```\n\n----------------------------------------\n\nTITLE: Include Parameters - Form Request - Java\nDESCRIPTION: This Java snippet demonstrates how to use the `includeParameters` attribute of the `ApiOperationSupport` annotation to include specific parameters in a form request. It specifies that `ignoreLabels` and `longUser.ids` should be included.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/includeRequestParameter.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@ApiOperationSupport(order = 40,includeParameters = {\"ignoreLabels\",\"longUser.ids\"})\n@ApiOperation(value = \"包含参数值-Form类型1\")\n@PostMapping(\"/ex1c\")\npublic Rest<IgnoreP1> findAllc12(IgnoreP1 ignoreP1) {\n    Rest<IgnoreP1> r=new Rest<>();\n    r.setData(ignoreP1);\n    return r;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Components Schema in YAML\nDESCRIPTION: This YAML snippet defines reusable components for an OpenAPI specification, mirroring the JSON example.  It includes schemas for `GeneralError`, `Category`, and `Tag` objects. It also defines parameters for pagination (`skipParam` and `limitParam`), common responses (`NotFound`, `IllegalInput`, `GeneralError`), and security schemes (`api_key`, `petstore_auth`).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows: \n        implicit:\n          authorizationUrl: http://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Swagger Class Definition with Vendor Extensions (Java)\nDESCRIPTION: This code snippet shows the `Swagger` class definition with the inclusion of `vendorExtensions`. This field allows for custom extensions to be added to the Swagger definition, enabling functionalities beyond the standard Swagger specification. This is how custom sorting or any other custom metadata can be injected into the Swagger definition.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class Swagger {\n    protected String swagger = \"2.0\";\n    protected Info info;\n    protected String host;\n    protected String basePath;\n    protected List<Tag> tags;\n    protected List<Scheme> schemes;\n    protected List<String> consumes;\n    protected List<String> produces;\n    protected List<SecurityRequirement> security;\n    protected Map<String, Path> paths;\n    protected Map<String, SecuritySchemeDefinition> securityDefinitions;\n    protected Map<String, Model> definitions;\n    protected Map<String, Parameter> parameters;\n    protected Map<String, Response> responses;\n    protected ExternalDocs externalDocs;\n    //扩展属性\n    protected Map<String, Object> vendorExtensions;\n    //setter and getter\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Object in YAML\nDESCRIPTION: This YAML snippet defines a Contact object with name, URL, and email properties. It provides contact information for API support.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: API Support\nurl: http://www.example.com/support\nemail: support@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Mode in Nacos\nDESCRIPTION: This Properties snippet configures the Nacos mode (aggregating from other Nacos instances) for Knife4j Insight. It defines multiple documents, each associated with a different Nacos server, including its address, credentials, and namespace. Routes specify the service name, group name, and location of the OpenAPI definition within the target Nacos instance.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-nacos.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n# Nacos模式下的第一个文档，访问：http://ip:port/nacos_doc1/doc.html\nknife4j.nacos[0].contextPath=nacos_doc1\n# 聚合192.168.0.110服务器上的Nacos实例\nknife4j.nacos[0].server=192.168.0.110:8848\nknife4j.nacos[0].username=nacos\nknife4j.nacos[0].password=nacos\nknife4j.nacos[0].namespace=dev\nknife4j.nacos[0].routes[0].name=用户\nknife4j.nacos[0].routes[0].serviceName=userService\nknife4j.nacos[0].routes[0].groupName=DEFAULT_GROUP\nknife4j.nacos[0].routes[0].location=/v2/api-docs?group=2.X版本\n\n# Nacos模式下的第二个文档，访问：http://ip:port/nacos_doc2/doc.html\nknife4j.nacos[1].contextPath=nacos_doc2\n# 聚合192.168.0.112服务器上的Nacos实例\nknife4j.nacos[1].server=192.168.0.112:8848\nknife4j.nacos[1].username=nacos\nknife4j.nacos[1].password=nacos\nknife4j.nacos[1].namespace=dev\nknife4j.nacos[1].routes[0].name=用户\nknife4j.nacos[1].routes[0].serviceName=orderService\nknife4j.nacos[1].routes[0].groupName=DEFAULT_GROUP\nknife4j.nacos[1].routes[0].location=/v2/api-docs?group=default\n\n\n```\n\n----------------------------------------\n\nTITLE: Fastjson Circular Reference Configuration\nDESCRIPTION: To prevent circular reference exceptions when serializing JSON for OpenAPI specifications using Fastjson, disable circular reference detection.  This ensures that Knife4j can correctly interpret the generated JSON.  This configuration is typically done during JSON serialization within the backend application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\nSerializerFeature.DisableCircularReferenceDetect\n```\n\n----------------------------------------\n\nTITLE: Collecting Model from Parameters (Java)\nDESCRIPTION: This method collects models from parameters annotated with `@RequestBody` or `@RequestPart`. It iterates through the parameters, checks for the specified annotations, retrieves the resolved type, applies alternate type resolution, and adds the type to the operation models builder. Only parameters with `@RequestBody` or `@RequestPart` annotations are processed.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void collectParameters(RequestMappingContext context) {\n\n\n    LOG.debug(\"Reading parameters models for handlerMethod |{}|\", context.getName());\n\n    List<ResolvedMethodParameter> parameterTypes = context.getParameters();\n    for (ResolvedMethodParameter parameterType : parameterTypes) {\n        if (parameterType.hasParameterAnnotation(RequestBody.class)\n            || parameterType.hasParameterAnnotation(RequestPart.class)) {\n          ResolvedType modelType = context.alternateFor(parameterType.getParameterType());\n          LOG.debug(\"Adding input parameter of type {}\", resolvedTypeSignature(modelType).or(\"<null>\"));\n          context.operationModelsBuilder().addInputParam(modelType);\n        }\n    }\n    LOG.debug(\"Finished reading parameters models for handlerMethod |{}|\", context.getName());\n  }\n```\n\n----------------------------------------\n\nTITLE: OperationBuilderPlugin Interface in Springfox\nDESCRIPTION: This interface defines the `apply` method, which is used to override the Operation using the OperationBuilder available in the context. It takes an OperationContext as a parameter, allowing modification of the operation attributes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox5.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface OperationBuilderPlugin extends Plugin<DocumentationType> {\n  /**\n   * Implement this method to override the Operation using the OperationBuilder available in the context\n   * \n   * @param context - context that can be used to override the parameter attributes\n   * @see springfox.documentation.service.Operation\n   * @see springfox.documentation.builders.OperationBuilder\n   */\n  void apply(OperationContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a string array query parameter in YAML\nDESCRIPTION: This YAML snippet corresponds to the previous JSON example, defining a query parameter for an array of strings, using 'form' style with 'explode' enabled.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Car Class\nDESCRIPTION: This Java code defines a simple `Car` class with properties like `name`, `make`, and `numberOfSeats`.  It serves as the source object for MapStruct's mapping process. The class should include getters and setters, as well as constructors (though they are not explicitly shown in the provided code).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox2.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Car {\n\n    private String name;\n    private String make;\n    private int numberOfSeats;\n \t//getter and setter ,constructs   \n}\n```\n\n----------------------------------------\n\nTITLE: Docket Configuration with OpenApiExtensionResolver Java\nDESCRIPTION: This code snippet demonstrates how to configure a Docket object with the OpenApiExtensionResolver in a Spring configuration class. It injects the resolver, builds extensions, and sets them on the Docket object. This is only needed when using `knife4j-openapi2-spring-boot-starter`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/forbidOpenApi.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildSettingExtensions());\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Home Page with Markdown - YAML\nDESCRIPTION: This YAML snippet configures Knife4j to enable a custom home page using a Markdown document. The `enableHomeCustom` property enables the custom home page, and `homeCustomLocation` specifies the path to the Markdown file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n\tenable: true\n\tsetting:\n\t\t# 是否自定义显示Home主页，默认为false\n\t\tenableHomeCustom: true\n\t\t# 自定义主页Home的markdown文档路径,只能设置1个，如果设置为目录，则默认取第一个\n\t\thomeCustomLocation: classpath:markdown/home.md\n```\n\n----------------------------------------\n\nTITLE: Excluding and Including Swagger Models in pom.xml\nDESCRIPTION: This XML snippet demonstrates how to exclude the default swagger-models dependency that comes with Springfox-Swagger 2.9.2 and explicitly include swagger-models version 1.5.21 in your Maven project's pom.xml file. This resolves the NumberFormatException issue. The snippet requires a Maven project setup and ensures compatibility between Springfox-Swagger and swagger-models.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/format-exception.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.9.2</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.swagger</groupId>\n            <artifactId>swagger-models</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n<!-- https://mvnrepository.com/artifact/io.swagger/swagger-models -->\n<dependency>\n    <groupId>io.swagger</groupId>\n    <artifactId>swagger-models</artifactId>\n    <version>1.5.21</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Default Ignorable Parameter Types in Springfox - Java\nDESCRIPTION: This code snippet demonstrates the default ignorable parameter types in Springfox. These types, such as `ServletRequest`, `HttpServletRequest`, `HttpServletResponse`, etc., are automatically excluded from the generated Swagger documentation. This list can be extended through Docket configuration.  This logic exists within the `Default` class.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox21.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void initIgnorableTypes() {\n    ignored = newHashSet();\n    ignored.add(ServletRequest.class);\n    ignored.add(Class.class);\n    ignored.add(Void.class);\n    ignored.add(Void.TYPE);\n    ignored.add(HttpServletRequest.class);\n    ignored.add(HttpServletResponse.class);\n    ignored.add(HttpHeaders.class);\n    ignored.add(BindingResult.class);\n    ignored.add(ServletContext.class);\n    ignored.add(UriComponentsBuilder.class);\n    ignored.add(ApiIgnore.class); //Used to ignore parameters\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Tab Display - YAML\nDESCRIPTION: This YAML snippet configures Knife4j to control the display of the debug tab. The `enableDebug` property determines whether the debug tab is shown.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n\tenable: true\n\tsetting:\n\t\t# 是否显示调试Tab框架，默认为true(显示)\n\t\tenableDebug: false\n```\n\n----------------------------------------\n\nTITLE: Wrapped array configuration (YAML)\nDESCRIPTION: This YAML configuration demonstrates the use of the 'wrapped' attribute. When set to true without an explicit name, both the outer and inner elements use the array name ('animals').\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_81\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n```\n\n----------------------------------------\n\nTITLE: Disk Mode OpenAPI File Configuration\nDESCRIPTION: This shell script represents the directory structure for storing OpenAPI files under the ROOT directory in Disk mode. It demonstrates storing JSON and YML files directly within the ROOT directory.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\n|-data\n|------ROOT  \n|--------userOpenApi.json\n|--------orderOpenApi.json\n|--------goodsOpenApi.yml\n\n```\n\n----------------------------------------\n\nTITLE: Multipart Form Data Request Body - YAML\nDESCRIPTION: Defines a request body content schema for multipart/form-data using YAML. The schema includes a property 'file' which is an array of binary files, specified with type 'string' and format 'binary'.  This allows uploading multiple files in a single request.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items:\n              type: string\n              format: binary\n```\n\n----------------------------------------\n\nTITLE: Configuring Knife4j Aggregation (Cloud Mode)\nDESCRIPTION: This YAML snippet demonstrates the configuration for aggregating OpenAPI specifications from HTTP endpoints (Cloud mode). The `uri` and `location` properties define the complete URL for fetching the OpenAPI specification. The `routeAuth` section configures Basic authentication if required.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregation.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enableAggregation: true\n  cloud:\n    enable: true\n    routes:\n      - name: 用户体系\n        uri: 192.168.0.152:8999\n        location: /v2/api-docs?group=2.X版本\n        swaggerVersion: 2.0\n        servicePath: /abbb/ffe\n        routeAuth:\n          enable: true\n          username: test3\n          password: 66666\n    routeAuth:\n      enable: true\n      username: test\n      password: 12313\n```\n\n----------------------------------------\n\nTITLE: Simple HTML Algolia Search Validation\nDESCRIPTION: This HTML code provides a basic implementation to validate search results with Algolia using client-side JavaScript. It includes the necessary CSS and JavaScript libraries from CDN and uses the `docsearch` function to integrate the search functionality. Replace placeholder values with your own Algolia app ID, API key, and index name.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/others/doc-search.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Title</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@docsearch/css@3\"/></pre></li>\n</head>\n<body>\n\n<div id=\"test\"></div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@docsearch/js@3\"></script>\n<script type=\"text/javascript\">\n\n  docsearch({\n\n    appId:\"替换为你自己的appid\",\n\n\n    apiKey: \"替换为你自己的apikey\",\n\n    indexName: \"替换为你自己的indexName\",\n\n    container: '#test',\n\n    debug: false // Set debug to true if you want to inspect the modal\n\n  });\n\n</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Reading Interface Model Information (Java)\nDESCRIPTION: This method reads model information from a given `RequestMappingContext`. It retrieves ignorable types, creates model contexts, and generates models using `modelProvider.modelFor`. It merges the generated models into a map and populates dependencies. This method uses `pluginsManager.modelContexts` to obtain a set of `ModelContext` objects for further processing.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/*** \n   * 读取该接口Model信息\n   * @param context\n   * @return\n   */\npublic Map<String, Model> read(RequestMappingContext context) {\n    //忽略的class集合，如果没有额外设置,则得到的是Defaults类中的默认忽略类Class集合\n    Set<Class> ignorableTypes = newHashSet(context.getIgnorableParameterTypes());\n    Set<ModelContext> modelContexts = pluginsManager.modelContexts(context);\n    Map<String, Model> modelMap = newHashMap(context.getModelMap());\n    for (ModelContext each : modelContexts) {\n        markIgnorablesAsHasSeen(typeResolver, ignorableTypes, each);\n        Optional<Model> pModel = modelProvider.modelFor(each);\n        if (pModel.isPresent()) {\n            LOG.debug(\"Generated parameter model id: {}, name: {}, schema: {} models\",\n                      pModel.get().getId(),\n                      pModel.get().getName());\n            mergeModelMap(modelMap, pModel.get());\n        } else {\n            LOG.debug(\"Did not find any parameter models for {}\", each.getType());\n        }\n        populateDependencies(each, modelMap);\n    }\n    return modelMap;\n}\n```\n\n----------------------------------------\n\nTITLE: Gateway Application Configuration YML\nDESCRIPTION: This snippet configures the application.yml file for the service-doc application, which includes the Spring Cloud Gateway configuration. It sets the server port, application name, and gateway routes for service-user and service-order, using discovery to locate the services. It also configures Eureka client settings.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nserver:\n  port: 10003\nspring:\n  application:\n    name: service-doc\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          #          enabled: true\n          lowerCaseServiceId: true\n      routes:\n        - id: service-user\n          uri: lb://service-user\n          predicates:\n            - Path=/user/**\n          #            - Header=Cookie,Set-Cookie\n          filters:\n            - SwaggerHeaderFilter\n            - StripPrefix=1\n        - id:  service-order\n          uri: lb://service-order\n          predicates:\n            - Path=/order/**\n          filters:\n            - SwaggerHeaderFilter\n            - StripPrefix=1\n\n\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:10000/eureka/\n\nlogging:\n  level:\n    org.springframework:cloud.gateway: debug\n```\n\n----------------------------------------\n\nTITLE: SwaggerOperationModelsProvider Plugin Apply Method (Java)\nDESCRIPTION: The `apply` method of the `SwaggerOperationModelsProvider` plugin collects models from the `@ApiOperation` and `@ApiResponse` annotations. It uses `collectFromApiOperation` and `collectApiResponses` to identify and add the models to the context. This plugin handles swagger annotation based model definitions.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)\npublic class SwaggerOperationModelsProvider implements OperationModelsProviderPlugin {\n\n  private static final Logger LOG = LoggerFactory.getLogger(SwaggerOperationModelsProvider.class);\n  private final TypeResolver typeResolver;\n\n  @Autowired\n  public SwaggerOperationModelsProvider(TypeResolver typeResolver) {\n    this.typeResolver = typeResolver;\n  }\n\n  @Override\n  public void apply(RequestMappingContext context) {\n    collectFromApiOperation(context);\n    collectApiResponses(context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Blocking UI Access\nDESCRIPTION: This Nginx configuration snippet demonstrates how to block access to the /doc.html and /swagger-ui.html paths, effectively disabling access to Knife4j and Swagger UI in a production environment.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/production-forbidden-ui.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nlocation /doc.html {\n    return 403;  # 返回 403 状态码表示禁止访问\n}\n\nlocation /swagger-ui.html {\n    return 403;  # 返回 403 状态码表示禁止访问\n}\n\n// 其他路由接口及资源\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Authentication in Cloud Mode\nDESCRIPTION: This snippet demonstrates how to configure basic authentication for Cloud mode using the `cloud.properties` file. It sets `knife4j.basicAuth.enable` to `true` and provides a username and password for access control.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.basicAuth.enable=true\nknife4j.basicAuth.username=cloud\nknife4j.basicAuth.password=123456\n```\n\n----------------------------------------\n\nTITLE: Register API Request Body JSON Example\nDESCRIPTION: This JSON snippet represents the request body for registering an OpenAPI service with the Knife4jCloud platform. It includes parameters such as accessKey for authentication, code for project identification, applicationHost and applicationPort for service location, ssl for HTTPS configuration, client for specifying a client address, and cloudRoutes for defining service groups with their content and path.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jCloud.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"accessKey\":\"JDUkd1YvSi5zZmUkMHYuSGNmN1hMazJPajJuMjNJVW43dWNyL2tyR3N4bzJaa1A2ZC5mSUlwNA\",\n    \"code\":\"APIFactory\",\n    \"applicationHost\":\"192.168.0.152\",\n    \"applicationPort\":\"9200\",\n    \"ssl\":false,\n    \"client\":\"\",\n    \"cloudRoutes\":[{\n        \"groupName\":\"订单服务\",\n        \"content\":\"{....}\",\n        \"path\":\"/aaa/v2/api-docs?group=订单服务\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Start Nginx Manually (Shell)\nDESCRIPTION: This command starts Nginx manually from the command line. It assumes that Nginx has been installed in `/usr/local/nginx`. The user must navigate to the sbin directory and then execute the nginx command.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/knife4j-admin-deploy.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n[root@izbt kadmin]# cd /usr/local/nginx\n[root@izbt nginx]# sbin/nginx\n```\n\n----------------------------------------\n\nTITLE: springdoc-openapi Sorting Configuration (Correct)\nDESCRIPTION: This snippet shows the correct configuration for springdoc-openapi to allow Knife4j's order-based sorting to take effect.  The `operations-sorter` property should be set to `order` or left unset.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/apiSort.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nspringdoc:\n  swagger-ui:\n    path: /swagger-ui.html\n    tags-sorter: alpha\n    # 使用增强order属性进行排序，或者不设置该参数\n    operations-sorter: order\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Service URLs and Routes\nDESCRIPTION: This snippet demonstrates configuring Nacos service URLs and routes in `nacos.properties`. It defines the Nacos service URL, service name, and location of the API documentation for each route. This allows to aggregate documentation from services registered with Nacos.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.nacos.serviceUrl=http://192.168.0.223:8848/nacos\nknife4j.nacos.routes[0].name=自定义服务1\nknife4j.nacos.routes[0].serviceName=service-user\nknife4j.nacos.routes[0].location=/v2/api-docs?group=default\nknife4j.nacos.routes[1].name=自定义服务2\nknife4j.nacos.routes[1].serviceName=service-order\nknife4j.nacos.routes[1].location=/v2/api-docs?group=default\n```\n\n----------------------------------------\n\nTITLE: Operation Class Definition - Java\nDESCRIPTION: This code defines the `Operation` class, representing a specific operation (HTTP method) on an API endpoint. It includes fields for HTTP method, summary, notes, response model, unique ID, position, tags, consumes/produces types, protocols, security, parameters, response messages, deprecation status, and vendor extensions. It is used to store detailed information about each individual operation supported by an API.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox12.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Operation {\n  //请求接口\n  private final HttpMethod method;\n  //接口名称\n  private final String summary;\n  //接口描述信息\n  private final String notes;\n  private final ModelReference responseModel;\n  //唯一id\n  private final String uniqueId;\n  private final int position;\n  //tags\n  private final Set<String> tags;\n  private final Set<String> produces;\n  private final Set<String> consumes;\n  private final Set<String> protocol;\n  //是否隐藏\n  private final boolean isHidden;\n  private final Map<String, List<AuthorizationScope>> securityReferences;\n  //参数\n  private final List<Parameter> parameters;\n  //状态码\n  private final Set<ResponseMessage> responseMessages;\n  //是否过时\n  private final String deprecated;\n  //扩展信息\n  private final List<VendorExtension> vendorExtensions;\n\n  //setter and getter..   \n}\n```\n\n----------------------------------------\n\nTITLE: Components Object Example Key\nDESCRIPTION: Examples for key matching fields in the components object. The keys must match the regular expression `^[a-zA-Z0-9\\.\\-_]+$`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nUser\nUser_1\nUser_Name\nuser-name\nmy.org.User\n```\n\n----------------------------------------\n\nTITLE: Link Object Example with OperationRef in YAML\nDESCRIPTION: This example shows how to use `operationRef` with both relative and absolute references to link to another operation. It passes the `username` from the response body to the linked operation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_68\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n```\n\n----------------------------------------\n\nTITLE: Link Object Example with Response Body Value in YAML\nDESCRIPTION: This example demonstrates using a value from the response body to pass as a parameter to a linked operation. It extracts the `uuid` field from the response body and passes it as the `userUuid` to the `getUserAddressByUUID` operation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\nlinks:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n```\n\n----------------------------------------\n\nTITLE: DefaultConfiguration Create Method\nDESCRIPTION: This snippet shows the create method in DefaultConfiguration. It initializes a DocumentationContextBuilder with default values for various properties like operation ordering, API description ordering, ignorable types, rules, response messages, path provider, and type resolver.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class DefaultConfiguration implements DefaultsProviderPlugin {\n\n    private final Defaults defaults;\n    private final TypeResolver typeResolver;\n    private final ServletContext servletContext;\n\n    public DefaultConfiguration(Defaults defaults,\n                                TypeResolver typeResolver,\n                                ServletContext servletContext) {\n\n        this.servletContext = servletContext;\n        this.defaults = defaults;\n        this.typeResolver = typeResolver;\n    }\n\n    @Override\n    public DocumentationContextBuilder create(DocumentationType documentationType) {\n        return new DocumentationContextBuilder(documentationType)\n            .operationOrdering(defaults.operationOrdering())\n            .apiDescriptionOrdering(defaults.apiDescriptionOrdering())\n            .apiListingReferenceOrdering(defaults.apiListingReferenceOrdering())\n            .additionalIgnorableTypes(defaults.defaultIgnorableParameterTypes())\n            .rules(defaults.defaultRules(typeResolver))\n            .defaultResponseMessages(defaults.defaultResponseMessages())\n            .pathProvider(new RelativePathProvider(servletContext))\n            .typeResolver(typeResolver)\n            .enableUrlTemplating(false)\n            .selector(ApiSelector.DEFAULT);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server with Variables in JSON\nDESCRIPTION: This JSON snippet defines a Server object with URL variables and descriptions. It demonstrates how to use variables for dynamic server configurations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Docket with OpenApiExtensionResolver in Java\nDESCRIPTION: This Java snippet shows how to configure the Docket object with OpenApiExtensionResolver. It involves injecting OpenApiExtensionResolver and using it to build extensions for the Docket object. This is required for knife4j-openapi2-spring-boot-starter.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/swaggermodels.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildExtensions(groupName));\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for swagger-bootstrap-ui\nDESCRIPTION: This XML snippet demonstrates how to add the swagger-bootstrap-ui dependency to a Maven project. It includes the groupId, artifactId, and version required for importing the library.  This dependency allows developers to integrate swagger-bootstrap-ui into their Spring Boot or other Java-based projects for enhanced Swagger UI.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2019-07-31-swagger-bootstrap-ui-1.9.5-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.9.5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for Swagger Bootstrap UI\nDESCRIPTION: This XML snippet demonstrates how to add the swagger-bootstrap-ui dependency to a Maven project. It specifies the groupId, artifactId, and version for the dependency, allowing the project to utilize the Swagger Bootstrap UI library.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2019-04-08-swagger-bootstrap-ui-1.9.2-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.9.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Collecting API Responses - Java\nDESCRIPTION: This method collects the classes associated with status codes annotated on the interface using `@ApiResponses`. It iterates through the `ApiResponses` annotations, retrieves the `ResolvedType` for each, and adds them to the `operationModelsBuilder` of the `RequestMappingContext`.  A `Set` is used to prevent duplicate entries.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprivate void collectApiResponses(RequestMappingContext context) {\n  List<ApiResponses> allApiResponses = context.findAnnotations(ApiResponses.class);\n  LOG.debug(\"Reading parameters models for handlerMethod |{}|\", context.getName());\n  Set<ResolvedType> seenTypes = newHashSet();\n  for (ApiResponses apiResponses : allApiResponses) {\n    List<ResolvedType> modelTypes = toResolvedTypes(context).apply(apiResponses);\n    for (ResolvedType modelType : modelTypes) {\n      if (!seenTypes.contains(modelType)) {\n        seenTypes.add(modelType);\n        context.operationModelsBuilder().addReturn(modelType);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Java Model without Example Attribute\nDESCRIPTION: This Java code snippet shows the correct way to define a model with a `List` field when using Knife4j and Swagger. By removing the `example` attribute from the `@ApiModelProperty` annotation for the `fields` list, the Swagger framework will automatically generate a valid JSON representation, avoiding parsing errors in Knife4j. This ensures that the generated documentation is displayed correctly.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/knife4j-exception.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@ApiModel(description = \"客户字段分组模型\",value = \"CrmFieldGroupResponse\")\npublic class CrmFieldGroupResponse {\n\n    @ApiModelProperty(value = \"客户字段分组ID\")\n    private int id;\n\n    @ApiModelProperty(value = \"客户字段分组名称\")\n    private String name;\n\n    @ApiModelProperty(value = \"客户字段数据\")\n    private List<CrmFieldResponse> fields;\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Set Forwarded Headers Strategy in Spring Boot\nDESCRIPTION: This property sets the strategy for handling forwarded headers in Spring Boot versions 3.2 and later. Using the 'framework' strategy ensures that Spring Boot's built-in header handling is used. This is important for correctly processing headers set by the reverse proxy.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/nginx-forward-path.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nserver.forward-headers-strategy=framework\n```\n\n----------------------------------------\n\nTITLE: Correct OpenAPI Definitions Example\nDESCRIPTION: This JSON snippet demonstrates a correctly structured `definitions` section in an OpenAPI specification, showing the absence of `null` values. The `properties` object contains correctly defined schema for `requestId`. Note the escaped newlines for proper JSON formatting.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"definitions\": {\n    \"基础返回对象\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"requestId\": {\n          \"name\": \"requestId\",\n          \"type\": \"string\",\n          \"required\": false\n        }\n\t  }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Usage of Example in List Field\nDESCRIPTION: This Java code snippet shows the correct way to define a model with a `List` field for Swagger documentation. The `example` attribute is removed from the `@ApiModelProperty` annotation for the `fields` List. This allows the framework to correctly generate a standard JSON structure without causing parsing errors in the Swagger UI.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swaggerResourceInvalid.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@ApiModel(description = \"客户字段分组模型\",value = \"CrmFieldGroupResponse\")\npublic class CrmFieldGroupResponse {\n\n    @ApiModelProperty(value = \"客户字段分组ID\")\n    private int id;\n\n    @ApiModelProperty(value = \"客户字段分组名称\")\n    private String name;\n\n    @ApiModelProperty(value = \"客户字段数据\")\n    private List<CrmFieldResponse> fields;\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Spring Debug Logs for doc.html Access\nDESCRIPTION: These debug logs show successful access to the `doc.html` page. The logs illustrate the request mapping process and resource handling in Spring. Enabling Spring's debug logging is recommended for troubleshooting access issues.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/springboot-404.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n2019-04-19 13:39:36,896 DEBUG (AbstractHandlerMethodMapping.java:312)- Looking up handler method for path /doc.html\n2019-04-19 13:39:36,902 DEBUG (AbstractHandlerMethodMapping.java:322)- Did not find handler method for [/doc.html]\n2019-04-19 13:39:36,921 DEBUG (AbstractUrlHandlerMapping.java:199)- Matching patterns for request [/doc.html] are [/**]\n2019-04-19 13:39:36,922 DEBUG (AbstractUrlHandlerMapping.java:233)- URI Template variables for request [/doc.html] are {}\n2019-04-19 13:39:36,923 DEBUG (AbstractUrlHandlerMapping.java:146)- Mapping [/doc.html] to HandlerExecutionChain with handler [ResourceHttpRequestHandler [locations=[class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/]], resolvers=[org.springframework.web.servlet.resource.PathResourceResolver@da32f3]]] and 1 interceptor\n2019-04-19 13:39:36,957 DEBUG (RequestContextFilter.java:104)- Cleared thread-bound request context: org.apache.catalina.connector.RequestFacade@28759ea7\n2019-04-19 13:39:41,649 DEBUG (RequestContextFilter.java:114)- Bound request context to thread: org.apache.catalina.connector.RequestFacade@28759ea7\n```\n\n----------------------------------------\n\nTITLE: Text Response with Headers - JSON\nDESCRIPTION: This JSON defines a plain text response with associated headers. It describes rate limiting headers and their schemas, in addition to a simple string response.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"example\": \"whoa!\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Knife4j Springdoc UI Dependency - XML\nDESCRIPTION: This XML snippet shows how to add the `knife4j-springdoc-ui` dependency to your Maven project. This dependency is used when your backend rendering for OpenAPI is done with Springdoc, and you want the Knife4j UI. It provides the UI components for Springdoc integration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-05-24-knife4j-2.0.3-issue.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-springdoc-ui</artifactId>\n  <version>2.0.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Sorting with @ApiSupport in Java\nDESCRIPTION: This Java snippet demonstrates how to use the `@ApiSupport` annotation to define the order of an API group. The `order` attribute specifies the sorting priority. This annotation requires the `knife4j-openapi2-spring-boot-starter` component, starting from Knife4j 4.0.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/tagSort.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Api(tags = \"2.0.3版本-20200312\")\n@ApiSupport(order = 284)\n@RestController\n@RequestMapping(\"/api/nxew203\")\npublic class Api203Constroller {\n    \n    \n}\n```\n\n----------------------------------------\n\nTITLE: DocumentationPlugin Interface in Springfox\nDESCRIPTION: This interface defines methods for determining if the plugin is enabled, getting the documentation type, configuring the documentation context, and getting the group name.  It is used to configure the documentation context based on the DocumentationType.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox5.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DocumentationPlugin extends Plugin<DocumentationType> {\n  /**\n   * @return indicator to determine if the plugin is enabled\n   */\n  boolean isEnabled();\n\n  DocumentationType getDocumentationType();\n\n  /**\n   * Creates a documentation context based on a given DocumentationContextBuilder\n   * \n   * @param builder - @see springfox.documentation.spi.service.contexts.DocumentationContextBuilder\n   * @return context to use for building the documentation\n   */\n  DocumentationContext configure(DocumentationContextBuilder builder);\n\n  /**\n   * Gets the group name for the plugin. This is expected to be unique for each instance of the plugin\n   * @return group the plugin belongs to\n   */\n  String getGroupName();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server with Variables in YAML\nDESCRIPTION: This YAML snippet defines a Server object with URL variables and descriptions. It demonstrates how to use variables for dynamic server configurations.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      # note! no enum here means it is an open value\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n      default: v2\n```\n\n----------------------------------------\n\nTITLE: Tag Object Example in JSON\nDESCRIPTION: A JSON example illustrating the structure of a Tag object, specifying the name and description of the tag.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"pet\",\n\t\"description\": \"Pets operations\"\n}\n```\n\n----------------------------------------\n\nTITLE: SwaggerCommonConfiguration Class Java\nDESCRIPTION: This configuration class scans packages related to Swagger schema, readers, and web components.  It's responsible for providing common configurations used across the Swagger integration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox4.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@ComponentScan(basePackages = {\n    \"springfox.documentation.swagger.schema\",\n    \"springfox.documentation.swagger.readers\",\n    \"springfox.documentation.swagger.web\"\n})\npublic class SwaggerCommonConfiguration {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for swagger-bootstrap-ui\nDESCRIPTION: This snippet shows the Maven dependency required to include swagger-bootstrap-ui version 1.9.4 in a project. It specifies the groupId, artifactId, and version for easy integration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2019-06-10-swagger-bootstrap-ui-1.9.4-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.9.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependency for Swagger Bootstrap UI\nDESCRIPTION: This XML snippet shows how to add the swagger-bootstrap-ui dependency to a Maven project. It specifies the groupId, artifactId, and version of the library.  This allows you to use the Swagger Bootstrap UI in your Spring Boot or Spring MVC application to enhance the Swagger documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2019-03-11-swagger-bootstrap-ui-1.9.1-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.9.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: ESLint Parser Options Configuration JavaScript\nDESCRIPTION: Configures the ESLint parser options for a TypeScript project. This allows ESLint to understand TypeScript syntax and semantics, enabling type-aware linting rules. It defines the ecmaVersion, sourceType, project file paths and the root directory.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-ui-react/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nparserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n   }\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j with OpenAPI 3 (XML)\nDESCRIPTION: This XML snippet shows the Maven dependency for using Knife4j with OpenAPI 3, depending on springfox 3.0.0. Ensure you search the Maven Central Repository for the latest 3.X version when using this dependency.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-02-knife4j-2.0.7-issue.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库搜索3.X最新版本号-->\n    <version>3.0.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Algolia Docsearch Configuration JSON\nDESCRIPTION: This is an example of a configuration file for the Algolia DocSearch scraper. It specifies the index name, start URLs, and selectors for extracting content from the website. The selectors define how the crawler identifies and extracts different levels of headings and text content.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/others/doc-search.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"index_name\": \"knife4j\",\n    \"start_urls\": [\n        \"https://doc.xiaominfo.com/docs/middleware-sources\",\n        \"https://doc.xiaominfo.com/docs/oas\",\n        \"https://doc.xiaominfo.com/docs/action\",\n        \"https://doc.xiaominfo.com/docs/changelog\",\n        \"https://doc.xiaominfo.com/docs/faq\",\n        \"https://doc.xiaominfo.com/v2/\"\n    ],\n    \"selectors\": {\n        \"lvl0\": \".docMainContainer_gTbr header h1\",\n        \"lvl1\": \".docMainContainer_gTbr article h1\",\n        \"lvl2\": \".docMainContainer_gTbr article h2\",\n        \"lvl3\": \".docMainContainer_gTbr article h3\",\n        \"lvl4\": \".docMainContainer_gTbr article h4\",\n        \"lvl5\": \".docMainContainer_gTbr article h5\",\n        \"text\": \".docMainContainer_gTbr header p,.docMainContainer_gTbr section p,.docMainContainer_gTbr section ol\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XML output when changing outer element only\nDESCRIPTION: This XML shows the outer element named 'aliens' and the inner element using the same name due to the default behavior and 'wrapped' being true.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_90\n\nLANGUAGE: xml\nCODE:\n```\n<aliens>\n  <aliens>value</aliens>\n  <aliens>value</aliens>\n</aliens>\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Box Display - YAML\nDESCRIPTION: This YAML snippet configures Knife4j to control the display of the search box in the documentation. The `enableSearch` property determines whether the search box is visible.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n\tenable: true\n\tsetting:\n\t\t# 是否显示文档中的搜索框，默认为true，即显示\n\t\tenableSearch: false\n```\n\n----------------------------------------\n\nTITLE: ApiDescriptionReader.read Method - Java\nDESCRIPTION: This code snippet presents the `ApiDescriptionReader.read` method, which is responsible for generating a list of `ApiDescription` objects from a `RequestMappingContext`. It iterates through matching paths, creates `Operation` objects using `operationReader.read`, and builds `ApiDescription` objects using the collected information. It uses `pluginsManager` to decorate paths and handles errors during processing.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox12.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/*** \n * 获取ApiDescription接口集合信息\n * @param outerContext\n * @return\n */\npublic List<ApiDescription> read(RequestMappingContext outerContext) {\n  PatternsRequestCondition patternsCondition = outerContext.getPatternsCondition();\n  ApiSelector selector = outerContext.getDocumentationContext().getApiSelector();\n\n  List<ApiDescription> apiDescriptionList = newArrayList();\n  for (String path : matchingPaths(selector, patternsCondition)) {\n    String methodName = outerContext.getName();\n    try {\n      RequestMappingContext operationContext = outerContext.copyPatternUsing(path);\n\t//根据接口上下文获取Operation集合\n      List<Operation> operations = operationReader.read(operationContext);\n      if (operations.size() > 0) {\n        operationContext.apiDescriptionBuilder()\n            .groupName(outerContext.getGroupName())\n            .operations(operations)\n            .pathDecorator(pluginsManager.decorator(new PathContext(outerContext, from(operations).first())))\n            .path(path)\n            .description(methodName)\n            .hidden(false);\n        ApiDescription apiDescription = operationContext.apiDescriptionBuilder().build();\n        lookup.add(outerContext.key(), apiDescription);\n        apiDescriptionList.add(apiDescription);\n      }\n    } catch (Error e) {\n      String contentMsg = \"Skipping process path[\" + path + \"], method[\" + methodName + \"] as it has an error.\";\n      log.error(contentMsg, e);\n    }\n  }\n  return apiDescriptionList;\n}\n```\n\n----------------------------------------\n\nTITLE: Service Change Listener in JavaScript\nDESCRIPTION: This JavaScript snippet shows the `ServiceChangeListener` class, which listens for application events (ApplicationReadyEvent, HeartbeatEvent, RefreshRoutesEvent) and triggers service discovery using the `DiscoveryClient`.  It filters to ensure that the discovery process is done only when `GatewayStrategy` is set to `DISCOVER`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/gateway/knife4j-gateway-introduce.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n@Slf4j\n@AllArgsConstructor\npublic class ServiceChangeListener {\n    \n    final DiscoveryClient discoveryClient;\n    final ServiceDiscoverHandler serviceDiscoverHandler;\n    final Knife4jGatewayProperties knife4jGatewayProperties;\n    \n    @EventListener(classes = {ApplicationReadyEvent.class, HeartbeatEvent.class, RefreshRoutesEvent.class})\n    public void discover() {\n        log.debug(\"discover service.\");\n        List<String> services = discoveryClient.getServices();\n        if (Objects.equals(knife4jGatewayProperties.getStrategy(), GatewayStrategy.DISCOVER)) {\n            this.serviceDiscoverHandler.discover(services);\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Vue Dev Server Proxy\nDESCRIPTION: This JSON snippet configures the Vue development server proxy to forward requests to a backend server.  The `target` property needs to be updated to match the port where the backend server is running (e.g., the Springfox or Springdoc demo application).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/community/contributing.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devServer\": {\n    \"watchOptions\": {\n      \"ignored\": /node_modules/\n    },\n    \"proxy\": {\n      \"/\": {\n        // 代理服务端端口\n        \"target\": 'http://localhost:8990/',\n        \"ws\": true,\n        \"changeOrigin\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML name attribute impact (JSON)\nDESCRIPTION: This JSON configuration shows how the outer 'name' attribute for the XML array has no effect unless 'wrapped' is set to true. Each item is still rendered as 'animal'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Path Item Object in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a Path Item Object defining a GET operation on a specific path, including description, summary, operation ID, responses, and parameters. It defines the schema for the response content and specifies a parameter 'id' in the path.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for swagger-bootstrap-ui\nDESCRIPTION: This snippet shows the Maven dependency required to include swagger-bootstrap-ui version 1.9.3 in a project. It specifies the groupId, artifactId, and version of the library, enabling easy integration with Maven-based projects.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2019-04-23-swagger-bootstrap-ui-1.9.3-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.9.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enable Swagger 2 Annotation\nDESCRIPTION: This Java annotation, `@EnableSwagger2`, is used in conjunction with `@Configuration` to enable Swagger configuration in a Spring application. It imports `Swagger2DocumentationConfiguration`, which is responsible for initializing the Swagger documentation configuration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox1.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage springfox.documentation.swagger2.annotations;\n\nimport org.springframework.context.annotation.Import;\nimport springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\n/**\n * 配合Java配置注解@Configuration使用,启用Swagger的配置注解,使用@Import注解导入Swagger文档的Configuration配置初始化类\n * @see springfox.documentation.spring.web.plugins.Docket\n */\n@Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)\n@Target(value = { java.lang.annotation.ElementType.TYPE })\n@Documented\n@Import({Swagger2DocumentationConfiguration.class})\npublic @interface EnableSwagger2 {\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenAPI with Knife4j YML\nDESCRIPTION: This snippet shows how to disable the OpenAPI functionality within Knife4j by setting `knife4j.setting.enable-open-api` to `false` in the application.yml file.  Requires Knife4j to be enabled.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/forbidOpenApi.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  setting:\n    enable-open-api: false\n```\n\n----------------------------------------\n\nTITLE: Docket Configuration with OpenApiExtensionResolver (Java)\nDESCRIPTION: This Java code snippet demonstrates how to configure a Docket object with the OpenApiExtensionResolver to inject custom settings into the OpenAPI specification. It requires the `OpenApiExtensionResolver` bean to be injected and then uses it to build the setting extensions.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/customHome.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildSettingExtensions());\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Springfox-Swagger Guava Dependency (version 20.0)\nDESCRIPTION: This XML snippet shows the Guava dependency used by Springfox-Swagger. The version is 20.0. This information is crucial for identifying the potential cause of the NoSuchMethodError, as it highlights a specific Guava version used by Springfox-Swagger.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/sp-nmerror.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n<groupId>com.google.guava</groupId>\n<artifactId>guava</artifactId>\n<version>20.0</version>\n<scope>compile</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Sorting Nacos Routes with Order Attribute\nDESCRIPTION: This snippet shows how to configure the display order of Nacos routes using the `order` attribute in the `nacos.properties` file. It specifies the order in which the services will be displayed in the Knife4j documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.nacos.serviceUrl=http://192.168.0.223:8848/nacos\nknife4j.nacos.routes[0].name=自定义服务1\nknife4j.nacos.routes[0].serviceName=service-user\nknife4j.nacos.routes[0].location=/v2/api-docs?group=default\nknife4j.nacos.routes[0].order=3\nknife4j.nacos.routes[1].name=自定义服务2\nknife4j.nacos.routes[1].serviceName=service-order\nknife4j.nacos.routes[1].location=/v2/api-docs?group=default\nknife4j.nacos.routes[1].order=2\n```\n\n----------------------------------------\n\nTITLE: Add Knife4j Spring UI Dependency - XML\nDESCRIPTION: This XML snippet shows how to add the `knife4j-spring-ui` dependency to your Maven project. This dependency is used when your backend is Java+Spring and you are using Springfox for OpenAPI parsing, but you want a different Swagger UI skin. It provides the UI components for Knife4j.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-05-24-knife4j-2.0.3-issue.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>knife4j-spring-ui</artifactId>\n  <version>2.0.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultAdapterFactory Class\nDESCRIPTION: This TypeScript class implements the `SpecAdapterFactory` interface. Its `createAdapter` method takes a `SpecType` and returns a corresponding `SpecAdapter` instance. It supports Swagger2, OpenAPI3 and AsyncAPI, returning a DefaultAdapter if none of these type matches.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-core/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DefaultAdapterFactory implements SpecAdapterFactory{\n\n    /***\n     * 转换接口\n     */\n    createAdapter(type:SpecType):SpecAdapter{\n        if(type==Swagger2){\n            return new Swagger2Adapter();\n        }\n        if(type==OpenAPI3){\n            return new OpenAPI3Adapter();\n        }\n        if(type==AsyncAPI){\n            return new AsyncAPIAdapter();\n        }\n        return new DefaultAdapter();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing inner and outer name (YAML)\nDESCRIPTION: This YAML configuration changes both the inner and outer element names of the XML array to 'animal' and 'aliens' respectively.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_86\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Gateway Aggregation with Discover Mode in YAML\nDESCRIPTION: This YAML snippet demonstrates the minimum configuration required to enable gateway aggregation in `discover` mode. It enables the gateway component, sets the aggregation strategy to discover, enables discover mode, and specifies that the aggregated sub-services use the Swagger2 specification.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/gateway/knife4j-gateway-introduce.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  gateway:\n    # ① 第一个配置，开启gateway聚合组件\n    enabled: true\n    # ② 第二行配置，设置聚合模式采用discover服务发现的模式\n    strategy: discover\n    discover:\n      # ③ 第三行配置，开启discover模式\n      enabled: true\n      # ④ 第四行配置，聚合子服务全部为Swagger2规范的文档\n      version: swagger2\n\n```\n\n----------------------------------------\n\nTITLE: Adding knife4j-openapi2-spring-boot-starter Dependency\nDESCRIPTION: This XML snippet demonstrates adding the knife4j-openapi2-spring-boot-starter dependency to a Maven project. It specifies the groupId, artifactId, and version. The ${knife4j.version} placeholder needs to be replaced with the actual version number. This starter includes both the UI and backend enhancements for OpenAPI 2 in a Spring Boot application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j/README.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>\n    <version>${knife4j.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependency\nDESCRIPTION: This XML snippet shows how to add swagger-bootstrap-ui as a dependency to a Maven project. It specifies the groupId, artifactId, and version of the library, allowing Maven to download and manage the dependency. This is essential for using swagger-bootstrap-ui in a project that uses Maven for dependency management.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-10-31-swagger-bootstrap-ui-1.8.6-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.8.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Swagger Bootstrap UI\nDESCRIPTION: This XML snippet provides the Maven dependency coordinates for including swagger-bootstrap-ui version 1.7.7 in a project. It specifies the groupId, artifactId, and version required to add the library as a dependency. Including this snippet in the pom.xml file allows Maven to automatically download and manage the swagger-bootstrap-ui library and its dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-07-25-swagger-bootstrap-ui-1.7.7-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.7.7</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Model Builder Configuration - Java\nDESCRIPTION: This method configures the `Model` builder with basic attributes such as type name, ID, properties, and descriptions extracted from a ResolvedType and a ModelContext. The attributes are used to configure modelContext's builder. After that it calls schemaPluginsManager to create final model object.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nprivate Model modelBuilder(ResolvedType propertiesHost,\n                           Map<String, ModelProperty> properties,\n                           ModelContext modelContext) {\n    String typeName = typeNameExtractor.typeName(ModelContext.fromParent(modelContext, propertiesHost));\n    modelContext.getBuilder()\n        .id(typeName)\n        .type(propertiesHost)\n        .name(typeName)\n        .qualifiedType(simpleQualifiedTypeName(propertiesHost))\n        .properties(properties)\n        .description(\"\")\n        .baseModel(\"\")\n        .discriminator(\"\")\n        .subTypes(new ArrayList<ModelReference>());\n    return schemaPluginsManager.model(modelContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Ant Design Pro Project\nDESCRIPTION: This command starts the Ant Design Pro project, typically launching a development server. It relies on the scripts defined in the `package.json` file. The specific actions performed by this script depend on the project's configuration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-ui/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Disk Mode in Docker Compose (YAML)\nDESCRIPTION: This snippet demonstrates how to configure Knife4jInsight to use the Disk mode.  In this mode, Knife4jInsight reads OpenAPI specification files from a local directory. The volumes section maps a local directory to the container's data directory. The environment variables specify the data source as 'disk' and sets the directory to read from.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-install.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# 通过docker-compose可以快速部署knife4j服务\nversion: \"2.0\"\nservices:\n  knife4j:\n    container_name: knife4j-insight\n    restart: always\n    image: \"xiaoymin/knife4j:v2.0.1\"\n    network_mode: \"bridge\"\n    # 本地磁盘目录映射\n    volumes:\n      - D:\\Temp\\data:/knife4j/data\n    ports:\n      - \"10000:10000\"\n    # 指定配置属性模式为disk本地磁盘\n    environment:\n      - knife4j.source=disk\n      - knife4j.disk.dir=/knife4j/data\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Knife4j Cloud Auto-Registration\nDESCRIPTION: This YAML snippet configures the Knife4j Cloud auto-registration properties within a Spring Boot application. It defines parameters such as accessKey for authentication, code for project identification, server for the Knife4jCloud instance address, ssl for HTTPS configuration, and client for specifying a client address when a domain is used.  These parameters allow the application to automatically register with Knife4jCloud on startup.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jCloud.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  cloud:\n    ## 参考注册API中的accessKey\n    accessKey: JDUkd1YvSi5zZmUkMHYuSGNmN1hMazJPajJuMjNJVW43dWNyL2tyR3N4bzJaa1A2ZC5mSUlwNA\n    ## 项目编号\n    code: APITest\n    ## Knife4jCloud的对外域名地址\n    server: http://127.0.0.1:19011\n    ## 当前服务是否是HTTPS的,默认可以不配置,并且该参数默认为false\n    ssl: false\n    ## 参考注册API中的client属性,该参数可以不配置,只有在域名的情况下需要进行配置\n    client: http://test.domain.com\n```\n\n----------------------------------------\n\nTITLE: Configure ResourceHandlers with WebMvcConfigurer in Spring Boot (classpath*)\nDESCRIPTION: This code snippet demonstrates how to implement the `WebMvcConfigurer` interface in a Spring Boot application to add resource handlers for `doc.html` and `/webjars/**`.  This configuration allows Swagger-Bootstrap-UI's doc.html to be accessible. The addResourceLocations method uses the classpath* prefix.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/springboot-404.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\npublic class SwaggerBootstrapUiDemoApplication  implements WebMvcConfigurer{\n\n\t@Override\n\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\tregistry.addResourceHandler(\"doc.html\").addResourceLocations(\"classpath*:/META-INF/resources/\");\n\t\tregistry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath*:/META-INF/resources/webjars/\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: External Documentation Example in JSON\nDESCRIPTION: This JSON example defines an External Documentation object within an OpenAPI specification. It illustrates the use of the `description` and `url` fields to provide a link to external documentation related to the API.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Group Configuration (JSON)\nDESCRIPTION: This configuration shows how to configure Swagger groups in a `group.json` file, including the `basePath` attribute. This allows for aggregation of Swagger services, especially when APIs have different base paths.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-nginx.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"微服务-用户模块\",\n    \"url\": \"/service1/v2/api-docs?group=分组接口\",\n    \"swaggerVersion\": \"2.0\",\n    \"location\": \"/service1/v2/api-docs?group=分组接口\",\n    \"basePath\":\"/service1\"\n  },\n  {\n    \"name\": \"微服务-订单模块\",\n    \"url\": \"/service2/v2/api-docs?group=默认接口\",\n    \"swaggerVersion\": \"2.0\",\n    \"location\": \"/service2/v2/api-docs?group=默认接口\",\n    \"basePath\":\"/service2\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a MapStruct Mapper Interface\nDESCRIPTION: This Java interface defines a MapStruct mapper for converting between `Car` and `CarDTO` objects. The `@Mapper` annotation indicates that this is a MapStruct mapper.  The `@Mapping` annotation specifies that the `numberOfSeats` property of the `Car` object should be mapped to the `seatCount` property of the `CarDTO` object.  MapStruct will generate an implementation of this interface at compile time.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox2.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n/*** \n * \n * @since:spring-plugin-demo 1.0\n * @author <a href=\"mailto:xiaoymin@foxmail.com\">xiaoymin@foxmail.com</a> \n * 2019/05/21 21:40\n */\n@Mapper\npublic interface CarMapper {\n\n    CarMapper INSTANCE= Mappers.getMapper(CarMapper.class);\n\n    @Mapping(source = \"numberOfSeats\", target = \"seatCount\")\n    CarDTO carToCarDto(Car car);\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding swagger-bootstrap-ui Dependency (Old Version)\nDESCRIPTION: This XML snippet demonstrates how to add the swagger-bootstrap-ui dependency to your Maven project. It specifies the groupId, artifactId, and version of the dependency. This is an older version of the library.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>swagger-bootstrap-ui</artifactId>\n    <version>1.9.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: DiscoverClientRouteServiceConvert Process in JavaScript\nDESCRIPTION: This JavaScript snippet shows the `DiscoverClientRouteServiceConvert` class that processes `DiscoveryClientRouteDefinitionLocator` route definitions. It gets the route definitions, filters based on load balancing and service inclusion, and then parses the `RouteDefinition` to determine the `Path` prefix ContextPath rule.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/gateway/knife4j-gateway-introduce.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npublic class DiscoverClientRouteServiceConvert extends AbstactServiceRouterConvert {\n    \n    final DiscoveryClientRouteDefinitionLocator discoveryClientRouteDefinitionLocator;\n    final Knife4jGatewayProperties knife4jGatewayProperties;\n    @Override\n    public void process(ServiceRouterHolder holder) {\n        log.debug(\"Spring Cloud Gateway DiscoverClient process.\");\n        // 取默认子服务的路径规则\n        discoveryClientRouteDefinitionLocator.getRouteDefinitions()\n                .filter(routeDefinition -> ServiceUtils.startLoadBalance(routeDefinition.getUri()))\n                .filter(routeDefinition -> ServiceUtils.includeService(routeDefinition.getUri(), holder.getService(), holder.getExcludeService()))\n                .subscribe(routeDefinition -> parseRouteDefinition(holder, this.knife4jGatewayProperties.getDiscover(), routeDefinition.getPredicates(), routeDefinition.getUri().getHost(),\n                        routeDefinition.getUri().getHost()));\n    }\n    //others...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for swagger-bootstrap-ui\nDESCRIPTION: This XML snippet demonstrates how to add swagger-bootstrap-ui as a dependency in a Maven project. It includes the groupId, artifactId, and version of the library, allowing Maven to automatically download and manage the dependency.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-08-10-swagger-bootstrap-ui-1.8.0-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.8.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Directory structure for adding documentation\nDESCRIPTION: This snippet illustrates the required directory structure under the `data` directory for adding multiple documentation sources to Knife4jAggregationDesktop. Each directory (e.g., ROOT, project1) represents a separate documentation set.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-use.md#_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|------project1\n|------project2\n|------project3\n|-----—project4\n|-----—more...\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Types with Discriminator in JSON\nDESCRIPTION: This JSON snippet defines an OpenAPI schema that uses a discriminator object to handle polymorphic types. The `Pet` schema has a `petType` property, which acts as the discriminator. `Cat` and `Dog` schemas extend the `Pet` schema and provide specific properties.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DispatcherServlet Configuration in web.xml\nDESCRIPTION: This XML snippet configures DispatcherServlet mappings in web.xml for Swagger-related URLs. It maps /v2/api-docs, /swagger-resources, and /v2/api-docs-ext to the cmsMvc servlet, ensuring that requests to these endpoints are handled correctly.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/old.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<servlet>\n   <servlet-name>cmsMvc</servlet-name>\n   <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n   <init-param>\n   <param-name>contextConfigLocation</param-name>\n   <param-value>classpath:config/spring.xml</param-value>\n   </init-param>\n   <load-on-startup>1</load-on-startup>\n</servlet>\n<!--默认配置,.htm|.do|.json等等配置-->\n<servlet-mapping>\n\t<servlet-name>cmsMvc</servlet-name>\n \t<url-pattern>*.htm</url-pattern>\n</servlet-mapping>\n<!-- 配置swagger-bootstrap-ui的url请求路径-->\n<servlet-mapping>\n   <servlet-name>cmsMvc</servlet-name>\n   <url-pattern>/v2/api-docs</url-pattern>\n</servlet-mapping>\n<servlet-mapping>\n   <servlet-name>cmsMvc</servlet-name>\n   <url-pattern>/swagger-resources</url-pattern>\n</servlet-mapping>\n<servlet-mapping>\n   <servlet-name>cmsMvc</servlet-name>\n   <url-pattern>/v2/api-docs-ext</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Spring Security Annotations with Knife4j\nDESCRIPTION: This Java code snippet demonstrates how Spring Security annotations (PostAuthorize, PostFilter, PreAuthorize, PreFilter) can be used within a Spring Boot controller and how Knife4j incorporates these annotations into API documentation. The controller defines a /hello/security endpoint, secured using method-level and class-level annotations. Knife4j displays these annotations alongside the API documentation, providing insights into security requirements.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/springSecurity.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@RestController\n@RequestMapping(\"/hello\")\n@PostAuthorize(\"hasAuthority('class')\")\n@PostFilter(\"hasAuthority('class')\")\n@PreAuthorize(\"hasAuthority('class')\")\n@PreFilter(\"hasAuthority('class')\")\npublic class HelloController {\n\n    @GetMapping(\"/security\")\n    @PostAuthorize(\"hasAuthority('method')\")\n    @PostFilter(\"hasAuthority('method')\")\n    @PreAuthorize(\"hasAuthority('method')\")\n    @PreFilter(\"hasAuthority('method')\")\n    @ApiOperation(value = \"\", notes = \"Spring Security注解追加到接口描述\")\n    public String security() {\n        return \"hello security\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Message Converters in Spring Boot\nDESCRIPTION: This code snippet demonstrates how to configure message converters in a Spring Boot application to prevent OpenAPI responses from being Base64 encoded. It adds a ByteArrayHttpMessageConverter to the list of converters, ensuring that byte arrays are handled correctly by Springdoc. This is crucial to avoid interface display issues in Knife4j.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/v4/knife4j-base64-response.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n@Configuration\npublic class CommonWebMvcConfig implements WebMvcConfigurer {\n    \n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        // 自定义convert\n\t\tconverters.add(fastJsonHttpMessageConverters());\n\t\t//需要追加byte，否则springdoc-openapi接口会响应Base64编码内容，导致接口文档显示失败\n\t\t// https://github.com/springdoc/springdoc-openapi/issues/2143\n        // 解决方案\n\t\tconverters.add(new ByteArrayHttpMessageConverter());\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring default-flat-param-object in springdoc-openapi\nDESCRIPTION: This YAML snippet configures the `default-flat-param-object` property to `true` within the `springdoc` section. This setting instructs springdoc-openapi to treat ParameterObject parameters as flattened parameters, eliminating the need for the `@ParameterObject` annotation on each endpoint.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/v4/knife4j-parameterobject-flat-param.md#_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nspringdoc:\n  # 默认是false，需要设置为true\n  default-flat-param-object: true\n```\n\n----------------------------------------\n\nTITLE: Cloud Mode: Directory Structure\nDESCRIPTION: Illustrates the directory structure for Cloud mode. This mode utilizes a `cloud.properties` file within a project directory to configure remote OpenAPI specifications.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_5\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------cloud.properties\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Path in Disk Mode\nDESCRIPTION: This snippet shows how to configure the `servicePath` attribute for a route in Disk mode. This allows to specify a base path for the service, affecting how the API is accessed. The configuration is within the `disk.properties` file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-test.mdx#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.disk.routes[0].name=测试平台\nknife4j.disk.routes[0].host=http://knife4j.xiaominfo.com\nknife4j.disk.routes[0].location=test.json\nknife4j.disk.routes[0].servicePath=/niubia\n```\n\n----------------------------------------\n\nTITLE: OperationReader.read Method - Java\nDESCRIPTION: This snippet shows the `OperationReader.read` method, which generates a list of `Operation` objects. It iterates through supported HTTP request methods, creates an `OperationContext` for each, and uses `pluginsManager.operation` to construct the `Operation` object using plugins. It also sorts the operations based on the `operationOrdering` defined in the `RequestMappingContext`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox12.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic List<Operation> read(RequestMappingContext outerContext) {\n\n    List<Operation> operations = newArrayList();\n\t\t\n    Set<RequestMethod> requestMethods = outerContext.getMethodsCondition();\n    Set<RequestMethod> supportedMethods = supportedMethods(requestMethods);\n\n    //Setup response message list\n    Integer currentCount = 0;\n    //遍历获取当前支持的接口类型\n    for (RequestMethod httpRequestMethod : supportedMethods) {\n      OperationContext operationContext = new OperationContext(new OperationBuilder(nameGenerator),\n          httpRequestMethod,\n          outerContext,\n          currentCount);\n\t\t//调用OperationPlugin插件，构造Operation对象\n      Operation operation = pluginsManager.operation(operationContext);\n        //添加\n      if (!operation.isHidden()) {\n        operations.add(operation);\n        currentCount++;\n      }\n    }\n    Collections.sort(operations, outerContext.operationOrdering());\n\n    return operations;\n  }\n```\n\n----------------------------------------\n\nTITLE: Swagger Resources Endpoint Response Format\nDESCRIPTION: This JSON snippet shows the expected response format for the `swagger-resources` endpoint. This endpoint returns a list of Swagger API definitions, including their names, URLs, Swagger versions, and locations. It should be a JSON array containing objects with `name`, `url`, `swaggerVersion`, and `location` properties.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swaggerResourceInvalid.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"name\": \"1.8.X版本接口\",\n        \"url\": \"/v2/api-docs?group=1.8.X版本接口\",\n        \"swaggerVersion\": \"2.0\",\n        \"location\": \"/v2/api-docs?group=1.8.X版本接口\"\n    },\n    {\n        \"name\": \"1.9.X版本接口\",\n        \"url\": \"/v2/api-docs?group=1.9.X版本接口\",\n        \"swaggerVersion\": \"2.0\",\n        \"location\": \"/v2/api-docs?group=1.9.X版本接口\"\n    },\n    {\n        \"name\": \"默认接口\",\n        \"url\": \"/v2/api-docs?group=默认接口\",\n        \"swaggerVersion\": \"2.0\",\n        \"location\": \"/v2/api-docs?group=默认接口\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: XML name attribute impact (YAML)\nDESCRIPTION: This YAML configuration shows how the outer 'name' attribute for the XML array has no effect unless 'wrapped' is set to true.  Each item is still rendered as 'animal'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_79\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration XML\nDESCRIPTION: This XML snippet provides the Maven dependency configuration for including swagger-bootstrap-ui version 1.7.5 in a project. It specifies the groupId, artifactId, and version for dependency management.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-07-16-swagger-bootstrap-ui-1.7.5-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.7.5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating a new RequestMappingContext with known models (Java)\nDESCRIPTION: This method creates a new instance of `RequestMappingContext` by copying the existing one and updating the `knownModels` map. This ensures that the model information is carried over to subsequent processing steps. The method takes a map of known models as input and returns a new `RequestMappingContext` object with the updated model information.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic RequestMappingContext withKnownModels(Map<String, Model> knownModels) {\n    return new RequestMappingContext(documentationContext, handler,\n                                     operationModelContextsBuilder, requestMappingPattern, knownModels);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Swagger JSON Content\nDESCRIPTION: This JSON snippet represents a sample `swagger.json` file, containing the Swagger definition for the API. It includes information such as the Swagger version, API description, contact details, host, and base path.  The content would be the response from the `/v2/api-docs` endpoint of a Swagger-enabled application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-static.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"description\": \"<div style='font-size:14px;color:red;'>swagger-bootstrap-ui-demo RESTful APIs</div>\",\n    \"version\": \"1.0\",\n    \"title\": \"swagger-bootstrap-ui很棒~~~！！！\",\n    \"termsOfService\": \"http://www.group.com/\",\n    \"contact\": {\n      \"name\": \"group@qq.com\"\n    }\n  },\n  \"host\": \"127.0.0.1:8999\",\n  \"basePath\": \"/\"\n   //more.....\n}\n```\n\n----------------------------------------\n\nTITLE: Install NPM Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the knife4j-vue project. It's a prerequisite for running and debugging the frontend code.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/community/contributing.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Manual Route Aggregation with Swagger2 and OpenAPI3 - YAML\nDESCRIPTION: This snippet demonstrates the manual configuration of routes for gateway aggregation, supporting both Swagger2 and OpenAPI3 specifications. The `routes` list defines individual routes, specifying the service name, URL to the API documentation, and the context path.  This provides explicit control over which services and API versions are aggregated.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.3.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n  gateway:\n    enabled: true\n    strategy: manual\n    routes:\n      # swagger2\n      - name: 订单openapi2\n        service-name: user-service\n        url: /order-service-openapi2/v2/api-docs?group=default\n        context-path: /\n      # openapi3\n      - name: 订单openapi3\n        service-name: order-service\n        url: /order/v3/api-docs/default\n        context-path: /order\n```\n\n----------------------------------------\n\nTITLE: Disk mode properties configuration\nDESCRIPTION: This snippet displays the configuration of `disk.properties` file used for customizing the display names of OpenAPI documents in Disk mode. The `knife4j.disk.routes` properties define the names and locations of the documentation files.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-use.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.disk.routes[0].name=用户服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk.routes[0].location=userOpenApi.json\n\nknife4j.disk.routes[1].name=订单服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk.routes[1].location=orderOpenApi.json\n\nknife4j.disk.routes[2].name=商品服务\n# 此处location需要注意，只需要配置同级的文件名称即可\nknife4j.disk.routes[2].location=goodsOpenApi.yml\n```\n\n----------------------------------------\n\nTITLE: XML output when changing inner and outer name\nDESCRIPTION: This XML shows the output with the outer element named 'aliens' and the inner element named 'animal'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_87\n\nLANGUAGE: xml\nCODE:\n```\n<aliens>\n  <animal>value</animal>\n  <animal>value</animal>\n</aliens>\n```\n\n----------------------------------------\n\nTITLE: Adding SwaggerBootstrapUi Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the SwaggerBootstrapUi dependency to a Maven project. It specifies the groupId, artifactId, and version of the dependency.  The version should be replaced with the desired version of SwaggerBootstrapUi.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/old.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>swagger-bootstrap-ui</artifactId>\n  <version>${lastVersion}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Incorrect OpenAPI @Bean Configuration (Java)\nDESCRIPTION: This Java code snippet represents an incorrect way to configure OpenAPI using `@Bean`. While it adds the Security Scheme, it doesn't apply it to specific operations, meaning that the Authorization header will not be visible in the Knife4j UI's debugging interface.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/add-authorization-header.mdx#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic OpenAPI customOpenAPI() {\n    return new OpenAPI()\n            .info(new Info()\n                    .title(\"XXX用户系统API\")\n                    .version(\"1.0\")\n\n                    .description( \"Knife4j集成springdoc-openapi示例\")\n                    .termsOfService(\"http://doc.xiaominfo.com\")\n                    .license(new License().name(\"Apache 2.0\")\n                            .url(\"http://doc.xiaominfo.com\"))\n                    ).addSecurityItem(new SecurityRequirement().addList(HttpHeaders.AUTHORIZATION))\n            .components(new Components().addSecuritySchemes(HttpHeaders.AUTHORIZATION,new SecurityScheme()\n                    .name(HttpHeaders.AUTHORIZATION).type(SecurityScheme.Type.HTTP).scheme(\"bearer\")));\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger2DocumentationConfiguration Class Java\nDESCRIPTION: This configuration class imports SpringfoxWebMvcConfiguration and SwaggerCommonConfiguration. It also scans specific packages using @ComponentScan to register necessary beans for Swagger 2 documentation generation. ConditionalOnWebApplication ensures it's only enabled in web applications.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox4.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@Import({ SpringfoxWebMvcConfiguration.class, SwaggerCommonConfiguration.class })\n@ComponentScan(basePackages = {\n    \"springfox.documentation.swagger2.mappers\"\n})\n@ConditionalOnWebApplication\npublic class Swagger2DocumentationConfiguration {\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Flow configuration (YAML)\nDESCRIPTION: This YAML defines an OAuth2 security scheme with both implicit and authorization code flows. It specifies the authorization URL, token URL, and scopes for each flow.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_100\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows: \n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets \n```\n\n----------------------------------------\n\nTITLE: Defining a string array query parameter in JSON\nDESCRIPTION: This JSON defines a query parameter that accepts an array of strings.  The 'style' is set to 'form' and 'explode' is set to true, meaning multiple values are passed as separate query parameters.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Changing outer element only (YAML)\nDESCRIPTION: This YAML configuration changes only the outer element name to 'aliens' while keeping the inner element's default behavior.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_89\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition\nDESCRIPTION: This code snippet shows the definition of the `TSPropertySignatureBuilder` interface, which is part of the babel/generator library and used in Knife4j's script generation functionality. It defines the structure for creating TypeScript property signatures, including optional comments, initializer, key, location, optional flag, readonly flag, and type annotation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/use-claude-fixed-issue.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TSPropertySignatureBuilder {\n    (key: K.ExpressionKind, typeAnnotation?: K.TSTypeAnnotationKind | null, optional?: boolean): namedTypes.TSPropertySignature;\n    from(params: {\n        comments?: K.CommentKind[] | null;\n        computed?: boolean;\n        initializer?: K.ExpressionKind | null;\n        key: K.ExpressionKind;\n        loc?: K.SourceLocationKind | null;\n        optional?: boolean;\n        readonly?: boolean;\n        typeAnnotation?: K.TSTypeAnnotationKind | null;\n    }): namedTypes.TSPropertySignature;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docket with OpenApiExtensionResolver in Java\nDESCRIPTION: This Java snippet shows how to configure the Docket object using the OpenApiExtensionResolver to apply the extended properties. It is required when using `knife4j-openapi2-spring-boot-starter`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/forbidSearch.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableSwagger2WebMvc\npublic class SwaggerConfiguration {\n\n   private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public SwaggerConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi2\")\n    public Docket defaultApi2() {\n        String groupName=\"2.X版本\";\n        Docket docket=new Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(groupName)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.swagger.bootstrap.ui.demo.new2\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildSettingExtensions());\n        return docket;\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                //.title(\"swagger-bootstrap-ui-demo RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.xx.com/\")\n                .contact(\"xx@qq.com\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Students with FluentIterable Java\nDESCRIPTION: Demonstrates how to use Guava's `FluentIterable` to filter a list of `Student` objects based on their `classRoom` attribute.  This provides a concise way to iterate and filter collections. It shows how to select students only from `班级1` class.  The result is a `List<Student>` containing only the students who belong to the specified classroom.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox19.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    List<Student> list= Lists.newArrayList();\n    list.add(new Student(\"学生A\",12,\"班级1\"));\n    list.add(new Student(\"学生B\",13,\"班级2\"));\n    list.add(new Student(\"学生C\",12,\"班级1\"));\n    list.add(new Student(\"学生D\",15,\"班级3\"));\n    list.add(new Student(\"学生E\",12,\"班级1\"));\n    list.add(new Student(\"学生F\",13,\"班级2\"));\n    list.add(new Student(\"学生G\",11,\"班级1\"));\n    list.add(new Student(\"学生H\",15,\"班级2\"));\n    list.add(new Student(\"学生I\",11,\"班级3\"));\n    list.add(new Student(\"学生J\",12,\"班级1\"));\n    list.add(new Student(\"学生W\",16,\"班级1\"));\n    list.add(new Student(\"学生Q\",13,\"班级4\"));\n    //arrmapTest(list);\n    fluter(list);\n\n}\n\nstatic void fluter(List<Student> list){\n    //过滤\n    List<Student> studentList=FluentIterable.from(list).filter(new Predicate<Student>() {\n        @Override\n        public boolean apply(Student input) {\n            return input.getClassRoom().equals(\"班级1\");\n        }\n    }).toList();\n    for (Student sd:studentList){\n        System.out.println(sd.toString());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the Knife4j project using Yarn package manager. Ensure Yarn is installed on your system before running this command. This is the first step in setting up the project.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-vue3/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: ApiDescription Class Definition - Java\nDESCRIPTION: This code snippet shows the structure of the `ApiDescription` class, including fields for group name, path, description, a list of `Operation` objects (representing different HTTP methods for the same path), and a flag indicating whether the API is hidden.  It provides a basic overview of how Springfox represents an API endpoint's description.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox12.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ApiDescription {\n  //分组名称\n  private final String groupName;\n  //路径\n  private final String path;\n  //描述\n  private final String description;\n  //操作信息集合\n  //一个接口有可能存在多个请求方法类型,即：GET、POST、PUT、DELETE等,所以这里也是1：N的映射关系\n  private final List<Operation> operations;\n  //是否隐藏\n  private final Boolean hidden;\n    //getter and setters....\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpecAdapter Interface\nDESCRIPTION: This TypeScript interface defines the contract for specification adapters. It includes a `convert` method that takes a source object (representing an API specification) and transforms it into a `Knife4jOpenAPI` object. This interface enables a consistent way to handle different API specification formats.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-core/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SpecAdapter{\n\n    /***\n     * 转换接口\n     */\n    convert(source:any):Knife4jOpenAPI;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Eureka Server Java\nDESCRIPTION: This snippet demonstrates how to enable the Eureka server using the `@EnableEurekaServer` annotation. The `@SpringBootApplication` annotation indicates this is a Spring Boot application.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-gateway.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@EnableEurekaServer\n@SpringBootApplication\npublic class ServiceServerApplication {\n    \n    \n}\n```\n\n----------------------------------------\n\nTITLE: Data Directory Structure\nDESCRIPTION: Illustrates the structure of the data directory. It shows the ROOT directory along with example project directories, each representing a separate OpenAPI documentation set.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_2\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|------project1\n|------project2\n|------project3\n|-----—project4\n|-----—more...\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Swagger Bootstrap UI\nDESCRIPTION: This XML snippet shows the Maven dependency required to include swagger-bootstrap-ui version 1.7 in a project.  It specifies the groupId, artifactId, and version of the library.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2017-12-18-swagger-bootstrap-ui-1.7-issue.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.7</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Complex Array Response Example - YAML\nDESCRIPTION: This YAML example represents a response object for a complex object array. It specifies the content type as application/json and includes a schema definition with an array type and a reference to a VeryComplexType schema for the items.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A complex object array response\ncontent: \n  application/json:\n    schema: \n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Parameter Debugging - YAML\nDESCRIPTION: This YAML snippet configures Knife4j to enable dynamic request parameter debugging. The `enableDynamicParameter` property controls whether dynamic parameter debugging is enabled.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n\tenable: true\n\tsetting:\n\t\t# 开启动态请求参数调试,默认为false(不开启)\n\t\tenableDynamicParameter: true\n```\n\n----------------------------------------\n\nTITLE: Defining a free-form query parameter in JSON\nDESCRIPTION: This JSON defines a free-form query parameter using an object schema with 'additionalProperties' to allow for undefined parameters of a specific type (integer).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changing outer element only (JSON)\nDESCRIPTION: This JSON configuration changes only the outer element name to 'aliens' while keeping the inner element's default behavior.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Example\nDESCRIPTION: This HTTP request example demonstrates a POST request with a JSON body and specific headers, showcasing how to structure a request for subscription.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_62\n\nLANGUAGE: http\nCODE:\n```\nPOST /subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"http://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"http://clientdomain.com/fast\",\n    \"http://clientdomain.com/medium\",\n    \"http://clientdomain.com/slow\"\n  ] \n}\n\n201 Created\nLocation: http://example.org/subscription/1\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j Cloud Auto-Registration\nDESCRIPTION: This XML snippet defines the Maven dependency for the knife4j-discovery-spring-boot-starter artifact. This dependency allows a Spring Boot application to automatically register its Swagger documentation with a Knife4jCloud instance. It requires specifying the correct version, which should match the Knife4jCloud main version, from Maven Central.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jCloud.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-discovery-spring-boot-starter</artifactId>\n    <!--在引用时请在maven中央仓库(http://search.maven.org)搜索最新版本号-->\n    <!-- 该版本必须和Knife4jCloud主版本一致-->\n    <version>1.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Dependency (Springdoc-Openapi) - XML\nDESCRIPTION: This XML snippet adds the Knife4j dependency to a Maven project when using Springdoc-Openapi. It specifies the `knife4j-springdoc-ui` artifact and version 3.0.2. This version provides only UI functionality without enhanced features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-springdoc-ui</artifactId>\n    <!--在引用时请在maven中央仓库搜索3.X最新版本号-->\n    <version>3.0.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Nacos Mode: nacos.properties Configuration\nDESCRIPTION: Shows the configuration properties for Nacos mode using `nacos.properties`. This allows fetching OpenAPI specifications from services registered in Nacos. It defines the Nacos service URL, service name, and location of the OpenAPI specification.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.nacos.serviceUrl=http://localhost:10000/nacos/\nknife4j.nacos.routes[0].name=用户\nknife4j.nacos.routes[0].serviceName=userService\nknife4j.nacos.routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Nacos模式\n\n```\n\n----------------------------------------\n\nTITLE: Configure Spring Static Resource Mapping (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure Spring's static resource mapping to resolve 404 errors when accessing doc.html.  It maps the /META-INF/resources/ and /META-INF/resources/webjars/ directories to the doc.html and /webjars/** URLs, respectively. This ensures that the necessary static resources for Knife4j are accessible.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/springmvc-404.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<mvc:resources location=\"classpath:/META-INF/resources/\" mapping=\"doc.html\"/>\n<mvc:resources location=\"classpath:/META-INF/resources/webjars/\" mapping=\"/webjars/**\"/>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for swagger-bootstrap-ui\nDESCRIPTION: Maven dependency to include swagger-bootstrap-ui version 1.8.1 in a project. It defines the groupId, artifactId, and version required to add the library as a dependency in a Maven-managed project.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-08-14-swagger-bootstrap-ui-1.8.1-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.8.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Media Types Example\nDESCRIPTION: This snippet provides examples of media types used in the OpenAPI Specification.  These media types define the format of the data being transmitted. The media types should conform to RFC6838 standards.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_0\n\nLANGUAGE: apl\nCODE:\n```\ntext/plain; charset=utf-8\napplication/json\napplication/vnd.github+json\napplication/vnd.github.v3+json\napplication/vnd.github.v3.raw+json\napplication/vnd.github.v3.text+json\napplication/vnd.github.v3.html+json\napplication/vnd.github.v3.full+json\napplication/vnd.github.v3.diff\napplication/vnd.github.v3.patch\n```\n\n----------------------------------------\n\nTITLE: Adding Knife4j Springdoc UI Dependency (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the Knife4j Springdoc UI dependency to a Maven project. This dependency is used when the underlying framework is Springdoc-OpenAPI instead of Springfox.  It is crucial to use the latest 3.x version available in the Maven Central Repository. This version does not contain all of Knife4j's enhanced features and is primarily a UI component.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/upgrading/upgrading_v2.x.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-springdoc-ui</artifactId>\n    <!--在引用时请在maven中央仓库搜索3.X最新版本号-->\n    <version>3.0.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Header Object Example (Integer) in YAML\nDESCRIPTION: This YAML example defines a header object with an integer schema, including a description of its purpose.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_70\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: The number of allowed requests in the current period\nschema:\n  type: integer\n```\n\n----------------------------------------\n\nTITLE: Defining Single Server Object in YAML\nDESCRIPTION: This YAML snippet defines a single Server object with URL and description properties. It represents a development server.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://development.gigantic-server.com/v1\ndescription: Development server\n```\n\n----------------------------------------\n\nTITLE: Response Object Example (Status Code 200)\nDESCRIPTION: This JSON snippet demonstrates a response object for a status code of 200, defining the response description and content type as application/json. It includes a schema reference to a Pet object defined in the components/schemas section.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger2Config Configuration in Java\nDESCRIPTION: This Java code shows an example of a Swagger2Config configuration class. It configures a Docket bean to define the API documentation, including the API info, base package, and paths.  It uses annotations like @Configuration and @EnableSwagger2.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/old.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfiguration {\n\n @Bean\n public Docket createRestApi() {\n     return new Docket(DocumentationType.SWAGGER_2)\n     .apiInfo(apiInfo())\n     .select()\n     .apis(RequestHandlerSelectors.basePackage(\"com.bycdao.cloud\"))\n     .paths(PathSelectors.any())\n     .build();\n }\n\n private ApiInfo apiInfo() {\n     return new ApiInfoBuilder()\n     .title(\"swagger-bootstrap-ui RESTful APIs\")\n     .description(\"swagger-bootstrap-ui\")\n     .termsOfServiceUrl(\"http://localhost:8999/\")\n     .contact(\"developer@mail.com\")\n     .version(\"1.0\")\n     .build();\n }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript AfterScript Example for JWT Token Handling\nDESCRIPTION: This JavaScript code snippet demonstrates the AfterScript feature in Knife4j. It extracts a token from a successful login response and sets it as a global header for subsequent requests, automating the process of including the token in each API call.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-10-26-knife4j-2.0.6-issue.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar code=response.data.code;\nif(code==8200){\n    //判断,如果服务端响应code是8200才执行操作\n    //获取token\n    var token=response.data.data.token;\n    //1、如何参数是Header，则设置全局Header\n    ke.global.setHeader(\"token\",token);\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Configuration for Global Header Parameter with Allowable Values\nDESCRIPTION: This Java code snippet configures a global header parameter with predefined allowable values using Springfox's Docket builder. It demonstrates how to add a header parameter named 'header-test' with a dropdown selection of '下拉1' and '下拉2'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-10-26-knife4j-2.0.6-issue.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nparameters.add(new ParameterBuilder().name(\"header-test\").description(\"balabala\")\n                .modelRef(new ModelRef(\"string\"))\n                .parameterType(\"header\")\n                .allowableValues(new AllowableListValues(Arrays.asList(\"下拉1\", \"下拉2\"), \"string\"))\n                .required(false).order(1).build());\nnew Docket(DocumentationType.SWAGGER_2)\n                .host(\"https://www.baidu.com\")\n                .apiInfo(apiInfo())\n                .groupName(\"2.X版本\")\n                .globalOperationParameters(parameters)\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Yarn\nDESCRIPTION: This command executes the project's test suite. Ensure all tests pass before deploying to production.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-vue/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nyarn run test\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This XML snippet provides the Maven dependency configuration needed to include the swagger-bootstrap-ui library in a Maven project. It specifies the groupId, artifactId, and version of the dependency. Add this to your project's pom.xml file to use swagger-bootstrap-ui.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2017-09-01-swagger-bootstrap-ui-1.5-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: String Response Example - JSON\nDESCRIPTION: This JSON snippet shows a response object for a simple string response. The content type is set to text/plain, and the schema specifies the type as string.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: GenericEnumPropertySupport Class (Java)\nDESCRIPTION: This class extends `PropertyEditorSupport` and provides a generic way to handle enum property editing. It uses the `CommonFormEnumParser` interface to convert string inputs to enum instances. This class is used to register custom editors for enum types with the `WebDataBinder`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/handler-enum.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n@AllArgsConstructor\npublic class GenericEnumPropertySupport <T extends Enum<T>> extends PropertyEditorSupport {\n    final Class<T> enumClass;\n\n    @Override\n    public void setAsText(String text) throws IllegalArgumentException {\n        if (enumClass.isEnum()){\n            //必须是枚举\n            if (CommonFormEnumParser.class.isAssignableFrom(enumClass)){\n                T[] values=enumClass.getEnumConstants();\n                if (values!=null&&values.length>0){\n                    // 因为都实现了CommonFormEnumParser接口，随便取一个枚举元素都行\n                    CommonFormEnumParser<T> one= (CommonFormEnumParser<T>) values[0];\n                    setValue(one.fromValue(text));\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Development Server with Yarn\nDESCRIPTION: This command starts the development server for the Knife4j project using Yarn. It typically enables hot-reloading and other development-friendly features. The application is accessible at http://localhost:5173/doc.html.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-vue3/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Node Modules with yarn\nDESCRIPTION: This command installs the required node modules for the Ant Design Pro project using yarn.  It fetches all dependencies specified in the `package.json` file.  Running this command is a prerequisite for starting and building the project. This is an alternative to `npm install`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-ui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: MobileIncrementV1 Class\nDESCRIPTION: Defines the `MobileIncrementV1` class, which implements the `MobileIncrementBusiness` interface. This class provides the first version of the mobile increment system.  It logs the recharge information, including the phone number and amount.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n/***\\n * 第一版本的充值系统\\n * @since:spring-plugin-demo 1.0\\n * @author <a href=\"mailto:xiaoymin@foxmail.com\">xiaoymin@foxmail.com</a> \\n * 2019/05/22 14:44\\n */\npublic class MobileIncrementV1 implements MobileIncrementBusiness {\n\n    Logger logger= LoggerFactory.getLogger(MobileIncrementV1.class);\n\n    @Override\n    public void increment(MobileCustomer mobileCustomer, int money) {\n        logger.info(\"给{}充值电话费,充值金额:{}\",mobileCustomer.getTel(),money);\n        logger.info(\"充值完成.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SpringAddtionalModel Class\nDESCRIPTION: This class encapsulates the scanned models. It contains a `first` ResolvedType and a `remaining` list of ResolvedType objects. This structure is designed to work seamlessly with the `additionalModels` method of the Docket class, which accepts a single first argument and a variable number of remaining arguments.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox11.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class SpringAddtionalModel {\n\n    /***\n     * 第一个Type\n     */\n    private ResolvedType first;\n\n    /***\n     * 剩余\n     */\n    private List<ResolvedType> remaining=new ArrayList<>();\n\n\n    public ResolvedType[] getRemaining() {\n        if (!remaining.isEmpty()){\n            return remaining.toArray(new ResolvedType[]{});\n        }\n        return new ResolvedType[]{};\n    }\n\n    public ResolvedType getFirst() {\n        return first;\n    }\n\n    public void setFirst(ResolvedType first) {\n        this.first = first;\n    }\n\n    public void add(ResolvedType type){\n        remaining.add(type);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in YAML\nDESCRIPTION: This YAML snippet defines a License object with name and URL properties. It specifies the license used by the API.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: Apache 2.0\nurl: https://www.apache.org/licenses/LICENSE-2.0.html\n```\n\n----------------------------------------\n\nTITLE: Student Class Definition Java\nDESCRIPTION: Defines a simple `Student` class with properties for name, age, and classRoom. This class is used in subsequent examples to demonstrate the functionality of Guava's `ArrayListMultimap` and `FluentIterable`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox19.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Student {\n\n    private String name;\n\n    private Integer age;\n    /***\n     * 班级\n     */\n    private String classRoom;\n    //getter setter\n}\n```\n\n----------------------------------------\n\nTITLE: Info Object JSON Example\nDESCRIPTION: This snippet shows an example of an Info Object represented in JSON format, providing metadata about an API.  The Info Object includes fields such as title, description, termsOfService, contact, license, and version.  These fields provide descriptive information that can be used by tools for documentation and editing.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Sample Pet Store App\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"http://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"http://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disk Mode Directory Structure\nDESCRIPTION: Explains the directory structure for Disk mode configuration. It contains the ROOT directory with JSON files representing OpenAPI specifications.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_3\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------userOpenApi.json\n|--------orderOpenApi.json\n\n```\n\n----------------------------------------\n\nTITLE: Defining 64-bit integer array header parameter in YAML\nDESCRIPTION: This YAML snippet is the equivalent of the previous JSON example, defining a header parameter that accepts an array of 64-bit integers.  The 'style' is 'simple'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n```\n\n----------------------------------------\n\nTITLE: Parameter Example in YAML\nDESCRIPTION: Defines an example for a parameter, specifying its name, location (in), schema, and examples. The example uses a reference to an external example defined elsewhere in the OpenAPI document.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_64\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  - name: 'zipCode'\n    in: 'query'\n    schema:\n      type: 'string'\n      format: 'zip-code'\n    examples:\n      zip-example: \n        $ref: '#/components/examples/zip-example'\n```\n\n----------------------------------------\n\nTITLE: Filtering Students with Java 8 Streams Java\nDESCRIPTION: Demonstrates filtering a list of `Student` objects using Java 8 streams, achieving the same result as the `FluentIterable` example. It showcases the equivalent Java 8 code for filtering by classroom. It takes a `List<Student>` and filters it to only contain students from \"班级1\".\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox19.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nList<Student> li=list.stream().filter(student -> student.getClassRoom().equals(\"班级1\")).collect(Collectors.toList());\nfor (Student sd:li){\n    System.out.println(sd.toString());\n}\n```\n\n----------------------------------------\n\nTITLE: Docket.ignoredParameterTypes() Method - Java\nDESCRIPTION: This code shows the `ignoredParameterTypes` method from the `Docket` class. It allows specifying classes to be ignored during Swagger documentation generation, avoiding the need to annotate each parameter individually. Requires Springfox dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox21.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n/**\n   * Adds ignored controller method parameter types so that the framework does not generate swagger model or parameter\n   * information for these specific types.\n   * e.g. HttpServletRequest/HttpServletResponse which are already included in the pre-configured ignored types.\n   *   *\n   * @param classes the classes to ignore\n   * @return this Docket\n   * @see springfox.documentation.spi.service.contexts.Defaults#defaultIgnorableParameterTypes()\n   */\npublic Docket ignoredParameterTypes(Class... classes) {\n    this.ignorableParameterTypes.addAll(Arrays.asList(classes));\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: vkBeautify Usage Examples\nDESCRIPTION: This snippet provides usage examples for the vkBeautify library, demonstrating how to pretty print and minify XML, JSON, CSS, and SQL. It shows how to call the beautify and minify functions for each format, including the optional parameters for indentation and comment preservation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j/knife4j-openapi2-ui/src/main/resources/webjars/js/chunk-069eb437.355c4fb0.js.LICENSE.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvkbeautify.xml(text); // pretty print XML\nvkbeautify.json(text, 4 ); // pretty print JSON\nvkbeautify.css(text, '. . . .'); // pretty print CSS\nvkbeautify.sql(text, '----'); // pretty print SQL\n\nvkbeautify.xmlmin(text, true);// minify XML, preserve comments\nvkbeautify.jsonmin(text);// minify JSON\nvkbeautify.cssmin(text);// minify CSS, remove comments ( default )\nvkbeautify.sqlmin(text);// minify SQL\n```\n\n----------------------------------------\n\nTITLE: Import ApiLink Component\nDESCRIPTION: This snippet imports the ApiLink component from the specified path. This component is likely used to create links to API documentation or related resources within the Knife4j Aggregation Desktop.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/desktop.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiLink from '@site/src/components/ApiLink';\n```\n\n----------------------------------------\n\nTITLE: Check Linux Distribution (Shell)\nDESCRIPTION: This command retrieves information about the Linux distribution installed on the server. It's used to confirm the operating system and its version, ensuring compatibility with the deployment process. The output provides details such as the distributor ID, description, release version, and codename.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/knife4j-admin-deploy.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[root@iZbt ~]# lsb_release -a\nLSB Version:    :core-4.1-amd64:core-4.1-noarch\nDistributor ID:    CentOS\nDescription:    CentOS Linux release 7.4.1708 (Core) \nRelease:    7.4.1708\nCodename:    Core\n```\n\n----------------------------------------\n\nTITLE: Mapping Documentation to Swagger\nDESCRIPTION: This Java code snippet demonstrates how Springfox maps a Documentation object to a Swagger object. It shows the conversion of various components like vendor extensions, schemes, paths, definitions, security definitions, API information, base path, and tags from the Springfox representation to the Swagger representation. This process involves mapping various Springfox-specific structures to their Swagger equivalents.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic Swagger mapDocumentation(Documentation from) {\n    if ( from == null ) {\n        return null;\n    }\n\n    Swagger swagger = new Swagger();\n\n    swagger.setVendorExtensions( vendorExtensionsMapper.mapExtensions( from.getVendorExtensions() ) );\n    swagger.setSchemes( mapSchemes( from.getSchemes() ) );\n    //path转换\n    swagger.setPaths( mapApiListings( from.getApiListings() ) );\n    swagger.setHost( from.getHost() );\n    swagger.setDefinitions( modelMapper.modelsFromApiListings( from.getApiListings() ) );\n    swagger.setSecurityDefinitions( securityMapper.toSecuritySchemeDefinitions( from.getResourceListing() ) );\n    ApiInfo info = fromResourceListingInfo( from );\n    if ( info != null ) {\n        swagger.setInfo( mapApiInfo( info ) );\n    }\n    swagger.setBasePath( from.getBasePath() );\n    swagger.setTags( tagSetToTagList( from.getTags() ) );\n    List<String> list2 = from.getConsumes();\n    if ( list2 != null ) {\n        swagger.setConsumes( new ArrayList<String>( list2 ) );\n    }\n    else {\n        swagger.setConsumes( null );\n    }\n    List<String> list3 = from.getProduces();\n    if ( list3 != null ) {\n        swagger.setProduces( new ArrayList<String>( list3 ) );\n    }\n    else {\n        swagger.setProduces( null );\n    }\n\n    return swagger;\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in swagger-bootstrap-ui JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates exception handling within swagger-bootstrap-ui. It wraps a block of code in a `try...catch` block to gracefully handle errors during initialization.  If an error occurs, it logs the error to the console, displays an error message using the `layer.msg` function, and calls the `that.error` function. It depends on `layer` and `i18n` objects.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swaggerResourceInvalid.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry{\n    //some operation\n}\ncatch (err){\n    that.error(err);\n    layer.msg(i18n.message.sys.loadErr+\",Err:\"+err.message);\n    if (window.console){\n        console.error(err);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying JsonDeserialize Annotation to Enum (Java)\nDESCRIPTION: This code snippet shows the `@JsonDeserialize` annotation being used on the `CourseType` enum, specifying the `CourseTypeDeserializer` class to handle the deserialization of JSON values into `CourseType` instances.  This ensures that the custom deserialization logic is used when processing JSON requests.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/handler-enum.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n@Slf4j\n@AllArgsConstructor\n@Getter\n@JsonDeserialize(using = CourseTypeDeserializer.class)\npublic enum CourseType implements CommonFormEnumParser<CourseType> {\n\n    //others...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Code Style with Linting\nDESCRIPTION: This command checks the code style of the Ant Design Pro project using a linter.  It helps ensure code consistency and adherence to coding standards.  The specific linting rules are defined in the project's configuration files.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-ui/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: SwaggerUI GetIndexArguments Method (C#)\nDESCRIPTION: This method returns a dictionary of arguments to be injected into the `index.html` file. It includes the document title, head content, and configuration objects. The `_options` field holds the SwaggerUI options, and `_jsonSerializerOptions` configures the JSON serializer.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/dotnetcore-knife4j-how.md#_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nprivate IDictionary<string, string> GetIndexArguments()\n{\n    return new Dictionary<string, string>()\n    {\n        { \"%(DocumentTitle)\", _options.DocumentTitle },\n        { \"%(HeadContent)\", _options.HeadContent },\n        { \"%(ConfigObject)\", JsonSerializer.Serialize(_options.ConfigObject, _jsonSerializerOptions) },\n        { \"%(OAuthConfigObject)\", JsonSerializer.Serialize(_options.OAuthConfigObject, _jsonSerializerOptions) }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Nacos Mode: Directory Structure\nDESCRIPTION: Illustrates the directory structure for Nacos mode. This mode utilizes a `nacos.properties` file within a project directory to configure service discovery via Nacos.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_9\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------nacos.properties\n```\n\n----------------------------------------\n\nTITLE: Collecting Global Models (Java)\nDESCRIPTION: This method collects additional global models and adds them to both the input and return model sets in the operation models builder.  It iterates through the additional models and adds each model as both an input parameter and a return type.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate void collectGlobalModels(RequestMappingContext context) {\n    for (ResolvedType each : context.getAdditionalModels()) {\n        context.operationModelsBuilder().addInputParam(each);\n        context.operationModelsBuilder().addReturn(each);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Array output\nDESCRIPTION: This XML shows the output of the configured array elements, each wrapped in an 'animal' tag.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_77\n\nLANGUAGE: xml\nCODE:\n```\n<animal>value</animal>\n<animal>value</animal>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusion Rules in YAML\nDESCRIPTION: This YAML snippet demonstrates how to exclude sub-services from aggregation based on regular expressions. It configures the `excluded-services` property to exclude services starting with \"order\" or containing \"dubbo\".\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/gateway/knife4j-gateway-introduce.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      version: swagger2\n      enabled: true\n      # 排除不需要聚合的子服务，基于正则表达式(支持多个)\n      excluded-services:\n        # 排除order开头的服务\n        - order.*\n        # 排除服务中包含dubbo字样的服务\n        - .*?dubbo.*\n\n```\n\n----------------------------------------\n\nTITLE: Defining 64-bit integer array header parameter in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define a header parameter that accepts an array of 64-bit integers. The 'style' is set to 'simple', indicating a comma-separated array.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n```\n\n----------------------------------------\n\nTITLE: Function Interface in Guava\nDESCRIPTION: This interface represents a function that takes an input of type F and returns an output of type T.  It's used by the PathDecorator plugin to transform paths.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox5.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@GwtCompatible\npublic interface Function<F, T> {\n  @Nullable\n  @CanIgnoreReturnValue // TODO(kevinb): remove this\n  T apply(@Nullable F input);\n\n  /**\n   * <i>May</i> return {@code true} if {@object} is a {@code Function} that behaves identically to\n   * this function.\n   *\n   * <p><b>Warning: do not depend</b> on the behavior of this method.\n   *\n   * <p>Historically, {@code Function} instances in this library have implemented this method to\n   * recognize certain cases where distinct {@code Function} instances would in fact behave\n   * identically. However, as code migrates to {@code java.util.function}, that behavior will\n   * disappear. It is best not to depend on it.\n   */\n  @Override\n  boolean equals(@Nullable Object object);\n}\n```\n\n----------------------------------------\n\nTITLE: vkBeautify Usage Examples\nDESCRIPTION: This snippet demonstrates how to use the vkBeautify library to format or minify code in different languages like XML, JSON, CSS, and SQL. It shows the different function calls for both pretty printing with custom indentation and minifying with options for preserving comments where applicable. The input is always a string and the output is a formatted or minified string.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/static/demo/webjars/js/chunk-069eb437.907a4e2a.js.LICENSE.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvkbeautify.xml(text); // pretty print XML\nvkbeautify.json(text, 4 ); // pretty print JSON\nvkbeautify.css(text, '. . . .'); // pretty print CSS\nvkbeautify.sql(text, '----'); // pretty print SQL\n\nvkbeautify.xmlmin(text, true);// minify XML, preserve comments\nvkbeautify.jsonmin(text);// minify JSON\nvkbeautify.cssmin(text);// minify CSS, remove comments ( default )\nvkbeautify.sqlmin(text);// minify SQL\n```\n\n----------------------------------------\n\nTITLE: Fixing Linting Errors Automatically\nDESCRIPTION: This command attempts to automatically fix linting errors in the Ant Design Pro project. It relies on the linter's ability to automatically correct certain style violations. This can save time compared to manually fixing each error.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-ui/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: XML Bean Definition for Swagger Configuration\nDESCRIPTION: This snippet shows how to define a Swagger configuration bean using XML. It is an alternative to using the `@Configuration` annotation in Spring Boot. Ensure the fully qualified class name `com.xiaominfo.swagger.config.SwaggerConfiguration` is correct. This bean needs to be correctly loaded into the Spring MVC container.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/springmvc-notshow.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"SwaggerConfig\" class=\"com.xiaominfo.swagger.config.SwaggerConfiguration\"></bean>\n```\n\n----------------------------------------\n\nTITLE: XML Naming solution (JSON)\nDESCRIPTION: This JSON demonstrates a solution for naming issues when wrapping XML arrays. It defines both the outer and inner element names using the 'name' and 'wrapped' attributes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Springdoc OpenAPI UI Dependency\nDESCRIPTION: This snippet shows the Maven dependency for springdoc-openapi-ui. It is crucial to include this dependency and ensure its version matches the version Knife4j 4.0 relies on (1.6.9) to avoid conflicts.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/v4/knife4j-no-openapi.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.springdoc</groupId>\n  <artifactId>springdoc-openapi-ui</artifactId>\n  <!--保持版本与Knife4j v4.0的版本一致，避免jar包冲突，因为Knife4j-v4.0.0版本依赖的springdoc版本是1.6.9 -->\n  <version>1.6.9</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining a GET API Endpoint with GetDTO Parameter\nDESCRIPTION: This code snippet demonstrates defining a GET API endpoint using Spring annotations. It takes a GetDTO object as a parameter, which is automatically parsed by Knife4j. The @Operation annotation provides metadata for documentation generation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/v4/knife4j-parameterobject-flat-param.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@Operation(summary = \"Get 请求\", tags = \"对接口分组\", description = \"对接口的作用进行描述\")\n@RequestMapping(value = \"/api/v1/open-api\", method = RequestMethod.GET)\npublic R<GetDTO> get(GetDTO dto) {\n    return R.ok(dto);\n}\n```\n\n----------------------------------------\n\nTITLE: MobileIncrementDiscount Class\nDESCRIPTION: This code defines the MobileIncrementDiscount class, which implements the MobileIncrementBusiness interface to provide discount functionality for old customers. It overrides the supports method to check if the customer is an old customer and applies a 10% discount if the recharge amount is greater than 100.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class MobileIncrementDiscount implements MobileIncrementBusiness {\n    Logger logger= LoggerFactory.getLogger(MobileIncrementDiscount.class);\n    @Override\n    public void increment(MobileCustomer mobileCustomer, int money) {\n        if (supports(mobileCustomer)){\n            logger.info(\"老用户折扣\");\n            if (money>100){\n                if (money>100){\n                    BigDecimal big=new BigDecimal(money).multiply(new BigDecimal(0.1));\n                    logger.info(\"当前充值金额>100元,返冲{}元\",big.intValue());\n                }\n            }\n        }\n    }\n\n    /***\\n     * 来用户才满足\\n     * @param delimiter\n     * @return\n     */\n    @Override\n    public boolean supports(MobileCustomer delimiter) {\n        return delimiter.isOld();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response without Return Value - JSON\nDESCRIPTION: This JSON demonstrates a response object with only a description and no content, indicating that no data is returned.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"object created\"\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Custom Documentation Groups\nDESCRIPTION: This YAML configuration snippet demonstrates how to configure custom documentation groups in Knife4j using the `knife4j.documents` property. It defines two documentation groups, specifying their names, locations (classpath), and the associated Knife4j group.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-10-26-knife4j-2.0.6-issue.md#_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nknife4j:\n  enable: true\n  documents:\n    -\n      group: 2.X版本\n      name: 接口签名\n      locations: classpath:sign/*\n    -\n      group: 2.X版本\n      name: 另外文档分组请看这里\n      locations: classpath:markdown/*\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j OpenAPI2 (4.0+)\nDESCRIPTION: This snippet shows the Maven dependency for including Knife4j with OpenAPI2 support in a Spring Boot project, specifically for Knife4j version 4.0 and later. It requires setting the version to the latest available in the Maven repository. This dependency is used when your Spring Boot application generates OpenAPI2 documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/start-knife4j-version.mdx#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>\n    <version>{maven仓库最新版本}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: IgnoreP1 Class Definition - Java\nDESCRIPTION: This Java snippet defines the `IgnoreP1` class, which contains fields such as `name`, `longUser`, and `ignoreLabels`.  These fields are used as request parameters in the API endpoint.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/includeRequestParameter.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class IgnoreP1 {\n    @ApiModelProperty(value = \"姓名a啊\",example = \"你好\")\n    private String name;\n\n    @ApiModelProperty(value = \"用户列表\")\n    private LongUser longUser;\n\n    @ApiModelProperty(value = \"标签集合\")\n    private List<IgnoreLabel> ignoreLabels;\n    //getter and setter...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency\nDESCRIPTION: This XML snippet demonstrates how to add the swagger-bootstrap-ui dependency to a Maven project. It specifies the groupId, artifactId, and version of the library. The version used here is 1.8.3.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-09-17-swagger-bootstrap-ui-1.8.3-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.8.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: MobileIncrementBusiness Interface with Plugin Extension\nDESCRIPTION: This code modifies the MobileIncrementBusiness interface to extend the Spring Plugin's Plugin interface. This makes it possible to implement different increment behaviors as plugins.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic interface MobileIncrementBusiness extends Plugin<MobileCustomer>{\n\n    /***\\n     * 电话充值\\n     * @param mobileCustomer\n     * @param money 金额\\n     */\n    void increment(MobileCustomer mobileCustomer, int money);\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: This command installs all project dependencies defined in the package.json file using the yarn package manager. This step is essential before running any other commands.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-vue/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Swagger Configuration with TypeResolver\nDESCRIPTION: This shows how to inject the TypeResolver into the SwaggerConfiguration class.  The TypeResolver is used to convert Java Types to ResolvedType objects, which are needed when calling the additionalModels() method on the Docket. The constructor injection is shown, allowing the use of the TypeResolver throughout the configuration.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox11.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@EnableSwagger2\n@EnableSwaggerBootstrapUI\n@Import(BeanValidatorPluginsConfiguration.class)\npublic class SwaggerConfiguration {\n\n\n    private final TypeResolver typeResolver;\n\n    @Autowired\n    public SwaggerConfiguration(TypeResolver typeResolver) {\n        this.typeResolver = typeResolver;\n    }\n    \n    \n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration XML\nDESCRIPTION: This XML snippet shows the Maven dependency configuration required to include swagger-bootstrap-ui version 1.8.2 in a project. It specifies the groupId, artifactId, and version for the dependency, which allows Maven to resolve and include the library during the build process.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-08-26-swagger-bootstrap-ui-1.8.2-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.8.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Build for Production with Yarn\nDESCRIPTION: This command compiles and minifies the application for production deployment. The resulting files are optimized for performance and smaller size.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-vue/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: MobileIncrementBusiness Interface\nDESCRIPTION: Defines the `MobileIncrementBusiness` interface, which represents a mobile increment business. It declares a method for incrementing a mobile customer's balance (`increment`) and defines the parameters for the increment operation: the `MobileCustomer` and the amount of money to add.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n/***\\n * 我们有电话增值业务,业务中有充值方法\\n * @since:spring-plugin-demo 1.0\\n * @author <a href=\"mailto:xiaoymin@foxmail.com\">xiaoymin@foxmail.com</a> \\n * 2019/05/22 14:42\\n */\npublic interface MobileIncrementBusiness{\n\n    /***\\n     * 电话充值\\n     * @param mobileCustomer\n     * @param money 金额\\n     */\n    void increment(MobileCustomer mobileCustomer, int money);\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j 2.x (OpenAPI 2.0)\nDESCRIPTION: This XML snippet shows the Maven dependency required to include Knife4j version 2.0.6 in a project that uses OpenAPI 2.0. It specifies the groupId, artifactId, and version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-10-26-knife4j-2.0.6-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <!--OpenAPI2.0的开发者继续使用Knife4j 2.x系列的版本-->\n    <version>2.0.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Security Requirement Object (Optional OAuth2, YAML)\nDESCRIPTION: This YAML defines a security requirement object with an optional OAuth2 scheme, allowing requests without authentication or with 'petstore_auth' and specified scopes.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_106\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  - {}\n  - petstore_auth:\n    - write:pets\n    - read:pets\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for SwaggerBootstrapUi\nDESCRIPTION: This XML snippet configures the Maven dependency for the SwaggerBootstrapUi library. It specifies the groupId, artifactId, and version required to include the library in a Maven project.  Adding this dependency allows developers to use SwaggerBootstrapUi to enhance their Swagger documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2019-02-25-swagger-bootstrap-ui-1.9.0-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.9.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring group.json for Static Swagger Files (JSON)\nDESCRIPTION: This JSON snippet configures the `group.json` file to point to static Swagger JSON files.  It defines two Swagger definitions, `swagger` and `swagger1`, specifying their URLs and Swagger versions. This file is read by knife4j to load the API documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-static.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"name\": \"swagger\",\n    \"url\": \"/json/swagger.json\",\n    \"swaggerVersion\": \"2.0\",\n    \"location\": \"/json/swagger.json\"\n  },\n  {\n    \"name\": \"swagger1\",\n    \"url\": \"/json/swagger1.json\",\n    \"swaggerVersion\": \"2.0\",\n    \"location\": \"/json/swagger1.json\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Disk Mode: OpenAPI JSON Files Directory Structure\nDESCRIPTION: Describes the directory structure for the Disk mode, where OpenAPI JSON files are directly placed within a project directory. This example shows 'userOpenApi.json' and 'orderOpenApi.json' files in the ROOT directory, which will be served under the root context.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_3\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------userOpenApi.json\n|--------orderOpenApi.json\n\n```\n\n----------------------------------------\n\nTITLE: Sorting with @Api position attribute in Java\nDESCRIPTION: This Java snippet showcases the deprecated `position` attribute of the `@Api` annotation for sorting API groups. It's recommended to use `@ApiSupport` instead. This requires the `knife4j-openapi2-spring-boot-starter` component, starting from Knife4j 4.0.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/tagSort.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@Api(tags = \"2.0.2版本-20200226\",position = 286)\n@RestController\n@RequestMapping(\"/api/nxew202\")\npublic class Api202Controller {\n    \n    \n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Mode: cloud.properties Configuration\nDESCRIPTION: Shows the configuration properties for Cloud mode using `cloud.properties`. This allows fetching OpenAPI specifications from a remote URI.  Example shows how to set the name, URI, and location for a service.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.cloud.routes[0].name=用户\nknife4j.cloud.routes[0].uri=192.168.0.152:8999\nknife4j.cloud.routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Cloud模式\n\n```\n\n----------------------------------------\n\nTITLE: Lint and Fix Files with Yarn\nDESCRIPTION: This command runs the linter to identify and automatically fix code style issues. Consistent code style improves readability and maintainability.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-vue/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nyarn run lint\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Object in JSON\nDESCRIPTION: This JSON snippet defines a Contact object with name, URL, and email properties. It provides contact information for API support.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"API Support\",\n  \"url\": \"http://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Start Development Server with Yarn\nDESCRIPTION: This command starts the development server, enabling hot-reloading for quick iteration. Changes to the code are automatically reflected in the browser.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-vue/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn run serve\n```\n\n----------------------------------------\n\nTITLE: Installing Node Modules with npm\nDESCRIPTION: This command installs the required node modules for the Ant Design Pro project using npm.  It fetches all dependencies specified in the `package.json` file.  Running this command is a prerequisite for starting and building the project.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Aliases and Ordering in YAML\nDESCRIPTION: This YAML snippet configures aliases and ordering for specific sub-services. It defines group names and order values for `order-service` and `user-service`.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/blog/gateway/knife4j-gateway-introduce.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      version: swagger2\n      enabled: true\n      excluded-services:\n        - order.*\n    # 自定义配置子服务的别名，排序规则\n      service-config:\n        order-service:\n          - group-name: 订单服务\n            order: 1\n        user-service:\n          - group-name: 用户服务\n            order: 2\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Path Object in JSON\nDESCRIPTION: This JSON snippet defines a path object for an OpenAPI specification, describing the `GET` operation for the `/pets` path. The operation returns a list of pets and specifies the response schema and content type.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {          \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Ant Design Pro Project\nDESCRIPTION: This command builds the Ant Design Pro project for production deployment.  It compiles the source code, optimizes assets, and generates the necessary files for deployment.  The exact build process is configured in the `package.json` file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-ui/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Build Production Version with Yarn\nDESCRIPTION: This command builds a production-ready version of the Knife4j project using Yarn. The output is typically optimized for deployment. Ensure all dependencies are installed prior to running this command.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-vue3/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Example of using @MyRequestBody annotation in Knife4j with Orange Forms\nDESCRIPTION: This code snippet demonstrates the usage of the custom `@MyRequestBody` annotation provided by the Orange Forms low-code platform in conjunction with Knife4j. It allows developers to receive request parameters as JSON without defining explicit entity classes. The `@Operation` annotation is used to define the API endpoint's summary.  It returns a `ResponseEntity` containing a `MyBodyTest` object with the request and response data.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/4.x/4.5.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Operation(summary = \"测试一下-MyRequestBody\")\n@PostMapping(value = \"/test/module/upload\")\npublic ResponseEntity<MyBodyTest> test(@MyRequestBody FileRequestVo fileRequestVo, @MyRequestBody FileResp fileResp, HttpServletResponse response){\n        MyBodyTest myBodyTest=new MyBodyTest();\n        myBodyTest.setFileResp(fileResp);\n        myBodyTest.setRequestVo(fileRequestVo);\n        return ResponseEntity.ok(myBodyTest);\n}\n```\n\n----------------------------------------\n\nTITLE: Shiro Filter Chain Configuration in XML\nDESCRIPTION: This XML snippet shows a Shiro filter chain configuration, granting anonymous access to Swagger-related resources such as /swagger-resources, /v2/api-docs, /v2/api-docs-ext, /doc.html, and /webjars/**. This allows users to access the Swagger UI without authentication.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/old.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<property name=\"filterChainDefinitions\">\n    <value>\n        /swagger-resources = anon\n        /v2/api-docs = anon\n        /v2/api-docs-ext = anon\n        /doc.html = anon\n        /webjars/** = anon\n        \n        //others....\n    </value>\n</property>\n```\n\n----------------------------------------\n\nTITLE: Deploying Knife4j with Docker Compose\nDESCRIPTION: This snippet provides a docker-compose.yml file configuration for deploying Knife4jInsight.  It defines the service, container name, restart policy, image, network mode, volumes for data persistence, port mapping, and environment variables for configuring the data source to be disk-based.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-insight/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# 通过docker-compose可以快速部署knife4j服务\nversion: \"2.0\"\nservices:\n    knife4j:\n        container_name: knife4j-insight\n        restart: always\n        image: \"xiaoymin/knife4j:v2.0\"\n        network_mode: \"bridge\"\n        # 本地磁盘目录映射\n        volumes:\n        - D:\\Temp\\data:/knife4j/data\n        ports:\n        - \"10000:10000\"\n        # 指定配置属性模式为disk本地磁盘\n        environment:\n        - knife4j.source=disk\n        - knife4j.disk.dir=/knife4j/data\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency: springfox-swagger2\nDESCRIPTION: Declares a Maven dependency for springfox-swagger2, a library used for integrating Swagger 2 into Spring applications. Version 2.9.2 is specified. This dependency is required to generate Swagger documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-07-18-swagger-bootstrap-ui-1.7.6-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.9.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Setting Global Header From Response\nDESCRIPTION: This script shows how to extract a token from a JSON response, check the response code, and set the token as a global header using `ke.global.setHeader`.  This allows subsequent API calls to automatically include the token.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/afterScript.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar code=ke.response.data.code;\nif(code==8200){\n    //判断,如果服务端响应code是8200才执行操作\n    //获取token\n    var token=ke.response.data.data.token;\n    //1、如何参数是Header，则设置当前逻辑分组下的全局Header\n    ke.global.setHeader(\"token\",token);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency: OpenAPI2 UI\nDESCRIPTION: This XML snippet shows the Maven dependency for the Knife4j OpenAPI2 UI. It is needed when using springfox 3.0.0 and want to have the knife4j UI features.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/upgrading/upgrading_v4.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi2-ui</artifactId>\n    <version>4.0.0</version>\n</dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Modifying XML element name (YAML)\nDESCRIPTION: This YAML snippet defines an array of strings named 'animals', where each string item is represented as an XML element named 'animal'. The 'xml' property allows customizing the XML representation of the array items.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_76\n\nLANGUAGE: yaml\nCODE:\n```\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n```\n\n----------------------------------------\n\nTITLE: Security Requirement Object (Non-OAuth2, YAML)\nDESCRIPTION: This YAML defines a security requirement object for a non-OAuth2 scheme, 'api_key', indicating that no specific scopes are required.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_102\n\nLANGUAGE: yaml\nCODE:\n```\napi_key: []\n```\n\n----------------------------------------\n\nTITLE: Mapping Operations to Path\nDESCRIPTION: This Java code snippet demonstrates mapping Springfox operations to a Swagger Path object. It iterates through operations of a given API description and sets request methods (GET, POST, etc.) on the Path object. It uses an existing Path if available, or creates a new Path if not.  The methods are converted to lowercase.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox13.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate Path mapOperations(ApiDescription api, Optional<Path> existingPath) {\n    Path path = existingPath.or(new Path());\n    for (springfox.documentation.service.Operation each : nullToEmptyList(api.getOperations())) {\n      Operation operation = mapOperation(each);\n      path.set(each.getMethod().toString().toLowerCase(), operation);\n    }\n    return path;\n  }\n```\n\n----------------------------------------\n\nTITLE: Disabling UI Group Elements - YAML\nDESCRIPTION: This YAML snippet configures Knife4j to disable the display of group elements in the UI when there is only one group. The `enableGroup` property controls whether group elements are shown.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n\tenable: true\n\tsetting:\n\t\t# Ui界面不显示分组元素\n\t\tenableGroup: false\n```\n\n----------------------------------------\n\nTITLE: CustomerService Class\nDESCRIPTION: Defines the `CustomerService` class, which provides a service for incrementing a mobile customer's balance. It uses dependency injection to obtain an instance of `MobileIncrementV1` and calls its `increment` method to perform the recharge.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n/***\\n *\\n * @since:spring-plugin-demo 1.0\\n * @author <a href=\"mailto:xiaoymin@foxmail.com\">xiaoymin@foxmail.com</a> \\n * 2019/05/22 15:00\\n */\n@Component\npublic class CustomerService {\n\n    \n    @Autowired\n    MobileIncrementV1 mobileIncrementV1;\n\n    public void increments(MobileCustomer mobileCustomer,int money){\n        //对人员进行充值\n        mobileIncrementV1.increment(mobileCustomer,money);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload with Base64 Encoding - YAML\nDESCRIPTION: Defines a schema for file upload using base64 encoding in YAML. The 'type' is set to 'string' and the 'format' to 'base64', indicating that the content should be transferred with base64 encoding.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\n# content transferred with base64 encoding\nschema:\n  type: string\n  format: base64\n```\n\n----------------------------------------\n\nTITLE: MobileTest with Plugin Context\nDESCRIPTION: This code demonstrates how to test the mobile recharge system with the plugin context.  The test sets the old flag to true to trigger the discount plugin.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nAnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(\"com.xiaominfo.cloud.plugin.phone\");\n\nCustomerService customerService=context.getBean(CustomerService.class);\nMobileCustomer mobileCustomer=new MobileCustomer(\"13567662664\");\nmobileCustomer.setOld(true);\ncustomerService.increments(mobileCustomer,120);\n```\n\n----------------------------------------\n\nTITLE: Defining SpecType Enum\nDESCRIPTION: This TypeScript enum defines the supported specification types: Swagger2, OpenAPI3, AsyncAPI, and Postman. This enum is used to identify the specific API specification being processed by the adapter pattern.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-core/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum SpecType{\n\n    SWAGGER2,OPENAPI3,ASYNCAPI,POSTMAN\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency: Gateway Starter\nDESCRIPTION: This XML snippet shows the Maven dependency for the Knife4j Gateway Spring Boot starter.  It enables easy aggregation of OpenAPI documents in Spring Cloud Gateway environments.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/upgrading/upgrading_v4.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-gateway-spring-boot-starter</artifactId>\n    <version>4.0.0</version>\n</dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Adding swagger-bootstrap-ui Dependency using Maven\nDESCRIPTION: This snippet shows how to add the swagger-bootstrap-ui dependency to a Maven project using the provided Maven coordinates. This dependency is required to use the swagger-bootstrap-ui library. The version is specified as 1.7.8.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-08-03-swagger-bootstrap-ui-1.7.8-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.7.8</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependency\nDESCRIPTION: This snippet shows how to add swagger-bootstrap-ui as a dependency to your Maven project. It specifies the groupId, artifactId, and version.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-08-06-swagger-bootstrap-ui-1.7.9-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.7.9</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Testing the Ant Design Pro Project\nDESCRIPTION: This command runs the test suite for the Ant Design Pro project. It executes the defined test cases to verify the functionality of the code.  The test configuration and test files are part of the project setup.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-front/knife4j-ui/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency: swagger-bootstrap-ui\nDESCRIPTION: Declares a Maven dependency for swagger-bootstrap-ui. Version 1.7.6 is specified. This UI is designed to replace the default Swagger UI with a more user-friendly interface.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2018-07-18-swagger-bootstrap-ui-1.7.6-issue.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.7.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: MobileConfig Class\nDESCRIPTION: Configures the `MobileIncrementV1` bean using the `@Configuration` and `@Bean` annotations.  This makes the bean available for dependency injection in other components.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class MobileConfig {\n\n\n    @Bean\n    public MobileIncrementV1 mobileIncrementV1(){\n        return new MobileIncrementV1();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: This XML snippet shows how to include Swagger-Bootstrap-Ui 1.8.9 in your Maven project. It defines the groupId, artifactId, and version for the dependency.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/1.x/2019-01-11-swagger-bootstrap-ui-1.8.9-issue.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>com.github.xiaoymin</groupId>\n   <artifactId>swagger-bootstrap-ui</artifactId>\n   <version>1.8.9</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Nacos Mode Directory Structure\nDESCRIPTION: This shell script represents the directory structure for storing the `nacos.properties` file under the ROOT directory in Disk mode, to configure Nacos mode.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop/config-disk.md#_snippet_9\n\nLANGUAGE: Shell Script\nCODE:\n```\n|-data\n|------ROOT  \n|--------nacos.properties\n\n```\n\n----------------------------------------\n\nTITLE: CustomerService with PluginRegistry\nDESCRIPTION: This code modifies the CustomerService class to use the PluginRegistry to obtain a list of MobileIncrementBusiness plugins. It iterates through the list of plugins and calls the increment method on each plugin to perform the recharge operation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class CustomerService {\n\n    @Autowired\n    private PluginRegistry<MobileIncrementBusiness,MobileCustomer> mobileCustomerPluginRegistry;\n  \n\n    public void increments(MobileCustomer mobileCustomer,int money){\n        //获取插件\n        List<MobileIncrementBusiness> plugins=mobileCustomerPluginRegistry.getPlugins();\n        for (MobileIncrementBusiness incrementBusiness:plugins){\n            //对人员进行充值\n            incrementBusiness.increment(mobileCustomer,money);\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: ModelsConfiguration Class Java\nDESCRIPTION: This configuration class scans packages related to schema and model handling. It also enables plugin registries for model-related plugins like ModelBuilderPlugin and ModelPropertyBuilderPlugin. The typeResolver bean provides type resolution capabilities.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox4.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@ComponentScan(basePackages = {\n    \"springfox.documentation.schema\"\n})\n@EnablePluginRegistries({\n    ModelBuilderPlugin.class,\n    ModelPropertyBuilderPlugin.class,\n    TypeNameProviderPlugin.class,\n    SyntheticModelProviderPlugin.class\n})\npublic class ModelsConfiguration {\n  @Bean\n  public TypeResolver typeResolver() {\n    return new TypeResolver();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a free-form query parameter in YAML\nDESCRIPTION: This YAML snippet defines a free-form query parameter, mirroring the functionality of the JSON example, with an object schema allowing integer 'additionalProperties'.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nin: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Display - YAML\nDESCRIPTION: This YAML snippet configures Knife4j to control the display of the OpenAPI tab. The `enableOpenApi` property determines whether the OpenAPI tab is shown in the documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-11-22-knife4j-2.0.8-issue.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nknife4j:\n\tenable: true\n\tsetting:\n\t\t# 是否显示文档中的Open标签栏，默认为true\n\t\tenableOpenApi: false\n```\n\n----------------------------------------\n\nTITLE: String Response Example - YAML\nDESCRIPTION: This YAML snippet shows a response object for a simple string response. The content type is set to text/plain, and the schema specifies the type as string.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Knife4j OpenAPI3 UI Dependency\nDESCRIPTION: This XML snippet shows the Maven dependency required for including the OpenAPI 3 UI component from Knife4j version 4.0.0.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/spring-webflux/spring-webflux-introduction.mdx#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-ui</artifactId>\n    <version>4.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Swagger UI with Spring Boot\nDESCRIPTION: This Java code snippet shows how to enable Swagger 2, Swagger Bootstrap UI, and Bean Validation in a Spring Boot application.  It uses the `@Configuration`, `@EnableSwagger2`, `@EnableSwaggerBootstrapUI`, and `@Import` annotations to configure Swagger and its UI. It depends on the springfox-swagger2 and knife4j dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swaggerResourceInvalid.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableSwagger2\n@EnableSwaggerBootstrapUI\n@Import(BeanValidatorPluginsConfiguration.class)\npublic class SwaggerConfiguration {\n \t//more ...   \n}\n```\n\n----------------------------------------\n\nTITLE: MobileIncrementV1 Implementing Plugin Support\nDESCRIPTION: This code implements the supports method from the Plugin interface in the MobileIncrementV1 class. This method always returns true, indicating that this plugin supports all mobile customers.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class MobileIncrementV1 implements MobileIncrementBusiness {\n\n    Logger logger= LoggerFactory.getLogger(MobileIncrementV1.class);\n\n    @Override\n    public void increment(MobileCustomer mobileCustomer, int money) {\n        logger.info(\"给{}充值电话费,充值金额:{}\",mobileCustomer.getTel(),money);\n        logger.info(\"充值完成.\");\n    }\n\n    @Override\n    public boolean supports(MobileCustomer delimiter) {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a string path parameter in YAML\nDESCRIPTION: This YAML snippet is equivalent to the previous JSON example. It defines a path parameter named 'username' of type string.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nname: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: DocumentationContextBuilder Request Handlers Setter\nDESCRIPTION: This snippet shows how to set the requestHandlers in DocumentationContextBuilder, using the Builder pattern.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic DocumentationContextBuilder requestHandlers(List<RequestHandler> handlerMappings) {\n    this.handlerMappings = handlerMappings;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Populating Model Dependencies - Java\nDESCRIPTION: This method retrieves and merges model dependencies using the `modelProvider`. The dependencies are retrieved from the `dependencies` method of the `modelProvider` and added to the `modelMap`.  The `modelProvider` defaults to `CachingModelProvider` that in turn relies on the `DefaultModelProvider` for resolving the model dependencies.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nprivate void populateDependencies(ModelContext modelContext, Map<String, Model> modelMap) {\n    Map<String, Model> dependencies = modelProvider.dependencies(modelContext);\n    for (Model each : dependencies.values()) {\n        mergeModelMap(modelMap, each);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nacos mode directory structure\nDESCRIPTION: This snippet shows the directory structure required for the Nacos mode, including the nacos.properties file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/desktop-use.md#_snippet_7\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------nacos.properties\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Knife4j OpenAPI3 (4.0+)\nDESCRIPTION: This snippet shows the Maven dependency for including Knife4j with OpenAPI3 support in a Spring Boot project, specifically for Knife4j version 4.0 and later. It requires setting the version to the latest available in the Maven repository. This dependency provides the required classes and configurations for displaying OpenAPI3 documentation generated by springdoc-openapi.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/quick-start/start-knife4j-version.mdx#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>\n    <version>{maven仓库最新版本}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: ModelContext to Model Conversion - Java\nDESCRIPTION: This snippet iterates through a set of `ModelContext` objects and converts them into `Model` objects. It uses a `modelProvider` (either `DefaultModelProvider` or `CachingModelProvider`) to perform the conversion. The converted models are then merged into a `modelMap`. Dependencies are populated using `populateDependencies` for resolving complex types.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox10.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nSet<ModelContext> modelContexts = pluginsManager.modelContexts(context);\nMap<String, Model> modelMap = newHashMap(context.getModelMap());\nfor (ModelContext each : modelContexts) {\n    //添加基础忽略类型的ResolvedType类型\n    markIgnorablesAsHasSeen(typeResolver, ignorableTypes, each);\n    //通过modelProvider获取到Model类型,modelProvider是接口,有两个实现类\n    //DefaultModelProvider:默认装换\n    //CachingModelProvider:缓存\n    Optional<Model> pModel = modelProvider.modelFor(each);\n    if (pModel.isPresent()) {\n        LOG.debug(\"Generated parameter model id: {}, name: {}, schema: {} models\",\n                  pModel.get().getId(),\n                  pModel.get().getName());\n        mergeModelMap(modelMap, pModel.get());\n    } else {\n        LOG.debug(\"Did not find any parameter models for {}\", each.getType());\n    }\n    populateDependencies(each, modelMap);\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Dubbox Swagger Service using BaseApiListingResource\nDESCRIPTION: This Java class `DubboxAcceptHeaderApiListingResource` implements the `DubboxSwaggerService` interface and extends `BaseApiListingResource` to handle the generation of the Swagger/OpenAPI definition. It overrides the `getListingJson` method to retrieve the Swagger definition and potentially add CORS headers.  The `@Component` annotation makes it a Spring-managed bean.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/dubbox+knife4j.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.swagger.jaxrs.listing.BaseApiListingResource;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletContext;\nimport javax.ws.rs.core.Application;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.HttpHeaders;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.UriInfo;\n\n/**\n * 类描述：dubbox+swagger\n *\n * @author xksgs\n * @date 2021-09-02\n */\n@Component\npublic class DubboxAcceptHeaderApiListingResource extends BaseApiListingResource implements DubboxSwaggerService {\n\n    @Context\n    ServletContext context;\n\n    @Override\n    public Response getListingJson(Application app, ServletConfig sc,\n                                   HttpHeaders headers, UriInfo uriInfo) {\n        Response rsp = getListingJsonResponse(app, context, sc, headers, uriInfo);\n        // 解决跨域问题\n        /*rsp.getHeaders().add(\"Access-Control-Allow-Origin\", \"*\");\n        rsp.getHeaders().add(\"Access-Control-Allow-Headers\", \"x-requested-with, ssi-token\");\n        rsp.getHeaders().add(\"Access-Control-Max-Age\",\"3600\");\n        rsp.getHeaders().add(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");*/\n        return rsp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ApiListingScannerPlugin Interface in Springfox\nDESCRIPTION: This interface defines the `apply` method, which is used to manually add ApiDescriptions. It takes a DocumentationContext as a parameter and returns a list of ApiDescription objects, allowing manual addition of API descriptions to the documentation.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox5.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic interface ApiListingScannerPlugin extends Plugin<DocumentationType> {\n  /**\n   * Implement this method to manually add ApiDescriptions\n   * \n   * @param context - Documentation context that can be used infer documentation context\n   * @see springfox.documentation.service.ApiDescription\n   * @return List of {@link ApiDescription}\n   */\n  List<ApiDescription> apply(DocumentationContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: DocumentationContextBuilder Constructor\nDESCRIPTION: This snippet shows the constructor for DocumentationContextBuilder. It takes a DocumentationType as input and initializes the object. The other attributes are set via builder methods.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic DocumentationContextBuilder(DocumentationType documentationType) {\n    this.documentationType = documentationType;\n}\n```\n\n----------------------------------------\n\nTITLE: OperationContext Class in Springfox\nDESCRIPTION: This class represents the context for an operation, holding information such as the OperationBuilder, RequestMethod, RequestMappingContext, and operationIndex.  It is used by the OperationBuilderPlugin to build the Operation object.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox5.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class OperationContext {\n    //builder函数\n  private final OperationBuilder operationBuilder;\n    //Spring中接口的请求方法类型枚举\n  private final RequestMethod requestMethod;\n    //请求接口上下文\n  private final RequestMappingContext requestContext;\n  private final int operationIndex;\n    //getter setter and constructor\n    \n}\n```\n\n----------------------------------------\n\nTITLE: DocumentationContextBuilder Build Method\nDESCRIPTION: This code shows the build method for DocumentationContextBuilder, which creates a DocumentationContext object from the builder's state. It aggregates response messages, sorts rules, and calls the DocumentationContext constructor with the collected parameters.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox8.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic DocumentationContext build() {\n    Map<RequestMethod, List<ResponseMessage>> responseMessages = aggregateResponseMessages();\n    OrderComparator.sort(rules);\n    return new DocumentationContext(documentationType,\n        handlerMappings,\n        apiInfo,\n        groupName,\n        apiSelector,\n        ignorableParameterTypes,\n        responseMessages,\n        globalOperationParameters,\n        resourceGroupingStrategy,\n        pathProvider,\n        securityContexts,\n        securitySchemes,\n        rules,\n        listingReferenceOrdering,\n        apiDescriptionOrdering,\n        operationOrdering,\n        produces,\n        consumes,\n        host,\n        protocols,\n        genericsNamingStrategy,\n        pathMapping,\n        isUrlTemplatesEnabled,\n        additionalModels,\n        tags,\n        vendorExtensions);\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Swagger Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the springfox-swagger2 dependency to a Maven project. This dependency is required for SwaggerBootstrapUi to function, as it enhances Swagger's UI. Version 2.9.2 is specified.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/old.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n <groupId>io.springfox</groupId>\n <artifactId>springfox-swagger2</artifactId>\n <version>2.9.2</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy with Service Name (JSON)\nDESCRIPTION: This configuration demonstrates how to reverse proxy requests to different backend services based on a service name in the URL, such as `/service1` or `/service2`.  It assumes that APIs are accessed with a service prefix.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/solution/ui-front-nginx.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nserver {\n        listen       18001;\n        server_name  192.168.0.112;\n        #charset koi8-r;\n\n        location / {\n            root /mnt/application/swagger-static;\n        }\n        location /service1 {\n            proxy_pass http://127.0.0.1:8999/;\n\n        }\n\t\tlocation /service2 {\n            proxy_pass http://127.0.0.1:8998/;\n\n        }\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting Knife4j service using Docker Compose\nDESCRIPTION: This snippet shows the command to start the Knife4j service using Docker Compose. It requires Docker Compose to be installed on the system.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-insight/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Pull Knife4j Docker Image\nDESCRIPTION: This command pulls the latest version of the Knife4j Docker image from Docker Hub.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/aggregation-docker.md#_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\ndocker pull xiaoymin/knife4j:latest\n```\n\n----------------------------------------\n\nTITLE: Cloud Mode Directory Structure\nDESCRIPTION: Illustrates the directory structure for Cloud mode. It contains the ROOT directory along with the `cloud.properties` file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_5\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------cloud.properties\n```\n\n----------------------------------------\n\nTITLE: Swagger API Documentation Response Format\nDESCRIPTION: This JSON snippet illustrates the standard structure of a Swagger API documentation (v2/api-docs) response. It adheres to the OpenAPI 2.0 specification, containing fields like `swagger`, `info`, `host`, `basePath`, `tags`, `paths`, `securityDefinitions`, and `definitions`.  It should be a JSON object and shouldn't contain any custom wrapper fields.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/faq/swaggerResourceInvalid.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    //...\n  },\n  \"host\": \"127.0.0.1:8999\",\n  \"basePath\": \"/\",\n  \"tags\": [\n    {\n      \"name\": \"1.8.2版本\",\n      \"description\": \"Api 182 Controller\"\n    } \n  ],\n  \"paths\": {\n    \"/2/api/new187/postRequest\": {\n     //....\n  },\n  \"securityDefinitions\": {\n     //,,.,\n  },\n  \"definitions\": {\n    \"AInfoVo\": {\n     //....\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cloud Mode Configuration (cloud.properties)\nDESCRIPTION: Shows the configuration for cloud mode using `cloud.properties`. It defines route name, URI and location of the OpenAPI endpoints.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nknife4j.cloud.routes[0].name=用户\nknife4j.cloud.routes[0].uri=192.168.0.152:8999\nknife4j.cloud.routes[0].location=/v2/api-docs?group=2.X版本\n# more...具体参考Knife4jAggregation聚合组件配置Cloud模式\n\n```\n\n----------------------------------------\n\nTITLE: Adding knife4j-openapi2-ui Dependency (New Version)\nDESCRIPTION: This XML snippet shows how to add the knife4j-openapi2-ui dependency to a Maven project. It specifies the groupId, artifactId, and version. The ${lastVersion} placeholder should be replaced with the actual version number. This dependency provides the UI enhancements for OpenAPI 2.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j/README.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi2-ui</artifactId>\n    <version>${lastVersion}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Eureka Mode Directory Structure\nDESCRIPTION: Shows the directory structure for Eureka mode. It contains the ROOT directory along with the `eureka.properties` file.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware-sources/knife4jAggregationDesktop.md#_snippet_7\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|--------eureka.properties\n```\n\n----------------------------------------\n\nTITLE: Configure UI with Supported Submit Methods - Java\nDESCRIPTION: This Java code snippet demonstrates how to configure the UI to only show documentation without the debug tab, by setting the supported submit methods to an empty array. This is achieved through the `UiConfigurationBuilder` class and its `supportedSubmitMethods` method. The configuration is done using a Spring Bean.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/changelog/2.x/2020-05-24-knife4j-2.0.3-issue.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic UiConfiguration uiConfiguration(){\n    return UiConfigurationBuilder.builder()\n        .supportedSubmitMethods(new String[]{})\n        .build();\n}\n```\n\n----------------------------------------\n\nTITLE: vkBeautify Usage Examples\nDESCRIPTION: This snippet demonstrates how to use the vkBeautify library to pretty print and minify code in different formats like XML, JSON, CSS, and SQL. It shows the syntax for both beautification (with indentation options) and minification (with optional comment preservation).\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j/knife4j-openapi3-ui/src/main/resources/webjars/js/chunk-069eb437.355c4fb0.js.LICENSE.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.\n * https://github.com/aabluedragon/vkbeautify\n * Copyright (c) 2012 Vadim Kiryukhin\n * vkiryukhin @ gmail.com\n * http://www.eslinstructor.net/vkbeautify/\n *\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n *   Pretty print\n *\n *        vkbeautify.xml(text [,indent_pattern]);\n *        vkbeautify.json(text [,indent_pattern]);\n *        vkbeautify.css(text [,indent_pattern]);\n *        vkbeautify.sql(text [,indent_pattern]);\n *\n *        @text - String; text to beatufy;\n *        @indent_pattern - Integer | String;\n *                Integer:  number of white spaces;\n *                String:   character string to visualize indentation ( can also be a set of white spaces )\n *   Minify\n *\n *        vkbeautify.xmlmin(text [,preserve_comments]);\n *        vkbeautify.jsonmin(text);\n *        vkbeautify.cssmin(text [,preserve_comments]);\n *        vkbeautify.sqlmin(text);\n *\n *        @text - String; text to minify;\n *        @preserve_comments - Bool; [optional];\n *                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )\n *\n *   Examples:\n *        vkbeautify.xml(text); // pretty print XML\n *        vkbeautify.json(text, 4 ); // pretty print JSON\n *        vkbeautify.css(text, '. . . .'); // pretty print CSS\n *        vkbeautify.sql(text, '----'); // pretty print SQL\n *\n *        vkbeautify.xmlmin(text, true);// minify XML, preserve comments\n *        vkbeautify.jsonmin(text);// minify JSON\n *        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )\n *        vkbeautify.sqlmin(text);// minify SQL\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Incorrect Knife4j Gateway OpenAPI3Response.java\nDESCRIPTION: This Java snippet shows the default OpenAPI3Response class in knife4j-gateway, where the tagsSorter is hardcoded to \"alpha\". This causes the order attribute from the API to not work.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/features/apiSort.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\npublic class OpenAPI3Response implements Serializable {\n    \n    /**\n     * ConfigUrl，eg: /v3/api-docs/swagger-config\n     */\n    private String configUrl;\n    /**\n     * oauth2RedirectUrl,eg : http://192.168.10.103:17812/swagger-ui/oauth2-redirect.html\n     */\n    private String oauth2RedirectUrl;\n    \n    /**\n     * operation接口排序规则\n     */\n    private String operationsSorter = \"alpha\";\n    \n    /**\n     * tag排序规则,此处硬编码导致排序order不生效\n     */\n    private String tagsSorter = \"alpha\";\n\n    // other....\n\n}\n```\n\n----------------------------------------\n\nTITLE: Data Directory Structure for OpenAPI Documents\nDESCRIPTION: Illustrates the directory structure within the 'data' folder where OpenAPI document configurations are stored. Each subdirectory represents a different project or documentation set. The 'ROOT' directory is for the root context, and subsequent directories (project1, project2, etc.) correspond to specific project contexts.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/middleware/knife4jAggregationDesktop.md#_snippet_2\n\nLANGUAGE: shell script\nCODE:\n```\n|-data\n|------ROOT  \n|------project1\n|------project2\n|------project3\n|-----—project4\n|-----—more...\n```\n\n----------------------------------------\n\nTITLE: Response without Return Value - YAML\nDESCRIPTION: This YAML demonstrates a response object with only a description and no content, indicating that no data is returned.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: object created\n```\n\n----------------------------------------\n\nTITLE: MobileTest Class\nDESCRIPTION: This code demonstrates how to test the mobile recharge system. It creates an `AnnotationConfigApplicationContext` to load the Spring configuration, retrieves an instance of `CustomerService`, creates a `MobileCustomer` object, and then calls the `increments` method to recharge the customer's balance.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/action/springfox/springfox3.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class MobileTest {\n\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context=\n                new AnnotationConfigApplicationContext(\"com.xiaominfo.cloud.plugin.phone\");\n\n        CustomerService customerService=context.getBean(CustomerService.class);\n        MobileCustomer mobileCustomer=new MobileCustomer(\"13567662664\");\n        mobileCustomer.setOld(true);\n        customerService.increments(mobileCustomer,120);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Header Object Example (Integer) in JSON\nDESCRIPTION: This JSON example defines a header object with an integer schema, including a description of its purpose.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapped array XML output\nDESCRIPTION: The generated XML shows both the outer and inner array elements named 'animals' when 'wrapped' is true and no name is explicitly provided.\nSOURCE: https://github.com/xiaoymin/knife4j/blob/dev/knife4j-doc/docs/oas/OpenAPI3-specification.md#_snippet_82\n\nLANGUAGE: xml\nCODE:\n```\n<animals>\n  <animals>value</animals>\n  <animals>value</animals>\n</animals>\n```"
  }
]