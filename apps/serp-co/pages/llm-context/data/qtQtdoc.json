[
  {
    "owner": "qt",
    "repo": "qtdoc",
    "content": "TITLE: Configuring and Building CarRenderingApp with Qt6 in CMake\nDESCRIPTION: This CMake script sets up a Qt6-based C++ application called CarRenderingApp by specifying minimum CMake version, adding options for studio components, and linking required Qt6 modules (Core, Gui, Qml, Quick, Quick3D, ExamplesAssetDownloaderPrivate). It defines the executable, includes resource files, and manages dependencies, both natively and conditionally for Android via FetchContent and custom inclusion. Additional files (buildsetup.cmake, qmlmodules.cmake, qmlcomponents.cmake) are included for modular configuration, and the deploy sequence is customized with qt_generate_deploy_qml_app_script and install rules. Requires CMake 3.19+, Qt6.8+, and listed Qt6 modules. Input is configured through script parameters and environment variables; output is a deployable CarRenderingApp binary. Constraints include dependency on Qt6 and platform-specific logic for Android.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.19)\n\noption(BUILD_QDS_COMPONENTS \"Build design studio components\" ON)\n\nproject(CarRenderingApp LANGUAGES CXX)\n\nfind_package(Qt6 REQUIRED COMPONENTS\n             Core\n             Gui\n             Qml\n             Quick\n             Quick3D\n             ExamplesAssetDownloaderPrivate)\n\nqt_standard_project_setup(REQUIRES 6.8)\n\nqt_add_executable(CarRenderingApp\n    src/main.cpp\n    src/app_environment.h\n)\n\nqt_add_resources(CarRenderingApp \"configuration\"\n    PREFIX \"/\"\n    FILES\n        qtquickcontrols2.conf\n)\n\ntarget_link_libraries(CarRenderingApp PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Quick\n    Qt6::Quick3D\n    Qt6::Qml\n)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/buildsetup.cmake)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/qmlmodules.cmake)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/qmlcomponents.cmake)\n\nif (ANDROID)\n    FetchContent_Declare(\n        android_openssl\n        DOWNLOAD_EXTRACT_TIMESTAMP true\n        URL https://github.com/KDAB/android_openssl/archive/refs/heads/master.zip\n        )\n    FetchContent_MakeAvailable(android_openssl)\n    include(${android_openssl_SOURCE_DIR}/android_openssl.cmake)\n\n    add_android_openssl_libraries(CarRenderingApp)\nendif()\n\ninstall(TARGETS CarRenderingApp\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\nqt_generate_deploy_qml_app_script(\n    TARGET CarRenderingApp\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n\n```\n\n----------------------------------------\n\nTITLE: Defining a QML Module with qt_add_qml_module in CMake\nDESCRIPTION: Configures a QML module for the 'FXMaterialShowroomContent' target using qt_add_qml_module. It sets the module URI to 'content', version to 1.0, lists numerous QML and UI QML files under QML_FILES, and bundles various GLSL shader files (.vert, .frag) and a PNG image as RESOURCES.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/content/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(FXMaterialShowroomContent\n    URI \"content\"\n    VERSION 1.0\n    QML_FILES\n        AmbientEffect.ui.qml\n        App.qml\n        BubblesEffect.ui.qml\n        CloudEffect.ui.qml\n        DebugBox.ui.qml\n        DustEffect.ui.qml\n        ExplosionEffect.ui.qml\n        FireEffect.ui.qml\n        FlashEffect.ui.qml\n        FloorComponent.ui.qml\n        HeatwaveEffect.ui.qml\n        LineparticleEffect.ui.qml\n        MouseRotatorAndWASD.qml\n        RainEffect.ui.qml\n        Screen01.ui.qml\n        ShockwaveEffect.ui.qml\n        SmokeEffect.ui.qml\n        SnowEffect.ui.qml\n        SparksEffect.ui.qml\n        SteamEffect.ui.qml\n        Figma_Assets/Button.ui.qml\n        Figma_Assets/CardMaterial.ui.qml\n        Figma_Assets/Checkbox.ui.qml\n        Figma_Assets/CheckboxImages.ui.qml\n        Figma_Assets/CheckboxImages_1.ui.qml\n        Figma_Assets/Checkbox_1.ui.qml\n        Figma_Assets/IconsCards.ui.qml\n        Figma_Assets/IconsCheckbox.ui.qml\n        Figma_Assets/IconsCheckbox_1.ui.qml\n        Figma_Assets/IconsFunctional.ui.qml\n        Figma_Assets/LabelQt.ui.qml\n        Figma_Assets/LayoutFull.ui.qml\n        Figma_Assets/LayoutSidePanel.ui.qml\n        Figma_Assets/ListEffects.ui.qml\n        Figma_Assets/ListMaterial.ui.qml\n        Figma_Assets/ListModels.ui.qml\n        Figma_Assets/Material_pop_up.ui.qml\n        Figma_Assets/MouseScroll.qml\n        Figma_Assets/Scrollbar.ui.qml\n        Figma_Assets/State_Idle.ui.qml\n        Pocket_Demo_SkylightUI/ButtonTabs.ui.qml\n        Pocket_Demo_SkylightUI/ButtonWithIcon.ui.qml\n        Pocket_Demo_SkylightUI/IconsSkylight.ui.qml\n        Pocket_Demo_SkylightUI/Layout.ui.qml\n    RESOURCES\n        shaders/steam.vert\n        shaders/steam.frag\n        shaders/SSS.vert\n        shaders/SSS.frag\n        shaders/spark.vert\n        shaders/spark.frag\n        shaders/snow.vert\n        shaders/snow.frag\n        shaders/smokerm.vert\n        shaders/smokerm.frag\n        shaders/smoke.vert\n        shaders/smoke.frag\n        shaders/sky.vert\n        shaders/sky.frag\n        shaders/shockwave.vert\n        shaders/shockwave.frag\n        shaders/raindrop.vert\n        shaders/raindrop.frag\n        shaders/rainsplash.frag\n        shaders/debris.vert\n        shaders/debris.frag\n        shaders/heatwave.vert\n        shaders/heatwave.frag\n        shaders/floor.vert\n        shaders/floor.frag\n        shaders/flash.vert\n        shaders/flash.frag\n        shaders/fire.vert\n        shaders/fire.frag\n        shaders/dustcloud.vert\n        shaders/dustcloud.frag\n        shaders/bubble.vert\n        shaders/bubble.frag\n        shaders/cloud.vert\n        shaders/cloud.frag\n        Figma_Assets/assets/qtlogo.png\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project and Dependencies (CMake)\nDESCRIPTION: This snippet initializes the CMake project. It sets the minimum required CMake version, names the project, and declares the languages used (CXX). It then uses `find_package` to locate the required Qt modules: Gui, Widgets, and Quick.  The `qt_standard_project_setup` command is used to set up the standard Qt project.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/windowembedding/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(windowembedding LANGUAGES CXX)\n\nfind_package(Qt6 REQUIRED COMPONENTS Gui Widgets Quick)\n\nqt_standard_project_setup(REQUIRES 6.8)\n```\n\n----------------------------------------\n\nTITLE: Generating Deployment Script\nDESCRIPTION: This generates a deployment script for the ThermostatApp, configuring settings for MACOS_BUNDLE_POST_BUILD and using NO_UNSUPPORTED_PLATFORM_ERROR and DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM flags. It creates a script that helps deploy the application with necessary Qt dependencies.  This is critical for deploying the application correctly on the target platforms.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET ThermostatApp\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Qt Project Setup - CMake\nDESCRIPTION: Applies standard configuration settings and best practices for a Qt project using the qt_standard_project_setup macro. It further specifies that the project requires Qt 6.8 or later, potentially overriding the minimum version found earlier.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nqt_standard_project_setup(REQUIRES 6.8)\n```\n\n----------------------------------------\n\nTITLE: Add Executable Target\nDESCRIPTION: This snippet adds an executable target to the CMake project, using the `qt_add_executable` command. The executable is named `${PROJECT_NAME}` and is built from the listed source files (main.cpp) and the Android manifest file.  This creates the main executable for the application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(${PROJECT_NAME}\n    main.cpp\n    android/AndroidManifest.xml\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation and Deployment for a Qt App in CMake\nDESCRIPTION: Defines installation rules for the 'ToDoListApp' target, placing the application bundle in the current directory, runtime executables in CMAKE_INSTALL_BINDIR, and libraries in CMAKE_INSTALL_LIBDIR. It also generates a deployment script ('deploy_script') tailored for QML applications, including post-build steps for macOS bundles and handling for unsupported platforms, and installs this script.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ToDoListApp\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\nqt_generate_deploy_qml_app_script(\n    TARGET ToDoListApp\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Defining Application Installation Rules - CMake\nDESCRIPTION: This command defines the installation rules for the executable target. It specifies where the executable, platform-specific bundles (like `.app` on macOS), and associated libraries should be placed during the installation process.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS appStocQt\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Thermostat QML Module in CMake\nDESCRIPTION: Defines a Qt QML module using the `qt_add_qml_module` CMake macro, associated with the `Thermostat` target library. It assigns the module a URI \"Thermostat\" and version 1.0. The `QML_FILES` keyword lists the QML files that belong to this module, including the previously configured singletons `AppSettings.qml` and `Constants.qml`, along with `RoomsModel.qml`. This makes these QML types available for import in other QML code using `import Thermostat 1.0`. Requires CMake and the Qt QML module.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/imports/Thermostat/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(Thermostat\n    URI \"Thermostat\"\n    VERSION 1.0\n    QML_FILES\n        AppSettings.qml\n        Constants.qml\n        RoomsModel.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building PdfViewer Plugin with Qt6 in CMake\nDESCRIPTION: This CMake snippet defines the PdfViewer plugin target, specifying required Qt6 modules (Core, Gui, Widgets, PdfWidgets) and optionally PrintSupport. It enumerates source and header files for the PdfViewer, ZoomSelector, and HoverWatcher components. The snippet sets output directory, include directories relative to the project structure, and links necessary Qt libraries along with an abstract viewer dependency. It includes conditional linking of Qt6::PrintSupport if available, sets platform-dependent installation destinations for Windows, macOS, and Unix, and installs the plugin's runtime and library files accordingly.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/pdfviewer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets PdfWidgets\\n                 OPTIONAL_COMPONENTS PrintSupport)\\n\\nqt_add_plugin(pdfviewer\\n    CLASS_NAME PdfViewer\\n    pdfviewer.cpp pdfviewer.h\\n    zoomselector.cpp zoomselector.h\\n    hoverwatcher.cpp hoverwatcher.h\\n)\\n\\nset_target_properties(pdfviewer PROPERTIES\\n    LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/app\"\\n)\\n\\ntarget_include_directories(pdfviewer PRIVATE\\n    ../../app\\n    ..\\n)\\n\\ntarget_link_libraries(pdfviewer PRIVATE\\n    Qt6::Core\\n    Qt6::Gui\\n    Qt6::Widgets\\n    Qt6::PdfWidgets\\n    abstractviewer\\n)\\n\\nif(TARGET Qt6::PrintSupport)\\n    target_link_libraries(pdfviewer PRIVATE Qt6::PrintSupport)\\nendif()\\n\\nif(WIN32)\\n    set(install_destination \"${CMAKE_INSTALL_BINDIR}/app\")\\nelseif(APPLE)\\n    set(install_destination \".\")\\nelse()\\n    set(install_destination \"${CMAKE_INSTALL_BINDIR}\")\\nendif()\\ninstall(TARGETS pdfviewer\\n    RUNTIME DESTINATION \"${install_destination}\"\\n    LIBRARY DESTINATION \"${install_destination}\"\\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Required Qt Libraries - CMake\nDESCRIPTION: This command links the required Qt component libraries privately to the executable target. The specified components (Core, Gui, Qml, Quick, Graphs) must be found by the `find_package` command earlier in the script.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(appStocQt PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Qml\n    Qt6::Quick\n    Qt6::Graphs\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SameGame executable target\nDESCRIPTION: Creates the main executable for the SameGame application and sets properties for Windows and macOS platforms.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/samegame/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(samegame\n    main.cpp\n)\n\nset_target_properties(samegame PROPERTIES\n    WIN32_EXECUTABLE TRUE\n    MACOSX_BUNDLE TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a QML Module with qt_add_qml_module (CMake)\nDESCRIPTION: This snippet defines a QML module named `Ast_LightDecal` using the `qt_add_qml_module` CMake function. It sets the URI, class name, version, and resource prefix for the module. It also specifies the QML files to be included in the module. The module is a part of Qt Quick and allows for the distribution and reuse of QML components.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/LightDecal/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(Ast_LightDecal\n    URI \"Quick3DAssets.LightDecal\"\n    CLASS_NAME \"LightDecalPlugin\"\n    VERSION 1.0\n    RESOURCE_PREFIX \"/qt/qml\"\n    QML_FILES\n        LightDecal.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Data Files as Application Resources - CMake\nDESCRIPTION: This command embeds the list of data files specified in the `data_resource_files` variable into the application's resources. These files will be accessible from within the application using the Qt resource system under the root prefix (`/`).\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nqt6_add_resources(appStocQt \"data\"\n    PREFIX \"/\"\n    FILES\n        ${data_resource_files}\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Deployment Script for Qt Application\nDESCRIPTION: Creates a deployment script named 'deploy_script' for the 'colorpaletteclient' target, with options tailored for macOS bundle post-build steps and platform compatibility. Enables deployment of the Qt application and its resources, facilitating distribution and execution on supported platforms.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/colorpaletteclient/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET colorpaletteclient\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Android OpenSSL Dependency - CMake\nDESCRIPTION: This block defines an option to control fetching Android OpenSSL support. If enabled and the target platform is Android, it uses `FetchContent` to download, build, and link the OpenSSL libraries to the executable target. A warning is issued if the option is off on Android, indicating potential lack of live data support.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\noption(QT_ANDROID_FETCH_OPENSSL \"Fetch Android OpenSSL support for Qt from gitlab\" OFF)\n\nif (ANDROID)\n    if (QT_ANDROID_FETCH_OPENSSL)\n        include(FetchContent)\n        FetchContent_Declare(\n            android_openssl\n            DOWNLOAD_EXTRACT_TIMESTAMP true\n            URL      https://github.com/KDAB/android_openssl/archive/refs/heads/master.zip\n        )\n\n        FetchContent_MakeAvailable(android_openssl)\n        include(${android_openssl_SOURCE_DIR}/android_openssl.cmake)\n        add_android_openssl_libraries(appStocQt)\n    else()\n        message(WARNING \"android_openssl.cmake not found. Live data will not be available.\\n            Consider setting QT_ANDROID_FETCH_OPENSSL=TRUE\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Qt6 Components - CMake\nDESCRIPTION: This snippet uses the `find_package` command to locate the required Qt6 components (Core, Gui, Widgets). It specifies PrintSupport as an optional component. This is a prerequisite step for using Qt libraries in the project. The REQUIRED parameter ensures the build fails if any of the specified components are not found.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/txtviewer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets\n                 OPTIONAL_COMPONENTS PrintSupport)\n```\n\n----------------------------------------\n\nTITLE: Add QML Module - CMake\nDESCRIPTION: This snippet uses `qt6_add_qml_module` to define a QML module named `ToDoList`.  It specifies the module URI as `ToDoList`, the version as `1.0`, and lists the QML files that make up the module. This command registers the QML module with Qt's QML engine, making its components available for use in other QML applications.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/imports/ToDoList/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(ToDoList STATIC)\nqt6_add_qml_module(ToDoList\n    URI \"ToDoList\"\n    VERSION 1.0\n    QML_FILES\n        AppSettings.qml\n        Constants.qml\n        Database.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up RobotArm Project with CMake\nDESCRIPTION: Initializes the CMake project, specifies the C++ language, sets CMake options for include directories and auto-moc, and finds the required Qt6 modules (Gui, Qml, Quick, Quick3D). It sets up Qt standard project settings and creates an executable.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n\nproject(RobotArm LANGUAGES CXX)\n\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\nset(CMAKE_AUTOMOC ON)\n\nfind_package(Qt6 REQUIRED COMPONENTS Gui Qml Quick Quick3D)\nqt_standard_project_setup()\nqt_add_executable(RobotArmApp src/main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Finding Qt6 Dependencies\nDESCRIPTION: This finds and requires the Qt6 framework components: Gui, Qml, Quick, QuickControls2, Svg, and Charts. The version 6.5 is required.  This is crucial for linking the necessary Qt libraries for the application.  The \"REQUIRED\" flag makes the build fail if any of the specified components are not found.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Qt6 6.5 REQUIRED COMPONENTS Gui Qml Quick QuickControls2 Svg Charts)\n```\n\n----------------------------------------\n\nTITLE: Defining Ast_InteriorShadow Library and QML Module in CMake\nDESCRIPTION: This CMake code defines a static Qt library named 'Ast_InteriorShadow' using `qt_add_library`. It then configures and registers a corresponding QML module using `qt6_add_qml_module`, setting its URI to 'Quick3DAssets.InteriorShadow', version 1.0, specifying a resource prefix, a plugin class name, and listing 'InteriorShadow.qml' as the required QML file.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/InteriorShadow/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(Ast_InteriorShadow STATIC)\n\nqt6_add_qml_module(Ast_InteriorShadow\n    URI \"Quick3DAssets.InteriorShadow\"\n    CLASS_NAME \"InteriorShadowPlugin\"\n    VERSION 1.0\n    RESOURCE_PREFIX \"/qt/qml\"\n    QML_FILES\n        InteriorShadow.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Registering a Qt QML Module with QML Files and Resources Using CMake\nDESCRIPTION: Configures the ThermostatCustomControls QML module with the URI \"ThermostatCustomControls\" and version 1.0 by listing all QML files included in the module and associated resource image files. Utilizes the qt_add_qml_module macro to bundle the QML component files and images, enabling their deployment and usage in Qt applications.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/imports/ThermostatCustomControls/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(ThermostatCustomControls\n    URI \"ThermostatCustomControls\"\n    VERSION 1.0\n    QML_FILES\n        CustomComboBox.qml\n        CustomDial.qml\n        CustomRadioButton.qml\n        CustomRoundButton.qml\n        CustomSlider.qml\n        CustomSwitch.qml\n        CustomTextField.qml\n        StatisticsChart.qml\n        TemperatureLabel.qml\n        ThermostatControl.qml\n        TimeSelector.qml\n    RESOURCES\n        images/keyboard.svg\n        images/thermometer.svg\n        images/tooltip.svg\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick Examples conditionally in CMake\nDESCRIPTION: This snippet adds several standard Qt Quick examples (`samegame`, `clocks`, `maroon`) to the build if the `Qt6::Quick` module target is available. The `qt_internal_add_example` function registers the specified example directory with the build system.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::Quick)\n    qt_internal_add_example(samegame)\n    qt_internal_add_example(clocks)\n    qt_internal_add_example(maroon)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Android Platform-Specific Settings\nDESCRIPTION: This block is executed if the build platform is Android. It sets the package source directory and includes Android-specific source files. It is important for integrating the application with the Android platform.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID)\n    set_property(TARGET hangman APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR\n        ${CMAKE_CURRENT_SOURCE_DIR}/purchasing/android/\n    )\n\n    target_sources(hangman PRIVATE\n        purchasing/android/androidinappproduct.cpp purchasing/android/androidinappproduct.h\n        purchasing/android/androidinapppurchasebackend.cpp purchasing/android/androidinapppurchasebackend.h\n        purchasing/android/androidinapptransaction.cpp purchasing/android/androidinapptransaction.h\n        purchasing/android/androidjni.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Performing Standard Qt Project Setup - CMake\nDESCRIPTION: This macro applies standard Qt project configurations, including setting up necessary build directories and checking for minimum Qt version requirements. It specifically requires Qt 6.5 or later.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_standard_project_setup(REQUIRES 6.5)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directory and Finding Qt Packages\nDESCRIPTION: This sets the current directory as an include directory and finds the required Qt packages. It ensures that the compiler can locate the necessary header files for the Qt modules, making them accessible during the build process. It also requires the Qt6 modules: Core, Quick, QuickControls2, Svg and Multimedia.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\nfind_package(Qt6 6.5 REQUIRED COMPONENTS Core Quick QuickControls2 Svg Multimedia)\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring a QML Module using CMake in CMake\nDESCRIPTION: This snippet initializes the \"Config\" QML module as a static library using qt_add_library, marks \"Config.qml\" as a singleton QML file with set_source_files_properties, and registers the module with URI and output directory via qt_add_qml_module. Dependencies include CMake, Qt 6 with QML and core libraries, and appropriate CMake macros. The primary input is the name of the QML file and the desired URI; upon build, it outputs a statically linked QML module ready for application import. Ensure all file paths and URI are kept in sync.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/Config/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(Config STATIC)\n\nset_source_files_properties(Config.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n\nqt_add_qml_module(Config\n    URI \"Config\"\n    OUTPUT_DIRECTORY Config\n    QML_FILES\n        \"Config.qml\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Application Configuration Resources - CMake\nDESCRIPTION: This command embeds specific configuration files into the application's resources. It takes a logical resource identifier (\"configuration\") and lists files like `qtquickcontrols2.conf` to be included under the root prefix (`/`).\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_resources(appStocQt \"configuration\"\n    PREFIX \"/\"\n    FILES\n        qtquickcontrols2.conf\n    )\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Libraries\nDESCRIPTION: This line links the required Qt libraries to the `osmbuildings` target.  It uses `target_link_libraries` and specifies that the dependencies (Qt6::Core, Qt6::Gui, Qt6::Quick, Qt6::Quick3D, Qt6::Positioning) are private, meaning they are not propagated to other targets. It requires that the Qt components have been found using `find_package`.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/osmbuildings/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(osmbuildings PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Quick\n    Qt6::Quick3D\n    Qt6::Positioning\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Static Qt Library and QML Module via CMake\nDESCRIPTION: This snippet defines a static Qt library target named 'CarRendering' and adds a corresponding Qt 6 QML module. It specifies the module URI 'CarRendering', the version '1.0', a resource prefix for accessing QML resources at runtime, and the related QML source files. This setup enables modular and versioned QML integration alongside the static library, facilitating resource management and module loading in Qt 6 projects.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/imports/CarRendering/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(CarRendering STATIC)\nqt6_add_qml_module(CarRendering\n    URI \"CarRendering\"\n    VERSION 1.0\n    RESOURCE_PREFIX \"/qt/qml\"\n    QML_FILES\n        Constants.qml\n        DirectoryFontLoader.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Libraries and Including QML Modules in CMake\nDESCRIPTION: Includes the 'qmlmodules.cmake' script, likely containing logic for handling QML module discovery or processing. It then links the 'ToDoListApp' executable privately against the essential Qt 6 libraries: Core, Gui, Quick, Qml, and QuickControls2.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(qmlmodules.cmake)\n\ntarget_link_libraries(ToDoListApp PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Quick\n    Qt6::Qml\n    Qt6::QuickControls2\n)\n```\n\n----------------------------------------\n\nTITLE: Add Qt QML Module using qt_add_qml_module - CMake\nDESCRIPTION: This CMake command defines a QML module named 'Quick3DAssets.Ventdee_LOD0' with version 1.0.  It specifies the URI, version, resource prefix, and QML files for the module. The `RESOURCE_PREFIX` defines the base path for QML resources, and `QML_FILES` lists the QML files included in the module.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/Ventdee_LOD0/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(Ast_Ventdee\n    URI \"Quick3DAssets.Ventdee_LOD0\"\n    VERSION 1.0\n    RESOURCE_PREFIX \"/qt/qml\"\n    QML_FILES\n        Ventdee_LOD0.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Libraries to Executable (CMake)\nDESCRIPTION: This command links the necessary Qt libraries to the \"rssnews\" executable target. The libraries specified correspond to the components found earlier, making their functionality available to the application's C++ code. The `PRIVATE` keyword means these libraries are only needed for building the executable itself.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/rssnews/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(rssnews PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Qml\n    Qt6::Quick\n    Qt6::QmlXmlListModel\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Linking Qt Libraries\nDESCRIPTION: This snippet links the 'hangman' target with required Qt libraries (Core, Gui, Qml, Quick, and QuickControls2).  These libraries are essential for the application's core functionality, including the user interface and core logic.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hangman PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Qml\n    Qt6::Quick\n    Qt6::QuickControls2\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library and QML Module in Qt (CMake)\nDESCRIPTION: This code snippet uses CMake commands to create a static library and a QML module named 'robotarm_content'. It specifies the URI, version, QML files, resources, and resource prefix for the module. This configuration is commonly used in Qt Design Studio projects to define QML-based user interfaces and their associated resources.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/content/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(robotarm_content STATIC)\nqt6_add_qml_module(robotarm_content\n    URI \"content\"\n    VERSION 1.0\n    QML_FILES\n        App.qml\n        LabeledSlider.ui.qml\n        MainScreen.ui.qml\n        NodeIndicator.qml\n        RoboticArm.ui.qml\n        Toggle.ui.qml\n    RESOURCES\n        fonts/fonts.txt\n        maps/qt.png\n        meshes/arm.mesh\n        meshes/base.mesh\n        meshes/forearm.mesh\n        meshes/hand.mesh\n        meshes/hand_grab_b.mesh\n        meshes/hand_grab_b_hinge_1.mesh\n        meshes/hand_grab_b_hinge_2.mesh\n        meshes/hand_grab_t.mesh\n        meshes/hand_grab_t_hinge_1.mesh\n        meshes/hand_grab_t_hinge_2.mesh\n        meshes/hand_hinge.mesh\n        meshes/root.mesh\n    RESOURCE_PREFIX \"/\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Qt Project\nDESCRIPTION: This uses the qt_standard_project_setup function to configure the Qt project, requiring version 6.5. This sets up standard configurations needed by Qt projects, like include paths and compiler flags. This prepares the project for Qt-specific build processes.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nqt_standard_project_setup(REQUIRES 6.5)\n```\n\n----------------------------------------\n\nTITLE: Adding QML Module with Resources and Sources\nDESCRIPTION: Defines a QML module named 'ColorPalette' with associated QML files, source headers and implementation, resource icons, and other assets. This setup integrates the QML interface with native code, enabling seamless interaction between QML UI components and C++ backend classes.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/colorpaletteclient/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(colorpaletteclient\n    URI ColorPalette\n    QML_FILES\n        ColorPalette/Main.qml\n        ColorPalette/ServerSelection.qml\n        ColorPalette/ColorView.qml\n        ColorPalette/ColorDialogEditor.qml\n        ColorPalette/ColorDialogDelete.qml\n        ColorPalette/UserMenu.qml\n    SOURCES\n        abstractresource.h\n        basiclogin.h basiclogin.cpp\n        restservice.h restservice.cpp\n        paginatedresource.h paginatedresource.cpp\n    RESOURCES\n        icons/qt.png\n        icons/testserver.png\n        icons/userMask.svg\n        icons/close.svg\n        icons/delete.svg\n        icons/dots.svg\n        icons/edit.svg\n        icons/login.svg\n        icons/logout.svg\n        icons/ok.svg\n        icons/update.svg\n        icons/user.svg\n        icons/plus.svg\n```\n\n----------------------------------------\n\nTITLE: Defining Qt Static Library for Quick Studio Components in CMake\nDESCRIPTION: Creates a static library named QQS_Components and defines a QML module with various shape components. The module is registered with URI 'QtQuick.Studio.Components' version 1.0 and includes multiple QML files that implement different visual elements.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/imports/QtQuick/Studio/Components/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(QQS_Components STATIC)\n\nqt_add_qml_module(QQS_Components\n    URI QtQuick.Studio.Components\n    VERSION 1.0\n    CLASS_NAME QQS_ComponentsPlugin\n    QML_FILES\n        ArcItem.qml\n        PieItem.qml\n        TriangleItem.qml\n        SvgPathItem.qml\n        EllipseItem.qml\n        FlipableItem.qml\n        RectangleItem.qml\n        RegularPolygonItem.qml\n        BorderItem.qml\n        IsoItem.qml\n        GroupItem.qml\n        ArcArrow.qml\n        StraightArrow.qml\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Adding QML Module 'hangman'\nDESCRIPTION: This snippet defines a QML module named 'hangman', including various QML files for UI components.  It specifies the module's URI, version, and includes QML files. The module is used to expose QML components to the application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(hangman\n    URI Hangman\n    VERSION  1.0\n    NO_RESOURCE_TARGET_PATH\n    QML_FILES\n      qml/GameView.qml\n      qml/GuessWordView.qml\n      qml/Hangman.qml\n      qml/HowToView.qml\n      qml/Key.qml\n      qml/Letter.qml\n      qml/LetterSelector.qml\n      qml/MainView.qml\n      qml/PageHeader.qml\n      qml/ScoreItem.qml\n      qml/SimpleButton.qml\n      qml/SplashScreen.qml\n      qml/StoreItem.qml\n      qml/StoreView.qml\n      qml/Word.qml\n      main.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target with Sources - CMake\nDESCRIPTION: Defines an executable target named \"FxMaterialShowroomApp\". It lists the source files (.cpp, .h) that are compiled and linked together to create the final application binary.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(FxMaterialShowroomApp\n    src/app_environment.h\n    src/main.cpp\n    src/imagedownloader.cpp\n    src/imagedownloader.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick 3D XR Physics Multimedia Example conditionally in CMake\nDESCRIPTION: This snippet adds the `xr_physicsbase_teleportation` example if `Qt::Quick`, `Qt::Quick3D`, `Qt::Quick3DXr`, `Qt::Quick3DPhysics`, and `Qt::Multimedia` targets are available. This example demonstrates a basic physics and teleportation scenario in a Quick 3D XR environment.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt::Quick AND TARGET Qt::Quick3D AND TARGET Qt::Quick3DXr AND TARGET Qt::Quick3DPhysics AND TARGET Qt::Multimedia)\n    qt_internal_add_example(xr_physicsbase_teleportation)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding a QML Module (CMake)\nDESCRIPTION: This snippet creates a QML module using `qt_add_qml_module`. It defines the URI for the module, specifies the QML files, and sets an output directory.  The QML files are located in 'Main.qml', and the output will be put inside a directory named `windowembedding_module`.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/windowembedding/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(windowembedding URI windowembedding\n    QML_FILES \"Main.qml\"\n    OUTPUT_DIRECTORY windowembedding_module\n)\n```\n\n----------------------------------------\n\nTITLE: Adding QML Module\nDESCRIPTION: This snippet defines a QML module named `Q3DViewerModule` using `qt_add_qml_module`. It specifies the URI for the module as `Q3DViewer` and lists the QML files that are part of the module: `Viewer.qml` and `QueryMimeTypes.qml`. This allows the QML code to be organized into a reusable module, which can be imported and used in other QML applications.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/q3dviewer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(Q3DViewerModule\n    URI Q3DViewer\n    QML_FILES\n        Viewer.qml\n        QueryMimeTypes.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Add Qt QML Module (CMake)\nDESCRIPTION: Configures the `backendmodule` target as a Qt QML module. It specifies the module's URI (`Backend`), version (`1.0`), source files (`animatedparam.cpp`, etc.), and a resource prefix (`/`). This command is specific to Qt's CMake integration. Requires the `backendmodule` target to exist.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/Backend/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(backendmodule\n    URI Backend\n    VERSION 1.0\n    SOURCES\n        animatedparam.cpp\n        animatedparam.h\n        backend.cpp\n        backend.h\n    RESOURCE_PREFIX \"/\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with CMake - CMake\nDESCRIPTION: This code snippet demonstrates how to organize a CMake-based project by including multiple subdirectories using the add_subdirectory command. Each statement links an external subdirectory (such as EV_SportsCar_low or Pebbles) to the main project, facilitating modular builds. No additional dependencies are required beyond a standard CMake setup; each subdirectory should contain its own CMakeLists.txt. All specified directories will be processed and included in the overall build when configuring the project.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(EV_SportsCar_low)\nadd_subdirectory(InteriorShadow)\nadd_subdirectory(LightDecal)\nadd_subdirectory(Pebbles)\nadd_subdirectory(ShadowPlane)\nadd_subdirectory(Venodhb_LOD0)\nadd_subdirectory(Ventdee_LOD0)\n```\n\n----------------------------------------\n\nTITLE: Set Target Properties\nDESCRIPTION: This snippet sets properties for the executable target `${PROJECT_NAME}`. It configures the target as a WIN32_EXECUTABLE and a MACOSX_BUNDLE, which are required for building Windows and macOS applications respectively.  This ensures the application is packaged correctly for each platform.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${PROJECT_NAME} PROPERTIES\n    WIN32_EXECUTABLE TRUE\n    MACOSX_BUNDLE TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Quick QML Module with CMake - CMake\nDESCRIPTION: This build script configures the LightningViewerStyle module for the Qt Quick framework using CMake. It specifies the required Qt components, registers QML singleton types, adds QML files and associated image resources to the build, and sets up output and installation directories. Dependencies include CMake (>= 3.16) and Qt6 with the Quick component enabled. Expected inputs are QML files and PNG resources, and the output is a built and installable QML module. The script must be used in a Qt-enabled CMake project environment.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/LightningViewerStyle/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(LightningViewerStyle LANGUAGES CXX)\n\nset(CMAKE_AUTOMOC ON)\n\nfind_package(Qt6 REQUIRED COMPONENTS Quick)\n\nset_source_files_properties(Config.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE TRUE\n)\n\nqt_add_qml_module(${PROJECT_NAME}\n    URI LightningViewerStyle\n    QML_FILES\n        Button.qml\n        Config.qml\n        RoundButton.qml\n        StyleImage.qml\n    RESOURCES\n        dark/images/roundbutton-background-checked-disabled@2x.png\n        dark/images/button-background-checked-hovered.png\n        dark/images/roundbutton-background-checked-disabled.png\n        dark/images/flatbutton-background.png\n        dark/images/flatbutton-background-disabled.png\n        dark/images/flatbutton-background-checked-pressed.png\n        dark/images/button-background.png\n        dark/images/flatbutton-background-hovered.png\n        dark/images/button-background-checked-hovered@2x.png\n        dark/images/roundbutton-background-checked-hovered.png\n        dark/images/button-background-checked.png\n        dark/images/flatbutton-background-checked-hovered@2x.png\n        dark/images/roundbutton-background-disabled.png\n        dark/images/flatbutton-background-disabled@2x.png\n        dark/images/roundbutton-background@2x.png\n        dark/images/flatbutton-background-checked-pressed@2x.png\n        dark/images/button-background@2x.png\n        dark/images/button-background-hovered@2x.png\n        dark/images/roundbutton-background-checked-pressed.png\n        dark/images/roundbutton-background-hovered.png\n        dark/images/roundbutton-background-checked.png\n        dark/images/flatbutton-background-checked@2x.png\n        dark/images/roundbutton-background.png\n        dark/images/button-background-pressed@2x.png\n        dark/images/roundbutton-background-disabled@2x.png\n        dark/images/flatbutton-background-checked.png\n        dark/images/button-background-disabled.png\n        dark/images/roundbutton-background-pressed@2x.png\n        dark/images/flatbutton-background-checked-disabled.png\n        dark/images/roundbutton-background-checked@2x.png\n        dark/images/roundbutton-background-checked-hovered@2x.png\n        dark/images/button-background-hovered.png\n        dark/images/flatbutton-background-checked-disabled@2x.png\n        dark/images/button-background-checked-disabled@2x.png\n        dark/images/button-background-checked-disabled.png\n        dark/images/button-background-checked-pressed@2x.png\n        dark/images/flatbutton-background@2x.png\n        dark/images/button-background-checked@2x.png\n        dark/images/button-background-pressed.png\n        dark/images/button-background-checked-pressed.png\n        dark/images/button-background-disabled@2x.png\n        dark/images/flatbutton-background-pressed.png\n        dark/images/flatbutton-background-checked-hovered.png\n        dark/images/flatbutton-background-pressed@2x.png\n        dark/images/roundbutton-background-pressed.png\n        dark/images/roundbutton-background-checked-pressed@2x.png\n        dark/images/flatbutton-background-hovered@2x.png\n        dark/images/roundbutton-background-hovered@2x.png\n        light/images/roundbutton-background-checked-disabled@2x.png\n        light/images/button-background-checked-hovered.png\n        light/images/roundbutton-background-checked-disabled.png\n        light/images/flatbutton-background.png\n        light/images/flatbutton-background-disabled.png\n        light/images/flatbutton-background-checked-pressed.png\n        light/images/button-background.png\n        light/images/flatbutton-background-hovered.png\n        light/images/button-background-checked-hovered@2x.png\n        light/images/roundbutton-background-checked-hovered.png\n        light/images/button-background-checked.png\n        light/images/flatbutton-background-checked-hovered@2x.png\n        light/images/roundbutton-background-disabled.png\n        light/images/flatbutton-background-disabled@2x.png\n        light/images/roundbutton-background@2x.png\n        light/images/flatbutton-background-checked-pressed@2x.png\n        light/images/button-background@2x.png\n        light/images/button-background-hovered@2x.png\n        light/images/roundbutton-background-checked-pressed.png\n        light/images/roundbutton-background-hovered.png\n        light/images/roundbutton-background-checked.png\n        light/images/flatbutton-background-checked@2x.png\n        light/images/roundbutton-background.png\n        light/images/button-background-pressed@2x.png\n        light/images/roundbutton-background-disabled@2x.png\n        light/images/flatbutton-background-checked.png\n        light/images/button-background-disabled.png\n        light/images/roundbutton-background-pressed@2x.png\n        light/images/flatbutton-background-checked-disabled.png\n        light/images/roundbutton-background-checked@2x.png\n        light/images/roundbutton-background-checked-hovered@2x.png\n        light/images/button-background-hovered.png\n        light/images/flatbutton-background-checked-disabled@2x.png\n        light/images/button-background-checked-disabled@2x.png\n        light/images/button-background-checked-disabled.png\n        light/images/button-background-checked-pressed@2x.png\n        light/images/flatbutton-background@2x.png\n        light/images/button-background-checked@2x.png\n        light/images/button-background-pressed.png\n        light/images/button-background-checked-pressed.png\n        light/images/button-background-disabled@2x.png\n        light/images/flatbutton-background-pressed.png\n        light/images/flatbutton-background-checked-hovered.png\n        light/images/flatbutton-background-pressed@2x.png\n        light/images/roundbutton-background-pressed.png\n        light/images/roundbutton-background-checked-pressed@2x.png\n        light/images/flatbutton-background-hovered@2x.png\n        light/images/roundbutton-background-hovered@2x.png\n)\n\ntarget_link_libraries(${PROJECT_NAME} PRIVATE\n    Qt6::Quick\n)\n\ninstall(TARGETS ${PROJECT_NAME}\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}/LightningViewerStyle\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_BINDIR}/LightningViewerStyle\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/qmldir\n    DESTINATION \"${CMAKE_INSTALL_BINDIR}/LightningViewerStyle\"\n)\n\n```\n\n----------------------------------------\n\nTITLE: Add Qt Static Library using qt_add_library - CMake\nDESCRIPTION: This CMake command adds a static library named 'Ast_Ventdee' to the Qt project.  It uses the `qt_add_library` function, specific to Qt projects using CMake, to properly handle Qt-related dependencies and build processes for libraries.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/Ventdee_LOD0/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(Ast_Ventdee STATIC)\n```\n\n----------------------------------------\n\nTITLE: Finding Qt Components and Adding Executable\nDESCRIPTION: This code searches for required Qt components (Core, Gui, Quick, Quick3D, and Positioning) and adds an executable named `osmbuildings`. The `qt_add_executable` command compiles the provided source files into the executable.  It expects that the Qt components are installed on the system and accessible through CMake.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/osmbuildings/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Quick Quick3D Positioning)\n\nqt_add_executable(osmbuildings\n    main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Static Library and QML Module with CMake - CMake\nDESCRIPTION: This snippet adds a static library ('CarConfiguratorContent') and registers it as a QML module named 'content' for Qt6 projects. It specifies the version, URI, resource prefix, lists QML files for inclusion, and embeds specific resources such as images and JSON asset metadata. Dependencies include the CMake and Qt6 build environment, and all QML and resource files listed must exist. No direct input is required as configuration is static, and the output is a properly registered QML module with bundled resources.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/content/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(CarConfiguratorContent STATIC)\nqt6_add_qml_module(CarConfiguratorContent\n    URI \"content\"\n    VERSION 1.0\n    RESOURCE_PREFIX \"/qt/qml\"\n    QML_FILES\n        App.qml\n        CameraReset.qml\n        DebugBox.ui.qml\n        DoorButton.qml\n        doorIcon/Door_button.ui.qml\n        doorIcon/Icons.ui.qml\n        doorIcon/Logo.ui.qml\n        Headlights.ui.qml\n        InteriorPointLight.qml\n        KissButton.qml\n        KissButtonSeparator.qml\n        MouseRotatorAndWASD.qml\n        PinchWidget.qml\n        ScreenPrimary.qml\n        WallEffect1/WallEffect1.qml\n        WallEffect2/WallEffect2.qml\n        WallEffect3/WallEffect3.qml\n    RESOURCES\n        images/builtWithQt.png\n        assets/assets_download.json\n)\n\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing Deployment Script\nDESCRIPTION: This generates and installs a deployment script for the application. This script helps package and deploy the Qt application, including necessary dependencies, ensuring it runs correctly on the target platform. It also includes options to handle deployment on unsupported platforms.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET MediaPlayerApp\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project and Finding Qt 6 Dependencies\nDESCRIPTION: Sets the minimum required CMake version to 3.18, defines the project name ('ToDoListApp') and its language (CXX), finds the necessary Qt 6 components (Gui, Qml, Quick, QuickControls2) requiring at least version 6.5, and applies standard Qt project setup configurations.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18)\n\nproject(ToDoListApp LANGUAGES CXX)\n\nfind_package(Qt6 6.5 COMPONENTS Gui Qml Quick QuickControls2)\n\nqt_standard_project_setup(REQUIRES 6.5)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project and Finding Qt6 Dependencies\nDESCRIPTION: Sets the minimum required CMake version (3.16), defines the project name ('documentviewer') and language (CXX), finds necessary Qt6 components (Core, Gui, Widgets, Svg) which are required for the build, and applies standard Qt project setup configurations provided by Qt's CMake integration.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/app/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(documentviewer LANGUAGES CXX)\n\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets Svg)\n\nqt_standard_project_setup()\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target for Qt Application\nDESCRIPTION: Defines the executable 'colorpaletteclient' with 'main.cpp' as its source file. Sets target properties to enable Windows and macOS-specific bundle and executable configurations. This step consolidates source files and platform-specific options necessary for building the application binary.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/colorpaletteclient/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(colorpaletteclient\n    main.cpp\n)\n\nset_target_properties(colorpaletteclient PROPERTIES\n    WIN32_EXECUTABLE TRUE\n    MACOSX_BUNDLE TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android-specific properties for Qt Dice app\nDESCRIPTION: Sets Android-specific properties for the Qt dice application including package name, SDK version, and import plugins configuration for optimized APK size.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/dice/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID)\n    set_target_properties(${appname} PROPERTIES\n        QT_ANDROID_PACKAGE_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/android\"\n        QT_ANDROID_PACKAGE_NAME \"io.qt.dice\"\n        QT_ANDROID_TARGET_SDK_VERSION 34\n        QT_ANDROID_VERSION_CODE 10\n        QT_ANDROID_VERSION_NAME \"1.0\"\n    )\n\n    qt_import_plugins(${appname}\n        INCLUDE_BY_TYPE imageformats Qt::QSvgPlugin Qt::QJpegPlugin\n        EXCLUDE_BY_TYPE qmltooling\n        EXCLUDE_BY_TYPE iconengines\n        EXCLUDE_BY_TYPE networkinformation\n        EXCLUDE_BY_TYPE tls\n        EXCLUDE_BY_TYPE platforminputcontexts\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Qt Dice project with CMake\nDESCRIPTION: Configures a basic Qt6 project named 'qtdice' with required components and project setup for cross-platform compatibility.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/dice/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nset(appname \"qtdice\")\nproject(${appname} LANGUAGES CXX)\n\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Quick Quick3D Quick3DPhysics Multimedia Sensors)\n\nqt_standard_project_setup(REQUIRES 6.8)\n\nqt_add_executable(${appname} WIN32 MACOSX_BUNDLE\n    main.cpp\n)\n\ntarget_link_libraries(${appname} PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Quick\n    Qt6::Quick3D\n    Qt6::Quick3DPhysics\n    Qt6::Multimedia\n    Qt6::Sensors\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standard and Qt Dependencies\nDESCRIPTION: This code sets the required C++ standard, finds Qt6 components (Quick and QuickControls2), and sets up the Qt project. These components are crucial for using Qt's QML-based UI and controls, including Qt Quick and QuickControls2. The project requires Qt version 6.6.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nfind_package(Qt6 REQUIRED COMPONENTS Quick QuickControls2)\n\nqt_standard_project_setup(REQUIRES 6.6)\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Libraries to Application Target\nDESCRIPTION: Specifies that the 'colorpaletteclient' target privately depends on Qt6 modules: Core, Network, Gui, Qml, and Quick. This linkage ensures that the application has access to Qt functionalities related to core system features, network operations, GUI components, and QML scripting.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/colorpaletteclient/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(colorpaletteclient PRIVATE\n    Qt6::Core\n    Qt6::Network\n    Qt6::Gui\n    Qt6::Qml\n    Qt6::Quick\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Executable Target - CMake\nDESCRIPTION: Creates an executable target named \"alarms\". It includes the source file main.cpp and adds platform-specific flags (WIN32, MACOSX_BUNDLE) for building graphical applications on Windows and macOS, respectively. This defines the main application binary.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(alarms WIN32 MACOSX_BUNDLE\n    main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Document Viewer Executable (CMake)\nDESCRIPTION: Creates a Qt executable target named 'documentviewer' compiling the specified C++ source/header files, a Qt Designer UI file (mainwindow.ui), and a Qt Resource file (documentviewer.qrc). It sets target properties to ensure it's built as a standard GUI application on Windows (WIN32_EXECUTABLE) and as an application bundle on macOS (MACOSX_BUNDLE).\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/app/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(documentviewer\n    main.cpp\n    mainwindow.cpp mainwindow.h mainwindow.ui\n    viewerfactory.cpp viewerfactory.h\n    recentfiles.cpp recentfiles.h\n    recentfilemenu.cpp recentfilemenu.h\n    viewerinterfaces.h\n    documentviewer.qrc\n)\n\nset_target_properties(documentviewer PROPERTIES\n    WIN32_EXECUTABLE TRUE\n    MACOSX_BUNDLE TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a QML module with qt6_add_qml_module\nDESCRIPTION: This snippet uses the `qt6_add_qml_module` function to create a QML module named CustomControls. It defines the URI, version, QML files, and resources associated with the module. The URI is used to import the module in QML code.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/imports/CustomControls/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt6_add_qml_module(CustomControls\n    URI \"CustomControls\"\n    VERSION 1.0\n    QML_FILES\n        AmPmButton.qml\n        CustomButton.qml\n        CustomLabel.qml\n        CustomTextArea.qml\n        CustomTextField.qml\n        SwipeDelegateContent.qml\n        TasksListDelegate.qml\n        TimeInput.qml\n        TimeTextField.qml\n    RESOURCES\n        images/Drag_Icon.svg\n        images/Drag_Icon_Dark.svg\n        images/Red_Trash.svg\n        images/Star_Icon.svg\n        images/White_Star.svg\n        images/White_Trash.svg\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Target Executable (CMake)\nDESCRIPTION: This snippet defines the installation rules for the \"rssnews\" executable target. It specifies different destination directories for macOS bundles, runtime executables (e.g., on Windows or Linux), and associated libraries, using standard CMake install variables like `CMAKE_INSTALL_BINDIR` and `CMAKE_INSTALL_LIBDIR`.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/rssnews/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS rssnews\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Destination\nDESCRIPTION: This snippet sets the `install_destination` variable based on the operating system. On Windows, it is set to `${CMAKE_INSTALL_BINDIR}/app`. On macOS, it is set to `.`. On other platforms, it is set to `${CMAKE_INSTALL_BINDIR}`. This variable is later used in the `install` command to determine where the plugin should be installed.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/q3dviewer/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    set(install_destination \"${CMAKE_INSTALL_BINDIR}/app\")\nelif(APPLE)\n    set(install_destination \".\")\nelse()\n    set(install_destination \"${CMAKE_INSTALL_BINDIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This CMake code adds subdirectories to the project build.  Each `add_subdirectory` call includes the specified directory in the build process, allowing for modular project organization.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/imports/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(PocketDemo)\nadd_subdirectory(ComponentBundles/MaterialBundle)\nadd_subdirectory(QtQuick/Studio/Application)\nadd_subdirectory(QtQuick/Studio/Components)\n```\n\n----------------------------------------\n\nTITLE: Linking Qt6 and Project Libraries to ImageViewer in CMake\nDESCRIPTION: Links required Qt6 modules and the 'abstractviewer' library to the 'imageviewer' target, establishing dependencies needed for the plugin's functionality.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/imageviewer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(imageviewer PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Widgets\n    abstractviewer\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Executable Target (CMake)\nDESCRIPTION: This defines an executable target named \"rssnews\". It specifies the main source file (`main.cpp`) and applies platform-specific settings for Windows (`WIN32`) and macOS (`MACOSX_BUNDLE`) to configure the executable type.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/rssnews/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(rssnews WIN32 MACOSX_BUNDLE\n    main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt QML Module to Target - CMake\nDESCRIPTION: This command configures a QML module for the executable target. It specifies the module URI, version, the main QML file (`Main.qml`), and lists all C++ source and header files that are part of this QML module.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(appStocQt\n    URI StocQt\n    NO_RESOURCE_TARGET_PATH\n    VERSION 1.0\n    QML_FILES Main.qml\n    SOURCES\n        src/apihandler.cpp src/apihandler.h\n        src/favoritesmodel.cpp src/favoritesmodel.h\n        src/stockengine.cpp src/stockengine.h\n        src/stocklistmodel.cpp src/stocklistmodel.h\n        src/stockmodel.cpp src/stockmodel.h\n        src/timeformatter.cpp src/timeformatter.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking of PrintSupport\nDESCRIPTION: This snippet conditionally links the `Qt6::PrintSupport` library to the Q3Dviewer target if the `Qt6::PrintSupport` target exists (i.e., if the PrintSupport module was found during the `find_package` call). This allows the plugin to optionally support printing functionality if the PrintSupport module is available.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/q3dviewer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::PrintSupport)\n    target_link_libraries(Q3Dviewer PRIVATE Qt6::PrintSupport)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Qt Project and Adding Executable\nDESCRIPTION: This snippet sets up the Qt project using `qt_standard_project_setup` and adds an executable. It sets up a standard Qt project, likely configuring necessary build options and settings. Then, it creates the executable and specifies its source files: main.cpp and filenameprovider.h.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_standard_project_setup(REQUIRES 6.5)\n\nqt_add_executable(MediaPlayerApp\n    main.cpp\n    filenameprovider.h\n)\n```\n\n----------------------------------------\n\nTITLE: Create QML Module with qt_add_qml_module in CMake\nDESCRIPTION: Defines a QML module named ComponentBundles.MaterialBundle with a version of 1.0. It specifies the QML files that are part of this module, including AsphaltMaterial.qml, CopperMaterial.qml, GoldMaterial.qml, and SilverMaterial.qml. It also creates a static library.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/imports/ComponentBundles/MaterialBundle/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nqt_add_library(CB_MaterialBundle STATIC)\nqt_add_qml_module(CB_MaterialBundle\n    URI \"ComponentBundles.MaterialBundle\"\n    VERSION 1.0\n    CLASS_NAME CB_MaterialBundlePlugin\n    QML_FILES\n        AsphaltMaterial.qml\n        CopperMaterial.qml\n        GoldMaterial.qml\n        SilverMaterial.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Define QML Singleton Types\nDESCRIPTION: This snippet defines a list of QML files that should be treated as singleton types. Singleton types are QML components that are only instantiated once and provide a global scope within the application. This list specifies the QML files that should be treated as singletons.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(qml_singletons\n    FireResources.qml\n    ParticleResources.qml\n    CampfireMaterial.qml\n    InvisibleMaterial.qml\n    CommonResources.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt QML Module (CMake)\nDESCRIPTION: This function defines a QML module named \"RssNewsModule\" associated with the \"rssnews\" target. It lists all the QML files and image resources that belong to this module, which will be processed by Qt's build tools (like qmlcachegen or qrc) and included in the final application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/rssnews/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(rssnews\n    URI RssNewsModule\n    QML_FILES\n        content/BusyIndicator.qml\n        content/CategoryDelegate.qml\n        content/NewsDelegate.qml\n        content/RssFeeds.qml\n        content/ScrollBar.qml\n        Main.qml\n    RESOURCES\n        content/images/Asia.jpg\n        content/images/Business.jpg\n        content/images/Entertainment.jpg\n        content/images/Europe.jpg\n        content/images/Health.jpg\n        content/images/Politics.jpg\n        content/images/Science.jpg\n        content/images/Sports.jpg\n        content/images/Technology.jpg\n        content/images/TopStories.jpg\n        content/images/USNational.jpg\n        content/images/World.jpg\n        content/images/btn_close.png\n        content/images/busy.png\n        content/images/scrollbar.png\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This links the required Qt6 libraries to the ThermostatApp executable. These libraries provide the underlying functionality of the Qt framework. The \"PRIVATE\" keyword indicates that these libraries are not exported to other targets that link against ThermostatApp.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(ThermostatApp PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Quick\n    Qt6::Qml\n    Qt6::Svg\n    Qt6::Charts\n    Qt6::QuickControls2\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Static Qt Library Using CMake\nDESCRIPTION: Defines a static library target named ThermostatCustomControls using the qt_add_library macro in CMake. This target aggregates the source code and resources for the custom thermostat controls, facilitating static linking in the Qt build environment.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/imports/ThermostatCustomControls/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(ThermostatCustomControls STATIC)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick and Quick Controls 2 Examples conditionally in CMake\nDESCRIPTION: This snippet adds several Qt Quick Controls 2 examples (`colorpaletteclient`, `coffee`, `todolist`, `calqlatr`) if both `Qt6::Quick` and `Qt6::QuickControls2` targets are present. It also conditionally adds the `hangman` example specifically for Android or iOS platforms.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::Quick AND TARGET Qt6::QuickControls2)\n    qt_internal_add_example(colorpaletteclient)\n    qt_internal_add_example(coffee)\n    qt_internal_add_example(todolist)\n    qt_internal_add_example(calqlatr)\n\n    if(ANDROID OR IOS)\n        qt_internal_add_example(hangman)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the project's executable with required Qt libraries (Qt6::Quick, Qt6::QuickControls2) and the custom libraries LightningViewer and LightningViewerStyle. This ensures the executable can use Qt features and custom UI elements.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME} PRIVATE\n    Qt6::Quick\n    Qt6::QuickControls2\n    LightningViewer\n    LightningViewerStyle\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Print Support (CMake)\nDESCRIPTION: Checks for the existence of the Qt6::PrintSupport CMake target. If found, it links both the 'documentviewer' executable and the 'abstractviewer' library privately against Qt6::PrintSupport. Additionally, it adds a global compile definition 'QT_DOCUMENTVIEWER_PRINTSUPPORT', likely used in C++ code via #ifdef to enable printing-related features.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/app/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::PrintSupport)\n    target_link_libraries(documentviewer PRIVATE Qt6::PrintSupport)\n    target_link_libraries(abstractviewer PRIVATE Qt6::PrintSupport)\n    add_compile_definitions(QT_DOCUMENTVIEWER_PRINTSUPPORT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Qt Static Library using CMake\nDESCRIPTION: This CMake command defines a static library target named `Ast_Venodhb`. This library can contain compiled C++ or other code. The `STATIC` keyword specifies that it should be built as a static library. It's a fundamental step in defining build components in a Qt/CMake project.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/Venodhb_LOD0/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(Ast_Venodhb STATIC)\n```\n\n----------------------------------------\n\nTITLE: Installing Deployment Script\nDESCRIPTION: This installs the generated deployment script. The script assists in deploying the application and its dependencies to the correct locations. The deployment script is executed as part of the installation process, thus making the application ready to be run.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Libraries to Target - CMake\nDESCRIPTION: Links the specified Qt 6 component libraries (Core, Gui, Qml, Quick) privately to the \"FxMaterialShowroomApp\" executable target. This makes the symbols from these libraries available to the application code.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(FxMaterialShowroomApp PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Qml\n    Qt6::Quick\n)\n```\n\n----------------------------------------\n\nTITLE: Setting QML Singleton Property with CMake\nDESCRIPTION: Modifies the properties of the Images.qml file to mark it as a QML singleton type using the QT_QML_SINGLETON_TYPE property within the set_source_files_properties CMake function. This enables the QML engine to treat Images.qml as a singleton, ensuring only a single instance is created at runtime.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/MediaPlayer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(Images.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Library with qt_add_library in CMake\nDESCRIPTION: Defines a static library target named 'FXMaterialShowroomContent' using the qt_add_library CMake function. This target serves as the basis for the QML module defined subsequently.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/content/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(FXMaterialShowroomContent STATIC)\n```\n\n----------------------------------------\n\nTITLE: Registering a QML Module with CMake\nDESCRIPTION: This snippet uses the `qt_add_qml_module` function to register a QML module named `content` with URI `content` and version `1.0`. It specifies the QML files that make up the module and the resources it uses, like images.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/content/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nqt_add_qml_module(ThermostatContent\n    URI \"content\"\n    VERSION 1.0\n    QML_FILES\n        App.qml\n        BottomBar.qml\n        BottomBarForm.ui.qml\n        EnergyInfo.qml\n        EnergyInfoForm.ui.qml\n        HomePage.qml\n        HomePageForm.ui.qml\n        HumidityInfo.qml\n        HumidityInfoForm.ui.qml\n        RoomItem.qml\n        RoomItemForm.ui.qml\n        RoomOption.qml\n        RoomOptionForm.ui.qml\n        RoomsScrollView.qml\n        RoomsScrollViewForm.ui.qml\n        RoomsSwipeView.qml\n        RoomsSwipeViewForm.ui.qml\n        RoomsView.qml\n        RoomsViewForm.ui.qml\n        ScheduleScrollView.qml\n        ScheduleScrollViewForm.ui.qml\n        ScheduleSwipeView.qml\n        ScheduleSwipeViewForm.ui.qml\n        ScheduleView.qml\n        ScheduleViewForm.ui.qml\n        SideBar.qml\n        SideBarForm.ui.qml\n        StatisticsScrollView.qml\n        StatisticsScrollViewForm.ui.qml\n        StatisticsStackView.qml\n        StatisticsStackViewForm.ui.qml\n        StatisticsSwipeView.qml\n        StatisticsSwipeViewForm.ui.qml\n        StatisticsView.qml\n        StatisticsViewForm.ui.qml\n        TemperatureInfo.qml\n        TemperatureInfoForm.ui.qml\n        TemperatureSetter.qml\n        TemperatureSetterDesktopView.qml\n        TemperatureSetterDesktopViewForm.ui.qml\n        TemperatureSetterForm.ui.qml\n        TemperatureSetterMobileView.qml\n        TemperatureSetterMobileViewForm.ui.qml\n        TemperatureSetterSmallView.qml\n        TemperatureSetterSmallViewForm.ui.qml\n        ThermostatInfo.qml\n        ThermostatInfoForm.ui.qml\n        ThermostatScrollView.qml\n        ThermostatScrollViewForm.ui.qml\n        ThermostatSettings.qml\n        ThermostatSettingsForm.ui.qml\n        ThermostatStackView.qml\n        ThermostatStackViewForm.ui.qml\n        ThermostatSwipeView.qml\n        ThermostatSwipeViewForm.ui.qml\n        ThermostatView.qml\n        ThermostatViewForm.ui.qml\n        TimeSchedule.qml\n        TimeScheduleForm.ui.qml\n    RESOURCES\n        images/arrow.svg\n        images/Auto.svg\n        images/bedroom.svg\n        images/circle.svg\n        images/Cool.svg\n        images/down.svg\n        images/drop.svg\n        images/Dry.svg\n        images/Eco.svg\n        images/edit.svg\n        images/energy.svg\n        images/Fan.svg\n        images/Heat.svg\n        images/home.svg\n        images/kid_room.svg\n        images/kitchen.svg\n        images/living_room.svg\n        images/logo.png\n        images/maxTemp.svg\n        images/minTemp.svg\n        images/more.svg\n        images/power.svg\n        images/schedule.svg\n        images/settings.svg\n        images/stats.svg\n        images/temperature.svg\n        images/theme.svg\n        images/thermostat.svg\n        images/up.svg\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the Q3Dviewer target against several Qt6 modules (`Core`, `Gui`, `Widgets`, `Quick3D`), as well as the `abstractviewer` and `Q3DViewerModule` targets.  The `PRIVATE` keyword indicates that these libraries are only needed for Q3Dviewer and not exposed to other targets that might link against it. This provides the plugin with necessary functionalities from the Qt framework and the defined module.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/q3dviewer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(Q3Dviewer PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Widgets\n    Qt6::Quick3D\n    abstractviewer\n    Q3DViewerModule\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target - CMake\nDESCRIPTION: This snippet links required libraries to the \"txtviewer\" target.  It uses the `target_link_libraries` command with the `PRIVATE` scope.  It links against the Qt6 Core, Gui, and Widgets components and the `abstractviewer` library. These libraries provide the necessary dependencies for the txtviewer plugin. The PRIVATE scope means these libraries are not propagated to dependents.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/txtviewer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(txtviewer PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Widgets\n    abstractviewer\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Static Qt Library with qt_add_library (CMake)\nDESCRIPTION: This snippet uses the `qt_add_library` CMake function to create a static Qt library named `Ast_LightDecal`. The library will be built as a static library type, linking directly into other projects. This command is a part of the Qt build system and handles necessary configurations for Qt-based projects, including the necessary include paths and library linking.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/LightDecal/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(Ast_LightDecal STATIC)\n```\n\n----------------------------------------\n\nTITLE: Configuring a QML Module for Qt ToDo List Application using CMake\nDESCRIPTION: Defines a static library 'todolist_content' and configures it as a QML module with version 1.0 and URI 'content'. The configuration includes all QML/UI form files for the application components and SVG resources for icons and visual elements.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/content/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(todolist_content STATIC)\nqt6_add_qml_module(todolist_content\n    URI \"content\"\n    VERSION 1.0\n    QML_FILES\n        App.qml\n        CalendarView.qml\n        CalendarViewForm.ui.qml\n        Clock.qml\n        ClockForm.ui.qml\n        ClockView.qml\n        ClockViewForm.ui.qml\n        FontSizeSettings.qml\n        FontSizeSettingsForm.ui.qml\n        HomePage.qml\n        HomePageForm.ui.qml\n        MaxTasksSettings.qml\n        MaxTasksSettingsForm.ui.qml\n        NavBar.qml\n        NavBarForm.ui.qml\n        NewTask.qml\n        NewTaskForm.ui.qml\n        OtherSettings.qml\n        OtherSettingsForm.ui.qml\n        QuickTaskField.qml\n        QuickTaskFieldForm.ui.qml\n        SettingsView.qml\n        SettingsViewForm.ui.qml\n        StyleSettings.qml\n        StyleSettingsForm.ui.qml\n        TasksList.qml\n        TasksListForm.ui.qml\n        TasksListsView.qml\n        TasksListsViewForm.ui.qml\n    RESOURCES\n        images/Add_Icon.svg\n        images/Before_Icon.svg\n        images/Calendar_Icon.svg\n        images/Check_Icon.svg\n        images/Clock.svg\n        images/Clock_Dark.svg\n        images/Clock_Hand.svg\n        images/Clock_Icon.svg\n        images/Enter_Icon.svg\n        images/Font_Size_Icon.svg\n        images/HideTasks_Icon.svg\n        images/LeftArrow_Icon.svg\n        images/LeftArrow_Icon_Dark.svg\n        images/Minutes_Clock.svg\n        images/Minutes_Clock_Dark.svg\n        images/Next_Icon.svg\n        images/Qt_Icon.svg\n        images/Random_Task_Icon.svg\n        images/Remove_Done_Icon.svg\n        images/Right_Arrow_Icon.svg\n        images/Right_Arrow_Icon_Dark.svg\n        images/Settings_Icon.svg\n        images/ShowTasks_Icon.svg\n        images/Style_Icon.svg\n        images/Tasks_Icon.svg\n        images/Theme_Icon.svg\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Abstract Viewer Library (CMake)\nDESCRIPTION: Creates a Qt library target named 'abstractviewer' using the specified source files (abstractviewer.cpp, abstractviewer.h). It also defines a private compile definition 'BUILD_ABSTRACTVIEWER_LIB' specific to this library target, likely used for controlling symbol visibility or conditional compilation within the library's code.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/app/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(abstractviewer\n    abstractviewer.cpp abstractviewer.h\n)\n\ntarget_compile_definitions(abstractviewer PRIVATE BUILD_ABSTRACTVIEWER_LIB)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick Network and XmlListModel Example conditionally in CMake\nDESCRIPTION: This snippet adds the `rssnews` example if `Qt6::Quick`, `Qt6::Network`, and `Qt6::QmlXmlListModel` targets are available. This example demonstrates fetching and displaying RSS feed data using these modules.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::Quick AND TARGET Qt6::Network AND TARGET Qt6::QmlXmlListModel)\n    qt_internal_add_example(rssnews)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet adds the `../../app` directory as a private include directory for the `Q3Dviewer` target. This allows the Q3Dviewer code to access header files located in that directory during compilation. The `PRIVATE` keyword indicates that this include directory is only needed for compiling Q3Dviewer itself, and not for any other targets that link against it.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/q3dviewer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(Q3Dviewer PRIVATE\n    ../../app\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Language\nDESCRIPTION: This defines the project name as \"ThermostatApp\" and specifies that the project uses the CXX language (C++).  This sets up the initial project structure within the CMake build system.  This provides a clear definition of the project's name and primary programming language.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(ThermostatApp LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Libraries to RobotArmApp\nDESCRIPTION: Links the necessary Qt libraries (Core, Gui, Quick) to the RobotArmApp executable. These libraries are essential for running the Qt-based application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(RobotArmApp PUBLIC\n    Qt::Core\n    Qt::Gui\n    Qt::Quick\n)\n```\n\n----------------------------------------\n\nTITLE: Defining List of Data Resource Files - CMake\nDESCRIPTION: This command defines a CMake variable containing a list of paths to numerous JSON data files. This variable is subsequently used to easily include all these files as application resources.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset (data_resource_files\n    \"data/AAPL.json\"\n    \"data/ABNB.json\"\n    \"data/ADBE.json\"\n    \"data/ADI.json\"\n    \"data/ADP.json\"\n    \"data/ADSK.json\"\n    \"data/AEP.json\"\n    \"data/ALGN.json\"\n    \"data/AMAT.json\"\n    \"data/AMD.json\"\n    \"data/AMGN.json\"\n    \"data/AMZN.json\"\n    \"data/ANSS.json\"\n    \"data/ASML.json\"\n    \"data/ATVI.json\"\n    \"data/AVGO.json\"\n    \"data/AZN.json\"\n    \"data/BIIB.json\"\n    \"data/BKNG.json\"\n    \"data/BKR.json\"\n    \"data/CDNS.json\"\n    \"data/CEG.json\"\n    \"data/CHTR.json\"\n    \"data/CMCSA.json\"\n    \"data/COST.json\"\n    \"data/CPRT.json\"\n    \"data/CRWD.json\"\n    \"data/CSCO.json\"\n    \"data/CSGP.json\"\n    \"data/CSX.json\"\n    \"data/CTAS.json\"\n    \"data/CTSH.json\"\n    \"data/DDOG.json\"\n    \"data/DLTR.json\"\n    \"data/DXCM.json\"\n    \"data/EA.json\"\n    \"data/EBAY.json\"\n    \"data/ENPH.json\"\n    \"data/EXC.json\"\n    \"data/FANG.json\"\n    \"data/FAST.json\"\n    \"data/FISV.json\"\n    \"data/FTNT.json\"\n    \"data/GFS.json\"\n    \"data/GILD.json\"\n    \"data/GOOG.json\"\n    \"data/GOOGL.json\"\n    \"data/HON.json\"\n    \"data/IDXX.json\"\n    \"data/ILMN.json\"\n    \"data/INTC.json\"\n    \"data/INTU.json\"\n    \"data/ISRG.json\"\n    \"data/JD.json\"\n    \"data/KDP.json\"\n    \"data/KHC.json\"\n    \"data/KLAC.json\"\n    \"data/LCID.json\"\n    \"data/LRCX.json\"\n    \"data/LULU.json\"\n    \"data/MAR.json\"\n    \"data/MCHP.json\"\n    \"data/MDLZ.json\"\n    \"data/MELI.json\"\n    \"data/META.json\"\n    \"data/MNST.json\"\n    \"data/MRNA.json\"\n    \"data/MRVL.json\"\n    \"data/MSFT.json\"\n    \"data/MU.json\"\n    \"data/NFLX.json\"\n    \"data/NVDA.json\"\n    \"data/NXPI.json\"\n    \"data/ODFL.json\"\n    \"data/ORLY.json\"\n    \"data/PANW.json\"\n    \"data/PAYX.json\"\n    \"data/PCAR.json\"\n    \"data/PDD.json\"\n    \"data/PEP.json\"\n    \"data/PYPL.json\"\n    \"data/QCOM.json\"\n    \"data/REGN.json\"\n    \"data/RIVN.json\"\n    \"data/ROST.json\"\n    \"data/SBUX.json\"\n    \"data/SGEN.json\"\n    \"data/SIRI.json\"\n    \"data/SNPS.json\"\n    \"data/TEAM.json\"\n    \"data/TMUS.json\"\n    \"data/TSLA.json\"\n    \"data/TXN.json\"\n    \"data/VRSK.json\"\n    \"data/VRTX.json\"\n    \"data/WBA.json\"\n    \"data/WBD.json\"\n    \"data/WDAY.json\"\n    \"data/XEL.json\"\n    \"data/ZM.json\"\n    \"data/ZS.json\"\n    \"data/QTCOM.HE.json\"\n    \"data/quotes.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick qsb and Pdf Example conditionally in CMake\nDESCRIPTION: This snippet adds the `photosurface` example if `Qt6::Quick`, `Qt6::qsb`, and `Qt6::Pdf` targets are present. This example likely involves integrating Qt Quick with Qt's PDF and possibly Qt Shader Builder (`qsb`) features.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::Quick AND TARGET Qt6::qsb AND TARGET Qt6::Pdf)\n    qt_internal_add_example(photosurface)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Plugin for ImageViewer Class in CMake\nDESCRIPTION: Creates and registers a Qt plugin named 'imageviewer' with specified class and source/header files, facilitating plugin-based architecture. Depends on Qt6 components and potentially other project modules.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/imageviewer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_plugin(imageviewer\n    CLASS_NAME ImageViewer\n    imageviewer.cpp imageviewer.h\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Finding Qt6 Components\nDESCRIPTION: This snippet searches for the required Qt6 components (Core, Gui, Qml, Quick, QuickControls2), essential for the application's functionality. These components are crucial for core application features like UI, and QML integration. A build failure occurs if these are not found.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Qml Quick QuickControls2)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS-specific properties for Qt Dice app\nDESCRIPTION: Sets iOS-specific properties for the Qt dice application including asset catalog path, app icon configuration, and resource packaging.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/dice/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(IOS)\n    set(asset_catalog_path \"ios/Assets.xcassets\")\n    target_sources(${appname} PRIVATE \"${asset_catalog_path}\")\n    set_source_files_properties(${asset_catalog_path} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)\n    set_target_properties(${appname}\n        PROPERTIES XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME AppIcon)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick 3D Asset Downloader Example conditionally in CMake\nDESCRIPTION: This snippet adds the `car-configurator` example if both `Qt::Quick3D` and `Qt::ExamplesAssetDownloaderPrivate` targets are available. It further requires `QT_ALLOW_DOWNLOAD` to be enabled and the CMake version to be 3.19 or greater.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt::Quick3D AND TARGET Qt::ExamplesAssetDownloaderPrivate)\n    if (QT_ALLOW_DOWNLOAD AND CMAKE_VERSION VERSION_GREATER_EQUAL \"3.19\")\n        qt_internal_add_example(car-configurator)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Qt6 Libraries\nDESCRIPTION: Links the necessary Qt6 libraries (Positioning, Quick, and WebSockets) to the target `${PROJECT_NAME}` (LightningViewer). These libraries provide the functionality for location services, QML interface, and WebSocket communication respectively. They are linked privately.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/LightningViewer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME} PRIVATE\n    Qt6::Positioning\n    Qt6::Quick\n    Qt6::WebSockets\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Adding Resources for 'hangman'\nDESCRIPTION: This snippet adds resources to the 'hangman' target.  It includes the `dict.txt` file as a resource. The `PREFIX` option defines the path under which the resource files will be accessible.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_resources(hangman \"resources\"\n    PREFIX\n        \"/\"\n    FILES\n        dict.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Qt6 Dependencies\nDESCRIPTION: This snippet uses `find_package` to locate the required Qt6 modules.  It specifies that `Core`, `Gui`, and `Widgets` are required components, while `PrintSupport` is optional. Finding these packages is essential for building the Q3Dviewer plugin with the Qt framework. If `PrintSupport` is not found, the build continues without it.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/q3dviewer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets\n                 OPTIONAL_COMPONENTS PrintSupport)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: iOS Platform-Specific Settings\nDESCRIPTION: This block is executed when building for iOS. It includes iOS-specific source files and links against the Foundation and StoreKit frameworks, necessary for in-app purchasing functionality. This is required for building on iOS platforms.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(IOS)\n    target_sources(hangman PRIVATE\n            purchasing/ios/iosinapppurchasebackend.h purchasing/ios/iosinapppurchasebackend.mm\n            purchasing/ios/iosinapppurchaseproduct.h purchasing/ios/iosinapppurchaseproduct.mm\n            purchasing/ios/iosinapppurchasetransaction.h purchasing/ios/iosinapppurchasetransaction.mm\n    )\n\n    target_link_libraries(hangman PRIVATE\n        \"-framework Foundation\"\n        \"-framework StoreKit\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Required Qt Modules\nDESCRIPTION: Locates the required Qt6 modules (`BuildInternals`, `Core`) using `find_package`. `CONFIG REQUIRED` ensures these modules are found and configured successfully for the project to proceed.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 ${PROJECT_VERSION} CONFIG REQUIRED COMPONENTS BuildInternals Core)\n```\n\n----------------------------------------\n\nTITLE: Setting QML Singleton Properties\nDESCRIPTION: Sets the `QT_QML_SINGLETON_TYPE` property to TRUE for `LightningViewConfig.qml` and `MapType.qml`, making them singleton QML types.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/LightningViewer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(LightningViewConfig.qml MapType.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Target\nDESCRIPTION: This snippet links the required Qt libraries to the executable target `${PROJECT_NAME}`.  It uses `target_link_libraries` to link the specified Qt modules (Core, Gui, Quick, Quick3D, Quick3DPhysics, Quick3DXr, Multimedia) to the executable. This ensures that the necessary Qt functionality is available at runtime.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME} PUBLIC\n    Qt::Core\n    Qt::Gui\n    Qt::Quick\n    Qt::Quick3D\n    Qt::Quick3DPhysics\n    Qt::Quick3DXr\n    Qt6::Multimedia\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Static Library with CMake\nDESCRIPTION: Defines a static library target named MediaPlayer using the qt_add_library CMake function, which is used to build the core backend or shared logic for the MediaPlayer Qt project. This command expects source files to be added elsewhere or linked implicitly. No explicit dependencies are listed within this snippet.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/MediaPlayer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(MediaPlayer STATIC)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Finalizing Executable\nDESCRIPTION: This snippet finalizes the 'hangman' executable, completing the build process. It is a crucial step that must be performed for the application to function.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nqt_finalize_executable(hangman)\n```\n\n----------------------------------------\n\nTITLE: Enable Auto-moc for Qt\nDESCRIPTION: This snippet enables the automatic Meta-Object Compiler (moc) processing for Qt projects. This is necessary for using Qt's signals and slots mechanism and other meta-object features in C++ code. When set to ON, CMake automatically handles moc processing during the build.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_AUTOMOC ON)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version - CMake\nDESCRIPTION: Specifies the minimum required version of CMake to build the project. This ensures compatibility with commands and features used in the script. It requires CMake version 3.16 or higher.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n```\n\n----------------------------------------\n\nTITLE: Adding a Qt Library with CMake\nDESCRIPTION: This code snippet uses the `qt_add_library` function to create a static library named `ThermostatContent`. This function is a Qt-specific CMake command that prepares the library for use within a Qt project.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/content/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nqt_add_library(ThermostatContent STATIC)\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking of Libraries (CMake)\nDESCRIPTION: This code provides conditional linking and configuration based on the target platform.  If the target is macOS (APPLE), it enables the OBJCXX language and sets the language for main.cpp.  If the target is Windows (WIN32), it links with the comctl32 library.  If GTK3 is found and Qt is built with glib support (QT_FEATURE_glib), then it links with GTK3 and disables signals and slots keywords. This allows for platform-specific dependencies.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/windowembedding/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n    enable_language(OBJCXX)\n    set_source_files_properties(main.cpp PROPERTIES LANGUAGE OBJCXX)\nelseif(WIN32)\n    target_link_libraries(windowembedding PRIVATE comctl32)\nelseif(QT_FEATURE_xcb)\n    find_package(GTK3)\n    if(GTK3_FOUND)\n        if(NOT QT_FEATURE_glib)\n            message(FATAL_ERROR \"GTK integration requires that Qt is built with glib support\")\n        endif()\n        target_link_libraries(windowembedding PRIVATE PkgConfig::GTK3)\n        target_compile_definitions(windowembedding PRIVATE QT_NO_SIGNALS_SLOTS_KEYWORDS)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Standard Qt Project - CMake\nDESCRIPTION: Applies standard Qt project settings and configurations using the qt_standard_project_setup command. The REQUIRES 6.8 argument specifies that the project needs at least Qt version 6.8 for building.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nqt_standard_project_setup(REQUIRES 6.8)\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Libraries to Executable - CMake\nDESCRIPTION: Links the specified Qt6 libraries (Core, Gui, Quick) to the \"alarms\" executable target. The PRIVATE keyword indicates that these libraries are only needed for building and linking the target itself, not for targets that might link to \"alarms\".\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(alarms PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Quick\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Widgets and Quick Window Embedding Example conditionally in CMake\nDESCRIPTION: This snippet adds the `windowembedding` example if both `Qt6::Widgets` and `Qt6::Quick` targets are available. This example likely demonstrates how to embed a Qt Quick view within a Qt Widgets application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::Widgets AND TARGET Qt6::Quick)\n    qt_internal_add_example(windowembedding)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding a static library with qt_add_library\nDESCRIPTION: This snippet uses the `qt_add_library` function to create a static library named CustomControls. Static libraries are linked into the application at compile time.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/imports/CustomControls/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(CustomControls STATIC)\n```\n\n----------------------------------------\n\nTITLE: Link Library to Qt6 Gui (CMake)\nDESCRIPTION: Links the `backendmodule` target to the `Qt6::Gui` library. This makes the functions and classes from the Qt Gui module available to the backend code. Requires the `backendmodule` target and `Qt6::Gui` to be defined/found.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/Backend/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(backendmodule PUBLIC Qt6::Gui)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project - CMake\nDESCRIPTION: Defines the project name as \"alarms\" and specifies C++ (CXX) as the primary programming language used in the project. This command is usually required at the beginning of a CMakeLists.txt file.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(alarms LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt QML Module - CMake\nDESCRIPTION: Defines a QML module named \"alarms\" with the URI \"AlarmsModule\". It specifies the source files (main.cpp) and QML files (AlarmDelegate.qml, AlarmDialog.qml, etc.) that belong to this module, making them available for import in other QML files.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(alarms\n    URI AlarmsModule\n    SOURCES\n        main.cpp\n    QML_FILES\n        AlarmDelegate.qml\n        AlarmDialog.qml\n        AlarmModel.qml\n        TumblerDelegate.qml\n        Main.qml\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Build Configuration for QtExampleStyle QML Module\nDESCRIPTION: This CMake script configures the build process for the 'qtexamplestyle' project, which provides a custom Qt Quick Controls 2 style. It requires CMake 3.16+, finds Qt 6 Core, Gui, Quick, and QuickControls2 components using find_package, enables AUTOMOC for Qt's meta-object system, marks UIStyle.qml as a QML singleton type, creates a QML module 'QtExampleStyle' containing Button.qml, Popup.qml, UIStyle.qml, and TextField.qml using qt_add_qml_module, links the resulting plugin target against required Qt libraries, includes a workaround involving Qt6::QuickTemplates2 for QTBUG-86533 when cross-compiling on Unix (excluding Apple), and sets up installation rules using the install() command for the plugin library and the qmldir file.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/colorpaletteclient/QtExampleStyle/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright (C) 2023 The Qt Company Ltd.\n# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause\n\ncmake_minimum_required(VERSION 3.16)\nproject(qtexamplestyle LANGUAGES CXX)\n\nset(CMAKE_AUTOMOC ON)\n\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Quick QuickControls2)\n\nset_source_files_properties(UIStyle.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE TRUE\n)\n\nqt_policy(SET QTP0001 NEW)\nqt_add_qml_module(qtexamplestyle\n    URI QtExampleStyle\n    PLUGIN_TARGET qtexamplestyle\n    QML_FILES\n        Button.qml\n        Popup.qml\n        UIStyle.qml\n        TextField.qml\n)\n\ntarget_link_libraries(qtexamplestyle PUBLIC\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Quick\n    Qt6::QuickControls2\n)\n\nif(UNIX AND NOT APPLE AND CMAKE_CROSSCOMPILING)\n    find_package(Qt6 REQUIRED COMPONENTS QuickTemplates2)\n\n    # Work around QTBUG-86533\n    target_link_libraries(qtexamplestyle PRIVATE Qt6::QuickTemplates2)\nendif()\n\ninstall(TARGETS qtexamplestyle\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}/QtExampleStyle\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}/QtExampleStyle\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/qmldir\n    DESTINATION \"${CMAKE_INSTALL_BINDIR}/QtExampleStyle\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Backend Subdirectory to CMake\nDESCRIPTION: Adds the Backend subdirectory to the CMake build process. This includes the CMakeLists.txt file located in the Backend directory, allowing it to be built and linked as part of the RobotArm project.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Backend)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories and Linking Libraries\nDESCRIPTION: This adds subdirectories and links required libraries. It integrates modular components (MediaPlayer, MediaControls, and Config) into the build by adding subdirectories. It links the application against Qt and custom plugins and libraries making their functionalities available to the main executable.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(MediaPlayer)\nadd_subdirectory(MediaControls)\nadd_subdirectory(Config)\n\ntarget_link_libraries(MediaPlayerApp PRIVATE\n    Qt6::Core\n    Qt6::Svg\n    Qt6::Quick\n    Qt6::Multimedia\n    MediaControlsplugin\n    MediaPlayerplugin\n    Configplugin\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Deployment Script - CMake\nDESCRIPTION: Installs the deployment script generated by the qt_generate_deploy_qml_app_script command. This makes the script available in the installation directory, allowing the user to run it after installation to bundle the application with its dependencies.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Setting QML Singleton Property for ControlImages\nDESCRIPTION: Configures the ControlImages.qml file as a QML singleton type, allowing it to be accessed globally within the QML module.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/MediaControls/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(ControlImages.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Android Dependencies\nDESCRIPTION: This block conditionally includes and fetches the `android_openssl` dependency if the target platform is Android. It declares the dependency via FetchContent, fetches the source code, includes a specific CMake file, and finally, adds the necessary libraries to the target. It depends on the presence of android SDK and relevant tools during build time and the appropriate Git repository availability.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/osmbuildings/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (ANDROID)\n    include(FetchContent)\n    FetchContent_Declare(\n        android_openssl\n        DOWNLOAD_EXTRACT_TIMESTAMP true\n        URL https://github.com/KDAB/android_openssl/archive/refs/heads/master.zip\n    )\n    FetchContent_MakeAvailable(android_openssl)\n    include(${android_openssl_SOURCE_DIR}/android_openssl.cmake)\n    add_android_openssl_libraries(osmbuildings)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Managing Optional Viewer Plugins (CMake)\nDESCRIPTION: Defines a list variable 'plugin_targets' initially containing 'jsonviewer' and 'txtviewer'. It conditionally appends 'pdfviewer' and 'Q3Dviewer' to this list if their corresponding CMake targets exist. Depending on whether Qt6 is built as shared libraries (QT6_IS_SHARED_LIBS_BUILD is true), it either adds the plugins as build dependencies (for shared builds, implying runtime loading) or links them directly into the 'documentviewer' executable (for static builds).\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/app/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(plugin_targets\n    jsonviewer\n    txtviewer\n)\n\nif(TARGET pdfviewer)\n    list(APPEND plugin_targets pdfviewer)\nendif()\n\nif(TARGET Q3Dviewer)\n    list(APPEND plugin_targets Q3Dviewer)\nendif()\n\nif(QT6_IS_SHARED_LIBS_BUILD)\n    add_dependencies(documentviewer ${plugin_targets})\nelse()\n    target_link_libraries(documentviewer PRIVATE ${plugin_targets})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenSSL for Android\nDESCRIPTION: This snippet includes OpenSSL support for Android builds using FetchContent. It declares and makes available the android_openssl package and then includes its CMake file, finally adding the necessary libraries to the project. This allows the application to use cryptographic functionality.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (ANDROID)\n    include(FetchContent)\n    FetchContent_Declare(\n        android_openssl\n        DOWNLOAD_EXTRACT_TIMESTAMP true\n        URL https://github.com/KDAB/android_openssl/archive/refs/heads/master.zip\n    )\n    FetchContent_MakeAvailable(android_openssl)\n    include(${android_openssl_SOURCE_DIR}/android_openssl.cmake)\n    add_android_openssl_libraries(LightningViewerExample)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Qt6 Modules\nDESCRIPTION: Finds the required Qt6 modules: Positioning, Quick, and WebSockets.  These modules are necessary for location services, the QML interface, and WebSocket communication.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/LightningViewer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Positioning Quick WebSockets)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick 3D Physics and Multimedia Example conditionally in CMake\nDESCRIPTION: This snippet adds the `dice` example if `Qt::Quick`, `Qt::QuickControls2`, `Qt::Quick3D`, `Qt::Quick3DPhysics`, `Qt::Multimedia`, and `Qt::Sensors` targets are all available. This is a complex example integrating several modules for a realistic simulation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt::Quick AND TARGET Qt::QuickControls2 AND TARGET Qt::Quick3D AND TARGET Qt::Quick3DPhysics AND TARGET Qt::Multimedia AND TARGET Qt::Sensors)\n    qt_internal_add_example(dice)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Qt Deploy QML App Script\nDESCRIPTION: Generates a deployment script for the Qt QML application (RobotArmApp). The script handles platform-specific deployment tasks, including bundling and copying necessary files. The script is named `deploy_script` and is installed as part of the project.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET RobotArmApp\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories - CMake\nDESCRIPTION: This snippet adds an include directory to the \"txtviewer\" target.  It uses the `target_include_directories` command with the `PRIVATE` scope.  The `PRIVATE` keyword specifies that the include directory (`../../app`) is only accessible to the target (txtviewer) itself. This provides the include search path for the build.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/txtviewer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(txtviewer PRIVATE\n    ../../app\n)\n```\n\n----------------------------------------\n\nTITLE: Installing QML Deployment Script - CMake\nDESCRIPTION: This command installs the deployment script that was generated in the previous step. This script is crucial for ensuring the deployed application includes all necessary Qt and QML files.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Requirements and Project Name (CMake)\nDESCRIPTION: This snippet specifies the minimum required CMake version (3.16) for building the project and defines the project name as \"rssnews\". It also declares that the project primarily uses the C++ language.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/rssnews/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(rssnews LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Include Directories for 'hangman'\nDESCRIPTION: This snippet sets include directories for the 'hangman' target, specifying private include paths.  These paths are used when including header files, and the PRIVATE keyword ensures that these paths are not propagated to dependent targets.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(hangman PRIVATE\n    purchasing/inapp\n    purchasing/qmltypes\n)\n```\n\n----------------------------------------\n\nTITLE: Setting QML Import Path for Qt Project with CMake - CMake\nDESCRIPTION: This snippet modifies the QML import path by setting 'QML_IMPORT_PATH' in the CMake cache. It ensures that the build and import directories are included, as well as additional source import paths, forcing the setting to override existing values if necessary. The 'set' command in CMake is used, and it is required to have the relevant directories populated with valid QML imports for successful module resolution at runtime. Outputs are updated CMake cache entries that control QML import discovery.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/content/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(QML_IMPORT_PATH\n    ${CMAKE_CURRENT_BINARY_DIR}\n    ${CMAKE_CURRENT_BINARY_DIR}/../imports\n    ${CMAKE_CURRENT_SOURCE_DIR}/../asset_imports\n    CACHE STRING \"\"\n    FORCE\n)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Module Subdirectory (CMake)\nDESCRIPTION: Uses the CMake command 'add_subdirectory' to include the build instructions found in the 'RobotArm' directory's CMakeLists.txt file. This command integrates the RobotArm module into the main project build process. It requires that the specified directory 'RobotArm' contains a valid CMakeLists.txt file.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/imports/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(RobotArm)\n```\n\n----------------------------------------\n\nTITLE: Defining Qt6 Required Components with Optional PrintSupport in CMake\nDESCRIPTION: Specifies the required Qt6 modules and optional PrintSupport in the CMake build configuration to ensure dependencies are correctly handled during build system generation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/imageviewer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets\n                 OPTIONAL_COMPONENTS PrintSupport)\n```\n\n----------------------------------------\n\nTITLE: Set Qt Policy\nDESCRIPTION: This snippet sets a specific Qt policy using `qt6_policy`. This allows the project to control the behavior of certain Qt features or functionalities, ensuring compatibility and consistency across different Qt versions. In this instance, it sets policy `QTP0002` to `NEW`.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nqt6_policy(SET QTP0002 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets properties for the `osmbuildings` target. Specifically, it marks the executable as a Windows executable (`WIN32_EXECUTABLE`) and a macOS bundle (`MACOSX_BUNDLE`). The main purpose is to configure platform-specific settings for the output executable. It expects that the target osmbuildings is already created.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/osmbuildings/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(osmbuildings PROPERTIES\n    WIN32_EXECUTABLE TRUE\n    MACOSX_BUNDLE TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target and Adding Resources in CMake\nDESCRIPTION: Creates an executable target named 'ToDoListApp' from 'src/main.cpp', specifying platform-specific bundling for Windows (WIN32) and macOS (MACOSX_BUNDLE). It also embeds the 'qtquickcontrols2.conf' file as a resource within the application, accessible via the root prefix '/'.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nqt_add_executable(ToDoListApp\n    WIN32\n    MACOSX_BUNDLE\n    src/main.cpp\n)\n\nqt_add_resources(ToDoListApp \"configuration\"\n    PREFIX \"/\"\n    FILES\n        qtquickcontrols2.conf\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Static Library Target with CMake\nDESCRIPTION: Defines a static library target named QQS_App using the qt_add_library CMake function. There are no specified source files in this step, and the target is set to STATIC. This prepares the build system to compile the library separately before linking.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/imports/QtQuick/Studio/Application/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(QQS_App\n    STATIC\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Documentation Generation\nDESCRIPTION: This CMake command, `qt_internal_add_docs`, adds documentation generation tasks to the CMake build process.  It uses the provided `qtcmake.qdocconf` configuration file to define the documentation build settings, handling specifics of generating the Qt documentation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/doc/src/cmake/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_internal_add_docs(qtcmake\n                     qtcmake.qdocconf\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Qt Project Setup (CMake)\nDESCRIPTION: This uses a helper function provided by Qt's CMake modules to apply standard project configurations and settings. The `REQUIRES 6.8` argument indicates that the project is built for Qt 6.8 or later.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/rssnews/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_standard_project_setup(REQUIRES 6.8)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake and Project\nDESCRIPTION: This snippet sets the minimum required CMake version, defines the project name, and enables automatic moc generation.  It establishes the foundation for building the Qt application by initializing CMake and setting project-level parameters. No specific parameters are exposed here, and the expected output is CMake configuration files for subsequent builds.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/osmbuildings/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(osmbuildings LANGUAGES CXX)\n\nset(CMAKE_AUTOMOC ON)\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing Deployment Script (CMake)\nDESCRIPTION: This uses a Qt helper function to generate a platform-aware deployment script for the QML application, which handles collecting and packaging necessary files. The `install(SCRIPT ...)` command then adds this generated script to the installation process, facilitating proper deployment on various operating systems.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/rssnews/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET rssnews\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Setting up SameGame Qt project with CMake\nDESCRIPTION: Configures the CMake project for the SameGame application, setting the minimum required CMake version, defining the project name and language, and enabling automoc.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/samegame/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(samegame LANGUAGES CXX)\n\nset(CMAKE_AUTOMOC ON)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Resources to the RobotArmApp\nDESCRIPTION: Adds resources to the RobotArmApp executable, specifically the `qtquickcontrols2.conf` file located in the `configuration` directory. The resource is added under the prefix `/`.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nqt_add_resources(RobotArmApp \"configuration\"\n    PREFIX \"/\"\n    FILES\n        qtquickcontrols2.conf\n)\n```\n\n----------------------------------------\n\nTITLE: Including QML Modules\nDESCRIPTION: This includes QML modules in the build process. This allows for the inclusion of various QML module functionalities in the project, depending on the project dependencies. This usually involves setting up the QML module search paths, ensuring the QML code can be found by the application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(qmlmodules)\n```\n\n----------------------------------------\n\nTITLE: Creating CMake Interface Library\nDESCRIPTION: This CMake command creates an interface library named `qtcmake`. Interface libraries are used to define a set of properties that are propagated to targets that link against them. It serves as a central definition point of properties.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/doc/src/cmake/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(qtcmake INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Adding Resources to Target - CMake\nDESCRIPTION: Compiles and embeds resource files into the \"FxMaterialShowroomApp\" target. It specifies a resource collection named \"configuration\" and includes the qtquickcontrols2.conf file under the \"/\" prefix within the resource system.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_resources(FxMaterialShowroomApp \"configuration\"\n    PREFIX \"/\"\n    FILES\n        qtquickcontrols2.conf\n)\n```\n\n----------------------------------------\n\nTITLE: Installing the Target\nDESCRIPTION: This snippet configures the installation process for the built `osmbuildings` target. It specifies where the executable, runtime libraries, and other supporting files will be installed. The `install` command takes the target and destination paths as input. It expects the build process to have successfully produced the executable and any associated libraries or assets. The output places the build artifacts at the specified locations during installation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/osmbuildings/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS osmbuildings\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qt6 Document Viewer Project Configuration in CMake\nDESCRIPTION: Sets the minimum required CMake version to 3.16 and defines the project 'documentviewer' using C++ language. It locates Qt6 modules Core, Gui, Widgets, Svg as required components and optionally PrintSupport, Pdf, PdfWidgets, and Quick3D. The snippet applies the standard Qt6 project setup requiring version 6.8. It conditionally defines compiler macros based on the availability of the PrintSupport component. The snippet also organizes the project into subdirectories for plugins and the main application. Dependencies include Qt6 libraries and a compatible CMake environment.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(documentviewer LANGUAGES CXX)\n\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets Svg\n             OPTIONAL_COMPONENTS PrintSupport Pdf PdfWidgets Quick3D)\n\nqt_standard_project_setup(REQUIRES 6.8)\n\nadd_compile_definitions(QT_NO_CAST_FROM_ASCII)\n\nif(TARGET Qt6::PrintSupport)\n    add_compile_definitions(QT_DOCUMENTVIEWER_PRINTSUPPORT)\nendif()\n\nadd_subdirectory(plugins)\nadd_subdirectory(app)\n```\n\n----------------------------------------\n\nTITLE: Installing Target - CMake\nDESCRIPTION: This snippet installs the \"txtviewer\" target using the `install` command.  It specifies the `RUNTIME` and `LIBRARY` destinations based on the previously defined `install_destination`. This ensures that the built plugin and its associated files are copied to the correct installation directory on the target system. This is a crucial step in deploying the application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/txtviewer/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS txtviewer\n    RUNTIME DESTINATION \"${install_destination}\"\n    LIBRARY DESTINATION \"${install_destination}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Destination - CMake\nDESCRIPTION: This snippet sets the installation destination based on the target platform.  If the platform is WIN32, the install destination is set to \"${CMAKE_INSTALL_BINDIR}/app\". If the platform is APPLE, the install destination is set to \".\". Otherwise, the install destination is set to \"${CMAKE_INSTALL_BINDIR}\". This provides different installation paths for binaries on different OSes.  The CMAKE_INSTALL_BINDIR is CMake's default installation directory.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/txtviewer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    set(install_destination \"${CMAKE_INSTALL_BINDIR}/app\")\nelseif(APPLE)\n    set(install_destination \".\")\nelse()\n    set(install_destination \"${CMAKE_INSTALL_BINDIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering QML Singleton Type in Qt with CMake\nDESCRIPTION: This snippet sets properties for the Constants.qml file, specifically marking it as a QML singleton type. The `QT_QML_SINGLETON_TYPE` property is set to `true`, indicating that this QML file should be treated as a singleton. This is a prerequisite for making the QML component accessible as a singleton within the QML environment. There are no dependencies other than the Qt framework and CMake.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/imports/PocketDemo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(Constants.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Target\nDESCRIPTION: This configures the installation of the target. It specifies where the executable and related files will be installed on the target system. The executable goes to the bundle, the runtime dependencies to CMAKE_INSTALL_BINDIR and the libraries to CMAKE_INSTALL_LIBDIR.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS MediaPlayerApp\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Registering MediaControls QML Module with Resources\nDESCRIPTION: Configures the MediaControls QML module with its URI, output directory, QML components, and resource files including SVG icons for media playback interface elements.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/MediaControls/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(MediaControls\n    URI \"MediaControls\"\n    OUTPUT_DIRECTORY MediaControls\n    QML_FILES\n        \"AudioControl.qml\"\n        \"ControlImages.qml\"\n        \"PlaybackSeekControl.qml\"\n        \"PlaybackRateControl.qml\"\n        \"PlaybackControl.qml\"\n        \"CustomSlider.qml\"\n        \"CustomButton.qml\"\n        \"CustomRadioButton.qml\"\n    RESOURCES\n        \"icons/Rate_Icon.svg\"\n        \"icons/Rate_Icon_Dark.svg\"\n        \"icons/Loop_Icon.svg\"\n        \"icons/Loop_Icon_Dark.svg\"\n        \"icons/Play_Icon.svg\"\n        \"icons/Previous_Icon.svg\"\n        \"icons/Previous_Icon_Dark.svg\"\n        \"icons/Next_Icon.svg\"\n        \"icons/Next_Icon_Dark.svg\"\n        \"icons/Shuffle_Icon.svg\"\n        \"icons/Volume_Icon.svg\"\n        \"icons/Volume_Icon_Dark.svg\"\n        \"icons/Playlist_Icon.svg\"\n        \"icons/Playlist_Icon_Dark.svg\"\n        \"icons/Settings_Icon.svg\"\n        \"icons/Settings_Icon_Dark.svg\"\n        \"icons/FullScreen_Icon.svg\"\n        \"icons/FullScreen_Icon_Dark.svg\"\n        \"icons/Stop_Icon.svg\"\n        \"icons/Loop_Playlist.svg\"\n        \"icons/Single_Loop.svg\"\n        \"icons/Playlist_Active.svg\"\n        \"icons/Add_file.svg\"\n        \"icons/Add_file_Dark.svg\"\n        \"icons/Shuffle_Icon_Dark.svg\"\n        \"icons/Shuffle_Active.svg\"\n        \"icons/Cancel_Button.svg\"\n        \"icons/Load_Button.svg\"\n        \"icons/Menu_Icon.svg\"\n        \"icons/Menu_Icon_Dark.svg\"\n        \"icons/Mute_Icon.svg\"\n        \"icons/Mute_Icon_Dark.svg\"\n        \"icons/Error.svg\"\n        \"icons/Trash_Icon.svg\"\n        \"icons/Trash_Icon_Dark.svg\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a QML Module with Multiple Files and Resources using CMake\nDESCRIPTION: Creates a QML module named MediaPlayer by specifying its URI and listing QML files as well as resource image files via the qt_add_qml_module command. The QML_FILES parameter defines all QML component files included in the module, and the RESOURCES parameter lists associated icon image assets used by the module’s UI components. This configures the build system to package the QML sources and resources together for deployment.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/MediaPlayer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(MediaPlayer\n    URI \"MediaPlayer\"\n    QML_FILES\n        \"Main.qml\"\n        \"Images.qml\"\n        \"MetadataInfo.qml\"\n        \"PlayerMenuBar.qml\"\n        \"TracksInfo.qml\"\n        \"TracksOptions.qml\"\n        \"PlaylistInfo.qml\"\n        \"UrlPopup.qml\"\n        \"SettingsInfo.qml\"\n        \"ThemeInfo.qml\"\n        \"ErrorPopup.qml\"\n        \"TouchMenu.qml\"\n    RESOURCES\n        \"icons/Shadow.png\"\n        \"icons/Shadow@2x.png\"\n        \"icons/Default_CoverArt.svg\"\n        \"icons/Movie_Active.svg\"\n        \"icons/Movie_Icon_Dark.svg\"\n        \"icons/Movie_Icon.svg\"\n        \"icons/Music_Active.svg\"\n        \"icons/Music_Icon_Dark.svg\"\n        \"icons/Music_Icon.svg\"\n        \"icons/Warning_Icon.svg\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Documentation Configuration with Platform Version Defines (CMake)\nDESCRIPTION: This snippet incorporates documentation files into the QtDoc target using the qt_internal_add_docs function, specifying a configuration file and a series of PLATFORM-specific compile definitions. These definitions set minimum SDK, Xcode, and OS versions for macOS, iOS, and VisionOS platforms, ensuring proper compatibility and versioning during documentation build.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/doc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_internal_add_docs(QtDoc config/qtdoc.qdocconf\n    DEFINES\n        QT_SUPPORTED_MIN_MACOS_SDK_VERSION=${QT_SUPPORTED_MIN_MACOS_SDK_VERSION}\n        QT_SUPPORTED_MIN_MACOS_XCODE_VERSION=${QT_SUPPORTED_MIN_MACOS_XCODE_VERSION}\n        QT_SUPPORTED_MIN_MACOS_VERSION=${QT_SUPPORTED_MIN_MACOS_VERSION}\n        QT_SUPPORTED_MAX_MACOS_VERSION_TESTED=${QT_SUPPORTED_MAX_MACOS_VERSION_TESTED}\n\n        QT_SUPPORTED_MIN_IOS_SDK_VERSION=${QT_SUPPORTED_MIN_IOS_SDK_VERSION}\n        QT_SUPPORTED_MIN_IOS_XCODE_VERSION=${QT_SUPPORTED_MIN_IOS_XCODE_VERSION}\n        QT_SUPPORTED_MIN_IOS_VERSION=${QT_SUPPORTED_MIN_IOS_VERSION}\n        QT_SUPPORTED_MAX_IOS_VERSION_TESTED=${QT_SUPPORTED_MAX_IOS_VERSION_TESTED}\n\n        QT_SUPPORTED_MIN_VISIONOS_SDK_VERSION=${QT_SUPPORTED_MIN_VISIONOS_SDK_VERSION}\n        QT_SUPPORTED_MIN_VISIONOS_XCODE_VERSION=${QT_SUPPORTED_MIN_VISIONOS_XCODE_VERSION}\n        QT_SUPPORTED_MIN_VISIONOS_VERSION=${QT_SUPPORTED_MIN_VISIONOS_VERSION}\n        QT_SUPPORTED_MAX_VISIONOS_VERSION_TESTED=${QT_SUPPORTED_MAX_VISIONOS_VERSION_TESTED}\n```\n\n----------------------------------------\n\nTITLE: Finding Qt dependencies and project setup\nDESCRIPTION: Finds required Qt components and sets up the standard project configuration, requiring Qt 6.8 or higher.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/samegame/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Qml Quick Sql)\n\nqt_standard_project_setup(REQUIRES 6.8)\n```\n\n----------------------------------------\n\nTITLE: Setting Singleton QML Type Property in CMake\nDESCRIPTION: This snippet sets the property 'QT_QML_SINGLETON_TYPE' to true for the QML file 'Constants.qml', which marks it as a singleton type in the Qt QML engine. This ensures a single shared instance of the QML component is used throughout the application. It requires proper file referencing and the Qt QML module support in the build system.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/imports/CarRendering/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(Constants.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Target\nDESCRIPTION: This installs the ThermostatApp executable to specified destinations during the installation phase. The application binary is installed into a \"BUNDLE\" (specifically on macOS), and it is also deployed to the runtime and library directories.  The DESTINATION paths define the installation locations.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ThermostatApp\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface Library for Qt Documentation (CMake)\nDESCRIPTION: This snippet creates a CMake interface library named QtDoc, which serves as a logical grouping for including documentation sources and configuration. It enables other targets to link against QtDoc without compiling any source code, specifically for documentation purposes.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/doc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(QtDoc INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Generating QML Deployment Script - CMake\nDESCRIPTION: This Qt-specific command generates a platform-aware deployment script necessary for bundling QML applications correctly, especially on platforms like macOS. It specifies the target, the output script variable, and options for handling bundles and unsupported platforms.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET appStocQt\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\n```\n\n----------------------------------------\n\nTITLE: Add QML Module\nDESCRIPTION: This snippet adds a QML module to the project using `qt_add_qml_module`. It defines the URI, version, and lists the QML files and resources that belong to the module. This makes the QML components and resources available for use in the application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(${PROJECT_NAME}\n    URI EXAMPLE\n    VERSION 1.0\n    QML_FILES\n        ${qml_singletons}\n        Main.qml\n        ValueFader.qml\n        BeamModel.qml\n        TargetIndicator.qml\n        PhysicsbaseTeleporter.qml\n        Grass.qml\n        House.qml\n        Fire.qml\n        Firewood.qml\n        Torch.qml\n        TorchGripper.qml\n        Fence.qml\n        Table.qml\n        Chair.qml\n        Campfire.qml\n        Stands.qml\n        Smoke.qml\n        Ground.qml\n        Prompter.qml\n    RESOURCES\n        \"media/meshes/fence_instances.xml.bin\"\n        \"media/meshes/block_instances.xml.bin\"\n        \"media/meshes/firewood_instances.xml.bin\"\n        \"media/shaders/invisible.vert\"\n        \"media/shaders/invisible.frag\"\n        \"media/shaders/target_indicator.vert\"\n        \"media/shaders/target_indicator.frag\"\n        \"media/shaders/grass.vert\"\n        \"media/shaders/grass.frag\"\n        \"media/shaders/fire.vert\"\n        \"media/shaders/fire.frag\"\n        \"media/textures/OpenfootageNET_lowerAustria01-1024.hdr\"\n\n        \"media/meshes/cylinder_invert.mesh\"\n\n        \"media/meshes/house/cube_004_mesh.mesh\"\n        \"media/meshes/house/cube_006_mesh.mesh\"\n        \"media/meshes/house/cube_007_mesh.mesh\"\n        \"media/meshes/house/cube_010_mesh.mesh\"\n        \"media/meshes/house/cube_012_mesh.mesh\"\n        \"media/meshes/house/cube_014_mesh.mesh\"\n        \"media/meshes/house/cube_016_mesh.mesh\"\n        \"media/meshes/house/cube_019_mesh.mesh\"\n        \"media/meshes/house/cube_020_mesh.mesh\"\n        \"media/textures/house/wood_bc.jpg\"\n        \"media/textures/house/wood_n.jpg\"\n        \"media/textures/house/wood_r.jpg\"\n        \"media/textures/house/rock_bc.jpg\"\n        \"media/textures/house/rock_n.jpg\"\n        \"media/textures/house/rock_r.jpg\"\n\n        \"media/meshes/torch/object_1_mesh.mesh\"\n        \"media/textures/torch/torch_bc.jpg\"\n        \"media/textures/torch/torch_n.jpg\"\n        \"media/textures/torch/torch_r.jpg\"\n\n        \"media/meshes/table/defaultMaterial_mesh7.mesh\"\n        \"media/meshes/table/defaultMaterial_mesh17.mesh\"\n        \"media/meshes/table/defaultMaterial_mesh20.mesh\"\n        \"media/meshes/table/defaultMaterial_mesh23.mesh\"\n        \"media/meshes/table/defaultMaterial_mesh26.mesh\"\n        \"media/meshes/table/defaultMaterial_mesh27.mesh\"\n        \"media/textures/table/table_bc.jpg\"\n        \"media/textures/table/table_n.jpg\"\n        \"media/textures/table/table_mr.jpg\"\n\n        \"media/meshes/campfire/cube_003_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cube_004_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cube_005_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cube_006_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cube_007_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cube_0012_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cube_0022_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cube_0032_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cube_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cube21_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cylinder_002_low_campfire_0_mesh.mesh\"\n        \"media/meshes/campfire/cylinder_low_campfire_0_mesh.mesh\"\n        \"media/textures/campfire/campfire_bc.jpg\"\n        \"media/textures/campfire/campfire_n.jpg\"\n        \"media/textures/campfire/campfire_mr.jpg\"\n\n        \"media/meshes/chair/defaultMaterial_mesh5.mesh\"\n        \"media/meshes/chair/defaultMaterial_mesh13.mesh\"\n        \"media/meshes/chair/defaultMaterial_mesh16.mesh\"\n        \"media/meshes/chair/defaultMaterial_mesh19.mesh\"\n        \"media/textures/chair/chair_bc.jpg\"\n        \"media/textures/chair/chair_n.jpg\"\n        \"media/textures/chair/chair_mr.jpg\"\n\n        \"media/meshes/firewood/plane_mesh.mesh\"\n        \"media/textures/firewood/firewood_bc.jpg\"\n        \"media/textures/firewood/firewood_n.jpg\"\n        \"media/textures/firewood/firewood_r.jpg\"\n        \"media/textures/firewood/firewood_a.jpg\"\n\n        \"media/meshes/block/defaultMaterial_mesh.mesh\"\n        \"media/textures/block/block_bc.jpg\"\n        \"media/textures/block/block_n.jpg\"\n        \"media/textures/block/block_mr.jpg\"\n\n        \"media/textures/ground_bc.jpg\"\n        \"media/textures/ground_n.jpg\"\n        \"media/textures/ground_r.jpg\"\n\n        \"media/textures/bark_bc.jpg\"\n        \"media/textures/bark_n.jpg\"\n\n        \"media/textures/turbulence.png\"\n        \"media/textures/perlin.jpg\"\n        \"media/textures/grass_bc.jpg\"\n        \"media/textures/fire.mp4\"\n        \"media/textures/smoke_sprite.png\"\n    NO_RESOURCE_TARGET_PATH\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Installation Rules - CMake\nDESCRIPTION: Configures the installation process for the \"FxMaterialShowroomApp\" target. It specifies destinations for different components: the application bundle (macOS) goes to the current directory, the executable runtime goes to the standard binary directory, and any associated libraries go to the standard library directory.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS FxMaterialShowroomApp\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake environment for standalone tests in QML Parser\nDESCRIPTION: Configures the CMake environment for standalone tests when not building within Qt. Sets minimum CMake version, project name, and finds required Qt components.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/auto/qml/qqmlparser/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT QT_BUILD_STANDALONE_TESTS AND NOT QT_BUILDING_QT)\n    cmake_minimum_required(VERSION 3.16)\n    project(tst_qqmlparser_doc LANGUAGES CXX)\n    find_package(Qt6BuildInternals REQUIRED COMPONENTS STANDALONE_TEST)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Resources to Target - CMake\nDESCRIPTION: Adds a Qt resource collection named \"controls_conf\" to the \"alarms\" target. It includes the file qtquickcontrols2.conf under the prefix \"/\", making it accessible within the application via the Qt resource system (e.g., \":/qtquickcontrols2.conf\").\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_resources(alarms \"controls_conf\"\n    PREFIX\n        \"/\"\n    FILES\n        \"qtquickcontrols2.conf\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable\nDESCRIPTION: This adds an executable named ThermostatApp, compiling src/main.cpp. This creates the main application executable. It specifies the source file for the application's entry point.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nqt_add_executable(ThermostatApp src/main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing the Application\nDESCRIPTION: This code sets up the installation process. It specifies that the target executable should be installed in the specified destinations (BUNDLE, RUNTIME, and LIBRARY). This ensures that the built application and its resources are deployed correctly during installation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${PROJECT_NAME}\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Extending QML Parser test target for cross-compilation\nDESCRIPTION: Extends the test target with additional definitions when cross-compiling using the qt_internal_extend_target function.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/auto/qml/qqmlparser/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_internal_extend_target(tst_qqmlparser_doc CONDITION CMAKE_CROSSCOMPILING # special case\n    DEFINES\n        QTEST_CROSS_COMPILED\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Targets and Deployment Script (CMake)\nDESCRIPTION: This snippet installs the target executable and generates a deployment script for QML applications. The `install(TARGETS ...)` command installs the executable to the specified destinations for BUNDLE, RUNTIME, and LIBRARY, defined by variables like `CMAKE_INSTALL_BINDIR` and `CMAKE_INSTALL_LIBDIR`. The `qt_generate_deploy_qml_app_script` command generates a script to deploy the QML application. Finally the deployment script is installed.  This facilitates distributing the application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/windowembedding/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS windowembedding\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\nqt_generate_deploy_qml_app_script(\n    TARGET windowembedding\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Finding Qt 6 Package and Components - CMake\nDESCRIPTION: Searches for the Qt 6 package, requiring at least version 6.5. It specifies essential components (Gui, Qml, Quick, Quick3D) that the project depends on, failing the configuration if they are not found.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 6.5 REQUIRED COMPONENTS Gui Qml Quick Quick3D)\n```\n\n----------------------------------------\n\nTITLE: Setting up installation and deployment for Qt Dice app\nDESCRIPTION: Configures installation targets and generates deployment scripts for the Qt dice application, handling platform-specific deployment requirements including macOS bundle post-build steps.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/dice/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${appname}\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\nqt_generate_deploy_qml_app_script(\n    TARGET ${appname}\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Installing Target and Files\nDESCRIPTION: Installs the target `${PROJECT_NAME}` (LightningViewer) to the `CMAKE_INSTALL_BINDIR` directory, both as an executable and as a library. It also installs the `qmldir` file to the same directory, necessary for QML module discovery.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/LightningViewer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${PROJECT_NAME}\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}/LightningViewer\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_BINDIR}/LightningViewer\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/qmldir\n    DESTINATION \"${CMAKE_INSTALL_BINDIR}/LightningViewer\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Qt Repository Test Build\nDESCRIPTION: Executes a Qt-specific macro to configure and build the tests discovered earlier. This prepares the test executables.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nqt_build_repo_impl_tests()\n```\n\n----------------------------------------\n\nTITLE: Adding a Qt Test with Sources, Defines, and Libraries\nDESCRIPTION: This snippet adds a Qt test named 'tst_examples', specifying its source file, macros, and linked Qt libraries. It sets source directory macro, disables certain Qt features, and links Qt6::Gui and Qt6::Quick libraries. This configures the test environment for execution.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/auto/quick/examples/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_internal_add_test(tst_examples\n    SOURCES\n        tst_examples.cpp\n    DEFINES\n        SRCDIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n        QT_NO_FOREACH\n        QT_NO_CAST_FROM_ASCII\n    LIBRARIES\n        Qt6::Gui\n        Qt6::Quick\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Rules for Targets (CMake)\nDESCRIPTION: Specifies how the built targets ('documentviewer' executable and 'abstractviewer' library) should be installed. For 'documentviewer', it sets up installation for macOS bundles, runtime executables (typically in bin/), and libraries (typically in lib/). For 'abstractviewer', it defines installation paths for runtime components (like DLLs on Windows) and library files.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/app/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS documentviewer\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\ninstall(TARGETS abstractviewer\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories to Qt Project\nDESCRIPTION: Adds the specified subdirectories to the Qt project, making their contents available for compilation and inclusion. The command facilitates modular project structure by grouping related code and resources into separate directories. Subdirectories included are CustomControls, CustomStyle, and ToDoList.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/imports/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(CustomControls)\nadd_subdirectory(CustomStyle)\nadd_subdirectory(ToDoList)\n```\n\n----------------------------------------\n\nTITLE: Installing and deploying the SameGame application\nDESCRIPTION: Configures the installation of the SameGame application and generates a deployment script for various platforms, ensuring proper deployment of QML modules.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/samegame/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS samegame\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\nqt_generate_deploy_qml_app_script(\n    TARGET samegame\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Registering Qt QML Module using CMake\nDESCRIPTION: This CMake command registers a QML module named `Ast_Venodhb` with a specific URI (`Quick3DAssets.Venodhb_LOD0`) and version (1.0). It specifies the resource prefix (`/qt/qml`) and lists the QML files belonging to this module (`Venodhb_LOD0.qml`). This makes the QML components accessible in the application using the defined URI.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/Venodhb_LOD0/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(Ast_Venodhb\n    URI \"Quick3DAssets.Venodhb_LOD0\"\n    VERSION 1.0\n    RESOURCE_PREFIX \"/qt/qml\"\n    QML_FILES\n        Venodhb_LOD0.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ImageViewer Plugin in CMake\nDESCRIPTION: Defines installation rules for the 'imageviewer' plugin, specifying runtime and library destinations based on the previously configured platform-specific directory.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/imageviewer/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS imageviewer\n    RUNTIME DESTINATION \"${install_destination}\"\n    LIBRARY DESTINATION \"${install_destination}\")\n```\n\n----------------------------------------\n\nTITLE: Including Subdirectory CMake\nDESCRIPTION: Uses the `add_subdirectory` command in CMake to include the build configuration from the 'CarRendering' subdirectory. This integrates the build targets and settings defined within that subdirectory into the current build process.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/imports/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(CarRendering)\n```\n\n----------------------------------------\n\nTITLE: Adding a QML Module and Building Static Library in Qt with CMake\nDESCRIPTION: This snippet adds a static library named \"PocketDemo\" and then defines a QML module also named \"PocketDemo\". It specifies the module's URI and version, and lists the QML files to be included.  The `qt_add_library` command creates the static library. The `qt_add_qml_module` command creates and configures a QML module, associating it with the specified QML files which are then compiled and made available to other QML files or C++ code within the project. This requires the Qt framework and CMake's Qt integration.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/imports/PocketDemo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(PocketDemo STATIC)\nqt_add_qml_module(PocketDemo\n    URI \"PocketDemo\"\n    VERSION 1.0\n    QML_FILES\n        Constants.qml\n        DirectoryFontLoader.qml\n        EventListModel.qml\n        EventListSimulator.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Qt QML Module with qt_add_qml_module (CMake)\nDESCRIPTION: This snippet uses the `qt_add_qml_module` function to create a QML module named \"Ast_SportsCar\". The QML module integrates QML components with C++ code.  It defines the URI, class name, version, resource prefix, and the QML files belonging to the module. The QML files specified by `QML_FILES` are included in the module. This module is a way of packaging QML components to be used within a Qt application or another QML module. It depends on the Qt framework and the availability of the specified QML files.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/EV_SportsCar_low/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(Ast_SportsCar\n    URI \"Quick3DAssets.EV_SportsCar_low\"\n    CLASS_NAME \"SportsCarPlugin\"\n    VERSION 1.0\n    RESOURCE_PREFIX \"/qt/qml\"\n    QML_FILES\n        Ev_SportsCar_low.qml\n        Hood.qml\n        MyDoorLeft.qml\n        MyDoorRight.qml\n        TrunkLid.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Deployment Script\nDESCRIPTION: This code generates a deployment script for QML applications. It specifies the target, output script, and other options for handling the deployment process, specifically for macOS. The script assists in packaging and deploying the QML-based UI.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET ${PROJECT_NAME}\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Find Qt6 Gui Module (CMake)\nDESCRIPTION: Finds the required Qt6 components, specifically the Gui module. This ensures the necessary Qt libraries and headers are available for building. It requires a compatible Qt6 installation to be found by CMake.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/Backend/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Gui)\n```\n\n----------------------------------------\n\nTITLE: Installing Build Targets and Resources\nDESCRIPTION: Configures installation rules for the application, specifying destinations for the executable, libraries, and bundles on different platforms. This step prepares the build artifacts for deployment and user installation, ensuring files are placed in standard directories.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/colorpaletteclient/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS colorpaletteclient\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Bundle Properties\nDESCRIPTION: Sets properties for the macOS/iOS bundle. It defines the bundle identifier, version, and information property list for the LightningViewer application. These settings are essential for deployment on iOS devices and macOS.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.\n# If you are developing for iOS or macOS you should consider setting an\n# explicit, fixed bundle identifier manually though.\nset_target_properties(${PROJECT_NAME} PROPERTIES\n    MACOSX_BUNDLE TRUE\n    MACOSX_BUNDLE_GUI_IDENTIFIER \"io.qt.examples.LightningViewer\"\n    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}\n    MACOSX_BUNDLE_INFO_PLIST \"${CMAKE_CURRENT_SOURCE_DIR}/Info.plist\"\n    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MediaControls Static Library in CMake\nDESCRIPTION: Defines a static library named MediaControls using the Qt CMake API.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/MediaControls/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(MediaControls STATIC)\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum CMake Version and Project Configuration\nDESCRIPTION: Sets the minimum required CMake version to 3.16 and establishes a project named 'colorpaletteclient' using C++. It defines required Qt6 components and applies standard project setup for Qt 6.8. This foundational configuration prepares the build environment for the Qt application, ensuring compatibility and dependency resolution.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/colorpaletteclient/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(colorpaletteclient LANGUAGES CXX)\n\nfind_package(Qt6 REQUIRED COMPONENTS Core Network Gui Qml Quick)\nqt_standard_project_setup(REQUIRES 6.8)\n```\n\n----------------------------------------\n\nTITLE: Install Target\nDESCRIPTION: This snippet configures the installation of the executable target `${PROJECT_NAME}`. It specifies the destination directories for the runtime, bundle, and library components of the target, relative to the installation prefix. This determines where the built application and its dependencies will be placed during installation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${PROJECT_NAME}\n    RUNTIME DESTINATION \"${INSTALL_EXAMPLEDIR}\"\n    BUNDLE DESTINATION \"${INSTALL_EXAMPLEDIR}\"\n    LIBRARY DESTINATION \"${INSTALL_EXAMPLEDIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding iOS FFMpeg Libraries\nDESCRIPTION: This adds iOS FFmpeg libraries to the project. This line likely integrates FFmpeg for video and audio processing on iOS platforms, enabling the application to handle media playback and related functionalities.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_ios_ffmpeg_libraries(MediaPlayerApp)\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Target Properties - CMake\nDESCRIPTION: This block sets various properties for the executable target, primarily focusing on platform-specific settings like macOS bundle version strings and enabling Windows executable properties. The macOS bundle identifier is commented out but shown as an example.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(appStocQt PROPERTIES\n#    MACOSX_BUNDLE_GUI_IDENTIFIER com.example.appStockQt\n    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}\n    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\n    MACOSX_BUNDLE TRUE\n    WIN32_EXECUTABLE TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Destination by Platform in CMake\nDESCRIPTION: Sets the installation directory for the 'imageviewer' plugin based on the target platform, ensuring correct placement on Windows, macOS, or other Unix-like systems.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/imageviewer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    set(install_destination \"${CMAKE_INSTALL_BINDIR}/app\")\nelseif(APPLE)\n    set(install_destination \".\")\nelse()\n    set(install_destination \"${CMAKE_INSTALL_BINDIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Installation Directory\nDESCRIPTION: This snippet defines the installation directory for the examples. It checks if the `INSTALL_EXAMPLESDIR` variable is already defined and sets it to \"examples\" if it is not. Then, it sets the installation example directory to a subdirectory under `INSTALL_EXAMPLESDIR`. This controls where the built example will be placed during installation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED INSTALL_EXAMPLESDIR)\n    set(INSTALL_EXAMPLESDIR \"examples\")\nendif()\n\nset(INSTALL_EXAMPLEDIR \"${INSTALL_EXAMPLESDIR}/vr/${PROJECT_NAME}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Application Icon for macOS in C++ (CMake)\nDESCRIPTION: This code configures the application icon for macOS. It sets the bundle icon file name and specifies where to find and install the icon file itself. The code also declares the executable as a macOS bundle.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/photosurface/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist\n    # generated by CMake. This variable contains the .icns file name,\n    # without the path.\n    set(MACOSX_BUNDLE_ICON_FILE photosurface.icns)\n\n    # And the following tells CMake where to find and install the file itself.\n    set(app_icon_macos \"${CMAKE_CURRENT_SOURCE_DIR}/resources/photosurface.icns\")\n    set_source_files_properties(${app_icon_macos} PROPERTIES\n           MACOSX_PACKAGE_LOCATION \"Resources\")\n\n    qt_add_executable(photosurfaceexample MACOSX_BUNDLE main.cpp ${app_icon_macos})\n```\n\n----------------------------------------\n\nTITLE: Installing Deployment Script - CMake\nDESCRIPTION: Installs the deployment script generated by the qt_generate_deploy_qml_app_script command. This ensures the script is available in the install location, allowing users to easily deploy the application with its QML dependencies after installation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum CMake Version - CMake\nDESCRIPTION: Sets the minimum required version of CMake for building the project. This ensures compatibility with required features and commands used in the script. It requires CMake version 3.16 or higher.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n```\n\n----------------------------------------\n\nTITLE: Adding QML Module\nDESCRIPTION: This section adds a QML module to the project. It defines the URI, version, QML files, source files, and resources associated with the module.  The `qt_add_qml_module` command makes the QML components available for use within the application.  It expects the paths to the QML files and source files to be relative to the CMakeLists.txt and the resources to be available as well. The result is a QML module integrated into the build.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/osmbuildings/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(osmbuildings\n    URI Example\n    VERSION 1.0\n    QML_FILES Main.qml OSMCameraController.qml\n    SOURCES request.h request.cpp\n    SOURCES geometry.h geometry.cpp\n    SOURCES manager.h manager.cpp\n    SOURCES 3rdparty/mapbox/earcut.h\n    RESOURCES customshaderbuildings.frag customshaderbuildings.vert customshadertiles.frag\n    NO_RESOURCE_TARGET_PATH\n)\n```\n\n----------------------------------------\n\nTITLE: Linking QQS_App Target with Qt6 Qml and Quick Libraries Using CMake\nDESCRIPTION: Specifies that the QQS_App target should be linked privately with the Qt6::Qml and Qt6::Quick libraries. This ensures that the QQS_App library has access to Qt's QML and Quick modules during compilation and linking, establishing dependencies necessary for QtQuick application development.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/imports/QtQuick/Studio/Application/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(QQS_App PRIVATE\n    Qt6::Qml\n    Qt6::Quick\n)\n```\n\n----------------------------------------\n\nTITLE: Including QML Modules Script - CMake\nDESCRIPTION: Includes another CMake script file named qmlmodules.cmake (or similar) from the CMake module path. This script likely contains definitions or configurations related to QML modules used by the project.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(qmlmodules)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name and Language - CMake\nDESCRIPTION: Declares the project name as \"FxMaterialShowroomApp\" and specifies that the project primarily uses the C++ language. This command must be called in the top-level CMakeLists.txt file.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(FxMaterialShowroomApp LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: Initializes the CMake project, specifying the minimum required CMake version and the project name with CXX language support.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/LightningViewer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(LightningViewer LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Enabling Current Directory Includes - CMake\nDESCRIPTION: Sets the CMAKE_INCLUDE_CURRENT_DIR variable to ON. This tells CMake to automatically add the current source and build directories to the include path, simplifying header inclusion for local files.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n```\n\n----------------------------------------\n\nTITLE: Conditional Dependency Configuration for Qt Standalone Test Build in QMake\nDESCRIPTION: Defines a conditional block that checks if the standalone tests should be built by evaluating the QT_BUILD_STANDALONE_TESTS variable. If true, it allows adding calls to qt_find_package for extra dependencies necessary solely for standalone tests. This snippet enhances modular test building by including only relevant dependencies during the standalone test build phase. It requires QMake and uses standard QMake syntax for conditionals and macros.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: QMake\nCODE:\n```\nif(QT_BUILD_STANDALONE_TESTS)\n    # Add qt_find_package calls for extra dependencies that need to be found when building\n    # the standalone tests here.\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Qt Executable and Linking Libraries (CMake)\nDESCRIPTION: This snippet adds an executable named `windowembedding` using `qt_add_executable`. It specifies platform-specific settings like `WIN32` and `MACOSX_BUNDLE`. The code then links the necessary Qt libraries (Gui, Widgets, Quick) to the executable using `target_link_libraries`. The `PRIVATE` keyword indicates that these libraries are only for the executable's internal use.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/windowembedding/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(windowembedding\n    WIN32\n    MACOSX_BUNDLE\n    main.cpp\n)\n\ntarget_link_libraries(windowembedding PRIVATE\n    Qt6::Gui\n    Qt6::Widgets\n    Qt6::Quick\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Rules for Target - CMake\nDESCRIPTION: Specifies how the \"alarms\" executable target should be installed. It defines different destination directories based on the target type (BUNDLE for macOS, RUNTIME for executable, LIBRARY for associated libraries), typically placing the executable in the standard binary directory.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS alarms\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. This ensures that the CMake version used to build the project is compatible with the features used in the CMakeLists.txt file. It is required for subsequent commands.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic MOC - CMake\nDESCRIPTION: Sets the CMAKE_AUTOMOC variable to ON. This enables automatic invocation of the Meta-Object Compiler (MOC) for source files recognized by CMake, which is necessary for Qt's signal and slot mechanism.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_AUTOMOC ON)\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing Deployment Script\nDESCRIPTION: This code generates a deployment script using `qt_generate_deploy_qml_app_script` and then installs the generated script. The deployment script facilitates deploying the Qt application and its dependencies to the target platform.  It relies on the previously added QML module and the available Qt modules. The expected output is a deployment script, which would later be executed to prepare the application for runtime, possibly on macOS.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/osmbuildings/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET osmbuildings\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Performing Post-Processing for Qt Repository Build\nDESCRIPTION: Executes a Qt-specific macro for post-processing steps after main project configuration and subdirectory inclusion. This might involve final checks or setup before the final build and installation steps.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nqt_build_repo_post_process()\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion in Qt Project Configuration - Qt Project Configuration Language\nDESCRIPTION: This snippet conditionally adds the 'quick' and 'qml' subdirectories to the Qt build based on whether the 'Qt6::Quick' and 'Qt6::Qml' targets are defined. It leverages native Qt project variables and conditional statements to modularize the build process. Dependencies include the existence of these Qt6 module targets defined elsewhere in the build environment. The snippet expects the 'TARGET' variable to represent a Qt6 module and includes the subdirectory only when the module is enabled, optimizing build scope and dependencies.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/auto/CMakeLists.txt#_snippet_0\n\nLANGUAGE: Qt Project Configuration\nCODE:\n```\nif(TARGET Qt6::Quick)\n    add_subdirectory(quick)\nendif()\nif(TARGET Qt6::Qml)\n    add_subdirectory(qml)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Qt Library with qt_add_library (CMake)\nDESCRIPTION: This snippet uses the `qt_add_library` function to create a static Qt library named \"Ast_SportsCar\". It takes the library's name and type (STATIC) as arguments.  No other arguments are supplied, so it creates a basic library that does not include any source files in its definition. It depends on the Qt framework being available and the CMake environment being set up correctly.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/EV_SportsCar_low/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(Ast_SportsCar STATIC)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt QML Module\nDESCRIPTION: Adds a Qt QML module named `${PROJECT_NAME}` (LightningViewer). It defines the URI, version, source files (C++ headers and implementations), and QML files that constitute the module. Resources like icons are also included.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/LightningViewer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(${PROJECT_NAME}\n    URI LightningViewer\n    VERSION 1.0\n    SOURCES\n        controller.h controller.cpp\n        laststrikeinfo.h\n        lightningitemdata.h lightningitemdata.cpp\n        lightningitemmodel.h lightningitemmodel.cpp\n        lightningprovider.h lightningprovider.cpp\n    QML_FILES\n        ActionsLayer.qml\n        DistanceTimeLayer.qml\n        LightningMapLayer.qml\n        LightningView.qml\n        LightningViewConfig.qml\n        Main.qml\n        MapLayersDrawer.qml\n        MapLayersItem.qml\n        MapType.qml\n        MapView.qml\n        SwitchMap.qml\n    RESOURCES\n        icons/distance.svg\n        icons/globe.svg\n        icons/lightning-layer.svg\n        icons/lightning-strike.svg\n        icons/map-layers.svg\n        icons/map.svg\n        icons/recenter.svg\n        icons/user-location.svg\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories and Executable\nDESCRIPTION: This section adds subdirectories (LightningViewer and LightningViewerStyle) to the project. Then, it adds an executable named after the project, specifying the main.cpp file as its source. It specifies the Windows-specific WIN32 flag.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(LightningViewer)\nadd_subdirectory(LightningViewerStyle)\n\nqt_add_executable(${PROJECT_NAME} WIN32\n    main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Qt Repository Test Discovery\nDESCRIPTION: Executes a Qt-specific macro to find and configure tests within the repository. This step prepares the test targets to be built later.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nqt_build_repo_impl_find_package_tests()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project\nDESCRIPTION: Defines the main project with its name, version derived from a variable, description, homepage URL, and required languages. This sets up the basic project context for CMake.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(QtDoc # special case\n    VERSION \"${QT_REPO_MODULE_VERSION}\"\n    DESCRIPTION \"Qt Documentation and examples\" # special case\n    HOMEPAGE_URL \"https://qt.io/\"\n    LANGUAGES CXX C\n)\n```\n\n----------------------------------------\n\nTITLE: Adding QML module resources for Qt Dice app\nDESCRIPTION: Configures the QML module for the dice application, defining all QML files, resources including icons, textures, meshes, and sound files required for the 3D dice simulation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/dice/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(${appname}\n    URI DiceModule\n    QML_FILES\n        Main.qml\n        Dice_low.qml\n        DiceSpawner.qml\n        PhysicalDie.qml\n        PhysicalTable.qml\n        Scene.qml\n        RoundTable.qml\n        Carpet.qml\n    RESOURCES\n        #icons\n        Menu_Icon.svg\n\n        #maps\n        maps/carpet_texture_baseColor.jpeg\n        maps/M_Side_Table_Natural_Wenge_Wood_4K_baseColor_small.jpg\n        maps/M_Side_Table_Natural_Wenge_Wood_4K_metallicRoughness_small.png\n        maps/M_Side_Table_Natural_Wenge_Wood_4K_normal_small.png\n\n        #meshes\n        meshes/cube_001.mesh\n        meshes/object_2.mesh\n        meshes/object_3.mesh\n        meshes/side_Table_Pine_LOD0_M_Side_Table_Natural_Wenge_Wood_4K_0.mesh\n\n        #sounds\n        sounds/onedice.wav\n        sounds/rolling.wav\n)\n```\n\n----------------------------------------\n\nTITLE: Find Required Qt Modules\nDESCRIPTION: This snippet uses the `find_package` command to locate the necessary Qt 6 modules required for the project.  It specifies that these modules are REQUIRED, meaning the build will fail if they are not found. The found modules (Core, Gui, Quick, Quick3D, Quick3DPhysics, Quick3DXr, Multimedia) are then available for linking to the executable.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Quick Quick3D Quick3DPhysics Quick3DXr Multimedia)\n```\n\n----------------------------------------\n\nTITLE: Configuring Constants QML as Singleton in CMake\nDESCRIPTION: Configures the `Constants.qml` file within a Qt QML project using CMake. It sets the `QT_QML_SINGLETON_TYPE` property to `true`, indicating that this QML file should be treated as a singleton type, meaning only one instance of it will be created in the QML engine context. This is typically used for global configuration or utility objects. Requires CMake and the Qt QML module.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/imports/Thermostat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(Constants.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Lightning Viewer Example conditionally with feature checks in CMake\nDESCRIPTION: This snippet adds the `lightningviewer` example only if several specific Qt features (`QT_FEATURE_ssl`, `QT_FEATURE_zstd`) and module targets (`Qt6::WebSockets`, `Qt6::Positioning`, `Qt6::Location`) are enabled/available. Otherwise, it prints a warning message listing the missing requirements.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(QT_FEATURE_ssl AND TARGET Qt6::WebSockets AND TARGET Qt6::Positioning AND TARGET Qt6::Location AND QT_FEATURE_zstd)\n    qt_internal_add_example(lightningviewer)\nelse()\n    message(WARNING \"To build the Lightning Viewer Example, ensure the required features and modules are enabled: \"\n                    \"SSL, WebSocket, Positioning, Location, zstd\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Installation Targets\nDESCRIPTION: This snippet configures the installation targets for the 'hangman' executable. It specifies the destination for the bundle, runtime files, and library files.  This ensures the application is correctly installed after building.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS hangman\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Adding Executable 'hangman'\nDESCRIPTION: This snippet creates the 'hangman' executable, specifying source files and enabling manual finalization. It adds C++ source files and headers.  'MANUAL_FINALIZATION'  is used for a customized deployment script.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(hangman\n    MANUAL_FINALIZATION\n    hangmangame.cpp hangmangame.h\n    main.cpp\n    purchasing/inapp/inappproduct.cpp purchasing/inapp/inappproduct.h\n    purchasing/inapp/inapppurchasebackend.cpp purchasing/inapp/inapppurchasebackend.h\n    purchasing/inapp/inappstore.cpp purchasing/inapp/inappstore.h\n    purchasing/inapp/inapptransaction.cpp purchasing/inapp/inapptransaction.h\n    purchasing/qmltypes/inappproductqmltype.cpp purchasing/qmltypes/inappproductqmltype.h\n    purchasing/qmltypes/inappstoreqmltype.cpp purchasing/qmltypes/inappstoreqmltype.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Documentation Build and Dummy File\nDESCRIPTION: Conditionally adds subdirectories for documentation sources and related CMake/platform integration files if not building standalone tests. It also adds dependencies and creates/installs a dummy file to ensure artifact generation for Coin builds.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT QT_BUILD_STANDALONE_TESTS)\n    add_subdirectory(doc)\n    add_subdirectory(doc/src/cmake)\n    add_subdirectory(doc/src/platformintegration)\n    add_dependencies(QtDoc qtcmake)\n    add_dependencies(QtDoc qtplatformintegration)\n\n    # Dummy file that needs to be installed, to circumvent Coin skipping builds of standalone\n    # tests due to not having anything to upload as an artifact.\n    qt_configure_file(OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/qtdoc_dummy_file.txt\" CONTENT \" \")\n    qt_install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/qtdoc_dummy_file.txt\" DESTINATION \"${INSTALL_MKSPECSDIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Static Qt Library in CMake\nDESCRIPTION: Defines a static library target named `Thermostat` using the Qt CMake macro `qt_add_library`. This creates a build target that will produce a static library file (.a or .lib depending on the platform). Subsequent build commands, like adding QML files or other sources, will typically attach to this library target. Requires CMake and the Qt build system configured for static libraries.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/imports/Thermostat/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(Thermostat STATIC)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets the `LIBRARY_OUTPUT_DIRECTORY` property for the `Q3Dviewer` target. This directs the compiled plugin library to be placed in the `app` subdirectory of the project's binary directory. This helps organize the build output and ensures the plugin is located in the expected directory for deployment.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/q3dviewer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(Q3Dviewer PROPERTIES\n    LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/app\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering a QML Module in CMake for QtQuick Studio Application\nDESCRIPTION: Declares the QML module QtQuick.Studio.Application with version 1.0 and links it to the plugin class QQS_AppPlugin. Specifies source files quickstudioapplication.cpp and quickstudioapplication_p.h for compilation. This enables integration of the QML module into the Qt framework during the build process.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/imports/QtQuick/Studio/Application/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(QQS_App\n    URI QtQuick.Studio.Application\n    VERSION 1.0\n    CLASS_NAME QQS_AppPlugin\n    SOURCES\n        quickstudioapplication.cpp quickstudioapplication_p.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AppSettings QML as Singleton in CMake\nDESCRIPTION: Configures the `AppSettings.qml` file using CMake, similar to `Constants.qml`. By setting `QT_QML_SINGLETON_TYPE` to `true`, it ensures that `AppSettings.qml` is registered as a QML singleton type. This is useful for managing application-wide settings or state accessible from anywhere in the QML code. Requires CMake and the Qt QML module.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/imports/Thermostat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(AppSettings.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Executable and Library Targets (CMake)\nDESCRIPTION: Specifies the linking dependencies for the main application and the abstract library. The 'documentviewer' executable is linked privately against Qt6::Core, Qt6::Gui, Qt6::Widgets, and the custom 'abstractviewer' library. The 'abstractviewer' library itself is linked privately against Qt6::Core, Qt6::Gui, Qt6::Widgets, and Qt6::Svg.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/app/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(documentviewer PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Widgets\n    abstractviewer\n)\n\ntarget_link_libraries(abstractviewer PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Widgets\n    Qt6::Svg\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Q3Dviewer Target\nDESCRIPTION: This snippet installs the `Q3Dviewer` target (both the runtime and library components) to the destination specified by the `install_destination` variable. The `RUNTIME` and `LIBRARY` keywords specify that both the executable and library components of the target should be installed. The destination path is determined by the operating system specific logic in the previous snippet.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/q3dviewer/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS Q3Dviewer\n    RUNTIME DESTINATION \"${install_destination}\"\n    LIBRARY DESTINATION \"${install_destination}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library and QML Module for Shadow Plane in CMake\nDESCRIPTION: Creates a static library named Ast_ShadowPlane and configures it as a QML module with URI 'Quick3DAssets.ShadowPlane'. The module has version 1.0, uses the class name 'ShadowPlanePlugin', sets a resource prefix, and includes a single QML file.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/ShadowPlane/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(Ast_ShadowPlane STATIC)\n\nqt_add_qml_module(Ast_ShadowPlane\n    URI \"Quick3DAssets.ShadowPlane\"\n    CLASS_NAME \"ShadowPlanePlugin\"\n    VERSION 1.0\n    RESOURCE_PREFIX \"/qt/qml\"\n    QML_FILES\n        ShadowPlane.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Deployment Script\nDESCRIPTION: Registers the generated deployment script for installation, making it accessible alongside the application binaries. This step ensures that deployment automation is included as part of the build process.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/colorpaletteclient/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library and QML Module with CMake in Qt Design Studio\nDESCRIPTION: CMake configuration to create a static library called RobotArm and register it as a QML module. It specifies Constants.qml as a singleton type and configures the module with URI 'RobotArm', version 1.0, and appropriate resource prefixes.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/imports/RobotArm/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(RobotArm STATIC)\nset_source_files_properties(Constants.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n\nqt6_add_qml_module(RobotArm\n        URI \"RobotArm\"\n        VERSION 1.0\n        QML_FILES\n            Constants.qml\n        RESOURCE_PREFIX \"/\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generating QML Deployment Script - CMake\nDESCRIPTION: Generates a script for deploying the QML application, targeting the \"FxMaterialShowroomApp\" target. It outputs the script path to the deploy_script variable, configures it as a macOS bundle post-build step, and handles unsupported platforms by deploying user QML modules without errors.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/FX_Material_Showroom/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET FxMaterialShowroomApp\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a QML module in Qt using CMake - qt_add_qml_module\nDESCRIPTION: This snippet defines a QML module named 'Ast_Pebbles' with specific parameters such as URI, class name, version, resource prefix, and associated QML files. It enables integration of QML UI components into Qt applications, relying on Qt's CMake functions.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/Pebbles/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_qml_module(Ast_Pebbles\n    URI \"Quick3DAssets.Pebbles\"\n    CLASS_NAME \"PebblesPlugin\"\n    VERSION 1.0\n    RESOURCE_PREFIX \"/qt/qml\"\n    QML_FILES\n        Pebbles.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Set Properties for QML Singletons\nDESCRIPTION: This snippet sets the `QT_QML_SINGLETON_TYPE` property to TRUE for the QML files listed in the `qml_singletons` variable. This informs the Qt build system that these QML files should be treated as singleton types, ensuring that they are only instantiated once.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(${qml_singletons}\n    PROPERTIES QT_QML_SINGLETON_TYPE TRUE)\n```\n\n----------------------------------------\n\nTITLE: Generating Qt QML Deployment Script - CMake\nDESCRIPTION: Generates a platform-specific script to deploy the QML application \"alarms\" and its dependencies. The options configure behavior for macOS bundles, suppress errors on unsupported platforms, and ensure user QML modules are deployed. The script path is stored in the deploy_script variable.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET alarms\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\n```\n\n----------------------------------------\n\nTITLE: Set QML Singleton Type Property - CMake\nDESCRIPTION: This snippet sets the `QT_QML_SINGLETON_TYPE` property to `true` for specified QML files. This indicates that these QML files should be treated as singleton types within the QML module.  This ensures that only one instance of the QML component exists.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/imports/ToDoList/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(Constants.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n\nset_source_files_properties(Database.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n\nset_source_files_properties(AppSettings.qml\n    PROPERTIES\n        QT_QML_SINGLETON_TYPE true\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Q3Dviewer Plugin\nDESCRIPTION: This snippet defines the Q3Dviewer plugin using the `qt_add_plugin` command. It specifies the class name and source files for the plugin.  The command registers the plugin with Qt's plugin system, allowing it to be dynamically loaded at runtime. The plugin's code resides in `q3dviewer.cpp` and `q3dviewer.h`.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/q3dviewer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_plugin(Q3Dviewer\n    CLASS_NAME Q3DViewer\n    q3dviewer.cpp q3dviewer.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick 3D and Positioning Example conditionally in CMake\nDESCRIPTION: This snippet adds the `osmbuildings` example if `Qt::Quick`, `Qt::Quick3D`, and `Qt6::Positioning` targets are available. Note the use of `Qt::` prefix which might indicate compatibility with older Qt versions or a specific build setup.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt::Quick AND TARGET Qt::Quick3D AND TARGET Qt6::Positioning)\n    qt_internal_add_example(osmbuildings)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking PrintSupport - CMake\nDESCRIPTION: This snippet conditionally links the Qt6::PrintSupport library.  It checks if the Qt6::PrintSupport target exists and if it does, it links it to the \"txtviewer\" target. This approach allows for optional inclusion of the PrintSupport library based on its availability.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/txtviewer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::PrintSupport)\n    target_link_libraries(txtviewer PRIVATE Qt6::PrintSupport)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Deploy Script Generation\nDESCRIPTION: This snippet generates a deployment script specific to the hangman application.  It handles MacOS bundle post-build operations and deploys user QML modules on unsupported platforms. It's for customizing the deployment process after the build.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nqt_generate_deploy_qml_app_script(\n    TARGET hangman\n    OUTPUT_SCRIPT deploy_script\n    MACOS_BUNDLE_POST_BUILD\n    NO_UNSUPPORTED_PLATFORM_ERROR\n    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM\n)\ninstall(SCRIPT ${deploy_script})\n```\n\n----------------------------------------\n\nTITLE: Running Qt IPC Demo with ping-pong programs in Shell\nDESCRIPTION: This shell session demonstrates starting two Qt applications that communicate via IPC. First, the 'pong' application is started in the background, then the 'ping' application is executed with 'Hello' as an argument. The output shows the successful IPC communication between the two processes.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/doc/src/snippets/dbus-pingpong-example.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./pong &\n$ ./ping Hello\nReply was: ping(\"Hello\") got called\n```\n\n----------------------------------------\n\nTITLE: Finding Required Qt6 Components (CMake)\nDESCRIPTION: This command searches for the specified Qt 6 components (Core, Gui, Qml, QmlXmlListModel, Quick) required by the application. The `REQUIRED` keyword ensures that the build process will fail if any of these components are not found.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/rssnews/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Qml QmlXmlListModel Quick)\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Notice Template for GFDL Documents\nDESCRIPTION: A template for the copyright and license notice that should be included in documents licensed under the GNU Free Documentation License. This notice should be placed just after the title page of the document.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/LICENSES/GFDL-1.3-no-invariants-only.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c)  YEAR  YOUR NAME.\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3\nor any later version published by the Free Software Foundation;\nwith no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\nA copy of the license is included in the section entitled \"GNU\nFree Documentation License\".\n```\n\n----------------------------------------\n\nTITLE: Adding Resources\nDESCRIPTION: This adds resources to the ThermostatApp executable, including qtquickcontrols2.conf, prefixed with \"/\". These resources are embedded into the application binary and can be accessed via Qt's resource system. The \"PREFIX\" specifies the location where the resources are organized.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nqt_add_resources(ThermostatApp \"configuration\"\n    PREFIX \"/\"\n    FILES\n        qtquickcontrols2.conf\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Application Icon for Windows in C++ (CMake)\nDESCRIPTION: This snippet configures the application icon for Windows. It sets the resource file containing the icon and associates it with the executable. This ensures that the application has a custom icon when running on the Windows operating system.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/photosurface/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n    set(app_icon_resource_windows \"${CMAKE_CURRENT_SOURCE_DIR}/resources/photosurface.rc\")\n    qt_add_executable(photosurfaceexample main.cpp ${app_icon_resource_windows})\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick Alarms Example in CMake\nDESCRIPTION: This CMake code snippet conditionally adds the 'alarms' example if the `Qt6::Quick` target is defined.  It utilizes the `qt_internal_add_example` function, assuming it is a Qt-provided macro for integrating examples into the build system. The `TARGET` command checks if a target exists.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET Qt6::Quick)\n    qt_internal_add_example(alarms)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Basic CMake Project Properties - CMake\nDESCRIPTION: This snippet sets the minimum required CMake version, defines the project name, version, and languages. It also enables standard C++ requirements and Qt's automatic MOC (Meta-Object Compiler) processing.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n\nproject(StocQt VERSION 0.1 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_AUTOMOC ON)\n```\n\n----------------------------------------\n\nTITLE: Define Project with C++ Support\nDESCRIPTION: This snippet defines the CMake project and specifies the languages used in the project. In this case, the project name is xr_physicsbase_teleportation, and the language is CXX (C++). The CXX language enables C++ compilation.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(xr_physicsbase_teleportation LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick Controls 2 Multimedia and Svg Example conditionally in CMake\nDESCRIPTION: This snippet adds the `mediaplayer` example if `Qt::Quick`, `Qt::QuickControls2`, `Qt::Multimedia`, and `Qt::Svg` targets are available. This example showcases building a media player interface using these modules.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt::Quick AND TARGET Qt::QuickControls2 AND TARGET Qt::Multimedia AND TARGET Qt::Svg)\n    qt_internal_add_example(mediaplayer)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Android-Specific Configuration\nDESCRIPTION: This snippet checks if the `ANDROID` variable is defined. If it is, it appends the path to the Android manifest file to the `QT_ANDROID_PACKAGE_SOURCE_DIR` property of the target. This provides the necessary information for packaging the application for Android devices.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/xr_physicsbase_teleportation/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID)\n    set_property(TARGET ${PROJECT_NAME} APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/android)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Quick3DAssets Subdirectory in CMake\nDESCRIPTION: This CMake command instructs the build system to include the specified subdirectory, 'Quick3DAssets', in the build process. CMake will look for and process a CMakeLists.txt file within the 'Quick3DAssets' directory, incorporating its targets and build rules into the main project.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Quick3DAssets)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick, Controls 2, and 3D Examples conditionally in CMake\nDESCRIPTION: This snippet adds the `robotarm` and `FX_Material_Showroom` examples if `Qt::Quick`, `Qt::QuickControls2`, and `Qt::Quick3D` targets are available. These examples demonstrate complex 3D scenes and material rendering with Quick3D.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt::Quick AND TARGET Qt::QuickControls2 AND TARGET Qt::Quick3D)\n    qt_internal_add_example(robotarm)\n    qt_internal_add_example(FX_Material_Showroom)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick Controls 2 Charts and Svg Example conditionally in CMake\nDESCRIPTION: This snippet adds the `thermostat` example if `Qt6::Quick`, `Qt6::QuickControls2`, `Qt6::Charts`, and `Qt6::Svg` targets are available. This example demonstrates creating a user interface with charts using Quick Controls 2.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::Quick AND TARGET Qt6::QuickControls2 AND TARGET Qt6::Charts AND TARGET Qt6::Svg)\n    qt_internal_add_example(thermostat)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding a Qt Plugin - CMake\nDESCRIPTION: This snippet uses `qt_add_plugin` to create a Qt plugin named \"txtviewer\".  It specifies the class name (TxtViewer) and the source and header files. This command is used to declare the plugin with the given class name and source files. The plugin is built as part of the project.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/txtviewer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_plugin(txtviewer\n    CLASS_NAME TxtViewer\n    txtviewer.cpp txtviewer.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project's name, version, and language. It establishes the foundation for the build process and declares C++ as the primary language. The project version is set to 1.0.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(LightningViewerExample VERSION 1.0 LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties - CMake\nDESCRIPTION: This snippet sets the `LIBRARY_OUTPUT_DIRECTORY` property for the \"txtviewer\" target. It specifies the directory where the compiled library will be placed within the project's binary directory.  The output directory is set to `${PROJECT_BINARY_DIR}/app`.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/txtviewer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(txtviewer PROPERTIES\n    LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/app\"\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration: Automoc and Output Directory\nDESCRIPTION: This snippet configures the `CMAKE_AUTOMOC` option, enabling automatic Meta-Object Compiler processing. It also sets the output directory for the example files. These configurations are for build system behavior.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_AUTOMOC ON)\n\nset(OUTPUT_DIRECTORY \"${INSTALL_EXAMPLESDIR}/demos/hangman\")\n```\n\n----------------------------------------\n\nTITLE: Adding a static library in Qt using CMake - qt_add_library\nDESCRIPTION: This snippet adds a static library named 'Ast_Pebbles' to the project. It sets up a target for building a static library, which can be linked with other components. Dependencies include Qt's CMake modules.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/car-configurator/asset_imports/Quick3DAssets/Pebbles/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(Ast_Pebbles STATIC)\n```\n\n----------------------------------------\n\nTITLE: Installing RobotArmApp Target\nDESCRIPTION: Configures the installation process for the RobotArmApp executable.  It specifies the destination directories for the bundle, runtime executable, and libraries. The installation paths are defined by CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_LIBDIR.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS RobotArmApp\n    BUNDLE  DESTINATION .\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Application Executable - CMake\nDESCRIPTION: This command defines the main executable target for the application. It specifies the target name (`appStocQt`) and the path to the primary C++ source file (`src/main.cpp`) that serves as the application's entry point.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_executable(appStocQt\n    src/main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Copyright Notice Template for GFDL Documents with Invariant Sections\nDESCRIPTION: An alternative license notice template for documents with Invariant Sections, Front-Cover Texts, and Back-Cover Texts. This replaces the corresponding line in the standard notice template.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/LICENSES/GFDL-1.3-no-invariants-only.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nwith the Invariant Sections being LIST THEIR TITLES, with the\nFront-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\n```\n\n----------------------------------------\n\nTITLE: Finding Required Qt 6 Modules - CMake\nDESCRIPTION: This command locates the necessary Qt 6 modules (Core, Gui, Qml, Quick, Graphs) required for building the application. It specifies the required version based on the project version and ensures the modules are found.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 ${PROJECT_VERSION} REQUIRED COMPONENTS Core Gui Qml Quick Graphs)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Definition\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name and language. It establishes the foundation for the build process, specifying the CMake version required and the programming language used in the project (CXX for C++).\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n\nproject(MediaPlayerApp LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Add Subdirectory in QMake\nDESCRIPTION: This QMake snippet checks if the build feature `QT_FEATURE_private_tests` is enabled. If the feature is enabled, the `qqmlparser` subdirectory is included in the project's build process. This is typically used to conditionally include modules or tests depending on the desired build configuration.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/auto/qml/CMakeLists.txt#_snippet_0\n\nLANGUAGE: QMake\nCODE:\n```\nif(QT_FEATURE_private_tests)\n    add_subdirectory(qqmlparser)\n```\n\n----------------------------------------\n\nTITLE: Finding Required Qt6 Packages - CMake\nDESCRIPTION: Searches for the Qt6 package and ensures that the 'Core', 'Gui', and 'Quick' components are found. The REQUIRED keyword means CMake will stop with an error if the package or specified components are not available.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/tutorials/alarms/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Quick)\n```\n\n----------------------------------------\n\nTITLE: Adding QML Parser test target with Qt internal test function\nDESCRIPTION: Defines the test target using qt_internal_add_test function, specifying source files, defining the source directory, and linking against the QmlPrivate library.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/auto/qml/qqmlparser/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_internal_add_test(tst_qqmlparser_doc # special case\n    SOURCES\n        tst_qqmlparser.cpp\n    DEFINES\n        SRCDIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n    LIBRARIES\n        Qt6::QmlPrivate\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up QML singleton and defining QML module\nDESCRIPTION: Configures Settings.qml as a singleton and creates a QML module with all game QML files and resources.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/samegame/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(content/Settings.qml\n    PROPERTIES QT_QML_SINGLETON_TYPE TRUE)\n\nqt_add_qml_module(samegame\n    URI SameGameModule\n    QML_FILES\n        content/Block.qml\n        content/BlockEmitter.qml\n        content/Button.qml\n        content/GameArea.qml\n        content/LogoAnimation.qml\n        content/MenuEmitter.qml\n        content/PaintEmitter.qml\n        content/PrimaryPack.qml\n        content/PuzzleBlock.qml\n        content/SamegameText.qml\n        content/Settings.qml\n        content/SimpleBlock.qml\n        content/SmokeText.qml\n        Main.qml\n        content/samegame.js\n    RESOURCES\n        content/gfx/background-puzzle.png\n        content/gfx/background.png\n        content/gfx/bar.png\n        content/gfx/blue-puzzle.png\n        content/gfx/blue.png\n        content/gfx/bubble-highscore.png\n        content/gfx/bubble-puzzle.png\n        content/gfx/but-game-1.png\n        content/gfx/but-game-2.png\n        content/gfx/but-game-3.png\n        content/gfx/but-game-4.png\n        content/gfx/but-game-new.png\n        content/gfx/but-menu.png\n        content/gfx/but-puzzle-next.png\n        content/gfx/but-quit.png\n        content/gfx/green-puzzle.png\n        content/gfx/green.png\n        content/gfx/icon-fail.png\n        content/gfx/icon-ok.png\n        content/gfx/icon-time.png\n        content/gfx/logo-a.png\n        content/gfx/logo-e.png\n        content/gfx/logo-g.png\n        content/gfx/logo-m.png\n        content/gfx/logo-s.png\n        content/gfx/logo.png\n        content/gfx/particle-brick.png\n        content/gfx/particle-paint.png\n        content/gfx/particle-smoke.png\n        content/gfx/red-puzzle.png\n        content/gfx/red.png\n        content/gfx/text-highscore-new.png\n        content/gfx/text-highscore.png\n        content/gfx/text-no-winner.png\n        content/gfx/text-p1-go.png\n        content/gfx/text-p1-won.png\n        content/gfx/text-p1.png\n        content/gfx/text-p2-go.png\n        content/gfx/text-p2-won.png\n        content/gfx/text-p2.png\n        content/gfx/yellow-puzzle.png\n        content/gfx/yellow.png\n        content/levels/TemplateBase.qml\n        content/levels/level0.qml\n        content/levels/level1.qml\n        content/levels/level2.qml\n        content/levels/level3.qml\n        content/levels/level4.qml\n        content/levels/level5.qml\n        content/levels/level6.qml\n        content/levels/level7.qml\n        content/levels/level8.qml\n        content/levels/level9.qml\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Quick and Graphs Example conditionally in CMake\nDESCRIPTION: This snippet adds the `stocqt` example if both the `Qt6::Quick` and `Qt6::Graphs` module targets are found. This example demonstrates the integration of Qt Quick with the Qt Graphs module.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::Quick AND TARGET Qt6::Graphs)\n    qt_internal_add_example(stocqt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Qt Widgets Example conditionally in CMake\nDESCRIPTION: This snippet adds the `documentviewer` example if the `Qt6::Widgets` target is available and the current platform is NOT Android. This example showcases document viewing functionality using Qt Widgets.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::Widgets AND NOT ANDROID)\n    qt_internal_add_example(documentviewer)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Internal Qt Project\nDESCRIPTION: Calls a Qt-specific internal macro or function to perform standard setup tasks for a Qt project within the larger build system. This likely involves configuration based on detected modules and build type.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nqt_internal_project_setup()\n```\n\n----------------------------------------\n\nTITLE: Including Subdirectory for Qt Example Style\nDESCRIPTION: Adds a subdirectory 'QtExampleStyle' to the build, likely containing additional styles or resources for the application. This modular approach helps organize project components and reuses shared styling or functionality.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/colorpaletteclient/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(QtExampleStyle)\n```\n\n----------------------------------------\n\nTITLE: Creating Qt Platform Integration Library and Documentation in CMake\nDESCRIPTION: Defines an interface library for Qt platform integration and sets up documentation generation. The file contains a special note indicating that regeneration should be skipped in some cases.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/doc/src/platformintegration/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(qtplatformintegration INTERFACE)\n\nqt_internal_add_docs(qtplatformintegration\n                     qtplatformintegration.qdocconf\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Content Subdirectory - CMake\nDESCRIPTION: This command includes and processes the `CMakeLists.txt` file located in the `content` subdirectory. This allows for organizing larger projects into modular components.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/stocqt/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(content)\n```\n\n----------------------------------------\n\nTITLE: Beginning Qt Repository Build Process\nDESCRIPTION: Initiates the standard build process for a Qt repository module. This macro likely sets up directories and variables required for subsequent build steps like finding tests and adding subdirectories.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nqt_build_repo_begin()\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for ImageViewer Plugin in CMake\nDESCRIPTION: Sets the library output directory for the 'imageviewer' target within the build directory, organizing where the compiled plugin library will be placed.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/imageviewer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(imageviewer PROPERTIES\n    LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/app\"\n```\n\n----------------------------------------\n\nTITLE: Define Static Library (CMake)\nDESCRIPTION: Defines a static library target named `backendmodule`. This target will be used to build the C++ code that forms the backend of the QML module.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/Backend/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nqt_add_library(backendmodule STATIC)\n```\n\n----------------------------------------\n\nTITLE: Creating a Qt6 QML Module with Resources and Files\nDESCRIPTION: This snippet defines a Qt6 QML module named 'CustomStyle' with URI 'CustomStyle' and version 1.0. It includes multiple QML files related to UI components and a resource file, which are packaged within the module for reuse in applications. The structure follows Qt's module declaration standards.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/imports/CustomStyle/CMakeLists.txt#_snippet_1\n\nLANGUAGE: QML\nCODE:\n```\nqt6_add_qml_module(CustomStyle\n    URI \"CustomStyle\"\n    VERSION 1.0\n    QML_FILES\n        Button.qml\n        CheckBox.qml\n        ComboBox.qml\n        Dialog.qml\n        Page.qml\n        Pane.qml\n        ItemDelegate.qml\n        RadioDelegate.qml\n        SwitchDelegate.qml\n        TextArea.qml\n        TextField.qml\n        ToolBar.qml\n        ToolButton.qml\n        ToolTip.qml\n    RESOURCES\n        images/Expand_Icon.svg\n)\n```\n\n----------------------------------------\n\nTITLE: Including QML Modules in CMake\nDESCRIPTION: Includes the QML modules defined in the qmlmodules file within the current source directory. This makes the QML modules available for use in the RobotArm application.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/robotarm/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/qmlmodules)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking PrintSupport Module in CMake\nDESCRIPTION: Adds PrintSupport to the linked libraries if the Qt6 PrintSupport component is available, enabling printing features within the plugin.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/imageviewer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET Qt6::PrintSupport)\n    target_link_libraries(imageviewer PRIVATE Qt6::PrintSupport)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Qt Repository Example Build\nDESCRIPTION: Executes a Qt-specific macro to configure and build the examples found within the repository. This prepares the example executables.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nqt_build_repo_impl_examples()\n```\n\n----------------------------------------\n\nTITLE: Ending Qt Repository Build Process\nDESCRIPTION: Finalizes the standard build process for a Qt repository module. This macro likely cleans up temporary settings or performs final configuration steps.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nqt_build_repo_end()\n```\n\n----------------------------------------\n\nTITLE: Including CMake Configuration File\nDESCRIPTION: Includes a local configuration file (`.cmake.conf`) to potentially load project-specific variables or macros before the main project setup.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(.cmake.conf)\n```\n\n----------------------------------------\n\nTITLE: Including Private Headers for ImageViewer in CMake\nDESCRIPTION: Adds a private include directory for the 'imageviewer' target, allowing access to internal or project-specific header files located relative to the current source.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/documentviewer/plugins/imageviewer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(imageviewer PRIVATE\n    ../../app\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Library for Custom Style in Qt\nDESCRIPTION: This snippet creates a static library named 'CustomStyle' using Qt's CMake or qmake build system. It sets up an element of project build process, serving as a foundation for the QML module. Dependencies imply Qt's core and QML modules but are implicit.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/todolist/imports/CustomStyle/CMakeLists.txt#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nqt_add_library(CustomStyle STATIC)\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Quick Framework to MediaControls Library\nDESCRIPTION: Links the Qt Quick framework as a private dependency to the MediaControls library.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/mediaplayer/MediaControls/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(MediaControls PRIVATE Qt6::Quick)\n```\n\n----------------------------------------\n\nTITLE: Linking Qt libraries to SameGame executable\nDESCRIPTION: Links the necessary Qt libraries to the SameGame executable target.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/samegame/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(samegame PRIVATE\n    Qt6::Core\n    Qt6::Gui\n    Qt6::Qml\n    Qt6::Quick\n    Qt6::Sql\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet specifies the minimum required CMake version for the project to be 3.16. This ensures compatibility with the features used in the build process. It sets a prerequisite to ensure the availability of necessary CMake functionalities.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/thermostat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Automoc\nDESCRIPTION: Enables automatic moc processing for Qt header files.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/lightningviewer/LightningViewer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_AUTOMOC ON)\n```\n\n----------------------------------------\n\nTITLE: CMake Setup: Minimum Version and Project Definition\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name as 'hangman', specifying CXX as the language. This is a fundamental setup step, establishing the project's foundation within the build system.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/demos/hangman/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(hangman LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake to build the project. Ensures compatibility with features used in the script.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n```\n\n----------------------------------------\n\nTITLE: Finding Optional Qt Modules\nDESCRIPTION: Attempts to find a wide range of optional Qt6 modules silently (`QUIET`). The build will proceed even if these modules are not found, allowing the documentation to be built with whichever optional components are available.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt6 ${PROJECT_VERSION} QUIET CONFIG\n    OPTIONAL_COMPONENTS\n        Gui\n        Widgets\n        PrintSupport\n        Qml\n        Quick\n        Quick3D\n        Quick3DXr\n        Quick3DPhysics\n        Test\n        Sql\n        Network\n        QuickControls2\n        QmlXmlListModel\n        Graphs\n        WebSockets\n        Positioning\n        Location\n        Svg\n        Sensors\n        Multimedia\n        Charts\n        Pdf\n        PdfWidgets\n        ExamplesAssetDownloaderPrivate\n)\n```\n\n----------------------------------------\n\nTITLE: Building Qt Examples\nDESCRIPTION: This CMake script builds Qt examples. It begins and ends the build process with `qt_examples_build_begin` and `qt_examples_build_end`, respectively. It also adds subdirectories for `demos` and `tutorials`.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/examples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nqt_examples_build_begin(EXTERNAL_BUILD)\n\nadd_subdirectory(demos)\nadd_subdirectory(tutorials)\n\nqt_examples_build_end()\n```\n\n----------------------------------------\n\nTITLE: Invoking Qt Test Build Process Using qt_build_tests Macro in QMake\nDESCRIPTION: Invokes the qt_build_tests() function, which triggers the build process for Qt tests as per the current QMake configuration. This macro abstracts the details of compiling and linking test targets, streamlining the test project build. It requires Qt build system infrastructure and should be used after any necessary dependencies are configured.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: QMake\nCODE:\n```\nqt_build_tests()\n```\n\n----------------------------------------\n\nTITLE: Adding Example Directory - qmake\nDESCRIPTION: This snippet adds an 'examples' subdirectory to the project's build process using the `add_subdirectory` command. This command is used in qmake to include other projects or subdirectories within the main project. The included directory will have its own build configuration, likely a .pro file of its own. This is a common pattern in Qt projects to organize examples or other related components.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/auto/quick/CMakeLists.txt#_snippet_0\n\nLANGUAGE: qmake\nCODE:\n```\nadd_subdirectory(examples)\n```\n\n----------------------------------------\n\nTITLE: Defining project and dependencies with CMake for Qt Test\nDESCRIPTION: This snippet checks whether the build is a standalone test or part of Qt, then sets the minimum CMake version, initializes the project, and finds the necessary Qt build internals component 'STANDALONE_TEST'. This ensures proper setup for building Qt tests.\nSOURCE: https://github.com/qt/qtdoc/blob/dev/tests/auto/quick/examples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT QT_BUILD_STANDALONE_TESTS AND NOT QT_BUILDING_QT)\n    cmake_minimum_required(VERSION 3.16)\n    project(tst_examples LANGUAGES CXX)\n    find_package(Qt6BuildInternals REQUIRED COMPONENTS STANDALONE_TEST)\nendif()\n```"
  }
]