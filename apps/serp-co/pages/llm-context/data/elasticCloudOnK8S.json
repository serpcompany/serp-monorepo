[
  {
    "owner": "elastic",
    "repo": "cloud-on-k8s",
    "content": "TITLE: Defining ApmServer Custom Resource in Kubernetes YAML\nDESCRIPTION: YAML definition for the ApmServer custom resource in the apm.k8s.elastic.co/v1 API group. Specifies the schema for configuring and deploying APM Server instances.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apm.k8s.elastic.co/v1\nkind: ApmServer\nmetadata:\n  # Refer to Kubernetes API documentation for fields of `metadata`.\nspec:\n  # ApmServerSpec fields go here\n```\n\n----------------------------------------\n\nTITLE: Installing ECK-Stack Chart with Helm\nDESCRIPTION: Commands to add the Elastic Helm repository and install the ECK-Stack chart using default values. This will deploy a quickstart Elasticsearch cluster and Kibana instance in the 'elastic-stack' namespace.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add the Elastic Helm Repository\nhelm repo add elastic https://helm.elastic.co && helm repo update\n\n# Install the ECK-Stack helm chart\n# This will setup a 'quickstart' Elasticsearch and Kibana resource in the 'elastic-stack' namespace\nhelm install my-release elastic/eck-stack -n elastic-stack --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Custom Resource in Kubernetes YAML\nDESCRIPTION: YAML definition for the Agent custom resource in the agent.k8s.elastic.co/v1alpha1 API group. Specifies the schema for configuring and deploying Elastic Agents.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: agent.k8s.elastic.co/v1alpha1\nkind: Agent\nmetadata:\n  # Refer to Kubernetes API documentation for fields of `metadata`.\nspec:\n  # AgentSpec fields go here\n```\n\n----------------------------------------\n\nTITLE: Installing Elasticsearch and Kibana with ECK Stack Helm Chart\nDESCRIPTION: Command to install a quickstart deployment of Elasticsearch and Kibana in a dedicated namespace using the ECK Stack Helm chart. Requires the ECK operator to be installed.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install es-kb-quickstart ./eck-stack -n elastic-stack --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Correct Info-Level Structured Logging in Go\nDESCRIPTION: Example of proper structured logging at info level using key-value pairs instead of string interpolation.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\nlogger.Info(\"starting reconciliation\", \"pod\", req.NamespacedNamed)\n```\n\n----------------------------------------\n\nTITLE: Installing ECK Operator with Helm\nDESCRIPTION: Commands to add the Elastic Helm repository and install the ECK Operator cluster-wide using Helm. This is a prerequisite for using the ECK-Stack chart.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add the Elastic Helm Repository\nhelm repo add elastic https://helm.elastic.co && helm repo update\n\n# Install the ECK Operator cluster-wide\nhelm install elastic-operator elastic/eck-operator -n elastic-system --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Defining NodeSet in YAML\nDESCRIPTION: YAML representation of the NodeSet type, which specifies a group of Elasticsearch nodes sharing the same configuration and Pod template. It includes fields for name, config, count, pod template, and volume claim templates.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: string\nconfig: Config\ncount: integer\npodTemplate: PodTemplateSpec\nvolumeClaimTemplates: PersistentVolumeClaim[]\n```\n\n----------------------------------------\n\nTITLE: Installing ECK Operator with Cluster-Wide Permissions\nDESCRIPTION: Command to install the ECK operator with cluster-wide permissions to manage all namespaces in the Kubernetes cluster. Creates a dedicated namespace called 'elastic-system'.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install elastic-operator ./eck-operator -n elastic-system --create-namespace\n```\n\n----------------------------------------\n\nTITLE: TLSOptions Configuration Structure\nDESCRIPTION: Configuration options for TLS settings including self-signed certificates and certificate references.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nselfSignedCertificate:    # self-signed cert configuration\n  subjectAltNames: []    # list of SANs\n  disabled: boolean      # enable/disable self-signed cert\ncertificate:             # reference to existing certificate\n  secretName: string     # name of cert secret\n```\n\n----------------------------------------\n\nTITLE: Defining StackConfigPolicy Resource in Kubernetes YAML\nDESCRIPTION: This snippet shows the structure of a StackConfigPolicy resource in Kubernetes. It includes apiVersion, kind, metadata, and spec fields. The spec field can contain resourceSelector, elasticsearch, and kibana configurations.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: stackconfigpolicy.k8s.elastic.co/v1alpha1\nkind: StackConfigPolicy\nmetadata:\n  # Refer to Kubernetes API documentation for fields of `metadata`\nspec:\n  resourceSelector:\n    # LabelSelector fields\n  elasticsearch:\n    # ElasticsearchConfigPolicySpec fields\n  kibana:\n    # KibanaConfigPolicySpec fields\n```\n\n----------------------------------------\n\nTITLE: Defining Kibana-Elasticsearch Association in Kubernetes\nDESCRIPTION: Example YAML configuration for a KibanaElasticsearchAssociation Custom Resource Definition (CRD) that manages the relationship between Kibana and Elasticsearch instances across namespaces.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0003-associations/0003-associations.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: k8s.elastic.co/v1alpha1\nkind: KibanaElasticsearchAssociation\nmetadata:\n  name: foo-bar\n  namespace: elastic\nspec:\n  elasticsearch:\n    name: <name of ElasticsearchCluster resource>\n    namespace: foo\n  kibana:\n    name: <name of Kibana resource>\n    namespace: bar\n```\n\n----------------------------------------\n\nTITLE: Defining ElasticsearchStatus in YAML\nDESCRIPTION: YAML representation of the ElasticsearchStatus type, which represents the observed state of Elasticsearch. It includes fields for available nodes, version, health, phase, conditions, and in-progress operations.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\navailableNodes: integer\nversion: string\nhealth: ElasticsearchHealth\nphase: ElasticsearchOrchestrationPhase\nconditions: Conditions\ninProgressOperations: InProgressOperations\nobservedGeneration: integer\n```\n\n----------------------------------------\n\nTITLE: Defining RemoteCluster in YAML\nDESCRIPTION: YAML representation of the RemoteCluster type, which declares a remote Elasticsearch cluster connection. It includes fields for name, Elasticsearch reference, and API key configuration.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: string\nelasticsearchRef: LocalObjectSelector\napiKey: RemoteClusterAPIKey\n```\n\n----------------------------------------\n\nTITLE: Configuring ElasticsearchConfigPolicySpec in YAML\nDESCRIPTION: This snippet demonstrates the structure of ElasticsearchConfigPolicySpec within a StackConfigPolicy. It includes various configuration options for Elasticsearch, such as cluster settings, snapshot repositories, security role mappings, and index templates.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nelasticsearch:\n  clusterSettings:\n    # Config\n  snapshotRepositories:\n    # Config\n  snapshotLifecyclePolicies:\n    # Config\n  securityRoleMappings:\n    # Config\n  indexLifecyclePolicies:\n    # Config\n  ingestPipelines:\n    # Config\n  indexTemplates:\n    componentTemplates:\n      # Config\n    composableIndexTemplates:\n      # Config\n  config:\n    # Config\n  secretMounts:\n    # Array of SecretMount\n  secureSettings:\n    # Array of SecretSource\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterLicense Custom Resource in YAML\nDESCRIPTION: This YAML snippet defines the structure of a ClusterLicense custom resource, which is used to directly apply a license to an Elasticsearch cluster. It includes fields for license details such as UID, type, issue date, expiry date, and a reference to the license signature.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0004-licensing.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: elasticsearch.k8s.elastic.co/v1alpha1\nkind: ClusterLicense\nmetadata:\n  name: <cluster-name>\n  namespace: <cluster-namespace>\nspec:\n  uid: \"893361dc-9749-4997-93cb-802e3d7fa4xx\" \n  type: \"standard\"\n  issueDate: 1411948800000 # MicroTime?\n  expiryDate: 1914278399999 # MicroTime?\n  issuedTo: \"issuedTo\"\n  issuer: \"issuer\"\n  signatureRef: {\n    name: <secret-name>\n    key: <optional secret key for secrets containing multiple sigs> \n  }\n```\n\n----------------------------------------\n\nTITLE: Listing ECK Resources Installed by Helm Chart\nDESCRIPTION: Command to view all Elastic resources installed by the Helm chart, filtered by the instance label in a specific namespace.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get elastic -l \"app.kubernetes.io/instance\"=es-kb-quickstart -n elastic-stack\n```\n\n----------------------------------------\n\nTITLE: SecretSource Configuration Type Definition\nDESCRIPTION: Definition of the SecretSource type which configures a data source based on a Kubernetes Secret. Used in various Elastic Stack component specs.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecretName: string       # name of the secret\nentries:                 # array of KeyToPath entries\n  - key: string          # key in the secret\n    path: string         # relative filesystem path\n```\n\n----------------------------------------\n\nTITLE: Defining a Central Snapshot Repository Provider for Elasticsearch Clusters\nDESCRIPTION: This YAML defines a SnapshotRepositoryProvider custom resource for centrally managing snapshot configurations across multiple Elasticsearch clusters. It includes credentials, configuration, and a selector to match clusters that should use this provider.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0003-associations/0003-associations.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: elasticsearch.k8s.elastic.co/v1alpha1\nkind: SnapshotRepositoryProvider\nmetadata:\n  name: my-provider\n  namespace: elastic\nspec:\n  credentials:\n    secret: <???>\n  config: JSON\n  clusterSelector:\n    matchLabels:\n      snapshot-provider: my-provider\n```\n\n----------------------------------------\n\nTITLE: Specifying SecretMount in YAML\nDESCRIPTION: This snippet demonstrates how to define a SecretMount within the ElasticsearchConfigPolicySpec. It includes fields for specifying the secret name and mount path for additional secrets to be mounted to Elasticsearch pods.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsecretMounts:\n  - secretName: \"name-of-secret\"\n    mountPath: \"/path/to/mount\"\n```\n\n----------------------------------------\n\nTITLE: Elastic Operator Configuration Specification\nDESCRIPTION: Sample YAML configuration defining multiple operator instances with different roles and namespace scopes. Demonstrates how to configure operators for different environments and responsibilities including cluster management, licensing, and cross-cluster features.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0005-configurable-operator.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noperators:\n    # manage clusters in namespace \"team-A-production\"\n    - image: docker.elastic.co/k8s-operators:1.0\n      roles: [\"elasticsearch\", \"kibana\"]\n      managedNamespaces: [\"team-A-production\"]\n      namespace: \"team-A-production\"\n    # manage clusters in namespace \"team-A-development\"\n    - image: docker.elastic.co/k8s-operators:1.1-alpha1\n      roles: [\"elasticsearch\", \"kibana\"]\n      managedNamespaces: [\"team-A-development\"]\n      namespace: \"team-A-development\"\n    # manage enterprise licenses in all namespaces\n    - image: docker.elastic.co/k8s-operators:1.0\n      roles: [\"licensing\"]\n      clusterWide: true\n      namespace: \"elastic-system\"\n    # manage CCS/CCR in namespaces \"team-A-production\" and \"team-B-production\"\n    - image: docker.elastic.co/k8s-operators:1.0\n      roles: [\"cross-cluster\"]\n      managedNamespaces: [\"team-A-production\", \"team-B-production\"]\n      namespace: \"elastic-system\"\n```\n\n----------------------------------------\n\nTITLE: Defining KibanaConfigPolicySpec in YAML\nDESCRIPTION: This snippet shows the structure of KibanaConfigPolicySpec within a StackConfigPolicy. It includes configuration options for Kibana, such as general config and secure settings.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkibana:\n  config:\n    # Config\n  secureSettings:\n    # Array of SecretSource\n```\n\n----------------------------------------\n\nTITLE: Defining EnterpriseLicense Custom Resource in YAML\nDESCRIPTION: This YAML snippet defines the structure of an EnterpriseLicense custom resource, which is used in the license pool approach. It includes fields for enterprise license details, maximum instances, and can contain multiple cluster licenses within it.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0004-licensing.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: elasticsearch.k8s.elastic.co/v1alpha1\nkind: EnterpriseLicense\nmetadata:\n  name: <license-name>\n  namespace: <license-controller-namespace>\nspec:\n  uid: \"893361dc-9749-4997-93cb-802e3d7fa4xx\" \n  type: \"enterprise\"\n  issueDate: 1411948800000 # MicroTime?\n  expiryDate: 1914278399999 # MicroTime?\n  maxInstances: 40\n  issuedTo: \"issuedTo\"\n  issuer: \"issuer\"\n  signatureRef: {\n    name: <secret-name>\n    key: <optional secret key for secrets containing multiple sigs> \n  }\n  clusterLicenses: \n    - uid <cluster-license-spec-inline>\n```\n\n----------------------------------------\n\nTITLE: Generating All-in-One YAML Manifest\nDESCRIPTION: Command to generate the all-in-one.yaml manifest file for standard ECK deployment.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/manifest-gen/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./manifest-gen.sh -g\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Cluster Replication (CCR) in Kubernetes with Custom Resources\nDESCRIPTION: This YAML defines a CCRConfig custom resource for Elasticsearch clusters in Kubernetes. It specifies trusted node name patterns and CA certificates required for secure cross-cluster replication between Elasticsearch instances.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0003-associations/0003-associations.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: elasticsearch.k8s.elastic.co/v1alpha1\nkind: CCRConfig\nmetadata:\n  name: foo\n  namespace: <cluster-namespace>\n  labels:\n      elasticsearch.k8s.elastic.co/cluster: <cluster id>\nspec:\n  trustedNamesPattern: \"*.node.{remote-cluster-id}.cluster.local\"\n  trustedCA: CA PEM file contents\n```\n\n----------------------------------------\n\nTITLE: Generating Manifests from Released Version\nDESCRIPTION: Command to generate OperatorHub manifest files for a previously released ECK Operator version. This extracts CRDs and RBAC definitions from distribution YAML manifests to prepare files for OperatorHub publication.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/operatorhub/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./bin/operatorhub generate-manifests -c config.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Kibana Pod Status in Kubernetes\nDESCRIPTION: Command to list Kibana pods in a specific namespace using label selectors. Filters pods by the Kibana name label using template variables.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-kibana/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods --namespace={{ .Release.Namespace }} -l kibana.k8s.elastic.co/name={{ include \"kibana.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Generating Manifests from Unreleased YAML Files\nDESCRIPTION: Command to generate OperatorHub manifests using unreleased YAML files. Specifies custom CRD and operator YAML files as input sources instead of retrieving them from the internet.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/operatorhub/README.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./bin/operatorhub generate-manifests -c config.yaml -y ../../config/crds.yaml -y ./../config/operator.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Kibana Resource Status in Kubernetes\nDESCRIPTION: Command to get the status of a Kibana resource in a specific namespace using kubectl. Uses template variables for Kibana name and namespace.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-kibana/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get kibana {{ include \"kibana.fullname\" . }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Using Annotator Script for Kubernetes Elastic Resources\nDESCRIPTION: This code snippet demonstrates how to use the annotator.sh script to manage annotations on Elastic resources in a Kubernetes cluster. It shows examples of adding, listing, and removing annotations using environment variables to specify the annotation key, value, and operation.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/annotator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add the my.domain/annotation=value annotation to all Elastic resources\nANN_KEY=\"my.domain/annotation\" ANN_VAL=\"value\" ./annotator.sh add\n\n# List all Elastic resources that have the my.domain/annotation set\nANN_KEY=\"my.domain/annotation\" ./annotator.sh ls\n\n# Remove the my.domain/annotation from all Elastic resources\nANN_KEY=\"my.domain/annotation\" PAUSE_SECS=10 ./annotator.sh remove\n```\n\n----------------------------------------\n\nTITLE: Checking Elastic Beat Pod Status in Kubernetes\nDESCRIPTION: This command lists all pods associated with a specific Elastic Beat in the Kubernetes cluster. It uses Helm templating to dynamically insert the namespace and Beat name for filtering the pods.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-beats/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get pods --namespace={{ .Release.Namespace }} -l beat.k8s.elastic.co/name={{ include \"beat.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Provisioning GKE Cluster with Deployer\nDESCRIPTION: Commands to bootstrap a GKE (Google Kubernetes Engine) cluster using the Deployer tool. Requires Google Cloud SDK to be installed and properly configured.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/deployer/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake switch-gke bootstrap-cloud\n```\n\n----------------------------------------\n\nTITLE: Checking Elastic Beat Status in Kubernetes\nDESCRIPTION: This command retrieves the status of a specific Elastic Beat resource in the Kubernetes cluster. It uses Helm templating to dynamically insert the Beat's full name and namespace.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-beats/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get beat {{ include \"beat.fullname\" . }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Kind Cluster with Deployer\nDESCRIPTION: Commands to bootstrap a Kind (Kubernetes in Docker) cluster using the Deployer tool. No separate installation of Kind CLI is needed as Deployer handles it inside a Docker container.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/deployer/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake switch-kind bootstrap-cloud\n```\n\n----------------------------------------\n\nTITLE: Checking APM Server Pod Status in Kubernetes\nDESCRIPTION: Command to list all pods associated with an APM Server instance in a specific namespace. This helps verify that the pods are running correctly and identifies any problems with individual instances.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-apm-server/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace={{ .Release.Namespace }} -l apm.k8s.elastic.co/name={{ include \"apm-server.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Listing Elasticsearch Pods with kubectl\nDESCRIPTION: Command to list all pods associated with a specific Elasticsearch cluster using a label selector. The command uses template variables to populate the namespace and cluster name from the Helm release context.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-elasticsearch/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace={{ .Release.Namespace }} -l elasticsearch.k8s.elastic.co/cluster-name={{ include \"elasticsearch.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Inspecting ECK Operator Logs with kubectl\nDESCRIPTION: This command retrieves and displays the logs from the ECK operator statefulset. It uses Helm template variables to reference the correct namespace and release name, ensuring the logs are fetched from the proper deployment.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-operator/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl logs -n {{ .Release.Namespace }} sts/{{ .Release.Name }}\n```\n\n----------------------------------------\n\nTITLE: Checking Elasticsearch Resource Status with kubectl\nDESCRIPTION: Command to retrieve the status of an Elasticsearch custom resource in a Kubernetes namespace. Uses template variables to dynamically insert the Elasticsearch instance name and namespace.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-elasticsearch/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get es {{ include \"elasticsearch.fullname\" . }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Running Operator and Tests Locally\nDESCRIPTION: Command to run e2e tests locally with a specific test pattern match while the operator runs in a separate shell.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Checking Elastic Agent Pod Status in Kubernetes\nDESCRIPTION: Command to list all pods associated with an Elastic Agent deployment using labels. Uses Helm template variables for filtering pods by agent name and namespace.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-agent/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace={{ .Release.Namespace }} -l agent.k8s.elastic.co/name={{ include \"elasticagent.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Installing Helm UnitTest Plugin\nDESCRIPTION: Command to install the Helm UnitTest Plugin, which is used for testing ECK Helm charts to ensure they render properly.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin install https://github.com/quintush/helm-unittest --version 0.2.8\n```\n\n----------------------------------------\n\nTITLE: Checking Elastic Agent Status in Kubernetes\nDESCRIPTION: Command to retrieve the status of an Elastic Agent deployment using kubectl. Uses Helm template variables for agent name and namespace.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-agent/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get agent {{ include \"elasticagent.fullname\" . }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Running ECK Helm Chart Tests\nDESCRIPTION: Command to run the Helm chart test suite from the project's root directory using the Makefile target.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake helm-test\n```\n\n----------------------------------------\n\nTITLE: Checking APM Server Status in Kubernetes\nDESCRIPTION: Command to check the status of an APM Server resource in a specific namespace. This command retrieves the overall state of the APM Server custom resource.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-apm-server/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get apmserver {{ include \"apm-server.fullname\" . }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Manually Running Helm Unit Tests for a Specific Chart\nDESCRIPTION: Command to manually invoke the Helm unit tests for a specific chart, in this case the ECK Stack chart. Shows how to run tests without including subcharts.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd deploy/eck-stack\nhelm unittest -3 -f 'templates/tests/*.yaml' --with-subchart=false .\n```\n\n----------------------------------------\n\nTITLE: Checking Fleet Server Status in Kubernetes\nDESCRIPTION: This command retrieves the status of the Fleet Server agent in the specified Kubernetes namespace. It uses the 'kubectl get agent' command with template placeholders for the Fleet Server name and namespace.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-fleet-server/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get agent {{ include \"fleet-server.fullname\" . }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Updating CRDs and appVersion in the Helm Chart\nDESCRIPTION: Command to update the appVersion and CRDs in the ECK Helm chart located at $REPO_ROOT/deploy/eck.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/manifest-gen/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./manifest-gen.sh -u\n```\n\n----------------------------------------\n\nTITLE: Checking Fleet Server Pod Status in Kubernetes\nDESCRIPTION: This command lists the pods associated with the Fleet Server in the specified Kubernetes namespace. It uses 'kubectl get pods' with a label selector to filter for Fleet Server pods and includes template placeholders for the namespace and Fleet Server name.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-fleet-server/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get pods --namespace={{ .Release.Namespace }} -l fleet-server.k8s.elastic.co/name={{ include \"fleet-server.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Executing Container Push and Publish Commands\nDESCRIPTION: Examples of using the OperatorHub container commands without Vault integration. These commands push and publish the ECK operator container image to the RedHat certification platform using direct credential parameters.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/operatorhub/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./operatorhub container push -a 'api-key-in-keybase' -p `project-id`-r `registry-password-for-quay.io` --dry-run=false\n./operatorhub container publish -a 'api-key-in-keybase' -p `project-id` -r `registry-password-for-quay.io` --dry-run=false\n```\n\n----------------------------------------\n\nTITLE: Checking Logstash Instance Status in Kubernetes\nDESCRIPTION: Command to retrieve the status of a specific Logstash instance in a Kubernetes namespace using kubectl. Uses template variables for dynamic naming.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-logstash/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get logstash {{ include \"logstash.fullname\" . }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vault Secrets for OperatorHub Release\nDESCRIPTION: Example shell commands to retrieve secrets from Vault for OperatorHub release operations. Shows how to fetch RedHat and GitHub credentials stored in Vault using the vault CLI with specified paths.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/operatorhub/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n❯ VAULT_ADDR='http://0.0.0.0:8200' VAULT_TOKEN=myroot vault read -format=json -field=data secret/ci/elastic-cloud-on-k8s/operatorhub-release-redhat\n{\n  \"api-key\": \"api-key-in-keybase\",\n  \"project-id\": \"project-id\",\n  \"registry-password\": \"registry-password-for-quay.io\"\n}\n❯ VAULT_ADDR='http://0.0.0.0:8200' VAULT_TOKEN=myroot vault read -format=json -field=data secret/ci/elastic-cloud-on-k8s/operatorhub-release-github\n{\n  \"github-email\": \"you@email.com\",\n  \"github-fullname\": \"My Fullname\",\n  \"github-token\": \"ghp_asdflkj12340987\",\n  \"github-username\": \"ghusername\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Elastic Resources Status in Kubernetes\nDESCRIPTION: Command to retrieve status of all Elastic resources in the specified namespace filtered by release name label.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get elastic -n {{ .Release.Namespace }} -l \"app.kubernetes.io/instance\"={{ .Release.Name }}\n```\n\n----------------------------------------\n\nTITLE: Installing ECK-Stack Chart with Custom Values File\nDESCRIPTION: Command to install the ECK-Stack chart using a custom YAML file that specifies values for configuration parameters.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-release -f values.yaml .\n```\n\n----------------------------------------\n\nTITLE: Generating Multi-Tenancy Manifests\nDESCRIPTION: Command to generate manifests for soft multi-tenancy profile with a specified Kubernetes API server IP.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/manifest-gen/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./manifest-gen.sh -g --profile=soft-multi-tenancy --set=kubeAPIServerIP=1.2.3.4\n```\n\n----------------------------------------\n\nTITLE: Available Command Line Flags\nDESCRIPTION: Comprehensive list of command line flags for configuring the test harness execution, including file paths, retry settings, and release specifications\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/upgrade-test-harness/README.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFlags:\n      --conf-file string                   Path to the file containing test params (default \"conf.yaml\")\n      --from-release string                Release to start with (alpha, beta, v101, v112, upcoming) (default \"alpha\")\n      --log-level string                   Log level (DEBUG, INFO, WARN, ERROR) (default \"INFO\")\n      --retry-count uint                   Number of retries (default 5)\n      --retry-delay duration               Delay between retries (default 30s)\n      --retry-timeout duration             Time limit for retries (default 5m0s)\n      --skip-cleanup                       Skip cleaning up after test run\n      --to-release string                  Release to finish with (alpha, beta, v101, v112, upcoming) (default \"upcoming\")\n      --upcoming-release-crds string       YAML file for installing the CRDs for the upcoming release (default \"../../config/crds.yaml\")\n      --upcoming-release-operator string   YAML file for installing the operator for the upcoming release (default \"../../config/operator.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Creating PR for OperatorHub Bundle with Vault (Shell)\nDESCRIPTION: This command creates a pull request for an OperatorHub bundle using Vault for secret management. It sets environment variables for Vault and GitHub secrets, and only requires the directory parameter.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/operatorhub/README.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nOHUB_GITHUB_VAULT_SECRET=\"secret/ci/elastic-cloud-on-k8s/operatorhub-release-github\" OHUB_REDHAT_VAULT_SECRET=\"secret/ci/elastic-cloud-on-k8s/operatorhub-release-redhat\" VAULT_ADDR='https://vault-server:8200' VAULT_TOKEN=my-token ./operatorhub bundle create-pr -d .\n```\n\n----------------------------------------\n\nTITLE: Using the ECK Helm Charts Releaser Command\nDESCRIPTION: Command-line usage guide for the ECK Helm charts releaser tool. It shows available flags including options for specifying charts directory, credentials file path, dry-run mode, Vault integration, and environment selection.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/helm/release/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  release [flags]\n\nExamples:\n  release --env=prod --charts-dir=./deploy --dry-run=false\n\nFlags:\n      --charts-dir string         Directory which contains Helm charts to release (env: HELM_CHARTS_DIR) (default \"./deploy\")\n      --credentials-file string   Path to GCS credentials JSON file (env: HELM_CREDENTIALS_FILE) (default \"/tmp/credentials.json\")\n  -d, --dry-run                   Do not upload files to bucket, or update Helm index (env: HELM_DRY_RUN) (default true)\n      --enable-vault              Read 'credentials-file' from Vault (requires VAULT_ADDR and VAULT_TOKEN) (env: HELM_ENABLE_VAULT) (default true)\n      --env string                Environment in which to release Helm charts ('dev' or 'prod') (env: HELM_ENV) (default \"dev\")\n  -h, --help                      help for release\n```\n\n----------------------------------------\n\nTITLE: Creating PR for OperatorHub Bundle without Vault (Shell)\nDESCRIPTION: This command creates a pull request for an OperatorHub bundle without using Vault. It requires specifying the directory, full name, GitHub token, username, and email as parameters.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/operatorhub/README.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./operatorhub bundle create-pr -d . -f 'Your Name' -g 'your-github-token' -u 'your-github-username' -e 'your-github-email'\n```\n\n----------------------------------------\n\nTITLE: Provisioning AKS Cluster with Deployer\nDESCRIPTION: Commands to bootstrap an AKS (Azure Kubernetes Service) cluster using the Deployer tool. Requires Azure CLI to be installed and a resource group to be specified.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/deployer/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake switch-aks bootstrap-cloud\n```\n\n----------------------------------------\n\nTITLE: Executing Container Commands with Vault Integration\nDESCRIPTION: Example of executing the container publish command with Vault integration for secure credential management. Uses environment variables to specify Vault server address, token, and secret paths.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/operatorhub/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nOHUB_GITHUB_VAULT_SECRET=\"secret/ci/elastic-cloud-on-k8s/operatorhub-release-github\" OHUB_REDHAT_VAULT_SECRET=\"secret/ci/elastic-cloud-on-k8s/operatorhub-release-redhat\" VAULT_ADDR='https://vault-server:8200' VAULT_TOKEN=my-token ./bin/operatorhub container publish --enable-vault --dry-run=false\n```\n\n----------------------------------------\n\nTITLE: Example Usage Commands\nDESCRIPTION: Demonstrates how to build and use the reattach-pv tool, including dry-run examples and actual execution commands.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/support/reattach-pv/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# build the binary with a recent Go version\ngo build\n\n# re-create the cluster with the same name\n./reattach-pv --elasticsearch-manifest cluster-A.yml --dry-run\n\n# or re-create the cluster with a new name\n./reattach-pv --elasticsearch-manifest cluster-B.yml --old-elasticsearch-name cluster-A --dry-run\n\n# if everything seems ok, execute one of the 2 previous commands again without the dry-run flag\n```\n\n----------------------------------------\n\nTITLE: Deprovisioning Kubernetes Clusters with Deployer\nDESCRIPTION: Command to delete any provisioned cloud resources and Kubernetes clusters regardless of the provider used.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/deployer/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake delete-cloud\n```\n\n----------------------------------------\n\nTITLE: Running Release Notes Generator in Go\nDESCRIPTION: This command demonstrates how to run the release notes generator tool. It requires a GitHub token with specific permissions and the desired version number as input. The output is typically redirected to an AsciiDoc file.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/release-notes/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_TOKEN=<token> go run main.go <version>\n\nExample:\nGITHUB_TOKEN=xxxyyy go run main.go 1.2.0 > ../../docs/release-notes/1.2.0.asciidoc\n```\n\n----------------------------------------\n\nTITLE: Viewing ECK Operator Helm Chart Settings\nDESCRIPTION: Command to view available configuration settings for customizing the ECK operator installation.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values ./eck-operator\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic Operator via CLI\nDESCRIPTION: Example CLI command to generate YAML deployment files for the elastic operator, including necessary RBAC resources.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0005-configurable-operator.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> ./elastic-operator generate --config=operators.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing ECK Operator with Namespace-Restricted Permissions\nDESCRIPTION: Two-step process for installing the ECK operator with permissions restricted to a single namespace. First installs CRDs globally (requires admin), then installs the operator with limited permissions.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# This step must be done by a cluster administrator to install the CRDs -- which are global resources.\nhelm install elastic-operator-crds ./eck-operator/charts/eck-operator-crds\n\n# This step can be done by any user with full access to the my-namespace namespace.\nhelm install elastic-operator ./eck-operator -n my-namespace --create-namespace \\\n  --set=installCRDs=false \\\n  --set=managedNamespaces='{my-namespace}' \\\n  --set=createClusterScopedResources=false \\\n  --set=webhook.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Debug-Level Structured Logging in Go\nDESCRIPTION: Example of structured logging at debug level using V(1) verbosity modifier with the Info method.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\nlogger.V(1).Info(\"starting reconciliation\", \"pod\", req.NamespacedNamed)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ECK-Stack Chart with Helm\nDESCRIPTION: Command to uninstall the ECK-Stack chart and remove all associated Elastic Stack resources from the 'elastic-stack' namespace.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete my-release -n elastic-stack\n```\n\n----------------------------------------\n\nTITLE: Configuring Unallocatable Shard Setting in Elasticsearch JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure an unallocatable shard setting in Elasticsearch, which would cause the cluster to enter a 'red' state and prevent upgrades under normal circumstances.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/upgrade-predicates.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"settings\": {\n\t\t\"index.routing.allocation.include._id\": \"does not exist\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch User with Labels\nDESCRIPTION: YAML configuration showing how to define an Elasticsearch user with appropriate labels for association tracking. Uses simple key-value label approach for cluster reference.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0003-associations/0003-associations.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: elasticsearch.k8s.elastic.co/v1alpha1\nkind: User\nmetadata:\n  name: foo-bar-kibana\n  namespace: foo\n  labels:\n    # option 1: uses a simple k/v label\n    elasticsearch.k8s.elastic.co/cluster: <cluster id>\nspec:\n  user: foo-bar-kibana\n  password_hash: ...\n  <..roles omitted for brevity..>\n```\n\n----------------------------------------\n\nTITLE: Disabling Upgrade Predicates in Elasticsearch YAML Configuration\nDESCRIPTION: This YAML snippet shows how to add an annotation to the Elasticsearch cluster specification to disable specific upgrade predicates, allowing an upgrade to proceed even when the cluster is in a 'red' state.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/upgrade-predicates.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: elasticsearch.k8s.elastic.co/v1\nkind: Elasticsearch\nmetadata:\n  name: testing\n  annotations:\n    eck.k8s.elastic.co/disable-upgrade-predicates: \"only_restart_healthy_node_if_green_or_yellow\"\n    # Also note that eck.k8s.elastic.co/disable-upgrade-predicates: \"*\" would work as well, but is much less selective.\nspec:\n  version: 7.15.3 # previously set to 7.15.2, for example\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Snapshot Repositories for Elasticsearch Clusters\nDESCRIPTION: This YAML defines a SnapshotRepository custom resource that configures a specific snapshot repository for an individual Elasticsearch cluster. It includes credentials and configuration specific to the cluster identified by labels.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0003-associations/0003-associations.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: elasticsearch.k8s.elastic.co/v1alpha1\nkind: SnapshotRepository\nmetadata:\n  name: foo\n  namespace: <same as cluster>\n  labels:\n      elasticsearch.k8s.elastic.co/cluster: <cluster id>\nspec:\n  credentials:\n    secret: <???>\n  config: JSON\n```\n\n----------------------------------------\n\nTITLE: ServiceTemplate Type Definition\nDESCRIPTION: Defines the template structure for creating Kubernetes Services, including metadata and spec configuration.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:                # standard Kubernetes object metadata\nspec:                    # ServiceSpec configuration\n```\n\n----------------------------------------\n\nTITLE: Defining TransportConfig in YAML\nDESCRIPTION: YAML representation of the TransportConfig type, which holds the transport layer settings for Elasticsearch. It includes fields for service template and TLS options.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/api-docs.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservice: ServiceTemplate\ntls: TransportTLSOptions\n```\n\n----------------------------------------\n\nTITLE: Running ECK Upgrade Test - Go Command\nDESCRIPTION: Basic command to execute the upgrade test harness between two specified ECK releases\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/upgrade-test-harness/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go --from-release=alpha --to-release=upcoming\n```\n\n----------------------------------------\n\nTITLE: Setting Up Minikube Development Cluster\nDESCRIPTION: Command to bootstrap a Minikube cluster for development purposes.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/dev-setup.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake bootstrap-minikube\n```\n\n----------------------------------------\n\nTITLE: Updating Kyverno Using Wget in Bash\nDESCRIPTION: This Bash command downloads the latest Kyverno manifest from the official GitHub repository. Replace '1.7' with the desired version number.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/deployer/runner/kyverno/install/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -O kyverno.yaml https://raw.githubusercontent.com/kyverno/kyverno/release-1.7/config/release/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kind Development Cluster\nDESCRIPTION: Commands to set up a Kind (Kubernetes in Docker) cluster for development.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/dev-setup.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake switch-kind bootstrap-cloud\n```\n\n----------------------------------------\n\nTITLE: Configuring Kyverno Deployment in YAML\nDESCRIPTION: This YAML snippet shows how to enable Kyverno deployment by setting the 'psp' property to true in the cluster configuration.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/deployer/runner/kyverno/install/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: kind-dev\noverrides:\n  clusterName: my-dev-cluster\n  psp: true\n```\n\n----------------------------------------\n\nTITLE: Cloning ECK Repository\nDESCRIPTION: Commands to clone the Elastic Cloud on Kubernetes repository and navigate to the project directory.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/dev-setup.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elastic/cloud-on-k8s.git\ncd cloud-on-k8s\n```\n\n----------------------------------------\n\nTITLE: Markdown ADR Template Structure\nDESCRIPTION: A comprehensive markdown template for documenting architectural decisions with sections for status, context, decision drivers, options, outcomes, and consequences.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/adr-template.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [short title of solved problem and solution]\n\n* Status: [proposed | rejected | accepted | deprecated | … | superseded by [ADR-0005](0005-example.md)] <!-- optional -->\n* Deciders: [list everyone involved in the decision] <!-- optional -->\n* Date: [YYYY-MM-DD when the decision was last updated] <!-- optional -->\n\nTechnical Story: [description | ticket/issue URL] <!-- optional -->\n\n## Context and Problem Statement\n\n[Describe the context and problem statement, for example, in free form using two to three sentences. You may want to articulate the problem in form of a question.]\n\n## Decision Drivers <!-- optional -->\n\n* [driver 1, for example, a force, facing concern, …]\n* [driver 2, for example, a force, facing concern, …]\n* … <!-- numbers of drivers can vary -->\n\n## Considered Options\n\n* [option 1]\n* [option 2]\n* [option 3]\n* … <!-- numbers of options can vary -->\n\n## Decision Outcome\n\nChosen option: \"[option 1]\", because [justification. For example, only option, which meets k.o. criterion decision driver | which resolves force force | … | comes out best].\n\n### Positive Consequences <!-- optional -->\n\n* [For example, improvement of quality attribute satisfaction, follow-up decisions required, …]\n* …\n\n### Negative Consequences <!-- optional -->\n\n* [For example, compromising quality attribute, follow-up decisions required, …]\n* …\n\n## Pros and Cons of the Options <!-- optional -->\n\n### [option 1]\n\n[example | description | pointer to more information | …] <!-- optional -->\n\n* Good, because [argument a]\n* Good, because [argument b]\n* Bad, because [argument c]\n* … <!-- numbers of pros and cons can vary -->\n\n### [option 2]\n\n[example | description | pointer to more information | …] <!-- optional -->\n\n* Good, because [argument a]\n* Good, because [argument b]\n* Bad, because [argument c]\n* … <!-- numbers of pros and cons can vary -->\n\n### [option 3]\n\n[example | description | pointer to more information | …] <!-- optional -->\n\n* Good, because [argument a]\n* Good, because [argument b]\n* Bad, because [argument c]\n* … <!-- numbers of pros and cons can vary -->\n\n## Links <!-- optional -->\n\n* [Link type] [Link to ADR] <!-- example: Refined by [ADR-0005](0005-example.md) -->\n* … <!-- numbers of links can vary -->\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Deployer CLI\nDESCRIPTION: Command to display help information about the Deployer tool when running it directly rather than through the Makefile interface.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/deployer/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./deployer help\n```\n\n----------------------------------------\n\nTITLE: Docker Registry Configuration Example\nDESCRIPTION: Environment variable configuration for using Google Container Registry as the Docker registry.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/dev-setup.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nREGISTRY = eu.gcr.io\nREGISTRY_NAMESPACE = my-gcloud-project\nE2E_REGISTRY_NAMESPACE = my-gcloud-project\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Generate Mode\nDESCRIPTION: Command to show the usage help for the generate mode of the manifest generator script.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/manifest-gen/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./manifest-gen.sh -g --help\n```\n\n----------------------------------------\n\nTITLE: ECK Helm Charts Directory Structure\nDESCRIPTION: Illustration of the hierarchical directory structure for ECK Helm charts. Shows the organization of parent charts (eck-operator and eck-stack) and their respective subcharts.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/helm/release/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n.\n├── eck-operator\n│   └── charts\n│       └── eck-operator-crds\n│\n├── eck-stack\n│   ├── charts\n│   │   ├── eck-agent\n│   │   ├── eck-beats\n│   │   ├── eck-elasticsearch\n│   │   ├── eck-fleet-server\n│   │   └── eck-kibana\n│   │   └── eck-logstash\n```\n\n----------------------------------------\n\nTITLE: Running Container Image Dependency Generation Script\nDESCRIPTION: Command to generate dependency list for container images using the generate-image-deps.sh script. Requires specifying an image tag as an environment variable.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/licence-detector/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nIMAGE_TAG=1.0.1 ./generate-image-deps.sh\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Specific Pattern Match\nDESCRIPTION: Example command for running a specific e2e test using make with pattern matching to test only a specific test case.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake TESTS_MATCH=TestMetricbeatStackMonitoringRecipe clean docker-build docker-push e2e-docker-build e2e-docker-push e2e-run\n```\n\n----------------------------------------\n\nTITLE: Viewing Filebeat Resources in Kubernetes using kubectl commands\nDESCRIPTION: Demonstrates how to view a deployed Filebeat instance using kubectl commands. Shows the basic information about the Beat resource and its associated Kubernetes resources using kubectl get and kubectl tree commands.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/release-notes/github/testdata/issue_body.txt#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get beat filebeat-sample\nNAME              HEALTH   AVAILABLE   EXPECTED   TYPE       VERSION   AGE\nfilebeat-sample   green    3           3          filebeat   7.6.2     2m7s\n\nkubectl tree beat filebeat-sample\nNAMESPACE  NAME                                                             READY  REASON  AGE\ndefault    Beat/filebeat-sample                                             -              19s\ndefault    ├─DaemonSet/filebeat-sample-beat-filebeat                        -              16s\ndefault    │ ├─ControllerRevision/filebeat-sample-beat-filebeat-7f7667d58b  -              16s\ndefault    │ ├─Pod/filebeat-sample-beat-filebeat-pnx85                      True           16s\ndefault    │ ├─Pod/filebeat-sample-beat-filebeat-wmnvb                      True           16s\ndefault    │ └─Pod/filebeat-sample-beat-filebeat-x5rtf                      True           16s\ndefault    ├─Secret/filebeat-sample-beat-es-ca                              -              17s\ndefault    ├─Secret/filebeat-sample-beat-filebeat-config                    -              17s\ndefault    ├─Secret/filebeat-sample-beat-user                               -              17s\ndefault    └─ServiceAccount/elastic-operator-beat-filebeat-sample-d7fb      -              17s\n```\n\n----------------------------------------\n\nTITLE: Incorrect Logging Example in Go\nDESCRIPTION: Example showing poor logging practice using string interpolation instead of structured logging.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\nlog.Printf(\"starting reconciliation for pod %s/%s\", podNamespace, podName)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Dependencies\nDESCRIPTION: Lists all indirect dependencies with their corresponding versions and licenses in a markdown table format.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/third-party-dependencies.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Version | Licence |\n| --- | --- | --- |\n| [cel.dev/expr](https://cel.dev/expr) | v0.18.0 | Apache-2.0 |\n| [github.com/Masterminds/goutils](https://github.com/Masterminds/goutils) | v1.1.1 | Apache-2.0 |\n[...additional rows truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Backport Configuration JSON for Elastic Cloud on K8s\nDESCRIPTION: Example configuration file for the backport tool to generate backport PRs to different version branches.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"upstream\": \"elastic/cloud-on-k8s\",\n  \"targetBranchChoices\": [{ \"name\": \"1.2\", \"checked\": true }, \"1.1\", \"1.0\"],\n  \"targetPRLabels\": [\"backport\"]\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for ECK Documentation\nDESCRIPTION: YAML frontmatter that defines documentation mapping and deployment applicability for the ECK reference documentation.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/reference/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmapped_pages:\n  - https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-reference.html\napplies_to:\n  deployment:\n    eck: all\n```\n\n----------------------------------------\n\nTITLE: Building ECK Documentation Locally\nDESCRIPTION: Command to build and preview the documentation locally using the elastic/docs tooling.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./build_docs --asciidoctor --doc $GOPATH/src/github.com/elastic/cloud-on-k8s/docs/index.asciidoc --chunk 1 --open\n```\n\n----------------------------------------\n\nTITLE: Links to Related Issues in Markdown\nDESCRIPTION: Reference links to related GitHub issues discussing the lightweight process manager and full cluster restart functionality.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0011-process-manager.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [https://github.com/elastic/cloud-on-k8s/issues/485] Lightweight process manager issue\n* [https://github.com/elastic/cloud-on-k8s/issues/454] Full cluster restart issue\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Help Command Output\nDESCRIPTION: Shows the command-line interface help output, including available flags and their descriptions for the reattach-pv tool.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/support/reattach-pv/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRecreate an Elasticsearch cluster by reattaching existing released PersistentVolumes\n\nUsage:\n  reattach-pv [flags]\n\nFlags:\n      --dry-run                         do not apply any Kubernetes resource change\n      --elasticsearch-manifest string   path pointing to the Elasticsearch yaml manifest\n  -h, --help                            help for reattach-pv\n      --old-elasticsearch-name string   name of previous Elasticsearch cluster (to use volumes)\n```\n\n----------------------------------------\n\nTITLE: Diagram of License Controller Architecture with ASCII Art\nDESCRIPTION: ASCII art diagram illustrating the architecture of the license checking system. It shows the relationship between the license controller in the elastic-system namespace and a controller in another namespace, along with the flow of controller licenses and public keys.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0010-license-checks.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+--------------------------------+   +----------------------------------+\n|                                |   |                                  |\n|  elastic-system                |   |       foo-system                 |\n|                                |   |                                  |\n|                                |   |                                  |\n|                                |   |                                  |\n|             +------------+     |   |        +-------------+           |\n|             |            |     |   |        |             |           |\n|             |  license   |     |   |        |    foo      |           |\n|             |  ctrl      |     |   |        |    ctrl     |           |\n|             |            |     |   |        |             |           |\n|             +-+-----+--+-+     |   |        ++-----------++           |\n|               ^     |  |       |   |         ^           ^            |\n|               |     |  |       |   |         |           |            |\n|               |     |  |       |   |         |           |            |\n|   +-----------+-+   |  |       |   |   +-----+------+  +-+---------+  |\n|   |             |   |  |       |   |   |            |  |           |  |\n|   |  Enterprise |   |  |       |   |   | Controller |  |  PubKey   |  |\n|   |  License    |   |  +-------------->+ License    |  |           |  |\n|   |             |   |  creates |   |   |            |  |           |  |\n|   +-------------+   |          |   |   +------------+  +------+----+  |\n|                     |          |   |                          ^       |\n|                     |          |   |                          |       |\n|                     |          |   |   creates                |       |\n|                     +-----------------------------------------+       |\n|                                |   |                                  |\n+--------------------------------+   +----------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Viewing Heartbeat Resources in Kubernetes using kubectl commands\nDESCRIPTION: Demonstrates how to view a deployed Heartbeat instance using kubectl commands. Shows the basic information about the Heartbeat resource and its associated Kubernetes resources using kubectl get and kubectl tree commands.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/release-notes/github/testdata/issue_body.txt#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get beat heartbeat-sample\nNAME               HEALTH   AVAILABLE   EXPECTED   TYPE        VERSION   AGE\nheartbeat-sample   green    1           1          heartbeat   7.6.2     10h\n\nkubectl tree beat heartbeat-sample\nNAMESPACE  NAME                                                          READY  REASON  AGE\ndefault    Beat/heartbeat-sample                                         -              10h\ndefault    ├─Deployment/heartbeat-sample-beat-otherbeat                  -              10h\ndefault    │ └─ReplicaSet/heartbeat-sample-beat-otherbeat-c8645b56       -              10h\ndefault    │   └─Pod/heartbeat-sample-beat-otherbeat-c8645b56-cr4f8      True           10h\ndefault    ├─Secret/heartbeat-sample-beat-es-ca                          -              10h\ndefault    ├─Secret/heartbeat-sample-beat-otherbeat-config               -              10h\ndefault    ├─Secret/heartbeat-sample-beat-user                           -              10h\ndefault    └─ServiceAccount/elastic-operator-beat-heartbeat-sample-8d7e  -              10h\n```\n\n----------------------------------------\n\nTITLE: Displaying Artifact HUB Badge in Markdown\nDESCRIPTION: This snippet shows how to embed an Artifact HUB badge in a Markdown file. It uses an img.shields.io endpoint to dynamically generate the badge based on the Elastic repository status.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-operator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Artifact HUB](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/elastic)](https://artifacthub.io/packages/helm/elastic/eck-operator)\n```\n\n----------------------------------------\n\nTITLE: Kubectl Plugin Commands for Elasticsearch Volume Management\nDESCRIPTION: Example kubectl plugin commands for managing Elasticsearch volumes, including data migration and deletion operations.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/docs/design/0008-volume-management.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl elastic migrate elasticsearch-sample-es-qlvprlqnnk -n default # will migrate the data then delete the pod and the pvc\n$ kubectl elastic delete elasticsearch-sample-es-qlvprlqnnk -n default # will delete the pod **and** the pvc\n```\n\n----------------------------------------\n\nTITLE: Checking Logstash Pod Status in Kubernetes\nDESCRIPTION: Command to list all Logstash pods in a specified namespace, filtered by the Logstash name label. Uses template variables for dynamic namespace and name resolution.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/deploy/eck-stack/charts/eck-logstash/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace={{ .Release.Namespace }} -l logstash.k8s.elastic.co/name={{ include \"logstash.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Elastic License 2.0 Copyright Header\nDESCRIPTION: Standard copyright header declaring Elasticsearch B.V. ownership and Elastic License 2.0 terms for the codebase.\nSOURCE: https://github.com/elastic/cloud-on-k8s/blob/main/hack/boilerplate.go.txt#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n// or more contributor license agreements. Licensed under the Elastic License 2.0;\n// you may not use this file except in compliance with the Elastic License 2.0.\n```"
  }
]