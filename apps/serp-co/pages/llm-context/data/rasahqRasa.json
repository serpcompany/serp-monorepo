[
  {
    "owner": "rasahq",
    "repo": "rasa",
    "content": "TITLE: Defining Multi-purpose Training Data in YAML for Rasa\nDESCRIPTION: Example showing a single YAML file that contains NLU training data with intents and entities, stories for conversation flows, and rules for simple dialog patterns. The file uses version 3.1 of the Rasa training data format.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.1\"\n\nnlu:\n- intent: greet\n  examples: |\n    - Hey\n    - Hi\n    - hey there [Sara](name)\n\n- intent: faq/language\n  examples: |\n    - What language do you speak?\n    - Do you only handle english?\n\nstories:\n- story: greet and faq\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: faq\n  - action: utter_faq\n\nrules:\n- rule: Greet user\n  steps:\n  - intent: greet\n  - action: utter_greet\n\n```\n\n----------------------------------------\n\nTITLE: Configuration Parameters Table for Rasa Intent Classifier\nDESCRIPTION: Detailed table showing all available configuration parameters for Rasa's intent classification model, including their default values and descriptions. Parameters cover model architecture, training process, regularization, evaluation settings, and core functionality options.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_38\n\nLANGUAGE: plaintext\nCODE:\n```\n+---------------------------------+------------------+--------------------------------------------------------------+\n| max_relative_position           | None             | Maximum position for relative embeddings.                    |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| unidirectional_encoder          | False            | Use a unidirectional or bidirectional encoder.               |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| batch_size                      | [64, 256]        | Initial and final value for batch sizes.                     |\n|                                 |                  | Batch size will be linearly increased for each epoch.        |\n|                                 |                  | If constant `batch_size` is required, pass an int, e.g. `8`. |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| batch_strategy                  | \"balanced\"       | Strategy used when creating batches.                         |\n|                                 |                  | Can be either 'sequence' or 'balanced'.                      |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| epochs                          | 300              | Number of epochs to train.                                   |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| random_seed                     | None             | Set random seed to any 'int' to get reproducible results.    |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| learning_rate                   | 0.001            | Initial learning rate for the optimizer.                     |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| embedding_dimension             | 20               | Dimension size of embedding vectors.                         |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| dense_dimension                 | text: 128        | Dense dimension for sparse features to use if no dense       |\n|                                 | label: 20        | features are present.                                        |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| concat_dimension                | text: 128        | Concat dimension for sequence and sentence features.         |\n|                                 | label: 20        |                                                              |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| number_of_negative_examples     | 20               | The number of incorrect labels. The algorithm will minimize  |\n|                                 |                  | their similarity to the user input during training.          |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| similarity_type                 | \"auto\"           | Type of similarity measure to use, either 'auto' or 'cosine' |\n|                                 |                  | or 'inner'.                                                  |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| loss_type                       | \"cross_entropy\"  | The type of the loss function, either 'cross_entropy'        |\n|                                 |                  | or 'margin'. Type 'margin' is only compatible with           |\n|                                 |                  | \"model_confidence=cosine\",                                   |\n|                                 |                  | which is deprecated (see changelog for 2.3.4).               |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| ranking_length                  | 10               | Number of top intents  to report. Set to 0 to report all     |\n|                                 |                  | intents.                                                     |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| renormalize_confidences         | False            | Normalize the reported top intents. Applicable only with loss|\n|                                 |                  | type 'cross_entropy' and 'softmax' confidences.              |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| maximum_positive_similarity     | 0.8              | Indicates how similar the algorithm should try to make       |\n|                                 |                  | embedding vectors for correct labels.                        |\n|                                 |                  | Should be 0.0 < ... < 1.0 for 'cosine' similarity type.      |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| maximum_negative_similarity     | -0.4             | Maximum negative similarity for incorrect labels.            |\n|                                 |                  | Should be -1.0 < ... < 1.0 for 'cosine' similarity type.     |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| use_maximum_negative_similarity | True             | If 'True' the algorithm only minimizes maximum similarity    |\n|                                 |                  | over incorrect intent labels, used only if 'loss_type' is    |\n|                                 |                  | set to 'margin'.                                             |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| scale_loss                      | False            | Scale loss inverse proportionally to confidence of correct   |\n|                                 |                  | prediction.                                                  |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| regularization_constant         | 0.002            | The scale of regularization.                                 |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| negative_margin_scale           | 0.8              | The scale of how important it is to minimize the maximum     |\n|                                 |                  | similarity between embeddings of different labels.           |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| connection_density              | 0.2              | Connection density of the weights in dense layers.           |\n|                                 |                  | Value should be between 0 and 1.                             |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| drop_rate                       | 0.2              | Dropout rate for encoder. Value should be between 0 and 1.   |\n|                                 |                  | The higher the value the higher the regularization effect.   |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| drop_rate_attention             | 0.0              | Dropout rate for attention. Value should be between 0 and 1. |\n|                                 |                  | The higher the value the higher the regularization effect.   |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| use_sparse_input_dropout        | True             | If 'True' apply dropout to sparse input tensors.             |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| use_dense_input_dropout         | True             | If 'True' apply dropout to dense input tensors.              |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| evaluate_every_number_of_epochs | 20               | How often to calculate validation accuracy.                  |\n|                                 |                  | Set to '-1' to evaluate just once at the end of training.    |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| evaluate_on_number_of_examples  | 0                | How many examples to use for hold out validation set.        |\n|                                 |                  | Large values may hurt performance, e.g. model accuracy.      |\n+---------------------------------+------------------+--------------------------------------------------------------+\n| intent_classification           | True             | If 'True' intent classification is trained and intents are   |\n|                                 |                  | predicted.                                                   |\n\n```\n\n----------------------------------------\n\nTITLE: Example Rasa NLU Pipeline Configuration\nDESCRIPTION: A pipeline configuration showing the sequence of components that process incoming messages. Each component performs a specific function in the NLU process and may depend on output from previous components.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npipeline:\n  - name: WhitespaceTokenizer\n  - name: RegexFeaturizer\n  - name: LexicalSyntacticFeaturizer\n  - name: CountVectorsFeaturizer\n  - name: CountVectorsFeaturizer\n    analyzer: \"char_wb\"\n    min_ngram: 1\n    max_ngram: 4\n  - name: DIETClassifier\n  - name: EntitySynonymMapper\n  - name: ResponseSelector\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Custom Rasa Action Server\nDESCRIPTION: This Dockerfile extends the official Rasa SDK image to create a custom Action Server with your specific actions code. It includes commented sections for adding custom dependencies if needed and follows security best practices.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Extend the official Rasa SDK image\nFROM rasa/rasa-sdk:${variables.rasa_sdk_version}\n\n# Use subdirectory as working directory\nWORKDIR /app\n\n# Copy any additional custom requirements, if necessary (uncomment next line)\n# COPY actions/requirements-actions.txt ./\n\n# Change back to root user to install dependencies\nUSER root\n\n# Install extra requirements for actions code, if necessary (uncomment next line)\n# RUN pip install -r requirements-actions.txt\n\n# Copy actions folder to working directory\nCOPY ./actions /app/actions\n\n# By best practices, don't run the code with root user\nUSER 1001\n```\n\n----------------------------------------\n\nTITLE: Response Format for Custom Actions in Rasa\nDESCRIPTION: When the action server completes executing a custom action, it should respond with a JSON object containing lists of events and responses to be processed by the Rasa dialogue engine.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\": [{}],\n  \"responses\": [{}]\n}\n```\n\n----------------------------------------\n\nTITLE: Long Story Example for Lost Credit Card Flow\nDESCRIPTION: A complete story demonstrating the handling of a lost credit card scenario including transaction review and card replacement.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: Customer loses a credit card, reviews transactions, and gets a new card\n  steps:\n  - intent: card_lost\n  - action: check_transactions\n  - slot_was_set:\n    - reviewed_transactions: [\"starbucks\"]\n  - action: utter_ask_fraudulent_transactions\n  - intent: inform\n  - action: action_update_transactions\n  - intent: affirm\n  - action: utter_confirm_transaction_dispute\n  - action: utter_replace_card\n  - action: mailing_address_form\n  - active_loop: mailing_address\n  - active_loop: null\n  - action: utter_sent_replacement\n  - action: utter_anything_else\n  - intent: affirm\n  - action: utter_help\n```\n\n----------------------------------------\n\nTITLE: Implementing a Restaurant Checking Action in Python for Rasa\nDESCRIPTION: This example shows a more complex custom action that queries a database for restaurants based on cuisine. It demonstrates how to use the tracker to get slot values and how to return events to set new slot values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Text, Dict, Any, List\nfrom rasa_sdk import Action\nfrom rasa_sdk.events import SlotSet\n\nclass ActionCheckRestaurants(Action):\n   def name(self) -> Text:\n      return \"action_check_restaurants\"\n\n   def run(\n           self,\n           dispatcher: CollectingDispatcher,\n           tracker: Tracker,\n           domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n\n      cuisine = tracker.get_slot('cuisine')\n      q = \"select * from restaurants where cuisine='{0}' limit 1\".format(cuisine)\n      result = db.query(q)\n\n      return [SlotSet(\"matches\", result if result is not None else [])]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom NLU Component in Rasa\nDESCRIPTION: Skeleton code for creating a custom NLU component by implementing the GraphComponent interface and necessary methods.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Any, Dict, List, Text, Type\n\nfrom rasa.engine.graph import GraphComponent, ExecutionContext\nfrom rasa.engine.recipes.default_recipe import DefaultV1Recipe\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.engine.storage.storage import ModelStorage\nfrom rasa.shared.nlu.training_data.message import Message\nfrom rasa.shared.nlu.training_data.training_data import TrainingData\n\n# TODO: Correctly register your graph component\n@DefaultV1Recipe.register(\n    [DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER], is_trainable=True\n)\nclass MyComponent(GraphComponent):\n    @classmethod\n    def required_components(cls) -> List[Type]:\n        \"\"\"Components that should be included in the pipeline before this component.\"\"\"\n        return []\n\n    @staticmethod\n    def required_packages() -> List[Text]:\n        \"\"\"Any extra python dependencies required for this component to run.\"\"\"\n        return []\n\n    @staticmethod\n    def get_default_config() -> Dict[Text, Any]:\n        return {}\n\n    def __init__(self, config: Dict[Text, Any]) -> None:\n        self.config = config\n\n    @classmethod\n    def create(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n    ) -> MyComponent:\n        return cls(config)\n\n    def train(self, training_data: TrainingData) -> Resource:\n        ...\n\n    def process(self, messages: List[Message]) -> List[Message]:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Installing Rasa Open Source with All Dependencies\nDESCRIPTION: Installs Rasa Open Source with all optional dependencies for full functionality.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip3 install 'rasa[full]'\n```\n\n----------------------------------------\n\nTITLE: Custom NLU Component with Model Provider in Rasa 3.0 (Python)\nDESCRIPTION: Extends GraphComponent and IntentClassifier, allowing for the integration of a Spacy model. The train and process methods receive the model from the register decorator. Dependencies include Rasa's storage, graph, and training mechanisms.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@DefaultV1Recipe.register(\n    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=True, model_from=\"SpacyNLP\"\n)\nclass MyNLUComponent(GraphComponent, IntentClassifier):\n    def train(\n        self, training_data: TrainingData, model: SpacyModel) -> Resource:\n        spacy_nlp = model.model\n        ...\n\n    def process(self, messages: List[Message], model: SpacyModel) -> List[Message]:\n        spacy_nlp = model.model\n        ...\n```\n\n----------------------------------------\n\nTITLE: Instantiating a NLU Component for Training - Rasa 3.0\nDESCRIPTION: This snippet describes the changes required for instantiating NLU components for training in Rasa 3.0. Components must now implement the 'create' method, overriding the previous constructor-based instantiation method.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict, Text, Any\n\nfrom rasa.engine.graph import GraphComponent, ExecutionContext\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.engine.storage.storage import ModelStorage\nfrom rasa.nlu.classifiers.classifier import IntentClassifier\n\nclass MyNLUComponent(GraphComponent, IntentClassifier):\n    \n    def __init__(self, component_config: Dict[Text, Any]) -> None:\n        self.component_config = component_config\n      ...\n\n    @classmethod\n    def create(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n    ) -> GraphComponent:\n        return cls(config)\n\n```\n\n----------------------------------------\n\nTITLE: Defining channel-specific responses in Rasa domain file\nDESCRIPTION: Example of how to create channel-specific response variations in the domain.yml file. This shows how to define different responses for the default channel and the custom 'myio' channel.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/custom-connectors.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  utter_greet:\n    - text: Hi! I'm the default greeting.\n    - text: Hi! I'm the custom channel greeting\n      channel: myio\n```\n\n----------------------------------------\n\nTITLE: Dynamic Form Behavior with FormValidationAction in Rasa\nDESCRIPTION: This code demonstrates how to dynamically update the required slots of a form using the `FormValidationAction` in Rasa. It overrides the `required_slots` method to add the `shade_or_sun` slot if the user wants to sit outside. The `domain_slots` argument contains the list of required slots defined in the domain file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Text, List, Optional\n\nfrom rasa_sdk.forms import FormValidationAction\n\nclass ValidateRestaurantForm(FormValidationAction):\n    def name(self) -> Text:\n        return \"validate_restaurant_form\"\n\n    async def required_slots(\n        self,\n        domain_slots: List[Text],\n        dispatcher: \"CollectingDispatcher\",\n        tracker: \"Tracker\",\n        domain: \"DomainDict\",\n    ) -> List[Text]:\n        additional_slots = [\"outdoor_seating\"]\n        if tracker.slots.get(\"outdoor_seating\") is True:\n            # If the user wants to sit outside, ask\n            # if they want to sit in the shade or in the sun.\n            additional_slots.append(\"shade_or_sun\")\n\n        return additional_slots + domain_slots\n```\n\n----------------------------------------\n\nTITLE: Configuring Spaces in Rasa config.yml\nDESCRIPTION: Example configuration for implementing Spaces in a Rasa assistant. It defines multiple spaces (main, transfer_money, investment, pay_cc), specifies required importers, and configures space-aware NLU components.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/spaces.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://rasa.com/docs/rasa/model-configuration/\nrecipe: default.v1\n\n# Configuration for Rasa NLU.\n# https://rasa.com/docs/rasa/nlu/components/\nlanguage: en\n\nspaces:\n  - name: main\n    domain: main/domain.yml\n    nlu: main/nlu/training_data.yml\n    nlu_test: main/nlu/test_data.yml\n    rules: main/rules.yml\n  - name: transfer_money\n    domain: transfer_money/domain.yml\n    nlu: transfer_money/nlu/training_data.yml\n    nlu_test: transfer_money/nlu/test_data.yml\n    rules: transfer_money/rules.yml\n    entry_intents:\n      - transfer_money\n  - name: investment\n    domain: investment/domain.yml\n    nlu: investment/nlu/training_data.yml\n    nlu_test: investment/nlu/test_data.yml\n    rules: investment/rules.yml\n    entry_intents:\n      - buy_stock\n  - name: pay_cc\n    domain: pay_cc/domain.yml\n    nlu: pay_cc/nlu/training_data.yml\n    nlu_test: pay_cc/nlu/test_data.yml\n    rules: pay_cc/rules.yml\n    entry_intents:\n      - pay_cc\n\nimporters:\n  - name: \"rasa_plus.spaces.space_data_importer.SpaceDataImporter\"\n    temporary_working_directory: spaces\n\npipeline:\n  - name: WhitespaceTokenizer\n  - name: RegexFeaturizer\n  - name: LexicalSyntacticFeaturizer\n  - name: CountVectorsFeaturizer\n  - name: CountVectorsFeaturizer\n    analyzer: char_wb\n    min_ngram: 1\n    max_ngram: 4\n  - name: rasa_plus.spaces.components.spaces_crf_entity_extractor.SpacesCRFEntityExtractor\n  - name: EntitySynonymMapper\n  - name: DIETClassifier\n    epochs: 100\n    ranking_length: 0\n    entity_recognition: false\n    BILOU_flag: false\n  - name: rasa_plus.spaces.components.filter_and_rerank.FilterAndRerank\n  - name: FallbackClassifier\n    threshold: 0.3\n    ambiguity_threshold: 0.1\n\npolicies:\n  - name: RulePolicy\n```\n\n----------------------------------------\n\nTITLE: Creating a Two-Stage Fallback Rule in Rasa\nDESCRIPTION: This rule activates the Two-Stage Fallback process when a message is received with low classification confidence.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n- rule: Implementation of the Two-Stage-Fallback\n  steps:\n  - intent: nlu_fallback\n  - action: action_two_stage_fallback\n  - active_loop: action_two_stage_fallback\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Policy for Forms in Rasa\nDESCRIPTION: A basic configuration example showing how to add the Rule Policy to your policy configuration, which is required to use forms in Rasa.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n- name: RulePolicy\n```\n\n----------------------------------------\n\nTITLE: Adding ResponseSelector to NLU Pipeline in Rasa\nDESCRIPTION: Configuration snippet showing how to include the ResponseSelector in the NLU pipeline along with required featurizers and classifiers in config.yml.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/chitchat-faqs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n  - name: WhitespaceTokenizer\n  - name: RegexFeaturizer\n  - name: LexicalSyntacticFeaturizer\n  - name: CountVectorsFeaturizer\n  - name: CountVectorsFeaturizer\n    analyzer: char_wb\n    min_ngram: 1\n    max_ngram: 4\n  - name: DIETClassifier\n    epochs: 100\n  - name: EntitySynonymMapper\n  - name: ResponseSelector\n    epochs: 100\n```\n\n----------------------------------------\n\nTITLE: Implementing the 'name' method for a custom Rasa channel connector\nDESCRIPTION: Example of creating a custom channel class 'MyIO' that implements the required 'name' method. This method defines the URL prefix for the connector's webhook and the channel name used in response variations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/custom-connectors.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.core.channels.channel import InputChannel\n\nclass MyIO(InputChannel):\n    def name() -> Text:\n        \"\"\"Name of your custom channel.\"\"\"\n        return \"myio\"\n```\n\n----------------------------------------\n\nTITLE: Creating Stories for Contextual Responses in Rasa\nDESCRIPTION: This snippet demonstrates how to create stories in Rasa to handle different conversation paths based on the user's music preference. It includes two stories: one for users who like music and another for those who don't.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/contextual-conversations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n  - story: User likes music\n    steps:\n    - intent: how_to_get_started\n    - action: utter_get_started\n    - intent: affirm\n    - action: action_set_music_preference\n    - slot_was_set:\n      - likes_music: True\n    - action: utter_awesome\n\n  - story: User doesn't like music\n    steps:\n    - intent: how_to_get_started\n    - action: utter_get_started\n    - intent: deny\n    - action: action_set_music_preference\n    - slot_was_set:\n      - likes_music: False\n    - action: utter_goodbye\n```\n\n----------------------------------------\n\nTITLE: Configuring DucklingEntityExtractor in Rasa Pipeline\nDESCRIPTION: Example configuration for the DucklingEntityExtractor component in Rasa pipeline. It specifies the URL of the Duckling server, dimensions to extract, locale, timezone, and timeout settings.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"DucklingEntityExtractor\"\n  # url of the running duckling server\n  url: \"http://localhost:8000\"\n  # dimensions to extract\n  dimensions: [\"time\", \"number\", \"amount-of-money\", \"distance\"]\n  # allows you to configure the locale, by default the language is\n  # used\n  locale: \"de_DE\"\n  # if not set the default timezone of Duckling is going to be used\n  # needed to calculate dates from relative expressions like \"tomorrow\"\n  timezone: \"Europe/Berlin\"\n  # Timeout for receiving response from http url of the running duckling server\n  # if not set the default timeout of duckling http url is set to 3 seconds.\n  timeout : 3\n```\n\n----------------------------------------\n\nTITLE: Sparse Message Featurizer\nDESCRIPTION: This is a placeholder for a sparse message featurizer example implemented in Python. The featurizer trains a new model to generate sparse feature vectors for each token in the input message. The actual implementation can be found at `docs/sources/data/test_classes/custom_graph_components/nlu_sparse.py`.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python (docs/sources/data/test_classes/custom_graph_components/nlu_sparse.py)\n```\n```\n\n----------------------------------------\n\nTITLE: Complete End-to-End Story Example in Rasa\nDESCRIPTION: A comprehensive example showing a mixed end-to-end story with intents, actions, user messages, and bot responses.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_25\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: full end-to-end story\n  steps:\n  - intent: greet\n    entities:\n    - name: Ivan\n  - bot: Hello, a person with a name!\n  - intent: search_restaurant\n  - action: utter_suggest_cuisine\n  - user: I can always go for [sushi](cuisine)\n  - bot: Personally, I prefer pizza, but sure let's search sushi restaurants\n  - action: utter_suggest_cuisine\n  - user: Have a beautiful day!\n  - action: utter_goodbye\n```\n\n----------------------------------------\n\nTITLE: Defining Form Submission Behavior in Rasa\nDESCRIPTION: Rule defining what happens when a form is submitted after all required slots are filled. It includes deactivating the form and running follow-up actions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n- rule: Submit form\n  condition:\n  # Condition that form is active.\n  - active_loop: restaurant_form\n  steps:\n  # Form is deactivated\n  - action: restaurant_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  # The actions we want to run when the form is submitted.\n  - action: utter_submit\n  - action: utter_slots_values\n```\n\n----------------------------------------\n\nTITLE: Basic Story Format in Rasa YAML\nDESCRIPTION: Example of a basic conversation flow in Rasa story format, showing how user inputs are represented as intents with entities and bot responses as actions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: collect restaurant booking info  # name of the story - just for debugging\n  steps:\n  - intent: greet                         # user message with no entities\n  - action: utter_ask_howcanhelp\n  - intent: inform                        # user message with entities\n    entities:\n    - location: \"rome\"\n    - price: \"cheap\"\n  - action: utter_on_it                  # action that the bot should execute\n  - action: utter_ask_cuisine\n  - intent: inform\n    entities:\n    - cuisine: \"spanish\"\n  - action: utter_ask_num_people\n```\n\n----------------------------------------\n\nTITLE: Custom Form Validation in Python for Rasa\nDESCRIPTION: Python implementation of a custom form validation action that extends FormValidationAction to validate the cuisine slot against a database of supported cuisines.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Text, List, Any, Dict\n\nfrom rasa_sdk import Tracker, FormValidationAction\nfrom rasa_sdk.executor import CollectingDispatcher\nfrom rasa_sdk.types import DomainDict\n\n\nclass ValidateRestaurantForm(FormValidationAction):\n    def name(self) -> Text:\n        return \"validate_restaurant_form\"\n\n    @staticmethod\n    def cuisine_db() -> List[Text]:\n        \"\"\"Database of supported cuisines\"\"\"\n\n        return [\"caribbean\", \"chinese\", \"french\"]\n\n    def validate_cuisine(\n        self,\n        slot_value: Any,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: DomainDict,\n    ) -> Dict[Text, Any]:\n        \"\"\"Validate cuisine value.\"\"\"\n\n        if slot_value.lower() in self.cuisine_db():\n            # validation succeeded, set the value of the \"cuisine\" slot to value\n            return {\"cuisine\": slot_value}\n        else:\n            # validation failed, set this slot to None so that the\n            # user will be asked for the slot again\n            return {\"cuisine\": None}\n```\n\n----------------------------------------\n\nTITLE: Registering Graph Components with Rasa Model Configuration\nDESCRIPTION: This snippet demonstrates how to register a custom graph component with Rasa's DefaultV1Recipe using the register decorator. This registration is necessary to make the component available for use in Rasa's configuration system.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Basic Rasa Configuration with Suggested Config Feature\nDESCRIPTION: Example configuration file demonstrating the Suggested Config feature, where pipeline and policies are omitted and will be automatically populated during training. It specifies only the language and recipe.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-configuration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrecipe: default.v1\nassistant_id: example_assistant\nlanguage: en\n\n```\n\n----------------------------------------\n\nTITLE: Defining End-to-End Test Cases for Rasa Chatbots\nDESCRIPTION: This YAML snippet demonstrates how to write end-to-end test cases for Rasa chatbots. It includes fixtures for setting up test contexts and multiple test cases with various steps to validate bot responses and slot settings.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nfixtures:\n - premium:  # name of the fixture must be provided and be unique\n   - membership_type: premium  # every fixture can contain multiple slot key-value pairs\n   - logged_in: True\n - standard:\n   - logged_in: True\n   - membership_type: standard\n\ntest_cases:\n - test_case: \"test_premium_booking\"\n   fixtures:\n    - premium  # re-use the name of the fixture provided in fixtures section\n   steps:\n    - user: \"Hi!\"\n    - bot: \"Welcome back! How can I help you?\"\n    - user: \"I want to book a trip.\"\n    - utter: utter_ask_location\n    - user: \"I would like to travel to Lisbon.\"\n    - slot_was_set:\n      - location: \"Lisbon\"\n    - utter: utter_ask_date\n    - user: \"I would like to travel on 22nd of June.\"\n    - slot_was_set:\n      - travel_date: \"2023-06-22\"\n    - bot: \"Great! I will book your trip to Lisbon on 22nd of June.\"\n    - bot: \"You saved 20% by being a premium member.\"\n\n - test_case: \"test_anonymous_booking\"\n   steps:\n    - user: \"Hi!\"\n    - bot: \"Hey! How can I help you?\"\n    - user: \"I want to book a trip.\"\n    - utter: utter_ask_location\n    - user: \"I would like to travel to Paris.\"\n    - slot_was_set:\n      - location: \"Paris\"\n    - utter: utter_ask_date\n    - user: \"I would like to travel on 2nd of April.\"\n    - slot_was_set:\n      - travel_date: \"2023-04-02\"\n    - bot: \"Great! I will book your trip to Paris on 2nd of April.\"\n    - bot: \"You can also choose to save 20% by becoming a premium member.\"\n```\n\n----------------------------------------\n\nTITLE: Migrated FallbackPolicy Configuration in Rasa 2.0\nDESCRIPTION: The updated configuration for Rasa 2.0 that replaces the legacy FallbackPolicy with FallbackClassifier in the pipeline and RulePolicy in policies.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nrecipe: default.v1\npipeline:\n  # Other components\n  - name: FallbackClassifier\n    threshold: 0.4\n    ambiguity_threshold: 0.1\n\npolicies:\n  # Other policies\n  - name: RulePolicy\n    core_fallback_threshold: 0.3\n    core_fallback_action_name: \"action_default_fallback\"\n```\n\n----------------------------------------\n\nTITLE: Configuring FallbackClassifier in Rasa\nDESCRIPTION: This configuration adds the FallbackClassifier to the NLU pipeline with a confidence threshold of 0.7 to handle low-confidence predictions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npipeline:\n# other components\n- name: FallbackClassifier\n  threshold: 0.7\n```\n\n----------------------------------------\n\nTITLE: Configuring endpoints.yml for tracker store and Kafka\nDESCRIPTION: This YAML configuration file defines the tracker store settings for connecting to a PostgreSQL database and the event broker settings for connecting to a Kafka cluster. It specifies the database dialect, URL, database name, username, password, Kafka topic, URL, and partition settings.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/getting-started-with-analytics.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml-rasa\nCODE:\n```\n\"  tracker_store:\\n      type: SQL\\n      dialect: \\\"postgresql\\\"\\n      url: \\\"localhost\\\"\\n      db: \\\"tracker\\\"\\n      username: postgres\\n      password: password\\n\\n  event_broker:\\n      type: kafka\\n      topic: rasa-events\\n      url: localhost:29092\\n      partition_by_sender: true\"\n```\n\n----------------------------------------\n\nTITLE: Complex from_entity Mappings for a Form in Rasa YAML\nDESCRIPTION: Example configuration showing unique entity mappings in the context of a form. This example demonstrates how to properly configure slots for a travel booking form with departure_city, arrival_city, and arrival_date.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_19\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  departure_city:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: city\n      role: from\n    - type: from_entity\n      entity: city\n  arrival_city:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: city\n      role: to\n    - type: from_entity\n      entity: city\n  arrival_date:\n    type: any\n    mappings:\n    - type: from_entity\n      entity: date\nforms:\n  your_form:\n    required_slots:\n    - departure_city\n    - arrival_city\n    - arrival_date\n```\n\n----------------------------------------\n\nTITLE: Recommended spaCy Pipeline Configuration\nDESCRIPTION: Default pipeline configuration for languages supported by spaCy. This pipeline uses the SpacyFeaturizer which provides pre-trained word embeddings to help with language understanding.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nlanguage: en\n\npipeline:\n  - name: SpacyNLP\n  - name: SpacyTokenizer\n  - name: SpacyFeaturizer\n  - name: RegexFeaturizer\n  - name: LexicalSyntacticFeaturizer\n  - name: CountVectorsFeaturizer\n  - name: CountVectorsFeaturizer\n    analyzer: \"char_wb\"\n    min_ngram: 1\n    max_ngram: 4\n  - name: DIETClassifier\n  - name: EntitySynonymMapper\n  - name: ResponseSelector\n```\n\n----------------------------------------\n\nTITLE: Implementing a complete custom channel connector for Rasa\nDESCRIPTION: Full implementation of a custom channel connector that inherits from InputChannel. This example shows how to implement the 'blueprint' method that creates routes for health checks and receiving messages, using CollectingOutputChannel for responses.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/custom-connectors.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport inspect\nfrom sanic import Sanic, Blueprint, response\nfrom sanic.request import Request\nfrom sanic.response import HTTPResponse\nfrom typing import Text, Dict, Any, Optional, Callable, Awaitable, NoReturn\n\nimport rasa.utils.endpoints\nfrom rasa.core.channels.channel import (\n    InputChannel,\n    CollectingOutputChannel,\n    UserMessage,\n)\n\nclass MyIO(InputChannel):\n    def name() -> Text:\n        \"\"\"Name of your custom channel.\"\"\"\n        return \"myio\"\n\n    def blueprint(\n        self, on_new_message: Callable[[UserMessage], Awaitable[None]]\n    ) -> Blueprint:\n\n        custom_webhook = Blueprint(\n            \"custom_webhook_{}\".format(type(self).__name__),\n            inspect.getmodule(self).__name__,\n        )\n\n        @custom_webhook.route(\"/\", methods=[\"GET\"])\n        async def health(request: Request) -> HTTPResponse:\n            return response.json({\"status\": \"ok\"})\n\n        @custom_webhook.route(\"/webhook\", methods=[\"POST\"])\n        async def receive(request: Request) -> HTTPResponse:\n            sender_id = request.json.get(\"sender\") # method to get sender_id \n            text = request.json.get(\"text\") # method to fetch text\n            input_channel = self.name() # method to fetch input channel\n            metadata = self.get_metadata(request) # method to get metadata\n\n            collector = CollectingOutputChannel()\n            \n            # include exception handling\n\n            await on_new_message(\n                UserMessage(\n                    text,\n                    collector,\n                    sender_id,\n                    input_channel=input_channel,\n                    metadata=metadata,\n                )\n            )\n\n            return response.json(collector.messages)\n\n        return custom_webhook\n```\n\n----------------------------------------\n\nTITLE: Defining Form Filling Intents in NLU Data\nDESCRIPTION: This code defines the intents needed for filling form slots, including affirm/deny for yes/no questions and a general inform intent for providing entity values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- intent: affirm\n  examples: |\n    - Yes\n    - yes, please\n    - yup\n- intent: deny\n  examples: |\n    - no don't\n    - no\n    - no I don't want that\n\n- intent: inform\n  examples: |\n    - [afghan](cuisine) food\n    - how bout [asian oriental](cuisine)\n    - what about [indian](cuisine) food\n    - uh how about [turkish](cuisine) type of food\n    - um [english](cuisine)\n    - im looking for [tuscan](cuisine) food\n    - id like [moroccan](cuisine) food\n    - for ten people\n    - 2 people\n    - for three people\n    - just one person\n    - book for seven people\n    - 2 please\n    - nine people\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Custom Action in Python for Rasa\nDESCRIPTION: This snippet demonstrates the skeleton structure of a custom action in Rasa. It shows the required methods 'name' and 'run' that must be implemented when subclassing the Action class.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomAction(Action):\n\n    def name(self) -> Text:\n\n        return \"action_name\"\n\n    async def run(\n        self, dispatcher, tracker: Tracker, domain: Dict[Text, Any],\n    ) -> List[Dict[Text, Any]]:\n\n        return []\n```\n\n----------------------------------------\n\nTITLE: Custom Slot Extraction with FormValidationAction in Rasa\nDESCRIPTION: This code snippet demonstrates how to implement a custom slot mapping using the `FormValidationAction` in Rasa. It defines a method `extract_outdoor_seating` to extract the `outdoor_seating` slot based on the presence of the keyword 'outdoor' in the user's latest message. This action is part of the `ValidateRestaurantForm` which inherits from `FormValidationAction`.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict, Text, List, Optional, Any\n\nfrom rasa_sdk import Tracker\nfrom rasa_sdk.executor import CollectingDispatcher\nfrom rasa_sdk.forms import FormValidationAction\n\n\nclass ValidateRestaurantForm(FormValidationAction):\n    def name(self) -> Text:\n        return \"validate_restaurant_form\"\n\n    async def extract_outdoor_seating(\n        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict\n    ) -> Dict[Text, Any]:\n        text_of_last_user_message = tracker.latest_message.get(\"text\")\n        sit_outside = \"outdoor\" in text_of_last_user_message\n\n        return {\"outdoor_seating\": sit_outside}\n```\n\n----------------------------------------\n\nTITLE: Defining Forms in Rasa Domain\nDESCRIPTION: This snippet shows how to define a form in a Rasa domain file by specifying required slots that the form needs to collect from the user.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nforms:\n  restaurant_form:\n    required_slots:\n        - cuisine\n        - num_people\n        - outdoor_seating\n```\n\n----------------------------------------\n\nTITLE: Writing to Model Storage in Rasa Graph Component\nDESCRIPTION: This snippet demonstrates how to implement a custom graph component that persists training artifacts to model storage. It shows initialization, creation, and training methods with proper storage handling.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport json\nfrom typing import Optional, Dict, Any, Text\n\nfrom rasa.engine.graph import GraphComponent, ExecutionContext\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.engine.storage.storage import ModelStorage\nfrom rasa.shared.nlu.training_data.training_data import TrainingData\n\nclass MyComponent(GraphComponent):\n\n    def __init__(\n        self,\n        model_storage: ModelStorage,\n        resource: Resource,\n        training_artifact: Optional[Dict],\n    ) -> None:\n        # Store both `model_storage` and `resource` as object attributes to be able\n        # to utilize them at the end of the training\n        self._model_storage = model_storage\n        self._resource = resource\n\n    @classmethod\n    def create(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n    ) -> MyComponent:\n        return cls(model_storage, resource, training_artifact=None)\n\n    def train(self, training_data: TrainingData) -> Resource:\n        # Train your graph component\n        ...\n\n        # Persist your graph component\n        with self._model_storage.write_to(self._resource) as directory_path:\n            with open(directory_path / \"artifact.json\", \"w\") as file:\n                json.dump({\"my\": \"training artifact\"}, file)\n\n        # Return resource to make sure the training artifacts\n        # can be cached.\n        return self._resource\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline with WhitespaceTokenizer and LanguageModelFeaturizer\nDESCRIPTION: Example of how to migrate from the deprecated HFTransformersNLP and LanguageModelTokenizer to using WhitespaceTokenizer with LanguageModelFeaturizer, specifying model architecture and weights.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n    - name: WhitespaceTokenizer\n    - name: LanguageModelFeaturizer\n      model_name: \"bert\"\n      model_weights: \"rasa/LaBSE\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Policy in Rasa Model\nDESCRIPTION: This configuration snippet demonstrates how to add the `RulePolicy` to a Rasa model's configuration file. It is necessary to include this policy to enable the processing of rules in the dialogue management model.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/rules.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npolicies:\n- ... # Other policies\n- name: RulePolicy\n```\n\n----------------------------------------\n\nTITLE: Registering Custom NLU Component in Rasa 3.0 with Decorator (Python)\nDESCRIPTION: Extends GraphComponent and IntentClassifier, uses the DefaultV1Recipe.register decorator to register the component as an intent classifier. Specify is_trainable=True to call the train method. Dependencies include Rasa's graph components and classification libraries.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.engine.recipes.default_recipe import DefaultV1Recipe\nfrom rasa.nlu.classifiers.classifier import IntentClassifier\nfrom rasa.engine.graph import GraphComponent\n\n@DefaultV1Recipe.register(\n    DefaultV1Recipe.ComponentType.INTENT_CLASSIFIER, is_trainable=True\n)\nclass MyNLUComponent(GraphComponent, IntentClassifier):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Slots to Control Conversation Flow in Rasa\nDESCRIPTION: Stories that demonstrate how to use boolean slots to influence the conversation path. The bot provides different welcome messages based on whether the user has a premium account or not.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: Welcome message, premium user\n  steps:\n   - intent: greet\n   - action: action_check_profile\n   - slot_was_set:\n     - premium_account: true\n   - action: utter_welcome_premium\n\n- story: Welcome message, basic user\n  steps:\n   - intent: greet\n   - action: action_check_profile\n   - slot_was_set:\n     - premium_account: false\n   - action: utter_welcome_basic\n   - action: utter_ask_upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Form in Rasa Domain File\nDESCRIPTION: Example showing how to define a restaurant form with required slots for cuisine and number of people, along with the necessary entity and slot configurations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n- cuisine\n- number\nslots:\n  cuisine:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: cuisine\n  num_people:\n    type: any\n    mappings:\n    - type: from_entity\n      entity: number\nforms:\n  restaurant_form:\n    required_slots:\n        - cuisine\n        - num_people\n```\n\n----------------------------------------\n\nTITLE: Defining mapping conditions for slots in Rasa\nDESCRIPTION: This snippet demonstrates how to define conditions for slot mappings in the `domain.yml` file.  Conditions restrict when a slot mapping is active based on the active form (`active_loop`) and the requested slot (`requested_slot`).\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_23\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  slot_name:\n    type: text\n    mappings:\n    - type: from_text\n      intent: intent_name\n      conditions:\n      - active_loop: your_form\n        requested_slot: slot_name\n      - active_loop: another_form\n```\n\n----------------------------------------\n\nTITLE: Using utter_message with Buttons Parameter in Rasa\nDESCRIPTION: Example of using the CollectingDispatcher.utter_message method with the buttons parameter to display interactive buttons to the user with payloads that trigger actions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-dispatcher.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.utter_message(buttons = [\n                {\"payload\": \"/affirm\", \"title\": \"Yes\"},\n                {\"payload\": \"/deny\", \"title\": \"No\"},\n            ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fallback Action in Python\nDESCRIPTION: Creates a custom fallback action that transfers the conversation to a human agent. The action notifies the user about the handoff, calls a customer service function, and pauses the conversation to prevent the bot from responding further.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Dict, List, Text\n\nfrom rasa_sdk import Action, Tracker\nfrom rasa_sdk.events import UserUtteranceReverted\nfrom rasa_sdk.executor import CollectingDispatcher\n\nclass ActionDefaultFallback(Action):\n    def name(self) -> Text:\n        return \"action_default_fallback\"\n\n    def run(\n        self,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> List[Dict[Text, Any]]:\n\n        # tell the user they are being passed to a customer service agent\n        dispatcher.utter_message(text=\"I am passing you to a human...\")\n        \n        # assume there's a function to call customer service\n        # pass the tracker so that the agent has a record of the conversation between the user\n        # and the bot for context\n        call_customer_service(tracker)\n     \n        # pause the tracker so that the bot stops responding to user input\n        return [ConversationPaused(), UserUtteranceReverted()]\n```\n\n----------------------------------------\n\nTITLE: Creating Channel-Specific Rich Response for Facebook in Rasa\nDESCRIPTION: This JSON snippet shows how to create a response that leverages Facebook Messenger's specific capabilities. It includes both a text message and a media attachment with Facebook's template format, demonstrating how Rasa can deliver channel-specific rich content.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/actions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"events\": [\n            {\n                \"event\": \"slot\",\n                \"timestamp\": null,\n                \"name\": \"temperature\",\n                \"value\": \"30\"\n            }\n        ],\n        \"responses\": [\n            {\n                \"text\": \"This is your weather forecast!\"\n            },\n            {\n                \"attachment\": {\n                    \"type\": \"template\",\n                    \"payload\": {\n                        \"template_type\": \"media\",\n                        \"elements\": [\n                            {\n                                \"media_type\": \"weather_forcast.gif\",\n                                \"attachment_id\": \"<id from facebook upload endpoint>\"\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining End-to-End Stories in Rasa YAML Format\nDESCRIPTION: Example showing how to define a dialogue story in Rasa YAML format that includes intent/entities, user text, and bot actions. Demonstrates the new end-to-end capabilities of TED Policy.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n- story: collect restaurant booking info  # name of the story - just for debugging\n  steps:\n  - intent: greet                          # user message with no entities\n  - action: utter_ask_howcanhelp           # action that the bot should execute\n  - intent: inform                         # user message with entities\n    entities:\n    - location: \"rome\"\n    - price: \"cheap\"\n  - bot: On it                             # actual text that bot can output \n  - action: utter_ask_cuisine\n  - user: I would like [spanish](cuisine). # actual text that user input\n  - action: utter_ask_num_people\n```\n\n----------------------------------------\n\nTITLE: Defining Rules with Conditions in Rasa\nDESCRIPTION: Shows how to create a rule with a specific condition that must be met (user_provided_name slot must be true) before the rule applies.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_20\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n- rule: Only say `hey` when the user provided a name\n  condition:\n  - slot_was_set:\n    - user_provided_name: true\n  steps:\n  - intent: greet\n  - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Rasa Architecture\nDESCRIPTION: Contains the markdown documentation that describes Rasa's message handling architecture, including steps from receiving messages to sending responses. Details the flow through Interpreter, Tracker, and Policy components.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/architecture.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: architecture\nsidebar_label: Rasa Architecture\ntitle: Rasa Architecture\ndescription: Check the architecture to understand how Rasa uses machine learning, context and state of the conversation to predict the next action of the AI Assistant.\n---\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\n## Message Handling\n\nThis diagram shows the basic steps of how an assistant built with Rasa\nresponds to a message:\n\nimport archImage from './architecture-img.png';\n\n<Image img={archImage} caption=\"Rasa architecture\" alt=\"A visual representation of the steps that follow.\"/>\n\nThe steps are:\n\n1. The message is received and passed to an `Interpreter`, which\n   converts it into a dictionary including the original text, the intent,\n   and any entities that were found. This part is handled by NLU.\n\n2. The message is passed from the `Interpreter` to the `Tracker`.\n   The `Tracker` is the object which keeps track of conversation state.\n\n3. The current state of the tracker is sent to each policy.\n\n4. Each policy chooses which action to take next.\n\n5. The chosen action is logged by the tracker.\n\n6. A response is sent to the user.\n```\n\n----------------------------------------\n\nTITLE: Custom Action with Conditional Responses in Python\nDESCRIPTION: A Python custom action that implements branching logic internally. It checks if it's raining and responds accordingly, simplifying the story structure.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef run(self, dispatcher, tracker, domain):\n\tis_raining = check_rain()\n\tif is_raining:\n\t\tdispatcher.utter_message(template=\"utter_is_raining\")\n\t\tdispatcher.utter_message(template=\"utter_bring_umbrella\")\n\telse:\n\t\tdispatcher.utter_message(template=\"utter_not_raining\")\n\t\tdispatcher.utter_message(template=\"utter_no_umbrella_needed\")\n\treturn []\n```\n\n----------------------------------------\n\nTITLE: Reading from Model Storage in Rasa Graph Component\nDESCRIPTION: This snippet shows how to implement the load method for a graph component to read persisted data from model storage during inference. It includes error handling for cases where no data exists.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport json\nfrom typing import Optional, Dict, Any, Text\n\nfrom rasa.engine.graph import GraphComponent, ExecutionContext\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.engine.storage.storage import ModelStorage\n\nclass MyComponent(GraphComponent):\n\n    def __init__(\n        self,\n        model_storage: ModelStorage,\n        resource: Resource,\n        training_artifact: Optional[Dict],\n    ) -> None:\n        self._model_storage = model_storage\n        self._resource = resource\n\n    @classmethod\n    def load(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n        **kwargs: Any,\n    ) -> MyComponent:\n        try:\n            with model_storage.read_from(resource) as directory_path:\n                with open(directory_path / \"artifact.json\", \"r\") as file:\n                    training_artifact = json.load(file)\n                    return cls(\n                        model_storage, resource, training_artifact=training_artifact\n                    )\n        except ValueError:\n            # This allows you to handle the case if there was no\n            # persisted data for your component\n            ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Action with CollectingDispatcher in Rasa\nDESCRIPTION: Example of a custom action class called ActionGreetUser that uses the CollectingDispatcher to send a greeting message to the user. This demonstrates how to implement the run method to return a simple text response without explicitly returning events.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-dispatcher.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ActionGreetUser(Action):\n    def name(self) -> Text:\n        return \"action_greet_user\"\n\n    async def run(\n        self,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> List[EventType]:\n\n        dispatcher.utter_message(text = \"Hi, User!\")\n\n        return []\n```\n\n----------------------------------------\n\nTITLE: Removing Slots Dynamically from Form in Rasa\nDESCRIPTION: This code demonstrates how to dynamically remove a slot from the required slots of a form using the `FormValidationAction` in Rasa. It overrides the `required_slots` method to remove the `email_address` slot if the user is an existing customer. It emphasizes copying `domain_slots` to `updated_slots` to avoid unexpected behaviour.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Text, List, Optional\n\nfrom rasa_sdk.forms import FormValidationAction\n\nclass ValidateBookingForm(FormValidationAction):\n    def name(self) -> Text:\n        return \"validate_booking_form\"\n\n    async def required_slots(\n        self,\n        domain_slots: List[Text],\n        dispatcher: \"CollectingDispatcher\",\n        tracker: \"Tracker\",\n        domain: \"DomainDict\",\n    ) -> List[Text]:\n        updated_slots = domain_slots.copy()\n        if tracker.slots.get(\"existing_customer\") is True:\n            # If the user is an existing customer,\n            # do not request the `email_address` slot\n            updated_slots.remove(\"email_address\")\n\n        return updated_slots\n```\n\n----------------------------------------\n\nTITLE: Converting Mapping Policy to Rule-Based Approach\nDESCRIPTION: Example of migrating from the deprecated Mapping Policy to the new Rules format, showing how to convert an intent trigger to a rule and update the domain and config files.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\n# domain.yml (old format)\nintents:\n - ask_is_bot:\n     triggers: action_is_bot\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# rules.yml (new format)\nrules:\n- rule: Rule to map `ask_is_bot` intent\n  steps:\n  - intent: ask_is_bot\n  - action: action_is_bot\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# domain.yml (new format)\nintents:\n - ask_is_bot\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yml\npolicies:\n  # Other policies\n  - name: RulePolicy\n```\n\n----------------------------------------\n\nTITLE: Persisting a Trained Policy in Rasa 3.0\nDESCRIPTION: Demonstrates how to update the persistence method of a custom policy in Rasa 3.0. The new version uses model_storage and resource for persistence and returns the resource from the train method.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Any\n\nfrom rasa.core.policies.policy import Policy\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.shared.core.domain import Domain\nfrom rasa.shared.core.generator import TrackerWithCachedStates\n\nclass MyPolicy(Policy):\n    def train(\n        self,\n        training_trackers: List[TrackerWithCachedStates],\n        domain: Domain,\n        **kwargs: Any,\n    ) -> Resource:\n        ...\n        self.persist()\n        return self._resource\n\n    def persist(self) -> None:\n        with self._model_storage.write_to(self._resource) as directory:\n            if self.featurizer is not None:\n                self.featurizer.persist(directory)\n\n            file_path = directory / \"model_data.json\"\n            rasa.shared.utils.io.dump_obj_as_json_to_file(file_path,\n                self.get_model_data())\n    ...\n```\n\n----------------------------------------\n\nTITLE: CRF Entity Extractor Output Example\nDESCRIPTION: Example JSON output from the CRFEntityExtractor showing entity extraction results with confidence scores.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entities\": [{\n        \"value\": \"New York City\",\n        \"start\": 20,\n        \"end\": 33,\n        \"entity\": \"city\",\n        \"confidence\": 0.874,\n        \"extractor\": \"CRFEntityExtractor\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Predefined Slots with ValidationAction in Python\nDESCRIPTION: This code snippet demonstrates how to subclass ValidationAction to validate a predefined 'location' slot. It capitalizes the slot value if it's a string, otherwise sets it to None.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/validation-action.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Text, Any, Dict\n\nfrom rasa_sdk import Tracker, ValidationAction\nfrom rasa_sdk.executor import CollectingDispatcher\nfrom rasa_sdk.types import DomainDict\n\n\nclass ValidatePredefinedSlots(ValidationAction):\n    def validate_location(\n        self,\n        slot_value: Any,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: DomainDict,\n    ) -> Dict[Text, Any]:\n        \"\"\"Validate location value.\"\"\"\n        if isinstance(slot_value, str):\n            # validation succeeded, capitalize the value of the \"location\" slot\n            return {\"location\": slot_value.capitalize()}\n        else:\n            # validation failed, set this slot to None\n            return {\"location\": None}\n```\n\n----------------------------------------\n\nTITLE: Request Format for Custom Actions in Rasa\nDESCRIPTION: When Rasa's dialogue engine predicts a custom action to be executed, it sends a JSON request to the action server with information about the next action, sender ID, conversation tracker, and domain configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"next_action\": \"string\",\n  \"sender_id\": \"string\",\n  \"tracker\": {\n    \"conversation_id\": \"default\",\n    \"slots\": {},\n    \"latest_message\": {},\n    \"latest_event_time\": 1537645578.314389,\n    \"followup_action\": \"string\",\n    \"paused\": false,\n    \"events\": [],\n    \"latest_input_channel\": \"rest\",\n    \"active_loop\": {},\n    \"latest_action\": {}\n  },\n  \"domain\": {\n    \"config\": {},\n    \"session_config\": {},\n    \"intents\": [],\n    \"entities\": [],\n    \"slots\": {},\n    \"responses\": {},\n    \"actions\": [],\n    \"forms\": {},\n    \"e2e_actions\": []\n  },\n  \"version\": \"version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Output Example JSON for DIETClassifier\nDESCRIPTION: This JSON illustrates the expected output format from the DIETClassifier model, showcasing the structure of 'intent', 'intent_ranking', and 'entities'. It exemplifies the confidence scores and extractor details post-processing of an input message.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"intent\": {\"name\": \"greet\", \"confidence\": 0.7800},\n    \"intent_ranking\": [\n        {\n            \"confidence\": 0.7800,\n            \"name\": \"greet\"\n        },\n        {\n            \"confidence\": 0.1400,\n            \"name\": \"goodbye\"\n        },\n        {\n            \"confidence\": 0.0800,\n            \"name\": \"restaurant_search\"\n        }\n    ],\n    \"entities\": [{\n        \"end\": 53,\n        \"entity\": \"time\",\n        \"start\": 48,\n        \"value\": \"2017-04-10T00:00:00.000+02:00\",\n        \"confidence\": 1.0,\n        \"extractor\": \"DIETClassifier\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LanguageModelFeaturizer with BERT in Rasa Pipeline\nDESCRIPTION: Configuration for LanguageModelFeaturizer that uses pre-trained language models like BERT to create vector representations. This example loads the BERT model with rasa/LaBSE weights which support 112 languages, and includes an optional cache directory parameter.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n  - name: LanguageModelFeaturizer\n    # Name of the language model to use\n    model_name: \"bert\"\n    # Pre-Trained weights to be loaded\n    model_weights: \"rasa/LaBSE\"\n\n    # An optional path to a directory from which\n    # to load pre-trained model weights.\n    # If the requested model is not found in the\n    # directory, it will be downloaded and\n    # cached in this directory for future use.\n    # The default value of `cache_dir` can be\n    # set using the environment variable\n    # `TRANSFORMERS_CACHE`, as per the\n    # Transformers library.\n    cache_dir: null\n```\n\n----------------------------------------\n\nTITLE: Configuring RulePolicy for FAQ and Chitchat Handling in Rasa\nDESCRIPTION: Configuration snippet for adding the RulePolicy to your policies in config.yml, which enables rule-based dialogue management for FAQs and chitchat.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/chitchat-faqs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n# other policies\n- name: RulePolicy\n```\n\n----------------------------------------\n\nTITLE: GraphComponent Interface Definition in Rasa\nDESCRIPTION: The GraphComponent interface that custom NLU components and policies must implement, including methods for creation, loading, and configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom abc import ABC, abstractmethod\nfrom typing import Dict, Text, Any, List, Optional, Type\n\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.engine.storage.storage import ModelStorage\n\nclass GraphComponent(ABC):\n    @classmethod\n    @abstractmethod\n    def create(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n    ) -> GraphComponent:\n        ...\n\n    @classmethod\n    def load(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n        **kwargs: Any,\n    ) -> GraphComponent:\n        return cls.create(\n            config, model_storage, resource, execution_context\n        )\n\n    @staticmethod\n    def get_default_config() -> Dict[Text, Any]:\n        return {}\n\n    @staticmethod\n    def supported_languages() -> Optional[List[Text]]:\n        return None\n\n    @staticmethod\n    def not_supported_languages() -> Optional[List[Text]]:\n        return None\n\n    @staticmethod\n    def required_packages() -> List[Text]:\n        return []\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Configuration for Knowledge Base Entities in Rasa\nDESCRIPTION: This YAML snippet defines the necessary entities and slots in the Rasa domain file to support knowledge base queries. It includes object_type, mention, and attribute entities with corresponding slots to store extracted values during conversations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nentities:\n  - object_type\n  - mention\n  - attribute\n\nslots:\n  object_type:\n    type: any\n    influence_conversation: false\n    mappings:\n    - type: from_entity\n      entity: object_type\n  mention:\n    type: any\n    influence_conversation: false\n    mappings:\n    - type: from_entity\n      entity: mention\n  attribute:\n    type: any\n    influence_conversation: false\n    mappings:\n    - type: from_entity\n      entity: attribute\n```\n\n----------------------------------------\n\nTITLE: Defining NLU Data for Mentions in Knowledge Base Queries\nDESCRIPTION: This snippet shows how to configure entity synonyms in NLU data to handle ordinal mentions (like \"first one\") in knowledge base queries.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nintents:\n- intent: query_knowledge_base\n  examples: |\n    - Does the [first one]{entity: \"mention\", value\": 1} have [outside seating]{entity: \"attribute\", value\": \"outside-seating\"}\n```\n\n----------------------------------------\n\nTITLE: Separated Stories for Lost Credit Card Flow\nDESCRIPTION: Breaking down the long story into smaller, more manageable stories focusing on specific sub-tasks.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: Customer loses a credit card\n  steps:\n  - intent: card_lost\n  - action: utter_card_locked\n  - action: spending_history_form\n  - active_loop: spending_history_form\n  - active_loop: null\n  - slot_was_set:\n    - reviewed_transactions: [\"starbucks\"]\n  - action: utter_ask_fraudulent_transactions\n\n- story: Customer reviews transactions and gets a new card\n  steps:\n  - action: utter_ask_fraudulent_transactions\n  - intent: inform\n  - action: action_update_transactions\n  - slot_was_set:\n    - reviewed_transactions: [\"target\", \"starbucks\"]\n  - intent: affirm\n  - action: utter_confirm_transaction_dispute\n  - action: utter_replace_card\n  - action: mailing_address_form\n  - active_loop: mailing_address\n  - active_loop: null\n  - action: utter_sent_replacement\n  - action: utter_anything_else\n\n- story: Customer has something else they need help with\n  steps:\n  - action: utter_anything_else\n  - intent: affirm\n  - action: utter_help\n```\n\n----------------------------------------\n\nTITLE: FormValidationAction Implementation in Rasa 2.0\nDESCRIPTION: Python implementation of a FormValidationAction that validates the cuisine slot in a restaurant form.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Text, List, Any, Dict, Union\nfrom rasa_sdk import Tracker\nfrom rasa_sdk.executor import CollectingDispatcher\nfrom rasa_sdk import FormValidationAction\nfrom rasa_sdk.types import DomainDict\n\nclass RestaurantFormValidator(FormValidationAction):\n    def name(self) -> Text:\n        return \"validate_restaurant_form\"\n\n    @staticmethod\n    def cuisine_db() -> List[Text]:\n        \"\"\"Database of supported cuisines\"\"\"\n\n        return [\"caribbean\", \"chinese\", \"french\"]\n\n    def validate_cuisine(\n        self,\n        slot_value: Any,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: DomainDict,\n    ) -> Dict[Text, Any]:\n        \"\"\"Validate cuisine value.\"\"\"\n\n        if slot_value.lower() in self.cuisine_db():\n            # validation succeeded, set the value of the \"cuisine\" slot to value\n            return {\"cuisine\": slot_value}\n        else:\n            # validation failed, set this slot to None, meaning the\n            # user will be asked for the slot again\n            return {\"cuisine\": None}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Cancellation in Rasa\nDESCRIPTION: Story example showing how to handle a situation where a user wants to stop the form filling process entirely, using the action_deactivate_loop action.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n- story: User interrupts the form and doesn't want to continue\n  steps:\n  - intent: request_restaurant\n  - action: restaurant_form\n  - active_loop: restaurant_form\n  - intent: stop\n  - action: utter_ask_continue\n  - intent: stop\n  - action: action_deactivate_loop\n  - active_loop: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Component in Rasa NLU Pipeline (YAML)\nDESCRIPTION: Demonstrates how to add a custom component to the Rasa NLU pipeline by specifying the module path in the configuration file. This example shows adding a custom SentimentAnalyzer component.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"sentiment.SentimentAnalyzer\"\n```\n\n----------------------------------------\n\nTITLE: Rasa Configuration After Using Suggested Config Feature\nDESCRIPTION: Example of how the configuration file looks after the Suggested Config feature has added recommended components and policies as comments. The user can then uncomment and modify these suggestions if desired.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-configuration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrecipe: default.v1\nassistant_id: example_assistant\nlanguage: en\n\n# The following configuration is automatically generated by Rasa during training.\n# It can be un-commented and modified, but this will disable suggestions\n# for the values in this section when training a new model.\n\n# pipeline:\n# - name: WhitespaceTokenizer\n# - name: RegexFeaturizer\n# - name: LexicalSyntacticFeaturizer\n# - name: CountVectorsFeaturizer\n# - name: CountVectorsFeaturizer\n#   analyzer: char_wb\n#   min_ngram: 1\n#   max_ngram: 4\n# - name: DIETClassifier\n#   epochs: 100\n# - name: EntitySynonymMapper\n# - name: ResponseSelector\n#   epochs: 100\n# - name: FallbackClassifier\n#   threshold: 0.3\n#   ambiguity_threshold: 0.1\n\n# policies:\n# - name: MemoizationPolicy\n# - name: RulePolicy\n# - name: UnexpecTEDIntentPolicy\n#   max_history: 5\n#   epochs: 100\n# - name: TEDPolicy\n#   max_history: 5\n#   epochs: 100\n#   constrain_similarities: true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline with WhitespaceTokenizer and ConveRTFeaturizer\nDESCRIPTION: Example of how to migrate from the deprecated ConveRTTokenizer to using WhitespaceTokenizer with ConveRTFeaturizer, specifying a model URL.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n    - name: WhitespaceTokenizer\n    - name: ConveRTFeaturizer\n      model_url: <Remote/Local path to model files>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Greeting Rule in Rasa\nDESCRIPTION: A basic rule that maps the 'greet' intent to a fixed 'utter_greet' response. Rules are useful for single-turn interactions that should always follow the same path.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n- rule: Greeting Rule\n  steps:\n  - intent: greet\n  - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Defining a Rephrase Response for Two-Stage Fallback\nDESCRIPTION: This snippet defines the response that asks users to rephrase their message during the Two-Stage Fallback process.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_ask_rephrase:\n  - text: I'm sorry, I didn't quite understand that. Could you rephrase?\n```\n\n----------------------------------------\n\nTITLE: Extracting Custom Slot Mappings with ValidationAction in Python\nDESCRIPTION: This code snippet shows how to implement a custom action that extracts the 'count_of_insults' slot to track the user's attitude. It increments the count if the latest intent is an insult.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/validation-action.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict, Text, Any\n\nfrom rasa_sdk import Tracker\nfrom rasa_sdk.executor import CollectingDispatcher\nfrom rasa_sdk.forms import ValidationAction\n\n\nclass ValidateCustomSlotMappings(ValidationAction):\n    async def extract_count_of_insults(\n        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict\n    ) -> Dict[Text, Any]:\n        intent_of_last_user_message = tracker.get_intent_of_latest_message()\n        current_count_of_insults = tracker.get_slot(\"count_of_insults\")\n        if intent_of_last_user_message == \"insult\":\n           current_count_of_insults += 1\n\n        return {\"count_of_insults\": current_count_of_insults}\n```\n\n----------------------------------------\n\nTITLE: Custom Action to Ask For a Slot in Rasa\nDESCRIPTION: This code shows how to implement a custom action to ask for a specific slot in Rasa. It defines an action `action_ask_cuisine` that utters a message asking for the cuisine.  This can be used as an alternative to `utter_ask_<slot_name>` if a more complex interaction is required.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict, Text, List\n\nfrom rasa_sdk import Tracker\nfrom rasa_sdk.events import EventType\nfrom rasa_sdk.executor import CollectingDispatcher\nfrom rasa_sdk import Action\n\n\nclass AskForSlotAction(Action):\n    def name(self) -> Text:\n        return \"action_ask_cuisine\"\n\n    def run(\n        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict\n    ) -> List[EventType]:\n        dispatcher.utter_message(text=\"What cuisine?\")\n        return []\n```\n\n----------------------------------------\n\nTITLE: Using OR Statements with Slots in Rasa Stories\nDESCRIPTION: Example demonstrating how to use OR statements with slots to handle multiple possible slot values in the same way within a story flow.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/stories.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story:\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: tell_name\n  - or:\n    - slot_was_set:\n        - name: joe\n    - slot_was_set:\n        - name: bob\n  # ... next actions\n```\n\n----------------------------------------\n\nTITLE: CRF Entity Extractor Configuration\nDESCRIPTION: Detailed YAML configuration for CRFEntityExtractor including features, BILOU tagging, and regularization parameters.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"CRFEntityExtractor\"\n  \"BILOU_flag\": True\n  \"features\": [\n    [\"low\", \"title\", \"upper\"],\n    [\n      \"bias\",\n      \"low\",\n      \"prefix5\",\n      \"prefix2\",\n      \"suffix5\",\n      \"suffix3\",\n      \"suffix2\",\n      \"upper\",\n      \"title\",\n      \"digit\",\n      \"pattern\",\n      \"text_dense_features\"\n    ],\n    [\"low\", \"title\", \"upper\"],\n  ]\n  \"max_iterations\": 50\n  \"L1_c\": 0.1\n  \"L2_c\": 0.1\n  \"featurizers\": []\n  \"split_entities_by_comma\":\n      address: False\n      email: True\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Markers in YAML for Carbon Bot\nDESCRIPTION: Examples of YAML marker definitions for Carbon Bot that define dialogue completion and task success by checking if required slots are set and specific actions are triggered.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/markers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmarker_dialogue_completion:\n  and:\n    - slot_was_set: travel_departure\n    - slot_was_set: travel_destination\n    - slot_was_set: travel_flight_class\n\nmarker_task_success:\n  description: \"Measure task success where all required slots are set and the custom action was triggered\"\n  and:\n    - slot_was_set: travel_departure\n    - slot_was_set: travel_destination\n    - slot_was_set: travel_flight_class\n    - action: provide_carbon_estimate\n```\n\n----------------------------------------\n\nTITLE: Defining Lookup Tables in Rasa NLU\nDESCRIPTION: Example of using lookup tables to create case-insensitive regex patterns for entity extraction. This sample shows how to list country names to help extract country entities.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- lookup: country\n  examples: |\n    - Afghanistan\n    - Albania\n    - ...\n    - Zambia\n    - Zimbabwe\n```\n\n----------------------------------------\n\nTITLE: Configuring store_entities_as_slots in Rasa\nDESCRIPTION: This snippet demonstrates how to configure the `store_entities_as_slots` parameter in the `domain.yml` file.  This parameter controls whether entities extracted from user messages are automatically stored as slots. When set to `false`, explicit `slot_was_set` events must be defined in stories.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_27\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nconfig:\n  store_entities_as_slots: false\n```\n\n----------------------------------------\n\nTITLE: Multi-Intent Rule for Dialogue Management\nDESCRIPTION: A rule that handles the combined 'check_balances+transfer_money' intent by executing a sequence of actions to address both intents in order. This ensures proper handling of multi-intent messages.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n- rule: check balances and transfer money\n  steps:\n  - intent: check_balances+transfer_money\n  - action: action_check_balances\n  - action: action_transfer_money\n```\n\n----------------------------------------\n\nTITLE: Defining a Form with Ignored Intents in Rasa\nDESCRIPTION: Extended form definition example showing how to specify intents to ignore during form processing, which prevents slots from being filled when these intents are recognized.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n- cuisine\n- number\nslots:\n  cuisine:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: cuisine\n  num_people:\n    type: any\n    mappings:\n    - type: from_entity\n      entity: number\nforms:\n  restaurant_form:\n    ignored_intents: \n    - chitchat\n    required_slots:\n        - cuisine\n        - num_people\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Importer in Rasa - Python\nDESCRIPTION: This Python code demonstrates the implementation of a custom training data importer by extending the TrainingDataImporter class. It includes necessary methods for retrieving the domain, stories, configuration, and NLU data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-importers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Optional, Text, Dict, List, Union\\n\\nimport rasa\\nfrom rasa.shared.core.domain import Domain\\nfrom rasa.shared.nlu.interpreter import RegexInterpreter\\nfrom rasa.shared.core.training_data.structures import StoryGraph\\nfrom rasa.shared.importers.importer import TrainingDataImporter\\nfrom rasa.shared.nlu.training_data.training_data import TrainingData\\n\\n\\nclass MyImporter(TrainingDataImporter):\\n    \\\"\\\"Example implementation of a custom importer component.\\\"\\\"\\n\\n    def __init__(self,\\n        config_file: Optional[Text] = None,\\n        domain_path: Optional[Text] = None,\\n        training_data_paths: Optional[Union[List[Text], Text]] = None,\\n        **kwargs: Dict\\n    ):\\n        \\\"\\\"Constructor of your custom file importer.\\n\\n        Args:\\n            config_file: Path to configuration file from command line arguments.\\n            domain_path: Path to domain file from command line arguments.\\n            training_data_paths: Path to training files from command line arguments.\\n            **kwargs: Extra parameters passed through configuration in configuration file.\\n        \\\"\\\"\\n        pass\\n\\n    def get_domain(self) -> Domain:\\n        path_to_domain_file = self._custom_get_domain_file()\\n        return Domain.load(path_to_domain_file)\\n\\n    def _custom_get_domain_file(self) -> Text:\\n        pass\\n\\n    def get_stories(\\n        self,\\n        interpreter: \\\"NaturalLanguageInterpreter\\\" = RegexInterpreter(),\\n        exclusion_percentage: Optional[int] = None,\\n    ) -> StoryGraph:\\n        from rasa.shared.core.training_data.story_reader.yaml_story_reader import (\\n            YAMLStoryReader,\\n        )\\n\\n        path_to_stories = self._custom_get_story_file()\\n        return YAMLStoryReader.read_from_file(path_to_stories, self.get_domain())\\n\\n    def _custom_get_story_file(self) -> Text:\\n        pass\\n\\n    def get_config(self) -> Dict:\\n        path_to_config = self._custom_get_config_file()\\n        return rasa.utils.io.read_config_file(path_to_config)\\n\\n    def _custom_get_config_file(self) -> Text:\\n        pass\\n\\n    def get_nlu_data(self, language: Optional[Text] = \\\"en\\\") -> TrainingData:\\n        from rasa.shared.nlu.training_data import loading\\n\\n        path_to_nlu_file = self._custom_get_nlu_file()\\n        return loading.load_data(path_to_nlu_file)\\n\\n    def _custom_get_nlu_file(self) -> Text:\\n        pass\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Rasa Rule for Greeting\nDESCRIPTION: This code snippet shows how to create a Rasa rule that triggers a greeting ('utter_greet') whenever the user sends a message with the intent 'greet'. This rule can activate at any point in the conversation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/rules.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n\n- rule: Say `hello` whenever the user sends a message with intent `greet`\n  steps:\n  - intent: greet\n  - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple ResponseSelector Components for Different Retrieval Types\nDESCRIPTION: Configuration for using multiple ResponseSelector components to handle FAQs and chitchat separately by specifying different retrieval intents.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/chitchat-faqs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n# Other components\n- name: ResponseSelector\n  epochs: 100\n  retrieval_intent: faq\n- name: ResponseSelector\n  epochs: 100\n  retrieval_intent: chitchat\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions for Entity Extraction in Rasa\nDESCRIPTION: Example of rule-based entity extraction using RegexEntityExtractor to identify account numbers with 10-12 digits. The name of the regex matches the entity name to be extracted.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- regex: account_number\n  examples: |\n    - \\d{10,12}\n- intent: inform\n  examples: |\n    - my account number is [1234567891](account_number)\n    - This is my account number [1234567891](account_number)\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Policy Implementation for PolicyPrediction in Rasa\nDESCRIPTION: Example showing how to adapt a custom policy to use the new PolicyPrediction return object instead of directly returning probabilities. This change is required as the old interface will be removed in Rasa Open Source 3.0.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.core.policies.policy import Policy, PolicyPrediction\n# ... other imports\n\ndef predict_action_probabilities(\n        self,\n        tracker: DialogueStateTracker,\n        domain: Domain,\n        interpreter: NaturalLanguageInterpreter,\n        **kwargs: Any,\n    ) -> PolicyPrediction:\n    probabilities = ... # an action prediction of your policy\n    return PolicyPrediction(probabilities, \"policy_name\", policy_priority=self.priority)\n```\n\n----------------------------------------\n\nTITLE: Form Rules in Rasa 2.0\nDESCRIPTION: Rules in rules.yml that replace the form story by separating the form activation and submission into distinct rules.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - rule: Activate form\n    steps:\n    - intent: request_restaurant\n    - action: restaurant_form\n    - active_loop: restaurant_form\n\n  - rule: Submit form\n    condition:\n    # Condition that form is active.\n    - active_loop: restaurant_form\n    steps:\n    - action: restaurant_form\n    - active_loop: null\n    # The action we want to run when the form is submitted.\n    - action: utter_submit\n```\n\n----------------------------------------\n\nTITLE: Configuring requested_slot in domain.yml for Contextual Interjections\nDESCRIPTION: This YAML configuration defines the requested_slot as a categorical type with specific values and sets influence_conversation to true. This allows the dialogue model to consider the requested_slot value when making predictions during contextual interjections.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/unexpected-input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  requested_slot:\n    type: categorical\n    values:\n      - cuisine\n      - num_people\n      - outdoor_seating\n      - preferences\n      - feedback\n    influence_conversation: true\n    mappings:\n    - type: custom\n```\n\n----------------------------------------\n\nTITLE: Configuring Two-Stage Fallback in Rasa\nDESCRIPTION: This configuration sets up the necessary components for Two-Stage Fallback, which handles low confidence predictions through a multi-step clarification process.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrecipe: default.v1\npipeline:\n# other components\n- name: FallbackClassifier\n  threshold: 0.7\n\npolicies:\n# other policies\n- RulePolicy\n```\n\n----------------------------------------\n\nTITLE: Defining from_intent slot mapping in Rasa\nDESCRIPTION: This snippet illustrates how to define a `from_intent` slot mapping in the `domain.yml` file. The `from_intent` mapping fills a slot with a specific value if the user's intent matches the specified intent.  The mapping will not apply if the intent of the message is `excluded_intent`.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_21\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  slot_name:\n    type: any\n    mappings:\n    - type: from_intent\n      value: my_value\n      intent: intent_name\n      not_intent: excluded_intent\n```\n\n----------------------------------------\n\nTITLE: Defining a Marker for Slot Failure Detection in YAML\nDESCRIPTION: YAML marker definition to identify dialogues where some mandatory slots are set but one specific slot is missing, useful for diagnosing conversation issues.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/markers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmarker_dialogue_mandatory_slot_failure:\n  and:\n    - slot_was_set: travel_departure\n    - slot_was_set: travel_destination\n    - not:\n      - slot_was_set: travel_flight_class\n```\n\n----------------------------------------\n\nTITLE: Configuring Float Slot in Rasa YAML\nDESCRIPTION: Example configuration for a float slot type in Rasa that stores real numbers. This example creates a temperature slot with minimum and maximum value constraints using a custom mapping.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  temperature:\n    type: float\n    min_value: -100.0\n    max_value:  100.0\n    mappings:\n    - type: custom\n```\n\n----------------------------------------\n\nTITLE: Story with Entity Example in Rasa\nDESCRIPTION: Shows how to include entities in a story step, demonstrating how to handle user messages with specific entity values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: story with entities\n  steps:\n  - intent: account_balance\n    entities:\n    - account_type: credit\n  - action: action_credit_account_balance\n```\n\n----------------------------------------\n\nTITLE: Configuring Character-Level Featurization in Rasa\nDESCRIPTION: Pipeline configuration example showing how to set up character-level featurization using CountVectorsFeaturizer to handle misspellings.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/generating-nlu-data.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npipeline:\n# <other components>\n- name: CountVectorsFeaturizer\n  analyze: char_wb\n  min_ngram: 1\n  max_ngram: 4\n# <other components>\n```\n\n----------------------------------------\n\nTITLE: Configuring RegexEntityExtractor in Rasa Pipeline\nDESCRIPTION: Example configuration for the RegexEntityExtractor component in Rasa pipeline. It shows options for case sensitivity, use of lookup tables, regexes, and word boundaries.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: RegexEntityExtractor\n  # text will be processed with case insensitive as default\n  case_sensitive: False\n  # use lookup tables to extract entities\n  use_lookup_tables: True\n  # use regexes to extract entities\n  use_regexes: True\n  # use match word boundaries for lookup table\n  use_word_boundaries: True\n```\n\n----------------------------------------\n\nTITLE: Creating a Rasa Rule with Conversation Start\nDESCRIPTION: This snippet illustrates how to create a rule that only applies at the start of a conversation by using the `conversation_start: true` parameter.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/rules.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n\n- rule: Say `hello` when the user starts a conversation with intent `greet`\n  conversation_start: true\n  steps:\n  - intent: greet\n  - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Restarting Conversation Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'restart' event in Rasa, which resets the tracker, erasing all conversation history. This event is automatically tracked when the '/restart' default intent is triggered.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"restart\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Responses in Telegram with Rasa\nDESCRIPTION: Example of a response using Telegram's button functionality. Demonstrates how to create vertical buttons with yes/no options and includes an image attachment.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/telegram.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\n  utter_ask_transfer_form_confirm:\n  - buttons:\n    - payload: /affirm\n      title: Yes\n    - payload: /deny\n      title: No, cancel the transaction\n    button_type: vertical\n    text: Would you like to transfer {currency}{amount_of_money} to {PERSON}?\n    image: \"https://i.imgur.com/nGF1K8f.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Policy in Rasa\nDESCRIPTION: Skeleton code for creating a custom policy by extending the Policy class and registering it as a graph component.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.core.policies.policy import Policy\nfrom rasa.engine.recipes.default_recipe import DefaultV1Recipe\n\n# TODO: Correctly register your graph component\n@DefaultV1Recipe.register(\n    [DefaultV1Recipe.ComponentType.POLICY_WITHOUT_END_TO_END_SUPPORT], is_trainable=True\n)\nclass MyPolicy(Policy):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Custom Implementation of Action_Unlikely_Intent\nDESCRIPTION: Shows how to override the default action_unlikely_intent behavior with a custom implementation that can be used for handling unexpected user inputs.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/default-actions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ActionUnlikelyIntent(Action):\n\n    def name(self) -> Text:\n        return \"action_unlikely_intent\"\n\n    async def run(\n        self, dispatcher, tracker: Tracker, domain: Dict[Text, Any],\n    ) -> List[Dict[Text, Any]]:\n\n        # Implement custom logic here\n        return []\n```\n\n----------------------------------------\n\nTITLE: Installing Rasa Open Source with spaCy Dependencies\nDESCRIPTION: Installs Rasa Open Source with spaCy dependencies and downloads the English language model.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip3 install 'rasa[spacy]'\npython3 -m spacy download en_core_web_md\n```\n\n----------------------------------------\n\nTITLE: Defining from_trigger_intent slot mapping in Rasa\nDESCRIPTION: This snippet shows how to define a `from_trigger_intent` slot mapping in the `domain.yml` file. The `from_trigger_intent` mapping fills a slot with a specific value if a form is activated by a user message with the specified intent. The slot mapping will not apply if the intent of the message is `excluded_intent`.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_22\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  slot_name:\n    type: any\n    mappings:\n    - type: from_trigger_intent\n      value: my_value\n      intent: intent_name\n      not_intent: excluded_intent\n```\n\n----------------------------------------\n\nTITLE: Creating Slot Mappings in Domain File\nDESCRIPTION: This code defines slots in the Rasa domain with mappings that determine how each slot is filled, including entity extraction for cuisine and number, and intent-based mappings with conditions for boolean values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n  - cuisine\n  - number\nslots:\n  cuisine:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: cuisine\n  num_people:\n    type: float\n    mappings:\n    - type: from_entity\n      entity: number\n  outdoor_seating:\n    type: bool\n    mappings:\n    - type: from_intent\n      intent: affirm\n      value: true\n      conditions:\n       - active_loop: restaurant_form\n         requested_slot: outdoor_seating\n    - type: from_intent\n      intent: deny\n      value: false\n      conditions:\n      - active_loop: restaurant_form\n        requested_slot: outdoor_seating\n```\n\n----------------------------------------\n\nTITLE: Story for Context Switching Between Forms\nDESCRIPTION: A story showing how to handle multi-turn context switching between credit card payment and money transfer.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_13\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: Context switch from credit card payment to money transfer\n  steps:\n  - intent: pay_credit_card\n  - action: credit_card_payment_form\n  - active_loop: credit_card_payment_form\n  - intent: transfer_money\n  - active_loop: null\n  - action: transfer_money_form\n  - active_loop: transfer_money_form\n  - active_loop: null\n  - action: utter_continue_credit_card_payment\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Policy Class in Rasa\nDESCRIPTION: Shows the implementation of a custom policy class called MyPolicy that extends the Policy class. It includes methods for training and predicting action probabilities, demonstrating how to handle features and model data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.shared.nlu.interpreter import NaturalLanguageInterpreter\n\nclass MyPolicy(Policy):\n    def train(\n        self,\n        training_trackers: List[TrackerWithCachedStates],\n        domain: Domain,\n        interpreter: NaturalLanguageInterpreter,\n        **kwargs: Any,\n    ) -> None:\n        ...\n        model_data, label_ids = self._prepare_for_training(\n            training_trackers, domain, interpreter, **kwargs\n        )\n        ...\n\n    def predict_action_probabilities(\n        self,\n        tracker: DialogueStateTracker,\n        domain: Domain,\n        interpreter: NaturalLanguageInterpreter,\n        **kwargs: Any,\n    ) -> PolicyPrediction:\n        ...\n        tracker_state_features = self._featurize_tracker_for_e2e(\n            tracker, domain, interpreter\n        )\n        ...\n```\n\n----------------------------------------\n\nTITLE: Custom Action Input Payload Structure\nDESCRIPTION: Example JSON payload that Rasa sends to the action server when calling a custom action. Includes next_action, sender_id, tracker details, and domain configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"next_action\": \"action_tell_weather\",\n    \"sender_id\": \"2687378567977106\",\n    \"tracker\": {\n        \"sender_id\": \"2687378567977106\",\n        \"slots\": {\n            \"location\": null,\n            \"temperature\": null\n        },\n        \"latest_message\": {\n            \"text\": \"/ask_weather\",\n            \"intent\": {\n                \"name\": \"ask_weather\",\n                \"confidence\": 1\n            },\n            \"intent_ranking\": [\n                {\n                    \"name\": \"ask_weather\",\n                    \"confidence\": 1\n                }\n            ],\n            \"entities\": []\n        },\n        \"latest_event_time\": 1599850576.655345,\n        \"followup_action\": null,\n        \"paused\": false,\n        \"events\": [\n            {\n                \"event\": \"action\",\n                \"timestamp\": 1599850576.654908,\n                \"name\": \"action_session_start\",\n                \"policy\": null,\n                \"confidence\": null\n            },\n            {\n                \"event\": \"session_started\",\n                \"timestamp\": 1599850576.654916\n            },\n            {\n                \"event\": \"action\",\n                \"timestamp\": 1599850576.654928,\n                \"name\": \"action_listen\",\n                \"policy\": null,\n                \"confidence\": null\n            },\n            {\n                \"event\": \"user\",\n                \"timestamp\": 1599850576.655345,\n                \"text\": \"/ask_weather\",\n                \"parse_data\": {\n                    \"text\": \"/ask_weather\",\n                    \"intent\": {\n                        \"name\": \"ask_weather\",\n                        \"confidence\": 1\n                    },\n                    \"intent_ranking\": [\n                        {\n                            \"name\": \"ask_weather\",\n                            \"confidence\": 1\n                        }\n                    ],\n                    \"entities\": []\n                },\n                \"input_channel\": \"facebook\",\n                \"message_id\": \"3f2f2317dada4908b7a841fd3eab6bf9\",\n                \"metadata\": {}\n            }\n        ],\n        \"latest_input_channel\": \"facebook\",\n        \"active_form\": {},\n        \"latest_action_name\": \"action_listen\"\n    },\n    \"domain\": {\n        \"config\": {\n            \"store_entities_as_slots\": true\n        },\n        \"session_config\": {\n            \"session_expiration_time\": 60,\n            \"carry_over_slots_to_new_session\": true\n        },\n        \"intents\": [\n            {\n                \"greet\": {\n                    \"use_entities\": true\n                }\n            },\n            {\n                \"ask_weather\": {\n                    \"use_entities\": true\n                }\n            }\n        ],\n        \"entities\": [],\n        \"slots\": {\n            \"location\": {\n                \"type\": \"rasa.core.slots.UnfeaturizedSlot\",\n                \"initial_value\": null,\n                \"auto_fill\": true\n            },\n            \"temperature\": {\n                \"type\": \"rasa.core.slots.UnfeaturizedSlot\",\n                \"initial_value\": null,\n                \"auto_fill\": true\n            }\n        },\n        \"responses\": {\n            \"utter_greet\": [\n                {\n                    \"text\": \"Hey! How are you?\"\n                }\n            ]\n        },\n        \"actions\": [\n            \"action_tell_weather\",\n            \"utter_greet\"\n        ],\n        \"forms\": []\n    },\n    \"version\": \"2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rasa Project\nDESCRIPTION: Initializes a new Rasa project with the necessary directory structure and default configuration files.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/microsoft-luis-to-rasa.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa init\n```\n\n----------------------------------------\n\nTITLE: Accessing Rasa API with Token Authentication\nDESCRIPTION: Example of how to make a curl request to the Rasa API using token-based authentication. The token is passed as a query parameter.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/http-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XGET localhost:5005/conversations/default/tracker?token=thisismysecret\n```\n\n----------------------------------------\n\nTITLE: Configuring RegexFeaturizer in Rasa Pipeline\nDESCRIPTION: Basic configuration for the RegexFeaturizer component in a Rasa pipeline. This shows how to set case sensitivity and word boundary options, which are important for different language processing requirements.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"RegexFeaturizer\"\n  # Text will be processed with case sensitive as default\n  \"case_sensitive\": True\n  # use match word boundaries for lookup table\n  \"use_word_boundaries\": True\n```\n\n----------------------------------------\n\nTITLE: Story with Form Handling in Rasa\nDESCRIPTION: Demonstrates how to use forms in stories, including form activation and completion steps.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_15\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: story with a form\n  steps:\n  - intent: find_restaurant\n  - action: restaurant_form\n  - active_loop: restaurant_form\n  - active_loop: null\n  - action: utter_restaurant_found\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Metadata in NLU Component\nDESCRIPTION: This Python snippet demonstrates how to access message and intent example metadata within a custom NLU component's `process` method. The `message.get(\"metadata\")` call retrieves the metadata dictionary, allowing access to specific metadata entries like `intent` and `example`. This allows custom components to leverage additional information associated with the user's input during processing.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python\n# in your component class\n\n    def process(self, message: Message, **kwargs: Any) -> None:\n        metadata = message.get(\"metadata\")\n        print(metadata.get(\"intent\"))\n        print(metadata.get(\"example\"))\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Rasa NLU with a Held-Out Test Set\nDESCRIPTION: Tests the NLU model against a held-out test set to evaluate its performance on unseen data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrasa test nlu\n    --nlu train_test_split/test_data.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Event Broker with SASL PLAINTEXT in Rasa Endpoints YAML\nDESCRIPTION: YAML configuration for adding a Kafka event broker with SASL PLAINTEXT security protocol to the Rasa endpoints file. Specifies broker type, security settings, topic, and client details.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: kafka\n  security_protocol: SASL_PLAINTEXT\n  topic: topic\n  url: localhost:9092\n  client_id: kafka-python-rasa\n  sasl_username: username\n  sasl_password: password\n  sasl_mechanism: PLAIN\n```\n\n----------------------------------------\n\nTITLE: Configuring NLG Server with Authentication\nDESCRIPTION: Extended configuration for the NLG server including authentication options like custom headers, tokens, and basic authentication credentials in the endpoints.yml file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlg.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nnlg:\n  url: http://localhost:5055/nlg\n  # \n  # You can also specify additional parameters, if you need them:\n  # headers:\n  #   my-custom-header: value\n  # token: \"my_authentication_token\"  # will be passed as a GET parameter\n  # basic_auth:\n  #   username: user\n  #   password: pass\n```\n\n----------------------------------------\n\nTITLE: Configuring List Slot in Rasa YAML\nDESCRIPTION: Example configuration for a list slot type in Rasa that stores lists of values. This example creates a shopping_items slot that is filled from an entity called shopping_item.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  shopping_items:\n    type: list\n    mappings:\n    - type: from_entity\n      entity: shopping_item\n```\n\n----------------------------------------\n\nTITLE: Defining from_text slot mapping in Rasa\nDESCRIPTION: This snippet demonstrates how to define a `from_text` slot mapping in the `domain.yml` file. The `from_text` mapping uses the text of the last user utterance to fill the specified slot. It also shows how to include and exclude intents from slot filling.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_20\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  slot_name:\n    type: text\n    mappings:\n    - type: from_text\n      intent: intent_name\n      not_intent: excluded_intent\n```\n\n----------------------------------------\n\nTITLE: Handling Unhappy Paths with Rules in Rasa Forms\nDESCRIPTION: Rule example showing how to handle interruptions during form filling, such as users making chitchat, and returning to the form afterward.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n- rule: Example of an unhappy path\n  condition:\n  # Condition that form is active.\n  - active_loop: restaurant_form\n  steps:\n  # This unhappy path handles the case of an intent `chitchat`.\n  - intent: chitchat\n  - action: utter_chitchat\n  # Return to form after handling the `chitchat` intent\n  - action: restaurant_form\n  - active_loop: restaurant_form\n```\n\n----------------------------------------\n\nTITLE: Loading Rasa Model from Local Disk\nDESCRIPTION: Commands demonstrating how to load a Rasa model from a local file path or directory. When specifying a directory, Rasa will automatically load the most recently trained model.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --model models/20190506-100418.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Custom Action Output Response Structure\nDESCRIPTION: Example JSON response that the action server should return to Rasa after executing a custom action. Shows how to set a slot value through events.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"events\": [\n            {\n                \"event\": \"slot\",\n                \"timestamp\": null,\n                \"name\": \"temperature\",\n                \"value\": \"30\"\n            }\n        ],\n        \"responses\": []\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-turn Conversation Story in Rasa\nDESCRIPTION: A story defining a multi-turn greeting interaction where the bot responds to a greeting, asks how the user is doing, and then responds to the user's answer.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n - story: Greeting and ask user how they're doing\n   steps:\n   - intent: greet\n   - action: utter_greet\n   - action: utter_ask_how_doing\n   - intent: doing_great\n   - action: utter_happy\n```\n\n----------------------------------------\n\nTITLE: Providing Default Configuration for a Policy in Rasa 3.0\nDESCRIPTION: Illustrates how to provide a default configuration for a custom policy in Rasa 3.0 using a static method instead of constructor defaults.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict, Text, Any\nfrom rasa.core.policies.policy import Policy\n\nclass MyPolicy(Policy):\n\n    def __init__(self, config: Dict[Text, Any]) -> None:\n        ...\n\n    @staticmethod\n    def get_default_config() -> Dict[Text, Any]:\n        return {\"key1\": \"value1\"}\n```\n\n----------------------------------------\n\nTITLE: Multi-Intent NLU Examples\nDESCRIPTION: Training examples for a combined intent 'check_balances+transfer_money', which helps the model handle messages that express multiple intents simultaneously. This allows for more natural conversation handling.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nnlu:\n- intent: check_balances+transfer_money\n  examples: |\n    - How much money do I have? I want to transfer some to savings.\n    - What's the balance on my account? I need to transfer some so I want to know how much I have\n```\n\n----------------------------------------\n\nTITLE: Static Custom Slot Configuration - YAML\nDESCRIPTION: Configuration for a slot that will only be modified by custom actions rather than being updated every turn.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  handoff_completed:\n    type: bool\n    initial_value: false\n    mappings:\n    - type: custom\n```\n\n----------------------------------------\n\nTITLE: Selective Entity Usage Configuration\nDESCRIPTION: YAML configuration showing how to selectively use or ignore specific entities for different intents.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nintents:\n- greet:\n    use_entities:\n      - name\n      - first_name\n- farewell:\n    ignore_entities:\n      - location\n      - age\n      - last_name\n```\n\n----------------------------------------\n\nTITLE: Configuring KeywordIntentClassifier in Rasa\nDESCRIPTION: This YAML configuration shows how to configure the `KeywordIntentClassifier` in a Rasa pipeline.  The key parameter here is `case_sensitive`, which determines whether the keyword matching is case-sensitive or not.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_21\n\nLANGUAGE: yaml-rasa\nCODE:\n```\n\"pipeline:\\n- name: \\\"KeywordIntentClassifier\\\"\\n    case_sensitive: True\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Slot Value in Python using Rasa SDK\nDESCRIPTION: Creates a SlotSet event to set a slot value in a Rasa conversation. This example sets the 'name' slot to 'Mary'.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nevt = SlotSet(key = \"name\", value = \"Mary\")\n```\n\n----------------------------------------\n\nTITLE: Using Checkpoints in Rasa Stories\nDESCRIPTION: Example demonstrating how to use checkpoints to modularize stories and create reusable conversation flows between different story fragments.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/stories.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: beginning of flow\n  steps:\n  - intent: greet\n  - action: action_ask_user_question\n  - checkpoint: check_asked_question\n\n- story: handle user affirm\n  steps:\n  - checkpoint: check_asked_question\n  - intent: affirm\n  - action: action_handle_affirmation\n  - checkpoint: check_flow_finished\n\n- story: handle user deny\n  steps:\n  - checkpoint: check_asked_question\n  - intent: deny\n  - action: action_handle_denial\n  - checkpoint: check_flow_finished\n\n- story: finish flow\n  steps:\n  - checkpoint: check_flow_finished\n  - intent: goodbye\n  - action: utter_goodbye\n```\n\n----------------------------------------\n\nTITLE: Defining a Reminder Reaction in Rasa - Python\nDESCRIPTION: This snippet defines a custom action in Python that enables the bot to remind users to call someone based on extracted entities. It utilizes the Rasa framework and the CollectingDispatcher to send messages back to users.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/reaching-out-to-user.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ActionReactToReminder(Action):\n    \"\"\"Reminds the user to call someone.\"\"\"\n\n    def name(self) -> Text:\n        return \"action_react_to_reminder\"\n\n    async def run(\n        self,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> List[Dict[Text, Any]]:\n\n        name = next(tracker.get_slot(\"PERSON\"), \"someone\")\n        dispatcher.utter_message(f\"Remember to call {name}!\")\n\n        return []\n```\n\n----------------------------------------\n\nTITLE: Configuring FallbackClassifier in Rasa\nDESCRIPTION: Example YAML configuration for setting up a fallback action using the FallbackClassifier in Rasa. This rule triggers when the NLU confidence is low, asking the user to rephrase their message.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n\n- rule: Ask the user to rephrase in case of low NLU confidence\n  steps:\n  - intent: nlu_fallback\n  - action: utter_please_rephrase\n```\n\n----------------------------------------\n\nTITLE: Configuring SpaCy Language Model\nDESCRIPTION: YAML configuration for the SpaCy language model initialization component with settings for model loading and case sensitivity.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"SpacyNLP\"\n  # language model to load\n  model: \"en_core_web_md\"\n\n  # when retrieving word vectors, this will decide if the casing\n  # of the word is relevant. E.g. `hello` and `Hello` will\n  # retrieve the same vector, if set to `False`.\n  case_sensitive: False\n```\n\n----------------------------------------\n\nTITLE: End-to-End Story with Bot Response in Rasa\nDESCRIPTION: Shows how to include direct bot responses in stories using the bot key.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_24\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: story with an end-to-end response\n  steps:\n  - intent: greet\n    entities:\n    - name: Ivan\n  - bot: Hello, a person with a name!\n```\n\n----------------------------------------\n\nTITLE: Customizing Action_Session_Start to Preserve Specific Slots\nDESCRIPTION: Implementation of a custom action_session_start that selectively carries over only the user's name and phone number slots between sessions instead of all slots.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/default-actions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Text, Dict, List\nfrom rasa_sdk import Action, Tracker\nfrom rasa_sdk.events import SlotSet, SessionStarted, ActionExecuted, EventType\n\n\nclass ActionSessionStart(Action):\n    def name(self) -> Text:\n        return \"action_session_start\"\n\n    @staticmethod\n    def fetch_slots(tracker: Tracker) -> List[EventType]:\n        \"\"\"Collect slots that contain the user's name and phone number.\"\"\"\n\n        slots = []\n        for key in (\"name\", \"phone_number\"):\n            value = tracker.get_slot(key)\n            if value is not None:\n                slots.append(SlotSet(key=key, value=value))\n        return slots\n\n    async def run(\n      self, dispatcher, tracker: Tracker, domain: Dict[Text, Any]\n    ) -> List[Dict[Text, Any]]:\n\n        # the session should begin with a `session_started` event\n        events = [SessionStarted()]\n\n        # any slots that should be carried over should come after the\n        # `session_started` event\n        events.extend(self.fetch_slots(tracker))\n\n        # an `action_listen` should be added at the end as a user message follows\n        events.append(ActionExecuted(\"action_listen\"))\n\n        return events\n```\n\n----------------------------------------\n\nTITLE: Configuring TEDPolicy with Max History in Rasa\nDESCRIPTION: This snippet demonstrates how to configure the TEDPolicy in the Rasa config file, setting the max_history parameter to control how many steps in a dialogue the model considers when deciding the next action.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/contextual-conversations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n  - name: \"TEDPolicy\"\n    max_history: 5\n```\n\n----------------------------------------\n\nTITLE: Creating Stories for Contextual Interjections in Rasa\nDESCRIPTION: This YAML configuration defines stories for handling context-specific interjections during form filling. It shows examples for two scenarios: when a user asks for explanation during cuisine slot filling and during number of people slot filling, with different responses for each context.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/unexpected-input.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n- story: cuisine interjection\n  steps:\n  - intent: request_restaurant\n  - action: restaurant_form\n  - active_loop: restaurant_form\n  - slot_was_set:\n    - requested_slot: cuisine\n  - intent: explain\n  - action: utter_explain_cuisine\n  - action: restaurant_form\n\n- story: number of people interjection\n  steps:\n  - intent: request_restaurant\n  - action: restaurant_form\n  - active_loop: restaurant_form\n  - slot_was_set:\n    - requested_slot: num_people\n  - intent: explain\n  - action: utter_explain_num_people\n  - action: restaurant_form\n```\n\n----------------------------------------\n\nTITLE: Training a Rasa Open Source Model\nDESCRIPTION: Command to train a Rasa model containing both NLU and Core components. The trained model will be stored in the /models directory as a zipped file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/reminderbot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa train\n```\n\n----------------------------------------\n\nTITLE: Entity Roles and Groups Configuration\nDESCRIPTION: Example showing how to configure entities with roles and groups.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n   - city:            # custom entity extracted by DIETClassifier\n       roles:\n       - from\n       - to\n   - topping:         # custom entity extracted by DIETClassifier\n       groups:\n       - 1\n       - 2\n   - size:            # custom entity extracted by DIETClassifier\n       groups:\n       - 1\n       - 2\n```\n\n----------------------------------------\n\nTITLE: Model Persistence for Custom Graph Components in Rasa\nDESCRIPTION: Example of how to use model_storage and resource parameters in create and load methods for persisting data in custom graph components.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import Any, Dict, Text\n\nfrom rasa.engine.graph import GraphComponent, ExecutionContext\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.engine.storage.storage import ModelStorage\n\nclass MyComponent(GraphComponent):\n    @classmethod\n    def create(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n    ) -> MyComponent:\n        ...\n\n    @classmethod\n    def load(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n        **kwargs: Any\n    ) -> MyComponent:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring RulePolicy for Low Action Confidence in Rasa\nDESCRIPTION: This configuration sets up the RulePolicy to handle cases when action confidence is below a threshold, triggering a fallback action.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npolicies:\n- name: RulePolicy\n  # Confidence threshold for the `core_fallback_action_name` to apply.\n  # The action will apply if no other action was predicted with\n  # a confidence >= core_fallback_threshold\n  core_fallback_threshold: 0.4\n  core_fallback_action_name: \"action_default_fallback\"\n  enable_fallback_prediction: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Featurizers for DIET Classifier and Response Selector\nDESCRIPTION: Example configuration showing how to set up featurizers with different aliases and specify which featurizers should be used by different components. The DIET Classifier uses all features while Response Selector only uses ConveRT and CountVectors features.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\n\npipeline:\n  - name: ConveRTTokenizer\n  - name: ConveRTFeaturizer\n    alias: convert\n  - name: RegexFeaturizer\n    alias: regex\n  - name: LexicalSyntacticFeaturizer\n    alias: lexical\n  - name: CountVectorsFeaturizer\n    alias: cvf\n  - name: DIETClassifier\n  - name: ResponseSelector\n    featurizers: [convert, cvf]\n```\n\n----------------------------------------\n\nTITLE: Single Intent NLU Examples\nDESCRIPTION: Training examples for two separate intents: check_balances and transfer_money. These examples define what the model should learn to recognize as distinct user intents.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nnlu:\n- intent: check_balances\n  examples: |\n    - How much money do I have?\n    - what's my account balance?\n\n- intent: transfer_money\n  examples: |\n    - I want to transfer money to my savings account\n    - transfer money\n```\n\n----------------------------------------\n\nTITLE: Testing Rasa NLU with Cross-Validation and Custom Folds\nDESCRIPTION: Performs cross-validation with a specific number of folds, allowing control over the train/test split ratio for NLU evaluation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrasa test nlu\n    --nlu data/nlu\n    --cross-validation\n    --folds 5\n```\n\n----------------------------------------\n\nTITLE: Resetting All Slots in Python using Rasa SDK\nDESCRIPTION: Creates an AllSlotsReset event to reset all slots in a Rasa conversation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nevt = AllSlotsReset()\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Credentials in Rasa\nDESCRIPTION: Example configuration for adding Telegram credentials to your credentials.yml file. Includes access token, verify parameter, and webhook URL that Telegram will use to send messages to your Rasa server.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/telegram.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\ntelegram:\n  access_token: \"490161424:AAGlRxinBRtKGb21_rlOEMtDFZMXBl6EC0o\"\n  verify: \"your_bot\"\n  webhook_url: \"https://your_url.com/webhooks/telegram/webhook\"\n```\n\n----------------------------------------\n\nTITLE: Entity Definition in Markdown Format\nDESCRIPTION: Demonstrates the new markdown format for defining entities with roles and groups in Rasa training data. Shows how to specify entity type, role, group and value.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\n[LA]{\"entity\": \"location\", \"role\": \"city\", \"group\": \"CA\", \"value\": \"Los Angeles\"}\n```\n\n----------------------------------------\n\nTITLE: Annotating Entities with Various Methods in Rasa\nDESCRIPTION: Example showing multiple ways to annotate entities in Rasa NLU training data, including simple annotation, explicit entity specification, and using entity values (synonyms) in the same annotation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- intent: check_balance\n  examples: |\n    - how much do I have on my [savings](account) account\n    - how much money is in my [checking]{\"entity\": \"account\"} account\n    - What's the balance on my [credit card account]{\"entity\":\"account\",\"value\":\"credit\"}\n```\n\n----------------------------------------\n\nTITLE: Defining NLU Data for Attribute Queries in Knowledge Base\nDESCRIPTION: This example demonstrates how to annotate training data for queries about specific attributes of objects in the knowledge base.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nintents:\n- intent: query_knowledge_base\n  examples: |\n    - What is the [cuisine](attribute) of [Berlin Burrito Company](restaurant)?\n```\n\n----------------------------------------\n\nTITLE: Overwriting Default Actions with Custom Implementation in Python\nDESCRIPTION: Shows how to create a custom action that overrides a default action by implementing the same name. This example demonstrates overriding action_restart with custom behavior.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/default-actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ActionRestart(Action):\n\n    def name(self) -> Text:\n        return \"action_restart\"\n\n    async def run(\n        self, dispatcher, tracker: Tracker, domain: Dict[Text, Any]\n    ) -> List[Dict[Text, Any]]:\n\n        # custom behavior\n\n        return [...]\n```\n\n----------------------------------------\n\nTITLE: Adding Media Attachments in Telegram with Rasa\nDESCRIPTION: Example of sending a sticker through Telegram using Rasa's custom response format. Shows how to include an external media file in your bot responses.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/telegram.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\n  utter_giraffe_sticker:\n  - text: Here's my giraffe sticker!\n    custom:\n      sticker: \"https://github.com/TelegramBots/book/raw/master/src/docs/sticker-fred.webp\"\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Text Response with Events in Rasa\nDESCRIPTION: This JSON snippet demonstrates how to send a simple text response while also setting a slot value in the conversation. The response includes the 'events' array for tracking state changes and a 'responses' array with a text message.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/actions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"events\": [\n            {\n                \"event\": \"slot\",\n                \"timestamp\": null,\n                \"name\": \"temperature\",\n                \"value\": \"30\"\n            }\n        ],\n        \"responses\": [\n            {\n                \"text\": \"This is your weather forecast!\"\n            }\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditional Responses Based on Different Slot Values\nDESCRIPTION: This example shows how to define multiple conditional response variations based on different slot values. If multiple conditions are satisfied, Rasa will choose randomly from the eligible variations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_greet:\n    - condition:\n        - type: slot\n          name: logged_in\n          value: true\n      text: \"Hey, {name}. Nice to see you again! How are you?\"\n\n    - condition:\n        - type: slot\n          name: eligible_for_upgrade\n          value: true\n      text: \"Welcome, {name}. Did you know you are eligible for a free upgrade?\"\n\n    - text: \"Welcome. How is your day going?\"\n```\n\n----------------------------------------\n\nTITLE: Defining Knowledge Base Story in Rasa\nDESCRIPTION: This code defines a conversation story that includes the knowledge base query intent and action, creating a path for knowledge base interactions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: knowledge base happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: query_knowledge_base\n  - action: action_query_knowledge_base\n  - intent: goodbye\n  - action: utter_goodbye\n```\n\n----------------------------------------\n\nTITLE: Using Checkpoints for Modular Story Design in Rasa\nDESCRIPTION: Stories using checkpoints to modularize conversation flows. This example shows how to reuse a feedback collection flow at the end of different conversations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: beginning of conversation\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: goodbye\n  - action: utter_goodbye\n  - checkpoint: ask_feedback\n\n- story: user provides feedback\n  steps:\n  - checkpoint: ask_feedback\n  - action: utter_ask_feedback\n  - intent: inform\n  - action: utter_thank_you\n  - action: utter_anything_else\n\n- story: user doesn't have feedback\n  steps:\n  - checkpoint: ask_feedback\n  - action: utter_ask_feedback\n  - intent: deny\n  - action: utter_no_problem\n  - action: utter_anything_else\n```\n\n----------------------------------------\n\nTITLE: Initializing Rasa Project\nDESCRIPTION: Creates a new Rasa project with the initial directory structure and template files.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/facebook-wit-ai-to-rasa.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa init\n```\n\n----------------------------------------\n\nTITLE: Configuring LexicalSyntacticFeaturizer in Rasa\nDESCRIPTION: This configuration specifies the features to be extracted by the LexicalSyntacticFeaturizer on user messages. It uses a sliding window approach to create features based on the current, previous, and next tokens. The default configuration is included, allowing for basic feature extraction without additional specifications.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n  - name: LexicalSyntacticFeaturizer\n    \"features\": [\n      [\"low\", \"title\", \"upper\"],\n      [\"BOS\", \"EOS\", \"low\", \"upper\", \"title\", \"digit\"],\n      [\"low\", \"title\", \"upper\"],\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Event Broker in endpoints.yml for Rasa\nDESCRIPTION: Configuration example for a custom event broker in the endpoints.yml file. This configuration specifies the module path to the custom broker class along with necessary parameters such as URL and additional custom parameters.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: path.to.your.module.Class\n  url: localhost\n  a_parameter: a value\n  another_parameter: another value\n```\n\n----------------------------------------\n\nTITLE: Defining Stories with Requested Slot Handling in Rasa\nDESCRIPTION: This YAML snippet shows how to define stories in Rasa that handle the `requested_slot` slot differently depending on the user's intent. It provides examples of how to use the `requested_slot` to trigger different actions based on which slot is currently being asked from the user. The stories handle 'explain' intents when different slots are requested.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n- story: explain cuisine slot\n  steps:\n  - intent: request_restaurant\n  - action: restaurant_form\n  - active_loop: restaurant\n  - slot_was_set:\n    - requested_slot: cuisine\n  - intent: explain\n  - action: utter_explain_cuisine\n  - action: restaurant_form\n  - active_loop: null\n\n- story: explain num_people slot\n  steps:\n  - intent: request_restaurant\n  - action: restaurant_form\n  - active_loop: restaurant\n  - slot_was_set:\n    - requested_slot: cuisine\n  - slot_was_set:\n    - requested_slot: num_people\n  - intent: explain\n  - action: utter_explain_num_people\n  - action: restaurant_form\n  - active_loop: null\n```\n\n----------------------------------------\n\nTITLE: Entity Synonym Training Data Example in JSON\nDESCRIPTION: Example training data showing how entity synonyms are defined for mapping 'New York City' and 'NYC' to 'nyc'.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n      \"text\": \"I moved to New York City\",\n      \"intent\": \"inform_relocation\",\n      \"entities\": [{\n        \"value\": \"nyc\",\n        \"start\": 11,\n        \"end\": 24,\n        \"entity\": \"city\"\n      }]\n    },\n    {\n      \"text\": \"I got a new flat in NYC.\",\n      \"intent\": \"inform_relocation\",\n      \"entities\": [{\n        \"value\": \"nyc\",\n        \"start\": 20,\n        \"end\": 23,\n        \"entity\": \"city\"\n      }]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Forms with Ignored Intents in Rasa YAML\nDESCRIPTION: Example of configuring forms with the new 'ignored_intents' parameter in Rasa, which simplifies preventing specific intents from filling form slots.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nforms:\n  restaurant_form:\n    ignored_intents: chitchat\n    required_slots:\n      cuisine:\n      - type: from_entity\n        entity: cuisine\n      num_people:\n      - type: from_entity\n        entity: number\n        intent: [inform, request_restaurant]\n      feedback:\n      - type: from_entity\n        entity: feedback\n      - type: from_text\n```\n\n----------------------------------------\n\nTITLE: Example Story with Multiple Intents and Actions in Rasa\nDESCRIPTION: This snippet shows a complex story extracted from a conversation, demonstrating how the TEDPolicy can handle unexpected user behaviors and generalize to unseen conversation paths.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/contextual-conversations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n- story: Story from conversation with a2baab6c83054bfaa8d598459c659d2a on November 28th 2019\n  steps:\n  - checkpoint: STORY_START\n  - intent: greet\n  - action: action_greet_user\n  - slot_was_set:\n    - shown_privacy: true\n  - intent: ask_whoisit\n  - action: action_chitchat\n  - intent: ask_whatspossible\n  - action: action_chitchat\n  - intent: telljoke\n  - action: action_chitchat\n  - intent: how_to_get_started\n    entities:\n    - product: enterprise\n  - slot_was_set:\n    - product: enterprise\n  - action: utter_explain_enterprise\n  - action: utter_also_explain_nlucore\n  - intent: affirm\n  - action: utter_explain_nlu\n  - action: utter_explain_core\n  - action: utter_direct_to_step2\n```\n\n----------------------------------------\n\nTITLE: Resuming a Conversation in Python using Rasa SDK\nDESCRIPTION: Creates a ConversationResumed event to resume a previously paused conversation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nevt = ConversationResumed()\n```\n\n----------------------------------------\n\nTITLE: JSON Restaurant Object Structure in InMemoryKnowledgeBase\nDESCRIPTION: Example of a JSON restaurant object structure used in the InMemoryKnowledgeBase. The object contains identifying information like ID and name, along with attributes such as cuisine type, outside seating availability, and price range.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 0,\n    \"name\": \"Donath\",\n    \"cuisine\": \"Italian\",\n    \"outside-seating\": true,\n    \"price-range\": \"mid-range\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using utter_message with JSON Payload in Rasa\nDESCRIPTION: Example of using the CollectingDispatcher.utter_message method with a custom JSON payload to create a channel-specific response. This example creates a date picker interface for Slack.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-dispatcher.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndate_picker = {\n  \"blocks\":[\n    {\n      \"type\": \"section\",\n      \"text\":{\n        \"text\": \"Make a bet on when the world will end:\",\n        \"type\": \"mrkdwn\"\n      },\n      \"accessory\":\n      {\n        \"type\": \"datepicker\",\n        \"initial_date\": \"2019-05-21\",\n        \"placeholder\":\n        {\n          \"type\": \"plain_text\",\n          \"text\": \"Select a date\"\n        }\n      }\n    }\n  ]\n}\ndispatcher.utter_message(json_message = date_picker)\n```\n\n----------------------------------------\n\nTITLE: Default Non-SpaCy Pipeline Configuration\nDESCRIPTION: Recommended pipeline for languages without pre-trained word embeddings or with domain-specific terminology. This pipeline uses the CountVectorsFeaturizer to train on the provided data without relying on external embeddings.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nlanguage: en\n\npipeline:\n  - name: WhitespaceTokenizer\n  - name: RegexFeaturizer\n  - name: LexicalSyntacticFeaturizer\n  - name: CountVectorsFeaturizer\n  - name: CountVectorsFeaturizer\n    analyzer: \"char_wb\"\n    min_ngram: 1\n    max_ngram: 4\n  - name: DIETClassifier\n  - name: EntitySynonymMapper\n  - name: ResponseSelector\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Slack Configuration Options for Rasa\nDESCRIPTION: This YAML snippet provides a complete overview of all available configuration parameters for Slack integration in Rasa. It includes options for channel, token, signing secret, proxy, retry headers, error handling, threading, and conversation granularity.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/slack.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nslack:\n  slack_channel: \"CA003L0XZ\"    # channel ID, not a channel name!\n  slack_token: \"xoxb-XXX\"       # token obtained in the next step\n  slack_signing_secret: \"YYY\"   # secret obtained in the next step\n  proxy: \"http://myProxy.online\"  # Proxy Server to route your traffic through. This configuration is optional. Only HTTP proxies are supported\n  slack_retry_reason_header: \"x-slack-retry-reason\"  # Slack HTTP header name indicating reason that slack send retry request. This configuration is optional.\n  slack_retry_number_header: \"x-slack-retry-num\"  # Slack HTTP header name indicating the attempt number. This configuration is optional.\n  errors_ignore_retry: None  # Any error codes given by Slack included in this list will be ignored. Error codes are listed [here](https://api.slack.com/events-api#errors).\n  use_threads: False  # If set to True, bot responses will appear as a threaded message in Slack. This configuration is optional and set to False by default.\n  conversation_granularity: \"sender\" # sender allows 1 conversation per user (across channels), channel allows 1 conversation per user per channel, thread allows 1 conversation per user per thread. This configuration is optional and set to sender by default.\n```\n\n----------------------------------------\n\nTITLE: Adding Knowledge Base Action to Rasa Domain\nDESCRIPTION: This snippet shows how to register the knowledge base action in the Rasa domain file so it can be used in conversations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nactions:\n- action_query_knowledge_base\n```\n\n----------------------------------------\n\nTITLE: Configuring RegexFeaturizer for Incremental Training\nDESCRIPTION: Configuration for RegexFeaturizer that enables incremental training by specifying additional pattern slots. This ensures sparse features maintain a fixed size during incremental training sessions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: RegexFeaturizer\n  number_additional_patterns: 10\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Rasa Pipeline Configuration\nDESCRIPTION: This YAML configuration defines a standard pipeline that can be used for training Rasa models in whitespace tokenizable languages.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/language-support.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Action Server\nDESCRIPTION: Command to start the Rasa action server which handles the custom actions for querying the knowledge base.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/knowledgebasebot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa run actions\n```\n\n----------------------------------------\n\nTITLE: Using OR Statements in Rasa Stories\nDESCRIPTION: Two separate stories for newsletter signup with different confirmation intents, which could be combined using OR statements to reduce redundancy.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: newsletter signup\n  steps:\n  - intent: signup_newsletter\n  - action: utter_ask_confirm_signup\n  - intent: affirm\n  - action: action_signup_newsletter\n\n- story: newsletter signup, confirm via thanks\n  steps:\n  - intent: signup_newsletter\n  - action: utter_ask_confirm_signup\n  - intent: thanks\n  - action: action_signup_newsletter\n```\n\n----------------------------------------\n\nTITLE: Configuring from_entity Slot Mapping in Rasa YAML\nDESCRIPTION: Example configuration for slot mappings using the from_entity type. Shows how to define entity, role, group, and intent constraints for slot mapping.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_18\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nentities:\n- entity_name\nslots:\n  slot_name:\n    type: any\n    mappings:\n    - type: from_entity\n      entity: entity_name\n      role: role_name\n      group: group name\n      intent: intent_name\n      not_intent: excluded_intent\n```\n\n----------------------------------------\n\nTITLE: Branching Logic with Slots in Rasa Stories\nDESCRIPTION: Stories implementing branching logic using a 'raining' slot to determine different response paths after checking for rain.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: It's raining now\n  steps:\n  - intent: check_for_rain\n  - action: action_check_for_rain\n  - slot_was_set:\n    - raining: true\n  - action: utter_is_raining\n  - action: utter_bring_umbrella\n\n- story: It isn't raining now\n  steps:\n  - intent: check_for_rain\n  - action: action_check_for_rain\n  - slot_was_set:\n    - raining: false\n  - action: utter_not_raining\n  - action: utter_no_umbrella_needed\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Custom Slot Module in Rasa\nDESCRIPTION: Example file structure showing how to organize a custom slot class as a separate Python module within a Rasa project.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n└── rasa_bot\n    ├── addons\n    │   ├── __init__.py\n    │   └── my_custom_slots.py\n    ├── config.yml\n    ├── credentials.yml\n    ├── data\n    ├── domain.yml\n    ├── endpoints.yml\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom Slot Type in Domain YAML\nDESCRIPTION: Configuration in domain.yaml that references a custom slot type using its module path. This example shows how to use the NumberOfPeopleSlot class from a custom module.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_16\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  people:\n    type: addons.my_custom_slots.NumberOfPeopleSlot\n    influence_conversation: true\n    mappings:\n    - type: custom\n```\n\n----------------------------------------\n\nTITLE: Running Rasa on a Specific Network Interface in Bash\nDESCRIPTION: This command runs the Rasa server on port 5005 and binds it to a specific IP address (192.168.69.150). This is useful when working with VPN interfaces to make the assistant accessible to internet-facing machines.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/messaging-and-voice-channels.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa run -p 5005 -i 192.168.69.150\n```\n\n----------------------------------------\n\nTITLE: Setting Response Variables in Custom Actions with Rasa SDK\nDESCRIPTION: This Python code snippet demonstrates how to fill variables in a response using a custom action with the Rasa SDK's dispatcher.utter_message method.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.utter_message(\n    template=\"utter_greet\",\n    name=\"Sara\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Pika Event Broker in Python\nDESCRIPTION: Python code to programmatically initialize a Pika event broker and connect it to a Rasa tracker store. Shows how to create the broker, connect asynchronously, and attach it to an in-memory tracker store.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom rasa.core.brokers.pika import PikaEventBroker\nfrom rasa.core.tracker_store import InMemoryTrackerStore\n\npika_broker = PikaEventBroker('localhost',\n                              'username',\n                              'password',\n                              queues=['rasa_events'],\n                              event_loop=event_loop\n                              )\nasyncio.run(pika_broker.connect())\n\ntracker_store = InMemoryTrackerStore(domain=domain, event_broker=pika_broker)\n```\n\n----------------------------------------\n\nTITLE: Configuring No User Input Detection in VoiceAI Connect\nDESCRIPTION: Custom message configuration that sets up inactivity detection parameters. Will trigger an event if the user stays silent for more than the specified timeout.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/audioodes-voiceai-connect.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  utter_config_no_user_input:\n  - custom:\n      type: event\n      name: config\n      sessionParams:\n        # If user stays silent for 5 seconds or more, the notification will be sent\n        userNoInputTimeoutMS: 5000\n        # If you want to allow for more than one notification during a call\n        userNoInputRetries: 2\n        # Enable the noUserInput notification\n        userNoInputSendEvent: true\n```\n\n----------------------------------------\n\nTITLE: NLG Server Request Format in JSON\nDESCRIPTION: Example of the JSON request body structure that Rasa sends to an external NLG server when it needs to generate a response. The request includes response name, variation ID, tracker information, and channel details.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlg.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\":\"utter_what_can_do\",\n  \"arguments\":{\n    \n  },\n  \"id\": \"<response_variation_id>\",\n  \"tracker\":{\n    \"sender_id\":\"user_0\",\n    \"slots\":{\n      \n    },\n    \"latest_message\":{\n      \"intent\":{\n        \"id\":3014457480322877053,\n        \"name\":\"greet\",\n        \"confidence\":0.9999994039535522\n      },\n      \"entities\":[\n        \n      ],\n      \"text\":\"Hello\",\n      \"message_id\":\"94838d6f49ff4366b254b6f6d23a90cf\",\n      \"metadata\":{\n        \n      },\n      \"intent_ranking\":[\n        {\n          \"id\":3014457480322877053,\n          \"name\":\"greet\",\n          \"confidence\":0.9999994039535522\n        },\n        {\n          \"id\":8842445304628198686,\n          \"name\":\"ask_forget_reminders\",\n          \"confidence\":5.675940428773174e-07\n        },\n        {\n          \"id\":-2566831912141022859,\n          \"name\":\"bye\",\n          \"confidence\":3.418941929567154e-08\n        },\n        {\n          \"id\":8340513453672591403,\n          \"name\":\"ask_id\",\n          \"confidence\":2.5274500714544956e-08\n        },\n        {\n          \"id\":5822154213939471096,\n          \"name\":\"ask_remind_call\",\n          \"confidence\":2.4177523982871207e-08\n        }\n      ]\n    },\n    \"latest_event_time\":1599476297.694504,\n    \"followup_action\":null,\n    \"paused\":false,\n    \"events\":[\n      {\n        \"event\":\"action\",\n        \"timestamp\":1599476297.68784,\n        \"name\":\"action_session_start\",\n        \"policy\":null,\n        \"confidence\":null\n      },\n      {\n        \"event\":\"session_started\",\n        \"timestamp\":1599476297.6878452\n      },\n      {\n        \"event\":\"action\",\n        \"timestamp\":1599476297.6878562,\n        \"name\":\"action_listen\",\n        \"policy\":null,\n        \"confidence\":null\n      },\n      {\n        \"event\":\"user\",\n        \"timestamp\":1599476297.694504,\n        \"text\":\"Hello\",\n        \"parse_data\":{\n          \"intent\":{\n            \"id\":3014457480322877053,\n            \"name\":\"greet\",\n            \"confidence\":0.9999994039535522\n          },\n          \"entities\":[\n            \n          ],\n          \"text\":\"Hello\",\n          \"message_id\":\"94838d6f49ff4366b254b6f6d23a90cf\",\n          \"metadata\":{\n            \n          },\n          \"intent_ranking\":[\n            {\n              \"id\":3014457480322877053,\n              \"name\":\"greet\",\n              \"confidence\":0.9999994039535522\n            },\n            {\n              \"id\":8842445304628198686,\n              \"name\":\"ask_forget_reminders\",\n              \"confidence\":5.675940428773174e-07\n            },\n            {\n              \"id\":-2566831912141022859,\n              \"name\":\"bye\",\n              \"confidence\":3.418941929567154e-08\n            },\n            {\n              \"id\":8340513453672591403,\n              \"name\":\"ask_id\",\n              \"confidence\":2.5274500714544956e-08\n            },\n            {\n              \"id\":5822154213939471096,\n              \"name\":\"ask_remind_call\",\n              \"confidence\":2.4177523982871207e-08\n            }\n          ]\n        },\n        \"input_channel\":\"rest\",\n        \"message_id\":\"94838d6f49ff4366b254b6f6d23a90cf\",\n        \"metadata\":{\n          \n        }\n      }\n    ],\n    \"latest_input_channel\":\"rest\",\n    \"active_loop\":{\n      \n    },\n    \"latest_action_name\":\"action_listen\"\n  },\n  \"channel\":{\n    \"name\":\"collector\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Test Stories in Rasa\nDESCRIPTION: Example of a test story that validates both message classification and action predictions, including entity annotations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_21\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: A basic end-to-end test\n  steps:\n  - user: |\n     hey\n    intent: greet\n  - action: utter_ask_howcanhelp\n  - user: |\n     show me [chinese]{\"entity\": \"cuisine\"} restaurants\n    intent: inform\n  - action: utter_ask_location\n  - user: |\n     in [Paris]{\"entity\": \"location\"}\n    intent: inform\n  - action: utter_ask_price\n```\n\n----------------------------------------\n\nTITLE: Sample Output for LogisticRegressionClassifier\nDESCRIPTION: This JSON structure shows the expected output for the Logistic Regression intent classifier, including both the primary intent and its ranking among other potential intents based on their confidence scores.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"intent\": {\"name\": \"greet\", \"confidence\": 0.780},\n    \"intent_ranking\": [\n        {\n            \"confidence\": 0.780,\n            \"name\": \"greet\"\n        },\n        {\n            \"confidence\": 0.140,\n            \"name\": \"goodbye\"\n        },\n        {\n            \"confidence\": 0.080,\n            \"name\": \"restaurant_search\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Response Variations in Rasa\nDESCRIPTION: This example shows how to define multiple response variations for a single response name. Rasa will randomly select one of the variations when the response is triggered.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_greet:\n  - text: \"Hey, {name}. How are you?\"\n  - text: \"Hey, {name}. How is your day going?\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymization Rules in endpoints.yml\nDESCRIPTION: Example configuration showing how to set up anonymization rules in endpoints.yml with different substitution methods for various entity types.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/pii-management.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nanonymization:\n  metadata:\n    language: en\n    model_name: en_core_web_lg\n    model_provider: spacy\n  rule_lists:\n    - id: rules_1\n      rules:\n        - entity: PERSON\n          substitution: text\n          value: John Doe\n        - entity: LOCATION\n          substitution: faker\n        - entity: CREDIT_CARD\n          substitution: faker\n        - entity: IBAN_CODE\n          substitution: faker\n    - id: rules_2\n      rules:\n        - entity: CREDIT_CARD\n          substitution: mask\n        - entity: IBAN_CODE\n          substitution: mask\n```\n\n----------------------------------------\n\nTITLE: Configuring MitieIntentClassifier in Rasa\nDESCRIPTION: This configuration sets up the MITIE intent classifier which utilizes a multi-class linear SVM for intent classification. It extracts features independently of a featurizer and is initialized simply in the pipeline.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n  - name: \"MitieIntentClassifier\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Credentials in Rasa\nDESCRIPTION: This YAML snippet shows how to set up the credentials.yml file for Slack integration in a Rasa project. It includes the Slack channel ID, bot token, and signing secret.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/slack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslack:\n  slack_channel: \"CA003L0XZ\"    # channel ID, not a channel name!\n  slack_token: \"xoxb-XXX\"       # token obtained in the next step\n  slack_signing_secret: \"YYY\"   # secret obtained in the next step\n```\n\n----------------------------------------\n\nTITLE: Running a Rasa NLU Server\nDESCRIPTION: Command to start a server with a specific NLU model. The --enable-api flag exposes the HTTP API endpoints for external services to use.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-only.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --enable-api -m models/nlu-20190515-144445.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Persisting a Trained NLU Component - Rasa 3.0\nDESCRIPTION: This snippet exemplifies how Rasa 3.0 alters the persistence model for NLU components, requiring components to manage their own persistence using the provided 'model_storage' and 'resource' parameters.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.engine.graph import GraphComponent\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.nlu.classifiers.classifier import IntentClassifier\nfrom rasa.shared.nlu.training_data.training_data import TrainingData\n\nclass MyNLUComponent(GraphComponent, IntentClassifier):\n    def train(self, training_data: TrainingData) -> Resource:\n        ...\n        self.persist()\n        return self._resource\n\n    def persist(self) -> None:\n        with self._model_storage.write_to(self._resource) as directory:\n            model_data_file = directory / \"model_data.json\"\n            rasa.shared.utils.io.dump_obj_as_json_to_file(model_data_file,\n                self.get_model_data())\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Creating Rules for FAQ and Chitchat Responses in Rasa\nDESCRIPTION: Rules configuration that defines how to handle FAQ and chitchat intents, directing them to the appropriate response actions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/chitchat-faqs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - rule: respond to FAQs\n    steps:\n    - intent: faq\n    - action: utter_faq\n  - rule: respond to chitchat\n    steps:\n    - intent: chitchat\n    - action: utter_chitchat\n```\n\n----------------------------------------\n\nTITLE: Creating Test Stories for Rasa\nDESCRIPTION: Example showing how to create test stories in a separate file with the prefix 'test_'. Test stories validate that the assistant responds correctly to specific user inputs and follows expected conversation patterns.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n- story: greet and ask language\n- steps:\n  - user: |\n      hey\n    intent: greet\n  - action: utter_greet\n  - user: |\n      what language do you speak\n    intent: faq/language\n  - action: utter_faq\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Configuration\nDESCRIPTION: Example showing how to define various entity types in the domain.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n   - PERSON           # entity extracted by SpacyEntityExtractor\n   - time             # entity extracted by DucklingEntityExtractor\n   - membership_type  # custom entity extracted by DIETClassifier\n   - priority         # custom entity extracted by DIETClassifier\n```\n\n----------------------------------------\n\nTITLE: Configuring Buttons with Entities in Rasa\nDESCRIPTION: Example showing how to pass entities through button responses in Rasa. Demonstrates passing single and multiple entities through button payloads.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_13\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_greet:\n  - text: \"Hey! Would you like to purchase motor or home insurance?\"\n    buttons:\n    - title: \"Motor insurance\"\n      payload: '/inform{{\"insurance\":\"motor\"}}'\n    - title: \"Home insurance\"\n      payload: '/inform{{\"insurance\":\"home\"}}'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Rasa Deployment to Connect with Action Server\nDESCRIPTION: This command upgrades a Rasa Helm deployment to use the Action Server connection configuration specified in rasa-values.yaml. It maintains existing deployment values while updating the Action Server connection.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nhelm upgrade -n <namespace> --reuse-values -f rasa-values.yaml \\\n  <release name> rasa/rasa\n```\n\n----------------------------------------\n\nTITLE: Adding Form Validation Action to Rasa Domain\nDESCRIPTION: Example showing how to register a custom form validation action in the domain file to enable custom validation logic.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nactions:\n- validate_restaurant_form\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Entity of a Given Type in Python\nDESCRIPTION: Code example showing how to get the first entity of a specific type from the tracker, with None as the default result if no entity is found. This pattern is useful when you only need the first occurrence of an entity rather than all matches.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-tracker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnext(tracker.get_latest_entity_values(\"my_entity_name\"), None)\n```\n\n----------------------------------------\n\nTITLE: Defining Regular Expressions for Intent Classification in Rasa\nDESCRIPTION: Example of using regular expressions with RegexFeaturizer to improve intent classification. This creates a pattern feature for recognizing the word 'help' as a standalone word in user messages.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- regex: help\n  examples: |\n    - \\bhelp\\b\n```\n\n----------------------------------------\n\nTITLE: Defining an initial value for a slot in Rasa\nDESCRIPTION: This snippet shows how to define an initial value for a slot in the `domain.yml` file. The `initial_value` parameter sets the initial value of the slot when the conversation starts or a new session begins.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_25\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  num_fallbacks:\n    type: float\n    initial_value: 0\n    mappings:\n    - type: custom\n```\n\n----------------------------------------\n\nTITLE: NLU Meta Fallback Classifier\nDESCRIPTION: This is a placeholder for a custom NLU meta fallback classifier implemented in Python. This component is an example of an advanced use case where the component learns parameters based on the output of previous classifiers. The actual implementation can be found at `docs/sources/data/test_classes/custom_graph_components/nlu_meta_fallback.py`.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python (docs/sources/data/test_classes/custom_graph_components/nlu_meta_fallback.py)\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple NLU Configurations in Rasa\nDESCRIPTION: Command to test and compare multiple NLU pipeline configurations using the rasa test command. This evaluates models on different amounts of training data with configurable runs and percentages.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrasa test nlu --nlu data/nlu.yml\n   --config config_1.yml config_2.yml\n```\n\nLANGUAGE: bash\nCODE:\n```\nrasa test nlu --nlu data/nlu.yml\n  --config config_1.yml config_2.yml\n  --runs 4 --percentages 0 25 50 70 90\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Reminder Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'reminder' event in Rasa, which schedules an intent to be triggered at a certain time in the future. This event is never automatically tracked.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"reminder\",\n  \"intent\": \"my_intent\",\n  \"entities\": {\"entity1\": \"value1\", \"entity2\": \"value2\"},\n  \"date_time\": \"2018-09-03T11:41:10.128172\",\n  \"name\": \"my_reminder\",\n  \"kill_on_user_msg\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Reminder Cancellation Rule in Rasa - YAML\nDESCRIPTION: This YAML snippet defines a rule in the Rasa framework for cancelling reminders. It ties the `ask_forget_reminders` intent to the action that cancels reminders, allowing users to effectively manage their scheduled tasks.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/reaching-out-to-user.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n- rule: Cancel a reminder\n  steps:\n  - intent: ask_forget_reminders\n  - action: action_forget_reminders\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Rasa Test Story\nDESCRIPTION: Example of a basic test story that verifies a simple conversation flow with text inputs and entity extraction.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: A basic story test\n  steps:\n  - user: |\n      hello\n    intent: greet\n  - action: utter_ask_howcanhelp\n  - user: |\n     show me [chinese]{\"entity\": \"cuisine\"} restaurants\n    intent: inform\n  - action: utter_ask_location\n  - user: |\n      in [Paris]{\"entity\": \"location\"}\n    intent: inform\n  - action: utter_ask_price\n```\n\n----------------------------------------\n\nTITLE: Recording User Utterance in Python using Rasa SDK\nDESCRIPTION: Creates a UserUttered event to record a user's message in the conversation history.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nevt = UserUttered(text = \"Hallo bot\")\n```\n\n----------------------------------------\n\nTITLE: Example Graph Recipe Configuration in YAML for Rasa\nDESCRIPTION: A basic example of a graph recipe configuration file showing the structure with train_schema and predict_schema sections. This demonstrates how to define graph nodes with their dependencies and configurations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/graph-recipe.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrecipe: graph.v1\nlanguage: en\n\ntrain_schema:\n  nodes:\n    nlu_message_converter:\n      needs:\n        importer: __importer__\n      uses: rasa.graph_components.converters.nlu_message_converter.NLUMessageConverter\n      constructor_name: create\n      fn: convert_training_nlu_data\n      config:\n        language: en\n        model_confidence: cosine\n    run_RegexMessageHandler:\n      needs:\n        messages: nlu_message_converter\n      uses: rasa.nlu.classifiers.regex_message_handler.RegexMessageHandler\n      constructor_name: load\n      fn: process_training_data\n    select_prediction:\n      needs:\n        rule_policy: train_RulePolicy1\n        memoization_policy: train_MemoizationPolicy\n        ted_policy: train_TEDPolicy\n      uses: rasa.core.policies.ensemble.DefaultPolicyPredictionEnsemble\n      constructor_name: create\n      fn: combine_predictions_from_kwargs\n      config:\n        priority_memoization: false\n  root_needs:\n    run_RegexMessageHandler: run_RegexMessageHandler\n    select_prediction: select_prediction\n\npredict_schema:\n  nodes:\n    nlu_message_converter:\n      needs:\n        importer: __message__\n      uses: rasa.graph_components.converters.nlu_message_converter.NLUMessageConverter\n      constructor_name: create\n      fn: convert_user_message\n      config:\n        language: en\n        model_confidence: cosine\n    run_RegexMessageHandler:\n      needs:\n        messages: nlu_message_converter\n      uses: rasa.nlu.classifiers.regex_message_handler.RegexMessageHandler\n      constructor_name: load\n      fn: process\n      resource:\n        name: train_RegexMessageHandler\n    select_prediction:\n      needs:\n        tracker: __tracker__\n        domain: __domain__\n        rule_policy: predict_RulePolicy1\n        memoization_policy: predict_MemoizationPolicy\n        ted_policy: predict_TEDPolicy\n      uses: rasa.core.policies.ensemble.DefaultPolicyPredictionEnsemble\n      constructor_name: create\n      fn: combine_predictions_from_kwargs\n      config:\n        priority_memoization: false\n```\n\n----------------------------------------\n\nTITLE: Testing Rasa NLU with Cross-Validation\nDESCRIPTION: Performs cross-validation testing on the NLU model, which creates multiple train/test splits and averages the results for a thorough evaluation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrasa test nlu\n    --nlu data/nlu\n    --cross-validation\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Story Structure in Rasa\nDESCRIPTION: Demonstrates the basic structure of a story in Rasa, including metadata and steps. Stories are used to train the dialogue management model.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: Greet the user\n  metadata:\n    author: Somebody\n    key: value\n  steps:\n  # list of steps\n  - intent: greet\n  - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Defining Form Slot Request Responses\nDESCRIPTION: This code configures the responses that the bot will use to ask users for information about each required slot in the form.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  utter_ask_cuisine:\n    - text: \"What cuisine?\"\n  utter_ask_num_people:\n    - text: \"How many people?\"\n  utter_ask_outdoor_seating:\n    - text: \"Do you want to sit outside?\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RulePolicy for Form Handling\nDESCRIPTION: This snippet adds the RulePolicy to the configuration, which is necessary for handling the form's happy path through rules.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n  - name: RulePolicy\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Channel in Rasa\nDESCRIPTION: Configuration for enabling the REST channel in credentials.yml. This allows receiving messages via REST endpoints.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/your-own-website.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrest:\n  # you don't need to provide anything here - this channel doesn't\n  # require any credentials\n```\n\n----------------------------------------\n\nTITLE: Accessing Rasa Action Server in Kubernetes\nDESCRIPTION: Commands to get the IP address and port-forward the Rasa Action Server service in Kubernetes.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport SERVICE_PORT=$(kubectl get --namespace <your namespace> -o jsonpath=\"{.spec.ports[0].port}\" services <release name>)\nkubectl port-forward --namespace <your namespace> svc/<release name> ${SERVICE_PORT}:${SERVICE_PORT} &\n```\n\n----------------------------------------\n\nTITLE: Stories with Entity Roles\nDESCRIPTION: Example stories showing how entity roles can influence dialogue predictions\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n- story: The user just arrived from another city.\n  steps:\n    - intent: greet\n    - action: utter_greet\n    - intent: inform_location\n      entities:\n        - city: London\n          role: from\n    - action: utter_ask_about_trip\n\n- story: The user is going to another city.\n  steps:\n    - intent: greet\n    - action: utter_greet\n    - intent: inform_location\n      entities:\n        - city: Madrid\n          role: to\n    - action: utter_wish_pleasant_stay\n```\n\n----------------------------------------\n\nTITLE: Defining Responses for Chitchat Retrieval Intents\nDESCRIPTION: Response definitions for chitchat retrieval intents, showing how to format responses with text and optional images for each specific intent.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/chitchat-faqs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  utter_chitchat/ask_name:\n  - image: \"https://i.imgur.com/zTvA58i.jpeg\"\n    text: Hello, my name is Retrieval Bot.\n  - text: I am called Retrieval Bot!\n  utter_chitchat/ask_weather:\n  - text: Oh, it does look sunny right now in Berlin.\n    image: \"https://i.imgur.com/vwv7aHN.png\"\n  - text: I am not sure of the whole week but I can see the sun is out today.\n```\n\n----------------------------------------\n\nTITLE: Custom Action Response in Python\nDESCRIPTION: Example of using responses in a custom action using Rasa SDK in Python.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa_sdk.interfaces import Action\n\nclass ActionGreet(Action):\n    def name(self):\n        return 'action_greet'\n\n    def run(self, dispatcher, tracker, domain):\n        dispatcher.utter_message(template=\"utter_greet\")\n        return []\n```\n\n----------------------------------------\n\nTITLE: CountVectorsFeaturizer Configuration Example\nDESCRIPTION: This YAML configuration demonstrates how to set up the CountVectorsFeaturizer in a Rasa pipeline. It shows how to define the analyzer, n-gram range, OOV token, and whether to use a shared vocabulary between user messages and intents.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npipeline:\n- name: \"CountVectorsFeaturizer\"\n  # Analyzer to use, either 'word', 'char', or 'char_wb'\n  \"analyzer\": \"word\"\n  # Set the lower and upper boundaries for the n-grams\n  \"min_ngram\": 1\n  \"max_ngram\": 1\n  # Set the out-of-vocabulary token\n  \"OOV_token\": \"_oov_\"\n  # Whether to use a shared vocab\n  \"use_shared_vocab\": False\n```\n\n----------------------------------------\n\nTITLE: Starting Rasa Server with Token-Based Authentication\nDESCRIPTION: Command to start a Rasa server with the API enabled and token-based authentication. Clients must include this token in their requests to access the API.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/http-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa run \\\n    --enable-api \\\n    --auth-token thisismysecret\n```\n\n----------------------------------------\n\nTITLE: Example output of KeywordIntentClassifier\nDESCRIPTION: This JSON snippet presents the expected output format of the `KeywordIntentClassifier`.  The output comprises the predicted intent name and a confidence score of 1.0, signifying a definitive match.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n \"{\\n    \\\"intent\\\": {\\\"name\\\": \\\"greet\\\", \\\"confidence\\\": 1.0}\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Preparing Test Data for Rasa Model Evaluation\nDESCRIPTION: Use Rasa's utility functions to gather NLU and story data for model evaluation, creating temporary directories with the test files.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/jupyter-notebooks.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport rasa.shared.data as data\nnlu_data_directory = data.get_nlu_directory(training_files)\nstories_directory = data.get_core_directory(training_files)\nprint(stories_directory, nlu_data_directory)\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Endpoint in endpoints.yml\nDESCRIPTION: YAML configuration for the endpoints.yml file that points the Rasa server to the action server running in the Docker Compose environment.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/deploying-in-docker-compose.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naction_endpoint:\n  url: http://app:5055/webhook\n```\n\n----------------------------------------\n\nTITLE: Combining Channel-Specific and Conditional Responses in Rasa\nDESCRIPTION: This example demonstrates how to combine channel-specific and conditional response variations. Rasa will prioritize responses that match both the condition and the channel.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  logged_in:\n    type: bool\n    influence_conversation: False\n    mappings:\n    - type: custom\n  name:\n    type: text\n    influence_conversation: False\n    mappings:\n    - type: custom\n\nresponses:\n  utter_greet:\n    - condition:\n        - type: slot\n          name: logged_in\n          value: true\n      text: \"Hey, {name}. Nice to see you again on Slack! How are you?\"\n      channel: slack\n\n    - text: \"Welcome. How is your day going?\"\n```\n\n----------------------------------------\n\nTITLE: Accessing DIET Diagnostic Data in Python\nDESCRIPTION: Code to extract and print attention weights and transformed text data from a DIET model's message object. This helps in debugging and analyzing model behavior.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nnlu_diagnostic_data = message.as_dict()[DIAGNOSTIC_DATA]\n\nfor component_name, diagnostic_data in nlu_diagnostic_data.items():\n    attention_weights = diagnostic_data[\"attention_weights\"]\n    print(f\"attention_weights for {component_name}:\")\n    print(attention_weights)\n\n    text_transformed = diagnostic_data[\"text_transformed\"]\n    print(f\"\\ntext_transformed for {component_name}:\")\n    print(text_transformed)\n```\n\n----------------------------------------\n\nTITLE: Starting Rasa Server with API\nDESCRIPTION: Runs a Rasa server with the API enabled, allowing HTTP requests to the NLU model.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/google-dialogflow-to-rasa.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --enable-api\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Test Stories\nDESCRIPTION: Executes tests against your trained model using test stories to verify that your assistant responds correctly to user inputs.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa test\n```\n\n----------------------------------------\n\nTITLE: Defining Retrieval Intents in Rasa NLU\nDESCRIPTION: Example showing how to define retrieval intents in Rasa. Retrieval intents use a slash notation to separate the intent category from the specific response key, enabling more organized FAQ-style responses.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- intent: chitchat/ask_name\n  examples: |\n    - What is your name?\n    - May I know your name?\n    - What do people call you?\n    - Do you have a name for yourself?\n\n- intent: chitchat/ask_weather\n  examples: |\n    - What's the weather like today?\n    - Does it look sunny outside today?\n    - Oh, do you mind checking the weather for me please?\n    - I like sunny days in Berlin.\n```\n\n----------------------------------------\n\nTITLE: Creating Rasa Test Story with Multiple Entities\nDESCRIPTION: Example of a test story that includes a user message with multiple entities mapped to a single token, testing complex entity extraction.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: A basic test story with multiple entities for a single token\n  steps:\n  - user: |\n      hello\n    intent: greet\n  - action: utter_ask_howcanhelp\n  - user: |\n     show me [chinese]{\"entity\": \"cuisine\"} restaurants\n    intent: inform\n  - action: utter_ask_location\n  - user: |\n      in [Paris][{\"entity\": \"location\"}, {\"entity\": \"city\"}]\n    intent: inform\n  - action: utter_ask_price\n```\n\n----------------------------------------\n\nTITLE: Configuring DucklingEntityExtractor for Number Extraction\nDESCRIPTION: This snippet adds the DucklingEntityExtractor to the NLU pipeline to extract number entities from user messages, which is needed for the 'num_people' slot.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\npipeline:\n# other components\n- name: DucklingEntityExtractor\n  dimensions: [\"number\"]\n```\n\n----------------------------------------\n\nTITLE: REST Channel Response Format\nDESCRIPTION: JSON response format from Rasa containing bot responses with text and/or media content.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/your-own-website.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"text\": \"Hey Rasa!\"}, {\"image\": \"http://example.com/image.jpg\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Neural Network Configuration Settings\nDESCRIPTION: Default configuration values for RASA's neural network model parameters including training, architecture, and evaluation settings. Parameters control aspects like batch strategy, epochs, learning rate, embedding dimensions, dropout rates, and model evaluation frequency.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"batch_strategy\": \"balanced\",\n    \"epochs\": 300,\n    \"random_seed\": None,\n    \"learning_rate\": 0.001,\n    \"embedding_dimension\": 20,\n    \"dense_dimension\": {\"text\": 128, \"label\": 20},\n    \"concat_dimension\": {\"text\": 128, \"label\": 20},\n    \"number_of_negative_examples\": 20,\n    \"similarity_type\": \"auto\",\n    \"loss_type\": \"cross_entropy\",\n    \"ranking_length\": 10,\n    \"renormalize_confidences\": False,\n    \"maximum_positive_similarity\": 0.8,\n    \"maximum_negative_similarity\": -0.4,\n    \"use_maximum_negative_similarity\": True,\n    \"scale_loss\": False,\n    \"regularization_constant\": 0.002,\n    \"negative_margin_scale\": 0.8,\n    \"connection_density\": 0.2,\n    \"drop_rate\": 0.2,\n    \"drop_rate_attention\": 0.0,\n    \"use_sparse_input_dropout\": True,\n    \"use_dense_input_dropout\": True,\n    \"evaluate_every_number_of_epochs\": 20,\n    \"evaluate_on_number_of_examples\": 0,\n    \"intent_classification\": True,\n    \"entity_recognition\": True,\n    \"use_masked_language_model\": False\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an NLU Fallback Rule in Rasa\nDESCRIPTION: This rule specifies that when the 'nlu_fallback' intent is predicted (for low confidence messages), the bot should ask the user to rephrase.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n- rule: Ask the user to rephrase whenever they send a message with low NLU confidence\n  steps:\n  - intent: nlu_fallback\n  - action: utter_please_rephrase\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Reminder Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'cancel_reminder' event in Rasa, which cancels scheduled reminders matching the supplied parameters. This event is never automatically tracked.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"cancel_reminder\",\n  \"name\": \"my_reminder\",\n  \"intent\": \"my_intent\",\n  \"entities\": [\n        {\"entity\": \"entity1\", \"value\": \"value1\"},\n        {\"entity\": \"entity2\", \"value\": \"value2\"}\n    ],\n  \"date_time\": \"2018-09-03T11:41:10.128172\"\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Follow-up Action Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'followup' event in Rasa, which forces a follow-up action, bypassing action prediction. This event is never automatically tracked.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"followup\",\n    \"name\": \"my_action\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoints for NLU Server Connection in YAML\nDESCRIPTION: An endpoint configuration file that specifies how a dialogue management server connects to an NLU-only server. It includes the URL and optional authentication parameters for the connection.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-only-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n    url: \"http://<your nlu host>:<your nlu port>\"\n    token: <token>  # [optional]\n    token_name: <name of the token> # [optional] (default: token)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Fallback Response in Rasa Domain\nDESCRIPTION: Configures the default fallback response 'utter_default' in the domain.yml file to specify what the bot should say when it cannot understand the user or when the user denies a rephrased intent.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  utter_default:\n  - text: I'm sorry, I can't help you.\n```\n\n----------------------------------------\n\nTITLE: Testing the Rasa REST API\nDESCRIPTION: cURL command to test the deployed Rasa bot by sending a message to the REST webhook endpoint.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/deploying-in-docker-compose.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST http://localhost:5005/webhooks/rest/webhook \\\n  -H \"Content-type: application/json\" \\\n  -d '{\"sender\": \"test\", \"message\": \"hello\"}'\n```\n\n----------------------------------------\n\nTITLE: Form Definition in Domain for Rasa 2.0\nDESCRIPTION: Domain configuration in domain.yml that defines a form and its required slots with their mappings.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nforms:\n  restaurant_form:\n    cuisine:\n    - type: from_entity\n      entity: cuisine\n      not_intent: chitchat\n```\n\n----------------------------------------\n\nTITLE: Training Stories with Custom Slot Values in Rasa YAML\nDESCRIPTION: Example training stories that demonstrate different dialogue paths based on the value of a custom people slot. Includes scenarios for acceptable number of people and too many people.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_17\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: collecting table info\n  steps:\n  # ... other story steps\n  - intent: inform\n    entities:\n    - people: 3\n  - slot_was_set:\n    - people: 3\n  - action: action_book_table\n\n- story: too many people at the table\n  steps:\n  # ... other story steps\n  - intent: inform\n    entities:\n    - people: 9\n  - slot_was_set:\n    - people: 9\n  - action: action_explain_table_limit\n```\n\n----------------------------------------\n\nTITLE: Defining Responses for Retrieval Intents in Rasa\nDESCRIPTION: This snippet demonstrates how to define responses for retrieval intents. The response names follow a special format of 'utter_intentname/key' to map to specific intent variations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nintents:\n  - chitchat\n\nresponses:\n  utter_chitchat/ask_name:\n  - text: Oh yeah, I am called the retrieval bot.\n\n  utter_chitchat/ask_weather:\n  - text: Oh, it does look sunny right now in Berlin.\n```\n\n----------------------------------------\n\nTITLE: Running Rasa SDK Action Server with Custom Host\nDESCRIPTION: Command to run the Rasa SDK action server with a specific host address using the SANIC_HOST environment variable. This allows the action server to listen on a particular network interface.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/running-action-server.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSANIC_HOST=192.168.69.150 rasa run actions\n```\n\n----------------------------------------\n\nTITLE: Configuring SklearnIntentClassifier in Rasa\nDESCRIPTION: This YAML configuration snippet demonstrates how to configure the `SklearnIntentClassifier` in a Rasa pipeline. It shows the different hyperparameters that can be tuned, such as the regularization values (`C`), the kernel type (`kernels`), gamma, cross-validation folds (`max_cross_validation_folds`), and the scoring function (`scoring_function`).\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_19\n\nLANGUAGE: yaml-rasa\nCODE:\n```\n\"pipeline:\\n- name: \\\"SklearnIntentClassifier\\\"\\n    # Specifies the list of regularization values to\\n    # cross-validate over for C-SVM.\\n    # This is used with the ``kernel`` hyperparameter in GridSearchCV.\\n    C: [1, 2, 5, 10, 20, 100]\\n    # Specifies the kernel to use with C-SVM.\\n    # This is used with the ``C`` hyperparameter in GridSearchCV.\\n    kernels: [\\\"linear\\\"]\\n    # Gamma parameter of the C-SVM.\\n    \\\"gamma\\\": [0.1]\\n    # We try to find a good number of cross folds to use during\\n    # intent training, this specifies the max number of folds.\\n    \\\"max_cross_validation_folds\\\": 5\\n    # Scoring function used for evaluating the hyper parameters.\\n    # This can be a name or a function.\\n    \\\"scoring_function\\\": \\\"f1_weighted\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Entity Configuration with Influence Flag\nDESCRIPTION: Example showing how to configure entities and disable their influence on conversations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n- location:\n    influence_conversation: false\n```\n\n----------------------------------------\n\nTITLE: Configuring DIETClassifier as a Combined Intent and Entity Replacement\nDESCRIPTION: Configuration that replaces both CRFEntityExtractor and EmbeddingIntentClassifier with a single DIETClassifier component, performing both intent classification and entity recognition.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_70\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n# - ... other components\n- name: LexicalSyntacticFeaturizer\n  features: [\n    [\"low\", \"title\", \"upper\"],\n    [\n      \"BOS\",\n      \"EOS\",\n      \"low\",\n      \"prefix5\",\n      \"prefix2\",\n      \"suffix5\",\n      \"suffix3\",\n      \"suffix2\",\n      \"upper\",\n      \"title\",\n      \"digit\",\n    ],\n    [\"low\", \"title\", \"upper\"],\n  ]\n- name: DIETClassifier\n  number_of_transformer_layers: 0\n  # ... any other parameters\n```\n\n----------------------------------------\n\nTITLE: Rasa Train-Test GitHub Action CI Pipeline\nDESCRIPTION: This YAML snippet demonstrates a CI pipeline using the Rasa Train-Test GitHub Action. It performs data validation, model training, and story testing. The model file is then uploaded as an artifact.  The snippet uses `actions/checkout@v1` to retrieve the code, then uses the `RasaHQ/rasa-train-test-gha@main` GitHub Action to perform validation, training and testing. It publishes a summary to the pull request and finally uploads the trained model as an artifact. The `github_token` secret is required.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/setting-up-ci-cd.mdx#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"jobs:\\n  training-testing:\\n    name: Training and Testing\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v1\\n      - name: Rasa Train and Test GitHub Action\\n        uses: RasaHQ/rasa-train-test-gha@main\\n        with:\\n          requirements_file: requirements.txt\\n          data_validate: true\\n          rasa_train: true\\n          cross_validation: true\\n          rasa_test: true\\n          test_type: all\\n          publish_summary: true\\n          github_token: ${{ secrets.GITHUB_TOKEN }}\\n      - name: Upload model\\n        if: github.ref == 'refs/heads/main'\\n        uses: actions/upload-artifact@master\\n        with:\\n          name: model\\n          path: models\\n\"\n```\n\n----------------------------------------\n\nTITLE: Facebook Quick Replies Configuration in Rasa\nDESCRIPTION: Example of configuring quick replies in Rasa responses, including text replies, image replies, and Facebook-specific quick replies for email and phone number collection.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/facebook-messenger.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nutter_fb_quick_reply_example:\n   - text: Hello World!\n     quick_replies:\n       - title: Text quick reply\n         payload: /example_intent\n       - title: Image quick reply\n         payload: /example_intent\n         image_url: http://example.com/img/red.png\n       - content_type: user_email\n         title:\n         payload:\n       - content_type: user_phone_number\n         title:\n         payload:\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kafka Broker with SASL SCRAM Authentication Using Shell Commands\nDESCRIPTION: This shell script demonstrates how to set up a Kafka broker with SASL SCRAM authentication (SHA-512) and no TLS encryption for a test environment. It includes commands to start Zookeeper using Docker Compose, configure Kafka user credentials on Zookeeper, and finally bring up the Kafka broker. Required dependencies include Docker, Docker Compose, and a configured Zookeeper container.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/no_tls/scram_sha_512/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Start Zookeeper\ndocker-compose up -d zookeeper\n\n# Create kafkabroker and kafkaclient users on zookeeper\ndocker exec -it zookeeper-sasl-scram-sha-512 bash\ncd /etc/kafka/client\nKAFKA_OPTS=\"-Djava.security.auth.login.config=zookeeper_client_jaas.conf\" kafka-configs --zookeeper localhost:2187 --alter --add-config 'SCRAM-SHA-512=[iterations=4096,password=password]' --entity-type users --entity-name kafkabroker\nKAFKA_OPTS=\"-Djava.security.auth.login.config=zookeeper_client_jaas.conf\" kafka-configs --zookeeper localhost:2187 --alter --add-config 'SCRAM-SHA-512=[iterations=4096,password=password]' --entity-type users --entity-name client\n\n# Exit from zookeeper container\nexit\n\ndocker-compose up -d kafka-broker\n```\n\n----------------------------------------\n\nTITLE: Form Story in Rasa 2.0\nDESCRIPTION: A story in stories.yml that handles form activation and deactivation in a single flow.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n  - story: cuisine form\n    steps:\n    - intent: request_restaurant\n    - action: restaurant_form\n    - active_loop: restaurant_form\n    - active_loop: null\n    - action: utter_submit\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Actions to Rasa Domain Configuration\nDESCRIPTION: This YAML configuration snippet adds the custom action to the domain.yml file. The 'actions' section lists all custom actions that should be available to the assistant.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/building-in-docker.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nactions:\n  - action_joke\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Event Broker in Rasa Endpoints YAML\nDESCRIPTION: YAML configuration for using a PostgreSQL database as an event broker in Rasa. Includes connection details like URL, port, credentials, and database name.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: SQL\n  url: 127.0.0.1\n  port: 5432\n  dialect: postgresql\n  username: myuser\n  password: mypassword\n  db: mydatabase\n```\n\n----------------------------------------\n\nTITLE: Creating Rasa Test Story with Custom Actions\nDESCRIPTION: Example of a test story that includes a custom action which sets a slot value, demonstrating how to test the effects of custom actions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: A test where a custom action returns events\n  steps:\n  - user: |\n      hey\n    intent: greet\n  - action: my_custom_action\n  - slot_was_set:\n    - my_slot: \"value added by custom action\"\n  - action: utter_ask_age\n  - user: |\n      thanks\n    intent: thankyou\n  - action: utter_no_worries\n```\n\n----------------------------------------\n\nTITLE: Specifying if an action needs the domain in domain.yml\nDESCRIPTION: This snippet shows how to specify if an action needs the domain. Custom actions inheriting from rasa-sdk [`FormValidationAction`](./action-server/validation-action.mdx#formvalidationaction-class) parent class are an exception to this rule as they will always have the domain sent to them.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_29\n\nLANGUAGE: YAML\nCODE:\n```\n# domain.yml\nactions:\n  - action_hello_world: {send_domain: True} # will receive domain\n  - action_calculate_mass_of_sun # will not receive domain\n  - validate_my_form # will receive domain\n```\n\n----------------------------------------\n\nTITLE: Endpoints Configuration for Docker Compose SQL Setup\nDESCRIPTION: Endpoints configuration showing how to connect to a PostgreSQL service defined in Docker Compose, with the service name used as the URL.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml-rasa\nCODE:\n```\ntracker_store:\n    type: SQL\n    dialect: \"postgresql\"  # the dialect used to interact with the db\n    url: \"postgres\"\n    db: \"rasa\"  # path to your db\n    username:  # username used for authentication\n    password:  # password used for authentication\n    query: # optional dictionary to be added as a query string to the connection URL\n      driver: my-driver\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Endpoint in Rasa\nDESCRIPTION: This YAML configuration for endpoints.yml specifies the URL of the action server. It tells the Rasa server where to send requests for custom actions, using the Docker container name as the hostname.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/building-in-docker.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\naction_endpoint:\n  url: \"http://action-server:5055/webhook\"\n```\n\n----------------------------------------\n\nTITLE: REST Channel Request Format\nDESCRIPTION: JSON format for sending messages to the REST webhook endpoint, including sender ID and message content.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/your-own-website.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sender\": \"test_user\",  // sender ID of the user sending the message\n  \"message\": \"Hi there!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Slot Mapping Configuration for Entity Roles\nDESCRIPTION: YAML configuration demonstrating how to define slot mappings for entities with specific roles\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n   - city:\n       roles:\n       - departure\n       - destination\n\nslots:\n  departure:\n    type: any\n    mappings:\n    - type: from_entity\n      entity: city\n      role: departure\n  destination:\n    type: any\n    mappings:\n    - type: from_entity\n      entity: city\n      role: destination\n```\n\n----------------------------------------\n\nTITLE: Accessing User Message Metadata in Custom Action Session Start\nDESCRIPTION: Python code for a custom action_session_start that demonstrates how to access user message metadata via the session_started_metadata slot. This allows for custom handling of session start events with additional context.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Text, Dict, List\nfrom rasa_sdk import Action, Tracker\nfrom rasa_sdk.events import SlotSet, SessionStarted, ActionExecuted, EventType\n\nclass ActionSessionStart(Action):\n    def name(self) -> Text:\n        return \"action_session_start\"\n\n    async def run(\n      self, dispatcher, tracker: Tracker, domain: Dict[Text, Any]\n    ) -> List[Dict[Text, Any]]:\n        metadata = tracker.get_slot(\"session_started_metadata\")\n\n        # Do something with the metadata\n        print(metadata)\n\n        # the session should begin with a `session_started` event and an `action_listen`\n        # as a user message follows\n        return [SessionStarted(), ActionExecuted(\"action_listen\")]\n```\n\n----------------------------------------\n\nTITLE: Facebook Elements Configuration in Rasa\nDESCRIPTION: Example of configuring Facebook Elements in Rasa responses, demonstrating how to create scrollable content elements with buttons, images, and text.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/facebook-messenger.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nutter_fb_element_example:\n   - text: Hello World!\n     elements:\n       - title: Element Title 1\n         subtitle: Subtitles are supported\n         buttons:\n           - title: Example button A\n             payload: /example_intent\n           - title: Example button B\n             payload: /example_intent\n           - title: Example button C\n             payload: /example_intent\n       - title: Element Title 2\n         image_url: http://example.com/img/red.png\n         buttons:\n           - title: Example button D\n             payload: /example_intent\n           - title: Example button E\n             payload: /example_intent\n           - title: Example button F\n             payload: /example_intent\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Components in Rasa\nDESCRIPTION: This YAML snippet shows how to configure custom NLU components and policies in Rasa's `config.yml` file.  It specifies the full module name for each custom component, allowing Rasa to locate and use them during model training and inference.  The configuration includes placeholders for settings specific to each component.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml-rasa\nCODE:\n```\n```yaml-rasa {5-6,10} title=\"config.yml\"\nrecipe: default.v1\nlanguage: en\npipeline:\n# other NLU components\n- name: your.custom.NLUComponent\n  setting_a: 0.01\n  setting_b: string_value\n\npolicies:\n# other dialogue policies\n- name: your.custom.Policy\n```\n```\n\n----------------------------------------\n\nTITLE: Boolean Slot Type Configuration\nDESCRIPTION: Example of configuring a boolean slot type with custom mapping.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n     is_authenticated:\n        type: bool\n        mappings:\n        - type: custom\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Tracker Store in Endpoints File\nDESCRIPTION: YAML configuration for setting up a MongoDB tracker store in the endpoints.yml file, specifying connection URL and authentication details.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml-rasa\nCODE:\n```\ntracker_store:\n    type: mongod\n    url: <url to your mongo instance, e.g. mongodb://localhost:27017>\n    db: <name of the db within your mongo instance, e.g. rasa>\n    username: <username used for authentication>\n    password: <password used for authentication>\n    auth_source: <database name associated with the user's credentials>\n```\n\n----------------------------------------\n\nTITLE: Configuring SpacyFeaturizer with Mean Pooling in Rasa Pipeline\nDESCRIPTION: Configuration example for the SpacyFeaturizer component which creates vector representations for entity extraction and classification using spaCy. The pooling parameter specifies how to calculate the sentence vector, with 'mean' pooling set as the default method.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"SpacyFeaturizer\"\n  # Specify what pooling operation should be used to calculate the vector of\n  # the complete utterance. Available options: 'mean' and 'max'.\n  \"pooling\": \"mean\"\n```\n\n----------------------------------------\n\nTITLE: Rule for Triggering Human Handoff with Action_Unlikely_Intent\nDESCRIPTION: Demonstrates how to use a rule to configure what happens when action_unlikely_intent is triggered, in this case setting up a human handoff sequence.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/default-actions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- rule: trigger human handoff with action_unlikely_intent\n  steps:\n    - action: action_unlikely_intent\n    - action: ask_human_handoff\n    - intent: affirm\n    - action: trigger_human_handoff\n```\n\n----------------------------------------\n\nTITLE: ResponseSelector Output Schema in Rasa\nDESCRIPTION: Example of the updated ResponseSelector output schema in JSON format, showing the structure of the response and ranking.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response_selector\": {\n    \"all_retrieval_intents\": [\n      \"faq\"\n    ],\n    \"default\": {\n      \"response\": {\n        \"id\": 1388783286124362000,\n        \"confidence\": 1,\n        \"intent_response_key\": \"faq/is_legit\",\n        \"response_templates\": [\n          {\n            \"text\": \"absolutely\",\n            \"image\": \"https://i.imgur.com/nGF1K8f.jpg\"\n          },\n          {\n            \"text\": \"I think so.\"\n          }\n        ],\n        \"template_name\": \"utter_faq/is_legit\"\n      },\n      \"ranking\": [\n        {\n          \"id\": 1388783286124362000,\n          \"confidence\": 1,\n          \"intent_response_key\": \"faq/is_legit\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rasa Test Story for Form Happy Path\nDESCRIPTION: Example of a test story for a form's happy path, showing the expected flow when a form is filled out correctly without interruptions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: A test story with a form\n  steps:\n  - user: |\n      hi\n    intent: greet\n  - action: utter_greet\n  - user: |\n      im looking for a restaurant\n    intent: request_restaurant\n  - action: restaurant_form\n  - active_loop: restaurant_form\n  - user: |\n      [afghan](cuisine) food\n    intent: inform\n  - action: restaurant_form\n  - active_loop: null\n  - action: utter_slots_values\n  - user: |\n      thanks\n    intent: thankyou\n  - action: utter_no_worries\n```\n\n----------------------------------------\n\nTITLE: Custom Tracker Store Endpoints with Docker\nDESCRIPTION: YAML configuration for connecting to a custom tracker store service in a Docker environment.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntracker_store:\n  type: path.to.your.module.Class\n  url: custom-tracker-store\n  a_parameter: a value\n  another_parameter: another value\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Communication with Action Server\nDESCRIPTION: The action server exposes a /webhook endpoint that receives POST requests from the Rasa server. The request contains action name, conversation ID, tracker contents, and domain information. The response includes responses and events.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /webhook\n```\n\n----------------------------------------\n\nTITLE: Configuring Cisco Webex Teams Credentials in Rasa\nDESCRIPTION: Configuration snippet for adding Cisco Webex Teams credentials to the credentials.yml file. Requires bot access token and room ID from Cisco Webex Teams setup.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/cisco-webex-teams.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwebexteams:\n  access_token: \"YOUR-BOT-ACCESS-TOKEN\"\n  room: \"YOUR-CISCOWEBEXTEAMS-ROOM-ID\"\n```\n\n----------------------------------------\n\nTITLE: Creating Rasa Test Story for Form Unhappy Path\nDESCRIPTION: Example of a test story for a form's unhappy path, showing how the assistant should handle interruptions during form filling.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: A test story with unexpected input during a form\n  steps:\n  - user: |\n      hi\n    intent: greet\n  - action: utter_greet\n  - user: |\n      im looking for a restaurant\n    intent: request_restaurant\n  - action: restaurant_form\n  - active_loop: restaurant_form\n  - user: |\n      How's the weather?\n    intent: chitchat\n  - action: utter_chitchat\n  - action: restaurant_form\n  - active_loop: null\n  - action: utter_slots_values\n  - user: |\n      thanks\n    intent: thankyou\n  - action: utter_no_worries\n```\n\n----------------------------------------\n\nTITLE: JSON format for testing a custom Rasa connector webhook\nDESCRIPTION: Example JSON body format for testing a custom connector webhook by sending POST requests. The JSON includes sender ID, message content, and optional metadata.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/custom-connectors.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sender\": \"test_user\",  // sender ID of the user sending the message\n  \"message\": \"Hi there!\",\n  \"metadata\": {}  // optional, any extra info you want to add for processing in NLU or custom actions\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Markers Configuration to Analytics Data Pipeline in Rasa Pro\nDESCRIPTION: Command to upload marker configurations to the Analytics Data Pipeline for real-time processing. This validates the marker YAML against the domain file and persists the configurations in a database. The command should be run whenever there are changes to the marker configuration file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/realtime-markers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa markers upload --config=<path-to-config-file> -d=<path-to-domain-file> -rasa-pro-services-url=<url>\n```\n\n----------------------------------------\n\nTITLE: Setting Slot to None in Rasa Story\nDESCRIPTION: Example showing how to reset a slot value to None (null) in a Rasa story using the slot_was_set event after a custom action.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: set slot to none\n  steps:\n    # ... other story steps\n    - action: my_custom_action\n    - slot_was_set:\n      - my_slot: null\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Tracker Store in Endpoints File\nDESCRIPTION: YAML configuration for setting up an SQL tracker store in the endpoints.yml file. This specifies the database dialect, URL, credentials, and optional query parameters.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\ntracker_store:\n    type: SQL\n    dialect: \"postgresql\"  # the dialect used to interact with the db\n    url: \"\"  # (optional) host of the sql db, e.g. \"localhost\"\n    db: \"rasa\"  # path to your db\n    username:  # username used for authentication\n    password:  # password used for authentication\n    query: # optional dictionary to be added as a query string to the connection URL\n      driver: my-driver\n```\n\n----------------------------------------\n\nTITLE: Configuring Twilio Credentials in Rasa\nDESCRIPTION: This snippet shows how to add Twilio credentials to the credentials.yml file, including account_sid, auth_token, and twilio_number, which is required to integrate a Rasa assistant with Twilio for text message interaction.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/twilio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\ntwilio:\n  account_sid: \"ACbc2dxxxxxxxxxxxx19d54bdcd6e41186\"\n  auth_token: \"e231c197493a7122d475b4xxxxxxxxxx\"\n  twilio_number: \"+440123456789\"  # if using WhatsApp: \"whatsapp:+440123456789\"\n```\n\n----------------------------------------\n\nTITLE: Testing Local Channels with Ngrok in Bash\nDESCRIPTION: This command starts ngrok to expose port 5005 to the internet and then runs the Rasa server. This allows external services to connect to your locally running Rasa instance for testing channel integrations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/messaging-and-voice-channels.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 5005; rasa run\n```\n\n----------------------------------------\n\nTITLE: Ordinal Mention Mapping Dictionary in InMemoryKnowledgeBase\nDESCRIPTION: Default mapping dictionary that resolves ordinal mentions (like 'first one', 'second one') to objects in a list. It includes numeric positions, 'ANY' for random selection, and 'LAST' for the last item in the list.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"1\": lambda l: l[0],\n    \"2\": lambda l: l[1],\n    \"3\": lambda l: l[2],\n    \"4\": lambda l: l[3],\n    \"5\": lambda l: l[4],\n    \"6\": lambda l: l[5],\n    \"7\": lambda l: l[6],\n    \"8\": lambda l: l[7],\n    \"9\": lambda l: l[8],\n    \"10\": lambda l: l[9],\n    \"ANY\": lambda l: random.choice(l),\n    \"LAST\": lambda l: l[-1],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Event Broker with SSL in Rasa Endpoints YAML\nDESCRIPTION: YAML configuration for adding a Kafka event broker with SSL security protocol to the Rasa endpoints file. Includes SSL certificate settings, topic, and client details.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: kafka\n  security_protocol: SSL\n  topic: topic\n  url: localhost:9092\n  client_id: kafka-python-rasa\n  ssl_cafile: CARoot.pem\n  ssl_certfile: certificate.pem\n  ssl_keyfile: key.pem\n  ssl_check_hostname: True\n```\n\n----------------------------------------\n\nTITLE: Handing Over Action Prediction in Rasa Rules\nDESCRIPTION: This example shows how to prevent a rule from waiting for user input by setting `wait_for_user_input: false`, allowing another story or rule to predict the next action.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/rules.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n\n- rule: Rule which will not wait for user message once it was applied\n  steps:\n  - intent: greet\n  - action: utter_greet\n  wait_for_user_input: false\n```\n\n----------------------------------------\n\nTITLE: Validating Rasa Data with Max History Parameter\nDESCRIPTION: Validates Rasa data with a specified max history parameter, which should be the smallest value from your config.yml policies.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa data validate --max-history <max_history>\n```\n\n----------------------------------------\n\nTITLE: Response Selector Output Schema in JSON\nDESCRIPTION: Example output from the ResponseSelector showing the new schema with intent_response_key and response_templates. Includes the all_retrieval_intents list and confidence scores.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n\"response_selector\": {\n    \"all_retrieval_intents\": [\"faq\"],\n    \"default\": {\n      \"response\": {\n        \"id\": 1388783286124361986, \"confidence\": 1.0, \"intent_response_key\": \"faq/is_legit\",\n        \"response_templates\": [\n          {\n            \"text\": \"absolutely\",\n            \"image\": \"https://i.imgur.com/nGF1K8f.jpg\"\n          },\n          {\n            \"text\": \"I think so.\"\n          }\n        ],\n      },\n      \"ranking\": [\n        {\n          \"id\": 1388783286124361986,\n          \"confidence\": 1.0,\n          \"intent_response_key\": \"faq/is_legit\"\n        },\n      ]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OTEL Collector for Tracing in Rasa Pro\nDESCRIPTION: This configuration snippet demonstrates how to set up an OpenTelemetry (OTEL) Collector for tracing in Rasa Pro. It includes the endpoint, security settings, service name, and root certificate path.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/tracing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n  type: otlp\n  endpoint: my-otlp-host:4318\n  insecure: false\n  service_name: rasa\n  root_certificates: ./tests/unit/tracing/fixtures/ca.pem\n```\n\n----------------------------------------\n\nTITLE: Formatting Rasa Events as JSON for Event Brokers\nDESCRIPTION: Example of how Rasa events are formatted as JSON when streamed to an event broker. Shows the structure with sender ID, timestamp, event type, and other fields.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sender_id\": \"default\",\n    \"timestamp\": 1528402837.617099,\n    \"event\": \"bot\",\n    \"text\": \"what your bot said\",\n    \"data\": \"some data about e.g. attachments\"\n    \"metadata\" {\n          \"a key\": \"a value\",\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Event Broker in Rasa Endpoints YAML\nDESCRIPTION: YAML configuration for using an SQLite database as an event broker in Rasa. Specifies the broker type, SQL dialect, and database file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: SQL\n  dialect: sqlite\n  db: events.db\n```\n\n----------------------------------------\n\nTITLE: Inheriting from GraphComponent - Rasa 3.0\nDESCRIPTION: This snippet illustrates how to inherit from the 'GraphComponent' interface in Rasa 3.0. By inheriting from both 'GraphComponent' and 'SparseFeaturizer', the NLU component can leverage the extended functionalities of the new graph-based architecture.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.engine.graph import GraphComponent\nfrom rasa.nlu.featurizers.sparse_featurizer.sparse_featurizer import SparseFeaturizer\n\nclass MyNLUComponent(GraphComponent, SparseFeaturizer):\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Reminder Trigger Rule in Rasa - YAML\nDESCRIPTION: This YAML snippet adds a rule to the Rasa framework that specifies which action to take when the reminder intent is triggered. It links the `EXTERNAL_reminder` intent to the previously defined action for the bot to react appropriately.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/reaching-out-to-user.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n- rule: Trigger `action_react_to_reminder` for `EXTERNAL_reminder`\n  steps:\n  - intent: EXTERNAL_reminder\n  - action: action_react_to_reminder\n```\n\n----------------------------------------\n\nTITLE: Configuring MITIE Language Model\nDESCRIPTION: YAML configuration for the MITIE language model initialization component that loads pre-trained word vectors.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"MitieNLP\"\n  # language model to load\n  model: \"data/total_word_feature_extractor.dat\"\n```\n\n----------------------------------------\n\nTITLE: Inheriting from EntityExtractorMixin - Rasa 3.0\nDESCRIPTION: This snippet shows the change from inheriting the 'EntityExtractor' class to 'EntityExtractorMixin' in Rasa 3.0. The NLU component must adapt to use the new mixin for entity extraction functionalities.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.engine.graph import GraphComponent\nfrom rasa.nlu.extractors.extractor import EntityExtractorMixin\n\nclass MyNLUComponent(GraphComponent, EntityExtractorMixin):\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Using OR Statements with Intents in Rasa Stories\nDESCRIPTION: Example showing how to use OR statements to handle multiple intents (affirm and thanks) in the same way within a story flow.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_18\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: story with OR\n  steps:\n  - intent: signup_newsletter\n  - action: utter_ask_confirm\n  - or:\n    - intent: affirm\n    - intent: thanks\n  - action: action_signup_newsletter\n```\n\n----------------------------------------\n\nTITLE: Entity Extraction JSON Result\nDESCRIPTION: Example of entity extraction result showing how roles are captured in the extracted entities\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"text\": \"Book a flight from Berlin to SF\",\n  \"intent\": \"book_flight\",\n  \"entities\": [\n    {\n      \"start\": 19,\n      \"end\": 25,\n      \"value\": \"Berlin\",\n      \"entity\": \"city\",\n      \"role\": \"departure\",\n      \"extractor\": \"DIETClassifier\"\n    },\n    {\n      \"start\": 29,\n      \"end\": 31,\n      \"value\": \"San Francisco\",\n      \"entity\": \"city\",\n      \"role\": \"destination\",\n      \"extractor\": \"DIETClassifier\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DIET Classifier Batch Strategy\nDESCRIPTION: Configuration example showing how to disable balanced batching and use sequence batching strategy for the DIET Classifier component to handle training data differently.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: \"en\"\n\npipeline:\n# - ... other components\n- name: \"DIETClassifier\"\n  batch_strategy: sequence\n```\n\n----------------------------------------\n\nTITLE: Running Rasa with Azure Storage\nDESCRIPTION: Command to start the Rasa server with a model stored in Azure Storage. Requires Azure-specific environment variables for authentication and configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --model 20190506-100418.tar.gz --remote-storage azure\n```\n\n----------------------------------------\n\nTITLE: Using OR Statements with Slots in Rasa Stories\nDESCRIPTION: Demonstrates how to use OR statements with slot events to handle multiple possible slot values (joe or bob) in the same story.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_19\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story:\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: tell_name\n  - or:\n    - slot_was_set:\n        - name: joe\n    - slot_was_set:\n        - name: bob\n  # ... next actions\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Responses in Rasa\nDESCRIPTION: Example of implementing clickable buttons in Rasa responses with title and payload configuration. Shows basic button setup and entity passing through buttons.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_greet:\n  - text: \"Hey! How are you?\"\n    buttons:\n    - title: \"great\"\n      payload: \"/mood_great\"\n    - title: \"super sad\"\n      payload: \"/mood_sad\"\n```\n\n----------------------------------------\n\nTITLE: Defining Form Activation Intent in NLU Data\nDESCRIPTION: This snippet shows how to define the intent that activates the form with example utterances, some of which include pre-filled entity values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- intent: request_restaurant\n  examples: |\n    - im looking for a restaurant\n    - can i get [swedish](cuisine) food in any area\n    - a restaurant that serves [caribbean](cuisine) food\n    - id like a restaurant\n    - im looking for a restaurant that serves [mediterranean](cuisine) food\n    - can i find a restaurant that serves [chinese](cuisine)\n```\n\n----------------------------------------\n\nTITLE: Querying Top 5 Intents in SQL\nDESCRIPTION: This SQL query identifies the most common user intents by counting occurrences in the rasa_user_message table and limiting results to the top 5. It helps developers understand what users are primarily trying to accomplish with the assistant.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/example-queries.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"public\".\"rasa_user_message\".\"intent\" AS \"intent\",\n  count(*) AS \"count\"\nFROM \"public\".\"rasa_user_message\"\nGROUP BY 1\nORDER BY 2 DESC, 1 ASC\nLIMIT 5\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Action Server\nDESCRIPTION: Extended YAML configuration for Docker Compose that includes both a Rasa service and a custom action server service exposed on port 5055.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/deploying-in-docker-compose.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.0'\nservices:\n  rasa:\n    image: rasa/rasa:${variables.release}-full\n    ports:\n      - 5005:5005\n    volumes:\n      - ./:/app\n    command:\n      - run\n  app:\n    image: <image:tag>\n    expose: 5055\n```\n\n----------------------------------------\n\nTITLE: Test Story Example with Retrieval Intents\nDESCRIPTION: Illustrates the improved test story handling with full retrieval intent display and extraction during action prediction\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- story: test story\n  steps:\n  - user: |\n      what is your name?\n    intent: chitchat/ask_name\n  - action: utter_chitchat/ask_name\n  - intent: bye\n  - action: utter_bye\n```\n\n----------------------------------------\n\nTITLE: Configuring TED Policy in Rasa YAML Configuration\nDESCRIPTION: Configuration snippet for adding the TED Policy to the policies section in config.yml. This policy replaced the deprecated KerasPolicy, with parameters for max_history and training epochs.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n# - ... other policies\n- name: TEDPolicy\n  max_history: 5\n  epochs: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring UnexpecTEDIntentPolicy in Rasa\nDESCRIPTION: Configuration example for the UnexpecTEDIntentPolicy which helps review conversations and handle unexpected user inputs. Specifies training epochs and max history parameters.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n  - name: UnexpecTEDIntentPolicy\n    epochs: 200\n    max_history: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring DIET Classifier with Linear Norm Confidence in Rasa YAML\nDESCRIPTION: Example of configuring the DIET Classifier with linear norm confidence and constrained similarities in Rasa.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n- name: DIETClassifier\n  model_confidence: linear_norm\n  constrain_similarities: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Tracker Store in Endpoints File\nDESCRIPTION: YAML configuration for setting up a Redis tracker store in the endpoints.yml file, specifying connection details and authentication.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml-rasa\nCODE:\n```\ntracker_store:\n    type: redis\n    url: <url of the redis instance, e.g. localhost>\n    port: <port of your redis instance, usually 6379>\n    key_prefix: <alphanumeric value to prepend to tracker store keys>\n    db: <number of your database within redis, e.g. 0>\n    password: <password used for authentication>\n    use_ssl: <whether or not the communication is encrypted, default `false`>\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Reminder in Python using Rasa SDK\nDESCRIPTION: Creates a ReminderCancelled event to cancel a previously scheduled reminder.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nevt = ReminderCancelled(name = \"remind_water_plants\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Out-of-scope Intent in Rasa\nDESCRIPTION: This snippet defines an 'out_of_scope' intent in the NLU training data with example utterances for messages the bot isn't designed to handle.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nnlu:\n- intent: out_of_scope\n  examples: |\n    - I want to order food\n    - What is 2 + 2?\n    - Who's the US President?\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Mappings in Rasa Domain\nDESCRIPTION: Demonstrates the new slot mapping configuration with conditions for active loop, allowing more flexible slot filling mechanism in Rasa 3.0\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  location:\n    type: text\n    influence_conversation: false\n    mappings:\n    - type: from_entity\n      entity: city\n      conditions:\n      - active_loop: booking_form\n```\n\n----------------------------------------\n\nTITLE: Displaying Rasa Model Evaluation Results in Jupyter Notebook\nDESCRIPTION: Check for and display the results of the Rasa model evaluation, including NLU errors and Core errors from the test run.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/jupyter-notebooks.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif os.path.isfile(\"errors.json\"):\n    print(\"NLU Errors:\")\n    print(open(\"errors.json\").read())\nelse:\n    print(\"No NLU errors.\")\n\nif os.path.isdir(\"results\"):\n      print(\"\\n\")\n      print(\"Core Errors:\")\n      print(open(\"results/failed_test_stories.yml\").read())\n```\n\n----------------------------------------\n\nTITLE: Querying Number of Sessions per Channel in SQL\nDESCRIPTION: This SQL query counts distinct sender keys grouped by channel and timestamp from the rasa_sender table. It helps analyze which messaging channels users prefer and how those preferences change over time.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/example-queries.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"public\".\"rasa_sender\".\"channel\" AS \"channel\",\n  \"public\".\"rasa_sender\".\"first_seen\" AS \"timestamp\",\n  count(distinct \"public\".\"rasa_sender\".\"sender_key\") AS \"count\"\nFROM \"public\".\"rasa_sender\"\nGROUP BY 1, 2\nORDER BY 1 ASC, 2 ASC\n```\n\n----------------------------------------\n\nTITLE: Configuring Any Slot in Rasa YAML\nDESCRIPTION: Example configuration for an 'any' slot type in Rasa that can store arbitrary values of any type. This example creates a shopping_items slot with a custom mapping.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_13\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  shopping_items:\n    type: any\n    mappings:\n    - type: custom\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Fallback Action in Rasa\nDESCRIPTION: This Python code creates a custom action that executes when fallback is triggered, sending a custom template and reverting the user's message.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Text, Dict, List\n\nfrom rasa_sdk import Action, Tracker\nfrom rasa_sdk.events import UserUtteranceReverted\nfrom rasa_sdk.executor import CollectingDispatcher\n\nclass ActionDefaultFallback(Action):\n    \"\"\"Executes the fallback action and goes back to the previous state\n    of the dialogue\"\"\"\n\n    def name(self) -> Text:\n        return ACTION_DEFAULT_FALLBACK_NAME\n\n    async def run(\n        self,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> List[Dict[Text, Any]]:\n        dispatcher.utter_message(template=\"my_custom_fallback_template\")\n\n        # Revert user message which led to fallback.\n        return [UserUtteranceReverted()]\n```\n\n----------------------------------------\n\nTITLE: Rasa 3.0 Domain Configuration Example - YAML\nDESCRIPTION: Migrated version of the domain configuration in Rasa 3.0 format with updated slot mappings structure.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n - cuisine\n - number\nslots:\n   cuisine:\n     type: text\n     mappings:\n     - type: from_entity\n       entity: cuisine\n   num_people:\n     type: float\n     mappings:\n     - type: from_entity\n       entity: number\n   outdoor_seating:\n     type: bool\n     mappings:\n     - type: from_intent\n       intent: affirm\n       value: true\n     - type: from_intent\n       intent: deny\n       value: false\nforms:\n   restaurant_form:\n     required_slots:\n     - cuisine\n     - num_people\n     - outdoor_seating\n```\n\n----------------------------------------\n\nTITLE: Using utter_message with Text Parameter in Rasa\nDESCRIPTION: Example of using the CollectingDispatcher.utter_message method with the text parameter to send a simple text message to the user.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-dispatcher.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.utter_message(text = \"Hey there\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CountVectorsFeaturizer in YAML for Rasa\nDESCRIPTION: YAML configuration for CountVectorsFeaturizer that matches the previous NGramFeaturizer. It specifies character n-grams with specific window sizes and feature constraints.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: 'CountVectorsFeaturizer'\n  analyzer: 'char_wb'\n  min_ngram: 3\n  max_ngram: 17\n  max_features: 10\n  min_df: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring RedisLockStore in endpoints.yml\nDESCRIPTION: Configuration example for setting up the RedisLockStore in the endpoints.yml file, which uses Redis as a persistence layer for conversation locks.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/lock-stores.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlock_store:\n    type: \"redis\"\n    url: <url of the redis instance, e.g. localhost>\n    port: <port of your redis instance, usually 6379>\n    password: <password used for authentication>\n    db: <number of your database within redis, e.g. 0>\n    key_prefix: <alphanumeric value to prepend to lock store keys>\n```\n\n----------------------------------------\n\nTITLE: Configuration Example in YAML\nDESCRIPTION: Example of how configuration parameters should be specified in the new YAML format. Shows batch size configuration for MaxHistoryTrackerFeaturizer.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_71\n\nLANGUAGE: yaml\nCODE:\n```\n\"batch_size\": [32, 64]\n```\n\n----------------------------------------\n\nTITLE: Custom Slot Mapping in Domain Configuration - YAML\nDESCRIPTION: Example of defining a custom slot mapping with a verification action in the domain configuration file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  is_existing_customer:\n    type: bool\n    mappings:\n    - type: custom\n      action: action_verify_customer_status\n```\n\n----------------------------------------\n\nTITLE: Action Execution Event in JSON for Rasa\nDESCRIPTION: JSON representation of an 'action' event in Rasa, which logs an action called by the bot. This event is automatically tracked for any action called, even if it doesn't execute successfully.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"action\",\n    \"name\": \"my_action\"\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Data Loading with TrainingDataImporter in Rasa 3.0\nDESCRIPTION: Shows how to use the TrainingDataImporter to load data synchronously in Rasa 3.0, which replaced the previous asynchronous methods from Rasa 2.0.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Text\nfrom rasa.shared.importers.importer import TrainingDataImporter\n\ndef load_data(domain_path: Text, config_path: Text):\n    file_importer = TrainingDataImporter.load_from_config(\n        config_path, domain_path\n    )\n    # note that all the functions below were async before:\n    config = file_importer.get_config()\n    domain = file_importer.get_domain()\n    stories = file_importer.get_stories()\n    nlu_data = file_importer.get_nlu_data()\n```\n\n----------------------------------------\n\nTITLE: Custom Action Registration in Domain for Form Validation\nDESCRIPTION: Domain configuration in domain.yml that registers a custom action for form validation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nactions:\n  # Other actions\n  # ...\n  - validate_restaurant_form\n```\n\n----------------------------------------\n\nTITLE: spaCy Entity Extractor Configuration\nDESCRIPTION: YAML configuration for SpacyEntityExtractor including dimension specifications for entity types.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"SpacyEntityExtractor\"\n  # dimensions to extract\n  dimensions: [\"PERSON\", \"LOC\", \"ORG\", \"PRODUCT\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration to ConcurrentRedisLockStore\nDESCRIPTION: Configuration example for migrating from RedisLockStore to ConcurrentRedisLockStore by specifying the full module path and replacing the 'url' field with 'host'.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/lock-stores.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlock_store:\n    type: rasa_plus.components.concurrent_lock_store.ConcurrentRedisLockStore\n    host: <host of the redis instance, e.g. localhost>\n    port: <port of your redis instance, usually 6379>\n    password: <password used for authentication>\n    db: <number of your database within redis, e.g. 0>\n    key_prefix: <alphanumeric value to prepend to lock store keys>\n```\n\n----------------------------------------\n\nTITLE: Basic Policy Class Implementation in Rasa 2.0\nDESCRIPTION: Shows the basic structure of a policy class in Rasa 2.0, where policy registration was handled differently without decorators.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.core.policies.policy import Policy\n\nclass MyPolicy(Policy):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Example Output of DucklingEntityExtractor\nDESCRIPTION: JSON representation of the output produced by the DucklingEntityExtractor component. It shows an extracted time entity with its start and end positions, value, confidence, and extractor information.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entities\": [{\n        \"end\": 53,\n        \"entity\": \"time\",\n        \"start\": 48,\n        \"value\": \"2017-04-10T00:00:00.000+02:00\",\n        \"confidence\": 1.0,\n        \"extractor\": \"DucklingEntityExtractor\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using OR Statements with Intents in Rasa Stories\nDESCRIPTION: Example showing how to use OR statements to handle multiple intents in the same way within a story flow, reducing redundancy.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/stories.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story:\n  steps:\n  # ... previous steps\n  - action: utter_ask_confirm\n  - or:\n    - intent: affirm\n    - intent: thankyou\n  - action: action_handle_affirmation\n```\n\n----------------------------------------\n\nTITLE: Configuring DIETClassifier with Linear Normalization and Constrained Similarities\nDESCRIPTION: Configuration example for DIETClassifier that sets model_confidence to linear_norm and enables constrain_similarities, which are recommended settings introduced in Rasa 2.x for better fallback threshold tuning.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n- name: DIETClassifier\n  model_confidence: linear_norm\n  constrain_similarities: True\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditions in Rasa Rules\nDESCRIPTION: This example demonstrates how to use conditions in a Rasa rule by checking whether a slot `user_provided_name` has been set before executing the greeting action.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/rules.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n\n- rule: Only say `hello` if the user provided a name\n  condition:\n  - slot_was_set:\n    - user_provided_name: true\n  steps:\n  - intent: greet\n  - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Configuring Jieba Tokenizer\nDESCRIPTION: YAML configuration for the Chinese Jieba tokenizer with support for custom dictionaries.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"JiebaTokenizer\"\n  dictionary_path: \"path/to/custom/dictionary/dir\"\n  # Flag to check whether to split intents\n  \"intent_tokenization_flag\": False\n  # Symbol on which intent should be split\n  \"intent_split_symbol\": \"_\"\n  # Regular expression to detect tokens\n  \"token_pattern\": None\n```\n\n----------------------------------------\n\nTITLE: Conditionally Terminating a Rasa Rule\nDESCRIPTION: This YAML and Python code demonstrates creating a Rasa rule that conditionally terminates based on custom logic within the `action_check_termination` action.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/rules.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n\n- rule: Rule which will be conditionaly terminated\n  steps:\n  - intent: greet\n  - action: action_check_termination\n  - action: utter_greet\n  wait_for_user_input: true\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata at the Intent Level in Rasa\nDESCRIPTION: Example showing how to define metadata at the intent level, which applies to all examples within that intent. This is useful for assigning common attributes to all examples of a specific intent.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- intent: greet\n  metadata:\n    sentiment: neutral\n  examples:\n  - text: |\n      hi\n  - text: |\n      hey there!\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Reminder in Python using Rasa SDK\nDESCRIPTION: Creates a ReminderScheduled event to set a reminder for a future action. This example schedules a reminder for watering plants.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nevt = ReminderScheduled(\n    intent_name = \"EXTERNAL_dry_plant\",\n    trigger_date_time = datetime(2020, 9, 15, 0, 36, 0, 851609),\n    entities = [{\"name\": \"plant\",\"value\":\"orchid\"}], \n    name = \"remind_water_plants\",\n)\n```\n\n----------------------------------------\n\nTITLE: NLG Server Response Format in JSON\nDESCRIPTION: The expected response format from an NLG server back to Rasa. It shows the possible response types including text, buttons, images, elements, attachments, and custom payloads.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlg.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"text\": \"Some text\",\n    \"buttons\": [],\n    \"image\": null,  # string of image URL\n    \"elements\": [],\n    \"attachments\": [], \n    \"custom\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Rasa API with Dialogflow Emulation\nDESCRIPTION: Sends a test request to the Rasa API with Dialogflow emulation mode to get responses in Dialogflow format.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/google-dialogflow-to-rasa.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:5005/model/parse?emulation_mode=dialogflow' -d '{\"text\": \"hello\"}'\n```\n\n----------------------------------------\n\nTITLE: Conditional Slot Mapping Configuration - YAML\nDESCRIPTION: Example showing how to add mapping conditions to slot definitions to preserve form-specific behavior.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n slots:\n   outdoor_seating:\n     type: bool\n     mappings:\n     - type: from_intent\n       intent: affirm\n       value: true\n       conditions:\n       - active_loop: restaurant_form\n         requested_slot: outdoor_seating\n     - type: from_intent\n       intent: deny\n       value: false\n       conditions:\n       - active_loop: restaurant_form\n         requested_slot: outdoor_seating\n```\n\n----------------------------------------\n\nTITLE: Updating Dialogue Featurization in Rasa Config\nDESCRIPTION: Examples of updating the dialogue featurization configuration in the Rasa config file, replacing deprecated featurizers.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_66\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nlanguage: en\npipeline:\n  - name: WhitespaceTokenizer\n    intent_tokenization_flag: True\n  - name: CountVectorsFeaturizer\n  # other components\npolicies:\n  # other policies\n  - name: TEDPolicy\n    featurizer:\n    - name: SingleStateFeaturizer\n```\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nlanguage: en\npipeline:\n  - name: WhitespaceTokenizer\n    intent_tokenization_flag: False\n  # other components\npolicies:\n  # other policies\n  - name: TEDPolicy\n    featurizer:\n    - name: SingleStateFeaturizer\n```\n\n----------------------------------------\n\nTITLE: Running the Rasa SDK Action Server\nDESCRIPTION: Command to start the Rasa SDK action server, which is required to execute the custom actions defined in actions/actions.py for handling external events and reminders.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/reminderbot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa run actions\n```\n\n----------------------------------------\n\nTITLE: Training Sparse Featurizer in Rasa 2.0 (Python)\nDESCRIPTION: Defines a custom NLU component that extends SparseFeaturizer. The train method processes the training data, adding features to each training example. Dependencies include Rasa's NLU libraries for featurization and configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Any\n\nfrom rasa.nlu.featurizers.sparse_featurizer.sparse_featurizer import SparseFeaturizer\nfrom rasa.nlu.config import RasaNLUModelConfig\nfrom rasa.shared.nlu.training_data.training_data import TrainingData\n\nclass MyNLUComponent(SparseFeaturizer):\n    def train(\n        self,\n        training_data: TrainingData,\n        config: Optional[RasaNLUModelConfig] = None,\n        **kwargs: Any,\n    ) -> None:\n        self.train_featurizer(training_data)\n\n        for message in training_data.training_examples:\n            self.add_features(message)\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Roles and Groups in Domain File (YAML)\nDESCRIPTION: Example of how to define entity roles and groups in the domain file to influence dialogue predictions. This is part of the Entity Roles and Groups feature.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n  - city:\n      roles:\n        - from\n        - to\n  - name\n  - topping:\n      groups:\n        - 1\n        - 2\n  - size:\n      groups:\n        - 1\n        - 2\n```\n\n----------------------------------------\n\nTITLE: Updating Unfeaturized Slots in Rasa Domain\nDESCRIPTION: Examples of updating the deprecated unfeaturized slot type to the new format with influence_conversation property.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_64\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  username:\n    type: unfeaturized\n```\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  username:\n    type: text\n    # Set `influence_conversation` to `false`\n    # to ignore the slot value during the conversation.\n    influence_conversation: false\n```\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  username:\n    type: any\n```\n\n----------------------------------------\n\nTITLE: Rasa SDK Action Server Command-line Options\nDESCRIPTION: Placeholder for the full list of command-line options available when running the Rasa SDK action server. This would typically show all available flags and their descriptions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/running-action-server.mdx#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[python -m rasa_sdk --help]\n```\n\n----------------------------------------\n\nTITLE: Configuring TEDPolicy with Updated Parameter Structure\nDESCRIPTION: Example of TEDPolicy configuration with the new parameter structure that uses dictionaries for transformer_size, number_of_transformer_layers, and dense_dimension instead of scalar values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n  - name: TEDPolicy\n    transformer_size:\n      text: 128\n      action_text: 128\n      label_action_text: 128\n      dialogue: 128\n    number_of_transformer_layers:\n      text: 1\n      action_text: 1\n      label_action_text: 1\n      dialogue: 1\n    dense_dimension:\n      text: 128\n      action_text: 128\n      label_action_text: 128\n      intent: 20\n      action_name: 20\n      label_action_name: 20\n      entities: 20\n      slots: 20\n      active_loop: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring session settings in Rasa\nDESCRIPTION: This snippet demonstrates how to configure session settings in the `domain.yml` file. The `session_config` section defines the session expiration time and whether slots should be carried over to new sessions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_26\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nsession_config:\n  session_expiration_time: 60  # value in minutes, 0 means infinitely long\n  carry_over_slots_to_new_session: true  # set to false to forget slots between sessions\n```\n\n----------------------------------------\n\nTITLE: Configuring ConveRTFeaturizer with External Model URL in Rasa Pipeline\nDESCRIPTION: Configuration for ConveRTFeaturizer component which creates vector representations using the ConveRT model. This component is specifically for English language data and requires setting the model_url parameter since the public URL is no longer available.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"ConveRTFeaturizer\"\n# Remote URL/Local directory of model files(Required)\n\"model_url\": None\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Secrets Manager in endpoints.yml\nDESCRIPTION: Configuration example for setting up HashiCorp Vault as a secrets manager in Rasa Pro using the endpoints.yml file. It specifies the essential parameters like token, URL, secrets path, and optional transit mount point.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/secrets-managers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets_manager:\n    type: vault # required - the secrets manager to use\n    token: <token> # required - token to authenticate to the vault server\n    url: \"http://localhost:1234\" # required - the address of the vault server\n    secrets_path: rasa-secrets  # path to the secrets in the vault server if not set it defaults to `rasa-secrets`\n    transit_mount_point: transit # if transit secrets engine is enabled, set this to mount point of the transit engine\n```\n\n----------------------------------------\n\nTITLE: Component Lifecycle Example Pipeline\nDESCRIPTION: A simple example pipeline showing three components in sequence, used to illustrate the component lifecycle process in Rasa NLU.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npipeline:\n  - name: \"Component A\"\n  - name: \"Component B\"\n  - name: \"Last Component\"\n```\n\n----------------------------------------\n\nTITLE: Using Variable Interpolation with utter_message in Rasa\nDESCRIPTION: Example of using variable interpolation with the utter_message method to personalize responses based on a predefined template in the domain file that includes placeholders.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-dispatcher.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.utter_message(response = \"utter_greet_name\", name = \"Aimee\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Featurizers for Incremental Training in Rasa YAML\nDESCRIPTION: Example of configuring featurizers for incremental training in Rasa, showing the removal of deprecated 'additional_vocabulary_size' and 'number_additional_patterns' parameters.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n  - name: \"WhitespaceTokenizer\"\n  - name: \"RegexFeaturizer\"\n  - name: \"CountVectorsFeaturizer\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pin Code Workflow with Happy and Fallback Paths\nDESCRIPTION: Two rules for handling pin code collection: one for the happy path when the user enters the code, and another for handling timeouts when the user remains silent.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/audioodes-voiceai-connect.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- rule: Set pin code - happy path\n  steps:\n  - intent: set_pin_code\n  - action: utter_config_no_user_input\n  - action: utter_config_dtmf_pin_code\n  - action: pin_code_form\n  - active_loop: pin_code_form\n  - active_loop: null\n  - slot_was_set:\n    - requested_slot: null\n  - action: utter_pin_code_changed\n  - action: action_pin_code_cleanup\n\n- rule: Set pin code - no response - cancel.\n  condition:\n  - active_loop: pin_code_form\n  steps:\n  - intent: vaig_event_noUserInput\n  - action: utter_cancel_set_pin_code\n  - action: action_deactivate_loop\n  - active_loop: null\n```\n\n----------------------------------------\n\nTITLE: Sample Extracted Markers CSV Output in Rasa\nDESCRIPTION: Example of the CSV output format for extracted markers, showing the sender_id, session_idx, marker name, event_idx, and number of preceding user turns for different conversation scenarios.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/markers.mdx#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nsender_id,session_idx,marker,event_idx,num_preceding_user_turns\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,2,0\n4d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,7,1\n4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,14,2\nc00b3de97713427d85524c4374125db1,0,marker_mood_expressed,2,0\n```\n\n----------------------------------------\n\nTITLE: Dense Message Featurizer\nDESCRIPTION: This is a placeholder for a dense message featurizer example implemented in Python. The featurizer uses a pre-trained model to generate dense feature vectors for each token in the input message. The actual implementation can be found at `docs/sources/data/test_classes/custom_graph_components/nlu_dense.py`.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python (docs/sources/data/test_classes/custom_graph_components/nlu_dense.py)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Examples with Metadata in Rasa\nDESCRIPTION: Example showing how to include metadata with intent examples in Rasa. This allows custom NLU components to access additional information about training examples.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- intent: greet\n  examples:\n  - text: |\n      hi\n    metadata:\n      sentiment: neutral\n  - text: |\n      hey there!\n```\n\n----------------------------------------\n\nTITLE: Initializing Rasa SDK Plugin Hooks\nDESCRIPTION: Implementation of the init_hooks function that registers plugin modules with the plugin manager. This code should be placed in the __init__.py file of the rasa_sdk_plugins package.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sanic-extensions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef init_hooks(manager: pluggy.PluginManager) -> None:\n    \"\"\"Initialise hooks into rasa sdk.\"\"\"\n    import sys\n    import rasa_sdk_plugins.your_module\n\n    logger.info(\"Finding hooks\")\n    manager.register(sys.modules[\"rasa_sdk_plugins.your_module\"])\n```\n\n----------------------------------------\n\nTITLE: Custom Tracker Store Endpoints Configuration\nDESCRIPTION: YAML configuration example for setting up a custom tracker store in Rasa with custom parameters.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ntracker_store:\n  type: path.to.your.module.Class\n  url: localhost\n  a_parameter: a value\n  another_parameter: another value\n```\n\n----------------------------------------\n\nTITLE: Running Rasa SDK Action Server with Rasa Installed\nDESCRIPTION: Command to run the Rasa SDK action server when Rasa is installed in the environment. This is the simplest method to start the action server.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/running-action-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa run actions\n```\n\n----------------------------------------\n\nTITLE: Loading Rasa Model from Cloud Storage\nDESCRIPTION: Command to run Rasa with a model fetched from remote cloud storage. The --remote-storage parameter specifies which cloud provider to use.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --model 20190506-100418.tar.gz --remote-storage aws\n```\n\n----------------------------------------\n\nTITLE: Implementing Sanic Extension Hook\nDESCRIPTION: Example implementation of the attach_sanic_app_extensions hook that adds a listener to the Sanic app. This code demonstrates how to create a before_server_start listener using the Sanic app object.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sanic-extensions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport logging\nimport pluggy\n\nfrom asyncio import AbstractEventLoop\nfrom functools import partial\n\n\nlogger = logging.getLogger(__name__)\nhookimpl = pluggy.HookimplMarker(\"rasa_sdk\")\n\n\n@hookimpl  # type: ignore[misc]\ndef attach_sanic_app_extensions(app: Sanic) -> None:\n    logger.info(\"hook called\")\n    app.register_listener(\n        partial(before_server_start),\n        \"before_server_start\",\n    )\n\n\nasync def before_server_start(app: Sanic, loop: AbstractEventLoop):\n    logger.info(\"BEFORE SERVER START\")\n```\n\n----------------------------------------\n\nTITLE: Querying Number of Sessions per Month in SQL\nDESCRIPTION: This SQL query retrieves the count of sessions grouped by month from the rasa_session table. It helps track user engagement over time by showing how many conversation sessions occurred in each month.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/example-queries.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  date_trunc('month', \"public\".\"rasa_session\".\"timestamp\") AS \"first_seen\",\n  count(*) AS \"count\"\nFROM \"public\".\"rasa_session\"\nGROUP BY 1\nORDER BY 1 ASC\n```\n\n----------------------------------------\n\nTITLE: Running Rasa SDK Action Server without Rasa and Custom Host\nDESCRIPTION: Command to run the Rasa SDK action server as a Python module with a custom host address. This combines running without Rasa installed and specifying a network interface.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/running-action-server.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSANIC_HOST=192.168.69.150 python -m rasa_sdk --actions actions\n```\n\n----------------------------------------\n\nTITLE: Configuring credentials for custom Rasa channel connector\nDESCRIPTION: Example of how to configure the credentials.yml file to use a custom channel connector. The file needs to specify the module path of the custom channel and any required configuration parameters.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/custom-connectors.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\naddons.custom_channel.MyIO:\n  username: \"user_name\"\n  another_parameter: \"some value\"\n```\n\n----------------------------------------\n\nTITLE: End-to-End Story with User Messages in Rasa\nDESCRIPTION: Demonstrates how to write a story using direct user messages with entity tags instead of intents.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_23\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: story with entities\n  steps:\n  - user: I can always go for [sushi](cuisine)\n  - action: utter_suggest_cuisine\n```\n\n----------------------------------------\n\nTITLE: Defining Lookup Tables in Rasa\nDESCRIPTION: Shows how to define lookup tables in Rasa training data. Lookup tables are used to generate case-insensitive regex patterns for matching entities.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nnlu:\n- lookup: banks\n  examples: |\n    - JPMC\n    - Bank of America\n```\n\n----------------------------------------\n\nTITLE: Setting Response Variables in a Custom Action Server\nDESCRIPTION: This JSON example shows how to supply values for response variables when using a custom action server other than the Rasa SDK.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\":[\n    ...\n  ],\n  \"responses\":[\n    {\n      \"template\":\"utter_greet\",\n      \"name\":\"Sara\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Event Broker with PLAINTEXT in Rasa Endpoints YAML\nDESCRIPTION: YAML configuration for adding a Kafka event broker with PLAINTEXT security protocol to the Rasa endpoints file. Specifies broker type, security protocol, topic, and client details.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: kafka\n  security_protocol: PLAINTEXT\n  topic: topic\n  url: localhost:9092\n  client_id: kafka-python-rasa\n```\n\n----------------------------------------\n\nTITLE: Adding Required Recipe Configuration in Rasa 3.0\nDESCRIPTION: Shows how to update model configuration to include the required 'recipe' parameter in Rasa 3.0. The example demonstrates adding 'recipe: default.v1' to the top of the configuration file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\n\npipeline:\n  ...\npolicies:\n  ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nrecipe: default.v1\n\nlanguage: en\n\npipeline:\n  ...\npolicies:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Validating Rasa Data with Basic Command\nDESCRIPTION: Runs the data validation process to verify that no mistakes or major inconsistencies appear in your domain, NLU data, or story data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa data validate\n```\n\n----------------------------------------\n\nTITLE: Testing Rasa NLU Model with Interactive Shell\nDESCRIPTION: Launches an interactive shell to test the NLU model by typing messages and receiving interpretation results.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/facebook-wit-ai-to-rasa.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrasa shell nlu\n```\n\n----------------------------------------\n\nTITLE: Configuring DIETClassifier as a CRF Entity Extractor Replacement\nDESCRIPTION: Configuration that replicates the behavior of the deprecated CRFEntityExtractor using DIETClassifier with LexicalSyntacticFeaturizer. This setup disables intent classification and focuses on entity recognition.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_69\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n# - ... other components\n- name: LexicalSyntacticFeaturizer\n  features: [\n    [\"low\", \"title\", \"upper\"],\n    [\n      \"BOS\",\n      \"EOS\",\n      \"low\",\n      \"prefix5\",\n      \"prefix2\",\n      \"suffix5\",\n      \"suffix3\",\n      \"suffix2\",\n      \"upper\",\n      \"title\",\n      \"digit\",\n    ],\n    [\"low\", \"title\", \"upper\"],\n  ]\n- name: DIETClassifier\n  intent_classification: False\n  entity_recognition: True\n  use_masked_language_model: False\n  number_of_transformer_layers: 0\n  # ... any other parameters\n```\n\n----------------------------------------\n\nTITLE: CountVectorsFeaturizer Incremental Training Configuration\nDESCRIPTION: This YAML configuration demonstrates how to configure the CountVectorsFeaturizer for incremental training in Rasa.  It shows how to set the `additional_vocabulary_size` parameter for `text`, `response`, and `action_text` to account for new vocabulary tokens during incremental training.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_13\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npipeline:\n- name: CountVectorsFeaturizer\n  additional_vocabulary_size:\n    text: 1000\n    response: 1000\n    action_text: 1000\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Pro Services Docker Container\nDESCRIPTION: Shell command to run the Rasa Pro Services Docker container with necessary environment variables for license, Kafka broker address, and topic configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-rasa-pro-services.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n    -e RASA_PRO_LICENSE=<your_license> \\\n    -e KAFKA_BROKER_ADDRESS=<BROKER_URL> \\\n    -e KAFKA_TOPIC=rasa-events \\\n    europe-west3-docker.pkg.dev/rasa-releases/rasa-pro/rasa-pro\n```\n\n----------------------------------------\n\nTITLE: Example of invalid domain.yml intent and entity mappings\nDESCRIPTION: Shows an example of empty intent and entity mappings in the domain.yml file that will now raise an InvalidDomain exception. This helps catch configuration errors.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nintents:\n  - greet:\n  - goodbye:\n\nentities:\n  - cuisine:\n  - number:\n```\n\n----------------------------------------\n\nTITLE: Custom NLU Component with Model Provider in Rasa 2.0 (Python)\nDESCRIPTION: Defines an IntentClassifier that can utilize a pretrained Spacy model during training and inference. The train and process methods access the model via kwargs. Dependencies include the Spacy and Rasa training data libraries.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Any\n\nfrom rasa.nlu.config import RasaNLUModelConfig\nfrom rasa.nlu.classifiers.classifier import IntentClassifier\nfrom rasa.shared.nlu.training_data.message import Message\nfrom rasa.shared.nlu.training_data.training_data import TrainingData\n\nclass MyNLUComponent(IntentClassifier):\n    def train(\n        self,\n        training_data: TrainingData,\n        cfg: Optional[RasaNLUModelConfig] = None,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Train the featurizer.\"\"\"\n        spacy_nlp = kwargs.get(\"spacy_nlp\")\n        ...\n\n    def process(self, message: Message, **kwargs: Any) -> None:\n        spacy_nlp = kwargs.get(\"spacy_nlp\", None)\n        ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Event Broker Close Method in Rasa\nDESCRIPTION: Example showing how to implement the updated asynchronous close method for a custom Event Broker. The synchronous implementation will be removed in Rasa Open Source 3.0.0.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.core.brokers.broker import EventBroker\n\nclass MyEventBroker(EventBroker):\n\n    async def close(self) -> None:\n        # clean up event broker resources\n```\n\n----------------------------------------\n\nTITLE: Extending GitHub Actions Workflow with Helm Chart Deployment\nDESCRIPTION: This YAML snippet shows how to extend the GitHub Actions workflow to automatically update a Rasa X/Enterprise deployment using Helm charts after building the Action Server image. It utilizes output parameters from the action_server step.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    name: Build Action Server image and upgrade Rasa X/Enterprise deployment\n    steps:\n    [..]\n\n    # This step shows only the example of output parameter usage\n    # and it's not focused on deployment itself.\n    - name: \"Upgrade a Rasa Action Server deployment\"\n      run: |\n        helm upgrade --install --reuse-values \\\n          --set image.name=${{ steps.action_server.outputs.docker_image_name }} \\\n          --set image.tag=${{ steps.action_server.outputs.docker_image_tag }} rasa-action-server rasa/rasa-action-server\n```\n\n----------------------------------------\n\nTITLE: Rasa Chat Widget HTML Integration\nDESCRIPTION: HTML code snippet for embedding the official Rasa Chat Widget into a webpage using WebSocket connection.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/your-own-website.mdx#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"rasa-chat-widget\" data-websocket-url=\"https://your-rasa-url-here/\"></div>\n<script src=\"https://unpkg.com/@rasahq/rasa-chat\" type=\"application/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action in Python with Rasa SDK\nDESCRIPTION: This code creates a custom action class called ActionJoke that fetches a random joke from an external API and sends it back to the user. The action inherits from the Rasa SDK Action class and implements the required name() and run() methods.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/building-in-docker.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\nfrom rasa_sdk import Action\n\n\nclass ActionJoke(Action):\n  def name(self):\n    return \"action_joke\"\n\n  def run(self, dispatcher, tracker, domain):\n    request = requests.get('http://api.icndb.com/jokes/random').json()  # make an api call\n    joke = request['value']['joke']  # extract a joke from returned json response\n    dispatcher.utter_message(text=joke)  # send the message back to the user\n    return []\n```\n\n----------------------------------------\n\nTITLE: Training a Rasa Model in Jupyter Notebook\nDESCRIPTION: Use the rasa.train function to train a Rasa model, providing the necessary file paths. The function returns the path to the trained model.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/jupyter-notebooks.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport rasa\n\nmodel_path = rasa.train(domain, config, [training_files], output)\nprint(model_path)\n```\n\n----------------------------------------\n\nTITLE: Endpoints Configuration for Docker Compose MongoDB Setup\nDESCRIPTION: Endpoints configuration for connecting to a MongoDB service defined in Docker Compose, with the service name used as the URL.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml-rasa\nCODE:\n```\ntracker_store:\n    type: mongod\n    url: mongodb://mongo:27017\n    db: <name of the db within your mongo instance, e.g. rasa>\n    username: <username used for authentication>\n    password: <password used for authentication>\n    auth_source: <database name associated with the user's credentials>\n```\n\n----------------------------------------\n\nTITLE: Story with Slot Setting in Rasa\nDESCRIPTION: Shows how to reference slot values in stories using slot_was_set events.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_16\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: story with a slot\n  steps:\n  - intent: celebrate_bot\n  - slot_was_set:\n    - feedback_value: positive\n  - action: utter_yay\n```\n\n----------------------------------------\n\nTITLE: Using utter_message with Attachment Parameter in Rasa\nDESCRIPTION: Example of using the CollectingDispatcher.utter_message method with the attachment parameter to send a file to the user.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-dispatcher.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.utter_message(attachment = \"\")\n```\n\n----------------------------------------\n\nTITLE: Creating Channel-Specific Response Variations in Rasa\nDESCRIPTION: This example shows how to define response variations that are specific to certain channels, such as Slack. The 'channel' key specifies which channel the variation is for.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_ask_game:\n  - text: \"Which game would you like to play on Slack?\"\n    channel: \"slack\"\n  - text: \"Which game would you like to play?\"\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Rasa Project in Jupyter Notebook\nDESCRIPTION: Create a new Rasa project directory, change the working directory to it, and list its contents using Python in a Jupyter Notebook.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/jupyter-notebooks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.cli.scaffold import create_initial_project\nimport os\n\nproject = \"test-project\"\ncreate_initial_project(project)\n\n# move into project directory and show files\nos.chdir(project)\nprint(os.listdir(\".\"))\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Shell with Specific NLU Model\nDESCRIPTION: Alternative command to test a specific NLU model by directly passing the model file path. This is useful when you have multiple models and want to test a particular one.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-only.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa shell -m models/nlu-20190515-144445.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Synonyms in Rasa NLU\nDESCRIPTION: Example showing how to define entity synonyms in Rasa. This maps different expressions to a standardized value, helping the model normalize variations of the same entity.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- synonym: credit\n  examples: |\n    - credit card account\n    - credit account\n```\n\n----------------------------------------\n\nTITLE: Running Rasa with AWS S3 Remote Storage\nDESCRIPTION: Command to start the Rasa server with a model stored in AWS S3. Requires AWS environment variables to be set for authentication and configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --model 20190506-100418.tar.gz --remote-storage aws\n```\n\n----------------------------------------\n\nTITLE: Text/List Slot Story Example in YAML\nDESCRIPTION: Example showing equivalent stories for text and list slot types where referencing by name only is treated same as with a value.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_31\n\nLANGUAGE: YAML\nCODE:\n```\nstories:\n- story: Story referencing slot by name\n  steps:\n  - intent: greet\n  - slot_was_set:\n    - name\n\n- story: Story referencing slot with name and value\n  steps:\n  - intent: greet\n  - slot_was_set:\n    - name: \"some name\"\n\n```\n\n----------------------------------------\n\nTITLE: Modern Custom Policy Implementation with End-to-End Support in Rasa 3.0\nDESCRIPTION: Shows the updated implementation of a custom policy in Rasa 3.0 with proper imports, decorator for registration, and updated method signatures using MessageContainerForCoreFeaturization instead of NaturalLanguageInterpreter.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Optional, Dict, Text, Any\n\nfrom rasa.core.featurizers.precomputation import MessageContainerForCoreFeaturization\nfrom rasa.core.policies.policy import PolicyPrediction, Policy\nfrom rasa.engine.recipes.default_recipe import DefaultV1Recipe\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.shared.core.domain import Domain\nfrom rasa.shared.core.generator import TrackerWithCachedStates\nfrom rasa.shared.core.trackers import DialogueStateTracker\n\n@DefaultV1Recipe.register(\n    DefaultV1Recipe.ComponentType.POLICY_WITH_END_TO_END_SUPPORT, is_trainable=True\n)\nclass MyPolicy(Policy):\n    def train(\n        self,\n        training_trackers: List[TrackerWithCachedStates],\n        domain: Domain,\n        precomputations: Optional[MessageContainerForCoreFeaturization] = None,\n    ) -> Resource:\n        ...\n        model_data, label_ids = self._prepare_for_training(\n          training_trackers, domain, precomputations,\n        )\n        ...\n\n    def predict_action_probabilities(\n        self,\n        tracker: DialogueStateTracker,\n        domain: Domain,\n        precomputations: Optional[MessageContainerForCoreFeaturization] = None,\n        rule_only_data: Optional[Dict[Text, Any]] = None,\n        **kwargs: Any,\n    ) -> PolicyPrediction:\n        ...\n        tracker_state_features = self._featurize_tracker(\n            tracker, domain, precomputations, rule_only_data=rule_only_data\n        )\n        ...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Action to Rasa Domain File\nDESCRIPTION: Shows how to add the custom action to the domain file so Rasa uses the custom implementation instead of the default one.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/default-actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nactions:\n  - action_restart\n```\n\n----------------------------------------\n\nTITLE: Displaying Compatibility Matrix in Markdown Table\nDESCRIPTION: This code snippet shows a markdown table that lists the compatible versions of Rasa Pro Services and Rasa Plus. It indicates that Rasa Pro Services version 3.0.x is compatible with Rasa Plus versions 3.3.x, 3.4.x, and 3.5.x, while Rasa Pro Services 3.1.x is compatible with Rasa Plus 3.6.x.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/compatibility-matrix.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Rasa Pro Services |  Rasa Plus          |\n|------------------:|--------------------:|\n| 3.0.x             | 3.3.x, 3.4.x, 3.5.x |\n| 3.1.x             | 3.6.x               |\n```\n\n----------------------------------------\n\nTITLE: Upgrading Helm Deployment with Custom Action Server Image\nDESCRIPTION: This command upgrades a Helm deployment to use the custom Action Server image specified in the values.yaml file. It preserves existing values while updating the image configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nhelm upgrade --namespace <namespace> --reuse-values \\\n  -f values.yaml <release name> rasa/rasa-action-server\n```\n\n----------------------------------------\n\nTITLE: Stories with Checkpoints in Rasa\nDESCRIPTION: Demonstrates how to use checkpoints to connect stories together and create conditional story branches.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_17\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: story_with_a_conditional_checkpoint\n  steps:\n  - checkpoint: greet_checkpoint\n    # This checkpoint should only apply if slots are set to the specified value\n    slot_was_set:\n    - context_scenario: holiday\n    - holiday_name: thanksgiving\n  - intent: greet\n  - action: utter_greet_thanksgiving\n```\n\n----------------------------------------\n\nTITLE: Configuring MitieFeaturizer with Mean Pooling in Rasa Pipeline\nDESCRIPTION: Configuration example for the MitieFeaturizer component which creates vector representations for entity extraction and classification using MITIE. The pooling parameter specifies how to calculate the sentence vector, with options for 'mean' or 'max' pooling.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"MitieFeaturizer\"\n  # Specify what pooling operation should be used to calculate the vector of\n  # the complete utterance. Available options: 'mean' and 'max'.\n  \"pooling\": \"mean\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketChat Credentials in Rasa (YAML)\nDESCRIPTION: This snippet shows how to add RocketChat credentials to the Rasa credentials.yml file. It includes the bot's username, password, and the RocketChat server URL.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/rocketchat.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrocketchat:\n  user: \"yourbotname\"\n  password: \"YOUR_PASSWORD\"\n  server_url: \"https://demo.rocket.chat\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pika Event Consumer in Python\nDESCRIPTION: Python code for a basic Pika event consumer that connects to RabbitMQ and processes incoming Rasa events. Demonstrates setting up the connection, defining a callback, and starting consumption.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport pika\n\n\ndef _callback(ch, method, properties, body):\n        # Do something useful with your incoming message body here, e.g.\n        # saving it to a database\n        print(\"Received event {}\".format(json.loads(body)))\n\nif __name__ == \"__main__\":\n\n    # RabbitMQ credentials with username and password\n    credentials = pika.PlainCredentials(\"username\", \"password\")\n\n    # Pika connection to the RabbitMQ host - typically 'rabbit' in a\n    # docker environment, or 'localhost' in a local environment\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(\"rabbit\", credentials=credentials)\n    )\n\n    # start consumption of channel\n    channel = connection.channel()\n    channel.basic_consume(queue=\"rasa_events\", on_message_callback=_callback, auto_ack=True)\n    channel.start_consuming()\n```\n\n----------------------------------------\n\nTITLE: Entity Annotation Example in Rasa YAML\nDESCRIPTION: Example of how to annotate multiple entities for a single token in Rasa test stories using YAML format with list notation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nstories:\n- story: A basic test story with multiple entities for a single token\n  steps:\n    - user: |\n        I like [ice cream][{\\\"entity\\\": \\\"food\\\"}, {\\\"entity\\\": \\\"desert\\\"}]\n      intent: inform\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Categorical Slot Type Configuration\nDESCRIPTION: Example of configuring a categorical slot type with predefined values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n    risk_level:\n      type: categorical\n      values:\n        - low\n        - medium\n        - high\n      mappings:\n      - type: custom\n```\n\n----------------------------------------\n\nTITLE: Creating an Out-of-scope Rule in Rasa\nDESCRIPTION: This rule defines what action should be taken when the 'out_of_scope' intent is detected, triggering the corresponding response.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n- rule: out-of-scope\n  steps:\n  - intent: out_of_scope\n  - action: utter_out_of_scope\n```\n\n----------------------------------------\n\nTITLE: Starting Rasa Server with JWT Authentication\nDESCRIPTION: Command to start a Rasa server with the API enabled and JWT-based authentication. Clients must include a valid JWT token in their request headers.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/http-api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrasa run \\\n    --enable-api \\\n    --jwt-secret thisismysecret\n```\n\n----------------------------------------\n\nTITLE: Testing a Rasa NLU Model with Interactive Shell\nDESCRIPTION: Command to start an interactive shell to test your trained NLU model by entering messages and seeing how the model interprets them.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/language-support.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa shell nlu\n```\n\n----------------------------------------\n\nTITLE: Setting IDs for Response Variations in Rasa\nDESCRIPTION: This example demonstrates how to set unique IDs for response variations, which is useful when using an NLG server to generate responses.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_greet:\n  - id: \"greet_1\"\n    text: \"Hey, {name}. How are you?\"\n  - id: \"greet_2\"\n    text: \"Hey, {name}. How is your day going?\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DIETClassifier as an Embedding Intent Classifier Replacement\nDESCRIPTION: Configuration for DIETClassifier that replicates the behavior of the deprecated EmbeddingIntentClassifier. It specifies hidden layer sizes, transformer settings, and focuses on intent classification without entity recognition.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_68\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n# - ... other components\n- name: DIETClassifier\n  hidden_layers_sizes:\n    text: [256, 128]\n  number_of_transformer_layers: 0\n  weight_sparsity: 0\n  intent_classification: True\n  entity_recognition: False\n  use_masked_language_model: False\n  BILOU_flag: False\n  scale_loss: True\n  use_sparse_input_dropout: False\n  use_dense_input_dropout: False\n  # ... any other parameters\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Broker After User Creation\nDESCRIPTION: This snippet shows the command to start the Kafka broker following the user creation on Zookeeper. It uses Docker Compose to initiate the Kafka broker service in a detached mode.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/with_tls/scram_sha_512/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d kafka-broker\n```\n\n----------------------------------------\n\nTITLE: Reverting User Utterance in Python using Rasa SDK\nDESCRIPTION: Creates a UserUtteranceReverted event to undo the last user utterance in the conversation history.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nevt = UserUtteranceReverted()\n```\n\n----------------------------------------\n\nTITLE: Processing Batch Messages in NLU Component in Rasa 3.0 (Python)\nDESCRIPTION: Extends the GraphComponent and IntentClassifier to process a list of Message objects. The process method iterates through the messages and calls predict for each. Returns the modified list of messages. Dependencies include Rasa's intent classification and graph components.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nfrom rasa.engine.graph import GraphComponent\nfrom rasa.nlu.classifiers.classifier import IntentClassifier\nfrom rasa.shared.nlu.training_data.message import Message\n\nclass MyNLUComponent(GraphComponent, IntentClassifier):\n    def process(self, messages: List[Message]) -> List[Message]:\n        for message in messages:\n            self.predict(message)\n\n        return messages\n```\n\n----------------------------------------\n\nTITLE: Ignoring All Entities for Intent\nDESCRIPTION: YAML configuration to ignore all entities for a specific intent using empty use_entities array.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nintents:\n  - greet:\n      use_entities: []\n```\n\n----------------------------------------\n\nTITLE: Starting Rasa Server with JWT Authentication and Model\nDESCRIPTION: Command to start a Rasa server with a specified model, API enabled, and JWT authentication.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/http-api.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrasa run \\\n    -m models \\\n    --enable-api \\\n    --jwt-secret thisismysecret\n```\n\n----------------------------------------\n\nTITLE: Custom Action Server Response Format\nDESCRIPTION: JSON format for returning responses from a custom action server implementation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\":[],\n  \"responses\":[\n    {\n      \"template\":\"utter_greet\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Training a Rasa NLU Model\nDESCRIPTION: Command to train a standalone NLU model using data from the data/ directory. The trained model will be saved in the models/ directory with a name starting with 'nlu-'.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-only.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa train nlu\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Action Server Image in values.yaml\nDESCRIPTION: This YAML configuration specifies the custom Action Server image to use in a Helm deployment. It defines the image name and tag that should be used when deploying the Rasa Action Server.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# values.yaml\nimage:\n  name: \"image_name\"\n  tag: \"image_tag\"\n```\n\n----------------------------------------\n\nTITLE: Enabling selective domain for custom actions in endpoints.yml\nDESCRIPTION: This snippet shows how to enable the `enable_selective_domain` option within your `endpoints.yml` file. When enabled the domain will be sent only to those custom actions which have specifically stated that they need it.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_28\n\nLANGUAGE: YAML\nCODE:\n```\n# endpoints.yml\naction_endpoint:\n  url: \"http://localhost:5055/webhook\" # URL to your action server\n  enable_selective_domain: true\n```\n\n----------------------------------------\n\nTITLE: User Message Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'user' event in Rasa, indicating a user sent a message to the bot. This event is automatically tracked when a user sends a message and is not usually returned by custom actions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"user\",\n    \"text\": \"Hey\",\n    \"parse_data\": {\n        \"intent\": {\n            \"name\": \"greet\",\n            \"confidence\": 0.9\n        },\n        \"entities\": []\n    },\n    \"metadata\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Rasa Action for Rule Termination\nDESCRIPTION: This Python snippet defines a custom action that determines whether a rule should terminate by returning `action_listen`. This is used within a Rasa assistant to conditionally control flow.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/rules.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa_sdk import Action\nfrom rasa_sdk.events import FollowupAction\n\nclass ActionCheckTermination(Action):\n\n    def name(self):\n        return \"action_check_termination\"\n\n    def run(self, dispatcher, tracker, domain):\n\n        # your business logic here\n        should_terminate = check_for_termination(<params>)\n\n        if should_terminate:\n            return [FollowupAction(\"action_listen\")]\n\n        return []\n```\n\n----------------------------------------\n\nTITLE: Running the Rasa Assistant with Custom Actions\nDESCRIPTION: Commands to start both the action server and the Rasa shell interface. The action server runs in the background while the shell provides a command-line interface for interacting with the bot.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/formbot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrasa run actions&\nrasa shell -m models --endpoints endpoints.yml\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Responses in Rasa Domain File\nDESCRIPTION: This example shows how to define simple text responses in the domain.yml file. Each response name starts with 'utter_' and can contain one or more text variations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nintents:\n  - greet\n\nresponses:\n  utter_greet:\n  - text: \"Hi there!\"\n  utter_bye:\n  - text: \"See you!\"\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with Custom Actions in Rasa\nDESCRIPTION: This bash command demonstrates how to start the action server and run end-to-end tests for Rasa chatbots. It's necessary when test cases include custom actions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrasa run actions && rasa test e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Usage in Rasa Pipeline\nDESCRIPTION: Demonstrates how to configure feature usage for different components in a Rasa pipeline, including setting aliases for featurizers and specifying which features to use for classifiers.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: ConveRTTokenizer\n- name: ConveRTFeaturizer\n  alias: \"convert\"\n- name: CountVectorsFeaturizer\n  alias: \"cvf_word\"\n- name: CountVectorsFeaturizer\n  alias: \"cvf_char\"\n  analyzer: char_wb\n  min_ngram: 1\n  max_ngram: 4\n- name: RegexFeaturizer\n  alias: \"regex\"\n- name: LexicalSyntacticFeaturizer\n  alias: \"lsf\"\n- name: DIETClassifier:\n- name: ResponseSelector\n  epochs: 50\n  featurizers: [\"convert\", \"cvf_word\"]\n- name: EntitySynonymMapper\n```\n\n----------------------------------------\n\nTITLE: Migrated TwoStageFallbackPolicy Configuration in Rasa 2.0\nDESCRIPTION: The updated configuration for Rasa 2.0 that replaces the legacy TwoStageFallbackPolicy with FallbackClassifier in the pipeline and RulePolicy in policies.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nrecipe: default.v1\npipeline:\n  # Other components\n  - name: FallbackClassifier\n    threshold: 0.4\n    ambiguity_threshold: 0.1\n\npolicies:\n  # Other policies\n  - name: RulePolicy\n    core_fallback_threshold: 0.3\n    core_fallback_action_name: \"action_default_fallback\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Escalation Rate Over Time in SQL\nDESCRIPTION: This SQL query calculates the monthly rate at which conversations are escalated to human support. It uses CTEs to identify sessions with the 'handoff_to_support' intent and calculates the ratio of those sessions to total sessions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/example-queries.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nWITH \"sessions\" AS (\n    SELECT\n        \"public\".\"rasa_user_message\".\"session_id\" AS \"session_id\",\n        date_trunc('month', \"public\".\"rasa_user_message\".\"timestamp\") AS \"timestamp\",\n        (\n          CASE \"public\".\"rasa_user_message\".\"intent\"\n            WHEN 'handoff_to_support'\n            THEN 1 ELSE 0\n          END\n        ) AS \"has_handoff_to_support\"\n    FROM \"public\".\"rasa_user_message\"\n),\n\"sessions_with_handoff\" AS (\n    SELECT\n      \"session_id\",\n      \"timestamp\",\n      SUM(\"has_handoff_to_support\") AS \"has_handoff_to_support\"\n    FROM \"sessions\"\n    GROUP BY 1, 2\n)\nSELECT\n  \"timestamp\",\n  SUM(\"has_handoff_to_support\") / count(*) AS \"escalation_rate\"\nFROM \"sessions_with_handoff\"\nGROUP BY 1 ASC\nORDER BY 1 ASC\n```\n\n----------------------------------------\n\nTITLE: Configuring ConcurrentRedisLockStore in endpoints.yml\nDESCRIPTION: Configuration example for setting up the ConcurrentRedisLockStore in the endpoints.yml file. This lock store uses Redis as a persistence layer and is safe for use with multiple Rasa server replicas.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/lock-stores.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlock_store:\n    type: rasa_plus.components.concurrent_lock_store.ConcurrentRedisLockStore\n    host: <host of the redis instance, e.g. localhost>\n    port: <port of your redis instance, usually 6379>\n    password: <password used for authentication>\n    db: <number of your database within redis, e.g. 0>\n    key_prefix: <alphanumeric value to prepend to lock store keys>\n```\n\n----------------------------------------\n\nTITLE: Creating New Feature Branch\nDESCRIPTION: Command to create and checkout a new branch for implementing features or fixes.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b name-of-your-new-branch\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Users with SCRAM Authentication\nDESCRIPTION: This snippet outlines the commands to create Kafka users with SCRAM-SHA-512 authentication in Zookeeper. It demonstrates how to alter the user configuration within Zookeeper using specified security options.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/with_tls/scram_sha_512/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it zookeeper-scram-sha-512-tls bash\ncd /etc/kafka/client\nKAFKA_OPTS=\"-Djava.security.auth.login.config=zookeeper_client_jaas.conf\" kafka-configs --zookeeper localhost:2189 --alter --add-config 'SCRAM-SHA-512=[iterations=4096,password=password]' --entity-type users --entity-name kafkabroker\nKAFKA_OPTS=\"-Djava.security.auth.login.config=zookeeper_client_jaas.conf\" kafka-configs --zookeeper localhost:2189 --alter --add-config 'SCRAM-SHA-512=[iterations=4096,password=password]' --entity-type users --entity-name client\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Channel in credentials.yml\nDESCRIPTION: YAML configuration snippet for enabling the REST channel in Rasa, which allows the bot to receive requests at the /webhooks/rest/webhook endpoint.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/deploying-in-docker-compose.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrest:\n  # you don't need to provide anything here - this channel doesn't\n  # require any credentials\n```\n\n----------------------------------------\n\nTITLE: Configuring FallbackClassifier in Rasa Pipeline\nDESCRIPTION: Demonstrates how to add the FallbackClassifier to the NLU pipeline, which predicts an 'nlu_fallback' intent when confidence is below a specified threshold.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- # Other NLU components ...\n- name: FallbackClassifier\n  # If the highest ranked intent has a confidence lower than the threshold then\n  # the NLU pipeline predicts an intent `nlu_fallback` which you can then be used in\n  # stories / rules to implement an appropriate fallback.\n  threshold: 0.5\n```\n\n----------------------------------------\n\nTITLE: Setting a Followup Action in Python using Rasa SDK\nDESCRIPTION: Creates a FollowupAction event to specify the next action to be executed in the conversation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nevt = FollowupAction(name = \"action_say_goodbye\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Event Broker with SASL SSL in Rasa Endpoints YAML\nDESCRIPTION: YAML configuration for adding a Kafka event broker with SASL SSL security protocol to the Rasa endpoints file. Includes SASL and SSL settings, topic, and client details.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: kafka\n  security_protocol: SASL_SSL\n  topic: topic\n  url: localhost:9092\n  client_id: kafka-python-rasa\n  sasl_username: username\n  sasl_password: password\n  sasl_mechanism: PLAIN\n  ssl_cafile: CARoot.pem\n  ssl_certfile: certificate.pem\n  ssl_keyfile: key.pem\n  ssl_check_hostname: True\n```\n\n----------------------------------------\n\nTITLE: Implementing Migration Stories in Rasa YAML\nDESCRIPTION: Example of Rasa story configuration showing how to handle different migration scenarios using a single intent with entity-based slot filling.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/generating-nlu-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: migrate from IBM Watson\n  steps:\n    - intent: migration\n      entities:\n      - product\n    - slot_was_set:\n      - product: Watson\n    - action: utter_watson_migration\n\n- story: migrate from Dialogflow\n  steps:\n    - intent: migration\n      entities:\n      - product\n    - slot_was_set:\n      - product: Dialogflow\n    - action: utter_dialogflow_migration\n\n- story: migrate from unspecified\n  steps:\n    - intent: migration\n    - action: utter_ask_migration_product\n```\n\n----------------------------------------\n\nTITLE: Updating Domain with Form-Related Intents\nDESCRIPTION: This snippet shows how to add all the necessary intents to the domain file for the form to work properly.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nintents:\n  - request_restaurant\n  - affirm\n  - deny\n  - inform\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Custom Action Server\nDESCRIPTION: This bash command builds a Docker image for a custom Rasa Action Server with a specified tag. The tag should reflect versioning or purpose of the image to distinguish it from other versions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . -t <account_username>/<repository_name>:<custom_image_tag>\n```\n\n----------------------------------------\n\nTITLE: Using utter_message with Response Parameter in Rasa\nDESCRIPTION: Example of using the CollectingDispatcher.utter_message method with the response parameter to trigger a predefined response from the domain file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-dispatcher.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.utter_message(response = \"utter_greet\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating Rasa Model in Jupyter Notebook\nDESCRIPTION: Test the trained Rasa model using the rasa.test function, providing the model path and directories containing test stories and NLU data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/jupyter-notebooks.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrasa.test(model_path, stories_directory, nlu_data_directory)\nprint(\"Done testing.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Responses for Form Submission in Rasa\nDESCRIPTION: This snippet shows how to define response templates in the domain.yml file that will be sent after a form has been submitted. It includes a submission confirmation message and a response that displays the collected slot values for a restaurant search.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\n  utter_submit:\n  - text: \"All done!\"\n  utter_slots_values:\n  - text: \"I am going to run a restaurant search using the following parameters:\\n\n            - cuisine: {cuisine}\\n\n            - num_people: {num_people}\\n\n            - outdoor_seating: {outdoor_seating}\"\n```\n\n----------------------------------------\n\nTITLE: Example Response Selector Output with Custom Retrieval Intent in Rasa JSON\nDESCRIPTION: This code snippet demonstrates the JSON output structure of the ResponseSelector component, showing how responses are organized by retrieval intent key. It includes confidence scores, response keys, and ranked alternatives.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"response_selector\": {\n      \"faq\": {\n        \"response\": {\n          \"id\": 1388783286124361986,\n          \"confidence\": 0.7,\n          \"intent_response_key\": \"chitchat/ask_weather\",\n          \"responses\": [\n            {\n              \"text\": \"It's sunny in Berlin today\",\n              \"image\": \"https://i.imgur.com/nGF1K8f.jpg\"\n            },\n            {\n              \"text\": \"I think it's about to rain.\"\n            }\n          ],\n          \"utter_action\": \"utter_chitchat/ask_weather\"\n         },\n        \"ranking\": [\n          {\n            \"id\": 1388783286124361986,\n            \"confidence\": 0.7,\n            \"intent_response_key\": \"chitchat/ask_weather\"\n          },\n          {\n            \"id\": 1388783286124361986,\n            \"confidence\": 0.3,\n            \"intent_response_key\": \"chitchat/ask_name\"\n          }\n        ]\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing a Conversation in Python using Rasa SDK\nDESCRIPTION: Creates a ConversationPaused event to pause the current conversation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nevt = ConversationPaused()\n```\n\n----------------------------------------\n\nTITLE: DIETClassifier Output Example in JSON\nDESCRIPTION: Example output from the DIETClassifier showing intent classification with confidence scores and entity extraction results.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"intent\": {\"name\": \"greet\", \"confidence\": 0.7800},\n    \"intent_ranking\": [\n        {\n            \"confidence\": 0.7800,\n            \"name\": \"greet\"\n        },\n        {\n            \"confidence\": 0.1400,\n            \"name\": \"goodbye\"\n        },\n        {\n            \"confidence\": 0.0800,\n            \"name\": \"restaurant_search\"\n        }\n    ],\n    \"entities\": [{\n        \"end\": 53,\n        \"entity\": \"time\",\n        \"start\": 48,\n        \"value\": \"2017-04-10T00:00:00.000+02:00\",\n        \"confidence\": 1.0,\n        \"extractor\": \"DIETClassifier\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Helm Version\nDESCRIPTION: Command to check the installed version of the Helm CLI.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm version --short\n```\n\n----------------------------------------\n\nTITLE: Building Rasa Open Source from Source\nDESCRIPTION: Clones the Rasa repository from GitHub and installs it using Poetry for development purposes.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://install.python-poetry.org | python3 -\ngit clone https://github.com/RasaHQ/rasa.git\ncd rasa\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Tag Rasa Model as Production in Rasa X/Enterprise\nDESCRIPTION: This bash script tags a Rasa model as 'production' in Rasa X/Enterprise. It sends a PUT request to the Rasa X/Enterprise API endpoint to update the model's tag. This assumes that the model has already been uploaded and that you want to mark it as the active production model. `my_model` should be replaced with the actual model name or ID.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/setting-up-ci-cd.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n\"curl -X PUT \\\"https://example.rasa.com/api/projects/default/models/my_model/tags/production\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Tracker Store in Rasa\nDESCRIPTION: YAML configuration for setting up DynamoDB as a tracker store in Rasa. Requires specifying the table name and AWS region.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntracker_store:\n    type: dynamo\n    table_name: <name of the table to create, e.g. rasa>\n    region: <name of the region associated with the client>\n```\n\n----------------------------------------\n\nTITLE: Defining an Out-of-scope Response in Rasa Domain File\nDESCRIPTION: This snippet shows how to define the response message that will be sent when an out-of-scope intent is detected.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_out_of_scope:\n  - text: Sorry, I can't handle that request.\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Slot for Music Preference in Rasa Domain\nDESCRIPTION: This snippet shows how to define a boolean slot named 'likes_music' in the Rasa domain file. The slot is used to store the user's music preference and affect the conversation flow.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/contextual-conversations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  likes_music:\n    type: bool\n    mappings:\n    - type: custom\n```\n\n----------------------------------------\n\nTITLE: Simplified Story with Branching Logic in Custom Action\nDESCRIPTION: A simplified story that delegates the branching logic to a custom action instead of using slots, making the story structure simpler.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: check for rain\n  steps:\n  - intent: check_for_rain\n  - action: action_check_for_rain\n```\n\n----------------------------------------\n\nTITLE: Pushing Custom Action Server Image to DockerHub\nDESCRIPTION: These bash commands authenticate with DockerHub and push the custom Action Server image to a repository. This makes the image available for deployment on other servers.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker login --username <account_username> --password <account_password>\ndocker push <account_username>/<repository_name>:<custom_image_tag>\n```\n\n----------------------------------------\n\nTITLE: Sending a Test Message to the Bot via cURL\nDESCRIPTION: cURL command to send a test message to the Rasa bot through the callback channel webhook. This demonstrates how to interact with the bot programmatically.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/reminderbot/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST http://localhost:5005/webhooks/callback/webhook \\\n   -d '{\"sender\": \"tester\", \"message\": \"hello\"}' \\\n   -H \"Content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Recording Executed Action in Python using Rasa SDK\nDESCRIPTION: Creates an ActionExecuted event to record an action that was executed in the conversation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nevt = ActionExecuted(\"action_greet_user\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Pika Event Broker in Rasa Endpoints YAML\nDESCRIPTION: YAML configuration for adding a Pika (RabbitMQ) event broker to the Rasa endpoints file. Specifies the broker type, URL, credentials, and queue name.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/event-brokers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: pika\n  url: localhost\n  username: username\n  password: password\n  queue: rasa_events\n```\n\n----------------------------------------\n\nTITLE: Example Response Selector Output with Default Retrieval Intent in Rasa JSON\nDESCRIPTION: This code snippet shows the JSON output when the ResponseSelector is used with its default retrieval intent configuration. It highlights how the 'default' key is used in the response_selector object.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"response_selector\": {\n      \"default\": {\n        \"response\": {\n          \"id\": 1388783286124361986,\n          \"confidence\": 0.7,\n          \"intent_response_key\": \"chitchat/ask_weather\",\n          \"responses\": [\n            {\n              \"text\": \"It's sunny in Berlin today\",\n              \"image\": \"https://i.imgur.com/nGF1K8f.jpg\"\n            },\n            {\n              \"text\": \"I think it's about to rain.\"\n            }\n          ],\n          \"utter_action\": \"utter_chitchat/ask_weather\"\n         },\n        \"ranking\": [\n          {\n            \"id\": 1388783286124361986,\n            \"confidence\": 0.7,\n            \"intent_response_key\": \"chitchat/ask_weather\"\n          },\n          {\n            \"id\": 1388783286124361986,\n            \"confidence\": 0.3,\n            \"intent_response_key\": \"chitchat/ask_name\"\n          }\n        ]\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenShift CLI Connection\nDESCRIPTION: Command to verify that the OpenShift CLI is correctly connected to the cluster.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\noc version\n```\n\n----------------------------------------\n\nTITLE: Running Rasa with Google Cloud Storage\nDESCRIPTION: Command to start the Rasa server with a model stored in Google Cloud Storage. Requires GOOGLE_APPLICATION_CREDENTIALS environment variable for authentication.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --model 20190506-100418.tar.gz --remote-storage gcs\n```\n\n----------------------------------------\n\nTITLE: Training a Rasa NLU Model\nDESCRIPTION: Command to train a Rasa NLU model using the configuration and training data defined in your project.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/language-support.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa train nlu\n```\n\n----------------------------------------\n\nTITLE: Configuring Rephrase Responses for Knowledge Base Action\nDESCRIPTION: This snippet defines the utter_ask_rephrase responses that the knowledge base action uses when it cannot understand a user's request.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_ask_rephrase:\n  - text: \"Sorry, I'm not sure I understand. Could you rephrase it?\"\n  - text: \"Could you please rephrase your message? I didn't quite get that.\"\n```\n\n----------------------------------------\n\nTITLE: Updating pip for Rasa Open Source Installation\nDESCRIPTION: Updates the pip package manager to the latest version before installing Rasa Open Source.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U pip\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Rasa Project\nDESCRIPTION: Creates a new Rasa project after successful installation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa init\n```\n\n----------------------------------------\n\nTITLE: Two-Stage Fallback Rule Definition in Rasa 2.0\nDESCRIPTION: A rule configuration in rules.yml that implements the TwoStageFallbackPolicy behavior using the action_two_stage_fallback form.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - rule: Implementation of the TwoStageFallbackPolicy\n    steps:\n    # This intent is automatically triggered by the `FallbackClassifier` in the NLU\n    # pipeline in case the intent confidence was below the specified threshold.\n    - intent: nlu_fallback\n    # The Fallback is now implemented as a form.\n    - action: action_two_stage_fallback\n    - active_loop: action_two_stage_fallback\n```\n\n----------------------------------------\n\nTITLE: Defining a Trigger Intent for Cancelling Reminders in Rasa - YAML\nDESCRIPTION: This YAML snippet sets the intent that will trigger the cancellation of reminders within the Rasa framework. It provides examples of common phrases that users might say to initiate this action.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/reaching-out-to-user.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- intent: ask_forget_reminders\n  examples: |\n    - Forget about the reminder\n    - do not remind me\n    - cancel the reminder\n    - cancel all reminders please\n```\n\n----------------------------------------\n\nTITLE: Configuring Audiocodes VoiceAI Connect Credentials in Rasa\nDESCRIPTION: YAML configuration for setting up the Audiocodes VoiceAI Connect channel in the credentials.yml file. Includes the token parameter and optional parameters like use_websocket and keep_alive.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/audioodes-voiceai-connect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrasa_plus.channels.audiocodes.AudiocodesInput:\n    token: <token>\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Rasa Responses\nDESCRIPTION: This example shows how to use variables in responses to insert dynamic information. Variables are enclosed in curly brackets and automatically filled with slot values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_greet:\n  - text: \"Hey, {name}. How are you?\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Slot Type in Python\nDESCRIPTION: Python code for creating a custom NumberOfPeopleSlot class that extends the Slot class. This implementation provides custom featurization for different ranges of values (1-6 people vs more than 6 people).\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.shared.core.slots import Slot\n\nclass NumberOfPeopleSlot(Slot):\n\n    def feature_dimensionality(self):\n        return 2\n\n    def as_feature(self):\n        r = [0.0] * self.feature_dimensionality()\n        if self.value:\n            if self.value <= 6:\n                r[0] = 1.0\n            else:\n                r[1] = 1.0\n        return r\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracker Store with Vault Secrets Manager in endpoints.yml\nDESCRIPTION: Example configuration for a SQL tracker store where credentials are fetched from Vault secrets manager rather than being hardcoded. The username and password fields reference keys stored in the Vault service.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/secrets-managers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntracker_store:\n      type: SQL\n      url: localhost:5432\n      username:\n            source: secrets_manager.vault\n            secret_key: sql_store_username\n      password:\n            source: secrets_manager.vault\n            secret_key: sql_store_password\n```\n\n----------------------------------------\n\nTITLE: MITIE Entity Extractor Configuration\nDESCRIPTION: YAML configuration for adding MitieEntityExtractor to the Rasa pipeline.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"MitieEntityExtractor\"\n```\n\n----------------------------------------\n\nTITLE: Pausing Conversation Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'pause' event in Rasa, which stops the bot from responding to user messages until the conversation is explicitly resumed. This event is never automatically tracked.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"pause\"\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Trained NLU Component - Rasa 3.0\nDESCRIPTION: This snippet illustrates the new method for instantiating a persisted NLU component in Rasa 3.0. It utilizes the model storage and resource parameters to load the configuration directly from persisted data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport json\nfrom typing import Any, Text, Dict\n\nfrom rasa.engine.graph import GraphComponent, ExecutionContext\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.engine.storage.storage import ModelStorage\nfrom rasa.nlu.classifiers.classifier import IntentClassifier\nfrom rasa.shared.exceptions import FileIOException\n\nclass MyNLUComponent(GraphComponent, IntentClassifier):\n    @classmethod\n    def load(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n        **kwargs: Any,\n    ) -> MyNLUComponent:\n        model_data = {}\n\n        try:\n            with model_storage.read_from(resource) as path:\n\n                model_data_file = path / \"model_data.json\"\n                model_data = json.loads(rasa.shared.utils.io.read_file(model_data_file))\n\n        except (ValueError, FileNotFoundError, FileIOException):\n            logger.debug(\n                f\"Couldn't load metadata for component '{cls.__name__}' as the persisted \"\n                f\"model data couldn't be loaded.\"\n            )\n\n        return cls(\n            config, model_data=model_data\n        )\n\n```\n\n----------------------------------------\n\nTITLE: Defining NLU Training Data for Chitchat Retrieval Intents\nDESCRIPTION: NLU training examples for chitchat retrieval intents, showing the naming convention that groups them under the main chitchat retrieval intent.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/chitchat-faqs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n  - intent: chitchat/ask_name\n    examples: |\n      - What is your name?\n      - May I know your name?\n      - What do people call you?\n      - Do you have a name for yourself?\n  - intent: chitchat/ask_weather\n    examples: |\n      - What's the weather like today?\n      - Does it look sunny outside today?\n      - Oh, do you mind checking the weather for me please?\n      - I like sunny days in Berlin.\n```\n\n----------------------------------------\n\nTITLE: Running Rasa SDK Action Server without Rasa Installed\nDESCRIPTION: Command to run the Rasa SDK action server directly as a Python module when Rasa is not installed. This method specifies the actions module to be used.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/running-action-server.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m rasa_sdk --actions actions\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Actions Workflow for Action Server Automation\nDESCRIPTION: This YAML configuration creates a GitHub Actions workflow that automatically builds and pushes a Docker image for a Rasa Action Server whenever files in the actions directory change on the main branch. It uses DockerHub for registry storage.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n    paths:\n    - 'actions/**'\n\njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    name: Build Action Server image and upgrade Rasa X/Enterprise deployment\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - id: action_server\n      name: Build an action server with custom actions\n      uses: RasaHQ/action-server-gha@main\n      # Full list of parameters: https://github.com/RasaHQ/action-server-gha/tree/master#input-arguments\n      with:\n        docker_image_name: 'account_username/repository_name'\n        docker_registry_login: ${{ secrets.DOCKER_HUB_LOGIN }}\n        docker_registry_password: ${{ secrets.DOCKER_HUB_PASSWORD }}\n        # More details about github context:\n        # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context\n        #\n        # github.sha - The commit SHA that triggered the workflow run\n        docker_image_tag: ${{ github.sha }}\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Compiler for Linux Dependencies\nDESCRIPTION: Installs the Rust compiler on Linux systems to resolve dependency issues for Python 3.10.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\napt install rustc && apt install cargo\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Importers for Rasa - YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to specify custom and default importers in Rasa's configuration file. The importers section allows users to define custom logic for loading training data relevant to their application.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-importers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"importers:\\n- name: \\\"module.CustomImporter\\\"\\n  parameter1: \\\"value\\\"\\n  parameter2: \\\"value2\\\"\\n- name: \\\"RasaFileImporter\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SpaCy Tokenizer\nDESCRIPTION: YAML configuration for the SpaCy-based tokenizer component.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"SpacyTokenizer\"\n  # Flag to check whether to split intents\n  \"intent_tokenization_flag\": False\n  # Symbol on which intent should be split\n  \"intent_split_symbol\": \"_\"\n  # Regular expression to detect tokens\n  \"token_pattern\": None\n```\n\n----------------------------------------\n\nTITLE: Example Mask Substitution Rule\nDESCRIPTION: Configuration example showing how to use the mask substitution method to replace PERSON entities with asterisks.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/pii-management.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nanonymization:\n  metadata:\n    language: en\n    model_name: en_core_web_lg\n    model_provider: spacy\n  rule_lists:\n    - id: rules_1\n      rules:\n        - entity: PERSON\n          substitution: mask\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Bot Framework Credentials in Rasa\nDESCRIPTION: This snippet shows how to add Microsoft Bot Framework credentials to the credentials.yml file in Rasa. The configuration requires the Microsoft App ID and App Password that you receive when creating a Microsoft app.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/microsoft-bot-framework.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbotframework:\n  app_id: \"MICROSOFT_APP_ID\"\n  app_password: \"MICROSOFT_APP_PASSWORD\"\n```\n\n----------------------------------------\n\nTITLE: Training the Rasa Core Model\nDESCRIPTION: Command to train a Rasa Core model using the domain, stories, and configuration files. The trained model will be saved to the 'models' directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/concertbot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa train core -d domain.yml -s data/stories.md --out models -c config.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing OR Statements for Alternative Intents in Rasa\nDESCRIPTION: A single story using OR statements to handle multiple intents ('affirm' or 'thanks') that should trigger the same response, reducing the need for duplicate stories.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: newsletter signup with OR\n  steps:\n  - intent: signup_newsletter\n  - action: utter_ask_confirm_signup\n  - or:\n    - intent: affirm\n    - intent: thanks\n  - action: action_signup_newsletter\n```\n\n----------------------------------------\n\nTITLE: Setting a Slot Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'slot' event in Rasa, which sets a slot on the tracker. It can set a slot to a value or reset it by setting its value to null.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"slot\",\n    \"name\": \"departure_airport\", \n    \"value\": \"BER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Storage Package\nDESCRIPTION: Command to install the Google Cloud Storage Python package, which is required for Rasa to connect to and download models from Google Cloud Storage.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip3 install google-cloud-storage\n```\n\n----------------------------------------\n\nTITLE: Defining a Reminder Cancellation Action in Rasa - Python\nDESCRIPTION: This snippet illustrates a custom action that cancels all scheduled reminders by returning a `ReminderCancelled()` event. It is a crucial part of managing reminders in the Rasa bot.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/reaching-out-to-user.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ForgetReminders(Action):\n    \"\"\"Cancels all reminders.\"\"\"\n\n    def name(self) -> Text:\n        return \"action_forget_reminders\"\n\n    async def run(\n        self, dispatcher, tracker: Tracker, domain: Dict[Text, Any]\n    ) -> List[Dict[Text, Any]]:\n\n        dispatcher.utter_message(f\"Okay, I'll cancel all your reminders.\")\n\n        # Cancel all reminders\n        return [ReminderCancelled()]\n```\n\n----------------------------------------\n\nTITLE: Training Rasa Knowledge Base Bot\nDESCRIPTION: Command to train the Rasa knowledge base bot model. This creates a zipped model file in the 'models/' directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/knowledgebasebot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa train\n```\n\n----------------------------------------\n\nTITLE: Adding Lookup Tables to Rasa NLU Training Data\nDESCRIPTION: Example showing how to define lookup tables in Rasa. Lookup tables provide lists of examples for a specific entity type, which helps the model identify entities in user messages.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- lookup: banks\n  examples: |\n    - JPMC\n    - Comerica\n    - Bank of America\n```\n\n----------------------------------------\n\nTITLE: Extracting Markers from Stored Dialogues with Rasa CLI\nDESCRIPTION: Bash command to process stored dialogues using marker definitions and extract the markers to a CSV file for analysis.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/markers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrasa evaluate markers all --config markers.yml extracted_markers.csv\n```\n\n----------------------------------------\n\nTITLE: Chatting with Rasa Assistant in Jupyter Notebook\nDESCRIPTION: Start a chat session with the trained Rasa assistant using the chat function, providing the model path and endpoints (if applicable).\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/jupyter-notebooks.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.jupyter import chat\n\nendpoints = \"endpoints.yml\"\nchat(model_path, endpoints)\n```\n\n----------------------------------------\n\nTITLE: Listing Project Files After Initialization\nDESCRIPTION: Command to list all files created in the working directory after initializing a Rasa project to verify the setup was successful.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/building-in-docker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls -1\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Tracing Backend in Rasa Pro\nDESCRIPTION: This configuration snippet shows how to set up Jaeger as a tracing backend in Rasa Pro by adding it to the endpoints.yml file. It specifies the host, port, service name, and other parameters needed to connect to Jaeger.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/tracing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n  type: jaeger\n  host: localhost\n  port: 6831\n  service_name: rasa\n  sync_export: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring NLG Server URL in YAML\nDESCRIPTION: Basic configuration for the NLG server URL in the endpoints.yml file. This tells Rasa where to find your external NLG server.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlg.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nnlg:\n  url: http://localhost:5055/nlg\n```\n\n----------------------------------------\n\nTITLE: Enabling Rasa HTTP API\nDESCRIPTION: Command to start a Rasa server with the API enabled. This allows direct interaction with conversation trackers and other bot endpoints.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/http-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --enable-api\n```\n\n----------------------------------------\n\nTITLE: Example of Mixed Rules and Stories in Rasa\nDESCRIPTION: This snippet defines both a rule for greeting and a story for finding a restaurant. It shows how rules and stories are used together in Rasa training data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/rules.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n- rule: Say `hello` whenever the user sends a message with intent `greet`\n  steps:\n  - intent: greet\n  - action: utter_greet\n\nstories:\n- story: story to find a restaurant\n  steps:\n  - intent: find_restaurant\n  - action: restaurant_form\n  - action: utter_restaurant_found\n```\n\n----------------------------------------\n\nTITLE: Training the Rasa model\nDESCRIPTION: Command to train a Rasa model containing both NLU and Core models. The trained model will be stored as a zipped file in the /models directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/responseselectorbot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa train\n```\n\n----------------------------------------\n\nTITLE: Resuming Conversation Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'resume' event in Rasa, which resumes a previously paused conversation. This event is never automatically tracked.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"resume\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Regular Expressions for Entity Extraction in Rasa\nDESCRIPTION: Example showing how to define regular expressions in Rasa NLU training data. This can be used with RegexFeaturizer and RegexEntityExtractor components to identify entities with specific patterns.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- regex: account_number\n  examples: |\n    - \\d{10,12}\n```\n\n----------------------------------------\n\nTITLE: Custom Action Example for Conditional SlotSet in Python\nDESCRIPTION: Example code showing how to conditionally set a slot value in a custom action. The action checks if the current slot value is different from the entity value before setting the slot, which can be used to avoid emitting redundant SlotSet events.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CustomAction(Action):\n    def name(self) -> Text:\n        return \"custom_action\"\n\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        # current value of the slot\n        slot_value = tracker.get_slot('my_slot')\n\n        # value of the entity\n        # this is parsed from the user utterance\n        entity_value = next(tracker.get_latest_entity_values(\"entity_name\"), None)\n\n        if slot_value != entity_value:\n          return[SlotSet(\"my_slot\", entity_value)]\n```\n\n----------------------------------------\n\nTITLE: Lambda Function for Object Representation in KnowledgeBase\nDESCRIPTION: Lambda function used to extract a meaningful representation of an object from the knowledge base. By default, it returns the 'name' attribute of the object, which is used when the bot refers to the object in conversation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlambda obj: obj[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Rephrase Response for NLU Fallback\nDESCRIPTION: This snippet defines the response message that asks users to rephrase when their message is classified with low confidence.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_please_rephrase:\n  - text: I'm sorry, I didn't quite understand that. Could you rephrase?\n```\n\n----------------------------------------\n\nTITLE: Reverting Action in Python using Rasa SDK\nDESCRIPTION: Creates an ActionReverted event to undo the last action in the conversation history.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nevt = ActionReverted()\n```\n\n----------------------------------------\n\nTITLE: Configuring Rasa to Fetch Model Once from Server\nDESCRIPTION: YAML configuration for endpoints.yml that sets up Rasa to fetch a model from a server only once at startup, by setting the wait_time_between_pulls parameter to null.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nmodels:\n  url: http://my-server.com/models/default\n  wait_time_between_pulls: null  # fetches model only once\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes CLI Connection\nDESCRIPTION: Command to verify that the Kubernetes CLI is correctly connected to the cluster.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl version --short\n```\n\n----------------------------------------\n\nTITLE: Configuring SpaCy NLP in Rasa YAML\nDESCRIPTION: Example of configuring SpaCy NLP in Rasa with explicit model specification, reflecting changes in SpaCy 3.0 support.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\n\npipeline:\n   - name: SpacyNLP\n     model: en_core_web_md\n```\n\n----------------------------------------\n\nTITLE: Running Duckling Server with Docker\nDESCRIPTION: Command to run a Duckling entity extraction server on port 8000 using Docker. Duckling is used for extracting structured entities like dates and numbers.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/formbot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 8000:8000 rasa/duckling\n```\n\n----------------------------------------\n\nTITLE: Rasa NLU Output Example\nDESCRIPTION: Sample JSON output from Rasa NLU processing showing intent classification, entity extraction, and confidence scores for the input text \"I am looking for Chinese food\".\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"text\": \"I am looking for Chinese food\",\n    \"entities\": [\n        {\n            \"start\": 8,\n            \"end\": 15,\n            \"value\": \"chinese\",\n            \"entity\": \"cuisine\",\n            \"extractor\": \"DIETClassifier\",\n            \"confidence\": 0.864\n        }\n    ],\n    \"intent\": {\"confidence\": 0.6485910906220309, \"name\": \"restaurant_search\"},\n    \"intent_ranking\": [\n        {\"confidence\": 0.6485910906220309, \"name\": \"restaurant_search\"},\n        {\"confidence\": 0.1416153159565678, \"name\": \"affirm\"}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Group Annotation in Training Data\nDESCRIPTION: Shows how to group related entities together using group labels to define complex relationships\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nGive me a [small]{\"entity\": \"size\", \"group\": \"1\"} pizza with [mushrooms]{\"entity\": \"topping\", \"group\": \"1\"} and a [large]{\"entity\": \"size\", \"group\": \"2\"} [pepperoni]{\"entity\": \"topping\", \"group\": \"2\"}\n```\n\n----------------------------------------\n\nTITLE: Connecting Rasa to Action Server with Helm Configuration\nDESCRIPTION: This YAML configuration for a Rasa deployment specifies the connection to an external Rasa Action Server. It points to the Action Server URL which can be in the same namespace as the Rasa deployment.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# rasa-values.yaml\nrasa-action-server:\n  external:\n    # -- Determine if external URL is used\n    enabled: true\n    # -- URL to Rasa Action Server\n    url: \"http://rasa-action-server/webhook\"\n```\n\n----------------------------------------\n\nTITLE: Non-Influential Slot Configuration\nDESCRIPTION: Example showing how to define a slot that doesn't influence conversation flow.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  age:\n    type: text\n    influence_conversation: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Event Broker in Rasa (YAML)\nDESCRIPTION: This snippet demonstrates the configuration of a Kafka event broker within Rasa's `endpoints.yml` file. It specifies the Kafka broker type, connection details (URL), and a list of anonymization topics. Each topic is associated with a name and a reference to anonymization rules.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/pii-management.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nevent_broker:\n  type: kafka\n  partition_by_sender: True\n  security_protocol: PLAINTEXT\n  url: localhost\n  anonymization_topics:\n    - name: topic_1\n      anonymization_rules: rules_1\n    - name: topic_2\n      anonymization_rules: rules_2\n  client_id: kafka-python-rasa\n```\n```\n\n----------------------------------------\n\nTITLE: Defining NLU Training Examples with Entity Annotations in Rasa\nDESCRIPTION: Example showing how to define intent examples with entity annotations in the Rasa YAML format. It demonstrates how to mark entities in user utterances using square brackets and optional entity attributes.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- intent: check_balance\n  examples: |\n    - What's my [credit](account) balance?\n    - What's the balance on my [credit card account]{\"entity\":\"account\",\"value\":\"credit\"}\n```\n\n----------------------------------------\n\nTITLE: NLU Meta Intent Featurizer\nDESCRIPTION: This is a placeholder for a custom NLU meta intent featurizer implemented in Python. The classifier's output is consumed by another component downstream using the `process_training_data` method. The implementation is located at `docs/sources/data/test_classes/custom_graph_components/nlu_meta_intent_featurizer.py`.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/custom-graph-components.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python (docs/sources/data/test_classes/custom_graph_components/nlu_meta_intent_featurizer.py)\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring NLU Output in JSON\nDESCRIPTION: Example of structured JSON output from NLU processing, showing intent classification and entity extraction for a restaurant search query.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/generating-nlu-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"intent\": \"search_restaurant\",\n  \"entities\": {\n    \"cuisine\": \"French\",\n    \"location\": \"center\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example output of SklearnIntentClassifier\nDESCRIPTION: This JSON snippet shows the expected output format of the `SklearnIntentClassifier`. It includes the predicted intent with its confidence score and a ranked list of other possible intents along with their confidence scores.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n \"{\\n    \\\"intent\\\": {\\\"name\\\": \\\"greet\\\", \\\"confidence\\\": 0.7800},\\n    \\\"intent_ranking\\\": [\\n        {\\n            \\\"confidence\\\": 0.7800,\\n            \\\"name\\\": \\\"greet\\\"\\n        },\\n        {\\n            \\\"confidence\\\": 0.1400,\\n            \\\"name\\\": \\\"goodbye\\\"\\n        },\\n        {\\n            \\\"confidence\\\": 0.0800,\\n            \\\"name\\\": \\\"restaurant_search\\\"\\n        }\\n    ]\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Domain Migration Command - Bash\nDESCRIPTION: Command to automatically migrate a domain configuration file from Rasa 2.0 to 3.0 format.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nrasa data migrate -d DOMAIN --out OUT_PATH\n```\n\n----------------------------------------\n\nTITLE: Registering Custom NLU Component in Rasa 2.0 (Python)\nDESCRIPTION: Example of creating a custom NLU component by extending IntentClassifier, requires registration to be used in a Rasa project. Dependencies include Rasa's intent classification library.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.nlu.classifiers.classifier import IntentClassifier\n\nclass MyNLUComponent(IntentClassifier):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Moving Wit.ai Data to Rasa Project\nDESCRIPTION: Removes the default data directory in the Rasa project and replaces it with the exported Wit.ai utterances data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/facebook-wit-ai-to-rasa.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf data/\nmv /path/to/utterances data/\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Schema in Rasa SQLTrackerStore\nDESCRIPTION: SQL command to create a new schema in PostgreSQL for use with Rasa's SQLTrackerStore. This allows using custom schemas instead of the default 'public' schema.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_43\n\nLANGUAGE: postgresql\nCODE:\n```\nCREATE SCHEMA schema_name;\n```\n\n----------------------------------------\n\nTITLE: Running the Rasa Server with API Enabled\nDESCRIPTION: Command to start the Rasa server with the API enabled, which allows sending HTTP requests to interact with the bot.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/reminderbot/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --enable-api\n```\n\n----------------------------------------\n\nTITLE: Starting a New Session in Python using Rasa SDK\nDESCRIPTION: Creates a SessionStarted event to indicate the beginning of a new conversation session.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nevt = SessionStarted()\n```\n\n----------------------------------------\n\nTITLE: Entity Role Annotation in Training Data\nDESCRIPTION: Demonstrates how to annotate entities with roles to provide additional context about their function in a sentence\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nI want to fly from [Berlin]{\"entity\": \"city\", \"role\": \"departure\"} to [San Francisco]{\"entity\": \"city\", \"role\": \"destination\"}.\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Event Broker in endpoints.yml for Rasa Plus\nDESCRIPTION: YAML configuration for connecting Rasa Plus to a Kafka event broker. This configuration enables Rasa Plus to stream data to Kafka which will be consumed by Rasa Pro Services.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-rasa-pro-services.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: kafka\n  partition_by_sender: True\n  topic: rasa-events\n  url: <BROKER URL>\n```\n\n----------------------------------------\n\nTITLE: RulePolicy Configuration for Forms in Rasa 2.0\nDESCRIPTION: Policy configuration in config.yml that includes the RulePolicy required for handling forms in Rasa 2.0.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n  # Other policies\n  # ...\n  - name: RulePolicy\n```\n\n----------------------------------------\n\nTITLE: Text Slot Type Configuration\nDESCRIPTION: Example of configuring a text slot type with entity mapping.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n     cuisine:\n        type: text\n        mappings:\n        - type: from_entity\n          entity: cuisine\n```\n\n----------------------------------------\n\nTITLE: Creating Rasa Test Story with Button Payloads\nDESCRIPTION: Example of a test story that uses button payload format to test how the assistant handles button clicks with payload data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: A test where a user clicks on a button with payload\n  steps:\n  - user: |\n      hello\n    intent: greet\n  - action: utter_ask_howcanhelp\n  - user: /inform{{\"cuisine\":\"chinese\"}}\n    intent: inform\n  - action: utter_ask_location\n  - user: /inform{{\"location\":\"Paris\"}}\n    intent: inform\n  - action: utter_ask_price\n```\n\n----------------------------------------\n\nTITLE: Configuring Whitespace Tokenizer\nDESCRIPTION: YAML configuration for the whitespace-based tokenizer with settings for intent splitting.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"WhitespaceTokenizer\"\n  # Flag to check whether to split intents\n  \"intent_tokenization_flag\": False\n  # Symbol on which intent should be split\n  \"intent_split_symbol\": \"_\"\n  # Regular expression to detect tokens\n  \"token_pattern\": None\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose File\nDESCRIPTION: Command to create a new Docker Compose configuration file that will define the services for the Rasa deployment.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/deploying-in-docker-compose.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Updating Rasa Response Format\nDESCRIPTION: Example of updating Rasa responses to include the 'utter_' prefix in the response names.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_60\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  chitchat/ask_name:\n    - text: Oh yeah, I am called the retrieval bot.\n\n  chitchat/ask_weather:\n    - text: Oh, it does look sunny right now in Berlin.\n```\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_chitchat/ask_name:\n    - text: Oh yeah, I am called the retrieval bot.\n\n  utter_chitchat/ask_weather:\n    - text: Oh, it does look sunny right now in Berlin.\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Settings in YAML Domain File for Rasa\nDESCRIPTION: Example YAML configuration to explicitly disable conversation sessions in a Rasa domain file. Setting session_expiration_time to 0 disables conversation sessions which are now enabled by default.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nsession_config:\n  # A session expiration time of `0`\n  # disables conversation sessions\n  session_expiration_time: 0\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment on Ubuntu/macOS\nDESCRIPTION: Commands to create and activate a Python virtual environment on Unix-based systems.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/environment-set-up.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv ./venv\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource ./venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Rasa Repository\nDESCRIPTION: Command to clone a forked Rasa repository to local machine for development.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_github_username/rasa.git\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to Custom Policies in Rasa 3.0\nDESCRIPTION: Demonstrates how to properly add type annotations to custom policies for compatibility with Rasa 3.0. The example shows adding imports and explicit type annotations to method parameters and return values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Any\nfrom rasa.core.policies.policy import Policy\n\nclass MyPolicy(Policy):\n    def train(\n        self,\n        training_trackers: List[\"TrackerWithCachedStates\"],\n        domain,\n        **kwargs: Any,\n    ):\n        ...\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import List, Any\n\nfrom rasa.core.policies.policy import Policy\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.shared.core.domain import Domain\nfrom rasa.shared.core.generator import TrackerWithCachedStates\n\nclass MyPolicy(Policy):\n    def train(\n        self,\n        training_trackers: List[TrackerWithCachedStates],\n        domain: Domain,\n        **kwargs: Any,\n    ) -> Resource:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Training a Rasa Model with CLI\nDESCRIPTION: Command to train a Rasa model that includes both NLU and Core models. The resulting model will be stored as a zipped file in the /models directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/moodbot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa train\n```\n\n----------------------------------------\n\nTITLE: Indicating Default User Input Wait in Rasa Rules\nDESCRIPTION: This snippet indicates that a Rasa rule will wait for the next user message implicitly since each rule ends with `action_listen` as the last step by default.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/rules.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n\n- rule: Rule which will wait for user message when it was applied\n  steps:\n  - intent: greet\n  - action: utter_greet\n  # - action: action_listen\n  # Every rule implicitly includes a prediction for `action_listen` as last step.\n  # This means that Rasa will wait for the next user message.\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Response Variations Based on Slot Values\nDESCRIPTION: This example demonstrates how to create response variations that are selected based on slot values using the 'condition' key. Each condition specifies slot name and value constraints.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nslots:\n  logged_in:\n    type: bool\n    influence_conversation: False\n    mappings:\n    - type: custom\n  name:\n    type: text\n    influence_conversation: False\n    mappings:\n    - type: custom\n\nresponses:\n  utter_greet:\n    - condition:\n        - type: slot\n          name: logged_in\n          value: true\n      text: \"Hey, {name}. Nice to see you again! How are you?\"\n\n    - text: \"Welcome. How is your day going?\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Service in Docker Compose\nDESCRIPTION: Docker Compose configuration snippet for adding a Redis service to be used as a tracker store in a Rasa deployment.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nredis:\n  image: redis:latest\n```\n\n----------------------------------------\n\nTITLE: Adding Chitchat Intent to Domain File\nDESCRIPTION: Domain configuration snippet showing how to include the chitchat intent in your domain.yml file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/chitchat-faqs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nintents:\n# other intents\n- chitchat\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Response in Domain\nDESCRIPTION: Example of defining a simple text response in the domain configuration file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_16\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_greet:\n  - text: \"Hey! How are you?\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace\nDESCRIPTION: Command to create a new namespace in Kubernetes for deploying Rasa Action Server.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace <your namespace>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mattermost Credentials in Rasa\nDESCRIPTION: This snippet shows how to add Mattermost credentials to the credentials.yml file in Rasa. It includes the Mattermost API URL, the bot account token, and the webhook URL that should match the callback URL configured in Mattermost.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/mattermost.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmattermost:\n  url: \"https://chat.example.com/api/v4\"\n  token: \"xxxxx\" #  the token for the bot account from creating the bot step.\n  webhook_url: \"https://server.example.com/webhooks/mattermost/webhook\"  # this should match the callback url from step 6\n```\n\n----------------------------------------\n\nTITLE: Multi-Intent Classification Pipeline Configuration\nDESCRIPTION: Configuration for handling multiple intents in a single user message. This enables the model to predict combined intents like 'check_balances+transfer_money' by tokenizing intent labels using a specified split symbol.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nlanguage: \"en\"\n\npipeline:\n- name: \"WhitespaceTokenizer\"\n  intent_tokenization_flag: True\n  intent_split_symbol: \"+\"\n- name: \"CountVectorsFeaturizer\"\n- name: \"DIETClassifier\"\n```\n\n----------------------------------------\n\nTITLE: Converting Rasa Data with Command Line\nDESCRIPTION: Command to convert Rasa data files to the new YAML format, including adding the 'utter_' prefix to responses.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nrasa data convert responses --data {SOURCE_DIR} --out={TARGET_DIR}\n```\n\n----------------------------------------\n\nTITLE: Defining Rasa Project File Paths in Jupyter Notebook\nDESCRIPTION: Set up variables for the paths to essential Rasa project files, including config, training data, domain, and output directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/jupyter-notebooks.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfig = \"config.yml\"\ntraining_files = \"data/\"\ndomain = \"domain.yml\"\noutput = \"models/\"\nprint(config, training_files, domain, output)\n```\n\n----------------------------------------\n\nTITLE: Testing a Rasa NLU Model via Command Line Shell\nDESCRIPTION: Command to launch an interactive shell for testing the NLU model. This allows you to type messages and see how the model interprets them.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-only.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa shell nlu\n```\n\n----------------------------------------\n\nTITLE: Updating pip on Windows\nDESCRIPTION: Command to update pip to the latest version on Windows.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/environment-set-up.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bat\nCODE:\n```\nC:\\> pip3 install -U pip\n```\n\n----------------------------------------\n\nTITLE: Training and Processing Sparse Featurizer in Rasa 3.0 (Python)\nDESCRIPTION: Defines a custom NLU component that extends both GraphComponent and SparseFeaturizer. The train method processes training data and persists the component's state, while process_training_data adds features to the messages. Dependencies include Rasa's graph and featurization handling.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.engine.graph import GraphComponent\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.nlu.featurizers.sparse_featurizer.sparse_featurizer import SparseFeaturizer\nfrom rasa.shared.nlu.training_data.training_data import TrainingData\n\nclass MyNLUComponent(GraphComponent, SparseFeaturizer):\n    def train(self, training_data: TrainingData) -> Resource:\n        self.train_featurizer(training_data)\n\n        self.persist()\n        return self._resource\n\n    def process_training_data(self, training_data: TrainingData) -> TrainingData:\n        for message in training_data.training_examples:\n            self.add_features(message)\n\n        return training_data\n```\n\n----------------------------------------\n\nTITLE: Splitting Rasa NLU Data for Testing\nDESCRIPTION: Splits your NLU data into training and testing sets for evaluation purposes, creating a held-out test set.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrasa data split nlu\n```\n\n----------------------------------------\n\nTITLE: Restarting Conversation in Python using Rasa SDK\nDESCRIPTION: Creates a Restarted event to reset the conversation to its initial state.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nevt = Restarted()\n```\n\n----------------------------------------\n\nTITLE: Defining a Marker for Mood Detection in YAML\nDESCRIPTION: Simple YAML marker definition to detect when a user has expressed either an unhappy or great mood using the OR operator to combine multiple intent conditions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/markers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmarker_mood_expressed:\n  description: \"Mood expressed was either unhappy or great\"\n  or:\n    - intent: mood_unhappy\n    - intent: mood_great\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Services in Docker Compose\nDESCRIPTION: Docker Compose configuration for adding MongoDB and MongoDB Express (UI) services to be used with Rasa.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nmongo:\n  image: mongo\n  environment:\n    MONGO_INITDB_ROOT_USERNAME: rasa\n    MONGO_INITDB_ROOT_PASSWORD: example\nmongo-express:  # this service is a MongoDB UI, and is optional\n  image: mongo-express\n  ports:\n    - 8081:8081\n  environment:\n    ME_CONFIG_MONGODB_ADMINUSERNAME: rasa\n    ME_CONFIG_MONGODB_ADMINPASSWORD: example\n```\n\n----------------------------------------\n\nTITLE: MITIE Entity Extractor Output Example\nDESCRIPTION: Example JSON output from the MitieEntityExtractor showing entity extraction results with entity value, position, and type information.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entities\": [{\n        \"value\": \"New York City\",\n        \"start\": 20,\n        \"end\": 33,\n        \"confidence\": null,\n        \"entity\": \"city\",\n        \"extractor\": \"MitieEntityExtractor\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Model Loading in Rasa\nDESCRIPTION: Commands showing default behavior for loading models. When no model path is specified, Rasa automatically looks in the 'models/' directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# this command will load the same model\nrasa run --model models/\n# ... as this command (using defaults)\nrasa run\n```\n\n----------------------------------------\n\nTITLE: Interactive Learning with Rasa Core\nDESCRIPTION: Command to launch Rasa's interactive learning mode for creating new training data. This allows users to interactively generate stories by conversing with the bot.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/concertbot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa interactive core -d domain.yml -m models -c config.yml --stories data\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Configuration for WebSocket\nDESCRIPTION: Configuration for enabling JWT authentication in SocketIO channel with custom key and method.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/your-own-website.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsocketio:\n  user_message_evt: user_uttered\n  bot_message_evt: bot_uttered\n  session_persistence: true\n  jwt_key: my_public_key\n  jwt_method: HS256\n```\n\n----------------------------------------\n\nTITLE: Basic Slot Configuration\nDESCRIPTION: Example showing how to define a basic slot with entity mapping.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  slot_name:\n    type: text\n    mappings:\n    - type: from_entity\n      entity: entity_name\n```\n\n----------------------------------------\n\nTITLE: Fixing action_metadata JSON Serialization - Python\nDESCRIPTION: This snippet ensures that action_metadata is JSON serializable and makes it available on the tracker. This is crucial for maintaining the state and behavior of the Rasa application. The fix backports a change made in version 3.0.0, with no additional dependencies required.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Make action_metadata json serializable and available on the tracker.\n\n```\n\n----------------------------------------\n\nTITLE: Installing Rasa Open Source via pip\nDESCRIPTION: Installs the Rasa Open Source package using pip.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install rasa\n```\n\n----------------------------------------\n\nTITLE: Accessing TED Policy Diagnostic Data in Python\nDESCRIPTION: Code to access attention weights from a TED policy prediction object. Used for analyzing model attention patterns during action prediction.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nprediction = policy.predict_action_probabilities(\n    GREET_RULE, domain, RegexInterpreter()\n)\nprint(f\"{prediction.diagnostic_data.get('attention_weights')}\")\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Server with Custom Actions\nDESCRIPTION: Commands to run both the Rasa action server (for custom actions) and the main Rasa server. The ampersand runs the action server in the background.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/concertbot/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrasa run actions&\nrasa run -m models --endpoints endpoints.yml\n```\n\n----------------------------------------\n\nTITLE: Bot Message Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'bot' event in Rasa, indicating the bot sent a message to the user. This event is automatically tracked when responses are returned by custom actions or sent directly to the user.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"bot\",\n    \"text\": \"Hey there!\",\n    \"data\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Markers Configuration for Mood Bot\nDESCRIPTION: Complete YAML marker configuration file with multiple marker definitions showcasing various operators and nested conditions for a mood bot application.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/markers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmarker_name_provided:\n  description: \"slot `name` was provided\"\n  slot_was_set: name\n\nmarker_mood_expressed:\n  or:\n    - intent: mood_unhappy\n    - intent: mood_great\n\nmarker_cheer_up_failed:\n  seq:\n    - intent: mood_unhappy\n    - action: utter_cheer_up\n    - action: utter_did_that_help\n    - intent: deny\n\nmarker_bot_not_challenged:\n  description: \"Example of a negated marker, it can be used to surface conversations without bot_challenge intent\"\n  never:\n    - intent: bot_challenge\n\nmarker_cheer_up_attempted:\n  at_least_once:\n    - action: utter_cheer_up\n\nmarker_mood_expressed_and_name_not_provided:\n  and:\n    - or:\n      - intent: mood_unhappy\n      - intent: mood_great\n    - not:\n      - slot_was_set: name\n```\n\n----------------------------------------\n\nTITLE: Configuring Rasa to Fetch Models from HTTP Server\nDESCRIPTION: YAML configuration for the endpoints.yml file that sets up Rasa to regularly pull models from a specified URL. The wait_time_between_pulls parameter controls how frequently Rasa checks for new models.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nmodels:\n  url: http://my-server.com/models/default\n  wait_time_between_pulls: 10   # In seconds, optional, default: 100\n```\n\n----------------------------------------\n\nTITLE: Exporting Rasa events to Kafka\nDESCRIPTION: This command exports events from the Rasa tracker store to a Kafka topic. It requires specifying the `--endpoints` argument, which points to the `endpoints.yml` file containing the tracker store and event broker configurations.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/getting-started-with-analytics.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"rasa export --endpoints endpoints.yml\"\n```\n\n----------------------------------------\n\nTITLE: Training Rasa NLU Model\nDESCRIPTION: Trains the Rasa NLU model using the imported Dialogflow data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/google-dialogflow-to-rasa.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa train nlu\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Index for Sender ID in Rasa Tracker Store\nDESCRIPTION: This SQL command creates an index on the 'sender_id' column in the 'events' table for improved performance when using an SQL tracker store in Rasa.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX event_idx_sender_id ON events (sender_id);\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages on Ubuntu\nDESCRIPTION: Commands to update apt repositories and install Python development packages on Ubuntu.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/environment-set-up.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install python3-dev python3-pip\n```\n\n----------------------------------------\n\nTITLE: Configuring SpaCy NLP in Rasa config.yml\nDESCRIPTION: Shows how to configure the SpacyNLP component in the Rasa config.yml file, specifying the language model to use. This is required after upgrading to SpaCy 3.0 compatibility.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\n\npipeline:\n   - name: SpacyNLP\n     model: en_core_web_md\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Data with Dialogflow Export\nDESCRIPTION: Removes the default data files and moves the exported Dialogflow agent into the data directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/google-dialogflow-to-rasa.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -r data/*\nmv testagent data/\n```\n\n----------------------------------------\n\nTITLE: Accessing Rasa Action Server in OpenShift\nDESCRIPTION: Commands to get the IP address and port-forward the Rasa Action Server service in OpenShift.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport SERVICE_PORT=$(oc get --namespace <your namespace> -o jsonpath=\"{.spec.ports[0].port}\" services <release name>)\noc port-forward --namespace <your namespace> svc/<release name> ${SERVICE_PORT}:${SERVICE_PORT} &\n```\n\n----------------------------------------\n\nTITLE: Running Rasa in Shell Mode for Testing\nDESCRIPTION: Command to interact with the Rasa bot directly through the command line interface, which is useful for testing without setting up external messaging channels.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/moodbot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa shell\n```\n\n----------------------------------------\n\nTITLE: Training a Rasa Model with NLU and Core Components\nDESCRIPTION: Command to train a combined Rasa NLU and Core model. The trained model will be stored as a zipped file in the /models directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/formbot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrasa train\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Policy in Rasa 3.0\nDESCRIPTION: Shows how to update the initialization of a custom policy class in Rasa 3.0. The new version uses a class method 'create' and takes additional parameters like model_storage and resource.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Dict, Text, Any\n\nfrom rasa.core.featurizers.tracker_featurizers import TrackerFeaturizer\nfrom rasa.core.policies.policy import Policy\nfrom rasa.engine.graph import ExecutionContext\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.engine.storage.storage import ModelStorage\n\nclass MyPolicy(Policy):\n    def __init__(\n        self,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n        featurizer: Optional[TrackerFeaturizer] = None,\n    ) -> None:\n        super().__init__(\n          config, model_storage, resource, execution_context, featurizer\n        )\n        ...\n    ...\n\n  @classmethod\n  def create(\n      cls,\n      config: Dict[Text, Any],\n      model_storage: ModelStorage,\n      resource: Resource,\n      execution_context: ExecutionContext,\n  ) -> MyPolicy:\n      return cls(config, model_storage, resource, execution_context)\n\n```\n\n----------------------------------------\n\nTITLE: Example Faker Substitution Rule\nDESCRIPTION: Configuration example showing how to use the faker substitution method to replace PERSON entities with generated fake names.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/pii-management.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nanonymization:\n  metadata:\n    language: en\n    model_name: en_core_web_lg\n    model_provider: spacy\n  rule_lists:\n    - id: rules_1\n      rules:\n        - entity: PERSON\n          substitution: faker\n```\n\n----------------------------------------\n\nTITLE: Story with Response Action in Rasa\nDESCRIPTION: Example of a story using a response action (utter_ type) to send messages to users.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_13\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: story with a response\n  steps:\n  - intent: greet\n  - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Marker Evaluation with Custom Statistics Prefix\nDESCRIPTION: Bash command demonstrating how to run the marker evaluation with a custom prefix for the statistics output files, which generates 'my-statistics-overall.csv' and 'my-statistics-per-session.csv'.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/markers.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrasa evaluate markers all --stats-file-prefix \"my-statistics\" extracted_markers.csv\n```\n\n----------------------------------------\n\nTITLE: Annotating Entities in Rasa Stories in YAML\nDESCRIPTION: This YAML snippet demonstrates how to annotate a single token with multiple entities in a Rasa end-to-end test file. This allows for accurate testing and annotation of stories where expressions can generate more than one entity. The snippet includes a user expression annotated with three entities and their corresponding values.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nstories:\n  - story: Some story\n    steps:\n      - user: |\n          cancel my [iphone][{\"entity\":\"iphone\", \"value\":\"iphone\"},{\"entity\":\"smartphone\", \"value\":\"true\"}{\"entity\":\"mobile_service\", \"value\":\"true\"}]\n        intent: cancel_contract\n```\n\n----------------------------------------\n\nTITLE: Kafka Producer Configuration\nDESCRIPTION: Added sasl_mechanism as an optional configurable parameter for the Kafka event broker producer to support different authentication mechanisms.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_40\n\nLANGUAGE: YAML\nCODE:\n```\nevent_broker:\n  type: \"kafka\"\n  sasl_mechanism: \"<mechanism_name>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DTMF Input Collection in VoiceAI Connect\nDESCRIPTION: Custom message configuration for handling DTMF (keypad) input. Defines parameters like maximum digits, timeout, and submission character for collecting pin codes.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/audioodes-voiceai-connect.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n   utter_config_dtmf_pin_code:\n  - custom:\n      type: event\n      name: config\n      sessionParams:\n        # Enable grouped collection (i.e will send all digits in a single payload)\n        dtmfCollect: true\n        # If more than 5 secs have passed since a digit was pressed, \n        # the input is considered completed and will be sent to the bot\n        dtmfCollectInterDigitTimeoutMS: 5000\n        # If 6 digits are collected, VoiceAI will send those 6 digits\n        # even if the user keeps pressing buttons\n        dtmfCollectMaxDigits: 6\n        # If the user presses '#' the input is considered complete\n        dtmfCollectSubmitDigit: \"#\"\n```\n\n----------------------------------------\n\nTITLE: Handling Rule-Only Data in Rasa 2.0\nDESCRIPTION: Shows how rule-only data was handled in Rasa 2.0 policies using the set_shared_policy_states method to store rule_only_data as a policy attribute.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.core.policies.policy import Policy\nfrom typing import Any\n\nclass MyPolicy(Policy):\n\n    def set_shared_policy_states(self, **kwargs: Any) -> None:\n        \"\"\"Sets policy's shared states for correct featurization.\"\"\"\n        self._rule_only_data = kwargs.get(\"rule_only_data\", {})\n```\n\n----------------------------------------\n\nTITLE: Running a Rasa server with Facebook connector\nDESCRIPTION: Command to run a Rasa server that connects to Facebook using the credentials specified in credentials.yml file. The server will run on port 5002 and use the trained model from the models directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/responseselectorbot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa run -m models -p 5002 --connector facebook --credentials credentials.yml\n```\n\n----------------------------------------\n\nTITLE: Specifying MultiProjectImporter in Rasa - YAML\nDESCRIPTION: This snippet provides an example of configuring the MultiProjectImporter in Rasa's YAML configuration file. It demonstrates how to define a list of imports to combine multiple Rasa projects for a unified assistant's training.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-importers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"importers:\\n- name: MultiProjectImporter\\nimports:\\n- projects/ChitchatBot\"\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Rasa Responses\nDESCRIPTION: Example of adding image URLs to Rasa responses using the image key in the domain configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_14\n\nLANGUAGE: yaml-rasa\nCODE:\n```\n  utter_cheer_up:\n  - text: \"Here is something to cheer you up:\"\n    image: \"https://i.imgur.com/nGF1K8f.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Shell with Custom Actions\nDESCRIPTION: Commands to start the action server in the background and launch the Rasa shell interface for command-line conversation with the bot.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/concertbot/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrasa run actions&\nrasa shell -m models\n```\n\n----------------------------------------\n\nTITLE: User Identification and Form Handling in Rasa\nDESCRIPTION: Stories that use a slot to differentiate between new and returning users, triggering a form for new users while providing a simple greeting for returning users.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: greet new user\n  steps:\n  - intent: greet\n  - action: check_user_status\n  - slot_was_set:\n    - new_user: true\n  - action: utter_greet\n  - action: new_user_form\n  - active_loop: new_user_form\n  - active_loop: null\n\n- story: greet returning user\n  steps:\n  - intent: greet\n  - action: check_user_status\n  - slot_was_set:\n    - new_user: false\n  - action: utter_greet\n  - action: utter_how_can_help\n```\n\n----------------------------------------\n\nTITLE: Endpoints Configuration for Docker Compose Redis Setup\nDESCRIPTION: Endpoints configuration for connecting to a Redis service defined in Docker Compose, with the service name used as the URL.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml-rasa\nCODE:\n```\ntracker_store:\n    type: redis\n    url: <url of the redis instance, e.g. localhost>\n    port: <port of your redis instance, usually 6379>\n    db: <number of your database within redis, e.g. 0>\n    key_prefix: <alphanumeric value to prepend to tracker store keys>\n    password: <password used for authentication>\n    use_ssl: <whether or not the communication is encrypted, default `false`>\n```\n\n----------------------------------------\n\nTITLE: Sending a Request to Rasa NLU Server\nDESCRIPTION: cURL command to test the NLU server by sending a text message to the /model/parse endpoint. The server will return the NLU interpretation of the message.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-only.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:5005/model/parse -d '{\"text\":\"hello\"}'\n```\n\n----------------------------------------\n\nTITLE: Recording Bot Utterance in Python using Rasa SDK\nDESCRIPTION: Creates a BotUttered event to record the bot's response in the conversation history.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-events.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nevt = BotUttered(text = \"Hallo user\")\n```\n\n----------------------------------------\n\nTITLE: Setting Rasa Pro License in Environment Variables - Bash\nDESCRIPTION: Commands for setting the RASA_PRO_LICENSE environment variable in Bash, both temporarily for the current session and persistently for future sessions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/rasa-pro/installation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n## Temporary\nexport RASA_PRO_LICENSE=<your-license-string>\n\n## Persistent\necho \"export RASA_PRO_LICENSE=<your-license-string>\" >> ~/.bashrc\n## If you're using a different flavor of bash e.g. Zsh, replace .bashrc with your shell's initialization script e.g. ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Train with Domain Directory\nDESCRIPTION: Command to train a Rasa model using multiple domain files from a directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa train --domain path_to_domain_directory\n```\n\n----------------------------------------\n\nTITLE: Defining NLU Training Data for Knowledge Base Queries in Rasa\nDESCRIPTION: This YAML snippet defines the query_knowledge_base intent with annotated examples that show how users might request information about restaurants and their attributes. It includes entity annotations for object_type, attribute, and mention to properly handle references to knowledge base items.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nnlu:\n- intent: query_knowledge_base\n  examples: |\n    - what [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"} can you recommend?\n    - list some [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"}\n    - can you name some [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"} please?\n    - can you show me some [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"} options\n    - list [German](cuisine) [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"}\n    - do you have any [mexican](cuisine) [restaurants]{\"entity\": \"object_type\", \"value\": \"restaurant\"}?\n    - do you know the [price range]{\"entity\": \"attribute\", \"value\": \"price-range\"} of [that one](mention)?\n    - what [cuisine](attribute) is [it](mention)?\n    - do you know what [cuisine](attribute) the [last one]{\"entity\": \"mention\", \"value\": \"LAST\"} has?\n    - does the [first one]{\"entity\": \"mention\", \"value\": \"1\"} have [outside seating]{\"entity\": \"attribute\", \"value\": \"outside-seating\"}?\n    - what is the [price range]{\"entity\": \"attribute\", \"value\": \"price-range\"} of [Berlin Burrito Company](restaurant)?\n    - what about [I due forni](restaurant)?\n    - can you tell me the [price range](attribute) of [that restaurant](mention)?\n    - what [cuisine](attribute) do [they](mention) have?\n```\n\n----------------------------------------\n\nTITLE: Handling Rule-Only Data in Rasa 3.0\nDESCRIPTION: Shows how rule-only data is passed directly as a parameter to the predict_action_probabilities method in Rasa 3.0, eliminating the need for a separate method to set policy states.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Dict, Text, Any\n\nfrom rasa.core.policies.policy import Policy, PolicyPrediction\nfrom rasa.shared.core.domain import Domain\nfrom rasa.shared.core.trackers import DialogueStateTracker\n\nclass MyPolicy(Policy):\n    def predict_action_probabilities(\n        self,\n        tracker: DialogueStateTracker,\n        domain: Domain,\n        rule_only_data: Optional[Dict[Text, Any]] = None,\n  ) -> PolicyPrediction:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Starting Rasa Server with Configured Endpoints\nDESCRIPTION: Command to start the Rasa server using a specified endpoints configuration file that contains tracker store settings.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa run -m models --endpoints endpoints.yml\n```\n\n----------------------------------------\n\nTITLE: Custom Importer Implementation for Rasa 3.0\nDESCRIPTION: Shows how to implement a custom training data importer in Rasa 3.0 with synchronous methods replacing the previous asynchronous methods from Rasa 2.0.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\n\nfrom rasa.shared.core.domain import Domain\nfrom rasa.shared.importers.importer import TrainingDataImporter\n\n\nclass MyImporter(TrainingDataImporter):\n    \"\"\"Example partial implementation of a custom importer component.\"\"\"\n\n    # this function was async before\n    def get_domain(self) -> Domain:\n        pass\n\n    # this function was also async before\n    def get_config(self) -> Dict:\n        pass\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Service in Docker Compose\nDESCRIPTION: Docker Compose configuration snippet for adding a PostgreSQL service to be used as a tracker store in a Rasa deployment.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npostgres:\n  image: postgres:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Rasa Pro License in Environment Variables - Windows PowerShell\nDESCRIPTION: Commands for setting the RASA_PRO_LICENSE environment variable in Windows PowerShell, both temporarily for the current session and persistently for future sessions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/rasa-pro/installation.mdx#2025-04-21_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n## Temporary\n$env: RASA_PRO_LICENSE=<your-license-string>\n\n## Persistent\n[System.Environment]::SetEnvironmentVariable('RASA_PRO_LICENSE','<your-license-string>')\n```\n\n----------------------------------------\n\nTITLE: Fallback Rule Definition in Rasa 2.0\nDESCRIPTION: A rule configuration in rules.yml that handles low NLU confidence by triggering a fallback action when the nlu_fallback intent is detected.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - rule: Ask the user to rephrase whenever they send a message with low NLU confidence\n    steps:\n    - intent: nlu_fallback\n    - action: utter_please_rephrase\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Channel in Rasa\nDESCRIPTION: Configuration for the callback channel in credentials.yml, specifying the webhook URL for bot responses.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/your-own-website.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncallback:\n  # URL to which Core will send the bot responses\n  url: \"http://localhost:5034/bot\"\n```\n\n----------------------------------------\n\nTITLE: Starting Rasa Server with Redis Backend\nDESCRIPTION: Command to start the Rasa Core server using a Redis backend by specifying the endpoints.yml configuration file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/lock-stores.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa run -m models --endpoints endpoints.yml\n```\n\n----------------------------------------\n\nTITLE: Testing Rasa NLU Model Interactively\nDESCRIPTION: Starts an interactive shell session to test the trained NLU model by typing test messages and viewing the model's interpretation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/microsoft-luis-to-rasa.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrasa shell nlu\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Knowledge Base Action in Python\nDESCRIPTION: This code shows how to create a custom knowledge base action by inheriting from ActionQueryKnowledgeBase and initializing it with an InMemoryKnowledgeBase that loads data from a JSON file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa_sdk.knowledge_base.storage import InMemoryKnowledgeBase\nfrom rasa_sdk.knowledge_base.actions import ActionQueryKnowledgeBase\n\nclass MyKnowledgeBaseAction(ActionQueryKnowledgeBase):\n    def __init__(self):\n        knowledge_base = InMemoryKnowledgeBase(\"data.json\")\n        super().__init__(knowledge_base)\n```\n\n----------------------------------------\n\nTITLE: Configuring pip for Rasa Pro Installation\nDESCRIPTION: Configuration settings for pip.conf/pip.ini to use the GCP Artifact Registry as an additional package source for installing rasa-plus.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/rasa-pro/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[global]\nextra-index-url = https://europe-west3-python.pkg.dev/rasa-releases/rasa-plus-py/simple/\n\n```\n\n----------------------------------------\n\nTITLE: Story with Custom Action in Rasa\nDESCRIPTION: Example of a story using a custom action (action_ type) to execute arbitrary code.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_14\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: story with a custom action\n  steps:\n  - intent: feedback\n  - action: action_store_feedback\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation\nDESCRIPTION: Command to check if Docker and Docker Compose are installed on your machine, displaying their versions if installed.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/deploying-in-docker-compose.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker -v && docker-compose -v\n# Docker version 18.09.2, build 6247962\n# docker-compose version 1.23.2, build 1110ad01\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action with Conditional SlotSet Events in Python\nDESCRIPTION: Example of a custom action in Rasa that only returns a SlotSet event when the slot value has changed. This pattern can be used to avoid unnecessary slot events when the value remains the same.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CustomAction(Action):\n    def name(self) -> Text:\n        return \"custom_action\"\n\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        # current value of the slot\n        slot_value = tracker.get_slot('my_slot')\n\n        # value of the entity\n        # this is parsed from the user utterance\n        entity_value = next(tracker.get_latest_entity_values(\"entity_name\"), None)\n\n        if slot_value != entity_value:\n          return[SlotSet(\"my_slot\", entity_value)]\n```\n\n----------------------------------------\n\nTITLE: Using Responses in Stories\nDESCRIPTION: Example of using a response action in a Rasa story configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_17\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: greet user\n  steps:\n  - intent: greet\n  - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Configuring Transformers Model Provider\nDESCRIPTION: Example configuration for using the transformers model provider in the anonymization pipeline, specifying both a HuggingFace model and a spaCy model.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/pii-management.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nanonymization:\n  metadata:\n    language: en\n    model_name:\n       spacy: en_core_web_lg\n       transformers: dslim/bert-base-NER\n    model_provider: transformers\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment on Windows\nDESCRIPTION: Commands to create and activate a Python virtual environment on Windows.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/environment-set-up.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bat\nCODE:\n```\nC:\\> python3 -m venv ./venv\n```\n\nLANGUAGE: bat\nCODE:\n```\nC:\\> .\\venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Configuring LogisticRegressionClassifier in Rasa\nDESCRIPTION: This configuration example sets up a Logistic Regression intent classifier using scikit-learn’s implementation. It allows for configuration of parameters such as max iterations, solver type, and ranking length for intents. The setup is aimed at faster training times while providing a decent accuracy for intent classification.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: LogisticRegressionClassifier\n  max_iter: 100\n  solver: lbfgs\n  tol: 0.0001\n  random_state: 42\n  ranking_length: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Lock Store in endpoints.yml\nDESCRIPTION: Configuration example for setting up a custom lock store implementation by specifying the module path and required parameters in the endpoints.yml file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/lock-stores.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlock_store:\n  type: path.to.your.module.Class\n  url: localhost\n  a_parameter: a value\n  another_parameter: another value\n```\n\n----------------------------------------\n\nTITLE: Accessing ResponseSelector Output in Python\nDESCRIPTION: Updated Python code to access the intent response key from the ResponseSelector output.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nresponse_selector_output.get(\"default\")\n                        .get(\"response\")\n                        .get(\"intent_response_key\")\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rasa Project\nDESCRIPTION: Initializes a new Rasa project with the default configuration and training data files.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/google-dialogflow-to-rasa.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrasa init\n```\n\n----------------------------------------\n\nTITLE: Adding Intent for Cancelling Reminders in Rasa - YAML\nDESCRIPTION: This YAML snippet is used to define the `ask_forget_reminders` intent within the domain configuration of Rasa to activate the corresponding action for cancelling reminders.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/reaching-out-to-user.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nintents:\n- intent: ask_forget_reminders\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database URL Format\nDESCRIPTION: Database connection URL structure for PostgreSQL instances, demonstrating authentication and connection parameters\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/getting-started-with-analytics.mdx#2025-04-21_snippet_1\n\nLANGUAGE: uri\nCODE:\n```\nEnvironment variable `RASA_ANALYTICS_DB_URL` for PostgreSQL connection\n```\n\n----------------------------------------\n\nTITLE: Configuring Tokenizer and Featurizer for NLU Pipeline in YAML\nDESCRIPTION: Example configuration for WhitespaceTokenizer with intent tokenization and CountVectorsFeaturizer in the NLU pipeline. This setup replicates the functionality of the deprecated LabelTokenizerSingleStateFeaturizer.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\npipeline:\n  - name: WhitespaceTokenizer\n    intent_tokenization_flag: True\n  - name: CountVectorsFeaturizer\n```\n\n----------------------------------------\n\nTITLE: Loading a Trained Policy in Rasa 3.0\nDESCRIPTION: Shows how to update the loading method of a custom policy in Rasa 3.0. The new version uses model_storage and resource to load the persisted policy data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom typing import Dict, Text, Any\n\nfrom rasa.core.featurizers.tracker_featurizers import TrackerFeaturizer\nfrom rasa.core.policies.policy import Policy\nfrom rasa.engine.graph import ExecutionContext\nfrom rasa.engine.storage.resource import Resource\nfrom rasa.engine.storage.storage import ModelStorage\nfrom rasa.shared.exceptions import FileIOException\n\nclass MyPolicy(Policy):\n    @classmethod\n    def load(\n        cls,\n        config: Dict[Text, Any],\n        model_storage: ModelStorage,\n        resource: Resource,\n        execution_context: ExecutionContext,\n        **kwargs: Any,\n    ) -> MyPolicy:\n        featurizer = None\n        model_data = {}\n\n        try:\n            with model_storage.read_from(resource) as path:\n                if (Path(path) / FEATURIZER_FILE).is_file():\n                    featurizer = TrackerFeaturizer.load(path)\n\n                model_data_file = path / \"model_data.json\"\n                model_data = json.loads(rasa.shared.utils.io.read_file(model_data_file))\n\n        except (ValueError, FileNotFoundError, FileIOException):\n            logger.debug(\n                f\"Couldn't load metadata for policy '{cls.__name__}' as the persisted \"\n                f\"metadata couldn't be loaded.\"\n            )\n\n        return cls(\n            config, model_storage, resource, execution_context,\n            featurizer=featurizer, model_data=model_data\n        )\n```\n\n----------------------------------------\n\nTITLE: Upgrading Rasa Open Source to Latest Version\nDESCRIPTION: Updates the installed Rasa Open Source to the latest version available on PyPI.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --upgrade rasa\n```\n\n----------------------------------------\n\nTITLE: Applying nest_asyncio in Jupyter Notebook for Rasa\nDESCRIPTION: Import and apply nest_asyncio to prepare the event loop for running asynchronous Rasa code in the Jupyter Notebook.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/jupyter-notebooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport nest_asyncio\n\nnest_asyncio.apply()\nprint(\"Event loop ready.\")\n```\n\n----------------------------------------\n\nTITLE: spaCy Entity Extractor Output Example\nDESCRIPTION: Example JSON output from the SpacyEntityExtractor showing entity extraction results with entity value, position, and type information.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entities\": [{\n        \"value\": \"New York City\",\n        \"start\": 20,\n        \"end\": 33,\n        \"confidence\": null,\n        \"entity\": \"city\",\n        \"extractor\": \"SpacyEntityExtractor\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Rasa Action Server with Helm\nDESCRIPTION: Commands to add the Rasa Helm repository and deploy Rasa Action Server using Helm.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add rasa https://helm.rasa.com\n\nhelm install \\\n    --namespace <your namespace> \\\n    <release name> \\\n    rasa/rasa-action-server\n```\n\n----------------------------------------\n\nTITLE: Starting Rasa Server with Asymmetric JWT Authentication\nDESCRIPTION: Command to start a Rasa server with asymmetric JWT authentication, specifying public and private keys and the algorithm.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/http-api.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrasa run \\\n    --enable-api \\\n    --jwt-secret <public_key> \\\n    --jwt-private-key <private_key> \\\n    --jwt-method RS512\n```\n\n----------------------------------------\n\nTITLE: Testing a custom Rasa connector with cURL\nDESCRIPTION: Example of how to test a custom connector using a cURL command to send a POST request to the webhook endpoint. This demonstrates sending a message to a locally running Rasa server.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/custom-connectors.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://localhost:5005/webhooks/myio/webhook \\\n     --header 'Content-Type: application/json' \\\n     --data '{\n            \"sender\": \"test_user\",\n            \"message\": \"Hi there!\",\n            \"metadata\": {}\n          }'\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network for Rasa Components\nDESCRIPTION: This bash command creates a Docker network named 'my-project' that will be used to connect the Rasa server and the action server containers.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/building-in-docker.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create my-project\n```\n\n----------------------------------------\n\nTITLE: Legacy FormAction Implementation in Python\nDESCRIPTION: Example implementation of a FormAction in Rasa 1.x using the rasa_sdk FormAction class, including slot validation and form submission logic.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Text, List, Any, Dict, Union\nfrom rasa_sdk import Tracker\nfrom rasa_sdk.executor import CollectingDispatcher\nfrom rasa_sdk.forms  import FormAction\n\nclass RestaurantForm(FormAction):\n    def name(self) -> Text:\n        return \"restaurant_form\"\n\n    @staticmethod\n    def required_slots(tracker: Tracker) -> List[Text]:\n        return [\"cuisine\"]\n\n    def slot_mappings(self) -> Dict[Text, Union[Dict, List[Dict]]]:\n        return {\n            \"cuisine\": self.from_entity(entity=\"cuisine\", not_intent=\"chitchat\"),\n        }\n\n    @staticmethod\n    def cuisine_db() -> List[Text]:\n        \"\"\"Database of supported cuisines\"\"\"\n\n        return [\"caribbean\", \"chinese\", \"french\"]\n\n    def validate_cuisine(\n        self,\n        value: Text,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> Dict[Text, Any]:\n        \"\"\"Validate cuisine value.\"\"\"\n\n        if value.lower() in self.cuisine_db():\n            # validation succeeded, set the value of the \"cuisine\" slot to value\n            return {\"cuisine\": value}\n        else:\n            dispatcher.utter_message(template=\"utter_wrong_cuisine\")\n            # validation failed, set this slot to None, meaning the\n            # user will be asked for the slot again\n            return {\"cuisine\": None}\n\n    def submit(\n        self,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> List[Dict]:\n        \"\"\"Define what the form has to do\n            after all required slots are filled\"\"\"\n\n        # utter submit template\n        dispatcher.utter_message(template=\"utter_submit\")\n        return []\n```\n\n----------------------------------------\n\nTITLE: Entity Definition in JSON Format\nDESCRIPTION: Shows the JSON format for defining entities with roles, groups and values in Rasa training data, including start/end positions for entity extraction.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n\"entities\": [\n    {\n        \"start\": 10,\n        \"end\": 12,\n        \"value\": \"Los Angeles\",\n        \"entity\": \"location\",\n        \"role\": \"city\",\n        \"group\": \"CA\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Text Substitution Rule\nDESCRIPTION: Configuration example showing how to use the text substitution method to replace PERSON entities with a fixed value.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/pii-management.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nanonymization:\n  metadata:\n    language: en\n    model_name: en_core_web_lg\n    model_provider: spacy\n  rule_lists:\n    - id: rules_1\n      rules:\n        - entity: PERSON\n          substitution: text\n          value: John Doe\n```\n\n----------------------------------------\n\nTITLE: Calculating Abandonment Rate in SQL\nDESCRIPTION: This SQL query determines the rate at which users abandon conversations after a specific bot message. It identifies sessions where the last event was the bot uttering 'utter_ask_name' and calculates the ratio of these abandoned sessions to total sessions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/example-queries.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nWITH \"sessions\" AS (\n    SELECT\n        DISTINCT ON (\"public\".\"rasa_event\".\"session_id\") \"public\".\"rasa_event\".\"session_id\",\n        \"public\".\"rasa_event\".\"timestamp\" AS \"timestamp\",\n        (\n            CASE\n                WHEN \"public\".\"rasa_bot_message\".\"template_name\" = 'utter_ask_name'\n                THEN 1 ELSE 0\n            END\n        ) AS \"is_abandonned\"\n    FROM \"public\".\"rasa_event\"\n    INNER JOIN \"public\".\"rasa_bot_message\"\n      ON \"public\".\"rasa_event\".\"id\" = \"public\".\"rasa_bot_message\".\"event_id\"\n    WHERE \"public\".\"rasa_event\".\"event_type\" = 'bot'\n    ORDER BY 1, 2 DESC\n)\nSELECT\n  date_trunc('month', \"timestamp\") AS \"timestamp\",\n  SUM(\"is_abandonned\")::float / count(*) AS \"abandonment_rate\"\nFROM \"sessions\"\nGROUP BY 1\nORDER BY 1 ASC\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JSON Message in Rasa Utterance Template\nDESCRIPTION: This snippet shows how to include arbitrary JSON messages in Rasa utterance templates using the 'custom' key. This allows for sending complex, structured messages beyond simple text responses.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\n- \"custom\": {\"foo\": {bar}}\n```\n\n----------------------------------------\n\nTITLE: Training Dialogue Models with Multiple Configurations in Rasa\nDESCRIPTION: This command trains dialogue models using multiple configurations and different amounts of training data. It excludes varying percentages of training stories and repeats the process three times for consistency.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrasa train core -c config_1.yml config_2.yml \\\n  --out comparison_models --runs 3 --percentages 0 5 25 50 70 95\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Certificate File in endpoints.yaml\nDESCRIPTION: Example configuration for loading a custom local certificate file to use when making requests to action endpoints. The cafile parameter specifies the path to the certificate file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\naction_endpoint:\n  url: https://localhost:5055/webhook\n  cafile: ./cert.pem\n```\n\n----------------------------------------\n\nTITLE: Providing a Default Configuration for an NLU Component - Rasa 3.0\nDESCRIPTION: This snippet outlines the change in how default configuration is managed in Rasa 3.0, transitioning from a static property to using a dedicated method 'get_default_config'.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Text, Any, Dict\n\nfrom rasa.engine.graph import GraphComponent\nfrom rasa.nlu.classifiers.classifier import IntentClassifier\n\nclass MyNLUComponent(GraphComponent, IntentClassifier):\n    ...\n    @staticmethod\n    def get_default_config() -> Dict[Text, Any]:\n        return {\"key1\": \"value1\"}\n\n\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Rasa with Oracle Client\nDESCRIPTION: Dockerfile to extend the Rasa image with Oracle client libraries and dependencies needed for connecting to Oracle databases.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nFROM rasa/rasa:${variables.release}-full\n\n# Switch to root user to install packages\nUSER root\n\nRUN apt-get update -qq && apt-get install -y --no-install-recommends alien libaio1 && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Copy in oracle instaclient\n# https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html\nCOPY oracle.rpm oracle.rpm\n\n# Install the Python wrapper library for the Oracle drivers\nRUN pip install cx-Oracle\n\n# Install Oracle client libraries\nRUN alien -i oracle.rpm\n\nUSER 1001\n```\n\n----------------------------------------\n\nTITLE: WebSocket Metadata Configuration\nDESCRIPTION: Configuration for custom metadata key in SocketIO channel.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/your-own-website.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsocketio:\n  metadata_key: customData\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Custom Tracker Store\nDESCRIPTION: Docker Compose configuration example showing how to mount a custom tracker store module and configure the service.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nrasa:\n  <existing rasa service configuration>\n  volumes:\n    - <existing volume mappings, if there are any>\n    - ./path/to/your/module.py:/app/path/to/your/module.py\ncustom-tracker-store:\n  image: custom-image:tag\n```\n\n----------------------------------------\n\nTITLE: Processing Single vs. Multiple Messages in NLU Component in Rasa 2.0 (Python)\nDESCRIPTION: Extends the IntentClassifier to process a single Message object. The process method calls predict on the provided message. Dependencies include Rasa's intent classification components.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\n\nfrom rasa.nlu.classifiers.classifier import IntentClassifier\nfrom rasa.shared.nlu.training_data.message import Message\n\nclass MyNLUComponent(IntentClassifier):\n    def process(self, message: Message, **kwargs: Any) -> None:\n        self.predict(message)\n```\n\n----------------------------------------\n\nTITLE: Custom Tracker Store Base Configuration\nDESCRIPTION: Example super() call required when implementing a custom tracker store class in Rasa.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsuper().__init__(domain, event_broker, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Loading Latest Rasa Model from Directory\nDESCRIPTION: Command to load the most recent model from a specified directory. Rasa checks all models in the directory and selects the one with the most recent training timestamp.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --model models/\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Broker with Docker Compose\nDESCRIPTION: This command starts the Kafka broker service in detached mode using Docker Compose. The Kafka broker relies on Zookeeper for configuration and management.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/with_tls/scram_sha_256/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndocker-compose up -d kafka-broker\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Rules for Form Activation and Submission\nDESCRIPTION: This code defines rules for when the form should be activated and what happens when all required slots are filled, including actions to be taken after form completion.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/business-logic.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - rule: activate restaurant form\n    steps:\n      - intent: request_restaurant   # intent that triggers form activation\n      - action: restaurant_form      # run the form\n      - active_loop: restaurant_form # this form is active\n\n  - rule: submit form\n    condition:\n    - active_loop: restaurant_form   # this form must be active\n    steps:\n      - action: restaurant_form      # run the form\n      - active_loop: null            # the form is no longer active because it has been filled\n      - action: utter_submit         # action to take after the form is complete\n      - action: utter_slots_values   # action to take after the form is complete\n```\n\n----------------------------------------\n\nTITLE: Building Custom Rasa Docker Image with Oracle Support\nDESCRIPTION: Command to build a custom Docker image for Rasa with Oracle database support.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . -t rasa-oracle:${variables.release}-oracle-full\n```\n\n----------------------------------------\n\nTITLE: Rule for Account Balance Check\nDESCRIPTION: A rule demonstrating how to handle single-turn context switching for checking account balance.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/writing-stories.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n- rule: Check my account balance\n  steps:\n  - intent: check_account_balance\n  - action: action_get_account_balance\n```\n\n----------------------------------------\n\nTITLE: Add List Handling in Send Custom JSON Method - Python\nDESCRIPTION: This code adds the capability to handle lists in the send_custom_json method for Facebook channel messaging. It captures various scenarios for handling JSON data structures, ensuring robustness in message formatting. The method is dependent on the correct interpretation of nested JSON structures.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Add List handling in the send_custom_json method on channels/facebook.py.\n\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Knowledge Base for Restaurants and Hotels in Rasa\nDESCRIPTION: This JSON file defines a knowledge base with restaurant and hotel object types. Each object has a unique ID, name, and various attributes like cuisine, price-range, and amenities. This data structure is used to initialize an InMemoryKnowledgeBase in Rasa.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"restaurant\": [\n        {\n            \"id\": 0,\n            \"name\": \"Donath\",\n            \"cuisine\": \"Italian\",\n            \"outside-seating\": true,\n            \"price-range\": \"mid-range\"\n        },\n        {\n            \"id\": 1,\n            \"name\": \"Berlin Burrito Company\",\n            \"cuisine\": \"Mexican\",\n            \"outside-seating\": false,\n            \"price-range\": \"cheap\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"I due forni\",\n            \"cuisine\": \"Italian\",\n            \"outside-seating\": true,\n            \"price-range\": \"mid-range\"\n        }\n    ],\n    \"hotel\": [\n        {\n            \"id\": 0,\n            \"name\": \"Hilton\",\n            \"price-range\": \"expensive\",\n            \"breakfast-included\": true,\n            \"city\": \"Berlin\",\n            \"free-wifi\": true,\n            \"star-rating\": 5,\n            \"swimming-pool\": true\n        },\n        {\n            \"id\": 1,\n            \"name\": \"Hilton\",\n            \"price-range\": \"expensive\",\n            \"breakfast-included\": true,\n            \"city\": \"Frankfurt am Main\",\n            \"free-wifi\": true,\n            \"star-rating\": 4,\n            \"swimming-pool\": false\n        },\n        {\n            \"id\": 2,\n            \"name\": \"B&B\",\n            \"price-range\": \"mid-range\",\n            \"breakfast-included\": false,\n            \"city\": \"Berlin\",\n            \"free-wifi\": false,\n            \"star-rating\": 1,\n            \"swimming-pool\": false\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rasa 2.0 Domain Configuration Example - YAML\nDESCRIPTION: Example of a domain configuration file in Rasa 2.0 format showing entities, slots and form definitions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nentities:\n - cuisine\n - number\nslots:\n   cuisine:\n     type: text\n   num_people:\n     type: float\n   outdoor_seating:\n     type: bool\nforms:\n   restaurant_form:\n     required_slots:\n         cuisine:\n           - type: from_entity\n             entity: cuisine\n         num_people:\n           - type: from_entity\n             entity: number\n         outdoor_seating:\n           - type: from_intent\n             intent: affirm\n             value: true\n           - type: from_intent\n             intent: deny\n             value: false\n```\n\n----------------------------------------\n\nTITLE: Installing Rasa Pro with Poetry\nDESCRIPTION: Commands and configuration for installing the rasa-plus package using Poetry package manager, including setting up authentication and repository sources.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/rasa-pro/installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry self add \"keyrings.google-artifactregistry-auth\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.poetry.source]]\nname = \"rasa-plus\"\nurl = \"https://europe-west3-python.pkg.dev/rasa-releases/rasa-plus-py/simple\"\ndefault = false\nsecondary = true\n\n```\n\n----------------------------------------\n\nTITLE: Slot Configuration in YAML\nDESCRIPTION: Example of how to configure a slot with the influence_conversation property to control whether it affects conversation flow.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nslot:\n  a_slot:\n    type: text\n    influence_conversation: false\n```\n\n----------------------------------------\n\nTITLE: Configuring ResponseSelector in Rasa Pipeline\nDESCRIPTION: Example of configuring the ResponseSelector component in the Rasa pipeline to use text as labels.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_61\n\nLANGUAGE: yaml-rasa\nCODE:\n```\npipeline:\n  # other components\n  - name: ResponseSelector\n    use_text_as_label: true\n```\n\n----------------------------------------\n\nTITLE: Sending Environment Variable in KafkaEventBroker Messages - Python\nDESCRIPTION: This code snippet updates the KafkaEventBroker to include the value of the RASA_ENVIRONMENT environmental variable in the messages it logs, enhancing traceability for users. No additional dependencies are required for this change.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# The value of the RASA_ENVIRONMENT environmental variable is sent as a header in messages logged by KafkaEventBroker.\n\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Structure for Rasa API Authentication\nDESCRIPTION: Example of the required payload structure for a JWT token used in Rasa API authentication. It must contain a 'user' object with 'username' and 'role' properties.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/http-api.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"user\": {\n        \"username\": \"<sender_id>\",\n        \"role\": \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using utter_message with Image Parameter in Rasa\nDESCRIPTION: Example of using the CollectingDispatcher.utter_message method with the image parameter to display an image to the user via URL.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/sdk-dispatcher.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndispatcher.utter_message(image = \"https://i.imgur.com/nGF1K8f.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Installing MITIE Dependencies for Rasa Open Source\nDESCRIPTION: Installs MITIE and its dependencies for use with Rasa Open Source.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip3 install git+https://github.com/mit-nlp/MITIE.git\npip3 install 'rasa[mitie]'\n```\n\n----------------------------------------\n\nTITLE: Custom Slack Output Payload in Rasa\nDESCRIPTION: Example of sending a custom payload to Slack channel, specifically implementing a date picker using Slack's Block Kit.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_15\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_take_bet:\n  - custom:\n      blocks:\n      - type: section\n        text:\n          text: \"Make a bet on when the world will end:\"\n          type: mrkdwn\n        accessory:\n          type: datepicker\n          initial_date: '2019-05-21'\n          placeholder:\n            type: plain_text\n            text: Select a date\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper for Kafka Setup\nDESCRIPTION: This snippet details the command to start the Zookeeper service required for Kafka. It uses Docker Compose to initialize Zookeeper in a detached mode.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/with_tls/scram_sha_512/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d zookeeper\n```\n\n----------------------------------------\n\nTITLE: Testing Rasa NLU Model\nDESCRIPTION: Starts an interactive shell to test the trained NLU model with custom inputs.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/google-dialogflow-to-rasa.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrasa shell nlu\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment with pyenv\nDESCRIPTION: Commands to install and activate a specific Python version using pyenv for Rasa development.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyenv install 3.10.10\npyenv local 3.10.10\n```\n\n----------------------------------------\n\nTITLE: Stories for Conditional Responses in Rasa\nDESCRIPTION: This example shows a story that sets a slot value which will trigger a conditional response when the greeting action is executed.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/responses.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n- story: greet\n  steps:\n  - action: action_log_in\n  - slot_was_set:\n    - logged_in: true\n  - intent: greet\n  - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Simplified Pipeline Configuration\nDESCRIPTION: Updated pipeline configuration without buffer size parameters, as space is now allocated dynamically.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n  - name: \"WhitespaceTokenizer\"\n  - name: \"RegexFeaturizer\"\n  - name: \"CountVectorsFeaturizer\"\n```\n\n----------------------------------------\n\nTITLE: Pulling Rasa Pro Docker Image\nDESCRIPTION: Commands to authenticate with Google Cloud and pull the Rasa Pro Docker image from GCP Artifact Registry.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/rasa-pro/installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth activate-service-account --key-file=${KEYFILE}\ngcloud auth configure-docker europe-west3-docker.pkg.dev\ndocker pull europe-west3-docker.pkg.dev/rasa-releases/rasa-plus/rasa-plus\n```\n\n----------------------------------------\n\nTITLE: Form Configuration in YAML\nDESCRIPTION: Forms with slot mappings must now be defined as a dictionary in domain.yml instead of a simple list of form names, though the old list syntax is still supported.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_39\n\nLANGUAGE: YAML\nCODE:\n```\nforms:\n  form_name_1:\n    # form configuration here\n  form_name_2:\n    # form configuration here\n```\n\n----------------------------------------\n\nTITLE: Checking Python Environment\nDESCRIPTION: Commands to verify if Python and pip are already installed and their versions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/environment-set-up.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\npip3 --version\n```\n\n----------------------------------------\n\nTITLE: Story Slot Configuration Example in YAML\nDESCRIPTION: Example showing how to configure a slot with a dictionary value in a story using YAML format. Used to demonstrate correct slot configuration in stories.yml file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n- slot_was_set:\n    - some_slot:\n        some_key: 'some_value'\n        other_key: 'other_value'\n```\n\n----------------------------------------\n\nTITLE: Testing Rasa Core Dialogue Model\nDESCRIPTION: Command to evaluate a trained dialogue model against test stories, generating confusion matrices and failed story reports.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrasa test core --stories test_stories.yml --out results\n```\n\n----------------------------------------\n\nTITLE: Evaluating Multiple Dialogue Models in Rasa\nDESCRIPTION: This command evaluates multiple trained dialogue models on a set of stories. It compares the performance of different models and generates graphs to visualize the results.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/testing-your-assistant.mdx#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrasa test core -m comparison_models --stories stories_folder\n  --out comparison_results --evaluate-model-directory\n```\n\n----------------------------------------\n\nTITLE: Starting the Callback Channel Server\nDESCRIPTION: Command to run a callback channel server that prints the bot's responses to the console. This is part of the testing setup for the Reminderbot example.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/reminderbot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython callback_server.py\n```\n\n----------------------------------------\n\nTITLE: Legacy TwoStageFallbackPolicy Configuration\nDESCRIPTION: Example configuration of the deprecated TwoStageFallbackPolicy in config.yml, showing threshold settings and fallback action configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n  - name: TwoStageFallbackPolicy\n    nlu_threshold: 0.4\n    ambiguity_threshold: 0.1\n    core_threshold: 0.3\n    fallback_core_action_name: \"action_default_fallback\"\n    fallback_nlu_action_name: \"action_default_fallback\"\n    deny_suggestion_intent_name: \"out_of_scope\"\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for Rasa\nDESCRIPTION: Commands to create and activate a Python virtual environment for Rasa development.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: EntitySynonymMapper Configuration in YAML\nDESCRIPTION: Pipeline configuration for the EntitySynonymMapper component in Rasa.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"EntitySynonymMapper\"\n```\n\n----------------------------------------\n\nTITLE: Installing boto3 for AWS S3 Integration\nDESCRIPTION: Command to install the boto3 Python package, which is required for Rasa to connect to and download models from Amazon S3 storage.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip3 install boto3\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Fallback Response in Rasa\nDESCRIPTION: This snippet defines the default response that will be sent when action confidence is below the threshold.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/fallback-handoff.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nresponses:\n  utter_default:\n  - text: Sorry I didn't get that. Can you rephrase?\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Server with Facebook Connector\nDESCRIPTION: Command to run a Rasa server that connects to the Facebook Messenger channel. The server uses the trained model and specified credentials for channel connection.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/moodbot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrasa run -m models -p 5002 --connector facebook --credentials credentials.yml\n```\n\n----------------------------------------\n\nTITLE: Example Healthcheck Endpoint Response\nDESCRIPTION: JSON response from the Rasa Pro Services healthcheck endpoint which indicates the health status of the service and its components.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-rasa-pro-services.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"details\": {\n    \"analytics-consumer\": {\n      \"alive\": 1,\n      \"isHealthy\": true\n    }\n  },\n  \"isHealthy\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Rewinding Conversation Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'rewind' event in Rasa, which reverts all side effects of the last user message and removes the last 'user' event from the tracker.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"rewind\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Mapping for DTMF Input in Rasa Form\nDESCRIPTION: Configuration for a pin_code slot that extracts values from DTMF events. Includes conditions to prevent extraction during no-user-input events.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/audioodes-voiceai-connect.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  pin_code:\n    type: text\n    influence_conversation: false\n    mappings:\n    - type: from_entity\n      entity: value\n      intent: vaig_event_DTMF\n      not_intent: vaig_event_noUserInput\n      conditions:\n      - active_loop: pin_code_form\n        requested_slot: pin_code\n```\n\n----------------------------------------\n\nTITLE: Starting Rasa with Custom Endpoints\nDESCRIPTION: Command to start the Rasa server using a configured endpoints file that specifies the tracker store settings.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrasa run -m models --endpoints endpoints.yml\n```\n\n----------------------------------------\n\nTITLE: Enabling PII Anonymization in Logs (YAML)\nDESCRIPTION: This snippet demonstrates how to enable anonymization of PII in logs by configuring the `logger` section in the `endpoints.yml` file. The `anonymization_rules` field specifies the ID of the anonymization rule list to be used for anonymizing log messages.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/pii-management.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nlogger:\n  formatter:\n    anonymization_rules: rules_1\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Rasa API with LUIS Emulation\nDESCRIPTION: Sends a test request to the Rasa server using curl, with LUIS emulation mode enabled to get responses in LUIS format.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/microsoft-luis-to-rasa.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:5005/model/parse?emulation_mode=luis' -d '{\"text\": \"hello\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Rasa in shell mode for command line testing\nDESCRIPTION: Command to run the Rasa assistant in shell mode for testing via command line interface without connecting to any external channels.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/responseselectorbot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa shell\n```\n\n----------------------------------------\n\nTITLE: Verifying CA Certificate and Signed Certificate\nDESCRIPTION: This command uses OpenSSL to verify that a CA certificate can authenticate a signed certificate. It requires the CA certificate and the signed certificate files.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenssl verify -CAfile ca-cert signed-server-cert\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Users on Zookeeper\nDESCRIPTION: These commands create `kafkabroker` and `kafkaclient` users on Zookeeper with SASL/SCRAM-SHA-256 authentication. It involves executing commands within the Zookeeper container to add the users using `kafka-configs` tool.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/with_tls/scram_sha_256/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndocker exec -it zookeeper-scram-sha-256-tls bash\ncd /etc/kafka/client\nKAFKA_OPTS=\"-Djava.security.auth.login.config=zookeeper_client_jaas.conf\" kafka-configs --zookeeper localhost:2188 --alter --add-config 'SCRAM-SHA-256=[iterations=4096,password=password]' --entity-type users --entity-name kafkabroker\nKAFKA_OPTS=\"-Djava.security.auth.login.config=zookeeper_client_jaas.conf\" kafka-configs --zookeeper localhost:2188 --alter --add-config 'SCRAM-SHA-256=[iterations=4096,password=password]' --entity-type users --entity-name client\n\n# Exit from zookeeper container\nexit\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Rasa Stories\nDESCRIPTION: Command to generate a visual representation of the story data, which helps in understanding conversation flows in the bot.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/concertbot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa visualize\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificates for Kafka Broker\nDESCRIPTION: This shell script generates TLS certificates for a Kafka broker using OpenSSL and Keytool.  It creates a Certificate Authority (CA), generates a server keystore, creates a certificate request, signs the request with the CA, and imports the CA and signed certificate into the keystore. The keystore and certificates are valid for one year.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/ssl_localhost/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create private and public key (public key is usually reffered to as Certificate Authority's certificate or CA certificate)\nopenssl req -x509 -newkey rsa:4096 -keyout ca-key -out ca-cert -days 365 -nodes -subj '/CN=localhost/OU=Atom/O=Rasa/L=Berlin/ST=Germany/C=GE' -passin pass:123456 -passout pass:123456\n\n# Create server keystore protected with storepass and keypass\nkeytool -dname \"CN=localhost,OU=Atom,O=Rasa,L=Berlin,S=Germany,C=GE\" -keystore server.keystore.jks -alias localhost -validity 365 -genkey -keyalg RSA -storetype pkcs12 -ext SAN=IP:localhost -storepass 123456 -keypass 123456\n\n# Create a certificate request\nkeytool -keystore server.keystore.jks -alias localhost -certreq -file cert-request -storepass 123456 -keypass 123456 -ext \"SAN=IP:localhost\"\n\n# Sign the certificate request\nopenssl x509 -req -CA ca-cert -CAkey ca-key -in cert-request -out signed-server-cert -days 365 -CAcreateserial -passin pass:123456\n\n# Import CA certificate into keystore\n# It will be used to decrypt (unseal) the signed certificate sent by the Kafka broker\nkeytool -keystore server.keystore.jks -alias CARoot -import -file ca-cert -storepass 123456 -keypass 123456\n# Import signed certificate into keystore\nkeytool -noprompt -keystore server.keystore.jks -alias localhost -import -file signed-server-cert -storepass 123456 -keypass 123456 -ext \"SAN=DNS:localhost\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TensorFlow GPU and CPU Memory Allocation in Rasa\nDESCRIPTION: Examples of environment variables for configuring TensorFlow hardware resources in Rasa. These variables control GPU memory allocation and CPU thread parallelism for optimizing model training and inference performance.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n# This specifies to use 1024 MB of memory from GPU with logical ID 0 and 2048 MB of memory from GPU with logical ID 1\nTF_GPU_MEMORY_ALLOC=\"0:1024, 1:2048\"\n\n# Specifies that at most 3 CPU threads can be used to parallelize multiple non-blocking operations\nTF_INTER_OP_PARALLELISM_THREADS=\"3\"\n\n# Specifies that at most 2 CPU threads can be used to parallelize a particular operation.\nTF_INTRA_OP_PARALLELISM_THREADS=\"2\"\n```\n\n----------------------------------------\n\nTITLE: Generating Static Credentials for Intermediate Repository\nDESCRIPTION: Command to generate static credentials for authenticating with GCP Artifact Registry when using an intermediate repository like Artifactory or Nexus.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/rasa-pro/installation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngcloud artifacts print-settings python \\\n    --project=rasa-releases \\\n    --repository=rasa-plus-py \\\n    --location=europe-west3 \\\n    --json-key=service-account.json\n```\n\n----------------------------------------\n\nTITLE: Configuring .pypirc for Rasa Pro Installation\nDESCRIPTION: Configuration settings for the .pypirc file to enable installation of the rasa-plus package from GCP Artifact Registry.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/rasa-pro/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[distutils]\nindex-servers =\n    rasa-plus-py\n\n[rasa-plus-py]\nrepository: https://europe-west3-python.pkg.dev/rasa-releases/rasa-plus-py/\n\n```\n\n----------------------------------------\n\nTITLE: Undoing Last Bot Action Event in JSON for Rasa\nDESCRIPTION: JSON representation of an 'undo' event in Rasa, which undoes all side effects of the last bot action and removes it from the tracker.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"undo\"\n}\n```\n\n----------------------------------------\n\nTITLE: BILOU Entity Tagging Example\nDESCRIPTION: Demonstrates how tokens are tagged using the BILOU (Beginning, Inside, Last, Outside, Unit-length) schema\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n[Alex]{\"entity\": \"person\"} is going with [Marty A. Rick]{\"entity\": \"person\"} to [Los Angeles]{\"entity\": \"location\"}.\n```\n\n----------------------------------------\n\nTITLE: Running Rasa Tests\nDESCRIPTION: Command to execute Rasa tests.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-format.mdx#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrasa test\n```\n\n----------------------------------------\n\nTITLE: Setting Language in Rasa Config\nDESCRIPTION: Basic configuration that sets the language to French without specifying a pipeline, allowing Rasa to use its Suggested Config feature to choose an appropriate default pipeline.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nlanguage: fr  # your 2-letter language code\n\npipeline:\n# intentionally left empty\n```\n\n----------------------------------------\n\nTITLE: Sending a Request to Rasa NLU Server with Wit.ai Emulation\nDESCRIPTION: Uses curl to send a test message to the Rasa NLU server with Wit.ai emulation mode enabled for compatible response format.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/facebook-wit-ai-to-rasa.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:5005/model/parse?emulation_mode=wit' -d '{\"text\": \"hello\"}'\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request from Rasa to Model Server\nDESCRIPTION: Example curl command showing how Rasa requests models from a configured server. The request includes an If-None-Match header containing the hash of the previously downloaded model for caching purposes.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"If-None-Match: d41d8cd98f00b204e9800998ecf8427e\" http://my-server.com/models/default\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka users in Zookeeper with SASL/SCRAM\nDESCRIPTION: These commands create `kafkabroker` and `client` users in Zookeeper, configuring them with SCRAM-SHA-256 authentication. The `kafka-configs` tool is used to modify Zookeeper's configuration, adding the users with specified iterations and passwords.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/no_tls/scram_sha_256/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"docker exec -it zookeeper-sasl-scram-sha-256-no-tls bash\\ncd /etc/kafka/client\\nKAFKA_OPTS=\\\"-Djava.security.auth.login.config=zookeeper_client_jaas.conf\\\" kafka-configs --zookeeper localhost:2186 --alter --add-config 'SCRAM-SHA-256=[iterations=4096,password=password]' --entity-type users --entity-name kafkabroker\\nKAFKA_OPTS=\\\"-Djava.security.auth.login.config=zookeeper_client_jaas.conf\\\" kafka-configs --zookeeper localhost:2186 --alter --add-config 'SCRAM-SHA-256=[iterations=4096,password=password]' --entity-type users --entity-name client\"\n```\n\n----------------------------------------\n\nTITLE: Sample Output for MitieIntentClassifier\nDESCRIPTION: This JSON structure represents the output format of the MitieIntentClassifier, detailing the classified intent and its confidence score, which is essential for understanding the model's predictions.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"intent\": {\"name\": \"greet\", \"confidence\": 0.98343}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kafka Broker - Docker Compose - Shell\nDESCRIPTION: This snippet executes a Docker Compose command to run the Kafka broker in detached mode. It is designed to initialize the broker without any authentication, allowing for easier testing and development setups.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/no_authentication/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Synonyms in Rasa NLU\nDESCRIPTION: Example of defining synonyms for entity extraction in Rasa NLU. This maps variations like 'credit card account' and 'credit account' to the canonical value 'credit' in a case-insensitive manner.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/nlu-training-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnlu:\n- synonym: credit\n  examples: |\n    - credit card account\n    - credit account\n```\n\n----------------------------------------\n\nTITLE: Upload Rasa Model to Rasa X/Enterprise\nDESCRIPTION: This bash script uploads a trained Rasa model to a Rasa X/Enterprise instance. It uses the `curl` command to send a POST request with the model file to the Rasa X/Enterprise API endpoint. The API token is needed for authentication and must be included in the request. `my_model.tar.gz` should exist in the ./models/ directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/setting-up-ci-cd.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n\"curl -k -F \\\"model=@models/my_model.tar.gz\\\" \\\"https://example.rasa.com/api/projects/default/models?api_token={your_api_token}\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Sample Per-Session Statistics CSV Output in Rasa\nDESCRIPTION: Example of the stats-per-session.csv output showing detailed statistics for each session and marker, including count, max, mean, median, and min values for the number of preceding user turns.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/markers.mdx#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nsender_id,session_idx,marker,statistic,value\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,count(number of preceding user turns),0\n4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,count(number of preceding user turns),1\nc00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,count(number of preceding user turns),0\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,max(number of preceding user turns),nan\n4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,max(number of preceding user turns),2\nc00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,max(number of preceding user turns),nan\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,mean(number of preceding user turns),nan\n4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,mean(number of preceding user turns),2.0\nc00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,mean(number of preceding user turns),nan\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,median(number of preceding user turns),nan\n4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,median(number of preceding user turns),2.0\nc00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,median(number of preceding user turns),nan\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_cheer_up_failed,min(number of preceding user turns),nan\n4d55093e9696452c8d1157fa33fd54b2,0,marker_cheer_up_failed,min(number of preceding user turns),2\nc00b3de97713427d85524c4374125db1,0,marker_cheer_up_failed,min(number of preceding user turns),nan\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,count(number of preceding user turns),1\n4d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,count(number of preceding user turns),1\nc00b3de97713427d85524c4374125db1,0,marker_mood_expressed,count(number of preceding user turns),1\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,max(number of preceding user turns),0\n4d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,max(number of preceding user turns),1\nc00b3de97713427d85524c4374125db1,0,marker_mood_expressed,max(number of preceding user turns),0\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,mean(number of preceding user turns),0.0\n4d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,mean(number of preceding user turns),1.0\nc00b3de97713427d85524c4374125db1,0,marker_mood_expressed,mean(number of preceding user turns),0.0\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,median(number of preceding user turns),0.0\n4d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,median(number of preceding user turns),1.0\nc00b3de97713427d85524c4374125db1,0,marker_mood_expressed,median(number of preceding user turns),0.0\n3c1afa1ed72c4116ba6670a1668f1b4a,0,marker_mood_expressed,min(number of preceding user turns),0\n4d55093e9696452c8d1157fa33fd54b2,0,marker_mood_expressed,min(number of preceding user turns),1\nc00b3de97713427d85524c4374125db1,0,marker_mood_expressed,min(number of preceding user turns),0\n```\n\n----------------------------------------\n\nTITLE: Training Rasa NLU Model with LUIS Data\nDESCRIPTION: Trains a Rasa NLU model using the imported LUIS training data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/microsoft-luis-to-rasa.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa train nlu\n```\n\n----------------------------------------\n\nTITLE: Creating Voice Response Templates in Rasa\nDESCRIPTION: Example of a text response template in Rasa that will be converted to speech by the VoiceAI Connect text-to-speech engine.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/audioodes-voiceai-connect.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nutter_greet:\n    - text: 'Hello! isn't every life and every work beautiful?'\n```\n\n----------------------------------------\n\nTITLE: Verifying Rust Installation and Setting PATH\nDESCRIPTION: Checks the Rust compiler version and sets the PATH variable if needed.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrustc --version\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Defining ignored intents for forms in YAML\nDESCRIPTION: Add an optional 'ignored_intents' parameter in forms within the domain.yml file to specify intents that should never fill slots in that form.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nforms:\n  form_name:\n    ignored_intents:\n      - chitchat\n    required_slots:\n      # slot mappings...\n```\n\n----------------------------------------\n\nTITLE: Configuring MITIE Tokenizer\nDESCRIPTION: YAML configuration for the MITIE-based tokenizer component.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/components.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n- name: \"MitieTokenizer\"\n  # Flag to check whether to split intents\n  \"intent_tokenization_flag\": False\n  # Symbol on which intent should be split\n  \"intent_split_symbol\": \"_\"\n  # Regular expression to detect tokens\n  \"token_pattern\": None\n```\n\n----------------------------------------\n\nTITLE: Pulling Rasa Pro Services Docker Image\nDESCRIPTION: Shell command to pull the Rasa Pro Services Docker image from Google Cloud Registry.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-rasa-pro-services.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull europe-west3-docker.pkg.dev/rasa-releases/rasa-pro/rasa-pro\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka broker using Docker Compose\nDESCRIPTION: This command starts the Kafka broker container in detached mode using Docker Compose. It relies on Zookeeper being already running and the users created, to ensure the broker can authenticate clients.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/no_tls/scram_sha_256/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"docker-compose up -d kafka-broker\"\n```\n\n----------------------------------------\n\nTITLE: Checking OpenShift CLI Version\nDESCRIPTION: Command to check the installed version of the OpenShift command line interface.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\noc version --client\n```\n\n----------------------------------------\n\nTITLE: Fixed Bug in Wit.ai Training Data Handling - Python\nDESCRIPTION: This snippet addresses a critical bug that occurred when training Rasa with Wit.ai training data, leading to a failure in training sessions. It calls attention to the specific lines in the code where exceptions were being raised and the error handling required to rectify it.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Training with wit.ai training data to train.\n\n```\n\n----------------------------------------\n\nTITLE: Checking TLS Connection\nDESCRIPTION: These commands check the functionality of a TLS connection for different versions using OpenSSL. They require the target address and port along with the desired TLS version.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenssl s_client -debug -connect localhost:29092 -tls1\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenssl s_client -debug -connect localhost:29092 -tls1_1\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenssl s_client -debug -connect localhost:29092 -tls1_2\n```\n\n----------------------------------------\n\nTITLE: Defining a custom slot mapping in Rasa\nDESCRIPTION: This snippet shows how to define a custom slot mapping in the `domain.yml` file.  Custom slot mappings are used with custom actions to populate slots.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/domain.mdx#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  day_of_week:\n    type: text\n    mappings:\n    - type: custom\n      action: action_calculate_day_of_week\n```\n\nLANGUAGE: yaml\nCODE:\n```\nslots:\n  handoff_completed:\n    type: boolean\n    mappings:\n    - type: custom\n```\n\n----------------------------------------\n\nTITLE: Configuring RasaFileImporter in Rasa - YAML\nDESCRIPTION: This snippet shows how to configure the default RasaFileImporter alongside custom importers in a YAML configuration file. It highlights Rasa's ability to merge results from multiple importers.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/training-data-importers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"importers:\\n- name: \\\"module.CustomImporter\\\"\\n  parameter1: \\\"value\\\"\\n  parameter2: \\\"value2\\\"\\n- name: \\\"RasaFileImporter\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Conversation Sessions in Rasa Domain\nDESCRIPTION: Configuration to explicitly disable conversation sessions in the Rasa domain file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_65\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nsession_config:\n  # A session expiration time of `0`\n  # disables conversation sessions\n  session_expiration_time: 0\n```\n\n----------------------------------------\n\nTITLE: Training Rasa NLU Model\nDESCRIPTION: Trains a Rasa NLU model using the imported Wit.ai training data.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/facebook-wit-ai-to-rasa.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa train nlu\n```\n\n----------------------------------------\n\nTITLE: Updated get_stories Method Signature in TrainingDataImporter\nDESCRIPTION: Shows the updated signature of the get_stories method in TrainingDataImporter, which no longer includes template_variables and e2e arguments that were present in Rasa 2.0.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom rasa.shared.nlu.interpreter import RegexInterpreter\nfrom rasa.shared.core.training_data.structures import StoryGraph\n\nclass TrainingDataImporter:\n    # ...\n\n    def get_stories(\n        self,\n        interpreter: \"NaturalLanguageInterpreter\" = RegexInterpreter(),\n        exclusion_percentage: Optional[int] = None,\n    ) -> StoryGraph:\n        pass\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Rasa Open Source\nDESCRIPTION: Installs a specific version of Rasa Open Source, in this case version 3.0.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip3 install rasa==3.0\n```\n\n----------------------------------------\n\nTITLE: Data Conversion Commands for Migration\nDESCRIPTION: Commands to convert existing Markdown data to YAML format as part of migration to Rasa 2.2\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrasa data convert nlu -f yaml --data={SOURCE_DIR} --out={TARGET_DIR}\nrasa data convert nlg -f yaml --data={SOURCE_DIR} --out={TARGET_DIR}\nrasa data convert core -f yaml --data={SOURCE_DIR} --out={TARGET_DIR}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Splitting in DIETClassifier (YAML)\nDESCRIPTION: Configuration option for DIETClassifier to control whether extracted entities should be split by comma. This can be set globally or per entity type.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n- name: DIETClassifier\n  split_entities_by_comma: False\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- name: DIETClassifier\n  split_entities_by_comma:\n    address: True\n    ingredient: False\n```\n\n----------------------------------------\n\nTITLE: Installing nest_asyncio for Jupyter Notebooks with Rasa\nDESCRIPTION: Install the nest_asyncio package to enable running asynchronous Rasa code in Jupyter Notebooks, which already run on event loops.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/jupyter-notebooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install nest_asyncio\n```\n\n----------------------------------------\n\nTITLE: Configuring Pika Event Broker with Multiple Queues in YAML\nDESCRIPTION: YAML configuration for the Pika Event Broker in Rasa, specifying connection details and multiple queues to publish events to. This uses a fanout exchange named 'rasa-exchange'.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n  type: pika\n  url: localhost\n  username: username\n  password: password\n  queues:\n    - queue-1\n    - queue-2\n    - queue-3\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation with Version Check\nDESCRIPTION: Command to check if Docker is installed on your machine by displaying the Docker version information.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/building-in-docker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker -v\n# Docker version 18.09.2, build 6247962\n```\n\n----------------------------------------\n\nTITLE: Streaming Anonymized Events to Rasa X/Enterprise (YAML)\nDESCRIPTION: This snippet shows how to configure a Kafka topic to stream anonymized events to Rasa X/Enterprise. The `rasa_x_consumer: true` key-value pair is added to the topic configuration to enable streaming. This requires Rasa X/Enterprise versions 1.3.0 and above and only supports the Kafka event broker.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/pii-management.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nevent_broker:\n  type: kafka\n  partition_by_sender: True\n  url: localhost\n  anonymization_topics:\n    - name: topic_1\n      anonymization_rules: rules_1\n      rasa_x_consumer: true\n    - name: topic_2\n      anonymization_rules: rules_2\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Server Keystore with Keytool\nDESCRIPTION: Generates a server keystore using RSA key algorithm with a self-signed certificate, bound to IP 0.0.0.0 and valid for 365 days\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/ssl_all_conections/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -dname \"CN=localhost,OU=Atom,O=Rasa,L=Berlin,S=Germany,C=GE\" -keystore server.keystore.jks -alias localhost -validity 365 -genkey -keyalg RSA -storetype pkcs12 -ext SAN=IP:0.0.0.0 -storepass 123456 -keypass 123456\n```\n\n----------------------------------------\n\nTITLE: Legacy Pipeline Configuration with Buffer Sizes\nDESCRIPTION: Deprecated configuration showing how buffer sizes were previously specified for CountVectorsFeaturizer and RegexFeaturizer.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n  - name: \"WhitespaceTokenizer\"\n  - name: \"RegexFeaturizer\"\n    number_additional_patterns: 100\n  - name: \"CountVectorsFeaturizer\"\n    additional_vocabulary_size: {text: 100, response: 20}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Blob Package\nDESCRIPTION: Command to install the Azure Storage Blob Python package, which is required for Rasa to connect to and download models from Azure Storage.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip3 install azure-storage-blob\n```\n\n----------------------------------------\n\nTITLE: Running a Rasa NLU Server\nDESCRIPTION: Starts a server with the trained NLU model listening on port 5005.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/facebook-wit-ai-to-rasa.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrasa run nlu\n```\n\n----------------------------------------\n\nTITLE: Postgres Tracker Store Error Example\nDESCRIPTION: Example of SQL syntax error that occurs when using SQLTrackerStore with Postgres database and login_db parameter\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npsycopg2.errors.SyntaxError: syntax error at end of input\nrasa-production_1  | LINE 1: SELECT 1 FROM pg_catalog.pg_database WHERE datname = ?\n```\n\n----------------------------------------\n\nTITLE: Creating OpenShift Namespace\nDESCRIPTION: Command to create a new namespace in OpenShift for deploying Rasa Action Server.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\noc create namespace <your namespace>\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes CLI Version\nDESCRIPTION: Command to check the installed version of the Kubernetes command line interface.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-action-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl version --short --client\n```\n\n----------------------------------------\n\nTITLE: Starting New Session Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'session_started' event in Rasa, which starts a new conversation by resetting the tracker and running the default ActionSessionStart.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"session_started\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry Version in Shell\nDESCRIPTION: Command to update an existing Poetry installation to a specific version used in Rasa.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npoetry self update <version>\n```\n\n----------------------------------------\n\nTITLE: Signing Certificate Request with CA\nDESCRIPTION: Signs the certificate request using the previously created CA, generating a signed server certificate valid for 365 days\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/ssl_all_conections/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenssl x509 -req -CA ca-cert -CAkey ca-key -in cert-request -out signed-server-cert -days 365 -CAcreateserial -passin pass:123456\n```\n\n----------------------------------------\n\nTITLE: Installing Python on macOS via Homebrew\nDESCRIPTION: Commands to update Homebrew and install Python on macOS.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/environment-set-up.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install python\n```\n\n----------------------------------------\n\nTITLE: Accessing Metadata in Action_Session_Start\nDESCRIPTION: Shows how to access the metadata sent with a user message that triggered a session start using the special session_started_metadata slot.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/default-actions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Text, Dict, List\nfrom rasa_sdk import Action, Tracker\nfrom rasa_sdk.events import SessionStarted, ActionExecuted\n\n\nclass ActionSessionStart(Action):\n    def name(self) -> Text:\n        return \"action_session_start\"\n\n    async def run(\n      self, dispatcher, tracker: Tracker, domain: Dict[Text, Any]\n    ) -> List[Dict[Text, Any]]:\n        metadata = tracker.get_slot(\"session_started_metadata\")\n\n        # Do something with the metadata\n        print(metadata)\n\n        # the session should begin with a `session_started` event and an `action_listen`\n        # as a user message follows\n        return [SessionStarted(), ActionExecuted(\"action_listen\")]\n```\n\n----------------------------------------\n\nTITLE: Activating a Form Using a Rule in Rasa\nDESCRIPTION: Rule definition showing how to activate a form when a specific intent is detected. The rule includes steps to trigger the form and set it as the active loop.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/forms.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n- rule: Activate form\n  steps:\n  - intent: request_restaurant\n  - action: restaurant_form\n  - active_loop: restaurant_form\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Broker with Docker Compose\nDESCRIPTION: This snippet demonstrates how to launch a Kafka broker in detached mode using Docker Compose. It sets up the environment for testing Kafka with SASL PLAIN authentication without TLS encryption.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/no_tls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Using Custom Remote Storage Implementation\nDESCRIPTION: Command to run Rasa with a custom remote storage implementation. Requires specifying the module path to a class that implements the Persistor interface.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/model-storage.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrasa run --remote-storage <your module>.<class name>\n```\n\n----------------------------------------\n\nTITLE: Single Intent Rules for Dialogue Management\nDESCRIPTION: Rules for handling individual intents in the dialogue management system. Each rule defines what action the bot should take when a specific intent is detected.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tuning-your-model.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nrules:\n- rule: check account balance\n  steps:\n  - intent: check_balances\n  - action: action_check_balances\n- rule: transfer money\n  steps:\n  - intent: transfer_money\n  - action: action_transfer_money\n```\n\n----------------------------------------\n\nTITLE: Legacy Form Action Configuration in Domain\nDESCRIPTION: Configuration in domain.yml that enables using the deprecated Rasa SDK FormAction implementation during migration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\nactions:\n# Adding a custom action for a form will\n# instruct Rasa to use the\n# deprecated Rasa SDK implementation of forms.\n- my_form\n\nforms:\n my_form:\n```\n\n----------------------------------------\n\nTITLE: Starting a Rasa API Server\nDESCRIPTION: Launches a Rasa server that listens on port 5005 and exposes the NLU model through an API.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/microsoft-luis-to-rasa.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrasa run\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper using Docker Compose\nDESCRIPTION: This command starts the Zookeeper container in detached mode using Docker Compose. It's a prerequisite for setting up the Kafka broker, as Kafka relies on Zookeeper for managing cluster state and configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/no_tls/scram_sha_256/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"docker-compose up -d zookeeper\"\n```\n\n----------------------------------------\n\nTITLE: Resetting All Slots Event in JSON for Rasa\nDESCRIPTION: JSON representation of a 'reset_slots' event in Rasa, which resets all slots on the tracker to null. This event is never automatically tracked.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/events.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"reset_slots\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redshift Connection URL\nDESCRIPTION: Format for connecting to Amazon Redshift cluster with authentication credentials and connection details\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/getting-started-with-analytics.mdx#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nredshift:\\/\\/awsuser:4324312adfaGQ@analytics.cp1yucixmagz.us-east-1.redshift.amazonaws.com:5439\\/analytics\n```\n\n----------------------------------------\n\nTITLE: Importing Certificates into Keystore\nDESCRIPTION: Imports the root CA certificate and the signed server certificate into the server keystore, establishing a complete TLS certificate chain\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/ssl_all_conections/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -keystore server.keystore.jks -alias CARoot -import -file ca-cert -storepass 123456 -keypass 123456\nkeytool -noprompt -keystore server.keystore.jks -alias localhost -import -file signed-server-cert -storepass 123456 -keypass 123456 -ext \"SAN=IP:0.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Filename Format Examples\nDESCRIPTION: Examples of valid changelog fragment filenames following the <ISSUE>.<TYPE>.md pattern.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/changelog/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n123.feature.md, 456.bugfix.md\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Description to Markers Configuration in YAML\nDESCRIPTION: Example demonstrating how to add an optional 'description' key to the Markers Configuration format in Rasa 3.6.0+. This feature allows developers to add documentation and context about marker usage.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmarker_name_provided:\n  description: \"Name slot has been set\"\n  slot_was_set: name\n\nmarker_mood_expressed:\n  description: \"Unhappy or Great Mood was expressed\"\n  or:\n    - intent: mood_unhappy\n    - intent: mood_great\n```\n\n----------------------------------------\n\nTITLE: Policy Registration with Decorator in Rasa 3.0\nDESCRIPTION: Demonstrates how to register a custom policy in Rasa 3.0 using the DefaultV1Recipe.register decorator, specifying the component type and trainability.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom rasa.core.policies.policy import Policy\nfrom rasa.engine.recipes.default_recipe import DefaultV1Recipe\n\n@DefaultV1Recipe.register(\n    DefaultV1Recipe.ComponentType.POLICY_WITH_END_TO_END_SUPPORT,\n    is_trainable=True\n)\nclass MyPolicy(Policy):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Error Example for Numpy Version Conflict\nDESCRIPTION: Example error message that occurs when using an incompatible numpy version (>=1.2) with tensorflow\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nNotImplementedError: Cannot convert a symbolic Tensor (strided_slice_6:0) to a numpy array. This error may indicate that you're trying to pass a Tensor to a NumPy call, which is not supported\n```\n\n----------------------------------------\n\nTITLE: Configuration Variable for Action Server Request Compression\nDESCRIPTION: Environment variable to enable compression of HTTP requests to the action server, introduced in Rasa 3.4.4.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCOMPRESS_ACTION_SERVER_REQUEST=True\n```\n\n----------------------------------------\n\nTITLE: Inspecting Keystore Content\nDESCRIPTION: This command lists the content of the specified keystore, providing details about certificates and keys. It requires the keystore password and key password.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -list -v -keystore server.keystore.jks -storepass 123456 -keypass 123456\n```\n\n----------------------------------------\n\nTITLE: Updating Forked Repository from Upstream\nDESCRIPTION: Commands to add the original Rasa repository as upstream and pull latest changes from the main branch.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd rasa\ngit remote add upstream git://github.com/RasaHQ/rasa.git\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Preparing Data Directory for LUIS Import\nDESCRIPTION: Removes default training files from the Rasa data directory and moves the exported LUIS JSON file into it.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migrate-from/microsoft-luis-to-rasa.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -r data/*\nmv /path/to/file.json data/\n```\n\n----------------------------------------\n\nTITLE: Checking If Private Key Is Password Protected\nDESCRIPTION: This command checks whether the private key is protected by a password using OpenSSL. It requires the path to the private key and the password.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rsa -check -in ca-key -passin pass:123456\n```\n\n----------------------------------------\n\nTITLE: Updating Rasa Story Format\nDESCRIPTION: Example of updating a Rasa story to use the 'utter_' prefix for actions instead of 'respond_'.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_59\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n  - story: chitchat\n    steps:\n    - intent: chitchat\n    - action: respond_chitchat\n```\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nstories:\n  - story: chitchat\n    steps:\n    - intent: chitchat\n    - action: utter_chitchat\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Authority (CA) with OpenSSL\nDESCRIPTION: Generates a self-signed CA certificate with RSA 4096-bit key for Kafka broker authentication, valid for 365 days with predefined subject details\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/ssl_all_conections/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl req -x509 -newkey rsa:4096 -keyout ca-key -out ca-cert -days 365 -nodes -subj '/CN=localhost/OU=Atom/O=Rasa/L=Berlin/ST=Germany/C=GE' -passin pass:123456 -passout pass:123456\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle Sequence for SQLTrackerStore\nDESCRIPTION: SQL command to create a sequence in an Oracle database, which is required when using SQLTrackerStore with Oracle.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/tracker-stores.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SEQUENCE username.events_seq;\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Compiler for macOS Dependencies\nDESCRIPTION: Installs the Rust compiler on macOS systems to resolve dependency issues for Python 3.10.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/installing-rasa-open-source.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install rustup\nrustup-init\n```\n\n----------------------------------------\n\nTITLE: Legacy FallbackPolicy Configuration in YAML\nDESCRIPTION: Example configuration of the deprecated FallbackPolicy in config.yml, showing threshold settings and fallback action configuration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/migration-guide.mdx#2025-04-21_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n  - name: \"FallbackPolicy\"\n    nlu_threshold: 0.4\n    core_threshold: 0.3\n    fallback_action_name: \"action_default_fallback\"\n    ambiguity_threshold: 0.1\n```\n\n----------------------------------------\n\nTITLE: Importing variables in Markdown\nDESCRIPTION: This code snippet imports variables from a JSON file into the Markdown document. It's used to dynamically include version-specific information in the documentation.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport variables from './../variables.json';\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry in Markdown\nDESCRIPTION: Example showing how to write changelog entries with proper formatting and sentence structure. Demonstrates use of full sentences and proper tense.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/changelog/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSlots will be correctly interpolated if there are lists in custom response templates.\n\nPreviously this resulted in no interpolation.\n```\n\n----------------------------------------\n\nTITLE: Defining Forms Without Slot Mappings in Domain (YAML)\nDESCRIPTION: Example of how to define a form without slot mappings in the domain file. This requires providing custom slot mappings through a custom action.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nforms:\n  my_form:\n    # no mappings\n```\n\n----------------------------------------\n\nTITLE: Querying Intent Distribution Over Time in SQL\nDESCRIPTION: This SQL query tracks how user intents change over time by grouping intent counts by month. It helps identify trends in user behavior and detect shifts in how users interact with the assistant.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/monitoring/analytics/example-queries.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"public\".\"rasa_user_message\".\"intent\" AS \"intent\",\n  date_trunc('month', \"public\".\"rasa_user_message\".\"timestamp\") AS \"timestamp\",\n  count(*) AS \"count\" FROM \"public\".\"rasa_user_message\"\nGROUP BY 1, 2\nORDER BY 1 ASC, 2 ASC\n```\n\n----------------------------------------\n\nTITLE: Starting Rasa Shell Interface\nDESCRIPTION: Command to start a shell interface for chatting with the trained bot directly from the command line.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/examples/knowledgebasebot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrasa shell\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GCP using Service Account\nDESCRIPTION: Commands to authenticate with Google Cloud Platform using a service account key file and set up keyring for Pip authentication with GCP Artifact Registry.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/installation/rasa-pro/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud auth activate-service-account --key-file=service-account.json\npip install keyring\npip install keyrings.google-artifactregistry-auth\nkeyring --list-backends\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork\nDESCRIPTION: Git commands to stage, commit and push changes to the forked repository on GitHub.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m 'fixed a bug'\ngit push origin name-of-your-new-branch\n```\n\n----------------------------------------\n\nTITLE: Sample Overall Statistics CSV Output in Rasa\nDESCRIPTION: Example of the stats-overall.csv output showing aggregated statistics across all sessions for each marker, including session counts, percentages, and statistical measures of preceding user turns.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/markers.mdx#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nsender_id,session_idx,marker,statistic,value\nall,nan,-,total_number_of_sessions,3\nall,nan,marker_cheer_up_failed,number_of_sessions_where_marker_applied_at_least_once,1\nall,nan,marker_cheer_up_failed,percentage_of_sessions_where_marker_applied_at_least_once,33.333\nall,nan,marker_mood_expressed,number_of_sessions_where_marker_applied_at_least_once,3\nall,nan,marker_mood_expressed,percentage_of_sessions_where_marker_applied_at_least_once,100.0\nall,nan,marker_cheer_up_failed,count(number of preceding user turns),1\nall,nan,marker_cheer_up_failed,mean(number of preceding user turns),2.0\nall,nan,marker_cheer_up_failed,median(number of preceding user turns),2.0\nall,nan,marker_cheer_up_failed,min(number of preceding user turns),2\nall,nan,marker_cheer_up_failed,max(number of preceding user turns),2\nall,nan,marker_mood_expressed,count(number of preceding user turns),3\nall,nan,marker_mood_expressed,mean(number of preceding user turns),0.333\nall,nan,marker_mood_expressed,median(number of preceding user turns),0.0\nall,nan,marker_mood_expressed,min(number of preceding user turns),0\nall,nan,marker_mood_expressed,max(number of preceding user turns),1\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper with Docker Compose\nDESCRIPTION: This command starts the Zookeeper service in detached mode using Docker Compose. Zookeeper is a prerequisite for Kafka and manages cluster metadata.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_scram/with_tls/scram_sha_256/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ndocker-compose up -d zookeeper\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Signing Request\nDESCRIPTION: Generates a certificate signing request from the server keystore, specifying Subject Alternative Name (SAN) as IP 0.0.0.0\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/test_environments/message_and_event_brokers/kafka/sasl_plain/with_tls/ssl_all_conections/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -keystore server.keystore.jks -alias localhost -certreq -file cert-request -storepass 123456 -keypass 123456 -ext \"SAN=IP:0.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Compiler on macOS\nDESCRIPTION: Commands to install and set up Rust compiler on macOS for optional Rasa dependencies.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install rustup\nrustup-init\nrustc --version\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain for WhatsApp Location Data in Rasa\nDESCRIPTION: This snippet demonstrates how to configure the domain.yml file to handle location data from WhatsApp. It defines an intent called 'locationData' with entities and slots for Latitude and Longitude, which are automatically filled when a user shares their location.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/twilio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nintents:\n  - locationData\n\nslots:\n   Latitude:\n     type: text\n     mappings:\n     - type: from_entity\n       entity: Latitude\n\n   Longitude:\n     type: text\n     mappings:\n     - type: from_entity\n       entity: Longitude\n\nentities:\n  - Latitude\n  - Longitude\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Connection URL with SSL Parameters in Rasa\nDESCRIPTION: Example YAML configuration for the Pika Event Broker showing how to specify SSL parameters in the RabbitMQ connection URL. This replaces the deprecated environment variables RABBITMQ_SSL_CA_FILE and RABBITMQ_SSL_KEY_PASSWORD.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nevent_broker:\n type: pika\n url: \"amqps://user:password@host?cacertfile=path_to_ca_cert&password=private_key_password\"\n queues:\n - my_queue\n```\n\n----------------------------------------\n\nTITLE: Configuring Twilio Voice Channel in Rasa\nDESCRIPTION: Configuration settings for the Twilio Voice channel in credentials.yml file. Includes parameters for initial prompt, assistant voice type, reprompt behavior, speech timeout, speech model, and enhanced transcription options.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/twilio-voice.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntwilio_voice:\n  initial_prompt: \"hello\"\n  assistant_voice: \"woman\"\n  reprompt_fallback_phrase: \"I didn't get that could you repeat?\"\n  speech_timeout: \"5\"\n  speech_model: \"default\"\n  enhanced: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DIETClassifier with Linear Normalization in YAML\nDESCRIPTION: Example YAML configuration for DIETClassifier using linear normalization for model confidence and constrained similarities. This configuration produces confidences in the range [0,1] and helps with tuning fallback thresholds.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n- name: DIETClassifier\n  model_confidence: linear_norm\n  constrain_similarities: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Credentials in Rasa\nDESCRIPTION: Example configuration for Facebook Messenger credentials in the credentials.yml file. Includes verify token, secret key, and page access token required for Facebook integration.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/facebook-messenger.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfacebook:\n  verify: \"rasa-bot\"\n  secret: \"3e34709d01ea89032asdebfe5a74518\"\n  page-access-token: \"EAAbHPa7H9rEBAAuFk4Q3gPKbDedQnx4djJJ1JmQ7CAqO4iJKrQcNT0wtD\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hangouts Credentials in YAML for Rasa\nDESCRIPTION: This snippet shows how to add Hangouts credentials to the credentials.yml file in Rasa. It includes two variations: one without any specific credentials, and another with a project_id for OAuth2 authentication.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/hangouts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhangouts:\n  # no credentials required here\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhangouts:\n  project_id: \"12345678901\"\n```\n\n----------------------------------------\n\nTITLE: Transformer Model Identifiers List\nDESCRIPTION: A comprehensive list of pre-trained transformer model identifiers that can be used for various NLP tasks. Includes multilingual models (Chinese), general-purpose models (BERT, GPT), and specialized models (Sentence Transformers).\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/data/test/hf_transformers_models.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbert-base-chinese\nopenai-gpt\ngpt2\nxlnet-base-cased\nbert-base-uncased\nroberta-base\ndistilbert-base-uncased\ncamembert-base\nsentence-transformers/all-MiniLM-L6-v2\n```\n\n----------------------------------------\n\nTITLE: Handling Call Start Events with Rasa Rules\nDESCRIPTION: A rule that triggers a greeting message when a new call is initiated to the bot. Uses the vaig_event_start intent sent by VoiceAI Connect.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/audioodes-voiceai-connect.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- rule: New call\n  steps:\n      - intent: vaig_event_start\n      - action: utter_greet\n```\n\n----------------------------------------\n\nTITLE: Defining NLU Training Data for Knowledge Base Queries\nDESCRIPTION: This example shows how to structure NLU training data for knowledge base queries, including entity annotation for object types and attributes.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/action-server/knowledge-base-actions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml-rasa\nCODE:\n```\nintents:\n- intent: query_knowledge_base\n  examples: |\n    - What [Italian](cuisine) [restaurant](object_type) options in [Berlin](city) do I have?.\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Configuration for Rasa\nDESCRIPTION: YAML configuration for a basic Docker Compose setup with a single Rasa service exposing port 5005 and mounting the local directory.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/deploying-in-docker-compose.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.0'\nservices:\n  rasa:\n    image: rasa/rasa:${variables.release}-full\n    ports:\n      - 5005:5005\n    volumes:\n      - ./:/app\n    command:\n      - run\n```\n\n----------------------------------------\n\nTITLE: Training a Rasa Model in Docker\nDESCRIPTION: Command to train a Rasa model in Docker using custom domain, data, and output directories. This is needed after editing training data or configuration files.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/building-in-docker.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $(pwd):/app rasa/rasa:${variables.release}-full train --domain domain.yml --data data --out models\n```\n\n----------------------------------------\n\nTITLE: Initializing a Rasa Project in Docker\nDESCRIPTION: Command to initialize a new Rasa project using Docker. It mounts the current directory to the container and runs the initialization with no prompts.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/building-in-docker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $(pwd):/app rasa/rasa:${variables.release}-full init --no-prompt\n```\n\n----------------------------------------\n\nTITLE: Configuring Threaded Responses in Slack Connector\nDESCRIPTION: Shows how to enable threaded message responses from Rasa through the Slack connector using the credentials.yml file.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/CHANGELOG.mdx#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nslack:\n  slack_token:\n  slack_channel:\n  use_threads: True\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Channel in Rasa\nDESCRIPTION: SocketIO channel configuration in credentials.yml for real-time communication with custom event names and session persistence.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/connectors/your-own-website.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsocketio:\n  user_message_evt: user_uttered\n  bot_message_evt: bot_uttered\n  session_persistence: true/false\n```\n\n----------------------------------------\n\nTITLE: Displaying Introduction Image with JSX\nDESCRIPTION: Uses JSX to display a centered introduction image with full width using the useBaseUrl function to resolve the image path.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div align=\"center\">\n    <img alt=\"image\" src={useBaseUrl(\"/img/introduction.png\")} width=\"100%\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Shell with Rasa Assistant in Docker\nDESCRIPTION: Command to start an interactive shell session with the Rasa assistant in Docker. The -it flags allow for interactive input.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/docker/building-in-docker.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -v $(pwd):/app rasa/rasa:${variables.release}-full shell\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud Registry for Rasa Pro Services\nDESCRIPTION: Shell command to configure Docker authentication with Google Cloud Registry to access Rasa Pro Services container images.\nSOURCE: https://github.com/rasahq/rasa/blob/3.6.x/docs/docs/deploy/deploy-rasa-pro-services.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud auth configure-docker europe-west3-docker.pkg.dev\n```"
  }
]