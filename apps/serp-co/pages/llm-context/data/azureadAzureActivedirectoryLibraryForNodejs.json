[
  {
    "owner": "azuread",
    "repo": "azure-activedirectory-library-for-nodejs",
    "content": "TITLE: Implementing Authorization Code Flow in ADAL for Node.js\nDESCRIPTION: This code snippet demonstrates how to implement the authorization code flow using ADAL for Node.js in an Express.js web application. It includes creating an authorization URL and handling the token acquisition.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-nodejs/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar AuthenticationContext = require('adal-node').AuthenticationContext;\n\nvar clientId = 'yourClientIdHere';\nvar clientSecret = 'yourAADIssuedClientSecretHere'\nvar authorityHostUrl = 'https://login.windows.net';\nvar tenant = 'myTenant';\nvar authorityUrl = authorityHostUrl + '/' + tenant;\nvar redirectUri = 'http://localhost:3000/getAToken';\nvar resource = '00000002-0000-0000-c000-000000000000';\nvar templateAuthzUrl = 'https://login.windows.net/' + \n                        tenant + \n                        '/oauth2/authorize?response_type=code&client_id=' +\n                        clientId + \n                        '&redirect_uri=' + \n                        redirectUri + \n                        '&state=<state>&resource=' + \n                        resource;\n\nfunction createAuthorizationUrl(state) {\n  return templateAuthzUrl.replace('<state>', state);\n}\n\n// Clients get redirected here in order to create an OAuth authorize url and redirect them to AAD.\n// There they will authenticate and give their consent to allow this app access to\n// some resource they own.\napp.get('/auth', function(req, res) {\n  crypto.randomBytes(48, function(ex, buf) {\n    var token = buf.toString('base64').replace(/\\//g,'_').replace(/\\+/g,'-');\n\n    res.cookie('authstate', token);\n    var authorizationUrl = createAuthorizationUrl(token);\n\n    res.redirect(authorizationUrl);\n  });\n});\n\n// After consent is granted AAD redirects here.  The ADAL library is invoked via the\n// AuthenticationContext and retrieves an access token that can be used to access the\n// user owned resource.\napp.get('/getAToken', function(req, res) {\n  if (req.cookies.authstate !== req.query.state) {\n    res.send('error: state does not match');\n  }\n\n  var authenticationContext = new AuthenticationContext(authorityUrl);\n\n  authenticationContext.acquireTokenWithAuthorizationCode(\n    req.query.code,\n    redirectUri,\n    resource,\n    clientId, \n    clientSecret,\n    function(err, response) {\n      var message = '';\n      if (err) {\n        message = 'error: ' + err.message + '\\n';\n      }\n      message += 'response: ' + JSON.stringify(response);\n      res.send(message);\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Credentials Flow in ADAL for Node.js\nDESCRIPTION: This snippet shows how to implement the client credentials flow for server-to-server authentication using ADAL for Node.js. It demonstrates acquiring a token with client credentials.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-nodejs/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar AuthenticationContext = require('adal-node').AuthenticationContext;\n\nvar authorityHostUrl = 'https://login.windows.net';\nvar tenant = 'myTenant.onmicrosoft.com'; // AAD Tenant name.\nvar authorityUrl = authorityHostUrl + '/' + tenant;\nvar applicationId = 'yourApplicationIdHere'; // Application Id of app registered under AAD.\nvar clientSecret = 'yourAADIssuedClientSecretHere'; // Secret generated for app. Read this environment variable.\nvar resource = '00000002-0000-0000-c000-000000000000'; // URI that identifies the resource for which the token is valid.\n\nvar context = new AuthenticationContext(authorityUrl);\n\ncontext.acquireTokenWithClientCredentials(resource, applicationId, clientSecret, function(err, tokenResponse) {\n  if (err) {\n    console.log('well that didn\\'t work: ' + err.stack);\n  } else {\n    console.log(tokenResponse);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Options in ADAL for Node.js\nDESCRIPTION: This snippet demonstrates how to configure logging options in ADAL for Node.js, including setting the logging level and enabling/disabling PII logging.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-nodejs/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar logging = require('adal-node').Logging;\n\n//PII or OII logging disabled. Default Logger does not capture any PII or OII.\nlogging.setLoggingOptions({\n  log: function(level, message, error) {\n    // provide your own implementation of the log function\n  },\n  level: logging.LOGGING_LEVEL.VERBOSE, // provide the logging level\n  loggingWithPII: false  // Determine if you want to log personal identification information. The default value is false.\n});\n\n//PII or OII logging enabled.\nlogging.setLoggingOptions({\n  log: function(level, message, error) {\n    // provide your own implementation of the log function\n  },\n  level: logging.LOGGING_LEVEL.VERBOSE,\n  loggingWithPII: true\n});\n```\n\n----------------------------------------\n\nTITLE: SAML 1.1 Assertion Structure for Azure AD Authentication\nDESCRIPTION: A complete SAML 1.1 assertion XML document containing user authentication information, identity attributes, and digital signature. This example shows the structure used for federated authentication with Azure Active Directory.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-nodejs/blob/dev/test/wstrust/common.base64.encoded.assertion.txt#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<saml:Assertion MajorVersion=\"1\" MinorVersion=\"1\" AssertionID=\"_bf137f90-7dd7-4668-8a39-8bf55eb52017\" Issuer=\"http://fs.naturalcauses.com/adfs/services/trust\" IssueInstant=\"2014-01-27T08:15:45.003Z\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\"><saml:Conditions NotBefore=\"2014-01-27T08:15:45.003Z\" NotOnOrAfter=\"2014-01-27T09:15:45.003Z\"><saml:AudienceRestrictionCondition><saml:Audience>urn:federation:MicrosoftOnline</saml:Audience></saml:AudienceRestrictionCondition></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">43YRzTrh+Ue8eTecnqLAxQ==</saml:NameIdentifier><saml:SubjectConfirmation><saml:ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:bearer</saml:ConfirmationMethod></saml:SubjectConfirmation></saml:Subject><saml:Attribute AttributeName=\"UPN\" AttributeNamespace=\"http://schemas.xmlsoap.org/claims\"><saml:AttributeValue>frizzo@naturalcauses.com</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"ImmutableID\" AttributeNamespace=\"http://schemas.microsoft.com/LiveID/Federation/2008/05\"><saml:AttributeValue>43YRzTrh+Ue8eTecnqLAxQ==</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><saml:AuthenticationStatement AuthenticationMethod=\"urn:oasis:names:tc:SAML:1.0:am:password\" AuthenticationInstant=\"2014-01-27T08:15:44.987Z\"><saml:Subject><saml:NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">43YRzTrh+Ue8eTecnqLAxQ==</saml:NameIdentifier><saml:SubjectConfirmation><saml:ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:bearer</saml:ConfirmationMethod></saml:SubjectConfirmation></saml:Subject></saml:AuthenticationStatement><ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/><ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/><ds:Reference URI=\"#_bf137f90-7dd7-4668-8a39-8bf55eb52017\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/><ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/></ds:Transforms><ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/><ds:DigestValue>B5eEIkThgS5445ZBZaWWbiq3Umw=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>bM/AEL8Isqk7kGxDPvciC7Rlmr9ffRWGhknpRc4LUC0BjQiYoo11NY7xh0S5A+xKIoXMgeaaP6qjb0n27TNT3g+hOcA+r9x6H5hANs4rtl/uOEM0pKvcgBY0bhz4HDPqaiRpAVItgiSGntDIeg42cOhSYJ9On6oGQcVA5hy2Gmtxxk7d7c4Sq2nym3t3D3DLMOfwvlviBZsdBglUg4iZrPu8qgTRrUnfGi5M1VsTuSTwKVx7NBNLfjBxAipmrM0PyOIk43CHC3LJjTCzaj7vRSqBbXF3LIm2Dc0HULbUbgwOKro78r7bdCF3sLfbU2wgTZyvIkX7B7+oovswF6Goyw==</ds:SignatureValue><KeyInfo xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><X509Data><X509Certificate>MIIC5DCCAcygAwIBAgIQGVLzdnvkAaZHZufUi7zvqTANBgkqhkiG9w0BAQsFADAuMSwwKgYDVQQDEyNBREZTIFNpZ25pbmcgLSBmcy5uYXR1cmFsY2F1c2VzLmNvbTAeFw0xMzExMTAwMjExNDlaFw0xNDExMTAwMjExNDlaMC4xLDAqBgNVBAMTI0FERlMgU2lnbmluZyAtIGZzLm5hdHVyYWxjYXVzZXMuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvsCJckmZ4jZEJDBHHmdH0ClgO4Cp5bvgAeNeJLQkHlrnHD0O5/bkyMo4aNg/FoJJcEt0Xzzd816lnDYzM2UTaWAhkHNbl4sVW4dtLXeKHeGyk43UbRYYhIpDII8NicyRdhxNnjXbZEMcuQ8nXrbkj3DMnlBEM/5hpS733/yVYrUk7BcmxbX1lDRUOLbL5Kh35G2JkX8iCxzUrHVj15DneGVQGyFOmf2DpC9CNep123XYdXOftXt4Nh1+/ed11zjeZXeQ8hn36/3NIf+n4mIkBeDGXmhBdh8MAZWCgUx3G+SdifC3bVU3BrVWePocTiH6hd1ljL2cVh7hhEIOtGHD4KwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCDIthnivsRk/NjHklBXoTIXPXWeSa58ZZftor0o0qlqZX1hAluXxJeLKWtuiJKkZo/eTjoPidO3L/X0psZR+cmMsbEA9ttAO8AkqeuYxjlw0YkfqrX6yRNlkGWr4SU07ZgfJhoTsCP9oOBG/x2xDkAGfAEdyByEvGkat16Hf2ELA3foAqUW8MGJM16IDmu6K9KrGAOR3da0PwQ4/sETHkh1Ag5jkY69lJ7r3MgzdMMZDc8tPQazVZbe0xc1u8WG52c2UGoay9zNqMQJOGnUZNB9fVHazA2pvMhBbyBSqo1jS31BXLlod7v5NEM8F5AGikUwYHV+EZ/O2t491gcFjc9</X509Certificate></X509Data></KeyInfo></ds:Signature></saml:Assertion>\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Range with CocoaPods for iOS Applications\nDESCRIPTION: This snippet demonstrates how to use CocoaPods to specify a dependency on ADALiOS with a version requirement that accepts all updates greater than or equal to 1.1 but less than 1.2, ensuring compatibility while receiving patch updates.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-nodejs/blob/dev/RELEASES.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'ADALiOS', '~> 1.1'\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Range with NuGet for .NET Applications\nDESCRIPTION: This XML snippet shows how to define a NuGet package dependency that includes all versions from 1.1.0 up to but not including 1.2.0, allowing automatic updates for bug fixes while maintaining API stability.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-nodejs/blob/dev/RELEASES.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency\nid=\"ADALfordotNet\"\nversion=\"[1.1,1.2)\"\n/>\n```"
  }
]