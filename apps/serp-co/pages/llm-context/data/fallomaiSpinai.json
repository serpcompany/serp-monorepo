[
  {
    "owner": "fallomai",
    "repo": "spinai",
    "content": "TITLE: Creating an Agent in SpinAI with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a calculator agent using the createAgent function, specifying instructions, available actions, and the LLM model to use for decision making.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/get-started/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst calculatorAgent = createAgent({\n  instructions: `You are a calculator agent that helps users perform mathematical calculations.`,\n  actions: [sum, minus],\n  model: openai(\"gpt-4o\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating MCP Actions with SpinAI Agent\nDESCRIPTION: This TypeScript code snippet illustrates how to create actions from MCP configuration and integrate them into a SpinAI agent. It sets up MCP actions, creates an agent with specific instructions, and incorporates the MCP actions into the agent's toolkit.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/mcp/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport mcpConfig from \"../mcp-config.ts\";\n\ndotenv.config();\n\nasync function main() {\n  // Create actions from MCP configuration\n  console.log(\"Setting up MCP actions...\");\n  const mcpActions = await createActionsFromMcpConfig({\n    config: mcpConfig,\n    envMapping: {\n      githubPersonalAccessToken: process.env.GITHUB_TOKEN,\n    },\n  });\n\n  const agent = createAgent({\n    instructions: `You are a GitHub assistant that can help with repository management.\n    Use the available GitHub actions to help users with their requests.`,\n    actions: [...mcpActions], // you can add other MCP actions or regular SpinAI actions here as well!\n    model: openai(\"gpt-4o\"),\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating SpinAI Agent with OpenAI Model\nDESCRIPTION: Demonstrates how to create a basic calculator agent using the createAgent function with OpenAI's GPT-4 model. The agent is configured with basic instructions and calculator actions.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/agents.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent } from \"spinai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nconst calculatorAgent = createAgent({\n  instructions: `You are a calculator agent.`,\n  actions: [sum, minus],\n  model: openai(\"gpt-4o\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAI-based Agent with SpinAI in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an agent using SpinAI with an OpenAI model. It imports necessary functions, sets up the agent with specific instructions and actions, and shows how to use the agent to process user input.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/llms/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent } from \"spinai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nconst agent = createAgent({\n  instructions: \"Help users with support tickets\",\n  actions: [getCustomerInfo, createTicket],\n  model: openai(\"gpt-4o\"),\n});\n\nconst { response } = await agent({\n  input: \"I want a refund\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator Agent with SpinAI\nDESCRIPTION: TypeScript code demonstrating the setup and usage of the calculator agent. It imports necessary modules, defines the agent with instructions and actions, and provides an example of processing a mathematical expression.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/examples/calculator-agent/overview.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent } from \"spinai\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { sum } from \"./actions/sum\";\nimport { minus } from \"./actions/minus\";\n\nconst calculatorAgent = createAgent({\n  instructions: `You are a calculator agent that helps users perform mathematical calculations.`,\n  actions: [sum, minus],\n  model: openai(\"gpt-4o\"),\n});\n\nasync function main() {\n  const { response } = await calculatorAgent({\n    input: \"What is 5 plus 3 - 1?\",\n  });\n\n  console.log(response);\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Action in TypeScript for SpinAI\nDESCRIPTION: Demonstrates how to create a basic action using the createAction function that adds two numbers together. The action defines an ID, description, parameter schema with type validation, and the implementation logic in the run function.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAction } from \"spinai\";\n\nexport const sum = createAction({\n  id: \"sum\",\n  description: \"Adds two numbers together.\",\n  parameters: {\n    type: \"object\",\n    properties: {\n      a: { type: \"number\", description: \"First number to add\" },\n      b: { type: \"number\", description: \"Second number to add\" },\n    },\n    required: [\"a\", \"b\"],\n  },\n  async run({ parameters }) {\n    const { a, b } = parameters || {};\n    const result = a + b;\n    return result;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Action in SpinAI with TypeScript\nDESCRIPTION: This snippet shows how to define a 'sum' action using the createAction function, specifying its ID, description, parameter schema, and implementation logic that adds two numbers together.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/get-started/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sum = createAction({\n  id: \"sum\",\n  description: \"Adds two numbers together.\",\n  parameters: {\n    type: \"object\",\n    properties: {\n      a: { type: \"number\", description: \"First number to add\" },\n      b: { type: \"number\", description: \"Second number to add\" },\n    },\n    required: [\"a\", \"b\"],\n  },\n  async run({ parameters }): Promise<number> {\n    const { a, b } = parameters || {};\n    return a + b;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Parameter Schema Definition\nDESCRIPTION: Example of defining a parameter schema for a SpinAI action, showing how to specify required properties and their types.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/state-and-parameters.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nparameters: {\n  type: \"object\",\n  properties: {\n    a: { type: \"number\", description: \"First number\" },\n    b: { type: \"number\", description: \"Second number\" },\n  },\n  required: [\"a\", \"b\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SpinAI Agent with Observability in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a SpinAI agent with observability enabled. It includes setting up the agent with instructions, actions, model, a unique agent ID, and the SpinAI API key for tracking.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/observability.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = createAgent({\n  instructions: \"You are a customer support agent.\",\n  actions: [getCustomerInfo, getSubscriptionStatus, createTicket],\n  model,\n  // Enable observability with these two fields:\n  agentId: \"customer-support-agent\", // Choose any unique identifier\n  spinApiKey: process.env.SPINAI_API_KEY,\n});\n```\n\n----------------------------------------\n\nTITLE: Agent Call with Custom Response Format\nDESCRIPTION: Demonstrates how to call a SpinAI agent with a custom response format using Zod schema validation to ensure type safety and structured output.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/agents.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from \"zod\";\n\nconst responseSchema = z.object({\n  finalNumber: z.number(),\n});\n\nconst { response } = await calculatorAgent({\n  input: \"What is 5 plus 3 - 1?\",\n  responseFormat: responseSchema,\n});\n\nconsole.log(response.finalNumber);\n```\n\n----------------------------------------\n\nTITLE: Task Loop Flow Diagram in Mermaid\nDESCRIPTION: A flow diagram illustrating the complete task loop process from agent initialization to final response generation. Shows the main steps including context initialization, planning, action execution, and response generation.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/task-loop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Agent Called] --> B[Initialize Context & State]\n    B --> C[Generate Planning Decision]\n    C --> D{Actions Needed?}\n    D -->|Yes| E[Execute Actions in Parallel]\n    E --> F[Capture Results]\n    F --> C\n    D -->|No| G[Generate Final Response]\n    G --> H[Return Response with State]\n```\n\n----------------------------------------\n\nTITLE: Accessing State in SpinAI Action\nDESCRIPTION: Demonstrates how to access state values within a SpinAI action using context.state object to retrieve user information based on a stored userId.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/state-and-parameters.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAction } from \"spinai\";\n\nexport const getUserInfo = createAction({\n  id: \"getUserInfo\",\n  description: \"Gets user information.\",\n  async run({ context }) {\n    const { state } = context || {};\n    const userId = state?.userId;\n    const user = await getUserById(userId);\n    return user;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting context.state in SpinAI Actions\nDESCRIPTION: Demonstrates how to set values in the state object after an action completes. This allows storing data that can be accessed by other actions or after the agent call is complete, without being stored in the agent's message history.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/actions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAction } from \"spinai\";\n\nexport const getUserInfo = createAction({\n  id: \"getUserInfo\",\n  description: \"Gets user information.\",\n  async run({ context }) {\n    const { state } = context || {};\n    const userId = state?.userId;\n    const user = await getUserById(userId);\n    context.state.userEmail = user.email;\n    return user;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting State in SpinAI Action\nDESCRIPTION: Shows how to set state values within a SpinAI action by storing a user's email in the context.state object after retrieving user information.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/state-and-parameters.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAction } from \"spinai\";\n\nexport const getUserInfo = createAction({\n  id: \"getUserInfo\",\n  description: \"Gets user information.\",\n  async run({ context }) {\n    const { state } = context || {};\n    const userId = state?.userId;\n    const user = await getUserById(userId);\n    context.state.userEmail = user.email;\n    return user;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing State After Agent Execution\nDESCRIPTION: Demonstrates how to access state values after an agent has completed its execution, showing state persistence beyond the action scope.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/state-and-parameters.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { response, state } = await agent({\n  input: \"Create a ticket for my broken laptop\",\n  state: {},\n});\n\nconsole.log({ state }); // whatever you added to state in your actions\n// will be accessible here after the agent runs\n```\n\n----------------------------------------\n\nTITLE: Using context.state in SpinAI Actions\nDESCRIPTION: Shows how to access values from the state object within an action's run function. This is useful for static values like user IDs that shouldn't be determined by the LLM and were previously stored in state.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/actions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAction } from \"spinai\";\n\nexport const getUserInfo = createAction({\n  id: \"getUserInfo\",\n  description: \"Gets user information.\",\n  async run({ context }) {\n    const { state } = context || {};\n    const userId = state?.userId;\n    const user = await getUserById(userId);\n    return user;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic GitHub Agent\nDESCRIPTION: Main agent implementation with MCP actions configuration and basic GitHub repository creation functionality.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/mcp/example.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, createActionsFromMcpConfig } from \"spinai\";\nimport { openai } from \"@ai-sdk/openai\";\nimport * as dotenv from \"dotenv\";\n// @ts-ignore\nimport mcpConfig from \"../mcp-config.ts\";\n\ndotenv.config();\n\nasync function main() {\n  // Create actions from MCP configuration\n  console.log(\"Setting up MCP actions...\");\n  const mcpActions = await createActionsFromMcpConfig({\n    config: mcpConfig,\n    // if you didn't include your GITHUB_TOKEN in your mcp-config.ts\n    envMapping: {\n      githubPersonalAccessToken: process.env.GITHUB_TOKEN,\n    },\n    // If there are any actions you would like to exclude. A full list of actions can be found at https://smithery.ai/server/@smithery-ai/github\n    excludedActions: [\"smithery_ai_github_get_issue\"],\n  });\n\n  const agent = createAgent({\n    instructions: `You are a GitHub assistant that can help with repository management.\n    Use the available GitHub actions to help users with their requests.`,\n    actions: [...mcpActions],\n    model: openai(\"gpt-4o\"),\n  });\n\n  // Run the agent with a test command\n  const { response } = await agent({\n    input: \"Create a github repo called 'GlubGlub' please\",\n  });\n\n  console.log(\"Response:\", response);\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Basic Agent Function Call\nDESCRIPTION: Shows how to call a SpinAI agent with a simple input string to perform calculations.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/core-concepts/agents.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { response } = await calculatorAgent({\n  input: \"What is 5 plus 3 - 1?\",\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Agent Usage Example\nDESCRIPTION: Example of how to use the documentation updater agent directly in code without the server.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDocUpdateAgent } from \"mintlify-doc-updater\";\\n\\nconst agent = createDocUpdateAgent({\\n  config: {\\n    docsPath: \"docs\"\\n  }\\n});\\n\\n// Use the agent directly\\nconst result = await agent({\\n  input: \"Review pull request #123\",\\n  externalCustomerId: \"user123\",\\n  state: {\\n    owner: \"org\",\\n    repo: \"repo\",\\n    pull_number: 123,\\n    config: {} // Will be populated from your config\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: DocConfig Interface Definition\nDESCRIPTION: TypeScript interface defining the configuration options for the documentation updater.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DocConfig {\\n  // Essential settings\\n  docsPath: string;           // Path to docs (e.g., \"docs\" or \"apps/docs\")\\n  isMonorepo?: boolean;       // Is this a monorepo setup?\\n  \\n  // Repository settings (optional)\\n  docsRepoOwner?: string;     // GitHub owner of docs repo if different\\n  docsRepoName?: string;      // Name of docs repo if different\\n  docsBranch?: string;        // Branch to update (defaults to 'main')\\n  \\n  // Documentation settings\\n  fileTypes?: string[];       // Doc file types (defaults to ['.mdx', '.md'])\\n  ignorePaths?: string[];     // Paths to ignore\\n  \\n  // PR settings\\n  createNewPr?: boolean;      // Create new PR vs update original\\n  labels?: string[];          // Labels to add to PR\\n  \\n  // Optional customization\\n  styleGuide?: string;        // Custom documentation style guide\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoint with Hono\nDESCRIPTION: Example of wrapping the GitHub agent in a web server using Hono framework for API access.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/mcp/example.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { createAgent, createActionsFromMcpConfig } from \"spinai\";\nimport { openai } from \"@ai-sdk/openai\";\nimport mcpConfig from \"./mcp-config.ts\";\n// your dotenv config and other stuff here\n\nconst app = new Hono();\nconst mcpActions = await createActionsFromMcpConfig(mcpConfig);\n\nconst agent = createAgent({\n  instructions: `You are a GitHub assistant that can help with repository management.\n  Use the available GitHub actions to help users with their requests.`,\n  actions: [...mcpActions],\n  model: openai(\"gpt-4o\"),\n});\n\napp.post(\"/github-assistant\", async (c) => {\n  const { input } = await c.req.tson();\n  const { response } = await agent({ input });\n  return c.tson({ response });\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Chat Loop\nDESCRIPTION: Implementation of an interactive CLI chat interface with conversation history management.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/mcp/example.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, createActionsFromMcpConfig } from \"spinai\";\nimport * as dotenv from \"dotenv\";\nimport { openai } from \"@ai-sdk/openai\";\nimport * as readline from \"readline\";\n// @ts-ignore\nimport mcpConfig from \"../mcp-config.ts\";\n\ndotenv.config();\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nasync function chat() {\n  console.log(\"Setting up...\");\n  const mcpActions = await createActionsFromMcpConfig(mcpConfig);\n  console.log(\"\\n🤖 Ready! Type your message (or 'exit' to quit)\\n\");\n\n  const agent = createAgent({\n    instructions: `You are a GitHub assistant that can help with repository management.\n    Use the available GitHub actions to help users with their requests.`,\n    actions: [...mcpActions],\n    model: openai(\"gpt-4o-mini\"),\n  });\n\n  let messageHistory: any[] = [];\n\n  function getInput() {\n    rl.question(\"> \", async (input) => {\n      if (input.toLowerCase() === \"exit\") {\n        rl.close();\n        return;\n      }\n\n      try {\n        const { messages, response } = await agent({\n          input,\n          messages: messageHistory,\n        });\n\n        // Update message history\n        messageHistory = messages;\n\n        // Show any tool calls\n        const toolCalls = messages.filter((m) => m.role === \"tool\");\n        if (toolCalls.length > 0) {\n          console.log(\"\\nActions:\");\n          toolCalls.forEach((call) => {\n            console.log(`• ${call.content[0].toolName}`);\n          });\n          console.log();\n        }\n\n        console.log(`Assistant: ${response}\\n`);\n      } catch (error) {\n        console.error(\"\\nError:\", error, \"\\n\");\n      }\n\n      getInput();\n    });\n  }\n\n  getInput();\n}\n\nchat().catch(console.error);\n\n// Handle clean exit\nrl.on(\"close\", () => {\n  console.log(\"\\nGoodbye!\");\n  process.exit(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing MCP from Smithery using npx\nDESCRIPTION: This snippet demonstrates how to install an MCP locally using the spinai-mcp helper function. It shows two examples: one for basic installation and another including environment variables.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/mcp/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx spinai-mcp install @smithery-ai/github --provider smithery\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx spinai-mcp install @smithery-ai/github --provider smithery --config \"{\\\"githubPersonalAccessToken\\\":\\\"move_my_token_to_a_dot_env_after\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Actions in TypeScript\nDESCRIPTION: Example configuration for MCP actions in the mcp-config.ts file. This defines how the agent will interact with external systems through command execution.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/basic-mcp-agent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  my_mcp_name: {\n    command: \"npx\",\n    args: [\"-y\", \"my\", \"example\", \"args\"],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing SpinAI Project Structure\nDESCRIPTION: Displays the directory structure for the calculator agent project, showing the locations of action files and the main agent setup file.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/examples/calculator-agent/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n├── actions/\n│   ├── sum.ts     # Addition operation\n│   └── minus.ts   # Subtraction operation\n└── index.ts       # Main agent setup\n```\n\n----------------------------------------\n\nTITLE: Creating a New SpinAI Project with CLI\nDESCRIPTION: Command to initialize a new SpinAI project using the framework's CLI tool. This creates the project structure and necessary configuration files for developing AI agents with TypeScript.\nSOURCE: https://github.com/fallomai/spinai/blob/main/packages/spinai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-spinai\n```\n\n----------------------------------------\n\nTITLE: Creating a New SpinAI Project with CLI\nDESCRIPTION: Command to create a new SpinAI project using the create-spinai CLI tool. This initializes a new project with the SpinAI framework structure.\nSOURCE: https://github.com/fallomai/spinai/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-spinai\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for SpinAI\nDESCRIPTION: Example of setting up the OpenAI API key in the .env file, which is required for the agent to function.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/examples/calculator-agent/overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nOPENAI_API_KEY=your-key-here\n```\n\n----------------------------------------\n\nTITLE: Creating a new SpinAI project using CLI\nDESCRIPTION: Command to initialize a new SpinAI project using the npm create-spinai package. This is the first step to setting up your AI agent.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/get-started/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-spinai\n```\n\n----------------------------------------\n\nTITLE: Configuring environment variables for SpinAI\nDESCRIPTION: Example of a basic .env file configuration with an OpenAI API key. This is required for your agent to communicate with the LLM provider.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/get-started/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for SpinAI\nDESCRIPTION: Example of a basic .env file configuration for a SpinAI project. This shows how to set up the OpenAI API key, which is the minimum requirement for most templates.\nSOURCE: https://github.com/fallomai/spinai/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running a SpinAI Agent in Development Mode\nDESCRIPTION: Command to start a SpinAI agent in development mode. This runs the agent using npm scripts defined in the project template.\nSOURCE: https://github.com/fallomai/spinai/blob/main/packages/spinai/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for SpinAI\nDESCRIPTION: Example of setting up the required environment variables in a .env file for a SpinAI project. This shows configuration for OpenAI as the default LLM provider, though other providers can be used.\nSOURCE: https://github.com/fallomai/spinai/blob/main/packages/spinai/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running a SpinAI Agent\nDESCRIPTION: Command to start a SpinAI agent in development mode. This runs the agent using npm's script execution.\nSOURCE: https://github.com/fallomai/spinai/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub MCP Agent via Template\nDESCRIPTION: Command to create a new GitHub MCP Agent project using the SpinAI template. This is the recommended approach for setting up the agent.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-mcp-agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-spinai\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables Configuration\nDESCRIPTION: Sample environment variables configuration for the GitHub MCP Agent. Requires an OpenAI API key and a GitHub personal access token with appropriate permissions.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-mcp-agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=\"your_openai_api_key\"\nGITHUB_TOKEN=\"your_github_token\"\n```\n\n----------------------------------------\n\nTITLE: Creating a SpinAI GitHub Code Reviewer Project using NPX\nDESCRIPTION: Command to create a new SpinAI project using the github-code-reviewer template.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-code-review-agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-spinai\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Environment File\nDESCRIPTION: Example of creating an environment file with the OpenAI API key which is required for the SpinAI MCP agent to function.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/basic-mcp-agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Environment variable setup for OpenAI API key and GitHub token in .env file.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/mcp/example.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=\"your_openai_api_key\"\nGITHUB_TOKEN=\"your_github_token\"\n```\n\n----------------------------------------\n\nTITLE: Running a SpinAI agent in development mode\nDESCRIPTION: Command to start your SpinAI agent in development mode. This launches your agent locally for testing and development purposes.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/get-started/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Development Commands for GitHub Code Review Bot\nDESCRIPTION: Various npm commands for development, building, linting, and type checking the code review bot project.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-code-review-agent/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run in development mode with hot reload\nnpm run dev\n\n# Build the project\nnpm run build\n\n# Run linting\nnpm run lint\n\n# Type checking\nnpm run check-types\n```\n\n----------------------------------------\n\nTITLE: Running the SpinAI MCP Agent\nDESCRIPTION: Commands to start the SpinAI MCP agent after it has been configured with the desired MCP actions and agent settings.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/basic-mcp-agent/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n# or\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify Doc Updater using npx\nDESCRIPTION: Command to create a new Mintlify documentation updater project using npx.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-spinai\n```\n\n----------------------------------------\n\nTITLE: Starting the GitHub MCP Agent Development Server\nDESCRIPTION: Command to start the GitHub MCP Agent in development mode, which allows interaction through natural language commands.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-mcp-agent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating New SpinAI Project\nDESCRIPTION: Command to create a new SpinAI project using npx. This initializes the project structure and dependencies.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/examples/calculator-agent/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-spinai\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server with NPM\nDESCRIPTION: Command to start the custom development server that mimics Vercel's serverless environment with better debugging capabilities and no timeout issues.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/vercel-serverless/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying to Vercel\nDESCRIPTION: Commands to deploy the application to Vercel, with options for both development and production deployments.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/vercel-serverless/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvercel deploy\n# or for production\nvercel deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Vercel Configuration File\nDESCRIPTION: Configuration file (vercel.json) for Vercel deployment with extended function timeout settings to prevent logging timeouts.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/vercel-serverless/README.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 2,\n  \"functions\": {\n    \"api/**/*.ts\": {\n      \"maxDuration\": 60\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Mintlify Configuration Setup\nDESCRIPTION: Configuration for a standard Mintlify setup with documentation in the same repository.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const defaultConfig: Required<DocConfig> = {\\n  docsPath: \"docs\",              // Path to your Mintlify docs\\n  isMonorepo: false,\\n  docsRepoOwner: \"your-username\",  // Your GitHub username or org\\n  docsRepoName: \"your-repo\",       // The repository name\\n  docsBranch: \"main\",\\n  fileTypes: [\".mdx\", \".md\"],\\n  ignorePaths: [\"**/node_modules/**\"],\\n  createNewPr: true,\\n  labels: [\"documentation\"],\\n  styleGuide: \"\",\\n};\n```\n\n----------------------------------------\n\nTITLE: Monorepo Configuration Setup\nDESCRIPTION: Configuration for a monorepo setup with documentation in a subdirectory.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const defaultConfig: Required<DocConfig> = {\\n  docsPath: \"apps/docs\",         // Adjust to your monorepo docs path\\n  isMonorepo: true,\\n  docsRepoOwner: \"\",\\n  docsRepoName: \"\",\\n  docsBranch: \"main\",\\n  fileTypes: [\".mdx\", \".md\"],\\n  ignorePaths: [\"**/node_modules/**\"],\\n  createNewPr: true,\\n  labels: [\"documentation\"],\\n  styleGuide: \"\",\\n};\n```\n\n----------------------------------------\n\nTITLE: SpinAI Changelog Entries\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, feature additions, and bug fixes for the SpinAI project. Includes detailed commit messages and version numbers.\nSOURCE: https://github.com/fallomai/spinai/blob/main/packages/spinai/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# spinai\n\n## 2.0.15\n\n### Patch Changes\n\n- 4536d93: properly export esm\n\n## 2.0.13\n\n### Patch Changes\n\n- 14c6b53: Add the ability to pass in fixed flows\n\n## 2.0.12\n\n### Patch Changes\n\n- d4ef8b3: export agent type\n\n## 2.0.11\n\n### Patch Changes\n\n- 588d9d7: Remove mcp config name from toolname\n\n## 2.0.10\n\n### Patch Changes\n\n- 0042abd: update npx command and config for createActionsFromMcpConfig\n```\n\n----------------------------------------\n\nTITLE: Separate Repository Configuration\nDESCRIPTION: Configuration for setups where documentation is maintained in a separate repository.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const defaultConfig: Required<DocConfig> = {\\n  docsPath: \"docs\",\\n  isMonorepo: false,\\n  docsRepoOwner: \"your-org\",     // Owner of the docs repo\\n  docsRepoName: \"docs\",          // Name of the docs repo\\n  docsBranch: \"main\",\\n  fileTypes: [\".mdx\", \".md\"],\\n  ignorePaths: [\"**/node_modules/**\"],\\n  createNewPr: true,\\n  labels: [\"documentation\"],\\n  styleGuide: \"\",\\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SpinAI MCP Agent\nDESCRIPTION: Commands to install the necessary dependencies for the SpinAI MCP agent after initializing the project with the template.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/basic-mcp-agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing MCP GitHub Configuration\nDESCRIPTION: CLI command to install and configure GitHub MCP actions.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/mcp/example.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx spinai-mcp install @smithery-ai/github --provider smithery --config \"{\\\"githubPersonalAccessToken\\\":\\\"move_my_token_to_a_dot_env_after\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing SpinAI Project\nDESCRIPTION: Command to create a new SpinAI project using the default template.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/mcp/example.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-spinai\n```\n\n----------------------------------------\n\nTITLE: Example API Request Body\nDESCRIPTION: Sample JSON request body for the calculator API showing how to format input for processing mathematical expressions.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/vercel-serverless/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"5+7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Vercel's Development Environment\nDESCRIPTION: Commands to start Vercel's official development environment for local testing.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/vercel-serverless/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run vercel-dev\n# or\nvercel dev\n```\n\n----------------------------------------\n\nTITLE: Starting the GitHub Code Review Server\nDESCRIPTION: Command to start the code review bot server in development mode.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-code-review-agent/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Example API Response\nDESCRIPTION: Sample JSON response from the calculator API showing the computed result and any processing messages.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/vercel-serverless/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": {\n    \"finalNumber\": 12\n  },\n  \"messages\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for GitHub Code Reviewer\nDESCRIPTION: Example environment variables configuration showing required API keys and settings for the code review bot.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-code-review-agent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\n# OpenAI API Key for the code review\nOPENAI_API_KEY=your_openai_api_key_here\n\n# GitHub Personal Access Token with repo scope\nGITHUB_TOKEN=your_github_token_here\n\n# SpinAI API Key for agent tracking and monitoring\nSPINAI_API_KEY=your_spinai_api_key_here\n\n# Port for the webhook server (optional)\nPORT=3000\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GitHub Code Reviewer\nDESCRIPTION: Command to install all required npm dependencies for the code review bot.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-code-review-agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Smithery MCP with SpinAI\nDESCRIPTION: Command to automatically install and configure a Smithery MCP for GitHub integration with SpinAI, which will update the mcp-config.ts file.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/basic-mcp-agent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx spinai-mcp install @smithery-ai/github --provider smithery --config \"{\\\"githubPersonalAccessToken\\\":\\\"abc\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables Configuration File\nDESCRIPTION: Command to copy the example environment file to create a new configuration file.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-code-review-agent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Commands to start the development server using npm or yarn.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\\n# or\\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example of required environment variables for OpenAI and GitHub authentication.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Edit .env with your keys:\\n# OPENAI_API_KEY=your-openai-key\\n# GITHUB_TOKEN=your-github-token\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Mintlify Doc Updater in Bash\nDESCRIPTION: Commands to start the project in development mode using either npm or yarn.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with cURL\nDESCRIPTION: Command to send a POST request to the API endpoint with a JSON payload containing a mathematical expression to test the calculator functionality.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/vercel-serverless/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/api -H \"Content-Type: application/json\" -d '{\"input\": \"5+7\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Quality Checks for Mintlify Doc Updater in Bash\nDESCRIPTION: Commands for running tests, linting, and type checking to ensure code quality before submitting contributions.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run tests\nnpm test\n\n# Run linting\nnpm run lint\n\n# Type checking\nnpm run check-types\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Mintlify Doc Updater in Bash\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server\nDESCRIPTION: Command to start the Mintlify development server at the root of your documentation where mint.json is located. This allows you to preview documentation changes locally.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version updates, patches and dependency changes for the create-spinai package. Includes changes related to MCP cleanup, create-spinai-app dependency updates, and package reference fixes.\nSOURCE: https://github.com/fallomai/spinai/blob/main/packages/create-spinai/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# create-spinai\n\n## 1.0.4\n\n### Patch Changes\n\n- 3c1e56c: expose and clean up mcp\n\n## 1.0.3\n\n### Patch Changes\n\n- Updated dependencies [04e2259]\n  - create-spinai-app@2.0.0\n\n## 1.0.2\n\n### Patch Changes\n\n- cd9243b: Fix\n\n## 1.0.1\n\n### Patch Changes\n\n- 07d1514: point create-spinai to create-spinai-app\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Testing with Ngrok for GitHub Webhooks\nDESCRIPTION: Commands to set up local testing using ngrok for GitHub webhooks, allowing testing without a public server.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/github-code-review-agent/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install ngrok\nnpm install -g ngrok\n\n# Start your server\nnpm run dev\n\n# In another terminal, create a tunnel\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Configuration Package for Turbo\nDESCRIPTION: This snippet defines the name of the ESLint configuration package used in the Turbo project. It specifies that this package contains a collection of internal ESLint configurations.\nSOURCE: https://github.com/fallomai/spinai/blob/main/packages/eslint-config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@turbo/eslint-config`\n```\n\n----------------------------------------\n\nTITLE: Cloning the Mintlify Doc Updater Repository in Bash\nDESCRIPTION: Commands to clone the repository and navigate to the project directory. This is the first step in setting up the local development environment.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/mintlify-doc-updater.git\ncd mintlify-doc-updater\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration for Mintlify Doc Updater in Bash\nDESCRIPTION: Command to create a new environment configuration file by copying the example template.\nSOURCE: https://github.com/fallomai/spinai/blob/main/templates/mintlify-docs-updater/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI\nDESCRIPTION: Command to install the Mintlify CLI globally using npm. This is required for previewing documentation changes locally.\nSOURCE: https://github.com/fallomai/spinai/blob/main/apps/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```"
  }
]