[
  {
    "owner": "design-tokens",
    "repo": "community-group",
    "content": "TITLE: Defining Base Design Tokens in JSON\nDESCRIPTION: Provides examples of base tokens defining fundamental colors with explicit color values in sRGB color space. These tokens serve as the lowest level design tokens and include information on color components and optional alpha transparency. The snippet is pure JSON and requires no additional dependencies.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/token-naming.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"color\": {\n    \"green\": {\n      \"$type\": \"color\",\n      \"$value\": {\n        \"colorSpace\": \"srgb\",\n        \"components\": [0.67, 0.79, 0.74]\n      }\n    },\n    \"shadow\": {\n      \"$type\": \"color\",\n      \"$value\": {\n        \"colorSpace\": \"srgb\",\n        \"components\": [0, 0, 0],\n        \"alpha\": 0.53\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Tokens Referencing Alias Tokens in JSON\nDESCRIPTION: Demonstrates component-specific tokens which reference alias tokens to provide context-specific styling. This separation helps manage styling concerns within components, promoting consistent use of shared tokens across components. The code is JSON formatted and relies on token reference resolution.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/token-naming.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"color\": {\n    \"button\": {\n      \"primary\": {\n        \"$value\": \"{color.brand.primary}\"\n      }\n    },\n    \"banner\": {\n      \"background\": {\n        \"$value\": \"{color.palette.black}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Tokens Referencing Alias Tokens for Consistent Styling in JSON\nDESCRIPTION: Represents component-level tokens (e.g., for a badge component) that reuse alias tokens to maintain consistent visual styles but allow separation of concerns at the component level. These tokens define background and text colors with semantic keys like error and success, referencing existing alias tokens. The snippet uses JSON syntax.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/token-naming.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"color\": {\n    \"badge\": {\n      \"background\": {\n        \"error\": {\n          \"$value\": \"{color.background.error}\"\n        },\n        \"success\": {\n          \"$value\": \"{color.background.success}\"\n        }\n      },\n      \"text\": {\n        \"error\": {\n          \"$value\": \"{color.text.error}\"\n        },\n        \"success\": {\n          \"$value\": \"{color.text.success}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Alias Tokens with References in JSON\nDESCRIPTION: Illustrates alias tokens where values reference other tokens by path strings, enabling reuse of base tokens or palette colors under different names. This supports maintainability through a centralized token hierarchy without duplicating raw values. The snippet is JSON and does not require processing dependencies beyond token resolution.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/token-naming.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"color\": {\n    \"palette\": {\n      \"black\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 0, 0]\n        }\n      }\n    },\n    \"text\": {\n      \"base\": {\n        \"$value\": \"{color.palette.black}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Design Token Alias Reference in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define a design token ('alias name') whose value is a reference to another token ('group name.token name') using the specified '{path.to.token}' string format. It shows both the referenced token with an explicit value and the referencing token.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/aliases.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"group name\": {\n    \"token name\": {\n      \"$value\": 1234,\n      \"$type\": \"number\"\n    }\n  },\n  \"alias name\": {\n    \"$value\": \"{group name.token name}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Font Family Design Tokens in JSON\nDESCRIPTION: Defines font family tokens using either a single font name string or an array of font names ordered by preference. Each token requires the $type property to be set to \"fontFamily\". These tokens allow design tools to interpret font preferences across platforms, though implementation limitations by OS or browser are noted as a caveat.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/types.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Primary font\": {\n    \"$value\": \"Comic Sans MS\",\n    \"$type\": \"fontFamily\"\n  },\n  \"Body font\": {\n    \"$value\": [\"Helvetica\", \"Arial\", \"sans-serif\"],\n    \"$type\": \"fontFamily\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Font Weight Design Tokens in JSON\nDESCRIPTION: Specifies font weight tokens that accept numeric values (1 to 1000) or specific string aliases mapped to certain numeric weights. The $type property must be \"fontWeight\". Values outside the accepted range or unrecognized strings are invalid. This token aligns with OpenType weight tags. Examples demonstrate usage of both numeric and alias string values.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/types.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"font-weight-default\": {\n    \"$value\": 350,\n    \"$type\": \"fontWeight\"\n  },\n  \"font-weight-thick\": {\n    \"$value\": \"extra-bold\",\n    \"$type\": \"fontWeight\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cubic Bézier Animation Tokens in JSON\nDESCRIPTION: Defines tokens for cubic Bézier curves that control animation timing and easing, with $type set to \"cubicBezier\". The $value is an array of four numbers representing two control points' x and y coordinates [P1x, P1y, P2x, P2y]. The x coordinates must be between 0 and 1; the y values can be any real number. This specification enables consistent animation easing definitions across tools.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/types.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Accelerate\": {\n    \"$value\": [0.5, 0, 1, 1],\n    \"$type\": \"cubicBezier\"\n  },\n  \"Decelerate\": {\n    \"$value\": [0, 0, 0.5, 1],\n    \"$type\": \"cubicBezier\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Number Design Tokens in JSON\nDESCRIPTION: Covers numeric tokens where the $type is \"number\" and the value is a JSON number, allowing integers and fractions. This supports tokens that represent unitless numeric values such as line heights or gradient stops. This simple structure permits flexible numerical representation in design tokens.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/types.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"line-height-large\": {\n    \"$value\": 2.3,\n    \"$type\": \"number\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Design Tokens in JSON\nDESCRIPTION: Describes duration tokens detailing animation times with $type set to \"duration\". Each token's $value contains a numeric \"value\" and a \"unit\" string restricted to \"ms\" for milliseconds or \"s\" for seconds. This standardized time format aids consistent animation timing across tooling and platforms, and validation enforces restriction to these units.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/types.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Duration-Quick\": {\n    \"$value\": {\n      \"value\": 100,\n      \"unit\": \"ms\"\n    },\n    \"$type\": \"duration\"\n  },\n  \"Duration-Long\": {\n    \"$value\": { \"value\": 1.5, \"unit\": \"s\" },\n    \"$type\": \"duration\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Numerical Ordered Scale Base Color Tokens in JSON\nDESCRIPTION: Presents base tokens organized numerically to represent progressively varying colors on a defined scale (e.g., 400, 500, 600). This numeric approach facilitates understanding of color progression and is scalable for additions between steps. The format is JSON with sRGB color components and no special dependencies.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/token-naming.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"color\": {\n    \"green\": {\n      \"400\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0.42, 0.73, 0.63]\n        }\n      },\n      \"500\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0.15, 0.56, 0.42]\n        }\n      },\n      \"600\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0.07, 0.5, 0.36]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Numerical Bounded Scale Gray Color Tokens in JSON\nDESCRIPTION: Shows gray color tokens named using bounded scale values reflecting actual HSL lightness components. This naming convention indicates meaningful underlying color attributes directly in token names, improving semantic clarity. JSON format requires standard parsing and resolution tools.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/token-naming.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"color\": {\n    \"gray\": {\n      \"22\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"hsl\",\n          \"components\": [0, 0, 22]\n        }\n      },\n      \"49\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"hsl\",\n          \"components\": [0, 0, 49]\n        }\n      },\n      \"73\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"hsl\",\n          \"components\": [0, 0, 73]\n        }\n      },\n      \"99\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"hsl\",\n          \"components\": [0, 0, 99]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Shadow Composite Token in JSON\nDESCRIPTION: This JSON snippet defines a composite design token of type \"shadow\". It demonstrates how multiple sub-values like color, offsetX, offsetY, blur, and spread are organized as nested objects within the \"$value\" property. Each sub-value has its own type and structure, for example, color includes color space and RGBA components, while offsets and blur specify numeric values with units. This token is used for representing drop shadow styles in UI designs and requires understanding of composite token structure.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shadow-token\": {\n    \"$type\": \"shadow\",\n    \"$value\": {\n      \"color\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 0, 0],\n          \"alpha\": 0.5,\n          \"hex\": \"#000000\"\n        }\n      },\n      \"offsetX\": { \"value\": 0.5, \"unit\": \"rem\" },\n      \"offsetY\": { \"value\": 0.5, \"unit\": \"rem\" },\n      \"blur\": { \"value\": 1.5, \"unit\": \"rem\" },\n      \"spread\": { \"value\": 0, \"unit\": \"rem\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Stroke Style Token with Object Value in JSON\nDESCRIPTION: This JSON snippet illustrates a stroke style token defined by an object value containing properties for \"dashArray\" and \"lineCap\". \"dashArray\" is an array of dimension values specifying lengths of dashes and gaps, while \"lineCap\" specifies the style of line ends and must be one of \"round\", \"butt\", or \"square\". This more detailed representation allows finer control of stroke appearance compared to string values and requires dimension tokens or inline dimension objects.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alert-border-style\": {\n    \"$type\": \"strokeStyle\",\n    \"$value\": {\n      \"dashArray\": [\n        { \"value\": 0.5, \"unit\": \"rem\" },\n        { \"value\": 0.25, \"unit\": \"rem\" }\n      ],\n      \"lineCap\": \"round\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Composite Tokens with Cross-References in JSON\nDESCRIPTION: This JSON example illustrates an advanced composite token setup with nested tokens referencing each other. It includes dimension tokens for spacing, color tokens for shadow color, and a composite shadow token whose sub-values partly use references to these tokens and partly explicit values. Additionally, it shows token aliasing by creating a token referencing another composite token. Dependencies include understanding JSON references to other tokens by string paths and the structure conventions for dimension and color tokens.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"space\": {\n    \"small\": {\n      \"$type\": \"dimension\",\n      \"$value\": { \"value\": 0.5, \"unit\": \"rem\" }\n    }\n  },\n\n  \"color\": {\n    \"shadow-050\": {\n      \"$type\": \"color\",\n      \"$value\": {\n        \"colorSpace\": \"srgb\",\n        \"components\": [0, 0, 0],\n        \"alpha\": 0.5,\n        \"hex\": \"#000000\"\n      }\n    }\n  },\n\n  \"shadow\": {\n    \"medium\": {\n      \"$type\": \"shadow\",\n      \"$description\": \"A composite token where some sub-values are references to tokens that have the correct type and others are explicit values\",\n      \"$value\": {\n        \"color\": \"{color.shadow-050}\",\n        \"offsetX\": \"{space.small}\",\n        \"offsetY\": \"{space.small}\",\n        \"blur\": { \"value\": 1.5, \"unit\": \"rem\" },\n        \"spread\": { \"value\": 0, \"unit\": \"rem\" }\n      }\n    }\n  },\n\n  \"component\": {\n    \"card\": {\n      \"box-shadow\": {\n        \"$description\": \"This token is an alias for the composite token {shadow.medium}\",\n        \"$value\": \"{shadow.medium}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Design Token Using References in JSON\nDESCRIPTION: Illustrates how to define a gradient design token that references other design tokens. It defines a color token 'brand-primary' and a number token 'position-end', and then uses these references ('{brand-primary}', '{position-end}') within the 'brand-in-the-middle' gradient token's stop definitions for color and position. This shows how composite tokens can utilize simpler tokens.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brand-primary\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [0, 1, 0.4]\n    }\n  },\n\n  \"position-end\": {\n    \"$type\": \"number\",\n    \"$value\": 1\n  },\n\n  \"brand-in-the-middle\": {\n    \"$type\": \"gradient\",\n    \"$value\": [\n      {\n        \"color\": {\n          \"$type\": \"color\",\n          \"$value\": {\n            \"colorSpace\": \"srgb\",\n            \"components\": [0, 0, 0]\n          }\n        },\n        \"position\": 0\n      },\n      {\n        \"color\": \"{brand-primary}\",\n        \"position\": 0.5\n      },\n      {\n        \"color\": {\n          \"$type\": \"color\",\n          \"$value\": {\n            \"colorSpace\": \"srgb\",\n            \"components\": [0, 0, 0]\n          }\n        },\n        \"position\": \"{position-end}\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shadow tokens in JSON\nDESCRIPTION: Examples of shadow token definitions, including a single shadow, a layered shadow with multiple shadow objects, and an inner shadow with the inset property set to true.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shadow-token\": {\n    \"$type\": \"shadow\",\n    \"$value\": {\n      \"color\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 0, 0],\n          \"alpha\": 0.5,\n        }\n      },\n      \"offsetX\": { \"value\": 0.5, \"unit\": \"rem\" },\n      \"offsetY\": { \"value\": 0.5, \"unit\": \"rem\" },\n      \"blur\": { \"value\": 1.5, \"unit\": \"rem\" },\n      \"spread\": { \"value\": 0, \"unit\": \"rem\" }\n    }\n  },\n\"layered-shadow\": {\n  \"$type\": \"shadow\",\n  \"$value\": [\n    {\n      \"color\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 0, 0],\n          \"alpha\": 0.1,\n        }\n      },\n      \"offsetX\": { \"value\": 0, \"unit\": \"px\" },\n      \"offsetY\": { \"value\": 24, \"unit\": \"px\" },\n      \"blur\": { \"value\": 22, \"unit\": \"px\" },\n      \"spread\": { \"value\": 0, \"unit\": \"px\" }\n    },\n    {\n      \"color\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 0, 0],\n          \"alpha\": 0.2,\n        }\n      },\n      \"offsetX\": { \"value\": 0, \"unit\": \"px\" },\n      \"offsetY\": { \"value\": 42.9, \"unit\": \"px\" },\n      \"blur\": { \"value\": 44, \"unit\": \"px\" },\n      \"spread\": { \"value\": 0, \"unit\": \"px\" }\n    },\n    {\n      \"color\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 0, 0],\n          \"alpha\": 0.3,\n        }\n      },\n      \"offsetX\": { \"value\": 0, \"unit\": \"px\" },\n      \"offsetY\": { \"value\": 64, \"unit\": \"px\" },\n      \"blur\": { \"value\": 64, \"unit\": \"px\" },\n      \"spread\": { \"value\": 0, \"unit\": \"px\" }\n    }\n  ]\n}\n\"inner-shadow\": {\n  \"$type\": \"shadow\",\n  \"$value\": {\n    \"color\": {\n      \"$type\": \"color\",\n      \"$value\": {\n        \"colorSpace\": \"srgb\",\n        \"components\": [0, 0, 0],\n        \"alpha\": 0.5,\n      }\n    },\n    \"offsetX\": { \"value\": 2, \"unit\": \"px\" },\n    \"offsetY\": { \"value\": 2, \"unit\": \"px\" },\n    \"blur\": { \"value\": 4, \"unit\": \"px\" },\n    \"spread\": { \"value\": 0, \"unit\": \"px\" },\n    \"inset\": true\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Stroke Style Token with Object Value and Token References in JSON\nDESCRIPTION: This example shows a stroke style token where the \"dashArray\" property contains a mix of direct dimension objects and references to other dimension tokens. The line cap style is set explicitly as a string. Dependencies include the definition of referenced dimension tokens outside the stroke style token. This setup allows reuse and centralized control of dash length values across tokens.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notification-border-style\": {\n    \"$type\": \"strokeStyle\",\n    \"$value\": {\n      \"dashArray\": [\"{dash-length-medium}\", { \"value\": 0.25, \"unit\": \"rem\" }],\n      \"lineCap\": \"butt\"\n    }\n  },\n\n  \"dash-length-medium\": {\n    \"$type\": \"dimension\",\n    \"$value\": {\n      \"value\": 10,\n      \"unit\": \"px\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Stroke Style Token with Predefined String Value in JSON\nDESCRIPTION: This snippet defines a design token for a stroke style using a pre-defined string value. The token \"$type\" is set to \"strokeStyle\", and its \"$value\" is one of the allowed strings such as \"dashed\". These string values correspond to CSS line styles with rendering details that may vary between implementations. The token is used to represent border or line styles in UI elements without additional parameters.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"focus-ring-style\": {\n    \"$type\": \"strokeStyle\",\n    \"$value\": \"dashed\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Design Token with Omitted Start Stop in JSON\nDESCRIPTION: Shows a gradient design token where the first stop is not at position 0. The specification states that the color of the closest stop (at position 0.666) should extend to position 0. The token starts with solid yellow (1,1,0) extending from 0 to 0.666 and then fades to red (1,0,0) at position 1.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mostly-yellow\": {\n    \"$type\": \"gradient\",\n    \"$value\": [\n      {\n        \"color\": {\n          \"$type\": \"color\",\n          \"$value\": {\n            \"colorSpace\": \"srgb\",\n            \"components\": [1, 1, 0]\n          }\n        },\n        \"position\": 0.666\n      },\n      {\n        \"color\": {\n          \"$type\": \"color\",\n          \"$value\": {\n            \"colorSpace\": \"srgb\",\n            \"components\": [1, 0, 0]\n          }\n        },\n        \"position\": 1\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Design Tokens with Grouping in JSON\nDESCRIPTION: A JSON example showing how design tokens can be organized in hierarchical groups. It demonstrates color and typeface tokens nested under a brand group, with proper type annotations using $type property.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brand\": {\n    \"color\": {\n      \"$type\": \"color\",\n      \"acid green\": {\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 1, 0.4]\n        }\n      },\n      \"hot pink\": {\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [1, 0, 1]\n        }\n      }\n    },\n    \"typeface\": {\n      \"$type\": \"fontFamily\",\n      \"primary\": {\n        \"$value\": \"Comic Sans MS\"\n      },\n      \"secondary\": {\n        \"$value\": \"Times New Roman\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Token Type per Group in JSON\nDESCRIPTION: Illustrates how to use the optional '$type' property within a group ('brand') to set a default type ('color') for all tokens within that group and its nested groups, unless a token explicitly specifies its own '$type'.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brand\": {\n    \"$type\": \"color\",\n    \"color\": {\n      \"acid green\": {\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 1, 0.4]\n        }\n      },\n      \"hot pink\": {\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [1, 0, 1]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Distinguishing Tokens within Groups in JSON\nDESCRIPTION: Illustrates how a key within a group object represents a token ('Token name') if it contains a '$value' property. The example also shows a group ('Group of tokens') having a '$description' property.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Group of tokens\": {\n    \"$description\": \"This is an example of a group containing a single token\",\n    \"Token name\": {\n      \"$value\": {\n        \"colorSpace\": \"srgb\",\n        \"channels\": [0, 0, 0]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tokens in a Flat Structure (Comparison) in JSON\nDESCRIPTION: Shows the equivalent token definitions from the previous grouped example but using a flat structure. This contrasts with the grouped approach, highlighting how flat structures can be more verbose and potentially harder to read as group context is embedded in token names.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brand-color-acid-green\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [0, 1, 0.4]\n    }\n  },\n  \"brand-color-hot-pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [1, 0, 1]\n    }\n  },\n  \"brand-typeface-primary\": {\n    \"$value\": \"Comic Sans MS\",\n    \"$type\": \"fontFamily\"\n  },\n  \"brand-typeface-secondary\": {\n    \"$value\": \"Times New Roman\",\n    \"$type\": \"fontFamily\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Token Group in JSON\nDESCRIPTION: Demonstrates using the '$deprecated' property on a group ('Button') to mark the entire group and its contained tokens as deprecated. A string value can provide a reason or migration path.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Button\": {\n    \"$deprecated\": \"Please use tokens in the Action group instead.\",\n    \"Foreground\": { \"$value\": \"#202020\", \"$type\": \"color\" },\n    \"Background\": { \"$value\": \"#ffffff\", \"$type\": \"color\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Tokens with Groups for Authoring in JSON\nDESCRIPTION: Provides a practical example of using nested groups ('brand', 'color', 'typeface') to organize related design tokens. It shows how grouping can improve readability and authoring efficiency compared to a flat structure, including setting default types per group.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brand\": {\n    \"color\": {\n      \"$type\": \"color\",\n      \"acid green\": {\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 1, 0.4]\n        }\n      },\n      \"hot pink\": {\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [1, 0, 1]\n        }\n      }\n    },\n    \"typeface\": {\n      \"$type\": \"fontFamily\",\n      \"primary\": {\n        \"$value\": \"Comic Sans MS\"\n      },\n      \"secondary\": {\n        \"$value\": \"Times New Roman\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Token Groups in JSON\nDESCRIPTION: Shows how to use the '$extensions' property within a group ('brand') to add proprietary or vendor-specific data. Keys should use reverse domain name notation (e.g., 'org.example.tool-a') to avoid conflicts. This data applies only to the group itself.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brand\": {\n    \"$extensions\": {\n      \"org.example.tool-a\": 42,\n      \"org.example.tool-b\": {\n        \"turn-up-to-11\": true\n      }\n    },\n    \"color\": {\n      \"acid green\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 1, 0.4]\n        }\n      },\n      \"hot pink\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [1, 0, 1]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Design Tokens to Sass Variables\nDESCRIPTION: Demonstrates how translation tools should convert hierarchical design tokens into flattened Sass variables. The tool concatenates the token path segments to create unique variable names while preserving the hierarchical relationship.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n$brand-color-acid-green: #00ff66;\n$brand-color-hot-pink: #ff00ff;\n$brand-typeface-primary: 'Comic Sans MS';\n$brand-typeface-secondary: 'Times New Roman';\n```\n\n----------------------------------------\n\nTITLE: Example of a Token with a Specific Type\nDESCRIPTION: A JSON snippet showing how to assign an explicit `$type` property to a token, ensuring tools can correctly interpret its value type, such as 'color'. The `$type` property can be set at the token or group level.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/design-token.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Button background\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [0.467, 0.467, 0.467]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Color Tokens in JSON\nDESCRIPTION: This snippet demonstrates the standard structure for defining color design tokens in JSON. It shows how to specify the \"$type\" as 'color', the \"$value\" object containing 'colorSpace' (here 'srgb'), numerical 'components', and an optional 'alpha' value to control transparency.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [1, 0, 1],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  },\n  \"Translucent shadow\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [0, 0, 0],\n      \"alpha\": 0.5,\n      \"hex\": \"#000000\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an sRGB Color Token in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define a color token named \"Hot pink\" using the sRGB color space. It specifies the `$type` as \"color\", sets the `$value` object with `colorSpace` as \"srgb\", defines the RGB `components` as `[1, 0, 1]`, sets `alpha` to `1`, and includes an optional `hex` representation \"#ff00ff\".\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [1, 0, 1],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dimension Design Tokens in JSON\nDESCRIPTION: Specifies design tokens for the dimension type in JSON format, representing single-dimensional distances with numeric values and units. Requires a $type property set to \"dimension\" and a $value object containing a numeric \"value\" and a \"unit\" string that must be either \"px\" or \"rem\". Tools must validate unit values and reject invalid units or absence of units even for zero values.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/types.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"spacing-stack-0\": {\n    \"$value\": {\n      \"value\": 0,\n      \"unit\": \"px\"\n    },\n    \"$type\": \"dimension\"\n  },\n  \"spacing-stack-1\": {\n    \"$value\": {\n      \"value\": 0.5,\n      \"unit\": \"rem\"\n    },\n    \"$type\": \"dimension\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HSL Color in JSON\nDESCRIPTION: This snippet demonstrates how to represent a color in the HSL (Hue, Saturation, Lightness) color space using a JSON object. The 'components' array specifies the hue angle, saturation percentage, and lightness percentage. The object includes metadata such as alpha transparency and hexadecimal representation. Dependencies include understanding the HSL color model and conforming to the prescribed numeric ranges for each component.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"hsl\",\n      \"components\": [330, 100, 50],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an sRGB-Linear Color Token in JSON\nDESCRIPTION: This JSON snippet shows how to define a color token named \"Hot pink\" using the sRGB-linear color space. It follows the standard color token structure, setting `colorSpace` to \"srgb-linear\", defining the RGB `components` as `[1, 0, 1]`, `alpha` as `1`, and providing the corresponding `hex` value \"#ff00ff\".\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb-linear\",\n      \"components\": [1, 0, 1],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HSL Color Token with 'none' Component in JSON\nDESCRIPTION: This snippet shows how to define a color design token using the HSL color space where a component value is not applicable. It demonstrates using the 'none' keyword within the 'components' array (e.g., for hue) to explicitly indicate an unspecified or non-relevant component value.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"White\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"hsl\",\n      \"components\": [\"none\", 0, 100],\n      \"alpha\": 1,\n      \"hex\": \"#ffffff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Typography Design Tokens in JSON\nDESCRIPTION: Provides examples of defining typography design tokens. It shows two nested typography tokens: 'heading-level-1' using direct values for properties like fontFamily, fontSize, fontWeight, letterSpacing, and lineHeight, and 'microcopy' which demonstrates referencing other tokens for fontFamily, fontSize, and fontWeight. Both use the '$type' \"typography\" and the '$value' object containing the style properties.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type styles\": {\n    \"heading-level-1\": {\n      \"$type\": \"typography\",\n      \"$value\": {\n        \"fontFamily\": \"Roboto\",\n        \"fontSize\": {\n          \"value\": 42,\n          \"unit\": \"px\"\n        },\n        \"fontWeight\": 700,\n        \"letterSpacing\": {\n          \"value\": 0.1,\n          \"unit\": \"px\"\n        },\n        \"lineHeight\": 1.2\n      }\n    },\n    \"microcopy\": {\n      \"$type\": \"typography\",\n      \"$value\": {\n        \"fontFamily\": \"{font.serif}\",\n        \"fontSize\": \"{font.size.smallest}\",\n        \"fontWeight\": \"{font.weight.normal}\",\n        \"letterSpacing\": {\n          \"value\": 0,\n          \"unit\": \"px\"\n        },\n        \"lineHeight\": 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HSL Color Token with Zero Component in JSON\nDESCRIPTION: This snippet provides an alternative definition for a color token using the HSL color space, explicitly setting a component value (like hue) to 0. It serves as a contrast to using the 'none' keyword, illustrating how an explicit zero can have different implications during interpolation or color mixing.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"White\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"hsl\",\n      \"components\": [0, 0, 100],\n      \"alpha\": 1,\n      \"hex\": \"#ffffff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HWB Color in JSON\nDESCRIPTION: This snippet provides an example of representing color in the HWB (Hue, Whiteness, Blackness) color space within a JSON object. The 'components' array holds hue, whiteness, and blackness values. The object also stores alpha and hex equivalents. Proper interpretation requires knowledge of the HWB model and its value constraints.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"hwb\",\n      \"components\": [330, 0, 0],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CIELAB Color in JSON\nDESCRIPTION: This code snippet illustrates how to store color data in the CIELAB perceptually uniform color space within a JSON structure. The components array consists of L (lightness), A (green-red axis), and B (blue-yellow axis) values. The color definition ensures compatibility with CIELAB's numerical ranges and includes alpha and hex codes for usage in design tooling.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"lab\",\n      \"components\": [60.17, 93.54, -60.5],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Alias Tokens by Category and Property in JSON\nDESCRIPTION: Displays alias tokens grouped primarily by category (e.g., background) and then by intent (e.g., error or success). Token values reference base or palette tokens, promoting reusable semantic naming and clarity by avoiding abbreviations. The format is plain JSON for straightforward integration.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/token-naming.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"color\": {\n    \"background\": {\n      \"error\": {\n        \"$value\": \"{color.red.600}\"\n      },\n      \"success\": {\n        \"$value\": \"{color.green.400}\"\n      }\n    },\n    \"text\": {\n      \"base\": {\n        \"$value\": \"{color.palette.black}\"\n      },\n      \"errorHover\": {\n        \"$value\": \"{color.red.700}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LCH Color in JSON\nDESCRIPTION: This example documents how to encode a color in the LCH (Lightness, Chroma, Hue) model, which is a cylindrical representation of CIELAB, using JSON. The 'components' property lists the L value, chroma, and hue angle. The JSON object supports alpha transparency and hex encoding, and values should adhere to recommended practical ranges for accuracy.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"lch\",\n      \"components\": [60.17, 111.4, 327.11],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OKLAB Color in JSON\nDESCRIPTION: This snippet shows storing a color in the OKLAB color space with a JSON object. The components represent lightness, green-red, and blue-yellow axes, normalized to OKLAB’s scale. The object carries alpha and hex properties for integration in color libraries, and values should follow the typical OKLAB numeric bounds.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"oklab\",\n      \"components\": [0.701, 0.2746, -0.169],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OKLCH Color in JSON\nDESCRIPTION: This JSON code example describes a color using OKLCH, the cylindrical version of OKLAB, indicating lightness, chroma, and hue. The structure is suitable for perceptually accurate color manipulations, with all fields conforming to OKLCH's typical input ranges and additionally supplying hex and alpha for direct application.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"oklch\",\n      \"components\": [0.7016, 0.3225, 328.363],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining A98 RGB Color in JSON\nDESCRIPTION: This JSON snippet outlines how to define a color in the A98 RGB color space, for use on wide-gamut devices. It includes red, green, and blue components within a normalized floating-point range. The object also contains alpha transparency and a hex fallback, enabling consistent use in web and design contexts.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"a98-rgb\",\n      \"components\": [1, 0, 1],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Descriptive Base Color Tokens in JSON\nDESCRIPTION: Shows base tokens using human-friendly descriptive names, which map to sRGB color values with specific color components. This approach improves emotional and brand-related identification but may pose challenges for scalability and cross-lingual contexts. JSON format requires no external dependencies.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/token-naming.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"color\": {\n    \"grass\": {\n      \"$type\": \"color\",\n      \"$value\": {\n        \"colorSpace\": \"srgb\",\n        \"components\": [0.67, 0.79, 0.74]\n      }\n    },\n    \"brand\": {\n      \"watermelon\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0.91, 0.28, 0.42]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Display P3 Color in JSON\nDESCRIPTION: This snippet encodes a color in the Display P3 color space in JSON format, mainly for wide-gamut display usage. The components are red, green, and blue values normalized to the [0,1] range. The structure aids in cross-platform color fidelity, supplemented by alpha and hexadecimal string components.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"display-p3\",\n      \"components\": [1, 0, 1],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rec 2020 Color in JSON\nDESCRIPTION: This code snippet describes how to represent a color using the Rec 2020 space, supporting wide gamut displays and broadcast standards, within a JSON structure. Red, green, and blue values must be in the [0,1] interval. The format accommodates both technical and web design needs by including the alpha and hex values alongside the Rec 2020 triplet.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"rec2020\",\n      \"components\": [1, 0, 1],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Token Groups in JSON\nDESCRIPTION: Demonstrates how design tokens of various types (color, dimension, number, fontWeight) can be nested arbitrarily within groups in a JSON structure. It illustrates the basic structure where group names and token names form the hierarchy.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token uno\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [0.07, 0.07, 0.07]\n    }\n  },\n  \"token group\": {\n    \"token dos\": {\n      \"$value\": { \"value\": 2, \"unit\": \"rem\" },\n      \"$type\": \"dimension\"\n    },\n    \"nested token group\": {\n      \"token tres\": {\n        \"$value\": 33,\n        \"$type\": \"number\"\n      },\n      \"Token cuatro\": {\n        \"$value\": 444,\n        \"$type\": \"fontWeight\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProPhoto RGB Color in JSON\nDESCRIPTION: This example illustrates a ProPhoto RGB color representation for 'Hot pink' in JSON, suited for workflows requiring high color accuracy and large gamuts. The color is defined with normalized red, green, and blue components, plus fields for alpha and hexadecimal value. Validation should ensure color channel values remain within the [0,1] range.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"prophoto-rgb\",\n      \"components\": [1, 0, 1],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining XYZ-D65 Color in JSON\nDESCRIPTION: This JSON snippet models a color in the CIE XYZ-D65 color space, providing a universal definition for color conversions across platforms. The 'components' keyed array specifies X, Y, and Z values normalized between 0 and 1, while alpha and hex support legacy and traditional workflows. This representation is suitable for reference or conversion purposes.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"xyz-d65\",\n      \"components\": [0.5929, 0.2848, 0.9699],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool-Generated Numerical Opacity Scale Color Tokens in JSONC\nDESCRIPTION: Example showing how a design tool might generate opacity-step-based tokens with numeric suffixes indicating opacity levels. These tokens extend a base color by adding varying alpha values, facilitating consistent use of opacity variants. The snippet is JSONC, with comments illustrating the approach.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/token-naming.md#_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n// User specified name: color-green\n// Tool generated names for 6 steps of opacity\n{\n  \"color\": {\n    \"green\": {\n      \"10\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0.13, 0.7, 0.67],\n          \"alpha\": 0.1,\n        },\n      },\n      \"20\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0.13, 0.7, 0.67],\n          \"alpha\": 0.2,\n        },\n      },\n      // etc...\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Minimal JSON Design Token\nDESCRIPTION: A JSON example defining a single color token with type and value, illustrating the basic structure of a design token. The `$value` property holds the token's value, including color space and components. Dependencies include JSON syntax and understanding of color tokens.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/design-token.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token name\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [1, 0, 0]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Multiple Tokens with Case-Sensitive Names\nDESCRIPTION: A JSON object demonstrating two tokens with names differing only in case, highlighting potential issues with duplicate token names in tools. Both tokens specify their `$value` and `$type`, emphasizing the importance of unique naming conventions.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/design-token.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"font-size\": {\n    \"$value\": { \"value\": 3, \"unit\": \"rem\" },\n    \"$type\": \"dimension\"\n  },\n\n  \"FONT-SIZE\": {\n    \"$value\": {\n      \"value\": 16,\n      \"unit\": \"px\"\n    },\n    \"$type\": \"dimension\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Token with Extension Data\nDESCRIPTION: A JSON object illustrating how to include proprietary or vendor-specific data within a token via the `$extensions` property. Keys should be vendor-reversed domain names, with values as any JSON-compatible data. This facilitates plugin-specific metadata while maintaining interoperability.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/design-token.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Button background\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [0.467, 0.467, 0.467]\n    },\n    \"$extensions\": {\n      \"org.example.tool-a\": 42,\n      \"org.example.tool-b\": {\n        \"turn-up-to-11\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Deprecated Token\nDESCRIPTION: A JSON object marking specific tokens as deprecated using the `$deprecated` property. This can be a boolean or a string providing the reason, aiding tools and documentation to indicate tokens that should be avoided or replaced.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/design-token.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Button background\": {\n    \"$value\": \"#777777\",\n    \"$type\": \"color\",\n    \"$deprecated\": true\n  },\n  \"Button focus\": {\n    \"$value\": \"#70c0ff\",\n    \"$type\": \"color\",\n    \"$deprecated\": \"Please use the border style for active buttons instead.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Distinguishing Nested Groups in JSON\nDESCRIPTION: Shows how a key within a group object represents a nested group ('Subgroup of tokens') if it does *not* contain a '$value' property directly. The example includes a group '$description' and nested tokens.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Group of tokens\": {\n    \"$description\": \"This is an example of a group containing a nested group\",\n    \"Subgroup of tokens\": {\n      \"Token 1 name\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"channels\": [0.667, 0.733, 0.8]\n        }\n      },\n      \"Token 2 name\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"channels\": [0.867, 0.933, 1]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Design Token with Direct Values in JSON\nDESCRIPTION: Demonstrates the definition of a gradient design token using direct color and position values for its stops. The token '$value' is an array of objects, each specifying a 'color' as an srgb color component array and a 'position' as a number between 0 and 1. This snippet shows a simple gradient from blue (0,0,1) at position 0 to red (1,0,0) at position 1.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blue-to-red\": {\n    \"$type\": \"gradient\",\n    \"$value\": [\n      {\n        \"color\": {\n          \"$type\": \"color\",\n          \"$value\": {\n            \"colorSpace\": \"srgb\",\n            \"components\": [0, 0, 1]\n          }\n        },\n        \"position\": 0\n      },\n      {\n        \"color\": {\n          \"$type\": \"color\",\n          \"$value\": {\n            \"colorSpace\": \"srgb\",\n            \"components\": [1, 0, 0]\n          }\n        },\n        \"position\": 1\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Border tokens in JSON\nDESCRIPTION: Examples of border token definitions, including a heavy border with direct color values and a focusring border that references another color token and uses a custom dash pattern.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"border\": {\n    \"heavy\": {\n      \"$type\": \"border\",\n      \"$value\": {\n        \"color\": {\n          \"$type\": \"color\",\n          \"$value\": {\n            \"colorSpace\": \"srgb\",\n            \"components\": [0.218, 0.218, 0.218]\n          }\n        },\n        \"width\": {\n          \"value\": 3,\n          \"unit\": \"px\"\n        },\n        \"style\": \"solid\"\n      }\n    },\n    \"focusring\": {\n      \"$type\": \"border\",\n      \"$value\": {\n        \"color\": \"{color.focusring}\",\n        \"width\": {\n          \"value\": 1,\n          \"unit\": \"px\"\n        },\n        \"style\": {\n          \"dashArray\": [\n            { \"value\": 0.5, \"unit\": \"rem\" },\n            { \"value\": 0.25, \"unit\": \"rem\" }\n          ],\n          \"lineCap\": \"round\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for DTCG Technical Reports\nDESCRIPTION: Command to install the necessary dependencies after cloning the repository. This only needs to be run once unless dependencies change.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running local preview server for DTCG reports\nDESCRIPTION: Command to start a development server that provides live previews of local edits to the technical reports.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Transition tokens in JSON\nDESCRIPTION: Example of a transition token named 'emphasis' that defines duration, delay, and timing function properties for animating between states.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transition\": {\n    \"emphasis\": {\n      \"$type\": \"transition\",\n      \"$value\": {\n        \"duration\": { \"value\": 200, \"unit\": \"ms\" },\n        \"delay\": { \"value\": 0, \"unit\": \"ms\" },\n        \"timingFunction\": [0.5, 0, 1, 1]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Token with Description\nDESCRIPTION: A JSON object including a token with an optional `$description` property that provides context about its purpose. Useful for documentation generators, IDE tooltips, and translators.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/design-token.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Button background\": {\n    \"$type\": \"color\",\n    \"$description\": \"The background color for buttons in their normal state.\",\n    \"$value\": {\n      \"colorSpace\": \"srgb\",\n      \"components\": [0.467, 0.467, 0.467]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining XYZ-D50 Color in JSON\nDESCRIPTION: This snippet presents a JSON format for a color in the XYZ-D50 color space, similar to XYZ-D65 but adapted for D50 illumination conditions in color management systems. X, Y, and Z values are provided with accompanying alpha and hexadecimal equivalents. This format is ideal for precise color conversions and archival storage.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/color/color-type.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hot pink\": {\n    \"$type\": \"color\",\n    \"$value\": {\n      \"colorSpace\": \"xyz-d50\",\n      \"components\": [0.5791, 0.2831, 0.728],\n      \"alpha\": 1,\n      \"hex\": \"#ff00ff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Fallback Example for Object Stroke Style Token\nDESCRIPTION: This snippet demonstrates a CSS fallback representation for a stroke style token originally defined with an object value. Since CSS does not support detailed dash patterns or line caps for borders, the stroke style token \"notification-border-style\" is approximated with a standard CSS \"dashed\" border style for compatibility in tools or platforms with limited support.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/composite-types.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --notification-border-style: dashed;\n}\n```\n\n----------------------------------------\n\nTITLE: Representing a Composite Shadow Token in JSON\nDESCRIPTION: Provides a JSON example of a composite design token named `shadow-token`. It adheres to the Design Tokens Community Group format specification, using the `$type` property to denote it as a 'shadow' type and a `$value` object containing multiple child properties (color, offsetX, offsetY, blur, spread) to define the complex shadow value.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/terminology.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shadow-token\": {\n    \"$type\": \"shadow\",\n    \"$value\": {\n      \"color\": \"#00000080\",\n      \"offsetX\": { \"value\": 0.5, \"unit\": \"rem\" },\n      \"offsetY\": { \"value\": 0.5, \"unit\": \"rem\" },\n      \"blur\": { \"value\": 1.5, \"unit\": \"rem\" },\n      \"spread\": { \"value\": 0, \"unit\": \"rem\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Token Groups in JSON\nDESCRIPTION: Demonstrates adding optional '$description' properties to groups ('brand') and nested groups ('color') to provide context or documentation for the contained tokens. The descriptions must be plain JSON strings.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/groups.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brand\": {\n    \"$description\": \"Design tokens from our brand guidelines\",\n    \"color\": {\n      \"$description\": \"Our brand's primary color palette\",\n      \"acid green\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [0, 1, 0.4]\n        }\n      },\n      \"hot pink\": {\n        \"$type\": \"color\",\n        \"$value\": {\n          \"colorSpace\": \"srgb\",\n          \"components\": [1, 0, 1]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown files in ReSpec HTML documents\nDESCRIPTION: HTML code example showing how to include separate Markdown files in a ReSpec document using the data-include attribute, which helps prevent merge conflicts and makes editing more convenient.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<section\n  data-include=\"./file-format.md\"\n  data-include-format=\"markdown\"\n></section>\n```\n\n----------------------------------------\n\nTITLE: Defining a Design Token Alias in SCSS\nDESCRIPTION: Illustrates the concept of a design token alias (or reference) using SCSS syntax. The variable `$color-text-primary` is assigned the value of another variable `$color-palette-black`, effectively creating an alias where `$color-text-primary` references the value `#000000` defined by `$color-palette-black`.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/technical-reports/format/terminology.md#_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$color-palette-black: #000000;\n$color-text-primary: $color-palette-black;\n```\n\n----------------------------------------\n\nTITLE: Adding Contributor in Pull Request Comment (Text)\nDESCRIPTION: Syntax used within a pull request comment to explicitly list an additional contributor by their GitHub username. Each contributor should be listed on a separate line.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+@github_username\n```\n\n----------------------------------------\n\nTITLE: Removing Contributor in Pull Request Comment (Text)\nDESCRIPTION: Syntax used within a pull request comment to remove a contributor, either one previously added or the author themselves, from the list for the pull request.\nSOURCE: https://github.com/design-tokens/community-group/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-@github_username\n```"
  }
]