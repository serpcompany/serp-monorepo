[
  {
    "owner": "pmndrs",
    "repo": "react-spring",
    "content": "TITLE: TypeScript Definition for useSpring in React Spring\nDESCRIPTION: This snippet provides the TypeScript type definitions for the useSpring hook. It shows both function signatures: one that accepts a configuration object and returns SpringValues, and another that accepts a configuration function with optional dependencies and returns a tuple with springs and API.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-spring.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useSpring(configuration: ConfigObject): SpringValues\n\nfunction useSpring(\n  configurationFn: () => ConfigObject,\n  deps?: any[]\n): [springs: SpringValues, api: SpringRef]\n```\n\n----------------------------------------\n\nTITLE: Importing useSpring and animated from React Spring\nDESCRIPTION: Import statement for both the useSpring hook and animated component from the React Spring web package.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.getting-started.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n```\n\n----------------------------------------\n\nTITLE: Basic Animation Example using React Spring\nDESCRIPTION: Demonstrates how to create a simple fade-in animation using the useSpring hook from react-spring. The example shows the creation of animated styles and their application to an animated div component.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/README.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = useSpring({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n})\n\n<animated.div style={styles} />\n```\n\n----------------------------------------\n\nTITLE: Imperative Animation API with React Spring in React Three Fiber\nDESCRIPTION: A comprehensive example demonstrating React Spring's imperative API for high-performance 3D animations. The example includes custom spring configurations for different properties, mouse following behavior, and interactive scaling without requiring React re-renders.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.react-three-fiber.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, useEffect, useCallback } from 'react'\nimport { useSpring, animated } from '@react-spring/three'\nimport { Canvas, useThree } from '@react-three/fiber'\nimport { MeshDistortMaterial } from '@react-three/drei'\n\nconst AnimatedMeshDistortMaterial = animated(MeshDistortMaterial)\n\nconst MyScene = () => {\n  const isOver = useRef(false)\n\n  const { width, height } = useThree(state => state.size)\n\n  const [springs, api] = useSpring(\n    () => ({\n      scale: 1,\n      position: [0, 0],\n      color: '#ff6d6d',\n      config: key => {\n        switch (key) {\n          case 'scale':\n            return {\n              mass: 4,\n              friction: 10,\n            }\n          case 'position':\n            return { mass: 4, friction: 220 }\n          default:\n            return {}\n        }\n      },\n    }),\n    []\n  )\n\n  const handleClick = useCallback(() => {\n    let clicked = false\n\n    return () => {\n      clicked = !clicked\n      api.start({\n        color: clicked ? '#569AFF' : '#ff6d6d',\n      })\n    }\n  }, [])\n\n  const handlePointerEnter = () => {\n    api.start({\n      scale: 1.5,\n    })\n  }\n\n  const handlePointerLeave = () => {\n    api.start({\n      scale: 1,\n    })\n  }\n\n  const handleWindowPointerOver = useCallback(() => {\n    isOver.current = true\n  }, [])\n\n  const handleWindowPointerOut = useCallback(() => {\n    isOver.current = false\n\n    api.start({\n      position: [0, 0],\n    })\n  }, [])\n\n  const handlePointerMove = useCallback(\n    e => {\n      if (isOver.current) {\n        const x = (e.offsetX / width) * 2 - 1\n        const y = (e.offsetY / height) * -2 + 1\n\n        api.start({\n          position: [x * 5, y * 2],\n        })\n      }\n    },\n    [api, width, height]\n  )\n\n  useEffect(() => {\n    window.addEventListener('pointerover', handleWindowPointerOver)\n    window.addEventListener('pointerout', handleWindowPointerOut)\n    window.addEventListener('pointermove', handlePointerMove)\n\n    return () => {\n      window.removeEventListener('pointerover', handleWindowPointerOver)\n      window.removeEventListener('pointerout', handleWindowPointerOut)\n      window.removeEventListener('pointermove', handlePointerMove)\n    }\n  }, [handleWindowPointerOver, handleWindowPointerOut, handlePointerMove])\n\n  return (\n    <animated.mesh\n      onPointerEnter={handlePointerEnter}\n      onPointerLeave={handlePointerLeave}\n      onClick={handleClick()}\n      scale={springs.scale}\n      position={springs.position.to((x, y) => [x, y, 0])}\n    >\n      <sphereGeometry args={[1.5, 64, 32]} />\n      <AnimatedMeshDistortMaterial\n        speed={5}\n        distort={0.5}\n        color={springs.color}\n      />\n    </animated.mesh>\n  )\n}\n\nexport default function MyComponent() {\n  return (\n    <Canvas>\n      <ambientLight intensity={0.8} />\n      <pointLight intensity={1} position={[0, 6, 0]} />\n      <MyScene />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSpring with Function and Dependencies in React Spring\nDESCRIPTION: This snippet demonstrates how to use the useSpring hook with a function and dependencies array. The hook returns both the animated props and an API for controlling the animation programmatically. The animation transitions opacity from 0 to 1.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-spring.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const [props, api] = useSpring(\n    () => ({\n      from: { opacity: 0 },\n      to: { opacity: 1 },\n    }),\n    []\n  )\n\n  return <animated.div style={props}>Hello World</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Animated Web Element Usage in React Spring\nDESCRIPTION: Demonstrates the basic usage of animated components from React Spring for web elements, showing valid and invalid element usage.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.animated-elements.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { animated } from '@react-spring/web'\n\n// ✅ This will work because `div` is a web element\n<animated.div />\n\n// ❌ This will not work because `mesh` is not a web element.\n<animated.mesh />\n```\n\n----------------------------------------\n\nTITLE: Creating a Fade-In Component with React Spring\nDESCRIPTION: Demonstrates how to create a reusable FadeIn component using react-spring. The component uses the useSpring hook to animate opacity and vertical position based on an isVisible prop.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/README.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { animated, useSpring } from '@react-spring/web'\n\nconst FadeIn = ({ isVisible, children }) => {\n  const styles = useSpring({\n    opacity: isVisible ? 1 : 0,\n    y: isVisible ? 0 : 24,\n  })\n\n  return <animated.div style={styles}>{children}</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Scripts with Async Functions in React Spring\nDESCRIPTION: Shows how to write animation scripts using async functions with the 'to' prop. This approach provides maximum control over animations by allowing you to use await with the next function and cancel animations at any time.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.async-animations.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const springs = useSpring({\n    from: { background: '#ff6d6d', y: -40, x: 0 },\n    to: async (next, cancel) => {\n      await next({ x: 80, background: '#fff59a' })\n      await next({ y: 40, background: '#88DFAB' })\n      await next({ x: 0, background: '#569AFF' })\n      await next({ y: -40, background: '#ff6d6d' })\n    },\n    loop: true,\n  })\n\n  return (\n    <animated.div\n      style={{\n        width: 40,\n        height: 40,\n        borderRadius: 4,\n        ...springs,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Spring Values to Animated Component\nDESCRIPTION: Complete implementation of a React component with useSpring hook and applying the spring values to the animated div's style.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.getting-started.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const springs = useSpring({\n    from: { x: 0 },\n    to: { x: 100 },\n  })\n\n  return (\n    <animated.div\n      style={{\n        width: 80,\n        height: 80,\n        background: '#ff6d6d',\n        borderRadius: 8,\n        ...springs,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSpring with Config Object in React Spring\nDESCRIPTION: This snippet shows how to use the useSpring hook with a direct configuration object. The animation transitions opacity from 0 to 1, and the returned props are applied to an animated div component.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-spring.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const props = useSpring({\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n  })\n\n  return <animated.div style={props}>Hello World</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Spring with Yarn\nDESCRIPTION: Command to install the React Spring web package using Yarn package manager.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.getting-started.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @react-spring/web\n```\n\n----------------------------------------\n\nTITLE: Basic Animation with useSpring in React\nDESCRIPTION: Demonstrates a simple fade-in animation using the useSpring hook from react-spring. It shows how to create an animated div that changes opacity based on a state.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/packages/react-spring/README.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = useSpring({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n})\n\n<animated.div style={styles} />\n```\n\n----------------------------------------\n\nTITLE: Using useSprings with Function Configuration in React Spring\nDESCRIPTION: Demonstrates how to create multiple springs using the useSprings hook with a function configuration approach. This pattern provides access to both the springs and the API object for controlling animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-springs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSprings, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const [springs, api] = useSprings(\n    2,\n    () => ({\n      from: { opacity: 0 },\n      to: { opacity: 1 },\n    }),\n    []\n  )\n\n  return (\n    <div>\n      {springs.map(props => (\n        <animated.div style={props}>Hello World</animated.div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event-Driven Animation with useSpring API\nDESCRIPTION: Implementation of a click-triggered animation using the useSpring API's start method to control animation flow based on user interaction.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.getting-started.mdx#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const [springs, api] = useSpring(() => ({\n    from: { x: 0 },\n  }))\n\n  const handleClick = () => {\n    api.start({\n      from: {\n        x: 0,\n      },\n      to: {\n        x: 100,\n      },\n    })\n  }\n\n  return (\n    <animated.div\n      onClick={handleClick}\n      style={{\n        width: 80,\n        height: 80,\n        background: '#ff6d6d',\n        borderRadius: 8,\n        ...springs,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Imperative API vs State-Based Animations in React Spring\nDESCRIPTION: This code snippet demonstrates the difference between using the imperative API approach with useSpringRef versus a state-based approach with useState. The imperative method prevents re-renders during animation updates, as shown by the render ID display.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.imperative-api.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react'\nimport { useSpring, useSpringRef, animated } from '@react-spring/web'\n\nconst ApiComponent = () => {\n  const api = useSpringRef()\n  const springs = useSpring({\n    ref: api,\n    from: { x: 0 },\n  })\n\n  const handleClick = () => {\n    api.start({\n      to: {\n        x: springs.x.get() === 100 ? 0 : 100,\n      },\n    })\n  }\n\n  return (\n    <div className=\"flex-container\">\n      <animated.div\n        onClick={handleClick}\n        style={{\n          width: 80,\n          height: 80,\n          background: '#ff6d6d',\n          borderRadius: 8,\n          ...springs,\n        }}\n      />\n      <span>Render ID – {Math.random()}</span>\n    </div>\n  )\n}\n\nconst StateComponent = () => {\n  const [forward, setForward] = useState(false)\n\n  const springs = useSpring({\n    x: forward ? 100 : 0,\n  })\n\n  const handleClick = () => {\n    setForward(s => !s)\n  }\n\n  return (\n    <div className=\"flex-container\">\n      <animated.div\n        onClick={handleClick}\n        style={{\n          width: 80,\n          height: 80,\n          background: '#ff6d6d',\n          borderRadius: 8,\n          ...springs,\n        }}\n      />\n      <span>Render ID – {Math.random()}</span>\n    </div>\n  )\n}\n\nexport default function MyComponent() {\n  return (\n    <div className=\"flex-container--column\">\n      <ApiComponent />\n      <StateComponent />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Combining multiple SpringValues in React Spring\nDESCRIPTION: This example demonstrates how to combine multiple SpringValues using the to() function. It creates a 3D rotation effect by interpolating x, y, and z values together into a rotate3d transform.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.interpolation.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { animated, to, useSpring } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const props = useSpring({\n    from: { x: 0, y: 0, z: 0 },\n    to: { x: 1, y: 1, z: 1 },\n  })\n\n  return (\n    <animated.div\n      style={{\n        transform: to(\n          [props.x, props.y, props.z],\n          (x, y, z) => `rotate3d(${x}, ${y}, ${z}, 45deg)`\n        ),\n      }}\n    >\n      Hello World\n    </animated.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fade-In Component with react-spring\nDESCRIPTION: Illustrates how to create a reusable FadeIn component using react-spring's useSpring hook. The component animates opacity and vertical position based on an isVisible prop.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/packages/react-spring/README.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { animated, useSpring } from '@react-spring/web'\n\nconst FadeIn = ({ isVisible, children }) => {\n  const styles = useSpring({\n    opacity: isVisible ? 1 : 0,\n    y: isVisible ? 0 : 24,\n  })\n\n  return <animated.div style={styles}>{children}</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useSpring Hook with Configuration Object in React Spring\nDESCRIPTION: Example of initializing the useSpring hook with a configuration object that defines animatable properties like position, color, and scale along with animation configuration options.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.controllers-and-springs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst [styles, api] = useSpring(() => ({\n  x: 0,\n  y: 0,\n  backgroundColor: '#ff0000',\n  scale: [1, 1, 1],\n  config: {\n    precision: 0.0001,\n  },\n}))\n```\n\n----------------------------------------\n\nTITLE: Using useTransition with Function and Dependencies in React Spring\nDESCRIPTION: Example showing how to use useTransition hook with a function-based configuration. This pattern allows for animating elements with opacity transitions based on an array of data.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-transition.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTransition, animated } from '@react-spring/web'\n\nfunction MyComponent({ data = [1, 2, 3] }) {\n  const [transitions, api] = useTransition(data, () => ({\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 1 },\n  }))\n\n  return transitions((style, item) => (\n    <animated.div style={style}>{item}</animated.div>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useScroll Hook Implementation in React Spring\nDESCRIPTION: Demonstrates basic usage of useScroll hook to create a scroll-linked opacity animation. The component's opacity transitions from 0 to 1 as the user scrolls to the bottom of the page.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-scroll.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useScroll, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const { scrollYProgress } = useScroll()\n\n  return (\n    <animated.div style={{ opacity: scrollYProgress }}>\n      Hello World\n    </animated.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSpring with Function Notation and API\nDESCRIPTION: Alternative approach to useSpring that returns both spring values and an API object for controlling the animation programmatically.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.getting-started.mdx#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const [springs, api] = useSpring(() => ({\n    from: { x: 0 },\n  }))\n\n  return (\n    <animated.div\n      style={{\n        width: 80,\n        height: 80,\n        background: '#ff6d6d',\n        borderRadius: 8,\n        ...springs,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransition with Config Object in React Spring\nDESCRIPTION: Demonstrates using useTransition hook with a direct configuration object for handling element transitions. This approach provides a simpler way to define transition animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-transition.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTransition, animated } from '@react-spring/web'\n\nfunction MyComponent({ data = [1, 2, 3] }) {\n  const transitions = useTransition(data, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 1 },\n  })\n\n  return transitions((style, item) => (\n    <animated.div style={style}>{item}</animated.div>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useTrail with Function and Dependencies in React\nDESCRIPTION: This snippet demonstrates how to use the useTrail hook with a function and dependencies array. It creates a trail effect for two animated divs, transitioning their opacity from 0 to 1.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-trail.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTrail, animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const [trails, api] = useTrail(\n    2,\n    () => ({\n      from: { opacity: 0 },\n      to: { opacity: 1 },\n    }),\n    []\n  )\n\n  return (\n    <div>\n      {trails.map(props => (\n        <animated.div style={props}>Hello World</animated.div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Spring Properties in React Spring\nDESCRIPTION: Demonstrates how to use the config prop to customize mass, friction, and tension properties of a spring in a React component.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.config.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nconst MyComponent = () => {\n  const [springs, api] = useSpring(\n    () => ({\n      y: 0,\n      config: {\n        mass: 5,\n        friction: 120,\n        tension: 120,\n      },\n    }),\n    []\n  )\n\n  return <animated.div style={springs} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Control Using Controller in React Class Components\nDESCRIPTION: This example demonstrates how to use the Controller class in a React component to create and control animations. It shows how to initialize the controller with default values, toggle opacity animation, and connect the animations to an animated div.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Component, createRef } from 'react'\nimport { Controller, animated } from '@react-spring/web'\n\nclass AnimatedComponent extends Component {\n  isShowing = createRef(false)\n  animations = new Controller({ opacity: 0 })\n\n  toggle = () => {\n    this.animations.start({ opacity: this.isShowing ? 1 : 0 })\n\n    this.isShowing = !this.isShowing\n  }\n\n  render() {\n    return (\n      <>\n        <button onClick={this.toggle}>click</button>\n        <animated.div style={this.animations.springs}>I will fade</animated.div>\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with SpringValues in React Spring\nDESCRIPTION: Example showing how to extract and use SpringValues from the useSpring hook, highlighting that SpringValues can have arbitrary names not tied to specific element properties.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.controllers-and-springs.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst {\n  backgroundColor, // SpringValue<string>\n  o, // SpringValue<number>\n  trans, // SpringValue<number[]>\n} = useSpring({\n  backgroundColor: '#00ff00',\n  o: 0,\n  trans: [0, 1, 2],\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SpringValue in React Component - TypeScript/React\nDESCRIPTION: Demonstrates basic usage of SpringValue class in a React component to create a fade animation. Shows how to initialize, update, and bind the spring value to an animated component.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Component, createRef } from 'react'\nimport { SpringValue, animated } from '@react-spring/web'\n\nclass AnimatedComponent extends Component {\n  isShowing = createRef(false)\n  springOpacity = new SpringValue(0)\n\n  toggle = () => {\n    this.springOpacity.start(isShowing ? 0 : 1)\n\n    this.isShowing = !this.isShowing\n  }\n\n  render() {\n    return (\n      <>\n        <button onClick={this.toggle}>click</button>\n        <animated.div style={{ opacity: this.springOpacity }}>\n          I will fade\n        </animated.div>\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Partial Updates to Spring Configurations in React Spring\nDESCRIPTION: Illustrates how to partially update spring configurations using the spring API, merging new configs with original ones.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.config.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nconst MyComponent = () => {\n  const [springs, api] = useSpring(\n    () => ({\n      y: 0,\n      config: {\n        mass: 5,\n        friction: 120,\n        tension: 120,\n      },\n    }),\n    []\n  )\n\n  const handleClick = () => {\n    api.start({\n      y: 20,\n      config: {\n        friction: 10,\n      },\n    })\n  }\n\n  return <animated.div onClick={handleClick} style={springs} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fade-In Component with React Spring\nDESCRIPTION: A simple component that uses useSpring and animated to fade in content based on an isVisible prop. It animates both opacity and vertical position.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.testing.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst FadeIn = ({ isVisible, children }) => {\n  const styles = useSpring({\n    opacity: isVisible ? 1 : 0,\n    y: isVisible ? 0 : 24,\n  })\n\n  return <animated.div style={styles}>{children}</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useInView Hook in React Spring\nDESCRIPTION: Basic implementation of useInView hook without passing a function, returning a boolean for intersection status.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-in-view.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useInView, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const [ref, inView] = useInView()\n\n  return <animated.div ref={ref}>{inView ? 'Hello World' : null}</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SpringValue with .to() method in React Spring\nDESCRIPTION: This snippet demonstrates how to use the .to() method of a SpringValue to convert its value to another format. It creates a rotating animation by converting the x value to a CSS transform with a rotation in degrees.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.interpolation.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const props = useSpring({\n    from: { x: 0 },\n    to: { x: 360 },\n  })\n\n  return (\n    <animated.div\n      style={{ transform: props.x.to(value => `rotateZ(${value}deg)`) }}\n    >\n      Hello World\n    </animated.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useSpringValue Usage in React Spring\nDESCRIPTION: Demonstrates the basic usage of useSpringValue hook with a simple opacity animation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-spring-value.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpringValue, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const opacity = useSpringValue(0)\n\n  return <animated.div style={{ opacity }}>Hello World</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Timing with Timesteps in useChain\nDESCRIPTION: This snippet shows how to use timesteps and timeframe parameters in useChain to control when each animation in the sequence begins. It demonstrates how to delay the second animation by a specific percentage of the total animation timeframe.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-chain.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nuseChain([springRef, transRef], [0, 1], 1000)\n```\n\n----------------------------------------\n\nTITLE: Basic useChain Implementation with Spring and Transition Animations in React Spring\nDESCRIPTION: This example demonstrates how to orchestrate animations in sequence using useChain, first running a useSpring animation followed by a useTransition animation when the component mounts and the spring animation completes.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-chain.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  useTransition,\n  useSpring,\n  useChain,\n  animated,\n  useSpringRef,\n} from '@react-spring/web'\n\nconst data = ['hi', 'there!']\n\nfunction MyComponent() {\n  const springRef = useSpringRef()\n  const springs = useSpring({\n    ref: springRef,\n    from: { size: '20%' },\n    to: { size: '50%' },\n  })\n\n  const transRef = useSpringRef()\n  const transitions = useTransition(data, {\n    ref: transRef,\n    from: { scale: 0 },\n    enter: { scale: 1 },\n    leave: { scale: 0 },\n  })\n\n  useChain([springRef, transRef])\n\n  return (\n    <animated.div\n      style={{\n        height: springs.size,\n        width: springs.size,\n        background: 'blue',\n      }}\n    >\n      {transitions((style, item) => (\n        <animated.div\n          style={{\n            width: '120px',\n            height: '120px',\n            background: 'green',\n            ...style,\n          }}\n        >\n          {item}\n        </animated.div>\n      ))}\n    </animated.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Chained Animations with React Spring\nDESCRIPTION: Demonstrates a basic implementation of chained animations using an array of objects passed to the 'to' prop. This creates a sequence of animations where each step executes after the previous one completes.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.async-animations.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const springs = useSpring({\n    from: { background: '#ff6d6d', y: -40, x: 0 },\n    to: [\n      { x: 80, background: '#fff59a' },\n      { y: 40, background: '#88DFAB' },\n      { x: 0, background: '#569AFF' },\n      { y: -40, background: '#ff6d6d' },\n    ],\n    loop: true,\n  })\n\n  return (\n    <animated.div\n      style={{\n        width: 40,\n        height: 40,\n        borderRadius: 4,\n        ...springs,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using SpringRef with the Hook Approach in React Spring\nDESCRIPTION: Demonstrates how to use the useSpringRef hook to create a reference to control spring animations. The example shows initialization and connection to a useSpring animation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { animated, useSpring, useSpringRef } from '@react-spring/web'\n\nfunction MyComponent() {\n  const api = useSpringRef()\n\n  const props = useSpring({\n    ref: api,\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n  })\n\n  return <animated.div style={props}>Hello World</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using ranges and outputs with interpolation in React Spring\nDESCRIPTION: This snippet demonstrates how to use ranges and outputs with the to() method to map values from one range to another. It converts a value from 0-1 to 0-360 and then interpolates it to create a rotation effect.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.interpolation.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const props = useSpring({\n    from: { x: 0 },\n    to: { x: 1 },\n  })\n\n  return (\n    <animated.div\n      style={{\n        transform: props.x\n          .to([0, 1], [0, 360])\n          .to(value => `rotateZ(${value}deg)`),\n      }}\n    >\n      Hello World\n    </animated.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useTrail with Config Object in React\nDESCRIPTION: This snippet shows how to use the useTrail hook with a configuration object. It creates a trail effect for two animated divs, transitioning their opacity from 0 to 1 without using a function or dependencies array.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-trail.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTrail, animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const trails = useTrail(2, {\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n  })\n\n  return (\n    <div>\n      {trails.map(props => (\n        <animated.div style={props}>Hello World</animated.div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced useInView Implementation with Animation Function\nDESCRIPTION: Implementation of useInView hook with an animation function that defines from and to states, including custom intersection observer options.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-in-view.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useInView, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const [ref, springs] = useInView(\n    () => ({\n      from: {\n        opacity: 0,\n        y: 100,\n      },\n      to: {\n        opacity: 1,\n        y: 0,\n      },\n    }),\n    {\n      rootMargin: '-40% 0%',\n    }\n  )\n\n  return (\n    <animated.div ref={ref} style={springs}>\n      Hello World\n    </animated.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Parallax Component in React Spring\nDESCRIPTION: Demonstrates how to use the Parallax component with ParallaxLayer to create a simple parallax effect. The component creates a scrollable container for ParallaxLayers.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.parallax.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Parallax, ParallaxLayer } from '@react-spring/parallax'\n\nfunction MyComponent() {\n  return (\n    <Parallax pages={1} style={{ top: '0', left: '0' }}>\n      <ParallaxLayer offset={0} speed={2.5}>\n        <p>Parallax</p>\n      </ParallaxLayer>\n    </Parallax>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Transition Delay with useChain\nDESCRIPTION: This example shows how to set a transition to start after 40% of the total animation timeframe has elapsed, using the timesteps parameter of useChain without specifying the optional timeframe parameter.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-chain.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nuseChain([springRef, transRef], [0, 0.4])\n```\n\n----------------------------------------\n\nTITLE: Using ParallaxLayer with Parallax Component in React Spring\nDESCRIPTION: Basic implementation of ParallaxLayer within a Parallax container. The ParallaxLayer is configured with offset and speed properties to create a simple parallax effect.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.parallax-layer.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Parallax, ParallaxLayer } from '@react-spring/parallax'\n\nfunction MyComponent() {\n  return (\n    <Parallax pages={1} style={{ top: '0', left: '0' }}>\n      <ParallaxLayer offset={0} speed={2.5}>\n        <p>Parallax</p>\n      </ParallaxLayer>\n    </Parallax>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the to() function in React Spring\nDESCRIPTION: This snippet shows how to use the standalone to() function to convert SpringValue objects. It achieves the same rotation effect as the previous example but uses a different approach with the imported to function.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.interpolation.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpring, animated, to } from '@react-spring/web'\n\nfunction MyComponent() {\n  const props = useSpring({\n    from: { x: 0 },\n    to: { x: 360 },\n  })\n\n  return (\n    <animated.div\n      style={{ transform: to(props.x, value => `rotateZ(${value}deg)`) }}\n    >\n      Hello World\n    </animated.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSprings with Object Configuration in React Spring\nDESCRIPTION: Shows how to create multiple springs using the useSprings hook with a simple configuration object. This approach is more concise when you don't need the API reference for controlling the animations after initial creation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-springs.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSprings, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const springs = useSprings(2, {\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n  })\n\n  return (\n    <div>\n      {springs.map(props => (\n        <animated.div style={props}>Hello World</animated.div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Syntax for Chained Animations in React Spring\nDESCRIPTION: Illustrates how to use the array syntax with the 'to' prop to chain multiple animations. Each animation in the sequence starts after the previous one finishes, allowing for complex sequential animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.async-animations.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const springs = useSpring({\n    from: { background: '#ff6d6d', y: -40, x: 0 },\n    to: [\n      { x: 80, background: '#fff59a' },\n      { y: 40, background: '#88DFAB' },\n      { x: 0, background: '#569AFF' },\n      { y: -40, background: '#ff6d6d' },\n    ],\n    loop: true,\n  })\n\n  return (\n    <animated.div\n      style={{\n        width: 40,\n        height: 40,\n        borderRadius: 4,\n        ...springs,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ParallaxLayer State via Ref in TypeScript\nDESCRIPTION: TypeScript interface for the ParallaxLayer ref, showing the state and methods available when using a ref with ParallaxLayer components. Includes definitions for managing layer height, position, and sticky behavior.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.parallax-layer.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface IParallaxLayer {\n  horizontal: boolean\n  sticky: StickyConfig\n  isSticky: boolean\n  setHeight(height: number, immediate?: boolean): void\n  setPosition(height: number, scrollTop: number, immediate?: boolean): void\n}\n\ntype StickyConfig = { start?: number; end?: number } | undefined\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive 3D Blob Animation with React Spring and Three.js\nDESCRIPTION: A comprehensive example showing how to create an interactive 3D blob that responds to pointer events and syncs its position with external state using useSpring and useImperativeHandle. The component demonstrates position tracking, color changes, and scale animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.react-three-fiber.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useRef,\n  useEffect,\n  useCallback,\n  forwardRef,\n  useState,\n  useImperativeHandle,\n} from 'react'\nimport { useSpring, animated } from '@react-spring/three'\nimport { Canvas, useThree } from '@react-three/fiber'\nimport { MeshDistortMaterial } from '@react-three/drei'\nimport { Vector2 } from 'three'\n\nconst AnimatedMeshDistortMaterial = animated(MeshDistortMaterial)\n\nconst MyScene = forwardRef(({}, ref) => {\n  const isOver = useRef(false)\n  const [vector2] = useState(() => new Vector2())\n\n  const { width, height } = useThree(state => state.size)\n\n  const [springs, api] = useSpring(\n    () => ({\n      scale: 1,\n      position: [0, 0],\n      color: '#ff6d6d',\n      onChange: ({ value }) => {\n        vector2.set(value.position[0], value.position[1])\n      },\n      config: key => {\n        switch (key) {\n          case 'scale':\n            return {\n              mass: 4,\n              friction: 10,\n            }\n          case 'position':\n            return { mass: 4, friction: 220 }\n          default:\n            return {}\n        }\n      },\n    }),\n    []\n  )\n\n  useImperativeHandle(ref, () => ({\n    getCurrentPosition: () => vector2,\n  }))\n\n  const handleClick = useCallback(() => {\n    let clicked = false\n\n    return () => {\n      clicked = !clicked\n      api.start({\n        color: clicked ? '#569AFF' : '#ff6d6d',\n      })\n    }\n  }, [])\n\n  const handlePointerEnter = () => {\n    api.start({\n      scale: 1.5,\n    })\n  }\n\n  const handlePointerLeave = () => {\n    api.start({\n      scale: 1,\n    })\n  }\n\n  const handleWindowPointerOver = useCallback(() => {\n    isOver.current = true\n  }, [])\n\n  const handleWindowPointerOut = useCallback(() => {\n    isOver.current = false\n\n    api.start({\n      position: [0, 0],\n    })\n  }, [])\n\n  const handlePointerMove = useCallback(\n    e => {\n      if (isOver.current) {\n        const x = (e.offsetX / width) * 2 - 1\n        const y = (e.offsetY / height) * -2 + 1\n\n        api.start({\n          position: [x * 5, y * 2],\n        })\n      }\n    },\n    [api, width, height]\n  )\n\n  useEffect(() => {\n    window.addEventListener('pointerover', handleWindowPointerOver)\n    window.addEventListener('pointerout', handleWindowPointerOut)\n    window.addEventListener('pointermove', handlePointerMove)\n\n    return () => {\n      window.removeEventListener('pointerover', handleWindowPointerOver)\n      window.removeEventListener('pointerout', handleWindowPointerOut)\n      window.removeEventListener('pointermove', handlePointerMove)\n    }\n  }, [handleWindowPointerOver, handleWindowPointerOut, handlePointerMove])\n\n  return (\n    <animated.mesh\n      onPointerEnter={handlePointerEnter}\n      onPointerLeave={handlePointerLeave}\n      onClick={handleClick()}\n      scale={springs.scale}\n      position={springs.position.to((x, y) => [x, y, 0])}\n    >\n      <sphereGeometry args={[1.5, 64, 32]} />\n      <AnimatedMeshDistortMaterial\n        speed={5}\n        distort={0.5}\n        color={springs.color}\n      />\n    </animated.mesh>\n  )\n})\n\nexport default function MyComponent() {\n  const blobApi = useRef(null)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (blobApi.current) {\n        const { x, y } = blobApi.current.getCurrentPosition()\n        console.log('the blob is at position', { x, y })\n      }\n    }, 2000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return (\n    <Canvas>\n      <ambientLight intensity={0.8} />\n      <pointLight intensity={1} position={[0, 6, 0]} />\n      <MyScene ref={blobApi} />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the useSpring Hook with From/To Values\nDESCRIPTION: Implementation of the useSpring hook with configuration for animating an element from x position 0 to 100.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.getting-started.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  const springs = useSpring({\n    from: { x: 0 },\n    to: { x: 100 },\n  })\n\n  return (\n    <animated.div\n      style={{\n        width: 80,\n        height: 80,\n        background: '#ff6d6d',\n        borderRadius: 8,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Dialog Animation with Stitches and Radix UI\nDESCRIPTION: Comprehensive example combining React Spring animations with Radix UI Dialog component and Stitches styling.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.animated-elements.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport { useTransition, animated } from '@react-spring/web'\nimport { styled } from '@stitches/react'\nimport * as Dialog from '@radix-ui/react-dialog'\n\nexport default function () {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const handleDialogChange = (isOpen: boolean) => setIsOpen(isOpen)\n\n  const transition = useTransition(isOpen, {\n    from: {\n      scale: 0,\n      opacity: 0,\n    },\n    enter: {\n      scale: 1,\n      opacity: 1,\n    },\n    leave: {\n      scale: 0,\n      opacity: 0,\n    },\n  })\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleDialogChange}>\n      <Trigger>\n        <TriggerShadow />\n        <TriggerEdge />\n        <TriggerLabel>Open Modal</TriggerLabel>\n      </Trigger>\n      <Dialog.Portal forceMount>\n        {transition((style, isOpen) => (\n          <>\n            {isOpen ? (\n              <OverlayBackground style={{ opacity: style.opacity }} />\n            ) : null}\n            {isOpen ? (\n              <Content forceMount style={style}>\n                <DialogHeader>\n                  <CloseButton>\n                    <svg\n                      width=\"32\"\n                      height=\"32\"\n                      viewBox=\"0 0 32 32\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\">\n                      <path\n                        d=\"M15.9574 14.1689L8.59651 6.75098L6.73232 8.59598L14.1313 16.071L6.71338 23.4129L8.5964 25.2769L15.9574 17.8779L23.3943 25.2769L25.2392 23.4129L17.8213 16.071L25.2202 8.59598L23.3752 6.75098L15.9574 14.1689Z\"\n                        fill=\"currentColor\"\n                      />\n                    </svg>\n                  </CloseButton>\n                </DialogHeader>\n                <Title>Aha you found me!</Title>\n              </Content>\n            ) : null}\n          </>\n        ))}\n      </Dialog.Portal>\n    </Dialog.Root>\n  )\n```\n\n----------------------------------------\n\nTITLE: Using Fake Timers with React Spring Tests\nDESCRIPTION: Combining skipAnimation with Jest's fake timers to create synchronous tests without using async/await or waitFor, allowing for simpler test code.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.testing.mdx#2025-04-12_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render, screen, waitFor } from '@testing-library/react'\nimport { animated, useSpring, Globals } from '@react-spring/web'\n\nimport { FadeIn } from './FadeIn'\n\nbeforeAll(() => {\n  Globals.assign({\n    skipAnimation: true,\n  })\n\n  jest.useFakeTimers()\n})\n\ntest('Correctly renders the FadeIn component', async () => {\n  const { rerender } = render(<FadeIn>Hello!</FadeIn>)\n\n  const element = screen.getByText('Hello!')\n\n  expect(element).toHaveStyle('opacity: 0')\n\n  rerender(<FadeIn isVisible>Hello!</FadeIn>)\n\n  jest.advanceTimersByTime(1)\n\n  expect(element).toHaveStyle('opacity: 1')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-SpringValue Properties in React Spring\nDESCRIPTION: Shows how to configure different spring properties for individual spring values using a function in the config prop.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.config.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring, animated } from '@react-spring/web'\n\nconst MyComponent = () => {\n  const [springs, api] = useSpring(\n    () => ({\n      backgroundColor: '#00ff00',\n      y: 0,\n      config: key => {\n        if (key === 'y') {\n          return {\n            mass: 5,\n            friction: 120,\n            tension: 120,\n          }\n        }\n\n        return {}\n      },\n    }),\n    []\n  )\n\n  return <animated.div style={springs} />\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative Color Animation with React Spring in React Three Fiber\nDESCRIPTION: A simple example showing how to animate a 3D sphere's color using React Spring's declarative API. The component changes the material color when clicked, using the useSpring hook to create smooth transitions.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.react-three-fiber.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react'\nimport { useSpring, animated } from '@react-spring/three'\nimport { MeshDistortMaterial } from '@react-three/drei'\nimport { Canvas } from '@react-three/fiber'\n\nconst AnimatedMeshDistortMaterial = animated(MeshDistortMaterial)\n\nconst MyScene = () => {\n  const [clicked, setClicked] = useState(false)\n\n  const springs = useSpring({\n    color: clicked ? '#569AFF' : '#ff6d6d',\n  })\n\n  const handleClick = () => setClicked(s => !s)\n\n  return (\n    <mesh onClick={handleClick}>\n      <sphereGeometry args={[1.5, 64, 32]} />\n      <AnimatedMeshDistortMaterial\n        speed={5}\n        distort={0.5}\n        color={springs.color}\n      />\n    </mesh>\n  )\n}\n\nexport default function MyComponent() {\n  return (\n    <Canvas>\n      <ambientLight intensity={0.8} />\n      <pointLight intensity={1} position={[0, 6, 0]} />\n      <MyScene />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Parallax Scrolling Component in React\nDESCRIPTION: Example of creating a parallax scrolling component with multiple layers at different speeds and positions. Demonstrates basic usage including layer offsets, speeds, horizontal scrolling, sticky positioning, and programmatic scrolling.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/packages/parallax/README.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Parallax, ParallaxLayer } from '@react-spring/parallax'\n\nconst Example = () => {\n  const ref = useRef()\n  return (\n    <Parallax pages={3} ref={ref}>\n      <ParallaxLayer offset={0} speed={2.5}>\n        <p>Layers can contain anything</p>\n      </ParallaxLayer>\n\n      <ParallaxLayer offset={1} speed={-2} factor={1.5} horizontal />\n\n      <ParallaxLayer sticky={{ start: 1, end: 2 }} />\n\n      <ParallaxLayer offset={2} speed={1}>\n        <button onClick={() => ref.current.scrollTo(0)}>Scroll to top</button>\n      </ParallaxLayer>\n    </Parallax>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Start Method in SpringRef\nDESCRIPTION: Method for starting queued animations in each controller. Can optionally update the state before starting animations with a ControllerUpdate object or function.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): AsyncResult<Controller<State>>[]\nstart(props: ControllerUpdate<State>): AsyncResult<Controller<State>>[]\nstart(props: ControllerUpdateFn<State>): AsyncResult<Controller<State>>[]\nstart(\nprops?: ControllerUpdate<State> | ControllerUpdateFn<State>\n): AsyncResult<Controller<State>>[]\n```\n\n----------------------------------------\n\nTITLE: Using Spring Component with Render Props in React Spring\nDESCRIPTION: Demonstrates how to use the Spring component with render props pattern. The component accepts the same props as its hook counterpart but uses a render function that receives the animated style object.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components._index.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spring } from '@react-spring/web'\n\nconst MyComponent = () => {\n  return (\n    <Spring from={{ opacity: 0 }} to={{ opacity: 1 }}>\n      {style => <animated.div style={style} />}\n    </Spring>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spring Events in React Spring - Basic and Key-Specific Approaches\nDESCRIPTION: Demonstrates two approaches to implement event handlers in React Spring: a global handler for the entire spring and key-specific handlers for individual properties. Shows how onStart is triggered when animation begins.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nuseSpring(\n  () => ({\n    x: 0,\n    y: 0,\n    // onStart is called when the animation of the spring starts\n    onStart: () => console.log('the spring has started'),\n  }),\n  []\n)\n\nuseSpring(\n  () => ({\n    x: 0,\n    y: 0,\n    onStart: {\n      // onStart is called for each key when the animation starts\n      x: () => console.log('x key has started'),\n      y: () => console.log('y key has started'),\n    },\n  }),\n  []\n)\n```\n\n----------------------------------------\n\nTITLE: Explanation of Timesteps in useChain with Implementation Example\nDESCRIPTION: This code demonstrates how timesteps work internally in useChain by calculating delay times for each animation based on the timestep value and timeframe. It shows the underlying logic that applies delays to animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-chain.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst refs = [springRef, transRef]\nconst timesteps = [0, 1]\nconst timeframe = 1000\n\nrefs.forEach((ref, index) => {\n  /**\n   * for the first ref this would be 0 because 0 * 1000 = 0\n   * for the second ref this would be 1000 because 1 * 1000 = 1000\n   */\n  const time = timesteps[index] * timeframe\n\n  // the delay is then applied to the animation.\n  ref.delay = time\n})\n```\n\n----------------------------------------\n\nTITLE: Class Hierarchy in React Spring's Core Architecture\nDESCRIPTION: Code snippets showing the inheritance structure of SpringValue, FrameValue, and FluidValue classes, demonstrating how the animation system is built upon an extensible, event-driven architecture.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.controllers-and-springs.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// Taken from `@react-spring/core/src/SpringValue.ts\nclass SpringValue<T = any> extends FrameValue<T>\n\n// Taken from `@react-spring/core/src/FrameValue.ts\nabstract class FrameValue<T = any> extends FluidValue<\n  T,\n  FrameValue.Event<T>\n>\n\n// Taken from `@react-spring/shared/src/FluidValue.ts`\nabstract class FluidValue<T = any, E extends FluidEvent<T> = any>\n```\n\n----------------------------------------\n\nTITLE: Using SpringRef with Function Call in a Class Component\nDESCRIPTION: Shows how to use SpringRef via function call in a class component. This example includes toggling an animation using a controller connected to the SpringRef.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, createRef } from 'react'\nimport { Controller, animated, SpringRef } from '@react-spring/web'\n\nclass AnimatedComponent extends Component {\n  isShowing = createRef(false)\n  api = SpringRef()\n  animations = new Controller({ opacity: 0, ref: this.api })\n\n  toggle = () => {\n    this.animations.start({ opacity: this.isShowing ? 1 : 0 })\n\n    this.isShowing = !this.isShowing\n  }\n\n  render() {\n    return (\n      <>\n        <button onClick={this.toggle}>click</button>\n        <animated.div style={this.animations.springs}>I will fade</animated.div>\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Animated Div Component in React Spring\nDESCRIPTION: Implementation of a basic animated div component with styling properties to make it visible on screen.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.getting-started.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { animated } from '@react-spring/web'\n\nexport default function MyComponent() {\n  return (\n    <animated.div\n      style={{\n        width: 80,\n        height: 80,\n        background: '#ff6d6d',\n        borderRadius: 8,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for useSprings in React Spring\nDESCRIPTION: Provides TypeScript type definitions for the useSprings hook, showing function signatures for both object and function-based configuration patterns with proper typing for parameters and return values.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-springs.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useSprings(count: number, configuration: ConfigObject): SpringValues[]\n\nfunction useSprings(\n  count: number,\n  configurationFn: (springIndex: number) => ConfigObject,\n  deps?: any[]\n): [springs: SpringValues[], api: SpringRef]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for useSpringValue\nDESCRIPTION: TypeScript type definitions showing the function signatures for useSpringValue with and without configuration.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-spring-value.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useSpringValue<T>(value: T): SpringValue<T>\n\nfunction useSpringValue<T>(value: T, config: ConfigObject): SpringValue<T>\n```\n\n----------------------------------------\n\nTITLE: Styling Animated Components with Stitches\nDESCRIPTION: Shows how to combine React Spring's animated components with CSS-in-JS styling using Stitches.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.animated-elements.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '@stitches/react'\n\nconst MyModal = styled(animated.div, {\n  width: '40vw',\n  height: '20vh',\n  borderRadius: '8px',\n  backgroundColor: '$white80',\n})\n```\n\n----------------------------------------\n\nTITLE: Stop Method in SpringRef\nDESCRIPTION: Method for stopping animations controlled by the SpringRef. Can stop all animations or specify which ones to stop by their keys, with an option to cancel those animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): this\nstop(keys: OneOrMore<string>): this\nstop(cancel: boolean): this\nstop(cancel: boolean, keys: OneOrMore<string>): this\nstop(keys?: OneOrMore<string>): this\nstop(cancel: boolean, keys?: OneOrMore<string>): this\n```\n\n----------------------------------------\n\nTITLE: Implementing useResize Hook with React Spring\nDESCRIPTION: A basic example showing how to use the useResize hook to track and animate an element's dimensions. The hook returns a SpringValues object with width and height properties that can be used in animated components.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-resize.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useResize, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const { width, height } = useResize()\n\n  return <animated.div style={{ width, height }}>Hello World</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using requestAnimationFrame with @react-spring/rafz in TypeScript\nDESCRIPTION: Demonstrates the basic API for scheduling updates, running animation loops, and canceling operations. The core functionality allows for scheduling functions to run in different phases of the animation frame.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/packages/rafz/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { raf } from '@react-spring/rafz'\n\n// Schedule an update\nraf(dt => {})\n\n// Start an update loop\nraf(dt => true)\n\n// Cancel an update\nraf.cancel(fn)\n\n// Schedule a mutation\nraf.write(() => {})\n\n// Before any updates\nraf.onStart(() => {})\n\n// Before any mutations\nraf.onFrame(() => {})\n\n// After any mutations\nraf.onFinish(() => {})\n\n// Set a timeout that runs on nearest frame\nraf.setTimeout(() => {}, 1000)\n\n// Use a polyfill\nraf.use(require('@essentials/raf').raf)\n\n// Get the current time\nraf.now() // => number\n\n// Set how you want to control raf firing\nraf.frameLoop = 'demand' | 'always'\n```\n\n----------------------------------------\n\nTITLE: Implementing Steps Easing in React Spring\nDESCRIPTION: Demonstrates how to use the steps easing function in a spring configuration.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.config.mdx#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { easings } from '@react-spring/web'\n\nconst MyComponent = () => {\n  const [springs, api] = useSpring(\n    () => ({\n      y: 0,\n      config: {\n        easing: easings.steps(5),\n      },\n    }),\n    []\n  )\n\n  return <animated.div style={springs} />\n}\n```\n\n----------------------------------------\n\nTITLE: Imperative Control with useSpringValue\nDESCRIPTION: Demonstrates how to imperatively control spring animations using the start method on the SpringValue instance.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-spring-value.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpringValue, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const opacity = useSpringValue(0, {\n    config: {\n      mass: 2,\n      friction: 5,\n      tension: 80,\n    },\n  })\n\n  const handleClick = () => opacity.start(1)\n\n  return (\n    <animated.div onClick={handleClick} style={{ opacity }}>\n      Hello World\n    </animated.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for useInView\nDESCRIPTION: TypeScript type definitions for the useInView hook, including IntersectionArgs interface and function overloads.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-in-view.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface IntersectionArgs\n  extends Omit<IntersectionObserverInit, 'root' | 'threshold'> {\n  root?: React.MutableRefObject<HTMLElement>\n  once?: boolean\n  amount?: 'any' | 'all' | number | number[]\n}\n\nfunction useInView(\n  args?: IntersectionArgs\n): [ref: RefObject<any>, isInView: boolean]\n\nfunction useInView<Props extends object>(\n  props: () => Props & Valid<Props, UseSpringProps<Props>>,\n  args?: IntersectionArgs\n): [ref: RefObject<any>, springs: SpringValues]\n```\n\n----------------------------------------\n\nTITLE: Fixing Animation Jank with React Spring Precision Configuration\nDESCRIPTION: Example showing how to resolve animation jank issues in React Spring by configuring the precision property. This adjustment helps prevent subtle jumps at the end of animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.react-three-fiber.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpring } from '@react-spring/three'\n\nexport default function MyComponent() {\n  const [springs, api] = useSpring(() => ({\n    position: [0, 0, 0],\n    config: {\n      precision: 0.0001,\n    },\n  }))\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding the global to function in React Spring\nDESCRIPTION: This snippet shows how to override the global Interpolation factory used by React Spring. It replaces the default implementation with a custom interpolation implementation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.interpolation.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Globals } from '@react-spring/web'\n\nGlobals.assign({\n  to: (source, args) => new CustomInterpolation(source, args),\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useScroll Hook\nDESCRIPTION: TypeScript type definition for the useScroll hook, showing the function signature that accepts a configuration object and returns spring values.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-scroll.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useScroll(configuration: ConfigObject): SpringValues\n```\n\n----------------------------------------\n\nTITLE: Importing Spring Hook to Component Conversion in React Spring\nDESCRIPTION: Shows how to import both the hook and component versions from React Spring. The hook version uses 'use' prefix in its name while the component version omits it.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components._index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSpring } from '@react-spring/web'\n\n// becomes\n\nimport { Spring } from '@react-spring/web'\n```\n\n----------------------------------------\n\nTITLE: Upgrading from React Spring v8 to v9 Imperative API\nDESCRIPTION: This code snippet demonstrates how to migrate from the React Spring v8 API format to the new v9 imperative API format. It shows the old array destructuring pattern compared to the new object-based API approach.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.imperative-api.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst [styles, set, stop] = useSpring(() => ({ x: 0 }))\n\nset({\n  x: 1,\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst [styles, api] = useSpring(() => ({ x: 0 }))\n\napi.start({\n  x: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Config Visualizer in React Spring\nDESCRIPTION: Demonstrates a complex example of using spring configurations with a live visualizer and controls.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.config.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef, useState } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useControls } from 'leva'\n\nexport default function Card() {\n  const cardRef = useRef(null)\n  const config = useControls({\n    mass: 1,\n    tension: 170,\n    friction: 26,\n    clamp: false,\n    precision: 0.01,\n    velocity: 0,\n  })\n\n  const [{ xys }, api] = useSpring(() => ({ xys: [0, 0, 1], config }), [config])\n\n  const handleMouseLeave = () =>\n    api.start({\n      xys: [0, 0, 1],\n    })\n\n  const handleMouseMove = e => {\n    const rect = cardRef.current.getBoundingClientRect()\n    api.start({\n      xys: calc(e.clientX, e.clientY, rect),\n    })\n  }\n\n  return (\n    <div className=\"card-main\" ref={cardRef}>\n      <animated.div\n        className=\"card\"\n        style={{ transform: xys.to(trans) }}\n        onMouseLeave={handleMouseLeave}\n        onMouseMove={handleMouseMove}\n      />\n    </div>\n  )\n}\n\nconst calc = (x, y, rect) => [\n  -(y - rect.top - rect.height / 2) / 5,\n  (x - rect.left - rect.width / 2) / 5,\n  1.4,\n]\n\nconst trans = (x, y, s) =>\n  `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\n```\n\n----------------------------------------\n\nTITLE: Importing Preset Configurations in React Spring\nDESCRIPTION: Shows how to import and use preset configurations from React Spring's config object.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.config.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { config } from '@react-spring/web'\n```\n\n----------------------------------------\n\nTITLE: Installing React Spring Library\nDESCRIPTION: Shows how to install the react-spring library using npm. It provides two options: installing the entire library or installing a specific target (recommended).\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Install the entire library\nnpm install react-spring\n# or just install your specific target (recommended)\nnpm install @react-spring/web\n```\n\n----------------------------------------\n\nTITLE: Controller Each Method Definition\nDESCRIPTION: Defines the each method of the Controller class, which allows executing a function once per spring value with access to both the spring value itself and its key.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\neach(iterator: (spring: SpringValue, key: string) => void): void\n```\n\n----------------------------------------\n\nTITLE: Controller Start Method Definition\nDESCRIPTION: Defines the start method of the Controller class, which begins queued animations for every spring and returns a promise that resolves when animations complete or are cancelled.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nstart(props?: OneOrMore<ControllerUpdate<State>> | null): AsyncResult<this>;\n```\n\n----------------------------------------\n\nTITLE: Installing react-spring via npm\nDESCRIPTION: Shows how to install the entire react-spring library or a specific target using npm. It provides commands for both full library installation and recommended target-specific installation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/packages/react-spring/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Install the entire library\nnpm install react-spring\n# or just install your specific target (recommended)\nnpm install @react-spring/web\n```\n\n----------------------------------------\n\nTITLE: Defining SpringUpdate Types in TypeScript for React Spring\nDESCRIPTION: TypeScript type definitions for SpringUpdate and SpringsUpdate. SpringUpdate represents the props of a useSpring call or its async update function, while SpringsUpdate handles collections of controller updates.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.typescript.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype SpringUpdate<T = any> = ToProps<T> & SpringProps<T>\ntype SpringsUpdate<State extends Lookup = UnknownProps> =\n  | OneOrMore<ControllerUpdate<State>>\n  | ((index: number, ctrl: Controller<State>) => ControllerUpdate<State> | null)\n```\n\n----------------------------------------\n\nTITLE: Set Method in SpringRef\nDESCRIPTION: Method for updating the state of each controller without animation. Accepts either a partial state object or a function that returns a partial state object.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nset(values: Partial<State>): void\nset(values: (index: number, ctrl: Controller<State>) => Partial<State>): void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for useTrail Hook in React Spring\nDESCRIPTION: This snippet provides TypeScript definitions for the useTrail hook. It includes two function signatures: one for using a configuration object and another for using a configuration function with optional dependencies.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-trail.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useTrail(count: number, configuration: ConfigObject): SpringValues[]\n\nfunction useTrail(\n  count: number,\n  configurationFn: (springIndex: number) => ConfigObject,\n  deps?: any[]\n): [springs: SpringValues[], api: SpringRef]\n```\n\n----------------------------------------\n\nTITLE: Start Method Signatures - TypeScript\nDESCRIPTION: Method signatures for starting or updating animations with various parameter options.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): AsyncResult<this>;\nstart(props: SpringUpdate<T>): AsyncResult<this>;\nstart(to: T, props?: SpringProps<T>): AsyncResult<this>;\n```\n\n----------------------------------------\n\nTITLE: Initial Basic Test for React Spring Component\nDESCRIPTION: A simple test that renders the FadeIn component and checks its initial opacity. This test will pass since it only checks the initial state without animation changes.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.testing.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render, screen } from '@testing-library/react'\nimport { animated, useSpring } from '@react-spring/web'\n\nimport { FadeIn } from './FadeIn'\n\ntest('Correctly renders the FadeIn component', async () => {\n  const { rerender } = render(<FadeIn>Hello!</FadeIn>)\n\n  const element = screen.getByText('Hello!')\n\n  expect(element).toHaveStyle('opacity: 0')\n})\n```\n\n----------------------------------------\n\nTITLE: Using useIsomorphicLayoutEffect in React Spring Component\nDESCRIPTION: Demonstrates how to use the useIsomorphicLayoutEffect hook in a React component with React Spring animations. It updates the position of an animated div based on prop changes.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-isomorphic-layout-effect.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { animated, useSpring, useIsomorphicLayoutEffect } from '@react-spring/web'\n\nconst MyComponent = ({position}) => {\n    const [springs, api] = useSpring(() => {\n        y: 0,\n        x: 0,\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n        api.start({\n            from: {\n                x: 0,\n                y: 0,\n            },\n            to: {\n                x: position.x,\n                y: position.y,\n            }\n        })\n    },[position])\n\n    return <animated.div style={springs} />\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Resume Method Definition\nDESCRIPTION: Defines the resume method of the Controller class, which continues paused animations, optionally for specific keys only.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nresume(keys?: OneOrMore<string>): this;\n```\n\n----------------------------------------\n\nTITLE: Controller Set Method Implementation in React Spring\nDESCRIPTION: Shows how the Controller's set method works by iterating through the provided values and setting each corresponding SpringValue, demonstrating the relationship between Controllers and SpringValues.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.controllers-and-springs.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// The set method from the Controller class\nset(values) {\n  for (const key in values) {\n    const value = values[key]\n    if (!is.und(value)) {\n      this.springs[key].set(value)\n    }\n  }\n}\n\n// Would be used like this\ncontroller.set({\n  x: 0,\n  scale: [0,0,0]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useReducedMotion Hook in React Spring\nDESCRIPTION: A basic example showing how to use the useReducedMotion hook at the root of an application to detect if a user prefers reduced motion and conditionally render content based on that preference.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-reduced-motion.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReducedMotion } from '@react-spring/web'\n\nexport default function MyApp() {\n  const reducedMotion = useReducedMotion()\n\n  return (\n    <main>\n      <h1>Hello World</h1>\n      {reducedMotion ? <p>You're using reduced motion!</p> : null}\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using SpringValues Type in TypeScript for React Spring\nDESCRIPTION: Example of how to use the SpringValues type in TypeScript with React Spring. This example shows how to type the values returned by spring animation hooks for specific animated properties like opacity and y-position.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.typescript.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype MySpringValues = SpringValues<{\n  opacity: number\n  y: string\n}>\n```\n\n----------------------------------------\n\nTITLE: Importing the animated Component from React Spring\nDESCRIPTION: Import statement for the animated component which is the core component that handles animations in React Spring.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.getting-started.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { animated } from '@react-spring/web'\n```\n\n----------------------------------------\n\nTITLE: Configuring useSpringValue with Spring Parameters\nDESCRIPTION: Shows how to initialize useSpringValue with custom spring configuration parameters including mass, friction, and tension.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-spring-value.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpringValue, animated } from '@react-spring/web'\n\nfunction MyComponent() {\n  const opacity = useSpringValue(0, {\n    config: {\n      mass: 2,\n      friction: 5,\n      tension: 80,\n    },\n  })\n\n  return <animated.div style={{ opacity }}>Hello World</animated.div>\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Stop Method Definition\nDESCRIPTION: Defines the stop method of the Controller class with multiple overloads, allowing for stopping all animations or only those for specific keys, with options to cancel the animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nstop(): this;\nstop(keys: OneOrMore<string>): this;\nstop(cancel: boolean): this;\nstop(cancel: boolean, keys: OneOrMore<string>): this;\nstop(keys?: OneOrMore<string>): this;\nstop(cancel: boolean, keys?: OneOrMore<string>): this;\n```\n\n----------------------------------------\n\nTITLE: Controller Set Method Definition\nDESCRIPTION: Defines the set method of the Controller class, which allows setting the current values of springs without triggering animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nset(values: Partial<State>): void;\n```\n\n----------------------------------------\n\nTITLE: Animating External Components with React Spring\nDESCRIPTION: Example of wrapping external components with React Spring's animated HOC for animation capabilities.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.animated-elements.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// This comes from another library e.g. radix-ui\nconst ExternalComponent = props => {\n  return <div {...props} />\n}\n\n// MyApp.js\nimport { ExternalComponent } from 'external-library'\nimport { animated, useSpring } from '@react-spring/web'\n\nconst AnimatedDialog = animated(ExternalComponent)\n\nconst App = () => {\n  const styles = useSpring({\n    from: {\n      opacity: 0,\n      y: '6%',\n    },\n    to: {\n      opacity: 1,\n      y: 0,\n    },\n  })\n\n  return <AnimatedDialog style={styles} />\n}\n```\n\n----------------------------------------\n\nTITLE: Pause Method in SpringRef\nDESCRIPTION: Method for pausing animations controlled by the SpringRef. Can pause all animations or specify which ones to pause by their keys.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npause(): this\npause(keys: OneOrMore<string>): this\npause(keys?: OneOrMore<string>): this\n```\n\n----------------------------------------\n\nTITLE: Controller Pause Method Definition\nDESCRIPTION: Defines the pause method of the Controller class, which freezes active animations in time, optionally for specific keys only.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\npause(keys?: OneOrMore<string>): this;\n```\n\n----------------------------------------\n\nTITLE: Update Method in SpringRef\nDESCRIPTION: Method for adding props to each controller's update queue. Can provide the same props for all controllers or generate separate props for each controller with a function.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nupdate(props: ControllerUpdate<State>): this\nupdate(props: ControllerUpdateFn<State>): this\nupdate(props: ControllerUpdate<State> | ControllerUpdateFn<State>): this\n```\n\n----------------------------------------\n\nTITLE: Controlling Animation with skipAnimation Using Globals in React Spring\nDESCRIPTION: A live example demonstrating how to use the Globals.skipAnimation property to make animations jump to their goal values immediately instead of animating, similar to the behavior controlled by the useReducedMotion hook.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-reduced-motion.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef, useEffect } from 'react'\nimport { useSpring, animated, Globals } from '@react-spring/web'\n\nexport default function MyApp() {\n  const isRight = useRef(false)\n\n  const [springs, api] = useSpring(\n    () => ({\n      x: 0,\n    }),\n    []\n  )\n\n  const handleClick = () => {\n    api.start({\n      x: isRight.current ? 0 : 200,\n      onRest: () => {\n        isRight.current = !isRight.current\n      },\n    })\n  }\n\n  useEffect(() => {\n    Globals.assign({\n      skipAnimation: true,\n    })\n\n    return () => {\n      Globals.assign({\n        skipAnimation: false,\n      })\n    }\n  })\n\n  return (\n    <animated.div onClick={handleClick} className=\"spring-box\" style={springs}>\n      Click me!\n    </animated.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Update Method Definition\nDESCRIPTION: Defines the update method of the Controller class, which pushes an update onto the queue of each spring value without starting animation immediately.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nupdate(props: ControllerUpdate<State> | Falsy): this;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for onChange Event in React Spring\nDESCRIPTION: Type definition for the onChange event callback function in React Spring, which is called on every animation frame.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype OnChange = (\n  result: AnimationResult,\n  spring: Controller | SpringValue,\n  item?: Item\n) => void\n```\n\n----------------------------------------\n\nTITLE: Using raf.throttle for Frame-Limited Function Execution in TypeScript\nDESCRIPTION: Demonstrates how to throttle a function to execute at most once per animation frame. The throttled function will use the most recent arguments when called multiple times within a frame.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/packages/rafz/README.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet log = raf.throttle(console.log)\n\nlog(1)\nlog(2) // nothing logged yet\n\nraf.onStart(() => {\n  // \"2\" is logged by now\n})\n\n// Cancel a pending call.\nlog.cancel()\n\n// Access the wrapped function.\nlog.handler\n```\n\n----------------------------------------\n\nTITLE: Resume Method in SpringRef\nDESCRIPTION: Method for resuming paused animations controlled by the SpringRef. Can resume all animations or specify which ones to resume by their keys.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nresume(): this\nresume(keys: OneOrMore<string>): this\nresume(keys?: OneOrMore<string>): this\n```\n\n----------------------------------------\n\nTITLE: Set Method Signature - TypeScript\nDESCRIPTION: Method signature for setting the current value while stopping the current animation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nset(value: T | FluidValue<T>): this;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for onRest Event in React Spring\nDESCRIPTION: Type definition for the onRest event callback function in React Spring, which is called when the animation comes to a stand-still.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype OnRest = (\n  result: AnimationResult,\n  spring: Controller | SpringValue,\n  item?: Item\n) => void\n```\n\n----------------------------------------\n\nTITLE: Controller Get Method Definition\nDESCRIPTION: Defines the get method of the Controller class, which retrieves the current values of the springs being managed by the controller.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nget(): State & UnknownProps;\n```\n\n----------------------------------------\n\nTITLE: Controller Constructor Arguments Definition\nDESCRIPTION: Lists the possible arguments that can be passed to the Controller class constructor, including references, animation configurations, and various event callbacks.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.controller.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst ControllerProps = {\n  ref,\n  from,\n  loop,\n  onStart,\n  onRest,\n  onChange,\n  onPause,\n  onResume,\n  onProps,\n  onResolve,\n}\n```\n\n----------------------------------------\n\nTITLE: Pause Method Signature - TypeScript\nDESCRIPTION: Method signature for freezing the active animation in time and any pending updates.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npause(): void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for onPause Event in React Spring\nDESCRIPTION: Type definition for the onPause event callback function in React Spring, which is triggered when the animation is paused.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype OnPause = (\n  result: AnimationResult,\n  spring: Controller | SpringValue,\n  item?: Item\n) => void\n```\n\n----------------------------------------\n\nTITLE: Defining ControllerUpdate Type in TypeScript for React Spring\nDESCRIPTION: TypeScript type definition for ControllerUpdate, which represents a value that any SpringValue or Controller can animate to. It combines ToProps with ControllerProps for the given State and Item types.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.typescript.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type ControllerUpdate<\n  State extends Lookup = Lookup,\n  Item = undefined,\n> = unknown & ToProps<State> & ControllerProps<State, Item>\n```\n\n----------------------------------------\n\nTITLE: Resume Method Signature - TypeScript\nDESCRIPTION: Method signature for resuming a paused animation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nresume(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining AnimationProps Interface in TypeScript for React Spring\nDESCRIPTION: TypeScript interface for AnimationProps that defines the reserved animation properties excluding 'to', 'from', 'loop', and event props. These properties control how animations behave in React Spring.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.typescript.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AnimationProps<T = any> {\n  config?: SpringConfig | ((key: StringKeys<T>) => SpringConfig)\n  delay?: number | ((key: StringKeys<T>) => number)\n  immediate?: MatchProp<T>\n  cancel?: MatchProp<T>\n  pause?: MatchProp<T>\n  reset?: MatchProp<T>\n  reverse?: boolean\n  default?: boolean | SpringProps<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OneOrMore Type in TypeScript for React Spring\nDESCRIPTION: TypeScript utility type OneOrMore that allows a value to be either a single item of type T or an array of items of type T. This type is used throughout React Spring for parameters that accept either single values or collections.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.typescript.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type OneOrMore<T> = T | readonly T[]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Spring Values\nDESCRIPTION: Type definition showing how SpringValues are typed in the react-spring library, mapping animatable keys from a configuration object to SpringValue instances.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.controllers-and-springs.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype SpringValues<SpringConfig extends Record<string, any>> = {\n  [Key in keyof OnlyAnimatableKeys<SpringConfig>]: SpringValue\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Method Signature - TypeScript\nDESCRIPTION: Method signature for restarting the animation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreset(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining TransitionState Interface in TypeScript for React Spring\nDESCRIPTION: TypeScript interface for TransitionState, which represents the internal state attached to a particular Item in a transition. It tracks the item, its controller, phase, and expiration status.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.typescript.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransitionState<Item = any, State extends Lookup = Lookup> {\n  key: any\n  item: Item\n  ctrl: Controller<State>\n  phase: TransitionPhase\n  expired?: boolean\n  expirationId?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Add Method in SpringRef\nDESCRIPTION: Method for adding a controller to the SpringRef instance. Takes a Controller object as parameter.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nadd(ctrl: Controller<State>): void\n```\n\n----------------------------------------\n\nTITLE: Stop Method Signature - TypeScript\nDESCRIPTION: Method signature for stopping the current animation and canceling delayed updates.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstop(cancel?: boolean): this\n```\n\n----------------------------------------\n\nTITLE: Advance Method Signature - TypeScript\nDESCRIPTION: Method signature for advancing the current animation by a specified number of milliseconds.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nadvance(dt: number): void;\n```\n\n----------------------------------------\n\nTITLE: Skipping Animations in React Spring Tests\nDESCRIPTION: Using the Globals.assign method to skip animations during testing, which improves test performance. Still requires waitFor to allow for DOM updates.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.testing.mdx#2025-04-12_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render, screen, waitFor } from '@testing-library/react'\nimport { animated, useSpring, Globals } from '@react-spring/web'\n\nimport { FadeIn } from './FadeIn'\n\nbeforeAll(() => {\n  Globals.assign({\n    skipAnimation: true,\n  })\n})\n\ntest('Correctly renders the FadeIn component', async () => {\n  const { rerender } = render(<FadeIn>Hello!</FadeIn>)\n\n  const element = screen.getByText('Hello!')\n\n  expect(element).toHaveStyle('opacity: 0')\n\n  rerender(<FadeIn isVisible>Hello!</FadeIn>)\n\n  await waitFor(() => {\n    expect(element).toHaveStyle('opacity: 1')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Host Configuration Interface for React Spring Animation\nDESCRIPTION: TypeScript interface definitions for creating custom animated components using createHost function. Includes configuration for applying animated values, creating animated styles, and intercepting component props.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.animated-elements.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HostConfig {\n  /** Provide custom logic for native updates */\n  applyAnimatedValues: (node: any, props: Lookup) => boolean | void\n  /** Wrap the `style` prop with an animated node */\n  createAnimatedStyle: (style: Lookup) => Animated\n  /** Intercept props before they're passed to an animated component */\n  getComponentProps: (props: Lookup) => typeof props\n}\n\ntype AnimatableComponent = string | Exclude<React.ElementType<any>, string>\n\ntype CreateHost = (\n  components: AnimatableComponent[] | { [key: string]: AnimatableComponent },\n  config: Partial<HostConfig>\n) => {\n  animated: WithAnimated\n}\n```\n\n----------------------------------------\n\nTITLE: Finish Method Signature - TypeScript\nDESCRIPTION: Method signature for skipping to the end of the current animation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfinish(): this;\n```\n\n----------------------------------------\n\nTITLE: Defining Lookup Interface in TypeScript for React Spring\nDESCRIPTION: TypeScript interface for Lookup, which is primarily used to infer animatable properties in React Spring hooks. This interface is typically inferred rather than explicitly declared when using the library.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.typescript.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Lookup<T = any> {\n  [key: string]: T\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for useTransition Hook\nDESCRIPTION: TypeScript type definitions for the useTransition hook, showing function signatures for both configuration approaches and the transition function type definition.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-transition.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useTransition<Item extends any>(\n  data: Item[],\n  configuration: ConfigObject\n): TransitionFn<Item>\n\nfunction useTransition<Item extends any>(\n  data: Item[],\n  configurationFn: () => ConfigObject\n  deps?: any[]\n): [transition: TransitionFn<Item>, api: SpringRef]\n\ntype TransitionFn = (\n  style: SpringValues,\n  item: Item,\n  transitionState: TransitionState<Item>,\n  index: number\n) => ReactNode\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useResize Hook\nDESCRIPTION: TypeScript type definition for the useResize hook, showing that it accepts a configuration object and returns SpringValues. The configuration object contains options for customizing the resize behavior.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-resize.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useResize(configuration: ConfigObject): SpringValues\n```\n\n----------------------------------------\n\nTITLE: Update Method Signature - TypeScript\nDESCRIPTION: Method signature for pushing props into the pending queue.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-value.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nupdate(props: SpringUpdate<T>): this;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for useChain Hook\nDESCRIPTION: The complete TypeScript type definitions for the useChain hook, showing its three function overloads: basic usage without timing parameters, usage with timesteps, and usage with both timesteps and a custom timeframe.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.use-chain.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useChain(refs: ReadonlyArray<SpringRef>): void\n\nfunction useChain(refs: ReadonlyArray<SpringRef>, timeSteps: number[]): void\n\nfunction useChain(\n  refs: ReadonlyArray<SpringRef>,\n  timeSteps: number[],\n  timeFrame: number\n): void\n```\n\n----------------------------------------\n\nTITLE: HostConfig Interface Definition\nDESCRIPTION: Defines the TypeScript interface for HostConfig which contains methods for applying animations, creating animated styles, and intercepting component props.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.targets.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HostConfig {\n  /** Provide custom logic for native updates */\n  applyAnimatedValues: (node: any, props: Lookup) => boolean | void\n  /** Wrap the `style` prop with an animated node */\n  createAnimatedStyle: (style: Lookup) => Animated\n  /** Intercept props before they're passed to an animated component */\n  getComponentProps: (props: Lookup) => typeof props\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for onStart Event in React Spring\nDESCRIPTION: Type definition for the onStart event callback function in React Spring, which is triggered when animation begins.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype OnStart = (\n  result: AnimationResult,\n  spring: Controller | SpringValue,\n  item?: Item\n) => void\n```\n\n----------------------------------------\n\nTITLE: Importing Easing Functions in React Spring\nDESCRIPTION: Shows how to import easing functions from React Spring for use with duration-based animations.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.config.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { easings } from '@react-spring/web'\n```\n\n----------------------------------------\n\nTITLE: CreateHost Function Type Signature\nDESCRIPTION: Defines the TypeScript type signature for the createHost function that returns animated components related to a specific target.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.targets.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateHost = (\n  components: AnimatableComponent[] | { [key: string]: AnimatableComponent },\n  config: Partial<HostConfig>\n) => {\n  animated: WithAnimated\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Method in SpringRef\nDESCRIPTION: Method for removing a controller from the SpringRef instance. Takes a Controller object as parameter.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.spring-ref.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndelete(ctrl: Controller<State>): void\n```\n\n----------------------------------------\n\nTITLE: TypeScript definitions for to() function in React Spring\nDESCRIPTION: This code provides the TypeScript type definitions for the to() function in React Spring. It shows the various overloads available for different interpolation scenarios.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.interpolation.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nfunction to<Input extends ReadonlyArray<any>, Output>(\n  parents: Input,\n  interpolator: (...args: Interpolated<Input>) => Output\n): Interpolation<Output>\n\nfunction to<Input, Output>(\n  parent: FluidValue<Input> | Input,\n  interpolator: InterpolatorFn<Input, Output>\n): Interpolation<Output>\n\nfunction to<Out>(\n  parents: FluidValue[],\n  config: InterpolatorConfig<Out>\n): Interpolation<Animatable<Out>>\n\nfunction to<Out>(\n  parents: Array<FluidValue<number>> | FluidValue<number[]>,\n  range: readonly number[],\n  output: readonly Constrain<Out, Animatable>[],\n  extrapolate?: 'identity' | 'clamp' | 'extend'\n): Interpolation<Animatable<Out>>\n```\n\n----------------------------------------\n\nTITLE: Defining UnknownProps Interface in TypeScript for React Spring\nDESCRIPTION: TypeScript interface for UnknownProps, which is intersected with other object types to allow for unknown properties. This interface helps maintain type flexibility when working with various prop objects.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.typescript.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UnknownProps extends Lookup<unknown> {}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useReducedMotion in React Spring\nDESCRIPTION: The TypeScript type definition for the useReducedMotion hook, showing that it returns a boolean value indicating whether reduced motion is preferred.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-reduced-motion.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useReducedMotion(): boolean\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for AnimationResult in React Spring\nDESCRIPTION: TypeScript interface definition for the AnimationResult object that's passed to various event callbacks in React Spring, providing information about the current state of the animation.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\ninterface AnimationResult {\n    // Type inference will solve this for you.\n    value: SpringValue | { [keyof SpringValues]: number} | number\n    finished: boolean\n    cancelled: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React Spring Core Package in Markdown\nDESCRIPTION: This snippet defines the @react-spring/core package, which is the platform-agnostic core of the react-spring animation library. It serves as the foundation for implementing animations across different platforms.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/packages/core/README.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spring/core\n\nThe platform-agnostic core of `react-spring`\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for onResolve Event in React Spring\nDESCRIPTION: Type definition for the onResolve event callback function in React Spring, which is called when the promise for the update is resolved.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntype OnResolve = (\n  result: AnimationResult,\n  spring: Controller | SpringValue,\n  item?: Item\n) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Class Structure in TypeScript for React Spring\nDESCRIPTION: TypeScript class definition for Animation, which represents an animation being executed by the frameloop. This class is typically attached to a SpringValue and contains properties for tracking animation state and configuration.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.typescript.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animation<T = any> {\n  changed: boolean\n  values: readonly AnimatedValue[]\n  toValues: readonly number[] | null\n  fromValues: readonly number[]\n  to: T | FluidValue<T>\n  from: T | FluidValue<T>\n  config: AnimationConfig\n  immediate: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitFor to Test React Spring Animations\nDESCRIPTION: Using the waitFor utility from testing-library to wait for the animation to complete before checking the final state. This approach works but adds test execution time.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.testing.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render, screen, waitFor } from '@testing-library/react'\nimport { animated, useSpring } from '@react-spring/web'\n\nimport { FadeIn } from './FadeIn'\n\ntest('Correctly renders the FadeIn component', async () => {\n  const { rerender } = render(<FadeIn>Hello!</FadeIn>)\n\n  const element = screen.getByText('Hello!')\n\n  expect(element).toHaveStyle('opacity: 0')\n\n  rerender(<FadeIn isVisible>Hello!</FadeIn>)\n\n  await waitFor(() => {\n    expect(element).toHaveStyle('opacity: 1')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for useIsomorphicLayoutEffect in React Spring\nDESCRIPTION: Provides the TypeScript type signature for the useIsomorphicLayoutEffect hook, which matches the signatures of useEffect and useLayoutEffect.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.utilities.use-isomorphic-layout-effect.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction useIsomorphicLayoutEffect(effect: () => (void | () => void), deps?: ReadonlyArray<unknown>)\n```\n\n----------------------------------------\n\nTITLE: Testing Animation State Changes with React Spring\nDESCRIPTION: An expanded test that attempts to check if the opacity changes when the isVisible prop is updated. This test will fail because it doesn't account for the animation time.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.testing.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render, screen } from '@testing-library/react'\nimport { animated, useSpring } from '@react-spring/web'\n\nimport { FadeIn } from './FadeIn'\n\ntest('Correctly renders the FadeIn component', () => {\n  const { rerender } = render(<FadeIn>Hello!</FadeIn>)\n\n  const element = screen.getByText('Hello!')\n\n  expect(element).toHaveStyle('opacity: 0')\n\n  rerender(<FadeIn isVisible>Hello!</FadeIn>)\n\n  expect(element).toHaveStyle('opacity: 1')\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for onDestroyed Event in React Spring\nDESCRIPTION: Type definition for the onDestroyed event callback function in React Spring, which is called after a transition item is unmounted.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ntype OnDestroyed = (\n  item: Item\n  key: string | number\n) => void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for onResume Event in React Spring\nDESCRIPTION: Type definition for the onResume event callback function in React Spring, which is called when a paused animation is resumed.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype OnResume = (\n  result: AnimationResult,\n  spring: Controller | SpringValue,\n  item?: Item\n) => void\n```\n\n----------------------------------------\n\nTITLE: Error Output from Failed Animation Test\nDESCRIPTION: The error message shown when testing a React Spring animation without allowing time for the animation to complete. It shows the expected vs actual opacity values.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.testing.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexpect(element).toHaveStyle()\n\n- Expected\n\n- opacity: 1;\n+ opacity: 0;\n\n  21 |   rerender(<FadeIn isVisible>Hello!</FadeIn>);\n> 23 |   expect(element).toHaveStyle(\"opacity: 1\");\n  24 | });\n```\n\n----------------------------------------\n\nTITLE: Installing React Spring with React Three Fiber\nDESCRIPTION: Command to install the necessary packages for using React Spring with React Three Fiber. This includes the Three.js specific package for React Spring alongside React Three Fiber and Three.js itself.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.react-three-fiber.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-spring/three @react-three/fiber three\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for onProps Event in React Spring\nDESCRIPTION: Type definition for the onProps event callback function in React Spring, which is called after an animation is updated by new props, even if the animation remains idle.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.events.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ntype OnProps = (\n  props: {[key: string]: any}\n  spring: SpringValue,\n) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use CommonJS for React Spring\nDESCRIPTION: A Jest configuration that fixes the ESM module resolution issue by explicitly mapping React Spring imports to use CommonJS versions instead of ESM.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.testing.mdx#2025-04-12_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '@react-spring/web':\n      '<rootDir>/node_modules/@react-spring/web/react-spring-web.cjs.js',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parallax Component's Internal State with Ref in React\nDESCRIPTION: Shows the structure of the internal state accessible via ref when passed to the Parallax component. This allows for programmatic control and access to component properties.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.components.parallax.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface IParallax {\n  config: ConfigProp\n  horizontal: boolean\n  busy: boolean\n  space: number\n  offset: number\n  current: number\n  controller: Controller<{ scroll: number }>\n  layers: Set<IParallaxLayer>\n  container: React.MutableRefObject<any>\n  content: React.MutableRefObject<any>\n  scrollTo(offset: number): void\n  update(): void\n  stop(): void\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Formatting Utility in React\nDESCRIPTION: Imports a helper function to format frontmatter data for Remix meta tags. This allows for consistent metadata handling across the documentation site.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs._index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { formatFrontmatterToRemixMeta } from '../helpers/meta'\n\nexport const meta = formatFrontmatterToRemixMeta(frontmatter)\n```\n\n----------------------------------------\n\nTITLE: ESM Modules Error in Jest with React Spring\nDESCRIPTION: An error message that occurs when Jest incorrectly resolves ESM modules from React Spring. This happens because Jest tries to use ESM modules when it should use CommonJS.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides.testing.mdx#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npath/to/project/node_modules/@react-spring/web/react-spring-web.esm.js.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,global,jest){import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\n```\n\n----------------------------------------\n\nTITLE: Installing a React Spring Target Package\nDESCRIPTION: Shows how to install a specific react-spring target package using yarn, following the @react-spring/[target] format.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.concepts.targets.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-spring/web\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Development Server\nDESCRIPTION: Command to start the Remix development server locally to test and develop the application.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Steps Easing Function Signature in React Spring\nDESCRIPTION: Shows the TypeScript signature for the steps easing function in React Spring.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced.config.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport function steps(\n  steps: number,\n  direction: Direction = 'end'\n): EasingFunction\n```\n\n----------------------------------------\n\nTITLE: Installing Remix Project Dependencies\nDESCRIPTION: Command to install the local dependencies required for a Remix project before running the development server.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Required File Structure for React-Spring Demos\nDESCRIPTION: Shows the minimum required file structure for a react-spring demo contribution. The structure includes public and src folders, styling configurations, and package information files.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/demo/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- public\n- src\n- - App.tsx\n- - index.tsx\n- .pretterrc\n- package.json\n- tsconfig.json // I would copy this from an existing one\n- thumbnail.png\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Konva GitHub Repository in Markdown\nDESCRIPTION: This snippet provides a markdown link to the Konva GitHub repository, indicating that the @react-spring/konva package offers support for Konva integration.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/targets/konva/README.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`konva`](https://github.com/konvajs/konva)\n```\n\n----------------------------------------\n\nTITLE: Installing React Spring Parallax Package with Yarn\nDESCRIPTION: Command to install the @react-spring/parallax package using Yarn package manager. Note that currently only @react-spring/web is supported.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/packages/parallax/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-spring/parallax\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Grid Component with React\nDESCRIPTION: Imports navigation tiles data and a NavigationGrid component, then renders a two-column grid of navigation options. This creates the main navigation structure for the documentation site.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs._index.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NAV_TILES } from '../data/fixtures'\nimport { NavigationGrid } from '../components/Grids/NavigationGrid'\n\n<NavigationGrid cols={2} tiles={NAV_TILES} />\n```\n\n----------------------------------------\n\nTITLE: Cloning React Spring Repository\nDESCRIPTION: Instructions for cloning the React Spring repository from GitHub\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/pmndrs/react-spring\ncd react-spring\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for React Spring Advanced API Page\nDESCRIPTION: YAML front matter that configures metadata for a React Spring documentation page. It sets the page title, sidebar position, and marks the page as hidden with 'noPage: true'.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.advanced._index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmeta:\n  title: Advanced API | React Spring\nsidebar_position: 5\nnoPage: true\n```\n\n----------------------------------------\n\nTITLE: Publishing with Changesets\nDESCRIPTION: Commands for managing package releases using Changesets, including adding new versions and publishing\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn changeset:add\nyarn vers\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Managing Prereleases\nDESCRIPTION: Commands for handling prerelease versions using Changesets, including entering and exiting prerelease mode\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/CONTRIBUTING.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn changeset pre enter beta | alpha | next\nyarn changeset pre exit\n```\n\n----------------------------------------\n\nTITLE: Webpack React Alias Configuration\nDESCRIPTION: Configuration for webpack to resolve React dependency conflicts by ensuring only one copy of React exists\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nalias: {\n  react: path.resolve('node_modules/react'),\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby React Alias Configuration\nDESCRIPTION: Configuration for Gatsby to resolve React dependency conflicts using gatsby-plugin-alias-imports\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  resolve: `gatsby-plugin-alias-imports`,\n  options: {\n    alias: {\n      react: path.resolve('node_modules/react'),\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for React Spring Guides Page\nDESCRIPTION: This YAML frontmatter block configures metadata for the React Spring guides documentation page. It sets the page title, defines its position in the sidebar navigation (position 6), and marks it with 'noPage: true' which likely prevents it from being rendered as a standalone page.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/app/routes/docs.guides._index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmeta:\n  title: Guides | React Spring\nsidebar_position: 6\nnoPage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel CLI\nDESCRIPTION: Commands to install the Vercel CLI globally and deploy a Remix project directly from the local directory without using Git.\nSOURCE: https://github.com/pmndrs/react-spring/blob/next/docs/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g vercel\nvercel\n```"
  }
]